public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue() / multiply(1000).doubleValue();      }      /**      * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {         return true;        case Token.FUNCTION:        case Token.REGEXP:        case Token.ARRAYLIT:         return false;        }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }         return true;       }          return true;       }          return true;       }          return true;       }          return true;       }           return true;       }           return true;       }           return true;       }           return true;       }           return true;       }            return true;       }            return true;       }            return true;       }
protected UnivariatePointValuePair doOptimize() {                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                        return current;                      }                  }              }               if (checker!= null) {                 if (checker.converged(getIterations(), previous, current)) {                     return current;                 }              }             }              if (checker!= null) {                 if (checker.converged(getIterations(), previous, current)) {                     return current;                 }              }             }              if (checker!= null) {                 if (checker.converged(getIterations(), previous, current)) {                     return current;                 }              }             }             if (checker!= null) {                 if (checker.converged(getIterations(), previous, current)) {                     return current;                 }              }             }              if (checker!= null) {                 if (checker.converged(getIterations(), previous, current)) {                      return current;                 }               }             }             if (checker!= null) {                 if (checker.converged(getIterations(), previous, current)) {                      return current;                  }               }
public double solve(final UnivariateRealFunction f,              return solve(f, initial, yInitial, max, yMax, initial, yInitial);          }          return solve(f, min, yMin, max, yMax, initial, yInitial);
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset < -23 || hoursOffset > 23) {              throw new IllegalArgumentException("Hours out of range: " + hoursOffset);          }         if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {              int hoursInMinutes = hoursOffset * 60;              if (hoursInMinutes < 0) {
public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }         if (!durationField.isSupported()) {             return 0;         }          return 1;      }         return 0;      }
private void interpretAssigns() {                  assign.assignNode.getLastChild(), true)) {                  assignedToUnknownValue = true;              }            } else if (hasPropertyAssign) {                  changes = markReferencedVar(var) || changes;                  maybeUnreferenced.remove(current);                  current--;              }           }           if (assignedToUnknownValue && hasPropertyAssign) {                  changes = markReferencedVar(var) || changes;                  maybeUnreferenced.remove(current);                  current--;              }           }           if (assignedToUnknownValue && hasPropertyAssign) {                  changes = markReferencedVar(var) || changes;                  maybeUnreferenced.remove(current);                  current--;              }           }           if (assignedToUnknownValue && hasPropertyAssign) {                  changes = markReferencedVar(var) || changes;                  maybeUnreferenced.remove(current);                  current--;              }           }           if (assignedToUnknownValue && hasPropertyAssign) {
case -2: public static int safeMultiply(int val1, int val2) {      public static long safeMultiply(long val1, int val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L;              case -2:                  return -val2;              case -1:                  return -val1;              case 0:                  return 0L;              case -2:                  return -val2;              case -1:                  return -val1;              case 0:                  return 0L;              case -2:                  return -val2;              case -1:                  return -val1;              case 0:                  return 0L;              case -2:                  return -val2;              case -1:                  return -val1;               case 0:                  return 0L;               case -2:                  return -val2;                case -1:                   return -val1;                 case 0:                     return 0L;                  case -2:                      return -val2;                   case -1:                       return -val1;                      case 0:                         return 0L;
private boolean isVarInlineForbidden(Var var) {       */      private boolean isInlinableObject(List<Reference> refs) {        boolean ret = false;        for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();         if (parent!= null && parent.isBlock()) {           Node stmt = parent.getFirstChild();           if (stmt.isReturn()) {             return true;           }         }        }      }       for (Reference ref : refs) {         Node name = ref.getNode();         Node parent = ref.getParent();         if (parent!= null && parent.isBlock()) {           Node stmt = parent.getFirstChild();           if (stmt.isReturn()) {             return true;           }         }       }      }       for (Reference ref : refs) {         Node name = ref.getNode();         Node parent = ref.getParent();         if (parent!= null && parent.isBlock()) {           Node stmt = parent.getFirstChild();           if (stmt.isReturn()) {             return true;           }         }       }      }       for (Reference ref : refs) {         Node name = ref.getNode();         Node parent = ref.getParent();         if (parent!= null && parent.isBlock()) {           Node stmt = parent.getFirstChild();           if (stmt.isReturn()) {             return true;           }         }       }      }       for (Reference ref : refs) {         Node name = ref.getNode();         Node parent = ref.getParent();         if (parent!= null && parent.isBlock()) {           Node stmt = parent.getFirstChild();           if (stmt.isReturn()) {              return true;           }         }      }      }       for (Reference ref : refs) {         Node name = ref.getNode();         Node parent = ref.getParent();         if (parent!= null && parent.isBlock()) {           Node stmt = parent.getFirstChild();
public EqualsBuilder append(Object lhs, Object rhs) {          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs.getClass()!= rhs.getClass()) {              this.setEquals(false);          }           isEquals = lhs.equals(rhs);         }          Class rhsClass = rhs.getClass();          if (!rhsClass.isArray()) {                  isEquals = rhs.equals(lhs);          } else if (rhs.getClass()!= lhs.getClass()) {                  this.setEquals(false);          }           isEquals = rhs.equals(lhs);         }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs.getClass()!= rhs.getClass()) {                  this.setEquals(false);          }           isEquals = lhs.equals(rhs);         }          Class rhsClass = rhs.getClass();          if (!rhsClass.isArray()) {                  isEquals = rhs.equals(lhs);          } else if (rhs.getClass()!= lhs.getClass()) {                   this.setEquals(false);          }           isEquals = rhs.equals(lhs);         }          isEquals = lhs.equals(rhs);         }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                   isEquals = lhs.equals(rhs);          } else if (lhs.getClass()!= rhs.getClass()) {                    this.setEquals(false);           }            isEquals = lhs.equals(rhs);          }
private Node tryMinimizeIf(Node n) {              !mayEffectMutableState(lhs)) {              n.removeChild(cond);              Node assignName = thenOp.removeFirstChild();             if (!mayHaveSideEffects(lhs)) {               n.removeChild(cond);             }              Node assignName = thenOp.removeFirstChild();             if (!mayHaveSideEffects(lhs)) {               n.removeChild(cond);             }              Node assignName = thenOp.removeFirstChild();             if (!mayHaveSideEffects(lhs)) {               n.removeChild(cond);             }              Node assignName = thenOp.removeFirstChild();             if (!mayHaveSideEffects(lhs)) {               n.removeChild(cond);             }              Node assignName = thenOp.removeFirstChild();             if (!mayHaveSideEffects(lhs)) {               n.removeChild(cond);             }              Node assignName = thenOp.removeFirstChild();             if (!mayHaveSideEffects(lhs)) {               n.removeChild(cond);             }              Node assignName = thenOp.removeFirstChild();             if (!mayHaveSideEffects(lhs)) {               n.removeChild(cond);             }              Node assignName = thenOp.removeFirstChild();             if (!mayHaveSideEffects(lhs)) {                n.removeChild(cond);              }               Node assignName = thenOp.removeFirstChild();              if (!mayHaveSideEffects(lhs)) {                 n.removeChild(cond);              }             }              Node assignName = thenOp.removeFirstChild();             if (!mayHaveSideEffects(lhs)) {                 n.removeChild(cond);              }               Node assignName = thenOp.removeFirstChild();              if (!mayHaveSideEffects(lhs)) {
private boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) { boolean isInlinableObject(List<Reference> refs) {
private void findAliases(NodeTraversal t) {          Node n = v.getNode();          int type = n.getType();          Node parent = n.getParent();         if (parent.isVar()) {           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {            String name = n.getString();            Var aliasVar = scope.getVar(name);            aliases.put(name, aliasVar);           }         }          if (n.hasChildren()) {           if (n.getFirstChild().isQualifiedName()) {            String name = n.getString();            Var aliasVar = scope.getVar(name);            aliases.put(name, aliasVar);           }          }         }          if (n.hasChildren()) {           if (n.getFirstChild().isQualifiedName()) {            String name = n.getString();            Var aliasVar = scope.getVar(name);            aliases.put(name, aliasVar);           }          }         }          if (n.hasChildren()) {           if (n.getFirstChild().isQualifiedName()) {            String name = n.getString();             Var aliasVar = scope.getVar(name);             aliases.put(name, aliasVar);           }          }         }          if (n.hasChildren()) {            if (n.getFirstChild().isQualifiedName()) {             String name = n.getString();              Var aliasVar = scope.getVar(name);               aliases.put(name, aliasVar);            }          }         }          if (n.hasChildren()) {           if (n.getFirstChild().isQualifiedName()) {              String name = n.getString();               Var aliasVar = scope.getVar(name);                aliases.put(name, aliasVar);
public void exitScope(NodeTraversal t) {        if (t.getScopeDepth() == 2) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;          return;         }        }          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;          return;        }          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;          return;        }          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;          return;        }          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;          return;        }          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;          return;        }          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;          return;        }          renameNamespaceShadows(t);           aliases.clear();           forbiddenLocals.clear();            transformation = null;            return;          }            renameNamespaceShadows(t);             aliases.clear();             forbiddenLocals.clear();
public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {           return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());        }       /**       * @return <code>null</code>.        */        public static <T> T isA(Class<T> clazz) {            return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());        }        /**
protected UnivariatePointValuePair doOptimize() {                       }                  } } else {                 return                                best(current,                                     previous,                               isMinim);              }              incrementIterationCount();
public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true, true, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true, true, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true, true, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true, true, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true, true, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true, true, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true, true, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true, true, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {          escapeJavaStyleString(out, str, false, true, true, true);      }      /**      * @throws IOException if error occurs on underlying Writer       */
private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object      private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject(injected);              if (injected!= null) {                  injectionOccurred |= true;                  mocks.remove(injected);              }          }           for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();              Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject(injected);              if (injected!= null) {                  injectionOccurred |= true;                  mocks.remove(injected);              }          }           for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();              Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject(injected);               if (injected!= null) {
public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    }    }
protected void computeGeometricalProperties() {          if (v.length == 0) {              final BSPTree<Euclidean2D> tree = getTree(true);             if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);             }          }       }          if (v.length == 0) {             final BSPTree<Euclidean2D> tree = getTree(false);             if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);             }          }       }          if (v.length == 0) {             final BSPTree<Euclidean2D> tree = getTree(true);             if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);             }         }       }          if (v.length == 0) {             final BSPTree<Euclidean2D> tree = getTree(false);             if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                   setBarycenter(Vector2D.NaN);             }          }       }          if (v.length == 0) {             final BSPTree<Euclidean2D> tree = getTree(true);              if ((Boolean) tree.getAttribute()) {                   setSize(Double.POSITIVE_INFINITY);                    setBarycenter(Vector2D.NaN);              }          }       }           if (v.length == 0) {              final BSPTree<Euclidean2D> tree = getTree(false);
public boolean setPrototype(PrototypeObjectType prototype) {        return false;      }      boolean replacedPrototype = prototype!= null;      this.prototype = prototype;      this.prototypeSlot = new SimpleSlot("prototype", prototype, true, true);      this.prototype.setOwnerFunction(this);      if (isConstructor() || isInterface()) {        FunctionType superClass = getSuperClassConstructor();        if (isInterface()) {          return false;        }         return superClass.isInterface();        }         return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }        return false;      }         return false;      }         return false;      }         return false;      }         return false;      }         return false;      }         return false;      }          return false;      }          return false;      }          return false;      }          return false;      }          return false;      }           return false;      }           return false;      }           return false;      }           return false;      }
public RealMatrix getU()              if (m >= n) {                  final RealMatrix e =                      eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);                  final double[][] eData = e.getData();                  final double[][] wData = new double[m][p];                  double[] ei1 = eData[0];                  for (int i = 0; i < p; ++i) {                       final double mi = mainBidiagonal[i];                        final double[] ei0 = ei1;
public boolean apply(Node input) {                   case Token.REGEXP:                   case Token.NEW:                    return true;                 }                 return false;               }              }             }            }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }
public static Number createNumber(String str) throws NumberFormatException {           if (decPos > -1) {              if (expPos > -1) {                 if (expPos < decPos) {                      throw new NumberFormatException(str + " is not a valid number.");                  }                  dec = str.substring(decPos + 1, expPos);              }           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }               dec = str.substring(decPos + 1, expPos);           }                dec = str.substring(decPos + 1, expPos);           }
public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);         if (v2D == null) {           return null;         }          Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
public FitnessFunction() {           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }
private boolean canInline(          }        }      }    }
public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit);         this.elitismRate = elitismRate;      }
void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);          addExpr(first, p + 1, rhsContext);        } else {          addExpr(first, p, context);          cc.addOp(opstr, true);          addExpr(last, p + 1, rhsContext);        }        return;      }
public long add(long instant, long value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertLocalToUTC(localInstant, false, instant);              }          }       }
protected PointVectorValuePair doOptimize() {                      if (checker!= null) {                         if (checker.converged(getIterations(), previous, current)) {                               setCost(currentCost);                               return current;                          }                      }                        if (checker!= null) {                         if (checker.converged(getIterations(), previous, current)) {                               setCost(currentCost);                               return current;                         }                     }                 }             }             protected PointVectorValuePair doOptimize() {                if (checker!= null) {                    if (checker.converged(getIterations(), previous, current)) {                         setCost(currentCost);                         return current;                    }                }                 if (checker!= null) {                    if (checker.converged(getIterations(), previous, current)) {                         setCost(currentCost);                         return current;                     }                }            }             protected PointVectorValuePair doOptimize() {                if (checker!= null) {                    if (checker.converged(getIterations(), previous, current)) {
void tryMinimizeExits(Node n, int exitType, String labelName) {        * can cause problems if it changes the completion type of the finally         * block. See ECMA 262 Sections 8.9 & 12.14         */       if (NodeUtil.hasFinally(n)) {         Node finallyBlock = n.getFirstChild();         tryMinimizeExits(finallyBlock, exitType, labelName);       }      }     }
public BooleanOptionHandler(        @Override        public int parseArguments(Parameters params) throws CmdLineException {         String param = params.getParameter(0);         if (param == null ||!Character.isHighSurrogate(param)) {            setter.addValue(true);         }
private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private static final long serialVersionUID = 9386874258972L;                 private static final long serialVersionUID = 9386874258972L;                 private static final long serialVersionUID = 9386874258972L;                 private static final long serialVersionUID = 9386874258972L;                  private static final long serialVersionUID = 9386874258972L;                  private static final long serialVersionUID = 9386874258972L;                  private static final long serialVersionUID = 9386874258972L;                  private static final long serialVersionUID = 9386874258972L;                  private static final long serialVersionUID = 9386874258972L;                   private static final long serialVersionUID = 9386874258972L;                   private static final long serialVersion
private static synchronized String getConvertedId(String id) {
return isNoObjectType() || isNoResolvedType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }
public TimeSeries createCopy(int start, int end)              throw new IllegalArgumentException("Requires start <= end.");           }           TimeSeries copy = (TimeSeries) super.clone();           copy.data = new java.util.ArrayList();           if (this.data.size() > 0) {               for (int index = start; index <= end; index++) {                  Object obj = this.data.get(index);                  if (obj instanceof TimeSeries) {                      TimeSeries objTimeSeries = (TimeSeries) obj;                      copy.data.add(objTimeSeries);                  } else {                       Object obj2 = this.data.get(index);                       if (obj2 instanceof TimeSeries) {                           TimeSeries objTimeSeries = (TimeSeries) obj2;                           copy.data.add(objTimeSeries);                      } else {                           Object obj3 = this.data.get(index);                           if (obj3 instanceof TimeSeries) {                               TimeSeries objTimeSeries = (TimeSeries) obj3;                                copy.data.add(objTimeSeries);                           } else {                                Object obj4 = this.data.get(index);                                if (obj4 instanceof TimeSeries) {                                     TimeSeries objTimeSeries = (TimeSeries) obj4;                                      copy.data.add(objTimeSeries);                                 } else {
public String escape(String str) {      public void escape(Writer writer, String str) throws IOException {          int len = str.length();          for (int i = 0; i < len; i++) {             char c = str.charAt(i);              String entityName = this.entityName(c);              if (entityName == null) {                 if (c > 0x7F) { writer.write("&
public void setHourOfDay(final int hourOfDay) {       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }               setMillis(getChronology().hours().add(getMillis(), hours));      }                setMillis(getChronology().hours().add(getMillis(), hours));      }                setMillis(getChronology().hours().add(getMillis(), hours));      }                 setMillis(getChronology().hours().add(getMillis(), hours));      }                  setMillis(getChronology().hours().add(getMillis(), hours));      }                  setMillis(getChronology().hours().add(getMillis(), hours));      }                    setMillis(getChronology().hours().add(getMillis(), hours));      }                    setMillis(getChronology().hours().
public double integrate(final FirstOrderDifferentialEquations equations,
public static Number createNumber(final String str) throws NumberFormatException          final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);          try {                  final Float f = createFloat(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                      return f;                  } } } catch (final NumberFormatException nfe) {          }          try {                  final Double d = createDouble(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D &&!allZeros))) {                      return d;                  } } } catch (final NumberFormatException nfe) {          }         }          try {                 final Float f = createFloat(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                      return f;                  } } } catch (final NumberFormatException nfe) {          }         }          try {                  final Double d = createDouble(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D &&!allZeros))) {                      return d;                   } } } catch (final NumberFormatException nfe) {           }         }          try {                  final Float
public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             incrementidx();             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }
public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertLocalToUTC(localInstant, false, instant);              }          }       }
private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false;    if (block.hasChildren()) {      Preconditions.checkState(block.hasOneChild());      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);      }     }      Node cArg = callNode.getFirstChild().getNext();      if (!cArg.isBlock()) {        hasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);      }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);      }     }      Node cArg = callNode.getFirstChild().getNext();      if (!cArg.isBlock()) {        hasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);      }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);      }     }      Node cArg = callNode.getFirstChild().getNext();      if (!cArg.isBlock()) {        hasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);      }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);      }     }      Node cArg = callNode.getFirstChild().getNext();      if (!cArg.isBlock()) {        hasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);      }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);      }     }      Node cArg = callNode.getFirstChild().getNext();      if (!cArg.isBlock()) {        hasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);      }     }      Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }      }       Node cArg = callNode.getFirstChild().getNext();       if (!cArg.
private static final long serialVersionUID = -7105341425736035847L;      MockitoCore mockitoCore = new MockitoCore();      private Object answer(InvocationOnMock invocation) throws Throwable {           GenericMetadataSupport returnTypeGenericMetadata =                   actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());           Class<?> rawType = returnTypeGenericMetadata.rawType();           if (!mockitoCore.isTypeMockable(rawType)) {               return delegate.returnValueFor(rawType);           }           Object[] args = invocation.getArguments();           if (!mockitoCore.isTypeMockable(rawType)) {               return delegate.returnValueFor(rawType);           }           for (int i = 0; i < args.length; i++) {               return delegate.returnValueFor(args[i]);           }            for (int i = 0; i < args.length; i++) {               return delegate.returnValueFor(args[i]);           }            for (int i = 0; i < args.length; i++) {               return delegate.returnValueFor(args[i]);           }            for (int i = 0; i < args.length; i++) {               return delegate.returnValueFor(args[i]);            }             for (int i = 0; i < args.length; i++) {                return delegate.returnValueFor(args[i]);            }             for (int i = 0; i < args.length; i++) {                return delegate.returnValueFor(args[i]);             }              for (int i = 0; i < args.length; i++) {                 return delegate.returnValueFor(args[i]);              }               for (int i = 0; i < args.length; i++) {                  return delegate.returnValueFor
public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(getItemCount() - 1);           return clone;       }
public int parseInto(ReadWritableInstant instant, String text, int position) {          long instantMillis = instant.getMillis();          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);          chrono = selectChronology(chrono);         int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = selectChronology(chrono);        }          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = selectChronology(chrono);        }          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = selectChronology(chrono);        }          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = selectChronology(chrono);        }          int defaultYear = chrono.year().get(instantLocal);           DateTimeParserBucket bucket = new DateTimeParserBucket(               instantLocal, chrono, iLocale, iPivotYear, defaultYear);           chrono = selectChronology(chrono);        }           int defaultYear = chrono.year().get(instantLocal);            DateTimeParserBucket bucket = new DateTimeParserBucket(                instantLocal, chrono, iLocale, iPivotYear, defaultYear);            chrono = selectChronology(chrono);        }           int defaultYear = chrono.year().get(instantLocal);            DateTimeParserBucket bucket = new DateTimeParserBucket(                 instantLocal, chrono, iLocale, iPivotYear, defaultYear);
public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",                  undesired.getLocation()          ));      }
public static boolean isJSIdentifier(String s) {        int length = s.length();        if (Length == 0 ||           !Character.isJavaIdentifierStart(s.charAt(0))) {          return false;         }         for (int i = 1; i < length; i++) {          if (!Character.isJavaIdentifierPart(s.charAt(i))) {            return false;          }         }        }        for (int i = 1; i < length; i++) {         if (!Character.isJavaIdentifierPart(s.charAt(i))) {           return false;          }         }        }        return false;       }        for (int i = 1; i < length; i++) {         if (!Character.isJavaIdentifierPart(s.charAt(i))) {           return false;          }         }        }        return false;       }        for (int i = 1; i < length; i++) {         if (!Character.isJavaIdentifierPart(s.charAt(i))) {           return false;          }         }        }        return false;       }        for (int i = 1; i < length; i++) {         if (!Character.isJavaIdentifierPart(s.charAt(i))) {           return false;          }         }        }        return false;       }        for (int i = 1; i < length; i++) {         if (!Character.isJavaIdentifierPart(s.charAt(i))) {           return false;          }         }        }        return false;       }        for (int i = 1; i < length; i++) {         if (!Character.isJavaIdentifierPart(s.charAt(i))) {           return false;           }          }         }         return false;        }         for (int i = 1; i < length; i++) {          if (!Character.isJavaIdentifierPart(s.
private void visitNew(NodeTraversal t, Node n) {      JSType type = getJSType(constructor).restrictByNotNullOrUndefined();      if (!type.isConstructor() ||!type.isEmptyType() ||!type.isUnknownType()) {         FunctionType fnType = type.toMaybeFunctionType();        if (fnType!= null) {          visitParameterList(t, n, fnType);          ensureTyped(t, n, fnType.getInstanceType());         } else {           type = getJSType(constructor).restrictByNotNullOrUndefined();          }        }      }      if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {        FunctionType fnType = type.toMaybeFunctionType();       if (fnType!= null) {          visitParameterList(t, n, fnType);          ensureTyped(t, n, fnType.getInstanceType());         } else {           type = getJSType(constructor).restrictByNotNullOrUndefined();          }        }      }      if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {        FunctionType fnType = type.toMaybeFunctionType();        if (fnType!= null) {           visitParameterList(t, n, fnType);           ensureTyped(t, n, fnType.getInstanceType());          } else {            type = getJSType(constructor).restrictByNotNullOrUndefined();           }        }      }      if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {         FunctionType fnType = type.toMaybeFunctionType();        if (fnType!= null) {            visitParameterList(t, n, fnType);            ensureTyped(t, n, fnType.getInstanceType());           } else {             type = getJSType(constructor).restrictByNotNullOrUndefined();            }         }      }      if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {         FunctionType fnType = type.toMaybeFunctionType();         if (fnType!= null) {             visitParameterList(t, n, fnType);             ensureTyped(t, n, fnType.getInstanceType());
private void unrollBinaryOperator(      Node current = firstNonOperator;      do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }
public void setRangeAxes(ValueAxis[] axes) {       * @since 1.0.7        */       public int getRangeAxisIndex(ValueAxis axis) {          if (axis == null) {              throw new IllegalArgumentException("Null 'axis' argument.");          }           int result = this.rangeAxes.indexOf(axis);          if (result < 0) {              Plot parent = getParent();              int i = getRangeAxisIndex(axis);              if (i < 0) {                  Plot parent = getParent();                  int j = getRangeAxisIndex(axis);                  if (j < 0) {                       Plot parent = getParent();                       int k = getRangeAxisIndex(axis);                       if (k < 0) {                            Plot parent = getParent();                            int l = getRangeAxisIndex(axis);                            if (l < 0) {                                  Plot parent = getParent();                                  int m = getRangeAxisIndex(axis);                                  if (m < 0) {                                        Plot parent = getParent();                                         int n = getRangeAxisIndex(axis);                                        if (n < 0) {                                               Plot parent = getParent();                                               int o = getRangeAxisIndex(axis);                                                if (o < 0) {
public void removeRow(int rowIndex) {       */       public void removeRow(Comparable rowKey) {         if (rowKey == null) {           throw new IllegalArgumentException("Null 'rowKey' argument.");         }           int index = getRowIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }           int index = getIndex(rowKey);           removeRow(index);       }            int index = getIndex(rowKey);            removeRow(index);       }            int index = getIndex(rowKey);            removeRow(index);       }            int index = getIndex(rowKey);             removeRow(index);       }             int index = getIndex(rowKey);             removeRow(index);       }              int index = getIndex(rowKey);              removeRow(index);       }              int index = getIndex(rowKey);
public static double cosh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**      * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**      * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**      * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**      * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**      * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**      * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**      * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**      * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**      * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**      * @return {@code true} if the values are equal.       */      public static
public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }                setMillis(getChronology().minutes().add(getMillis(), minutes));      }                setMillis(get
private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,       do {         switch (token) {          case STAR:             if (ignoreStar) {             } else {               if (builder.length() > 0) {               }             }             }           }              if (builder.length() > 0) {             }              if (token == STAR) {               if (builder.length() > 0) {               }             }           }              if (token == STAR) {               if (builder.length() > 0) {               }             }           }              if (token == STAR) {               if (builder.length() > 0) {               }             }           }              if (token == STAR) {               if (builder.length() > 0) {               }             }           }              if (token == STAR) {               if (builder.length() > 0) {               }             }           }              if (token == STAR) {               if (builder.length() > 0) {               }             }           }              if (token == STAR) {               if (builder.length() > 0) {                }             }           }              if (token == STAR) {               if (builder.length() > 0) {                }             }           }              if (token == STAR) {                if (builder.length() > 0) {
public MockSettings defaultAnswer(Answer defaultAnswer) {       }       public boolean isSerializable() {          return extraInterfaces!= null && java.util.Arrays.asList(extraInterfaces).contains(Serializable.class);       }       public void initiateMockName(Class classToMock) {         if (extraInterfaces == null) {             return;         }
NodeUtil.mayHaveSideEffects(assignNode.getLastChild()); void apply() {        this.nameNode = nameNode;        this.isPropertyAssign = isPropertyAssign;        this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getLastChild());       }        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getLastChild());       }        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getLastChild());       }        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getLastChild());       }        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getLastChild());       }        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||             NodeUtil.mayHaveSideEffects(assignNode.getLastChild());       }        this.mayHaveSecondarySideEffects =            maybeAliased ||             NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||              NodeUtil.mayHaveSideEffects(assignNode.getLastChild());       }        this.mayHaveSecondarySideEffects =             maybeAliased ||             NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||               NodeUtil.mayHaveSideEffects(assignNode.getLastChild());       }        this.mayHaveSecondarySideEffects =              maybeAliased ||
private Node tryFoldComparison(Node n, Node left, Node right) {            && right.getString().equals("undefined"))            || (Token.VOID == right.getType()                && NodeUtil.isLiteralValue(right.getFirstChild(), false, lhType)));            || (Token.VOID == right.getType()                && NodeUtil.isLiteralValue(right.getFirstChild(), false, rhType)));         }            || (Token.VOID == right.getType()                && NodeUtil.isLiteralValue(right.getFirstChild(), false, lhType)));            || (Token.VOID == right.getType()                 && NodeUtil.isLiteralValue(right.getFirstChild(), false, rhType)));         }            || (Token.VOID == right.getType()
private void inlineAliases(GlobalNamespace namespace) {          continue;        }       if (name.globalSets == 1 && name.localSets == 0) {         if (name.aliasingGets > 0) {           return;        }       }       if (name.globalSets == 0 && name.localSets == 1) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 0 && name.localSets == 0) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 1 && name.localSets == 0) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 0 && name.localSets == 1) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 0 && name.localSets == 0) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 1 && name.localSets == 0) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 0 && name.localSets == 1) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 0 && name.localSets == 0) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 1 && name.localSets == 0) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 0 && name.localSets == 1) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 1 && name.localSets == 0) {         if (name.aliasingGets > 0) {           return;         }       }       if (name.globalSets == 0 && name.localSets == 1) {         if (name.aliasingG
private static boolean isAssignable(Type type, ParameterizedType toParameterized                  toClass, typeVarAssigns);         for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();            if (!toTypeArg.isAssignableFrom(fromTypeArg)) {                return false;            }              Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());         }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             if (!toTypeArg.isAssignableFrom(fromTypeArg)) {                return false;             }              Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());         }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             if (!toTypeArg.isAssignableFrom(fromTypeArg)) {                return false;             }              Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());         }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             if (!toTypeArg.isAssignableFrom(fromTypeArg)) {                return false;              }              Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());         }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {              Type toTypeArg = entry.getValue();              if (!toTypeArg.isAssignableFrom(fromTypeArg)) {                 return false;              }               Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());          }           for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {               Type toTypeArg = entry.getValue();
public static boolean isEmpty(boolean[] array) {          } else if (element!= null) {              type = element.getClass();          } else {             type = Object.class;          } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray;         }         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray;         }         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray;         }         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray;         }         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray;         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }
public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           }       }
void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,              || FunctionTypeBuilder.isFunctionTypeDeclaration(info));        }       if (inferred) {         inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));        }        if (!inferred) {         Scope qNameScope = scope.getParent();         if (!qNameScope.isDeclared(qName, false)) {           return false;         }          inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));         }        }        if (!inferred) {         Scope qNameScope = scope.getParent();         if (!qNameScope.isDeclared(qName, false)) {           return false;         }          inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));         }        }        if (!inferred) {         Scope qNameScope = scope.getParent();         if (!qNameScope.isDeclared(qName, false)) {           return false;         }          inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&              (info!= null ||!scope.isDeclared(qName, false)));         }        }       }       if (!inferred) {         Scope qNameScope = scope.getParent();         if (!qNameScope.isDeclared(qName, false)) {           return false;         }          inferred =!(rhsValue!= null &&              rhsValue.isFunction() &&              (info!= null ||!scope.isDeclared(qName, false)));         }        }       }       if (!inferred) {         Scope qNameScope = scope.getParent();         if (!qNameScope.isDeclared(qName, false)) {
