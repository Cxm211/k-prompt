private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)            && n.getType() == Token.GETPROP           && n.getFirstChild().getType() == Token.GETPROP           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP;          if (isChainedProperty) {              n.getFirstChild().getType() = Token.GETPROP;          } else {               n.getFirstChild().getType() = Token.GETPROP;          }        }         if (n.getType() == Token.GETPROP            && n.getFirstChild().getType() == Token.GETPROP           ) {           boolean isChainedProperty =               n.getFirstChild().getType() == Token.GETPROP;           if (isChainedProperty) {               n.getFirstChild().getType() = Token.GETPROP;           } else {                n.getFirstChild().getType() = Token.GETPROP;           }         }         if (n.getType() == Token.GETPROP            && n.getFirstChild().getType() == Token.GETPROP           ) {           boolean isChainedProperty =               n.getFirstChild().getType() == Token.GETPROP;           if (isChainedProperty) {               n.getFirstChild().getType() = Token.GETPROP;           } else {                n.getFirstChild().getType() = Token.GETPROP;           }         }         if (n.getType() == Token.GETPROP            && n.getFirstChild().getType() == Token.GETPROP           ) {           boolean isChainedProperty =               n.getFirstChild().getType() == Token.GETPROP;           if (isChainedProperty) {               n.getFirstChild().getType() = Token.GETPROP;           } else {
public ElitisticListPopulation(final List<Chromosome> chromosomes,                                      final int populationLimit,                                      final double elitismRate) {         super(chromosomes, populationLimit);        if (elitismRate == 0) {             return null;        }         this.elitismRate = elitismRate;      }      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Getter and Setter methods       */      /**       * Get
public long addWrapField(long instant, int value) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.addWrapField(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false, instant);              }          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              return iZone.convertLocalToUTC(localInstant, false, instant);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              return iZone.convertLocalToUTC(localInstant, false, instant);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              return iZone.convertLocalToUTC(localInstant, false, instant);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              return iZone.convertLocalToUTC(localInstant, false, instant);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);
protected final double doSolve() {                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }
public void applyAlias() {    private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;      private final String aliasName;      private final String typeReferenceName;      private final Node aliasNode;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private final Node typeReference;      private final String aliasName;      private
public void captureArgumentsFrom(Invocation invocation) {                       ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                  }              }             for (int position = indexOfVararg; position < matchers.size(); position++) {                 Matcher m = matchers.get(position);                 if (m instanceof CapturesArguments) {                     ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                   }              }          } else {              if (matchers.size() > 0) {                  throw new IllegalArgumentException("At most one argument is required.");              }           }           for (int position = indexOfVararg; position < matchers.size(); position++) {                Matcher m = matchers.get(position);                 if (m instanceof CapturesArguments) {                     ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                   }                }             }          }           for (int position = indexOfVararg; position < matchers.size(); position++) {                Matcher m = matchers.get(position);                 if (m instanceof CapturesArguments) {                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                 }              }             for (int position = indexOfVararg; position < matchers.size(); position++) {                 Matcher m
private void unrollBinaryOperator(    static boolean isSimpleNumber(String s) {      int len = s.length();      for (int index = 0; index < len; index++) {        char c = s.charAt(index);        if (c < '0' || c > '9') {          return false;        }      }     return len > 0 && s.charAt(0)!= '0';    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;
public int indexOf(String str, int startIndex) {              return -1;          }          char[] thisBuf = buffer;         int len = this.size() - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i] == str[j]) {                     return i + 1;                 }              }          }          char[] thisBuf = buffer;         int len = this.size() - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i] == str[j]) {                     return i + 1;                 }              }          }          char[] thisBuf = buffer;          int len = this.size() - strLen;           outer:           for (int i = startIndex; i < len; i++) {               for (int j = 0; j < strLen; j++) {                  if (thisBuf[i] == str[j]) {                     return i + 1;                  }               }           }           char[] thisBuf = buffer;           int len = this.size() - strLen;           outer:           for (int i = startIndex; i < len; i++) {               for (int j = 0; j < strLen; j++) {                  if (thisBuf[i] == str[j]) {                     return i + 1;                  }               }           }           char[] thisBuf = buffer;           int len = this.size() - strLen;
public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {          return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&                  cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&                  cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&                  cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                  cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                  cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                  cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&                  cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&                  cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&                  cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                  cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                  cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                  cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&                   cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
private static void escapeJavaStyleString(Writer out, String str, boolean escape                           out.write('\\');                             break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      default :                             out.write('\\');                         out.write('/');                         break;                  }                      out.write('\\');                     out.write('/');                     break;                  case '/':                      out.write('\\');                     out.write('/');                     break;                  case '/':                      out.write('\\');                     out.write('/');                     break;                  case '/':                     out.write('\\');                     out.write('/');                     break;                  case '/':                     out.write('\\');                     out.write('/');                     break;                  case '/':
public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                   type = Name.Type.GETPROP;                   break;                 case Token.INC:
public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str;              }          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }               mant = str.substring(0, decPos);          }                mant = str.substring(0, decPos);          }                mant = str.substring(0, decPos);
JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ArrayType) {        typeOfThis = (ArrayType) maybeTypeOfThis;      } else if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;      }       return typeOfThis;     }      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;      } else if (maybeTypeOfThis instanceof ArrayType) {        typeOfThis = (ArrayType) maybeTypeOfThis;      }       return typeOfThis;     }      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;      } else if (maybeTypeOfThis instanceof ArrayType) {        typeOfThis = (ArrayType) maybeTypeOfThis;      }       return typeOfThis;     }      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;      } else if (maybeTypeOfThis instanceof ArrayType) {        typeOfThis = (ArrayType) maybeTypeOfThis;      }       return typeOfThis;     }      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;      } else if (maybeTypeOfThis instanceof ArrayType) {        typeOfThis = (ArrayType) maybeTypeOfThis;      }       return typeOfThis;     }      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;      } else if (maybeTypeOfThis instanceof ArrayType) {        typeOfThis = (ArrayType) maybeTypeOfThis;      }       return typeOfThis;     }      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;      } else if (maybeTypeOfThis instanceof ArrayType) {        typeOfThis = (ArrayType) maybeTypeOfThis;      }       return typeOfThis;     }      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOf
static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static synchronized static void register(Object value) {         * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static synchronized static void register(Object value) {         * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static synchronized static void register(Object value) {         * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static synchronized static void register(Object value) {         * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static synchronized static void register(Object value) {         * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static synchronized static void register(Object value) {         * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static synchronized static void register(Object value) {         * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static synchronized static void register(Object value) {         * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static synchronized static void register(Object value) {         * @since 2.3       */      static void unregister(Object value)
public static boolean isPrimitiveWrapper(Class<?> type) {           primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);       }   } \ No newline at end of file
protected VectorialPointValuePair doOptimize()                      if (s!= 0) {                          double sum = 0;                          for (int i = 0; i <= j; ++i) {                             sum += jacobian[i][pj] * residuals[i];                          }                          maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                      }                      updateResidualsAndCost();                      maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                      updateResidualsAndCost();                      maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                     updateResidualsAndCost();                      maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                      updateResidualsAndCost();                      maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                      updateResidualsAndCost();                      maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                      updateResidualsAndCost();                      maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                       updateResidualsAndCost();                       maxCosine = Math.max(maxCosine, Math.abs(sum) / (s
public boolean evaluateStep(final StepInterpolator interpolator)                       increasing = gb >= ga;                      if (ga <= gb) {                          return false;                      }                       if (ga <= gb) {                          return false;                      }                       if (ga <= gb) {                          return false;                      }                       if (ga <= gb) {                          return false;                      }                       if (ga <= gb) {                          return false;                       }                       if (ga <= gb) {                          return false;                       }                       if (ga <= gb) {                          return false;                       }                       if (ga <= gb) {                          return false;                       }                       if (ga <= gb) {                          return false;                       }                       if (ga <= gb) {                          return false;                       }                       if (ga <= gb) {                          return false;                       }                       if (ga <= gb) {
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return true;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }        case Token.OBJECTLIT:          return false;        case Token.IN:          return true;       }
public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         init();     }     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false, instant);              }          }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }
private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }   private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.
protected void dropPhase1Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for
protected double doSolve() {               double targetY;               if (agingA >= MAXIMAL_AGING) {                  targetY = -REDUCTION_FACTOR * yB;               } else if (agingB >= MAXIMAL_AGING) {                  targetY = -REDUCTION_FACTOR * yA;               } else {                   targetY = 0;               }               return targetY;              }               return -REDUCTION_FACTOR * yB;             }              return -REDUCTION_FACTOR * yA;             }              return 0;             }              return -REDUCTION_FACTOR * yB;             }              return -REDUCTION_FACTOR * yA;             }              return 0;             }              return -REDUCTION_FACTOR * yB;             }              return -REDUCTION_FACTOR * yA;             }              return 0;             }              return -REDUCTION_FACTOR * yB;             }              return -REDUCTION_FACTOR * yA;             }              return 0;             }              return -REDUCTION_FACTOR * yB;             }              return -REDUCTION_FACTOR * yA;             }              return 0;             }              return -REDUCTION_FACTOR * yB;             }              return -REDUCTION_FACTOR * yA;
public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }          n++;        }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++;        }         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }          n++;        }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }          n++;        }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++;        }         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }          n++;        }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }          n++;       }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++;       }         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }          n++;       }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }          n++;       }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.incre
private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       Node left = callTarget.getNext();       if (left!= null) {        if (!NodeUtil.isImmutableValue(left)) {           return n;         }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset == 0 && minutesOffset == 0) {              return DateTimeZone.UTC;          }          if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);              if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);              }              offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);          } catch (ArithmeticException ex) {             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);              if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } else {                  minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);               }               offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                  if (boundary instanceof WildcardType) {                      contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));                  } else {                      contextualActualTypeParameters.put(typeParameter, actualTypeArgument);                  }               }              }                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);              }                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              }                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              }                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              }                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              }                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              }                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              }                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              }                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              }                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              }                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              }                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualType
public static String formatPeriod(long startMillis, long endMillis, String forma              days -= 1;          }          while (days < 0) {             days += 31;              months -= 1;          }          while (months < 0) {              months += 12;              years -= 1;          }          milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);          seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);          minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);          hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);          days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);          months -= reduceAndCorrect(start, end, Calendar.MONTH, months);          years -= reduceAndCorrect(start, end, Calendar.YEAR, years);
public int translate(CharSequence input, int index, Writer out) throws IOExcepti                  return 0;              }                  out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }          return 0;       }
private double localMin(boolean isMinim,           double w = x;           double d = 0;           double e = 0;          double fx = computeObjectiveValue(f, x);          if (goalType == GoalType.MAXIMIZE) {              fx = -fx;           }           double fv = fx;           double fw = fx;          int count = 0;          while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;              fx = computeObjectiveValue(f, x);              fv = fx;              fw = fx;              count = 0;           }           while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;              fx = computeObjectiveValue(f, x);              fv = fx;              fw = fx;              count = 0;           }           while (count < maximalIterationCount) {               double m = 0.5 * (a + b);               final double tol1 = eps * Math.abs(x) + t;               final double tol2 = 2 * tol1;               fx = computeObjectiveValue(f, x);               fv = fx;               fw = fx;               count = 0;
Node parseInputs() {        boolean staleInputs = false;       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {            if (input.hasSideEffects()) {              return true;            }          }       }       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {            if (input.hasSideEffects()) {              return true;            }          }       }       return staleInputs;       Node parseInputs() {        boolean staleInputs = false;       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {            if (input.hasSideEffects()) {              return true;            }          }       }       return staleInputs;       Node parseInputs() {        boolean staleInputs = false;       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {            if (input.hasSideEffects()) {              return true;            }          }       }       return staleInputs;       Node parseInputs() {        boolean staleInputs = false;       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {            if (input.hasSideEffects()) {              return true;            }          }       }       return staleInputs;       Node parseInputs() {        boolean staleInputs = false;       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {            if (input.hasSideEffects()) {              return true;            }          }       }       return staleInputs;       Node parseInputs() {        boolean staleInputs = false;       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {             if (input.hasSideEffects()) {               return true;             }          }
private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 201301
private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**  */    public boolean shouldReportThis(Node n, Node parent) {
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {              if (iPrefix!= null) {                  iPrefix.printTo(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 0) {                  FormatUtils.appendZero(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 0) {                  FormatUtils.appendZero(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 0) {                  FormatUtils.appendZero(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 0) {                  FormatUtils.appendZero(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {
private Node parseFunctionType(JsDocToken token) {      if (token!= JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");      }      return null;     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
public double getChiSquare(EstimationProblem problem) {      public double[] guessParametersErrors(EstimationProblem problem)        throws EstimationException {          int m = problem.getMeasurements().length;         int p = problem.getAllParameters().length;          if (m <= p) {              throw new EstimationException("no degrees of freedom ({0} measurements, {1} parameters)",                                            new Object[] { new Integer(m), new Integer(p)});          }          double[] errors = new double[problem.getAllParameters().length];          final double c = Math.sqrt(getChiSquare(problem) / (m - p));          double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c * Math.sqrt(getChiSquare(problem) / (m - p));          }          for (int i = 0; i < errors.length; ++i) {              covar[i] = c * Math.sqrt(getChiSquare(problem) / (m - p));          }          return errors;          }          }          double[] errors = new double[problem.getAllParameters().length];          final double c = Math.sqrt(getChiSquare(problem) / (m - p));          double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c * Math.sqrt(getChiSquare(problem) / (m - p));          }          return errors;          }          }          double[] errors = new double[problem.getAllParameters().length];          final double c = Math.sqrt(getChiSquare(problem) / (m - p));          double[][] covar = getCovarian
protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true, true, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true, true, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true, true, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true, true, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true, true, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true, true, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, true, true, true, true, true);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {
FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());      }       FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());        FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();       injectedDecls.add(paramBuilder.getFirstChild());
private void handleObjectLit(NodeTraversal t, Node n) {            child!= null;            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();         if (name == null || name.length() == 0) {            return;         }            child = child.getNext()) {          String name = child.getString();
private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean no          int size = elementPairs.size();          if (size >= 2 && elementPairs.get(0) instanceof Separator) {              Separator sep = (Separator) elementPairs.get(0);                  PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);                  sep = sep.finish(f.getPrinter(), f.getParser());                  return new PeriodFormatter(sep, sep);           }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new
public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {         if (weeks!= 0) {              setMillis(getChronology().weeks().add(getMillis(), weeks));         }      }       public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      }       public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {          if (weeks!= 0) {              setMillis(getChronology().weeks().add(getMillis(), weeks));         }      }       public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {          if (weeks!= 0) {              setMillis(getChronology().weeks().add(getMillis(), weeks));         }      }       public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {          if (weeks!= 0) {              setMillis(getChronology().weeks().add(getMillis(), weeks));         }      }       public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {          if (weeks!= 0) {              setMillis(getChronology().weeks().add(getMillis(), weeks));         }      }       public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {          if (weeks!= 0) {              setMillis(getChronology().weeks().add(getMillis(), weeks));         }      }       public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void
public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall()  + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           }         }       }      }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }      private synchronized void instantiateMockitoCoreIfNeeded() {          if (mockitoCore == null) {              mockitoCore = new MockitoCore();          }      }      private synchronized void instantiateDelegateIfNeeded() {          if (delegate == null) {              delegate = new ReturnsEmptyValues();          }      }      private synchronized void instantiateMockitoCoreIfNeeded() {          if (mockitoCore == null) {              mockitoCore = new MockitoCore();          }      }      private synchronized void instantiateDelegateIfNeeded() {          if (delegate == null) {              delegate = new ReturnsEmptyValues();          }      }      private synchronized void instantiateMockitoCoreIfNeeded() {          if (mockitoCore == null) {              mockitoCore = new MockitoCore();          }      }      private synchronized void instantiateDelegateIfNeeded() {          if (delegate == null) {              delegate = new ReturnsEmptyValues();          }      }      private synchronized void instantiateMockitoCoreIfNeeded() {          if (mockitoCore == null) {              mockitoCore = new MockitoCore();          }      }      private synchronized void instantiateDelegateIfNeeded() {          if (delegate == null) {              delegate = new ReturnsEmptyValues();          }      }      private synchronized void instantiateMockitoCoreIfNeeded() {          if (mockitoCore == null) {              mockitoCore = new MockitoCore();          }      }      private synchronized void instantiateDelegateIfNeeded() {          if (delegate == null) {              delegate = new ReturnsEmptyValues();          }      }      private synchronized void instantiateMockitoCoreIfNeeded() {          if (mockitoCore == null) {              mockitoCore = new MockitoCore();          }      }      private synchronized void instantiateDelegate
public Week(Date time) {       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter method       * Setter method       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter method       * Setter method       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter method       * Setter method       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter method       * Setter method       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter method       * Setter method       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter method       * Setter method       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter method       * Setter method       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter method       * Setter method       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter method       * Setter method       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter method       * Setter method       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Get
public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {              for (int i = 0; i < seriesCount; i++) {                  return result;              }           }           int seriesCount = dataset.getRowCount();           return result;
Node processArrayLiteral(ArrayLiteral literalNode) {      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);       if (assign == null) {         return null;       }        return assign;      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }
public static double sinh(double x) {        if (x > 20) {             if (x >= LOG_MAX_VALUE) {                 return 0.5 * exp(x);             } else {                 return 0.5 * exp(x);             }       } else if (x < -20) {             if (x <= -LOG_MAX_VALUE) {                 return -0.5 * exp(-x);             } else {                 return -0.5 * exp(-x);             }       }        if (x == 0) {             return 0;       }         if (x == -20) {             return -0.5;       }         if (x == 20) {             return 0.5;       }         if (x == 0) {             return 0;       }         if (x == -20) {             return -0.5;       }         if (x == 20) {             return 0.5;       }         if (x == 0) {             return 0;       }         if (x == -20) {             return -0.5;       }         if (x == 20) {             return 0.5;       }         if (x == 0) {             return 0;       }         if (x == -20) {             return -0.5;       }         if (x == 20) {             return 0.5;       }         if (x == 0) {             return 0;       }         if (x == -20) {             return -0.5;       }         if (x == 20) {             return 0.5;       }          if (x == 0) {              return 0;       }          if (x == -20) {
boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,            "assignment to property " + propName + " of " +            getReadableJSTypeName(owner, true),            rightType, leftType);       }        return false;      }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;
void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {       in.defaultReadObject();       init();     }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
private void inlineNonConstants(        if (!maybeModifiedArguments &&           !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&            referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references;          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();           if (nameNode == null) {             continue;           }            Node existingNameNode = refs.get(i).getNode();           if (existingNameNode == null ||                existingNameNode.getType()!= nameNode.getType()) {             continue;           }            for (int j = 1 ; j < refs.size(); j++) {             Node nameNode = refs.get(j).getNode();            if (nameNode == null) {              continue;            }             Node existingNameNode = refs.get(j).getNode();            if (existingNameNode == null ||                 existingNameNode.getType()!= nameNode.getType()) {              continue;            }             for (int k = 1 ; k < refs.size(); k++) {              Node nameNode = refs.get(k).getNode();             if (nameNode == null) {               continue;             }              Node existingNameNode = refs.get(k).getNode();             if (existingNameNode == null ||                 existingNameNode.getType()!= nameNode.getType()) {               continue;             }              for (int l = 1 ; l < refs.size(); l++) {               Node nameNode = refs.get(l).getNode();              if (nameNode == null) {                continue;              }               Node existingNameNode = refs.get(l).getNode();
public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;          } else {             if (gregorianCutover!= null) {                 cutoverInstant = gregorianCutover.toInstant();             }          }          GJChronology chrono;
to NaN, the       * Complex objects are considered to be equal. public Complex conjugate() {      public Complex divide(Complex divisor)          throws NullArgumentException {          MathUtils.checkNotNull(divisor);          if (isNaN || divisor.isNaN) {              return NaN;          }
private Integer getPivotRow(final int col, final SimplexTableau tableau) {          for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);              if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio;                  } else if (ratio > maxRatio) {                      maxRatio = ratio;                  }               }           }            for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {               final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);               final double entry = tableau.getEntry(i, col);              if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                   final double ratio = rhs / entry;                   if (ratio < minRatio) {                       minRatio = ratio;                   } else if (ratio > maxRatio) {                       maxRatio = ratio;                   }               }            }            for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {               final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);               final double entry = tableau.getEntry(i, col);               if (MathUtils.compareTo(entry, 0, epsilon) >= 0)
public Fraction pow(int power) {       */      private static int greatestCommonDivisor(int u, int v) {         if (u == 0 && v == 0) {             return 0;         }         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {             if (u == 0) {                 return 1;             } else {                 return 0;             }         }          if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {              return 1;          }           if (u == 0) {              return 0;          } else {              return 1;          }       }       private static int greatestCommonDivisor(int u, int v) {          if (u == 0 && v == 0) {              return 0;          }          if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {              return 1;          }           if (u == 0) {              return 0;          } else {              return 1;          }       }       private static int greatestCommonDivisor(int u, int v) {          if (u == 0 && v == 0) {              return 0;          }          if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {              if (u == 0) {                  return 1;              } else {                  return 0;              }          }           if (u == 0) {               return 0;          } else {               return 1;          }       }       private static int greatestCommonDivisor(int u, int v) {          if (u == 0 && v == 0) {              return 0;          }          if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {              if (
public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *               FastMath.pow(covarianceMatrixDeterminant, -0.5) *               getExponentTerm(vals);      }         return getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *               FastMath.pow(covarianceMatrixDeterminant, -0.5) *               getExponentTerm(vals);      }         return getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *               FastMath.pow(covariance
protected GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                  if (mock == null) {                      throw new IllegalArgumentException("Null'mock' argument.");                  }                   return mock;               }                return mock;           }            container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                   return mock;               }               return mock;           }            container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                   return mock;               }               return mock;           }            container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                   return mock;               }               return mock;           }            container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                   return mock;               }               return mock;           }            container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                   return mock;               }               return mock;            }             container.addAnswer(new Answer<Object>() {                public Object answer(InvocationOnMock invocation) throws Throwable {                   return mock;
protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return;              }               best = best(best, original, comparator);               if (best < 0) {                   return;               }                best = best(best, original, comparator);                if (best < 0) {                    return;                }                 best = best(best, original, comparator);                if (best < 0) {                    return;                }              }               best = best(best, original, comparator);               if (best < 0) {                    return;                }                best = best(best, original, comparator);                if (best < 0) {                    return;                }              }               best = best(best, original, comparator);               if (best < 0) {                    return;                }                best = best(best, original, comparator);                if (best < 0) {                    return;                }               }               best = best(best, original, comparator);               if (best < 0) {                    return;                }                best = best(best, original, comparator);                if (best < 0) {                     return;
function.       *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {          @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }      };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode() function.       *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {          @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }      };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode() function.       *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {          @Override         protected Set<IDKey> initialValue() {              return new HashSet<IDKey>();          }      };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode() function.       *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {          @Override         protected Set<IDKey> initialValue() {              return new HashSet<IDKey>();          }      };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode() function.       *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {          @Override         protected Set<IDKey> initialValue() {              return new HashSet<IDKey>();          }      };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode() function.       *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {
private void visitGetProp(NodeTraversal t, Node n, Node parent) {      if (childType.isDict()) {        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     } else if (n.getJSType()!= null && parent.isAssign()) {        return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE))) {        checkPropertyAccess(childType, property.getString(), t, n);     }
private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0;      @Override      public void visit(NodeTraversal t, Node n, Node parent) {        if (n.isCall()) {            return;        }
private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x = OriginalMapping.newBuilder()         .setOriginalFile(sources[entry.getSourceFileId()])        .setLineNumber(entry.getSourceLine())        .setColumnPosition(entry.getSourceColumn());        if (entry.getNameId()!= UNMAPPED) {          x.setIdentifier(names[entry.getNameId()]);        }        return x.build();       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }
static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      if (s.length() == 0) {         return 0.0;      }       String s2 = trimJsWhiteSpace(s);       if (s2.length() == 0) {         return 0.0;      }        String s3 = trimJsWhiteSpace(s);        if (s3.length() == 0) {          return 0.0;        }         String s4 = trimJsWhiteSpace(s);         if (s4.length() == 0) {           return 0.0;         }          String s5 = trimJsWhiteSpace(s);          if (s5.length() == 0) {            return 0.0;          }           String s6 = trimJsWhiteSpace(s);           if (s6.length() == 0) {             return 0.0;           }            String s7 = trimJsWhiteSpace(s);            if (s7.length() == 0) {              return 0.0;            }             String s8 = trimJsWhiteSpace(s);             if (s8.length() == 0) {               return 0.0;             }              String s9 = trimJsWhiteSpace(s);              if (s9.length() == 0) {                return 0.0;              }               String s10 = trimJsWhiteSpace(s);               if (s10.length() == 0) {                 return 0.0;               }                String s11 = trimJsWhiteSpace(s);                if (s11.length() == 0) {                  return 0.0;                }                 String s12 = trimJsWhiteSpace(s);                 if (s12.length() == 0) {                   return 0.0;                 }                  String s13 = trimJsWhiteSpace(s);                  if (s13.length() == 0) {                    return 0.0;
* @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(
