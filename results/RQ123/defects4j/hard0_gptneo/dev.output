public GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                  if (mock == null) {                      throw new IllegalArgumentException("Null'mock' argument.");                  }                  return mock;               }               public GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                  if (mock == null) {                      throw new IllegalArgumentException("Null'mock' argument.");                  }                  return mock;               }               public GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                  if (mock == null) {                      throw new IllegalArgumentException("Null'mock' argument.");                  }                  return mock;               }               public GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                  if (mock == null) {                      throw new IllegalArgumentException("Null'mock' argument.");                  }                  return mock;               }               public GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                  if (mock == null) {                      throw new IllegalArgumentException("Null'mock' argument.");                  }                  return mock;               }               public GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                  if (mock == null) {                      throw new IllegalArgumentException("Null'mock' argument.");                  }                  return mock;               }               public GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                  if (mock == null) {                       throw new IllegalArgumentException("Null'mock' argument.");                  }                  return mock;               }               public GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                  if (mock == null) {                       throw new IllegalArgumentException("Null'mock' argument.");                  }                  return mock;               }               public GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                  if (mock == null) {                       throw new IllegalArgumentException("Null'mock' argument.");
protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0;              }
private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right!= null && right.getType() == Token.STRING) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }      }       return n;      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }
private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serialVersionUID = 20130104L;     private static final long serial
private Integer getPivotRow(final int col, final SimplexTableau tableau) {          for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio;                  }              }          }           for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);              if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio;                  }              }          }           for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);              if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                       minRatio = ratio;                  }              }          }           for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);              if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio;                  }              }          }           for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);              if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio;                  }              }          }           for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);              if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio;                  }              }          }           for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);              if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio;                  }              }          }           for (int
protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null, Duration.fromMillis(duration));      }      /**       * @return the duration, in milliseconds       */      protected Base
instant);              }              return iZone.convertLocalToUTC(localInstant, false);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);             long result = iZone.convertLocalToUTC(localInstant, false, instant);              if (get(result)!= value) {                  throw new IllegalFieldValueException(iField.getType(), new Integer(value),                      "Illegal instant due to time zone offset transition: " + instant);              }              return iZone.convertLocalToUTC(localInstant, false);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              long result = iZone.convertLocalToUTC(localInstant, false, instant);              if (get(result)!= value) {                  throw new IllegalFieldValueException(iField.getType(), new Integer(value),                      "Illegal instant due to time zone offset transition: " + instant);              }              return iZone.convertLocalToUTC(localInstant, false);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              long result = iZone.convertLocalToUTC(localInstant, false, instant);              if (get(result)!= value) {                  throw new IllegalFieldValueException(iField.getType(), new Integer(value),                      "Illegal instant due to time zone offset transition: " + instant);              }              return iZone.convertLocalToUTC(localInstant, false);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              long result = iZone.convertLocalToUTC(localInstant, false, instant);              if (get(result)!= value) {                  throw new IllegalFieldValueException(iField.getType(), new Integer(value),                      "Illegal instant due to time zone offset transition: " + instant);              }              return iZone.convertLocalToUTC(localInstant, false);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              long result = iZone.convertLocalToUTC(localInstant, false, instant);              if (get(result)!= value) {                  throw new IllegalFieldValueException(iField.getType(), new Integer(value),                      "Illegal instant due to time zone offset transition: " + instant);              }              return iZone.convertLocalToUTC(localInstant, false);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              long result = iZone.convertLocalToUTC(localInstant, false, instant);              if (get(result)!= value) {                  throw new IllegalFieldValueException(iField.getType(), new Integer(value),                      "Illegal instant due to time zone offset transition: " + instant);              }              return iZone.convertLocalToUTC(localInstant, false);          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              long result = iZone.convertLocalToUTC(localInstant, false, instant);              if (get(result)!= value) {
private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0;      @Override      public void visit(NodeTraversal t, Node n, Node parent) {        if (n.isCall()) {          return;        }         @Override         public void visit(NodeTraversal t, Node n, Node parent) {          if (n.isCall()) {            return;          }          @Override          public void visit(NodeTraversal t, Node n, Node parent) {           if (n.isCall()) {             return;           }           @Override           public void visit(NodeTraversal t, Node n, Node parent) {            if (n.isCall()) {              return;            }            @Override            public void visit(NodeTraversal t, Node n, Node parent) {             if (n.isCall()) {               return;             }             @Override             public void visit(NodeTraversal t, Node n, Node parent) {              if (n.isCall()) {                return;              }              @Override              public void visit(NodeTraversal t, Node n, Node parent) {               if (n.isCall()) {                 return;               }               @Override               public void visit(NodeTraversal t, Node n, Node parent) {                if (n.isCall()) {                  return;                }                @Override                public void visit(NodeTraversal t, Node n, Node parent) {                 if (n.isCall()) {                   return;                 }                 @Override                 public void visit(NodeTraversal t, Node n, Node parent) {                  if (n.isCall()) {                    return;                  }                  @Override                  public void visit(NodeTraversal t, Node n, Node parent) {                  if (n.isCall()) {                    return;                  }                  @Override                  public void visit(NodeTraversal t, Node n, Node parent) {                  if (n.isCall()) {                    return;                  }                  @Override                  public void visit(NodeTraversal t, Node n, Node parent) {                  if (n.isCall()) {                    return;                  }                  @Override                  public void visit(NodeTraversal t, Node n, Node parent) {                  if (n.isCall()) {                    return;                  }                  @Override                  public void visit(NodeTraversal t, Node n, Node parent) {                  if (n.isCall()) {                    return;                  }                  @Override                  public void visit(NodeTraversal t, Node n, Node parent) {                  if (n.isCall()) {                    return;                  }                  @Override                  public void visit(NodeTraversal t, Node n, Node parent) {                  if (n.isCall()) {                    return;                  }                  @Override                  public void visit(NodeTraversal t, Node n, Node parent) {                  if (n.isCall()) {                    return;                  }                  @Override                  public void visit(NodeTraversal t, Node n, Node parent) {                  if (n.isCall()) {
protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));               } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);                }              }
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {              if (iPrefix!= null) {                 iPrefix.printTo(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 31) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 31) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 31) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 31) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 31) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 31) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 31) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 31) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 31) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 31) {
Node processArrayLiteral(ArrayLiteral literalNode) {      @Override      Node processAssignment(Assignment assignmentNode) {       if (assignmentNode.isEmpty()) {         return null;       }        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       @Override       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);
static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value)
JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType && maybeTypeOfThis.getType() == Token.OBJECTLIT) {        typeOfThis = (ObjectType) maybeTypeOfThis;      }      }       return typeOfThis;     } JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;        return typeOfThis;      }       return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;     }     }      return typeOfThis;
to {@code NaN}, the       * Complex objects are considered to be equal.       */      public Complex conjugate() {          public Complex divide(Complex divisor)           throws NullArgumentException {              MathUtils.checkNotNull(divisor);              if (isNaN || divisor.isNaN) {                  return NaN;              }              if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {                  return NaN;              }              if (divisor.isInfinite() &&!isInfinite()) {                  return ZERO;              }              final double c = divisor.getReal();              final double d = divisor.getImaginary();              if (FastMath.abs(c) < FastMath.abs(d)) {                  double q = c / d;                  double denominator = c * q + d;                  return createComplex((real * q + imaginary) / denominator,                               (imaginary * q - real) / denominator);              } else {                  double q = d / c;                  double denominator = d * q + c;                  return createComplex((imaginary * q + real) / denominator,                               (imaginary - real * q) / denominator);              }          }             public Complex conjugate() {           public Complex divide(Complex divisor)            throws NullArgumentException {               MathUtils.checkNotNull(divisor);              if (isNaN || divisor.isNaN) {                  return NaN;              }              if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {                  return NaN;              }              if (divisor.isInfinite() &&!isInfinite()) {                  return ZERO;              }              final double c = divisor.getReal();              final double d = divisor.getImaginary();              if (FastMath.abs(c) < FastMath.abs(d)) {                  double q = c / d;                  double denominator = c * q + d;                  return createComplex((real * q + imaginary) / denominator,
public int translate(CharSequence input, int index, Writer out) throws IOExcepti                  return 0;              }             if (end <= start) {                 out.write(entityValue);                 return 2 + (end - start) + (isHex? 1 : 0) + 1;             }              out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) + 1;       }          out.write(entityValue);          return 2 + (end - start) + (isHex? 1 : 0) +
cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                  cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                  cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                  cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                  cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                  cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                  cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                  cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                  cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                  cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                  cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                   cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                   cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                   cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                   cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                   cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                   cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                   cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                   cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                   cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                   cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                   cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                   cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                   cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                   cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                   cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                   cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                   cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                   cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                   cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                   cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                   cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                   cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                   cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                   cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                   cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean no          int size = elementPairs.size();          if (size >= 2 && elementPairs.get(0) instanceof Separator) {              Separator sep = (Separator) elementPairs.get(0);                  PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);                  sep = sep.finish(f.getPrinter(), f.getParser());                  return new PeriodFormatter(sep, sep);              }          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);          }          return new PeriodFormatter(comp, null);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(null, null);
private void unrollBinaryOperator(    static boolean isSimpleNumber(String s) {      int len = s.length();      for (int index = 0; index < len; index++) {        char c = s.charAt(index);        if (c < '0' || c > '9') {          return false;        }      }     return len > 0 && s.charAt(0)!= '0';    }    static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }     static double getSimpleNumber(String s) {      return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber(String s) {       return s.charAt(0) == '0'? 0.0 : 1.0;    }      static double getSimpleNumber
public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));                 if (pt == consumed - 1) {                    pos += Character.charCount(Character.codePointAt(input, pos));                 }              }          }      }          public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));                 if (pt == consumed - 1) {                    pos += Character.charCount(Character.codePointAt(input, pos));                 }              }          }      }          public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));                 if (pt == consumed - 1) {                    pos += Character.charCount(Character.codePointAt(input, pos));                 }              }          }      }          public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));                 if (pt == consumed - 1) {                    pos += Character.charCount(Character.codePointAt(input, pos));                 }              }          }      }          public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));                 if (pt == consumed - 1) {                    pos += Character.charCount(Character.codePointAt(input, pos));                 }              }          }      }      }          public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));                 if (pt == consumed - 1) {                    pos += Character.charCount(Character.codePointAt(input, pos));                 }              }          }      }      }          public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));                 if (pt == consumed - 1) {                    pos += Character.charCount(Character.codePointAt(input, pos));                 }              }          }      }      }          public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));                 if (pt == consumed - 1) {                    pos += Character.charCount(Character.codePointAt(input, pos));                 }              }          }      }      }          public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));                 if (pt == consumed - 1) {                    pos += Character.charCount(Character.codePointAt(input, pos));                 }              }          }      }      }          public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));                 if (pt == consumed - 1) {                    pos += Character.charCount(Character.codePointAt(input, pos));                 }
public Week(Date time) {       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar public Week(Date time) {       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       * Getter for calendar       */       public Week(Date time) {
public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;          } else {              cutoverInstant = gregorianCutover.toInstant();          }         if (cutoverInstant == null) {             return null;         }          GJChronology chrono;
public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {         if (weekOfWeekyear!= 0) {              setMillis(getChronology().weeks().add(getMillis(), weeks));         }      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));      }              setMillis(getChronology().weeks().add(getMillis(), weeks));
public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++;
public int indexOf(String str, int startIndex) {              return -1;          }          char[] thisBuf = buffer;         int len = this.size - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i] == str[j]) {                     return i;                 }              }          }          char[] thisBuf = buffer;         int len = this.size - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i] == str[j]) {                    if (i < len && j < strLen && Character.isHighSurrogate(thisBuf[i+1]) {                         return i;                    }                 }              }          }          char[] thisBuf = buffer;         int len = this.size - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i] == str[j]) {                    if (i < len && j < strLen && Character.isHighSurrogate(thisBuf[i+1]) {                         return i;                    }                 }              }          }          char[] thisBuf = buffer;         int len = this.size - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i] == str[j]) {                    if (i < len && j < strLen && Character.isHighSurrogate(thisBuf[i+1]) {                         return i;                    }                 }              }          }          char[] thisBuf = buffer;         int len = this.size - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i] == str[j]) {                    if (i < len && j < strLen && Character.isHighSurrogate(thisBuf[i+1]) {                         return i;                    }                 }              }          }          char[] thisBuf = buffer;         int len = this.size - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i] == str[j]) {                    if (i < len && j < strLen && Character.isHighSurrogate(thisBuf[i+1]) {                         return i;                    }                 }              }          }          char[] thisBuf = buffer;         int len = this.size - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i] == str[j]) {                    if (i < len && j < strLen && Character.isHighSurrogate(thisBuf[i+1]) {                         return i;                    }                 }              }          }          char[] thisBuf = buffer;         int len = this.size - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {
public Fraction pow(int power) {       */      private static int greatestCommonDivisor(int u, int v) {         if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatestCommonDivisor(u, v);       }         private static int greatestCommonDivisor(int u, int v) {          if (u == 0 || v == 0) {              return 1;          }         if (u == 1 || v == 1) {             return 0;         }          return greatest
void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }    private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }     private boolean validAssignmentTarget(Node target) {      switch (target.getType()) {        case Token.NAME:        case Token.GETPROP:        case Token.GETELEM:          return true;      }       return false;     }      private void addIdentifier
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:         case Token.STRINGLIT:          return true;        case Token.IN:          return true;       }        return false;
private void inlineNonConstants(        if (!maybeModifiedArguments &&           !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&           referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references;          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }           }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode == null) {              continue;            }          }        }          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode =
private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *     * private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     *
Node parseInputs() {        boolean staleInputs = false;       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {             if (input.hasSideEffects()) {                staleInputs = true;             }          }       }        for (CompilerInput input : inputs) {          if (input.hasSideEffects()) {             staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }         for (CompilerInput input : inputs) {           if (input.hasSideEffects()) {              staleInputs = true;          }        }
public double getChiSquare(EstimationProblem problem) {      public double[] guessParametersErrors(EstimationProblem problem)        throws EstimationException {          int m = problem.getMeasurements().length;         int p = problem.getAllParameters().length;          if (m <= p) {              throw new EstimationException("no degrees of freedom ({0} measurements, {1} parameters)",                                           new Object[] { new Integer(m), new Integer(p)});          }         double[] errors = new double[problem.getAllParameters().length];          final double c = Math.sqrt(getChiSquare(problem) / (m - p));          double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c * (i + 1) / 2;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              errors[i] = c;          }           final double c = Math.sqrt(getChiSquare(problem) / (m - p));           double[][] covar =
public ElitisticListPopulation(final List<Chromosome> chromosomes,                                       final int populationLimit,                                      final double elitismRate) {          super(chromosomes, populationLimit);         this.elitismRate = elitismRate;      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }      /**       * Gets a random element from the list.       */      public Chromosome getChromosome(int index) {          return getChromosomes().get(index);      }
public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall()  + " method on mock";              }             new Reporter().smartNullPointerException(location);              return null;           }          }         }        }       }      }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
protected VectorialPointValuePair doOptimize()                      if (s!= 0) {                         double sum = 0;                         for (int i = begin; i <= end; ++i) {                            sum += jacobian[i][pj] * residuals[i];                         }                         maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                      }                      begin = i;                      end = j;
public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);           primitive
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset == 0 && minutesOffset == 0) {              return DateTimeZone.UTC;          }         if (minutesOffset < 0) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);         }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);              if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);              }              offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);          } catch (ArithmeticException ex) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);             if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);             } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);             }          } catch (ArithmeticException ex) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);             if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);             } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);             }          } catch (ArithmeticException ex) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);             if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);             } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);             }          } catch (ArithmeticException ex) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);             if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);             } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);             }          } catch (ArithmeticException ex) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);             if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);             } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);             }          } catch (ArithmeticException ex) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);             if (hoursInMinutes < 0) {
private static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      if (s == null) {        s = "";      }
public static String formatPeriod(long startMillis, long endMillis, String forma              days -= 1;          }          while (days < 0) {             days += 31;              months -= 1;          }          while (months < 0) {              months += 12;              years -= 1;          }          milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);          seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);          minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);          hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);          days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);          months -= reduceAndCorrect(start, end, Calendar.MONTH, months);          years -= reduceAndCorrect(start, end, Calendar.YEAR, years);
private Node parseFunctionType(JsDocToken token) {      if (token!= JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");      }      return null;     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
private void visitGetProp(NodeTraversal t, Node n, Node parent) {      if (childType.isDict()) {        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     } else if (n.getJSType()!= null && parent.isAssign()) {        return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE))) {        checkPropertyAccess(childType, property.getString(), t, n);      }     }       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     }      report(t, property, TypeValidator.
public static double sinh(double x) {        if (x > 20) {           if (x >= LOG_MAX_VALUE) {                return 0.5 * exp(x);           }           return -0.5 * exp(-x);        }       if (x < -20) {           if (x <= -LOG_MAX_VALUE) {                return 0.5 * exp(-x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x >= LOG_MAX_VALUE) {               return 0.5 * exp(x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x <= -LOG_MAX_VALUE) {               return 0.5 * exp(-x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x >= LOG_MAX_VALUE) {               return 0.5 * exp(x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x <= -LOG_MAX_VALUE) {               return 0.5 * exp(-x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x >= LOG_MAX_VALUE) {               return 0.5 * exp(x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x <= -LOG_MAX_VALUE) {               return 0.5 * exp(-x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x >= LOG_MAX_VALUE) {               return 0.5 * exp(x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x <= -LOG_MAX_VALUE) {               return 0.5 * exp(-x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x >= LOG_MAX_VALUE) {               return 0.5 * exp(x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x <= -LOG_MAX_VALUE) {               return 0.5 * exp(-x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x >= LOG_MAX_VALUE) {               return 0.5 * exp(x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x <= -LOG_MAX_VALUE) {               return 0.5 * exp(-x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x >= LOG_MAX_VALUE) {               return 0.5 * exp(x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x <= -LOG_MAX_VALUE) {               return 0.5 * exp(-x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x >= LOG_MAX_VALUE) {               return 0.5 * exp(x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x <= -LOG_MAX_VALUE) {               return 0.5 * exp(-x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x >= LOG_MAX_VALUE) {               return 0.5 * exp(x);           }           return -0.5 * exp(-x);       }        if (x == 0) {           if (x <= -LOG_MAX_VALUE) {               return 0.5 * exp(-x);           }           return
public void captureArgumentsFrom(Invocation invocation) {                      ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                  }              }             for (int position = indexOfVararg; position < matchers.size(); position++) {                 Matcher m = matchers.get(position);                 if (m instanceof CapturesArguments) {                     ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                  }              }          } else {             if (indexOfVararg < matchers.size()) {
public double localMin(boolean isMinim,          double w = x;          double d = 0;          double e = 0;         double fx = computeObjectiveValue(f, x);         if (goalType == GoalType.MAXIMIZE) {              fx = -fx;          }          double fv = fx;          double fw = fx;         int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;              fv = tol1;              fw = tol2;              count++;          }          double fv = fx;          double fw = fx;          int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;              fv = tol1;              fw = tol2;              count++;          }          double fv = fx;          double fw = fx;          int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;              fv = tol1;              fw = tol2;              count++;          }          double fv = fx;          double fw = fx;          int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;              fv = tol1;              fw = tol2;              count++;          }          double fv = fx;          double fw = fx;          int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;              fv = tol1;              fw = tol2;              count++;          }          double fv = fx;          double fw = fx;          int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;              fv = tol1;              fw = tol2;              count++;          }          double fv = fx;          double fw = fx;          int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;              fv = tol1;              fw = tol2;              count++;          }          double fv = fx;          double fw = fx;          int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;              fv = tol1;              fw = tol2;
private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }       private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals
public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();           result = new ArrayList<>();           for (int i = 0; i < seriesCount; i++) {               result.add(getLegendItem(i));           }            int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();           result = new ArrayList<>();           for (int i = 0; i < seriesCount; i++) {               result.add(getLegendItem(i));           }            int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();           result = new ArrayList<>();           for (int i = 0; i < seriesCount; i++) {               result.add(getLegendItem(i));           }            int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();           result = new ArrayList<>();           for (int i = 0; i < seriesCount; i++) {               result.add(getLegendItem(i));           }            int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();           result = new ArrayList<>();           for (int i = 0; i < seriesCount; i++) {               result.add(getLegendItem(i));           }            int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();           result = new ArrayList<>();           for (int i = 0; i < seriesCount; i++) {               result.add(getLegendItem(i));           }            int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();           result = new ArrayList<>();           for (int i = 0; i < seriesCount; i++) {               result.add(getLegendItem(i));           }            int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();           result = new ArrayList<>();           for (int i = 0; i < seriesCount; i++) {               result.add(getLegendItem(i));           }            int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();           result = new ArrayList<>();           for (int i = 0; i < seriesCount; i++) {               result.add(getLegendItem(i));           }            int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();           result = new ArrayList<>();
public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);        }      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);
public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false, instant);              }          }       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convertLocalToUTC(instant, false);       }          return iZone.convert
private static void escapeJavaStyleString(Writer out, String str, boolean escape                           out.write('\\');                          out.write('/');                         break;                      case '/' :                             out.write('\\');                         out.write('/');                         break;                      default :                              out.write('\\');                         out.write('/');                         break;                      case '/' :                             out.write('\\');                         out.write('/');                         break;                      default :                             out.write('\\');                         out.write('/');                         break;                      case '/' :                            out.write('\\');                         out.write('/');                         break;                      case '/' :                           out.write('\\');                         out.write('/');                         break;                      case '/' :                           out.write('\\');                         out.write('/');                         break;                      case '/' :                          out.write('\\');                         out.write('/');                         break;                      case '/' :                         out.write('\\');                        out.write('/');                        break;                      case '/' :                         out.write('\\');                        out.write('/');                        break;                      case '/' :                         out.write('\\');                        out.write('/');                        break;                      case '/' :                         out.write('\\');                        out.write('/');                        break;                      case '/' :                         out.write('\\');                        out.write('/');                        break;                      case '/' :                         out.write('\\');                        out.write('/');                        break;                      case '/' :                         out.write('\\');                        out.write('/');                        break;                      case '/' :                         out.write('\\');
boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,            "assignment to property " + propName + " of " +            getReadableJSTypeName(owner, true),            rightType, leftType);       }        return false;      }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;     }      return true;     }      return false;
public void applyAlias() {    private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;      private final String aliasName;      AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;        this.aliasName = aliasName;      }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString(null);      }    }      @Override      public void applyAlias() {       typeReference.setString
method that Set implements       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*
FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }
public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETELEM;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETELEM;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;
private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x = OriginalMapping.newBuilder()         .setOriginalFile(sources[entry.getSourceFileId()])        .setLineNumber(entry.getSourceLine())        .setColumnPosition(entry.getSourceColumn());        if (entry.getNameId()!= UNMAPPED) {          x.setIdentifier(names[entry.getNameId()]);          x.setOriginalMapping(sources[entry.getSourceFileId()]);        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.setIdentifier(names[entry.getNameId()]);         }        }         if (entry.getNameId()!= UNMAPPED) {           x.set
protected final double doSolve() {                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                         f0 = computeObjectiveValue(x0);                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                         f0 = computeObjectiveValue(x0);                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                         f0 = computeObjectiveValue(x0);                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                        f0 = computeObjectiveValue(x0);                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                        f0 = computeObjectiveValue(x0);                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                        f0 = computeObjectiveValue(x0);                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                        f0 = computeObjectiveValue(x0);                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {
private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }        private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container
protected void dropPhase1Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
public boolean evaluateStep(final StepInterpolator interpolator)                       increasing = gb >= ga;                      if (ga <= gb) {                         return true;                      }
public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {             if (expPos > -1) {                 mant = str.substring(0, expPos);             } else {                 mant = str;             }          }
private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)            && n.getType() == Token.GETPROP           && n.getFirstChild().getType() == Token.GETELEM           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP;
* @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new
protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return;              }              best = contracted;
private void handleObjectLit(NodeTraversal t, Node n) {            child!= null;            child = child.getNext()).getNext() {          String name = child.getString();          if (name == null) {            return;          }           child = child.getNext()).getNext();
