public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>float</tt>.       */      public float percentageValue() {         return multiply(100).floatValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>float</tt>.       */      public float percentageValue() {         return multiply(100).floatValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>float</tt>.       */      public float percentageValue() {         return multiply(100).floatValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>float</tt>.       */      public float percentageValue() {         return multiply(100).floatValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>float</tt>.       */      public float percentageValue() {         return multiply(100).floatValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>float</tt>.       */      public float percentageValue() {         return multiply(100).floatValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {         return true;        case Token.FUNCTION:        case Token.REGEXP:        case Token.ARRAYLIT:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:        case Token.RP:        case Token.NAME:        case Token.LP:
protected UnivariatePointValuePair doOptimize() {                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                          return current;                       }                   }                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                          return current;                       }                  }                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                          return current;                       }                  }                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                         return current;                      }                 }                 if (checker!= null) {                     if (checker.converged(getIterations(), previous, current)) {                         return current;                      }                 }                if (checker!= null) {                    if (checker.converged(getIterations(), previous, current)) {                        return current;                     }                }                if (checker!= null) {                    if (checker.converged(getIterations(), previous, current)) {                       return current;
public double solve(final UnivariateRealFunction f,
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset < -23 || hoursOffset > 23) {               throw new IllegalArgumentException("Hours out of range: " + hoursOffset);           }          if (minutesOffset < 0) {               throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);           }           int offset = 0;           try {               int hoursInMinutes = hoursOffset * 60;               if (hoursInMinutes < 0) {                   minutesOffset = hoursInMinutes - minutesOffset;               } else {                    minutesOffset = hoursInMinutes + minutesOffset;               }           } catch (OverflowException ex) {
public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }         if (durationField.isSupported() && field.isSupported()) {             return 0;         }          return 1;      }          return 0;      }       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }       */      public int compareTo(DurationField
private void interpretAssigns() {                  assign.assignNode.getLastChild(), true)) {                assignedToUnknownValue = true;              }            }           if (assignedToUnknownValue && hasPropertyAssign) {              changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;           }            if (assignedToUnknownValue && hasPropertyAssign) {               changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;           }            if (assignedToUnknownValue && hasPropertyAssign) {               changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;           }            if (assignedToUnknownValue && hasPropertyAssign) {               changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;           }            if (assignedToUnknownValue && hasPropertyAssign) {               changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;           }            if (assignedToUnknownValue && hasPropertyAssign) {               changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;           }            if (assignedToUnknownValue && hasPropertyAssign) {               changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;           }            if (assignedToUnknownValue && hasPropertyAssign) {               changes = markReferencedVar(var) || changes
case 1:                  return val1;              } public static int safeMultiply(int val1, int val2) {      public static long safeMultiply(long val1, int val2) {          switch (val2) {              case -1:                   return -val1;               case 0:                   return 0L;               case 1:                   return val1;               }         }     }    }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
private boolean isVarInlineForbidden(Var var) {       */      private boolean isInlinableObject(List<Reference> refs) {         boolean ret = false;         for (Reference ref : refs) {           Node name = ref.getNode();           Node parent = ref.getParent();           for (Node child : parent.getChildren()) {             if (child.isVar()) {               ret = true;             }           }         }         return ret;      }        return isInlinableObject(refs);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }       return isVarInlineForbidden(var);      }
public EqualsBuilder append(Object lhs, Object rhs) {          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);           } else if (lhs.getClass().getName().equals(rhs.getClass().getName())) {                  this.setEquals(false);           }          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);           }          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);           }          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);           }          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                 isEquals = lhs.equals(rhs);           }          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                 isEquals = lhs.equals(rhs);           }          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                isEquals = lhs.equals(rhs);           }          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                 isEquals = lhs.equals(rhs);           }          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                 isEquals = lhs.equals(rhs);           }
private Node tryMinimizeIf(Node n) {              !mayEffectMutableState(lhs)) {              n.removeChild(cond);              n.removeChild(thenOp);              Node assignName = thenOp.removeFirstChild();              n.removeChild(cond);              n.removeChild(thenOp);              n.removeFirstChild();              Node assignName = thenOp.removeFirstChild();              n.removeChild(cond);              n.removeChild(thenOp);              n.removeFirstChild();              n.removeFirstChild();              Node assignName = thenOp.removeFirstChild();              n.removeChild(cond);              n.removeChild(thenOp);              n.removeFirstChild();              n.removeFirstChild();              Node assignName = thenOp.removeFirstChild();              n.removeChild(cond);              n.removeChild(thenOp);              n.removeFirstChild();              n.removeFirstChild();              Node assignName = thenOp.removeFirstChild();              n.removeChild(cond);              n.removeChild(thenOp);              n.removeFirstChild();              n.removeFirstChild();              Node assignName = thenOp.removeFirstChild();              n.removeChild(cond);              n.removeChild(thenOp);              n.removeFirstChild();              n.removeFirstChild();              Node assignName = thenOp.removeFirstChild();              n.removeChild(cond);              n.removeChild(thenOp);              n.removeFirstChild();              n.removeFirstChild();              Node assignName = thenOp.removeFirstChild();              n.removeChild(cond);              n.removeChild(thenOp);              n.removeFirstChild();              n.removeFirstChild();              Node assignName = thenOp.removeFirstChild();              n.removeChild(cond);              n.removeChild(
private boolean isInlinableObject(List<Reference> refs) {
private void findAliases(NodeTraversal t) {          Node n = v.getNode();          int type = n.getType();          Node parent = n.getParent();         if (parent.isVar()) {           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {            String name = n.getString();            Var aliasVar = scope.getVar(name);            aliases.put(name, aliasVar);            scope.removeVar(name);
public void exitScope(NodeTraversal t) {        if (t.getScopeDepth() == 2) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 1) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 0) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 2) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 2) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 1) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 0) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 2) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 2) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 1) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 0) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;
public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return anyCollection();       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz).getName();       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return anyCollection();       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz).getName();       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz).getName();       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return anyCollection();       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz).getName();       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz).getName();       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return anyCollection();       }       /**       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz).getName();       }       /**       * @return <code>null</code>.        */
protected UnivariatePointValuePair doOptimize() {                      }                  } } else {                 return
public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false);      }      /**       * @param str the string to escape       */      public static void escapeJava(String str) {         * @throws IOException if error occurs on underlying Writer        */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false);      }      /**       * @param str the string to escape       */      public static void escapeJava(String str) {         * @throws IOException if error occurs on underlying Writer        */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false);      }      /**       * @param str the string to escape       */      public static void escapeJava(String str) {         * @throws IOException if error occurs on underlying Writer        */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false);      }      /**       * @param str the string to escape       */      public static void escapeJava(String str) {         * @throws IOException if error occurs on underlying Writer        */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false, false);      }      /**       * @param str the string to escape       */      public static void escapeJava(String str) {         * @throws IOException if error occurs on underlying Writer        */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false, false, false);      }      /**       * @param str the string to escape       */      public static void escapeJava(String str) {         * @throws IOException if error occurs on underlying Writer        */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false, false, false);      }      /**       * @param str the string to escape       */      public static void escapeJava(String str) {         * @throws IOException if error occurs on underlying Writer        */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out,
private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object      private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject(instance);              if (injected!= null) {                  injectionOccurred |= true;                  mocks.remove(injected);              }          }      }          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject(instance);              if (injected!= null) {                  injectionOccurred |= true;                  mocks.remove(injected);              }          }      }          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {             Field field = it.next();            Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject(instance);             if (injected!= null) {                 injectionOccurred |= true;                 mocks.remove(injected);             }         }      }         for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {            Field field = it.next();           Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject(instance);            if (injected!= null) {                 injectionOccurred |= true;                 mocks.remove(injected);             }         }      }         for (Iterator<
public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    }     Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchBody.isBlock());    }     Preconditions.checkState(tryBody.getFirstChild().isBlock());      Preconditions.checkState(catchBody.getFirstChild().isBlock());    }     Preconditions.checkState(tryBody.getFirstChild().getFirstChild().isBlock());      Preconditions.checkState(catchBody.getFirstChild().getFirstChild().isBlock());    }     Preconditions.checkState(tryBody.getFirstChild().getFirstChild().getFirstChild().isBlock());      Preconditions.checkState(catchBody.getFirstChild().getFirstChild().getFirstChild().isBlock());    }     Preconditions.checkState(tryBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());      Preconditions.checkState(catchBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());    }     Preconditions.checkState(tryBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());      Preconditions.checkState(catchBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());    }     Preconditions.checkState(tryBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());      Preconditions.checkState(catchBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());    }     Preconditions.checkState(tryBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());      Preconditions.checkState(catchBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());    }     Preconditions.checkState(tryBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());      Preconditions.checkState(catchBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());    }     Preconditions.checkState(tryBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());      Preconditions.checkState(catchBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());    }     Preconditions.checkState(tryBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().isBlock());      Preconditions.checkState(catchBody.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirst
protected void computeGeometricalProperties() {          if (v.length == 0) {              final BSPTree<Euclidean2D> tree = getTree(true);              if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);              }          }          if (v.length == 0) {              final BSPTree<Euclidean2D> tree = getTree(false);              if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);              }          }          if (v.length == 0) {              final BSPTree<Euclidean2D> tree = getTree(true);              if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);              }          }          if (v.length == 0) {              final BSPTree<Euclidean2D> tree = getTree(false);              if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);              }          }          if (v.length == 0) {             final BSPTree<Euclidean2D> tree = getTree(true);             if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);             }          }          if (v.length == 0) {             final BSPTree<Euclidean2D> tree = getTree(false);             if ((Boolean) tree.getAttribute()) {                 setSize
public boolean setPrototype(PrototypeObjectType prototype) {        return false;      }     boolean replacedPrototype = prototype!= null;      this.prototype = prototype;      this.prototypeSlot = new SimpleSlot("prototype", prototype, true);      this.prototype.setOwnerFunction(this);      if (isConstructor() || isInterface()) {        FunctionType superClass = getSuperClassConstructor();       if (superClass == null) {         return false;       }
}              } public RealMatrix getU()             if (m >= n) {                 final RealMatrix e =                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);                 final double[][] eData = e.getData();                final double[][] wData = new double[m][p];                double[] ei1 = eData[0];               for (int i = 0; i < p; ++i) {                    final double mi = mainBidiagonal[i];                    final double[] ei0 = ei1;
public boolean apply(Node input) {                     case Token.REGEXP:                     case Token.NEW:                       return true;                    }                   return false;                }              }             }            }           }          }         }        }       }      }     }    }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
public static Number createNumber(String str) throws NumberFormatException {          if (decPos > -1) {              if (expPos > -1) {                  if (expPos < decPos) {                       throw new NumberFormatException(str + " is not a valid number.");                   }                   dec = str.substring(decPos + 1, expPos);              }          }          if (decPos > 0) {              if (expPos > 0) {                  if (expPos < decPos) {                       throw new NumberFormatException(str + " is not a valid number.");                   }                   dec = str.substring(decPos + 1, expPos);              }          }          if (decPos > -1) {              if (expPos > -1) {                  if (expPos < decPos) {                       throw new NumberFormatException(str + " is not a valid number.");                  }                  dec = str.substring(decPos + 1, expPos);              }          }          if (decPos > 0) {             if (expPos > 0) {                 if (expPos < decPos) {                      throw new NumberFormatException(str + " is not a valid number.");                 }                  dec = str.substring(decPos + 1, expPos);             }          }          if (decPos > -1) {             if (expPos > -1) {                 if (expPos < decPos) {                      throw new NumberFormatException(str + " is not a valid number.");                 }                  dec =
public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);         if (v2D == null) {             return null;         }          Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));          if (loc1 == null) {              return null;          }
public FitnessFunction() {           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           public double[] decode(final double[] x) {              return                   decode(x);           }           public double[] repairAndDecode(final double[] x) {              return                   repairAndDecode(x);           }           public double[] decode(final double[] x) {              return                   decode(x);           }           public double[] repairAndDecode(final double[] x) {              return                   repairAndDecode(x);           }           public double[] decode(final double[] x) {              return                   decode(x);           }           public double[] repairAndDecode(final double[] x) {              return                   repairAndDecode(x);           }           public double[] decode(final double[] x) {             return                  decode(x);           }           public double[] repairAndDecode(final double[] x) {             return                  repairAndDecode(x);           }           public double[] decode(final double[] x) {             return                 decode(x);           }           public double[] repairAndDecode(final double[] x) {             return                 repairAndDecode(x);           }           public double[] decode(final double[] x) {             return                  decode(x);           }           public double[] repairAndDecode(final double[] x) {             return
private boolean canInline(          }        }       private boolean canInline(          }        }       private boolean canInline(          }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }
public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit, elitismRate);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit, elitismRate);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit, elitismRate);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit, elitismRate);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit, elitismRate);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit, elitismRate);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit, elitismRate);         this.elitismRate = elitismRate;       }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit, elitismRate);         this.elitismRate = elitismRate;       }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit, elitismRate);
void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);        } else {         addExpr(first, p, context);          cc.addOp(opstr, true);          addExpr(last, p + 1, rhsContext);        }        return;      }     }    }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
public long add(long instant, long value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false, instant);              }          }       }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }
protected PointVectorValuePair doOptimize() {                      if (checker!= null) {                          if (checker.converged(getIterations(), previous, current)) {                               setCost(currentCost);                               return current;                           }                       }                       if (checker!= null) {                          if (checker.converged(getIterations(), previous, current)) {                               setCost(currentCost);                               return current;                           }                       }                       if (checker!= null) {                          if (checker.converged(getIterations(), previous, current)) {                              setCost(currentCost);                              return current;                          }                      }                      if (checker!= null) {                         if (checker.converged(getIterations(), previous, current)) {                             setCost(currentCost);                             return current;                         }                     }                      if (checker!= null) {                        if (checker.converged(getIterations(), previous, current)) {
void tryMinimizeExits(Node n, int exitType, String labelName) {         * can cause problems if it changes the completion type of the finally         * block. See ECMA 262 Sections 8.9 & 12.14         */       if (NodeUtil.hasFinally(n)) {         Node finallyBlock = n.getFirstChild();         tryMinimizeExits(finallyBlock, exitType, labelName);       }      }     }    }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
public BooleanOptionHandler(        @Override        public int parseArguments(Parameters params) throws CmdLineException {         String param = params.getParameter(0);          if (param == null) {            setter.addValue(true);            setter.addValue(false);          }
private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private static final long serialVersionUID = 9386874258972L;
private static synchronized String getConvertedId(String id) {             map = new HashMap<String, String>();            map.put("GMT", "UTC"); map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu"); map.put("AST", "America/Anchorage"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST", "Asia/Tokyo"); map.put("VST", "Asia/Ho_Chi_Minh"); map.put("ACT", "America/Argentina/Buenos_Aires"); map.put("JST",
public boolean isNoObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || isNumberObjectType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNumberType() || is
public TimeSeries createCopy(int start, int end)               throw new IllegalArgumentException("Requires start <= end.");            }            TimeSeries copy = (TimeSeries) super.clone();            copy.data = new java.util.ArrayList();            if (this.data.size() > 0) {                for (int index = start; index <= end; index++) {
public String escape(String str) {      public void escape(Writer writer, String str) throws IOException {          int len = str.length();          for (int i = 0; i < len; i++) {             char c = str.charAt(i);              String entityName = this.entityName(c);              if (entityName == null) {                 if (c > 0xFFFF) { writer.write("&                      writer.write(Integer.toString(c, 10));                      writer.write(';');                  }              }          }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }
public void setHourOfDay(final int hourOfDay) {       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }             setMillis(getChronology().hours().add(getMillis(), hours));      }             setMillis(getChronology().hours().add(getMillis(), hours));      }             setMillis(getChronology().hours().add(getMillis(), hours));      }             setMillis(getChronology().hours().add(getMillis(), hours));      }             setMillis(getChronology().hours().add(getMillis(), hours));      }            setMillis(getChronology().hours().add(getMillis(), hours));      }            setMillis(getChronology().hours().add(getMillis(), hours));      }            setMillis(getChronology().hours().add(getMillis(), hours));      }            setMillis(getChronology().hours().add(getMillis(), hours));      }            setMillis(getChronology().hours().add(getMillis(), hours));      }            setMillis(getChronology().hours().add(getMillis(), hours));
public double integrate(final FirstOrderDifferentialEquations equations,
try {                  final Float f = createFloat(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                      return f;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Double d = createDouble(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D &&!allZeros))) {                      return d;                  } } catch (final NumberFormatException nfe) {          }          try {                 final Float f = createFloat(str);                 if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                     return f;                 } } catch (final NumberFormatException nfe) {          }          try {                 final Double d = createDouble(str);                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D &&!allZeros))) {                     return d;                 } } catch (final NumberFormatException nfe) {          }          try {                final Float f = createFloat(str);                 if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                     return f;
public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }         --idx;         indices[i] = idx;          return indices;      }         --idx;         indices[last] = idx;          return indices;      }         --idx;         indices[i] = idx;          return indices;      }         --idx;         indices[last] = idx;          return indices;      }         --idx;         indices[i] = idx;          return indices;      }         --idx;         indices[last] = idx;          return indices;      }         --idx;         indices[i] = idx;          return indices;      }         --idx;         indices[last] = idx;          return indices;      }         --idx;         indices[i] = idx;          return indices;      }         --idx;         indices[last] = idx;          return indices;      }         --idx;         indices[i] = idx;          return indices;      }         --idx;         indices[last] = idx;          return indices;      }         --idx;         indices[i] = idx;          return indices;      }         --idx;         indices[last] = idx;          return indices;      }         --idx;         indices[i] = idx;          return indices;      }         --idx;         indices[last]
public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false, instant);              }          }       }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }
private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false;     if (block.hasChildren()) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }      }      Node cArg = callNode.getFirstChild().getNext();      if (cArg == null) {         hasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);       }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();      if (cArg == null) {         hasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);       }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();      if (cArg == null) {         hasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);       }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();      if (cArg == null) {         hasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);       }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();      if (cArg == null) {         hasSideEffects = NodeUtil.mayHaveSideEffects(cArg, compiler);       }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild
private static final long serialVersionUID = -7105341425736035847L;      private MockitoCore mockitoCore = new MockitoCore();      private ReturnsEmptyValues delegate = new ReturnsEmptyValues();       public Object answer(InvocationOnMock invocation) throws Throwable {           GenericMetadataSupport returnTypeGenericMetadata =                   actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());           Class<?> rawType = returnTypeGenericMetadata.rawType();           if (!mockitoCore.isTypeMockable(rawType)) {                return delegate.returnValueFor(rawType);           }           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS(invocation.getMethod());           Mockito.CALLS_REAL_METHODS
public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = getClone();           return clone;       }        public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = getClone();           return clone;       }        public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = getClone();           return clone;       }        public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = getClone();           return clone;       }        public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = getClone();           return clone;       }        public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = getClone();           return clone;       }        public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = getClone();           return clone;       }        public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = getClone();           return clone;       }        public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = getClone();           return clone;       }        public void delete(int start, int end) {       *         subclasses may differ.        */
public int parseInto(ReadWritableInstant instant, String text, int position) {          long instantMillis = instant.getMillis();          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);          chrono = selectChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = parseChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = parseChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = parseChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = parseChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = parseChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(             instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = parseChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(             instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = parseChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(
public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" +
public static boolean isJSIdentifier(String s) {        int length = s.length();        if (length == 0 ||            !Character.isJavaIdentifierStart(s.charAt(0))) {           return false;         }         for (int i = 0; i < length; i++) {          if (              !Character.isJavaIdentifierPart(s.charAt(i))) {             return false;           }         }         for (int i = 1; i < length; i++) {          if (              !Character.isJavaIdentifierPart(s.charAt(i))) {             return false;           }         }         for (int i = 0; i < length; i++) {          if (              !Character.isJavaIdentifierPart(s.charAt(i))) {             return false;           }         }         for (int i = 1; i < length; i++) {          if (              !Character.isJavaIdentifierPart(s.charAt(i))) {             return false;           }         }         for (int i = 0; i < length; i++) {          if (              !Character.isJavaIdentifierPart(s.charAt(i))) {             return false;           }         }         for (int i = 1; i < length; i++) {          if (              !Character.isJavaIdentifierPart(s.charAt(i))) {             return false;           }         }         for (int i = 0; i < length; i++) {          if (              !Character.isJavaIdentifierPart(s.charAt(i))) {             return false;           }         }         for (int i = 1; i < length; i++) {          if (              !Character.isJavaIdentifierPart(s.charAt(i))) {
private void visitNew(NodeTraversal t, Node n) {      JSType type = getJSType(constructor).restrictByNotNullOrUndefined();      if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {         FunctionType fnType = type.toMaybeFunctionType();        if (fnType!= null) {           visitParameterList(t, n, fnType);           ensureTyped(t, n, fnType.getInstanceType());         } else {            visitParameterList(t, n, getJSType(constructor));            ensureTyped(t, n, getJSType(constructor).restrictByNotNullOrUndefined());         }       } else {          visitParameterList(t, n, getJSType(constructor));           ensureTyped(t, n, getJSType(constructor).restrictByNotNullOrUndefined());        }      }     }    }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
private void unrollBinaryOperator(      Node current = firstNonOperator;      do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);    }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);   }      addExpr(current.
public void setRangeAxes(ValueAxis[] axes) {       * @since 1.0.7        */       public int getRangeAxisIndex(ValueAxis axis) {          if (axis == null) {              return 0;          }           int result = this.rangeAxes.indexOf(axis);           if (result < 0) {               Plot parent = getParent();              int index = parent.getIndex(axis);               if (index >= 0) {                   return index;               }           } else {                Plot parent = getParent();               int index = parent.getIndex(axis);                if (index >= 0) {                    return index;                }           }       }        * @since 1.0.7        */       public int getRangeAxisIndex(ValueAxis axis) {           int result = this.rangeAxes.indexOf(axis);           if (result < 0) {               Plot parent = getParent();              int index = parent.getIndex(axis);               if (index >= 0) {                   return index;               }           } else {               Plot parent = getParent();              int index = parent.getIndex(axis);               if (index >= 0) {                   return index;               }           }       }        * @since 1.0.7       */       public int getRangeAxisIndex(ValueAxis axis) {          int result = this.rangeAxes.indexOf(axis);          if (result < 0) {              Plot parent = getParent();             int index = parent.getIndex(axis);              if (index >= 0) {                  return index;              }          } else {              Plot parent = getParent();             int index = parent.getIndex(
public void removeRow(int rowIndex) {       */       public void removeRow(Comparable rowKey) {         if (rowKey == null) {             throw new IllegalArgumentException("Null 'rowKey' argument.");         }           int index = getRowIndex(rowKey);           removeRow(index);       }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }
public static double cosh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x!= 0 && y!= 0);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == 0 && y!= 0);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == 0 && y!= 0);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == 0 && y!= 0);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == 0 && y!= 0);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == 0 && y!= 0);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == 0 && y!= 0);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == 0 && y!= 0);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == 0 && y!= 0);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == 0 && y!= 0);      }      /**       * @return {@code true} if the values are equal.       */
public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }               setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }             setMillis(getChronology().minutes().add(getMillis(), minutes));      }             setMillis(getChronology().minutes().add(getMillis(), minutes));      }             setMillis(getChronology().minutes().add(getMillis(), minutes));      }             setMillis(getChronology().minutes().add(getMillis(), minutes));      }             setMillis(getChronology().minutes().add(getMillis(), minutes));      }            setMillis(getChronology().minutes
private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,      do {        switch (token) {          case STAR:             if (ignoreStar) {             } else {               if (builder.length() > 0) {                  builder[0] = '\0';               }              }           }        }      }        switch (token) {          case STAR:             if (ignoreStar) {             } else {               if (builder.length() > 0) {                  builder[0] = '\0';               }             }        }      }        switch (token) {          case STAR:             if (ignoreStar) {             } else {               if (builder.length() > 0) {                  builder[0] = '\0';               }             }        }     }        switch (token) {          case STAR:             if (ignoreStar) {             } else {               if (builder.length() > 0) {                  builder[0] = '\0';               }             }        }     }        switch (token) {          case STAR:             if (ignoreStar) {             } else {               if (builder.length() > 0) {                  builder[0] = '\0';               }             }        }     }        switch (token) {          case STAR:            if (ignoreStar) {            } else {               if (builder.length() > 0) {                  builder[0] = '\0';               }            }        }
public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces!= null && java.util.Arrays.asList(extraInterfaces).contains(classToMock);       }       public void initiateMockName(Class classToMock) {         if (extraInterfaces == null) {             return;         }                                                                                                                                                                                                                          public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces!= null && java.util.Arrays.asList(extraInterfaces).contains(classToMock);       }       public void initiateMockName(Class classToMock) {         if (extraInterfaces == null) {             return;         }         if (classToMock == null) {             return;         }                                                                                                                                                                                                                      public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces!= null && java.util.Arrays.asList(extraInterfaces).contains(classToMock);       }       public void initiateMockName(Class classToMock) {         if (extraInterfaces == null) {             return;         }         if (classToMock == null) {             return;         }
NodeUtil.mayHaveSideEffects(this); void apply() {        this.nameNode = nameNode;        this.isPropertyAssign = isPropertyAssign;        this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(this);      }        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(this);     }        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(this);     }        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(this);     }        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(this);     }        this.mayHaveSecondarySideEffects =           maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(this);     }        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(this);     }        this.mayHaveSecondarySideEffects =           maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(this);     }        this.mayHaveSecondarySideEffects =           maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(this);     }        this.mayHaveSecondarySideEffects =           maybeAliased ||
private Node tryFoldComparison(Node n, Node left, Node right) {            && right.getString().equals("undefined"))            || (Token.VOID == right.getType()                && NodeUtil.isLiteralValue(right.getFirstChild(), false)));             || (Token.VOID == left.getType()                 && NodeUtil.isLiteralValue(left.getFirstChild(), false)));              || (Token.VOID == right.getType()                 && NodeUtil.isLiteralValue(right.getFirstChild(), false)));               || (Token.VOID == left.getType()                  && NodeUtil.isLiteralValue(left.getFirstChild(), false)));                || (Token.VOID == right.getType()                  && NodeUtil.isLiteralValue(right.getFirstChild(), false)));                || (Token.VOID == left.getType()                  && NodeUtil.isLiteralValue(left.getFirstChild(), false)));                || (Token.VOID == right.getType()                 && NodeUtil.isLiteralValue(right.getFirstChild(), false)));                || (Token.VOID == left.getType()                  && NodeUtil.isLiteralValue(left.getFirstChild(), false)));                || (Token.VOID == right.getType()                  && NodeUtil.isLiteralValue(right.getFirstChild(), false)));                || (Token.VOID == left.getType()                 && NodeUtil.isLiteralValue(left.getFirstChild(), false)));                || (Token.VOID == right.getType()                  && NodeUtil.isLiteralValue(right.getFirstChild(), false)));                || (Token.VOID == left.getType()                   && NodeUtil.isLiteralValue(left.getFirstChild(), false)));                || (Token.VOID == right.getType()                  && NodeUtil.
private void inlineAliases(GlobalNamespace namespace) {
private static boolean isAssignable(Type type, ParameterizedType toParameterized                  toClass, typeVarAssigns);         for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());             if (toTypeArg!= null &&!fromTypeArg.isAssignableFrom(toTypeArg)) {                 return false;             }              Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());              if (toTypeArg!= null &&!fromTypeArg.isAssignableFrom(toTypeArg)) {                  return false;              }         }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());             if (toTypeArg!= null &&!fromTypeArg.isAssignableFrom(toTypeArg)) {                  return false;              }              Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());             if (toTypeArg!= null &&!fromTypeArg.isAssignableFrom(toTypeArg)) {                 return false;              }          }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {            Type toTypeArg = entry.getValue();            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());            if (toTypeArg!= null &&!fromTypeArg.isAssignableFrom(toTypeArg)) {                return false;             }             Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());            if (toTypeArg!= null &&!fromTypeArg.isAssignableFrom(toTypeArg)) {                return false;             }          }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {           Type toTypeArg = entry.getValue();
public static boolean isEmpty(boolean[] array) {          } else if (element!= null) {              type = element.getClass();          } else {             type = null;          } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);           if (newArray == null) {               type = null;           }            type = element.getClass();          } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);           if (newArray == null) {               type = null;           }            type = element.getClass();          }           type = null;           type = element.getClass();          }           type = null;           type = element.getClass();          }           type = null;           type = element.getClass();          }           type = null;           type = element.getClass();          }           type = null;           type = element.getClass();          }           type = null;           type = element.getClass();          }           type = null;           type = element.getClass();          }           type = null;           type = element.getClass();          }           type = null;           type = element.getClass();          }          type = null;          type = element.getClass();         }          type = null;          type = element.getClass();         }          type = null;          type = element.getClass();         }          type = null;          type = element.getClass();         }          type = null;          type = element.getClass();         }          type = null;          type
public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                   this.seriesKeys = null;                   this.categoryKeys = null;                }            }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }           }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }         }
void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,              || FunctionTypeBuilder.isFunctionTypeDeclaration(info));        }        if (inferred) {         inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));        }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }        if (!inferred) {          return;         }       }
