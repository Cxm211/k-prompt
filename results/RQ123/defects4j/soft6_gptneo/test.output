public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>float</tt>.       */      public float percentageValue() {         return multiply(100).floatValue();      }      /**       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>float</tt>.       */      public float percentageValue() {         return multiply(100).floatValue();      }      /**       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>float</tt>.       */      public float percentageValue() {         return multiply(100).floatValue();      }      /**       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>float</tt>.       */      public float percentageValue() {         return multiply(100).floatValue();      }      /**       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {          return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {         return true;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:          return false;        case Token.FUNCTION:        case Token.REGEXP:        case Token.LP:        case Token.ARRAYLIT:
protected UnivariatePointValuePair doOptimize() {                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                          return current;                       }                  }              }                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                          return current;                       }                  }              }                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                           return current;                       }                  }              }                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                           return current;                       }                  }              }                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                           return current;                       }                  }              }                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                           return current;                       }
public double solve(final UnivariateRealFunction f,               return solve(f, initial, yInitial, max, yMax, initial, yInitial);          }          return solve(f, min, yMin, max, yMax, min, yInitial);
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset < -23 || hoursOffset > 23) {              throw new IllegalArgumentException("Hours out of range: " + hoursOffset);          }         if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {              int hoursInMinutes = hoursOffset * 60;              if (hoursInMinutes < 0) {                  minutesOffset = hoursInMinutes - minutesOffset;              } else {                   minutesOffset = hoursInMinutes + minutesOffset;              }          }           int offset = 0;          try {              int hoursInMinutes = hoursOffset * 60;              if (hoursInMinutes < 0) {                  minutesOffset = hoursInMinutes - minutesOffset;              } else {                   minutesOffset = hoursInMinutes + minutesOffset;              }          }           int offset = 0;          try {               int hoursInMinutes = hoursOffset * 60;              if (hoursInMinutes < 0) {                   minutesOffset = hoursInMinutes - minutesOffset;              } else {                   minutesOffset = hoursInMinutes + minutesOffset;              }          }           int offset = 0;           try {               int hoursInMinutes = hoursOffset * 60;
public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }        if (durationField.isSupported() &&
private void interpretAssigns() {                  assign.assignNode.getLastChild(), true)) {                 assignedToUnknownValue = true;               }              maybeUnreferenced.remove(current);              current--;            }           if (assignedToUnknownValue && hasPropertyAssign) {              changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;           }         }           if (assignedToUnknownValue && hasPropertyAssign) {              changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;           }        }           if (assignedToUnknownValue && hasPropertyAssign) {                 changes = markReferencedVar(var) || changes;                 maybeUnreferenced.remove(current);                 current--;           }       }           if (assignedToUnknownValue && hasPropertyAssign) {                 changes = markReferencedVar(var) || changes;                 maybeUnreferenced.remove(current);                 current--;           }       }           if (assignedToUnknownValue && hasPropertyAssign) {                 changes = markReferencedVar(var) || changes;                 maybeUnreferenced.remove(current);                 current--;           }       }           if (assignedToUnknownValue && hasPropertyAssign) {                 changes = markReferencedVar(var) || changes;                 maybeUnreferenced.remove(current);                 current--;           }       }           if (assignedToUnknownValue && hasPropertyAssign) {
public static int safeMultiply(int val1, int val2) {      public static long safeMultiply(long val1, int val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L;              }              break;              case -1:                  return -val1;              case 0:                  return 0L;              }              break;              case -1:                  return -val1;              case 0:                  return 0L;              }              break;              case -1:                  return -val1;              case 0:                  return 0L;              }              break;              case -1:                  return -val1;              case 0:                  return 0L;              }              break;              case -1:                  return -val1;              case 0:                  return 0L;              }              break;              case -1:                  return -val1;               case 0:                  return 0L;              }              break;              case -1:                   return -val1;               case 0:                   return 0L;              }
private boolean isVarInlineForbidden(Var var) {       */      private boolean isInlinableObject(List<Reference> refs) {        boolean ret = false;        for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();          if (parent!= null && parent.isBlock()) {            ret = true;          }        }        return ret;      }        for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();          if (parent!= null && parent.isBlock()) {            ret = true;          }        }        return ret;      }        for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();          if (parent!= null && parent.isBlock()) {             ret = true;          }        }        return ret;      }        for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();          if (parent!= null && parent.isBlock()) {             ret = true;          }        }        return ret;      }        for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();          if (parent!= null && parent.isBlock()) {             ret = true;          }        }        return ret;      }        for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();          if (parent!= null && parent.isBlock()) {             ret = true;          }        }        return ret;      }        for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();          if (parent!= null && parent.isBlock()) {             ret = true;          }        }        return ret;      }        for (Reference ref : refs) {
public EqualsBuilder append(Object lhs, Object rhs) {          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs.getClass().getName().equals(rhs.getClass().getName())) {              this.setEquals(false);          }
private Node tryMinimizeIf(Node n) {              !mayEffectMutableState(lhs)) {              n.removeChild(cond);              Node assignName = thenOp.removeFirstChild();              if (mayEffectMutableState(lhs)) {                   n.removeChild(cond);              }             }              Node assignName = thenOp.removeFirstChild();              if (mayEffectMutableState(lhs)) {                   n.removeChild(cond);              }              Node assignName = thenOp.removeFirstChild();              if (mayEffectMutableState(lhs)) {                   n.removeChild(cond);              }              Node assignName = thenOp.removeFirstChild();              if (mayEffectMutableState(lhs)) {                   n.removeChild(cond);              }              Node assignName = thenOp.removeFirstChild();              if (mayEffectMutableState(lhs)) {                    n.removeChild(cond);              }               Node assignName = thenOp.removeFirstChild();              if (mayEffectMutableState(lhs)) {                    n.removeChild(cond);              }               Node assignName = thenOp.removeFirstChild();               if (mayEffectMutableState(lhs)) {                    n.removeChild(cond);              }               Node assignName = thenOp.removeFirstChild();               if (mayEffectMutableState(lhs)) {                    n.removeChild(cond);              }               Node assignName = thenOp.removeFirstChild();               if (mayEffectMutableState(lhs)) {                    n.removeChild(cond);              }               Node assignName = thenOp.removeFirstChild();               if (mayEffectMutableState(lhs)) {
private boolean isInlinableObject(List<Reference> refs) {          if (refs == null) {              return false;          }          if (refs.isEmpty()) {              return false;          }          if (refs.get(0) == null) {              return false;          }          if (refs.get(1) == null) {              return false;          }          if (refs.get(2) == null) {              return false;          }          if (refs.get(3) == null) {              return false;          }          if (refs.get(4) == null) {              return false;          }          if (refs.get(5) == null) {              return false;          }          if (refs.get(6) == null) {              return false;          }          if (refs.get(7) == null) {              return false;          }          if (refs.get(8) == null) {              return false;          }          if (refs.get(9) == null) {              return false;          }          if (refs.get(10) == null) {              return false;          }          if (refs.get(11) == null) {              return false;          }          if (refs.get(12) == null) {              return false;          }          if (refs.get(13) == null) {              return false;          }          if (refs.get(14) == null) {              return false;          }          if (refs.get(15) == null) {              return false;          }          if (refs.get(16) == null) {              return false;          }          if (refs.get(17) == null) {              return false;          }          if (refs.get(18) == null) {              return false
private void findAliases(NodeTraversal t) {          Node n = v.getNode();          int type = n.getType();          Node parent = n.getParent();          if (parent.isVar()) {            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {             String name = n.getString();             Var aliasVar = scope.getVar(name);             aliases.put(name, aliasVar);           }         }          if (parent.isFunction()) {            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {             String name = n.getString();             Var aliasVar = scope.getVar(name);             aliases.put(name, aliasVar);          }           if (parent.isFunction()) {             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {              String name = n.getString();              Var aliasVar = scope.getVar(name);              aliases.put(name, aliasVar);           }          }           if (parent.isFunction()) {             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {              String name = n.getString();              Var aliasVar = scope.getVar(name);              aliases.put(name, aliasVar);           }          }           if (parent.isFunction()) {             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {              String name = n.getString();              Var aliasVar = scope.getVar(name);              aliases.put(name, aliasVar);           }            if (parent.isFunction()) {              if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {               String name = n.getString();               Var aliasVar = scope.getVar(name);               aliases.put(name, aliasVar);
public void exitScope(NodeTraversal t) {        if (t.getScopeDepth() == 2) {          renameNamespaceShadows(t);           aliases.clear();           forbiddenLocals.clear();           transformation = null;         }       }        if (t.getScopeDepth() == 1) {          renameNamespaceShadows(t);           aliases.clear();           forbiddenLocals.clear();           transformation = null;         }       }        if (t.getScopeDepth() == 0) {          renameNamespaceShadows(t);           aliases.clear();           forbiddenLocals.clear();           transformation = null;         }       }        if (t.getScopeDepth() == 1) {          renameNamespaceShadows(t);           aliases.clear();           forbiddenLocals.clear();           transformation = null;         }       }        if (t.getScopeDepth() == 0) {          renameNamespaceShadows(t);           aliases.clear();           forbiddenLocals.clear();           transformation = null;         }       }        if (t.getScopeDepth() == 1) {          renameNamespaceShadows(t);           aliases.clear();           forbiddenLocals.clear();           transformation = null;         }       }        if (t.getScopeDepth() == 0) {          renameNamespaceShadows(t);           aliases.clear();           forbiddenLocals.clear();           transformation = null;         }       }        if (t.getScopeDepth() == 1) {          renameNamespaceShadows(t);           aliases.clear();           forbiddenLocals.clear();           transformation = null;         }       }        if (t.getScopeDepth() == 0) {          renameNamespaceShadows(t);           aliases.clear();           forbiddenLocals.clear();            transformation = null;         }       }        if (t.getScopeDepth() == 1) {          renameNamespaceShadows(t);           aliases.clear();
public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return anyCollection().isEmpty();       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNotNull();       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return anyCollection().isEmpty();       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNotNull();       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return anyCollection().isEmpty();       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNotNull();       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return anyCollection().isEmpty();       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNotNull();       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return anyCollection().isEmpty();       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNotNull();       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return anyCollection().isEmpty();       }
protected UnivariatePointValuePair doOptimize() {                     }                  } } else {                 return
public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false, false, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, false, false, false, false, false, false);
private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object      private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance, false).thenInject();              if (injected!= null) {                   injectionOccurred |= true;                   mocks.remove(injected);                    return true;                  }              }          }      }           for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();              if (injected!= null) {                   injectionOccurred |= true;                  mocks.remove(injected);                   return true;              }          }      }           for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance, false).thenInject();              if (injected!= null) {                   injectionOccurred |= true;                   mocks.remove(injected);                   return true;              }          }      }           for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance, false).thenInject();
public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(finallyBody.isBlock());     Node catchBody = block(catchNode).copyInformationFrom(finallyBody);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(finallyBody.isBlock());     Node catchBody = block(catchNode).copyInformationFrom(finallyBody);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(finallyBody.isBlock());     Node catchBody = block(catchNode).copyInformationFrom(finallyBody);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(finallyBody.isBlock());     Node catchBody = block(catchNode).copyInformationFrom(finallyBody);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(finallyBody.isBlock());     Node catchBody = block(catchNode).copyInformationFrom(finallyBody);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(finallyBody.isBlock());     Node catchBody = block(catchNode).copyInformationFrom(finallyBody);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(finallyBody.isBlock());     Node catchBody = block(catchNode).copyInformationFrom(finallyBody);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(finallyBody.isBlock());     Node catchBody = block(catchNode).copyInformationFrom(finallyBody);      return new Node(Token.TRY, tryBody, catchBody);    }
protected void computeGeometricalProperties() {          if (v.length == 0) {               final BSPTree<Euclidean2D> tree = getTree(false);               if ((Boolean) tree.getAttribute()) {                   setSize(Double.NEGATIVE_INFINITY);                   setBarycenter(Vector2D.NaN);                   return;               }               setSize(Double.POSITIVE_INFINITY);               setBarycenter(Vector2D.NaN);               return;             }             setSize(Double.NEGATIVE_INFINITY);             setBarycenter(Vector2D.NaN);             return;          }          if (v.length == 0) {               final BSPTree<Euclidean2D> tree = getTree(false);              if ((Boolean) tree.getAttribute()) {                   setSize(Double.NEGATIVE_INFINITY);                   setBarycenter(Vector2D.NaN);                   return;               }               setSize(Double.POSITIVE_INFINITY);               setBarycenter(Vector2D.NaN);               return;             }             setSize(Double.NEGATIVE_INFINITY);             setBarycenter(Vector2D.NaN);             return;          }          if (v.length == 0) {               final BSPTree<Euclidean2D> tree = getTree(false);              if ((Boolean) tree.getAttribute()) {                   setSize(Double.NEGATIVE_INFINITY);                   setBarycenter(Vector2D.NaN);                   return;               }               setSize(Double.POSITIVE_INFINITY);               setBary
public boolean setPrototype(PrototypeObjectType prototype) {        return false;      }     boolean replacedPrototype = prototype!= null;      this.prototype = prototype;      this.prototypeSlot = new SimpleSlot("prototype", prototype, true, true);      this.prototype.setOwnerFunction(this);      if (isConstructor() || isInterface()) {        FunctionType superClass = getSuperClassConstructor();        if (superClass == null) {           return false;        }        if (isInterface()) {           return false;        }         FunctionType superClass = getSuperClassConstructor();         if (superClass == null) {            return false;         }         if (isConstructor()) {            return false;         }          FunctionType superClass = getSuperClassConstructor();          if (superClass == null) {             return false;         }          if (isInterface()) {             return false;          }           FunctionType superClass = getSuperClassConstructor();           if (superClass == null) {              return false;          }           if (isConstructor()) {              return false;          }           FunctionType superClass = getSuperClassConstructor();           if (superClass == null) {              return false;          }           if (isInterface()) {              return false;          }            FunctionType superClass = getSuperClassConstructor();            if (superClass == null) {               return false;           }            if (isConstructor()) {               return false;           }            FunctionType superClass = getSuperClassConstructor();            if (superClass == null) {               return false;           }            if (isInterface()) {                return false;           }             FunctionType superClass = getSuperClassConstructor();             if (superClass == null) {                return false;
public RealMatrix getU()               if (m >= n) {                    final RealMatrix e =                         eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);                    final double[][] eData = e.getData();                    final double[][] wData = new double[m][p];                    double[] ei1 = eData[0];                   for (int i = 0; i < p; ++i) {                        wData[i] = ei1;                    }
public boolean apply(Node input) {                    case Token.REGEXP:                    case Token.NEW:                      return true;                   }                   return false;                }              }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }             return false;            }
public static Number createNumber(String str) throws NumberFormatException {          if (decPos > -1) {              if (expPos > -1) {                  if (expPos < decPos) {                       throw new NumberFormatException(str + " is not a valid number.");                  }                  dec = str.substring(decPos + 1, expPos);
public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2, includeEndPoin);          Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
public FitnessFunction() {           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           */          public double[] repairAndDecode(final double[] x) {             return                   decode(x);          }           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }            */          public double[] repairAndDecode(final double
private boolean canInline(
public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit,
void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);        } else {         addExpr(first, p, context);         cc.addOp(opstr, true);         addExpr(last, p + 1, rhsContext);        }        return;      }       addExpr(first, p, context);       cc.addOp(opstr, true);       addExpr(last, p + 1, rhsContext);      }      return;     }      addExpr(first, p, context);      cc.addOp(opstr, true);      addExpr(last, p + 1, rhsContext);     }      return;     }      addExpr(first, p, context);      cc.addOp(opstr, true);      addExpr(last, p + 1, rhsContext);     }      return;     }      addExpr(first, p, context);      cc.addOp(opstr, true);      addExpr(last, p + 1, rhsContext);     }      return;     }      addExpr(first, p, context);      cc.addOp(opstr, true);      addExpr(last, p + 1, rhsContext);     }      return;     }      addExpr(first, p, context);      cc.addOp(opstr, true);      addExpr(last, p + 1, rhsContext);     }      return;     }      addExpr(first, p, context);      cc.addOp(opstr, true);      addExpr(last, p + 1, rhsContext);     }      return;     }      addExpr(first, p, context);      cc.addOp(opstr, true);      addExpr(last, p + 1, rhsContext);     }      return;     }      addExpr(first, p, context);      cc.addOp(opstr, true);      addExpr(last, p + 1, rhsContext);     }      return;     }      addExpr(first, p, context);      cc.addOp(opstr, true);      addExpr(last, p + 1, rhsContext);     }      return;     }      addExpr(first, p, context);      cc.addOp(opstr, true);      addExpr(last, p + 1, rhsContext);     }      return;     }      addExpr
public long add(long instant, long value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.add(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false, instant);              }          }       }
protected PointVectorValuePair doOptimize() {                     if (checker!= null) {                         if (checker.converged(getIterations(), previous, current)) {                              setCost(currentCost);                              return current;                          }                      }                     if (checker!= null) {                          if (checker.converged(getIterations(), previous, current)) {                               setCost(currentCost);                               return current;                           }                      }                      if (checker!= null) {                           if (checker.converged(getIterations(), previous, current)) {                               setCost(currentCost);                               return current;                           }                      }                      if (checker!= null) {                           if (checker.converged(getIterations(), previous, current)) {                               setCost(currentCost);                               return current;                           }                      }                      if (checker!= null) {                           if (checker.converged(getIterations(), previous, current)) {
void tryMinimizeExits(Node n, int exitType, String labelName) {         * can cause problems if it changes the completion type of the finally         * block. See ECMA 262 Sections 8.9 & 12.14         */       if (NodeUtil.hasFinally(n)) {         Node finallyBlock = n.getFirstChild();         tryMinimizeExits(finallyBlock, exitType, labelName);       }      }     }
public BooleanOptionHandler(        @Override        public int parseArguments(Parameters params) throws CmdLineException {         String param = params.getParameter(0);          if (param == null) {            setter.addValue(true);            return 0;          }          int paramIndex = param.indexOf('=');          if (paramIndex >= 0) {             setter.addValue(true, param.substring(paramIndex + 1));             return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;          }          setter.addValue(false, param.substring(paramIndex + 1));          return paramIndex + 1;
private static final long serialVersionUID = 9386874258972L;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                 private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                   private volatile int iPeriod;                   private volatile int iPeriod;                   private volatile int iPeriod;                   private volatile int iPeriod;                   private volatile int iPeriod;                   private volatile int iPeriod;                    private volatile int iPeriod;                    private volatile int iPeriod;                    private volatile int iPeriod;
private static synchronized String getConvertedId(String id) {               map = new HashMap<String, String>();               map.put("GMT", "UTC");               map.put("MIT", "Pacific/Apia");
public boolean isNoObjectType() {    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoType() || isNo
public TimeSeries createCopy(int start, int end)              throw new IllegalArgumentException("Requires start <= end.");           }           TimeSeries copy = (TimeSeries) super.clone();           copy.data = new java.util.ArrayList();           if (this.data.size() > 0) {               for (int index = start; index <= end; index++) {                  if (this.data.get(index)!= null) {
public String escape(String str) {      public void escape(Writer writer, String str) throws IOException {          int len = str.length();          for (int i = 0; i < len; i++) {             char c = str.charAt(i);              String entityName = this.entityName(c);              if (entityName == null) {                 if (c > 0xFFFF) { writer.write("&
public void setHourOfDay(final int hourOfDay) {       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }              setMillis(getChronology().hours().add(getMillis(), hours));      }               setMillis(getChronology().hours().add(getMillis(), hours));      }               setMillis(getChronology().hours().add(getMillis(), hours));      }
public double integrate(final FirstOrderDifferentialEquations equations,
public static Number createNumber(final String str) throws NumberFormatException          final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);          try {                  final Float f = createFloat(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                       return f;                  } } catch (final NumberFormatException nfe) {          }          try {                   final Double d = createDouble(str);                   if (!(d.isInfinite() || (d.doubleValue() == 0.0D &&!allZeros))) {                        return d;                   } } catch (final NumberFormatException nfe) {          }          try {                   final Float f2 = createFloat(str);                   if (!(f2.isInfinite() || (f2.floatValue() == 0.0F &&!allZeros))) {                        return f2;                   } } catch (final NumberFormatException nfe) {          }          try {                    final Double d2 = createDouble(str);                    if (!(d2.isInfinite() || (d2.doubleValue() == 0.0D &&!allZeros))) {                         return d2;                    } } catch (final NumberFormatException nfe) {          }          try {                    final Float
public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             incrementidx();          }         --idx;         indices[last] = idx;          return indices;      }         int idx = 1;         while (count < index) {             count += idx;             incrementidx();          }         --idx;         indices[last] = idx;          return indices;      }         int idx = 1;         while (count < index) {             count += idx;             incrementidx();          }         --idx;         indices[last] = idx;          return indices;      }         int idx = 1;         while (count < index) {             count += idx;             incrementidx();          }         --idx;         indices[last] = idx;          return indices;      }         int idx = 1;         while (count < index) {             count += idx;             incrementidx();          }         --idx;         indices[last] = idx;          return indices;      }         int idx = 1;         while (count < index) {             count += idx;             incrementidx();          }         --idx;         indices[last] = idx;          return indices;      }         int idx = 1;         while (count < index) {              count += idx;             incrementidx();          }         --idx;         indices[last] = idx;          return indices;      }
public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.add(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false, instant);              }          }       }
private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false;     if (block.hasChildren()) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();     if (cArg == null) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();     if (cArg == null) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();     if (cArg == null) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();     if (cArg == null) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();     if (cArg == null) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();     if (cArg == null) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(
private static final long serialVersionUID = -7105341425736035847L;      private MockitoCore mockitoCore = new MockitoCore();      private ReturnsEmptyValues delegate = new ReturnsEmptyValues();       public Object answer(InvocationOnMock invocation) throws Throwable {           GenericMetadataSupport returnTypeGenericMetadata =                   actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());           Class<?> rawType = returnTypeGenericMetadata.rawType();           if (!mockitoCore.isTypeMockable(rawType)) {               return delegate.returnValueFor(rawType);           }           MockitoCore mockitoCore = new MockitoCore();           if (mockitoCore.isTypeMockable(rawType)) {               return mockitoCore.getMock();           }           MockitoCore mockitoCore = new MockitoCore();           if (mockitoCore.isTypeMockable(rawType)) {               return mockitoCore.getMock();           }           MockitoCore mockitoCore = new MockitoCore();           if (mockitoCore.isTypeMockable(rawType)) {               return mockitoCore.getMock();           }           MockitoCore mockitoCore = new MockitoCore();           if (mockitoCore.isTypeMockable(rawType)) {               return mockitoCore.getMock();           }           MockitoCore mockitoCore = new MockitoCore();           if (mockitoCore.isTypeMockable(rawType)) {               return mockitoCore.getMock();           }           MockitoCore mockitoCore = new MockitoCore();           if (mockitoCore.isTypeMockable(rawType)) {               return mockitoCore.getMock();           }           MockitoCore mockitoCore = new MockitoCore();           if (mockitoCore.isTypeMockable(rawType)) {               return mockitoCore.getMock();
public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = super.clone();           return clone;       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount() - 1);       }          return createCopy(0, getItemCount
public int parseInto(ReadWritableInstant instant, String text, int position) {          long instantMillis = instant.getMillis();          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);          chrono = selectChronology(chrono);         int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = instant.getChronology();          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = instant.getChronology();          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(               instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = instant.getChronology();          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(               instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = instant.getChronology();          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(               instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = instant.getChronology();          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(               instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = instant.getChronology();          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(               instantLocal, chrono, iLocale, iPivotYear, defaultYear);          chrono = instant.getChronology();          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket
public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                 "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + getMockName() + "':",                  getLocation()          ));      }          throw new VerificationInOrderFailure(join(                 "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + getMockName() + "':",                  getLocation()          ));      }          throw new VerificationInOrderFailure(join(                 "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + getMockName() + "':",                  getLocation()          ));      }          throw new VerificationInOrderFailure(join(                 "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + getMockName() + "':",                  getLocation()          ));      }          throw new VerificationInOrderFailure(join(                 "No interactions wanted here:",                  new LocationImpl(),                  "But found this interaction on mock '" + getMockName() + "':",                  getLocation()          ));      }          throw new VerificationInOrderFailure(join(                 "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + getMockName() + "':",                  getLocation()          ));      }          throw new VerificationInOrderFailure(join(                 "No interactions wanted here:
public static boolean isJSIdentifier(String s) {        int length = s.length();        if (length == 0 ||            !Character.isJavaIdentifierStart(s.charAt(0))) {          return false;        }        for (int i = 0; i < length; i++) {         if (             !Character.isJavaIdentifierPart(s.charAt(i))) {            return false;          }        }        return true;
private void visitNew(NodeTraversal t, Node n) {      JSType type = getJSType(constructor).restrictByNotNullOrUndefined();      if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {        FunctionType fnType = type.toMaybeFunctionType();        if (fnType!= null) {           visitParameterList(t, n, fnType);           ensureTyped(t, n, fnType.getInstanceType());         } else {           type = getJSType(constructor).restrictByNotNullOrUndefined();           if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {              FunctionType fnType = type.toMaybeFunctionType();              if (fnType!= null) {                 visitParameterList(t, n, fnType);                  ensureTyped(t, n, fnType.getInstanceType());               } else {                 type = getJSType(constructor).restrictByNotNullOrUndefined();                  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {                     FunctionType fnType = type.toMaybeFunctionType();                     if (fnType!= null) {                       visitParameterList(t, n, fnType);                        ensureTyped(t, n, fnType.getInstanceType());                     } else {                       type = getJSType(constructor).restrictByNotNullOrUndefined();                        if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {                          FunctionType fnType = type.toMaybeFunctionType();                          if (fnType!= null) {                            visitParameterList(t, n, fnType);                             ensureTyped(t, n, fnType.getInstanceType());                          } else {
private void unrollBinaryOperator(      Node current = firstNonOperator;      do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild(), rightPrecedence, rhsContext);      } while (current!= n);    }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);    }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current.getFirstChild(), rightPrecedence, rhsContext);   }      addExpr(current
public void setRangeAxes(ValueAxis[] axes) {       * @since 1.0.7        */       public int getRangeAxisIndex(ValueAxis axis) {          if (axis == null) {                return 0;          }          int result = this.rangeAxes.indexOf(axis);  if (result < 0) {              Plot parent = getParent();              if (parent == null) {                   return 0;              }              int result2 = this.rangeAxes.indexOf(axis.getParent());              if (result2 < 0) {                   Plot parent2 = getParent();                   if (parent2 == null) {                       return 0;                   }                   int result3 = this.rangeAxes.indexOf(axis.getParent().getParent());                   if (result3 < 0) {                        Plot parent3 = getParent();                       if (parent3 == null) {                           return 0;                       }                   }                    int result4 = this.rangeAxes.indexOf(axis.getParent().getParent());                   if (result4 < 0) {                        Plot parent4 = getParent();                       if (parent4 == null) {                           return 0;                       }                    }                    int result5 = this.rangeAxes.indexOf(axis.getParent().getParent());                   if (result5 < 0) {                        Plot parent5 = getParent();                       if (parent5 == null) {                           return 0;
public void removeRow(int rowIndex) {       */       public void removeRow(Comparable rowKey) {          if (rowKey == null) {              throw new IllegalArgumentException("Null 'rowKey' argument.");          }          int index = getRowIndex(rowKey);           removeRow(index);       }
public static double cosh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (y!= 0 && Double.isNaN(x));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (y!= 0 && Double.isNaN(x));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (y!= 0 &&!Double.isNaN(x));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (y!= 0 &&!Double.isNaN(x));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (y!= 0 &&!Double.isNaN(x));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (y!= 0 &&!Double.isNaN(x));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (y!= 0 &&!Double.isNaN(x));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (y!= 0 &&!Double.isNaN(x));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (y!= 0 &&!Double.isNaN(x));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (
public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().minutes().add(getMillis(), minutes));      }              setMillis(getChronology().min
private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,      do {        switch (token) {          case STAR:            if (ignoreStar) {            } else {              if (builder.length() > 0) {                builder.extract(0, 0);              }            }            break;
public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces!= null && java.util.Arrays.asList(extraInterfaces).contains(Serializable.class);       }       public void initiateMockName(Class classToMock) {          if (extraInterfaces == null) {              return;          }          if (java.io.Serializable.class.isAssignableFrom(extraInterfaces.get(Serializable.class))) {              extraInterfaces.remove(Serializable.class);          }       }          if (extraInterfaces == null) {              return;          }          if (java.io.Serializable.class.isAssignableFrom(extraInterfaces.get(Serializable.class))) {              extraInterfaces.remove(Serializable.class);          }       }          if (extraInterfaces == null) {              return;          }          if (java.io.Serializable.class.isAssignableFrom(extraInterfaces.get(Serializable.class))) {              extraInterfaces.remove(Serializable.class);          }       }          if (extraInterfaces == null) {              return;          }          if (java.io.Serializable.class.isAssignableFrom(extraInterfaces.get(Serializable.class))) {              extraInterfaces.remove(Serializable.class);          }       }          if (extraInterfaces == null) {              return;          }          if (java.io.Serializable.class.isAssignableFrom(extraInterfaces.get(Serializable.class))) {              extraInterfaces.remove(Serializable.class);          }       }          if (extraInterfaces == null) {              return;          }          if (java.io.Serializable.class.isAssignableFrom(extraInterfaces.get(Serializable.class))) {              extraInterfaces.remove(Serializable.class);          }       }          if (extraInterfaces == null) {              return;          }          if (java.io.Serializable.class.isAssignableFrom(extraInterfaces.get(Serializable.class))) {
void apply() {        this.nameNode = nameNode;        this.isPropertyAssign = isPropertyAssign;        this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            is buggy program
private Node tryFoldComparison(Node n, Node left, Node right) {            && right.getString().equals("undefined"))            || (Token.VOID == right.getType()                && NodeUtil.isLiteralValue(right.getFirstChild(), false)));     int lhType = left.getType();     int rhType = right.getType();      switch (lhType) {        case Token.LP:          if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {                is buggy program
private void inlineAliases(GlobalNamespace namespace) {          continue;        }       if (name.globalSets == 0 && name.localSets == 1 &&            name.aliasingGets > 0) {          return;        }       if (name.globalSets == 1 && name.localSets == 0 &&            name.aliasingGets > 0) {          return;        }       if (name.globalSets == 0 && name.localSets == 1 &&            name.aliasingGets > 0) {          return;        }       if (name.globalSets == 1 && name.localSets == 0 &&            name.aliasingGets > 0) {          return;        }       if (name.globalSets == 0 && name.localSets == 1 &&            name.aliasingGets > 0) {          return;        }       if (name.globalSets == 1 && name.localSets == 0 &&            name.aliasingGets > 0) {          return;        }       if (name.globalSets == 0 && name.localSets == 1 &&            name.aliasingGets > 0) {          return;        }       if (name.globalSets == 1 && name.localSets == 0 &&            name.aliasingGets > 0) {          return;        }       if (name.globalSets == 0 && name.localSets == 1 &&            name.aliasingGets > 0) {          return;        }       if (name.globalSets == 1 && name.localSets == 0 &&             name.aliasingGets > 0) {          return;        }       if (name.globalSets == 0 && name.localSets == 1 &&             name.aliasingGets > 0) {          return;        }       if (name.globalSets == 1 && name.localSets == 0 &&             name.aliasingGets > 0) {          return;        }       if (name.globalSets == 0 && name.localSets == 1 &&             name.aliasingGets > 0) {          return;        }       if (name.globalSets == 1 && name.localSets == 0 &&             name.aliasingGets > 0) {          return;        }       if (name.globalS
private static boolean isAssignable(Type type, ParameterizedType toParameterized                  toClass, typeVarAssigns);         for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());            if (toTypeArg!= null && fromTypeArg!= null &&!(toTypeArg.isAssignable(fromTypeArg)) &&
public static boolean isEmpty(boolean[] array) {          } else if (element!= null) {              type = element.getClass();          } else {             type = Object.class;          } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type, false);
public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           }        }              else {                 this.seriesKeys = null;                 this.categoryKeys = null;              }        }              else {                 this.seriesKeys = null;                  this.categoryKeys = null;              }        }              else {                  this.seriesKeys = null;                  this.categoryKeys = null;              }        }              else {                  this.seriesKeys = null;                   this.categoryKeys = null;              }       }               else {                  this.seriesKeys = null;                   this.categoryKeys = null;              }        }               else {                  this.seriesKeys = null;                   this.categoryKeys = null;              }        }               else {                   this.seriesKeys = null;                    this.categoryKeys = null;              }       }                else {                   this.seriesKeys = null;                    this.categoryKeys = null;              }        }                else {                   this.seriesKeys = null;                    this.categoryKeys = null;              }
void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,              || FunctionTypeBuilder.isFunctionTypeDeclaration(info));        }        if (inferred) {          inferred =!(rhsValue!= null &&
