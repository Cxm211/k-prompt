private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)            && n.getType() == Token.GETPROP           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP;          if (!isChainedProperty) {            return false;          }          }           Node llhs = n.getFirstChild();           if (llhs.getType() == Token.GETPROP               && llhs.getFirstChild().getType() == Token.GETPROP               ) {             return false;           }          }        }           Node llhs = n.getFirstChild();           if (llhs.getType() == Token.GETPROP               && llhs.getFirstChild().getType() == Token.GETPROP               ) {             return false;           }          }        }           Node llhs = n.getFirstChild();           if (llhs.getType() == Token.GETPROP               && llhs.getFirstChild().getType() == Token.GETPROP               ) {             return false;           }          }        }           Node llhs = n.getFirstChild();           if (llhs.getType() == Token.GETPROP               && llhs.getFirstChild().getType() == Token.GETPROP               ) {             return false;           }          }        }           Node llhs = n.getFirstChild();           if (llhs.getType() == Token.GETPROP               && llhs.getFirstChild().getType() == Token.GETPROP               ) {             return false;           }          }        }           Node llhs = n.get
public ElitisticListPopulation(final List<Chromosome> chromosomes,                                      final int populationLimit,                                      final double elitismRate) {          super(chromosomes, populationLimit);         this.elitismRate = elitismRate;         return this;      }      /**       *       *       *       *       *       *       *       *       *       *       *       *       *       *       *       *       *       *       *       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,                                       final int populationLimit,                                       final double elitismRate) {          super(chromosomes, populationLimit);         this.elitismRate = elitismRate;         return this;      }      /**       *       *       *       *       *       *       *       *       *       *       *       *       *       *       *       *       *       *       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,                                       final int populationLimit,                                       final double elitismRate) {          super(chromosomes, populationLimit);         this.elitismRate = elitismRate;         return this;      }      /**       *       *       *       *       *       *       *       *       *       *       *       *       *
public long addWrapField(long instant, int value) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.addWrapField(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false, instant);              }             }          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              return iZone.convertLocalToUTC(localInstant, false, instant);             }          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              return iZone.convertLocalToUTC(localInstant, false, instant);             }          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              return iZone.convertLocalToUTC(localInstant, false, instant);             }          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);              return iZone.convertLocalToUTC(localInstant, false, instant);             }
protected final double doSolve() {                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  default:                     throw new MathInternalError();                  }                   break;                 case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  default:                     throw new MathInternalError();                  }                  break;                 case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;
public void applyAlias() {    private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;      private final String aliasName;     AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;        this.aliasName = aliasName;      }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }    }     private final Node typeReference;      private final String aliasName;      private AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;        this.aliasName = aliasName;      }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }     }     private final Node typeReference;      private final String aliasName;      private AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;        this.aliasName = aliasName;      }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }     }     private final Node typeReference;      private final String aliasName;      private AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;        this.aliasName = aliasName;      }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }     }     private final Node typeReference;      private final String aliasName;      private AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;        this.aliasName = aliasName;      }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }     }     private final Node typeReference;      private final String aliasName;      private AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;        this.aliasName = aliasName;      }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }     }     private final Node typeReference;      private final String aliasName;      private AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;        this
public void captureArgumentsFrom(Invocation invocation) {                      ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                  }              }              for (int position = indexOfVararg; position < matchers.size(); position++) {                  Matcher m = matchers.get(position);                  if (m instanceof CapturesArguments) {                      ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                  }              }           } else {                 if (position == 0) {                     return;                }               }               for (int position = indexOfVararg; position < matchers.size(); position++) {                     Matcher m = matchers.get(position);                      if (m instanceof CapturesArguments) {                          ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                      }                  }              }           } else {               if (position == 0) {                   return;               }              }              for (int position = indexOfVararg; position < matchers.size(); position++) {                   Matcher m = matchers.get(position);                   if (m instanceof CapturesArguments) {
private void unrollBinaryOperator(    static boolean isSimpleNumber(String s) {      int len = s.length();      for (int index = 0; index < len; index++) {        char c = s.charAt(index);        if (c < '0' || c > '9') {          return false;        }      }     return len > 0 && s.charAt(0)!= '0';    }    static double getSimpleNumber(String s) {      is buggy program
public int indexOf(String str, int startIndex) {              return -1;          }          char[] thisBuf = buffer;         int len = thisBuf.length - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i + j] == str[j]) {                     return i + j;                 }             }          }           return -1;         }          char[] thisBuf = buffer;         int len = thisBuf.length - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i + j] == str[j]) {                     return i + j;                 }             }          }           return -1;         }          char[] thisBuf = buffer;          int len = thisBuf.length - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i + j] == str[j]) {                     return i + j;                 }             }          }           return -1;         }          char[] thisBuf = buffer;          int len = thisBuf.length - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {                 if (thisBuf[i + j] == str[j]) {                     return i + j;                 }
public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {          return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&                  cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&                  cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&                  cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                  cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                  cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&                  is buggy program
private static void escapeJavaStyleString(Writer out, String str, boolean escape                          out.write('\\');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      default :                              out.write('\\');                          out.write('/');                          break;                      default :                              out.write('\\');                          out.write('/');                          break;                      default :                              out.write('\\');                          out.write('/');                          break;                      default :                              out.write('\\');                          out.write('/');                          break;                      default :                              out.write('\\');                          out.write('/');                          break;                      default :
public void collect(JSModule module, Scope scope, Node n) {                  type = Name.Type.FUNCTION;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETELEM;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETELEM;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETELEM;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETPROP;                  break;                case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.GETELEM;                  break;                case Token.INC:                case Token.DEC:
public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str;              }               decPos = decPos + 1;             }          } else {              if (expPos > -1) {                   mant = str.substring(0, expPos);               } else {                   mant = str;               }                decPos = decPos + 1;             }          } else {              if (expPos > -1) {                   mant = str.substring(0, expPos);               } else {                   mant = str;               }                decPos = decPos + 1;             }          } else {              if (expPos > -1) {                   mant = str.substring(0, expPos);               } else {                   mant = str;               }                decPos = decPos + 1;             }          } else {              if (expPos > -1) {                   mant = str.substring(0, expPos);               } else {                   mant = str;               }                decPos = decPos + 1;             }          } else {              if (expPos > -1) {                   mant = str.substring(0, expPos);
JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;        typeOfThis.getType() = null;       }      }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);     }       return maybeTypeOfThis;     }       return safeResolve(typeOfThis, t, scope);
static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /**       * @since 2.3       */      static void register(Object value) {         getRegistry().add(new IDKey(value));      }      /**       * @since 2.3       */      static void unregister(Object value) {
public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);           primitiveValues.put(double.class, 0);         }      } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end of file   } \ No newline at end
protected VectorialPointValuePair doOptimize()                      if (s!= 0) {                          double sum = 0;                          for (int i = 0; i <= j; ++i) {                              sum += jacobian[i][pj] * residuals[i];                           }                           maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                       }                       break;                     }                     }                     maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                      break;                    }                    }                    maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                     break;                    }                    }                    maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                     break;                    }                    }                    maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                     break;                    }                    }                    maxCos
public boolean evaluateStep(final StepInterpolator interpolator)                       increasing = gb >= ga;                      if (ga * gb > 0) {
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:         return false;        case Token.IN:          return true;        case Token.DELPROP:          return true;        case Token.SCRIPT:          return true;        case Token.OBJECTLIT:          return true;        case Token.IN:          return true;        case Token.DELPROP:          return true;        case Token.SCRIPT:          return true;        case Token.OBJECTLIT:          return true;        case Token.IN:          return true;        case Token.DELPROP:          return true;        case Token.SCRIPT:          return true;        case Token.OBJECTLIT:          return true;        case Token.IN:          return true;        case Token.DELPROP:          return true;        case Token.SCRIPT:          return true;        case Token.OBJECTLIT:          return true;        case Token.IN:          return true;        case Token.DELPROP:          return true;        case Token.SCRIPT:          return true;        case Token.OBJECTLIT:          return true;        case Token.IN:          return true;        case Token.DELPROP:          return true;        case Token.SCRIPT:          return true;        case Token.OBJECTLIT:          return true;        case Token.IN:          return true;        case Token.DELPROP:          return true;        case Token.SCRIPT:          return true;        case Token.OBJECTLIT:          return true;        case Token.IN:          return true;        case Token.DELPROP:          return true;        case Token.SCRIPT:          return true;        case Token.OBJECTLIT:          return true;        case Token.IN:          return true;        case Token.DELPROP:          return true;        case Token.SCRIPT:          return true;
public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }          out.write(input, pos, consumed);      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }      }
public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false, instant);              }          }              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.roundFloor(localInstant);              return iZone.convertLocalToUTC(localInstant, false, instant);          }              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.roundFloor(localInstant);              return iZone.convertLocalToUTC(localInstant, false, instant);          }              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.roundFloor(localInstant);              return iZone.convertLocalToUTC(localInstant, false, instant);          }              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.roundFloor(localInstant);              return iZone.convertLocalToUTC(localInstant, false, instant);          }              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.roundFloor(localInstant);              return iZone.convertLocalToUTC(localInstant, false, instant);          }              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.roundFloor(localInstant);              return iZone.convertLocalToUTC(localInstant, false, instant);          }              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.roundFloor(localInstant);              return iZone.convertLocalToUTC(localInstant, false, instant);          }              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.roundFloor(localInstant);
private boolean safelyMatches(Matcher m, Object arg) {       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }       private boolean safelyMatches(Matcher m, Object arg) {          return m.matches(arg);       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }       private boolean safelyMatches(Matcher m, Object arg) {          return m.matches(arg);       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }       private boolean safelyMatches(Matcher m, Object arg) {          return m.matches(arg);       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }       private boolean safelyMatches(Matcher m, Object arg) {          return m.matches(arg);       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }       private boolean safelyMatches(Matcher m, Object arg) {          return m.matches(arg);       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }       private boolean safelyMatches(Matcher m, Object arg) {          return m.matches(arg);       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }       private boolean safelyMatches(Matcher m, Object arg) {          return m.matches(arg);       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }       private boolean safelyMatches(Matcher m, Object arg) {          return m.matches(arg);       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }       private boolean safelyMatches(Matcher m, Object arg) {          return m.matches(arg);       }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).
protected void dropPhase1Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }           for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {               final double entry = tableau.getEntry(0, i);              if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                   columnsToDrop.add(i);               }           }          }           for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {               final double entry = tableau.getEntry(0, i);              if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                   columnsToDrop.add(i);               }           }          }           for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {               final double entry = tableau.getEntry(0, i);              if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                   columnsToDrop.add(i);               }           }          }           for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {               final double entry = tableau.getEntry(0, i);              if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0;              }             }              return targetY;           }            double targetY;             if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0;              }             }              return targetY;           }            double targetY;             if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                  targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0;              }             }              return targetY;           }            double targetY;             if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                  targetY = -REDUCTION_FACTOR * yA;              } else {
public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++;          is buggy program
private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;        }       }      }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }       return n;     }
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset == 0 && minutesOffset == 0) {              return DateTimeZone.UTC;          }          if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);              if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);              }              offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);          } catch (ArithmeticException ex) {             is buggy program
protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);               }             }
public static String formatPeriod(long startMillis, long endMillis, String forma              days -= 1;          }          while (days < 0) {             days += 31;              months -= 1;          }          while (months < 0) {              months += 12;              years -= 1;          }          milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);          seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);          minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);          hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);          days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);          months -= reduceAndCorrect(start, end, Calendar.MONTH, months);          years -= reduceAndCorrect(start, end, Calendar.YEAR, years);        }          while (days < 0) {             days += 31;              months -= 1;          }          while (months < 0) {              months += 12;              years -= 1;          }          milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);          seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);          minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);          hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);          days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);          months -= reduceAndCorrect(start, end, Calendar.MONTH, months);          years -= reduceAndCorrect
public int translate(CharSequence input, int index, Writer out) throws IOExcepti                  return 0;              }                  out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;               out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;               out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;               out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;               out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;               out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;               out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;               out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;               out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;               out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;               out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;
private double localMin(boolean isMinim,          double w = x;          double d = 0;          double e = 0;          double fx = computeObjectiveValue(f, x);          if (goalType == GoalType.MAXIMIZE) {               fx = -fx;           }           double fv = fx;           double fw = fx;          int count = 0;          while (count < maximalIterationCount) {               double m = 0.5 * (a + b);               final double tol1 = eps * Math.abs(x) + t;               final double tol2 = 2 * tol1;               if (tol2 <= tol1) {                   break;               }                double m = 0.5 * (a + b);                final double tol1 = eps * Math.abs(x) + t;                final double tol2 = 2 * tol1;                if (tol2 <= tol1) {                    break;                }                 double m = 0.5 * (a + b);                 final double tol1 = eps * Math.abs(x) + t;                 final double tol2 = 2 * tol1;                 if (tol2 <= tol1) {                     break;                 }                  double m = 0.5 * (a + b);                  final double tol1 = eps * Math.abs(x) + t;                  final double tol2 = 2 * tol1;
Node parseInputs() {        boolean staleInputs = false;       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {            if (!(input instanceof SourceMapGenerator)) {               continue;            }
package org.mockito.internal.util;  public class Timer {    private static final long serialVersionUID = 20130104L;    private static final long serialVersionUID = 20130104L + 1;    private static final long serialVersionUID = 20130104L + 2;    private static final long serialVersionUID = 20130104L + 3;    private static final long serialVersionUID = 20130104L + 4;    private static final long serialVersionUID = 20130104L + 5;    private static final long serialVersionUID = 20130104L + 6;    private static final long serialVersionUID = 20130104L + 7;    private static final long serialVersionUID = 20130104L + 8;    private static final long serialVersionUID = 20130104L + 9;    private static final long serialVersionUID = 20130104L + 10;    private static final long serialVersionUID = 20130104L + 11;    private static final long serialVersionUID = 20130104L + 12;    private static final long serialVersionUID = 20130104L + 13;    private static final long serialVersionUID = 20130104L + 14;    private static final long serialVersionUID = 20130104L + 15;    private static final long serialVersionUID = 20130104L + 16;    private static final long serialVersionUID = 20130104L + 17;    private static final long serialVersionUID = 20130104L + 18;    private static final long serialVersionUID = 20130104L + 19;    private static final long serialVersionUID = 20130104L + 20;    private static final long serialVersionUID = 20130104L + 21;    private static final long serialVersionUID = 20130104L + 22;    private static final long serialVersionUID = 20130104L + 23;    private static final long serialVersionUID = 20130104L + 24;    private static final long serialVersionUID = 20130104L + 25;    private static final long serialVersionUID = 20130104L + 26;    private static final long serialVersionUID = 20130104L + 27;    private static final long serialVersionUID = 20130104L + 28;    private static final long serialVersionUID = 20130104L + 29;    private static final long serialVersionUID = 20130104L + 30;    private static final long serialVersionUID = 20130104L + 31;    private static final long serialVersionUID = 20130104L + 32;    private static final long serialVersionUID = 20130104L + 33;    private static final long serialVersionUID = 20130104L + 34;    private static final long serialVersionUID = 20130104L + 35;    private static final long serialVersionUID = 20130104L + 36;    private static final long serialVersionUID = 20130104L + 37;    private static final long serialVersionUID = 20130104L + 38;    private static final long serialVersionUID = 20130104L + 39;    private static final long serialVersionUID = 20130104L + 40;    private static final long serialVersionUID = 20130104L + 41;    private static final long serialVersionUID = 20130104L + 42;    private static final long serialVersionUID = 20130104L + 43;    private static final long serialVersionUID = 20130104L + 44;    private static final long serialVersionUID = 20130104L + 45;    private static final long serialVersionUID = 20130104L + 46;    private static final long serialVersionUID = 20130104L + 47;    private static final long serialVersionUID = 20130104L + 48;    private static final long serialVersionUID = 20130104L + 49;    private static final long serialVersionUID = 20130104L + 50;    private static final long serialVersionUID = 20130104L + 51;    private static final long serialVersionUID = 20130104L + 52;    private static final long serialVersionUID = 20130104L + 53;    private static final long serialVersionUID = 20130104L
private boolean shouldReportThis(Node n, Node parent) {      }     return false;    }    /**     * @param n the node to report     */    private boolean shouldReportThis(Node n, Node parent) {       if (n.getType() == Token.BLOCK) {         return false;       }       return false;     }    }    /**     * @param n the node to report     */    private boolean shouldReportThis(Node n, Node parent) {       if (n.getType() == Token.BLOCK) {         return false;       }       return false;     }    }    /**     * @param n the node to report     */    private boolean shouldReportThis(Node n, Node parent) {       if (n.getType() == Token.BLOCK) {         return false;       }       return false;     }    }    /**     * @param n the node to report     */    private boolean shouldReportThis(Node n, Node parent) {       if (n.getType() == Token.BLOCK) {         return false;       }       return false;     }    }    /**     * @param n the node to report     */    private boolean shouldReportThis(Node n, Node parent) {       if (n.getType() == Token.BLOCK) {         return false;       }       return false;     }    }    /**     * @param n the node to report     */    private boolean shouldReportThis(Node n, Node parent) {       if (n.getType() == Token.BLOCK) {         return false;       }       return false;     }    }    /**     * @param n the node to report     */    private boolean shouldReportThis(Node n, Node parent) {       if (n.getType() == Token.BLOCK) {         return false;       }       return false;     }    }    /**     * @param n the node to report     */    private boolean shouldReportThis(Node n, Node parent) {       if (n.getType() == Token.BLOCK) {         return false;       }       return false;     }    }    /**     * @param n the node to report     */    private boolean shouldReportThis(Node n, Node parent) {       if (n.getType() == Token.BLOCK) {         return false;       }       return false;     }    }    /**     * @param n the node to report     */    private boolean shouldReportThis(Node n, Node parent) {       if (n.getType() == Token.BLOCK) {         return false;       }       return false;     }    }    /**     * @param n the node to report     */    private
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {              if (iPrefix!= null) {                  iPrefix.printTo(buf, value);              }             if (value!= null && value.length() > 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }               int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }               int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 0) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }               int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                   FormatUtils.appendUnpaddedInteger(buf, value);              }               int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 0) {                   FormatUtils.appendUnpaddedInteger(buf, value);              }               int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                   FormatUtils.appendUnpaddedInteger(buf, value);              }               int maxDigits = iMaxPrintedDigits;              if (maxDigits <= 0) {
private Node parseFunctionType(JsDocToken token) {      if (token!= JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");      }     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);     }      return new Node(Token.LP, null, token);
public double getChiSquare(EstimationProblem problem) {      public double[] guessParametersErrors(EstimationProblem problem)        throws EstimationException {          int m = problem.getMeasurements().length;         int p = problem.getAllParameters().length;          if (m <= p) {              throw new EstimationException("no degrees of freedom ({0} measurements, {1} parameters)",                                             new Object[] { new Integer(m), new Integer(p)});          }          double[] errors = new double[problem.getAllParameters().length];          final double c = Math.sqrt(getChiSquare(problem) / (m - p));          double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {              if (i < m - p) {                  errors[i] = c * errors[i];              } else {                  errors[i] = c * Math.max(0.0,
protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      /**       * @
FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }
private void handleObjectLit(NodeTraversal t, Node n) {            child!= null;            child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {           return;         }          child = child.getNext()) {          String name = child.getString();         if (name.equals("")) {
private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean no          int size = elementPairs.size();          if (size >= 2 && elementPairs.get(0) instanceof Separator) {              Separator sep = (Separator) elementPairs.get(0);                  PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);                  sep = sep.finish(f.getPrinter(), f.getParser());                  return new PeriodFormatter(sep, sep);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              is buggy program
public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {         if (weeks!= 0) {              setMillis(getChronology().weeks().add(getMillis(), weeks));         }      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }              setMillis(getChronology().weekOfWeekyear(weekOfWeekyear));      }
public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall()  + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           }            new Reporter().uncheckedNullPointerException(location);               return null;           }            new Reporter().smartNullPointerException(location);               return null;           }            new Reporter().uncheckedNullPointerException(location);               return null;           }            new Reporter().smartNullPointerException(location);               return null;           }            new Reporter().uncheckedNullPointerException(location);               return null;           }            new Reporter().smartNullPointerException(location);               return null;           }            new Reporter().uncheckedNullPointerException(location);               return null;           }            new Reporter().smartNullPointerException(location);               return null;           }            new Reporter().uncheckedNullPointerException(location);               return null;           }            new Reporter().smartNullPointerException(location);               return null;           }            new Reporter().uncheckedNullPointerException(location);               return null;           }            new Reporter().smartNullPointerException(location);               return null;           }            new Reporter().uncheckedNullPointerException(location);               return null;           }            new Reporter().smartNullPointerException(location);               return null;           }            new Reporter().uncheckedNullPointerException(location);               return null;           }            new Reporter().smart
private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }
public Week(Date time) {       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       *       *       *       *       *       *       *       *       *       *       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       *       *       *       *       *       *       *       *       *       *       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       *       *       *       *       *       *       *       *       *       *       *       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       *       *       *       *       *       *       *       *       *       *       *       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       *       *       *       *       *       *       *       *       *       *       *       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /**       *       *       *       *       *       *       *       *       *       *       *       */       public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }
public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null && dataset.getRowCount() > 0) {               return result;           }           int seriesCount = dataset.getRowCount();           if (seriesCount > 0) {               return result;           }           int index2 = this.plot.getIndexOf(this);           CategoryDataset dataset2 = this.plot.getDataset(index2);          if (dataset2!= null) {               return result;           }           int seriesCount2 = dataset2.getRowCount();           if (seriesCount2 > 0) {               return result;           }           int index3 = this.plot.getIndexOf(this);           CategoryDataset dataset3 = this.plot.getDataset(index3);          if (dataset3!= null) {               return result;           }           int seriesCount3 = dataset3.getRowCount();           if (seriesCount3 > 0) {               return result;           }           int index4 = this.plot.getIndexOf(this);           CategoryDataset dataset4 = this.plot.getDataset(index4);          if (dataset4!= null) {               return result;           }           int seriesCount4 = dataset4.getRowCount();           if (seriesCount4 > 0) {               return result;           }           int index5 = this.plot.getIndexOf(this);           CategoryDataset dataset5 = this.plot.getDataset(index5);          if (dataset5!= null) {               return result;           }           int seriesCount5 = dataset5.getRowCount();           if (seriesCount5 > 0) {               return result;           }           int index6 = this.plot.
Node processArrayLiteral(ArrayLiteral literalNode) {      @Override      Node processAssignment(Assignment assignmentNode) {       if (assignmentNode.getValue() == null) {         return null;       }        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }       Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      }
public static double sinh(double x) {        if (x > 20) {            if (x >= LOG_MAX_VALUE) {                return 0.5 * exp(x);            } else {                return 0.5 * exp(x);            }        } else if (x < -20) {            if (x <= -LOG_MAX_VALUE) {                return -0.5 * exp(-x);            } else {                return -0.5 * exp(-x);            }        }         if (x == 0) {             return 0.0;         }           return exp(x);       }        if (x == 20) {             return 0.0;         }           return exp(x);       }         if (x == -20) {             return -0.0;         }           return exp(-x);       }         if (x == 0) {             return 0.0;         }           return exp(x);       }          if (x == 20) {             return 0.0;         }           return exp(x);       }          if (x == -20) {             return -0.0;         }           return exp(-x);       }          if (x == 0) {             return 0.0;         }           return exp(x);       }          if (x == 20) {             return 0.0;         }           return exp(x);       }          if (x == -20) {             return -0.0;         }           return exp(-x);       }          if (x == 0) {             return 0.0;         }           return exp(x);       }          if (x ==
boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,            "assignment to property " + propName + " of " +            getReadableJSTypeName(owner, true),            rightType, leftType);       }        return false;      }      return true;     }     }      return false;     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }    private void addIdent
private void inlineNonConstants(        if (!maybeModifiedArguments &&           !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&           referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references;          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();            if (nameNode.getType() == Token.NAME) {              if (maybeModifiedArguments ||
public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;          } else {              cutoverInstant = gregorianCutover.toInstant();          }         if (chrono == null) {             return null;         }          GJChronology chrono;
public Complex conjugate() {      public Complex divide(Complex divisor)          throws NullArgumentException {          MathUtils.checkNotNull(divisor);          if (divisor.isNaN) {              return NaN;          }          if (divisor.getReal() == 0.0 &&
private Integer getPivotRow(final int col, final SimplexTableau tableau) {          for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio;                  }                  if (i < tableau.getNumObjectiveFunctions() - 1) {                       final double ratio = rhs / entry;                       if (ratio < minRatio) {                           minRatio = ratio;                      }                  }               } else {                       final double ratio = rhs / entry;                       if (ratio < minRatio) {                            minRatio = ratio;                       }                   }               }             }          }           for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {               final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);               final double entry = tableau.getEntry(i, col);              if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                   final double ratio = rhs / entry;
public Fraction pow(int power) {       */      private static int greatestCommonDivisor(int u, int v) {         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {            if (u == 0) {                return 0;            }            if (v == 0) {                return 1;            }             return greatestCommonDivisor(u, v);         }          return 1;       }         return greatestCommonDivisor(u, v);      }       private static int greatestCommonDivisor(int u, int v) {         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {             if (u == 0) {                 return 0;             }             if (v == 0) {                 return 1;             }              return greatestCommonDivisor(u, v);          }           return 1;       }         return greatestCommonDivisor(u, v);      }       private static int greatestCommonDivisor(int u, int v) {         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {             if (u == 0) {                 return 0;             }             if (v == 0) {                 return 1;             }              return greatestCommonDivisor(u, v);          }           return 1;       }         return greatestCommonDivisor(u, v);      }       private static int greatestCommonDivisor(int u, int v) {         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {             if (u == 0) {                 return 0;             }             if (v == 0) {                 return 1;             }              return greatestCommonDivisor(u, v);          }           return 1;       }         return greatestCommonDivisor(u, v
public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);         }      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }         return FastMath.pow(2 * FastMath.PI,
protected GenericMetadataSupport actualParameterizedType(Object mock) {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                   return mock;               }
protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return;              }              best = contracted;              }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }              }               }               }               }               }               }               }
*        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };
private void visitGetProp(NodeTraversal t, Node n, Node parent) {      if (childType.isDict()) {        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     } else if (n.getJSType()!= null && parent.isAssign()) {       return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE))) {        checkPropertyAccess(childType, property.getString(), t, n);      }     } else if (n.getJSType()!= null && parent.isAssign()) {       return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE))) {        checkPropertyAccess(childType, property.getString(), t, n);      }     } else if (n.getJSType()!= null && parent.isAssign()) {       return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE))) {        checkPropertyAccess(childType, property.getString(), t, n);      }     } else if (n.getJSType()!= null && parent.isAssign()) {       return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE))) {        checkPropertyAccess(childType, property.getString(), t, n);      }     } else if (n.getJSType()!= null && parent.isAssign()) {       return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE))) {        checkPropertyAccess(childType, property.getString(), t, n);      }     } else if (n.getJSType()!= null && parent.isAssign()) {       return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE))) {        checkPropertyAccess(childType, property.getString(), t, n);      }     } else if (n.getJSType()!= null && parent.isAssign()) {       return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE
private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0;      @Override      public void visit(NodeTraversal t, Node n, Node parent) {       if (isQnameRoot) {         return;       }        @Override        public void visit(NodeTraversal t, Node n, Node parent) {         scriptNodeCount++;        }        @Override        public void visit(NodeTraversal t, Node n, Node parent) {         if (isQnameRoot) {           return;         }          @Override          public void visit(NodeTraversal t, Node n, Node parent) {           scriptNodeCount++;         }          @Override          public void visit(NodeTraversal t, Node n, Node parent) {           if (isQnameRoot) {             return;           }            @Override            public void visit(NodeTraversal t, Node n, Node parent) {             scriptNodeCount++;           }            @Override            public void visit(NodeTraversal t, Node n, Node parent) {             if (isQnameRoot) {               return;             }              @Override              public void visit(NodeTraversal t, Node n, Node parent) {               scriptNodeCount++;             }              @Override              public void visit(NodeTraversal t, Node n, Node parent) {               if (isQnameRoot) {                 return;               }                @Override                public void visit(NodeTraversal t, Node n, Node parent) {                 scriptNodeCount++;               }                @Override                public void visit(NodeTraversal t, Node n, Node parent) {                 if (isQnameRoot) {                   return;                 }                  @Override                  public void visit(NodeTraversal t, Node n, Node parent) {
private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x = OriginalMapping.newBuilder()         .setOriginalFile(sources[entry.getSourceFileId()])        .setLineNumber(entry.getSourceLine())        .setColumnPosition(entry.getSourceColumn());        if (entry.getNameId()!= UNMAPPED) {          x.setIdentifier(names[entry.getNameId()]);        }         return x;       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }
static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     if (s.length() == 0) {       return 0.0;     }      return s.length();    }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     if (s.length() == 0) {       return 0.0;     }      return s.length();     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     if (s.length() == 0) {       return 0.0;     }      return s.length();     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     if (s.length() == 0) {       return 0.0;     }      return s.length();     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     if (s.length() == 0) {       return 0.0;     }      return s.length();     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     if (s.length() == 0) {       return 0.0;     }      return s.length();     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     if (s.length() == 0) {       return 0.0;     }      return s.length();     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     if (s.length() == 0) {       return 0.0;     }      return s.length();     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     if (s.length() == 0) {       return 0.0;     }      return s.length();     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     if (s.length() == 0) {       return 0.0;     }      return s.length();     }     static Double getNumberValue(Node n) {
* @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /**       * @since 2.3       */      static boolean
