public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /**       * @return the fraction percentage as a <tt>long</tt>.       */      public long percentageValue() {         return multiply(100).longValue();      }      /**       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {         return true;       case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:       case Token.STRING:        case Token.ARRAYLIT:         return true;        case Token.FUNCTION:       case Token.REGEXP:
protected UnivariatePointValuePair doOptimize() {                  if (checker!= null) {                      if (checker.converged(getIterations(), previous, current)) {                         return current;                      }                  }              }          }      }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
public double solve(final UnivariateRealFunction f,              return solve(f, initial, yInitial, max, yMax, initial, yInitial);          }          return solve(f, min, yMin, max, yMax, initial, yInitial);       }     }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset < -23 || hoursOffset > 23) {              throw new IllegalArgumentException("Hours out of range: " + hoursOffset);          }         if (minutesOffset < 0) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {              int hoursInMinutes = hoursOffset * 60;              if (hoursInMinutes < 0) {                  minutesOffset = hoursInMinutes - minutesOffset;              } else {                   minutesOffset = hoursInMinutes + minutesOffset;              }          }          int offset = 0;          try {              int hoursInMinutes = hoursOffset * 60;              if (hoursInMinutes < 0) {                  minutesOffset = hoursInMinutes - minutesOffset;              } else {                   minutesOffset = hoursInMinutes + minutesOffset;              }          }          int offset = 0;          try {              int hoursInMinutes = hoursOffset * 60;              if (hoursInMinutes < 0) {                   minutesOffset = hoursInMinutes - minutesOffset;              } else {                   minutesOffset = hoursInMinutes + minutesOffset;              }          }          int offset = 0;          try {              int hoursInMinutes = hoursOffset * 60;              if (hoursInMinutes < 0) {
public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported() &&
private void interpretAssigns() {                  assign.assignNode.getLastChild(), true)) {                 assignedToUnknownValue = true;              }            }           if (assignedToUnknownValue && hasPropertyAssign) {              changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;           }          }         }        }       }      }     }    }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
public static int safeMultiply(int val1, int val2) {      public static long safeMultiply(long val1, int val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L;              case -2:                 return -val1;              case 2:                 return 2L;              case -4:                 return -val1;              case 4:                 return 4L;              case -8:                 return -val1;              case 8:                 return 8L;              }         }      }       public static long safeMultiply(long val1, int val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L;              case -2:                 return -val1;              case 2:                 return 2L;              case -4:                 return -val1;              case 4:                 return 4L;              case -8:                 return -val1;              case 8:                 return 8L;              }         }      }       public static long safeMultiply(long val1, int val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L;              case -2:
private boolean isVarInlineForbidden(Var var) {       */      private boolean isInlinableObject(List<Reference> refs) {        boolean ret = false;        for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();         boolean isVarInlineForbidden = NodeUtil.isVarInlineForbidden(name);         if (isVarInlineForbidden) {           ret = true;         }        }       }        return ret;      }
public EqualsBuilder append(Object lhs, Object rhs) {          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs.getClass()!= rhs.getClass()) {              this.setEquals(false);              isEquals = lhs.equals(rhs);          }         }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs.getClass()!= rhs.getClass()) {              this.setEquals(false);              isEquals = lhs.equals(rhs);          }         }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs.getClass()!= rhs.getClass()) {              this.setEquals(false);              isEquals = lhs.equals(rhs);          }         }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs.getClass()!= rhs.getClass()) {              this.setEquals(false);              isEquals = lhs.equals(rhs);          }         }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs.getClass()!= rhs.getClass()) {              this.setEquals(false);              isEquals = lhs.equals(rhs);          }         }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {
private Node tryMinimizeIf(Node n) {              !mayEffectMutableState(lhs)) {              n.removeChild(cond);              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (assignName == null) {                 return n;             }              Node assignName = thenOp.removeFirstChild();             if (
private boolean isInlinableObject(List<Reference> refs) {           if (hasChildren()) {              return false;          }           if (hasChildren()) {              return false;          }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }           if (hasChildren()) {              return false;           }
private void findAliases(NodeTraversal t) {          Node n = v.getNode();          int type = n.getType();          Node parent = n.getParent();         if (parent.isVar()) {           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {            String name = n.getString();            Var aliasVar = scope.getVar(name);            aliases.put(name, aliasVar);         }         }          Node n2 = v.getNode();          int type2 = n2.getType();          Node parent2 = n2.getParent();         if (parent2.isVar()) {            if (n2.hasChildren() && n2.getFirstChild().isQualifiedName()) {             String name2 = n2.getString();             Var aliasVar2 = scope.getVar(name2);             aliases.put(name2, aliasVar2);            }          }         }        }       }      }     }    }   }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
public void exitScope(NodeTraversal t) {        if (t.getScopeDepth() == 2) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 3) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 4) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 5) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 6) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 7) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 8) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 9) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 10) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 11) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;       }        if (t.getScopeDepth() == 12) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;
public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**        * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return (T) reportMatcher(new InstanceOf(clazz)).<T>returnFor((Class) clazz.getRawClass());       }       /**
protected UnivariatePointValuePair doOptimize() {                      }                  } } else {                 return                              best(current,                                   previous,                               isMinim);              }              incrementIterationsCounter();              return                               best(current,                                     previous,                                    isMinim);              }              incrementIterationsCounter();              return                                best(current,                                      previous,                                     isMinim);              }              incrementIterationsCounter();              return                                best(current,                                       previous,                                      isMinim);              }              incrementIterationsCounter();              return                                best(current,                                        previous,                                       isMinim
public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, true, false);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, true, true);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, true, true);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, true, true);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, true, true);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, false, true);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escapeJavaStyleString(out, str, true, true);      }      /**       * @throws IOException if error occurs on underlying Writer       */      public static void escapeJava(Writer out, String str) throws IOException {         escape
private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object      private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();              if (injected!= null) {                  injectionOccurred |= true;                  mocks.remove(injected);              }          }      }          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();              if (injected!= null) {                   injectionOccurred |= true;                  mocks.remove(injected);              }          }      }          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();              if (injected!= null) {                   injectionOccurred |= true;                  mocks.remove(injected);              }          }      }          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();              if (injected!= null) {                   injectionOccurred |= true;                   mocks.remove(injected);               }          }
public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    }     public static Node tryFinally(Node tryBody, Node finallyBody) {     public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);     }      public static Node tryFinally(Node tryBody, Node finallyBody) {      public static Node tryCatch(Node tryBody, Node catchNode) {       Preconditions.checkState(tryBody.isBlock());       Preconditions.checkState(catchNode.isCatch());      Node catchBody = block(catchNode).copyInformationFrom(catchNode);       return new Node(Token.TRY, tryBody, catchBody);     }     }    }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
protected void computeGeometricalProperties() {          if (v.length == 0) {              final BSPTree<Euclidean2D> tree = getTree(false);             if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);                 final BSPTree<Euclidean2D> tree = getTree(true);                 if ((Boolean) tree.getAttribute()) {                     setSize(Double.POSITIVE_INFINITY);                     setBarycenter(Vector2D.NaN);                 }             }          }             final BSPTree<Euclidean2D> tree = getTree(false);            if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);                  final BSPTree<Euclidean2D> tree = getTree(true);                 if ((Boolean) tree.getAttribute()) {                      setSize(Double.POSITIVE_INFINITY);                     setBarycenter(Vector2D.NaN);                 }             }          }             final BSPTree<Euclidean2D> tree = getTree(false);            if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);                  final BSPTree<Euclidean2D> tree = getTree(true);                 if ((Boolean) tree.getAttribute()) {                      setSize(Double.POSITIVE_INFINITY);                      setBarycenter(Vector2D.NaN);                 }             }          }
public boolean setPrototype(PrototypeObjectType prototype) {        return false;      }     boolean replacedPrototype = prototype!= null;      this.prototype = prototype;      this.prototypeSlot = new SimpleSlot("prototype", prototype, true, true);      this.prototype.setOwnerFunction(this);      if (isConstructor() || isInterface()) {        FunctionType superClass = getSuperClassConstructor();        if (!isInterface() &&!superClass.isInterface()) {          return false;        }         FunctionType subClass = getSubClassConstructor();         if (!subClass.isInterface()) {           return false;         }          FunctionType superClass = getSuperClassConstructor();          if (!superClass.isInterface()) {            return false;          }           FunctionType subClass = getSubClassConstructor();           if (!subClass.isInterface()) {             return false;           }         }       }      }       this.prototypeSlot = new SimpleSlot("prototype", prototype, true, true);       this.prototype.setOwnerFunction(this);       if (isConstructor() || isInterface()) {         FunctionType superClass = getSuperClassConstructor();         if (!isInterface() &&!superClass.isInterface()) {           return false;         }          FunctionType subClass = getSubClassConstructor();          if (!subClass.isInterface()) {            return false;          }           FunctionType superClass = getSuperClassConstructor();           if (!superClass.isInterface()) {             return false;           }            FunctionType subClass = getSubClassConstructor();            if (!subClass.isInterface()) {              return false;           }         }       }      }       this.prototypeSlot = new SimpleSlot("prototype", prototype, true, true);       this.prototype.setOwnerFunction(this);       if (isConstructor() || isInterface()) {         FunctionType superClass = getSuperClassConstructor();         if (!isInterface() &&!superClass.isInterface()) {           return false;         }          FunctionType subClass = getSubClassConstructor();          if (!subClass.isInterface()) {            return false;          }
public RealMatrix getU()              if (m >= n) {                  final RealMatrix e =                      eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);                  final double[][] eData = e.getData();                  final double[][] wData = new double[m][p];                  double[] ei1 = eData[0];                 for (int i = 0; i < p; ++i) {                      final double mi = mainBidiagonal[i];                       final double[] ei0 = ei1;                       final double[] wi
public boolean apply(Node input) {                    case Token.REGEXP:                    case Token.NEW:                      return true;                   }                  return false;               }            }          }        }      }    }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
public static Number createNumber(String str) throws NumberFormatException {          if (decPos > -1) {              if (expPos > -1) {                 if (expPos < decPos) {                      throw new NumberFormatException(str + " is not a valid number.");                  }                  dec = str.substring(decPos + 1, expPos);                 if (decPos > -1) {                     if (expPos > -1) {                         if (expPos < decPos) {                              throw new NumberFormatException(str + " is not a valid number.");                          }                          dec = str.substring(decPos + 1, expPos);                      }                  }                   dec = str.substring(decPos + 1, expPos);                  if (decPos > -1) {                      if (expPos > -1) {                          if (expPos < decPos) {                               throw new NumberFormatException(str + " is not a valid number.");                           }                           dec = str.substring(decPos + 1, expPos);                      }                  }                   dec = str.substring(decPos + 1, expPos);                  if (decPos > -1) {                      if (expPos > -1) {                           if (expPos < decPos) {                                throw new NumberFormatException(str + " is not a valid number.");
public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);         if (v2D == null) {             return null;         }          Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));         if (loc1 == null) {             return null;         }          Location loc2 = getRemainingRegion().checkPoint(line2.toSubSpace(v2D));         if (loc2 == null) {             return null;         }          Location loc3 = getRemainingRegion().checkPoint(line3.toSubSpace(v2D));         if (loc3 == null) {             return null;         }          Location loc4 = getRemainingRegion().checkPoint(line4.toSubSpace(v2D));         if (loc4 == null) {             return null;         }          Location loc5 = getRemainingRegion().checkPoint(line5.toSubSpace(v2D));         if (loc5 == null) {             return null;         }          Location loc6 = getRemainingRegion().checkPoint(line6.toSubSpace(v2D));         if (loc6 == null) {             return null;         }          Location loc7 = getRemainingRegion().checkPoint(line7.toSubSpace(v2D));         if (loc7 == null) {             return null;         }          Location loc8 = getRemainingRegion().checkPoint(line8.toSubSpace(v2D));         if (loc8 == null) {             return null;         }          Location loc9 = getRemainingRegion().checkPoint(line9.toSubSpace(v2D));         if (loc9 == null) {             return null;         }          Location loc10 = getRemainingRegion().checkPoint(line10.toSubSpace(v2D));         if (loc10 == null) {             return null;         }          Location loc11 = getRemainingRegion().checkPoint(line11.toSubSpace(v2D));         if (loc11 == null) {             return null;         }          Location loc12 = getRemainingRegion().checkPoint(line12.toSubSpace(v2D));         if (loc12 == null) {             return null;
public FitnessFunction() {           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           * @return the original objective variables, possibly repaired.           */          public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }           * @return the original objective variables, possibly repaired.
private boolean canInline(          }        }      }    }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(new ArrayList<Chromosome>());         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(new ArrayList<Chromosome>(), populationLimit);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(new ArrayList<Chromosome>(), new ArrayList<Chromosome>());         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(new ArrayList<Chromosome>(), new ArrayList<Chromosome>(), populationLimit);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(new ArrayList<Chromosome>(), new ArrayList<Chromosome>(), populationLimit);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(new ArrayList<Chromosome>(), new ArrayList<Chromosome>(), populationLimit);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(new ArrayList<Chromosome>(), new ArrayList<Chromosome>(), populationLimit);         this.elitismRate = elitismRate;      }      /**       */      public ElitisticListPopulation(final List<Chromosome> chromosomes,       */      public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(new ArrayList<Chromosome>(), new ArrayList<Chromosome>(), populationLimit);
void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);         add(n, context);        } else {         addExpr(first, p, context);         cc.addOp(opstr, true);         addExpr(last, p + 1, rhsContext);        }        return;      }     }    }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
public long add(long instant, long value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertLocalToUTC(localInstant, false, instant);              }          }         }        }       }      }     }    }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
protected PointVectorValuePair doOptimize() {                      if (checker!= null) {                          if (checker.converged(getIterations(), previous, current)) {                               setCost(currentCost);                              return current;                          }                     }                 }            }        }     }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
void tryMinimizeExits(Node n, int exitType, String labelName) {         * can cause problems if it changes the completion type of the finally         * block. See ECMA 262 Sections 8.9 & 12.14         */       if (NodeUtil.hasFinally(n)) {         Node finallyBlock = n.getFirstChild();         tryMinimizeExits(finallyBlock, exitType, labelName);       }      }     }    }   }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
public BooleanOptionHandler(        @Override        public int parseArguments(Parameters params) throws CmdLineException {         String param = params.getParameter(0);         if (param == null) {           setter.addValue(true);           return false;        }         if (param.length() > 0) {            setter.addValue(true);         }          return true;        }         String param = params.getParameter(0);          if (param == null) {            setter.addValue(true);            return false;         }         if (param.length() > 0) {            setter.addValue(true);         }          return true;        }         String param = params.getParameter(0);          if (param == null) {            setter.addValue(true);            return false;         }         if (param.length() > 0) {            setter.addValue(true);         }          return true;        }         String param = params.getParameter(0);          if (param == null) {            setter.addValue(true);            return false;         }         if (param.length() > 0) {            setter.addValue(true);         }          return true;        }         String param = params.getParameter(0);          if (param == null) {            setter.addValue(true);            return false;         }         if (param.length() > 0) {            setter.addValue(true);         }          return true;        }         String param = params.getParameter(0);          if (param == null) {            setter.addValue(true);            return false;         }         if (param.length() > 0) {            setter.addValue(true);         }          return true;        }         String param = params.getParameter(0);          if (param == null) {            setter.
private static final long serialVersionUID = 9386874258972L;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;                  private volatile int iPeriod;
private static synchronized String getConvertedId(String id) {              map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");             map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");             map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");             map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");             map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");             map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");             map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");             map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");
public boolean isNoObjectType() {    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType() || isNoResolvedType();    }    public boolean isStringObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isNumberObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public boolean isObjectType() {     return isNoObjectType() || isNoResolvedType();    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType
public TimeSeries createCopy(int start, int end)              throw new IllegalArgumentException("Requires start <= end.");           }           TimeSeries copy = (TimeSeries) super.clone();           copy.data = new java.util.ArrayList();           if (this.data.size() > 0) {               for (int index = start; index <= end; index++) {                  if (this.data.get(index)!= null) {                      is buggy program
public String escape(String str) {      public void escape(Writer writer, String str) throws IOException {          int len = str.length();          for (int i = 0; i < len; i++) {             char c = str.charAt(i);              String entityName = this.entityName(c);              if (entityName == null) {                 if (c > 0x7F) { writer.write("&                      writer.write(Integer.toString(c, 10));                      writer.write(';');                      is buggy program
public void setHourOfDay(final int hourOfDay) {       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addHours(final int hours) {         if (hours!= 0) {              setMillis(getChronology().hours().add(getMillis(), hours));
public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false;                } else if (x == x1) {                     loop     = false;                } else if (y == y1) {                     loop     = false;                } else if (z == z1) {                     loop     = false;                } else if (x == x2) {                     loop     = false;                } else if (y == y2) {                     loop     = false;                } else if (z == z2) {                     loop     = false;                } else if (x == x3) {                     loop     = false;                } else if (y == y3) {                     loop     = false;                } else if (z == z3) {                     loop     = false;                } else if (x == x4) {                     loop     = false;                } else if (y == y4) {                     loop     = false;                } else if (z == z4) {                     loop     = false;                } else if (x == x5) {                     loop     = false;                } else if (y == y5) {                     loop     = false;                } else if (z == z5) {                     loop     = false;                } else if (x == x6) {                     loop     = false;                } else if (y == y6) {                     loop     = false;                } else if (z == z
public static Number createNumber(final String str) throws NumberFormatException          final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);          try {                  final Float f = createFloat(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                       return f;                  } } } catch (final NumberFormatException nfe) {          }          try {                  final Double d = createDouble(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D &&!allZeros))) {                       return d;                  } } } catch (final NumberFormatException nfe) {          }          try {                  final Float f = createFloat(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                       return f;                  } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }
public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;      }         return indices;
public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertLocalToUTC(localInstant, false, instant);              }          }         }        }       }      }     }    }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false;     if (block.hasChildren()) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }      }      Node cArg = callNode.getFirstChild().getNext();      if (!hasSideEffects) {         return CanInlineResult.NO;      }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();      if (!hasSideEffects) {         return CanInlineResult.NO;      }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();      if (!hasSideEffects) {         return CanInlineResult.NO;      }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();      if (!hasSideEffects) {         return CanInlineResult.NO;      }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();      if (!hasSideEffects) {         return CanInlineResult.NO;      }     }      Node stmt = block.getFirstChild();      if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }      Node cArg = callNode.getFirstChild().getNext();      if (!hasSideEffects) {         return CanInlineResult.NO;      }     }      Node stmt = block.getFirstChild
private static final long serialVersionUID = -7105341425736035847L;      private MockitoCore mockitoCore = new MockitoCore();      private ReturnsEmptyValues delegate = new ReturnsEmptyValues();       public Object answer(InvocationOnMock invocation) throws Throwable {         if (Modifier.isAbstract(invocation.getMethod().getModifiers())) {             return new GloballyConfiguredAnswer().answer(invocation);         }           GenericMetadataSupport returnTypeGenericMetadata =                  actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());           Class<?> rawType = returnTypeGenericMetadata.rawType();           if (!mockitoCore.isTypeMockable(rawType)) {               return delegate.returnValueFor(rawType);           }            if (!Modifier.isAbstract(invocation.getMethod().getModifiers())) {                return new GloballyConfiguredAnswer().answer(invocation);            }         }            Class<?> rawType = returnTypeGenericMetadata.rawType();           if (!mockitoCore.isTypeMockable(rawType)) {               return delegate.returnValueFor(rawType);           }            if (!Modifier.isAbstract(invocation.getMethod().getModifiers())) {                return new GloballyConfiguredAnswer().answer(invocation);            }         }            Class<?> rawType = returnTypeGenericMetadata.rawType();           if (!mockitoCore.isTypeMockable(rawType)) {               return delegate.returnValueFor(rawType);           }            if (!Modifier.isAbstract(invocation.getMethod().getModifiers())) {                return new GloballyConfiguredAnswer().answer(invocation);            }         }            Class<?> rawType = returnTypeGenericMetadata.rawType();           if (!mockitoCore.isTypeMockable(rawType)) {               return delegate.returnValueFor(rawType);           }
public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(getItemCount() - 1);           return clone;       }
public int parseInto(ReadWritableInstant instant, String text, int position) {          long instantMillis = instant.getMillis();          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);          chrono = selectChronology(chrono);         int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          return bucket;        }          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);          chrono = selectChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          return bucket;        }          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);          chrono = selectChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          return bucket;        }          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);          chrono = selectChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          return bucket;        }          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);          chrono = selectChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(
public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",                  undesired.getLocation()          ));      }     }    }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
public static boolean isJSIdentifier(String s) {        int length = s.length();        if (length == 0 ||           !Character.isJavaIdentifierStart(s.charAt(0))) {          return false;        }        for (int i = 1; i < length; i++) {          if (             !Character.isJavaIdentifierPart(s.charAt(i))) {             return false;          }        }        for (int i = 1; i < length; i++) {          if (!Character.isJavaIdentifierPart(s.charAt(i))) {             return false;          }        }        return true;       }        for (int i = 1; i < length; i++) {          if (!Character.isJavaIdentifierPart(s.charAt(i))) {             return false;          }        }        return true;       }        for (int i = 1; i < length; i++) {          if (!Character.isJavaIdentifierPart(s.charAt(i))) {             return false;          }        }        return true;       }        for (int i = 1; i < length; i++) {          if (!Character.isJavaIdentifierPart(s.charAt(i))) {             return false;          }        }        return true;       }        for (int i = 1; i < length; i++) {          if (!Character.isJavaIdentifierPart(s.charAt(i))) {             return false;          }        }        return true;       }        for (int i = 1; i < length; i++) {          if (!Character.isJavaIdentifierPart(s.charAt(i))) {             return false;          }        }        return true;       }        for (int i = 1; i < length; i++) {          if (!Character.isJavaIdentifierPart(s.charAt(i))) {             return false;          }
private void visitNew(NodeTraversal t, Node n) {      JSType type = getJSType(constructor).restrictByNotNullOrUndefined();      if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {        FunctionType fnType = type.toMaybeFunctionType();       if (fnType!= null) {          visitParameterList(t, n, fnType);          ensureTyped(t, n, fnType.getInstanceType());        } else {          type = getJSType(constructor).restrictByNotNullOrUndefined();         }       }      }      }      }     }    }   }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
private void unrollBinaryOperator(      Node current = firstNonOperator;      do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }    }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
public void setRangeAxes(ValueAxis[] axes) {       * @since 1.0.7        */       public int getRangeAxisIndex(ValueAxis axis) {          if (axis == null) {              throw new IllegalArgumentException("Null 'axis' argument.");          }           int result = this.rangeAxes.indexOf(axis);          if (result < 0) {              Plot parent = getParent();             if (parent == null) {                 throw new IllegalArgumentException("Null 'parent' argument.");             }              int result = this.rangeAxes.indexOf(axis);             if (result < 0) {                 Plot parent = getParent();                if (parent == null) {                     throw new IllegalArgumentException("Null 'parent' argument.");                 }                 int result = this.rangeAxes.indexOf(axis);                if (result < 0) {                     Plot parent = getParent();                    if (parent == null) {                         throw new IllegalArgumentException("Null 'parent' argument.");                     }                     int result = this.rangeAxes.indexOf(axis);                    if (result < 0) {                         Plot parent = getParent();                        if (parent == null) {                              throw new IllegalArgumentException("Null 'parent' argument.");                         }                         int result = this.rangeAxes.indexOf(axis);                         if (result < 0) {                              Plot parent = getParent();                             if (parent == null) {                                   throw new IllegalArgumentException("Null 'parent' argument.");
public void removeRow(int rowIndex) {       */       public void removeRow(Comparable rowKey) {          if (rowKey == null) {              throw new IllegalArgumentException("Null 'rowKey' argument.");          }           int index = getRowIndex(rowKey);           removeRow(index);       }
public static double cosh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (Double.isNaN(x) && Double.isNaN(y));      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == null || y == null);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == null || y == null);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == null || y == null);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == null || y == null);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == null || y == null);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == null || y == null);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == null || y == null);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == null || y == null);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == null || y == null);      }      /**       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (x == y) || (x == null || y == null);      }      /**       * @return {@code true} if the values are equal.
public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {              setMillis(getChronology().minutes().add(getMillis(), minutes));         }      }       * @throws IllegalArgumentException if the value is invalid       */      public void addMinutes(final int minutes) {         if (minutes!= 0) {
private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,      do {        switch (token) {          case STAR:            if (ignoreStar) {            } else {              if (builder.length() > 0) {                if (builder.charAt(0) == '/' && builder.charAt(1) == '*') {                  if (ignoreStar) {                  } else {                    if (builder.length() > 0) {                       if (builder.charAt(0) == '/' && builder.charAt(1) == '*') {                          if (ignoreStar) {                          } else {                            if (builder.length() > 0) {                               if (builder.charAt(0) == '/' && builder.charAt(1) == '*') {                                 if (ignoreStar) {                                 } else {                                  if (builder.length() > 0) {                                    if (builder.charAt(0) == '/' && builder.charAt(1) == '*') {                                     if (ignoreStar) {                                     } else {                                      if (builder.length() > 0) {                                        if (builder.charAt(0) == '/' && builder.charAt(1) == '*') {                                        if (ignoreStar) {                                        } else {                                         if (builder.length() > 0) {
public MockSettings defaultAnswer(Answer defaultAnswer) {       }       public boolean isSerializable() {          return extraInterfaces!= null && java.util.Arrays.asList(extraInterfaces).contains(Serializable.class);       }       public void initiateMockName(Class classToMock) {         if (extraInterfaces == null) {             return;         }         if (classToMock.isInterface()) {             return;         }
void apply() {        this.nameNode = nameNode;        this.isPropertyAssign = isPropertyAssign;        this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getSecondChild());       }        this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getSecondChild());       }        this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getSecondChild());       }        this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getSecondChild());       }        this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getSecondChild());       }        this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getSecondChild());       }        this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||            NodeUtil.mayHaveSideEffects(assignNode.getSecondChild());       }        this.maybeAliased =
private Node tryFoldComparison(Node n, Node left, Node right) {            && right.getString().equals("undefined"))            || (Token.VOID == right.getType()                && NodeUtil.isLiteralValue(right.getFirstChild(), false)));           int rhType = right.getType();           switch (rhType) {             case Token.VOID:              if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {                   is buggy program
private void inlineAliases(GlobalNamespace namespace) {          continue;        }       if (name.globalSets == 1 && name.localSets == 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets > 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets == 1 && name.localSets == 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets > 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets == 1 && name.localSets == 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets > 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets == 1 && name.localSets == 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets > 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets == 1 && name.localSets == 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets > 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets == 1 && name.localSets == 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets > 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets == 1 && name.localSets == 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets > 0) {          name.aliasingGets = 0;       }         continue;       }       if (name.globalSets == 1 && name.localSets == 0) {
private static boolean isAssignable(Type type, ParameterizedType toParameterized                  toClass, typeVarAssigns);         for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());             if (!isAssignable(toTypeArg, fromTypeArg)) {                 return false;             }         }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());             if (!isAssignable(toTypeArg, fromTypeArg)) {                 return false;             }          }           for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {              Type toTypeArg = entry.getValue();              Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());              if (!isAssignable(toTypeArg, fromTypeArg)) {                  return false;              }           }        }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());             if (!isAssignable(toTypeArg, fromTypeArg)) {                  return false;             }          }       }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());             if (!isAssignable(toTypeArg, fromTypeArg)) {                  return false;             }          }       }          for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet())
public static boolean isEmpty(boolean[] array) {          } else if (element!= null) {              type = element.getClass();          } else {             type = Object.class;          } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;         } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type);          return newArray == null;
public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }            }          }        }      }    }   }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,              || FunctionTypeBuilder.isFunctionTypeDeclaration(info));        }        if (inferred) {         inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));        }        if (!inferred) {          return;        }         inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));        }        if (!inferred) {          return;        }         inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));        }        if (!inferred) {          return;        }         inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));        }        if (!inferred) {          return;        }         inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));        }        if (!inferred) {          return;        }         inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));        }        if (!inferred) {          return;        }         inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&             (info!= null ||!scope.isDeclared(qName, false)));        }        if (!inferred) {          return;        }         inferred =!(rhsValue!= null &&             rhsValue.isFunction() &&
