public java.util.List < java.lang.Integer > METHOD_1 ( ) { java.util.List < java.lang.Integer > VAR_1 = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( int VAR_2 : target ) { if ( VAR_2 > 0 ) { VAR_1. add ( VAR_2 ) ; } } return VAR_1 ; }
public double [ ] METHOD_1 ( ) { double [ ] VAR_1 = new double [ INT_1 ] ; if ( ( VAR_2 ) > ( ( this. VAR_3. size ( ) ) - 1 ) ) { VAR_1 [ 0 ] = 0 ; } else { VAR_1 [ 0 ] = this. VAR_3. get ( VAR_2 ) ; } return VAR_1 ; }
public static void METHOD_1 ( TYPE_1 VAR_1, int value ) { if (! ( TYPE_2. METHOD_2 ( VAR_1 ) ) ) { return ; } TYPE_3 VAR_2 = TYPE_2. METHOD_3 ( VAR_1 ). METHOD_4 ( ). METHOD_5 ( TYPE_4. METHOD_6 ( VAR_1 ). getName ( ) ) ; VAR_2. METHOD_7 ( ( ( VAR_2. METHOD_5 ( ) ) + value ) ) ; }
public void METHOD_1 ( int VAR_1 ) { TYPE_1. METHOD_2 ( STRING_1, ( STRING_2 + ( VAR_2 ) ) ) ; boolean VAR_3 = ( VAR_1 & ( VAR_2 ) ) == 0 ; VAR_4. METHOD_3 ( ). METHOD_4 ( ( VAR_3? 1 : 0 ) ). METHOD_5 ( ( VAR_3? 0 : VAR_4. METHOD_6 ( ) ) ) ; }
public double METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = 0 ; double VAR_3 = 0 ; for ( TYPE_1 VAR_4 : METHOD_2 ( ) ) { if ( VAR_4. METHOD_3 ( ). equals ( VAR_1 ) ) { VAR_2 ++ ; VAR_3 += VAR_4. METHOD_4 ( ) ; } } VAR_5. METHOD_5 ( ( VAR_3 / VAR_2 ) ) ; return VAR_3 / VAR_2 ; }
public TYPE_1 METHOD_1 ( java.lang.String VAR_1, java.lang.String VAR_2 ) { return new TYPE_1 ( new java.io.File ( VAR_2 ), new java.util.Date ( ), 0, 0, STRING_1, new java.util.Date ( ), 0.0, STRING_2, STRING_2, STRING_2, STRING_2, STRING_2 ) ; }
private void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( ( VAR_1. METHOD_2 ( ) ) - 1 ) * ( VAR_3 ) ; this. VAR_4. add ( TYPE_2. METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( VAR_1. METHOD_4 ( ) ) ) ), VAR_2, VAR_1. METHOD_5 ( ) ) ; }
public void METHOD_1 ( ) { java.lang.String [ ] VAR_1 = METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3. METHOD_3 ( ) ; for ( java.lang.String VAR_4 : VAR_1 ) { try { VAR_3. add ( VAR_2. METHOD_4 ( new java.io.File ( VAR_5, VAR_4 ) ) ) ; } catch ( TYPE_2 | java.io.IOException VAR_6 ) { VAR_6. METHOD_5 ( ) ; } }
public void METHOD_1 ( char VAR_1 ) { if ( ( n ) == 1 ) { METHOD_2 ( ) ; VAR_2 += VAR_1 ; if ( ( ( VAR_2 ) - VAR_1 ) & INT_1 )!= ( ( VAR_2 ) & INT_1 ) ) { METHOD_2 ( ) ; } VAR_2 -= INT_2 ; } }
private void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class. METHOD_2 ( STRING_1 ) ) ; TYPE_2 VAR_3 = VAR_1. METHOD_3 ( ) ; TYPE_3 VAR_4 = VAR_1. METHOD_4 ( ) ; VAR_4. METHOD_5 ( this ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_3 ) ; VAR_5. METHOD_6 ( ). add ( STRING_2 ) ; VAR_6. METHOD_7 ( VAR_5 ) ; VAR_6. METHOD_8 ( VAR_7 ) ; VAR_6. show ( ) ; }
public void init ( TYPE_1 event ) { java.lang.System.out.println ( ( STRING_1 + ( this. VAR_1. toString ( ) ) ) ) ; TYPE_2. METHOD_1 ( new TYPE_3 ( ) ) ; TYPE_4 VAR_2 = TYPE_5. METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) ; VAR_1. METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_1. METHOD_3 ( ) ; VAR_2. METHOD_4 ( ) ; VAR_2. METHOD_4 ( ) ; assertThat ( VAR_2. METHOD_5 ( ), TYPE_5. METHOD_6 ( false ) ) ; }
private static java.lang.String METHOD_1 ( TYPE_1 < java.lang.Object > VAR_1 ) { java.lang.String VAR_2 = null ; TYPE_1 < java.lang.Object > VAR_3 = ( ( TYPE_1 < java.lang.Object > ) ( VAR_1. get ( STRING_1 ) ) ) ; if ( VAR_3 == null ) VAR_2 = ( ( java.lang.String ) ( VAR_3. get ( STRING_2 ) ) ) ; return VAR_2 ; }
private void METHOD_1 ( ) { VAR_1 = VAR_2. METHOD_2 ( ) ; if ( ( state. METHOD_5 ( ) )!= null ) { TYPE_1 state = METHOD_3 ( ) ; VAR_1. METHOD_4 ( state. METHOD_5 ( ), METHOD_6 ( state ), state. METHOD_7 ( ), state. METHOD_8 ( ), true ) ; } VAR_1. METHOD_9 ( this ) ; }
public long METHOD_1 ( java.lang.String VAR_1, TYPE_1 VAR_2 ) { long id = - 1 ; try { VAR_3 = VAR_4. METHOD_2 ( ) ; id = VAR_3. METHOD_3 ( STRING_1, null, VAR_2 ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5. METHOD_4 ( ) ; } finally { if ( VAR_3!= null ) VAR_3. METHOD_5 ( ) ; } return id ; }
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super. METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( this. VAR_3. METHOD_2 ( TYPE_3. toString ( ), VAR_4. String class, VAR_5 ) ) ) ; VAR_2. METHOD_3 ( this. VAR_6. METHOD_4 ( ). get ( TYPE_3. toString ( ) ), FLOAT_1 ) ; }
private void METHOD_1 ( ) { java.lang.Integer [ ] array = new java.lang.Integer [ INT_1 ] ; for ( int i = 0 ; i < INT_1 ; i ++ ) { array [ i ] = i + 1 ; } VAR_1. METHOD_2 ( new TYPE_1 < java.lang.Integer > ( this, VAR_2, array ) ) ; VAR_3. METHOD_2 ( new TYPE_1 < java.lang.Integer > ( this, VAR_2, array ) ) ; }
private static void METHOD_1 ( android.content.Context context ) { TYPE_1 VAR_1 = TYPE_1. METHOD_2 ( context ) ; TYPE_2. i ( VAR_2, ( STRING_1 + ( VAR_1. toString ( ) ) ) ) ; VAR_1. METHOD_3 ( TYPE_3. METHOD_4 ( METHOD_5 ( context ) ) ) ; METHOD_6 ( context ) ; for ( int VAR_3 : METHOD_5 ( context ) ) { TYPE_4. METHOD_7 ( context, VAR_3 ) ; } }
public void METHOD_1 ( final TYPE_1 status ) { synchronized ( VAR_1 ) { VAR_1. execute ( new TYPE_2 ( ) { public void METHOD_2 ( ) { java.util.List < java.lang.String > list = new java.util.ArrayList ( VAR_2. METHOD_3 ( ) ) ; if ( status. METHOD_4 ( ) ) { METHOD_5 ( list ) ; } else { METHOD_6 ( list ) ; } } ) ; } }
protected void METHOD_1 ( ) { if ( ( VAR_1 )!= null ) { VAR_1. METHOD_2 ( ) ; } super. METHOD_1 ( ) ; if ( ( VAR_2 )!= null ) { VAR_2. METHOD_3 ( VAR_3 ) ; VAR_2. METHOD_4 ( ) ; VAR_2. METHOD_2 ( ) ; VAR_2 = null ; } }
private int METHOD_1 ( int VAR_1, int [ ] VAR_2, int VAR_3 ) { int VAR_4 = METHOD_2 ( VAR_5, VAR_2, VAR_3, ( ( VAR_2. length ) - 1 ) ) ; if ( ( VAR_2 [ VAR_4 ] ) > ( VAR_5 ) ) { VAR_4 -- ; } return VAR_4 ; }
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( STRING_1 ) ; VAR_1. METHOD_2 ( STRING_2 ) ; VAR_1. add ( METHOD_3 ( ) ) ; VAR_1. add ( METHOD_4 ( ) ) ; VAR_1. add ( METHOD_5 ( ) ) ; VAR_1. add ( METHOD_6 ( ) ) ; VAR_1. add ( METHOD_7 ( ) ) ; VAR_1. add ( METHOD_8 ( ) ) ; VAR_1. METHOD_10 ( VAR_2 ) ; return VAR_1 ; }
public static int METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( VAR_2 ) { return VAR_1 ; } else { while ( true ) { try { java.lang.String i = VAR_3. METHOD_2 ( ) ; int number = java.lang.Integer.parseInt ( i. trim ( ). replace ( CHAR_1, CHAR_2 ) ) ; return number ; } catch ( TYPE_1 VAR_4 ) { java.lang.System.out.print ( STRING_1 ) ; } } }
public < TYPE_1 > TYPE_1 get ( java.lang.Class < TYPE_1 > type ) { TYPE_2 VAR_1 = VAR_2. METHOD_1 ( TYPE_3. METHOD_2 ( "type", type. METHOD_3 ( ) ) ) ; if ( VAR_1 == null ) { return null ; } TYPE_1 result = METHOD_5 ( VAR_1. METHOD_6 ( ), type ) ; if ( result == null ) { TYPE_4. METHOD_4 ( STRING_1, type. METHOD_3 ( ) ) ; return null ; } return result ; }
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 p = METHOD_2 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( STRING_1, false, false, false, false, 0, 0, 0, 0 ) ; p. METHOD_3 ( ). add ( VAR_1 ) ; METHOD_4 ( METHOD_5 ( ). METHOD_6 ( p, STRING_2 ). METHOD_7 ( STRING_3 ) ) ; TYPE_2 VAR_2 = p. METHOD_3 ( ). get ( VAR_3 class ) ; METHOD_8 ( VAR_1, VAR_2, STRING_4 ) ; }
public void METHOD_1 ( int i ) { VAR_1. METHOD_2 ( i ) ; if ( i >= ( VAR_1. METHOD_3 ( ) ) ) { i = ( VAR_1. METHOD_3 ( ) ) - 1 ; } if ( ( i >= 0 ) && ( i < ( VAR_1. METHOD_3 ( ) ) ) ) { METHOD_4 ( i ) ; } }
private java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3. METHOD_2 ( METHOD_3 ( VAR_1 ), VAR_4 class ) ; java.util.List < java.lang.String > VAR_5 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_6 : VAR_2. METHOD_4 ( ) ) { VAR_5. add ( VAR_6 ) ; } for ( java.lang.String VAR_7 : VAR_2. METHOD_5 ( ) ) { VAR_5. add ( VAR_7 ) ; } return VAR_5 ; }
void METHOD_1 ( TYPE_1 VAR_1, TYPE_2 VAR_2, TYPE_3 <? > data ) { TYPE_3 < TYPE_4 > VAR_3 = METHOD_2 ( data ) ; TYPE_5 VAR_4 = METHOD_3 ( VAR_3 ) ; if ( VAR_2. METHOD_4 ( ) ) { TYPE_4 VAR_6 = VAR_3. METHOD_5 ( ) ; VAR_2. info ( STRING_1, VAR_4, toString ( VAR_5 ), toString ( VAR_6 ) ) ; } VAR_1. METHOD_6 ( VAR_4, VAR_5 ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3, TYPE_4, TYPE_5, java.io.IOException { java.lang.Long VAR_2 = VAR_3. METHOD_1 ( VAR_1 ) ; return TYPE_1. status ( VAR_4 ). METHOD_2 ( STRING_1 ). METHOD_3 ( STRING_2, java.lang.String. METHOD_4 ( VAR_2 ) ). METHOD_3 ( STRING_3, java.lang.String. METHOD_4 ( VAR_2 ) ). build ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == 0 ) { java.lang.System.out.println ( STRING_1 ) ; } TYPE_2 tmp = VAR_3 ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; i ++ ) { if ( ( tmp. METHOD_2 ( ). METHOD_3 ( ) ) == VAR_1 ) tmp. METHOD_4 ( tmp. METHOD_2 ( ). METHOD_2 ( ) ) ; tmp = tmp. METHOD_2 ( ) ; } ( VAR_2 ) -- ; }
private static void METHOD_1 ( TYPE_1 VAR_1, java.util.HashMap < TYPE_2, TYPE_2 > VAR_2, TYPE_2 VAR_3, TYPE_2 temp ) { if ( (! ( VAR_4 ) ) && (! ( VAR_5 ) ) ) { VAR_2. put ( VAR_3, temp ) ; VAR_4 = true ; VAR_6 = ( VAR_7 ) + 1 ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if (! ( VAR_1. METHOD_2 ( ) ) ) { int position = VAR_2. METHOD_3 ( ) ; TYPE_2 VAR_3 = VAR_4. get ( position ) ; new TYPE_3 ( VAR_3 ). show ( ) ; } }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( java.lang.String.format ( STRING_1, VAR_2 ) ) ; METHOD_3 ( VAR_1, 1, 1, 1 ) ; METHOD_4 ( VAR_1, 0, 1, 0 ) ; METHOD_5 ( VAR_1. METHOD_6 ( ). iterator ( ). METHOD_7 ( ) ) ; }
private android.view.View METHOD_1 ( TYPE_1 VAR_1, TYPE_2 VAR_2 ) { final android.view.View view = VAR_1. METHOD_2 ( VAR_3, this, this, TYPE_3. METHOD_3 ( VAR_3 ) ) ; android.view.View VAR_4 ; if ( ( this ) == view ) { VAR_4 = METHOD_4 ( ( ( METHOD_5 ( ) ) - 1 ) ) ; } else { VAR_4 = view ; } VAR_1. METHOD_6 ( view ) ; VAR_1. METHOD_6 ( view, VAR_2 ) ; return VAR_4 ; }
private static java.util.ArrayList < java.util.List < TYPE_1 > > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { java.util.List < java.util.List < TYPE_1 > > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { VAR_2. add ( VAR_3. METHOD_2 ( ) ) ; VAR_2. add ( VAR_3. METHOD_3 ( ) ) ; } return VAR_2 ; }
public void METHOD_1 ( ) { VAR_1. METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; if ( VAR_2 == null ) return ; VAR_1. METHOD_2 ( VAR_2. toString ( ) ) ; TYPE_2 i = new TYPE_2 ( this, VAR_2 ) ; i. METHOD_4 ( ) ; }
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2. METHOD_2 ( STRING_1, STRING_2 ) ; TYPE_3 VAR_2 = TYPE_3. METHOD_3 ( ) ; TYPE_4 < java.lang.String, TYPE_5 > VAR_3 = VAR_2. METHOD_4 ( ) ; VAR_3. METHOD_5 ( ) ; VAR_5. METHOD_5 ( ) ; VAR_6. METHOD_6 ( VAR_3 ) ; VAR_8 = VAR_5. METHOD_7 ( ). VAR_9 ; VAR_10 = VAR_5. METHOD_7 ( ). VAR_11 ; METHOD_8 ( ) ; METHOD_9 ( ) ; }
public void METHOD_1 ( ) { VAR_1. METHOD_2 ( false ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2. METHOD_3 ( VAR_1. METHOD_4 ( VAR_2 ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3. METHOD_5 ( INT_1 ) ; assertTrue ( VAR_1. METHOD_4 ( VAR_3 ) ) ; }
private void METHOD_1 ( ) { if ( VAR_1. equals ( VAR_2 ) ) { TYPE_1 VAR_3 = VAR_4. first ( ) ; VAR_4. remove ( VAR_3 ) ; for ( TYPE_1 t : VAR_5 ) { new java.lang.Thread ( VAR_3 ). start ( ) ; } VAR_2 = VAR_4. first ( ). METHOD_2 ( ) ; METHOD_1 ( ) ; } }
private TYPE_1 < TYPE_2, TYPE_3 >. VAR_1 < TYPE_2, TYPE_3 > METHOD_1 ( TYPE_1 < TYPE_2, TYPE_3 >. VAR_1 < TYPE_2, TYPE_3 > node ) { if ( ( VAR_2 ) == null ) return VAR_3 ; VAR_2 = METHOD_1 ( VAR_2 ) ; return node ; }
private void METHOD_1 ( java.lang.String message ) { if ( ( VAR_1. METHOD_3 ( ) )!= ( VAR_2 ) ) { TYPE_2. METHOD_4 ( this, VAR_3, VAR_4 ). show ( ) ; return ; } if ( ( message. length ( ) ) > 0 ) { byte [ ] VAR_5 = message. METHOD_5 ( ) ; VAR_1. METHOD_6 ( VAR_5 ) ; } }
public void METHOD_1 ( android.view.View VAR_1 ) { if ( ( ( VAR_2 ) == INT_1 ) || ( VAR_3 ) ) { VAR_4 = ( ( float ) ( VAR_5. METHOD_2 ( ) ) ) ; VAR_6 = ( ( VAR_4 ) + ( VAR_7 ) ) + ( VAR_8 ) ; android.content.Intent intent = getIntent ( ) ; intent. METHOD_3 ( STRING_1, VAR_6 ) ; METHOD_4 ( VAR_9, intent ) ; } else { METHOD_6 ( ) ; } }
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 = new TYPE_1 ( ) ; if ( VAR_3. METHOD_2 ( VAR_4 ) ) { java.util.List < TYPE_1 > VAR_5 = ( ( java.util.List < TYPE_1 > ) ( VAR_3. METHOD_3 ( VAR_4 ) ) ) ; VAR_6 = VAR_5. get ( 0 ) ; } VAR_7. METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; return STRING_1 ; }
public boolean METHOD_1 ( TYPE_1 VAR_1, TYPE_2 VAR_2, java.lang.String label, java.lang.String [ ] args ) { if ( VAR_1 instanceof TYPE_3 ) VAR_3. METHOD_2 ( ). info ( STRING_1 ) ; if ( label. METHOD_3 ( STRING_2 ) ) p. METHOD_4 ( ( ( ( ( VAR_4 ) + STRING_3 ) + ( TYPE_5. METHOD_5 ( p ) ) ) + STRING_4 ) ) ; return false ; }
private void METHOD_1 ( java.lang.String VAR_1, TYPE_1 VAR_2 ) throws java.lang.Exception { java.util.Calendar VAR_3 = VAR_4. METHOD_2 ( VAR_1 ) ; VAR_2. METHOD_3 ( VAR_5, METHOD_4 ( VAR_3 ) ) ; VAR_3. set ( VAR_6, INT_1 ) ; VAR_3. set ( VAR_7, INT_2 ) ; VAR_2. METHOD_3 ( VAR_8, METHOD_4 ( VAR_3 ) ) ; }
private int METHOD_1 ( ) { int VAR_1 ; if ( VAR_2 ) { VAR_1 = VAR_3 ; } else if ( VAR_4 ) { VAR_1 = VAR_5 ; } if ( ( VAR_6 ) && ( VAR_7 ) ) { VAR_1 = VAR_8 ; } else if ( (! ( VAR_6 ) ) && ( VAR_7 ) ) { VAR_1 = VAR_9 ; } else { VAR_1 = VAR_10 ; } return VAR_1 ; }
private void METHOD_1 ( java.lang.String VAR_1, int VAR_2 ) { try { VAR_3 = new TYPE_1 ( VAR_1, VAR_2 ) ; output = new TYPE_2 ( VAR_3. METHOD_2 ( ) ) ; VAR_4 = new TYPE_3 ( VAR_3. METHOD_3 ( ) ) ; try { java.lang.Thread. METHOD_4 ( INT_1 ) ; } catch ( java.io.IOException VAR_5 ) { } METHOD_5 ( name ) ; } catch ( java.io.IOException VAR_6 ) { java.lang.System.err.println ( STRING_1 ) ; java.lang.System.exit ( 0 ) ; } }
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; if ( VAR_2!= null ) { TYPE_2. i ( VAR_3, STRING_1 ) ; VAR_2. METHOD_4 ( VAR_4 ) ; VAR_2. METHOD_5 ( true ) ; } TYPE_3. METHOD_6 ( METHOD_7 ( VAR_5 ), VAR_6 ) ; VAR_7 = ( ( TYPE_4 ) ( METHOD_7 ( VAR_8 ) ) ) ; VAR_7. METHOD_8 ( METHOD_9 ( ). getColor ( VAR_9 ) ) ; }
public static int METHOD_1 ( java.lang.String str ) { int index = 0 ; if ( ( str. METHOD_2 ( CHAR_1 ) ) == ( - 1 ) ) { return index ; } do { index ++ ; } while ( ( str. METHOD_3 ( index ) ) == CHAR_1 ) { index ++ ; } return index ; }
public void METHOD_1 ( final TYPE_1 field, final TYPE_2 VAR_1, final TYPE_3 VAR_2 ) throws TYPE_4, TYPE_5 { if ( ( field. METHOD_2 ( VAR_2 ) ) instanceof TYPE_2 ) { throw new TYPE_4 ( ) ; } field. METHOD_3 ( VAR_2, VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1, int VAR_2 ) { if ( VAR_2 == INT_1 ) { final int position = VAR_1. METHOD_2 ( ) ; METHOD_3 ( source. METHOD_4 ( position ). getName ( ) ) ; VAR_3. METHOD_5 ( position ) ; VAR_3. METHOD_6 ( position ) ; } }
public java.lang.Object METHOD_1 ( TYPE_1 method ) { java.lang.String VAR_1 = STRING_1 ; for ( TYPE_2 f : method. METHOD_2 ( ) ) { if ( f. METHOD_3 ( this ) ) { return f ; } } for ( TYPE_3 VAR_2 : method. METHOD_4 ( ) ) { VAR_1 = VAR_1. METHOD_5 ( ( ( java.lang.String ) ( VAR_2. METHOD_3 ( this ) ) ) ) ; } return null ; }
public void METHOD_1 ( TYPE_1 event, int VAR_1, int VAR_2 ) { TYPE_2 VAR_3 = ( ( TYPE_2 ) ( METHOD_2 ( ). METHOD_3 ( VAR_4 ) ) ) ; if ( VAR_3!= null ) { VAR_5. METHOD_4 ( event ) ; boolean VAR_6 = ( VAR_1 == ( VAR_7 ) ) || ( VAR_1 == ( VAR_8 ) ) ; VAR_3. METHOD_5 ( event, VAR_6, false ) ; } METHOD_6 ( event, VAR_1, VAR_2 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1. METHOD_2 ( ) ) == ( VAR_2 ) ) { for ( TYPE_2 listener : VAR_6 ) { listener. METHOD_4 ( VAR_1. METHOD_2 ( ) ) ; } } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1. getValue ( VAR_3 class ) ; VAR_2. METHOD_2 ( VAR_4. toString ( ) ) ; VAR_2. METHOD_3 ( name ) ; VAR_5. METHOD_4 ( source ). setValue ( VAR_2 ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super. METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = ( ( TYPE_2 ) ( METHOD_3 ( VAR_4 ) ) ) ; VAR_3. METHOD_4 ( getString ( VAR_5 ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_3 VAR_6 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_7 ) ) ) ; VAR_6. METHOD_6 ( this, VAR_8 ) ; VAR_6. METHOD_7 ( this ) ; }
void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) == null ) return ; if ( ( VAR_2. METHOD_2 ( ) ) >= 0 ) { VAR_1. METHOD_3 ( ) ; VAR_2. METHOD_4 ( ) ; VAR_1. start ( VAR_2. METHOD_4 ( ) ) ; } }
public void METHOD_1 ( boolean status, java.lang.String VAR_1, java.lang.Long VAR_2 ) throws java.io.IOException, TYPE_1 { java.lang.String result = ( ( VAR_1 + STRING_1 ) + ( status? STRING_2 : STRING_3 ) ) + STRING_4 ; if ( VAR_2!= null ) { TYPE_2. METHOD_2 ( ( ( ( result + STRING_5 ) + ( VAR_2 / INT_1 ) ) + STRING_6 ) ) ; } else { TYPE_2. METHOD_2 ( result ) ; } if ( status == false ) { VAR_3 = status ; } VAR_4. add ( result ) ; }
public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) { VAR_1 = INT_1 - ( VAR_1 * ( - 1 ) ) ; } else if ( VAR_1 > INT_2 ) { VAR_1 = INT_1 - VAR_1 ; } this. VAR_1 = VAR_1 ; }
protected void METHOD_1 ( ) { final TYPE_1 VAR_1 = getConfig ( ). METHOD_2 ( ) ; if ( ( ( VAR_1. METHOD_3 ( ) )!= null ) && ( VAR_1. METHOD_4 ( ) ) ) { TYPE_3. METHOD_6 ( STRING_1, VAR_1. METHOD_3 ( ) ) ; } }
private void METHOD_1 ( int k ) { int i = 0 ; int VAR_1 ; int VAR_2 ; do { VAR_1 = k ; VAR_2 = 1 ; do { i ++ ; VAR_1 ++ ; VAR_2 = ( ( int ) ( java.lang.Math.pow ( INT_1, i ) ) ) ; } while ( VAR_1 > VAR_2 ) ; } while (! ( METHOD_2 ( k, i, i, k, 1, k ) ) ) ; }
public java.lang.String METHOD_1 ( java.lang.String token ) { java.lang.String VAR_1 ; try { final TYPE_1 VAR_2 = METHOD_2 ( token ) ; VAR_2. put ( VAR_3, new java.util.Date ( ) ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_1 = null ; } return VAR_1 ; }
public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( ( VAR_1. length ( ) ) == 0 ) ) { java.lang.System.out.println ( STRING_1 ) ; return false ; } try { TYPE_1 [ ] VAR_2 = TYPE_2. METHOD_3 ( VAR_1 ) ; return VAR_3. METHOD_4 ( VAR_2 ) ; } catch ( TYPE_3 VAR_4 ) { VAR_4. METHOD_5 ( ) ; return false ; } return true ; }
public void METHOD_1 ( TYPE_1 VAR_1, int position ) { if (! ( VAR_2 ) ) throw new TYPE_2 ( STRING_1 ) ; if (! ( VAR_3. METHOD_2 ( position ) ) ) { throw new TYPE_2 ( ( STRING_2 + ( position - 1 ) ) ) ; } METHOD_1 ( VAR_1, VAR_3 ) ; }
private java.lang.String METHOD_1 ( java.io.InputStream VAR_1 ) { try { java.io.BufferedReader VAR_2 = new java.io.BufferedReader ( new TYPE_1 ( VAR_1 ) ) ; java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; java.lang.String line ; while ( ( line = VAR_2. METHOD_2 ( ) )!= null ) { result. append ( line ) ; } return result. toString ( ) ; } catch ( java.io.IOException VAR_3 ) { VAR_3. METHOD_3 ( ) ; return STRING_1 ; } }
