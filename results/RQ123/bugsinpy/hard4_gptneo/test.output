class GroupBy(_GroupBy):          ).sortlevel()          if self.as_index:             d = {self._get_axis_name(self.axis): index, "copy": False}               return output.reindex(**d)
class HiveCommandClient(HiveClient):          if partition is None:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table))              return stdout and table in stdout          else:
class BinGrouper(BaseGrouper):
class DataFrame(NDFrame):          dtype: object          nv.validate_transpose(args, dict())         return super().transpose(1, 0, **kwargs)      T = property(transpose)      self._transpose = self._transpose._transpose      self._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose._transpose._transpose = self._transpose._transpose._transpose      self._transpose
from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches  from functools import wraps  import tempfile  import os  from difflib import get_close_matches
def target_version_option_callback(  @click.option(      "--config",      type=click.Path(         exists=False, file_okay=True, dir_okay=False, readable=True, allow_dash=False      ),      is_eager=True,      callback=read_pyproject_toml,      callback_args=None,      callback_kwargs=None
class Sanic:                  if _rn not in self.named_response_middleware:                       self.named_response_middleware[_rn] = deque()                   if middleware not in self.named_response_middleware[_rn]:                       self.named_response_middleware[_rn].append(middleware)
class Model(Container):
def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),      else:          strides = (1, 1) + strides     x = tf.nn.conv2d_transpose(x, kernel,
class XportReader(abc.Iterator):          if isinstance(filepath_or_buffer, (str, bytes)):               self.filepath_or_buffer = open(filepath_or_buffer, "rb")           else:                 contents = filepath_or_buffer.read()              try:                   contents = contents.encode(self._encoding)              except UnicodeEncodeError:                  pass              self.filepath_or_buffer = BytesIO(contents)             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()             self._read_header()
class LocalCache(collections.OrderedDict):          self.limit = limit      def __setitem__(self, key, value):         while len(self) >= self.limit:              self.popitem(last=False)          super(LocalCache, self).__setitem__(key, value)
dependency tree to find the noun phrase they are referring to – for example:  $9.4 million --> Net income.  Compatible with: spaCy v2.0.0+ Last tested with: v2.1.0  from __future__ import unicode_literals, print_function dependency tree to find the noun phrase they are referring to – for example:  $9.4 million --> Net income.
class AsyncioServer:              task = asyncio.ensure_future(coro, loop=self.loop)               return task      def __await__(self):             task = asyncio.ensure_future(self.serve_coro)              return task          try:              task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return          try:               task.wait()          except asyncio.CancelledError:              task.cancel()               return
def deconv_length(dim_size, stride_size, kernel_size, padding, output_padding):      if dim_size is None:          return None      if output_padding is None:          if padding == 'valid':              if stride_size is None:                   raise TypeError(                      "Cannot set stride_size with no padding"                  )             stride_size = 1              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size              stride_size = stride_size
def fit_generator(model,              elif val_gen:                  val_data = validation_data                   if isinstance(val_data, Sequence):                       val_enqueuer_gen = iter_sequence_infinite(generator)                   else:                        val_enqueuer_gen = val_data                       val_data = val_data                       val_data = val_data                       val_data = val_data                       val_data = val_data                       val_data = val_data                       val_data = val_data                        val_data = val_data                        val_data = val_data                        val_data = val_data                        val_data = val_data                        val_data = val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                       val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                        val_data                       val_data                       val_data                       val_data                       val_data                       val_data                       val_data                       val_data                       val_data                       val_data                       val_data
class FastParquetImpl(BaseImpl):          if partition_cols is not None:
class NumpyArrayIterator(Iterator):                          dtype=K.floatx())          for i, j in enumerate(index_array):               x = self.x[j]               x = self.image_data_generator.random_transform(x.astype(K.floatx()))               x = self.image_data_generator.standardize(x)               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x               batch_x[i] = x
class Series(base.IndexOpsMixin, generic.NDFrame):          from pandas.core.reshape.concat import concat          if isinstance(to_append, (list, tuple)):             to_concat = [self] + to_append          else:              to_concat = [self, to_append]           return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)          return concat(to_concat)
class HTTPRequest(HTTPMessage):          )          headers = dict(self._orig.headers)         if 'Host' in headers:              headers['Host'] = url.netloc.split('@')[-1]          headers = ['%s: %s' % (name, value)
class TestProcessProtocol(protocol.ProcessProtocol):      def __init__(self):          self.deferred = defer.Deferred()         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):          self.out += data          self.err += data          self.exitcode += 1
class _Window(PandasObject, SelectionMixin):              except (ValueError, TypeError):                  raise TypeError("cannot handle this type -> {0}".format(values.dtype))         values[np.isinf(values)] = np.NaN          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values          return values
class BaseComparisonOpsTests(BaseOpsUtil):             assert result is NotImplemented          else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")
class CentralPlannerScheduler(Scheduler):          tasks.sort(key=self._rank(), reverse=True)          for task in tasks:             in_workers = assistant or worker in task.workers              if task.status == 'RUNNING' and not in_workers:                 continue
def jsonable_encoder(                     exclude=exclude,                      by_alias=by_alias,                       exclude_unset=exclude_unset,                       include_none=include_none,                       custom_encoder=custom_encoder,                       sqlalchemy_safe=sqlalchemy_safe,                   )
def unified_timestamp(date_str, day_first=True):      date_str = date_str.replace(',','')     pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)      timezone, date_str = extract_timezone(date_str)     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone is None:         return date_str     if timezone
class ContractsManager(object):          def eb_wrapper(failure):              case = _create_testcase(method, 'errback')             exc_info = failure.value, failure.type, failure.getTracebackObject()              results.addError(case, exc_info)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback = cb_wrapper(failure)          request.callback
class APIRouter(routing.Router):              response_model_exclude_unset=bool(                 response_model_exclude_unset or response_model_skip_defaults              ),             response_model_exclude_defaults=response_model_exclude_defaults,             response_model_exclude_none=response_model_exclude_none,              include_in_schema=include_in_schema,              response_class=response_class or self.default_response_class,              name=name,          )
def format_file_in_place(          return False      if write_back == write_back.YES:         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:               f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         dst_name = f"{dst}  (original)"         with open(src_name, "w", encoding=src_buffer.encoding) as f:
def should_series_dispatch(left, right, op):          return True     if is_datetime64_dtype(ldtype) and is_object_dtype(rdtype):          return True      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False
shell=run_thru_shell,          cwd=cwd      )     return proc.wait(context)  def run_script(script_path, cwd='.'):          shell=run_thru_shell,          cwd=cwd      )     return proc.wait(script_path, cwd=cwd)  def run_script_with_context(script_path, cwd, context):          shell=run_thru_shell,          cwd=cwd      )     return proc.wait(script_path, cwd=cwd,
class ExecutionEngine(object):          d = self.scraper.enqueue_scrape(response, request, spider)          d.addErrback(lambda f: logger.error('Error while enqueuing downloader output',
from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io
class InfoExtractor(object):
class APIRouter(routing.Router):                     response_model_exclude=route.response_model_exclude,                      response_model_by_alias=route.response_model_by_alias,                       response_model_exclude_unset=route.response_model_exclude_unset,                       response_model_exclude_defaults=route.response_model_exclude_defaults,                       include_in_schema=route.include_in_schema,                       response_class=route.response_class or default_response_class,                       name=route.name,
def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }
class BarPlot(MPLPlot):      def _decorate_ticks(self, ax, name, ticklabels, start_edge, end_edge):          ax.set_xlim((start_edge, end_edge))          ax.set_xticks(self.tick_pos)          ax.set_xticklabels(ticklabels)           if name is not None and self.use_index:               ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                     ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                     ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                     ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                     ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                     ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                    ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                    ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                    ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                    ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                    ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                    ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)                if name is not None and self.use_index:                    ax.set_xlabel(name)               ax.set_xlim((start_edge, end_edge))               ax.set_xticks(self.tick_pos)               ax.set_xticklabels(ticklabels)
from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     from.common import InfoExtractor  from..utils import (      compat_urllib
def match(command, settings):  def get_new_command(command, settings):      cmds = command.script.split(' ')     machine = ""      if len(cmds) >= 2:          machine = cmds[1]     return shells.and_("vagrant up " +
class Worker(object):              return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],
def pivot_table(
def create_cloned_field(field: ModelField) -> ModelField:             original_type.__name__, __config__=original_type.__config__          )          for f in original_type.__fields__.values():              use_type.__fields__[f.name] = f      use_type.__validators__ = original_type.__validators__      if PYDANTIC_1:           new_field = ModelField(
def read_conllx(input_data, use_morphology=False, n=0):                      continue                   try:                        id_ = int(id_) - 1                       head = (int(head) - 1) if head!= "0" else id_                       dep = "ROOT" if dep == "root" else dep                       tag = pos if tag == "_" else tag                       tag = tag + "__" + morph if use_morphology else tag
class BaseReshapingTests(BaseExtensionTests):          result[0] = result[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]
class CorrectedCommand(object):
def add_codes(err_cls):      class ErrorsWithCodes(object):          def __getattribute__(self, code):             msg = getattr(err_cls, code)             return "[{code}] {msg}".format(code=code)      return ErrorsWithCodes()
class GroupBy(_GroupBy): func(**kwargs)              if result_is_index:                  result = algorithms.take_nd(obj.values, result)               if post_processing:                   result = post_processing(result, inferences)
def _isna_ndarraylike_old(obj):      return result  def notna(obj):      Detect non-missing values for an array-like object.      if not isinstance(obj, np.ndarray):          return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return
class _LocIndexer(_LocationIndexer):          if isinstance(labels, MultiIndex):             if isinstance(key, str) and labels.levels[0].supports_partial_string_indexing:                  key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             else:                   key = None
class BracketTracker:         if self._lambda_arguments and leaf.type == token.COLON:             self.depth -= 1             self._lambda_arguments -= 1              return True          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False
class DatetimeIndexOpsMixin(ExtensionIndex, ExtensionOpsMixin):          if isinstance(maybe_slice, slice):               return self[maybe_slice]         taken = ExtensionIndex.take(               self, indices, axis, allow_fill, fill_value, **kwargs           )         freq = self.freq if is_period_dtype(self) else None         assert taken.freq == freq, (taken.freq, freq, taken)         return self._shallow_copy(taken, freq=freq)      _can_hold_na = True      _na_value = NaT
elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj), False)      else:          return obj is None  def _isna_old(obj):      elif hasattr(obj, "__array__
class TestSeriesComparison:          dti = dti.tz_localize("US/Central")          ser = Series(dti).rename(names[1])          result = op(Series(dti), ser)          assert result.name == names[2]

class Model(BaseModel):  class ModelSubclass(Model):      y: int  @app.get("/", response_model=Model, response_model_exclude_unset=True)  def get() -> ModelSubclass:     return ModelSubclass(sub={}, y=1)  client = TestClient(app)  response_model = response_model_exclude_unset()  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model)  response_model_exclude_unset
default 'raise'          )          new_dates = new_dates.view(DT64NS_DTYPE)          dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=self.freq
class ReduceLROnPlateau(Callback):             self.mode = 'auto'          if (self.mode =='min' or             (self.mode == 'auto' and 'acc' in self.monitor)):              self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)               self.best = np.Inf           else:               self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)               self.best = -np.Inf           self.cooldown_counter = 0           self.wait = 0
def get_objs_combined_axis(          The axis to extract indexes from.      sort : bool, default True          Whether the result index should come out sorted or not.      Returns      -------      Index      obs_idxes = [obj._get_axis(axis) for obj in objs]     return _get_combined_index(obs_idxes, intersect=intersect, sort=sort)  def _get_combined_index(
class QuarterOffset(DateOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )          return type(dtindex)._simple_new(              shifted, freq=dtindex.freq, dtype=dtindex.dtype          )
class ImageDataGenerator(object):             The inputs, normalized.         if self.preprocessing_function:             x = self.preprocessing_function(x)          if self.rescale:              x *= self.rescale          if self.samplewise_center:              x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x = self._samplewise_center(x)               x
def _cat_compare_op(op):              mask = (self._codes == -1) | (other_codes == -1)               if mask.any():                  ret[mask] = False               return ret          if is_scalar(other):                  ret[mask] = False               return ret
def match(command, settings):      return _search(command.stderr) or _search(command.stdout)  def get_new_command(command, settings):      m = _search(command.stderr) or _search(command.stdout)     editor_call = '{} {} +{}'.format(os.environ['EDITOR'],                                        m.group('file'),                                         m.group('line'))      return shells.and_(editor_call, command.script)
def conv2d_transpose(x, kernel,
class Spider(object_ref):          crawler.signals.connect(self.close, signals.spider_closed)      def start_requests(self):          if self.make_requests_from_url is not Spider.make_requests_from_url:               warnings.warn(                  "Spider.make_requests_from_url method is deprecated; "                  "it won't be called in future Scrapy releases. "                  "Please override start_requests method instead."               )               for url in self.start_urls:                   yield self.make_requests_from_url(url)         else:                 yield self.make_requests_from_url(None)
def reformat_many(      if sys.platform == "win32":          worker_count = min(worker_count, worker_count)     executor = ProcessPoolExecutor(max_workers=worker_count)      try:          loop.run_until_complete(              schedule_formatting(
class PeriodIndex(DatetimeIndexOpsMixin, Int64Index, PeriodDelegateMixin):              try:                  loc = self._get_string_slice(key)                   return series[loc]             except (TypeError, ValueError):                  pass              asdt, reso = parse_time_string(key, self.freq)                   try:                        loc = self._get_string_slice(key)                   except (TypeError, ValueError):                       pass               asdt, reso = parse_time_string(key, self.freq)                   try:                         loc = self._get_string_slice(key)                   except (TypeError, ValueError):                       pass               asdt, reso = parse_time_string(key, self.freq)                   try:                         loc = self._get_string_slice(key)                   except (TypeError, ValueError):                       pass               asdt, reso = parse_time_string(key, self.freq)                   try:                         loc = self._get_string_slice(key)                   except (TypeError, ValueError):                       pass               asdt, reso = parse_time_string(key, self.freq)                   try:                         loc = self._get_string_slice(key)                   except (TypeError, ValueError):                       pass               asdt, reso = parse_time_string(key, self.freq)                   try:                         loc = self._get_string_slice(key)                   except (TypeError, ValueError):                       pass               asdt, reso = parse_time_string(key, self.freq)                  try:                         loc = self._get_string_slice(key)                   except (TypeError, ValueError):                       pass               asdt, reso = parse_time_string(key, self.freq)                  try:                         loc = self._get_string_slice(key)                  except (TypeError, ValueError):                       pass               asdt, reso = parse_time_string(key, self.freq)                  try:                         loc = self._get_string_slice(key)                  except (TypeError, ValueError):                      pass               asdt, reso = parse_time_string(key, self.freq)                  try:                         loc = self._get_string_slice(key)                  except (TypeError, ValueError):                       pass               asdt, reso = parse_time_string(key, self.freq)                  try:                        loc = self._get_string_slice(key)                  except (TypeError, ValueError):                      pass               asdt, reso = parse_time_string(key, self.freq)                  try:                        loc = self._get_string_slice(key)                  except (TypeError, ValueError):                      pass               asdt, reso = parse_time_string(key, self.freq)                 try:                        loc = self._get_string_slice(key)                  except (TypeError, ValueError):
def base_url(url):  def urljoin(base, path):      if not isinstance(path, compat_str) or not re.match(r'^(?:http?:)?          return None if re.match(r'^(?:http?:)?          return path if not isinstance(base, compat_str) or not re.match(r'^(?:http?:)?          return None      return compat_urlparse.urljoin(base, path)
raise TypeError(
def print_tensor(x, message=''):          The same tensor `x`, unchanged.     tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)
class Block(PandasObject):          check_setitem_lengths(indexer, value, values)          if is_empty_indexer(indexer, arr_value):               pass         else:                   raise TypeError(
class RedirectMiddleware(BaseRedirectMiddleware):          if 'Location' not in response.headers or response.status not in allowed_status:              return response         location = to_native_str(response.headers['Location'])          redirected_url = urljoin(request.url, location)         response.headers['Location'] = redirected_url          return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response
.dict(by_alias=by_alias, exclude_unset=exclude_unset)  def _prepare_response_content(     res: Any, *, by_alias: bool = True, exclude_unset: bool  ) -> Any:      if isinstance(res, BaseModel):          if PYDANTIC_1:              return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)          else:               return res.dict(                 by_alias=by_alias, skip_defaults=exclude_unset )      elif isinstance(res, list):          return res._prepare_response_content(item, exclude_unset=exclude_unset)      elif isinstance(res, dict):          return {              k: res._prepare_response_content(v, exclude_unset=exclude_unset)              for k, v in res.items()          }      return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)  def _prepare_response_content(     res: Any, *, by_alias: bool = True, exclude_unset: bool  ) -> Any:      if isinstance(res, BaseModel):          if PYDANTIC_1:              return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)          else:               return res.dict(                  by_alias=by_alias, skip_defaults=exclude_unset )      elif isinstance(res, list):          return res._prepare_response_content(item, exclude_unset=exclude_unset)      elif isinstance(res, dict):          return {              k: res._prepare_response_content(v, exclude_unset=exclude_unset)              for k, v in res.items()          }      return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)  def _prepare_response_content(     res: Any, *, by_alias: bool = True, exclude_unset: bool  ) -> Any:      if isinstance(res, BaseModel):          if PYDANTIC_1:              return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)          else:               return res.dict(                  by_alias=by_alias, skip_defaults=exclude_unset )      elif isinstance(res, list):          return res._prepare_response_content(item, exclude_unset=exclude_unset)      elif isinstance(res, dict):          return {              k: res._prepare_response_content(v, exclude_unset=exclude_unset)              for k, v in res.items()          }      return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)  def _prepare_response_content(     res: Any, *, by_alias: bool = True, exclude_unset: bool  ) -> Any:      if isinstance(res, BaseModel):          if PYDANTIC_1:              return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)          else:               return res.dict(                  by_alias=by_alias, skip_defaults=exclude_unset )      elif isinstance(res, list):          return res._prepare_response_content(item, exclude_unset=exclude_unset)      elif isinstance(res, dict):          return {              k: res._prepare_response_content(v, exclude_unset=exclude_unset)              for k, v in res.items()          }      return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)  def _prepare_response_content(     res: Any, *, by_alias: bool = True, exclude_unset: bool  ) -> Any:      if isinstance(res, BaseModel):          if PYDANTIC_1:              return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)          else:               return res.dict(                  by_alias=by_alias, skip_defaults=exclude_unset )      elif isinstance(res, list):          return res._prepare_response_content(item, exclude_unset=exclude_unset)      elif isinstance(res, dict):          return {              k: res._prepare_response_content(v, exclude_unset=exclude_unset)              for k, v in res.items()          }
def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiInde          for hlevel, level in zip(zipped, levels):               to_concat = []               for key, index in zip(hlevel, indexes):                     try:                           i = level.get_loc(key)                    except KeyError as err:                         raise ValueError(f"Key {key} not in level {level}") from err                    to_concat.append(np.repeat(i, len(index)))          codes_list.append(np.concatenate(to_concat))
class FastAPI(Starlette):          response_model_by_alias: bool = True,          response_model_skip_defaults: bool = None,          response_model_exclude_unset: bool = False,          response_model_exclude_defaults: bool = False,          response_model_exclude_none: bool = False,          include_in_schema: bool = True,          response_class: Type[Response] = None,          name: str = None,          response_model_exclude_none: bool = False,          response_model_exclude_defaults: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,
class tqdm(Comparable):          if disable is None and hasattr(file, "isatty") and not file._isatty(file):              disable = True          if disable:               self.iterable = iterable               self.disable = disable               self.pos = self._get_free_pos(self)               self._instances.remove(self)               self.n = initial               return          if kwargs:               self._set_free_pos(self, self._get_free_pos(self))               self._instances.remove(self)               self.n = initial               return
import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath_attr,     fix_xml_ampersands,  )  import re  from.common import InfoExtractor  from..utils import (      find_xpath
class Index(IndexOpsMixin, PandasObject):              multi_join_idx = multi_join_idx.remove_unused_levels()              return multi_join_idx, lidx, ridx           jl = list(overlap)[0]
else:  from twisted.internet import defer, reactor, ssl  logger = logging.getLogger(__name__)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(handler)  logger.setLevel(logging.INFO)  logger.addHandler(handler)  logger.setLevel(logging.DEBUG)  logger.addHandler(
class CategoricalBlock(ExtensionBlock):      def _holder(self):          return Categorical      def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values          if not isinstance(values, Categorical):              raise TypeError(                 "CategoricalBlock.to_native_types() requires "
class Model(Container):                  val_data += [0.]              for cbk in callbacks:                   cbk.validation_data = val_data         use_sequence_api = isinstance(generator, Sequence)         if use_sequence_api and use_multiprocessing and workers > 1:              warnings.warn(                  UserWarning('Using a generator with `use_multiprocessing=True`'                              'and multiple workers may duplicate your data.'                              'Please consider using the`keras.utils.Sequence'                             'class.'))         if use_sequence_api and use_multiprocessing and workers > 1:              warnings.warn(                  UserWarning('Using a generator with `use_multiprocessing=True`'                             'and multiple workers may duplicate your data.'                             'Please consider using the`keras.utils.Sequence'                             'class.'))         if use_sequence_api and use_multiprocessing and workers > 1:              warnings.warn(                  UserWarning('Using a generator with `use_multiprocessing=True`'                             'and multiple workers may duplicate your data.'                             'Please consider using the`keras.utils.Sequence'                             'class.'))         if use_sequence_api and use_multiprocessing and workers > 1:              warnings.warn(                  UserWarning('Using a generator with `use_multiprocessing=True`'                            'and multiple workers may duplicate your data.'                            'Please consider using the`keras.utils.Sequence'                             'class.'))         if use_sequence_api and use_multiprocessing and workers > 1:              warnings.warn(                  UserWarning('Using a generator with `use_multiprocessing=True`'                            'and multiple workers may duplicate your data.'                            'Please consider using the`keras.utils.Sequence'                            'class.'))         if use_sequence_api and use_multiprocessing and workers > 1:              warnings.warn(                  UserWarning('Using a generator with `use_multiprocessing=True`'                           'and multiple workers may duplicate your data.'                           'Please consider using the`keras.utils.Sequence'                            'class.'))         if use_sequence_api and use_multiprocessing and workers > 1:              warnings.warn(                  UserWarning('Using a generator with `use_multiprocessing=True`'                           'and multiple workers may duplicate your data.'                           'Please consider using the`keras.utils.Sequence'                           'class.'))         if use_sequence_api and use_multiprocessing and workers > 1:              warnings.warn(                 UserWarning('Using a generator with `use_multiprocessing=True`'                           'and multiple workers may duplicate your data.'                          'Please consider using the`keras.utils.Sequence'                           'class.'))         if use_sequence_api and use_multiprocessing and workers > 1:              warnings.warn(                  UserWarning('Using a
def melt(          else:              value_vars = list(value_vars)              missing = Index(np.ravel(value_vars)).difference(cols)               if not missing.empty:                   raise KeyError(                       "The following 'value_vars' are not present in"
class TFOptimizer(Optimizer):      @interfaces.legacy_get_updates_support      def get_updates(self, loss, params):         grads = self.optimizer.compute_gradients(loss, params)          self.updates = [K.update_add(self.iterations, 1)]          opt_update = self.optimizer.apply_gradients(              grads, global_step=self.iterations)          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [
class YoutubeIE(YoutubeBaseInfoExtractor):          video_id = mobj.group(2)          return video_id      @staticmethod     def _extract_chapters(description, duration):          if not description:              return None          chapters = re.findall(
return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)          return super(ItemMeta, mcs).__new__(
class ListParameter(Parameter):          Ensure that list parameter is converted to a tuple so it can be hashed.          :param str x: the value to parse.          :return: the normalized (hashable/immutable) value.
class _MergeOperation:                     )                  ]              else:                 left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)
class NumericIndex(Index):              name = data.name          return cls._simple_new(subarr, name=name)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]          if not isinstance(label, slice):              raise TypeError(                 "Cannot cast slice to "                  f"{type(label).__name__}"              )          if not isinstance(side, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(side).__name__}"              )          if not isinstance(kind, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(kind).__name__}"              )          if not isinstance(label, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(label).__name__}"              )          if not isinstance(side, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(side).__name__}"              )          if not isinstance(kind, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(kind).__name__}"              )          if not isinstance(label, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(label).__name__}"              )          if not isinstance(side, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(side).__name__}"              )          if not isinstance(kind, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(kind).__name__}"              )          if not isinstance(label, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(label).__name__}"              )          if not isinstance(side, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(side).__name__}"              )          if not isinstance(kind, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(kind).__name__}"              )          if not isinstance(label, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(label).__name__}"              )          if not isinstance(side, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(side).__name__}"              )          if not isinstance(kind, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(kind).__name__}"              )          if not isinstance(label, slice):               raise TypeError(                  "Cannot cast slice to "                 f"{type(label).__name__}"              )          if not isinstance(side, slice):               raise TypeError(                  "Cannot cast slice to "                  f"{type(side).__name__}"              )          if not isinstance(kind, slice):               raise TypeError(                  "Cannot cast slice to "
def _urlencode(seq, enc):  def _get_form(response, formname, formid, formnumber, formxpath):      text = response.body_as_unicode()     root = create_root_node(text, lxml.html.HTMLParser, base_url=response.url)     forms = root.xpath('      if not forms:          raise ValueError("No <form> element found in %s" % response)
class Request(object_ref):          s = safe_url_string(url, self.encoding)          self._url = escape_ajax(s)         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))
class EmptyLineTracker:
class DataFrame(NDFrame):          return new_data     def _combine_match_index(self, other, func):          if ops.should_series_dispatch(self, other, func):             return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)          return self._combine_match_index(other, func)
def disp_trim(data, length):      if len(data) == disp_len(data):          return data[:length] while disp_len(data) > length:          data = data[:-1]     if not RE_ANSI.search(data):          return data + "\033[0m"      return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data
, except ImportError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six, except TypeError:  from gzip import GzipFile  import six
def _unstack_multiple(data, clocs, fill_value=None):              for i in range(len(clocs)):                   val = clocs[i]                   result = result.unstack(val, fill_value=fill_value)                  clocs = [v if i > v else v - 1 for v in clocs]                   return result              return result
def jsonable_encoder(                     value,                      by_alias=by_alias,                      exclude_unset=exclude_unset,                      exclude_defaults=exclude_defaults,                      include_none=include_none,                       custom_encoder=custom_encoder,                       sqlalchemy_safe=sqlalchemy_safe,                   )
class CollectionRequirement:
from tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensorflow.python.ops.control_flow_api as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  from tensorflow.python.ops import tensor
class LinuxHardware(Hardware):              mtab_entries.append(fields)          return mtab_entries      def get_mount_info(self, mount, device, uuids):
class Categorical(ExtensionArray, PandasObject):          min : the minimum of this `Categorical`          self.check_for_ordered("min")          good = self._codes == -1          if not good.all():              if skipna:                  good = self._codes!= -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                   good = self._codes == -1                   self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1                    good = self._codes == -1                    self._codes = -1
def _get_spider_loader(settings):              'Please use SPIDER_LOADER_CLASS.',              category=ScrapyDeprecationWarning, stacklevel=2          )     cls_path = settings.get('SPIDER_LOADER_CLASS',
logger = logging.getLogger(__name__)  title_regex = re.compile(r"(?<=<title>).*(?=</title>)")  id_regex = re.compile(r"(?<=<id>)\d+(?=</id>)")  text_regex = re.compile(r"(?<=<text xml:space=\"preserve\">).*(?=</text)")  info_regex = re.compile(r"{[^{]*?}")  html_regex = re.compile(r"&lt;!--[^-]*--&gt;")
async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,             exclude_defaults=exclude_defaults,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:          return jsonable_encoder(response_content) async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,              exclude_defaults=exclude_defaults,             exclude_none=exclude_none,          )      else:
class WebSocketHandler(tornado.web.RequestHandler):         .. versionadded:: 3.1         assert self.stream is not None         self.stream.set_nodelay(value)      def on_connection_close(self) -> None:          if self.ws_connection:             self.ws_connection.shutdown()         else:             self.stream.set_nodelay(value)             self.stream.shutdown()             self.ws_connection = None             self.stream.shutdown()             self.ws_connection = None             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()             self.stream.shutdown()
_dtype from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is_extension_array_dtype,      is_float_dtype,      is_integer_dtype,      is_object_dtype,      is_period_dtype,      is_scalar,      is_string_dtype,      is_string_like_dtype,      is_timedelta64_dtype,      needs_i8_conversion,      pandas_dtype,  )  from pandas.core.dtypes.inference import is_list_like_dtype from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is_extension_array_dtype,      is_float_dtype,      is_integer_dtype,      is_object_dtype,      is_period_dtype,      is_scalar,      is_string_dtype,      is_string_like_dtype,      is_timedelta64_dtype,      needs_i8_conversion,      pandas_dtype,  )  from pandas.core.dtypes.inference import is_list_like_dtype from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is_extension_array_dtype,      is_float_dtype,      is_integer_dtype,      is_object_dtype,      is_period_dtype,      is_scalar,      is_string_dtype,      is_string_like_dtype,      is_timedelta64_dtype,      needs_i8_conversion,      pandas_dtype,  )  from pandas.core.dtypes.inference import is_list_like_dtype from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is_extension_array_dtype,      is_float_dtype,      is_integer_dtype,      is_object_dtype,      is_period_dtype,      is_scalar,      is_string_dtype,      is_string_like_dtype,      is_timedelta64_dtype,      needs_i8_conversion,      pandas_dtype,  )  from pandas.core.dtypes.inference import is_list_like_dtype from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is_extension_array_dtype,      is_float_dtype,      is_integer_dtype,      is_object_dtype,      is_period_dtype,      is_scalar,      is_string_dtype,      is_string_like_dtype,      is_timedelta64_dtype,      needs_i8_conversion,      pandas_dtype,  )  from pandas.core.dtypes.inference import is_list_like_dtype from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is_extension_array_dtype,      is_float_dtype,      is_integer_dtype,      is_object_dtype,      is_period_dtype,      is_scalar,      is_string_dtype,      is_string_like_dtype,      is_timedelta64_dtype,      needs_i8_conversion,      pandas_dtype,  )  from pandas.core.dtypes.inference import is_list_like_dtype from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is
def get_file(fname,
return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, Sequence)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )
def _partition_tasks(worker):      set_tasks["completed"] = {task for (task, status, ext) in task_history if status == 'DONE' and task in pending_tasks}      set_tasks["already_done"] = {task for (task, status, ext) in task_history                                        if status == 'DONE' and task not in set_tasks["completed"] and task not in set_tasks["failed"]}     set_tasks["failed"] = {task for (task, status, ext) in task_history                                        if status == 'FAILED'}      set_tasks["scheduling_error"] = {task for(task, status, ext) in task_history if status == 'UNKNOWN'}      set_tasks["still_pending_ext"] = {task for (task, status, ext) in task_history                                             if status == 'PENDING' and task not in set_tasks["failed"] and task not in set_tasks["completed"] and not ext}      set_tasks["still_pending_not_ext"] = {task for (task, status, ext) in task_history                                               if status == 'PENDING' and task not in set_tasks["failed"] and task not in set_tasks["completed"] and not ext}      set_tasks["run_by_other_worker"] = set()      set_tasks["upstream_failure"] = set()      set_tasks["upstream_missing_dependency"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks["worker"] = set()      set_tasks
from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np from typing import Any, Index.__new__.  These should not depend on core.internals.  from typing import TYPE
class Parameter(object):          :raises MissingParameterException: if x is false-y and no default is specified.          if not x:             if self.has_value:                  return self.value              elif self.is_bool:                   return False              elif self.is_list:                   return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False               return False
class FloatBlock(FloatOrComplexBlock):          )          return formatter.get_result_as_array()     def get_result(self, value):          return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype
class Categorical(ExtensionArray, PandasObject):          good = self._codes!= -1          if not good.all():             if skipna:                  pointer = self._codes[good].min()               else:                   return np.nan
class RedirectMiddleware(BaseRedirectMiddleware):      def process_response(self, request, response, spider):          if (request.meta.get('dont_redirect', False) or                 response.status in getattr(spider, 'handle_httpstatus_list', [])):               return response          if request.method in ['GET', 'POST']:               return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response
def get_new_command(command):          pass      if upstream_option_index is not -1:          command.script_parts.pop(upstream_option_index)         command.script_parts.pop(upstream_option_index)      push_upstream = command.stderr.split('\n')[-3].strip().partition('git ')[2]      return replace_argument(" ".join(command.script_parts), 'push', push_upstream)
from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal, from pandas.core.dtypes.common import
class TestPeriodIndex(DatetimeLike):          idx = PeriodIndex([2000, 2007, 2007, 2009, 2007], freq="A-JUN")          ts = Series(np.random.random(len(idx)), index=idx)         result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)
from pandas.core.dtypes.generic import (  )  from pandas.core.dtypes.missing import notna  from pandas.core import algorithms  from pandas.core.algorithms import unique  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas.core.algorithms import unique  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from pandas.core import algorithms  from pandas._typing import ArrayLike  from
def evaluate_generator(model, generator,      steps_done = 0      outs_per_batch = []      batch_sizes = []     use_sequence_api = isinstance(generator, Sequence)     if not use_sequence_api and use_multiprocessing and workers > 1:           warnings.warn(               UserWarning('Using a generator with `use_multiprocessing=True`'                           'and multiple workers may duplicate your data.'                           'Please consider using the`keras.utils.Sequence'                           'class.'))      if steps is None:         if use_sequence_api:              steps = len(generator)          else:               raise ValueError('`steps=None` is only valid for a generator'
class Series(base.IndexOpsMixin, generic.NDFrame):
class BaseAsyncIOLoop(IOLoop):              if all_fds:                  self.close_fd(fileobj)          self.asyncio_loop.close()          self._shutdown()      def _shutdown(self):          fd, fileobj = self.split_fd(fileobj)          fd.shutdown()          fileobj.shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._shutdown()          self._
._class class ObjectBlock(Block):             if convert:                 block = [b.convert(numeric=False, copy=True) for b in block]               return block          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self._class(block)          return self
class Categorical(ExtensionArray, PandasObject):          Only ordered `Categoricals` have a maximum!          Raises          ------          TypeError
def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, L
def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),      if isinstance(output_shape, (tuple, list)):
