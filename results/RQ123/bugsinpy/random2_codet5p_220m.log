Namespace(log_name='./result/bugsinpy/random2_codet5p_220m.log', model_name='Salesforce/codet5p-220m', lang='python', output_dir='result/bugsinpy/random2_codet5p_220m', data_dir='./data/bugsinpy', no_cuda=False, visible_gpu='0', choice=2, num_train_epochs=10, num_test_epochs=1, train_batch_size=4, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=3)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'Fix the bug in', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': ' class Register(abc.ABCMeta):          reg = OrderedDict()          for cls in cls._reg:             if cls.run == NotImplemented:                 continue              name = cls.task_family              if name in reg and reg[name] != cls and \\', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': 'class Register(abc.ABCMeta):          reg = OrderedDict()          for cls in cls._reg:              name = cls.task_family              if name in reg and reg[name] != cls and \\'}]
***** Running training *****
  Num examples = 932
  Batch size = 4
  Num epoch = 10

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 0
  eval_ppl = inf
  global_step = 234
  train_loss = 63.6303
  ********************
Previous best ppl:inf
Achieve Best ppl:inf
  ********************
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 75.38 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:75.38
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 1
  eval_ppl = inf
  global_step = 467
  train_loss = 43.4063
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 77.3 	 Previous best codebleu 75.38
  ********************
 Achieve Best bleu:77.3
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 2
  eval_ppl = inf
  global_step = 700
  train_loss = 29.9685
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.02 	 Previous best codebleu 77.3
  ********************
 Achieve Best bleu:78.02
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 3
  eval_ppl = inf
  global_step = 933
  train_loss = 20.5732
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.53 	 Previous best codebleu 78.02
  ********************
 Achieve Best bleu:78.53
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 4
  eval_ppl = inf
  global_step = 1166
  train_loss = 14.2351
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.87 	 Previous best codebleu 78.53
  ********************
 Achieve Best bleu:78.87
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 5
  eval_ppl = inf
  global_step = 1399
  train_loss = 10.4397
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.89 	 Previous best codebleu 78.87
  ********************
 Achieve Best bleu:78.89
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 6
  eval_ppl = inf
  global_step = 1632
  train_loss = 7.854
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 79.11 	 Previous best codebleu 78.89
  ********************
 Achieve Best bleu:79.11
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 7
  eval_ppl = inf
  global_step = 1865
  train_loss = 5.6999
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.95 	 Previous best codebleu 79.11
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 8
  eval_ppl = inf
  global_step = 2098
  train_loss = 4.4724
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 79.16 	 Previous best codebleu 79.11
  ********************
 Achieve Best bleu:79.16
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 9
  eval_ppl = inf
  global_step = 2331
  train_loss = 3.7077
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.75 	 Previous best codebleu 79.16
  ********************
reload model from result/bugsinpy/random2_codet5p_220m/checkpoint-best-bleu
BLEU file: ./data/bugsinpy/test.jsonl
  codebleu = 77.43 
  Total = 122 
  Exact Fixed = 14 
[8, 27, 31, 34, 58, 65, 73, 76, 101, 109, 110, 114, 116, 120]
  Syntax Fixed = 2 
[62, 115]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 122 
  Exact Fixed = 14 
[8, 27, 31, 34, 58, 65, 73, 76, 101, 109, 110, 114, 116, 120]
  Syntax Fixed = 2 
[62, 115]
  Cleaned Fixed = 0 
[]
  codebleu = 77.43 
[0.6728230800934798, 0.8834124216164225, 0.5703813431836282, 0.47166395418323315, 0.9063467386633746, 0.6831708548501114, 0.9411542454583528, 1.0, 0.8300638244826566, 0.5571314709024371, 0.68965030200429, 0.9666856331752072, 0.7714650156104186, 0.7398658182365634, 0.5579919444499759, 0.7768711691119308, 0.6677739451552139, 0.6994074932894399, 0.8971695160234401, 0.8856389378075658, 0.8642706682188466, 0.7443181170763433, 0.8884573785188872, 0.7641191348014111, 0.583933634540305, 0.9204219587780458, 1.0, 0.8672809056911601, 0.6508693332230462, 0.4545507520171642, 1.0, 0.9474759345795825, 0.6853803599169206, 1.0, 0.7896354401872717, 0.8808919461147899, 0.6623090658678863, 0.7420541780659815, 0.8231560738418289, 0.865014526625105, 0.8773104352365284, 0.8703246706459902, 0.7507982187182929, 0.9142445273649933, 0.7093853536262804, 0.7313821813372119, 0.5765025118751654, 0.8548397899287874, 0.5192587731305535, 0.5921911079082992, 0.7715012035371895, 0.8077895563342797, 0.8782734899756608, 0.549916846856608, 0.7205089220380079, 0.9309470682699423, 0.7477059030246576, 1.0, 0.5911195501972704, 0.8022604263379136, 0.5117566728908322, 0.9583492948000167, 0.6939112308588368, 0.7042953619649426, 1.0, 0.8352894783834772, 0.20867343826082332, 0.7652740132249347, 0.5037077119806818, 0.6533460463702374, 0.7429179725205323, 0.7531797171538064, 1.0, 0.5970512002964294, 0.6530224530296921, 1.0, 0.8434652034268404, 0.6439391185600173, 0.3031200238102166, 0.9472873156881443, 0.676525822803221, 0.725908704442251, 0.5002377244306854, 0.8096114788906146, 0.7004008447526069, 0.7449734989717058, 0.8871978499693505, 0.6374410208386678, 0.7318286091585733, 0.6681572515382748, 0.8358395384567638, 0.8853004704636518, 0.884250182279102, 0.7164493834577911, 0.8573638305228279, 0.8807926879441415, 0.7332519354895861, 0.8336108571661149, 0.9178662308912058, 0.8814955038434287, 1.0, 0.5877493029445046, 0.7709915129433033, 0.8736270526063763, 0.782053171927164, 0.6529137786479091, 0.8754861943073293, 0.8789801838086921, 1.0, 0.9355467351067721, 0.7494942839876111, 0.7225931341121177, 0.7639654153934541, 1.0, 0.9114766235414771, 0.9399649879642329, 0.610067068626702, 0.631282340524122, 0.8631855387221548, 1.0, 0.8840742273066922, 0.7032270811112566]
Finish training and take 21m
