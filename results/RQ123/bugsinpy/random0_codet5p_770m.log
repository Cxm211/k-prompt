Namespace(log_name='./result/bugsinpy/random0_codet5p_770m.log', model_name='Salesforce/codet5p-770m', lang='python', output_dir='result/bugsinpy/random0_codet5p_770m', data_dir='./data/bugsinpy', no_cuda=False, visible_gpu='0', choice=0, num_train_epochs=10, num_test_epochs=1, train_batch_size=4, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=3)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'class Register(abc.ABCMeta):          reg = OrderedDict()          for cls in cls._reg:             if cls.run == NotImplemented:                 continue              name = cls.task_family              if name in reg and reg[name] != cls and \\', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': 'is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': 'class Register(abc.ABCMeta):          reg = OrderedDict()          for cls in cls._reg:              name = cls.task_family              if name in reg and reg[name] != cls and \\'}]
***** Running training *****
  Num examples = 932
  Batch size = 4
  Num epoch = 10

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 0
  eval_ppl = inf
  global_step = 234
  train_loss = 54.0562
  ********************
Previous best ppl:inf
Achieve Best ppl:inf
  ********************
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 71.41 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:71.41
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 1
  eval_ppl = inf
  global_step = 467
  train_loss = 32.2478
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.99 	 Previous best codebleu 71.41
  ********************
 Achieve Best bleu:78.99
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 2
  eval_ppl = inf
  global_step = 700
  train_loss = 19.9933
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.64 	 Previous best codebleu 78.99
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 3
  eval_ppl = inf
  global_step = 933
  train_loss = 11.4685
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 77.58 	 Previous best codebleu 78.99
  ********************

***** Running evaluation *****
  Num examples = 112
  Batch size = 4
  epoch = 4
  eval_ppl = inf
  global_step = 1166
  train_loss = 6.1655
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.84 	 Previous best codebleu 78.99
  ********************
early stopping!!!
reload model from result/bugsinpy/random0_codet5p_770m/checkpoint-best-bleu
BLEU file: ./data/bugsinpy/test.jsonl
  codebleu = 77.46 
  Total = 122 
  Exact Fixed = 9 
[6, 24, 27, 31, 34, 73, 109, 116, 121]
  Syntax Fixed = 1 
[70]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 122 
  Exact Fixed = 9 
[6, 24, 27, 31, 34, 73, 109, 116, 121]
  Syntax Fixed = 1 
[70]
  Cleaned Fixed = 0 
[]
  codebleu = 77.46 
[0.6619726333366234, 0.8834124216164225, 0.6601281703247908, 0.47166395418323315, 0.9063467386633746, 1.0, 0.9411542454583528, 0.8674433454759134, 0.8300638244826566, 0.5571314709024371, 0.68965030200429, 0.9666856331752072, 0.7714650156104186, 0.8068413656728535, 0.8475864225311183, 0.7768711691119308, 0.6883720951974961, 0.6936199831009335, 0.8971695160234401, 0.8856389378075658, 0.8642706682188466, 0.7443181170763433, 0.7132642165763982, 1.0, 0.583933634540305, 0.9204219587780458, 1.0, 0.8061434593731014, 0.6508693332230462, 0.4545507520171642, 1.0, 0.9474759345795825, 0.6853803599169206, 1.0, 0.7896354401872717, 0.8808919461147899, 0.6493367645086796, 0.702221016202038, 0.8231560738418289, 0.8962096929024133, 0.8773104352365284, 0.8703246706459902, 0.7507982187182929, 0.8751140925823846, 0.7093853536262804, 0.788050295413492, 0.7572098935987482, 0.8548397899287874, 0.5395994803490237, 0.6242275051672941, 0.7715012035371895, 0.8077895563342797, 0.8782734899756608, 0.549916846856608, 0.7205089220380079, 0.9309470682699423, 0.7419234892127716, 0.8701297911758226, 0.5911195501972704, 0.8362747318435784, 0.5117566728908322, 0.8923125000332248, 0.6939112308588368, 0.7042953619649426, 0.860117164263619, 0.8352894783834772, 0.21327451863865435, 0.6026966865919932, 0.5037077119806818, 0.947533256575573, 0.7470126207686696, 0.7531797171538064, 1.0, 0.6441425627537012, 0.6530224530296921, 0.5750974938187585, 0.8434652034268404, 0.6439391185600173, 0.3260936895813032, 0.9472873156881443, 0.6783191189520601, 0.6675881054170294, 0.49150427670545643, 0.8096114788906146, 0.7889213653390947, 0.7449734989717058, 0.8871978499693505, 0.5218510181581382, 0.7318286091585733, 0.7738279988463377, 0.8358395384567638, 0.6964483418907239, 0.884250182279102, 0.7164493834577911, 0.8573638305228279, 0.8807926879441415, 0.7332519354895861, 0.8086254987195756, 0.9178662308912058, 0.8814955038434287, 0.8021170040829606, 0.8594942629236695, 0.8195330229945343, 0.8425294534508236, 0.782053171927164, 0.8934863054803268, 0.8754861943073293, 0.8789801838086921, 1.0, 0.7884485258508804, 0.8385834949297515, 0.7225931341121177, 0.7521070400262398, 0.7786270181434833, 0.8107806147142924, 0.9399649879642329, 0.610067068626702, 0.8300101016746005, 0.8631855387221548, 0.621240758456996, 1.0, 0.7243849758480987]
Finish training and take 31m
