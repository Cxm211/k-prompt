Namespace(log_name='./bugsinpy/hard5_codet5p_220m.log', model_name='Salesforce/codet5p-220m', lang='python', output_dir='bugsinpy/hard5_codet5p_220m', data_dir='./data/bugsinpy', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=4, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=3)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'class Register(abc.ABCMeta):          reg = OrderedDict()          for cls in cls._reg:             if cls.run == NotImplemented:                 continue              name = cls.task_family              if name in reg and reg[name] != cls and \\', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': ' is buggy program', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is fixed program', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': 'class Register(abc.ABCMeta):          reg = OrderedDict()          for cls in cls._reg:              name = cls.task_family              if name in reg and reg[name] != cls and \\'}]
***** Running training *****
  Num examples = 937
  Batch size = 4
  Num epoch = 10

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 0
  eval_ppl = inf
  global_step = 236
  train_loss = 70.1832
  ********************
Previous best ppl:inf
Achieve Best ppl:inf
  ********************
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 72.78 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:72.78
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 1
  eval_ppl = inf
  global_step = 471
  train_loss = 47.1269
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 75.36 	 Previous best codebleu 72.78
  ********************
 Achieve Best bleu:75.36
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 2
  eval_ppl = inf
  global_step = 706
  train_loss = 31.5179
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 76.15 	 Previous best codebleu 75.36
  ********************
 Achieve Best bleu:76.15
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 3
  eval_ppl = inf
  global_step = 941
  train_loss = 21.9969
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 77.43 	 Previous best codebleu 76.15
  ********************
 Achieve Best bleu:77.43
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 4
  eval_ppl = inf
  global_step = 1176
  train_loss = 15.9173
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 77.57 	 Previous best codebleu 77.43
  ********************
 Achieve Best bleu:77.57
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 5
  eval_ppl = inf
  global_step = 1411
  train_loss = 11.3016
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.44 	 Previous best codebleu 77.57
  ********************
 Achieve Best bleu:78.44
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 6
  eval_ppl = inf
  global_step = 1646
  train_loss = 8.1564
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.9 	 Previous best codebleu 78.44
  ********************
 Achieve Best bleu:78.9
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 7
  eval_ppl = inf
  global_step = 1881
  train_loss = 6.2596
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 79.27 	 Previous best codebleu 78.9
  ********************
 Achieve Best bleu:79.27
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 8
  eval_ppl = inf
  global_step = 2116
  train_loss = 4.9464
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.3 	 Previous best codebleu 79.27
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 9
  eval_ppl = inf
  global_step = 2351
  train_loss = 4.064
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.15 	 Previous best codebleu 79.27
  ********************
reload model from bugsinpy/hard5_codet5p_220m/checkpoint-best-bleu
BLEU file: ./data/bugsinpy/test.jsonl
  codebleu = 76.7 
  Total = 122 
  Exact Fixed = 18 
[8, 24, 27, 31, 34, 58, 62, 65, 73, 76, 98, 101, 109, 110, 114, 116, 120, 121]
  Syntax Fixed = 1 
[115]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 122 
  Exact Fixed = 18 
[8, 24, 27, 31, 34, 58, 62, 65, 73, 76, 98, 101, 109, 110, 114, 116, 120, 121]
  Syntax Fixed = 1 
[115]
  Cleaned Fixed = 0 
[]
  codebleu = 76.7 
[0.6619726333366234, 0.8505702153233261, 0.5381659247078733, 0.4500690462517839, 0.9063467386633746, 0.6913513004703498, 0.9411542454583528, 1.0, 0.8300638244826566, 0.5233952071661734, 0.68965030200429, 0.9666856331752072, 0.6553792907046729, 0.6970086753794206, 0.6572726626071705, 0.7768711691119308, 0.6883720951974961, 0.6273809586769852, 0.8144197420028481, 0.8856389378075658, 0.6902260446833343, 0.7443181170763433, 0.8884573785188872, 1.0, 0.583933634540305, 0.9204219587780458, 1.0, 0.8118533044411296, 0.6508693332230462, 0.5156924429525565, 1.0, 0.9474759345795825, 0.693519452440588, 1.0, 0.7896354401872717, 0.8808919461147899, 0.42330123225769173, 0.7420541780659815, 0.8231560738418289, 0.8962096929024133, 0.8773104352365284, 0.8703246706459902, 0.46125978072022955, 0.9142445273649933, 0.7093853536262804, 0.6991468984827918, 0.62327537336927, 0.8548397899287874, 0.31336404658978945, 0.5921911079082992, 0.7715012035371895, 0.8077895563342797, 0.8797024133033831, 0.549916846856608, 0.7205089220380079, 0.9309470682699423, 0.7336698663931078, 1.0, 0.5911195501972704, 0.8022604263379136, 0.5117566728908322, 0.9847962409659572, 0.5758059068891177, 0.7042953619649426, 1.0, 0.8352894783834772, 0.20826579230967396, 0.6503992098291642, 0.5037077119806818, 0.667268531627923, 0.7229136063420591, 0.7531797171538064, 1.0, 0.6069258714812742, 0.6530224530296921, 1.0, 0.8434652034268404, 0.6092992309704574, 0.3031200238102166, 0.755690677032682, 0.676525822803221, 0.6487795790095106, 0.49150427670545643, 0.7229580999755256, 0.9056583090096291, 0.7449734989717058, 0.8871978499693505, 0.5218510181581382, 0.6186663764939699, 0.767723111687518, 0.8358395384567638, 0.8853004704636518, 0.884250182279102, 0.7164493834577911, 0.8573638305228279, 0.8807926879441415, 0.5663835443942737, 0.949504537888815, 0.9178662308912058, 0.8814955038434287, 1.0, 0.6498709986023985, 0.8802533989863723, 0.8736270526063763, 0.782053171927164, 0.8934863054803268, 0.8754861943073293, 0.8681106185913008, 1.0, 0.9355467351067721, 0.8385834949297515, 0.7225931341121177, 0.7639654153934541, 1.0, 0.9114766235414771, 0.9399649879642329, 0.610067068626702, 0.6353889383009576, 0.8631855387221548, 1.0, 1.0, 0.7243849758480987]
Finish training and take 24m
