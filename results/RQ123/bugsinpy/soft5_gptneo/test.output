class GroupBy(_GroupBy):          ).sortlevel()          if self.as_index:             d = {self.obj._get_axis_name(self.axis): index, "copy": False}              return output.reindex(**d)         else:            d = {self._get_axis_name(self.axis): index, "copy": False}              return output.reindex(**d)
class HiveCommandClient(HiveClient):          if partition is None:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:              stdout = run_hive_cmd('use {0}; show tables like "{1}";'.format(database, table, partition, partition))             return stdout and table in stdout          else:
class BinGrouper(BaseGrouper):              ngroups,          )      @cache_readonly      def result_index(self):          if len(self.binlabels)!= 0 and isna(self.binlabels[0]):             raise TypeError(                 "BinGrouper.result_index() requires at least one label"             )         else:             self.binlabels = self._get_binlabels()             self._set_binlabels(self.binlabels)             return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlabels()       return self._get_binlab
class DataFrame(NDFrame):          dtype: object          nv.validate_transpose(args, dict())         return super().transpose(1, 0, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose(1, T, **kwargs)      T = property(transpose)         return super().transpose
from difflib import get_close_matches  from functools import wraps  import shelve  from decorator import decorator  import tempfile  import os  import sys  import time  import sys  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import
def target_version_option_callback(  @click.option(      "--config",      type=click.Path(         exists=False, file_okay=True, dir_okay=False, readable=True, allow_dash=False      ),      is_eager=True,      callback=read_pyproject_toml,
class Sanic:                   if _rn not in self.named_response_middleware:                     self.named_response_middleware[_rn] = deque()                  if middleware not in self.named_response_middleware[_rn]:                      self.named_response_middleware[_rn].append(middleware)       def middleware(self, middleware_or_request):                  if middleware not in self.named_response_middleware:                      self.named_response_middleware[middleware] = deque()                  if middleware not in self.named_response_middleware[middleware]:                      self.named_response_middleware[middleware] = deque()                  if middleware not in self.named_response_middleware[middleware]:                      self.named_response_middleware[middleware] = deque()                  if middleware not in self.named_response_middleware[middleware]:                      self.named_response_middleware[middleware] = deque()                  if middleware not in self.named_response_middleware[middleware]:                      self.named_response_middleware[middleware] = deque()                  if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                    self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.named_response_middleware[middleware]:                     self.named_response_middleware[middleware] = deque()                 if middleware not in self.
class Model(Container):                   enqueuer.start(workers=workers, max_queue_size=max_queue_size)                  output_generator = enqueuer.get()              else:                 output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                  output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                  output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:                   output_generator = generator              if verbose == 1:                  progbar = Progbar(target=steps)              else:
def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),      else:          strides = (1, 1) + strides     x = tf.nn.conv2d_transpose(x, kernel, output_shape, strides,                                  padding=padding,                                  data_format=tf_data_format)      if data_format == 'channels_first' and tf_data_format == 'NHWC': x = tf.transpose(x, (0, 3, 1, 2))      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x      return x
class XportReader(abc.Iterator):          if isinstance(filepath_or_buffer, (str, bytes)):              self.filepath_or_buffer = open(filepath_or_buffer, "rb")          else:             contents = filepath_or_buffer.read()             try:                 contents = contents.encode(self._encoding)             except UnicodeEncodeError:                 pass             self.filepath_or_buffer = BytesIO(contents)          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()          self._read_header()
class LocalCache(collections.OrderedDict):          self.limit = limit      def __setitem__(self, key, value):         while len(self) >= self.limit:             self.popitem(last=False)          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()          super(LocalCache, self).__setitem__(key, value)          self.popitem()
dependency tree to find the noun phrase they are referring to – for example:  $9.4 million --> Net income.  Compatible with: spaCy v2.0.0+ Last tested with: v2.1.0  from __future__ import unicode_literals, print_function  from __future__ import absolute_import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__ import __future__
class AsyncioServer:              task = asyncio.ensure_future(coro, loop=self.loop)             return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):          task = asyncio.ensure_future(self.serve_coro)          return task      def __await__(self):
def deconv_length(dim_size, stride_size, kernel_size, padding, output_padding):      if dim_size is None:          return None      if output_padding is None:          if padding == 'valid':              raise TypeError(                   "`deconv_length` requires a "                   "`dim_size` argument"              )          return None      if stride_size is None:          return None      if padding == 'valid':          raise TypeError(              "`deconv_length` requires a "              "`dim_size` argument"         )      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None      return None
def fit_generator(model,              elif val_gen:                  val_data = validation_data                  if isinstance(val_data, Sequence):                     val_enqueuer_gen = iter_sequence_infinite(generator)                  else:                       val_enqueuer_gen = val_data             else:                   val_enqueuer_gen = val_data                  if isinstance(val_enqueuer_gen, Sequence):                      val_data = val_enqueuer_gen                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]                 elif isinstance(val_data, dict):                      val_data = val_data.copy()                 elif isinstance(val_data, list):                      val_data = val_data[0]
class FastParquetImpl(BaseImpl):          if partition_cols is not None:              kwargs["file_scheme"] = "hive"         if is_s3_url(path):              path, _, _, _ = get_filepath_or_buffer(path, mode="wb")              kwargs["open_with"] = lambda path, _: path          else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"              kwargs["open_with"] = lambda path, _: path         else:              path, _, _, _ = get_filepath_or_buffer(path)              kwargs["open_with"] = lambda path, _: path              kwargs["file_scheme"] = "hive"
class NumpyArrayIterator(Iterator):                               dtype=K.floatx())          for i, j in enumerate(index_array):              x = self.x[j]              x = self.image_data_generator.random_transform(x.astype(K.floatx()))              x = self.image_data_generator.standardize(x)              batch_x[i] = x              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()              self.image_data_generator.reset()
class Series(base.IndexOpsMixin, generic.NDFrame):          from pandas.core.reshape.concat import concat          if isinstance(to_append, (list, tuple)):             to_concat = [self] + to_append          else:              to_concat = [self, to_append]          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,         )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(              to_concat,          )          return concat(
class HTTPRequest(HTTPMessage):          )          headers = dict(self._orig.headers)         if 'Host' in headers:              headers['Host'] = url.netloc.split('@')[-1]          headers = ['%s: %s' % (name, value)
class TestProcessProtocol(protocol.ProcessProtocol):      def __init__(self):          self.deferred = defer.Deferred()         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(None)         self.out = ''         self.err = ''          self.exitcode = None      def outReceived(self, data):         self.deferred.callback(
class _Window(PandasObject, SelectionMixin):              except (ValueError, TypeError):                  raise TypeError("cannot handle this type -> {0}".format(values.dtype))         values[np.isinf(values)] = np.NaN          return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return values         return
class BaseComparisonOpsTests(BaseOpsUtil):              assert result is NotImplemented          else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __eq__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __lt__")         else:              raise pytest.skip(f"{type(data).__name__} does not implement __le__")         else:              raise pytest.skip(f"{type(data).__
class CentralPlannerScheduler(Scheduler):          tasks.sort(key=self._rank(), reverse=True)          for task in tasks:             in_workers = assistant or worker in task.workers              if task.status == 'RUNNING' and not in_workers:                 raise TypeError(
def jsonable_encoder(                       exclude=exclude,                      by_alias=by_alias,                      exclude_unset=exclude_unset,                      exclude_defaults=exclude_defaults,                      include_none=include_none,                       custom_encoder=custom_encoder,                       sqlalchemy_safe=sqlalchemy_safe,                    )
def unified_timestamp(date_str, day_first=True):      date_str = date_str.replace(',','')     pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)      timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str.replace(',','')         pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)         timezone, date_str = extract_timezone(date_str)      if timezone is None:          return date_str     else:         date_str = date_str
class ContractsManager(object):          def eb_wrapper(failure):              case = _create_testcase(method, 'errback')             exc_info = failure.value, failure.type, failure.getTracebackObject()              results.addError(case, exc_info)          request.callback = cb_wrapper          return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return
class APIRouter(routing.Router):              response_model_exclude_unset=bool(                 response_model_exclude_unset or response_model_skip_defaults              ),             response_model_exclude_defaults=response_model_exclude_defaults,             response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,              response_model_exclude_none=response_model_exclude_none,
def format_file_in_place(          return False      if write_back == write_back.YES:         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}  (original)"         with open(src, "w", encoding=src_buffer.encoding) as f:              f.write(dst_contents)      elif write_back == write_back.DIFF:          src_name = f"{src}
def should_series_dispatch(left, right, op):          return True     if isinstance(ldtype, (np.datetime64, np.timestamps)):          return True      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return False      return
def run_script(script_path, cwd='.'):          shell=run_thru_shell,          cwd=cwd      )     return proc.wait(context)     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.wait()     return proc.
class ExecutionEngine(object):          d = self.scraper.enqueue_scrape(response, request, spider)          d.addErrback(lambda f: logger.error('Error while enqueuing downloader output',
from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.series import Series  from pandas.io.formats.printing import pprint_thing  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.indexes.api import CategoricalIndex, Index, MultiIndex  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_groupby  from pandas.core.frame import DataFrame  from pandas.core.groupby import ops  from pandas.core.groupby.categorical import recode_for_groupby, recode_from_group
class InfoExtractor(object):                                          f['url'] = initialization_url                                    f['fragments'].append({location_key(initialization_url): initialization_url})                             f['fragments'].extend(representation_ms_info['fragments'])                        try:                            existing_format = next(                               fo for fo in formats                                if fo['format_id'] == representation_id)                       except StopIteration:                           full_info = formats_dict.get(representation_id, {}).copy()                           full_info.update(f)                           formats.append(full_info)                      else:                          existing_format.update(f)                     else:                         self.report_warning('Unknown MIME type %s in DASH manifest' % mime_type)         return formats
class APIRouter(routing.Router):                      response_model_exclude=route.response_model_exclude,                      response_model_by_alias=route.response_model_by_alias,                      response_model_exclude_unset=route.response_model_exclude_unset,                      response_model_exclude_defaults=route.response_model_exclude_defaults,                      response_model_exclude_none=route.response_model_exclude_none,                      include_in_schema=route.include_in_schema,                      response_class=route.response_class or default_response_class,                      name=route.name,
def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",          "var",          "kurt",          "quantile",      }    def validate_baseindexer_support(func_name: Optional[str]) -> None:          "median",          "std",
class BarPlot(MPLPlot):      def _decorate_ticks(self, ax, name, ticklabels, start_edge, end_edge):          ax.set_xlim((start_edge, end_edge))         ax.set_xticks(self.tick_pos)          ax.set_xticklabels(ticklabels)          if name is not None and self.use_index:              ax.set_xlabel(name)              ax.set_xlim((start_edge, end_edge))              ax.set_xticks(self.tick_pos)              ax.set_xticklabels(ticklabels)              if name is not None and self.use_index:                   ax.set_xlabel(name)                  ax.set_xlim((start_edge, end_edge))                  ax.set_xticks(self.tick_pos)                  ax.set_xticklabels(ticklabels)               if name is not None and self.use_index:                   ax.set_xlabel(name)                   ax.set_xlim((start_edge, end_edge))                   ax.set_xticks(self.tick_pos)                   ax.set_xticklabels(ticklabels)               if name is not None and self.use_index:                   ax.set_xlabel(name)                   ax.set_xlim((start_edge, end_edge))                   ax.set_xticks(self.tick_pos)                   ax.set_xticklabels(ticklabels)               if name is not None and self.use_index:                   ax.set_xlabel(name)                   ax.set_xlim((start_edge, end_edge))                   ax.set_xticks(self.tick_pos)                   ax.set_xticklabels(ticklabels)               if name is not None and self.use_index:                   ax.set_xlabel(name)                   ax.set_xlim((start_edge, end_edge))                   ax.set_xticks(self.tick_pos)                   ax.set_xticklabels(ticklabels)               if name is not None and self.use_index:                   ax.set_xlabel(name)                   ax.set_xlim((start_edge, end_edge))                   ax.set_xticks(self.tick_pos)                  ax.set_xticklabels(ticklabels)               if name is not None and self.use_index:                   ax.set_xlabel(name)                   ax.set_xlim((start_edge, end_edge))                   ax.set_xticks(self.tick_pos)                   ax.set_xticklabels(ticklabels)               if name is not None and self.use_index:                   ax.set_xlabel(name)                   ax.set_xlim((start_edge, end_edge))                   ax.set_xticks(self.tick_pos)                   ax.set_xticklabels(ticklabels)               if name is not None and self.use_index:                   ax.set_xlabel(name)                   ax.set_xlim((start_edge, end_edge))                   ax.set_xticks(self.tick_pos)                   ax.set_xticklabels(ticklabels)               if name is not None and self.use_index:                   ax.set_xlabel(name)                   ax.set_xlim((start_edge, end_edge))
from.common import InfoExtractor  from..utils import (      compat_urllib_parse,      ExtractorError,  )  def _media_xml_tag(tag):     try:         return compat_urllib_parse(tag)    except ExtractorError as err:         if isinstance(err, ExtractorError):             raise ExtractorError(
def match(command, settings):  def get_new_command(command, settings):      cmds = command.script.split(' ')     machine = ""      if len(cmds) >= 2:          machine = cmds[1]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 3:          machine = cmds[2]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 4:          machine = cmds[3]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 5:          machine = cmds[4]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 6:          machine = cmds[5]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 7:          machine = cmds[6]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 8:          machine = cmds[7]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 9:          machine = cmds[8]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 10:          machine = cmds[9]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 11:          machine = cmds[10]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 12:          machine = cmds[11]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 13:          machine = cmds[12]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 14:          machine = cmds[13]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 15:          machine = cmds[14]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 16:          machine = cmds[15]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 17:          machine = cmds[16]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 18:          machine = cmds[17]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 19:          machine = cmds[18]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 20:          machine = cmds[19]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 21:          machine = cmds[20]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 22:          machine = cmds[21]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 23:          machine = cmds[22]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 24:          machine = cmds[23]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 25:          machine = cmds[24]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 26:          machine = cmds[25]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 27:          machine = cmds[26]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 28:          machine = cmds[27]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 29:          machine = cmds[28]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 30:          machine = cmds[29]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 31:          machine = cmds[30]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 32:          machine = cmds[31]     return shells.and_("vagrant up " +  machine, command.script)      if len(cmds) >= 33:          machine = cmds[32]     return shells.and_("vagrant up " +  machine, command
class Worker(object):               return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],                                      self.tasks)          else:             return state.get_pending_tasks()      def is_trivial_worker(self, state):          return state.get_pending_tasks()
def pivot_table(                   agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)      table = agged     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "                 "pivot table"         )     if table.index.nlevels > 1:         raise TypeError(                 "pivot_table requires at least one level of "
def create_cloned_field(field: ModelField) -> ModelField:             original_type.__name__, __config__=original_type.__config__          )          for f in original_type.__fields__.values():             use_type.__fields__[f.name] = f          use_type.__validators__ = original_type.__validators__      if PYDANTIC_1:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_2:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_3:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_4:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_5:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_6:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_7:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_8:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_9:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_10:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_11:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_12:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_13:          new_field = ModelField(             use_type.__fields__[f.name]          )          use_type.__fields__[f.name] = new_field          use_type.__validators__ = original_type.__validators__      if PYDANTIC_14:
def read_conllx(input_data, use_morphology=False, n=0):                       continue                  try:                      id_ = int(id_) - 1                      head = (int(head) - 1) if head!= "0" else id_                       dep = "ROOT" if dep == "root" else dep                       tag = pos if tag == "_" else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                       tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag                      tag = tag + "__" + morph if use_morphology else tag
class BaseReshapingTests(BaseExtensionTests):          result[0] = result[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]          assert data[0] == data[1]
class CorrectedCommand(object):              compatibility_call(self.side_effect, old_cmd, self.script)          logs.debug(u'PYTHONIOENCODING: {}'.format(             os.environ.get('PYTHONIOENCODING', '>-not-set-<')))          print(self.script)          try:              os.environ.get('PYTHONIOENCODING', '>-not-set-<')          except KeyError as err:              logs.debug(                  u'PYTHONIOENCODING: {}'.format(                      os.environ.get('PYTHONIOENCODING', '>-not-set-<'))             )          try:              os.environ.get('PYTHONIOENCODING', '>-not-set-<')          except KeyError as err:              logs.debug(                  u'PYTHONIOENCODING: {}'.format(                      os.environ.get('PYTHONIOENCODING', '>-not-set-<'))             )          try:              os.environ.get('PYTHONIOENCODING', '>-not-set-<')          except KeyError as err:              logs.debug(                  u'PYTHONIOENCODING: {}'.format(                     os.environ.get('PYTHONIOENCODING', '>-not-set-<'))          )         try:              os.environ.get('PYTHONIOENCODING', '>-not-set-<')          except KeyError as err:              logs.debug(                  u'PYTHONIOENCODING: {}'.format(                      os.environ.get('PYTHONIOENCODING', '>-not-set-<'))          )         try:              os.environ.get('PYTHONIOENCODING', '>-not-set-<')          except KeyError as err:              logs.debug(                  u'PYTHONIOENCODING: {}'.format(                      os.environ.get('PYTHONIOENCODING', '>-not-set-<'))          )         try:              os.environ.get('PYTHONIOENCODING', '>-not-set-<')          except KeyError as err:              logs.debug(                  u'PYTHONIOENCODING: {}'.format(                     os.environ.get('PYTHONIOENCODING', '>-not-set-<'))         )        try:             os.environ.get('PYTHONIOENCODING', '>-not-set-<')          except KeyError as err:              logs.debug(                  u'PYTHONIOENCODING: {}'.format(                     os.environ.get('PYTHONIOENCODING', '>-not-set-<'))         )        try:             os.environ.get('PYTHONIOENCODING', '>-not-set-<')          except KeyError as err:              logs.debug(                  u'PYTHONIOENCODING: {}'.format(                     os.environ.get('PYTHONIOENCODING', '>-not-set-<'))         )       try:             os.environ.get('PYTHONIOENCODING', '>-not-set-<')          except KeyError as err:              logs.debug(                  u'PYTHONIOENCODING: {}'.format(                     os.environ.get('PYTHONIOENCODING', '>-not-set-<'))         )       try:             os.environ.get('PYTHONIOENCODING', '>-not-set-<')
def add_codes(err_cls):      class ErrorsWithCodes(object):          def __getattribute__(self, code):             msg = getattr(err_cls, code)             return "[{code}] {msg}".format(code=code, msg=msg)      return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes()     return ErrorsWithCodes
class GroupBy(_GroupBy): func(**kwargs)              if result_is_index:                 result = algorithms.take_nd(obj.values, result)              if post_processing:                  result = post_processing(result, inferences)             else:                 result = algorithms.take_nd(obj.values, result)              if post_processing:                  result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:                   result = post_processing(result, inferences)              if post_processing:
def _isna_ndarraylike_old(obj):      return result  def notna(obj):      Detect non-missing values for an array-like object.     if isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):         return False     elif isinstance(obj, np.ndarray):
class _LocIndexer(_LocationIndexer):          if isinstance(labels, MultiIndex):             if isinstance(key, str) and labels.levels[0].is_all_dates:                  key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))            else:                 key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                  key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                  key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                  key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                 key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                  key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                 key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                 key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                 key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                 key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                 key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                 key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                 key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))         else:             key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))             if isinstance(key, str) and labels.levels[0].is_all_dates:                 key = tuple([key] + [slice(None
class BracketTracker:         if self._lambda_arguments and leaf.type == token.COLON:              self.depth -= 1             self._lambda_arguments -= 1              return True          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False
class DatetimeIndexOpsMixin(ExtensionIndex, ExtensionOpsMixin):          if isinstance(maybe_slice, slice):              return self[maybe_slice]         taken = ExtensionIndex.take(              self, indices, axis, allow_fill, fill_value, **kwargs          )         freq = self.freq if is_period_dtype(self) else None         assert taken.freq == freq, (taken.freq, freq, taken)         return self._shallow_copy(taken, freq=freq)      _can_hold_na = True      _na_value = NaT
def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_new(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None  def _isna_old(obj):      elif isinstance(obj, np.ndarray):          return _isna_ndarraylike(np.asarray(obj))      else:         return obj is None
class TestSeriesComparison:          dti = dti.tz_localize("US/Central")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename(names[1])          result = op(ser, dti)          assert result.name == names[2]          dti = dti.tz_localize("US/Pacific")          ser = Series(dti).rename
def js_to_json(code):          if v in ('true', 'false', 'null'):              return v          if v.startswith("'"):              v = v[1:-1]              v = re.sub(r"\\\\|\\'|\"", lambda m: {
class Model(BaseModel):  class ModelSubclass(Model):      y: int  @app.get("/", response_model=Model, response_model_exclude_unset=True)  def get() -> ModelSubclass:     return ModelSubclass(sub={}, y=1)  client = TestClient(app)  response_model = response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model_exclude_unset(response_model))  response_model_exclude_unset(response_model_exclude_unset(response_model_exclude_unset(response_model)))  response_model = response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model_exclude_unset(response_model_exclude_unset(response_model)))  response_model = response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model_exclude_unset(response_model_exclude_unset(response_model)))  response_model = response_model_exclude_unset(response_model)  response_model_exclude_unset(response_model_exclude_unset(response_model_exclude_unset(response_model)))  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_model_exclude_unset(response_model)  response_model = response_
default 'raise'              )          new_dates = new_dates.view(DT64NS_DTYPE)          dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=self.freq)     def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=None, freq=None):         dtype = tz_to_dtype(tz)         return self._simple_new(new_dates, dtype=dtype, freq=freq)      def _simple_new(self, new_dates, dtype=
class ReduceLROnPlateau(Callback):              self.mode = 'auto'          if (self.mode =='min' or             (self.mode == 'auto' and 'acc' in self.monitor)):             self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)              self.best = np.Inf          else:             self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)              self.best = -np.Inf          self.cooldown_counter = 0          self.wait = 0          self.monitor_op = lambda a, b: np.greater(a, b - self.epsilon)             self.best = np.Inf          self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)             self.best = -np.Inf          self.cooldown_counter = 0          self.wait = 0          self.monitor_op = lambda a, b: np.greater(a, b - self.epsilon)             self.best = np.Inf          self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)             self.best = -np.Inf          self.cooldown_counter = 0          self.wait = 0          self.monitor_op = lambda a, b: np.greater(a, b - self.epsilon)             self.best = np.Inf          self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)             self.best = -np.Inf          self.cooldown_counter = 0          self.wait = 0          self.monitor_op = lambda a, b: np.greater(a, b - self.epsilon)             self.best = np.Inf          self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)             self.best = -np.Inf          self.cooldown_counter = 0          self.wait = 0          self.monitor_op = lambda a, b: np.greater(a, b - self.epsilon)             self.best = np.Inf          self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)             self.best = -np.Inf          self.cooldown_counter = 0          self.wait = 0          self.monitor_op = lambda a, b: np.greater(a, b - self.epsilon)             self.best = np.Inf          self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)             self.best = -np.Inf          self.cooldown_counter = 0          self.wait = 0          self.monitor_op = lambda a, b: np.greater(a, b - self.epsilon)             self.best = np.Inf          self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)             self.best = -np.Inf          self.cooldown_counter = 0          self.wait = 0          self.monitor_op = lambda a, b: np.greater(a, b - self.epsilon)             self.best = np.Inf          self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)             self.best = -np.Inf          self.cooldown_counter = 0          self.wait = 0          self.monitor_op = lambda a, b: np.greater(a, b - self.epsilon)             self.best = np.Inf          self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)             self.best = -np.Inf          self.cooldown_counter = 0          self.wait = 0          self.monitor_op = lambda a, b: np.greater(a, b - self.epsilon)             self.best = np.Inf
def get_objs_combined_axis(          The axis to extract indexes from.      sort : bool, default True          Whether the result index should come out sorted or not.      Returns      -------      Index      obs_idxes = [obj._get_axis(axis) for obj in objs]     return _get_combined_index(obs_idxes, intersect=intersect, sort=sort)  def _get_combined_index(          obs_idxes: List[Index], intersect: bool = True, sort: bool = True) -> List[Index]:     if not intersect:         return obs_idxes     if sort:         return sorted(obs_idxes)     return obs_idxes  def _get_distinct_objs(objs: List[Index]) -> List[Index]:     if not intersect:         return obs_idxes     if sort:         return sorted(obs_idxes)     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes     return obs_idxes
class QuarterOffset(DateOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt          )         return type(dtindex)._simple_new(             shifted, freq=dtindex.freq, dtype=dtindex.dtype         )  class BQuarterEnd(QuarterOffset):          shifted = liboffsets.shift_quarters(              dtindex.asi8, self.n, self.startingMonth, self._day_opt
class ImageDataGenerator(object):              The inputs, normalized.         if self.preprocessing_function:             x = self.preprocessing_function(x)          if self.rescale:              x *= self.rescale          if self.samplewise_center:              x = self.samplewise_center(x)          if self.samplewise_mean:              x = self.samplewise_mean(x)          if self.samplewise_std:              x = self.samplewise_std(x)          if self.samplewise_min:              x = self.samplewise_min(x)          if self.samplewise_max:              x = self.samplewise_max(x)          if self.samplewise_mean:              x = self.samplewise_mean(x)          if self.samplewise_std:              x = self.samplewise_std(x)          if self.samplewise_min:              x = self.samplewise_min(x)          if self.samplewise_max:              x = self.samplewise_max(x)          if self.samplewise_mean:              x = self.samplewise_mean(x)          if self.samplewise_std:              x = self.samplewise_std(x)          if self.samplewise_min:              x = self.samplewise_min(x)          if self.samplewise_max:              x = self.samplewise_max(x)          if self.samplewise_mean:              x = self.samplewise_mean(x)          if self.samplewise_std:              x = self.samplewise_std(x)          if self.samplewise_min:              x = self.samplewise_min(x)          if self.samplewise_max:              x = self.samplewise_max(x)          if self.samplewise_mean:              x = self.samplewise_mean(x)          if self.samplewise_std:              x = self.samplewise_std(x)          if self.samplewise_min:              x = self.samplewise_min(x)          if self.samplewise_max:              x = self.samplewise_max(x)          if self.samplewise_mean:              x = self.samplewise_mean(x)          if self.samplewise_std:              x = self.samplewise_std(x)          if self.samplewise_min:              x = self.samplewise_min(x)          if self.samplewise_max:              x = self.samplewise_max(x)          if self.samplewise_mean:              x = self.samplewise_mean(x)          if self.samplewise_std:              x = self.samplewise_std(x)          if self.samplewise_min:              x = self.samplewise_min(x)          if self.samplewise_max:              x = self.samplewise_max(x)          if self.samplewise_mean:              x = self.samplewise_mean(x)          if self.samplewise_std:              x = self.samplewise_std(x)          if self.samplewise_min:              x = self.samplewise_min(x)          if self.samplewise_max:              x = self.samplewise_max(x)          if self.samplewise_mean:              x = self.samplewise_mean(x)          if self.samplewise_std:              x = self.samplewise_std(x)          if self.samplewise_min:              x = self.samplewise_min(x)          if self.samplewise_max:              x = self.samplewise_max(x)          if self.samplewise_mean:              x = self.samplewise_mean(x)          if self.samplewise_std:
def _cat_compare_op(op):              mask = (self._codes == -1) | (other_codes == -1)             if mask.any():                 ret[mask] = False              return ret          if is_scalar(other):              return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False          return False
def match(command, settings):      return _search(command.stderr) or _search(command.stdout)  def get_new_command(command, settings):      m = _search(command.stderr) or _search(command.stdout)     editor_call = '{} {} +{}'.format(os.environ['EDITOR'],                                         m.group('file'),                                        m.group('line'))      return shells.and_(editor_call, command.script)     return command.script  def get_new_command(command, settings):      m = _search(command.stderr) or _search(command.stdout)     editor_call = '{} {} +{}'.format(os.environ['EDITOR'],                                          m.group('file'),                                         m.group('line'))     return shells.and_(editor_call, command.script)  def get_new_command(command, settings):      m = _search(command.stderr) or _search(command.stdout)     editor_call = '{} {} +{}'.format(os.environ['EDITOR'],                                          m.group('file'),                                         m.group('line'))     return shells.and_(editor_call, command.script)  def get_new_command(command, settings):      m = _search(command.stderr) or _search(command.stdout)     editor_call = '{} {} +{}'.format(os.environ['EDITOR'],                                          m.group('file'),                                        m.group('line'))     return shells.and_(editor_call, command.script)  def get_new_command(command, settings):      m = _search(command.stderr) or _search(command.stdout)     editor_call = '{} {} +{}'.format(os.environ['EDITOR'],                                         m.group('file'),                                         m.group('line'))     return shells.and_(editor_call, command.script)  def get_new_command(command, settings):      m = _search(command.stderr) or _search(command.stdout)     editor_call = '{} {} +{}'.format(os.environ['EDITOR'],                                        m.group('file'),                                       m.group('line'))     return shells.and_(editor_call, command.script)  def get_new_command(command, settings):      m = _search(command.stderr) or _search(command.stdout)     editor_call = '{} {} +{}'.format(os.environ['EDITOR'],                                       m.group('file'),                                       m.group('line'))     return shells.and_(editor_call, command.script)  def get_new_command(command, settings):      m = _search(command.stderr) or _search(command.stdout)     editor_call = '{} {} +{}'.format(os.environ['EDITOR'],                                       m.group('file'),                                       m.group('line'))     return shells.and_(editor_call, command.script)  def get_new_command(command, settings):      m = _search(command.stderr) or _search(command.stdout)     editor_call = '{} {} +{}'.format(os.environ['EDITOR'],                                      m.group('file'),                                       m.group('line'))     return shells.and_(editor_call, command.script)  def get_new_
def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),         padding: string, "same" or "valid".         data_format: "channels_last" or "channels_first".             Whether to use Theano or TensorFlow data format         in inputs/kernels/outputs.          ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.             ValueError: if using an even kernel size with padding'same'.             ValueError: if using an even kernel size with padding 'valid'.
class Spider(object_ref):          crawler.signals.connect(self.close, signals.spider_closed)      def start_requests(self):         if self.make_requests_from_url is not Spider.make_requests_from_url:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override start_requests method instead."              )              for url in self.start_urls:                  yield self.make_requests_from_url(url)         else:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override start_requests method instead."              )              for url in self.start_urls:                 yield self.make_requests_from_url(url)              for url in self.start_urls:                 yield self.make_requests_from_url(url)         else:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override start_requests method instead."              )              for url in self.start_urls:                 yield self.make_requests_from_url(url)              for url in self.start_urls:                 yield self.make_requests_from_url(url)         else:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override start_requests method instead."              )              for url in self.start_urls:                 yield self.make_requests_from_url(url)              for url in self.start_urls:                 yield self.make_requests_from_url(url)         else:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override start_requests method instead."              )              for url in self.start_urls:                 yield self.make_requests_from_url(url)              for url in self.start_urls:                 yield self.make_requests_from_url(url)         else:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override start_requests method instead."              )              for url in self.start_urls:                 yield self.make_requests_from_url(url)              for url in self.start_urls:                 yield self.make_requests_from_url(url)         else:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override start_requests method instead."
def reformat_many(      if sys.platform == "win32":         worker_count = min(worker_count, 61)     executor = ProcessPoolExecutor(max_workers=worker_count)     try:          loop.run_until_complete(              schedule_formatting(                  executor.shutdown()
class PeriodIndex(DatetimeIndexOpsMixin, Int64Index, PeriodDelegateMixin):             try:                 loc = self._get_string_slice(key)                  return series[loc]             except (TypeError, ValueError):                  pass              asdt, reso = parse_time_string(key, self.freq)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)              raise TypeError(asdt, reso)              raise ValueError(asdt, reso)
def base_url(url):  def urljoin(base, path):      if not isinstance(path, compat_str) or not path:          return None if re.match(r'^(?:https?:)?          return path if not isinstance(base, compat_str) or not re.match(r'^(?:https?:)?          return None      return urlparse.urljoin(base, path)      return compat_urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin(base, path)      return urlparse.urljoin
class _LocIndexer(_LocationIndexer):              return self._getbool_axis(key, axis=axis)          elif isinstance(key, ABCDataFrame):              raise NotImplementedError(                   "Indexing a MultiIndex with a "                   "DataFrame key is not "                   "implemented"              )          elif hasattr(key, "ndim") and key.ndim > 1:              raise NotImplementedError(                  "Indexing a MultiIndex with a "                   "multidimensional key is not "                   "implemented"              )          if (                  not isinstance(key, tuple)                  and len(key)                  and not isinstance(key[0], tuple)              ):                 key = tuple([key])          if not (                  isinstance(key, tuple)                  and isinstance(labels, ABCMultiIndex)                  and len(key)                  and not isinstance(key[0], tuple)             ):                 key = tuple([key])          if not (                 isinstance(key, tuple)                 and isinstance(labels, ABCMultiIndex)                 and len(key)                 and not isinstance(key[0], tuple)             ):                 key = tuple([key])          if not (                 isinstance(key, tuple)                 and isinstance(labels, ABCMultiIndex)                 and len(key)                 and not isinstance(key[0], tuple)             ):                 key = tuple([key])          if not (                 isinstance(key, tuple)                 and isinstance(labels, ABCMultiIndex)                 and len(key)                 and not isinstance(key[0], tuple)             ):                 key = tuple([key])          if not (                 isinstance(key, tuple)                 and isinstance(labels, ABCMultiIndex)                 and len(key)                 and not isinstance(key[0], tuple)
def print_tensor(x, message=''):          The same tensor `x`, unchanged.     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(x, [x], message)     return tf.Print(
class Block(PandasObject):          check_setitem_lengths(indexer, value, values)          if is_empty_indexer(indexer, arr_value):              pass         else:             if not isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):                 raise TypeError(                     "Cannot compare empty arrays"                 )             elif isinstance(arr_value, np.ndarray):
class RedirectMiddleware(BaseRedirectMiddleware):          if 'Location' not in response.headers or response.status not in allowed_status:              return response         location = to_native_str(response.headers['location'].decode('latin1'))          redirected_url = urljoin(request.url, location)         response.headers['Location'] = redirected_url          return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response         return response
except ImportError:  def _prepare_response_content(     res: Any, *, by_alias: bool = True, exclude_unset: bool  ) -> Any:      if isinstance(res, BaseModel):          if PYDANTIC_1:             return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)          else:              return res.dict(                 by_alias=by_alias, skip_defaults=exclude_unset )      elif isinstance(res, list):          return [             _prepare_response_content(item, exclude_unset=exclude_unset) for item in res          ]      elif isinstance(res, dict):          return {             k: _prepare_response_content(v, exclude_unset=exclude_unset)             for k, v in res.items()          }      return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res     return res
def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiInde          for hlevel, level in zip(zipped, levels):              to_concat = []              for key, index in zip(hlevel, indexes):                 try:                     i = level.get_loc(key)                 except KeyError as err:                     raise ValueError(f"Key {key} not in level {level}") from err                  to_concat.append(np.repeat(i, len(index)))              codes_list.append(np.concatenate(to_concat))
class FastAPI(Starlette):          response_model_by_alias: bool = True,          response_model_skip_defaults: bool = None,          response_model_exclude_unset: bool = False,          response_model_exclude_defaults: bool = False,          response_model_exclude_none: bool = False,          include_in_schema: bool = True,          response_class: Type[Response] = None,          name: str = None,          response_model_exclude_none: bool = False,          response_model_exclude_defaults: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False,          response_model_exclude_none: bool = False
class tqdm(Comparable):          if disable is None and hasattr(file, "isatty") and not file.isatty():              disable = True          if disable:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)              self.n = initial              return          if kwargs:              self._instances.remove(self)
import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import re import
class Index(IndexOpsMixin, PandasObject):              multi_join_idx = multi_join_idx.remove_unused_levels()             return multi_join_idx, lidx, ridx          jl = list(overlap)[0]             if jl is None:                 raise TypeError(                       "Cannot use "
else:  from twisted.internet import defer, reactor, ssl  logger = logging.getLogger(__name__)  logger.setLevel(logging.DEBUG)  logger.setLevel(logging.INFO)  logger.setLevel(logging.WARNING)  logger.setLevel(logging.ERROR)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT)  logger.setLevel(logging.CRITICAL)  logger.setLevel(logging.ALERT
class CategoricalBlock(ExtensionBlock):      def _holder(self):          return Categorical      def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(                  "CategoricalBlock.to_native_types requires Categorical"              )          if not isinstance(values, Categorical):              raise TypeError(
class Model(Container):                   val_data += [0.]              for cbk in callbacks:                  cbk.validation_data = val_data         if use_multiprocessing and workers > 1:             warnings.warn(                 UserWarning('Using a generator with `use_multiprocessing=True`'                              'and multiple workers may duplicate your data.'                              'Please consider using the`keras.utils.Sequence'                              'class.'))         if is_sequence:             steps_per_epoch = len(generator)         enqueuer = None         try:             warnings.warn(                 UserWarning('Using a generator with `use_multiprocessing=True`'                              'and multiple workers may duplicate your data.'                              'Please consider using the`keras.utils.Sequence'                              'class.'))         if is_sequence:             steps_per_epoch = len(generator)         enqueuer = None         try:             warnings.warn(                 UserWarning('Using a generator with `use_multiprocessing=True`'                             'and multiple workers may duplicate your data.'                             'Please consider using the`keras.utils.Sequence'                             'class.'))         if is_sequence:             steps_per_epoch = len(generator)         enqueuer = None         try:             warnings.warn(                 UserWarning('Using a generator with `use_multiprocessing=True`'                              'and multiple workers may duplicate your data.'                             'Please consider using the`keras.utils.Sequence'                             'class.'))         if is_sequence:             steps_per_epoch = len(generator)         enqueuer = None         try:             warnings.warn(                 UserWarning('Using a generator with `use_multiprocessing=True`'                             'and multiple workers may duplicate your data.'                             'Please consider using the`keras.utils.Sequence'                           'class.'))         if is_sequence:             steps_per_epoch = len(generator)         enqueuer = None         try:             warnings.warn(                 UserWarning('Using a generator with `use_multiprocessing=True`'                             'and multiple workers may duplicate your data.'                            'Please consider using the`keras.utils.Sequence'                            'class.'))         if is_sequence:             steps_per_epoch = len(generator)         enqueuer = None
def melt(          else:              value_vars = list(value_vars)             missing = Value(np.ravel(value_vars)).difference(cols)              if not missing.empty:                  raise KeyError(                       "The following 'value_vars' are not present in
class TFOptimizer(Optimizer):      @interfaces.legacy_get_updates_support      def get_updates(self, loss, params):         grads = self.optimizer.compute_gradients(loss, params)          self.updates = [K.update_add(self.iterations, 1)]          opt_update = self.optimizer.apply_gradients(              grads, global_step=self.iterations)          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.update_add(self.iterations, 1)]          self.updates = [K.
class YoutubeIE(YoutubeBaseInfoExtractor):          video_id = mobj.group(2)          return video_id      @staticmethod     def _extract_chapters(description, duration):          if not description:              return None          chapter_lines = re.findall(
class ItemMeta(ABCMeta):          new_attrs['fields'] = fields          new_attrs['_class'] = _class          return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)         return super(ItemMeta, mcs).__new__(mcs, class
class ListParameter(Parameter):         Ensure that list parameter is converted to a tuple so it can be hashed.          :param str x: the value to parse.          :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable) value.          :rtype: tuple         :return: the normalized (hashable/immutable
class _MergeOperation:                       )                  ]              else:                left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [self.left.index.values]          if left_drop:              self.left = self.left._drop_labels_or_levels(left_drop)         else:             left_keys = [
class NumericIndex(Index):              name = data.name          return cls._simple_new(subarr, name=name)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]         return self._maybe_cast_slice_bound(label, side, kind)      @Appender(_index_shared_docs["_maybe_cast_slice_bound"])      def _maybe_cast_slice_bound(self, label, side, kind):          assert kind in ["ix", "loc", "getitem", None]
def _urlencode(seq, enc):  def _get_form(response, formname, formid, formnumber, formxpath):      text = response.body_as_unicode()     root = create_root_node(text, lxml.html.HTMLParser, base_url=response.url)     forms = root.xpath('      if not forms:          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found in %s" % response)     if not forms.find('form'):          raise ValueError("No <form> element found
class Request(object_ref):          s = safe_url_string(url, self.encoding)          self._url = escape_ajax(s)         if ':' not in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._url:              raise ValueError('Missing scheme in request url: %s' % self._url)      url = property(_get_url, obsolete_setter(_set_url, 'url'))         if ':' in self._
class EmptyLineTracker:                   return 0, 0              newlines = 2              if current_line.depth:                  newlines -= 1              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:                  newlines = 0              if newlines < 0:
class DataFrame(NDFrame):          return new_data     def _combine_match_index(self, other, func):         if ops.should_series_dispatch(self, other, func):             raise TypeError(                 "DataFrame.__combine_match_index is not implemented"             )         return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_match_index(other, func)      return self._combine_
def disp_trim(data, length):      if len(data) == disp_len(data):          return data[:length] while disp_len(data) > length:          data = data[:-1]     if RE_ANSI.search(data):         return data + "\033[0m"      return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data     return data
except ImportError:  from gzip import GzipFile  import six  import six  import six  import six  import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import six import
def _unstack_multiple(data, clocs, fill_value=None):              for i in range(len(clocs)):                 val = clocs[i]                  result = result.unstack(val, fill_value=fill_value)                 clocs = [v if i > v else v - 1 for v in clocs]              return result          return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result       return result
def jsonable_encoder(                        value,                       by_alias=by_alias,                      exclude_unset=exclude_unset,                     exclude_defaults=exclude_defaults,                     exclude_none=exclude_none,                      custom_encoder=custom_encoder,                       sqlalchemy_safe=sqlalchemy_safe,                   )
class CollectionRequirement:              manifest = info['manifest_file']['collection_info']              namespace = manifest['namespace']              name = manifest['name']             version = manifest['version']              dependencies = manifest['dependencies']          else:              display.warning("Collection at '%s' does not have a MANIFEST.json file, cannot detect version."
from tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow.python.ops import ctc_ops as ctc  from.common import floatx, epsilon, image_data_format  import functools  import threading  import sys  import time  import tensorflow as tf  import tensorflow.python.ops import functional_ops  from tensorflow
class LinuxHardware(Hardware):              mtab_entries.append(fields)          return mtab_entries      def get_mount_info(self, mount, device, uuids):          mount_size = get_mount_size(mount)         if mount_size is None:              return None         return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return mount_size      return
class Categorical(ExtensionArray, PandasObject):          min : the minimum of this `Categorical`          self.check_for_ordered("min")          good = self._codes!= -1          if not good.all():              if skipna:                 raise TypeError(                       "Categorical.min() requires "
def _get_spider_loader(settings):              'Please use SPIDER_LOADER_CLASS.',              category=ScrapyDeprecationWarning, stacklevel=2          )     cls_path = settings.get('SPIDER_LOADER_CLASS',                              settings.get('SPIDER_MANAGER_CLASS'))      loader_cls = load_object(cls_path)      verifyClass(ISpiderLoader, loader_cls)      return loader_cls.from_settings(settings.frozencopy())
logger = logging.getLogger(__name__)  title_regex = re.compile(r"(?<=<title>).*(?=</title>)")  id_regex = re.compile(r"(?<=<id>)\d*(?=</id>)") text_regex = re.compile(r"(?<=<text xml:space=\"preserve\">).*(?=</text)")  info_regex = re.compile(r"{[^{]*?}")  html_regex = re.compile(r"&lt;!--[^-]*--&gt;") ref_regex = re.compile(r"&lt;ref.*?&gt;")
async def serialize_response(              exclude=exclude,              by_alias=by_alias,              exclude_unset=exclude_unset,             exclude_defaults=exclude_defaults,          )      else:          return jsonable_encoder(response_content)      return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_content)     return jsonable_encoder(response_
class WebSocketHandler(tornado.web.RequestHandler):         .. versionadded:: 3.1         assert self.stream is not None         self.stream.set_nodelay(value)      def on_connection_close(self) -> None:          if self.ws_connection:             self.ws_connection.shutdown()             self.ws_connection = None         else:             self.stream.set_nodelay(value)             self.stream.finish()             self.stream = None             self.ws_connection = None             return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return         return
from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is_extension_array_dtype,      is_float_dtype,      is_integer_dtype,      is_object_dtype,      is_period_dtype,      is_scalar,      is_string_dtype,      is_string_like_dtype,      is_timedelta64_dtype,      needs_i8_conversion,      pandas_dtype,  )  from pandas.core.dtypes.generic import (      ABCDataFrame,     ABCDatetimeArray,      ABCExtensionArray,      ABCIndexClass,      ABCMultiIndex,      ABCSeries,     ABCTimedeltaArray,  )  from pandas.core.dtypes.inference import is_list_like  from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is_extension_array_dtype,      is_float_dtype,      is_integer_dtype,      is_object_dtype,      is_period_dtype,      is_scalar,      is_string_dtype,      is_string_like_dtype,      is_timedelta64_dtype,      needs_i8_conversion,      pandas_dtype,  )  from pandas.core.dtypes.generic import (      ABCDataFrame,     ABCDatetimeArray,      ABCExtensionArray,      ABCIndexClass,      ABCMultiIndex,      ABCSeries,     ABCTimedeltaArray,  )  from pandas.core.dtypes.inference import is_list_like  from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is_extension_array_dtype,      is_float_dtype,      is_integer_dtype,      is_object_dtype,      is_period_dtype,      is_scalar,      is_string_dtype,      is_string_like_dtype,      is_timedelta64_dtype,      needs_i8_conversion,      pandas_dtype,  )  from pandas.core.dtypes.generic import (      ABCDataFrame,     ABCDatetimeArray,      ABCExtensionArray,      ABCIndexClass,      ABCMultiIndex,      ABCSeries,     ABCTimedeltaArray,  )  from pandas.core.dtypes.inference import is_list_like  from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_v_numeric,      is_dtype_equal,      is_extension_array_dtype,      is_float_dtype,      is_integer_dtype,      is_object_dtype,      is_period_dtype,      is_scalar,      is_string_dtype,      is_string_like_dtype,      is_timedelta64_dtype,      needs_i8_conversion,      pandas_dtype,  )  from pandas.core.dtypes.generic import (      ABCDataFrame,     ABCDatetimeArray,      ABCExtensionArray,      ABCIndexClass,      ABCMultiIndex,      ABCSeries,     ABCTimedeltaArray,  )  from pandas.core.dtypes.inference import is_list_like  from pandas.core.dtypes.common import (      ensure_object,      is_bool_dtype,      is_complex_dtype,      is_datetime64_dtype,      is_datetime64tz_dtype,      is_datetimelike_
def get_file(fname,          Path to the downloaded file      if cache_dir is None:         cache_dir = os.path.join(os.path.expanduser('~'), '.keras')      if md5_hash is not None and file_hash is not None:          file_hash = md5_hash          hash_algorithm ='md5'          if file_hash is not None:              file_hash = file_hash.encode('ascii')              hash_algorithm ='md5'         elif file_hash is not None:             file_hash = file_hash.encode('ascii')             hash_algorithm ='md5'      elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')          hash_algorithm ='md5'     elif file_hash is not None:          file_hash = file_hash.encode('ascii')
def get_flat_dependant(dependant: Dependant) -> Dependant:  def is_scalar_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (list,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (list,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_sequence_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_sequence_sequence_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_sequence_sequence_sequence_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_sequence_sequence_sequence_sequence_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_sequence_sequence_sequence_sequence_sequence_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_sequence_field(field: Field) -> bool:     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)
def _partition_tasks(worker):      set_tasks["completed"] = {task for (task, status, ext) in task_history if status == 'DONE' and task in pending_tasks}      set_tasks["already_done"] = {task for (task, status, ext) in task_history                                            if status == 'DONE' and task not in set_tasks["completed"]}     set_tasks["failed"] = {task for (task, status, ext) in task_history                                           if status == 'FAILED'}      set_tasks["scheduling_error"] = {task for(task, status, ext) in task_history if status == 'UNKNOWN'}      set_tasks["still_pending_ext"] = {task for (task, status, ext) in task_history                                            if status == 'PENDING' and task not in set_tasks["failed"] and task not in set_tasks["completed"] and not ext}      set_tasks["still_pending_not_ext"] = {task for (task, status, ext) in task_history                                             if status == 'PENDING' and task not in set_tasks["failed"] and task not in set_tasks["completed"] and ext}      set_tasks["run_by_other_worker"] = set()      set_tasks["upstream_failure"] = set()      set_tasks["upstream_missing_dependency"] = set()      set_tasks["still_pending_ext"] = {task for (task, status, ext) in task_history                                             if status == 'PENDING' and task not in set_tasks["failed"] and task not in set_tasks["completed"] and not ext}      set_tasks["still_pending_not_ext"] = {task for (task, status, ext) in task_history                                            if status == 'PENDING' and task not in set_tasks["failed"] and task not in set_tasks["completed"] and ext}      set_tasks["run_by_other_worker"] = set()      set_tasks["upstream_failure"] = set()      set_tasks["upstream_missing_dependency"] = set()      set_tasks["still_pending_ext"] = {task for (task, status, ext) in task_history                                          if status == 'PENDING' and task not in set_tasks["failed"] and task not in set_tasks["completed"] and ext}      set_tasks["still_pending_not_ext"] = {task for (task, status, ext) in task_history                                          if status == 'PENDING' and task not in set_tasks["failed"] and task not in set_tasks["completed"] and ext}      set_tasks["run_by_other_worker"] = set()      set_tasks["upstream_failure"] = set()      set_tasks["upstream_missing_dependency"] = set()      set_tasks["still_pending_ext"] = {task for (task, status, ext) in task_history                                          if status == 'PENDING' and task not in set_tasks["failed"] and task not in set_tasks["completed"] and ext}      set_tasks["still_pending_not_ext"] = {task for (task, status, ext) in task_history                                           if status == 'PENDING' and task not in set_
and Index.__new__.  These should not depend on core.internals.  from typing import TYPE_CHECKING, Any, Optional, Sequence, Union, cast  import numpy as np  import sys  import os  import sys  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time  import time
class Parameter(object):          :raises MissingParameterException: if x is false-y and no default is specified.          if not x:             if self.has_value:                 return self.value              elif self.is_bool:                  return False              elif self.is_list:                  return False              elif self.has_default:                  return self.default              elif self.is_bool:                  return False              elif self.is_list:                  return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:             return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:              return False          elif self.has_default:              return self.default          elif self.is_bool:              return False          elif self.is_list:
class FloatBlock(FloatOrComplexBlock):          )          return formatter.get_result_as_array()     def get_result(self, value):          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter.get_result_as_array()          return formatter
class Categorical(ExtensionArray, PandasObject):          good = self._codes!= -1          if not good.all():             if skipna:                  pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                  pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                  pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                  pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                  pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                  pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                  pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                  pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                  pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                  pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                 pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                 pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                 pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                 pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                 pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                 pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                 pointer = self._codes[good].min()              else:                  return np.nan          if not good.all():             if skipna:                 pointer = self._codes
class RedirectMiddleware(BaseRedirectMiddleware):      def process_response(self, request, response, spider):          if (request.meta.get('dont_redirect', False) or                response.status in getattr(spider, 'handle_httpstatus_list', [])):              return response          if request.method in ('GET', 'HEAD'):              return response          if request.method in ('POST', 'PUT'):              return response          if request.method in ('DELETE', 'OPTIONS'):              return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response          return response
def get_new_command(command):          pass      if upstream_option_index is not -1:          command.script_parts.pop(upstream_option_index)         command.script_parts.pop(upstream_option_index)      push_upstream = command.stderr.split('\n')[-3].strip().partition('git ')[2]      return replace_argument(" ".join(command.script_parts), 'push', push_upstream)
from pandas.core.dtypes.common import (      ensure_platform_int,      is_bool,      is_bool_dtype,      is_categorical,      is_categorical_dtype,      is_datetime64_any_dtype,      is_dtype_equal,
class TestPeriodIndex(DatetimeLike):          idx = PeriodIndex([2000, 2007, 2007, 2009, 2007], freq="A-JUN")          ts = Series(np.random.random(len(idx)), index=idx)         result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series(np.random.random(len(idx)), index=idx)          result = ts[2007]          expected = ts[idx == "2007"]          tm.assert_series_equal(result, expected)          ts = Series
from pandas.core.dtypes.generic import (  )  from pandas.core.dtypes.missing import notna  from pandas.core import algorithms  from pandas.core.algorithms import unique  from pandas._typing import (  )  from pandas.core import algorithms  from pandas.core.algorithms import unique  from pandas._typing import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (  )  from pandas.core import (
def evaluate_generator(model, generator,      steps_done = 0      outs_per_batch = []      batch_sizes = []     use_sequence_api = isinstance(generator, Sequence)     if use_sequence_api and use_multiprocessing and workers > 1:          warnings.warn(              UserWarning('Using a generator with `use_multiprocessing=True`'                           'and multiple workers may duplicate your data.'                           'Please consider using the`keras.utils.Sequence'                           'class.'))      if steps is None:         if use_sequence_api:              steps = len(generator)          else:              raise ValueError('`steps=None` is only valid for a generator'
class Series(base.IndexOpsMixin, generic.NDFrame):          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         non_mapping = is_scalar(index) or (             is_list_like(index) and not is_dict_like(index)         )         if non_mapping:              return self._set_name(index, inplace=kwargs.get("inplace"))         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_doc_kwargs)      @Appender(generic.NDFrame.reindex.__doc__)      def _set_name(self, index, inplace: bool = False) -> None:          kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")         return super().rename(index=index, **kwargs)      @Substitution(**_shared_
class BaseAsyncIOLoop(IOLoop):              if all_fds:                  self.close_fd(fileobj)          self.asyncio_loop.close()      def add_handler(self, fd, handler, events):          fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)         fd, fileobj = self.split_fd(fd)
class ObjectBlock(Block):              if convert:                 block = [b.convert(numeric=False, copy=True) for b in block]              return block          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self          return self
class Categorical(ExtensionArray, PandasObject):          Only ordered `Categoricals` have a maximum!          Raises          ------          TypeError
def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, L          security_definition = jsonable_encoder(              security_requirement.security_scheme.model,              by_alias=True,             include_none=False,          )          security_name = security_requirement.security_scheme.scheme_name          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_definitions[security_name] = security_definition          security_
def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),      if isinstance(output_shape, (tuple, list)):          output_shape = tf.stack(output_shape)     x = tf_data_format(x)      if data_format == 'channels_first' and tf_data_format == 'NHWC':          output_shape = (output_shape[0],
