Namespace(log_name='./bugsinpy/hard3_codet5p_220m.log', model_name='Salesforce/codet5p-220m', lang='python', output_dir='bugsinpy/hard3_codet5p_220m', data_dir='./data/bugsinpy', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=4, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=3)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'Fix', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': ' class Register(abc.ABCMeta):          reg = OrderedDict()          for cls in cls._reg:             if cls.run == NotImplemented:                 continue              name = cls.task_family              if name in reg and reg[name] != cls and \\', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': ' fixed program is', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': 'class Register(abc.ABCMeta):          reg = OrderedDict()          for cls in cls._reg:              name = cls.task_family              if name in reg and reg[name] != cls and \\'}]
***** Running training *****
  Num examples = 937
  Batch size = 4
  Num epoch = 10

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 0
  eval_ppl = inf
  global_step = 236
  train_loss = 68.3928
  ********************
Previous best ppl:inf
Achieve Best ppl:inf
  ********************
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 74.21 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:74.21
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 1
  eval_ppl = inf
  global_step = 471
  train_loss = 45.6473
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 75.7 	 Previous best codebleu 74.21
  ********************
 Achieve Best bleu:75.7
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 2
  eval_ppl = inf
  global_step = 706
  train_loss = 30.1744
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 76.69 	 Previous best codebleu 75.7
  ********************
 Achieve Best bleu:76.69
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 3
  eval_ppl = inf
  global_step = 941
  train_loss = 20.7554
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 76.6 	 Previous best codebleu 76.69
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 4
  eval_ppl = inf
  global_step = 1176
  train_loss = 15.092
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 77.79 	 Previous best codebleu 76.69
  ********************
 Achieve Best bleu:77.79
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 5
  eval_ppl = inf
  global_step = 1411
  train_loss = 10.4504
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 77.96 	 Previous best codebleu 77.79
  ********************
 Achieve Best bleu:77.96
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 6
  eval_ppl = inf
  global_step = 1646
  train_loss = 7.4137
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 77.64 	 Previous best codebleu 77.96
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 7
  eval_ppl = inf
  global_step = 1881
  train_loss = 5.55
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 77.71 	 Previous best codebleu 77.96
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 8
  eval_ppl = inf
  global_step = 2116
  train_loss = 4.2848
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.93 	 Previous best codebleu 77.96
  ********************
 Achieve Best bleu:78.93
  ********************

***** Running evaluation *****
  Num examples = 116
  Batch size = 4
  epoch = 9
  eval_ppl = inf
  global_step = 2351
  train_loss = 3.5938
  ********************
Previous best ppl:inf
BLEU file: ./data/bugsinpy/validation.jsonl
  codebleu-4 = 78.33 	 Previous best codebleu 78.93
  ********************
reload model from bugsinpy/hard3_codet5p_220m/checkpoint-best-bleu
BLEU file: ./data/bugsinpy/test.jsonl
  codebleu = 76.71 
  Total = 122 
  Exact Fixed = 17 
[8, 24, 27, 31, 58, 65, 73, 76, 80, 98, 101, 109, 110, 114, 116, 120, 121]
  Syntax Fixed = 2 
[62, 115]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 122 
  Exact Fixed = 17 
[8, 24, 27, 31, 58, 65, 73, 76, 80, 98, 101, 109, 110, 114, 116, 120, 121]
  Syntax Fixed = 2 
[62, 115]
  Cleaned Fixed = 0 
[]
  codebleu = 76.71 
[0.6435993038697035, 0.8650291679766675, 0.6601281703247908, 0.29648285893773674, 0.9063467386633746, 0.6913513004703498, 0.9411542454583528, 1.0, 0.8300638244826566, 0.5398506915974657, 0.68965030200429, 0.9666856331752072, 0.6553792907046729, 0.6970086753794206, 0.6572726626071705, 0.7768711691119308, 0.6883720951974961, 0.6994074932894399, 0.8971695160234401, 0.8856389378075658, 0.6434703078149161, 0.7443181170763433, 0.7132642165763982, 1.0, 0.583933634540305, 0.9204219587780458, 1.0, 0.8234479137638847, 0.45472562564808194, 0.48081108095569647, 1.0, 0.9474759345795825, 0.6853803599169206, 0.5709889506910386, 0.7896354401872717, 0.8808919461147899, 0.5264419734307962, 0.7420541780659815, 0.8231560738418289, 0.8962096929024133, 0.8773104352365284, 0.8703246706459902, 0.6166533539875096, 0.9142445273649933, 0.7093853536262804, 0.7313821813372119, 0.62327537336927, 0.8548397899287874, 0.44713984100299276, 0.5906911079082992, 0.7715012035371895, 0.8077895563342797, 0.8782734899756608, 0.549916846856608, 0.7205089220380079, 0.9309470682699423, 0.7999468814633296, 1.0, 0.5911195501972704, 0.8022604263379136, 0.5117566728908322, 0.9583492948000167, 0.6939112308588368, 0.7042953619649426, 1.0, 0.8352894783834772, 0.20826579230967396, 0.7652740132249347, 0.5037077119806818, 0.8475332565755729, 0.7774047949942344, 0.7531797171538064, 1.0, 0.7080682242494087, 0.6530224530296921, 1.0, 0.6727771947150469, 0.6439391185600173, 0.3031200238102166, 1.0, 0.676525822803221, 0.6487795790095106, 0.5002377244306854, 0.7229580999755256, 0.7779853689231081, 0.7449734989717058, 0.8871978499693505, 0.6374410208386678, 0.7318286091585733, 0.767723111687518, 0.8358395384567638, 0.8853004704636518, 0.6394016290659417, 0.7164493834577911, 0.8573638305228279, 0.8807926879441415, 0.6980318140097763, 0.949504537888815, 0.9178662308912058, 0.8814955038434287, 1.0, 0.629812281955038, 0.852302224390544, 0.8736270526063763, 0.782053171927164, 0.8934863054803268, 0.8754861943073293, 0.8789801838086921, 1.0, 0.9355467351067721, 0.7757510372761471, 0.7225931341121177, 0.7521070400262398, 1.0, 0.9114766235414771, 0.9399649879642329, 0.610067068626702, 0.7793778739518044, 0.5788186931493522, 1.0, 1.0, 0.6006162211964817]
Finish training and take 24m
