Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h>    // modlu cozum    int main() {      int t;      scanf("%d",&t);        while( t-- ) {          long long p, a, b, c;          scanf("%lld%lld%lld%lld",&p,&a,&b,&c);            long long min;            min = a - ( p % a );            if( min > b - ( p % b )) {              min = b - ( p % b );          }            if( min > c - ( p % c )) {              min = c - ( p % c );          }            printf("%lld\\n", min);      }    }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h>    // modlu cozum    int main() {      int t;      scanf("%d",&t);        while( t-- ) {          long long p, a, b, c;          scanf("%lld%lld%lld%lld",&p,&a,&b,&c);            if( p % a == 0 || p % b == 0 || p % c == 0 ) {              printf("0\\n");              continue;          }              long long min;            min = a - ( p % a );            if( min > b - ( p % b )) {              min = b - ( p % b );          }            if( min > c - ( p % c )) {              min = c - ( p % c );          }            printf("%lld\\n", min);      }    }'}]
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=2048, max_target_length=2048, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h>    // modlu cozum    int main() {      int t;      scanf("%d",&t);        while( t-- ) {          long long p, a, b, c;          scanf("%lld%lld%lld%lld",&p,&a,&b,&c);            long long min;            min = a - ( p % a );            if( min > b - ( p % b )) {              min = b - ( p % b );          }            if( min > c - ( p % c )) {              min = c - ( p % c );          }            printf("%lld\\n", min);      }    }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h>    // modlu cozum    int main() {      int t;      scanf("%d",&t);        while( t-- ) {          long long p, a, b, c;          scanf("%lld%lld%lld%lld",&p,&a,&b,&c);            if( p % a == 0 || p % b == 0 || p % c == 0 ) {              printf("0\\n");              continue;          }              long long min;            min = a - ( p % a );            if( min > b - ( p % b )) {              min = b - ( p % b );          }            if( min > c - ( p % c )) {              min = c - ( p % c );          }            printf("%lld\\n", min);      }    }'}]
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=2048, max_target_length=2048, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h> #include <string.h>  #define abs(a) ((a)<0?-(a):(a))  char str[20005]={0}; long hash[20005]={0};  int main() {  long n,i,j;  long s=0;    scanf("%s",str+1);  n=strlen(str+1);  if(n%2)   {    n++;    loop:;    for(i=1;i<=n/2;i++)      printf("4");    for(i=1;i<=n/2;i++)      printf("7");    return 0;   }  for(i=1;i<=n;i++)    {     if(str[i]==\'4\'||str[i]==\'7\')      {       if(str[i]==\'4\')        if(abs(s-1)<=n-i)         hash[i]=1;       if(str[i]==\'4\')        s++;       else        s--;       if(abs(s)>n-i)        break;      }     else if(str[i]>\'7\')      break;     else if(str[i]<\'4\')      {       for(j=1;j<i;j++)         printf("%c",str[j]);       for(;j<=n;j++)         {          if(s+1<=n-j)           {            printf("4");            s++;           }          else           {            printf("7");            s--;           }         }             return 0;      }     else if(str[i]>\'4\'&&str[i]<\'7\')      {       if(abs(s-1)<=n-i)        {         for(j=1;j<i;j++)         printf("%c",str[j]);       printf("7");       s--;       j++;       for(;j<=n;j++)         {          if(s+1<=n-j)           {            printf("4");            s++;           }          else           {            printf("7");            s--;           }         }         return 0;        }       break;      }    }  if(i>n)   printf("%s",str+1);  else   {    for(i=n;i>=1;i--)      if(hash[i])       break;    if(i<=0)     {      n+=2;      goto loop;     }    for(s=0,j=1;j<i;j++)      {       printf("%c",str[j]);       if(str[j]==\'4\')        s++;       else        s--;      }    s--;    printf("7");    for(;j<=n;j++)         {          if(s+1<=n-j)           {            printf("4");            s++;           }          else           {            printf("7");            s--;           }         }         return 0;   }    return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h> #include <string.h>  #define abs(a) ((a)<0?-(a):(a))  char str[200005]={0}; long hash[200005]={0};  int main() {  long n,i,j;  long s=0;    scanf("%s",str+1);  n=strlen(str+1);  if(n%2)   {    n++;    loop:;    for(i=1;i<=n/2;i++)      printf("4");    for(i=1;i<=n/2;i++)      printf("7");    return 0;   }  for(i=1;i<=n;i++)    {     if(str[i]==\'4\'||str[i]==\'7\')      {       if(str[i]==\'4\')        if(abs(s-1)<=n-i)         hash[i]=1;       if(str[i]==\'4\')        s++;       else        s--;       if(abs(s)>n-i)        break;      }     else if(str[i]>\'7\')      break;     else if(str[i]<\'4\')      {       for(j=1;j<i;j++)         printf("%c",str[j]);       for(;j<=n;j++)         {          if(s+1<=n-j)           {            printf("4");            s++;           }          else           {            printf("7");            s--;           }         }             return 0;      }     else if(str[i]>\'4\'&&str[i]<\'7\')      {       if(abs(s-1)<=n-i)        {         for(j=1;j<i;j++)         printf("%c",str[j]);       printf("7");       s--;       j++;       for(;j<=n;j++)         {          if(s+1<=n-j)           {            printf("4");            s++;           }          else           {            printf("7");            s--;           }         }         return 0;        }       break;      }    }  if(i>n)   printf("%s",str+1);  else   {    for(i=n;i>=1;i--)      if(hash[i])       break;    if(i<=0)     {      n+=2;      goto loop;     }    for(s=0,j=1;j<i;j++)      {       printf("%c",str[j]);       if(str[j]==\'4\')        s++;       else        s--;      }    s--;    printf("7");    j++;    for(;j<=n;j++)         {          if(s+1<=n-j)           {            printf("4");            s++;           }          else           {            printf("7");            s--;           }         }         return 0;   }    return 0; }'}]
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=2048, max_target_length=2048, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> #include<string.h> #define SIZE 50 typedef struct ch{   char ch1;   char ch2;   int count;   char c[10];   int length; }ch; void main(){     char a[50];int n;int count;int n2;     scanf("%d",&n);     n2 = n;     if(n<=0||n>100){     return;     }     ch coun[SIZE];int v=-1;     do{     scanf("%s",a);     coun[++v].ch1 = a[0];     coun[v].length = strlen(a);     if(coun[v].length<=10){       strcpy(coun[v].c,a);     }     else{     for(int i = 1;a[i]!=0;i+=1){         count+=1;     }     count-=1;     coun[v].count = count;     coun[v].ch2 = a[count+1];     }     n-=1;     count = 0;     }while(n!=0);          for(int i = 0;i<n2;i+=1){       if(coun[i].length<=10){         printf("%s\\n",coun[i].c);       }else       printf("%c%d%c\\n",coun[i].ch1,coun[i].count,coun[i].ch2);     } }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> #include<string.h> #define SIZE 250 typedef struct ch{   char ch1;   char ch2;   int count;   char c[10];   int length; }ch; int main(){     char a[SIZE];int n;int count;int n2;     scanf("%d",&n);     n2 = n;     if(n<=0||n>100){       printf("Exceeding limit\\n");     }else{     ch coun[SIZE];int v=-1;     do{     scanf("%s",a);     coun[++v].ch1 = a[0];     coun[v].length = strlen(a);     if(coun[v].length<=10){       strcpy(coun[v].c,a);     }     else{     for(int i = 1;a[i]!=0;i+=1){         count+=1;     }     count-=1;     coun[v].count = count;     coun[v].ch2 = a[count+1];     }     n-=1;     count = 0;     }while(n!=0);          for(int i = 0;i<n2;i+=1){       if(coun[i].length<=10){         printf("%s\\n",coun[i].c);       }else       printf("%c%d%c\\n",coun[i].ch1,coun[i].count,coun[i].ch2);     }     }     return 0; }'}]
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=2048, max_target_length=2048, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main(void){   int n,k=0;   scanf("%d %d",&n,&k);   int count=0;   for(int i=0;i<n;i++){     int temp;     scanf("%d",&temp);     if(temp+k<=5){       count++;     }   }   printf("%d",(count)/3); }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main(void){   int n=0;   scanf("%d",&n);   printf("%d\\n",(n/2));   for(int i=0;i<(n/2)-1;i++){     printf("2\\t");   }   if(n-2*(n/2)==1){     printf("3");   }   if(n==2*(n/2)){     printf("2");   } }'}]
***** Running training *****
  Num examples = 141
  Batch size = 6
  Num epoch = 10
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main(void){   int n,k=0;   scanf("%d %d",&n,&k);   int count=0;   for(int i=0;i<n;i++){     int temp;     scanf("%d",&temp);     if(temp+k<=5){       count++;     }   }   printf("%d",(count)/3); }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main(void){   int n=0;   scanf("%d",&n);   printf("%d\\n",(n/2));   for(int i=0;i<(n/2)-1;i++){     printf("2\\t");   }   if(n-2*(n/2)==1){     printf("3");   }   if(n==2*(n/2)){     printf("2");   } }'}]
***** Running training *****
  Num examples = 141
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 132
  Batch size = 4
  epoch = 0
  eval_ppl = 1.3487135404868865e+38
  global_step = 25
  train_loss = 159.6348
  ********************
Previous best ppl:inf
Achieve Best ppl:1.3487135404868865e+38
  ********************
BLEU file: ./data/xcodeeval/2/validation.jsonl
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main() {     int n,a[10000],max=0,min=10000,count=-1,i,count1=-1;     scanf("%d",&n);     for(i=0;i<n;i++){         scanf("%d",&a[i]);     }     for(i=0;i<n;i++){         if(a[i]<min){             min=a[i];             count++;         }     }      for(i=0;i<n;i++){         if(a[i]>max){             max=a[i];             count1++;         }     }     if(count+count1>0){     printf("%d",count+count1);}     else{         printf("0");     }  return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main() {     int n,a[10000],max=-100,min=10000,count=-1,i,count1=-1;     scanf("%d",&n);     for(i=0;i<n;i++){         scanf("%d",&a[i]);     }     for(i=0;i<n;i++){         if(a[i]<min){             min=a[i];             count++;         }     }      for(i=0;i<n;i++){         if(a[i]>max){             max=a[i];             count1++;         }     }     if(count+count1>0){     printf("%d",count+count1);}     else{         printf("0");     }  return 0; }'}]
***** Running training *****
  Num examples = 457
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 132
  Batch size = 4
  epoch = 0
  eval_ppl = 1.1582843384366832e+22
  global_step = 78
  train_loss = 132.2198
  ********************
Previous best ppl:inf
Achieve Best ppl:1.1582843384366832e+22
  ********************
BLEU file: ./data/xcodeeval/2/validation.jsonl
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h> #include <stdlib.h> #include <string.h>  int main () {        char s[100000];int r=0,u=0,l=0,d=0; scanf("%s",s); int t=strlen(s); if(t%2==1) {printf("-1"); exit(0);} for(int i=0;i<t;i++) { if(s[i]==\'R\')         r++;          else if(s[i]==\'L\')         l++;      else if(s[i]==\'U\')         u++;               else if(s[i]==\'D\')         d++;      } printf("%d %d %d %d \\n",r,l,u,d); int o; if((r-l)%2==0) o=(abs(r-l)+abs(u-d))/2;  else  o=(abs(r-l)/2)+(abs(u-d)/2)+1;   printf("%d",o);     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h> #include <stdlib.h> #include <string.h>  int main () {        char s[100000];int r=0,u=0,l=0,d=0; scanf("%s",s); int t=strlen(s); if(t%2==1) {printf("-1"); exit(0);} for(int i=0;i<t;i++) { if(s[i]==\'R\')         r++;          else if(s[i]==\'L\')         l++;      else if(s[i]==\'U\')         u++;               else if(s[i]==\'D\')         d++;      }  int o; if((r-l)%2==0) o=(abs(r-l)+abs(u-d))/2;  else  o=(abs(r-l)/2)+(abs(u-d)/2)+1;   printf("%d",o);     return 0; }'}]
***** Running training *****
  Num examples = 684
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 132
  Batch size = 4
  epoch = 0
  eval_ppl = 1.7010485563770998e+17
  global_step = 115
  train_loss = 135.1838
  ********************
Previous best ppl:inf
Achieve Best ppl:1.7010485563770998e+17
  ********************
BLEU file: ./data/xcodeeval/2/validation.jsonl
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main() {     int n,a[100001][2],i,j,k,l,x,y,count1=0,count2=0,count=0;     scanf("%d",&n);     for(i=1;i<=n;i++)     {         for(j=1;j<=2;j++)         {             scanf("%d",&a[i][j]);         }     }     count=2*(n-1);      for(j=1;j<=n;j++)      {      for(i=1;i<=n;i++)         {         if(a[i][1]==a[j][2])            {             count1++;            }         }     x=(count1+(count/2));     y=count-(count1+(count/2));     printf("%d %d\\n",x,y);     count1=0;     }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int cnt[100005]; int a[100015][2]; int main() {     int n,i,j;     scanf("%d",&n);     for(i =1;i<=n;i++)     {         scanf("%d %d",&a[i][0],&a[i][1]);         cnt[a[i][0]]++;     }     for(i =1;i<=n;i++)     {         printf("%d %d\\n",(n-1)+(cnt[a[i][1]]),(n-1)-(cnt[a[i][1]]));     }     return 0; }'}]
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main() {     int n,a[100001][2],i,j,k,l,x,y,count1=0,count2=0,count=0;     scanf("%d",&n);     for(i=1;i<=n;i++)     {         for(j=1;j<=2;j++)         {             scanf("%d",&a[i][j]);         }     }     count=2*(n-1);      for(j=1;j<=n;j++)      {      for(i=1;i<=n;i++)         {         if(a[i][1]==a[j][2])            {             count1++;            }         }     x=(count1+(count/2));     y=count-(count1+(count/2));     printf("%d %d\\n",x,y);     count1=0;     }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int cnt[100005]; int a[100015][2]; int main() {     int n,i,j;     scanf("%d",&n);     for(i =1;i<=n;i++)     {         scanf("%d %d",&a[i][0],&a[i][1]);         cnt[a[i][0]]++;     }     for(i =1;i<=n;i++)     {         printf("%d %d\\n",(n-1)+(cnt[a[i][1]]),(n-1)-(cnt[a[i][1]]));     }     return 0; }'}]
***** Running training *****
  Num examples = 823
  Batch size = 6
  Num epoch = 10
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h>  int main(int argc, char const *argv[]) {  int tam, respuesta = 0;  int reinaX,reinaY,reyX,reyY,coordinatesX,coordinatesY;  scanf("%d",&tam);  if(tam<=3 && tam>=1000)   printf("ERROR\\n");  scanf("%d %d",&reinaX,&reinaY);  scanf("%d %d",&reyX,&reyY);  scanf("%d %d",&coordinatesX,&coordinatesY);  if((reinaX<=1 && reinaY>=tam) || (reyX<=1 && reyY>=tam) || (1>=coordinatesX && coordinatesY>=tam))   return 1;  respuesta = (reyX>reinaX && reyX>coordinatesX && reinaX>coordinatesX) || (reyX<reinaX && reyX<coordinatesX && reinaX<coordinatesX)? 0:1;  respuesta = (reyY>reinaY && reyY>coordinatesY && reinaY>coordinatesY) || (reyY<reinaY && reyY<coordinatesY && reinaY<coordinatesY)? 0:1;  if(respuesta)   printf("YES\\n");  else   printf("NO\\n");  return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h>  int main(int argc, char const *argv[]) {  int tam, respuesta = 0;  int reinaX,reinaY,reyX,reyY,coordinatesX,coordinatesY;  scanf("%d",&tam);  if(tam<=3 && tam>=1000)   printf("ERROR\\n");  scanf("%d %d",&reinaX,&reinaY);  scanf("%d %d",&reyX,&reyY);  scanf("%d %d",&coordinatesX,&coordinatesY);  respuesta = (reyX>reinaX && reyX>coordinatesX && reinaX>coordinatesX) || (reyX<reinaX && reyX<coordinatesX && reinaX<coordinatesX) || (reyY>reinaY && reyY>coordinatesY && reinaY>coordinatesY) || (reyY<reinaY && reyY<coordinatesY && reinaY<coordinatesY)? 0:1;  if(respuesta)   printf("YES\\n");  else   printf("NO\\n");  return 0; }'}]
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main() {     int n,m,a[55],b[55],i,count=0,j,max;     while(scanf("%d",&n)!=EOF)     {         for(i=0;i<n;i++)         scanf("%d",&a[i]);         scanf("%d",&m);         for(i=0;i<m;i++)         scanf("%d",&b[i]);         max=b[0]/a[0];         for(i=0;i<n;i++)         {             for(j=0;j<m;j++)             {                 if(b[j]%a[i]==0)                 {                     if(b[j]/a[i]==max)                     {                         count++;                         continue;                     }                      if(b[j]/a[i]>max)                     {                          max=b[j]/a[i];                          count=1;                     }                  }             }         }         printf("%d\\n",count);     }     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main() {     int n,m,a[55],b[55],i,count=1,j,max;     while(scanf("%d",&n)!=EOF)     {         for(i=0;i<n;i++)         scanf("%d",&a[i]);         scanf("%d",&m);         for(i=0;i<m;i++)         scanf("%d",&b[i]);         max=0;         for(i=0;i<n;i++)         {             for(j=0;j<m;j++)             {                 if(b[j]%a[i]==0)                 {                     if(b[j]/a[i]==max)                     {                         count++;                         continue;                     }                      if(b[j]/a[i]>max)                     {                          max=b[j]/a[i];                          count=1;                     }                  }             }         }         printf("%d\\n",count);     }     return 0; }'}]
***** Running training *****
  Num examples = 871
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 132
  Batch size = 4
  epoch = 0
  eval_ppl = 1211887209833209.2
  global_step = 147
  train_loss = 166.5882
  ********************
Previous best ppl:inf
Achieve Best ppl:1211887209833209.2
  ********************
BLEU file: ./data/xcodeeval/2/validation.jsonl
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> #include<string.h> int main() {     int n,s[1005],d[1005],s1,i,j;     scanf("%d",&n);     for(i=1;i<=n;i++)     {         scanf("%d%d",&s[i],&d[i]);     }     s1=s[1];     for(i=2;i<=n;i++)     {         if(s[i]<s1)         {             while(s[i]+j<s1)             {                 s1=s[i]+d;             }         }         else s1=s[i];     }     printf("%d",s1);     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> #include<string.h> int main() {     int n,s,d,s1,i,j;     scanf("%d",&n);     s1=0;     for(i=1;i<=n;i++)     {         scanf("%d%d",&s,&d);         if(s1<s) s1=s;         else         {             while(s<=s1)             {                 s=s+d;             }             s1=s;         }     }      printf("%d",s1);     return 0; }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 8.760907577010276e+19
  global_step = 182
  train_loss = 144.5124
  ********************
Previous best ppl:inf
Achieve Best ppl:8.760907577010276e+19
  ********************
BLEU file: ./data/xcodeeval/2/validation.jsonl
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> #include<string.h> int main() {     int n,s[1005],d[1005],s1,i,j;     scanf("%d",&n);     for(i=1;i<=n;i++)     {         scanf("%d%d",&s[i],&d[i]);     }     s1=s[1];     for(i=2;i<=n;i++)     {         if(s[i]<s1)         {             while(s[i]+j<s1)             {                 s1=s[i]+d;             }         }         else s1=s[i];     }     printf("%d",s1);     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> #include<string.h> int main() {     int n,s,d,s1,i,j;     scanf("%d",&n);     s1=0;     for(i=1;i<=n;i++)     {         scanf("%d%d",&s,&d);         if(s1<s) s1=s;         else         {             while(s<=s1)             {                 s=s+d;             }             s1=s;         }     }      printf("%d",s1);     return 0; }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 8.760907577010276e+19
  global_step = 182
  train_loss = 144.5124
  ********************
Previous best ppl:inf
Achieve Best ppl:8.760907577010276e+19
  ********************
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 72.28 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:72.28
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 5.2534486433772225e+19
  global_step = 363
  train_loss = 58.0361
  ********************
Previous best ppl:8.760907577010276e+19
Achieve Best ppl:5.2534486433772225e+19
  ********************
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 71.35 	 Previous best codebleu 72.28
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 4.2602189552612995e+97
  global_step = 544
  train_loss = 41.4681
  ********************
Previous best ppl:5.2534486433772225e+19
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 64.8 	 Previous best codebleu 72.28
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 3
  eval_ppl = 1.9829755760931624e+40
  global_step = 725
  train_loss = 28.377
  ********************
Previous best ppl:5.2534486433772225e+19
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 70.5 	 Previous best codebleu 72.28
  ********************
early stopping!!!
reload model from xcodeeval/2/hard0_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/2/test.jsonl
  codebleu = 75.42 
  Total = 135 
  Exact Fixed = 1 
[45]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 135 
  Exact Fixed = 1 
[45]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  codebleu = 75.42 
[0.41512839899864346, 0.774674995957515, 0.46404565654351704, 0.5976582014200813, 0.6045156513374393, 0.7475948178513073, 0.9706031576004608, 0.8476526564642695, 0.9296230645706806, 0.9737915388152598, 0.773294925109081, 0.9690252200563791, 0.8182904848311103, 0.22055765131318308, 0.8849556780813304, 0.8465786606730943, 0.32264715015137885, 0.4233634442737251, 0.891318859382493, 0.7611563185052843, 0.9489374752009117, 0.8483520284819023, 0.9708766251642293, 0.6276838922915551, 0.6026668366256035, 0.955928152956145, 0.18380344871930723, 0.8931697265461771, 0.8888875987967758, 0.9245535600336094, 0.8686786258929526, 0.9921235405221538, 0.893963498921577, 0.9453065823977185, 0.7742007791251235, 0.8226713236996401, 0.9397196703568713, 0.9337778829935532, 0.7016461042274522, 0.8245099097903352, 0.9575690470184792, 0.8528446619433614, 0.7975345205438809, 0.5425263102016247, 0.9641482059540343, 0.8070460205840142, 0.41131909551766166, 0.9435574418655892, 0.874644141352175, 0.8796149692126669, 0.678580106549634, 0.9563207878568132, 0.7847099524235768, 0.9407613352737074, 0.03353017510024375, 0.6775861489088755, 0.7938248308208946, 0.9526904394783113, 0.929179980365455, 0.5557250459017893, 0.9104824205178108, 0.9390470390182255, 0.22530944550874332, 0.44784463720047984, 0.6249954610889428, 0.9275106352744356, 0.8728859247057659, 0.6347223669736339, 0.5823017295799235, 0.9102873898547797, 0.9583907692466334, 0.4260664847736758, 0.7603010370224326, 0.7345075022043217, 0.9134484150015578, 0.8377973600866482, 0.8825776851557547, 0.9633274717223854, 0.6810842044592471, 0.7628541847804483, 0.8996320350868814, 0.8073901170076225, 0.8379396853880319, 0.7667020286830601, 0.94428486257671, 0.6583357919966578, 0.9299712359965064, 0.9744751689257993, 0.6339943883989547, 0.9475003578065015, 0.06683743472557888, 0.8435091978777076, 0.7148099643636598, 0.9439975336408695, 0.8764648196401148, 0.4231907503188632, 0.3565874055354602, 0.9336211132302956, 0.942059037982022, 0.0, 0.8540192950388408, 0.9189623879252682, 0.8199251872608782, 0.8567561377084951, 0.4990931257528518, 0.44631798504700376, 0.44318188599453706, 0.8624100358037953, 0.8554076307279366, 0.7434648996938886, 0.840353314844213, 0.9557759455949837, 0.9271490169747502, 0.3207575554986024, 0.8873668753293809, 0.8783841735029958, 0.8527875420817158, 0.8771248343544953, 0.9233958229407835, 0.6676014991864052, 0.8717171235509, 0.9272125306906449, 0.9235637222639148, 0.9553040884657016, 0.32301796222457846, 0.9794095630272655, 0.5968629449158207, 0.6672765563042851, 0.8260788700956657, 0.9437985500759485, 0.3242436023734503, 0.8672263796810342, 0.824261585549334, 0.39049589917035077, 0.3563318270564202]
Finish training and take 1h43m
Namespace(log_name='./xcodeeval/2/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/2/hard0_gptneo', data_dir='./data/xcodeeval/2', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> long long a[100003],b[100003],x[100003]; int main() {     long long n,m,i,total=0,j;     scanf("%lld",&n);     a[0]=0;     b[0]=0;     for(i=1;i<=n;i++)     {         scanf("%lld",&a[i]);         total=total+a[i];         b[i]=total;     }     scanf("%lld",&m);     for(j=1;j<=m;j++)     {         scanf("%lld",&x[j]);     }     for(j=1;j<=m;j++)     {         for(i=1;i<=n;i++)         {             if(b[i]>=x[j])             {                 printf("%lld\\n",i);                 break;             }         }     }     return 0;  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> long long a[200000],b[200000]; int main() {     long long n,i,m,total=0,x,j,start,end,mid;     scanf("%lld",&n);     for(i=0;i<n;i++)     {         scanf("%lld",&a[i]);         total=total+a[i];         b[i]=total;     }     scanf("%lld",&m);     for(j=1;j<=m;j++)     {         scanf("%lld",&x);         if(x<=b[0])         {             printf("1\\n");         }         else if(x>=b[n-1])         {             printf("%lld\\n",n);         }         else         {             start=0;             end=n-1;             while(start<=end)             {                 mid=(start+end)/2;                 if(b[mid]>=x&&b[mid-1]<x)                 {                     printf("%lld\\n",(mid+1));                     break;                 }                 else if(b[mid]<x)                 {                     start=mid+1;                 }                 else if(b[mid]>=x&&b[mid-1]>=x)                 {                     end=mid-1;                 }             }         }     }     return 0;  }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 2.2232442286534285e+47
  global_step = 182
  train_loss = 143.8379
  ********************
Previous best ppl:inf
Achieve Best ppl:2.2232442286534285e+47
  ********************
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 73.69 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:73.69
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 4.7000740811950927e+39
  global_step = 363
  train_loss = 61.0125
  ********************
Previous best ppl:2.2232442286534285e+47
Achieve Best ppl:4.7000740811950927e+39
  ********************
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 73.6 	 Previous best codebleu 73.69
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 2.150625479521797e+40
  global_step = 544
  train_loss = 43.552
  ********************
Previous best ppl:4.7000740811950927e+39
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 74.1 	 Previous best codebleu 73.69
  ********************
 Achieve Best bleu:74.1
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 3
  eval_ppl = 5.323553768646768e+40
  global_step = 725
  train_loss = 29.8176
  ********************
Previous best ppl:4.7000740811950927e+39
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 62.45 	 Previous best codebleu 74.1
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 4
  eval_ppl = 2.3973296982163366e+39
  global_step = 906
  train_loss = 18.3102
  ********************
Previous best ppl:4.7000740811950927e+39
Achieve Best ppl:2.3973296982163366e+39
  ********************
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 66.23 	 Previous best codebleu 74.1
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 5
  eval_ppl = 5.645532647856968e+53
  global_step = 1087
  train_loss = 10.3729
  ********************
Previous best ppl:2.3973296982163366e+39
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 53.3 	 Previous best codebleu 74.1
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 6
  eval_ppl = 1.0453372895600986e+58
  global_step = 1268
  train_loss = 5.7843
  ********************
Previous best ppl:2.3973296982163366e+39
BLEU file: ./data/xcodeeval/2/validation.jsonl
  codebleu-4 = 61.75 	 Previous best codebleu 74.1
  ********************
early stopping!!!
reload model from xcodeeval/2/hard0_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/2/test.jsonl
  codebleu = 70.36 
  Total = 135 
  Exact Fixed = 3 
[88, 107, 120]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 135 
  Exact Fixed = 3 
[88, 107, 120]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  codebleu = 70.36 
[0.39866608837580597, 0.4896373524849441, 0.9304426125943328, 0.8353749826890478, 0.6353694670938503, 0.9608157214002302, 0.9895907412940455, 0.7177805199256334, 0.9595299269707969, 0.7141494776867402, 0.2559598986754519, 0.5844229263024725, 0.904590355528839, 0.007715673617549266, 0.03281115469695418, 0.9690929327610214, 0.5725320645398072, 0.740243186456651, 0.8840280108223306, 0.4216956562185652, 0.46397021372643144, 0.8861971446522757, 0.9780384047260811, 0.9617720754477719, 0.8424031755937416, 0.6201159722273546, 0.8697040065925576, 0.7950791435716638, 0.8603894119357585, 0.29476857896785025, 0.3878737250839708, 0.862850054120871, 0.9399296252797082, 0.9510814452964713, 0.550275035842957, 0.5700473884960081, 0.47902352065706183, 0.9327115121337213, 0.7366978852519351, 0.48731748252372653, 0.31464930198113256, 0.8207174296242723, 0.9251568164016057, 0.621444398759702, 0.19125220032008766, 0.9144169886968883, 0.9687829854371817, 0.940387748772268, 0.9840793393103271, 0.8110570626793663, 0.3047297501212361, 0.7162143583702325, 0.4657133305757337, 0.589334914331319, 0.851750971257305, 0.9402139343391618, 0.8862841277509927, 0.6691837307519457, 0.4953415641367399, 0.7800574440621352, 0.7507584829026313, 0.9582778026878329, 0.9360674082443785, 0.5993895083454788, 0.33070238333956836, 0.8886223888442533, 0.6691335802853828, 0.7510867123236671, 0.3736488856474957, 0.8758700405095388, 0.6486025779520279, 0.8196951483104229, 0.7558323329080993, 0.4330469566635661, 0.23064914014315294, 0.7852033214625844, 0.7496420585309386, 0.978606091610698, 0.9184125015830258, 0.9609336279140019, 0.31976874551780043, 0.0, 0.7269618142997433, 0.7157249744648765, 0.451836007924204, 0.6434517800108057, 0.35565802228866766, 0.993565204007768, 0.9343166704551076, 0.709805001952248, 0.6979780721244926, 0.9637360645128197, 0.8688277339527386, 0.8523079002373852, 0.7886954168222011, 0.5461719247723633, 0.8005772998494023, 0.7900726595069061, 0.7067236361805709, 0.5383934880343055, 0.4466796632469585, 0.5715313815373253, 0.4920880344612968, 0.2626947648235539, 0.98905613398207, 0.6951644390669244, 1.0, 0.39948053225412933, 0.9036711408607252, 0.44823100479897565, 0.7016795699979828, 0.7333602458935599, 0.8789900106153626, 0.912198238083447, 0.9143685812083902, 0.8818088825702113, 0.9533257646563149, 0.4335448943198981, 0.9217262750138406, 1.0, 0.39482295249653215, 0.8832442306770307, 0.8580298417070347, 0.8171220069513339, 0.6050860325789538, 0.51730793004376, 0.9645896373785567, 0.5818842126352378, 0.2621892956480607, 0.7344241200219874, 0.7680752406649723, 0.9056265825509175, 0.9612737738433852, 0.9750949338196533, 0.7348529689836785]
Finish training and take 2h45m
