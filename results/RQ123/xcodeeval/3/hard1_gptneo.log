Namespace(log_name='./xcodeeval/3/hard1_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/3/hard1_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/3/hard1_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/3/hard1_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h>  void merge_sort(int* array, int start, int end, int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int sum;  int n, q;  int min, on_dis;  scanf("%d %d", &n, &q);  int items[n];  int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   for(int i = 0; i < q; i++)  {   sum = 0;   scanf("%d %d", &min, &on_dis);   for(int x = min - 1; x > min - 1 - on_dis; x--)    sum += items[x];   printf("%d\\n", sum);  } }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': ' the fixed version is', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h>  void merge_sort(int* array, int start, int end, long long int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int n, q;  int min, on_dis;  long long int sum;  scanf("%d %d", &n, &q);  int items[n];  long long int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   supp[n-1] = items[n-1];  for(int x = n-2; x >= 0; x--)   supp[x] = supp[x+1] + (long long int) items[x];   for(int i = 0; i < q; i++)  {   scanf("%d %d", &min, &on_dis);   if(min != n)    sum = supp[min - on_dis] - supp[min];   else    sum = supp[min - on_dis];   printf("%lld\\n", sum);  } }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 9.051462164325865e+42
  global_step = 182
  train_loss = 145.5338
  ********************
Previous best ppl:inf
Achieve Best ppl:9.051462164325865e+42
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
Namespace(log_name='./xcodeeval/3/hard1_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/3/hard1_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h>  void merge_sort(int* array, int start, int end, int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int sum;  int n, q;  int min, on_dis;  scanf("%d %d", &n, &q);  int items[n];  int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   for(int i = 0; i < q; i++)  {   sum = 0;   scanf("%d %d", &min, &on_dis);   for(int x = min - 1; x > min - 1 - on_dis; x--)    sum += items[x];   printf("%d\\n", sum);  } }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': ' the fixed version is', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h>  void merge_sort(int* array, int start, int end, long long int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int n, q;  int min, on_dis;  long long int sum;  scanf("%d %d", &n, &q);  int items[n];  long long int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   supp[n-1] = items[n-1];  for(int x = n-2; x >= 0; x--)   supp[x] = supp[x+1] + (long long int) items[x];   for(int i = 0; i < q; i++)  {   scanf("%d %d", &min, &on_dis);   if(min != n)    sum = supp[min - on_dis] - supp[min];   else    sum = supp[min - on_dis];   printf("%lld\\n", sum);  } }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 9.051462164325865e+42
  global_step = 182
  train_loss = 145.5338
  ********************
Previous best ppl:inf
Achieve Best ppl:9.051462164325865e+42
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 76.49 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:76.49
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 8.707168128986282e+17
  global_step = 363
  train_loss = 61.4921
  ********************
Previous best ppl:9.051462164325865e+42
Achieve Best ppl:8.707168128986282e+17
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 77.18 	 Previous best codebleu 76.49
  ********************
 Achieve Best bleu:77.18
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 3.7606779877977817e+37
  global_step = 544
  train_loss = 43.6664
  ********************
Previous best ppl:8.707168128986282e+17
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 76.41 	 Previous best codebleu 77.18
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 3
  eval_ppl = 1.9387326813318137e+37
  global_step = 725
  train_loss = 29.893
  ********************
Previous best ppl:8.707168128986282e+17
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 76.97 	 Previous best codebleu 77.18
  ********************
early stopping!!!
reload model from xcodeeval/3/hard1_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/3/test.jsonl
Namespace(log_name='./xcodeeval/3/hard1_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/3/hard1_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main() { int t,i=1; scanf("%d",&t); while(i<=t)  {  int s,a,b,c,d;  scanf("%d%d%d%d",&s,&a,&b,&c);  d=(s/c)+((s/a)*b);  printf("%d",d);  } return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': ' the fixed version is', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main() { long long s,a,b,c,d,p; int t,i; scanf("%d",&t); for(i=1;i<=t;i++)  {  scanf("%I64d%I64d%I64d%I64d",&s,&a,&b,&c);  p=s/c;  d=(p)+((p/a)*b);  printf("%I64d\\n",d);  } return 0; }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 7.146536681892928e+38
  global_step = 182
  train_loss = 142.7527
  ********************
Previous best ppl:inf
Achieve Best ppl:7.146536681892928e+38
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 74.56 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:74.56
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 3.8089426682190865e+62
  global_step = 363
  train_loss = 53.9485
  ********************
Previous best ppl:7.146536681892928e+38
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 74.92 	 Previous best codebleu 74.56
  ********************
 Achieve Best bleu:74.92
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 6.470575738086458e+48
  global_step = 544
  train_loss = 38.5239
  ********************
Previous best ppl:7.146536681892928e+38
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 74.3 	 Previous best codebleu 74.92
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 3
  eval_ppl = 4.3915487297177333e+74
  global_step = 725
  train_loss = 26.3344
  ********************
Previous best ppl:7.146536681892928e+38
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 74.94 	 Previous best codebleu 74.92
  ********************
 Achieve Best bleu:74.94
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 4
  eval_ppl = 2.2209870395444617e+60
  global_step = 906
  train_loss = 16.8867
  ********************
Previous best ppl:7.146536681892928e+38
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 73.01 	 Previous best codebleu 74.94
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 5
  eval_ppl = 1.3418190193486543e+98
  global_step = 1087
  train_loss = 9.3685
  ********************
Previous best ppl:7.146536681892928e+38
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 73.87 	 Previous best codebleu 74.94
  ********************
early stopping!!!
reload model from xcodeeval/3/hard1_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/3/test.jsonl
  codebleu = 73.9 
  Total = 135 
  Exact Fixed = 3 
[27, 53, 88]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 135 
  Exact Fixed = 3 
[27, 53, 88]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  codebleu = 73.9 
[0.7802656127733693, 0.5274378673464208, 0.710848348540035, 0.9471181623085654, 0.9180452244186932, 0.08651205986326166, 0.25656679901645385, 0.7669842146074164, 0.6450304794017896, 0.5124474841624163, 0.5564880010186164, 0.8164468849403668, 0.8805670984187464, 0.91975044078483, 0.916463892916797, 0.9175636111085979, 0.38735431410528753, 0.947175667983928, 0.7822722252676139, 0.8187917419573252, 0.9270957719532509, 0.9735791100966684, 0.8333813540442871, 0.5524112337326081, 0.7657560530824576, 0.9450171055839813, 1.0, 0.9177263637961715, 0.5727059735400186, 0.8896800467143886, 0.91412960455335, 0.4676655068837078, 0.5654735900099918, 0.9716642922960141, 0.5925258544448675, 0.8415834056802387, 0.7471425268848038, 0.9025560323310975, 0.5717465644724119, 0.9670641264245079, 0.867980815381816, 0.8583791034780668, 0.9306240015142291, 0.955626584171517, 0.7807079788494218, 0.8470562047308248, 0.9623079709182942, 0.6173219513700354, 0.8849556780813304, 0.6316987027339172, 0.8457443235201545, 0.7552701644179897, 1.0, 0.8633963363946109, 0.7801949080730365, 0.9648891735454908, 0.8235829372803863, 0.9477813702498612, 0.8314858483759617, 0.33295797590328613, 0.35624122019684656, 0.7982100679121421, 0.9217008915274616, 0.8689970404457057, 0.7212025199473703, 0.9858263222388597, 0.9859658995808198, 0.15362472364551508, 0.9289471675486692, 0.7734084311974865, 0.9109344104254649, 0.9669138743101213, 0.9503712900963834, 0.9444842541441154, 0.788953668472954, 0.500058911951884, 0.6315769694647435, 0.8657268209604377, 0.6927725662122917, 0.8269793321315543, 0.8947151965627762, 0.9420050660369494, 0.7761391783604946, 0.891481973440446, 0.6230524667375235, 0.7763879223350485, 0.26765125761038455, 1.0, 0.9613223573936736, 0.8980952928375916, 0.5797226856861304, 0.49863678767022296, 0.9498733743967636, 0.6783819388991533, 0.30278837455257246, 0.821773975796796, 0.4196734157127252, 0.6352418602881265, 0.8912346944330096, 0.3913905692778357, 0.8973950671747466, 0.9174195483383916, 0.47266766836385843, 0.9534278780598358, 0.8942968878417938, 0.8897945586059963, 0.3355749130492112, 0.35148053648224986, 0.8956002753268077, 0.3923252845405849, 0.8709925488538006, 0.3631947238977573, 0.4954735182274035, 0.9427008679312978, 0.7222654429589042, 0.3816802695568956, 0.7731493070712928, 0.7052622199542771, 0.9732456940628658, 0.7980238749890322, 0.6131424394366902, 0.6530343130668756, 0.7934303369700066, 0.9764351042658364, 0.4953415641367399, 0.6823223768377601, 0.8997299115670001, 0.37462332268897325, 0.37224533982578545, 0.4191471722230175, 0.9393874070011292, 0.9343166704551076, 0.5867706278111786, 0.4094542044720756, 0.328907501466149]
Finish training and take 1h22m
