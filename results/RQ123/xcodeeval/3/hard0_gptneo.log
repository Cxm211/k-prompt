Namespace(log_name='./xcodeeval/3/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/3/hard0_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/3/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/3/hard0_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/3/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/3/hard0_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/3/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/3/hard0_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h>  void merge_sort(int* array, int start, int end, int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int sum;  int n, q;  int min, on_dis;  scanf("%d %d", &n, &q);  int items[n];  int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   for(int i = 0; i < q; i++)  {   sum = 0;   scanf("%d %d", &min, &on_dis);   for(int x = min - 1; x > min - 1 - on_dis; x--)    sum += items[x];   printf("%d\\n", sum);  } }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h>  void merge_sort(int* array, int start, int end, long long int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int n, q;  int min, on_dis;  long long int sum;  scanf("%d %d", &n, &q);  int items[n];  long long int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   supp[n-1] = items[n-1];  for(int x = n-2; x >= 0; x--)   supp[x] = supp[x+1] + (long long int) items[x];   for(int i = 0; i < q; i++)  {   scanf("%d %d", &min, &on_dis);   if(min != n)    sum = supp[min - on_dis] - supp[min];   else    sum = supp[min - on_dis];   printf("%lld\\n", sum);  } }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 3.5625060295206396e+19
  global_step = 182
  train_loss = 147.6815
  ********************
Previous best ppl:inf
Achieve Best ppl:3.5625060295206396e+19
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
Namespace(log_name='./xcodeeval/3/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/3/hard0_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h>  void merge_sort(int* array, int start, int end, int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int sum;  int n, q;  int min, on_dis;  scanf("%d %d", &n, &q);  int items[n];  int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   for(int i = 0; i < q; i++)  {   sum = 0;   scanf("%d %d", &min, &on_dis);   for(int x = min - 1; x > min - 1 - on_dis; x--)    sum += items[x];   printf("%d\\n", sum);  } }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h>  void merge_sort(int* array, int start, int end, long long int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int n, q;  int min, on_dis;  long long int sum;  scanf("%d %d", &n, &q);  int items[n];  long long int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   supp[n-1] = items[n-1];  for(int x = n-2; x >= 0; x--)   supp[x] = supp[x+1] + (long long int) items[x];   for(int i = 0; i < q; i++)  {   scanf("%d %d", &min, &on_dis);   if(min != n)    sum = supp[min - on_dis] - supp[min];   else    sum = supp[min - on_dis];   printf("%lld\\n", sum);  } }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 3.5625060295206396e+19
  global_step = 182
  train_loss = 147.6815
  ********************
Previous best ppl:inf
Achieve Best ppl:3.5625060295206396e+19
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 62.01 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:62.01
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 5674147851915.538
  global_step = 363
  train_loss = 62.8207
  ********************
Previous best ppl:3.5625060295206396e+19
Achieve Best ppl:5674147851915.538
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 75.38 	 Previous best codebleu 62.01
  ********************
 Achieve Best bleu:75.38
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 7.823165874237204e+20
  global_step = 544
  train_loss = 45.4764
  ********************
Previous best ppl:5674147851915.538
BLEU file: ./data/xcodeeval/3/validation.jsonl
Namespace(log_name='./xcodeeval/3/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/3/hard0_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main() { int t,i=1; scanf("%d",&t); while(i<=t)  {  int s,a,b,c,d;  scanf("%d%d%d%d",&s,&a,&b,&c);  d=(s/c)+((s/a)*b);  printf("%d",d);  } return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main() { long long s,a,b,c,d,p; int t,i; scanf("%d",&t); for(i=1;i<=t;i++)  {  scanf("%I64d%I64d%I64d%I64d",&s,&a,&b,&c);  p=s/c;  d=(p)+((p/a)*b);  printf("%I64d\\n",d);  } return 0; }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 881284012654628.9
  global_step = 182
  train_loss = 144.5907
  ********************
Previous best ppl:inf
Achieve Best ppl:881284012654628.9
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 72.94 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:72.94
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 2794427513557911.5
  global_step = 363
  train_loss = 55.2822
  ********************
Previous best ppl:881284012654628.9
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 69.62 	 Previous best codebleu 72.94
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 3.5414485700205555e+41
  global_step = 544
  train_loss = 39.5782
  ********************
Previous best ppl:881284012654628.9
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 63.2 	 Previous best codebleu 72.94
  ********************
early stopping!!!
reload model from xcodeeval/3/hard0_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/3/test.jsonl
Namespace(log_name='./xcodeeval/3/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/3/hard0_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=False, do_eval=False, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
reload model from xcodeeval/3/hard0_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/3/test.jsonl
Namespace(log_name='./xcodeeval/3/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/3/hard0_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main() { int t,i=1; scanf("%d",&t); while(i<=t)  {  int s,a,b,c,d;  scanf("%d%d%d%d",&s,&a,&b,&c);  d=(s/c)+((s/a)*b);  printf("%d",d);  } return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main() { long long s,a,b,c,d,p; int t,i; scanf("%d",&t); for(i=1;i<=t;i++)  {  scanf("%I64d%I64d%I64d%I64d",&s,&a,&b,&c);  p=s/c;  d=(p)+((p/a)*b);  printf("%I64d\\n",d);  } return 0; }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 881284012654628.9
  global_step = 182
  train_loss = 144.5907
  ********************
Previous best ppl:inf
Achieve Best ppl:881284012654628.9
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 72.94 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:72.94
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 2794427513557911.5
  global_step = 363
  train_loss = 55.2822
  ********************
Previous best ppl:881284012654628.9
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 69.62 	 Previous best codebleu 72.94
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 3.5414485700205555e+41
  global_step = 544
  train_loss = 39.5782
  ********************
Previous best ppl:881284012654628.9
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 63.21 	 Previous best codebleu 72.94
  ********************
early stopping!!!
reload model from xcodeeval/3/hard0_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/3/test.jsonl
  codebleu = 71.78 
  Total = 135 
  Exact Fixed = 0 
[]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 135 
  Exact Fixed = 0 
[]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  codebleu = 71.78 
[0.7802656127733693, 0.5060733108707252, 0.6979069191184022, 0.9449125408146228, 0.9759316203623163, 0.08651205986326166, 0.2570068106589072, 0.7669842146074164, 0.6498389062539932, 0.5030724841624163, 0.5564880010186164, 0.8164468849403668, 0.8805670984187464, 0.9432628994248902, 0.9196798725536102, 0.9175636111085979, 0.38735431410528753, 0.947175667983928, 0.7822722252676139, 0.8106836338492169, 0.7733480830537882, 0.9735791100966684, 0.8333813540442871, 0.5524112337326081, 0.7657560530824576, 0.9450171055839813, 0.8324183912964096, 0.9177263637961715, 0.5728712854405749, 0.8896800467143886, 0.9091393202925449, 0.4328828981880556, 0.63014750305347, 0.9338585857378057, 0.5925258544448675, 0.7259849312989834, 0.739909040388661, 0.9025560323310975, 0.5717465644724119, 0.5762651556050861, 0.867980815381816, 0.8583791034780668, 0.9306240015142291, 0.955626584171517, 0.7807079788494218, 0.8470562047308248, 0.9623079709182942, 0.2771665132522003, 0.8849556780813304, 0.6316987027339172, 0.8676206383206657, 0.9828198222975641, 0.9549147975108003, 0.6399647505371298, 0.5275360603812864, 0.9648891735454908, 0.0, 0.9477813702498612, 0.951315622822358, 0.33295797590328613, 0.38152544120212795, 0.7982100679121421, 0.9217008915274616, 0.878087949536615, 0.8030402753246534, 0.9678049217048112, 0.6728958091620246, 0.15351946048762036, 0.9289471675486692, 0.8339849455214231, 0.9109344104254649, 0.9669138743101213, 0.9503712900963834, 0.9444842541441154, 0.7865527394177878, 0.500058911951884, 0.7821880764595011, 0.8401103438022129, 0.6927725662122917, 0.5711083663457928, 0.8947151965627762, 0.9420050660369494, 0.7761391783604946, 0.9512693309096103, 0.5677893088427866, 0.7763879223350485, 0.26765125761038455, 0.9748374025939537, 0.9613223573936736, 0.8980952928375916, 0.5797226856861304, 0.49489252880910334, 0.9498733743967636, 0.6783819388991533, 0.30278837455257246, 0.8113309149152709, 0.4196734157127252, 0.5331629480186568, 0.9258576635726143, 0.3913905692778357, 0.8952227470038512, 0.6, 0.47266766836385843, 0.9534278780598358, 0.9393217253155881, 0.8897945586059963, 0.3355749130492112, 0.3519314976036474, 0.8956002753268077, 0.3868507250835175, 0.919755073180808, 0.3455555205176508, 0.4954735182274035, 0.9427008679312978, 0.7222654429589042, 0.3816802695568956, 0.8759700055210595, 0.7052622199542771, 0.9732456940628658, 0.817850581479403, 0.30170344560588463, 0.6530343130668756, 0.7934303369700066, 0.9395924195155734, 0.4953415641367399, 0.6823223768377601, 0.9294284870142819, 0.37462332268897325, 0.37224533982578545, 0.4191471722230175, 0.9393874070011292, 0.9343166704551076, 0.6743463267475431, 0.4094542044720756, 0.3357637568330429]
Finish training and take 1h20m
Namespace(log_name='./xcodeeval/3/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/3/hard0_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=3)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main() { int t,i=1; scanf("%d",&t); while(i<=t)  {  int s,a,b,c,d;  scanf("%d%d%d%d",&s,&a,&b,&c);  d=(s/c)+((s/a)*b);  printf("%d",d);  } return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main() { long long s,a,b,c,d,p; int t,i; scanf("%d",&t); for(i=1;i<=t;i++)  {  scanf("%I64d%I64d%I64d%I64d",&s,&a,&b,&c);  p=s/c;  d=(p)+((p/a)*b);  printf("%I64d\\n",d);  } return 0; }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10
