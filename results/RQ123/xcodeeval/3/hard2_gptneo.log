Namespace(log_name='./xcodeeval/3/hard2_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/3/hard2_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/3/hard2_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/3/hard2_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'Fix the bug in', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': ' #include <stdio.h>  void merge_sort(int* array, int start, int end, int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int sum;  int n, q;  int min, on_dis;  scanf("%d %d", &n, &q);  int items[n];  int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   for(int i = 0; i < q; i++)  {   sum = 0;   scanf("%d %d", &min, &on_dis);   for(int x = min - 1; x > min - 1 - on_dis; x--)    sum += items[x];   printf("%d\\n", sum);  } }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h>  void merge_sort(int* array, int start, int end, long long int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int n, q;  int min, on_dis;  long long int sum;  scanf("%d %d", &n, &q);  int items[n];  long long int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   supp[n-1] = items[n-1];  for(int x = n-2; x >= 0; x--)   supp[x] = supp[x+1] + (long long int) items[x];   for(int i = 0; i < q; i++)  {   scanf("%d %d", &min, &on_dis);   if(min != n)    sum = supp[min - on_dis] - supp[min];   else    sum = supp[min - on_dis];   printf("%lld\\n", sum);  } }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 2.591532982240754e+27
  global_step = 182
  train_loss = 147.9291
  ********************
Previous best ppl:inf
Achieve Best ppl:2.591532982240754e+27
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
Namespace(log_name='./xcodeeval/3/hard2_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/3/hard2_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'Fix the bug in', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': ' #include <stdio.h>  void merge_sort(int* array, int start, int end, int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int sum;  int n, q;  int min, on_dis;  scanf("%d %d", &n, &q);  int items[n];  int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   for(int i = 0; i < q; i++)  {   sum = 0;   scanf("%d %d", &min, &on_dis);   for(int x = min - 1; x > min - 1 - on_dis; x--)    sum += items[x];   printf("%d\\n", sum);  } }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h>  void merge_sort(int* array, int start, int end, long long int* supp) {  int il, ir;  int size = end - start;  int mid;  if(size <= 1)   return;   mid = start + size/2;  merge_sort(array, start, mid, supp);  merge_sort(array, mid, end, supp);   il = start;  ir = mid;  for(int i = start; i < end; i++)  {   if(ir >= end)   {    supp[i] = array[il];    il++;   }   else if(il >= mid)   {    supp[i] = array[ir];    ir++;   }   else if(array[il] > array[ir])   {    supp[i] = array[il];    il++;   }   else   {    supp[i] = array[ir];    ir++;   }  }   for(int i = start; i < end; i++)   array[i] = supp[i]; }  int main() {  int n, q;  int min, on_dis;  long long int sum;  scanf("%d %d", &n, &q);  int items[n];  long long int supp[n];  for(int x = 0; x < n; x++)   scanf("%d", items + x);  merge_sort(items, 0, n, supp);   supp[n-1] = items[n-1];  for(int x = n-2; x >= 0; x--)   supp[x] = supp[x+1] + (long long int) items[x];   for(int i = 0; i < q; i++)  {   scanf("%d %d", &min, &on_dis);   if(min != n)    sum = supp[min - on_dis] - supp[min];   else    sum = supp[min - on_dis];   printf("%lld\\n", sum);  } }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 2.591532982240754e+27
  global_step = 182
  train_loss = 147.9291
  ********************
Previous best ppl:inf
Achieve Best ppl:2.591532982240754e+27
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 75.11 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:75.11
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 1.0212018812090639e+25
  global_step = 363
  train_loss = 62.5206
  ********************
Previous best ppl:2.591532982240754e+27
Achieve Best ppl:1.0212018812090639e+25
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 76.24 	 Previous best codebleu 75.11
  ********************
 Achieve Best bleu:76.24
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 2.0439522237380268e+18
  global_step = 544
  train_loss = 44.9986
  ********************
Previous best ppl:1.0212018812090639e+25
Achieve Best ppl:2.0439522237380268e+18
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 76.86 	 Previous best codebleu 76.24
  ********************
 Achieve Best bleu:76.86
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 3
  eval_ppl = 1.2002947495576596e+42
  global_step = 725
  train_loss = 30.1028
  ********************
Previous best ppl:2.0439522237380268e+18
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 76.84 	 Previous best codebleu 76.86
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 4
  eval_ppl = 1.519092702344569e+36
  global_step = 906
  train_loss = 18.6339
  ********************
Previous best ppl:2.0439522237380268e+18
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 77.15 	 Previous best codebleu 76.86
  ********************
 Achieve Best bleu:77.15
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 5
  eval_ppl = 2.787131231241915e+61
  global_step = 1087
  train_loss = 10.38
  ********************
Previous best ppl:2.0439522237380268e+18
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 76.73 	 Previous best codebleu 77.15
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 6
  eval_ppl = 6.460816873028496e+59
  global_step = 1268
  train_loss = 5.5045
  ********************
Previous best ppl:2.0439522237380268e+18
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 76.2 	 Previous best codebleu 77.15
  ********************
early stopping!!!
reload model from xcodeeval/3/hard2_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/3/test.jsonl
  codebleu = 73.35 
  Total = 135 
  Exact Fixed = 0 
[]
  Syntax Fixed = 1 
[33]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 135 
  Exact Fixed = 0 
[]
  Syntax Fixed = 1 
[33]
  Cleaned Fixed = 0 
[]
  codebleu = 73.35 
[0.3617480070373208, 0.9042963977073442, 0.7202295747373295, 0.9010735405440001, 0.9619171934467499, 0.893100648459322, 0.9449976256293475, 0.8230357540316777, 0.4226359113151693, 0.9009033398835717, 0.9823448177520746, 0.8663498125237098, 0.34973329862864894, 0.9570869332853229, 0.3776268460097124, 0.035053425263124334, 0.9785699270907009, 0.6933524925068217, 0.7431425389347319, 0.5735025861665138, 0.653157845848791, 0.9574323968066438, 0.8221407247627905, 0.9875210304182462, 0.6654215364534176, 0.41747534088469995, 0.7841800618505234, 0.35180623422999957, 0.7109048809819914, 0.9521775318277603, 0.5954325698450644, 0.9297231589698145, 0.9699392701042773, 0.9603993074058133, 0.969845655904032, 0.936202385969982, 0.9524853244670329, 0.915025578756232, 0.9385052142138702, 0.9666856331752072, 0.7093986554791457, 0.9863897577460858, 0.4661457657509186, 0.7152844191691603, 0.507840855596531, 0.6979992307267114, 0.24850060443862515, 0.4591342796520741, 0.21426390108137944, 0.5268325463947411, 0.773294925109081, 0.8912012911490845, 0.6181106606584272, 0.8736766170158925, 0.8015037798696131, 0.7345075022043217, 0.9765120913566805, 0.9351138324638577, 0.0, 0.9396008379590448, 0.9704154306115744, 0.7331472448108353, 0.8019711204854889, 0.6942869107079883, 0.7389948220496618, 0.7554875727908226, 0.9164004700920496, 0.36061972031006984, 0.18295322094121697, 0.6051360445790503, 0.9363269494366926, 0.847371261143151, 0.9055073576552588, 0.9048701495297162, 0.5802669448337419, 0.4168887956724394, 0.9435265486810231, 0.7387906006255276, 0.9321464674982427, 0.9815131849449621, 0.8830655555013505, 0.7786698388914352, 0.5226379049337164, 0.9420317788392338, 0.9583676774082095, 0.8855070188951881, 0.2879500430638435, 0.757065990711629, 0.927607533719276, 0.7515102706127055, 0.41474785475115006, 0.9631318837364407, 0.46848224767065627, 0.8769995423779695, 0.937681665590131, 0.3735820752858664, 0.3009935045735329, 0.9758294505908078, 0.6362439585829495, 0.5485758102570153, 0.7596214010938644, 0.8905074545882428, 0.9094138799425013, 0.9527478529979099, 0.4119868159157424, 0.7035810691522985, 0.9621066660548456, 0.973200733636699, 0.883237133097275, 0.770544479233286, 0.8194861733303633, 0.8928128210945263, 0.7649262393799658, 0.7600052723171462, 0.8547079060789511, 0.7992767558979255, 0.6120229206037862, 0.4262386448606621, 0.8896838162934492, 0.8693169871641437, 0.47597751110490766, 0.4519913608955546, 0.9226644802101653, 0.9842293971176908, 0.4116626616814282, 0.9015663655704262, 0.49980537923224966, 0.5801827547369055, 0.7339395463105007, 0.9148900350316092, 0.5985680617000989, 0.9214122518347101, 0.4165238928559359, 0.5126668794851527, 0.7540395494979106]
Finish training and take 1h38m
Namespace(log_name='./xcodeeval/3/hard2_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/3/hard2_gptneo', data_dir='./data/xcodeeval/3', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'Fix the bug in', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': ' #include<stdio.h> int main() { int t,i=1; scanf("%d",&t); while(i<=t)  {  int s,a,b,c,d;  scanf("%d%d%d%d",&s,&a,&b,&c);  d=(s/c)+((s/a)*b);  printf("%d",d);  } return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main() { long long s,a,b,c,d,p; int t,i; scanf("%d",&t); for(i=1;i<=t;i++)  {  scanf("%I64d%I64d%I64d%I64d",&s,&a,&b,&c);  p=s/c;  d=(p)+((p/a)*b);  printf("%I64d\\n",d);  } return 0; }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 446825853327411.5
  global_step = 182
  train_loss = 144.7762
  ********************
Previous best ppl:inf
Achieve Best ppl:446825853327411.5
  ********************
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 56.51 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:56.51
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 2.128162170588045e+31
  global_step = 363
  train_loss = 55.124
  ********************
Previous best ppl:446825853327411.5
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 75.46 	 Previous best codebleu 56.51
  ********************
 Achieve Best bleu:75.46
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 1.4128592011365786e+58
  global_step = 544
  train_loss = 39.1014
  ********************
Previous best ppl:446825853327411.5
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 73.68 	 Previous best codebleu 75.46
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 3
  eval_ppl = 2.0996072811162755e+77
  global_step = 725
  train_loss = 27.2253
  ********************
Previous best ppl:446825853327411.5
BLEU file: ./data/xcodeeval/3/validation.jsonl
  codebleu-4 = 75.03 	 Previous best codebleu 75.46
  ********************
early stopping!!!
reload model from xcodeeval/3/hard2_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/3/test.jsonl
  codebleu = 73.22 
  Total = 135 
  Exact Fixed = 2 
[27, 88]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 135 
  Exact Fixed = 2 
[27, 88]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  codebleu = 73.22 
[0.7802656127733693, 0.5037273577986543, 0.7019712814462249, 0.9471181623085654, 0.9759316203623163, 0.08651205986326166, 0.25656679901645385, 0.7669842146074164, 0.6498389062539932, 0.5030724841624163, 0.5564880010186164, 0.8164468849403668, 0.8805670984187464, 0.9432628994248902, 0.916463892916797, 0.9175636111085979, 0.38735431410528753, 0.947175667983928, 0.7822722252676139, 0.8106836338492169, 0.9270957719532509, 0.9735791100966684, 0.8333813540442871, 0.5524112337326081, 0.7657560530824576, 0.9450171055839813, 1.0, 0.8965812647575979, 0.5790261988125887, 0.8896800467143886, 0.91412960455335, 0.4328828981880556, 0.63014750305347, 0.9716642922960141, 0.5925258544448675, 0.8415834056802387, 0.739909040388661, 0.9025560323310975, 0.5717465644724119, 0.9670641264245079, 0.867980815381816, 0.8583791034780668, 0.9306240015142291, 0.955626584171517, 0.7807079788494218, 0.8470562047308248, 0.9623079709182942, 0.6205348202554555, 0.8806326343636817, 0.6196906864381054, 0.8182507607466507, 0.9828198222975641, 0.9549147975108003, 0.8633963363946109, 0.7801949080730365, 0.9648891735454908, 0.0, 0.9477813702498612, 0.951315622822358, 0.34403455269462924, 0.35624122019684656, 0.7982100679121421, 0.9217008915274616, 0.878087949536615, 0.7074937716355475, 0.9686885129204434, 0.9859658995808198, 0.15351946048762036, 0.9289471675486692, 0.8339849455214231, 0.9109344104254649, 0.9669138743101213, 0.9503712900963834, 0.9006565330934351, 0.788953668472954, 0.500058911951884, 0.6315769694647435, 0.8442873046602617, 0.6927725662122917, 0.8269793321315543, 0.8947151965627762, 0.9335701584411653, 0.7761391783604946, 0.9512693309096103, 0.5677893088427866, 0.7763879223350485, 0.26765125761038455, 1.0, 0.9613223573936736, 0.8980952928375916, 0.5797226856861304, 0.49863678767022296, 0.9498733743967636, 0.6783819388991533, 0.30278837455257246, 0.8333124373352575, 0.4196734157127252, 0.5331629480186568, 0.9258576635726143, 0.3913905692778357, 0.8952227470038512, 0.6, 0.47266766836385843, 0.9534278780598358, 0.9393217253155881, 0.8897945586059963, 0.3355749130492112, 0.35148053648224986, 0.8956002753268077, 0.3868507250835175, 0.919755073180808, 0.3369822254012048, 0.4954735182274035, 0.9427008679312978, 0.7222654429589042, 0.3816802695568956, 0.8759700055210595, 0.7052622199542771, 0.9732456940628658, 0.817850581479403, 0.2987802840434419, 0.6530343130668756, 0.7934303369700066, 0.9764351042658364, 0.4953415641367399, 0.6823223768377601, 0.9294284870142819, 0.37462332268897325, 0.37224533982578545, 0.4191471722230175, 0.9393874070011292, 0.9343166704551076, 0.6743463267475431, 0.4094542044720756, 0.3357637568330429]
Finish training and take 57m
