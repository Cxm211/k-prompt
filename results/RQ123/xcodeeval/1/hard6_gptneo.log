Namespace(log_name='./xcodeeval/1/hard6_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/1/hard6_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'Fix', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': ' #include<stdio.h> int main() {     int n,m,a[55],b[55],i,count=0,j,max;     while(scanf("%d",&n)!=EOF)     {         for(i=0;i<n;i++)         scanf("%d",&a[i]);         scanf("%d",&m);         for(i=0;i<m;i++)         scanf("%d",&b[i]);         max=b[0]/a[0];         for(i=0;i<n;i++)         {             for(j=0;j<m;j++)             {                 if(b[j]%a[i]==0)                 {                     if(b[j]/a[i]==max)                     {                         count++;                         continue;                     }                      if(b[j]/a[i]>max)                     {                          max=b[j]/a[i];                          count=1;                     }                  }             }         }         printf("%d\\n",count);     }     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': ' is buggy program', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is fixed program', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main() {     int n,m,a[55],b[55],i,count=1,j,max;     while(scanf("%d",&n)!=EOF)     {         for(i=0;i<n;i++)         scanf("%d",&a[i]);         scanf("%d",&m);         for(i=0;i<m;i++)         scanf("%d",&b[i]);         max=0;         for(i=0;i<n;i++)         {             for(j=0;j<m;j++)             {                 if(b[j]%a[i]==0)                 {                     if(b[j]/a[i]==max)                     {                         count++;                         continue;                     }                      if(b[j]/a[i]>max)                     {                          max=b[j]/a[i];                          count=1;                     }                  }             }         }         printf("%d\\n",count);     }     return 0; }'}]
***** Running training *****
  Num examples = 871
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 108
  Batch size = 4
  epoch = 0
  eval_ppl = 3.8523564482697296e+82
  global_step = 147
  train_loss = 164.9324
  ********************
Previous best ppl:inf
Achieve Best ppl:3.8523564482697296e+82
  ********************
BLEU file: ./data/xcodeeval/1/validation.jsonl
Namespace(log_name='./xcodeeval/1/hard6_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/1/hard6_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Namespace(log_name='./xcodeeval/1/hard6_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/1/hard6_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'Fix', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': ' #include <stdio.h> #include <stdlib.h> void insertSort(int* a, int size) {     int i, j, tmp;     for (i = 1; i < size; ++i)     {         tmp = a[i];         for (j = i - 1; j >= 0 && a[j] < tmp; --j)             a[j + 1] = a[j];         a[j + 1] = tmp;     } } int check(int* a,int* b,int size) {     int i;     for(i=0;i<size;i++)     if (a[i]!=b[i]) return (a[i]);     return a[i]; } int main() {     int i,n,o1,o2;     scanf("%d",&n);     int a[n],b[n-1];     for (i=0;i<n;i++)         scanf("%d",&a[i]);     insertSort(a,n);     puts("First");     for (i=0;i<n-1;i++)         scanf("%d",&b[i]);     insertSort(b,n-1);     puts("Sec1");     o1=check(a,b,n);     puts("Sec2");     for (i=0;i<n-2;i++)         scanf("%d",&a[i]);     insertSort(a,n-2);     puts("Thir1");     o2=check(b,a,n-2);     puts("Thir2");     printf("%d\\n%d",o1,o2);     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': ' is buggy program', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is fixed program', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h> #include <stdlib.h>  int main() {     int i,n,x;     __int64 a=0,b=0,c=0;     scanf("%d",&n);     for (i=0; i<n; i++)     {         scanf("%d",&x);         a+=x;     }     for (i=0; i<n-1; i++)     {         scanf("%d",&x);         b+=x;     }     for (i=0; i<n-2; i++)     {         scanf("%d",&x);         c+=x;      }     printf("%I64d\\n%I64d",a-b,b-c);     return 0; }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10
Model created!!
[[{'text': 'Fix', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': ' #include <stdio.h> #include <stdlib.h> void insertSort(int* a, int size) {     int i, j, tmp;     for (i = 1; i < size; ++i)     {         tmp = a[i];         for (j = i - 1; j >= 0 && a[j] < tmp; --j)             a[j + 1] = a[j];         a[j + 1] = tmp;     } } int check(int* a,int* b,int size) {     int i;     for(i=0;i<size;i++)     if (a[i]!=b[i]) return (a[i]);     return a[i]; } int main() {     int i,n,o1,o2;     scanf("%d",&n);     int a[n],b[n-1];     for (i=0;i<n;i++)         scanf("%d",&a[i]);     insertSort(a,n);     puts("First");     for (i=0;i<n-1;i++)         scanf("%d",&b[i]);     insertSort(b,n-1);     puts("Sec1");     o1=check(a,b,n);     puts("Sec2");     for (i=0;i<n-2;i++)         scanf("%d",&a[i]);     insertSort(a,n-2);     puts("Thir1");     o2=check(b,a,n-2);     puts("Thir2");     printf("%d\\n%d",o1,o2);     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': ' is buggy program', 'loss_ids': 0, 'shortenable_ids': 0}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is fixed program', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h> #include <stdlib.h>  int main() {     int i,n,x;     __int64 a=0,b=0,c=0;     scanf("%d",&n);     for (i=0; i<n; i++)     {         scanf("%d",&x);         a+=x;     }     for (i=0; i<n-1; i++)     {         scanf("%d",&x);         b+=x;     }     for (i=0; i<n-2; i++)     {         scanf("%d",&x);         c+=x;      }     printf("%I64d\\n%I64d",a-b,b-c);     return 0; }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 4.129486051963903e+109
  global_step = 182
  train_loss = 145.6689
  ********************
Previous best ppl:inf
Achieve Best ppl:4.129486051963903e+109
  ********************
BLEU file: ./data/xcodeeval/1/validation.jsonl
  epoch = 0
  eval_ppl = 4.129486051963903e+109
  global_step = 182
  train_loss = 145.6689
  ********************
Previous best ppl:inf
Achieve Best ppl:4.129486051963903e+109
  ********************
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 74.54 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:74.54
  ********************
  codebleu-4 = 74.54 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:74.54
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 4.025127911752732e+120
  global_step = 363
  train_loss = 56.6582
  ********************
Previous best ppl:4.129486051963903e+109
BLEU file: ./data/xcodeeval/1/validation.jsonl
  epoch = 1
  eval_ppl = 4.025127911752732e+120
  global_step = 363
  train_loss = 56.6582
  ********************
Previous best ppl:4.129486051963903e+109
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 75.13 	 Previous best codebleu 74.54
  ********************
 Achieve Best bleu:75.13
  ********************
  codebleu-4 = 75.12 	 Previous best codebleu 74.54
  ********************
 Achieve Best bleu:75.12
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 4.3610508577821324e+136
  global_step = 544
  train_loss = 40.6616
  ********************
Previous best ppl:4.129486051963903e+109
BLEU file: ./data/xcodeeval/1/validation.jsonl

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 4.3610508577821324e+136
  global_step = 544
  train_loss = 40.6616
  ********************
Previous best ppl:4.129486051963903e+109
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 72.85 	 Previous best codebleu 75.13
  ********************
  codebleu-4 = 72.85 	 Previous best codebleu 75.12
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 3
  eval_ppl = 2.881299003691025e+145
  global_step = 725
  train_loss = 27.5664
  ********************
Previous best ppl:4.129486051963903e+109
BLEU file: ./data/xcodeeval/1/validation.jsonl

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 3
  eval_ppl = 2.881299003691025e+145
  global_step = 725
  train_loss = 27.5664
  ********************
Previous best ppl:4.129486051963903e+109
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 69.06 	 Previous best codebleu 75.13
  ********************
early stopping!!!
reload model from xcodeeval/1/hard6_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/1/test.jsonl
  codebleu-4 = 69.06 	 Previous best codebleu 75.12
  ********************
early stopping!!!
reload model from xcodeeval/1/hard6_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/1/test.jsonl
  codebleu = 75.78 
  Total = 135 
  Exact Fixed = 0 
[]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 1 
[77]
  ********************
  Total = 135 
  Exact Fixed = 0 
[]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 1 
[77]
  codebleu = 75.78 
[0.6767997122576446, 0.9752926493864778, 0.8419188985107608, 0.8399493211101225, 0.5511737119063814, 0.8995033054005415, 0.655233513178001, 0.8131660563421435, 0.32999999999999996, 0.9295757649014529, 0.6700100781693141, 0.8881108167610436, 0.8920012172763082, 0.8922221884406468, 0.9250674011252755, 0.7938229814514498, 0.6068707460804744, 0.8404529616123491, 0.9126650482788027, 0.9832612094993938, 0.9498733743967636, 0.762080557522302, 0.8731482897621885, 0.9304372254539681, 0.6318582899284725, 0.8986391637385749, 0.48856957394053624, 0.81553302790131, 0.943601919551823, 0.9105303480576279, 0.960441627608561, 0.8447195573555475, 0.5003910292067191, 0.9389707093964361, 0.8416184535678177, 0.973858151522893, 0.639224154794541, 0.9365819013624168, 0.581538255637353, 0.9308597998712593, 0.6432679507343982, 0.6754292375001995, 0.41833335359899526, 0.49863678767022296, 0.7149195155805301, 0.8113426217022974, 0.9465012851429597, 0.973858151522893, 0.5527764741944027, 0.7569630859948919, 0.9082025886090443, 0.33580645216805804, 0.8951897380698428, 0.7927906556865255, 0.46344533813736777, 0.9333310235672049, 0.8426504317083834, 0.6778336766746159, 0.9724622741167745, 0.5421151798840189, 0.9492384172683168, 0.936202385969982, 0.5077214223305908, 0.9702812943440167, 0.9874055782608233, 0.5760063911739549, 0.9334580759528754, 0.2857544178174171, 0.7598076383450478, 0.8753772142950917, 0.39101342264848765, 0.9604294079167424, 0.3834792087915446, 0.9144280008120838, 0.8760369670517594, 0.8853319268748503, 0.8791990328029993, 0.7848045983125, 0.8644554554879766, 0.8454546086981599, 0.7448854979979707, 0.7153375795187605, 0.8527875420817158, 0.9128071327141931, 0.9211015110316767, 0.8917793747666807, 0.7767818873134813, 0.8424197834374936, 0.9500945432920989, 0.5486000664520928, 0.9617625014218179, 0.8963430088316504, 0.4934678370724654, 0.9109545424921657, 0.5355322041447821, 0.9498733743967636, 0.7253025503608977, 0.9080031942403051, 0.5076943976918459, 0.906923058378295, 0.8952653125269923, 0.6202958011286538, 0.7116790112870959, 0.2572497507889638, 0.7556814728598797, 0.9582778026878329, 0.5888846211811357, 0.9365739931432338, 0.29943997880421824, 0.8266441309034642, 0.3752162382299256, 0.8165942095410831, 0.7639496783614648, 0.5412219101899178, 0.5102601887697077, 0.9442248897793943, 0.9692439075113215, 0.7929436912800465, 0.7741939441431783, 0.47854531008265005, 0.9130377695006986, 0.37828106820249585, 0.9110073987910705, 0.34048434278213535, 0.8119506730626463, 0.7465159236097789, 0.7286144481170467, 0.8241554247996095, 0.45601045567543047, 0.7761988507965935, 0.608533189887053, 0.9142918920357144, 0.910618969189708, 0.3, 0.7279692304347927]
Finish training and take 1h41m
  codebleu = 75.78 
  Total = 135 
  Exact Fixed = 0 
[]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 1 
[77]
  ********************
  Total = 135 
  Exact Fixed = 0 
[]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 1 
[77]
  codebleu = 75.78 
[0.6767997122576446, 0.9752926493864778, 0.8419188985107608, 0.8399493211101225, 0.5511737119063814, 0.8995033054005415, 0.655233513178001, 0.8131660563421435, 0.32999999999999996, 0.9295757649014529, 0.6700100781693141, 0.8881108167610436, 0.8920012172763082, 0.8922221884406468, 0.9250674011252755, 0.7938229814514498, 0.6068707460804744, 0.8404529616123491, 0.9126650482788027, 0.9832612094993938, 0.9498733743967636, 0.762080557522302, 0.8731482897621885, 0.9304372254539681, 0.6318582899284725, 0.8986391637385749, 0.48856957394053624, 0.81553302790131, 0.943601919551823, 0.9105303480576279, 0.960441627608561, 0.8447195573555475, 0.5003910292067191, 0.9389707093964361, 0.8416184535678177, 0.973858151522893, 0.6298491547945411, 0.9365819013624168, 0.581538255637353, 0.9308597998712593, 0.6432679507343982, 0.6754292375001995, 0.41833335359899526, 0.49863678767022296, 0.7149195155805301, 0.8113426217022974, 0.9465012851429597, 0.973858151522893, 0.5527764741944027, 0.7569630859948919, 0.9082025886090443, 0.33580645216805804, 0.8951897380698428, 0.7927906556865255, 0.46344533813736777, 0.9333310235672049, 0.8426504317083834, 0.6778336766746159, 0.9724622741167745, 0.5421151798840189, 0.9492384172683168, 0.936202385969982, 0.5077214223305908, 0.9702812943440167, 0.9874055782608233, 0.5760063911739549, 0.9334580759528754, 0.2857544178174171, 0.7598076383450478, 0.8753772142950917, 0.39101342264848765, 0.9604294079167424, 0.3834792087915446, 0.9144280008120838, 0.8760369670517594, 0.8853319268748503, 0.8791990328029993, 0.7848045983125, 0.8644554554879766, 0.8454546086981599, 0.7448854979979707, 0.7153375795187605, 0.8527875420817158, 0.9128071327141931, 0.9211015110316767, 0.8917793747666807, 0.7767818873134813, 0.8424197834374936, 0.9500945432920989, 0.5486000664520928, 0.9617625014218179, 0.8963430088316504, 0.4934678370724654, 0.9109545424921657, 0.5355322041447821, 0.9498733743967636, 0.7253025503608977, 0.9080031942403051, 0.5076943976918459, 0.906923058378295, 0.8952653125269923, 0.6202958011286538, 0.7116790112870959, 0.2572497507889638, 0.7556814728598797, 0.9582778026878329, 0.5888846211811357, 0.9365739931432338, 0.29943997880421824, 0.8266441309034642, 0.3752162382299256, 0.8165942095410831, 0.7639496783614648, 0.5412219101899178, 0.5102601887697077, 0.9442248897793943, 0.9692439075113215, 0.7929436912800465, 0.7741939441431783, 0.47854531008265005, 0.9130377695006986, 0.37828106820249585, 0.9110073987910705, 0.34048434278213535, 0.8119506730626463, 0.7465159236097789, 0.7286144481170467, 0.8241554247996095, 0.45601045567543047, 0.7761988507965935, 0.608533189887053, 0.9142918920357144, 0.910618969189708, 0.3, 0.7279692304347927]
Finish training and take 1h41m
