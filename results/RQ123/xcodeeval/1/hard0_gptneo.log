Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h> #include <stdlib.h> #include <stdbool.h> #include <math.h>  int emp[2005][2005], level[2005], S[2005], max = 1;  void solve(int ind) {     int i;     for (i = 1; i <= emp[ind][0]; i++) {         level[emp[ind][i]] = level[ind] + 1;         //printf("%d=>%d %d\\n", emp[ind][i], level[emp[ind][i]], emp[emp[ind][i]][0]);         if (level[emp[ind][i]] > max)             max = level[emp[ind][i]];          if (emp[emp[ind][i]][0] != 0)             solve(emp[ind][i]);     } }  int main(void) {     int i, j, n, ch, scnt = 0, res = 0;      scanf("%d", &n);     //     //    for (i = 0; i <= n; i++) {     //        for (j = 0; j <= n; j++)     //            emp[i][j] = 0;     //        level[i] = 0;     //    }      for (i = 1; i <= n; i++) {         scanf("%d", &ch);         if (ch != -1) {             emp[ch][0]++;             emp[ch][emp[ch][0]] = i;         } else {             scnt++;             S[scnt] = i;             level[i] = 1;         }     }      //    for (i = 1; i <= n; i++) {     //        for (j = 1; j <= n; j++) {     //            printf("%d", emp[i][j]);     //        }     //        printf("\\n");     //    }      for (i = 1; i <= scnt; i++)         solve(i);      res = scnt - 1 - max - 1;     if (res < 0)         res = 0;      printf("%d\\n", max);      return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h> #include <stdlib.h> #include <stdbool.h> #include <math.h>  int emp[2005][2005], level[2005], S[2005], max = 1;  void solve(int ind) {     int i;     for (i = 1; i <= emp[ind][0]; i++) {         level[emp[ind][i]] = level[ind] + 1;         //printf("%d=>%d %d\\n", emp[ind][i], level[emp[ind][i]], emp[emp[ind][i]][0]);         if (level[emp[ind][i]] > max)             max = level[emp[ind][i]];          if (emp[emp[ind][i]][0] != 0)             solve(emp[ind][i]);     } }  int main(void) {     int i, j, n, ch, scnt = 0, res = 0;      scanf("%d", &n);      //    for (i = 0; i <= n; i++) {     //        for (j = 0; j <= n; j++)     //            emp[i][j] = 0;     //        level[i] = 0;     //    }      for (i = 1; i <= n; i++) {         scanf("%d", &ch);         if (ch != -1) {             emp[ch][0]++;             emp[ch][emp[ch][0]] = i;         } else {             scnt++;             S[scnt] = i;             level[i] = 1;         }     } // //    for (i = 1; i <= n; i++) { //        for (j = 1; j <= n; j++) { //            printf("%d", emp[i][j]); //        } //        printf("\\n"); //    }      for (i = 1; i <= scnt; i++)         solve(S[i]);      res = scnt - 1 - max - 1;     if (res < 0)         res = 0;      printf("%d\\n", max);      return 0; }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h> #include <stdlib.h> #include <stdbool.h> #include <math.h>  int emp[2005][2005], level[2005], S[2005], max = 1;  void solve(int ind) {     int i;     for (i = 1; i <= emp[ind][0]; i++) {         level[emp[ind][i]] = level[ind] + 1;         //printf("%d=>%d %d\\n", emp[ind][i], level[emp[ind][i]], emp[emp[ind][i]][0]);         if (level[emp[ind][i]] > max)             max = level[emp[ind][i]];          if (emp[emp[ind][i]][0] != 0)             solve(emp[ind][i]);     } }  int main(void) {     int i, j, n, ch, scnt = 0, res = 0;      scanf("%d", &n);     //     //    for (i = 0; i <= n; i++) {     //        for (j = 0; j <= n; j++)     //            emp[i][j] = 0;     //        level[i] = 0;     //    }      for (i = 1; i <= n; i++) {         scanf("%d", &ch);         if (ch != -1) {             emp[ch][0]++;             emp[ch][emp[ch][0]] = i;         } else {             scnt++;             S[scnt] = i;             level[i] = 1;         }     }      //    for (i = 1; i <= n; i++) {     //        for (j = 1; j <= n; j++) {     //            printf("%d", emp[i][j]);     //        }     //        printf("\\n");     //    }      for (i = 1; i <= scnt; i++)         solve(i);      res = scnt - 1 - max - 1;     if (res < 0)         res = 0;      printf("%d\\n", max);      return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h> #include <stdlib.h> #include <stdbool.h> #include <math.h>  int emp[2005][2005], level[2005], S[2005], max = 1;  void solve(int ind) {     int i;     for (i = 1; i <= emp[ind][0]; i++) {         level[emp[ind][i]] = level[ind] + 1;         //printf("%d=>%d %d\\n", emp[ind][i], level[emp[ind][i]], emp[emp[ind][i]][0]);         if (level[emp[ind][i]] > max)             max = level[emp[ind][i]];          if (emp[emp[ind][i]][0] != 0)             solve(emp[ind][i]);     } }  int main(void) {     int i, j, n, ch, scnt = 0, res = 0;      scanf("%d", &n);      //    for (i = 0; i <= n; i++) {     //        for (j = 0; j <= n; j++)     //            emp[i][j] = 0;     //        level[i] = 0;     //    }      for (i = 1; i <= n; i++) {         scanf("%d", &ch);         if (ch != -1) {             emp[ch][0]++;             emp[ch][emp[ch][0]] = i;         } else {             scnt++;             S[scnt] = i;             level[i] = 1;         }     } // //    for (i = 1; i <= n; i++) { //        for (j = 1; j <= n; j++) { //            printf("%d", emp[i][j]); //        } //        printf("\\n"); //    }      for (i = 1; i <= scnt; i++)         solve(S[i]);      res = scnt - 1 - max - 1;     if (res < 0)         res = 0;      printf("%d\\n", max);      return 0; }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h> #include <stdlib.h> #include <stdbool.h> #include <math.h>  int emp[2005][2005], level[2005], S[2005], max = 1;  void solve(int ind) {     int i;     for (i = 1; i <= emp[ind][0]; i++) {         level[emp[ind][i]] = level[ind] + 1;         //printf("%d=>%d %d\\n", emp[ind][i], level[emp[ind][i]], emp[emp[ind][i]][0]);         if (level[emp[ind][i]] > max)             max = level[emp[ind][i]];          if (emp[emp[ind][i]][0] != 0)             solve(emp[ind][i]);     } }  int main(void) {     int i, j, n, ch, scnt = 0, res = 0;      scanf("%d", &n);     //     //    for (i = 0; i <= n; i++) {     //        for (j = 0; j <= n; j++)     //            emp[i][j] = 0;     //        level[i] = 0;     //    }      for (i = 1; i <= n; i++) {         scanf("%d", &ch);         if (ch != -1) {             emp[ch][0]++;             emp[ch][emp[ch][0]] = i;         } else {             scnt++;             S[scnt] = i;             level[i] = 1;         }     }      //    for (i = 1; i <= n; i++) {     //        for (j = 1; j <= n; j++) {     //            printf("%d", emp[i][j]);     //        }     //        printf("\\n");     //    }      for (i = 1; i <= scnt; i++)         solve(i);      res = scnt - 1 - max - 1;     if (res < 0)         res = 0;      printf("%d\\n", max);      return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h> #include <stdlib.h> #include <stdbool.h> #include <math.h>  int emp[2005][2005], level[2005], S[2005], max = 1;  void solve(int ind) {     int i;     for (i = 1; i <= emp[ind][0]; i++) {         level[emp[ind][i]] = level[ind] + 1;         //printf("%d=>%d %d\\n", emp[ind][i], level[emp[ind][i]], emp[emp[ind][i]][0]);         if (level[emp[ind][i]] > max)             max = level[emp[ind][i]];          if (emp[emp[ind][i]][0] != 0)             solve(emp[ind][i]);     } }  int main(void) {     int i, j, n, ch, scnt = 0, res = 0;      scanf("%d", &n);      //    for (i = 0; i <= n; i++) {     //        for (j = 0; j <= n; j++)     //            emp[i][j] = 0;     //        level[i] = 0;     //    }      for (i = 1; i <= n; i++) {         scanf("%d", &ch);         if (ch != -1) {             emp[ch][0]++;             emp[ch][emp[ch][0]] = i;         } else {             scnt++;             S[scnt] = i;             level[i] = 1;         }     } // //    for (i = 1; i <= n; i++) { //        for (j = 1; j <= n; j++) { //            printf("%d", emp[i][j]); //        } //        printf("\\n"); //    }      for (i = 1; i <= scnt; i++)         solve(S[i]);      res = scnt - 1 - max - 1;     if (res < 0)         res = 0;      printf("%d\\n", max);      return 0; }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h> #include <stdlib.h>  int main() {     int n,m,i,j;     scanf("%d%d",&n,&m);     char a[m+1],b[m+1];     for(i=0;i<m-1;i++)     {      a[i]=\'#\';      b[i]=\'.\';     }      a[m-1]=\'#\';      b[m-1]=\'#\';     for(i=0;i<n/2;i++)     {         for(j=0;j<m;j++)         printf("%c",a[j]);         printf("\\n");         for(j=0;j<m;j++)         printf("%c",b[j]);         printf("\\n");     }         for(j=0;j<m;j++)         printf("%c",a[j]);     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h> #include <stdlib.h>  int main() {     int n,m,i,j,d=0;     scanf("%d%d",&n,&m);     char a[m+1],b[m+1],c[m+1];     for(i=0;i<m-1;i++)     {      a[i]=\'#\';      b[i]=\'.\';      c[i+1]=\'.\';     }      a[m-1]=\'#\';      b[m-1]=\'#\';      c[0]=\'#\';     for(i=0;i<n/2;i++)     {   if(d%2==0){         for(j=0;j<m;j++)         printf("%c",a[j]);         printf("\\n");         for(j=0;j<m;j++)         printf("%c",b[j]);         printf("\\n");     }     else {        for(j=0;j<m;j++)         printf("%c",a[j]);         printf("\\n");         for(j=0;j<m;j++)         printf("%c",c[j]);         printf("\\n");       }  d++;     }         for(j=0;j<m;j++)         printf("%c",a[j]);     return 0; }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h> #include <stdlib.h>  int main() {     int n,m,i,j;     scanf("%d%d",&n,&m);     char a[m+1],b[m+1];     for(i=0;i<m-1;i++)     {      a[i]=\'#\';      b[i]=\'.\';     }      a[m-1]=\'#\';      b[m-1]=\'#\';     for(i=0;i<n/2;i++)     {         for(j=0;j<m;j++)         printf("%c",a[j]);         printf("\\n");         for(j=0;j<m;j++)         printf("%c",b[j]);         printf("\\n");     }         for(j=0;j<m;j++)         printf("%c",a[j]);     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h> #include <stdlib.h>  int main() {     int n,m,i,j,d=0;     scanf("%d%d",&n,&m);     char a[m+1],b[m+1],c[m+1];     for(i=0;i<m-1;i++)     {      a[i]=\'#\';      b[i]=\'.\';      c[i+1]=\'.\';     }      a[m-1]=\'#\';      b[m-1]=\'#\';      c[0]=\'#\';     for(i=0;i<n/2;i++)     {   if(d%2==0){         for(j=0;j<m;j++)         printf("%c",a[j]);         printf("\\n");         for(j=0;j<m;j++)         printf("%c",b[j]);         printf("\\n");     }     else {        for(j=0;j<m;j++)         printf("%c",a[j]);         printf("\\n");         for(j=0;j<m;j++)         printf("%c",c[j]);         printf("\\n");       }  d++;     }         for(j=0;j<m;j++)         printf("%c",a[j]);     return 0; }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> #include<stdlib.h> int main(){  int t,*bl,n,k,j,res,in,temp,i,arr[200000];  scanf("%d",&t);  while(t--){   res=0;   scanf("%d %d",&n,&k);   for(i=0;i<n;i++)scanf("%d",&arr[i]);   bl=(int*)calloc(n,sizeof(int));   for(i=1;i<n-1;i++){    if(arr[i]>arr[i-1] && arr[i]>arr[i+1] ){     bl[i]=1;    }   }   for(i=0;i<=n-k;i++) {          temp=0;       for(j=i+1;j<i+k-1;j++){     if(bl[j])temp++;    }    if(temp>res){     res=temp;     in=i;    }    }  printf("%d %d\\n",res+1,in+1);     }    return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> #include<stdlib.h> int main(){  int t,*bl,n,ch,k,j,res,left,temp,i,arr[200000];    scanf("%d",&t);  while(t--){   ch=0;   res=0;   scanf("%d %d",&n,&k);   for(i=0;i<n;i++)scanf("%d",&arr[i]);   bl=(int*)calloc(n+1,sizeof(int));      for(i=1;i<n-1;i++){    if(arr[i]>arr[i-1] && arr[i]>arr[i+1] ){     bl[i]=1;     ch=1;    }   }  if(ch==0)printf("1 1\\n");  else{   for(i=0;i<=n-k+1;i++){    if(i==0){     for(j=1;j<=k-2;j++){      if(bl[j])res++;     }     left=0;      temp=res;    }    else{     if(bl[i])temp--;     if(bl[i+k-2])temp++;     if(temp>res){     // printf("i-%d\\n",i);      res=temp;      left=i;     }    }   }     printf("%d %d\\n",res+1,left+1);  }       }    return 0; }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h>  #include<string.h>  int main()  {   int t,hang[2],lie[2],k=0;   int n,i,j;   char a[500][500];   scanf("%d",&t);   while(t--)   {    k=0;    scanf("%d",&n);    getchar();   for(i=0;i<n;i++)   {    for(j=0;j<n;j++)//find the sym    {     scanf("%c",&a[i][j]);    }     getchar();   }   for(i=0;i<n;i++)   {    for(j=0;j<n;j++)    {     if(a[i][j]==\'*\')     {      hang[k]=i;      lie[k]=j;      k++;     }    }   }   if(n==2)   {    printf("**\\n**\\n");   }   if(n>2&&hang[0]==hang[1]&&hang[0]!=n-1)//in the same line   {    a[hang[0]+1][lie[0]]=\'*\';    a[hang[1]+1][lie[1]]=\'*\';   }    if(n>2&&hang[0]==hang[1]&&hang[0]==n-1)//in the same line   {    a[hang[0]-1][lie[0]]=\'*\';    a[hang[1]-1][lie[1]]=\'*\';   }   if(n>2&&lie[0]==lie[1]&&lie[0]!=n-1)//in the same row   {    a[hang[0]][lie[0]+1]=\'*\';    a[hang[1]][lie[1]+1]=\'*\';   }   if(n>2&&lie[0]==lie[1]&&lie[0]==n-1)//int the same row   {    a[hang[0]][lie[0]-1]=\'*\';    a[hang[1]][lie[1]-1]=\'*\';   }    if(n>2&&hang[0]!=hang[1]&&lie[0]!=lie[1])//hang lie doubutong   {    a[hang[0]][lie[1]]=\'*\';    a[hang[1]][lie[0]]=\'*\';   }   if(n>2)   {   for(i=0;i<n;i++)   {    for(j=0;j<n;j++)    {     printf("%c",a[i][j]);    }   }   printf("\\n");   }   }   return 0;  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h>  #include<string.h>  int main()  {   int t,hang[2],lie[2],k=0;   int n,i,j;   char a[500][500];   scanf("%d",&t);   while(t--)   {    k=0;    scanf("%d",&n);    getchar();   for(i=0;i<n;i++)   {    for(j=0;j<n;j++)//find the sym    {     scanf("%c",&a[i][j]);    }     getchar();   }   for(i=0;i<n;i++)   {    for(j=0;j<n;j++)    {     if(a[i][j]==\'*\')     {      hang[k]=i;      lie[k]=j;      k++;     }    }   }   if(n==2)   {    printf("**\\n**\\n");   }   if(n>2&&hang[0]==hang[1]&&hang[0]!=n-1)//in the same line   {    a[hang[0]+1][lie[0]]=\'*\';    a[hang[1]+1][lie[1]]=\'*\';   }    if(n>2&&hang[0]==hang[1]&&hang[0]==n-1)//in the same line   {    a[hang[0]-1][lie[0]]=\'*\';    a[hang[1]-1][lie[1]]=\'*\';   }   if(n>2&&lie[0]==lie[1]&&lie[0]!=n-1)//in the same row   {    a[hang[0]][lie[0]+1]=\'*\';    a[hang[1]][lie[1]+1]=\'*\';   }   if(n>2&&lie[0]==lie[1]&&lie[0]==n-1)//int the same row   {    a[hang[0]][lie[0]-1]=\'*\';    a[hang[1]][lie[1]-1]=\'*\';   }    if(n>2&&hang[0]!=hang[1]&&lie[0]!=lie[1])//hang lie doubutong   {    a[hang[0]][lie[1]]=\'*\';    a[hang[1]][lie[0]]=\'*\';   }   if(n>2)   {   for(i=0;i<n;i++)   {    for(j=0;j<n;j++)    {     printf("%c",a[i][j]);    }    printf("\\n");   }   }   }   return 0;  }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h>  #include<stdlib.h>  #include<math.h>  int main()  {    int t,n,j;    float tp1,tp2;     scanf("%d",&t);    for(j=0;j<t;j++)    {      scanf("%d",&n);      if(n%2!=0)      {        printf("NO\\n");        continue;      }      tp1=n/2;      if(sqrt(tp1)==(int)sqrt(tp1))      {        printf("YES\\n");        continue;      }      if(n%4==0)      {        tp1=n/4;        if(sqrt(tp1)==(int)sqrt(tp1))        {          printf("YES\\n");          continue;        }      }      printf("NO\\n");    }    return 0;  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h>  #include<stdlib.h>  #include<math.h>  int main()  {    int t,n,j;    double tp1,tp2;     scanf("%d",&t);    for(j=0;j<t;j++)    {      scanf("%d",&n);      if(n%2!=0)      {        printf("NO\\n");        continue;      }      tp1=n/2;      if(sqrt(tp1)==(int)sqrt(tp1))      {        printf("YES\\n");        continue;      }      if(n%4==0)      {        tp1=n/4;        if(sqrt(tp1)==(int)sqrt(tp1))        {          printf("YES\\n");          continue;        }      }      printf("NO\\n");    }    return 0;  }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include"stdio.h"  #include"math.h"  void solve(){      int n,x;      scanf("%d",&n);      if((n/2)%2==0){x=n/2+1;}      else{x=n/2;}      printf("%d\\n",x);   }      int main(){            int t;      scanf("%d",&t);      while(t--){          solve();                }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include"stdio.h"  #include"math.h"  void solve(){      int n,x;      scanf("%d",&n);      if(n%2==0){x=n/2;}      else{x=n/2+1;}      printf("%d\\n",x);   }      int main(){            int t;      scanf("%d",&t);      while(t--){          solve();                }  }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h>  int main() {   int n,k=0,s=0;   char a[n];   scanf(" %d",&n);   scanf(" %s",a);   while(k+1<n)   {     if((a[k]==\'a\'&&a[k+1]==\'b\')||(a[k]==\'b\'&&a[k+1]==\'a\')){}     else     {       if(a[k]==\'a\')         a[k]=\'b\';       else         a[k]=\'a\';       s++;     }     k=k+2;   }   printf("%d\\n",s);   printf("%s\\n",a);   return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h>  int main() {   int n,k=0,s=0;   scanf(" %d",&n);   char a[n];   scanf(" %s",a);   while(k+1<n)   {     if((a[k]==\'a\'&&a[k+1]==\'b\')||(a[k]==\'b\'&&a[k+1]==\'a\')){}     else     {       if(a[k]==\'a\')         a[k]=\'b\';       else         a[k]=\'a\';       s++;     }     k=k+2;   }   printf("%d\\n",s);   printf("%s\\n",a);   return 0; }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'i,j,t[5];char*X="S PR",s[101];f(){s[i]=X[j],t[j]--;}main(n){for(scanf("%*d");~scanf("%d%d%d%d%s",&n,t+4,t+3,t+1,s);){for(;s[i];i++)if(t[j=s[i]-80])n-=2,f();else s[i]=0;while(i)if(!s[--i]){for(j=0;!t[j];j++);f();}printf(n>0?"NO ":"YES %s ",s);}}', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': 'i,j,t[5];char*X="S PR",s[101];f(){s[i]=X[j],t[j]--;}main(n){for(scanf("%*d");~scanf("%d%d%d%d%s",&n,t+3,t+2,t,s);){for(;s[i];i++)if(t[j=s[i]-80])n-=2,f();else s[i]=0;while(i)if(!s[--i]){for(j=0;!t[j];j++);f();}printf(n>0?"NO ":"YES %s ",s);}}'}]
***** Running training *****
  Num examples = 2
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 132
  Batch size = 4
  epoch = 0
  eval_ppl = 1.2152621954378264e+70
  global_step = 2
  train_loss = 574.1302
  ********************
Previous best ppl:inf
Achieve Best ppl:1.2152621954378264e+70
  ********************
BLEU file: ./data/xcodeeval/1/validation.jsonl
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h>  int main ()  {      int z,x;      scanf("%d",&z);      for(x=0;x<z;x++)      {          int n,m;          scanf("%d%d",&n,&m);          int a[n+1];          a[n]=-99999999;          int i,j,k;          for(i=0;i<n;i++)          {              scanf("%d",&a[i]);          }          for(i=0;i<m;i++)          {              k=0,j=-1;              while(k==0)              {                  j++;                  if(a[j]<a[j+1])                  {                      a[j]++;                      k=1;                  }                  if(j==n-1)                      k=1;              }          }          if(j==n-1)              printf("-1\\n");          else printf("%d\\n",j+1);      }      return 0;  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h>  int main ()  {      int z,x;      scanf("%d",&z);      for(x=0;x<z;x++)      {          int n,m;          scanf("%d%d",&n,&m);          int a[n+1];          a[n]=-99999999;          int i,j,k;          for(i=0;i<n;i++)          {              scanf("%d",&a[i]);          }          for(i=0;i<m;i++)          {              k=0,j=-1;              while(k==0)              {                  j++;                  if(a[j]<a[j+1])                  {                      a[j]++;                      k=1;                  }                  if(j==n-1)                      k=1;              }              if(j==n-1)                 break;          }          if(j==n-1)              printf("-1\\n");          else printf("%d\\n",j+1);      }      return 0;  }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h>  int main(){  int q,k=0,i,n,j;  scanf("%d",&n);  for(i=2;i<10000001;i++){      q = 0;      for(j=2;j<=i/2;j++){          if(i%j == 0){             q++;             break;             }      }      if(q == 0){         printf("%d ",i);         k++;         }      if(k == n)         break;  }   return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h>  int main(){  int i,n;  scanf("%d",&n);  for(i=n;i<2*n;i++)     printf("%d ",i);  return 0; }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);    if(a<4)    {        if(a==1||a==2)         printf("1");        else         printf("7");    }    else    {        i=a/4;        for(j=1;j<=i;j++)         printf("71");        if(a%4!=0)        {            k=a%4;            if(k==1||k==2)             printf("1");            else             printf("7");        }    }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);     if(a==2)         printf("1");     else if(a==3)         printf("7");     else     {         if(a%2==0)         {             j=a/2;             for(i=1;i<=j;i++)                 printf("1");         }         else         {             a=a-3;             j=a/2;             printf("7");             for(i=1;i<=j;i++)                 printf("1");         }     }  }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);    if(a<4)    {        if(a==1||a==2)         printf("1");        else         printf("7");    }    else    {        i=a/4;        for(j=1;j<=i;j++)         printf("71");        if(a%4!=0)        {            k=a%4;            if(k==1||k==2)             printf("1");            else             printf("7");        }    }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);     if(a==2)         printf("1");     else if(a==3)         printf("7");     else     {         if(a%2==0)         {             j=a/2;             for(i=1;i<=j;i++)                 printf("1");         }         else         {             a=a-3;             j=a/2;             printf("7");             for(i=1;i<=j;i++)                 printf("1");         }     }  }'}]
***** Running training *****
  Num examples = 284
  Batch size = 6
  Num epoch = 10
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);    if(a<4)    {        if(a==1||a==2)         printf("1");        else         printf("7");    }    else    {        i=a/4;        for(j=1;j<=i;j++)         printf("71");        if(a%4!=0)        {            k=a%4;            if(k==1||k==2)             printf("1");            else             printf("7");        }    }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);     if(a==2)         printf("1");     else if(a==3)         printf("7");     else     {         if(a%2==0)         {             j=a/2;             for(i=1;i<=j;i++)                 printf("1");         }         else         {             a=a-3;             j=a/2;             printf("7");             for(i=1;i<=j;i++)                 printf("1");         }     }  }'}]
***** Running training *****
  Num examples = 284
  Batch size = 6
  Num epoch = 10
Model created!!
[[{'text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);    if(a<4)    {        if(a==1||a==2)         printf("1");        else         printf("7");    }    else    {        i=a/4;        for(j=1;j<=i;j++)         printf("71");        if(a%4!=0)        {            k=a%4;            if(k==1||k==2)             printf("1");            else             printf("7");        }    }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);     if(a==2)         printf("1");     else if(a==3)         printf("7");     else     {         if(a%2==0)         {             j=a/2;             for(i=1;i<=j;i++)                 printf("1");         }         else         {             a=a-3;             j=a/2;             printf("7");             for(i=1;i<=j;i++)                 printf("1");         }     }  }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);    if(a<4)    {        if(a==1||a==2)         printf("1");        else         printf("7");    }    else    {        i=a/4;        for(j=1;j<=i;j++)         printf("71");        if(a%4!=0)        {            k=a%4;            if(k==1||k==2)             printf("1");            else             printf("7");        }    }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);     if(a==2)         printf("1");     else if(a==3)         printf("7");     else     {         if(a%2==0)         {             j=a/2;             for(i=1;i<=j;i++)                 printf("1");         }         else         {             a=a-3;             j=a/2;             printf("7");             for(i=1;i<=j;i++)                 printf("1");         }     }  }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);    if(a<4)    {        if(a==1||a==2)         printf("1");        else         printf("7");    }    else    {        i=a/4;        for(j=1;j<=i;j++)         printf("71");        if(a%4!=0)        {            k=a%4;            if(k==1||k==2)             printf("1");            else             printf("7");        }    }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);     if(a==2)         printf("1");     else if(a==3)         printf("7");     else     {         if(a%2==0)         {             j=a/2;             for(i=1;i<=j;i++)                 printf("1");         }         else         {             a=a-3;             j=a/2;             printf("7");             for(i=1;i<=j;i++)                 printf("1");         }     }  }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);    if(a<4)    {        if(a==1||a==2)         printf("1");        else         printf("7");    }    else    {        i=a/4;        for(j=1;j<=i;j++)         printf("71");        if(a%4!=0)        {            k=a%4;            if(k==1||k==2)             printf("1");            else             printf("7");        }    }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);     if(a==2)         printf("1");     else if(a==3)         printf("7");     else     {         if(a%2==0)         {             j=a/2;             for(i=1;i<=j;i++)                 printf("1");         }         else         {             a=a-3;             j=a/2;             printf("7");             for(i=1;i<=j;i++)                 printf("1");         }     }  }'}]
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);    if(a<4)    {        if(a==1||a==2)         printf("1");        else         printf("7");    }    else    {        i=a/4;        for(j=1;j<=i;j++)         printf("71");        if(a%4!=0)        {            k=a%4;            if(k==1||k==2)             printf("1");            else             printf("7");        }    }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);     if(a==2)         printf("1");     else if(a==3)         printf("7");     else     {         if(a%2==0)         {             j=a/2;             for(i=1;i<=j;i++)                 printf("1");         }         else         {             a=a-3;             j=a/2;             printf("7");             for(i=1;i<=j;i++)                 printf("1");         }     }  }'}]
***** Running training *****
  Num examples = 284
  Batch size = 6
  Num epoch = 10
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);    if(a<4)    {        if(a==1||a==2)         printf("1");        else         printf("7");    }    else    {        i=a/4;        for(j=1;j<=i;j++)         printf("71");        if(a%4!=0)        {            k=a%4;            if(k==1||k==2)             printf("1");            else             printf("7");        }    }  }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> main() {     int i,j,k,l,a,c,b;     scanf("%d",&a);     if(a==2)         printf("1");     else if(a==3)         printf("7");     else     {         if(a%2==0)         {             j=a/2;             for(i=1;i<=j;i++)                 printf("1");         }         else         {             a=a-3;             j=a/2;             printf("7");             for(i=1;i<=j;i++)                 printf("1");         }     }  }'}]
***** Running training *****
  Num examples = 284
  Batch size = 6
  Num epoch = 10
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='C', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main() {     int n,m,a[55],b[55],i,count=0,j,max;     while(scanf("%d",&n)!=EOF)     {         for(i=0;i<n;i++)         scanf("%d",&a[i]);         scanf("%d",&m);         for(i=0;i<m;i++)         scanf("%d",&b[i]);         max=b[0]/a[0];         for(i=0;i<n;i++)         {             for(j=0;j<m;j++)             {                 if(b[j]%a[i]==0)                 {                     if(b[j]/a[i]==max)                     {                         count++;                         continue;                     }                      if(b[j]/a[i]>max)                     {                          max=b[j]/a[i];                          count=1;                     }                  }             }         }         printf("%d\\n",count);     }     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main() {     int n,m,a[55],b[55],i,count=1,j,max;     while(scanf("%d",&n)!=EOF)     {         for(i=0;i<n;i++)         scanf("%d",&a[i]);         scanf("%d",&m);         for(i=0;i<m;i++)         scanf("%d",&b[i]);         max=0;         for(i=0;i<n;i++)         {             for(j=0;j<m;j++)             {                 if(b[j]%a[i]==0)                 {                     if(b[j]/a[i]==max)                     {                         count++;                         continue;                     }                      if(b[j]/a[i]>max)                     {                          max=b[j]/a[i];                          count=1;                     }                  }             }         }         printf("%d\\n",count);     }     return 0; }'}]
***** Running training *****
  Num examples = 871
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 108
  Batch size = 4
  epoch = 0
  eval_ppl = 91047875069.06757
  global_step = 147
  train_loss = 166.5882
  ********************
Previous best ppl:inf
Achieve Best ppl:91047875069.06757
  ********************
BLEU file: ./data/xcodeeval/1/validation.jsonl
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include<stdio.h> int main() {     int n,m,a[55],b[55],i,count=0,j,max;     while(scanf("%d",&n)!=EOF)     {         for(i=0;i<n;i++)         scanf("%d",&a[i]);         scanf("%d",&m);         for(i=0;i<m;i++)         scanf("%d",&b[i]);         max=b[0]/a[0];         for(i=0;i<n;i++)         {             for(j=0;j<m;j++)             {                 if(b[j]%a[i]==0)                 {                     if(b[j]/a[i]==max)                     {                         count++;                         continue;                     }                      if(b[j]/a[i]>max)                     {                          max=b[j]/a[i];                          count=1;                     }                  }             }         }         printf("%d\\n",count);     }     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include<stdio.h> int main() {     int n,m,a[55],b[55],i,count=1,j,max;     while(scanf("%d",&n)!=EOF)     {         for(i=0;i<n;i++)         scanf("%d",&a[i]);         scanf("%d",&m);         for(i=0;i<m;i++)         scanf("%d",&b[i]);         max=0;         for(i=0;i<n;i++)         {             for(j=0;j<m;j++)             {                 if(b[j]%a[i]==0)                 {                     if(b[j]/a[i]==max)                     {                         count++;                         continue;                     }                      if(b[j]/a[i]>max)                     {                          max=b[j]/a[i];                          count=1;                     }                  }             }         }         printf("%d\\n",count);     }     return 0; }'}]
***** Running training *****
  Num examples = 871
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 108
  Batch size = 4
  epoch = 0
  eval_ppl = 91047875069.06757
  global_step = 147
  train_loss = 166.5882
  ********************
Previous best ppl:inf
Achieve Best ppl:91047875069.06757
  ********************
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 73.68 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:73.68
  ********************

***** Running evaluation *****
  Num examples = 108
  Batch size = 4
  epoch = 1
  eval_ppl = 7.508020706771729e+24
  global_step = 293
  train_loss = 61.335
  ********************
Previous best ppl:91047875069.06757
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 72.4 	 Previous best codebleu 73.68
  ********************

***** Running evaluation *****
  Num examples = 108
  Batch size = 4
  epoch = 2
  eval_ppl = 5786601359250241.0
  global_step = 439
  train_loss = 45.0688
  ********************
Previous best ppl:91047875069.06757
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 55.55 	 Previous best codebleu 73.68
  ********************
early stopping!!!
reload model from xcodeeval/1/hard0_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/1/test.jsonl
Namespace(log_name='./xcodeeval/1/hard0_gptneo.log', model_name='EleutherAI/gpt-neo-1.3B', lang='c', output_dir='xcodeeval/1/hard0_gptneo', data_dir='./data/xcodeeval/1', no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=6, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=1024, max_target_length=1024, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=2)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': '#include <stdio.h> #include <stdlib.h> void insertSort(int* a, int size) {     int i, j, tmp;     for (i = 1; i < size; ++i)     {         tmp = a[i];         for (j = i - 1; j >= 0 && a[j] < tmp; --j)             a[j + 1] = a[j];         a[j + 1] = tmp;     } } int check(int* a,int* b,int size) {     int i;     for(i=0;i<size;i++)     if (a[i]!=b[i]) return (a[i]);     return a[i]; } int main() {     int i,n,o1,o2;     scanf("%d",&n);     int a[n],b[n-1];     for (i=0;i<n;i++)         scanf("%d",&a[i]);     insertSort(a,n);     puts("First");     for (i=0;i<n-1;i++)         scanf("%d",&b[i]);     insertSort(b,n-1);     puts("Sec1");     o1=check(a,b,n);     puts("Sec2");     for (i=0;i<n-2;i++)         scanf("%d",&a[i]);     insertSort(a,n-2);     puts("Thir1");     o2=check(b,a,n-2);     puts("Thir2");     printf("%d\\n%d",o1,o2);     return 0; }', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': ' is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': '#include <stdio.h> #include <stdlib.h>  int main() {     int i,n,x;     __int64 a=0,b=0,c=0;     scanf("%d",&n);     for (i=0; i<n; i++)     {         scanf("%d",&x);         a+=x;     }     for (i=0; i<n-1; i++)     {         scanf("%d",&x);         b+=x;     }     for (i=0; i<n-2; i++)     {         scanf("%d",&x);         c+=x;      }     printf("%I64d\\n%I64d",a-b,b-c);     return 0; }'}]
***** Running training *****
  Num examples = 1082
  Batch size = 6
  Num epoch = 10

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 0
  eval_ppl = 1.7583390019508393e+22
  global_step = 182
  train_loss = 147.0421
  ********************
Previous best ppl:inf
Achieve Best ppl:1.7583390019508393e+22
  ********************
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 72.69 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:72.69
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 1
  eval_ppl = 3.421202150894243e+38
  global_step = 363
  train_loss = 58.0603
  ********************
Previous best ppl:1.7583390019508393e+22
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 75.06 	 Previous best codebleu 72.69
  ********************
 Achieve Best bleu:75.06
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 2
  eval_ppl = 4.67802116316821e+51
  global_step = 544
  train_loss = 41.4754
  ********************
Previous best ppl:1.7583390019508393e+22
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 60.7 	 Previous best codebleu 75.06
  ********************

***** Running evaluation *****
  Num examples = 136
  Batch size = 4
  epoch = 3
  eval_ppl = 3.7138575788530455e+55
  global_step = 725
  train_loss = 28.3519
  ********************
Previous best ppl:1.7583390019508393e+22
BLEU file: ./data/xcodeeval/1/validation.jsonl
  codebleu-4 = 65.57 	 Previous best codebleu 75.06
  ********************
early stopping!!!
reload model from xcodeeval/1/hard0_gptneo/checkpoint-best-bleu
BLEU file: ./data/xcodeeval/1/test.jsonl
  codebleu = 75.67 
  Total = 135 
  Exact Fixed = 0 
[]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 1 
[77]
  ********************
  Total = 135 
  Exact Fixed = 0 
[]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 1 
[77]
  codebleu = 75.67 
[0.7097922458866276, 0.9752926493864778, 0.8419188985107608, 0.8023174472859389, 0.5511737119063814, 0.8995033054005415, 0.655233513178001, 0.8131660563421435, 0.4295454545454545, 0.9295757649014529, 0.6700100781693141, 0.8881108167610436, 0.8920012172763082, 0.8922221884406468, 0.9250674011252755, 0.7938229814514498, 0.6068707460804744, 0.8422400736677312, 0.9126650482788027, 0.9832612094993938, 0.8886176374108348, 0.762080557522302, 0.880606694526235, 0.9304372254539681, 0.7407697010109993, 0.7639695566095526, 0.48490114764840564, 0.8381960842127558, 0.9358018387596505, 0.9105303480576279, 0.960441627608561, 0.8447195573555475, 0.5003910292067191, 0.9389707093964361, 0.8416184535678177, 0.973858151522893, 0.6031327204302868, 0.9365819013624168, 0.581538255637353, 0.9308597998712593, 0.6432679507343982, 0.6754292375001995, 0.41833335359899526, 0.49489252880910334, 0.7149195155805301, 0.8113426217022974, 0.9465012851429597, 0.973858151522893, 0.5527764741944027, 0.7569630859948919, 0.9082025886090443, 0.33580645216805804, 0.9089687826192157, 0.7927906556865255, 0.46344533813736777, 0.9333310235672049, 0.8633660722321144, 0.5026177209853862, 0.9860950428335316, 0.5335581349704818, 0.9492384172683168, 0.936202385969982, 0.5077214223305908, 0.9702812943440167, 0.9793950344987075, 0.0, 0.9334580759528754, 0.2857544178174171, 0.7598076383450478, 0.8753772142950917, 0.39101342264848765, 0.9604294079167424, 0.39536345674651, 0.9192987112586202, 0.8760369670517594, 0.8851881443478125, 0.8791990328029993, 0.7848045983125, 0.8644554554879766, 0.8454546086981599, 0.7491852152490326, 0.7153375795187605, 0.8527875420817158, 0.9128071327141931, 0.9903793674040597, 0.8917793747666807, 0.7767818873134813, 0.8424197834374936, 0.9558805231082619, 0.7832059164639751, 0.9617625014218179, 0.8963430088316504, 0.4934678370724654, 0.9109545424921657, 0.5355322041447821, 0.9498733743967636, 0.7253025503608977, 0.9036935181526748, 0.5076943976918459, 0.906923058378295, 0.9381767755969468, 0.6202958011286538, 0.6939967385634407, 0.2572497507889638, 0.7556814728598797, 0.9582778026878329, 0.6362439585829495, 0.9365739931432338, 0.29943997880421824, 0.8266441309034642, 0.38466031842423953, 0.8165942095410831, 0.7639496783614648, 0.5412219101899178, 0.5102601887697077, 0.9442248897793943, 0.9692439075113215, 0.7929436912800465, 0.7741939441431783, 0.47854531008265005, 0.9124261358560036, 0.37828106820249585, 0.9110073987910705, 0.34768491742750784, 0.8119506730626463, 0.743903320738334, 0.7286144481170467, 0.8241554247996095, 0.45601045567543047, 0.7761988507965935, 0.608533189887053, 0.9142918920357144, 0.9045578968398897, 0.46985530336379205, 0.7279692304347927]
Finish training and take 1h44m
