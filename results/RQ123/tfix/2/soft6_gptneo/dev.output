(function() {     angular        .module('shopAdmin.product')         .controller('ProductController', function($scope, $window) {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $scope.addProduct = function() {     $
var battr = this.sattr(this.style.border);   var width = coords.xl - coords.xi - this.iright    , height = coords.yl - coords.yi - this.ibottom;   if (!this.border || this.options.noCellBorders) return coords;     }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
} else {       let x = (this.get('windoc.scrollHeight') - this.get('_initialOffsetTop'));       let y = (this.get('windoc.scrollBottom') + this.get('bottom'));       return y > this.get('bottom');    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }
import { Provider } from'react-redux'; import HashHistory from'react-router/lib/HashHistory';               }               }               }               }               }               }               }               }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }                }
"File": "File",   "Project": "Project",   "Edit": "Edit",
throw new Error('Unsupported complex function case');         }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }
, "module/:module": "showModule" , 'actions/:action': 'doAction' , "index": "showIndex"     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
} } exports.run = run;     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
var blinnRow = new UI.Row();  var blinn = new UI.Checkbox( parameters.blinn ).onChange( update );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px'
self.fileIndicator.textContent = 'decoding audio data...';            self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';            self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData(req.response, function(buf) {             self.fileIndicator.textContent = 'decoding audio data...';             self.context.decodeAudioData
}     var id = "`%0".fmt(__SERIAL++);     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }     return properties;     }
}  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$/, '/'));  }  const parts = pth.split(/[\/\\]/);  return parts.map((el, i) => parts.slice(0, parts.length - i).join('/').replace(/^$
}; }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(void 0);   }).call(
this[get] = function() {     return LinkedPoint.create(this, set,       this[getX](), this[getY](), arguments[0]);    };    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }
}   function includeSystemLib(name,content,options) {     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;     var systemOptions = options;     var systemName = name;     var systemContent = content;
const regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser  , agentparserslength = agentparsers.length;   var regexps = require('./lib/regexps');   var agentparsers = regexps.browser
);     throw new Error('There was an error.');   }     process.exit(0);   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new Error('There was an error.');   }     throw new
$http.get( "/i18n/" + this.userLanguage + "/" + name ).success( function( translated ) {            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }            $rootScope.i18n[ name ] = translated;          }
}.bind(that));   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
if(code < 0x00 || code > 0xFF)   throw new Error("Invalid FS20 code"); }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
var key = String($(that).attr('id'));          set(key,$(that).val(),callback);        }       }      }     }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }
return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!Box.' } }       break     case 500:       return { error: { message: 'Requested page does not exist on the Fritz!
let program = VideoCompositor.createShaderProgram(gl, vertexShaderSource, fragmentShaderSource);         return program;         gl.useProgram(program);     }          return program;         gl.useProgram(program);     }          return program;         gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;          gl.useProgram(program);     }          return program;
var request = require
return qx.dom.DomDimension.getBoxHeight(el) - qx.dom.DomDimension.getInsetTop(el) - qx.dom.DomDimension.getInsetBottom(el);     }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
} else{       reply(message);       }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
}     return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }    return cb();     }
className: 'number',     begin: this.NUMBER_RE, end: this.IMMEDIATE_RE,     relevance: 0        }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
.catch(function(e) {    return swal("An error ocurred", 'There was an error with the request, please check the console for more information.', "error");   })   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
if (hint === '_init') return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;         }         return false;         }         return true;
sortByExpectedValue:'sortByExpectedValue',     sortBySubSetSize:'sortBySubSetSize',     sortBySetItem:'sortBySetItem'          }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
if (newTransforms.length > 0) {    var flattenedChild = JSON.parse(JSON.stringify(childInstance));    flattenedChild.transforms = newTransforms;    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;    }    return flattenedChild;
let nativeFunc = new NativeFunc(type.origin, "operator cast", TypeRef.wrap(type), [], true);         nativeFunc.implementation = ([], node) => {             let result = new EPtr(new EBuffer(type.size), 0);             return result;          }          nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);             return result;          }           nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);             return result;          }           nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);             return result;          }           nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);             return result;          }           nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);             return result;          }           nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);             return result;          }           nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);             return result;          }           nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);             return result;          }           nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);             return result;          }           nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);             return result;          }           nativeFunc.implementation = ([], node) => {              let result = new EPtr(new EBuffer(type.size), 0);
$.validator.prototype.resetForm = _.wrap($.validator.prototype.resetForm, function(resetForm) {         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this.resetForm();         this.collectPristineValues();         this
insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }     insertParamTemplateInDOM(varName, paramValue, paramForShow);     }
app.use(koaBunyanLogger.requestLogger());       app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');       });        app.use(function *() {         throw new Error('oh no');
runner.test('custom plugin: invalid plugin, not a function', function () {   return class InvalidPlugin {}   const renamer = new Renamer()   const options = {
this,     r.call(this, this.props, this.state, this.context
if (!lang) {     return origCodeRender.call(this, serviceRegistry, keyAssistFunction, prefsService);   }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }        }
'use strict'; var global = require
var institutionsViewModel = function() {     var self = this;     self.primaryInstitution = ko.observable('None');     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }     return self;     }
if (!structType) {     throw new Error("No type for " + structName);    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }
}     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     fullType = parts[0].replace(/^\s+/, '').replace(/\s+$/, '');     }     full
, util: {       iterate: util.iterate    , prettyName: util.prettyName     }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
for (index = 0xF0; index <= 0xF7; index++) {   count++;   }   }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }
"pod": function() {                       throw new Error("internal error, pod pod");                  },                   },                  },                   },                   },                    },                   },                    },                   },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },                    },
if ( meshes.length > 0 ) {  var meshNames = [];    for ( var i = 0; i < meshes.length; i++ ) {     mesh = meshes[ i ];            meshNames.push(
}       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record, doSourcing, ignoreMandatory)]);      }       return(record);       writeResults = writeResults.concat([nlapiSubmitRecord(record
result += ':' + this.id;       default: break;     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
request = new Request(tmpUrl);
function adjustPopupWidth(e) {              var anchor = this.options.anchor,
getDMChannel(id) {         return this._client.getDMChannel.apply(this._client, this.id, arg);     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
self.cnum=m.parent().index();                     }
return 'video/mp4';    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;  }    break;   default: return null;
onPlaybackFinished: function onPlaybackFinished(playBackRequest, response) {},               },               },               },               },               },               },               },               },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },                },
toggleInformation: function() {              $('body').toggleClass('photo-info-visible');              settings.display_height = getDisplayHeight();                 }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }               }
window.Controls = Controls;       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }       }
g,'')      ;
BS = 0x8,     ZPAD = '*'.charCodeAt(0),     OVER_AND_OUT = [ 79, 79 ],
function clearPerformance(type){         if(!window.performance &&!window.performance.clearResourceTimings) return;         if(conf.haveAjax&&conf.haveFetch&&conf.ajaxLength==0&&conf.fetLength==0){            clear()                   }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }
var socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http = require('http'); , socketio = require('socket.io'); , http =
}     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.returnValue = [null, guest[method].call(guest, func, scope, args)]   } catch (error) {     event.return
deleteRecord: function () {         var response = this._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments);         return response._super(...arguments
, cache = require('./connectionCache') , ZipRequestStream = require
{    var a = 0;   var r;   var d = 2*this.pointRadius;     }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }          }
var ObservationLevelModel = mongoose.model('ObservationLevel', ObservationLevel);   return {
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "BPH", Array.slice(arguments));   },            },             },             },             },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },
this._sortNodeMinY = this._createSort('.bbox[1]');     this._sortNodeMaxX = this._createSort('.bbox[2]');     this._sortNodeMaxY = this._createSort('.bbox[3]');     this._toBBox = new Function('a','return [a' + format.join(', a') + '];');     this._sortNodeMinY = this._createSort('.bbox[1]');     this._sortNodeMaxX = this._createSort('.bbox[2]');     this._sortNodeMaxY = this._createSort('.bbox[3]');     this._toBBox = new Function('a','return [a' + format.join(', a') + '];');     this._sortNodeMinY = this._createSort('.bbox[1]');     this._sortNodeMaxX = this._createSort('.bbox[2]');     this._sortNodeMaxY = this._createSort('.bbox[3]');     this._toBBox = new Function('a','return [a' + format.join(', a') + '];');     this._sortNodeMinY = this._createSort('.bbox[1]');     this._sortNodeMaxX = this._createSort('.bbox[2]');     this._sortNodeMaxY = this._createSort('.bbox[3]');     this._toBBox = new Function('a','return [a' + format.join(', a') + '];');     this._sortNodeMinY = this._createSort('.bbox[1]');     this._sortNodeMaxX = this._createSort('.bbox[2]');     this._sortNodeMaxY = this._createSort('.bbox[3]');     this._toBBox = new Function('a','return [a' + format.join(', a') + '];');     this._sortNodeMinY = this._createSort('.bbox[1]');     this._sortNodeMaxX = this._createSort('.bbox[2]');     this._sortNodeMaxY = this._createSort('.bbox[3]');     this._toBBox = new Function('a','return [a' + format.join(', a') + '];');     this._sortNodeMinY = this._createSort('.bbox[1]');     this._sortNodeMaxX = this._createSort('.bbox[2]');     this._sortNodeMaxY = this._createSort('.bbox[3]');     this._toBBox = new Function('a','return [a' + format.join(', a') + '];');     this._sortNodeMinY = this._createSort('.bbox[1]');     this._sortNodeMaxX = this._createSort('.bbox[2]');     this._sortNodeMaxY = this._createSort('.bbox[3]');     this._toBBox = new Function('a','return [a' + format.join(', a') + '];');     this._sortNodeMinY = this._createSort('.bbox[1]');     this._sortNodeMaxX = this._createSort('.bbox[2]');     this._sortNodeMaxY = this._createSort('.bbox[3]');     this._toBBox = new Function('a','return [a' + format.join(', a') + '];');     this._sortNodeMinY = this._createSort('.b
this.cancel();         window.clearTimeout(this.safetyTimer);     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
};                 this.trigger('click:node', clickEvent);              });             }                this.trigger('click:node', clickEvent);              });              }                 this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }                  this.trigger('click:node', clickEvent);               }
console.log(document.cookie);         if (store.getters['security/isAuthenticated']) {           if (document.cookie) {            if (store.getters['security/isAuthenticated']) {             if (document.cookie) {             if (store.getters['security/isAuthenticated']) {              if (document.cookie) {              if (store.getters['security/isAuthenticated']) {               if (document.cookie) {              if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated']) {               if (document.cookie) {               if (store.getters['security/isAuthenticated'
});     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notifySnippetDataChanges")); }     chrome.runtime.sendMessage(msg, checkRuntimeError("notify
Vex.Flow.Dot.prototype.getCategory = function() { return "dots"; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote = function(note)   } Vex.Flow.Dot.prototype.getNote = function() { return this.note; } Vex.Flow.Dot.prototype.setNote =
throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw MESSAGE.META_INVALID + p;   }     throw M
return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;         return keys.length < 1? false : true;         return true;
for (i=0, il=initEvents.length; i<il; i++) {        var event = mejs.Utils.createEvent(initEvents[i], youtube);          }       }     }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }
await app.listen(3000);     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }     return {}; }
return changeVisibility(drawLayer,action,factory);                 break;              case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;              case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:                break;               case DrawLayerCntlr.CHANGE_DRAWING_DEF:
self.executeAction(function () {                 this.restore(state);                 this.dispatch('UPDATE_TITLE');                 this.executeAction(function () {                 this.restore(state);                  this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                  this.restore(state);                  this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                  this.restore(state);                   this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                   this.restore(state);                   this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                   this.restore(state);                   this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                   this.restore(state);                   this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                   this.restore(state);                   this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                   this.restore(state);                   this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                   this.restore(state);                   this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                   this.restore(state);                   this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                   this.restore(state);                   this.dispatch('UPDATE_TITLE');                  this.executeAction(function () {                   this.restore(state);
}, this);             return $.when.apply($, _.compact(promises)).then(function () {                 return _.compact(arguments);             });              return $.when.call($, _.compact(promises)).then(function () {                 return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });              return $.when.call($, _.compact(promises)).then(function () {                return _.compact(arguments);              });
if (!this.isUpstreamOf(targetSource, currentLocation)) {                   }                    }                    }                    }                    }                    }                    }                     }                     }                     }                     }                     }                     }                     }                     }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }
assertFunction(this);     var list     = args.length? args : from(args)      , instance = create(this[PROTOTYPE])      , result   = this.call(instance, list);     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result : instance;     }     return isObject(result)? result :
return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);   }   finally {     return;   }   }   return JSON.stringify(value);
height: iDocumentHeight,                         top: $(this).scrollTop() * -1                      }                    }                    }                     }                     }                     }                     }                     }                     }                     }                     }                     }                     }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }                      }
}   }, this);   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(document).keyup();   $(
var clear = ve.bind( function () {   this.docToSave = null;   this.clearPreparedCacheKey();   });   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.clearPreparedCacheKey();   }   this.docToSave = null;   this.
case 'follow' : this.follow(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' : this.tankFollow(target);    break;    case 'follow' : this.stayHold(target);    break;    case 'tankFollow' :
break;        }      }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
console.log("wrtc", wrtc);         throw new Error("wrtc needs to be set in headless mode");       }      }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
if (!initData) {             throw new Error('Fatal collection connection error');         }       }     }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }
}              var d = __define,c=HTML5WebSocket;p=c.prototype;              p.addCallBacks = function (onConnect, onClose, onSocketData, onError, thisObject) {                 this.onConnect = onConnect;                this.onClose = onClose;               this.onSocketData = onSocketData;               this.onError = onError;               this.onObject = thisObject;               this.onClose = onClose;               this.onSocketData = onSocketData;               this.onError = onError;               this.onObject = thisObject;               this.onClose = onClose;               this.onSocketData = onSocketData;               this.onError = onError;               this.onObject = thisObject;               this.onClose = onClose;               this.onSocketData = onSocketData;               this.onError = onError;               this.onObject = thisObject;               this.onClose = onClose;               this.onSocketData = onSocketData;               this.onError = onError;               this.onObject = thisObject;               this.onClose = onClose;               this.onSocketData = onSocketData;               this.onError = onError;               this.onObject = thisObject;               this.onClose = onClose;               this.onSocketData = onSocketData;               this.onError = onError;               this.onObject = thisObject;               this.onClose = onClose;               this.onSocketData = onSocketData;               this.onError = onError;               this.onObject = thisObject;               this.onClose = onClose;               this.onSocketData = onSocketData;               this.onError = onError;               this.onObject = thisObject;               this.onClose =
this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }   this.health = () => coFetchJSON(basePath);   this.version = () => coFetchJSON(`${basePath}/version`);   }
const obj_node_props = value_node.properties;              const record_cells = [];                          for (let offset_r = 0; offset_r < record_count; offset_r++) {                       for (let offset_l = 0; offset_l < record_count; offset_l++) {                         for (let offset_r = 0; offset_r < record_count; offset_r++) {                        for (let offset_l = 0; offset_l < record_count; offset_l++) {                        for (let offset_r = 0; offset_r < record_count; offset_r++) {                       for (let offset_l = 0; offset_l < record_count; offset_l++) {                       for (let offset_r = 0; offset_r < record_count; offset_r++) {                       for (let offset_l = 0; offset_l < record_count; offset_l++) {                       for (let offset_r = 0; offset_r < record_count; offset_r++) {                      for (let offset_l = 0; offset_l < record_count; offset_l++) {                      for (let offset_r = 0; offset_r < record_count; offset_r++) {                      for (let offset_l = 0; offset_l < record_count; offset_l++) {                      for (let offset_r = 0; offset_r < record_count; offset_r++) {                     for (let offset_l = 0; offset_l < record_count; offset_l++) {                     for (let offset_r = 0; offset_r < record_count; offset_r++) {                     for (let offset_l = 0; offset_l < record_count; offset_l++) {                     for (let offset_r = 0; offset_r < record_count; offset_r++) {                     for (let offset_l = 0; offset_l < record_count; offset_l++) {                     for (let offset_r = 0; offset_r < record_count; offset_r++) {                     for (let offset_l = 0; offset_l < record_count; offset_l++) {                     for (let offset_r = 0; offset_r < record_count; offset_
this.on("input", function(msg) {             var id;              var node = this;              var id;              var node = this;              var id;              var node = this;              var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;               var id;               var node = this;
chart.render(seriesModel, ecModel, api);                 this._zr.add(chart.group);              }, this);              }, this);              }, this);              }, this);              }, this);              }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               }, this);               },
Editable.prototype.change = function(handler) {   return this.on('change', handler); };     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
this.set('debouncingState', true);     Ember.run.debounce(this, this.handleSearchText, wait);   }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),           }),
modDeleted = /^!!deleted/.test(message.content);   status.answerable =!deleted && message.author!==me.id;   status.old =  Date.now()/1000 - created > chat.config.maxAgeForMessageEdition;      }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }   }
import React from'react' import PropTypes from 'prop-types' import Helmet from'react-helmet' import styled, { ThemeProvider } from'styled-components'
},  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',   effectType: 'Format',      },  gen1uu: {   mod: 'gen1',
sortfn: function(a, b) { return 0; },             },             },             },             },             },             },             },             },             },             },             },             },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },              },
var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {         var chaninfo = {
