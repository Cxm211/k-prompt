if(fs.existsSync(path)) {     console.log('The file "' + path + '" already exists!');   }
this.formTitle = '修改字典'         var detail = this.selRow.detail.split(',')         var details = []         detail.forEach(function(val, index) {           var arr = val.split(':')
var response = {      _tid: req.cookies._tid     , cache: qs.parse(req.headers['cache-control']) || {}
var _super = this.$super,                                          ret;
ret[inputtypes] = (function(props) {         for (var i = 0,len=props.length;i<len;i++) {             f.setAttribute('type', props[i]);
var that = this;         this._properties = attrs || {};
}    var name = match.length ? match : term,      filter = controls.search.filter;
self = this,      start = function(CodeMirror) {       var         ta   = $(textarea),
var ring_desc_start = ring_start + 4;         var
if (typeof Promise === 'undefined') {     global.Promise = require('promise-polyfill') }
}; }(this));
if (!gl) {         throw new Error("WebGL: Failed to create a WebGL context!");     }
var concat = require('concat-stream') module.exports = load
evt.preventDefault();                             var file = $(this).closest('[data-file]').data('file');                             self._trigger('selected', null, file);                             modal.close();
var baseDir = config.assetsDir + 'img';     src = utilities.buildGulpSrc(src, baseDir, '**
{                     constructor: AboutPage,                     pageName: 'about'                 }
this._streamBindings = undefined;     this._super(...arguments);   },
if (response && response.headers) {                                     angular.forEach(response.headers(), function (v, k) {                                         response.headerArray.push({                                             name: k,
targetElement.setAttribute('id', container.getAttribute('id'));     }     for(var key in container.style) {       if (!container.style.hasOwnProperty(key)) { continue; }       targetElement.style[key] = container.style[key];
module.exports = xhook;
"Position cursor after last char and hit backspace", function() {         this.editor.selection.set({           start: [0, 4],
if (input.eventType != 1) {    throw new Error("Parser must be on START_ELEMENT to read next text.");   }
var section = null;         var cursorPos = actions.editor.cursorManager.getCursorPosition();
describe("create an h5 and group ", function() {          let file;
var buffer = context.createBuffer(1, 44100, context.sampleRate)         var upsampled = utils.upsample(array, 44100)
}       }, _callee);     }));
}             handler.call(Hammer.gesture, self.collectEventData(element, type, ev));         }
a = query.split(/\s+and\s+/);            for (var k = 0; k < a.length; k++) {             s = a[k];
async function _setup (accounts){   mockToken = await MockToken.new();
var $export = require('./_export'); var $task = require('./_task'); $export($export.G + $export.B, {
helpers.each(values,function(dataPoint,index){         datasetObject.bars.push(new this.BoxClass({
method: 'POST'         }).done((resp) => {             this.set(resp);
var DECLARATION_VERSION = 2;
.reply(500);       this.customDomains.verify({ id: this.data.id }).catch(function(err) {         expect(err).to.exist;
"use strict";
define(Array, 'compact', function() {     var results = [];
}(window || this));
Promise.all(promises).then(function () {                     var canvas = document.createElement("canvas");
return globalFunctionTrampoline[globalFunctionName](...arguments)       } else {
if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {    return this.each(function( index ) {     var self = set.eq( index );     if ( isFunction ) {
return {       contentType : HoneyProxy.getContentTypeFromHeaders(data.response.headers),       path : data.request.path      }
spyOn(this.addon, 'getDOMImage').and.returnValue(stubbedImage);         this.editor.subscribe('editableInput', function () {             inputTriggerCount++;
memo = (function(f) {         var value;         return (function(x) {             if ((value === undefined))(value = f(x));             return value;
if (sourceName) {         this.collection.add(val, opts);         memo[name] = val.id;       } else {
for (let p=0; p < polygon.length; p++) {         let polygon = polygons[p][0];
values = this.uniqueValues;     }     this.uiFilteredValues = {};     for (var i = 0; i < values.length; i++) {
function PrivateKey(version, buf, compressed) {   PrivateKey.super_.call(this, version, buf);   if (compressed !== undefined)
var server = require('./server') var request = require('../index') var tape = require('tape') var s = server.createServer()
'upper',     function (s) {       return (String(s)).toUpperCase()     }
function fill (a, b, c) {       return setter(Array.prototype.fill.call(this, a, b, c))     }
return function() {               return err = arguments[0];             };
var focused  = dates.eq(date,  this.state.focusedDate,  'year')           , selected = dates.eq(date, this.props.value,  'year');
}     }, _callee6);   }));
return this._config; };
, 'collection'     , 'connection/server'     , 'connection/repl_set_servers'     , 'cursor'
define(function(require, exports) {
bespin.subscribe("file:saved", dojo.hitch(this, function(e) {             this.updatePath(e.project, e.filename);         }));
TNTools.register('fontChange', function(font) {   proof.empty();
}         return evaluator(fnName, parameters);     }
cache: false,             data: data,             type: 'PUT',
s += "var " + __rt + "=require('streamline/lib/callbacks/runtime').runtime(__filename)";   keys.forEach(function(key) {    var k = _safeName(options.precious, key);
if (this.__isDrag) return;         originalFriction = options.friction;          updateRecords(evt);
var request = require('request'); module.exports = function routes(app){
function native_BoolImplementation_EQ(other) {   throw Error('UNREACHABLE'); }
case KEY_ENTER:             return onEnter(...args);         case KEY_TAB:
else {                 throw new me.Error("no level loader defined");             }             return true;
var Advisor = function() {  this.pointcut = null;  this.advice = null;
, rewrites = [        { from:"/", to:'pages/index.html', before: function(req, res, cb) { console.log(req.connection.remoteAddress); cb() }}     , { from:"/edit", to:"pages/recline.html"}     , { from:"/edit
this.collection.reset(validSelectors);
var Atom = I.inherit(function Atom() {     AbstractMutable.call(this);     if (arguments.length) this._emitValue(arguments[0]);
return _ret = (_temp = (_this = __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default()(this, (_ref = Search.__proto__ || Object.getPrototypeOf(Search)).call.apply(_ref, [this].concat(args))), _this), _this.state = {       disabled: false,
, join = require('./shieldbattery/join') var socket = io.connect('https:
componentDidUpdate (prevProps, prevState) {     if (this.state.editing && !prevState.editing) {
return cb(err);       console.log('');       fs.write(info.fd, msg);
}       return this.fromBuffer(buf, ...rest)     }
this.imageURL = imageURL;     this.options = {};
} else {         throw new Error(typeof data);       }
storeErrors(filterDuplicates(idCounts));   this.complete = true;
if (Array.isArray(this._renderProperties)) {   for (var i = 0; i < this._renderProperties.length; i++) {    render(this._renderProperties[i], this._encodings, this._options);
, end = { p : verb.last( knots ), l : totalLen }   , mid = { p : 0, l : 0 }   , tol = tol || verb.TOLERANCE * 2;
if (layers.hasOwnProperty(id)) {       throw new Error(`invalid or duplicate layer id: ${id}`);     }
render: (text, record) => (       <Button color="primary" size="sm" onClick={() => hendleDelete(record.id)}>         Delete
var map = self.get("map"); console.log(map);
"Integer": new Integer(),   "Boolean": new BooleanType()  };
everyHour = 5 || minute * 60; function noop() {} function updateScript(script) {
Pipeline.prototype.index = function() {     return this.add('', 'Index', arguments);   };
(subAsParent, schemaFromAllOf) => {           collapseSchemas(             subAsParent,
var request = require('../index') var http = require('http') var tape = require('tape') var methodsSeen = {
for (var j=0;j<wires.length;j++) {                         var node = flows.get(wires[j]);
Number.prototype.toStrings=function(){  return this.toString().replace(/e([\+\-])([\d\.]+)/,"\\cdot 10^{$2}");
if (response) {           for (i in response.structure) {             if (response.structure.hasOwnProperty(i)) {               nest.structure = i;               nest.presence  = response.structure[i].away === false ? 'on' : 'off';
exchange () {     throw new Error('exchange Not Yet Implemented', 'AbstractAdapter.js');   }
describe('2.8 connection request queue (basic functionality)', function(){     function getBlockingSql(secondsToBlock) {
evt.target = el;   el.dispatchEvent(evt); };
if (confProps.scales != null) {                 confProps.resolutions = [];                 for(var i = 0; i < confProps.scales.length; i++) {
, doc = xmlbuilder.create()         , child = doc.begin('plist', XMLHDR, XMLDTD).att('version', '1.0');
, inherits  = require('util').inherits
} else {             if (args[0] !== 'newListener') {
this.toggleBottomMenubar();         },
typeof getter == 'string' ? getter : getter && getter[name] || name,     _matrix);
}     this._items.sort(function (a, b) {return mcmp(key(a), key(b));}); }; list.PY$insert = function(index, x) {
return {     type: actions.UNLOCK_IN_PROGRESS,   }
this.fire( 'complete' );       }, this );
}     return Promise.resolve(result);   }).catch((error) => {
'use strict'; var deferred = require('../../lib/deferred'); module.exports = {
, description: 'Update third-party modules by checking the provided version number'
bus.emit('file-add', {         source: props.id,         name: file.name,
csv_row.push(friend.name);     for (i = 0; i < 3; i++){       this.addColumn_(csv_row, friend.email[i]);     }
if (!this.get('selectedRepo')) { return; }         if (!this.get('category.customappname')) { return; }
}         this._lastFetchDate = newFetchDate;
function log(...aArgs) {  utils.log('autoHide', ...aArgs); }
UiClass = function () {                 var obj = this;
doneArgs = args       return
module.exports = function(item) {  return new Palette(item); };
done();       });     });
if(Array.isArray(encoded)){     for(let i = 0; i < encoded.length; i++){      nextLevel(encoded[i]);
if (finalConfiguration.zoomable) {                 zoom(svg, dimensions, scales, finalConfiguration, data);             }
temp = replace     replace = []     for (i = 0; i < search.length; i += 1) {
function hoverTruncate(grid) {     var $grid = $(grid);     if ($grid.hasClass('hovercard')) {
cb(null, file);  }, function (cb) {
this.send(from, 'Hi ' + from + ', nice to meet you!');       };
$('#Disable2FA').click(function () {     jQuery.support.cors = true;
favMapView.render();       self.$('.js-favMapTitle').removeClass('is-hidden');     };
const RequestObject = Ember.Object.extend({     init() {       this._super(...arguments);
try {         return expressionCompile(expression).call(instance);       } catch (e) {
action = function(varName) {                 storedVars[varName] = accessorFunction();             };
const arg = combinator.args[i]                     const argument = arguments[i]                     if (argument === undefined && arg.optional && arg.type !== undefined) continue                     switch (arg.type) {
var i, len = this.masksProperties ? this.masksProperties.length : 0;     this.viewData = createSizedArray(len);     this.solidPath = '';
})(   this.Blotter, this._, this.THREE, this.EventEmitter );
});   this.ipcClient.on("error", function (error) {
return key_promise.then(function(key) {       config = that.getSignConfig(that.getJwaNameForSignKey(key));       return Jose.crypto.subtle.verify(config.id, key, signature, Utils.arrayFromString(aad + "." + payload)).then(function(res) {
type: Array,             default: () => []         },
const checksums = JSON.parse(new Buffer(process.env.ASSETS_CHECKSUMS, 'base64').toString('ascii'));     checksums.assets.forEach((srcPath) => {       const checksum = checksums.assets[srcPath];
function e(e) {             var i = t.call(this) || this;
default:         throw new Error('invalid matrix mode ' + mode);     }
promise = Q.resolve();             that._logger.warn('not-installed', name, {                 name: name
describe("copier", function() {   it("should send from Emitter to Collector via copier", async function() {     let result = [];
const results = []   content = String(content).replace(/\/\*.+?\*\/|\/\/.*(?=[\n\r])/g, '')   while ((match = exports.CSS_IMPORT_REG.exec(content))) {     results.push(match[2])
} else {       Object.keys(styles.computed).forEach(function (key) {         computedStyles[key] = styles.computed[key](styles);
this.anim(                 lastElem,                 elem,
var any = this._any.pack(payload)           , cacheItem = new CacheItem()
items = this.filteredItems.map((item) => {       return <option value={item.id}>{item.text}</option>     })
it('add block', function() {     let editor = this.setEditor('<p>0123</p>');     editor.formatAt(4, 1, 'align', 'center');
}else{    for(var args = Object.keys(this.options), i = 0, l = args.length; i < l; ++i){     this.payload += '&' + args[i] + '=' + this.options[args[i]];    }
var touch = e.changedTouches[i]             var slot = slotted[touch.identifier]             if (typeof slot === 'undefined') {
{  var a = arguments[i+1];  if(typeof(a)=="string") a = a.charCodeAt(0);  if(a!=header[i]) return false;
var args = Array.prototype.slice.call(arguments, 0);                     this.trigger(args);                 }
};     self.__doreq("DESTROY-EXISTS",getoptions,null,function(result) {       self.logger.debug("Returned rest api info: " + JSON.stringify(result.doc));
showPageLoadingMsg: function( theme, msgText, textonly ) {    this.loaderWidget.loader( 'show', theme, msgText, textonly );   },
var c = w({ first: f('value') });       var result = c.build(this.grammar).fragment;       expect(result).to.eql('first = value');
var status = new app.Model.StatusUpdateModel();     status.set("attachmentIds", []);     _.each($(e.target).serializeArray(), function(data) {
doc: {             options: {                 cwd: './src/',                 files: [ 'core*.js', 'zeptodoc
, sourceExtract = require ('./sourceExtract')   , util = require ('./util');
var Promise = require('promise'); var findIn = require('../examples/find-in'); describe('integration', function() {   var db, modules;
if (rc != 0) {         console.log("can not call subscribe command");   return -1;     }
});         this.model.revert();         this.render();
} else {         console.log(`Winner: ${fastest.map('name').join(', ')}`);       }
{             value = [];             for(var i=0; i<count;i+=2)
html += getFileHTML(path,val)             })             html += "</ul>"
}).catch(function(ex) {                 return Alert.error(ex.toString());             });
return indent + "[object " + (obj.tagName || "Node") +"]";             var arr = [],type = $.type(obj),self = $.dump ,next = indent +  "\t";             switch (type) {
return (dispatch) => {     dispatch(actions.showLoadingIndication())     _accountManager.clearSeedWordCache((err, account) => {
inherit: SVG.Element,
this.isMounted = false     delete this.root._tag     return this
var app = window.app || {};
function getBalances(request, response, next) {   var options = {
lang.mixin(this.config, this.orgConfig, this.appConfig, this.customUrlConfig, this.urlConfig);
return { vm, metaInfo, tags } }
provider: '',       sources: [],    }),
if (!goog.array.remove(this.topComments_, comment)) {     throw Error('Comment not present in workspace\'s list of top-most ' +                 'comments.');   }
define(Array, 'partitionBy', function(fn) {     var partitions = {};
function newFile(req, res, next) {     var that = this, params = req.params, ThemeService = that.getService(THEME_SCHEMA),         themeHome = getViewsHome(req.app), themeId = params.id,
}; const getSiteConfig = async function(source, destination) {     let siteConfig = {};
this.element = element;  this.store = [];  this.store[0] = new this.coords(-1,-1);
if( descriptor.resource.getRegistered(namespace) !== model ) {         throw new Error('namespace [' + namespace + '] has already been registered, autoRegister failed.');       }
function _merge (getKeys, a, b) {     return reduce([a, b], function (result, source) {         forEach(getKeys(source), function (key) {
if (!extensions.instancedArrays) {         throw new Error("WebGL: No instanced rendering support!");     }
const result = [];     listValues.forEach(valueObj => {       result.push(this.valueType.getValue(valueObj));     });     return result;
describe('#compile_solidity', function() {     var expectedObject = {};
const getCollectionLoader = function(collection) {         return async function(filePath) {             const extension = path.extname(filePath);
this.get('player').setVolume(volume);   }),
{    throw new Error("insufficient read permissions on path " + user.description() + " " + this.permissions().description());   }
function checkToEnd(pos) {       if (pos.y <= this.maxScrollY + threshold) {         this.trigger('pullingUp');
options: options,
propCallback({             wavesurfer,             originalArgs           });
class UsersStore extends GetSetBaseStore {   constructor(...args) {     super(...args);
const key = [name, pipeline_name || '', +remote].join(':')   if (!this.asset_cache.has(key)) this.asset_cache.set(key, this._findAsset(name, pipeline_name, remote))   return this.asset_cache.get(key) }
'use strict'; module.exports = () => {   return function* (next) {     try {
var parsed = {};         for (var key in includeObj) {             if (includeObj.hasOwnProperty(key)) {                 parsed[key] = this._parseIncludeArgs(includeObj[key]);             }
if (_.contains([ "istate", "ostate", "state", "meta", "model", "connection" ], what)) {             _apply_persist("on", [ what, callback ]);         } else {
}             if (this_type == "checkbox") {
var ByteCode = []; var ArrayType = {}; ByteCode.codes = {
if (proxyDetails.method && proxy[proxyDetails.method]) {             return proxy[proxyDetails.method](...proxyDetails.args);           } else {
return function (socket, nextstage) {     socket.emit(event, ...arguments);   }
default:         throw new Error('illegal char: ' + c);     }
function getAbsences(data) {   var absences = [];   for(var i = 0; i < data.response.absences.length; i++) {
router.get('/connect', passport.authenticate('google', { scope:     [ 'https: router.get('/google/callback', passport.authenticate('google',
{          for(var i = 0; i < modal_parameters.events.length; i++){           $(this).on(modal_parameters.events[i], function(event){                     if(modal_parameters.on_event){
trackException(error, fatal = false) {     GoogleAnalyticsBridge.trackException(this.id, error, fatal);   }
var from = 0     , to = 15;
case 114:              for (var idx = 0; idx < content.length; idx++) {                 records.push(processResult(content[idx], results.subcontents));
json = _a.sent();                         return [2 , json ? utils_1.assetFromJSON(json) : null];                 }
HTMLMediaElement.prototype.play = function() {       let p = originalPlay.apply(this);       if (p) {
} else if ("0".split(void 0, 0).length) {     StringPrototype.split = function split(separator, limit) {         if (separator === void 0 && limit === 0) { return []; }
const missedPrerequisites = this.checkPrerequisites(player);       missedPrerequisites.forEach(prereq => {
if (!json.txs) {         throw new Error('Could not fetch transactions from API')       }
var icon_dis;     for (var j = 0; j < res['RelatedTopics'][i]['Topics'].length; j++){         if (j + i >= 3)             break;
TW.TabManager.initTabs = function (tabs) {   for (var i=0; i < tabs.length; i++) {     TW.TabManager.addTab(tabs[i]);
const b = inst(this.body.infer())    const ps = new AST.TypeConstructor('Product', [])    for (const r of this.args) {
, fs = require("graceful-fs") rebuild.usage = "npm rebuild [<name>[@<version>] [name[@<version>] ...]]"
console.log("CHAN_GET: " + url + " " + res.statusCode);                         stream_cb(res);                 });
var repoName= url.substring(url.lastIndexOf("/")+1,url.lastIndexOf(".git"));               $("#"+id+".response").append("Cloning into '"+repoName+"'... <br/>");
initElements(typeof nodes.length === 'undefined' ? [nodes] : nodes);     return nodes;   };
, async = require('async')   , isMac = process.platform === 'darwin';
) {                             reuseMarkers.push(this.markers[i]);                             doAdd = false;
this.blog.photo(this.options.blogName, postOptions, function(err, result) {   that._logResult(err, result, that.options.blogName);  });
} else {         throw new Error('illegal version: ' + version);       }
$.ElementList = function () {  function $ElementList(elements) {   this.src = Array.from(elements);  }
'sessionInvalidationFailed'   ]).forEach(function(event) {     session.on(event, function(error) {       router.send(event, error);     });
var scale = this.container_div.width() / (this.view.high - this.view.low);                  if (include_labels) this.zi_slots = {};         var dummy_canvas = $("<canvas></canvas>").get(0).getContext("2d");
function execSync(command, options) {   var opts = normalizeExecArgs(command, options, null);   var inheritStderr = !opts.options.stdio;
if (!$(this).parent().hasClass('dragging')) {                          } else {
var isError = require('es5-ext/lib/Error/is-error')   , Db      = require('../../')   , StringType = Db.String; module.exports = function () {
if (angular.isArray(requestModel.security)) {       requestModel.security.forEach(function (securityOption) {         var auth = AuthManager.getAuth(securityOption);
setTimeout(function () {      var oAppSettings = this._oCore.getConfiguration(),       oThemeSelect = this._oCore.byId("ThemeSelect"),
this.set(key, value);   if(key=="value"){    this._renderStars(this.value);
var fn = strings[this.fn];         return fn ? fn(...newArgs) : this.fn + '(' + this.args.join(', ') + ')';     }
var calendar = [];             for (var i = 0; i < 6; i++) {
addon.port.on('socket-disconnected', function(response) {     disconnectingSockets[response.socketId]();   });
if (duration < 100) {       throw new TypeError('Duration should be greater than 100 milliseconds or it won\'t really be noticeable');     }
Object.keys(this.core.plugins).forEach(pluginType => {         const plugins = this.core.plugins[pluginType]
clear: function(property) {             return function(fields) {                 return this.__clearPropertyValue([property].concat(_.isString(fields) ? fields.split('.') : fields || []));             };
_cmdFilter: function(){    var a = arguments;    return this._filter.apply(this, a[a.length - 1]);   },
var test_names = new Array();
that.options.autoplay = true;             if (!_built) that.load();         }
let data = [];   data = jsonfile.readFileSync(this.filepath);   return data;
var bigInsert = '';      for (var w in config.widgetSets) {          if (!config.widgetSets.hasOwnProperty(w)) continue;          var file;
checkLogin(id, skey) {         let param = { id, skey };
var cometURL = location.href.replace(/\/jquery-examples\/.*$/, '') + '/cometd';       cometd.init({
}     , categorizr = function () {         var args = [].slice.call(arguments, 0)
options.errorThrown = errorThrown;       if (error) error.call(options.context, xhr, textStatus, errorThrown);     };
, len = socks.length     , sock = socks[this.n++ % len];
function handleEnter(event){         if (!this._down) return;         this._eventInput.off('mousemove', handleMove.bind(this));
step: function (ignoreTime) {
function _onClean(){         if (this._dirtyLock > 0) this._dirtyLock--;         if (this._dirty && this._dirtyLock == 0) {
callback();       })       .catch(function (error) {
function moveNestedTags(child, i) {   Object.keys(child.tags).forEach(function(tagName) {     var tag = child.tags[tagName]
module.exports = methods;   } else {     for (var i = 0; i < methodNames.length; ++i) {       root[methodNames[i]] = methods[methodNames[i]];     }
get Model() {         throw new Error("ModelHandler.Model must be overriden!");     },
this.toggleSelection = function (id, type) {
var maxHeight = 0;  for(let i = 0; i < encodings.length; i++){    let options = merge(options, encodings[i].options);
return self._call(context, arguments);    };   },
return newModels;     }, []));     this.$namespace.publish('_.reset', oldModels);
setTimeout(() => {       if (this.windowSession.currentRecordingTabId[testCaseId] === activeInfo.tabId && this.windowSession.currentRecordingWindowId[testCaseId] === activeInfo.windowId)         return;
var core = require('../../modules/_core'); var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify }); module.exports = function stringify(it) {
} else {     throw new Error('no widget view found for given widget: ' + JSON.stringify(widget.attributes));   }
function getPlayerByName(name) {     for (var i in discovery.players) {         if (!discovery.players.hasOwnProperty(i)) continue;         var player = discovery.players[i];
}             return dispatches[field].apply(this, args);         };
var modul8  = require('../../')   , fs      = require('fs'); modul8('./app_code/main.coffee')
this.onComplete(             async function() {                 if (mustCompile) {
'use strict';
hook('onClick');    var url = getUrl(button);    var fullurl = 'u=' + encodeURIComponent(url);
var transform = function(chunk, enc, callback) {     callback(null, template(chunk));   };
var SimpleBrain = function(user){     Brain.call(this, user); };
}             throw new Error("unknown JPEG marker " + fileMarker.toString(16));         }
var key = 'anothersecret'       , pt = '☭'       , ct = twoFish.encrypt(key, pt)       , cpt = twoFish.decrypt(key, ct);
.done(function() {    var data = dialog.contents.find('form').serialize();
{     if (typeof(e) === 'undefined')      return false;
TextLayout.prototype = new RefObject;  TextLayout.prototype.constructor = TextLayout;
$(AVG_REPLICATE_VALS_BOTTOM_MENU).click(() => {         grnState.nodeColoring.averageBottomDataset = !grnState.nodeColoring.averageBottomDataset;         updateApp(grnState);
that do not match any member of "cols".`,       code: function(...args) {         const cols = this.getColIdxs_(args);         return this.DOT(this.GridRow.DATA, this.ArrayExtract.create({
var self = this;   if (! callback && options instanceof Function) {
if (typeof (key) === 'object') {                 for (var name in key) {                     if (key.hasOwnProperty(name)) {                         this.setVisual(name, key[name]);                     }
function SaveCommand() {   SaveCommand.super.call(this, { name: 'save' }); }
it('edits textbox', function() {       cy.get('@TextboxEl').within(() => {         cy.get('.widget-menu-regular').click({ force: true }).within(() => {
var Concur = require('Concur') var object = require('isomorph/object') var validators = require('validators')
constructor(){         super();         super.addMixedIn('Heritable');
} else {     return options.fn(options.data.root);   }
case "domain":                  loadSiteNotes(true, toggle.value);         break;
init: function() {     this.A = [];     this.A[1] = 0.6399175073;     this.A[2] = -0.1358797613;
var generatorCoffee = path.join(self.generators, generator + '.coffee')           var generatorJs = path.join(self.generators, generator + '.js')           var generatorPath
pauseRecording(self.valueWillMutate,self);           if(write && !self.write)throw new Error("This observable can't be set.");           self.value = value;
}  deny(...args) {   return this.model.deny.apply(this.model, args);  }
this.options = options;   }
this.closing = false;   this.loaded = false;   await this.fire('close'); };
__RESULT__ = ${this.getReturnDecl()};
var options = this.options(defaults);
root["javel"] = factory(); })(window, function() { return  (function(modules) {
gutil.log(gutil.colors.red('Running gulp is', cliPackage.version));     gutil.log(gutil.colors.red('Local gulp (installed in gulpfile dir) is', args.modulePackage.version));   }
if (val === 'y' || val === 'yes') {       for (var i = 0; i < newer.data.length; i++) {         debug('pushing', newer.data[i])
expect(emailValueAfter).toEqual(null);       const passwordValueAfter = this.component.loginForm.get('password').value;       expect(passwordValueAfter).toEqual(null);
try {         Sentry.captureException(e);
inputSignal = true;     };
if (err) {       return callback(err);     }
Planner.mapDom.remove(cardDom);
send: function(connectionId, reportId, data, callback) {                  if (connectionId === 'mockConnection') {
Renderer.prototype.render = async function(template, locals, options) {   var o = this.options;
(function(host) {
module.exports = curry(function zipWith(cb, a, b) {   var args = argsToArray(arguments).slice(1)
, getPrototypeOf = Object.getPrototypeOf   , relation, isValidNsRef;
if (window.DEBUG) {    console.log(...arguments);   }
function L(...args) { if (BarNote.DEBUG) Vex.L('Vex.Flow.BarNote', args); } export class BarNote extends Note {
Object.keys(file[testType]).forEach(function(key) {             factory(file[testType][key].name, file[testType][key], file.scope);
if (testNull === null) {       throw new Error('No match in string')     }
catch (e) {     alert("Exception adding agent " + objectPath + " : " + e);    }   }
};  for (var p in thisClass) {   if (thisClass.hasOwnProperty(p)) {    Employee.prototype[p] = thisClass[p];   }
, Iterator   = require('./iterator')
user: require('lsk-user/uapp').default(...arguments)   };
var Cookie = tough.Cookie var CookieJar = tough.CookieJar exports.parse = function (str) {   if (str && str.uri) {
if (evt.authorized) {                                 status = '<span class="'+ this.socialCSS.iconTwitter + '"></span>' +this.config.i18n.general.switchAccount;                                 this._twitterStatusNode.innerHTML = status;
if (this.key_ !== b.key_) {       throw new Error('Failed to sync VNode: keys does not match (old: ' + this.key_ + ', new: ' + b.key_ + ')');     }     if (this.type_ !== b.type_) {
, Packager = require('package-jsonld')   , os = require('os');
return [function split(separator, limit) {     var O = defined(this);     var fn = separator == undefined ? undefined : separator[SPLIT];     return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
gulp.task('compress', () => {   let { name, version } = require('../package.json')   return gulp.src('dist*')
type = type || 'closest';   for (var idx1 = 0; idx1 < a.length; idx1 += 1){     var color1 = a[idx1];
, stream = fs.createReadStream(filename)  , xml = new XmlStream(stream);
else       this.gotoFrame(frame);   },   gotoAndStop: function (frame, scene) {     this.stop();
}(this));
enyo.forEach(this.enyoIndexer.getFunctionList(pattern), function(name) {     name = name.substr(len);     suggestions.push(name);    }, this);
var researching;  var imagePathsArray = []; var imagePositionInArray;
const orgError = console.error;   console.error = (...args) => {     errors.push(args.concat('stack trace:', new Error('').stack));     orgError.apply(console, args);   };
if (value) {       for (i in value) {         if (value.hasOwnProperty(i)) {           change    = 'neutral';           arrow     = 'arrows-h';
return this.verify(function verified(err) {     if (err) return fn(err);     var current = this.pid;
var newRow = {}       Object.keys(row).forEach(col => {         var datatype = this.props.queryResult.meta[col].datatype
var sax = require('sax') ,   ignored = require('./ignored.js')
if (old.length === neo.length) {                 if (old !== neo && old.length > 0) {                     bindingExecutors.repeat.call(this, 'clear', pos, el)                 }
this.Alert = function Alert(){      logger.log( colors.green('[OKAY] '+ this.fmt.apply(null,arguments)) );  }
beforeEach(function () {         jasmine.addMatchers(diffHelper.matcher);         canvas = $('<canvas width="' + width + '" height="' + height + '"></canvas>');
} else if (options) {           for (var i in options) {             if (options.hasOwnProperty(i)) {               data.options[i] = options[i];             }
install: function () {         const injectJsFilesToIndex = () => {             this.log('\n' + chalk.bold.green('Running `gulp inject` to add JavaScript to index.html\n'));             this.spawnCommand('gulp', ['inject:app']);
if (!regl.hasExtension('ANGLE_instanced_arrays')) {       throw Error('regl-error2d: `ANGLE_instanced_arrays` extension should be enabled');     }
} else {     return eachObj(obj, iterator, context);   }
} export async function reset__rpc() {   log(`${logPrefix}|reset__rpc`)
var PROJECT_ID = Session.get('projectId');     var portarray = [];     var delarray = [];     var hostid;
this._parentPicker && this._parentPicker._updateColumnHeights();    return true;   },
thingsChanged: function() {          if ( this.get('application.currentRouteName') === 'splash')
Target.prototype.yield = function yield$() {     return this.then()['yield'](...arguments)   }   Target.prototype.ensure = function ensure() {
;  for (key in this.tables) {   if (!this.tables.hasOwnProperty(key)) continue;   needs += this.tables[key].tbl.segments.length;   if (key == tbl.name) this.tables[key].done = true;
_.each(this.getReverseRelations(), (relation) => {    relation.addRelated(this.instance, opts);   });  },
this.once('end', () => {       this._removeFromPool();     });
function e() {             var e = t.call(this) || this;
if(err){                 throw new Error('Error sending Keen data: ' + err);             }
if (response.status !== 200) {                 console.warn('Successful response had status != 200:', response);                 return self.$q.reject(response);               }
maskToken.matches = maskToken.matches.reverse();                 for (var match in maskToken.matches) if (maskToken.matches.hasOwnProperty(match)) {                     var intMatch = parseInt(match);
});      return this.on(name, _once, context);     },     writable: true,
}); NativeArray = NativeArray.without(...ignore);
export default class AuthenticatedUserAccountDropdown extends UserAccountDropdown {   constructor(...args) {     super(...args);
var traits = this.traits();             for (i = 0, l = traits.length; i < l; i++) {                 traits[i].setFromArgs( obj, args, ignores );
catch(e) {         setTimeout(checkDomLoadedIE, 0);         return;
throw err;   }
callMethod = function( methodName, args ) {
res = [];                  for (var i = 0; i < obj.length; i++) {                      res.push(copyCleanModel(obj[i]));                  }
throw new Error('Unrecognized initial character in unidiff line')           }
console.log(result);
async run() {     throw new Error(`Need to implement ${this.constructor.name} async run() function`);   }
this._commands = {}; });
this.route('root', {   path: '/',
default:       throw Error( 'Unsupported spline value' );   }
hasPendingChanges: false         }, () => {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path)
if (!this._parentWindow) {       this.parentWindow = windowAugmentation(this);     }
var that = this;             _.each(this.parents, function(v, i) {                 result[that.fields[i]] = v.evaluate();             });
reflect(this).slotAt('_model').beCreator();
var slices = 24;   var wfs = [];   for (var i = 0; i < radii.length; i++) {
'use strict'
it('should handle wd errors asynchronously', function(done) {     co(function*() {       try {
var s = _getActiveSelection();
$("#redeem").keypress(function(e) {     if((e.keyCode ? e.keyCode : e.which) !== 13) return;
io.register_write(port, this, function(out_byte)     {         this.write_data(out_byte);     }, function(out_word)
return function () {              noSurroundCompound.apply(this, [node]);          };
anInstance(that, $ArrayBuffer, ARRAY_BUFFER);   var numberLength = +length;   var byteLength = toLength(numberLength);   if (numberLength != byteLength) throw RangeError(WRONG_LENGTH);
'use strict';
} else if (this.readyState === 3) {                         span.imp().info('XMLHttpRequest loading (readyState=3)');                     } else if (this.readyState === 4) {
var key = '';         for (var i = 0; i < defaultParamPropList.length; i++) {             var name = defaultParamPropList[i];             var chunk = parameters[name].toString();
{    for(var i = 0; i < object._missing_components.length; ++i )    {
}),       takeEvery(self.types.events[event].subscribe.DATA, function*({         meta,
if (!this.requireMinimumVersion(this.apiVersion, minimumVersion)) {       throw new Error("this method requires at least @{minimumVersion)");     }
this.state.set(this.state.value().join(''));                  status.emit('complete', 'concat', 'concatenated ' + stateItemCount + ' item(s).');              }
return $.grep(this._pages, $.proxy(function(page, index) {    return page.start <= current && page.end >= current;   }, this)).pop();
})(EndGate || (EndGate = {}));
constructor: function GroupingModel(...args) {             GroupingModel.__super__.constructor.apply(this, args);         }
var _ = require('underscore');
function Ui () {   this._background = null;   this._foreground = null;
for (var i = 0; i < len; i++) {
var BoardElement = function(board, element, options) {    this.element = element;    this.options = options;
linkEl.blur();
var paper = require('../node_modules/paper/dist/paper-core.js');
t.ok(is.number(-Infinity), 'negative infinity is number');   t.ok(is.number(Object(42)), 'object number is number');   t.notOk(is.number(), 'undefined is not number');
var utils = require('../utils')   , nodes = require('../nodes');
, cmdItems       , taskNames = []       , preempt;
for (i = 0; i < this.regexpProps.length; i++) {       property = this.regexpProps[i]
this.$().data('DateTimePicker').destroy();   } });
this.assets = [];   var addressToPath = {};
async function extractApkInfoWithApkanalyzer (localApk, apkanalyzerPath) {   const args = ['-h', 'manifest', 'print', localApk];
TileRequestHandler.prototype['GET'] = function(server, req, callback) {  var self = this;  var done = _.once(callback);
var f = require('util').format,   Query = require('../connection/commands').Query,   MongoError = require('../error').MongoError;
this.bind('change', function(e) {     self.find('option').each(function() {      var $form = $('#'+$(this).val());
port.send('deprecation:watch');     this._super(...arguments);   },
this.height = "";
});             for (var l=0;l<removedLinks.length;l++) {                 RED.nodes.removeLink(removedLinks[l]);
return {       originalPosition: originalPosition   };
if (text.length > 0) {             L.DomUtil.removeClass(this._close, 'leaflet-pelias-hidden');
this.clearArgs = function() {         self.argArray[_POST] = [];         self.argArray[_GET]  = [];     };
return isValid }
gen.fs.write(gen.destinationPath('extension.js'), 'foo');      })      .on('end', done);
const asyncWrapper = function (f) {     return function (...args) {       return f.apply(this, ...args).catch((e) => {         recorder.saveFirstAsyncError(e);
var self = this   Tensor.apply(self, arguments) }
, graveyard = []
_.each(state, function(value, key) {                 that.key_value_lock = [key, value];                 try {
$(".admin section .image").click(function (event) {         var elementId = event.target.id;         var sectionId = ExtractSectionId($(this));
function ondata (b) {
if ( !internals.diff.fullcolumns )             internals.diff.fullcolumns = [];         var oKeys = Object.keys( db[ 0 ] );
{    throw new Error("QR Error: Error getVersionForNumber");   }
};      for(let i = 0; i < tokens.length; i++) {       yield parseToken(tokens[i]);
if ($(this).hasLabel()) {        $(this).children(".select-preview-label").html("");       }
var toObject = require('./_to-object'); var $getPrototypeOf = require('./_object-gpo');
throw new Error("invalid call: atomic expression");     },
global.process = process;
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.degrees);     return x / Math.PI * 180;
}, function (reason) {                             throw new Error(file + ': Error loading data from .stl file: ' + reason);                         }
this.target = attachToOpts.element || document.body;   this.el.classList.add('shepherd-element');
if (typeof val !== "number")                 throw new Error("texture_table requires numeric values");             elements.push(val);
Object.values = function(object, skipFunction)  {
let names = className.split(/\s+/);       names.forEach((name) => {         name = name.slice('ql-'.length);         if (icons[name] == null) return;
if (memoryRegion >= this.REGION_ROM0) {   console.log("Cannot write to read only memory");   return;  }
pzprv3.includeFile("tests/for_test.js");    result = false;   }
if (input.length != this.size)         throw new Error("INPUT size and LAYER size must be the same to activate!");
this.targetElement.keyDown(key);           this.targetElement.keyUp(key);         });
initXhr: function(xhrobj) {             var self = this, factor = arguments.length > 1 ? 80 : 98;             if (xhrobj.upload) {
default:         throw new Error('Unsupported data type.');     }
Canvace.MultiSet.prototype.fastAdd = function () {  for (var i in arguments) {   if (arguments.hasOwnProperty(i)) {    this.elements[this.nextId++] = arguments[i];   }
var webshot = require('../lib/webshot');
return function() {     var value0 = style(this, name),         value1 = value(this);
let clickedEl = event.target;
}   var items = [[]];   items[0]['a'] = out;
return this._instantiateModel(dasherize(type), attrs);   }   create(type, attrs) {     var collection = this._collectionForType(type);
rebuild: function (rebuild) {
this.aParams = [];    this.vids = [];
var modelsChange = false;   var models = this.project_.models();   for (var i = models.length-1; i >= 0; i--) {     modelsChange =
for ( var i = 0; i < this.propertyBindingsArray.length; i ++ ) {
var express = require('express')   , everyauth = require('everyauth')
this.inline = new InlineCompiler(this.options);   this.reset(); };
this.url = url;
e.preventDefault();     $target=$(e.target);     if(!Meteor.user()) throwError('You must be logged in.');
else {                 throw new Error('buildfunc: unsupported refarg type: ' + func.name);             }             out.push('}');
if (_.isUndefined(t2))             throw new Error("t2 multiplication with undefined type?");         var type_list = [
} else {    this.keys = keys;    this.defaultValues = {};
purge: function () {     var d = new Date();     var now = d.getTime() + (d.getTimezoneOffset() * 60 * 1000);
[    "cloudHost"    , "streamHost"
}]);     this.tooltipView.model.updateContent({       test1: 'test1',
subnode.updateChildTransforms();   }   for (c=0; c<this.components.length; c++) {    this.components[c].onUpdateTransform(absolute);
const mod = require(src);     if (args && args.constructor === Array) return mod(...args);     return mod();
elem.data('__coelement:' + this.className, coelem)   }
}             $.when(...contentLoadedPromises).done(_.bind(function() {                 this._hideLoading();
}             this.modal.show(context.content, { attachment: context.attachmentToFocus });         }     });
size: props.size,                   direction: dir                 });
script.onload = script.onreadystatechange = function() {       if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {         done = true
}                 ilios.pm.schoolDepartmentTreeModel = [];                 for (var key in parsedObject) {
var keys = [];     for (var key in obj) {       if (obj.hasOwnProperty(key))         keys.push(key);     }
if (arguments.length==2) {              if (r) throw new Error(path+" is Read only.");              if (text==null) delete ls[path];
sequence.push(scene)
co(function* scrape() {  const res = yield fetch('http:
if (prev_output.is_stable === 0)            throw Error("prev is not stable");           if (prev_output.is_serial === 1 && prev_output.sequence !== 'good')
import U from "src/util/util.js";
var ll = par.getElementsByTagName('li'); if (!ll.length) return '';  for (var i = 0, l = ll.length; i < l; ++i) {   var range = ll[i].getAttribute('data-range');
this.append($=> this.getEndXMLTagDecl('style'));  }
var grafs = text.split(/\n{2,}/g);  var grafsOut = [];
if (!Pokedex._(self.species + "?")) {   throw new Error("There exists no Pokémon in the Pokédex object with the species name \"" + self.species + "\".");  }
Object.keys( extenders ).forEach( function( i ) {     for( var key in extenders[ i ] ) {      if( !extenders[ i ].hasOwnProperty( key ))continue;      result[ key ] = extenders[ i ][ key ];
var cs = this.current.fillColorSpace;       var rgbColor = cs.getRgb(arguments);       var color = Util.makeCssRgb(rgbColor[0], rgbColor[1], rgbColor[2]);       this.ctx.fillStyle = color;
if (options.fn) {         return handlebars.helpers.with.call(this, this.author, options);     }
if (qq.FileUploader.prototype._leaving_document_out(e)) {                         for (i=0; i < dropzones.length; i++){ dropzones[i].style.display = 'none'; }             }
let onMouseMove = run.bind(this, (event) => {         if (plotter) {
this.retCallback(data);              this.retCallback = null;
if (VIE.prototype.Attribute) {  throw new Error("ERROR: VIE.Attribute is already defined. Please check your installation!"); }
LEDGER_EVENT: NGN.define(false, false, false, (EVENT) => {     return function () {       NGN.BUS.emit(EVENT, ...arguments)     }
const model = modelParam;
var path = require('path') module.exports = function(version) {
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "DLE", Array.slice(arguments));   },
__extends(StickRightLocationDirective, AbstractLocationDirective);         function StickRightLocationDirective(...args) {             AbstractLocationDirective.apply(this, args);         }
target.findAll = function (match) {             let result = [];             for (let index = 0; index < this.length; index++) {                 const element = this[index];
for (var idattrs=0; idattrs<dattrs.length; idattrs++) {    var cmd = dattrs[idattrs]
if (NoSqlProviderUtils.isCompoundKeyPath(index.keyPath)) {                                     throw new Error('Can\'t use multiEntry and compound keys');                                 }
node.set(request);      node.getChildren().forEach(function (child) {        this._setTreeNodes(child, request);       }, this);
var samplers;   for (var i=0; i<batches.length; i++) {    var batch = batches[i];
'use strict'; var parse = require('url').parse   , http = require('http');
return config;     });   }); };
const keys = key.split(',');             _.each(keys, k => {                 this.keyListener.simple_combo(k, value.bind(this));             }, this);
this._fastBootCookiesCache = fastBootCookies;     return this._filterCachedFastBootCookies(fastBootCookies);   },   read(name, options = {}) {
while ( jsonml.length ) {     content.push( render_tree( jsonml.shift() ) );   }
var that = this;  $(oText).attr({ name: 'dummy_' + Math.floor(Math.random() * 1000000), autocomplete: 'off' })   .bind(is_opera || is_ie ? 'keypress keydown' : 'keydown', function (oEvent) { return that.handleKey(oEvent); })
if ( value === undefined ) {   throw new ve.Error( 'Undefined attribute: ' + key );  }
}         callback(err, response);     }
_setEditorSize: function( width, height ) {
if (endContainer.nodeType !== Node.TEXT_NODE) {                 throw Error('Could not found endContainer, highlighting would be unstable');             }
return (cache[markup] = fn);     };     var S = scope.Simplate = function(markup, o) {         this.fn = make(markup, o);
, SessionStateStore = require('./state/session')      , InternalOAuthError = require('./errors/internaloautherror');
function TextInputUnit () {     }
}     return func(...arguments);   };
var Intercom = function() {    };
var jsDAV_iQuota = module.exports = function() {     this.REGBASE = this.REGBASE | jsDAV.__IQUOTA__;
}         }         var result = cp.TransitManager.prototype.transit.apply(this, [url, options, transitOptions]);         if(result) {
var prefixes = OpenLayers.Style.SYMBOLIZER_PREFIXES;         for (var i=0; i<rules.length; i++) {             for (var s=0; s<prefixes.length; s++) {
Object.keys(fixtures).forEach(function (fixture) {
req.user = user;       passport.authenticate(strategyName, _.partial(_onPassportAuth, req, res))(req, res);     })(req, res);
this.total  += t.total;       t.setParent(this);
var storage = localStorage, i, key, new_value, func, all = bgSettings.defaults;   func = function(val) {
minValue(query=null) {         if (!this.__backend.connected) throw new Error('JungleDB is not connected');         return this._currentState.minValue(query);
}   }   this._super( "_setOption", key, value );  },
RANDO.TileContainer.prototype._computeUvs = function () {         var tiles = this._tiles;
function DatePickerCtrl($scope, $mdDialog, currentDate, $mdMedia) {     var self = this;
var s = require('../index'),     assert = require('chai').assert;
if (!base) {         throw new Error("Please provide a base namespace!");     }
, sql = ''       , cb       , processor;
var frequencies = [];         var context = new window.OfflineAudioContext(1, buffer.length, buffer.sampleRate);
expandIsoform(selectedIsoform);                                }             }
var mockContext = {   report: function(obj) {    collectedReport.push(obj);   }
var tableClass = function() {     var columns = that.columns_.getKeys().map(function(colName) {       this[colName] = new lf.schema.BaseColumn(
{     messageLogger.warn("Droped message, unkown Message Type: '" + message.type + "'");   }
import * as olProj from 'ol/proj.js'; import olcsUtil from '../util.js';
function get(concept) {             return $http.get('/openmrs/ws/rest/v1/concept/' + concept, {
var tar = require('tar')               , zlib = require('zlib');
value = arguments[0]         notifySubscribers(value)                }
_focusCriteria: function () {             this.$(this.criteriaSelector).focus();         },
value: function(callback) {           var sum = 0.0;
var express = require('express')     , http = require('http')
if ( xhr === self.xhr ) {       response( data );      }
console.log("\nBot Express\n");
export const config = {     formComponent: 'vueForm',
return (this.patternFocused[patternId])   }   setPatternFocused (patternId, focused) {     this.patternFocused[patternId] = focused
var Utils = Class({  $singleton: true,
$('#help-summary h3').each(function(){    if ((h2hash===hash && $(this).is(':visible')) || $(this).attr('h2hash')!==h2hash) {     $(this).slideUp();    } else {
if (result0 !== null) {           result0 = (function(offset, plist) { return node("node_directive", "DAT", plist); })(pos0, result0[3]);         }         if (result0 === null) {
each(['delete', 'has', 'get', 'set'], function (key) {     var proto = $WeakMap.prototype;     var method = proto[key];     redefine(proto, key, function (a, b) {
constructor(args) {         super(args);         this._totalHeightGap = 50;         this._parent = _.get(args, "parent");
return query     },
});             this.k.expose(MockModel.get('items', {                 fetch: function() {
, binomial = require('binomial')   , labor = require('labor'); }
data.oldParams = item.Params;      var params = handleParamsInCommand(func, data, start? messages["startApplication"] : messages["stopApplication"]);
for (var index = 0; index < array[i].length; index++) {           var value = array[i][index] + "";
sheet = sheet || NOVAE.CurrentSheet;     var letter = NOVAE.$.getLetters(name);     var number = NOVAE.$.getNumbers(name);     NOVAE.Cells.Used.registerCell(letter + number, sheet);
let bar = [];  bar.push(...foo, 99); }
if (missingOptions.length) {     throw new Error('The following options are required: ' + missingOptions.join(', '));   }
function jmGraph(canvas, option, callback) {
'use strict'; var $export = require('./_export'); var $at = require('./_string-at')(false); $export($export.P, 'String', {
event.preventDefault();       this.closeMenu({ focusButton: true });       break;
obj.getCenterPt= function(){         var {pt1,pt2}= this;         var x= (pt1.x + pt2.x)/2;
if (edit_mode){         $(this).autofit({'min_height': MIN_HEIGHT});         return;
each(data.handlers, function(handlerSpec, eventName) {       this._bindHandler($el[0], data._owner, eventName, handlerSpec);     }.bind(this));     return $el;
if(name in this._widgets){    return this._formWidgetValue(this._widgets[name], value);    }
} catch( error ) {       setTimeout( doScrollCheck, 1 );       return;
if ( typeof textureDimensions[ file ] == "undefined" ) {    throw new Error( "No dimensions set for texture \"" + file + "\"" );   }
if (!converted) {     throw new Error("Unsupported language code '" + langCode + "'.");   }
this.get(...[wsRoute].concat(wrappedMiddlewares));
.replace(/<OTHER_SELECTIONS>/g, otherConstraints.join(' '))                 .replace(/<SELECTIONS>/g, this.buildSelections(otherConstraints));
this.stopTrackingProgress();     }
if (!subDef.inactive && _postal.configuration.resolver.compare(subDef.topic, envelope.topic)) {             subDef.callback(envelope.data, envelope);         }
var lines = o.value.split("\n");    var indices = [];    var sl = 0;
if (!options) {             throw new ReferenceError('A date or time stamp must be provided.');         }
{          throw new Error( "Long_Task no longer runnable" );      }
List.fromArray = function (array) {         var l = Nil
if (file == null) {         file = yield r.table(fileTable).get(fileId)
this.sandbox.emit('husky.select.terms-of-payment.revert');                         }.bind(this)                     });                 }.bind(this));             }
var dwords = [];        var len = message.length;
if (this.validURL()) {     return (!/^[a-zA-Z]+:/.test(this) ? 'http:   }
return logDb(new settingDb());         else throw new Error("db nams is not valid");     },
if (typeof ctx[key] === 'function') {       Vue.prototype[`$${key}`] = (...args) => ctx[key](...args);       Vue.directive(key, historyRedirect(ctx, key));
if (!fileStats.isFile()) {   throw new Error("Not a file: '"+inFile+"': ");  }
function promiseify(fn) {   return function (...args) {     return new Promise((resolve, reject) => {
var cwd = path.resolve(npm.dir, p)   var sh = npm.config.get("shell")   fs.stat(cwd, function (er, s) {
labelNodesDidChange: function() {           this.notifyPropertyChange('labelNodes');         }.observes('*model.labels'),
requires: {                mongodb: ">2.5.5"     }
if (format === undefined) {     throw new Error('idate() expects at least 1 parameter, 0 given')   }
const   cache = require('gulp-cache')   , del = require('del')
return Q.all([     exec.apply(null, root),   ]);
for (var i in defaultAspectRatios) {             if (defaultAspectRatios[i].length > 0) {                 $aspectRatioToolbar.find('.btn-group').append(render(defaultAspectRatios[i]));             }
, hotplate = require('hotplate')
var feedback = Jasper(function() {       throw new Error('up');     });
var adUnit, error, createAd;         if (!that._frame.contentWindow) {             error = 'the iframe is not anymore in the DOM tree';
if ('string' === typeof view) {                 return this.renderFromFile(view, model)             }
function PublicKeyInput(...args) {   Input.apply(this, args); }
if(fontSize.search('em') > 0) {       fontSize = quail.convertToPx(fontSize);     }
function batchImages(descriptor) {    for (var i in descriptor.frames) {     if (descriptor.frames.hasOwnProperty(i)) {      (function (id, progress) {       if (id in imageset) {
return "mat";             throw new Error("internal error: not pod, vec or mat");         }
this.isTopPage = store.getter(getters.LOCATION_IS_TOP);
export async function exploreCave (store, action) {   const {caveId} = action.payload
if (fragment.match(pathRegexp)) {           throw new Error("Recursive fragment usage detected on " + path + ".")         }
this.emit('event', packet.items);       this.emit(...packet.items);       break;
}     app.getAsyncHelper('include').apply(this, arguments);   });
enyo.forEach(this.enyoIndexer.getFunctionList(pattern), function(name) {     name = name.substr(len);     suggestions.push(name);    }, this);
var key = 'secret'       , pt = '☢€  ☂ ڴ!'       , ct = twoFish.encrypt(key, pt)       , cpt = twoFish.decrypt(key, ct);
'/login' : controllers.auth.reverse   , '/logout' : controllers.auth.basic  }
throw new Error('Rev A boards are not yet supported.');         case 'B1':
var __call__ = function() { args = arguments.___insert(0, klass) return create_object.apply(undefined, args);
var MAX_ATTEMPTS = 10               , toBeCached = {};
var i, len = value1.length;         var arr = createTypedArray('float32', len);         for(i=0;i<len;i+=1){
createVideoNode(url) {
pinpointApp.factory('ServerMapFilterVo', [  function () {     return function ServerMapFilterVo(dataSet) {         var self = this;
if (btn.hasClass('dwwb')) {                     if (testTouch(e)) {
if (!$(this).hasClass('isPrime')) {                                          $(this).css({textDecoration: 'none'});                 }
var ctx = this;
if (g === null) {             throw new Error('Error creating WebGL context.');         }
function askForAdminPassword() {     if (this.regenerate || this.serviceDiscoveryType !== 'eureka') return;     var done = this.async();
const dynamic = {};                  for (const field in renders) {             if (renders.hasOwnProperty(field)) {                 const target = `children.${code}.${field}`;                 dynamic[target] = renders[field];
constructor(target, prop, value, meta) {     super(target);     this.prop = prop;
function update(dev,par) {         var me = this;
.attr('type', 'radio')                             .addClass(that.model)                             .val(item)
const shell = require('gulp-shell');
default:             throw new HypergridError('Expected string, function, or undefined.');     }
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SOH", Array.slice(arguments));   },
expect(this.player1.amber).toBe(3);                 expect(this.player1).not.toBeAbleToPlay(this.punch);             });
unsubscribe(sid, optMax) {     return this.nc.unsubscribe(sid, optMax)   }
var statuses   = require("statuses"); var buffer     = global.Buffer || respond; module.exports = respond;
_.each(this.views, v => {              this.listenTo(v, 'viewportHeightChanged', this.__handleViewportHeightChanged);              this.listenTo(v, 'positionChanged', this.__handlePositionChanged);
constructor(image) {     super('image_not_exist');     this.image = image;   }
var i = 0;       for (var r = 0; r < data.length; r++) {         var item = data[r];         textToInsert[i++] = "<tr>";
BengineConfig.extensibles.xcode = new function Xcode() {  this.type = "xcode";  this.name = "code";
else {     throw new Error('[sprintf] huh?');    }    _fmt = _fmt.substring(match[0].length);
if (this._transformContent || _applyMatrix)    this.applyMatrix(true);
const GlobalObject = (typeof self !== "undefined") ? self : global;
default:       throw new Error(`Only support reference child(), parent(), val() \ and exists() now, ${obj.property.name} found`);   }
this.charPlayer = null;
if (typeof func === 'function') {                 return func(...evalList(flags, scope, locator, this.args, part));             }
val = "",     arr = [];    if (sel.eq(0).val() == "id") { val = "id_"; }
var setup = require("../common/setup-base")   , path = require('path')
, Db      = require('../../')   , BooleanType = Db.Boolean, StringType = Db.String
this.tagSelectView = new App.TagSelectView({             mediaSources: this.mediaSources         });         this.tagListView = new App.TagListView({
if (!m_width || !m_height) {       throw new Error('Map layer has size 0');     }
console.trace ? console.trace()           : Function.prototype.apply.call(console.error, console, arguments);     })
constructor(tag, url, path, xhrSettings, context) {                  let assetConfig = {             tag: tag,
let o = chalk.yellow('[out]')   console.log = function(...args) {     out.push(args)
this.getById = function (id) {         return co(function* () {
init: function () {     this._super();     this.set('roleArray', (this.get('primaryResource.projectRoleTemplateIds') || []).map(r => {       return {
var spriteY = this.y;                     this.sprite.setPosition(spriteX, spriteY);                     if (this.spriteNombre) {
if (event.keyCode === 13) {                 enter_room();             }
, nameRe = /^[a-zA-Z][0-9a-zA-Z]*$/   , rel, setReverse, validate, unsetReverse; setReverse = function (rel, index) {
return;   }); };
}; function printError(...args) {   console.error('INVALID COMMIT MSG: ' + util.format.apply(null, args)); }
'Complex': function (s) {       throw new Error('Cannot convert Complex number to Node')     }
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[46],{
else                 throw new Error("i > 0 in pod element");         }
var parse = function(dimension, elementType) {         var array = [];         if (dimension.length > 1) {
},   _resizeMap: function _resizeMap() {     var map = this._getMap();     map.resize();
retNode = node.left;     } else if (comparison < 0) {       retNode = node.right;
var _operationTypes = {         'and': true
});         instance.$service.invoke(instance, Class, slice.call(arguments, 1, arguments.length));
lrSnippet             , mountFolder(connect, '.')             ]
this.parseResults = function(dataobj, facetMap) {       var resultobj = {};       resultobj["records"] = [];       resultobj["start"] = "";
if (!that.isDisabled() && !$this.parent().hasClass('disabled')) {           var $options = that.$element.find('option'),
if(typeof arguments[0] === "object") {   that = Gibberish.Reverb( arguments[0] );
test.equal(reason, undefined, 'Neither USB device was found');       });
it("should have one child of type group ", function () {              const group=file.openGroup('pmcservices');
app.config = config.init(_config)   app.use(route.get('/connect/:provider/:override?', function *(provider, override) {     if (override == 'callback') return yield callback     this.session.grant = {
if (this.position + numBytes > this.byteArray.length) {       throw new Error('dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread');     }
{    throw new Error("QR Error: System.ArgumentException");   }
Scope.prototype.$emit = function() {                          return origEmit.apply(this, arguments);
}             throw new WebIDLParseError(str, line, tok, tokens.slice(0, 5));         };
};     this.setHost = function (h) {         host = h;     };
this.parentItem.fetch();         });     });     return this;
if (!((address_ != null) && address_)) {               throw new Error("Missing address input parameter.");             }
this.send(from, 'Hi ' + from + ', nice to meet you!'); };
function off() {   config.off(...arguments); }
return items;    }
},     getFiles: function( data ) {         var files;
constructor(system, depend) {     super('system_depend_error');     this.system = system;     this.depend = depend;
constructor (YoutubePlayerSettings, YoutubeSearch, YoutubeVideoInfo, PlaylistEditorSettings) {    Object.assign(this, { YoutubePlayerSettings, YoutubeSearch, YoutubeVideoInfo, PlaylistEditorSettings });
this.view.$('.js-collapse').click();       expect(this.model.toggleCollapsed).toHaveBeenCalled();     });
let topologyContextProps =         { handleReset: this.resetTopology         , handleTopoRequest: this.handleTopoRequest
var path = require('path')   , util = require('util')
if (Node.LEADER === packet.state && Node.FOLLOWER !== this.state) {       this.change({ state: Node.FOLLOWER, leader: packet.leader });     }
if (response.status != 200) {     throw new Error('Failed loading data from ' + response.url);   }
this._eventInput.on('clean', function(){             if (this._dirty) {                 this._dirty = false;
this.menuItemDiv.click (function (event) {   myThis.isOpen = !myThis.isOpen;   if (myThis.isOpen) {
data.eachItemGraphicEl(function (el, idx) {                 var itemModel = data.getItemModel(idx);
, showImage = true   , debugMode = false;  let url, childArgs, phantomProcess;  if (utils.isRefererValid(referer)) {
var util = require('util')   , Collection = require('./collection')   , uuid = require('../util/uuid')   , crypto = require('crypto')
(function () {     var opts = options(process.argv);
atEnd: function () {       if (this.situation.loops === true) {
var toString = Object.prototype.toString   , id = toString.call(new Error()); module.exports = function (x) {
this.set( 'mouseUpListener', () => {             Ember.$( 'body' ).removeClass( 'resizing' )
function getFixturePath(...args) {         const filepath = path.join(fixtureDir, ...args);
this.proxyLabelMethods.forEach(function(method) {         labels[method] = this[method];       }, this);
$('.prime-live-iframe')[0].contentWindow.CKEDITOR.inline(this);          });
const hashmap = {};   Object.keys(this.items).forEach((key) => {       hashmap[key] = fn(this.items[key]);   });
'use strict';
(function (require) {   var __NEJS_THIS__ = this;
{                 const document = this.documents[i];
it('superscript exclusitivity', function() {       let editor = this.setEditor('<p><sup>0123</sup></p>');       editor.formatAt(1, 2, 'script', 'sub');
result = this.multiply(result, m.flat);         this.matrixCache_[m] = result;       }
Float64Array.prototype.toJSON = Float32Array.prototype.toJSON = function () {     var json = '[';
"database",     async function(siteConfig, builtInPlugins) {         if (process.env.NODE_ENV === "production") {
debuglog("search complete");             if (self.unmounted || !self.state.searching || self.searchId != localSearchId) {                 console.error("Discarding stale search results");
if (typeof JpegImage === 'undefined') {     throw new Error('No JPEG Baseline decoder loaded');   }
saveAuth: function*(type, data) {       this.getApp().logger.debug('Save user auth', this._id, type);
let data = [];
, XMLDom = require("xmldom")   , helpers = require('../../helpers.js');
var args = _normalizeArguments.apply(this, arguments);    args.mode = 'toggle';    return this.effect.call(this, args);   }
};     me.callParent();     me.down('#id').setReadOnly(false);
var proc = spawn('REG', args, {         cwd: undefined,
module.exports = function() {     save.call(this)         .then(setValue(this));
throw new ErrorException("aObj: " + aObj.toString() + " is not an IAnaforaObj");  }
this.primitives = [ "print_string", "print_number"];     this.labels = {};     this.instructionIndex = 0;
let recommendedCounters = null;   if (props.recommendedCounters && !props.fullLineUp) {     recommendedCounters = (
callback(err);         }.bind(this));
], function(c) {    c.addRemoveClass("hover", hover);   }, this);
{  var info = "";
}             this.trigger('g:deleted');         }).fail((err) => {             this.trigger('g:error', err);
}, function (next) {     this.push(template(things));     next();
var Tile = function(tileCoord, state, opt_options) {   EventTarget.call(this);   var options = opt_options ? opt_options : {};
function () {  Clazz.superConstructor (this, J.adapter.readers.xml.XmlQEReader, []);  });
if (!content || !content.serialize || typeof (content.serialize) !== 'function') {     throw new Error('Content.serialize requires non-null Content instance as first argument')   } else {
var window = this.window,         msgChannel = null,
} else {   window.ga = function(...args) {     console.log(...args);   };
if (t.EQUALITY_BINARY_OPERATORS.indexOf(node.operator) >= 0 &&               path.get('right').isPure()) {               let left = node.left;
,    vec2 = require('../math/vec2') ,    shallowClone = require('../utils/Utils').shallowClone; module.exports = Heightfield;
extensions.concat(excluded),             async function(filePath, ev, match) {                 if (!options.excludedWatchPatterns.some(regex => regex.test(filePath))) {
project.config.templateNames = this.getTemplateNames()
ctx.compile_type !== Shade.FRAGMENT_PROGRAM_COMPILE) {                 throw new Error("gl_FragColor and gl_FragData assignment"                        + " only allowed on fragment shaders");
var tmp = require('tmp') var capture = require('./lib/capture_exec').capture
export default Model;
debug: (...args) => {                 console.log(...args);             }
utils.toUrl = function (string) {         var url;
var validUrl var malformedUrl var invalidUrl var server = http.createServer(function (req, res) {
}   Context.prototype.loggingIn = function() {     return Meteor.loggingIn();   }
if (op.test(parent.content[i].type)) {             throw usageError('in operations');           }
kb.holds(subject, UI.ns.wf('tracker'))) {       tracker = kb.any(subject, WF('tracker'))       if (!tracker) throw new Error('This issue ' + subject + 'has no tracker')
if (err) {                 nodeUtil.p2jwarn("fieldInfo XML Error: " + JSON.stringify(err));                 this.ptiParser = null;
el.remove();                             onReady.callOnContentReady(this.el, {newRender: false});                         }.bind(this), 5000, el);                     }
paths.push(pkg.name);   const parentDir = path.join(...paths);   const tarballFile = path.join(parentDir, `${pkg.version}-${pkg.dist.shasum}.tgz`);
for (var attr in self.defaultSettings) {         if (self.defaultSettings.hasOwnProperty(attr)) {             self.settings[attr] = self.defaultSettings[attr];         }
let items = [defaultItem].concat(this.props.services);     return items.map((service) => {       var selectedHtml = this.getItemHtml(service);       var dropdownHtml = (<a>{selectedHtml}</a>);
let search = event.target.value.trim().toLowerCase();         $(".admin-element-item").hide().filter(() => {             return $(this).html().trim().toLowerCase().indexOf(search) !== -1;         }).show();
self._gen_table = function( table ) {         var t = [];         if( table instanceof Array ) {
Handlebars.registerHelper('truncate', function(options) {         var value = options.data.root.summary;         if(value.length > 255) {
describe("Validators",() => {     beforeEach(() => {          jsdom();         const wrapper = document.createElement("div");
didInsertElement() {     if (this.get('shouldTransition')) {       this.transitionDomNode(this.get('element'), this.get('transitionClass'), 'enter', this.didTransitionIn);     }
if (!checkValue(value)) {     throw new Error('Not a valid boolean value, can\'t initialize.');   }
var authHeader = req.headers.authorization.split(' ')     var format = authHeader[0]     var tokenId = authHeader[1]
console.log("binding "+path);     sails.express.app[verb || 'all'](path, callbacks);
, "src/lib/keen-domready.js"           , "src/async.js"         ],
if (!semver.satisfies(pkg.version, that.options.gitbook)) {             throw new Error("GitBook version doesn't satisfy version required by the book: "+that.options.gitbook);         }
}   cls.TagManager.instance = this;
return fn( elem, ...args )
callback(err);                              });                          }
if(typeof options.name !== 'string') {      ko.logError('Components must be provided a name (namespace).');    }
val = val.replace(/[, ]/ig, '/').replace(/\/\    for (var m = 0; m < w2utils.settings.fullmonths.length; m++) {     var t = w2utils.settings.fullmonths[m];
exception = _error;               throw new Error("onNamespaceRemoved failure: " + exception);             }
makeNestedResource(this, 'invoices', 'invoice');             makeNestedResource(this, 'logs', 'log');         });
type = 'select';                 }                 if ( $node.prop( 'nodeName' ).toUpperCase() === 'TEXTAREA' ) {                     type = 'textarea';
it('should respect noValidate', () => {     var change = sinon.spy()       , inst = tsp(
httpServer.listen(0, (er) => {     assert.ifError(er);
console.log("Error in projects:", error);          });            models.flavors.bind("error", function(model, error) {              console.log("Error in flavors:", error);
callback(null, json.objectIds)   }) }
message: 'What do you want to call your view?',      default: answers.slugifiedName     }, {
this.getDomEvent().returnValue = false;       },
export const changeNumCols = (numCols) => (dispatch) => {     if (!numCols || numCols < 0) throw new Error(`Invalid number of cols:${numCols}`);     for (let i = 0; i < numCols; i++) {
if (key !== 1 && !this.findTouch_(touchList, key - 2)) {         d.push(value.out);       }
var browsers = getBrowser().browsers;             for (var i = 0; i < browsers.length; i++)             {
this.dialog('Insert Drop Zone', null, dialog_drop);   var node = select(container, toggle)[0];   if (node) {
} function AbortSignalPolyfill () {   this.onaborted = null   this._abortSignal = {aborted: false}
it('prevents the second launch of app', function (done) {       this.timeout(120000)
foreign_ids: ids         .map((id) => {           return this.collection + ':' + id;         })
while (innerWrap.firstChild) innerWrap = innerWrap.firstChild             elementPrt = innerWrap           }
if (notToReject-- === 0) {           deferred.reject(resolved, rejected);         }
this.items = [];                 }
module.exports = cliCommands;
var $export = require('./$.export');
close(...args) {     this.server.close(...args)   }
if(optFieldDefs) {       for (var name in optFieldDefs.fields) {         if(optFieldDefs.fields.hasOwnProperty(name)) {           var defs = optFieldDefs.fields[name];           var {result, keysToDelete} = parseFieldDef(x, name, defs);
var _Itag=function(args){   this.loc=args.loc;   this._base=args.base;
function defaultSetter(name, value) {   this._nativeSet(name, value);   if (this['$prop_' + name].nocache) {     this._triggerChangeEvent(name, value);
requires: {       mongodb: ">=2.6.0",       topology: ["single", "replicaset", "mongos"]     }
},   willInsertElement: function() {     this.set('participants', this.get('proposal.possibleDelegates'));   },
options_clone.comm = comm;             return that.new_model(options_clone).then(function(model) {
this.cencKeyIds.push(...keyIds);     this.systemIds.push(systemId);
}     var type = nonpol[0];     switch ( type ) {
if (routeInfo.route.indexOf(':') >= 0) {                 throw new Error('default route must not have params: ' + routeInfo.route);             }
fn.call(cursor.context, {                         sender: this,
module.exports = m2ts;
var name = element.tagName.toLowerCase();                 if (BuildHelpers.doesStringLookLikeDependency(name)) {                     dependenciesList.push(name);
_removeSegmentCasing: function(e) {
var plugin_cli = shell.exec(cmd, {silent:true});                     if (plugin_cli.code > 0) throw new Error('An error occured during plugin installation for ' + platform + '. ' + plugin_cli.output);                 });
function _injectSprintfProcessor() {          var values = [];
module.exports = function (context, env) {   var deps = ['popsicle'];
e.styleWhen(ui.common.click, false)     }
if (_.config.selection) {     for (var idx = 0; idx < _.message.length; idx++) {      var item = _.message[idx], iType = typeof item,
it('dialog element should be focused', function() {                 this.dialog.setContent('<div class="widget-content"></div>');                 this.dialog.focusContent();
for (var i=1; i < zoneBreaks.length-1; i++ ) {             lines.push(this._verticalLine(zoneBreaks[i], this.options.zoneStyle));         }
'use strict';
WMTSRequestEncoding.KVP;
'use strict';
console.log('warn: "Object.prototype.' + methodName + '" already exists.')     } else {       var method = require(filepath)       Object.defineProperty(Object.prototype, methodName, {          value: function () {
self.label = "General Plugin"; }(hatohol));
async function loadValue (ctx, { network, dataIdentifier }) {   const rec = await ctx.$self.load({ where: {     networkId: network.id,
this.next(); }
return api.getSite({ siteId }).then(async siteData => {       const accessToken = api.accessToken;       const arr = addons.map(({ addonName, addonDidInstall }) => {
if (inElements) {     for (var index = 0; index < inElements.length; index++) {      var elemObject = $(inElements[ index ]);
$self.one('animateClosedStart', function(e) {         e.stopPropagation();
var handler = dispatchHandlers[action]   if (handler) handler(...args)   else console.error('Missing dispatch handler: ' + action)
setHasClickThrough: function(status = false) {       const groups = this.layers.slice().filter(layer => layer.class() == MSLayerGroup)
if (fold.start.row < this.startRow || fold.endRow > this.endRow) {                 throw new Error("Can't add a fold to this FoldLine as it has no connection");             }
var isHardDisabled = isButtonDisabled($(this)) || isButtonDisabledVision($(this));
var express = require('express');
}   applyFilter(...args) {     return this.applyModifier(...args);   }
case 'starred_at':             return values.push(starData[that.STARRED_AT]);           default:
var result = [];      for (var row in table.getRows()) {       if (!table.getRows().hasOwnProperty(row)) continue;       row = table.getRows()[row];
"use strict"; var spawn  = require('child_process').spawn,     Stream = require('stream');
do {     parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);     if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
default:                 throw new Error("Unsupported uniform format for setting. May be a todo.");
class Observer {
var githubRE = /github.com\/([\w\.\-]+)\/([\w\.\-]+)\/blob(\/[\w\.\-]+)\/(.*)/;
, 'test piping results into next command': function () {     var ex = jake.createExec('ls', function () {})
function getHandleNearImagePoint(element, data, coords) {         Object.keys(data.handles).forEach(function(handle) {             var handleCanvas = cornerstone.pixelToCanvas(element, data.handles[handle]);
t.setXhr();  t.setWatcher(); };
exports.del = function(test, opts, callback) {   opts.method = 'DELETE'   return exports.request(test, opts, callback) }
Rye.define('DOMEvents', function(){
if (e.type === 'change' && tag !== 'SELECT') {             var type = this.type.toLowerCase();
var tasks = {}; options.map(function(t) { tasks[t] = 0 });
var o = {};  forEach(this, function (value, key) {   if (callback.call(scope, value, key)) {
ap.slice = function (begin, end) {
if(name === 'emit')       throw new Error('emit has been removed')
"use strict";
for (var j = 0; j < columns.length; j++)   {
if (Error.captureStackTrace) {              Error.captureStackTrace(this, arguments.callee)
list: [    {
return args.length >= 1 ? [].slice.call(args, 0) : []; };
this.expression._walk(visitor);             walk_body(this, visitor);         });
Crisp.Router.route('/forms/:id', function() {     HashBrown.Helpers.EventHelper.trigger('route');
this.container = element.parents('.' + vendor + 'canvas').addClass(animation);
if(shouldFail[method]) {     throw new Error("You should not call anymethod on this object");
const rootPrefix = '../..'   , InstanceComposer = require(rootPrefix + "/instance_composer")   , ModelBaseKlass = require(rootPrefix + '/app/models/base')
exception = _error;       throw new Error("clone: " + exception);     }
var Db = require('../../')   , Base = Db.Base, StringType = Db.String; module.exports = function (a) {
} catch (ex) {           throw new Error('trying to remove a non-exist shortcut', shortcut);         }
articleSchema.pre('findOne', function(next) {
current_state(data);           });         }
if (isMaster) {       let rs = this._db[cmd](...args);       if (cb) process.nextTick(() => { cb(rs); });
esriRequest({               url: portalUrlUtils.getUpdateItemUrl(this.portalUrl, userName, itemId, folder),               handleAs: 'json',
var pairs = s.split("&");       for (var pi in pairs) {         if(pairs.hasOwnProperty(pi)){           var kvsegs = pairs[pi].split("=");           var key = decodeURIComponent(kvsegs[0]), val = decodeURIComponent(kvsegs[1]);
Minionette.CollectionView = Minionette.View.extend({
this.aski18n(this); }
try {     var template = require(viewsDir + '/' + viewPath + '.hbs');     var html = template(data);     callback(null, html);
};   AbstractQuery.prototype.isBulkUpdateQuery = function() {     return this.options.type === QueryTypes.BULKUPDATE;   };
function formatArgs(args) {   var useColors = this.useColors;
if(this.options.callTip)    tip = this.options.callTip(text,val);    else
getRandomInt: function (min, max) {         return Math.floor(Math.random() * (max - min + 1)) + min;     },     topUpRooms: function () {
const redirHandler = (payload) => {             this.metrics.tick('request.redir');             return {
}   var _ = (deps && deps.underscore) ? deps.underscore : global._;   var Tweenable = (deps && deps.Tweenable) ? deps.Tweenable : global.Tweenable;   var now = Tweenable.util.now;   var defaultConfig = {
const install = plugin.install || plugin;   const ret = install(target, options);   installed.set(plugin, ret);
}   return processPlugins(plugins, arguments); };
for (var i = 0; i < objects.length; i++) {       for (var j in objects[i]) {         if (objects[i].hasOwnProperty(j)) {           target[j] = objects[i][j];         }       }
} else {           callback();         }
});                     self.trigger(e);                     return e.result;
if ( $container.length === 0 ) {             throw new Error("Container not found for PaletteSelector: " +                      spec.selector);         }
this.center = new Vector2();         this.rings = [];         this.isBridged = false;
function _tidyEmpersand(str, hasFirst, hasLast) {     if (str) {
if (!curr_layer.boundary){
}     return this._outerHeight(includeMargin);   };
function createElementCtor(ctor, base) {   function F(nodeName, namespaceURI, attributes, attributesNS) {     Element.call(this, nodeName, namespaceURI, attributes, attributesNS);     if (ctor) {
if (checkForProperty) {    throw new Error("You can't both check for the existence of a property and set it at the same time.");   } else {
if (definition.events) {                 for (event in definition.events) {                     if (definition.events.hasOwnProperty(event)) {                         this.addEventListener(event, createTrigger(definition.events[event]));                     }
if (this.messageToPeers) {             _.onAfter (log.impl, 'defaultWriteBackend', this.$ (params => {                 this.messageToPeers ({ what: 'log', params: params }, this.isDeveloper) })) } },
if(position === "left" || position === "right") {                     container.css({top:(container.parent().height()/2) - (height/2) + "px"});                 } else {
constructor: function PageableCollection(...args) {             PageableCollection.__super__.constructor.apply(this, args);         },
var list = document.querySelectorAll('div.bf');     for (var i = 0; i < list.length; i++) {         console.log(list[i].innerText);
this.set(options.updatedAt, now);    }    if (options.updatedBy && this._req_user) {     this.set(options.updatedBy, this._req_user._id);
}   logDebug (...args) {     this.log.debug(`[${this.socketId}] TcpSocket` + args.shift(), ...args);   }
console.log(node);                      throw new Error (node+" is not array. cannot join fmt:"+fmt);                  }
var params = {};       for (var i in this.pathParameterNames) {         if (this.pathParameterNames.hasOwnProperty(i)) {           var name = this.pathParameterNames[i];           params[name] = decodeURIComponent(matcher[parseInt(i, 10) + 1]);
avoidableParams[5] = avoidFords;                 var truckParams = [];                 var truck_length = permaInfo[preferences.value_lengthIdx];
if (i < 0 || i > 7) {       throw new Error("Invalid signature type");     }
Bridge.init(); });
_.each(fieldsValues, (setValue, fieldName) => {     this.setOne(doc, fieldName, setValue, options);   }); };
if (observer.addedComponent) {     for (var i = 0; i < entity._components.length; i++) {      observer.addedComponent(entity, entity._components[i]);
if (clip(d.geometry.coordinates) && dsoDisplay(d.properties, cfg.dsos.limit)) {           var pt = projection(d.geometry.coordinates),               type = d.properties.type;
fn.apply( this, arguments );   this._refresh();   if ( previous !== this.options.value ) {
JSii.prototype.queryParser = function(query) {     var res = [];     var currChar;
},         initContainer: function(original, ...rest) {             original.apply(this, rest);
tasks: {    * a(f) {     t.equal(f, fly1, 'pass fly instance to tasks');
exception = _error;       throw new Error("ResolveNamespaceDescriptor failure: " + exception);     }
}     flags = flags || {};     const previousValue = this.dataValue;
var vec3 = exports
return true; };
return change;         }     };
req.app = res.app = origApp;         return next(err);       });
var max = 0;     for (connectorId in this.edges) {         if (this.edges[connectorId].length) {             var connector = IdToConnector(connectorId);             if (connector.name == name) {
it("blank", function (done) {         this.timeout(constants.timeout);         Augur.blank(
export async function http__error(ctx, next) {   try {
var ptSlater =  Clazz.newIntArray (nFuncs, 0);  var atoms = this.asc.atoms;  for (var i = 0, pt = 0; i < tokens.length; ) {
function e() {                  var e = t.call(this) || this;                  return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._layer.addChild(e._img3), e._img2 = new PIXI.Sprite, e._layer.addChild(e._img2), e._img1 = new PIXI.Sprite, e._layer.addChild(e._img1), e._basePos1 = new PIXI.Point, e._basePos2 = new PIXI.Point, e._basePos3 = new PIXI.Point, e._tweens = [], e              }
},     onContentChange: function(optionIndex, e) {         var options = this.props.options.slice();         var option = _.clone(options[optionIndex]);
}     if ( ++steps > that.options.executionLimit ) throw new Error('Execution Limit Reached');    }
} function Line(opts, data) {  var self = this;  var series  = setDefaults(opts.series, xSeriesOpts, ySeriesOpts);
, debug     = require('debug')('koa-better-ratelimit')   , copy      = require('copy-to');
this.bindSourceData(this.boundSource);         this.__element.appendChild(documentFragment);     }
class Rectangle extends _RectangleBase$(T) {       Rectangle(left, top, width, height) {         this.left = left;         this.top = top;
prepareSVG(svg, options, encodings);  for(let i = 0; i < encodings.length; i++){   var encodingOptions = merge(options, encodings[i].options);
var logger;          var driver = model.load( module, {
;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
if (this._sPrettyPrintDelayedCallID) {        clearTimeout(this._sPrettyPrintDelayedCallID);       }
constructor(target, selector, args, undo, meta) {     super(target);     this.selector = selector;
'use strict';
let column_ = columns_[i];             if (!(column_ instanceof nlobjSearchColumn)) throw nlapiCreateError('SSS_INVALID_SRCH_COL_NAME');
var tmp = require('tmp')   , capture = require('./lib/capture_exec').capture
'use strict';
_classCallCheck(this, _ArrayCollectionStrategy);           _CollectionStrategy.call(this);           this.observerLocator = observerLocator;         }
this._createTree();             } else if (this.options.type === 'dialog' && this.options.autoOpen) {                 this.open();
if (oldMax !== newMax) {       this.element._flatpickr.set('maxDate', newMax);     }
var sockjs = require('sockjs') var path = require('path') var fs = require('fs')
this.extendForeignObject(obj_array._id, obj, (err) => {     if (err) {
var assert      = require('assert') var tag_version = require('../../lib/utils').tag_version require('../../lib/logger').setup([])
(function () {
this.set('module', () => {            });
var str = 'div.' + variables.get.typeOfBranch() + 'Branch:visible';                 var temp = [];                 $.each($(str).get(), function(i, item) {
, i18n = require('../index');
if (typeof number !== 'number') {       throw new Error('Argument received is not a number.');     }
class UnitHealthStore extends GetSetBaseStore {   constructor(...args) {     super(...args);
}       that.plugin.end();     }
proceed.apply(this, args);             if (tooltip.events && tooltip.events.show) {
if (!(o.jiff === share.jiff)) {         throw new Error('shares do not belong to the same instance (/)');       }
self[name + 'MarkReady'] = function(data) {                     if (!data) throw new Error("No object passed to " + name + "MarkReady");                     if (deferreds[name]) {
let queue = this._updateByIdQueue[_id]        this._updateByIdQueue[_id] = null
var bind = function(f ) {     var args = slice.call(arguments, 1);     return Function.prototype.bind.apply(f, [undefined].concat(args)); };
const CardListExample = () => {   const cards = [...new Array(10)].map((_, i) => (     <Card key={i} className="md-cell md-cell--2 md-cell--4-tablet">
return args[ lastToggle ].apply( this, arguments ) || false;   }));
var categories = this.model.get('data');         expect(categories.length).toEqual(2);         expect(categories[0].name).toEqual('Barcelona');
if (!object_ended) {                     throw new Twig.Error("Unexpected end of object.");                 }
, cache = require('../lib/cache/object')   , Job = require('../lib/Job');
} else {      return fileClient.fetchChildren(launchConfDir.ChildrenLocation).then(function(children) {
if (!((objectModelDeclaration_ != null) && objectModelDeclaration_)) {           throw new Error("Missing object model delcaration input parameter!");         }
var Backbone = require("backbone")   , Template = require("./template")
}     Collection.prototype.smartChanged = function(index, id, fields) {       var data = this[id].data;       _.each(fields, function(val, key) {
this.route('the-list');     this.route('selected-element');
console.log('testbody1');   process.nextTick(function () {     throw new Error('Too bad');   });
}                 base.update_cb(elem,val);             }
unsafeWindow.localStorage.clear();   for (var key in savedLocalStorage) {    if (!savedLocalStorage.hasOwnProperty(key)) {continue;}    unsafeWindow.localStorage[key] = savedLocalStorage[key];
renderObj.filename=tempFilePath;                 html=ejs.render(temp, options);               }else{
layer.methods = {};         methods = rules[path];         for (method in methods) {             if (!methods.hasOwnProperty(method)) {                 continue
goog.provide('rethinkdb.Connection');
var particleShader = [   'uniform sampler2D texture;' , 'uniform vec2 resolution;'
'value': dataArray[i],         'meta': Chartist.serialize(series.meta)       }, Chartist.xmlNs.uri);
io.set('transports', [                         'flashsocket'   , 'htmlfile'
Permutation.forEachPermutation = function ( array, callback ) {          recursiveForEachPermutation( array, [], callback );      };
propertyName: propertyName,                                     type: 'css-background-image'                                 };
typeof define === 'function' && define.amd ? define(factory) :  factory(); }(function () { 'use strict';  const items = [{}, {}, {}];
workflow: Ember.computed('submission.provider.reviewsWorkflow', function () {         return WORKFLOW[this.get('submission.provider.reviewsWorkflow')];     }),
if (e.target.tagName != "g") {         that.clearSelection();       }
yate.AST.prototype.error = function(s) {          throw new Error('ERROR: ' + s + '\n' + yate.parser._where(this.where)); };
function Command(json) {         var self = this;         self.objStatus        = ko.observable('ready');
init(); });
var json = self.elementToJSON()     json.data = _data     return json
var Schema = mongoose.Schema var UserSchema = new Schema({  username: { type: String, required: true, index: { unique: true } },
valueClick: action(function () {     if (this.canDig()) {       this.get('mixin').send('digDeeper', this.get('model'));
if ($(this).prop('checked')) {                 portal.chat.setSetting('offline', true, true);
if($(this).attr('disabled', true)){        return $(this);
Router._createDeferredRoutes = function () {     for (var n = 0; n < this._i18n.deferredRoutes.length; n++) {         var defRoute = this._i18n.deferredRoutes[n];
fg.controller('fgEditController', function ($scope, fgUtils, $location) {
this.addCss('navbar '.concat(prefix).concat('-')              .concat(this.position).concat(' bg-')              .concat(this.theme).concat(' navbar-expand-lg'));
function extend(target, modules) {   for (var i = 0, len = modules.length; i < len; i++) {     var module = modules[i];     switch (typeof module) {
collision: 'flipfit'         };
.on("mousedown", '[data-ax5grid-column-resizer]', function (e) {                 let colIndex = this.getAttribute("data-ax5grid-column-resizer");                 self.xvar.mousePosition = GRID.util.getMousePosition(e);
module.exports = HtmlBlockBinding;
this.showMessage("error", "Error while deleting script.");                                 }                             }, this)                         });
if (window.console && console[methods[zl]]) {                                          Function.prototype.apply.call(console[methods[zl]], console, result.format(logArgs, lvl, event));                 }
try {     yield packages.upload(pkg)     this.body = yield packages.get(pkg.name)   } catch (err) {
exports.show = function() {   this.body = 'Hero ' + this.req.user.login;
setTimeout((function() {         this.useToolbox();     }).bind(this), this.animTime_);     this.nextArticle(0, false, this.sectionTags_.length);
var lazy = lazy_require({   Client: [ 'azk/agent/client' ],
info.connection().on('connection', socket =>
Initializer.prototype.run = function(cb, thisArg) {   var phases = this._phases     , idx = 0;
var Convex = require(__dirname + '/../../src/shapes/Convex');
}   return this.render(template, options); }
}       objCount++;       break;
} else {       listners = getListeners(that, type, true);       if (listners) {
var events = require('events')   , util = require('util');
update: function (block) {              this.clear()
return Globalize[   runtimeKey( "messageFormatter", this._locale, [ path, options ] )  ];
}     for (var i = 0; i < listOrderedTickers.length; i++) {       var tickerId = listOrderedTickers[i];
default:         throw Error(`Unexpected tag: ${cp_info.tag}`);     }
each(arguments[0], function(value, name) {           this.setAttribute(name, value);         }.bind(this));       }
ACCESSIBLE_GLOBALS.customSidebarButtons : [];
writeUint64(value) {         if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');         this._view.setFloat64(this._writePos, value);
String.prototype.ucfirst = require('./lib/helpers/ucfirst'); var merge_options = require('./lib/helpers/merge-options');
this.on(C.EVENT_TYPE.LIGHT_STRUCTURE_CHANGED, function () {             this.updateLightParameters();             this.shaderFactory.setLightStructureDirty();
if (xhrObject()) {     return sendXhr('DELETE', config.url, config.params, config.api_key, callback);   }
if (is.defined(width)) {     if (is.integer(width) && width > 0) {       this.options.width = width;
writecb(er);   }); };
if(!await cfg.fileExists(modName)) {             throw new Error(`${cfg.getBase()} not found in ${cfg.getDir(modName)}`);         }
this.requestTransaction(function () {         if (op.id[0] === 0xFFFFFF) {
$scope.newReservation = true;     $scope.createNewReservation();    }
var res = '';         for (var i = 0; i < data.length; i++) {             var s = data[i];
jj = ((j*4) & modulus);    if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);    if(!sectors[addr]) break;
exports.remove = function (_path) {   _unset(this.config, replacePath(_path))
$(this).attr('checked', true);                 return false;
}   get (...args) {     let [collectionName, docId, field] = parseArguments(args)     return this.collectionSet.get(collectionName, docId, field)
if (opt_init && opt_init.responseType == 'document') {       return fetchPolyfill(input, opt_init);     }
app.render = function(name, options, fn){   var opts = {}     , cache = this.cache
function Scribble_canvas(tag) {   this.tagcanvasDiv = tag;    this.colorseg = Math.floor(Math.random()*14);
methods: {     toView_: function() { return this; },
function RuleDecl() {   throw new Error('RuleDecl cannot be instantiated -- it\'s abstract'); }
elements.each(function(i) {             var pos = this.getClientRects()[0],                 z = getZIndex(this);
if(newValue !== lastValue) {           meta.lastValue = value;           this.notifyPropertyChange(key);
function bound() {
if (options.inject && Array.isArray(options.inject)) {       injects.push(...options.inject);     } else if (options.inject) {
return self.order.indexOf(h);             });             for(i = 0; i < this.data.length; i += 1) {                 var row = new JsonRow({
async _uploadTask(blob, url) {     try {
var template = this.normalize(loaded, options);               extend(this.cache[plural], template);
, force = _ref[2]     , cb = _ref[3];
, pool = require('./collabjs.pool.mysql').pool   , passwordHash = require('password-hash');
export const Keen = KeenCore.extendLibrary(KeenCore); export default Keen;
this.newick = data;       tree.load(this.newick);     });
fs.appendFile = function(path, data, options, callback) {   callback = maybeCallback(callback || options);   options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });
Screen.prototype.exec = function(file, args, options, callback) {   var ps = this.spawn(file, args, options);   ps.on('error', function(err) {
this.webCompile(inPath, outPath, function (result) {         _this.fsWrite(inPath, outPath, result, callback);       });     }
export default CSVReader;
'</div>' +         this.view.toHTML() + '</div>'         '</div>';     },
Eventable.call(self);
if ( bool = !!elem.canPlayType ) {                 bool      = Boolean(bool);                 bool.ogg  = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,'');
unmountChildren: function(renderedChildren) {     for (var name in renderedChildren) {       if (renderedChildren.hasOwnProperty(name)) {         var renderedChild = renderedChildren[name];         ReactReconciler.unmountComponent(renderedChild);
this.listenTo(this.model, 'change:bits', function(wire, bits) {             this.$el.toggleClass('bus', bits > 1);         });
notIn(refValues, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValues = this._normalizeValues(refValues, valueInfo);             return !_.includes(normalizedRefValues, value);
this._fragment.d(detach !== false);   this._fragment = null;
var TObject = require( 'PHET_IO/types/TObject' );   var TVector2 = function( vector2, phetioID ) {     TObject.call( this, vector2, phetioID );     assert && assert( vector2 instanceof phet.dot.Vector2 );
if (typeof type === 'string') type = Shade.Types[type];     if (_.isUndefined(type)) throw new Error("attribute requires valid type");     var bound_buffer;
before(() => {     sandbox.spy(React, 'createClass');
}   const srckey = keys[0];   const dstkey = toresolve[keys[0]];   delete toresolve[srckey];
this.target = target;     this.selector = selector;
var Line = Base.extend({
function callbackHandler(promise) {         _this.set('promise', promise);         promise.then(
function * bench () {   var timeN = 0
var eslint = require('eslint')  , eslintConf = require('eslint/lib/config')
});                          $('[data-jpn="'+id+'"] > div.acf-repeater').addClass('-empty');                          setTimeout(function(){ jpn_acf_tabs(id, false, parent); }, 550);
const DEFAULT_EXTENSIONS = {   js: ['js', 'json'],   css: ['css'],   html: ['html']
return Promise.try(function () {     return this._doWorkFn(job.data);   }.bind(this))     .bind(this)
const PIPELINE_HEADER = `${V3_HEADER}.pipelines` function pipelineCoupling (client, app) {   return client.get(`/apps/${app}/pipeline-couplings`)
function log(data) {              instance.private$.logger.call(instance, data)       instance.emit('log', data)
Evme.$('.rightbutton', el)[0].addEventListener('click',       function setWallpaper(e) {         e.stopPropagation();
me.store.load();     me.callParent();   }
var target = path.join(process.cwd(), exercise.boilerplateOut[boilerplateName])   copy.copyDeps(target, callback) }
const id = workerTimers.setInterval(() => {                 throw new Error('this should never be called');             }, 100);
} else {       return this;      }     };
function onOffline() {   debug("MQTT client offline"); }
, stack = err.stack || message     var index = stack.indexOf(message) + message.length       , msg = stack.slice(0, index)
var widget = this.field.widget   var id = object.get(widget.attrs, 'id', this.autoId())   if (id) {
}     callback(...args)   }
attrs = [ attrs ];     }          for (var a = 0; a < attrs.length; a++) {         this.add(attrs[a].id, attrs[a].range);
if (!exp1.type.is_struct())                 throw new Error("internal error, was expecting a struct here");             var s = {};
userChoice, totalVotes = 0;             for (var c = 0; c < poll.choices.length; c++) {                 var choice = poll.choices[c];
{         super();
var testPositions = getTests(pos, ndxIntlzr, tstPs), testPos;                 for (var ndx = 0; ndx < testPositions.length; ndx++) {                      testPos = testPositions[ndx];
if (data.feed.entry.length > 0) {                 LoadMore.createView(function(event) {                     Search.searchPlaylists('', true);
checkImmutableMutable(function(immutable, mutable) {       var methodArgs = specifiers.map(function(generator) { return generator() });       assert.isTrue(TestUtils.returnsImmutable(methodName, immutable, mutable, methodArgs));
};     window.addEventListener('storage', this._notify, false);   },   willDestroy() {
'use strict';
else {         throw(Error("couldn't match NAK"));       }     };
constructor(opts) {     super()     this.authenticated = false     this.server = opts.server
beforeEach(function() {         scheduler = [
if (guestWindow != null) {     event.returnValue = guestWindow[method](...args)   } else {
function mixinProperties(obj, proto) {  for (var prop in proto) {   if (!obj.hasOwnProperty(prop)) {    obj[prop] = proto[prop];   }
socket.end();         throw new Error('websocket key is missing');     }
this.installDir = getPath(process.env.USERPROFILE, `Documents/Qlik/Sense/Extensions/${this.PKG_NAME}`);
var type = data[from].type;     var obj = data[to] = data[from];     obj.type = type;
}     subscribe(this.branch, this.id, options, cb)   })
}     test.done(); });
if (choice === "yes") {        var store = grid.getStore();        Ext.Ajax.request({
if (arguments.length > 0) {     return EventTarget;
passport.loadStrategies = function () {   var self = this;   var strategies = sails.config.passport;
for (var key in values) {       if (values.hasOwnProperty(key)) {         this.addAttribute(key, values[key])       }
text: "selected" }).on("change:selection", function(checkBox, selection) {   this.set("text", selection ? "selected" : "deselected"); }).appendTo(page);
var list = [];  var types = Object.keys(cache);  for (var i = 0, len = types.length; i < len; i++) {   list = list.concat(cache[types[i]]);  }
t.is(isEmpty([]), true)   t.is(isEmpty({* [Symbol.iterator] () {}}), true)   t.is(isEmpty([0]), false)
};   this.add = function(...args) {     queue.append.apply(queue, args);   };
,   currentTag = null   ,   item = null   ,   withinItem = false
hasChildShapes: function() {    for(key in this.childShapes) {     if(!YAHOO.lang.hasOwnProperty(this.childShapes, key)) continue;     return true;
this.css  = '';     this.onShow  = null;
if (semActs) {      semActs.forEach(function (act) {               pieces.push("\n"+indent+"   %");
if (bytesRead < count)       throw new System.IO.EndOfStreamException();     return this.m_tempBuffer;   });
vec = arguments[0];             if (!vec.type.equals(Shade.Types.vec3))                 throw new Error("create with 1 parameter requires a vec3");         } else if (arguments.length === 3) {
} else {           ddManager[method](...args);         }
for( i = 0; i < subs.length; i++ )   {
default:             throw new Error("Can't serialize object of type " + st.object.termType + ' into XML')         }
function addListener( {matches, onEvent} ) {     listenters.push({matches, onEvent}); }
this.rect.y += delta.y;         this.draw();     }
(spec.axes = spec.axes || []);     spec.axes.push(axis.def(ROW, encoding, layout, stats));   } else {
module.exports.group = function (array, size) {   var groups = [];
function square(coord) {    return board.square(coord);   }
"es": "agregar un estado para Alexa",          "pl": "dodaj stan dla Alexy"      } };
{         var tag = fn.tag;         var cons = fn.cons;         var newTag = new cons();
}   this.log.http("request", method, parsed.href || "/")   var done = requestDone.call(this, method, where, cb)
}         text.style("padding",padding)       }
for (let i = start; i < len; i++) {             this._drawLayerCanvasImage(images[i][0], images[i][1]);         }
if (!ethUtil.isValidAddress(target)) {     throw new Error('Please provide a valid Ethereum address as the target.');   }
},   onSearchInput: function(query) {     this.setState({searchQuery: query});     this.refs.pluginList.resetSelection();
$.ElementList = function () {  function $ElementList(elements) {   this.src = Array.from(elements);  }
var soundState = this._getSoundState(util.target);     for (var effect in soundState.effects) {         if (!soundState.effects.hasOwnProperty(effect)) continue;         soundState.effects[effect] = 0;
function saveAllFiles() {         var key;         for (key in sessions) {             if (sessions.hasOwnProperty(key)) {                 saveFile(key);             }
if (~nativeTypes.indexOf(id))       throw new Error('"' + id + '" is a reserved type name.');     customTypes[id] = 1;
module.exports = function () {  throw this; };
objectScale.x = scale.x;       objectScale.y = scale.y;       objectScale.z = scale.z;
var componentConstructor = function(config, localCreation) {         Component.call(this, config, localCreation);     };
return TouchHandler; });
imgObj = this.makeImgObj(dataURL, function(){     self.frameData.push(this);     self.rotations.push(0);
this.ext = function(to,from){         var keys = Object.keys(from);
run(this.app, {    'requirejs': true
}   insertWithRelatedAndFetch(...args) {     return this.insertGraphAndFetch(...args);   }
let branch = this.get('modelMeta').branch;     return branch == null || branch === defaultBranch;   }),
case 'pagedown':             if ( !isMac ) {                 var scrollView = this.getParent( NS.ScrollView );
if (getProfile) {      return This.setProfile(getProfile, false);     }
} else {         throw new Error('Invalid format specified. Please use "rectangle", "polygon", or "point"');       }
mouseMoveHandle = function() {
, _ = require('lodash')   , tingodb = require('tingodb')(); module.exports = {
var self = this         var config = this.app.config         var exp = this.exp         exp.configure(function(){
$('.bs-docs-carousel-example').carousel()
module.exports = function (series, thunk){    return eachLimit(series, 1, thunk);  };
if (err) return this.run('kill -9 %s', this.pid, function again(err, output) {       if (err) return fn(err);
scene.remove(gridSelections[gridName].dot);   }   scriptsToRun = new Map();   for (var markedPointName in markedPoints){
if (Object(data) !== data) {             return replaceComment(copy, src)         }
var listenerSourceCode = this.__getNodeText(observeBlock);    if(listenerSourceCode == null)      throw new Error("Encountered empty <script> element");    component.addEventHandler(eventName, listenerSourceCode);
show() {       this.$el.attr('aria-hidden', false).show();     },
$('body').addClass('menu-active');         $(ev.currentTarget).find('.dropdown-content').show();     });
var expected = [[0,0],[1,0],[1,1],[1,2],[2,2]];   for(var i = 0; i < expected.length; i++){    same([path.nodes[i].getX(), path.nodes[i].getY()], expected[i], "initial: path node " + i + " is as expected");
init: function() {     this._super(...arguments);     var childViews = get(this, 'childViews');
if (templ_rows.length !== 1)         throw Error("template not found");        var arrAddressDefinitionTemplate = JSON.parse(templ_rows[0].definition_template);
'use strict'; var Joi = require('joi'); var _ = require('lodash'); module.exports = function (schema) {
},     *switchMenuPopver({         payload
if (typeof methods === 'object') {             for (i in methods) {                 if (methods.hasOwnProperty(i)) {                     Child.prototype[i] = methods[i];                 }
define({
`report-to ${ reports.join ` ` }`
module.exports = kind(   {
dojo.connect(this.gitPassphrase, "onfocus", null, dojo.hitch(this, function(){    this.isPrivateKey.checked = true;    }) );
, SELECTOR_INPUT = '*[contenteditable=true],textarea,input'     , SELECTOR_GMAIL_EDIT = 'div.aoI'
if (sourceNode.prop("checked")) {                         node[keypart] = 1 ;                     } else {
} else {        named_transformation = $.grep(base_transformations, function(t) { return t;}).join(".");        base_transformations = [];
for(var i = 0; i < joints_source.length; ++i)     {
if (typeof dim === "undefined" || dim === this.dimensions()) {             switch (this.dimensions()) {
drawer.setLayout(this.createRightDrawerLayout());             drawer.getGroupForEntry = function(entry) {                 return this.getGroupForRightDrawerEntry(entry);             }.bind(this);
self.drag(e);         });       }
topologyOptions: topologyOptions,
result = results     } else if (this.options.hasJoin === true) {       result = prepareJoinData.call(this, results)
return function(refShorthandDefaultPos){    var st = state(this) ;    var start = st.start ;    var rhs,r = base.apply(this,arguments);
this.horizontal = {     left: data.target.offset.left,
const YearRange = function(options) {     this.options = options;
this.actions = {       ProjectCreate:                   null,       StageCreate:                    null,
return Lua; })(exports,  ENVIRONMENT_IS_NODE ? global : this,
this.value   = value;   }
Compiler.prototype.page = function find(page, assets) {   var compiler = this;
this.dataRequest('edge', 'store', { edgeIds: edgeIds }),                 this.dataRequest('ontology', 'ontology')             ]).done(function(results) {
this.time = time;    }    for(; i < this.layers.length; i++){     this.layers[i].trigger(eventId, event);    }    if(eventId === 'tick'){
if ( !isValue || !this._settingFromInput ) {             this.propertyNeedsRedraw( self, property, oldValue );         }
keylist = Object.keys(meshdata)   for (var i=0; i<keylist.length; ++i) {     mdat = meshdata[keylist[i]]     var m = new BABYLON.Mesh( 'terr'+matID, self._scene )
.then(function(diffs) {         return _.map(diffs, that._normalizeDiff);     });
if (configuration.renderOn !== null && !angular.isString(configuration.renderOn)) {         throw new Error('renderOn must be a string')       }       if (configuration.renderOn !== null && configuration.renderOn.length < 1) {
]);     me.callParent();
util.forEachOwnProperties(this, function(value, key) {         self[key] = null;     }); };
var headers = headerTransforms.forRequest(ctx);     return {
{   var self = this;
value: function buildAsyncTree() {       var curIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
if (cbFunc[0] === this.$name) {
el.addEventListener(val[0], function() {             methodToCall();           });
var expect = require("expect.js")   , fs = require("fs")
typeof pFromEnter !== 'boolean'){
info: colorConsole.info,     warn(...args) {       colorConsole.warn.apply(null, args)       dailyfile.warn.apply(null, args)     },
if (stat && stat.isDirectory()) {           walkDir(file, function(err3, dt) {             for(var i=0; i<dt.length; i++) {               var a = dt[i];               var filename = path.parse(a).name;
items: []       , count: 0       , timer: null
if ( hasNoArguments ) {           listener();         }
const promise = Promise.resolve(definition(rootSuiteBrowser));
'use strict';
} else {    this.show_error();   }
edges() {       const edges = [];       for (let u in vertices) {
function e() {                  var e = t.call(this) || this;                  return e._rewards = [], e              }
assert.equal(curr, prev + 1);       var lastStrategy = completer.strategies.pop();       assert.strictEqual(lastStrategy, strategy);
pageInstance.open(endpoint, settings, function (status) {         console.log('attempting to POST: ', settings.data.substring(0, 50), ' to ',endpoint);         if (status !== 'success') {
return URLs.find({userId: this.userId}, {         sort: {timeModified: -1, timeCreated: -1}     });
console.error(err);         throw new Error("Error on keyspace creation. Aborting unit tests.");     }
, _mapReduceQuery   , _bucketizeModelName;
error() {     this.forward(arguments, 'error', '');   }
if (this !== expectedThis) {         $ERROR("'this' must be global object, got " + this);     }
var sum = 0     , min = Number.MAX_VALUE
this.state.configfetched = true;             propertiesFromBackend.forEach( (property) => {               this.state.plugin.properties[property] = this.state.plugin.properties[property] || '';             });
var self = this;
return foo(10,'sss',1);  } runTestCase(testcase);
this.debug = function() {     this.log('debug', ...arguments)   };
var EventEmitter = require('events').EventEmitter   , Logger = require('./logger')
if (result != null) {           for (let i = 0; i < result.length; i++) {             result[i] = result[i].toLowerCase()
}     return result; }
var copy = {};    for (var cmd in this.list) {     if (this.list.hasOwnProperty(cmd)) {      copy[cmd] = this.list[cmd];     }
callback();
if (this.version !== 2 && this.version !== 3) {         throw new Error("SenchaJSBuilder: Unsupported version: " + this.version);     }
shouldDisableOrderButton: computed('isUnverified', 'hasTicketsInOrder', function() {     return !this.get('hasTicketsInOrder');   }),
}         return _this.editing(false);       })     }, this);
constructor(tracer) {         super();         this._tracer = tracer;         this._uuid = this._generateUUID();
etag ( ...args ) {  return this.hash( args.join( "-" ) ); }
var self = this;       image.__imageLoadHandler = function() {         if (self.image == this) {           self.setImage(this);
for (var x = 0; x < labelledByIds.length; x++) {                 var labelledByElement = element.ownerDocument.querySelector('#' + labelledByIds[x]);
;; var iphone = true;
$scope.requestModel.security.forEach(function (secuirtyOption) {       var auth = AuthManager.getAuth(secuirtyOption);
return function(event) {       return __method.apply(object, [event || window.event].concat(args));     }
mediaTypes: [     'audio/mp3','audio/ogg','audio/oga','audio/wav','audio/x-wav','audio/wave','audio/x-pn-wav','audio/mpeg','audio/mp4',     'video/mp4','video/webm','video/ogg'     ]
poolTable.setBombNumber(game.bombNumber);      });      goog.events.listen(game, eightball.Game.EventType.BOMBTICK, function (e) {
this.regionsetViewer = null;         this.flyoutManager = null;     }, {
script.propagateEvents( this.isPropagatingEvents() );                 }
() => {         dispatchEvent(view.doc, 'DOMLocalized', langs);         view.observer.start();
} else if (mode == MODE_GEN.TEXT) {                     var output = "";
add: function (target, objects) {     var args = this.target(target);     args.objects = exports.prepareOutput(objects, true);     this.invoke('view.add', args);
var actual = (films[seriesName] && films[seriesName].length) || 0;   ctx.expect(actual).toEqual(numberOfFilms);  });
availableActions: function() {     var isActive = this.get('isActive');     let l = this.get('links')||{};
for (var id in this._variables) {         if (this._variables.hasOwnProperty(id)) {             var variable = this._variables[id];
var filename = this.builder ? fromFileURL(address) : address;   return System['import']('lesscss', module.id)
buildRawList(...args) {     if (args.length < 2) {
function UnboundModel() {     }
}else{                                  len = this.v.length;
'Must have ENV global set to detect CLIENT/SERVER.');   var storeNames = names;   var result = {};
};         throb.appendChild(textNode);         throbber.appendChild(throb);
'facetItems': [],         'selectedItems': {},        };
if (j$.util.isUndefined(obj[methodName])) {         throw new Error(methodName + '() method does not exist');       }
receiver[p] = {};                     _mix(receiver[p], val);                 } else if (valType === '[object Array]') {
function Int64(lo, hi) {         Uint64.call(this, lo, hi);     }     function numToDigits(num) {
this.activeIp = Monitor.activeIp;   this.process.send(`${this.id}|${args.join('|')}`);  }
return [value];       }) : Chartist.getDataArray(this.data, options.reverseData)     };
return cb();             })             .catch(function (err) {
constructor(props) {         const {target, property} = props;         this.dropDownLabel = Icon.makeLabel("chevron-circle-down", {
isInstance : function(value) {   throw new Error('Abstract method [isInstance].');  },  CLASS_NAME : 'Jsonix.Schema.XSD.AnyType'
_results = [];       for (_i = 0, _len = _ref.length; _i < _len; _i++) {         cls = _ref[_i];         _results.push(el.classList.add(cls));
var util = require('util')   , SenderReceiver = require('./sender-receiver')   ;
if (is.object(value)) {     for (var opt in value) {       if (value.hasOwnProperty(opt)) {         value[opt] = replaceProjectIdToken(value[opt], projectId);       }
module.exports = function () {   var self = this   self.move('forward')
var ret = {};   Object.keys(data).forEach(function(section) {     var sections = section.split(':');
}         return $this;       }
function AnimationUtilApply(anim, opt_target) {   var me = AnimationUtilApply;    if (anim.children && anim.children.length !== undefined) {
function replaceImages(options = {}) {   const parse = url => require('url').parse(url)   function transformer(tree) {
callback = (callback != null) ? callback : defaultCallback;      $.fn.embedly.embedArray = [];
} else {                 throw new Error("only file to file supports");             }
', cm, data);          this.model.set('value', this.getValue());
} else {         return null;       }
} else {            }
var axis = this[dimension];       var size = axis.rangeBand();       return size;     };
}       };       this.resetFilter();
},   updateParams() {     const type = get(this, 'type');     const out = {};
var Graph = function() {     this.nodes = {};     this.edges = [];
if (title.length > 20) {       throw new Error('Title cannot be longer 20 characters.');     }
StringPrototype.underscore = function() {     return underscore(this);
if (_isFrozen) {         freeze();       }     }
noCoverTrig: true,         width: this.menuWidth,         trigHeight: this.UIBootstrap ? this.selectedHeight + 4 : this.selectedHeight,
this.core.hasType(id, 'triggered', callback, scope); };
if (lines.length > 0) {    for (var i = 0; i < lines.length; i++) {     lines[i] = "<" + (tag.match(/^a\s?/i) ? replaceSlug(tag, lines[i]) : tag.match(/^option\s?/i) ? replaceValue(tag, lines[i]) : tag) + ">" + lines[i].trim() + "</" + close + ">";
function e() {             var e = t.call(this) || this;             return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._layer.addChild(e._img3), e._img2 = new PIXI.Sprite, e._layer.addChild(e._img2), e._img1 = new PIXI.Sprite, e._layer.addChild(e._img1), e._basePos1 = new PIXI.Point, e._basePos2 = new PIXI.Point, e._basePos3 = new PIXI.Point, e._tweens = [], e         }
function() {         this.stateTransition_(lf.proc.TransactionState_.ACQUIRED_SCOPE);       }.bind(this)); };
function initiateTableFilter(data, filterDiv, tableDiv) {   $('.clear').on("click", function() {     $(this.id + ".noMatches").css("visibility", "hidden")
} else {                     $this.val('');                 }
}     }.bind(this);   }.bind(this));   return routes
function Class( args ) {         if ( this instanceof Class ) {
if (configuration.modelType !== null && !angular.isString(configuration.modelType)) {         throw new Error('modelType must be a string')       }       if (configuration.modelType !== null && configuration.modelType.length < 1) {
var $export = require('./_export'); var sign = require('./_math-sign');
var deps = this.dependencies     , args = []
} else {     newMessages[messageId] = (...args) => {      return `${messageText(...args)} (${ruleName})`;     };
var verificationFields = [];  var verificationFieldLength = 0;
var b = npm.bin   var PATH = osenv.path()
} Transaction.prototype.get = function (key, cb) {   var self = this   if (key == null) throw new Error('A key must be given as an argument')
if(typeof name === "object"){    for(var x in name){     if(name.hasOwnProperty(x)){      this.set(x, name[x]);     }
return opts.inverse(this)     }
});     _.extend(targetUnit.guide[dimension], _.omit(guide_dim, ...properties)); }
, 'docs-server.js'                          , 'components.js'
var realLoader = moduleModule._load;   moduleModule._load = function (...args) {     var [id, { filename }] = args;     var inv = new RequireInvocation(id, filename);     var parent = currentInvocation;
items.forEach(function(item) {       self.upsert(item);     });   }
me.editableCondition = me.editableCondition || NX.Conditions.isPermitted('nexus:capabilities:update');     me.callParent();   },
emitJS.call(this, handler);     return this.arguments[0]._active;
},                             on: Y.Wegas.superbind({                                 success: function() {                                     this.showMessage("success", "Script saved");
throw new Error("Callback was already called.");
var mod = require('./tasks/' + file), name;         for (name in mod) {             if (mod.hasOwnProperty(name)) {                 exports[name] = mod[name];             }
}   }  }  for(var i=0;i<this.nodes.length;i++) {   this.nodes[i].RIGHT = this.nodes[i].LEFT = this.nodes[i].UP = this.nodes[i].DOWN=0;
for (const key in this.map_) {       list.push(...this.map_[key]);     }
} function setAttribute ( value ) {  this.node.setAttribute( this.name, safeToStringValue( value ) ); }
};     var handleSystemMsg_ = function() {     };     var handleGameMsg_ = function(msg) {
var canvas = element.find('canvas')[0]         var g = canvas.getContext('2d')         var positioner = element.find('div')[0]         function vendorBackingStorePixelRatio(g) {
}             self.componentManager.register(axis.name, Axis, axisParams);         });     },
export const ApiTree = function(adapter, items, parent) {   this.items = items.reduce((res, item) => {     const next = parent
if (e.type==='change' || (e.type==='keyup' && !this.lazy)) {     this.curValue = e.target.value;
} else if(serializer !== false){    return typeof serializer === "function" ? serializer.call(map, val, attr): oldSingleSerialize.call(map, attr, val);   }
var qs = require('./');
self._equipments_columns.forEach(function(currentValue){   switch( currentValue[1] ){    case ' ':
if (selector.match(Prime.Utils.spaceRegex)) {       throw new TypeError('Ancestor selector must not contain a space');     }
irc: {     raw: function(...args) {      testableNetwork.lastCommand = args.join(" ");     },
if (_.isUndefined(map[ctor])) {                         throw new Error("opts.buffer must be either Uint8Array or Float32Array");                     }
self.openConnections[connection.id] = connection;     }
let errors = parseShaderErrors(message);         throw Object.assign(new Error(message), { type, errors });     }
} module.exports = {     key: key   , populate: populate
}    }    that._mLoadedSections[sNodeId] = aLoadedSections;    }   }
let { clusterTemplate: { defaultRevisionId = '' } } = this;     return this.id !== defaultRevisionId;   }),
if (!/^<(([0-9A-F][0-9A-F])*)>$/i.test(src))    throw new Error('eval: not a hex string literal');
ajax_success: function(response){                 console.log('ajax_success');
this.node = prevNode;             return res;         },
if (typeof method === "string") { method = target[method]; }     if (!method) { throw new SC.Error("You must pass a method to removeObserver()"); }
init() {             this._super(...arguments);             this.formatter = this.container.lookup(`ember-intl@formatter:format-${formatType}`);
for (var i in body) {                 if (!body.hasOwnProperty(i)) {                     continue;                 }
this.removeWaypoint(e.marker, function() {            });
t.deepEqual(original,register, 'deepEqual case: '+description);         for (var index=0,total=register.length; index<total; ++index) {             var item = register[index];
var args = [].slice.call(arguments);   if (this.emit(...args)) {     return true;
val[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8 ? 2 : biff}); break;   default: throw new Error("Bad SerAr: " + val[0]);   }
var vec2 = require('../math/vec2') module.exports = Broadphase;
this.label = null;     this.place = null;
mouseenter: function (e) {             this.mousedover = true
constructor(node, edges){     super(node,edges)
case AST_INCLUDE:    throw new Error('Cannot generate code for include (this shouldn\'t happen)');   case AST_NAMESPACE: {
var first = false;       for (var i in fields) if (fields.hasOwnProperty(i)) {         if (!first) {
$('a[data-remote],input[data-remote]').live('click.rails', function(e) {   handleRemote($(this));   e.preventDefault();
}     super.add(item)     return this.__watchItem(item)
}) &&       p.every((i) => {         return this.checkConnectionDetails(x[i], y[i]);       });
Promise.prototype.error = function (err) {   if (!(err instanceof Error)) err = new Error(err);   return this.emit('err', err); };
sails.express.app[verb || 'all'](path, targetFn);    return;
if(currentStyle[name] == "none") {                 ret = "0px";
var txn = {         getBinary: sinon.stub().returns(new Buffer([])),         abort: sinon.stub()
} else {         throw new Error('The length of an unsigned integer constant value must be 4!');       }
async deleteIndex(indexName) {         if (this._db.connected) throw new Error('Cannot delete index while connected');         this._indicesToDelete.push(indexName);
callback(null, groups);              });          }      },
player.videoaddress=[];    for(var no in videosrc){     if(videosrc[no]&&videosrc[no].length){      player.videoaddress.push({res:no,url:videosrc[no]});     }else{
case PARTIAL: return new DomPartial( options, this.docFrag );    default: throw new Error( 'WTF? not sure what happened here...' );   }
rs1imm = rs1imm.split("(")[1];             this.rs1 = textToReg(rs1imm);         } else {
el._boundEvents[type].push(listener);     el.addEventListener(type, listener, useCapture);   }
switchClonesSrc: observer('virtualSrc', function () {     next(this, '_switchClonesSrc');   }).on('ready'),
for(let index =0; index < filters_keys.length; index++) {                     let key = filters_keys[index];                     filters.push([key, this.$route.query[key]].join('='));
'use strict';
, newShare      : React.PropTypes.bool
this.organizationUsers.bind('loading', function() {       this._activatePane('loading');     }, this);
var titles = this.selection.slice(0);  for (var i=0;i<titles.length;i++) { titles[i] = "'"+titles[i].getTitle()+"'"; }  var result = confirm(_("confirmtable")+" "+titles.join(", ")+"?");
export default TWEEN;
module.exports = {   putCloudWatchEvents, };
}     if (call) app.logger.debug(`[bg] [factory] generate ${call.constructor.name} from factory.`)     return call
let ids = context.request.ids;   let relatedType = this.schemas[type][relatedField][keys.link];   let options = {
}     }     if (this.type !== 'button' && this.type !== 'cancel' && this.type !== 'submit' && this.name) {       iterator(this, i);
beforeEach(() => {       this.mixin = default_mixin();     });
];     me.callParent();     me.down('#proxyFieldSet').add(1, {xtype: 'nx-coreui-repository-docker-proxy-facet'});
if (typeof hook != 'function') {             throw new Error('Unable to register event hook, invalid hook function passed');         }         this.event_hooks[event].push(hook);
}     return this._super(...arguments);   },
goog.asserts.assert(body);         new wtf.app.ui.HealthDialog(             db,
music = game.add.audio('boden');     music.play();
$(this.element).addClass(this.get('orientation'));  }.bind(this));
if (!parentNode) {     throw Error('Reference node has no parent.');   }
newLabel = ( typeof newLabel !== 'undefined' && newLabel.length > 0 ) ? newLabel : curLabel;                         $option.text( newLabel );                     } );
module.exports = function(Cam) {  const linerase = require('./utils').linerase   ;
function _via_metadata(mid, z, xy, metadata) {   this.mid = mid;
var parseUrl = require('../').parseUrl   , pathRegExp = require('../').pathRegExp
if (!adapter || typeof adapter.super_ !== 'function' || typeof adapter.destroy !== 'function') throw new Error('given leveldown is no valid adapter'); }
this._client.on('listening', function() {         modbus.openFlag = true;     });
} catch (err) {     throw new Error(err)   }
reference: function (attr) {       return SVG.get(this.attr(attr))
this.actions.applyCSSVars(changes.cssVars.newValue)   }   if (changes.panels && !this.state.private) {     this.actions.updatePanels(changes.panels.newValue)
if (!ZRINIT_FLAG[fl]) {         throw new Zmodem.Error("Invalid ZRINIT flag: " + fl);     }
case 'oauth':       return rem.promptOauth.call(rem, api, opts, next);     case 'cookies':
var assetsDirContents = fs.readdirSync(assetPath);   for (var id in realContents) {     if (!realContents.hasOwnProperty(id))       continue;     var item = realContents[id];
} else if (this.highDefinition === "unavailable") {           this.highDefinition = "available"           changed = true         }
});                 return generator;             });         }
list.removeClass('hidden').each(function() {           $(this).unhighlight();         });
this.clearLoadingSpinner();                 this.handleError(xhr);             });
async function createComment(postId) {   postId = new ObjectID(postId);
renameColumnQuery(tableName, attrBefore, attributes) {     let query = "EXEC sp_rename '<%= tableName %>.<%= before %>', '<%= after %>', 'COLUMN';",       newName = Object.keys(attributes)[0];
module.exports = DOM;
return {     defaultUser: store.user.defaultItem   }
console.warn('OSjs::Core::WindowManager::removeWindow()', 'Got', w);       throw new Error('removeWindow() expects a "Window" class');     }
if (method) {     return method.apply(target, args);   }   else {
checkIfSufficientBuffer = function () {             var timeToEnd = this.playbackController.getTimeToPeriodEnd();             if ((bufferLevel < minBufferTime) && ((minBufferTime < timeToEnd) || (minBufferTime >= timeToEnd && !isBufferingCompleted))) {
_log = function() {     return Function.prototype.apply.call(console.log, console, makeArray(arguments));   };
var log = console.log;     sinon.stub(console, 'log', function(...args) {       return log.apply(log, args);     });
};  this.exec = this.run = function(...args) {   const command = args.join(' ');   const filename = controller.getUUID();
} else {             throw new Error("internal error on Shade.Optimizer.replace_with_notone");         }
} else {         throw new Error("Cannot join a closed paths with another");       }
case "align":                     return ax5.ui.layout_instance.align(this, arguments[1]);                     break;
this.passthrough('http:   this.passthrough('https:   this.get('/api/auth/session', function() {
exception = _error;         throw new Error("StoreDetails failure: " + exception);       }
if (res.length >= cnt) {         retcb(null, ...res)       } else {
debug( 'Current value: %d.', this._yNumTicks );
crypto.getRandomValues(array);     return new Buffer(array);   };
common.googleOrderNumber  , common.shipItems  , true  , function (err, xml) {   console.log(xml);  }
if (!this.isConsistent(transactions)) {             throw new Error('Given set of transactions violates rules for combined transactions');         }
it('should display/hide the loader while loading', function () {     this.visModel.overlaysCollection.add({       type: 'loader'
replaceSelection : function(items) {       this.setSelection(items);
function json_save() {  var self = this;  self.body.language = self.language || '';
'use strict';
if (builtInCommand) {     builtInCommand(envForThisPackageScripts, process.argv.slice(3));   } else {
describe('high compression', function() {                     it('should succeed', function(done) {
args[0] = files.convertToOSPath(args[0]);   return fs.unwatchFile(...args); };
return new H.map.DomIcon(icon);     }
var node = $(node).parent(function() {     return this.__ff__;   }, true)[0];
} else {      Monogatari.run (doAction, false);      Monogatari.global ('_CurrentChoice', null);     }
, '    v_fill = unpack_color(fill);' , '    dim = vec4(x, y, pointSize, -pointSize);' , '    v_stroke = replace_stroke;'
Extensions.unregister = function () {   var names = Array.prototype.concat.apply([], arguments);   var groups = this.$groups();
app.use(route.post('/connect/:provider/:override?', function *(provider, override) {     this.session.grant = {
parsePath: function (data) {     var parse = function() {       var parsed = extend({}, parsePath(this.path), data);       if (typeof parsed.ext === 'undefined') {
const regexps = require('./lib/regexps');
files.forEach(function(file) {         var filePath = path.resolve(dirPath, file),             output   = fs.readFileSync(filePath).toString();
var $container = slider.prev(),                     $body = $(document.body),
var proxy = httpProxy.createProxyServer({})     , domainEnv = core.config.get('publicDomain');   return function(req, res, next) {
var request = require('request');
{           script_obj.source_data = script_obj.script_data;           script_obj.line_arr = [];
this.message = tmp.message;     this.method = options.method; };
addToScene() {     this.objects.forEach((obj) => {       this.scene.add(obj);     });
else                                 done(new Error("Save is Not Atomic"));                         },function(){
async function findOCSP(certificate, issuerCertificate)    {
} else {       var xhr = io.util.request();
[States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress']
var objectProviderFn = function objectProviderFn(type, ids, paths, inScope, changes, onSuccess, onFailure) {  throw new Error("Object provider has not been implemented.  Call ExoWeb.Mapper.setObjectProvider(fn);"); };
it('Get configuration from server', function(done){   request.get('http:    var json = JSON.parse(body);    expect(json).to.have.property('engine');
, attrList = ['pos', 'color', 'fugue']   primitive = gl[primitive]   init()
"use strict"; var _extends = function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(target, key)) { target[key] = source[key]; } } } return target; }; var z = _extends({}, x);
else                         throw new Error(this.type.repr() + " is an atomic type, got this: " + i);                 } else if (this.type.is_vec()) {
laroux.stack.prototype.onupdate = function (event) {}; }).call(undefined);
"use strict"; var uglify = require('uglify-js')   , child = require('./lib/child')
, bindMethods    = require('../../Object/bind-methods').call   , getPad         = require('../../Number/get-pad')   , format         = require('../../String/format')
this._inputStack.push([this.xmlNode.documentElement, this, 'result']);     this._initializeObjects = [];     this._ids = [];     var self = this;
if (!template || typeof template !== 'object') {         throw new Error('ListFacade "template" must be an object.')       }       if (!template || typeof template.key !== 'function') {
this.on('finish', function() {     this._stream.end();   });
exception = _error;             throw new Error("getAddressFromPathId failure: " + exception);           }
module.exports = PointToPointConstraint; var Constraint = require('./Constraint'); var ContactEquation = require('../equations/ContactEquation');
function() {
for (var index = 0; index < entries.length; index++ ) {           var entry = self.config.processEntry(entries[index], data);
payload.trigger("input"); });
module.exports = MathLib.EvaluationError = function (message, options) {         var tmp = Error.apply(this, arguments);         tmp.name = this.name = 'EvaluationError';
if (!((address_ != null) && address_)) {               throw new Error("Missing address input parameter.");             }             observerState = _this.openObserverState(observerId_);
if (typeof inputData !== 'string') {   throw new Error('LCHErrorInputInvalid');  }
this._adUnit[method](...args);   timeoutId = setTimeout(() => {     timeoutId = null;
for (let t=0; t < this.renderable_tiles.length; t++) {             let tile = this.renderable_tiles[t];
{         for (var i = 0; i < this._uiSourceCodesList.length; ++i) {             var uiSourceCode = this._uiSourceCodesList[i];             if (uiSourceCode.originURL() === originURL)
, method_name     ,err
, playInBackground : false   };
var instance = this;    var args = Array.prototype.slice.call(arguments);
if (file.state() === 'resolved') {           results.push(file.done(function (...args) {             return cb(file, ...args)           }))
, sequelizeErrors = require('../../errors.js')   , parserStore = require('../parserStore')('mssql');
edit(options) {         return this.guild.shard.client.editGuildMember.apply(this.guild.shard.client, this.guild.id, this.id, options);     }
this._runOrStore(function() {       fn.apply(context, this.getErrors());     });
var i, _results;     this.tween = new Tween;     i = this.transits.length;
});     this.Super('init', [config]);    }
var events = require('events')   , crypto = require('crypto')
module.exports = callbackify(async function (gridModel, columns, viewColumns, exporter, settings) {   assertValidViewColumns(columns, viewColumns);
if (path==null) throw new Error( "putDir: Null path");          if (!isDir(path)) throw  new Error("Not a directory : "+path);          if (media==MM_RAM) {
beforeEach(function() {       spy(this.itemView, 'templateHelpers');       this.model.validationError = 'foo';       this.model.serverError = 'bar';       this.itemView.templateHelpers();
get(size) {     for (var i in this.queries) {       if(this.queries.hasOwnProperty(i)) {         var query = this.queries[i];         if (size === query.name) return query.value;
var promise = ParsleyUtils__default.all($.map(constraints, function (constraint) {           return _this10._validateConstraint(value, constraint);
this.getEncountersOfPatient = function(patientUuid) {         return $http.get(Bahmni.Common.Constants.encounterUrl, {
throw new ve.Error( 'Invalid range, cannot remove from ' + range.start + ' to ' + range.end );  }
})      describe('undefined', function (){
var _this6 = this;       if (identity === undefined) identity = this.props.identity || this.props.params.identity;       if (typeof io !== "undefined") {
if (/^data-balloon/.test(this.attributes[attr].name)) {                         this.removeAttribute(this.attributes[attr].name);                     } else {
commit.parentsDiffTrees(function(error, parentsDiffTrees) {         test.equals(parentsDiffTrees.length, 1, 'Should be one item in parents diff trees');         test.done();       });
var data = keyOrVal;    if(_.isString(data) && !valOrOpt){     this.data = data;
var feed = __dirname + '/feeds/nondefaultnamespace.atom'     , meta = {}
return (typeof value === 'number') && value != value;             },
var promises = [];    for (var i in ips) {     if (ips.hasOwnProperty(i)) {      promises.push(get_req(req, ips[i].host));     }
$(this).addClass("active").siblings().removeClass("active");   window.location.hash = $(this).attr("href").split('#')[1];  });
style: { opacity: 1 },         onAnimationEnd: firstHandleAnimationEnd,       }, {
if (data.collectStatus === 200) {                  let dataSoureTmp = [];                  let status = data.lisentersGroupkeyStatus;
} else {             console.log("Reject pullStreamsRaw: "+mythis.host()+" "+this.status);             reject(this);
var type = null;        for (var typeEntry in types) {         if (!types.hasOwnProperty(typeEntry)) continue;         var typeNames = types[typeEntry];
console.info('app.App::constructor', arguments);
}             var edges_l = edges.length;             for(var i = 0; i < edges_l; i++) {                 var p = objs[edges[i][0]];
this.cache = zabbixCacheInstance;     this.build = function (groupFilter, hostFilter, appFilter, itemFilter) {
return function () {       var info = data(this, opts.id);       var isNative = this.attachedCallback;
var loopback = require('../../lib/loopback')   , path = require('path')
return needsRecalculation;   },
var mongoose = require('mongoose'); var Article = mongoose.model('Article');
if (this._stateStack.length > 0) {             throw new Error('Cannot close database while transactions are active');         }
var qs = require('qs') var querystring = require('querystring') function Querystring (request) {
chokidar   .watch('lib
svg: function (svg) {       var well, len
var startTime = new Date().getTime(),                     renderFrame = (function () {                         if (!this.inAnimation) { return; }                         var frameTime = new Date().getTime() - startTime,
function e() {             var e = t.call(this) || this;
}     this.doc = new JSPDF('portrait', 'pt', 'letter');     this.docWidth = 612;
this.dates = (this.dates || []).concat(res);     var text = wo.w;
function mouseOver() {                 clearHoverMenu()                 document.getElementById(gitlab_variables.menuBtnId).className = "is-over is-showing-fly-out"
if (hexCode.length > 2)             result += replaceIndexer(0);         return result;
, util = require('util')   , tick = utils.tick;
if (!objJoint.unsigned)      throw Error("ifOkUnsigned() signed");     callbacks.ifOkUnsigned();
async function fn() {   for await ([ _ ] of [iterable]) {
return this._run(command, function (err, data) {          then && then(err, !err && require('./PullSummary').parse(data));       });
this.addItems = function(newItemDicts) {         for (var i=0; i<newItemDicts.length; i++) {             tiid = newItemDicts[i]["_id"]
}   insertWithRelated(...args) {     return this.insertGraph(...args);   }
});             p.find('.fieldset-delete-button').on('click', function(){                 if(xmltools.confirm_delete($(this))){
constructor(model) {   super(model);   this.shortcutOff = null;
this.bus = Gibberish.Bus();  this.sounds.kick.sampler.send(this.bus, this.amp);
that.addToBuffer = function (motionAxisName, value) {         if (buffer[motionAxisName]) {
type: 'string',         set: function (data) {           return `${data.l} bar`         }
static: true,     args: args,     returnType: KMeansModel
if (S[i] === '+') {         stack.push(addition.call(null, stack.pop(), stack.pop()));       } else if (S[i] === '*') {
$("#settings_overlay_container .sidebar").on("click", "li[data-section]", function () {         var $settings_overlay_container = $("#settings_overlay_container");
];         for (var i = 0; i < points.length; i++) {           p = points[i];
{         this.notify("event/broker-stopped", this);         this.unsubscribe(this._request_id);
var id = this._getElId();     htmlBufferPush(buf, ' id="' + id + '"' + '>');
this.socket.on('wait_for_phase_two', function(data) {         that.set_status('Player accepted, waiting for match');     }); };
$(this).click(function(e) {           var modal_id = $(this).attr("href");           $(modal_id).openModal(options);           e.preventDefault();
compose: function(containerBlock) {
Clazz.overrideMethod (c$, "getBfactor",   function () {  return this.atom.bfactor;  });
emit: function() {         var args = utils.arg2arr(arguments), sett = args.pop();
Logger.prototype.clear = function () {   Object.keys(this.transports).forEach(function (name) {     this.remove({ name: name });
var listener = function() {
module.exports = Color;
throw new Error("No writes are allowed after close.");         this._chunks.push({strings: strings, callback: callback});         if (this._tempFile && !this._isWriting)
var acc = init;     for(var p in obj) {         if(obj.hasOwnProperty(p)) {             acc = xf.step(acc, [p, obj[p]]);             if(transducers.isReduced(acc)) {
setTimeout(function() {     Completers.filter(a, b, c);   }, 210);
this._client.on('close', function(had_error) {         modbus.openFlag = false;     });
Circle = new Class(Drawable, {  argsOrder: ['cx', 'cy', 'radius', 'fill', 'stroke'],
function invoke(request) {       return this._invoke(domainAndMethod, request);     }
;(function(exports) {
$w('minWidth maxWidth minHeight maxHeight').each(function(dimension) {       this[dimension] = this.findDim(dimension);     }, this);
, formatParam = typeof opts == 'string' ? opts : opts.format       , negotiated = this.responder.negotiate(formatParam)       , format       , contentType
if (req.method === 'GET')     return body;   data = await this.readBody(req, 'utf8', opt);   if (!data)
value: function(callback) {           var sum = 0.0;
var utils = require('../utils'); var func = require('./function');
var sw = w * options.density             var sh = h * options.density             var f
);   const maxOutputWireCount = Math.max(0, ...outputWireCounts);   const outputGateWidth = (2 + Math.max(7, maxOutputWireCount));
},   refresh () {     this.mountStyle()   } }
const data = this.items(this.context, this._providerSetLocal)           if (isPromise(data)) {
if ($.isFunction(this.options.content)) {                     content = this.options.content.apply(this.$element[0], [this]);                 } else {
if ( !InternalStorage[name] ) {       throw new Error('Invalid InternalStorage API call name');     }
activeClass: 'active',   ariaExpanded: computed('isExpanded', function() {     return this.get('isExpanded') + '';   }).readOnly(),
this.schemaLocation = options.schemaLocation ?     options.schemaLocation : GML2.schemaLocation_;
const docs = this.meta.docsWith(msg.actor.id);                     const clocks = this.clocks.getMultiple(docs);                     DocumentBroadcast.broadcastMetadata(metadata, clocks, [msg.peer]);
Runner_MySQL.prototype._stream = function(sql, stream, options) {   var runner = this   return new Promise(function(resolver, rejecter) {
db.get(docId, {rev: rev}, function(err, doc){
if(input.toLowerCase() == 'clear'){             $(".input").remove();
describe('.delete', () => {     let fixture = require('./fixture')()       , evt1 = fixture.event1
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
let callID = navigationID;         defaultUrl((response) => {
})(this, _);
return function() {               return err = arguments[0];             };
this.send(action, player.slot, ...rest);  }
if (image == null){                 throw new Error('Assigned value on Sprite.image is undefined or null. Please double-check image path, and check if the image you want to use is preload before use.');             }
function translationPath(segmentId, translationId)  {
function hideQuestions(all) {         var temp = [];         temp = (all && all == 1) ? variables.get.shownQuestions() : variables.questionsToHide;
if (this.meta.hasMethod(attribute.setterName))                          this[attribute.setterName](setValue)                     else
function calculate_bb(graphs){     for (var i = 0; i < graphs.length; i++){         var graph = graphs[i];
let props = {...this.props};       for (let name in this.observed) {         if (this.observed.hasOwnProperty(name)) {           props[name] = this.observed[name].data;         }
if (nodes === null) {       throw new Error('TTS: nodes is empty. make call epub.getTextAndImageNodes().');     }
return this.run('ps -p %s -o args=', this.pid, function ran(err) {     fn(undef, !err);   });
, uid = require('uid2')   , DEFAULT_TOKEN_LEN = 64
var args = Array.prototype.slice.call(arguments);       this.setState('progress', true, args);
mtEvtDiscriminator.getEvtInst = function (subsys, cmdName) {     return ArgObj.factory(subsys, cmdName); };
var toData = os.getData(dir, to);     for (var key in fromData) {       if (fromData.hasOwnProperty(key)) {         data[fromData[key]] = toData[key];       }
var Context = require('./context')   , escapeRegExp  = /[\-\[\]{}()+?.,\\\^$|#\s]/g
this.azureInstanceTypeService = _azureInstanceTypeService_;     }),   );
, isNode     = classof(process) == 'process'   , Internal, GenericPromiseCapability, Wrapper;
if (toResolve === 0) {       deferred.resolve(resolved, rejected);     } else {
throw(new Error(this.chr + ' is not a valid chromosome for ' + species.db + '!'));    }
weak32: function (data, prev, start, end) {         var a = 0           , b = 0
},             insertCell (index) {                 var cell = nativeMethods.insertCell.call(this, index);                 sandbox.nodeSandbox.overrideDomMethods(cell);
} );     var NormalizeNormalAndEyeVector = function ( outputNormal, outputPosition, fnormal, fpos ) {         NodeFunctions.apply( this );         this._normal = fnormal;
Pattern.prototype.apply = function (input, day) {          for (var _i = 0, _a = Pattern.PROPS; _i < _a.length; _i++) {              var prop = _a[_i];              var rule = this.rules[prop];
if (!this.asset_cache.has(key)) this.asset_cache.set(key, this._findAsset(name, pipeline_name, remote))   return this.asset_cache.get(key) }
if (typeof parent !== 'function' ) {         throw new Error('Parent must be a callable constructor');     }
photos = data.photos ? data.photos.photo : data.photoset.photo,                 len = photos.length,                 photo,
if(locale == 'zh_CN'){         _this.locale = JSON.parse(fs.readFileSync('./language/'+locale+'.json'));       }else{
, dirscan = require('./dirscan')   , out = require('./output');
var ms;         if ($.isFunction(opts.mask) && (opts.mask = opts.mask(opts)), $.isArray(opts.mask)) {             if (opts.mask.length > 1) {
Backbone.Subset.extend = Backbone.Collection.extend; }());
locales: [],
this.children = [];         this.flags = [];     }
if (!((componentDescriptor_ != null) && componentDescriptor_)) {                   throw new Error("Internal error: componentDescriptor_ should be defined.");                 }
function setLanguage(oLanguage) {         $.extend(true, $.fn.dataTable.defaults, {
})(this);
if( !self.oldVal[ searchName ] || self.oldVal[ searchName ] !== searchTerm ) {       $this.trigger( 'change' );      }
constructor: function EntityFieldModel(...args) {             EntityFieldModel.__super__.constructor.apply(this, args);         },
var bias = [];
equalsbar$:'Property %s is not equal to "bar", man... At %s.',             exactlyone$: function(inserts) {               return 'my custom error msg for '+inserts.rule.spec+' at location '+inserts.parentpath             }
}     };     this.loadDefault = function loadDefault() {         self.update(defaultImage, true);     };
if (anonDefine)           throw new TypeError('Multiple defines for anonymous module');         anonDefine = define;
failure: function ( xhr ) {         this._failConnection();     },
class TaskTable extends React.Component {   constructor(...args) {     super(...args);
var req = new XMLHttpRequest(),                 isSuccessful = false;             req.open("HEAD", request.url, true);
const instance = axios.create(); instance.interceptors.request.use(interceptRequest);
this.hideResults().search();             window.setTimeout(() => {                 this.$('.g-search-mode-choose').popover('hide');             }, 250);         },
"use strict";
}; Document.prototype.save = function() {     return this.write(this.buffer); }; Document.prototype.load = function() {
}             throw new Error('The module has not been loaded yet');         },
this.config = config;         this.config.guide = _.defaults(
var toString = Object.prototype.toString   , id = toString.call(/a/); module.exports = function (x) {
if (err) {         throw new Error("Error "+err+" not expected")     }
if (target[key] && isObject(target[key]) && isObject(add[key])) {       merge(target[key], add[key]);   } else {
add(key, options) {     this._states[key] = options
}     for ( i = 0; i < props.length; i++ ) {       prop = props[i];
if (!is_feed(feed)) {     log('%s: bad object type %d %o', db_write_feed_property.name, feed_id,         feed);
{             this._removeProfileHeader(event.data);         }
return part.render(this.partContainer.group());     }))       .then(() => {         this.spaceVertically(elements, {
else      throw new Error("No value found for non-optional replacement - key:" + key);    }
i = this.shapes[i];    var newShape = {};    for(var j in i){
constructor: function TransitionCollection(...args) {             TransitionCollection.__super__.constructor.apply(this, args);         }
this.autoend()   this.on('end', fn) }
self.addFlags(uids, 'Deleted', function(e) {           ccb(e, reentryCount + 1, deletedUIDs);         });
if (_.isArray(type)) {             type.forEach((name) => { this.on(name, callback, props, once) });         } else {
var Data = function (connector, SensorStore, logT) {     var me = this;     var logger = logT || {};
map: this.map,       engine: engineMock,       layer: this.layer
label = <label    class={'col-form-label VF-Field__label control-label ' + form.labelClass}    for={this.name}>
this.appversions = addDefaults({}, k8sEnum.Kind.APPVERSION);   this.basePath = basePath;
debug( 'New value: %s.', this._xMax.toString() );  this.emit( CHANGE_EVENT ); }
} else {     rest = utils.flatten(args.slice(1));   }
opts = opts || {};    enyo.mixin(opts, {store: this});
(function ($) {
done();     });   });
if (x) {             el.find(".glyphicon-triangle-right").removeClass("glyphicon-triangle-right").addClass("glyphicon-triangle-bottom");             callback && callback(el, false);         } else {
, isFunction = require('./$.is-function')   , core       = require('./$.core'); function ctx(fn, that){
var util = require('./util');
if(that.debug){     console.log("\n\r###### SHEET "+sheetCount+" XML #####\n\r");
module.exports = function Plugin (regExp) {   mkdirp.sync(hopsConfig.buildDir);   this.apply = function (compiler) {
, wkx = require('wkx')   , path = require('path');
if (!pattern.hasOwnProperty(key)) {                 return new Error('unknow option: ' + key);             }
cache = this.lookupCache_;
value: null       };
function sort (arrayLike, sorters) {     var criteria = _makeCriteria(sorters);     var len = _toArrayLength(arrayLike.length);
var elm = $(this);         $.get(elm.attr('href'),  function(data) {             elm.closest('.un-us-item').find('.form-inline').html(data).show();
if (arguments.length <= 1) {             return Year.parseText(text);         } else {
var log = logger.createLogger('reaper')   var ttlset = new TtlSet(options.heartbeatTimeout)
},     execute: function (op) {       return this.deleteOperation(op.target, op.length || 1)     }
.attr("font-family","Helvetica")       .text(t)     y_offset += text.node().getBBox().height
output = command.split('=>')[1];    var ouptupCache = this.getBlockOutput(dir);    params = ouptupCache[name];
var $, children, each, find, next, parent, prev, siblings, soupselect, _;   _ = require("underscore");
var getter = this.getEval(fors, expression);
GEPPETTO.Console.executeCommand(actionStr);                                 eval(that.props.metadata.action.replace(/\$entity\$/gi, path));                             }
l.curve = function(_) {     return arguments.length ? c(curveRadial(_)) : c()._curve;   };
if (newVersion) {         return that._getCacheNameForVersion(newVersion)           .then(caches.open.bind(caches))
var shown = 0;                 for (var i = 0; i < options.items.length; i++) {                     var item = options.items[i];
const codeList = [];     for (let i = 0; i < conceptList.length; i++) {       codeList.push(conceptList[i]['$'])     }
'zoomend': this._endZoomAnim       })     })
var buffer = []   var timer
lib.TestManager.TestRun.prototype.ALL_TESTS = lib.f.createEnum('<all-tests>');
const fns =     args.reverse()   const head =
if (!adapterNpmName) {     throw new Error("The adapter's npm name is required when running init.");   } }
if (payload.email === 'error@user.com') {             throw new Error('user error')           }
let key, notification;     for (key in this._notifications) {       if (this._notifications.hasOwnProperty(key)) {         notification = this._notifications[key];
})     const heartbeat = function (ws) {       ws.isAlive = true     }
if (linkHref === href) {         this.set('navService.selectedIndex', this.get('index'));       }
debug( 'Current value: %s.', this._aValue );
,common.merchantOrderNumber  , function (err, xml) {   console.log(xml);  }
notebook_star_count_exists: function(notebook_id) {         return this.model_.notebook_star_count_exists(notebook_id);     },
obj[prop] = 0;              }          });
injectConfigFilePath: (filePath, configPath) => {     assets.inject(filePath, '__CONFIG_FILE__', configPath);   },
this.mockOpts = opts;                     this.method = 'generate';                 }.bind(this)             });
module.exports = (function () {   function Pipeline(identifier) {     GremlinObject.call(this, identifier);   }
girder.wrap(imagespace.views.SearchView, 'render', function (render) {         render.call(this);
});       onChange = (value, isValid) => {         this.removeClass(this.refs.button, 'btn-success submit-success');         this.removeClass(this.refs.button, 'btn-danger submit-fail');
if (_.isUndefined(value)) {                 throw new Error("parameter " + key + " has not been set.");             }
var process = function(err, trades) {     var treshold = moment.unix(_.first(trades).date).subtract('seconds', 20);     var price = calculatePriceSinceTreshold(treshold, trades);     callback(price);
Redirect.prototype.redirectTo = function (response) {   let self = this   let request = self.request
this.handleMultiMinusButtonTap = e => {     this.multiData.splice(Number(e.currentTarget.getAttribute('idx')), 1);     this.change(this.multiData);
'use strict';
if (!settings.url) {       throw new Error("Qajax: settings.url is required");     }
initialize: function(args) {   if (!args || !args.graph) {    throw new Error("Rickshaw.Graph.DragZoom needs a reference to a graph");   }
var entities = [];   for (var i = 0; i < this._entities.length; i++) {    var entity = this._entities[i];    if (entity.transformComponent) {
}         }).done((resp) => {             this.render();             this.$('#g-google-analytics-tracking-id').val(
cygnus.pages[data.link] = cygnus.parseHTML(data.html);   },
var canSendMMS = getCanSendMaxMessageSize(isFirefox);
{         that.widgets["statuspane.systeminfo"].setContent(that.tr("Running tests..."));         that.toolbar.setEnabled(false);
util.forEach(range, function(date) {         self._addHlData(datetime.format(date, 'YYYY-MM-DD'), cssClass);     }); };
projectionProvided: function() {     return true;   }.property('mapConfig'),
collection : function(){ return this._cmd('collection',Array.prototype.slice.call(arguments,0)); },
var Shape = require('../shapes/Shape'); var Broadphase = require('../collision/Broadphase'); module.exports = SAPBroadphase;
$(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));    if (Math.abs(delta.x) < Math.abs(delta.y)) {
}   throw new Error('illegal error correct level: ' + level); };
input.addEventListener("blur", function() {                      focus(this);                    }, false);
}.bind(this, event);         this._eventInput.off('mousemove');         this._eventInput.off('mouseup');         document.addEventListener('mousemove', this.boundMove);
var scenarioManager = new ScenarioManager(url.format(config.servers.elasticsearch));     this.timeout = config.timeouts.default;
if (!((objectModelDeclaration_.jsonTag != null) && objectModelDeclaration_.jsonTag)) {           throw new Error("Missing required root namespace property 'jsonTag'.");         }         this.model.jsonTag = objectModelDeclaration_.jsonTag;
}     this.columns(columns);     this.values(values);     return this;
if (btn == 'yes') {     Ext.each(sm.getSelections(), function(rec){      this.store.remove(rec);
adaptor.applyStyling = function ($box, $slides, settings) {       var imgSrc = slideImageURL($slides.eq(settings.bsfaceindex || 0))         , $frag = $()
$.each(asyncWebshims.cfg, function(i, cfg){     webshims.setOptions.call(webshims, cfg);    });
function() {                                  this.setActiveItem();
this.contexts = [];    for(i = 0; i < contexts.length; i++) { this.contexts.push( contexts[i].substr( 1 ) ); }    line = line.replace( TodoTxt._context_replace_re, ' ' );
_("%s sequence [%s] was ignored."),         "DECSTBM", Array.slice(arguments));     }
this.name = ast[1].join('/');     this.constants = {};
dispatch(this.unlockMetamask())       dispatch(this.showAccountDetail(accounts[0].address))       dispatch(this.hideLoadingIndication())
file.removeWithoutTrash=function () {                  if (!file.exists() && !file.isTrashed()) throw new Error( path+": No such file.");                  lcs(path, null);
var Errors = require('./errors')   , fs = require('fs')
});       return ParsleyUtils__default.all(promises);     },
function proxyArrayMethod(method) {       return function(callback) {         return [][method].apply(
default:    throw Error("unknown type="+(typeof value)+" of "+value);  }
if (remote === undefined) {       throw new Error("unsupported");     } else if (!(remote in config.read().remote)) {
const service = this,       cacheService = this.cacheService,
var xmpp = require('../index')   , server = null   , Client = require('node-xmpp-client')
if (self.debug)                 console.log(name, args);             var newStateObject = self.currentStateMap.toJS();
if (this.output.length !== 2) {      throw new Error('Output must have 2 dimensions on graphical mode');     }
var width = dim.w- 2*(me.w + be.w + pe.w);                widget.resize({t:0,l:0,w: width});
function image_status(status) {  this.client.send([common.IMAGE_STATUS, status]); }
try {               createdItem = processSingleItem(...args, item);             } catch (e) {
var modulevalue = 0;             var moduleDependencies = [];             $.each($('input[dependencies=' + $(this).attr('module') + ']:checked'), function () {
$(this.element).removeClass("horizontal vertical");   $(this.element).addClass(this.get('orientation'));  }.bind(this));
if (max_alt_rows.length !== 1)           throw Error("not a single max alt level");          var max_alt_level = max_alt_rows[0].max_alt_level;
if(cdsStart > exonEnds)  {   return smallBox( (exonStarts - origin), (width - (5 / multiplyingFactor)), multiplyingFactor, strand, label);  }
this.debug.log("Waiting for more " + type + " buffer before starting playback.");                 this.notify(this.notifier.ENAME_BUFFER_LEVEL_STATE_CHANGED, false);             } else {
that.updateHairlineInfo();     that.updateHairlineStyles();     that.attachHairlinesToChart_();
constructor(url) {     this.url_ = url;
Vue.filter('transChoice', function(id, number, parameters, domain, locale) {         return this.$transChoice(id, number, parameters, domain, locale);     });
shell.config.silent = !config.isVerbose;       cb(0, shell[program](...programArgs));     } else {
app.listen(8000); function promiseFromStream(stream) {     return Q.promise(function(resolve, reject) {         stream.on("error", reject);
var util = require( 'util' )          , async = require( 'async' )
if (width <= 0 || height <= 0 || width > 65535 || height > 65535)     throw new Error("Width/Height invalid.");   function check_palette_and_num_colors(palette) {
$('a.option', doc).click(function(event) {                     event.preventDefault();                     var href = event.target.href;                     var de = jQuery.Event('drop');
if (parent.type === NodeType.INTERPOLATION) {           throw usageError('in interpolations');         }
\n\n'].join('\n');   module.exports = function doGrunt(grunt) {
return spawn(...kill); };
didTransition() {     this._super(...arguments);     if (config.gaCode) {
if (info.p[0] !== 'c') {      throw new Error("How did we end up with paths other than 'c' and 'a'?");     }
ended.should.equal(false)     await increaseTime(moment.duration(2.1, 'week'))     ended = await this.crowdsale.hasEnded()
var node = this;
resolve();       };     }, this);
});   pool.connect(options.credentials); }
if (token.tagName === 'html') {          tc._insertElement(tc._createElementForToken(token, false));          tc.insertionMode = BEFORE_HEAD_MODE;
else if (Array.isArray(value)) {         obj[key] = value.map(replaceRecordIds);       }       else {
this.log.debug('Error: %s', err.name)     this.log.debug('Error message: %s', err.message)   })
var params = isName ? arguments[1] : null;     logger.log('Changing state to {0}', pathQueryOrName || '""');
if (_.isArray(t[k])) {    t[k] = _.difference(t[k], v);   } else throw new Error("Cannot apply $pull/$pullAll modifier to non-array");
throw new TypeError(err)   }
var ol_control_Graticule = function(options) {  if (!options) options = {};
'use strict';
$scope.userWalls[isEditing].showLoading = true;                 for (k in $scope.newWallOptions) {                   if($scope.newWallOptions.hasOwnProperty(k)){                     $scope.userWalls[isEditing][k] = $scope.newWallOptions[k];
utils.isFunction = function( obj ) {     return toString.call(obj) === "[object Function]";
module.exports = exports['default'];
for(var conceptUri in parentData) {     if (parentData.hasOwnProperty(conceptUri)) {       var branchHelper,          exactMatchFound;
done();       });     });
ojster.example.templates.Tools.SomeTool = function(opt_data, opt_ctx, opt_writer) {  goog.base(this, opt_data, opt_ctx, opt_writer); };
function Column(elementFilter, indicatorFilter, spec) {    var self = this;
};     return VariableFont; }());
'use strict';
key.empty();  var keys = [];
if (!(requirement in require_.modules)) {                 throw new Error('dependency not loaded: ' + requirement + '.');             }
var OPACITY = 1;
method.apply(container, arguments);                 };             }, this);
this.dev = null;   this.gnubbyInstance = ++Gnubby.gnubbyId_;   this.cid = Gnubby.BROADCAST_CID;   this.rxframes = [];   this.synccnt = 0;
if ( isFresh && Application.isDeveloperMode ) {        }
swalPromiseResolve(resolveValue || {}) }
.attr('title', layer.get("title") || layer.get("name"))     .on ('click', setVisibility)     .attr('unselectable', 'on')
this.autorun(() => {   const data = Template.currentData();
}     tx.timestamp = parseInt(eth.getBlock(tx.blockNumber, false).timestamp, 16);     if (!payload.mutable) {
newProps[e.target.name] = e.target.checked;         this.props.onChange(newProps);     },
}   return exports; });
if (byteArray === undefined) {     throw new Error('dicomParser.parseDicom: missing required parameter \'byteArray\'');   }
class TaskDetail extends mixin(TabsMixin, StoreMixin) {   constructor(...args) {     super(...args);     this.tabs_tabs = {};
}.bind(this));   };   return KeyboardHandler;
if (typeof (err) === 'string') {       formattedMessage = callFormatter(arguments);       err = props = undefined;
Handler.call( this, fileName );  this.groups = [];  this.setCRS( null );
console.error("Error uploading selfie", err);       });     }
GeneratorFunction.prototype.goThen = function (onFulfilled, onRejected) {     return this.goWith().then(onFulfilled, onRejected);   };
else {                 throw new Error('i18next is not loaded');             }         };
return Promise.reject(error);             });     },
function Matrix (data) {       Vector.call(this, data)
if (err) throw err     results.forEach(guildRss => {       const guildId = guildRss.id
run(options) {     this._super(...arguments);
{             this._setQuery(query);
var Mongoose = require('mongoose') function mongooseRest (schema, options) {
if ($div.length === 0) {       throw new Error('DIV StringMeasurement does\'nt exist');     }
, Store = require('../store')   , assert = require('assert');
MultiLevelMenuUtil.getTargetRouteIndex = function (router, targetModuleId) {             for (var routeIndex = 0; routeIndex < router.navigation.length; routeIndex++) {                 var route = router.navigation[routeIndex];
}       });       if (!hasVisibleNodes && this.parentNode.$node) {
this.FEATURE_COLLECTION_PARSERS = {};   this.FEATURE_COLLECTION_PARSERS[GMLBase.GMLNS] = {     'featureMember': _ol_xml_.makeReplacer(
var ss = {}   this.ss.iterate(this, null, null, function (n) {     var user = n.id[0]
const fn = async function({a1, a2, a3}) {   };
}      this.invoke(fns, { tty: tty, cmd: path }, callback);   return true; };
var nodeListToArray = function nodeListToArray(nodeList) {   return _toConsumableArray(document.querySelectorAll(nodeList)); };
Ember.tryInvoke(this, name, args);     this._super(...arguments);   },
}         return self.explore(...args);     }
function get(target, propertyKey ) {   var receiver = arguments.length < 3 ? target : arguments[2];   var desc, proto;   if (anObject(target) === receiver) return target[propertyKey];
if (message instanceof String) {   _.eachKey(this._patternMessageSubscribers,     function(patternSubscribers, pattern) {
jQuery('input[name^="'+vessel+'-"]').each(function (index) {   $(this).parent().show();   }
if (obj === undefined)         throw new Error('retain_array: array is not an argument');     for (ix=0; !(retained_arrays[ix] === undefined); ix++) { };
self._model.addChild(leftTypeStructDef);                      });
onVMouseMove: function(event) {         if (this.props.floating) {             event.preventDefault();
var backListener;
beforeEach(function() {         state = new RoomState(roomId);
if(arguments.length === 1) {       return this.validator.validate(value);     }
, eslintConf = require('eslint/lib/config')
var child = new (forever.Monitor)(script, childConfig);   child.on('exit', function (forever) {    console.log('Closing script ' + forever.args[0]);   });
function valueNull() {         delete target.value;       }
this.width = width         this.roomObjects = []         this.updatableObjects = []         this.backgroundTiles = new Array(height).fill().map(x => new Array(width))
pickNarrativesBySet(narrative_set) {         let narratives_in_sets = new Object()
var scalingFactor = Math.min(worldSize.x / myWidth, worldSize.y / myHeight);     var desiredPosition = this.owner.worldPoint(myBounds.topLeft());
this.form = this.app.form;     processAlertMessage(this);
try{             this.removeListener("connect",remote_socket_on_connect);
let options;     const last = _.last(args);
, app = express()     , moduleLoader;
this.iv = iv;         asm.init_state.call( asm, iv[0], iv[1], iv[2], iv[3], iv[4], iv[5], iv[6], iv[7], iv[8], iv[9], iv[10], iv[11], iv[12], iv[13], iv[14], iv[15] );     }
'use strict' const request = require('../index') const tape = require('tape')
if (!SPARK) {         throw new Error('Soy templates must be initialized to SPARK-namespace before loading spark-bootstrap.js');     }
const loaderUtils = require('loader-utils'); module.exports = function(input) {   const { text } = loaderUtils.getOptions(this);   return input + text;
var gun = Gun({   s3: (process.env.NODE_ENV === 'production')? null : require('../../test/shotgun')  });
extractCSS = function( arrayOfStyles, styleObj){     var i, val, out, len = arrayOfStyles.length, css = [];     for( var i = 0; i < len; i++){
function handleInputs(widget, config) {
function () {  return this.proteinStructure;  });
constructor(tempVarTransformer, protoName, thisName, internalName) {     super();     this.tempVarTransformer_ = tempVarTransformer;     this.protoName_ = protoName;
...props,             title: definitions[ast.identifier].title,             alt: ast.alt,
{         for (var i = 0; i < events.length; ++i)             this._profiler.dispatchEventToListeners(WebInspector.PowerProfiler.EventTypes.PowerEventRecorded, events[i]);
var target = this._parentNode,         prev = _super.apply(this, args);
var path = "notes/" + filename;         var promise = this._createPromise(Noted.dropbox.readFile)(path);         promises.push(promise);       }.bind(this));
it('ordering', function() {       let editor = this.setEditor('<p>012</p><p>456</p>');       editor.formatAt(0, 2, 'bold', true);
, multi     = 5
var _ = require('lodash'); var BluebirdPromise = require('bluebird'); var Adapter = require('./base'); var sqlite3 = require('sqlite3');
this.props = props;         this._boundRender = () => {
}             throw new me.ObjectEntity.Error("Shape (" + index + ") not defined");         },
catch (e) {  }    } runTestCase(testcase);
}         throw new Error('you need to provide either an URL or CSV data.');     }
let fullSelector = buildSelector(this, context, selector, options);           context.assertElementExists(fullSelector, options);
var findAutoIncrementField = function() {     var fields = this.QueryGenerator.findAutoIncrementField(this)     this.autoIncrementField = null
params.imageClass         = arguments[0].imageClass || defaultParams.imageClass;
Notification.prototype.bind = function(){     var behaviour = this;
server.configure(function(rendrExpressApp) {
it('should validate for string', function () {     this.validator.validate('1', {'type': ['number', 'string']}).should.be.empty;   });
{         var commands = ["log", "debug", "info", "warn", "error", "assert", "dir",
const done = this.async();     const statistics = new Statistics();     this.prompt({
var Buffer = require('safe-buffer').Buffer
function() {      $(this).text(gettext("Show")).closest("fieldset").addClass("collapsed");     return false;    }
function publish (topic, data) {   this[privateDataSymbol].postbox.notifySubscribers(data, topic);   return this;
} else {             return MonthDay.ofNumberNumber(monthOrNumber, number);         }
}     throw new Error('Unable to determine scrollTop of the window');   }
var tile = prenderer.getTile(null, plevel, pface, px, py, "neighbour of " + name);                     tile.onDestroy.add(tileDestroyedCallback, this);                 });
fields = arguments[0];       return adt.record(function (field) {         for (var name in fields) {           if (fields.hasOwnProperty(name)) field(name, fields[name]);         }       });
var frameworkPath = join(framework, shortName)     , lib = core.dlopen(frameworkPath)
, groupBy: {}         }
, StringDecoder = require('string_decoder').StringDecoder   ;
class NodeDetailPage extends mixin(TabsMixin, StoreMixin) {   constructor(...args) {     super(...args);
this.upgradeResults = function(files){       for(var name in files){          if(files.hasOwnProperty(name)){ files[name].results = angular.copy(this.baseResults);}       }       this.results  = files;
});     if (_.isUndefined(obj.data)) throw new Error("data is a required field");     if (_.isUndefined(obj.data)) throw new Error("columns is a required field");     function table() {
, sequelize = new Sequelize(config.database, config.username, config.password, {logging: false})
if (info.p.length > 1) {     throw new Error("How did we end up with more than two paths?");    }    if (info.p.length) {
this._isDefined = fcn;  debug( 'New Value: %s.', this._isDefined );  this.emit( CHANGE_EVENT ); }
if (!newSurface) {     throw Error('Couldn\'t clear and hide the drag surface: missing ' +                 'new surface.');   }
var resp = function(httpResponse){     "use strict";     var CONTENT_TYPE = 'application/json';     this.STATUS_CODES = {
{                 rk.hide();             }
this._viewFolder = ''   beforeFilters = []
};      that._write_nodes_helper( node, on_nodes_written );  }
Object.keys(params.headers).forEach(headerName => {         const headerValue = params.headers[headerName];
for (var i = 0; i < Report.visualizationTypes.length; i++)      {
uki.each(['width', 'height', 'minX', 'maxX', 'minY', 'maxY', 'left', 'top'], function(index, attr) {         proto[attr] = function(value) {             return uki.attr(this.rect(), attr, value);         };
} else {         throw Error('a public key string is required')     }
'use strict';
var parents = this.parents || [];       for (var i = 0; i < parents.length; i++) {         parents[i]().call(this);
options.classNames.series,         (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(i))       ].join(' '));
if (inside[name]) {    this.strongSpace = struct.parent.strong;   }
target.value = text.slice(0, startLine) + text.slice(startLine + preTab, selStart) +                         sel.replace(new RegExp('\n' + tab, 'g'), function () {
if(document.getElementsByTagName("pre")[0]){
term.echo(new String(datas.result));      }
, spinner_tpl = '<span class="glyphicon glyphicon-refresh decoy-el-spinner">'   , icon_size = 20
if (validateClient) {                      validateFieldValue(this);                  }
function hotFix1493(map) {     var fixedArray = []       ;
gulp.task('publish', async () => {   Object.keys(process.env).forEach(key => {     console.log(`${key}: ${process.env[key]}`);
if ( jQuery.isFunction( html ) ) {    return this.each(function(i) {     jQuery(this).wrapAll( html.call(this, i) );    });
}     super.sendAsync(payload, callback);   }
this.info = function() {     this.log('info', ...arguments)   };
export default function(d) {   if (isNaN(x = +this._x.call(null, d))) return this;
, ImageData = canvas.ImageData   , PixelArray = canvas.CanvasPixelArray;
for (var i = 0; i < modelAtomCount; ++i) {  this.rd ();  var tokens = this.getTokens ();
this._eventHandlers = {};     get(this, 'leafletEvents').forEach(function(eventName) {       if(typeof this[eventName] === 'function') {
module.exports = Easymongo;
})).start(tmp.morph)     })    };
{         for (var i = 0; i < this.tabs.length; i++) {             var tab = this.tabs[i];
constructor() {     super();
console.log('init_attr start');            _base.init_attr.call(me, elem);            elem.initData('glue', ' ');
new function(a){a=20}
return new (function() {
gte(refValue, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValue = this._normalizeValue(refValue, valueInfo);             return (value >= normalizedRefValue);
const mergeReducers = (baseReducer, ...reducers) => {   const combinedReducers = combineReducers(...reducers);   return (state, action) =>
var Visitor = require('./index')   , nodes = require('../nodes');
"use strict"   var ws = require('websocket-server')     , spawn = require('child_process').spawn
var lang = document.webL10n.getLanguage().substr(0, 2);
var options = this.documentDetailOptions.apply(this, arguments);                 this.populateDocumentModelForDetailView(options);             }, this);
if (argv.length > 3) {         theUser = encodeURIComponent(argv[3])         uri = url.resolve(npm.config.get("registry"), "-/by-user/"+theUser+"|"+un)         console.error(uri)
if(tOfVal === 'object' && val.length){         var absArr = createSizedArray(val.length);         var i, len = val.length;
toastr.success(TAPi18n.__('Room_password_changed_successfully'));
if (typeof this.renderSelf == 'function') {       this.renderSelf();     };
for(var i=0; i<categories.length; i++)          feed.push({ category: [{ _attr: { term: categories[i] } }] });
show = function () {     var cal = $(this);     if (!cal.is(':visible')) {
if (countDown < 1) {       window.clearInterval(timeoutInterval)       fetch(expireSessionUrl, { method: 'POST' })
this.build();    this.$tempTopics.empty();   }.bind( this ), 0 );  }
else {   Batch.resume(batch);   callback.call(thisPtr || null, true, typesJson);  }
link: function (scope, elem, attr) {         $log.log('link', scope.model, elem);       }
var parsedTrades = [];
if (!this.definitions) {     throw new Error('Definitions not parsed yet');   }
var TodoViewModel;   TodoViewModel = function(model) {
this.areaHeight = this.HEXA_HEIGHT = HEXA_HEIGHT;
Size.prototype = new RefObject;  Size.prototype.constructor = Size;
if (showEditConnectionForm) {       deleteButton = <button type="delete" className="btn btn-default" onClick="">Delete</button>     }
var Db    = require('../../')   , Base = Db.Base, DateTime = Db.DateTime
try {       let outputFileName = typeof this.params.output === 'string' && this.params.output || 'bundle.js';       asset = compilation.assets[outputFileName] || Object.values(compilation.assets)[0];
if (2 === Object.keys(room.members).length) {                     for (var i in room.members) {                         if (!room.members.hasOwnProperty(i)) continue;                         var member = room.members[i];
{   if (this.opt.sItemListContainerId)    this.oItemList = $('#' + this.opt.sItemListContainerId)[0];
}   if (!dirty) return;   this._state = assign(assign({}, oldState), newState);
if (!options || !options.template) throw new Error('Reef.js: You did not provide a template for this component.');
if(this.ready() && $('#map').length)   K.map.init(K.profile.getOpts('map'), function() {    this.enableBBox();
value: function(func) {         return new neume.Synth(context, func, util.toArray(arguments).slice(1));       },
});       task.once( 'complete', function( error, message, data ) {         console.log( 'generateKey job complete' );
return function *auth(next) {          this.user = {};
callback(new Error('Creating profile without roles succeeded. Expected to throw.'));       })       .catch(function () {         callback();
func(event, this, pt);       }.bind(this);     }.bind(this);     if (actions.mouseover &&
ssf = ssf || AssertionError;   if (Error.captureStackTrace) {     Error.captureStackTrace(this, ssf);
, d = { configurable: true, enumerable: false, writable: true } module.exports = function (e1, e2) {
{    throw new Error("QR Error: Error BitMatrixParser");   }
edit.off("show").on("show", function() {             var root = edit;             root.append(settings_html);
opacity: function (el, i, val) {       if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;
for (var i in sidebar) {     if (!sidebar.hasOwnProperty(i)) {       continue;     }
}     end(...args) {       this.client.end(...args);     }
for (var p = 0, len = panels.length; p < len; p++) {     object.panels[p] = $.extend(true, {}, w2layout.prototype.panel, panels[p]);
args.unshift(log.color.cyan('mrdoc'));       console.log.apply(console, args.map(i => log.color.red(i)));
{     return 0;    }
if (this.keyForAttribute) {       typeClass.eachAttribute((key) => {         payloadKey = this.keyForAttribute(key, 'deserialize');         if (key === payloadKey) { return; }
if (padded) {       this.formatTokenFunctions[padded[0]] = function (...args) {         return zeroFill(func.apply(this, args), padded[1], padded[2]);       };
} else {                          _liA.push('<a tabindex="-1" class="opt '+optionClass+'">'+$(this).text()+'</a>');                     }
else                         throw new Error("float is an atomic type");                 } if (this.type.is_vec()) {
exports.trimZeros = function (num) {     var str = (num || '0') + '';     if (str.indexOf('.') === -1)         return str;
var item_elt = $(this.htmlForListItem(path, {                 name: this._name(path),                 offset: offset, value: value, raw: value
return PromiseArray.create({       promise     });
_initializeXAxis(xAxisType = 'linear', config) {     let x = null,       xAxis = null;
'click .add': 'onTextEntered'         , 'click .add-more a': 'onAddMore'     },
TemplateMethods.bind = function(data, view) {   var viewStack = [ view || null ]   this.traverse(function(name, type, element) {
if (messages instanceof RegExp) {                  return this._registerSubscriber(subscribersHash, messages, subscriber);
mutationName => {       arr[mutationName] = function (...args) {         Array.prototype[mutationName].apply(this, args);         arr.__litElms__.map(
grunt.log.write(error.stderr + '\n');       throw new Error('Failed to run \'' + cmd + '\'');     });
export const now = (...args) => new Now(...args); export const number = (...args) => new BaseNumber(...args); export const opacity = (...args) => new Opacity(...args);
if (app == undefined || app == null) {         throw new Error("Missing the required parameter 'app' when calling appsAppGet");       }
render: function(){       var focusIdx = this.state.focused         , value    = this.props.value;
if(this.speed.z < 0)    {     destPos = world.body[i].geometry.position.z + world.body[i].getGeometry().size.z;     this.geometry.position.z=destPos;    }
curAst.dir = curDir;       curAst.alias = `${this.alias}${replaceAlias(dir, this.dir)}/${file}`;       curAst.file = camelize(replaceVue(fileLowerCase));
} function get_wlfra_result(query) {  var url = 'http:
var _session = require('express-session'); var debug = require('debug')('socket.io-bundle:session'); exports = module.exports = session;
context: {               buttonText: that.gettext('Retry?'),               errorCode: 'PIN_RESET_TIMEOUT'
if (eventName !== 'dispose') {                         this.trigger(eventName, ...args);                     }
this.getDrives = () => {     return Store.getState().toJS().availableDrives;
if (magic !== Message.MAGIC) throw new Error('Malformed magic');
if (is_parent) {             ancestor_tree_ids.push(tobj[5]);             ancestor_indeces.push(send_tree.length);
exception = _error;             throw new Error("removeComponent failure: " + exception);           }
}));                 });                 process.nextTick(group());             },
};       this.configure = function(config) {         var that = this;
var layer = L.esri.basemapLayer("Topographic");
if(descriptorText.charAt(0) === '('){   args = [];   return parseParameters(descriptorText.substr(1), args);
$(window).resize(function () {     var timerID = "timerLeftAndMainResize";     if (window[timerID]) clearTimeout(window[timerID]);
}   trigger(...args) {     this._array.forEach(widget => widget.trigger(...args));     return this;
root.console.groupCollapsed("[" + self.logname + "] " + obj.constructor.name + "." + prop + "()", [].slice.call(arguments));           value = func.apply(this, arguments);         }
nodeCache.refresh(this.$root.generator)
if(merge) {     Object.assign(target, ret);     ret[_merged] = true;
function one_data_to_one_msg(messageType, done) {       var test = tests.makeParser[messageType].data;       var expected = tests.makeParser[messageType].msg;
setupController() {     this._super(...arguments);     this.controllerFor('repo').activate('index');
module.exports = function recordIterator (warcStream) {   const recordStream = warcStream.pipe(new WARCStreamTransform())
} else {              var spec = url;             this.protocol = spec.protocol || "http";
$(this).removeClass('active');             });           _tabs.each( function(i) {               $(this).removeAttr('style').css( 'display', _cache_div[i] );
'use strict'
var jobs = [];     data.job.forEach(function(job) {         count++;
for (var i=0, len=this._effects.length; i<len; i++)       {
typeof define === 'function' && define.amd ? define(['jquery'], factory) :  factory(global.jQuery); }(function ($) { 'use strict';  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;
var next
if (err) {    throw new Error(`error opening file: ${err}`);   }
close: function() {       if (this._ss) {         this._ss.close();
if (utils.flag(this, 'excluding')) {         val = removeKeysFrom(val, props)       } else if (utils.flag(this, 'excludingEvery')) {
removeSync: () => {                     throw new Error('Fake Error');                 }
})(this));   });   Then(/^(?:the )?"([^"]*)" should (?:have|contain) the placeholder text "([^"]*)"$/, function(el, text) {     this.el = this.currentPage[this.transform.stringToVariableName(el)];
, fs = require('fs')   , sys = require('sys')   , jake = require('../lib/jake')
if (position + 4 > byteArray.length) {       throw new Error('bigEndianByteArrayParser.readUint32: attempt to read past end of buffer');     }
function(config, cb) {     var steps = [];     _.each(config.steps, function(elm) {
var noValue = fieldLength < 0       var step = 0       var field = buf.slice(pos, pos + (noValue ? lineLength : fieldLength))
that.model.on("msg:custom", function(content, buffers, widget) {             that.handle_custom_message(content, buffers, widget);         })
var marked = require('marked');
targets: null,         processesToList: [],         processesToAdd: [],         targetSelected: 'ANY',
}   range(...args) {     return this.addOperation(new RangeOperation('range'), args);   }
startup: function(){    if(this.labels.length < this.count){     this._parentInit(false, this.orientation);
constructor (options) {   super(options);   var store = this;   var changeEventPending = false;
Quadratic.name = 'Quadratic'; Quadratic.moveBodies = function moveBodies(epochTime, deltaT) {  this.computeDeltaT(deltaT);  let i;
System.register = __curRegister; }
this.__proto__ = new Widget(ctx,props);        this.size = (typeof props.size != "undefined") ? props.size : 12;
if (!(err.constructor.name == type) || !(err.message == msg)) {         throw new Error("Error message "+err+" doesn't match "+msg);     }
beforeEach(function () {     $.on(this.subject.input, "awesomplete-select", function (evt) { evt.preventDefault() });    });
$(this)             .removeClass('height-auto')             .removeClass('focus-inform');
td.addClass('permission');   var tags = entry.children('link[rel="http:   tags.each(function() {
this.create_block_id = create_block_id;   this.game_ios = [];
s.bind('clickNode', function(evt) {         setCurrentTreePosition(...getTreePos(evt), true)     }).bind('rightClickNode', function(evt) {
}; })(this.ionic);
request.setHTTPMethod(options.method || 'GET')     Object.keys(options.headers).forEach(function (i) {       request.setValue_forHTTPHeaderField(options.headers[i], i)
function merge(...streams) {   var outputStream = create();
this._lastStartingIndex = startingIndex;     this._lastEndingIndex   = this._lastEndingIndex + delta;   },
this.scope = $rootScope.$new();         this.scope.client = {};         this.AlertService = $injector.get('AlertService');
this.gotoFrame(frame);   },   gotoAndStop: function (frame, scene) {     this.stop();     if (isNaN(frame))
computeAudio: computeAudioFactory.computeAudio,
}  return range[1] / 2; }
} else {         return this.all(params).success(function(records) {           return _this.model.refresh(records);         });       }
, fs = require('fs')   , dir = fs.realpathSync();
triggerEvent = function() {              }
event.preventDefault();         this.props.onMouseDown(this, event);     }, });
if (this.parentProp && this.parent) {     bubbleEvent(this.parent, this.parentProp, args);   }};
$(".following-config-method-buttons .public-following").click( function() {         closePrompt();
$(".pathFolderChooserKo").each(function(){     var self = $(this);     if (!self.siblings().hasClass('chooserBtn')) {       self.after(getFileBrowseButton(self, true, false, false, true));     }
return $sortables.each(function() {
const str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';   return Array(...Array(n)).map(() => str.charAt(Math.floor(Math.random() * str.length))).join(''); };
content += maybeSourceMap(entry, content)   const exported = new ExObject   if (Module.wrap === moduleWrapESM) {
return this.value;     }
export default zora()   .test('should traverse a tree (going deep first)', t => {     const tree = {
for(let index = 0; index < data.length; index++){                 instances.push(
var nCols = this.__spCols.getValue();             for (var i = 0; i < nCols; ++i) {                 cols.push(String(i + 1));             }
d3_selectionPrototype.html = function(value) {   return arguments.length < 1 ? this.node().innerHTML       : (this.each(typeof value === "function"
constructor(context) {   super(context);
}  function Monster(id, type, lvl, mX, mY, dir) {   this.id = id;   this.type = type;
removeDelay: 3600,       async process(from, to, runid) {         const extendDeadline = _.throttle(() => this.setDeadline(120000), 10000);         const statuses       = N.models.core.ImageSizeCache.statuses;
writable: false,         value: sourceContext       }
class PodContainerTerminationTable extends React.Component {   constructor(...args) {     super(...args);
var nou = this.nounique   var all = nou ? [] : {}   for (var i = 0, l = this.matches.length; i < l; i ++) {
queryArgs = {};     for (const key in data) {       if (data.hasOwnProperty(key)) {         const value = data[key];
, stackFrame = this._frames[info.id]     this._addSample(info, ts);
.reduce((a,b) => a.concat(b)),             async function(filePath) {                 const extension = path.extname(filePath);
if ( error ) {       throw new Error('Error getting authorization code: ' + error[1]);     }
var list = [];     if (meta.object instanceof Array) {         for (var i=0;i<meta.object.length;i++)              list.push(construct({object: meta.object[i], parent: meta.parent, context: meta.context }));
module.exports = function (sandbox) {   let N = sandbox.N;
if (connection.from.size != this.size)         throw new Error("GATER layer and CONNECTION.FROM layer must be the same size in order to gate!");
this.ELEMENT = function() {       var childNodes = concat.apply([], arguments)       var nodeName = childNodes.shift()       var element = document.createElement(nodeName)
var count;       count = _this.todos.collection().completedCount();       if (count) {
__extends(ApolloError, _super);     function ApolloError(name, config, ctorData) {         var _this = _super.call(this, (ctorData && ctorData.message) || '') || this;         _this._showLocations = false;
return compute.sequence(         func.createConstructor('Number', 1, number_ref.NumberPrototype, number_ref.Number.setValue(Number)),
for (var i = 0; i < touchArray.length; i++) {                     var touch = touchArray[i],
var setValueByPath = function(ob, path, value, visitorCallback){             if(!path.match(/^\                 throw new Error('Diff path: "' + path + '" is not valid');             }
if (err) throw err;             loadTemplateFun(buffer);         });
routeLayer: 'default',     afterModel: function (model, transition, ...args) {       this._super(model, transition, ...args);       if (!transition || !transition.promise) { return; }
parentIndex: instanceIndex,                         values: [],                         key: getKeyName(instanceStructure.instance, key),
"use strict";     return (this.title ? this.title + '. ' : '')             + (this.first_name ? this.first_name + ' ' : '')                           + (this.last_name ? this.last_name : '');
default:         throw new Error('serialize: Content-type ' + contentType(+' not supported.'))     }
this.set("selectionIndex", 0);       page.apply(require("./" + selection + ".json"));     }
, els = node.getElementsByTagName("*")  , fn = selectorFn(sel)
UserForm.prototype.jumpToStep = function jumpToStep(stepNumber, direction) {     const targetStep = this.steps[stepNumber];     let isValid = false;
var defaultConfig = {   firestorePath: '',
var newOnFailure = function(xhr) {             command.showHint('Save failed: ' + xhr.responseText);             if (util.isFunction(onFailure)) {
$(this).addClass('al_element_selected');                     LoadLanguageAttributes();                 }
'use strict';
let file;         before(function(done) {           file = new hdf5.File('./h5ds.h5', globs.Access.ACC_TRUNC);
} else {                         uiFunctions.completeAction(action);                     }
it('test .openNewWindow() W3C WebDriver with specified type=window', function() {     return Globals.protocolTestWebdriver({       assertion: function(opts) {
}                         return old;                     }
if (!user)          throw new Error('no user')       else
if( !isNamespace(namespace) ) {     throw new Error('Invalid namespace provided for broadcastAs() observable.');   }
if (!region) {     throw new Error('You must specify a region');   }
}     return asmH(sel, text, data, children);   };
var moduleDefinitions = {};     var libraryInvocations = findLibraryInvocations(entrypointAST);     for (var moduleName in libraryInvocations) {
for (var a = 0; a < inherited.length; a++) {             var attrs = inherited[a].list();
delete this.map["" + x + "_" + y];    for(var i = 0; i < this.nodes.length; i++){     var node = this.nodes[i];
obj.method  = methodname;     obj.params  = params;
if (DEBUG_COLLISION) {             this.one('enterframe', e => {                 this.attackCollision.addChildTo(this.parentScene.playerLayer);                 this.attackCollision.alpha = 0.3;
if (declaration.lvalue.isPattern()) {         desugaredDeclarations.push(             ...this.desugarVariableDeclaration_(declaration));       } else {
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "ESA", Array.slice(arguments));   },
default:                     return match;             };
}         }, false);       };
module.exports = TextOperationAdapter;
var item = this[i];    if(condition(evaluateProperty(item, property), second)){     filtered.push(item);
case '/remove':     remove(ctx);     break;   }
function commandBlock(ctx, name) {     if(effectNode(ctx, ctx._sel.getRangeAt(0).startContainer, true).indexOf(name) !== -1) {       if(name === 'blockquote') return document.execCommand('outdent', false, null);
handleActiveEditorChange(null, EditorManager.getActiveEditor(), null);
if (!utils.isAddress(address)) {         throw new Error(`Invalid address given: "${address}"`);     }
module.exports = ElementHelper;
exports.notifyExecuted = notifyExecuted;        function getNewPrefix(options) {          return SF.compose(options.prefix, "New");      }
}     unexpected(this)   }
this.tickInfos = null;  this.font3d = null;  Clazz.instantialize (this, arguments);
emit(...args) {     this.listeners.slice(0).forEach((listener) => {       listener[0].apply(listener[1], args);
function CountDown(element, options) {         this.element = $(element);         this.options = $.extend({}, defaults, options);
value: function resolve() {             var _invoke;
app.handle = function(req, res, out) {   var stack = this.stack     , removed = ''
raise.call(target, "error", message);   };
assert.equal(opts.path, '/session/1352110219202/source');       },
}                 const buttonType = that.module.getConfiguration('toggle');                 prom.then(function (ok) {
dispose: function() {    window.test.com_test_basic = undefined;   },   handleArgs: function(args) {    window.test.com_test_basic.eventArgs = args;
error: function(message, originalError) {   var err = ''
this.handleQrCodeButtonPat = () => {     this.opts.onqrcode(this.opts.key, this.opts.url, this.opts.memo);
Webos.require('/usr/lib/broadway/broadway-3.10.js', function () {  if (Webos.broadway) {
this.prevAABB = new platformer.classes.aABB();
var async = require('async');  var actionEmitter = require('../action_emitter.js');  var FeedParser = require('feedparser'),   request = require('request');
function pullNode(propLabel) {   var part = sortPropLabel(propLabel),     prop = _.get(part, '0.0'),
var devices = client.sessionStore.getEndToEndDevicesForUser(userId);             for (var deviceId in devices) {                 if (devices.hasOwnProperty(deviceId)) {                 var keys = devices[deviceId];
template: Handlebars.compile(tpl),
vg.config.isNode = false;
String.prototype.simplify=function (){
lt(refValue, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValue = this._normalizeValue(refValue, valueInfo);             return (value < normalizedRefValue);
super(source);         core.defineProperty(this, Symbol.iterator, function* TakeIterator() {             let index = 0;
var bitMask = 1;     var query = defaultMask.slice(0);     var memberCount = 0;
case DIFF_INSERT:      if (this.offset > startOffset) {       this.offset += diffOffset;
function doIndexGet(idx, ranges, tx, resolve, reject) {   var records = [];
var json = this.json     , sort = json.sort
{     throw new Error("Cannot set HMAC key after calling update");    }
args.unshift(command);             return this.widgetFunction(...args);         },
var combineHeaders = function combineHeaders(params) {         return Object.keys(params).map(function (key) {
this.vbo_vertexCacheKey;   this.vbo_indexCacheKey;   this.indices_count = 0;  };
openRequest.onsuccess = function (event) {         this.db = event.target.result;         if(this.db.objectStoreNames.contains(this.storeName)){
this.debug.log("Do seek: " + time);             this.notify(this.notifier.ENAME_SET_CURRENT_TIME, time);             this.videoModel.setCurrentTime(time);
if (!(address_ && address_)) {               throw new Error("Missing address input parameter.");             }
, create           = require('es5-ext/lib/Object/prototype/plain-create')   , merge            = require('es5-ext/lib/Object/prototype/merge')
if (!this.isChild) {       for (var alias in this.context.aliases) {         if (this.context.aliases.hasOwnProperty(alias)) {           this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];         }
, DB = process.env.db || 'http: test('Couch is there', function(t) {
function soundsMiddleware(soundsData) {   if (typeof soundsData !== 'object') {     throw Error({       name: 'missingSoundData',
describe("when running multiple steps", function(){     var stepsRun;
} else {                     throw new Twig.Error("Unable to parse '" + expression + "' at template position" + exp_offset);                 }
if (v <= 0) {                 OpenLayers.Util.stopAnimation(this.timerId);                 this.timerId = null;
</div>`;     this.toggle = function() {       const dot = this.children[0];       if (this.classList.contains("disabled") === false) {
if (definition.events) {                 for (event in definition.events) {                     if (definition.events.hasOwnProperty(event)) {                         this.addEventListener(event, broadcast(definition.events[event]));                     }
if (!process.env.LISTEN_FDS || process.env.LISTEN_FDS !== 1) {             throw(new Error('No or too many file descriptors received.'));         }
{                  modelName: "DragDropManager",
$lux.apiUrls[url] = resp.data;                 return resp.data;             });
doRegister: function( message ){   var nick = message.args[0];
const flatten = arrays => [].concat(...arrays)
return valueBelow(val, s.lookback[s.options.displacement][key1], s.lookback[s.options.displacement][key2])   } else throw new Error('belowKumo, s.lookback.length < s.options.displacement') }
, powerwalk = require('powerwalk')
if (statics) {     for (i in statics) {       if (statics.hasOwnProperty(i)) {         Object.defineProperty(cls, i, Object.getOwnPropertyDescriptor(statics, i));       }     }
function _isText(elt) {                 if ( elt &&  elt.innerText && ((elt.innerText).trim()) ) {                     return true;
leaf.keys.forEach(key => {       const subLeaf = branch.leaves[key]
function Store() {   this.data = new Map(); }
{    throw new Error("Unexpected error in SHA-2 implementation");   }
var tableBody = $("#pendingJobListDataTableBody");     for (var i = 0; i < list.length; i++) {         var tr = $("<tr></tr>");
listen: function () {             this.$element
window.OSjs       = window.OSjs       || {};   OSjs.Helpers      = OSjs.Helpers      || {};
pollsterOptionsObserver: function () {     this.set('pollster.options', {       appID: this.get('applicationId'),
this.Init$_PropertyValueProvider(obj, propPrecedence, _ProviderFlags.ProvidesLocalValue);      this._ht = [];  }
function syncToAsync (fn) {   return function (...args) {     var cb = args.pop()
name={name}           onClick={trigger} />       </div>
for (var i = 0; i < files.length; i++)         {
module.exports = Parser;
if (logged_in && !playlist.remoteId) {         buttons.push({
tab.focus();       });       return menu;
var bcrypt = require('bcrypt')   , crypto = require('crypto')   , validity = require('validity')
constructor( props ) {         this.store = Flux.getStore('application');
}, () => {       throw new Error('screenshot failure');     });
, http = require('http')   , socketio = require('socket.io');
constructor(domain) {     super()     this.nonce = generateNonce()     this.nonceCount = 0
const withFirstElem = [firstElem];     withFirstElem.push(...elem);     powerSet.push(withFirstElem);
this.checkPort();   var server = this.server,       type = this.type;
});     for(i in country){         if(country.hasOwnProperty(i)){             $("#country_select").append('<option value="'+i+'">'+i+'</option>');         }
const headers = {};     for (let headerKey in responseHeaders) {         if (responseHeaders.hasOwnProperty(headerKey)) {             headers[headerKey.toLowerCase()] = _.clone(responseHeaders[headerKey]);         }
function eachConstantReference(obj, constants, callback) {         Object.keys(obj).forEach(function(key) {             var val = obj[key];
.exec(function (err) {
this.content = { post: { body_html: '', body: '' } };
var a=[];    dojo.forEach(this.childNodes, function(c){     if(c.nodeType==nodeTypes.ELEMENT){
this.setAttribute('clip-path', 'url(#' + entity.id + '-clippath)');                     this.style.fill = this.style.stroke = getPatternStyle(entity.tags);                 }
if (!data || typeof data != 'object') {         throw new Error(`Invalid config data in ${filename}`);     }
union(...iters) {     iters = iters.filter(x => x.size !== 0);     if (iters.length === 0) {
open.push(noDash)           this.trigger("model", noDash, el)         } else {
var frame, a, link, script, i, href, src;   frame = document.querySelectorAll('iframe[src],frame[src]');   for(i = 0; i < frame.length; ++i) {
node._scene = null;    for(var i = 0, l = node.children.length; i < l; i++)     change_scene( node.children[i] );
showSuccess('登录成功');                 console.log('登录成功', result);             },
function restoreBookmarkWindow(tabWindow, cb) {
export default function () {   batch.call(this, diff.bind(this), 1) }
if (file.state() === 'rejected') {           results.push(file.fail(function (...args) {             return cb(file, ...args)           }))
default:             throw SceneJS_errorModule.fatalError("SceneJS.bind - this event type not supported: '" + name + "'");     }
function (position) {                 the_map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));             },
});       this.app.run([], function() {
this.text = false;      this.save((("" + (this.prepareOutput(command, true))) + ";"));      return;
this.store = Flux.getStore('application');         this.className = 'youturn-appList';         super();
console.info('VFS::copy()', src, dest);     if ( !(src instanceof OFile) ) { throw new Error('Expects a src file-object'); }     if ( !(dest instanceof OFile) ) { throw new Error('Expects a dest file-object'); }
Input.prototype.__defineGetter__('address', function() {   return this.data.address; });
},   resetRenderRange: function () {     this.set('renderRange', {});   },
}; ClientRequest.prototype.abort = function(b) {   this.proxy.end(); };
});     element.find('*').each(function() {       var bindName = self.jQuery(elem).attr('ng:bind');       if (bindName) {
if (!password) {      throw new Error('Password Required')     }
that.emit('ops');             }), this.settings.monitor.interval);
var newFire = building.fire + fireSpread;             building.fire = Math.min(this.maxFire, newFire);         }         this.currentForecast = this.forecasts[this.forecastIndex++];
if (queueitem.hasOwnProperty(disallowedKeys[i])) {      throw new Error("Merge queue cannot include any " + disallowedKeys.join(', '));     }
if(!jsClient) { var jsClient = {}; }
var Device = require('../device.js')   , mkdirp = require('mkdirp')
evt.target = el;   el.dispatchEvent(evt); };
, SocketServer = require('./socket_server')
var GradientStop = Base.extend({
if (obj !== null)     throw new Error('assertNull failed: obj !== null'); }
var divs = document.getElementsByTagName('div');           for (var i =0; i < divs.length; i++){             var div = divs[i];
const fullSelector = buildSelector(this, selector, options);           context.assertElementExists(fullSelector, options);
try {                 streamData = stanzas.parse(wrap(data));             } catch (e) {
groupTableBy: function() {     if ( this.get('group') === NAMESPACE ) {       return 'namespaceId';
} else {             throw new Error("JS implementation of BSDF does not support compression (" + compression + ')');         }
if (rhs.end<=start) {         rhs = subParse(this,st.start).parseExprSubscripts() ;         n.operator = 'await' ;
var odd = (this.width & 1);   var shapes = [];   var stroke = {color: this.color, width: 1};
module.exports = parseUserOptionsAndScan;
for (var index = 0; index < innerPoints.length; ++index) {      points.push(innerPoints[index]);     }    }
for(var i = 0, l = this.properties.length; i < l; ++i )   {
constructor(value = 0, nonce = 0) {         if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');         if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';
var innerTrapped = mapped[key].innerTrapped;         affectedChunks.push(innerTrapped.affected);       }
$(AVG_REPLICATE_VALS_TOP_MENU).click(() => {         grnState.nodeColoring.averageTopDataset = !grnState.nodeColoring.averageTopDataset;         updateApp(grnState);
log.error('Check that "hue.user" provided in the configuration is correct')         throw new Error('Invalid User')       }
hideOverlay();    $(this).removeClass('window--active');   });
.invoke(mkdir, screenShotFilePath)             .then(() => {                 this._page.clipRect = {                     left: 0,
this.server.on('all-test-results', this.onAllTestResults.bind(this))             this.server.on('server-start', this.onServerStart.bind(this))         }.bind(this))     },
};       testContext.testProvider.evaluateCodeLens(codeLens, null);     },
posts.find()       .where(function (expr) {         expr.eq('id', 2);       })
init() {     this._super(...arguments);     if (!Ember.testing) {
$(".forum-post .subject", "#panel-right").on(MM.clickType, function(e) {                         $(this).parent().find(".content").toggle();                     });
else {                     this.showViewStates(['list']);                     var clusters = this.entityCollection.groupBy('cluster');
* dfs(first) {     yield* this.graphSearch(first, Stack);   }
, userEvent = crowi.event('user')   let userSchema;   userSchema = new mongoose.Schema({
return expect(this.lastResponse.body).to.matchPattern(pattern); }
patchXMLHttpRequest(function(event, task) {       patchEventHandler.send(ON_TASK, [event, task])     })
export default function max(values) {   return Math.max(...toArray(values)) }
var maxDepth = depth;   children.forEach(function(child) {     var d = this.calcDepthRecursive(child, depth + 1);     maxDepth = Math.max(d, maxDepth);
var DomainDaoSupport = function() {  this.tableConfig = null;  this.sqlTemplate = null;
function nick_alt (data) {   var nick;   if (this.welcomed) {
encodeLegacyData([from, serviceName, '', '', from].concat(                callArgs))])].join('');     } else {
var vizName1 = 'Visualization ' + testSubName;
if (frame.type === 'HEADERS' || frame.type === 'PUSH_PROMISE') {     var buffer = concat(this.compress(frame.headers));     var cursor = 0;     do {
Ratchet.convertGadgetTag(this);                              });
message = "";         for (i = 0; i<rows.length; ++i){             key = rows[i];
var networkingEngine = this.playerInterface_.networkingEngine;   var isCanceled = (function() {     return !this.playerInterface_;   }).bind(this);   return networkingEngine.request(requestType, request, isCanceled)       .then(function(response) {
mejs.Utils.typeChecks.push(function(url) {  url = url.toLowerCase();  if (url.indexOf('soundcloud.com') > -1) {
b = a.filter(greaterThan69).filter(evenDistanceFrom65);         var changes;         b.subscribe(function (x) { changes = x }, null, "arrayChange");         expect(b()).toEqual([71, 73, 75]);
debug( 'New Value: %d.', this._height );  this.emit( CHANGE_EVENT ); }
, tail = ''       , res;
}                     }).on(that.touchStart, function () {                         isTouchingTopLevelMenu = true;
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.cos);     return Math.cos(x);
it('removes textbox from menu', function() {       cy.get('@TextboxEl').within(() => {         cy.get('.widget-menu-regular').click({ force: true }).within(() => {
'use strict' const qs = require('qs') const querystring = require('querystring') function Querystring (request) {
module.exports = IndexedDB;
block.stop();           this.errors = this.ncUtils.responseErrorFormatter(error);         });
try {     send.call(this, data);    }
{{BODY}}
var mute = !this.isMuted();         this.setMute(mute);     }
if (token !== archetypeDescriptor.jsonTag) {                   throw new Error("Expected component name of '" + token + "' but instead found '" + archetypeDescriptor.jsonTag + "'.");                 }
EditorCell.prototype.toggleComment = function () {   this.editor.execCommand('toggleComment'); };
for (var field in that.spec) {                 if (that.spec.hasOwnProperty(field)) {                     var el = $(that.spec[field].selector);                     el.change(function () {
﻿define([], function() {  var Logger = function(){   this.info = function(msg) {    if (console) {
this.requestStream.on('response', function(res) {   that.response = res  })
, Variable = require("./variable")   , queryMask = require("./utilities").queryMask   , variablesMask = require("./utilities").variablesMask   , maskUpdater
'<span style="font-size:14px;color:#555;">(' +                     formatBitRate(data.bitrate) +                     ')</span>').removeClass('hide');
default:                 console.log("Unknown Viz Type" + this.type);                 break;         }
let timeout;     return function(...args) {       const context = this;       const later = function() {
if(err) {                 driver.log.error(driver.loggingCategory, err.stack);                 callback(err);                 return;
lineData.eachItemGraphicEl(function (el, idx) {             el.updateLayout(lineData, idx);         }, this);
};    }(window, window.VisSenseUtils)); ;(function(window, Math, VisSenseUtils, undefined) {
var ee3 = new EventEmitter3()   , ee1 = new EventEmitter1(); ee1.setMaxListeners(Infinity);
show_info(d);                     set_focus(d);                                      }else{
throw(...args) {     throw createError(...args);   },
ajaxStart(function() {       loader.show();     }).
function toggleDir(expander, qargs) {   var tr = expander.parents("tr");   var folderid = tr.get(0).id;
};         this.addItem = (name, value, tagname) =>  {             var node = $("<div />").addClass("field");
this.timeout(10000);   let app, tmpLogFileName, tmpConfig, tmpConfigFile;
var reloadDirty = this.get('reloadDirty');    forEach.call(Ember.get(payload, 'meta.deletedRecords') || [], (record) => {     this.deleteRecordFromStore(record.type, record.id);    });    delete payload.meta;
if (timer) timer = clearTimeout(timer);                  for (var i = 0, l = loadHandlers.length; i < l; i++) { loadHandlers[i]() }              }
if (is.defined(height)) {     if (is.integer(height) && height > 0) {       this.options.height = height;
check(request);   response.writeHead(200, {});
.catch(function (error) {       that.setState({         message: error.message,
}   if (!selector) throw new Error("unknown block: " + this.info.hash)   return [selector].concat(args)
if ((typeof exports === 'object' || typeof exports === 'function') && exports !== global) {     var props = Object.getOwnPropertyNames(exports);     for (var i = 0; i < props.length; i++)       defineOrCopyProperty(moduleObj, exports, props[i]);   }
var s = require('../index')     , assert = require('chai').assert; describe('rest', function () {
it('includes watchOptions if provided', function () {         this.config.shouldWatch = true         this.compilerApi.watch.yields(null, this.statsApi)
},         (...args) => {           this.recordsRemoved(...args);         }
storage = GridFsStorage({          url: setting.mongoUrl,          file: function* () {            yield {
tools.loadModuleAndReplace(options, 'column_view'),                 $.when(...options.columns.map(function(column) {                     return tools.loadModuleAndReplace(column.transition, 'class');
{      if ( ! isPlainObject( arguments[ i ] ) ) { continue ; }   this.stackInto( arguments[ i ] , stacked ) ;
if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {             throw new Error('LocusZoom attempted to throw an invalid event: ' + event.toString());         }
simpleMedia.on("setup", function() {   });
var prototype = extend ? (extend[0].$$initCtor ? new extend[0].$$initCtor() : new extend[0]()) : new objectType();                 fn.prototype = prototype;
if (onDelete === 'DELETE') {       this.collection.remove({path: {'$regex': '^' + this.path + pathSeparatorRegex}}, next);     }     else {
var SomeOtherTool = require('./tools').SomeOtherTool; var Person = function(opt_data, opt_ctx, opt_writer) {  Base.call(this, opt_data, opt_ctx, opt_writer); };
if(!callback) {   throw new Error("ERROR in function hashMods NO CALLBACK");  }
var INDEX = [];   it('should get tar file, not db directory', function(done) {
var order = ''            , runSyncAsync = ['S', 'S', 'S', 'S', 'S']
disabled: false,   isDisabled: Em.computed('disabled', function() {     if (this.get('disabled')) {       return true;
rethinkdb.let = function(bindings, body) {     typeCheck_(body, rethinkdb.Query);
keptSprites.forEach(move);
if (!t.type.equals(Shade.Types.vec3)) {             throw new Error("expected vec3, got " + t.type.repr() + "instead");         }
function write() {   return this.fuse(new FileWrite(opts)); }
};     return recFunc(f, a, c, cl, eps/2, left, fa, fc, fcl) + recFunc(f, c, b, cr, eps/2, right, fc, fb, fcr);    };
function RelatedModel() { }
export function testConfig() {
if (results) {                 var resultsObj = {};                 var numResultsObj = {};                 results.getResults(resultsObj, numResultsObj);
for (var j = 0; j < styleOptions.length; j++) {    var style = L.extend({}, L.Path.prototype.options, styleOptions[j]);
'<dt class="optgroup-div">'+$(this).parent().attr('label')+'</dt>'+                                 '<a tabindex="-1" class="opt '+optionClass+'">'+$(this).text()+'</a>'                                 );
callback(...args);     }
}             for (prop in a) {                 if (a.hasOwnProperty(prop)) {                     aLength += 1;
if (runtime.conf.hintAlign === "right") {                 left = pos.left - bof.left + width / 2;             } else if (runtime.conf.hintAlign === "left") {
files.forEach(function(file) {    this.push(file);   }.bind(this));
}, base);     },     udpSocket() {         return module.exports.wrap(dgram.createSocket('udp4'));
let weatherdata = weatherUtils.convertYahooToWeather(data);
self.getName = function() {
}     }),     node = cwd.find('#'+file.hash).find('.elfinder-cwd-filename').empty().append(input.val(file.name));
Object.keys(xyPlotData).forEach( (prop) => {                     const val = xyPlotData[prop];                     if (isString(val) && isFinite(val)) { xyPlotData[prop] = Number(val); }
}         else         {
getStateForSession(session) {     var storedJSON = localStorage[LOCALSTORAGE_PREFIX + session]     var storedState = storedJSON ? JSON.parse(storedJSON) : {}
Ember.changeProperties(() => {    var relationship = this.getHasOneRelationship(relationshipName, false);    if (relationship) {
if ( this.opened.state() === 'pending' ) {    this.opened.resolve();
.each(function (props){           select(this).call(render, props);         });
proto = date.prototype; function UtcDate() {   this._ = new date(arguments.length > 1 ? date.UTC.apply(this, arguments) : arguments[0]); }
isWriteOnce() {         return this.get('props').write_once;     },
}.bind(this));   exec('xcrun -find instruments', function (error, stdout) {     this.instrumentsPath = stdout.trim();     logger.info("instruments is: " + this.instrumentsPath);
if (this.adb) {       this.adb.uninstallApp(function() {         this.adb = null;
}         let job = await service.createJob(userId, tasks);         return job;
} else if ( arguments.length > 1 ) {     buffers = Array.prototype.slice.call( arguments );   } else {
var newclass = React.createClass(patchedspec);   return newclass;
, settings = config.readConfig(path.join(__dirname, 'config.yaml'))   , worker = require('./worker')
return Ember.computed(function(key, value) {     var data;     key = options.key || key;
function term() {      return this.chainl1(notFactor, conjunction); }
this.sandbox.dom.append(this.$el, $element);
}                 this._super(option, value);                 switch (option) {
for (let i = 0; i < pathsAtDepth.length; i++) {                 const path = pathsAtDepth[i];
formatic.form.updateView = function (props) {     _.each(this.attached, function (info) {       formatic.updateComponent(info.component, props);
if (angular.isUndefined(slot)) {               throw new Error('Slot ' + id + ' has not been defined. Define it using DoubleClickProvider.defineSlot().');             }
var _temp, _this, _ret;         _classCallCheck(this, WithReducer);         for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
const app = new Koa();     app.use(function(ctx){       ctx.body = ctx.href;
node.type = 'Literal';     node.value = this.resolveAsHashedUrl(node.__url);
setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {       var color = Util.makeCssRgb(r, g, b);       this.ctx.fillStyle = color;
if (method === 'reload') {       items.off('dragstart.h5s dragend.h5s selectstart.h5s dragover.h5s dragenter.h5s drop.h5s');       $(this).off('dragover.h5s dragenter.h5s drop.h5s');
}; Edward.prototype.emit = function(...args) {     this._Emitter.emit(...args);     return this;
if(this._isDerived()) {       throw new Error("Can only compute the best prefix for non-derived units, like kg, s, N, and so forth!");     }
var Datastore = require('nedb') , dbLayers = new Datastore({ filename: 'layers.db', autoload: true }); dbLayers.persistence.setAutocompactionInterval(300 * 1000);
tasks: {    * a() {     val = 5;
const WMTSCapabilities = function() {   XML.call(this);
var rom = exports.rom = function() {     this.objects = {}, self = this;     this.loaded = false;     this.romData = [];
if (data.length !== entry.size)             throw new Error('Invalid size');         if (canVerifyCrc(entry)) {
function disjunction() {      return OPTREES[this.match(/^OR/i).toUpperCase()];
close: function() {       if (this._con) {         this._con.unsubscribe();
export default MountainChartComponent;
};   exports.AppTransitionController = AppTransitionController; }(window));
var path = this.path           , credentials = ctx.req.body;         debug('trying to login as %s', credentials.username);
function defineAssociationAccessors(sourceModel, assocType, targetModel, alias, association) {   var accessors   = accessorTypes[assocType]     , singular    = inflect.singularize(alias)
it('supports setting the app details', function () {       if (process.platform !== 'win32') return       const iconPath = path.join(fixtures, 'assets', 'icon.ico')
stop: function () {       var el = this.el;
return regex.test(value);      },        color: function(field, value, params) {        },
var text = '';         for (var attr in object) {             if (!object.hasOwnProperty(attr)) continue;             text += '<tr><td>' + attr + '</td><td>';
email: function(field, value) {
blur: function (e) {             this.focused = false
super(source);         core.defineProperty(this, Symbol.iterator, function* WhereIterator() {             let index = 0;
function SQLite () {     this.client = require('sqlite3');     this.connection = null;
fn(null, JSON.parse(data.toString()));               if (that.debug) {                 var totalTime = (new Date().getTime()) - startTime;
} else {         throw new Error('attempted to set uniform "' + name + '" to invalid value ' + value);       }
for (var i = 0; i < nodes.length; i++){         var node = nodes[i];
for(var anim in this.animations){         if(!animations.hasOwnProperty(anim)) continue;   output = this.animations[anim].serialize(output);
}   var tasks = assets.tasks;   for (var field in tasks)
d3_geo_transform.prototype = {   point: function(x, y) { this.stream.point(x, y); },   sphere: function() { this.stream.sphere(); },
if (type === 'error') {       throw new args[0];     }
}         if (keep !== true)             this.axes = [];
it('should return an error if spspResponse is invalid', async function () {       nock('https:
each:function(callback) {         var cb = this.lambda(callback)
this.$location = $location;
case 'prepend': {    return fn() + val;   }   case 'replace': {
var edits = generateInfoObject("", "UndoRedoCommand");  edits["commandId"] = commandDivElem.attr("id");
}; Driver.prototype.halt = function(callback) {   callback(); };
run: function (code, env, cb) {       cb = arguments[arguments.length - 1];       if (typeof cb !== 'function') { cb = function (v) { console.log(v); }; }       if (typeof env !== 'object' || !env) { env = O; }
module.exports = () => {   return (...args) => {     console.log.apply(console, args);   };
var React = require('react') var Activities = require('./activities')
var _isStopped = function(){     if(this._playerStatusDeps && this._curStatus !== UniRecorder.PLAYER_STOPPED){         this._playerStatusDeps.changed();     }
function() {           return this.hasOwnProperty(name) ? this.instance_[name] : prop.defaultValue;         });
{   return bigBox( (exonStarts - origin), width, multiplyingFactor, strand);  }
self.loaded.push(name);                      cb.apply(this, arguments);         });
function L(...args) { if (Accidental.DEBUG) Vex.L('Vex.Flow.Accidental', args); }
try {       return f.apply(this, rest)     } catch (e) {
keys() {     return this;   }
, runProgram      = require("./run-program")     , setupRepository = require("./setup-repository")     , setupNpmLink    = require("./setup-npm-link");
var options = cliutil.lastArg(arguments)
debug( 'New Value: %s.', this._aValue );  this.emit( CHANGE_EVENT ); }
var addedObjects, i, len, part;     this._super(...arguments);     if (addedCount) {
var distribute = function(activity, callback) {
each: function(callback){     for(var i = 0; i < this.length; i++){       callback(i, this[i]);
static async delete(id) {         try {
function createTheme(req, res, next) {     var that = this, params = req.params, ThemeService = that.getService(THEME_SCHEMA),         app = req.app,
if(userData['groups'] && _.size(userData.groups) > 0) {         for(let i = 0; i < userData.groups.length; i++) {          var grp = userData.groups[i];
var dom = toDom(this.template.fn(model));         return dom;
constructor() {     super();     this.type = 'begin';
if ((!e || !e.target)         || this.activators.some(i => i.contains(e.target))         || closeConditional
$.widget("slycat.colorswitcher", {
var cap = require('./util').cap;
exports.objSplice = function(obj, length, start, end, replace) {  var splice = A.splice, args = [ start, end ];  A.push.apply(args, replace);  obj.length = length;
menus.html(render({email: that.currentUser.email}));       menus.find('.signout-btn').click(signout);
{  this.updateTranslationValue = function(segmentId, translationId, value)  {
var sys = require('sys');
describe('corp-semantic-release', function () {
this.errors = errors;          this.ExclusivePopup(title, positive);      }
if (tree && tree.length){             p.find('textarea').focus(function(){                 var id = $(this).attr('id').replace(/:/g, '\\:');
} else {       result = meta.lastValue;     }
it('should deploy all contracts', async function() {         let result = await clevis("test","deploy")         assert(result==0,"deploy ERRORS")
this._tree.getManager().addEventListener("changeSelection", this._onTreeSelectionChange, this);
var searchAndHighlight = function(token){                          if(token.type === 'identifier'){
default:           console.warn('Invalid message', data);       }
obj.baseURL = this.baseURL;         return asJson ? util.prettyPrint(obj) : obj;     },
const step = parms.plainModulus / parms.polyDegree   encrypted = Crypt.encrypt({value: Array.from({length: parms.polyDegree}).map(       (x, i) =>  {
this.consoleInfo(this.level + ' status');   this.consoleConfig(this[this.level].config); }
var self = this;               this._applicationClosed = false;
const widgetOptions = this.createMetricWidgetsLayout(entry) || [];     widgetOptions.forEach((options) => {       if (this.hasValidOptions(options)) {         const widget = new MetricWidget(options);
if(gesture.handler) {             gesture.handler.call(gesture, this.inst, inputData);         }
}); }(window.webNotification));
if (err.code === 0) {     throw new Error('Account not found');    }
$('body, html').animate(                 { scrollTop: calcHeightFunc(target, source) },                 speed,
data.forEach(singleData => {             var insertData = [];
trigger: function(name) {     Ember.tryInvoke(this, name, [].slice.call(arguments, 1));     this._super.apply(this, arguments);
ai = function(){ pp.addChild.apply(pp,arguments);},    ap = function(){ pp.addSeparator.apply(pp,arguments);}   var pid = ui.puzzle.pid;
if ( polygonsJson.error ) return errorMessage;         if ( r360.config.logging) var start   = new Date().getTime();         var polygonList = [];         _.each(polygonsJson, function(source){
}     for(let i = 0; i < handler['allow'].length; i++) {      const ret = yield user.isAllowed(handler['allow'][i]);      if(ret) {
return this;     }
describe('84. fetchClobAsString1.js', function() {   var connection = null;
componentWillEnter: function(done) {     var node  = this.getDOMNode()       , width = $.width(node)
setTimeout(function() {                                 deferred.resolve( args );                             }, 1 );
} else {                             throw new Error('Dynamically creating toggle-content is not supported right now. ' +                             'Return an HTMLElement instance');                         }
it.skip('new RTCPeerConnection(' + printJSON(tc12Constraints) + ')', function () {});   it('new RTCPeerConnection(' + printJSON(tc1Constraints) + ', ' + printJSON(tc13Constraints) + ')', function () {     this.timeout(testItemTimeout);     var peer = new RTCPeerConnection(tc1Constraints, tc10Constraints);
var getLoggerForConfig = function(name, group){  var config = common.config[group];
const reIgnore = /^[._]/ module.exports = (base, default_price, invoice_ttl, files_attr) => {
this.languages.forEach(function (language) {             if (!configOptions.skipClient) {
var rgb = captures[1]         , single = rgb.length == 3         , r = parseInt(single ? rgb[0] + rgb[0] : rgb.substr(0, 2), 16)
return value;             },             function (reason) {
var mongoose = require('mongoose');
, attempt: this    })    , this)
networkTypeStore.pullNetworkType(this.props.match.params.networkTypeId)             .then(() => {                 this.setState({loading: false, error: false});             })
var path = require( 'path' )   , Model = require( 'classes' ).Model;
im.displayImage();      JS9.Separate.activeImage(im);     });
let o = {     deref:    partial(deref, value),     path:     path,
function getHostAccount() {   return co(function* () {     let iam = new AWS.IAM();     let accountId = yield iam.getUser({}).promise()
var _ready = [];   var ready = function(lambda) {
obj.bind('focusin.price_format', function()     {
transport.getLatestBlock(processNewBlock);   };
jQuery(this).appendTo(lastColumn);           myReorderer.refresh();                 })
new this.Calculations(this, price => {         if (JSON.stringify(price) === JSON.stringify(this.price)) return resolve(price);         this.price = price;
dismissClass: computed('notification.dismiss', function() {     if (!this.get('notification.dismiss')) return 'c-notification--in';     return false;
if (visId) {       const username = mapCard.data('visOwnerName');       const mapCardPreview = new MapCardPreview({
if (!projectRoot) {         throw new Error('Current working directory is not a Cordova-based project.');     }
_matchEmojiString(textContent.substring(minIndex), data, reg, type)   }
LayoutInformation.prototype = new RefObject;  LayoutInformation.prototype.constructor = new LayoutInformation;
return callback.call(objects, 'invalid user name: ' + user, user, [], JSON.parse(JSON.stringify(defaultAcl.acl)));     }
for (i = 0; i < dirs.length; i++) {         scanSums[dirs[i]] = [];         scanIndexes[dirs[i]] = [];     }
const vm = require('vm');
debug.call(this, 'Node#sync', arguments);
for (var item = 0; item<actionItems.length; item++) {                             var item_handler = function(handler){
this[ name ] = undefined;     delete this[ name ];
reportLocation: {       filePath: '',       lineNumber: 0,       functionName: ''     }
});       svc.createClient({server: server}).push(1);     });
const os = require('os'); const lib_version = require('../package.json').version;
});       canSubmit = valid && !exists;       entry[canSubmit ? "removeClass" : "addClass"]("invalid");
}         let style = this.parseFeature(feature, draw, context);
return Nevow.Athena.Widget.get(nodes[0]); };
this.cids = [];                            Plugin.sc.init.call( this, config );                            this.getPlugged().getIndex = this.getIndex.bind( this );
}   var items = [[]];   items[0]['a'] = out;
function getConstructorInstanceWithArgs (Constructor, constructorArgs) {   return new (Function.prototype.bind.apply(Constructor, [ null ].concat(Array.prototype.slice.call(constructorArgs))))() }
var calls = [];             fieldNames.forEach((fieldName, i) => {                 calls.push(this.loadField(fieldName, forceRefresh));             });
}       for (var ci = 0; ci < self.chains.length; ++ci) {         var chain = self.chains[ci];
, url       = require('url')
if(typeof config.autorun === "undefined" || config.autorun !== false) {    this.utils.addListener(w, "load", function() { that.fireEvent("page_load"); that=null; });   }
value: function validate() {             if (!this.apiKey) throw new Error('apiKey is required');         }
if (plain == undefined || plain == null) {         throw new Error("Missing the required parameter 'plain' when calling postSetPassword");       }
if (noLongerSupported) {     sails.log.debug('The second argument to `res.ok()` is deprecated.');
ncode = bits(4) + 4;         if(nlen > MAXLCODES || ndist > MAXDCODES)             throw Errors.TO_MANY_CODES;         for(var index = 0; index < ncode; index++) lengths[order[index]] = bits(3);
if (!ko.isObservable(selection)) {                 throw new Error('The selection binding should be bound to either an `observableArray` or a object containing a `data` `observableArray`.');             }
if (testUtils.ecmaScript5) {             Object.defineProperty(method, "thrower", {
angular.module('proton.modals', [])
function iterList(l, f) {     for (var i = 0; i < l.length; ++i) f(l[i]);   }   function toLetter(ch) {
})(typeof window != 'undefined' ? window : (typeof WorkerGlobalScope != 'undefined' ?                                            self : global));
super([]);         core.defineProperty(this, Symbol.iterator, function* EmptyIterator() { yield* []; });     }
if ($parent.hasClass('open')) {
var subs = {"#": 1, "?": 1, "/": 0};       Object.keys(subs).forEach(function(c) {         var ndx = subs[c] ? url.indexOf(c) : url.lastIndexOf(c);
canvasAddCountries.call(this);                 }                 if (this._.options.showLakes) {                     canvasAddLakes.call(this);
if (nextByte !== bytes[i]) {           throw(Error("adler32 checksum didn't match"));         }
if ( element.type === undefined ) {   throw new ve.Error( 'Invalid element error, can not set attributes on non-element data' );  }
else {       formattedMessage = '';     }
message.id = id;   this.redirect('/'); };
construct: {
}             input += '<option value="' + value + '" ' + attrs + '>' + name + '</option>';           });         }
return this.collection[name]; };
case 'photo':   return <Photos media={props.media} />;
console.log(list);       for (var f = 0; f < list.length; f++) {         var id = list[f].id;
digit: function(field, value) {       var regex = /^\d+$/;       return regex.test(value);
d = c.getItem(d);                                 if (!n(d)) throw new Error('Storage mechanism: Invalid value was encountered');                                 return d
module.exports.generateSql = () => {   return String("I want to run!!") }
var desc;  return Object.defineProperties(this,   Object.getOwnPropertyNames(b).reduce(function (o, key) {
, bl           = require('bl')
default:         throw new Error("Protocol not supported.");     }
set (...args) {     let [keyPath, value, options = {}] = args
, APPLY_BY      : {               type      : DataTypes.STRING
var that = this;   this.shuffle = function() { that.seq.shuffle(); };  this.reset = function() { that.seq.reset(); };
exports.setup = function(Tests){
d3_transitionPrototype.text = function(value) {   return this.tween("text", function(d, i) {     this.textContent = typeof value === "function"
}   iters() {return [this.keep, this.reject]}
progress: function (easeIt) {       return easeIt ? this.situation.ease(this.pos) : this.pos
var optionToSelect = null;     for (opt = 0; opt < element.options.length; opt++){       var el = element.options[opt];
$('#lighthouseKeepLogin').on('click', function() {      chrome.storage.sync.set({
var cells = IPython.notebook.get_cells();         for (var i = 0; i < cells.length; i++) {             add_lan_selector(cells[i], cells[i].metadata.kernel);
})(this);
size: {                     width: [],                     height: []                 },
}();   this.Blotter = Blotter; }();
}                         readableProxy.write(eventData);                     };
, ContentsIdDao = require('../../../../lib/extension/contents/contentsIdDao')      , ImageUtils = require('../../../../lib/tiles/imageUtils')
}                 ds.rowCb = function (item) {                     var model = self._toModel(item, true);                     if (recip) {
var record;     result.fetch_obj( function( obj ) {       record = self.populate_record( obj );
function entityRemove(args, cb) {     args.command.cmd = 'remove';
throw new Error(__('Invalid iOS developer certificate'));     }    }),
var buf = Buffer([ 0x03, 0x01, 0x20, 0xff, 0x00 ])     var array = Struct.types.array
, 'test integer': function () {     var byTor;
for (var i = queue.length - 1; i >= 0; i--)       {
if (!this._inChangeGroup) {             throw new Error("TextView._replaceCharacters() called without" +                 " a change group");         }
exports.config = config;
addOpenMetadata(this.messages[1], 1);       const icon = find(makeIcon(this.thread), "open-tracking-icon");       expect(icon.children.length).toEqual(1);
} else {     throw new Error("Unsupported DataType: " + attribute.type);    }
getClassName: function() {       return "R.debug.ConsoleRef";    }
if (oldKey) {      throw new Error("Illegal Keystroke '"+specString+"': contains more than one regular key");     }
if(eventListeners[eventName]) {    for(var i = 0; i < eventListeners[eventName].length; i++) {     yield eventListeners[eventName][i](params);
let variables = ''       for (const key in config.ctx) {         if (!config.ctx.hasOwnProperty(key)) continue         let variable
a: function* () {         yield block()
} else {                     DateEditorView.__super__.onGenericEscapeKeydown.call(this, e);                 }
this._allModules = {};
var subRecords = [];                 for (var idx = 0; idx < subcontents.length; idx++) {                     var subRecord = processResult(subcontents[idx]);
this.__mwcDeps[i].dep.depend();         this[this.__mwcDeps[i].cb](...this.__mwcDeps[i].args);         this.__mwcDeps = _.clone(this.__mwcDeps);
if (hasSetPage) {       this.get('content').setPage(this.get('page'));     } else {
},   _validateRow: function (row, cb) {     var record = this._getRecord(row);     this.props.model.isValidRecord(record, function (err, validErrors) {
this.mv_swap = function() {         this.game.swap(this.x, this.y);     }
.value();                     $scope.navItems.push(...requestNavItems);                     $scope.navItems.push({
} const mapDispatchToProps = {} export default connect(mapStateToProps, mapDispatchToProps)(ReactChoropleth)
function xor() {     var index = -1,         length = arguments.length;
}   this._deferred = new Q.defer();
} else {                          errorCallback("FAILED");
var pg = require("pg"); var EventEmitter = require('events').EventEmitter;
Backbone.Form.editors.Base.prototype._setOptions.call(this, opts);      this.value = this.model.get(this.options.keyAttr);
if (str.length <= (i + 1)) {         throw new Error('High surrogate without following low surrogate')       }
Object.keys(config).forEach(function (prop) {       that[prop] = config[prop];     });
var TObject = require( 'PHET_IO/types/TObject' );   var TBounds3 = function( bounds3, phetioID ) {     TObject.call( this, bounds3, phetioID );     assert && assert( bounds3 instanceof phet.dot.Bounds3 );
var marked = new Array();    for(key in this._shapes) {     if(!YAHOO.lang.hasOwnProperty(this._shapes, key)) continue;     marked.push(this._shapes[key]);
var $export = require('./_export'); var $values = require('./_object-to-array')(false);
rhs.async = true ;        st.pos = rhs.end ;        this.next();
var exec = require('child_process').exec   , path = require('path')
var actualAction, actualChangeListenerFunctionContext, expectedChangeListenerFunctionContext;   var expectedError, logger;
before(function (done) {             Object.keys(require.cache).forEach(function (name) { delete require.cache[name]; });             this.formage = require('../');             var mongoose = this.mongoose = require("mongoose");
if (that.auto_wait) {      if (node.window) {        node.emit('WAITING...');
'use strict'; var Utils = require('./utils');
var DocumentManager     = require("DocumentManager")     ,   EditorUtils         = require("EditorUtils")
push(err);             next();         }
soundManager.play("cuehit");    });
return download.start(this.options).then(() => {       expect(process.exit).to.be.calledWith(1)     })
if ( !item || !item.id ) {       throw new Error('url() expects a File ref with Id');     }
enableAppIdLink: function() {     return !!this.get('tezApp');   }.property('applicationId', 'tezApp'),   childDisplayViews: [
if (err) {       callback(err);     } else {
options = options || {};
JSHC.addToplevelNamespace(compiler, mod.ast);         }
if (componentGlyph.points) {                     transformedPoints = transformPoints(componentGlyph.points, component);                     glyph.points = glyph.points.concat(transformedPoints);                 }
}     throw new Error('illegal char: ' + c);   }
if (!/^\s+/.test(buf) || (buf.length > 3 && !/^\s+at /.test(buf))) {       w += buf;       buf = '';
var http = require('http')   , nowjs = require("now")
}; NaiveBroadphase.prototype = new Broadphase();
}];     for (var id in clientStrings) {         if (clientStrings.hasOwnProperty(id)) {             var cs = clientStrings[id];             if (cs.r.test(nAgt)) {
tempDiv.innerHTML = tmpl   processEvent.call(this, tempDiv)   return tempDiv.childNodes[0]
} else {             throw new Error("Internal error: Builtin '" + name + "' has no evaluator?!");         }
var concat = Array.prototype.concat,         values = concat.apply(this, arguments);
const result = [];           data.forEach((item, key) => {             item.key = key;
var BreakpointGutter = function () {         this.cm = null;         this.cd = null;
}          let ret = {};     ret['category'] = item.value;
}   return; }
result.push('(' + component.value + ')');         for (ii = 0; ii < component.children.length; ii++) {           result.push(flattenComponent(component.children[ii]));
constructor(location, binding, initializer) {     super(location);     this.binding = binding;     this.initializer = initializer;
expect(log.event, nameErrorMessage).to.be.equal(name);   Object.keys(params).forEach((key) => {     const expected = params[key];
for(var i = 0; i < this.connections.length; i++){         var conn = this.connections[i];         var tojson = conn.toJSON();
, levels = require('./levels') , LoggingEvent = require('./logger').LoggingEvent , Logger = require('./logger').Logger , ALL_CATEGORIES = '[all]'
$.data(that, 'plugin_' + pluginName)[options]();             }
declutterMarkers: function(opts) {   throw new Error('Mapstraction.declutterMarkers is not currently supported by provider ' + this.api);  },
setTimeout(function() {    this.fireEvent("media", this);    this.informTable("Resize");
startMeasure("run");             this.set('data', buildData());             that.set("selected", undefined);
if (r !== null) {             for (var i = 0, l = r.length; i < l; i++) {                 var uniform = r[i].match(/uniform\s+\w+\s+(\w+)/)[1];
for(j = 0;j < this.dropDots.length;++j){     item = this.dropDots[j];
} else {         message.say(`New code successfully pulled!\nAwaiting next restart.`)       }
handler: function (v) {                      self.fireEvent(BI.AnalysisOperatorTitle.EVENT_SAVE, self.saveButton)                  }
if (!share.jiff.helpers.array_equals(share.holders, o.holders)) {         throw new Error('shares must be held by the same parties (|)');       }
for(var ChoiseSet = 0; ChoiseSet < MFT.AppModel.interactionChoises[ChoisesVal].choiceSet.length; ChoiseSet++){                         button = MFT.Button.create({
function top(k, offset, renderSpec, callbacks) {           var query = writeQuery(_binParams, true, _orderExpression);
module.exports = (function () {
const outer = this;     const ns = new Set(function* nsgen() {       yield* ano.entries;
var cb = this.async();   this.log('\n---- ' + 'Client'.red.underline + ' ----\n');
case 's': case 'd': case 'b': case 'n': break;     default: throw new Error('unrecognized type ' + val.t);    }
inverse: function () {       return new SVG.Matrix(this.native().inverse())
try {              S3.JSONRequest[selField.attr('id')].abort();          } catch(err) {};
function setDisplayLength(iDisplayLength) {         $.extend($.fn.dataTable.defaults, {
it("get a notification message", async function() {       await VerifyNotificationDisplayed(this.driver, "Authentication failed, please retry later.");     });
if (message.type == "prepare") {                 node.receivePrepare(message.port, message.address, message.proposalId)             } else if (message.type == "accept") {
NSCrawler.prototype.insertXPath = function (parent, child) {   let prefix = this.config.platform === 'iOS' ? 'XCUIElementType' : '';   this.checkPathIndex(parent, child);   let currentIndex = child.pathInParent;
} runTestCase(testcase);
, fs = require('fs')   , underscore = require('underscore'); var Pool = require('./pool');
renderNodes: function($container, nodes, type) {    for (var index = 0; index < nodes.length; index++) {     var node = nodes[index];
if (!(type in this.schemas)) {       this.schemas[type] = Parser(type, schema, options);     } else {
})(Cylon.Adaptor); });
) {         const retVal = formio.hooks.on[name].apply(formio.hooks.on, args);         return (retVal !== undefined) ? Boolean(retVal) : true;       }
Template.Fall_Semester.onRendered(function fallSemesterOnRendered() {      if (this.data) {
describe('91. fetchBlobAsBuffer4.js', function() {   var connection = null;
var file = JSIL.Host.getFile(filename);       return JSIL.StringFromByteArray(file);     }
FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);  if(NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);  else if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }
vertices.position.forEach((elem, index, array) => {       optimizedVertexAttrib.forEach((attribName)=> {         var element = vertices[attribName][index];
if (console.log.apply) {         console.log(...arguments);       } else {
});         el.find('.remove-recipient').show(200);     });
if (this.output.length !== 2) {     throw new Error('Output must have 2 dimensions on graphical mode');    }
var atomic_target     = e.target.parentNode,       atomic_fill       = window.getComputedStyle(atomic_target).getPropertyValue('fill'),       atomic_hexvalue   = atomicRgb2Hex( atomic_fill ),
const chalk = require('chalk')
'use strict'; var idCount = 0; var _ =
, fs = require('fs')
}       this.set('optionsDates', newOptionsDates);
trigger(event, target, ...args) {         var count = this._liveResources.length;
constructor() {         this.map = {};     }
export function log(...argv) {     }
if (!_this.tokenVector.length) {               throw new Error("Invalid address contains no address tokens.");             }
init() {     this._super();     this._nextPaintFrame = null;
case this.ERROR:                     _logger.error(message);                     break;
if (body == undefined || body == null) {         throw new Error("Missing the required parameter 'body' when calling createUser");       }
"use strict";
},   render: function () {     if (this.currentIndex === null) {
for ( var i = 0; i < 50; ++i ) {         var controller = this.TaskController.create();         this.taskControllers_[controller.task.id] = controller;
exports['default'] = Bit; module.exports = exports['default'];
return;     }     var body = (this.get('doc.body').toString() || '').toString();     if (body !== this.get('session').getValue()) {       this.get('session').setValue(body);
const _checkAction = jTool(event.target);
, minifyify = require('../lib/minifyify')
function txn_oncomplete(entry_id, callback, event) {   log('%s: marked entry as read', db_mark_entry_read.name, entry_id);   this.channel.postMessage({type: 'entry-marked-read', id: entry_id});
.on("mousemove", function(d, i){
}   for (var i=0; i < toCut.length; i++) {     var tabIdToCut = toCut[i];
if ( this._triggerWithDeprecated( "load" ).event.isDefaultPrevented() ) {      return;
method == 'load' ? load.apply(this, slice.call(arguments, 1)) :                 localize.apply(this, arguments));     };
send(subject, msg, optReply, optCallback) {     return this.nc.publish(subject, msg, optReply, optCallback)   }
module.exports = StyleAttrBinding;
(exports.setrange = function(client, key, offset, str){   var obj = this.lookup(string(key))     , offset = +string(offset);
case JSON3.stringify(new (0).constructor()) === "0":           case JSON3.stringify(new "".constructor()) == '""':
widgetOk = widget.querySelector('.pf-widget-ok'),       widgetReco = widget.querySelector('.pf-content-unit');
}         childNodes.forEach(function (childNode) {             this.appendChild(childNode);         }, this);
store.PURCHASE_EXPIRED = 6778003; })();
var layer = this.getAttribute('data-layer'),                 tags = this.getAttribute('data-tags');
expect(popularity).to.be('1');       });     });
if (this.right) {     if (this.right.parent !== this) { throw new Error('Parent pointer broken for key ' + this.key); }     this.right.checkInternalPointers();
}, this)     this.on('context.updated', (context) => {       this._context = context     }, this)
function($log, $state, productList) {
base.externals.push(...(options.externals || Object.keys(options.libs || {})));
}       makeError("toStringJS on an unknown type: " + val);     }
window.MethodTracer = MethodTracer;
try {      self._bind.push(new EpoxyBinding($element, bindings, context, handlers));     } catch( error ) {
if(Ext.Array.contains(assignment_ids, parseInt(assignment_id))) {                 sumScaledPoints += group.scaled_points;             };
return Utils._.template(sql)({         triggerName: triggerName,         tableName: tableName       })     },
this.Roles.save({ id: 'bulk' }, { roles: this.roles }, function (data) {                              }, function (data) {
(function(jQuery) {
, rimraf    = require('rimraf') var dbidx = 0
self.final.aliasTo = self.aliasTo;                 for (var i=0, j=ALIAS_PROPS.length; i<j; i++) {                     var key = ALIAS_PROPS[i];
{         this.connection.sendPacket("root", "listTabs", true, callback);     },
this.router.listener.add(requestObject, connection);   this.funnel.execute(requestObject)
this.on('streamStart', function ({ id }) {
value(emitter);  if (type !== undefined) {   data = emitter.hasOwnProperty('__ee__') && emitter.__ee__;
var self          = this       , updatedAtAttr = this.DAO.prototype._timestampAttributes.updatedAt       , createdAtAttr = this.DAO.prototype._timestampAttributes.createdAt       , errors        = []
'use strict';
playerActionFunctions.completeAction(action);    }, function () {
defineInstanceSimilar(sugarNumber, 'abs,pow,sin,asin,cos,acos,tan,atan,exp,pow,sqrt', function(methods, name) {     methods[name] = function mathAlias(n, arg) {       return math[name](n, arg);     }
var offset = 0
res.writeHead(200, {     'Content-Length': body.length,     'Allow': body   })   res.end(body) }
Node.prototype.seq = function() {       var fn;
clearTimeout(id);     });     next();
} else {             throw new Error('Unknown compression method: ' + entry.method);         }
this.registerNamespaceFriendlyPrefix = registerNamespaceFriendlyPrefix;   this.$get = function() {
reset() {     this.extraVariables_ = dict();   }
if($(this).is(':checked')) {          BIMSurfer.showType($(this).val(), project);         } else {
} export async function load__data__csv__worker(ctx) {   info(`${logPrefix}|load__data__csv|Promise|setTimeout`)
var num_gaps = 0, ref_count = 0, total_gap_days = 0, gap_start;       new_e.forEach( function(point) {
it("should return true when a PrimitiveClass is given", () => {       expect(isPrimitiveOrPrimitiveClass(String())).to.eq(true);     });
} else {     this.path_ = options.path[0];   }
} else {                     mockFunc = (request, response) => response.send(status);                 }
$popup.toggle();      $moreItem.toggleClass('active');      e.preventDefault();
ownerType: 'mixin',          getValue: function()  {              let html = _getHtml(this);              return html.value;
, /(\s(\\\}|[^\}])+)?/   ]; let i18nSelector = null;
this.write = function (session, callback) {     var secret = geddy.config.secret       , data = JSON.stringify(session.data)
function ($log, productDetail, productVersions, Notifications) {       var that = this;
, function (cb) { d.remove({}, { multi: true }, function () { return cb(); }); } , async.apply(commonUtilities.insertDocs, d, n, profiler)
var destination = {};  for (var property in source)   if (source.hasOwnProperty(property))    destination[property] = source[property];  return destination;
export default function(array, f) {   var v = variance(array, f);   return v ? Math.sqrt(v) : v;
getClassName: function() {       return "R.debug.ConsoleRef";    }
}).catch( function(error) {         that.showErrorMessage("Error loading data. " +error);         console.error(error);
this.table = table;         var name;
function compileModes() {     for (var i in LANGUAGES) {       if (!LANGUAGES.hasOwnProperty(i))         continue;       var language = LANGUAGES[i];
function LinkTree(doc, treeElement) {     this.doc = doc;     this.treeElement = treeElement;
if (!this.container) {             throw new Error('Toggleable container with id "' + ContainerId + '" not found');         }
this.sessionId = sessionId;   for (prop in properties) {     if ({}.hasOwnProperty.call(properties, prop)) {       this[prop] = properties[prop];     }
[ targets.show, targets.hide, targets.tooltip, targets.container, targets.content, targets.window ],      function(i){ return typeof i === 'object'; }     )
server.decorate('server', 'setupViews', function (path, engines) {     this.views({
var c, parts, part, p, fullName;    for ( var name in list ) {     if (list.hasOwnProperty(name)){      c = list[name];      if ( c.type == 'script' ) {
ref: function (x, y) {       return this.attr('refX', x).attr('refY', y)
CommonViewFunction.saveTermToAsset({                             termName: termName,                             guid: this.guid
{       throw new Error("QR Error: ReedSolomonException Bad error location");      }
this.updateFastColorPickMenu();     this.setUiColorByRgba(this.favoriteColors[0].color);   } else {
dfa.accept = -1;  dfa.nfa_set = [];  dfa.done = false;
{   super();   this.config = Object.assign(    {scale: 1.15, duration: 75, revertOnDispose: true},
var index;      for (var i = 0; i < data.length; i++) {          if (data[i].ts < 946681200000) data[i].ts *= 1000;
try {       this.closing = true;       await closeStream(this.stream);     } finally {
for (var dep in scope.dependencies) {                         if (scope.dependencies.hasOwnProperty(dep)) {                             dep_name = dep;                             dep_src = scope.dependencies[dep];
if (Meteor.users.find().count() === 0) {         console.info('no users in database!  adding some default users');         var userId = null;
default:         throw new Error("INVALID_ARG_MODULE_INIT");     }
ClientDisplay.prototype.getGridFragment = function(callback) {     if (!this.world || !this.gridSize || !this.modul) {         callback(false);
}; Dword.prototype.emit = function(...args) {     this._Emitter.emit(...args);     return this;
this.getKeyValueView("From", "from_date", "date"),    this.getKeyValueView("To", "to_date", "date")   ];
if (_byte == undefined || _byte == null) {         throw new Error("Missing the required parameter '_byte' when calling testEndpointParameters");       }
$('#channels a.server').live('click', function(event){      self.focusOnServer();          });
})(typeof window !== 'undefined' ? window : global);
position: 'absolute',                              transform: [
const logger = require('./logger') module.exports = function () {   const { server, client, ...env } = this.nuxt.options.env
editIntegration(integrationID, options) {         return this.shard.client.editGuildIntegration.apply(this.shard.client, this.id, integrationID, options);     }
function toRegex(...args) {   const str = fill(...args);   return new RegExp('^(' + str + ')$');
vector: function (x, y) {                            throw new Error("internal error, can't evaluate matrix/vector");                       },
errorCount+=ec;            }else{
}   toolbar.reset();   table.render();
_.each(this.getReverseRelations(), (relation) => {    relation.addRelated(this.instance, options);   });
test.done();         };
.bind('keydown', function( event ) {     var index = val();     if ( self.options.disabled ) {
onBroadcast (callback) {     throw new Error('onBroadcast Not Yet Implemented', 'AbstractOverlay.js');   }
args.push(raw);                     emit(args);                 } else {
var store = this       this.requestTransaction(function () {         var exeNow = store.listenersByIdExecuteNow
if(!this.queryModel.get('queryText')) {                     this.model.set('processing', false);
var dummy   , hotplate = require('hotplate')
Base.call(this, {});             this.initialize.apply(this);         },
var result = {};             for (var key in obj) {                 if (obj.hasOwnProperty(key)) {                     result[key] = deepWalk(obj[key]);                 }
module.exports = ModelBaseClass;
this.events.addEventType("tileloaded");         this.grid = [];     },
this.$from.animationComplete($.proxy(function() {      this.doneOut( screenHeight, reverseClass, none );     }, this));
static createError (name) {     return SuperError.subclass(name)   }
{      options.current.extraParams = eval('(' + $this.parent().data('id') + ')');     }
this.sections.each(function(section){    if (section.position == 'footer' || section.position == 'footertool') this.hasFooter = true;    if (section.position == 'header') this.hasHeaderTool = true;   }, this);
attachToKo(ko);  }));
if (this.active) {             for(var i in this.handlers) {                 if (this.handlers.hasOwnProperty(i)) {                     this.handlers[i].deactivate();                 }
answer.error = err;             that.eventEmitter.emit("error",asked,answer);         });
};   Neatline.commands.setHandler(Styles.ID+':display', display); });
let last;     for (let i = 0; i < keys.length; i++) {       last = get(keys[i]);
, Component = require('node-xmpp-component')
CrawlGraph.prototype.getAllCrawlers = function () {         var c = [];         for (var key in this.allCrawlers)             c.push(this.allCrawlers[key]);
groups = [];            for(let j = 0; j < user['groups'].length; j++) {             var g = user['groups'][j];             var gr = yield userManager.getGroup(g);
}     }, _callee4, this);   }));
.get('/log/(*)', logAPI.get) const app = Toa(function *() {   var path = this.path
if (!doc.exists) {             throw new Error('Document does not exist!');           }
pulse.Metric = function (name, groupBy) {  this.tags = {};  this.name = name;
it('should clear suggestions', function() {       this.source.andReturn(mockResults);       this.dataset.update('woah');
$('#actions input').each(function(i){       if ($(this).is(':checked')) {         actions[i] = $(this).val();
}     }, { engine: engineMock });     this.tooltipManager.start(this.layerView);
var sendOpts = config.app.env === 'production' ? {root: 'client', maxage: config.app.cacheTime} : {root: 'client'};   app.use(async function (next) {
this.editMode = false;     $attrs.$observe('disabled', function (isDisabled) {
})     var test = thisFuncs.printf instanceof Function     expect(test).to.be(true)   })
throw new Error("Illegal state: unexpected event type [" + et + "].");   }
} else {           for (param in userAccounts) {             if (userAccounts.hasOwnProperty(param)) {               hasAccount = true;               if (param in svcOptions) {
var match = cache.search(type,+shard,+id);             if (match) for (var i = 0; i < match.length; i++) result.push(match[i]);         }
removeKeys: function(keys) {     keys.forEach(function(key) {       if (this.get(key)) {         this.get(key).remove();
.bind( "blur.button", function() {     self.buttonElement.removeClass( focusClass );    });
}     text = text + $link.text();     text = text.toLowerCase();
function FlowLayoutController(options) {         LayoutController.call(this, options, _createLayoutNode.bind(this));
, $ = require('jquery')   , moment = require('moment'); module.exports = AdminEventEditFormFeedController;
String.prototype.  should    = nativeShould;
return gameGroup.addPlayer(player);   };
this.favoriteColors = JSON.parse(colors);     this.updateFastColorPickMenu();     this.setUiColorByRgba(this.favoriteColors[0].color);   } else {
} else {     throw new Error('Unable to create route instance: routeClass or viewClass must be defined')   }
.on('change.dirty', function () {           var el = input,             field = input.closest('.field'),
selectionUpdated: observer('selection', '_typeahead',function() {     const selection = this.get('selection');     if(isNone(selection)) {
, filesize = require('filesize')   , docker = require('../lib/docker.js').docker   , exec = require('child_process').exec
requestToSave = function(request, cb){       var snapshot, ref$, cs;       if (request.is('application/json')) {
change: function () {     this.set('value', this.$('option:selected').val());   },   initSelected: function () {
if (MaxSendRate <= 1 && process.env.NODE_ENV === "production") {                 throw new Error('You are currently in Sandbox Mode. Please contact Amazon to get this lifted.');             }
this._maxLength = 4;  this.shapes = createSizedArray(this._maxLength); };
SegTrack.prototype.updateSampleKeys = function(featureList) {     const samples = new Set(this.sampleKeys);     for (let feature of featureList) {
History.pushQueue({
} else {         return true;       }
for (var i = 0; i < srcOutputLoc.length; i++) {         var srcOutputDir = path.resolve(apiOutputDir, srcOutputLoc[i]);
var tmpl = $('#job-template').html()     , from = 0     , to = 15;
updateRepresentations = function(adaptation) {             var reps,                 manifest = manifestModel.getValue();
var chunks = getChunks(wordpos, nextcur);       for (var j = 0; j < chunks.length; j++) {         ret.push([word].concat(chunks[j]));
this.classList.remove(...ALL_COLOR_CLASSES);
this._Width = 0.0;      this._Length = 0;  };
}       return null;     }
var feed = __dirname + '/feeds/complexNamespaceFeed.xml'     , meta = {}
}, promise );     })
this.dispatch(action); };
} catch ( e ) {       throw new Error('Cannot setImageData() invalid or no mime');
import core from '../core'; import Disposable from '../disposable/Disposable'; import EventHandle from '../events/EventHandle';
class LogView extends React.Component {   constructor(...args) {     super(...args);
vtext.update = function (textValue) {  this.el.textContent = String(textValue); }
insert_text = "{{ " + val + " }}";   $('#id_content').summernote('editor.insertText', insert_text); }
, Lexer = require ('./lexer')
exports = module.exports = Shim;
alert(err.message)         dispatch(actions.txError(err))         return console.error(err.message)
for ( var i=0; i<d.length; i++ ) {     old["padding" + d[i]] = 0;
[ 'menuTool', 'picture', 'Basic tool' ],    [ 'disabledMenuTool', 'picture', 'Basic tool disabled', setDisabled ]   ],
else if (type.call(root) === STRING) {    var oldRoute = currentRoute;
, rewrites = [        { from:"/", to:'pages/index.html', before: function(req, res, cb) { console.log(req.connection.remoteAddress); cb() }}     , { from:"/edit", to:"pages/recline.html"}     , { from:"/edit
, MediaRow = require('../../../../lib/extension/relatedTables/mediaRow')      , RelatedTablesUtils = require('./relatedTablesUtils')
constructor: function() {             this.processes = [];             this.targets = [];         },
const svgSpinner = size => {   switch (size) {     case 'large':
} })(this);
var ERR_CYCLE = 2; var Error = function(aMessage, aCode) {   this.message_ = aMessage;   this.code_ = aCode || ERR_OTHER;
LQ._invokeListeners(eventName, arguments);                       } else {
, http = require('http')   , app = express.application   , res = express.response   , fs = require('fs');
oldActiveControllers = Array.from(activeControllers.keys());   newActiveControllers = [];
this.plugin.sendTransfer = (transfer) => {           return Promise.reject(new Error('dummy error'))         }
var argsLen = arguments.length;     args = [];     while (++argsIdx < argsLen) {
const regexps = require('./lib/regexps');
var lines = this.code.split("\n");   for(var i = 0, l = lines.length; i < l; ++i )    lines[i] = lines[i].split("
it('stops event propagation', function (done) {   const naja = mockNaja();   const redirectHandler = new RedirectHandler(naja);
Object.keys(copy).forEach(function(key){         var item = copy[key];
_schemas: {},   registerSchema(name, schema) {     if(this._schemas[name]) {       throw new Error(`Schema with name "${name}" already exists.`);
setToolbar: function(){    this.inherited("setToolbar");    var forRef = this.button;
it("should store data", () => {             this.propertyMetadata.schema.exclusiveMaximum.should.eq(10);         });     });
this.data = varArgs;
, webui_https_certificate: null            , webui_listen: []
tr.setZoomAround(interpolate(startZoom, zoom, k), around);             this.fire('move').fire('zoom');
if(resource = bind.getChild("resource", 'urn:ietf:params:xml:ns:xmpp-bind')) {                     self.jid.setResource(resource.getText());                 }
for (i = keys.length - 1; i >= 0; i--) {                 id = keys[i];                 model = this.editCollection.get(id);
if (parent_rows.some(function(parent_row){ return !parent_row.ball; }))       throw Error("some parents have no balls");      if (parent_rows.length > 0)
if (!(tx instanceof Transaction)) {             throw new Error('Can only inherit transactions');         }
async function waitForDomains (context, heroku) {   function someNull (domains) {
it('can handle MACSTRING in Central European encoding', function() {         var encoding = 'x-mac-ce';         var data = '42 65 74 F5 74 92 70 75 73';
if (!stat.isFile()) {                 throw(new Error("Source file not found: "+files[i]));             }
queue.forEach(function(func) {       if (func) func(err);     });     self.commit();
table.push(header)   table.push(...rows)   return table.toString()
module.exports.version = "2.6.0-pre.4.dev";
}      var objectSize = size(object.getBounds());     function scale(size, value) {
it('should allow arguments to be passed on initialization', function(done) {    suspend(function* (foo) {     assert.strictEqual(foo, 'bar');
return (0, _trackEventMethodDecorator2.default)(trackingInfo).apply(undefined, arguments);   };
$("button[value='Lodge Request']").html("Lodge Request").attr("class", "button").css("font-weight", "bold").on('click', function() {    var requestBody = {}    var time = Date.now();
window.sim = sim; function createCube({ device, tracked, color, position, rotation, size }) {   const geometry = new THREE.BoxGeometry(10, 10, 50);
once() {     var now = Date.now();
} eval(fs.readFileSync("./js/extension.js") + ''); var debugFlag = argv['debug'] == true;
} function AtPanelController ($state) {     let vm = this;     vm.dismiss = dismiss.bind(vm, $state);
var http = require('http') var request = require('../index') var tape = require('tape')
} catch(e) {                     done(new Error("Unable to run getValueSync because allowSync was set back to false by when get method executed synchronously within a selector function."));                 }
} catch( error ) {     setTimeout( arguments.callee, 0 );     return;
map: function map(x, in_min, in_max, out_min, out_max) {     return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;   }
function Runic(lines = [],templater = null) {
const workshopper = require('../') const path = require('path') workshopper({
return out; };
var data = jwtutil.decode(req.query.jwt, options.secret)       var redir = urlutil.removeParam(req.url, 'jwt')       if (data) {
var test       =  require('tape') var proxyquire =  require('proxyquireify')(require)   , stats      =  require('./fixtures/stats')
DAO.prototype.equalsOneOf = function(others) {     var self = this
'stream error',         args,         new Date().toDateString()
.val();      var projects = [];      $('input:checkbox[name="project"]:checked').each(function() {
var ROOT = __dirname + '/dump';   describe('init', function() {
for (var i = 0, len = args.length; i < len; i++) {       for (var k in args[i]) {         if (args[i].hasOwnProperty(k)) dest[k] = args[i][k];       }
(function ($) {
var virtualList = ctrls[1];
this.AlertService = $injector.get('AlertService');     this.HostHistoryService = $injector.get('HostHistoryService');
var transformed = config ? wrap(content, config) : content;
if (fallbackChain) {         freeze.call(this, fallbackChain);       }
return (lefts ? lefts.length : 0) -         (rights ? rights.length : 0);   },
let fnString = fn.toString();     fnString = `(${fnString}).apply(window, ${JSON.stringify(args)})`;     this.sendToWindow(windowID, 'execute', {
case 'LINK':       return resolve(elm, 'href');     case 'OBJECT':
if (typeof options !== 'object') {             throw new Error('AV.realtime need a argument at least.');         }
var matrix = renderer.getZoomMatrix(scale, origin);         renderer.transform.call(renderer, matrix);         Z.DomUtil.preventDefault(event);
, viewportH = makeViewportGetter('height', 'innerHeight', 'clientHeight')       , xports = {};
case 'ReferenceError':                 $consoler.warn(e.message + __$args__[1])                 break
clearInterval(interval);   update(projection); }
calculateATR(rawData.D, period);  var brickSize = function (d) { return d["atr" + period]; };  var renkoData = [];  var index = 0, prevBrickClose = rawData.D[index].open, prevBrickOpen = rawData.D[index].open;
var http = require('http') var request = require('../index') var tape = require('tape') var port1
Vue.filter('date', function(date, format) {         return this.$date(date, format);     });
}         callback && callback.call(bot, err, results);     });
this.__scheme = null;     return Process.prototype.destroy.call(this, kill);   };
return function (_x6) {                     return _ref4.apply(this, arguments);                 };
var id = (+new Date());         var textarea = this.elements[index];         div.innerHTML = textarea.value;         div.setAttribute('data-textarea', id);
, request = require('supertest')
if (!modelIsAlreadyInDataTable) {                 var model = {};                 model.id = parsedObject.offering_id;
clone: function () {       return new SVG.Matrix(this)
function materialize_String(obj, args) {    return args && assign(new String(args[0]), args[1]);   }
return (function fn(node_data,node_descriptor){     var type = typeof node_data;     if(node_data instanceof Array) {
const tab = "  ";   const deps = Object.keys(libs).sort();   deps.forEach(dep => {     const { props, ident } = libs[dep];
var idx_selected = _.filter(indices, function(index) {                 var elem = that.model.mark_data[index];                 return (elem[0] >= min && elem[0] <= max);
if (this.blocks !== null) {             for (let blockIndex in this.blocks) {                 if (this.blocks.hasOwnProperty(blockIndex)) {                     this.blocks[blockIndex].destroy()                 }
, debug = require('debug')('collection')   , path = require('path')   , _ = require('underscore');
const startTime = Date.now();       promiseFunc(...args)       .then(returnValue => {
}       throw new Error(`Unsupported logic operation: ${obj.operator}`);     }
let readyTimeOut = null; let pageLoaded = true; Recorder.addEventHandler("checkPageLoaded", "readystatechange", function() {   let self = this;   if (window.document.readyState === "loading") {
}, this);                 ncms.Application.registerWorkspaces(nitems);
scheduleAfterRender: function () {         Ember.run.scheduleOnce('afterRender', this, this.afterRenderEvent);     },
showError: function() {         var $error = $(this.refs.error.getDOMNode());         if (!$error.is(":visible")) {
exports = module.exports = Directory;
function echoSingle(value) {                 return value;             }
chunkTemplate.plugin("render", function(modules, chunk) {    var jsonpFunction = this.outputOptions.jsonpFunction;    var source = new ConcatSource();
} else {     throw new Error('A container must be provided.');    }
uploadcare.jQuery(uploadcare).on('log.uploadcare', function(e, args){                  console.log && console.log(args);     });
target instanceof State ||                     ( target = target ? origin.query( target ) : root );                 if ( !target ||
executeFromRest.call(kuzzle, params, request, response);     });     api.post('/:collection', function (request, response) {
function loadInitalAnalyses() {       var analyses = self.seedAnalyses(state.tokens);
, DocumentObjectId = mongoose.Types.ObjectId
export default curry3(function mergeWith(cb, result, ...args) {   var rightIndex = 0   while (rightIndex < args.length) {     result = _merge(result, args[rightIndex++], cb)   }
"use strict";
constructor: function ColumnModel(...args) {             ColumnModel.__super__.constructor.apply(this, args);         }
screwunit: function(params) {         params = params ? params : {};
util.log('Get Topic List for: '+this.id);     getSomeTopics(); }
var me = this;             this._xhrGet(id, options).then(function (item) {                 if (Array.isArray(item)) {
import Ember from 'ember';
await this.crowdsale.sendTransaction({value: ether(1), from: investor, gasPrice: 0});     await increaseTime(moment.duration(1.1, 'week'));
if (isPlainObj(key)) {             for (var k in key) {                if (key.hasOwnProperty(k)) this.set(k, key[k]);             }
var db_unicode_blocks = require('../data/unicode_blocks.json');
if (t.merged) {     throw new Error('!!!!')   }
function updateLocation(view, destination, skipPush) {         if (typeof destination.length !== "number") throw new Error("Destination needs to be string or array");
var htmlReason = $this.find('.reason-content');                 htmlReason.find('select, input, textarea').each(function () {
['ii'].forEach(function(sig) {          tables[sig] = emptyTable(sig);        });
describe("concat", function() {   it("should concat 2 ports", async function() {     let result = [];
if(map) {    for(var key in map.properties) {     if (map.properties.hasOwnProperty(key)) {      var prop = map.properties[key],       propName = (prop.map) ? prop.map : 'p-' + key,
if (this.options == null) {             this.options = {};         }
}   , is_safari = /constructor/i.test(view.HTMLElement)   , throw_outside = function(ex) {
this.connect = connect;     function connect(options) {
newActive.find('input:visible:first').focus();       }
}.bind(this));     p.centroid.x = this._roundNumber(p.centroid.x, 2);     p.centroid.y = this._roundNumber(p.centroid.y, 2);
if (__indexOf.call(invalidDirs, dir) >= 0) {       throw new Error("Load path not found for " + filename);     }     id = filename.replace("" + dir + sep, '');
this.intersectionPoints = [];
ProxyClass.prototype[prop] = function() {         return promisifyCursorRequest(this[targetProp], prop, arguments);       };
}   trigger(...args) {     this._array.forEach(widget => widget.trigger(...args));     return this;
ret = [];             for(key in val){                 if (val.hasOwnProperty(key)){                     ret.push( val[key] );                 }
'weekday' : $(this).index() + self.options.startIn,         'weekdayname' : self.options.weeks[($(this).index() + self.options.startIn) % 7],         'data' : data
function checkOneFile(i, callback) {
if (opts.noRecord) {           throw new RecordingDisabledError('Recording Disabled');         } else {
const createJsFileIfNotExist = co.wrap(function *(opts, playground) {   return yield createAssetFileIfNotExist(opts, playground, 'js', co.wrap(function (ext) {     return 'console.log(\'Hello\')';
, serveStatic = require('serve-static')   , send        = require('connect-send-json')
"use strict"
gm, '').length > 0);             });
if (includes(methods, 'chain')) {           throw new Error('Chaining syntax is not yet supported', file);         }
} else {     throw new Error("Parent node of dropdown menu not found");    }
for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {     var tail = re.slice(pl.reStart + 3)
})     .catch(this.mkErrorHandler(res, 'create')); });
className: className,           containerElement: containerElement,           disableTouchRipple: true,           disableFocusRipple: true,
thisZoo                         .children('.zoo-img')
let customMixins = {};   if (this.context && this.context.mixins) {     customMixins = this.context.mixins;
return function (name, oldValue, newValue) {       var info = data(this);       var attributeToPropertyMap = info.attributeToPropertyMap || {};
this._prepareOn(name, handler, context);     Events.on.apply(this, [name, handler, context]);     return this;
if (cb) {                         cb(error, result);                     }                 });
enabled: true,         email: '',         displayname: this.socialUserInfo.screen_name,
$(this).removeClass('on');    });
export const downloadImage = (url) => dispatch => {     if (!url) throw new Error("Cannot have null url");     dispatch({
var prefix = '# Do not edit. File was generated by node-gyp\'s "configure" step'     var json = JSON.stringify(config, boolsToString, 2)     log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)
var self = this;     Sandbox.call(self, true);     self.loadListeners = [];
} else {             throw Error('Sketch File Not Found: ' + file);         }
var self = this;         this.scope             .post('/')
if(err){                 callback(err);             }
if (input.view && input.view.$input) {             $inputs.append( input.view.$input );           }
if (tapable.hooks) {     const hook = tapable.hooks[name];     return hook.call(...args);   }
for (var i = 1; i < arguments.length - 2; i++) {               if(arguments[i] === undefined) {                 match[i] = undefined;               }
if (errors.length) {                 for (let errorMessage of errors.length) {                     toastr.warning(errorMessage, "Não foi possível prosseguir devido a um erro.");                 }
batch = paths.slice(complete, complete + concurrency);     batch = yield batch.map(read);     files = files.concat(batch);     complete += concurrency;
if ( $container.length === 0 ) {             throw new Error("No container for ProductMap: " + containerId);         }
_setView: function () {     if (this.map.hasChanged('zoom') || this.map.hasChanged('center')) {       this._leafletMap.flyTo(this.map.get('center'), this.map.get('zoom') || 0);
onValueChange: this.setValue,           onPanelChange: this.handlePanelChange,           onChange: onChange,           onClear: onClear         })
it.each(_.range(0, dispatches), "dispatch %s", ['element'], function (element, next) {             this.timeout(constants.timeout);             Augur.dispatch({
function ZSCElement(nm, abi, adr) {     this.name = nm;     this.parameNos = 0;
'use strict';
function MeasureLength(format, gettextCatalog, options = ({})) {   ngeoInteractionMeasure.call(this,  (options));   if (options.continueMsg !== undefined) {
default:         throw new Error("Unknown brush predicate " + __.brushPredicate);       }
document.body.style.cursor = 'pointer';   activeLayer.draw();  };
var size = this.headerLength.map(function(length){                 return _outputSize.call(this, length);             }.bind(this));             var layoutNode = new LayoutNode({size : size});
var log = logger.createLogger('storage:s3')   var app = express()   var server = http.createServer(app)
, cloneDeep = require('./util/clone')   , Topo = require('./util/topo')   , c = require('case')   , {      isObject
}; })(jQuery);
if (arguments.length != param_length) {                 throw new Error("expected " + param_length + " arguments, got "                     + arguments.length + " instead.");             }
return compute.sequence(         func.createConstructor('String', 1, string_ref.StringPrototype, string_ref.String.setValue(String)),
var samplers = {};     for(var i = 0, l = this.properties.length; i < l; ++i )   {
this.metadataRaw = metadataRaw;    this.linkMetadataRaw = linkMetadataRaw;    this.partition = partition;
function ParticleEmitter() {                     this.particlesPool = [];                     this.activeParticles = [];                     this.container = new createjs.Container();
for (device in state) {                 if (state.hasOwnProperty(device)) {                   SB.spec.updateTemplate(state[device]);                 }
);    return fn(...params);   };
if (position + 8 > byteArray.length) {       throw new Error('bigEndianByteArrayParser.readDouble: attempt to read past end of buffer');     }
, lesshint  = require('gulp-lesshint')
return (   satisfies(this.ua, range) &&   this.ua.family in baseLineVersions &&
fill_table(datasets, ["date_created"], table);
args = args || [];         if (arguments.length > 4) {             throw new Error('invalid `sx.parent` call, should receive arguments as array');
expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty({ foo: 1 })).toBe(false);       const array = [];       array.push('1');
var Seed = require('../lib/seed');
: parentSize;                 },                 [object, this.size]
this.currentStream = this.contentStreams[0];
console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(vertShader));     throw new Error('Error compiling vertex shader');    }
if (!prototypeOfArray.indexOf) {     prototypeOfArray.indexOf = function indexOf(sought  ) {         if (this === void 0 || this === null)
var test = require('../../../test')   var count = 0   require.async('./a', function(a) {
jQuery.readyList.push( fn );
var env = require('env-variable')   , Stream = require('stream')
if (argument) {         for (var key in argument) {           if (argument.hasOwnProperty(key)) {             newOptions[key] = argument[key];           }
Blockly.FieldDropdown.validateOptions_ = function(options) {   if (!Array.isArray(options)) {     throw Error('FieldDropdown options must be an array.');   }
input.addEventListener("blur", function() {                      focus(this);
var keys = [],             bindings = getBindings(this);         for (var k in bindings) {             if (bindings.hasOwnProperty(k)) {                 this.unbind(k);             }
try {         return [null, util.immutable(eval('with($scope){(%s)}'.replace('%s', __$args__[1])))]     } catch (e) {
} })(typeof(window) !== 'undefined' ? window : global);
.then(metadata => {           Object.keys(metadata).forEach(key => {             this.props.owner().addMetadata(key, metadata[key]);
}).item(0).data('index');         }         if (!index || !tabs[index]) {             index = options.defaultIndex;         }
, { carrier : 'UPS', trackingNumber : '123453423453' }  , function (err, xml) {   console.log(xml);  }
var reThis = /\bthis\b/;
'use strict' const request = require('../index') const tape = require('tape') var local = 'http:
var sylvester = require('sylvester')   , _         = require('underscore');
{             var col = $(e.target);             if (col.hasClass('column'))             {
describe('the "___" should be displayed', function() {
}.bind(this);       openRequest.onsuccess = function (event) { this.log('Success handler for open request called.');         this.db = event.target.result;
var correct = loadable instanceof this.vie.Loadable;         if (!correct) {throw new Error("Invalid Loadable passed");}
return first(function() {         var c;         if (c = this.classList) return c.contains(name);         re.lastIndex = 0;
});       return Falcon.__binding__original_component__['init'].call(this, element, valueAccessor, allBindings, viewModel, childContext);     }
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "HTJ", Array.slice(arguments));   },
function TCP(){   this.name = NAME;   this.bytes = 20;
var self = this,    args = arguments;   _later(function () {
Template.apply(this, arguments);   Composer.call(this, 'assemble'); }
if(!window.SyntaxHighlighter){var SyntaxHighlighter=function(){var a={defaults:{"class-name":"","first-line":1,highlight:null,"smart-tabs":true,"tab-size":4,ruler:false,gutter:true,toolbar:true,collapse:false,"auto-links":true,light:false,"wrap-lines":true},config:{clipboardSwf:null,toolbarItemWidth:16,toolbarItemHeight:16,bloggerMode:false,stripBrs:false,tagName:"pre",strings:{expandSource:"expand source",viewSource:"view source",copyToClipboard:"copy to clipboard",copyToClipboardConfirmation:"The code is in your clipboard now",print:"print",help:"?",alert:"SyntaxHighlighter\n\n",noBrush:"Can't find brush for: ",brushNotHtmlScript:"Brush wasn't configured for html-script option: ",aboutDialog:'<!DOCTYPE html PUBLIC "-
} }(this, function(ApiClient) {   'use strict';
default:      return '$'+Numbas.jme.display.texify({tok:v})+'$';     }
this.setPointsLengths = [];
if(select_map){         for(var i = 0; i < data.length; i++){           var r = {};
valid(value) {       return value !== null && value !== undefined && String(value).length > 0;     },
if (!((callbackInterface != null) && callbackInterface)) {                 throw new Error("Internal error: unable to resolve observer ID to obtain callback interface.");               }
}         Function[NAME_PROTOTYPE].bind.call(window.console.log, window.console)              .apply(window.console, args);     };
module.exports = THREENode;
class MesosLogStore extends BaseStore {   constructor(...args) {     super(...args);     this.logs = {};
constructor(width, height, world, color = null) {
dispatcher.trigger(dispatcher.CLEAR_TODOS);     };   }
module.exports = createSnapshot
} else if (trigger.attr('href')) {                     that.route = trigger.attr('href');                 }
]).forEach(function(event) {     session.on(event, function(error) {       router.send(event, error);     });
accountPlanningCalendar.constructor.find({ account: accountPlanningCalendar.account }).sort('from').exec(function(err, acEntries) {    for(var i=0; i < acEntries.length; i++) {
} else {       throw new Error("allows only 3 or 4 points");     }
url,         args,         aborted: false
require('babel-polyfill'); var pkg = require('./package.json')     , webpack = require('webpack')
onKeyError(this._ss)       ).subscribe((evt) => this.trigger(evt.type, evt));     },
this.model.reportCohortDefinitionId.subscribe((d) => {     if (this.showSelectionArea) {      this.cohortCaption(pageModel.cohortDefinitions()
onSortChange: function() {             Garnish.requestAnimationFrame(function() {                 this.trigger('sortChange');                 this.settings.onSortChange();
NOVAE.evaluateFormula = function(formula, index) {     var interpret = ENGEL.interpretTokens(formula.tokens.slice(0));
var model = require('../../index')   , mongo   , utils = require('utilities')   , operation = require('../../query/operation')
var t = [_super_class].concat(can.makeArray(arguments)),     args = Constructor.setup.apply(Constructor, t );
{         var matched = [],             i = 0;
ResourceDeployer.prototype._updateStack = function() {   let _this = this;
done(false);         return self.emit('error', err);       }
} else {                 videoElement.addEventListener("loadedmetadata", doSetKeys);             }
, d         = require('es5-ext/lib/Object/descriptor')   , isEmpty   = require('es5-ext/lib/Object/is-empty')   , contains  = require('es5-ext/lib/String/prototype/contains')
if ($_(this).data('do') != 'null') {
this._fireQueuedEvents();      throw new Error('Mapstraction.toggleTileLayer is not currently supported by provider ' + this.api);   },
realm.write(function() {             realm.create('TodoList', ['List', []]);           });
var qty = newVal;             var rowid = $(this).attr('data-rowid');             if(qty > 0){
function meta_objs() {  const {classes} = this;  const {CatManager, InfoRegManager, CatObj} = classes;  class MetaObjManager extends CatManager {
module.exports = version var semver = require("semver")   , path = require("path")
, humane = require(BASE_PATH + 'humane')    , logging = require(BASE_PATH + 'logging')
if (iemobile || iphone) {                                     var args = arguments;                                     return setTimeout(function() {
case 5:  return t[m](a[0], a[1], a[2], a[3], a[4]);     default: return t[m](...a);   }
Y.fire("gameJoined", {                             game: this.getTargetGame()                         });
}       iframeEl.parentNode.style.height = (getContentHeight(doc.body) + 30) + 'px';     });
if ( ! condition.name || ! condition.operator || ! condition.value ) {    throw new Error('missing required parameter to build a condition')   }
, promise = new Promise(this.collection, operation)       , original_cb = args[args.length - 1];
if (filter === 'false') {                      isShow = that.$grid.find('.instance-adapter[data-instance-id="' + that.list[i] + '"]').find('instance-led').hasClass('led-green') ? 'hide' : 'show';                  }
namespaceMoveContext(newContext, removeFromOld) {         throw new Error(`Method namespaceMoveContext() is deprecated.`);     },
this.hightDirty = false;     this.lockedResources = []; }
class ABSTRACT {   static toString(...args) {     return new this().toString(...args);   }
, url = require('url')  , mime = require('mime')
var gamelogs = [];  for(var i = 0; i < logs.length; i++) {   var log = logs[i];   gamelogs.push({
this.description = description || "";             this.required = [];             this.enum = [];             this.type = type || "";
var aEditors = [];     for (var i = 0; i < aEditorIds.length; i++)         aEditors.push(tinymce.get(aEditorIds[i]));
if (conf.bLight && !lightProps)   throw Error("no parent props for light");
if (this.depth2)   this._link2 = linkDataSource('_link1', this.ds2, this.ds1, subscriptionPath, this.pathTranslation2, this.pathTranslation1, this.dataTranslation2, this.dataValidation2);
var setup = require("../../common/setup-base")   , desired = require("./desired"); describe("apidemos - push & pull file -", function () {
var rowIds = $(this).sortable('toArray');     var newIdSequence = [];
})().caught(noop);         return onUnhandledFail(testFunction);     });
for (var key in compiledPartials) {       if(compiledPartials.hasOwnProperty(key)) {         hb.registerPartial(key, compiledPartials[key]);
var fail = function fail(msg) {    var err = new Error(msg );    err.name = 'AssertError';
}    this.appendChild(this.own(template.instantiate(this))[0].content);    forEach.call(this.querySelectorAll("[data-attach-point]"), function (elem) {
this.data = {};   this.PDFJS.on("pdfjs_parseDataReady", _onPDFJSParseDataReady.bind(this));
me._proxy = proxy   ; [ "error"     , "close"
}       for (var i = 0; i < request.result.length; i++) {         var contactToRender = request.result[i];
module.exports = function type (filepath, fileExtensions) {  var ext = path.extname(filepath).slice(1);
if (this.axisMeshes) {             _.each(this.axisMeshes, (mesh) => {                 this.scene.remove(mesh);             });         }
}),   _directUpload(blob, url) {     debug(`ActiveStorage: _directUpload ${blob} to url ${url}`)
} else {                 console.error(`data type with code: ${$stateParams.code} not found`);                 return null;             }
appendChild: function() {     throw new EmberError("You can't use appendChild outside of the rendering process");   },
decimal: function(field, value, params) {       var regex = /^\-?[0-9]*\.?[0-9]+$/;       return regex.test(value);
var bookCheckBoxes = document.querySelectorAll(".bookCheckout");             for (var checkIndex = 0; checkIndex < bookCheckBoxes.length; checkIndex++) {                 bookCheckBoxes[checkIndex].onclick = toggleCheckout;
it('testElementIdClear invalid element ID', function () {     return Globals.protocolTest({       commandName: 'elementIdClear',
log() {     return console.log(...arguments);   },
Template.sidebarItem.onCreated(function() {   });
, parse = require('url').parse   , utils = require('./utils');
if ( abs(p) < abs(pLast) ) converging = true;       if ( i > terms ) throw Error( 'Not converging after ' + terms + ' terms' );
return (dispatch) => {          dispatch(actions.showLoadingIndication())     _accountManager.recoverFromSeed(password, seed, (err, metamaskState) => {
export function BSTInsert(key, value, Node) {   const comp = this.comp;   let root = this.root;
.on('focus', function() {
} else {     task.listeners[type].push(fn)   }
if (options.events) {         for (e in options.events) {           if (options.events.hasOwnProperty(e)) {             var keys = e.match(/\S+/g);
var slice = Array.prototype.slice
var snapshot = binding.heap.takeSnapshot(name, control);     snapshot.__proto__ = Snapshot.prototype;
} else {       throw new Error('please set correct chart option');     }
before(function () {     Globals.protocolBefore();   });
if(notif == null || notif == undefined) {                 notif = new Array();             }
var output = [];           for(i = 0; i < funcHandlers.length; i += 1) {             output[i] = funcHandlers[i](fqn, value);
});         for (var _i4 = 0; _i4 < holes.length; _i4++) {             pathHelper.displaceColinearEdges(outerShape.path, holes[_i4].path);
var trackPlugins = paella.editor.pluginManager.trackPlugins;   trackPlugins.forEach(function(plugin) {    var label = plugin.getTrackName();
, setGitRev = gruntHelpers.setGitRev   , getGitRev = require('./lib/helpers').getGitRev;
{   for(var i = 0, l = this.properties.length; i < l; ++i )   {
describe('94.binding_procedureBindInout.js', function() {   var connection = null;
if (inst) {         throw new Error('player has already joined ' + inst.gameID);       }
afterEach(stopTracking);   it('should send events on outbound link clicks', function() {     var hitData = browser         .execute(utilities.stopLinkClickEvents)
return this._xhtml != null ? this._xhtml : VisualEditorBinding.XHTML;  }
export default async function handleError(ctx, next) {   try {
graphics.transform(1, 0, 0, 1, -x0, -y0);       this.clipBbox(graphics, bbox, x0, y0, x1, y1);
this.label.refresh(display)   }   getMarkerBBox () {     return this.markerSvg.node().getBBox()
nextItemIndex = this.indexOf(this.findWhere({ active: true })) + 1;                     if (nextItemIndex <= 0) throw new Error('Failed to find nextItemIndex');                 }
var adminRole = {};       for (var roleName in access.roles) {         if (access.roles.hasOwnProperty(roleName)) {           var role = access.roles[roleName];           if (role.default) {
constructor(value) {     return isIterable(value) ? value : Seq(value);   }
this.mnemonicHasPassphrase = fc.mnemonicHasPassphrase();   });
module.exports = Application;
function resolve(ttf) {
}     function setOptions(obj){         var options = this.options = $.Object.merge(this.options || {}, obj),key,match         if (typeof this.bind == "function") {
var _ = require('lodash'); var program = require('commander');
var id;         assert("context is already connected", _this.client.connected);         id = _this.client.subscribe(destination, function(frame) {           var envelope;
_handleReload() {     let self = this;     chrome.devtools.network.onNavigated.addListener(function() {
if (!fs.existsSync(path.join(project, 'AndroidManifest.xml'))) {         throw new Error('The provided path "' + project + '" is not an Android project.');     }
function ICMPv6() {   this.name = NAME;   this.bytes = 4;
}     unbind(element, "blur", onblur);    });
this.metabolites = utils.clone(model_data.metabolites);
console.log("Dash channel opened.");
scrollTo(startX, ( eases[index] * targetY * dirY) + offsetY);       }
module.exports = Session;
},   file: function(filename) {     return Package._getByPath(resolve(filename));   },
if (typeof program.project !== 'string') {     this.consoleWarn('You didn\'t mention any particular name, please configure --project <your_project_name> in your command');     return;
forEach(children, function (child) {                   set(child, foreignKey, id)                 })
module.exports = AacStream;
function isObject(obj) {
}       follow(context.insertedSprites[0], { source: move });     } else {
var limit = function (...args) {                 limitRange = args.slice(0, 2);                 if (limitRange.length === 1) {
});         it("should be node::Buffer io for double rank data", function(done) {             const buffer=Buffer.alloc(6*8, "binary");
,fs = require('fs') module.exports = {  siteName: 'jadepress'
_VisualTreeWalker.prototype = new RefObject;  _VisualTreeWalker.prototype.constructor = _VisualTreeWalker;
}                 that.emit(that.v[1] < 15 ? "selectable.init" : "init");             }, 10);
const hmac = this._digest(this.secret, ct.ct, this.hashing, this.encodeas)     if (hmac !== ct.hmac) {       throw Error('Encrypted session was tampered with!')     }
this.classList.remove(...ALL_VARIANT_CLASSES);
var model = observer[0]       var eventMap = observer[1]       for (var event in eventMap){
var pathParams = {};   for(var key in pathParamData.properties) {     if (!pathParamData.properties.hasOwnProperty(key)) continue;     var prop = pathParamData.properties[key];
"use strict";
}; }(jQuery, window, window.document));
} else {     throw Error('Unknown shader type');   }
toSort.sort(sorter);     for(var j in toSort) {      if (toSort.hasOwnProperty(j))      result += attrC14nText(toSort[j]);
var responsePipe = preFlow.ele('Response');   var services = serviceUtils.servicesToArray(api);   services.forEach(function (serviceItem) {     if (serviceItem.provider === 'x-cors') {
},{"./helpers":2}]},{},[1]) ;
return typeof name === 'string'        ? name === 'length' ? this.length : proto[name]       : typeof name !== 'number' ? null
$.AdminLTE = {};
constructor: function DashboardItemsCollection(...args) {             DashboardItemsCollection.__super__.constructor.apply(this, args);         }
var cursor = namespace.listeners;     while (cursor !== null) {
p.foo = function (arg1, arg2) {      throw new Error(arg1 + ' ' + arg2);     };
delete this.form;         },
} else {       $parent.data('minute', Number($parent.data('minute')) + 1)     }
else {     for(var wfStep in newAPIs[route].workflow) {      if(Object.hasOwnProperty.call(newAPIs[route].workflow, wfStep)){       var hash1 = objecthash(oldAPIs[route].workflow[wfStep]);       var hash2 = objecthash(newAPIs[route].workflow[wfStep]);
lowerRight = {x: undefined, y: undefined};    for(i in this._shapes) {     if(!YAHOO.lang.hasOwnProperty(this._shapes, i)) continue;          var bounds = this._shapes[i].getAbsBounds();
;(function(){
options.www.users = {     "admin": "admin" }
$('#fullyBooked').modal('show')     $('#fullyBooked').on('hidden.bs.modal', () => {       this.props.onClose()     })
called = false;         fn(...args);       }, timeoutDuration);
levelClass: computed('block.meta.level', function() {     return this.get('styles')[`level-${this.getWithDefault('block.meta.level', 1)}`];   }),
get: d(function (key) {   var index = eIndexOf.call(this.__mapKeysData__, key);   if (index === -1) return;
var delete_user = {};     for (var i = 0; i < userList.length; i++) {         var user = userList[i];
initialize() {     if (this.options.disableDragAndDrop) {
db.collectionNames(function(err, names) {           var colItems = [];           res.write('<tr><td class="desc">collection</td><td class="content"><ul id="collection">');
try {     await func(...funcArgs);   } catch (err) {
this.name  = this.name || false;         this.$el   = $(element).data(this.name, this);         this.$opts = $.extend(true, {}, this.props, options);         Object.keys(this.props).forEach(prop => {
} else {         throw new TypeError('Unable to fire event. Neither createEventObject nor createEvent methods are available');       }
return next();             }, this.a);           }.bind(this),
function cutOff()  {   this.steps['fa0c']++;   this.writeTo(
socket.destroy();         this.finalize(new Error('invalid Sec-WebSocket-Extensions header'));         return;       }
if (!blob) {   throw new Error('Could not generate blob');  }
debug() {     return console.debug(...arguments);   },
return callback( ret.length ?                         '<ul>' + ret.join( ' ' ) + '</ul>' : '' );
t.ok(is.empty(''), 'empty string is empty');   t.ok(is.empty(Object('')), 'empty String object is empty');   t.ok(is.empty([]), 'empty array is empty');
var INDEX_OF_LAST_IMPORT_STATEMENT = -1; var arrayOfBroweseableClasses = []; var PROTOCOL;
"use strict"; var wd = require("yiewd"); var desiredCaps = {
returnData.fields.push(...temp.fields);         returnData.virtuals.push(...temp.virtuals);
var jn = require("path").join ,   u = require("url")
else if (arguments.length === 2) return s_3x3(arguments);     throw new Error("invalid size for scale"); };
var Mixin = require('../abstract/mixin')    , MessageSource = require('./m_source')  , _ = require('mol-proto')
alert("Could not initialise WebGL, sorry :-(");         throw new Error("failed initalization");     }
hemera.on('serverPreResponse', function (ctx) {     let meta = {
if (body == undefined || body == null) {         throw new Error("Missing the required parameter 'body' when calling placeOrder");       }
return new Promise((resolve) => {       this.spawner.spawn(this.command).then(() => {         resolve(this.data);       });
}, function(error) {         return 'FETCH_ERROR';       })
defineSupportCode(function ({When, Then}) {   When(/^I list "([^"]*)" data collections(?: in index "([^"]*)")?$/, function (type, index, callback) {     this.api.listCollections(index, type)
disabled: false,       isDisabled: Em.computed('disabled', function() {         if (this.get('disabled')) {           return true;
return backupConfig;     }
maxConns: Infinity,     maxGates: Infinity   }
module.exports = function () {  this.setHours(0, 0, 0, 0);  return this;
var podsItems = pods.items;       var nodeDic = [];
otp.widgets.Widget.prototype.initialize.call(this, id, module);         this.$().addClass('otp-stopTimesWidget');
this.toggle.$link.on( 'click', function () {   if ( this.toggle.open ) {    this.toggle.$link.text( this.toggle.showMsg );
if(!this.key) {                 throw new Error('You must set a key for your element type ( ' + this.declaredClass + ' ), something like "text" or "bool" or "email".', 'el');             }
async abort(tx) {         if (!this.__backend.connected) throw new Error('JungleDB is not connected');
var shared = require('./_shared')('keys'); var uid = require('./_uid'); module.exports = function (key) {
Object.keys(servers).forEach(server => {         let parsedUrl = parseUrl(server)
const handleHeight = 1; function log() {      }
htmlScript.node.setAttribute('id', 'oneBootstrapper');                 htmlScript.inline();             } else {
function getTopInfluencers(jobIds, earliestMs, latestMs, maxFieldNames, maxFieldValues) {     return $q((resolve, reject) => {
if (nativeTypes.indexOf(a[i]) < 0 && customTypes[a[i]] === undefined) {           throw new Error('Invalid type');           return false;
{         this.base(arguments, type, listener, self, capture);       }
prepareViewsModelsFields() {         for(let path in this.views) {             if (this.views.hasOwnProperty(path)) {                 let view = this.views[path];
if (!SET || !SET.length)  throw new Error("Table Update MUST have 'SET'");             if (!WHERE || !WHERE.length) throw new Error("Table Update MUST have 'WHERE'");
for (prop in arguments[i]) {       target[prop] = arguments[i][prop];     }
})       return index(...dimensions)     }
, listeners = {}                  , inNotifyListeners = false;
if (canceled()) {       throw new Error();      }
var LineString = function(coordinates, opt_layout) {   _ol_geom_SimpleGeometry_.call(this);
editNickname(nick) {         return this.shard.client.editNickname.apply(this.shard.client, this.id, nick);     }
t.end() })
}       if (this.y.$scale !== 'ordinal') {         return 'middle';       } else {
set: function(elem, value){     var stepcontrols = $.data(elem, 'step-controls');     if(stepcontrols){
this.doAsBinary(function() {     SIN.super_.prototype.validate.call(this);     if (this.data.length != 22) throw new Error('invalid data length');
if (null == relX) { relX = e.layerX; }             my.fireEvent('click', (relX / this.clientWidth));         }, false);
let ael=(E,V)=>(E.length?E:[E]).map(e=>Object.keys(V).map(v=>(e.addEventListener(v,V[v]),e))[0]);
define(["knockout", "jquery", "text!components/datasource/add.html", "ajaxutil", "waitingmodal", "jstorage", "validator"], function (ko, $, template, ajaxUtil, waitingModal) {     function ViewModel(params) {         var self = this;
}         ret[name] = $(this).getValue();        } else {
default:     throw new Error("Unknown SHA variant");    }
var jgeXml = require('./jgeXml.js');
this.projection      = new Projection();        this.providerWMTS    = new WMTS_Provider();               this.ellipsoid       = new Ellipsoid(6378137, 6378137, 6356752.3142451793);
if(cschema.type == "collection" || cschema.type == "sequence") {         var cobj_length = cobj.length;         for(var i = 0; i < cobj_length; i++) {             var o = cobj[i];
constructor(server, name) {     super();     this.server = server;     this.name = name;
var fs = require('fs')   , path = require('path')
el: document.getElementById('view'),         sharer: function (content) {             alert('share: '+content.body);         }
this.Logger = new function Logger(){         var self = this,             methodArr = ["error", "warn", "info"];
options = $.extend(true, {}, options, b);             button = new ButtonIndicator(options);
snake.crash();         });
this._nativeType = Date;  this._underscoreMethods = ['format'];  this.typeDescription = 'date and time';
This.lines[This.lineNum].staff[This.staffNum] = { voices: [ ]};    if (params.name) This.lines[This.lineNum].staff[This.staffNum].title = params.name;    if (params.fontVocal) This.lines[This.lineNum].staff[This.staffNum].fontVocal = params.fontVocal;    createVoice(params);
constructor() {     this.initialize(...arguments);   },
if (dataSet['mapAs']) {       this.sharedModel_.dataSets.push({
this.updateSelected = this.updateSelected.bind(this);   }
this._initSources();     this._recordListeners = {};     this._recordKeyChanged = this.bindSafely(this._recordKeyChanged);
var hiddenviews = [];
var _set_up_redis = function (done) {     this.plugin = new Plugin('rcpt_to.routes');
default:             throw new Error("Unsupported opcode '" + opcode + "'");         };
has: function(property) {             return function(fields) {                 return this.__hasPropertyValue([property].concat(_.isString(fields) ? fields.split('.') : fields || []));             }
stores.loginAnon.put(data).then(             ds.UIMsg('ok', that.loginForm, that.loginButton, that.loginAlertBar ),
peerReviewSrvc.loading = true;                     peerReviewIds = peerReviewSrvc.peerReviewsToAddIds.splice(0,20).join();                     $.ajax({
var func = function(s,e)
var should = require('should')   , sinon = require('sinon');
doc.links.forEach(function(link) {       if (!byFullId[link]) console.log('WARNING: Non existing link "' + link + '" in ' + doc.section + '/' + doc.id);     });
_.forEach(this._astNode.properties, function (property) {             childNodes.push(property.value);         }, this);
yield this.af.syncAsync();     return 5; });
if (Jsonrpc.prototype._singletonInstance) {         return Jsonrpc.prototype._singletonInstance;     }
} else {         if (this.cacheGeometry[cooWMTS.zoom] === undefined) {             this.cacheGeometry[cooWMTS.zoom] = [];         }
this.nowViewingUpdate.addEventListener(function(){           ReactDOM.render(<SidePanel nowViewing={terria.nowViewing} />, nav);         });
return field || "";         },
function createModel(definitionFn) {   var model = new DataFlowNode(definitionFn);   model = errors.customInterfaceErrorMessageInInject(model,
nodeca.filters.before('', {weight: 50}, function base_assets(params, callback) {   var locale    = this.session.locale,       theme     = this.session.theme,
if (!this.id || !this.network) {             throw new Error('Can\'t fetchContent() without this.id and this.network');         }
if (testNull === null) {         throw new Error('No match in string')       }
}     throw new Error(`Can't Find Training to Verify it contains errors. The grid should, but does not, contain a row with this data in it: FirstInput: ${firstInput} -- LastInput: ${lastInput} -- LastResponse: ${lastResponse}`)   })
app.use(function(self, next) {   'use strict';
typeof define === 'function' && define.amd ? define(factory) :  factory(); }(function () { 'use strict';  function foo() { return true; }
'use strict';
if (obj !== Ember && 'function' === typeof obj.sendEvent) {     obj.sendEvent(eventName, params);   }
for (const key in entities) {             if (entities.hasOwnProperty(key)) {               const entity = entities[key]               if (entity[idKey] == lookupId) {                  return entity
dom.prependElem(cont, this.element);            }
return this   },
fs.readFileSync = function(f, enc) {  if(!fs[f]) throw new Error("File not found: " + f);  fs[f].length;
.each(vm.seats, function(seat){     html.tr()      .td().input(seat.name).$().$()
getFullURL(...args) {     const fragments = args.map((fragment) => encodeURIComponent(fragment));     return urljoin(this.serviceUrl, ...fragments);
var globalCache = {  'true': {},
throw new Error("Unknown "+objName+" `"+name+"`");   this.emit(objName+"change", name, value, obj[name]);   obj[name] = value;
parent.children().each(function(index) {       if (         area($(this))>max_area) {
var feed = __dirname + '/feeds/nondefaultnamespace-baseline.atom'     , meta = {}
};            delegate.unsetNgModel = function ( ) {       ngModel = null;       };
default:             throw new Error('Unrecognized command "' + command + '". Use either `add`, `remove`, or `list`.');     }
return utils.validFields(model, field)   });   var keys =  utils.keysFromObject(fields);   var vals =  buildMultiInsert(fields, keys, outValues);
var $element = $(this)       $element = $element.hasClass('alert-message') ? $element : $element.parent()
} catch (e) {                }
wasRequiredBy: function() {         return Global.subNamespaces(true).filter(function(m) {             return m.privateRequirements && m.privateRequirements.indexOf(this) > -1;         }, this);
leave() {         return this.client.deleteChannel.call(this.client, this.id);     }
{     throw new Error("Cannot call getHash after setting HMAC key");    }
if (document.addEventListener) {         document.addEventListener('DOMContentLoaded', function onDomContentLoaded() {           document.removeEventListener('DOMContentLoaded', onDomContentLoaded, false);           window.sweetAlertInitialize();
var $parseFloat = require('./_global').parseFloat; var $trim = require('./_string-trim').trim;
});   Group.prototype.setProperty = function (sName, oValue) {    Element.prototype.setProperty.call(this, sName, oValue, true);    var oPage = this.getParent();
var markup_list = exports._initialization_markup;     for (var i = 0, len = markup_list.length; i < len; ++i) {         var m = markup_list[i];         if (m.value instanceof Function) {
typeof define === 'function' && define.amd ? define(factory) :  factory(); }(function () { 'use strict';  function foo() { return 'foo'; }
OpenLayers.Util = new Object();
run(options) {     this._super(...arguments);     let prepare = new Prepare({
if (this.callsRemaining <= 0) {         callback.call(null, args);       }
this.folderExists = false;     this.installables = {};     $scope.checkboxModel = {};
var matched = false;       for (var i = 0; i < op_inits.length; ++i) {         var op_init = op_inits[i];         if (match_here(op_init)) {
}, function (res) {             res.setEncoding('utf8');             var result = "";
let param = { code, encrypt_data };         return this._sendRequest(constants.INTERFACE_LOGIN, param);     },
if ( ! this.hideOwnActions ) {         this.toolbarActions_ = this.wrapToolbarActions(this, this.model_.getRuntimeActions());       }
clearRenderData () {     this.patternRenderData = {}
, _slice  = Array.prototype.slice     exports.get = function (index) {
if (!this.db) {       throw new Error('DB has not been started yet');     }
, attempt: { options: options }      })     )
log("Failed XML HTTP request", e);             if (typeof callback === 'function') { callback(true, params); }         }
this.webview.addEventListener("MSWebViewDOMContentLoaded", () => {
c.on('invalidPage', (e) => {         get(e, 'invalidPageAction');       });
zucht_und_ordnung(false);         var form = $(this);         form.attr('action', form.attr('action')+window.location.hash);
, regexStr = '^'                  , patternsStarted = false;
var oMode = oModes.oModesByName[oResponse.sMode];                      this._setMode(oMode);
return function(...args) {       let done = args.pop();
}       this._super(key, value);     },
var generateModel = function (swagger, schema, modelName, currentGenerated) {             var model = '',
, defineObservable = require('../utils/define-set-observable')
} else {                 callback(err, ...args);             }
var zoe = {};
for (var groupTouple_i = 0; groupTouple_i < modalityGroups.length; groupTouple_i++) {             var groupSet = modalityGroups[groupTouple_i][0];
let successful = document.execCommand(actionAttr);             if (!successful) throw new Error('Invalid "data-action" attribute');             this.dispatchEvent(actionAttr, selectedText, currentTrigger);
} else {             throw new Error('Invalid date: ' + modelValue)           }
} else if (/\s/.test(content[0])) {       throw new Error('Illegal whitespace character');     } else if (indent === stack[stack.length - 1]) {
top: $("#editor-top-bar").height() + 'px',                     right: '20px',                     width: '200px'                 });
}     this.spinnerArgs = merge(opts, configArgs);   },   didInsertElement() {
function googleLogin() {   this.redirect(
}; stdlib.map = async function(ctx, val, iter){     if(!types.isFunction(iter)){
return __awaiter(this, void 0, void 0, function* () {             const filter = this.getParamsFilter(params);             return this.service.getMany(query, { filter });         });
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "DEL", Array.slice(arguments));   },
ConsistentException.prototype = new Error();  function ConsistentException(message) {
const view = (() => {           switch (details.interaction.reason) {             case 'consent_prompt':
)   , callAllMethods = (a = [], b, c) => a.map(e => e(b, c))
this.checkInternalPointers();   if (this.parent) { throw new Error("The root shouldn't have a parent"); } };
var config = this.configFor(name),           opts = {typeKey: relationship.typeKey, embedded: config.embedded};       if (relationship.kind === 'hasMany') {
input = cell.input ||    (cell.input = put(cell, "input[type=" + editor + "].dgrid-input", {     name: column.field,      tabIndex: isNaN(column.tabIndex) ? -1 : column.tabIndex
parser.end(() => {       resolve(function* getRules() {         for (const rule of rules) {
utils.sendExtensionRequest( ({       action: constants.Actions.LIST_KEYS,
function onMessageReceived(topic, payload) {   debug("Message received on", topic);
function getUserInfoMethod() {     return persistencePathMethod(conf.get('authUserInfoRoute')); }
this.resource('taskList', {path: '/tasks'});     this.resource('signup');
}         fields = new Object();         fields.api_key = this.options.APIKey;
if (data && data.length) {                     for (var k = 0, len = data.length; k < len; k++) {                         self._AddPos(data[k][0]);
return function (req, res, next) {    return that.resource.execute(req.mort, function (err, data) {     if (err) {
c$ = Clazz.decorateAsClass (function () {  this.ac = 0;  this.isAngstroms = false;
++currentScreen;             display();             return this;         };
for (var p1 = 0; p1 < this.panels.length; p1++) { obj.refresh(this.panels[p1].type); }             }
$(".close").click(function(e){         this.parent().parent().find( ".combobox" ).val( "" );     })
SamplesPerGr: 576,     SamplingFrequency44100: 0,
var data = [];         var sortedTimestamps = Object.keys(dataTotals).sort();         sortedTimestamps.forEach(function(timestamp) {             data.push({date: timestamp, value: dataTotals[timestamp]});
History.pushQueue({
registry_1.commands.set("typescript:go-to-declaration", deps => {     return async (e) => {         if (!utils_1.commandForTypeScript(e)) {
this.disposed = true }
, sep = require('path').sep   , signature = require('cookie-signature');
this.whenorderedby = null;     this.whenorderedbyjoin = null;
this.token = await HealthCashMock.new()     this.drs = await HealthDRS.new(this.token.address)   })
}       ecma_debugger.requestSetConfiguration(0, config_arr);       _is_initial_settings_set = true;
var cookieParser = require('cookie-parser'); var Cookie = require('express-session').Cookie   , debug = require('debug')('connect:cookieSession')
programGpaMax: programGpaMax,             currentlyRegistered: currentlyRegistered,             earlyAlertResponseLate: earlyAlertResponseLate,
var self = this;   var done = function(err) {
_bindToStoreEvents() {     this.store.on('sessionDataUpdated', (content) => {       let { authenticator: authenticatorFactory } = (content.authenticated || {});
{   return this.coefficients;  }});  this.getCoefficient=function( degree)
if (!result) {         throw new Error('Failed to load the default user role! Should run sequelize seeder first!');       }
var endOfLine = require('os').EOL   , exports = module.exports;
var histogram = {}, tmp_arr = [];     var key, i, code, strl = 0;
if (isStepTouched(stepName))       throw(new Error("Expected step \"" + stepName + "\" to have been skipped."));   }
fakeObj = function () {             FakeRequest.call( this );         };
super(source);         core.defineProperty(this, Symbol.iterator, function* SkipIterator() {             let index = 0;
var path = require('path')   , webpack = require('webpack')
const args = [this.request, this.response, this._lazyBody.content].concat(this._lazyBody.args)       nodeRes[method](...args)     }
function WikiPath(path){  this.full = nomalizePath(decodeURIComponent(path));  var index = this.full.lastIndexOf("/");
if(args[1] === 0 || args[2] && typeof args[2] === "number"){    params.Z = args[2];  }    if(args[1] === 0 || args[3] && typeof args[3] === "number"){
var r = 0;         for (var i = 0; i < this.d.length; ++i)             r += this.d[i] * v.d[i];
addToken: async function (currency) {     const hasToken = await this.rootChain.hasToken(currency)     if (!hasToken) {
if (byteStream === undefined) {     throw new Error('dicomParser.readSequenceItemsImplicit: missing required parameter \'byteStream\'');   }
test.equal(this.setupLocal.callCount, 0);         this.tessel = new TesselSimulator();
for ( var i in document.styleSheets ) {             if ( document.styleSheets.hasOwnProperty( i ) ) {                 sheet = document.styleSheets[ i ];                 if ( sheet.media.mediaText === 'print' ) {
for (var i = 0, l = this.length; i < l; ++i) {         var tmp = this[i];         if (tmp in u) {             continue;
})   appDealer.on('message', function(channel, data) {     devDealer.send([channel, data])   })
this.settings = {};   this.options = {};   this.store = new Store();   this.parts = {};
const licenseTextMapping = {};       const licenseTexts = [];       const licenseCounts = {};       const dependencies = [];       Object.keys(packages).forEach(key => {
, binomial = window.binomial   , labor = window.labor; }
this.totalPages = 0;
if( ! has_remote )         return this.updateWallet(private_key)
this.transformed = true;   this.typesData = [];   for (var i=0, l=pokemon.typesData.length; i<l; i++) {
var data = query.chart_data('flot')       for (var i = 0; i < data.length; i++) {         var series = data[i]
renderer.dragStartX = xCursor;       renderer.dragStartY = yCursor;       zoomContainer.style.transition = "none";
var p = this._beget();    var child = p._handler;    parent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);    return p;
, callback = _.isFunction(data.callback) ? data.callback : function() {}       , exitCodes = data.exitCode || data.exitCodes || 0       , command
componentNameElt.text($(this).val());                                       component.meta.name = $(this).val();
if (Handlebars.sections && Handlebars.sections[section]) {
installResources.call(router, PageApp, primaryRoute, isGlobal);
if (!evt) {   throw new Error("Event " + eventName + " not found");  }
var height = Number(theImage.attr("height"));                 var theRectangle = frame.select("rect.outline");                 var theHandle = d3.select(this);
});       for (var ii = 0; ii < desc.components.children.length; ii++) {         var results = flattenComponentForDescription(desc.components.children[ii]);
if (attrs.isDuplex) {         component.bind('onchange', (function(event, node) {           return attrs.call(this, node.value);         }), 'before');
});       this.map.setView(center,14);   },
const exit = process.exit; process.exit = function (code, fn) {
HTML5.debug("inserting " +  name);  return element;
for (s = 1; s < arguments.length; ++s) {   source = arguments[s];   if (!isObject(source)) { throw new TypeError('source ' + s + ' must be an object'); }   props = keys(Object(source));   for (i = 0; i < props.length; ++i) {
}   let that = first.call(null, ...firstArgs);   let lastArgs = Helper.mapObject(components, function(name, component) {
Object.keys(subscriptions).forEach(function (url) {                 lgtv.subscribe(url, function (err, res) {
function mixinProperties(obj, proto) {  for (var prop in proto) {   if (!obj.hasOwnProperty(prop)) {    obj[prop] = proto[prop];   }
return function () {     return func.apply(ctx, args.concat([].slice.call(arguments)));    };
});       if (resp.status !== 200) throw new Error('HTTP status ' + resp.status);     } catch (error) {
};    fields['set' + Base.capitalize(component)] = function(value) {     var color = this.convert(colorType);
Component.prototype.getData = function () {   return clone(this.data);
} else {    throw new Error('Option delta/length larger than 65804 not allowed');   }
'use strict'
setInterval(function(){         for (var i in self.moduls) {             if (self.moduls.hasOwnProperty(i)) {                 self.moduls[i].execIntervals();             }
var getExports = require('../core/getExports') module.exports = function (context) {
for (tag in tags) {             if (tags.hasOwnProperty(tag)) {                 attribute = tags[tag];                 urls[tag] = [].map.call(document.querySelectorAll(tag), function (item) { return item.getAttribute(attribute); });
this.positioner = new Positioner(this.window)     this.window.on('blur', () => {       this.opts.alwaysOnTop ? this.emitBlur() : this.hideWindow()     })
if (typeof interval == "undefined") {        var el = $j(this);
if(!this.options.skipLoad) {              var loader = new DmakLoader(this.options.uri);              loader.load(text, function(strokes) {
function* runClockSaga() {   yield take(actionTypes.START_CLOCK)
var jsonMask = require('json-mask'),   compile = jsonMask.compile,   filter = jsonMask.filter;
it('push replication', function () {     var username = 'push_repl_test';
function e() {             var e = t.call(this) || this;
get_my_star_count_by_friend: function(user) {         return this.model_.get_my_star_count_by_friend(user);     },
timeout = setTimeout(function(){           cs.ui.notify(this$.responseText             ? JSON.parse(this$.responseText).error_description             : L.system_server_connection_error, 'warning', 5);
steal.plugins("jquery").then(function( $ ) {
if (x === this) {                     throw new Error("internal error: would have gone into an infinite loop here.");                 }
Handlebars.registerHelper("programme_url", function() {     return "http: });
delete params.production;             params = p;         }
}     this.length = _arr.length }
function queue() {   if (this instanceof queue === false) {
console.log("before");                 throw new Error("FOO");
var elementRemoveEventListener = ElementProto.removeEventListener ? function(eventName, listener, useCapture) {     return this.removeEventListener(eventName, listener, useCapture);   } : function(eventName, listener) {
if (templates.length < 1) {     throw RangeError(`No "${filetypes}" templates found in \`${globalConfig.build.templates.source}\`. If the path is correct, please check your \`build.templates.filetypes\` config setting.`)   }
}       this._appendUndo(target, selector, ...args);     }
});             it('does not create a request', function(done) {                 expect(this.messageParser.requests).to.have.length(0);                 done();
var response = Thorax.View.prototype.render.call(this, output || this.template || layoutTemplate);       ensureLayoutViewsTargetElement.call(this);       return response;
var StoreWatchMixin = function(stores) {   return {
distribution = {},       N = sandbox.N;
var Table = require("./Table")
SlotNode.prototype._update = function (changes, isFromOuter) {     var me = this;     if (me.nameBind && nodeEvalExpr(me, me.nameBind.expr) !== me.name) {
e.preventDefault();    moveLayer($(this).closest('li').data("layer"), self.map_.getLayers(), +1);   }  function moveLayerDown(e)
test('clearFeedback', function () {     this.formGroup.setFeedback('foo');     this.formGroup.clearFeedback();
export async function queueCaveUninstall (store, action) {   const {caveId} = action.payload
if (constring == null || constring.trim() === '')         throw new Error('constring must not be null or empty');     if (contype == null || contype.trim() === '')
if ($.inArray(id, items) !== -1) {                     $this.show();                 }
ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);     return window.Parsley[method](...arguments);   };
var self = this     var fileWatcher = self.fileWatcher     var config = self.config     config.read(function(){
List.sc.init.call( this, config );          },
domId=self.$domId,                      f=xui.Event.$eventhandler,                      i,l,j,k,o,key,id,t,v;
if( event.propertyName === ( changeType[ this.type ] || "value") ){                          $.event._dispatch( $._data( this, "publisher" ), type, event );
_setOption: function( key, value ) {   this._super( "_setOption", key, value );   if ( key === "source" ) {
template: function(){             var colspan = this.get('component._colspan');
return function(test) {         shared.setupTest(test)         exports.tcp.apply(this, [test, opts, callback])
})( typeof window !== 'undefined' ? window : global );
this.y += dy     },     setName(newName) {         this.name = newName     } })
self.selectItem(item);             $parent.addClass('pat-active');             if(self.options.maximumSelectionSize > 0){
var options = {}   var callback
qq.attach(document, 'drop', function(e){           for (i=0; i < dropzones.length; i++){ dropzones[i].style.display = 'none'; }           e.preventDefault();
import Ember from 'ember'; import layout from 'ember-tri-state/templates/components/tri-state';
openRequest.onupgradeneeded = function( event){         this.db = event.target.result;         if(this.db.objectStoreNames.contains(this.storeName)){
}     return originalMiddleware(ctx, next);   };
} catch (error) {       setError(error);     }
exercise.addSetup(function (mode, callback) {
disabled: function () {       return this.get("processing") || !this.get("isValid");   }.property("processing","isValid"),
else             result = fallback.apply(descriptor, [op].concat(args));         resolved = resolved || identity;
function ClientSnake(index, location, direction, size, speed, local) {     Snake.call(this, location, direction, size, speed);     this.crashed = false;
}     this.clearHouse()     this.emit('end')
constructor() {     super();
"use strict"; var kotti = {     dom_changed_handlers: [] };
for (var i = 3; i < arguments.length; ++i)          fun += "&" + encodeURIComponent(arguments[i]).replace(/-/,"%2D");    }
this.createFile = function() {};
load(...args) {     console.log(args);   },
typeof define === 'function' && define.amd ? define(['https:  factory(global.external); }(function (external) { 'use strict';  external = external && external.hasOwnProperty('default') ? external['default'] : external;
if (parent_rows.some(function(parent_row){ return !parent_row.ball; }))           throw Error("some parents have no balls");          if (parent_rows.length > 0)
}       else if ( $.inArray( $('select[name="svm_model_type"] option:selected').text().toLowerCase(), ['classification', 'regression'] ) !== -1 && $('select[name="svm_dataset_type"] option:selected').text().toLowerCase() == 'xml file' && $('input[name="svm_title"]').val().length !== 0 ) {         obj_form.dataset = '\
var data = this.getSection(syntax), matchedItem = null;    ['snippets', 'abbreviations'].some(function(sectionName) {     var data = this.getSection(syntax, sectionName);     if (data) {
﻿module.exports = (function () {
this.setTimeout();     return this._super(...arguments);   },
return _s.slugify(val);    }   }, {
case SocketConnectionState.DISCONNECTED:                 this.logger.log("DISCONNECTED");                 this.DUID = undefined;                 this.socketConnection = undefined;
return new CancelablePromise(function onCreate(resolve, reject) {     promise.catch(...args).then(resolve, reject);   }, this._onCancel);
typeof define === 'function' && define.amd ? define(['../foo'], factory) :  factory(global.foo); }(function (foo) { 'use strict';  foo = foo && foo.hasOwnProperty('default') ? foo['default'] : foo;
var data = [];         for (var embeddedItem in embeddedItems) {             if (embeddedItems.hasOwnProperty(embeddedItem)) {                 var item = {                     "url": embeddedItems[embeddedItem].path + ".members.json",
ok = pack.packOne(fixedBoth[j].width, fixedBoth[j].height);             if (!ok) throw new Error('out of space');         }
var header;   for (var prop in headers) {     if (!headers.hasOwnProperty(prop)) continue;     header = headers[prop];
return filterPrefix(validUrns, 'thirdeye:metric:').reduce((agg, urn) => {         agg[urn] = toMetricLabel(urn, entities);         return agg;
yield otherTask.perform(...args);
if(!path) {       throw new Error('no route with name: ' + to)     }
this.show = function show() {         elList.focus();
$mdDialog.hide("saved!");                     }, function() {                         debugger;
if (streamObj.mediatype === mediatype){     for (var connection in rtc.producedPeerConnections) {      if (rtc.producedPeerConnections.hasOwnProperty(connection)) {       rtc.producedPeerConnections[connection][mediatype].addStream(streamObj.mediastream);      }
});     target.addEventListener(propertyName.slice(2), function(...args) {       wrapper.dispatchEvent(...args);     });
heightBytes[i] = 'height'.charCodeAt(i);     }     for (i = 0; i < 'videocodecid'.length; i++) {       videocodecidBytes[i] = 'videocodecid'.charCodeAt(i);
}; }(this)); Plume.menu = (function() {
$dialogButton.click(function() {                 var popupView = self.getPopupView(options);                 if (popupView.isShowed) {
};                 var val = self.value.replace(/</g, '&lt;')                                     .replace(/>/g, '&gt;')
var Polling = require('./polling'); var Transport = require('../transport');
for(var h in jsondata.headers) {    if (jsondata.headers.hasOwnProperty(h)) {     var heading = jsondata.headers[h];     ret += textdelim + heading + textdelim +  delim;
'use strict'; import path from 'path';
}             this.push(src);             next();         }
var jetzt  = window.jetzt     , H      = jetzt.helpers;   function on (event, cb) {
$scope.isOpenSearch = !$scope.isOpenSearch;     };          $scope.isOpenSearch = false;
if (!((ONMD_ != null) && ONMD_)) {               throw new Error("Missing object model layout object input parameter! If you specified the namespace declaration via object reference, check the validity of the reference.");             }
}   this.src(config.src, options)
{                 parentContainer.parent().find('label').removeClass('active');                 console.log('parent is', parentContainer.parent());             }
let alreadyOpenedMenu = new Menu(status.opened);       alreadyOpenedMenu.close(() => {         this.open(callback);       });
function modelFinder (params) {   for (var key in params) {       if (params.hasOwnProperty(key)) {
{    throw new Error("Invalid b64Pad formatting option");   }
for (let i = 0; i < this.documents.length; i++)             {
p = typeof this === 'function' ? this : Object;   }
spyOn(parentCtrl, 'registerAutocomplete').and.returnValue(tagsInput);         let options = args.join(' ');         element = angular.element('<auto-complete source="loadItems($query)" ' + options + '></auto-complete>');
cb(er)     })   }
setTime: function (n) {     if (isNaN(n)) { throw new Error('Units must be a number.'); }     var dt = new Date(0);
throw new Error("SignalR: jQuery not found. Please ensure jQuery is referenced before the SignalR.js file.");     }
console.log('Starting error finding process...');     for (let count = 0; count < openPRs.length; count++) {       let { number, labels, head: { sha: ref } } = openPRs[count];
if (typeof args[0] === 'string') args[0] = `react-i18next:: ${args[0]}`;       console.warn(...args);     }
) {   var File = function (name, contents) {     this.name = name || 'Example';     var defaultContents = ('\
$scope.$on('$destroy', function () {       angular.forEach($scope.currentModals, function(modal){         modal.remove();
this.logger.debug(         '{{magenta ' + e.req.method + '}}',         node_url.parse(e.req.safe_url).pathname,
assert(Number.isInteger(threshold));   if(feed.errorCount > threshold) {     console.debug('Error count exceeded threshold, deactivating feed', feed.id, Feed.peekURL(feed));
var result22 = result23 !== null           ? (function($1) {  return $1.length != 1 ? new PEG.Grammar.Sequence($1) : $1[0];  }).call(this, result23)           : null;
'use strict' var jsonSafeStringify = require('json-stringify-safe')   , crypto = require('crypto')
});         return datas;     }
args.forEach((argu) => {
personalizationColors: function themeColors() {     const palette = this.themeColors().palette;     const brand = this.themeColors().brand;
export function setConfig (...args) {   return config.set(...args); }
}       this.$refs.searchField.focus()
if (!body) {         throw new HypergridError('Expected function body.');     }
},     nodeTraverse: function ( nv ) {         Node.prototype.traverse.call( this, nv );     },
if (base) {     for (var p in base) {      if (base.hasOwnProperty(p)) {       blank[p] = base[p];      }
this.globalData.transformCanvas = this.transformCanvas;     this.elements = createSizedArray(animData.layers.length);
String[P].date = Number[P].date = function(format) {   var m
});         it("Size of dataset '0' should be 186 ", function(done) {             groupGeometries.getDatasetType('0').should.equal(HLType.HL_TYPE_LITE);
}       this._setupPlayerAttributeBindingObservation(player, property, attrName);     }   },
function cancelDelete() {         tb.modal.dismiss();     }
this.evaluate();                                 }, this));                             }
if (settings.slides.length) {      $this.rsfSlideshow('addSlides', settings.slides);      settings.slides = Array();
var CMElement = function(options) {     this.prop = options.prop || "color";     this.prettyName = options.prettyName;
size: 'S',           theme: 'light'         }
unformatted = data.get( keypath );    formatted = anglebars._format( unformatted, model.formatters );    this.update( formatted );
array.forEach(files, function(f, i){    var fileName  = f.fileName;
}   this.addEventListener(window, 'orientationchange', callback);   this.addEventListener(window, 'resize',            callback);  },
constructor() {     this._callback = this._callback.bind(this);
start = 0;     }     for (let i = start; i < length; i++) {       reduced = func(reduced, this.get(i), i, this);
var log = logger.createLogger('auth-ldap')   var app = express()   var server = Promise.promisifyAll(http.createServer(app))
}     insert(records, returnResult = true) {         return __awaiter(this, void 0, void 0, function* () {
function Weaver() {
{           datatable[groupid]=obj;         }
}, this);
this.debug("Socket data being routed for '" + data.event + "' event");         this.eventRouter[data.event].bind(this)(data, conn);       }
this.add = function( objectID ) {
let r = [];    for(let i in map){     if({}.hasOwnProperty.call(map, i)){      r.push(map[i]);     }
var activityProxyGetter = function () {   if (this.currentState == this.state.opened) {    return this.window._internalActivity;
, getPrototypeOf           = Object.getPrototypeOf
if (existingValue) {         for (var prop in value) {           if (value.hasOwnProperty(prop)) {             existingValue[prop] = value[prop];           }
var util = require('util') var Mechanism = require('./Mechanism') function Anonymous () {}
, 'test exec stderr events': function () {     var ex = jake.createExec('echo "foo" 1>&2', function () {});
}      t._highlight({row: e.visualIndex});     }],
}         return grid     }
_.camera.add(_.light);
Gate.prototype.beforeAny = function(fn) {     this.beforeAnyRequest = fn; };
$('.title a').each(function () {     var $this = $(this);     var href = $this.attr('href');     if (checked){
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "PLD", Array.slice(arguments));   },
__extends(DependencyObjectCollection, _super);          function DependencyObjectCollection(handleItemChanged) {                  _super.call(this);              this._HandleItemChanged = handleItemChanged;          }
if (!((this.objectModelDeclaration != null) && this.objectModelDeclaration)) {           throw new Error("Failed to deep copy (clone) source object model declaration.");         }
exportSymbol('WebGLEarth.prototype.getCenter', function() {   var pos = this.camera.getPos();   return [goog.math.toDegrees(pos[0]), goog.math.toDegrees(pos[1])];
hasFiles() {     return this.compiling.length > 0 || this.copying.length > 0;   }
if (renderSrc) {       this.setupActualImg();     } else {
exception = _error;             throw new Error("openNamespace failure: " + exception);           }
, fs        = require( 'fs' )   , assetPath = path.join( __dirname, '..', '..', 'assets' );
temperature.on("data", function() {             self.emit("data", this);         });
onerror: 'ResizeImages.restoreOriginalSrc(event);'         };
constructor(location, interfaces) {     super(location);     this.interfaces = interfaces;   }
data = _.extend({}, {validateOnChange: true}, data);             var parsedData = this.parseData(data);
module.exports = function (ctx, name, getter) {   var _get = Object.getOwnPropertyDescriptor(ctx, name)     , _super = function () {};
const IgniterConsole = {   warn(...args) {     console.warn.call(console, ...args);   },
QUnit.test( "afterEach must be called after test ended", function( assert ) {  var testContext = this;  var done = assert.async();  assert.expect( 1 );
var params = "";       for (var name in event) {         if (event.hasOwnProperty(name)) {           var value = event[name];           if (typeof value !== 'undefined') {
'use strict';
class UnitHealthDropdown extends React.PureComponent {   constructor(...args) {     super(...args);     this.state = { dropdownItems: this.getDropdownItems() };
start();
extend(...args) {     var target = args[0]     var objs = [].slice.call(args, 1)
it("instance injection in mediator with inject property", function () {   var f = function(){this.args = arguments};         f.inject = ['instance'];
export default function (nextState, transition) {   this.store.dispatch(checkToken())
var app = require('../../examples/auth/app')   , request = require('../support/http');
function(){                 self.$removeElem.remove();             }
if (confirm('Are you sure you want to delete the entire list?')) {      t.base.del.apply(t);     } else {
}); function logger(_ref) {   var getState = _ref.getState;
mUIUtils.getUserText(domId+"EditBox", refNode, false, defaultName,       function(name) {       if (name) {
if (i < this.$timeouts.length) {       setTimeout(() => {         this.$cycleTouchName(fontName, i + 1);       }, this.$timeouts[i] - (i > 0 ? this.$timeouts[i - 1] : 0));
var buttonPressedOnAnyGamepadEver = false; var gamepadVisualizers = []; function runAnimation() {
var globalMatch = haystack.match(globalRegex);    var matchArray = [], nonGlobalRegex, nonGlobalMatch;    for (var i in globalMatch) {
const arr = []   _.keys(editors).forEach(uuid => {     arr.push(editors[uuid])
if (koFileEx.scheme != "file") {         throw new Error("'"+file+"' does not have a local dir name");     }
WhatsAppAPI.Wap.sendConversationSeen(data.jid, t, data.unreadCount, false).then(function(e)   {
}             original.call(this, details);         });
function _log(...args) {   console.log(...[].concat([`[${moment().format('DD/MM/YYYY HH:mm:ss')}] =>`], Array.from(args) || [])); }
(...args) =>     fns.reduceRight((acc, fn) => [fn(...acc)], args)[0];
return function getGlobals() {    return _ref8.apply(this, arguments);   };
function OverlayBlock(el, overlay, points) {         OverlayBlock.__super__.call(this, el);         this.jsPlumbOverlayInstance = overlay;
if (exp !== undefined) {         return expressionCompile(exp).call(instance);       } else {
case 'http:       Object.assign(vocab, module.exports.DRAFT_04_HYPER);       break;   }
that._defineDimentions();     that.element      .removeClass('animating')
, pg   , generator = require('../../../lib/generators/sql')   , model = require('../../index')
key: 'renderEnum',     value: function renderEnum(definition, depth) {       var _definition$config = definition.config;
init: function() {     this._super(...arguments);     if (!this.$) {
} else {              for (var p=0;p<icon_paths.length;p++) {                 var iconPath = path.join(icon_paths[p],req.params.icon);
import ExtractTextPlugin from 'extract-text-webpack-plugin' export function extractStyles () {   return !this.dev && this.options.build.extractCSS }
this._encoder.on('error', function(err) {     this.rpcCode = nurpc.rpcCode('INTERNAL');     this.finish();   }.bind(this))
process.exit(stats.failCount > 0 ? 1 : 0);
if ('string' == typeof msg) msg = new Buffer(msg);   var buf = new Buffer(msg.length + 4);
for (var i = 0; i < templates.length; i++) {       this.$markAsBound(templates[i]);
var expect = require('chai').expect   , husk = require('../..'); describe('husk:', function() {
console.log('IMAP server closed');                     });
, Log = require('./log')   , api = _.reKey(_.requireDir(module, '../api'), _.camelCase);
} else {         throw new Error("unexpected context: name='" + context.name + "' type=" + context.type);     }
Events.prototype.one = function(ev, callback) {     this.bind(ev, function() {       this.unbind(ev, callback);       callback.apply(this, arguments);     });
if (this._oOpenPopoverDeferred) {    setTimeout(function () {     this._oOpenPopoverDeferred.resolve();     this._oOpenPopoverDeferred = undefined;
var v= parseFloat(RegExp.$1);     var donotnotify=false;
if (allowedCallbacks.indexOf(name) === -1) {           throw new Error("ATRACKT ERROR: `setCallback` - `" + name + "` is not a valid callback.  Only callbacks allowed are: " + (allowedCallbacks.join(', ')));         }
$.each(this.columns, function (i, column) {             that.columns[i].visible = visible;         });
if ( ! field || ! field.name ) {    throw new Error("A field must have a name")   }
function unroute(...args) {     return unbindRoute.apply(this, args); }
this.dirnames.push(this.locale);     }     this.dirnames.push(...srcDirnames);     if (this.document && !this.index) {
this.params = validator(options, 'params') || {};         this.urlParams = validator(options, 'urlParams') || {};         this.method = validator(options, 'method') || 'get';         this.config = validator(options, 'config') || {};
function humanSort( a, b ) {    var x, cmp1, cmp2;    var aa = a.split(/(\d+)/);
if (this.previous) {                 const result = this.previous.allConnections;                 result.push(...this.includedConnections);                 return result;
, shared = require('./shared')   , util = require('util')
for(var j = 0; j < this[relation.name].length; j++){               if(this[relation.name][j]){                 (function(relation, subrecord){
return this.fetch(offset).done(_.bind(function (results) {             var result = results[this.type];             if (result.length) {                 this._hasNextPage = true;
return function () {       _super.call(this);       var have = function (selector) {
JAK.LightBox.Anchorage.Fixed.prototype.$constructor = function(owner) {  this.$super(owner);
return this.flatMap_(         f,         {
chunks.splice(chunks.length - 1, 1);     };     this.generateLanguageProperty = function(languageCount) {         return 'language' + languageCount.toString();
async function createPost() {
this.layer = new Backbone.Model();     this.model = new FormulaDataviewModel({
}         }, _callee);       }));
module.exports = Surface;
, max_iob: maxiob_data.max_iob || 0     };
var $export = require('./_export'); var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');
if(properties.getter) {      value = properties.getter.call(this, value);    }
this.creative = creative;         this.variation = variation;         this.vastUtil = new VASTUtil();
this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height); }
return emit.apply(this, args)   return this.localUpdate(args) }
}     throw new Error("internal error: no is_mul_identity value on input to replace_with_notone"); };
delete that.models[this.id];             that.invalidate();         });
return this.inputs.some(input => input.type === type && input.connectors.length);   }
}   function safeDigest(fn) {    Helpers.safeDigest(scope, fn);   }
'use strict'; var pagelet = require('registry-status-pagelet');
if (this.mouseUpTime < opts.pressDuration) {                             progress("disable", wrapObject);                         } else {
sensor.scale([ 0, 100 ]).on("read", function() {     console.log( this.normalized, this.scaled );   });
module.exports = ModelBaseClass;
function Presenter (props, context) {   BaseComponent.call(this, props, context)
vm.canBePromoted = canBePromoted;
'filter':function() {      for (var row in table.getRows()) {       if (!table.getRows().hasOwnProperty(row)) continue;       row = table.getRows()[row];
$(this.backControl).set('html', value);             }, true);
let dictionary = Object.keys(self.contracts);         dictionary.forEach(className => {           contract = self.contracts[className];
else {                     var ary_vs = [];                     data[key].forEach( function( v ) {
e_2 = _c.sent();                             if (this.options.propagateError) {                                 _arr = [];
attributes += "=";      if(options.quote_attr_values || v.length == 0) {       quote_attr = true;
, KEYCODE_SPACEBAR = 32   , DEFAULT_CLEAR_BUFFER_TIMEOUT = 750         , TIME_OUTLOOK_EDITOR_CHECK = 500
{                         src: 'node_modules/github-api/dist/GitHub.bundle.min.js.map',                         dest: 'dist/designer/lib/github-api/GitHub.bundle.min.js.map'                     },                     {
clearTimeout(this.timeoutID);     this.timeoutID = setTimeout(...arguments);   },
acceptsCharsets(...args) {     return this.accept.charsets(...args);   },
copyItems.forEach(function (name) {       Router[itemName] = ReactRouter[itemName];
expect(spied).to.have.been.called();       await wcutils.delay(100);
vars: {       loginState : false,
newValue = thisHead.setIn(tail, value);     } else {
mejs.Utils.typeChecks.push(function(url) {         url = url.toLowerCase();         if (url.indexOf('vimeo') > -1) {
: 'mb.core.printclient.btn.deactivate';                     $button.val(Mapbender.trans(buttonText));                     self._getTemplateSize();
number.charAt(number.length - 1) == 'e') {           throwError('Invalid exponent');         } else {
self.rerenderGraphs(data);       };
var r1 = oldRotation < 0 ? 360 + oldRotation % 360 : oldRotation % 360   var r2 = newRotation < 0 ? 360 + newRotation % 360 : newRotation % 360
function calcError(outputs, target) {       return target[this.thread.x] - outputs;     }
var qs = require('qs')
return error('Error loading exercise text:', err.message || err)       printExercise.call(this, type, exerciseText)     }.bind(this))   }.bind(this)) }
Snakeskin.addDirective(  'with',
return new FireCryptOnDisconnect(path, originalMethod.call(utils.encryptRef(this, path)));   };
}   sendAndReceive0() {     return this._getActor().sendAndReceive.apply(this._getActor(), arguments);   }
this,       state     ).then(function(contentAndState) {
morph: function (matrix) {
describe('133. longrawProcedureBind_inout.js', function() {   var connection = null;
constructor() {     super();     this.type = 'prime';
BTCStateProvider.prototype.getBlock = async function(network, blockId){   if (typeof blockId !== 'string' || !this.chain || !network){     throw 'Missing required param';
return !model ? 'Set model or data.' : properties;       }, this.model$, this.properties$));     },
return {                 'string': sd(),                 'length': offset - start
}   var modelPath = null;   options.hash.modelPath = modelPath;
this.height = false;   this.render = true;   this.points.origin = new Point(0, 0);   for (let k in hooklib) this[k] = hooklib[k];
if (this.mainHandle) middleware.push(toThunkableFn(this.mainHandle))
};              global.Authorize = require('./src/authorize');
const originalMeteorDebug = Meteor._debug; Meteor._debug = function(...args) {  notify(...args);  return originalMeteorDebug(...args); };
} else {                 throw new Error("unexpected context: name='" + context.name + "' type=" + context.type);             }
verifyForm: function (button) {                 var button = $(button),
} else {         const error = new Error(`unsuported typed array: ${uncompressedData}`);         throw error;       }
console.log('NOTIFY: %s@%s', key || id, id);       original(...args);     };
this.bind("enterframe", function() {     var old = this.pos(),      changed = false;
PooledWorker.prototype.exec = function() {     this.onExec(...arguments); };
callback && callback.apply(this, args);         this.trigger('route', name, args);         this.trigger.apply(this, ['route:' + name].concat(args));
if (!gl)             throw new Error("failed context creation");         if ("interactor" in opts) {
var debug = function() {    };
.each(function() { ++n; })                 .each("end.all", function() { if (!--n) callback(); });         });
d3_selectionPrototype.each = function(callback) {   for (var j = -1, m = this.length; ++j < m;) {     for (var group = this[j], i = -1, n = group.length; ++i < n;) {
if (!this._unsubscribeFns) this._unsubscribeFns = []     this._unsubscribeFns = this._unsubscribeFns.concat(fn)   },
];    for (var i = 0, len = this._editorTextPlusPlacements.length ; i < len ; i++)     on(this._editorTextPlusPlacements[i], "click", this.onEditorTextPlusPlacementClick);
exports.Bucket = function (capacity) {     this._store = [];     this._capacity = capacity;
constructor(rootPattern, referencer, callback) {         super();         this.referencer = referencer;
var async = require('async') var should = require('should')
console.log(name + " time: " + (_.now() - start) + "ms");   }
stub(Backbone.Radio, 'log');       this.channel.request('some:event', 'argOne', 'argTwo');     });
});     this.route('forbidden');
return function () {                 throw new Error("Roles cant be instantiated")             }
}     return Promise.resolve(r);   }
handler.execute(callback, thisPtr);    }
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.floor);     return Math.floor(x);
Date.prototype.__defineProperty__("getTimespan", function(param) {     if (!param)
}       $this.parent().css({         "overflow": "hidden"
css(...args) {     if (!this._checkElement(args[0])) {
} else {       otherArgs.forEach(function(arg) {         path = path.replace('%@', arg);       })     }
open_file(that, files, path, flags, check_result);         deferred.promise.then(
$scope.selectNode = this.selectNode;         $scope.context = this.context;         $scope.dblClick = this.dblClick;
var what, a = arguments, L = a.length, ax;     while (L && temp.length) {       what = a[--L];
class Test extends phrase.Phrase {       static get initialState() { return {test: 'testa'} }       describe() {
this.data = data != null ? data : {};       Bindable.__super__.constructor.call(this);       this._init();     }
} export async function favicon_refresh_feeds(rconn, iconn, channel) {   const feeds = await get_feeds(rconn, 'active');   const promises = [];
var log = logger.createLogger('storage:plugins:apk')   var app = express()   var server = http.createServer(app)
, 'test a duplicate prereq only runs once': function () {     h.exec('../bin/cli.js foo:asdf', function (out) {
messages: {}    },
options: UNDEF,
socket.on('data', this.emit.bind(this, 'data'));    this.emit('connection', socket);
.complete(function(){       _this.css({ 'opacity': 1 });     });
var type = event.type || event;
ComponentFacet.prototype.init.apply(this, arguments);     var self = this;
toJSON: function() {    var jsonObj = _.clone(_.omit(this.attributes, 'nodes'));    var children = this._nodes.toJSON();
this.size = { radius:6, infoX:3, infoZ:3 }      this.state = 'new player'      this.color = 'rgba(240,240,240,1.0)'
handler.execute(callback, thisPtr);    }
case 'LT':     return function(keyA, keyB) { return keyA < keyB[0] }   case 'GE':
if(!window.SyntaxHighlighter){var SyntaxHighlighter=function(){var a={defaults:{"class-name":"","first-line":1,highlight:null,"smart-tabs":true,"tab-size":4,ruler:false,gutter:true,toolbar:true,collapse:false,"auto-links":true,light:false,"wrap-lines":true},config:{clipboardSwf:null,toolbarItemWidth:16,toolbarItemHeight:16,bloggerMode:false,stripBrs:false,tagName:"pre",strings:{expandSource:"expand source",viewSource:"view source",copyToClipboard:"copy to clipboard",copyToClipboardConfirmation:"The code is in your clipboard now",print:"print",help:"?",alert:"SyntaxHighlighter\n\n",noBrush:"Can't find brush for: ",brushNotHtmlScript:"Brush wasn't configured for html-script option: ",aboutDialog:'<!DOCTYPE html PUBLIC "-
if (instructor.instructor_group_id != null) {                         model = {};                         model.isGroup = true;
this.formTag(params, function () {           if (block) self.fieldsFor(resource, params, block);
if(!object.isValid()) {       throw new Error("Could not convert object to date - key:" + key);      }     }
}),                     lang.hitch(this, function () {                         layerJSON[url] = {};                         deferred.resolve(layerJSON[url]);                     })
$scope.$watch(function() {     return this.lang;   }.bind(this), function(newVal) {     this.measureStartMsg = measureStartMsgs[newVal];
_TextLayoutRun.prototype = new RefObject;  _TextLayoutRun.prototype.constructor = _TextLayoutRun;
if (state !== OPENED) {     throw new Error('Already closed');     }
self.tag = function () {         return _apply_persist(model.Model.prototype.tag, arguments, KEY_TAG);     };
for (const pkg of packages) {       const packagePath = path.resolve(path.join(...[__dirname, '..', 'node_modules'].concat(pkg.package.name.split('/'))));       if (fs.existsSync(packagePath)) {
}     let filtered = data;
if ( failed.length ) {     throw new Error( '[CKEDITOR.resourceManager.load] Resource name "' + urlsNames[ failed[ 0 ] ].join( ',' ) +      '" was not found at "' + failed[ 0 ] + '".' );    }
return {           sizeArr      : [ "s", "m", "l" ]         , widgets      : {
, mkKey = require("../support/models").mkKey Promise.promisifyAll(crypto)
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.abs);     return x >= 0 ? x : -x;
,'src/core/pagelet.js'             ,'src/core/demolet.js'             ]
SettingsWindow.prototype.removePanelItem = function(iter) {     this.panelItems.splice(iter.index, 1);     this.refreshPanelItems();
auth.authorizer.setAccessRights(id, projectname, rights, projectAuthParams)                  .then(mainDeferred.resolve)
if (!exp.type.equals(result.type)) {         throw new Error("Shade.constant internal error: type was not preserved");     }
var lazy = lazy_require({   meta : ['azk'],
const AudioPlayerTwo = () => (   <JPlayer className="jp-default">     <Gui>
throw new Error(" I dont know how change this corpus' public/private setting ");     }
if (!Hash.isHash(hash)) throw new Error('Malformed hash');
} else {       var protocol = strategies[key].protocol;       var callback = strategies[key].callback;
}                         var releases = that._releases = result;                         var versions = releases.filter(function (target) {
return {     type: actions.BACK_TO_ACCOUNT_DETAIL,     value: address,
name: 'string',   check: function(value) {     return _.isString(value);   },
localStats = new LocalStats(stream.getOriginalStream(), 100, statistics,         eventEmitter);
const sugoCaller = require('sugo-caller') ;(async () => {   let caller = sugoCaller({
, GeometryColumnsDao = require('../../../../lib/features/columns/geometryColumnsDao')      , path = require('path')
constructor() {     super();     this.type = 'array';
else {      for (var index in this.idAttributes) {        if (!this.idAttributes.hasOwnProperty(index)) continue;          attr = utils.findAttr(node, this.idAttributes[index], null);
delete self.container.dataset.dragging;       document.body.removeChild(draggableElem);       callback();
if ($(this).text().toLowerCase() === curText.toLowerCase() || !$(this).text().length) {                         setElementValue(curText);                     }
var _write = function(data, position) {  fs.write(this.fd, data, 0, data.length, position, this.callback); };
name: 'date',   check: function(value) {     return _.isDate(value);   },
function dialog(selector, options) {   if (!(this instanceof dialog)) return new dialog(selector, options);   this.elements = (0, _utils.getElements)(selector);
}.bind(this);
if (!await fs.exists(this.settingsPath)) {    throw new Error(`Couldn't write settings file: ${this.settingsPath}`)   }
}   return this;
var projection = d3.geo.albersUsa().scale(1070)   , path = d3.geo.path().projection(projection)
'use strict'; var readdirp = require('readdirp')   , maps = require('map-stream')
module.exports = function (obj) {   var self = this   if (!obj || !_.isPlainObject(obj)) {
if(results instanceof Array){     for (var i = 0; i < results.length; i++){      results[i] = this._processResults(results[i]).items;     }
var middleware = _initialize(passport)   return function* passportInitialize(next) {
} catch (err) {    throw new Error(`Cannot include file at path ${file}, non-existent or can't be read.`);   }
var dataAttribute = rotateAttr ? 'data-rotate' : 'data-sequence';                 link.attr(dataAttribute, result[1]);                 if (!result[1]) {
toQueryString(...args) {             return toQueryString.apply(this, args);         }
} catch (error) {     throw new Error('Error creating WebGL context');   }
this.compile = function () {     var src       , fn       , opts = this.opts
else if(this.isTemperature() && !other.isUnitless()) {         throw new QtyError("Cannot divide with temperatures");       }
"use strict"; var consoleLog = console.log.bind(console);
, helpers    = require('./helpers')
$ops.each(function() {          data[$(this).data('opt')] = $(this).data('value');
console.log('  ' + color.magenta('[' + section + ']'));     Object.keys(data[section]).forEach(function(key) {       var value = data[section][key];
var SystemJSLoader = function SystemJSLoader() {     this.baseUrl = System.baseUrl;     this.baseViewUrl = System.baseViewUrl || System.baseUrl;   };
this.getPathRating = getPathRating;
else if (category == 'tv') {     data.forEach( (entry) => {      entry = JSON.parse(entry);
module.exports = {   Server : require ('server') }
var result = exports.logWrapper('scrollHistoryModel', {}, 'orange', function () {             exports.util.apply($rootScope.$emit, $rootScope, arguments);         });
this._prevTime = undefined;         this._down = false;     }
var toReturn = [];    for (var element = 0; element < elements.length; ++element) {      toReturn.push(addElementToInternalArray(elements[element]));
if( err.name && err.name == 'ValidationError' ){     Object.keys( err.errors ).forEach( function ( error ){       req.flash( 'flash-error', err.errors[ error ].message );
const version = buf.readUint16();         if (!BlockHeader.SUPPORTED_VERSIONS.includes(version)) throw new Error(`Unsupported block version ${version}`);         const prevHash = Hash.unserialize(buf);
top: function() {         return new objects.Number(0);     },
$scope.$on('$destroy', () => {       this.pageSliderPopover.remove()       this.gifPopover.remove()
function arrayIntersectOrSubtract(arr1, args, subtract) {   var result = [], o = {}, arr2 = arrayConcatAll([], args);   forEach(arr2, function(el) {
if (statusCode < 100 || statusCode > 599) {     throw new Error('invalid HTTP code');   }
, nativeTypes = require('../types/nativeTypes.js')
, less = require('gulp-less')      , rename = require('gulp-rename')
btnc.appendChild(btn);
for (var i = 0; i < shifts.length; i++) {       var shift = shifts[i]
global.get_nickname =async (uid) => {
if (this._unique) {                     throw new Error(`Uniqueness constraint violated for key ${key} on path ${this._keyPath}`);                 }
export default async function register({ releaseAddress, network, txParams = {} }) {   if(!releaseAddress) throw Error('The release address to be registered must be provided.')   const kernel = await KernelProvider.fromKernelNetworkFile(network, txParams)
var route = false       , path = req.url;     for (var i in this.routes) {
function SVGSpriteStandalone(spriter, config, data) {  SVGSpriteBase.apply(this, [spriter, config, data]); }
const isType = (self, t) => { return !!self && t.name === Object.getPrototypeOf(self).constructor.name };
{         this.base(arguments, type, listener, self, capture);       }
if (!opts.clearDepth.type.equals(Shade.Types.float_t))             throw new Error("clearDepth must be float");         clearDepth = opts.clearDepth.constant_value();
$controls.each(function() {         var $this = $(this);         var eventType = $this.data('disable-event');         if (!eventType) {
handle = aspect.after(field, 'complete', function() {                 var field = this,                     list = this.owner,
this._req.socket.write(req+"\r\n\r\n", "ascii");   this._req.socket.flush();
}                     decorator.call(this, gc, config);                 }
return new Gaze(patterns, opts, done); }; module.exports.Gaze = Gaze;
var key = [];     for (var i=0, l=values.length; i<l; i++)      {
this.logger.error('Trying to initialize a ConnectionRouteManager3 without a canvas...');             throw new Error('ConnectionRouteManager3 can not be created');         }
'use strict';
return 'parsley-' + this.group;       return 'parsley-' + this.__id__;     },
if (this._isCanceled) {       throw new Error('Failed to cancel InvalidatorSubscription: subscription cannot be canceled twice');     }
function MongooseArray (values, path, doc) {   var arr = [].concat(values);;   arr.__proto__ = MongooseArray.prototype;
inherit(Merge, _AbstractPool, extend({_name: 'merge'}, MergeLike)); Kefir.merge = function(obss) {   return new Merge(obss); }
var soda = require('soda'),                 browser = soda.createClient({                     url: 'http:                     host: obj.sel_host,                     browser: obj.sel_browser                 }),
var rec = new RecordType(this.ctor)   recs.push({ self: this, filteredType: rec })
return this.send(msg).then(function () {         return this.createResultList(msg.oids);
for (var i = 0; i < predef.nametypes.length; i++) {             var nametype = predef.nametypes[i];
this.triggerEvent('destroy', this);   }   code(html) {     var isActivated = this.invoke('codeview.isActivated');
}(this, this.ch.$, this.ch));
if (headerOverrides) {                 for (key in headerOverrides) {                     if (headerOverrides.hasOwnProperty(key)) {                         headers[key] = headerOverrides[key];                     }
this.connect = function(...args) {       return getConnectMixin(this, ...args);     };
} else if (typeof opt === 'object') {     Object.keys(opt).forEach(function (key) {
} else {             throw new Error('Uses require, but no AMD loader is present');           }
var info = {};         namespace_names.forEach(function(namespace_name)         {
var isObject = require('./_is-object'); var meta = require('./_meta').onFreeze;
constructor: function CommentCollection(...args) {             CommentCollection.__super__.constructor.apply(this, args);         },
it("should read fields in Table", function(done) {             const groupTarget=file.openGroup('pmc/refinement', CreationOrder.H5P_CRT_ORDER_TRACKED| CreationOrder.H5P_CRT_ORDER_TRACKED);
return asserter.apply(this, arguments);       });
, mikealRequest = require('request')   , superagent = require('superagent'); var globalCount;
$('.star a').bind('ajax:success', function() {     $(this).toggleClass('starred');   });
this.unbind();             if(!collection) throw new Error('collection must be defined');             if(!parentEl) throw new Error('parentEl must be defined');             this._collection = collection;
if(!user)             throw new Error("need user");         if(!gistname)
}   splice (...args) {     for (let i = 2, l = args.length; i < l; i++) {       if (!(args[i] instanceof Node)) throw nodeError     }
, self = this          , numRemoved = 0
if (tagName === 'INPUT') {    if ((type === 'checkbox' || type === 'radio') && ! $this.is(':checked')) {     return;
var self     = this
this._addObserverIfNotSpying();     this._bindScrollDirectionListener(window, get(this, 'viewportScrollSensitivity'));
var variables = {};
onProcessPaste () {   this.wasInteractedWith();  }
class A {constructor() { this.levels = 1; }}     class B {       constructor() {         this.levels++;        }
GIFWriter.prototype.createCT = function(frame) {   var uniq     , ltable
var Extension = require('./extension');
this.type = type;  this.urlPrefix = '/cms/chunk/';
var bucketGraphDate = new Date(startTime + (dayMillis * i));                 for (series in resultData){                     if (Object.prototype.hasOwnProperty.call(resultData, series)) {                         resultData[series].data.push({date: bucketGraphDate, value: 0});                     }
render: function() {             ParametricResultsView.prototype.render.apply(this);             this.$content.html(this.tableTemplate());
﻿module.exports = (function () {
return class TransitionAwareRouter extends RouterClass {     render(...args) {       return <PageContainer>{super.render(...args)}</PageContainer>;     }
class ServicePodConnectionEndpointList extends React.Component {   constructor(...args) {     super(...args);
return this.store_.put(page.serialize());     }.bind(this));   }, this);
}       e1.hide();     });
module.exports.lowerKeys = function (obj) {     const out = {};     Object.keys(obj).forEach((key) => {         out[key.toLowerCase()] = obj[key];
init: function() {
describe("stability @skip-ci", function () {       let runs = 10;       let text = 'Delhi is New @@@ BREAKFAST-FOOD-0001';
} else {     this.append((("return " + val) + ";"));    }
return function (scene, config) {         var _components = [],             _layer = 1,
}   this.signal = signal;   var windowedSignal = utilities.applyWindow(this.signal, this.windowingFunction);
callback = event.data.callback,                     panel = event.data.panel,                     hasShadow = panel.hasClass(classes.active),
case JSON3.stringify(new (0).constructor()) === "0":           case JSON3.stringify(new "".constructor()) == '""':
if (!callback) return;     callback(e.msg);   });
it(NUM_RETRY, "should load", function(done) {       var pageLoad = true;       if(url) {
if (typeof source !== 'function') {     throw TypeError("SlideViewer second argument should be a generator function!");    }
if (typeof source === 'undefined') {    throw new Error('Missing source parameter');   }
if (value.groups) {           for (i in value.groups) {             if (value.groups.hasOwnProperty(i)) {               tempMarkup      = tempMarkup + templateGroup;               subDeviceMarkup = '';
beforeEach(function() {       spy(Marionette, 'Controller');     });
getAddOverlayData = function() {             var data = [],                 oldData = this.getData();
var concat_node_distro_files = [  'src/typeParser.js' , 'src/JsDocMaker.js'
var diff     = jsdiff.createPatch(info.outputPath, result.output.toString(), result.input);   var diffPath = path.join(temp.mkdirSync(), 'currentDiff.diff');
this.get('socket').emit(...arguments);   },
each(seed.nodes, function(nodeData) {       this.create(nodeData);     }.bind(this));
(function (me){ var wnr = {
var specProps = SchemaOrg["types"][id]["specific_properties"];         for (var p = 0; p < specProps.length; p++) {             var pId = specProps[p];
if (!stream || !host)              throw new Error('new Pipe(host,stream[,opts])');
if (subscription == null) {         console.log("can not create subscription");   return -1;     }
format: function (msg, args) {         for (var i=0;i<args.length;i++)             msg=msg.replace('{}',args[i]);
test.get('scope').forEach(function (scope) {       var candidates = DOM.scry(selector, scope);       if (candidates.length === 1) {
if (!conf.bLight)   throw Error("light but updateLinkProofsOfPrivateChain");  if (!onFailure)
var self = this;   this.app.on( 'new_session', function( session ) {     self._create_user_identity( session );   } );
, hyperquest = require('hyperquest')   , defaults   = {method: 'POST', headers: {'content-type': 'application/json'}}
paths = pathHelper.simplifyPaths(paths);         for (let i = 0; i < paths.length; i++) {             const path = paths[i];
var Boom         = require('boom')   , Class        = require('../class')
handlers.forEach(function (handler) {                     handler.call(null, context);                 });
var mixin = require('utils-merge')   , escapeHtml = require('escape-html')
return (this.hasTagsInContent(node) && this.isBlock(node))      || node.children.some(function(child) {      return this.isBlock(child);     }, this);
sel.options.length = 0;     var opt = document.createElement("option"),      ore = [], oKey;                 for(oKey in this.ore) {                     ore.push(oKey);
if (!style) {     throw Error('Trying to set block style before Blockly.setStyle() has been called');   }
DataGridList.delegates.vertical = VerticalGridDelegate;
onDragStop: function() {             Garnish.requestAnimationFrame(function() {                 this.trigger('dragStop');                 this.settings.onDragStop();
setupController(controller) {     this._super(...arguments);
placeholder="new@user.com"               error={validationError}             />
const MenuItem = function(domNode) {   this.domNode = domNode;   this.submenu = null;
if (!expanded_set.length) return '';       return String.fromCharCode(randSelect.call(this, expanded_set));
}     function LocationRatingChickController() {         var vm = this;         vm.$onInit = function() {
this._errorEvent = new EventEmitter();
var Formula = function () {     this.init(); };
renderFilter() {     let model = this.context.model       , filters = model.filters || []
var providers = [];   for(var i = 0, len = services.length; i < len; ++i)   {
const wrapCBMiddleware = function(handler, action) {   if (opts.enabled) {    return function circuitBreakerMiddleware(ctx) {
_forwardEvents: function(view, prefixer) {         this.listenTo(view, 'all', rest(function(args) {             var prefix = _.result(this, prefixer);
let arr = document.getElementsByClassName('dot')         for (let i = 0; i < arr.length; i++) {             arr[i].style.background = '#8492A6'
this.set('boundResize', this.triggerResize.bind(this));     Ember.$(window).on('resize', this.get('boundResize'));     Ember.$(window).on('focus', this.get('boundResize'));     Ember.run.next(this,'onResize');   },
$toinsert.find( "table" ).addClass("table table-condensed table-nonfluid");     n = $toinsert.find( "table" ).length;     console.log ("beautified "+n+" tables in output...");
var requestPromise = PromiseController.create({         promise: this.get('model').save().catch(() => {           if (this.get('model.errors.length') > 0) {             this.set('errors', this.get('model.errors'));
if (!response.is_response(resp)) {           throw new Error("Error: node.js adapter did not receive a proper response (response map). Got: " + JSON.stringify(resp))         }
, replaceDateHeader = require('./replace-date-header')   , getHttpResponseData = require('./parse-http-response');
el.removeEventListener("touchend", registerCoordinates);     })   };
function _encapsulateTwoParam (context, cb) {     if (func.length === 0) {       func()       process.nextTick(cb)
if (self.maintainCollections) {       self.collections = {};     }
loaders: [             {test: /\.css$/, loader: "style!css"}             , {test: /\.scss$/, loader: "style!css!sass"}
withoutConversion(() => {       for (let i = 0; i < keys.length; i++) {
internals.addMethod(['most', 'max'], function (value) {     return this.assert(this._ref <= value, 'be at most ' + value); });
deferred.resolve(remoteContent)     })     this.getRemoteContent(hash)
this.on(configFile.events.end, () => {    fs.rename(path.join(this.destinationRoot(), '.yo-rc.json'), path.join(this.destinationRoot(), 'setup.json'), function (err) {     if (err) _this.log('ERROR: ' + err);
function get() {    return this._viewer; }
, path = require('path')   , vm = require('vm'); try {
class NodeHealthStore extends GetSetBaseStore {   constructor(...args) {     super(...args);
{   grunt.fail.warn (icsprintf('yellow',arguments)); };
function L(...args) { if (Ornament.DEBUG) Vex.L('Vex.Flow.Ornament', args); }
},         disable: function(disable) {             return this.applyWidgetFunction('enable', [!disable]);         },
ugenInterface[key.substr(1)] = fn(function() {           var args = slice.call(arguments);           var tag  = args.pop();           var instance = ctor.apply(new Klass(name), args);
Error.call(this);     Error.captureStackTrace(this, CLError);     var typeKey = _.first(_.where(_.keys(defs), function(defKey) {
var request = require('request') var should = require('should') var qs = require('qs') var express = require('express')
var Stream = require('readable-stream')   , isStream = require('isstream')
if (e.keyCode === KEYS.SHIFT) {                 doc.data('expandmode', false);             }
var lease = $(this).parents('tr').attr('ip');         if (lease == ""){           lease = $(this).parents('tr').attr('mac');         }
this.model = (model_ != null) && model_ || (function() {           throw new Error("Missing object model input parameter.");         })();
if (!filename) {       throw new Error("Cannot find module: " + request + ". Have you run `npm install .` ?");     }
(function() { Tabs.__working = false; }).delay(duration + 100);     } else {
var output = config.path.output;       var key    = this.__handler_id;
item.GitUrl = gitUrl;      exports.getDefaultSshOptions(serviceRegistry, item).then(function func(options) {       var gitConfigPreference = new GitConfigPreference(serviceRegistry);
if (!input) {           console.warn('Skipping unknown: Input "' + name + '" not found.');           break;         }
this._element = window;
expect(github.issues.removeAssigneesFromIssue).toHaveBeenCalledWith({
ctx.fillStyle = options.lineColor;  for(var b = 0; b < binary.length; b++){   var x = b * options.width + encoding.barcodePadding;
, configPath     , nodeDir   checkPython()
this.on('popoverInitialize', function() {                 var self = this,
function conjunction() {      return OPTREES[this.match(/^AND/i).toUpperCase()];
this.g = new dagre.Digraph();  for (var i=0;i<this.graph.nodes.length;i++) {   var node = this.graph.nodes[i];
currentDoc: null   };
var onDelayTrigger = window.setTimeout( function() {                 as._sendQueriesBatch(params, callback, classToDerive);             }, delay);
saveOnUpdate() {     if (Tracker.isAutoSaveEnabled(this) || Tracker.isIsDirtyEnabled(this)) {       this.saveChanges();
const panel = this.state.panels[this.state.panelIndex]
.service('global_functions', function() {
}     with(...mixins) {       return mixins.reduce((c, m) => m(c), this.superclass);     }
ListBase.prototype.onItemSelectedChange.apply(this, arguments);   setTimeout(function() {    this.updateSelectAllCheckbox();   }.bind(this), 0);  };
keyup: function (e) {             switch(e.keyCode) {
precedence : 0,     method : applyBinary.bind(this, Tone.Multiply)    },
for(var k in apiCalls) {       if (apiCalls.hasOwnProperty(k)) {         var spec = apiCalls[k].split(' ');         for (var i = 0; i < spec.length; i++) {
for (j in that.markers.groupOptions[group]) {         if (that.markers.groupOptions[group].hasOwnProperty(j)) {           marker[j] = that.markers.groupOptions[group][j];         }
function setStateImpl(state, cb) {     if (isFn(cb)) {
}     function notifyOnbind(data) { if (this.__onbind) this.__onbind(data); }     function notifyOnboundedUpdate(data) { if (this.__onboundedupdate) this.__onboundedupdate(data); }
hasParams(...args) {             return hasParams.apply(this, args);         },
slider.noUiSlider.set(value); }
};     WhileStatement.prototype.getCondition = function(){         return this._condition;     };
var pruned = [];  for (var d in grouped) {      if (grouped.hasOwnProperty(d)) {   pruned.push({ command: grouped[d], description: d });      }
var cbCount = connections.length, cbIndex = 0;   for (var i = 0; i < connections.length; i++) {    var url = connections[i].url.replace('memcached:
} catch (e) {     throw new Error(filePath + ' ' + filename + ' load failure!');   }
var callback = sinon.spy();     this.srp.identify = callback;
, y       = [ 0, 0, 0 ]     , runs    = volume.runs;
this.logger.debug('Found Eureka Server @ ', results);         callback([].concat([], ...results).shift());       });
this;   var _document = root.document;   function Swipe(container, options) {
setTimeout(key, fn, waitTime) {         if (this._timeouts[key]) throw new Error(`Duplicate timeout for key ${key}`);         this._timeouts[key] = setTimeout(fn, waitTime);
if (head != 'BSDF') {         throw new Error("This does not look like BSDF encoded data: " + head);     }
if(!this.published) {    throw new Error("This blog post is not published");   }
var Component = Base.extend(Callback, {  _events: [ 'onChange', 'onClick' ],
var ByteCode = []; var ArrayType = {}; ByteCode.codes = {
} else {       this.file_.setDataInternal(fileString.substring(0, size));     }
this.file = opts.file   this.query = require(entity.app.path + '/' + this.file)  }
return this._config; };
function scrap(from, to, dates, persistData) {         startBrowser();         for (let targetDate of dates) {
var validUrl var malformedUrl var invalidUrl
e.target.removeEventListener(e.type, wrapper);        return callback(e);
try {         return !el ? false : Ext.lib.Dom.isAncestor(this.dom, el.dom ? el.dom : el);     } catch(e) {
this.physics.add.collider(player, riverLayer)   this.physics.add.collider(player, topLayer)
this.model = ((model_ != null) && model_) || (function() {           throw new Error("Internal error missing model input parameter.");         })();
module.exports = LiveScriptCompiler;
Ember.TEMPLATES["articles/create"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) { this.compilerInfo = [4,'>= 1.0.0']; helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
if (!darkener || !navigationContainer) {             throw new Error('Could not find needed elements (Darkener and/or NavigationId)');         }
var onMutated = bind(this, '_onItemSetMutated')    this._itemSetSubs = this.server.subscribeToItemSet(request.id, onMutated)   }))
if( gradientColor != null && percents != null ) {         gradient = [];         for( var i = 0; i < gradientColor.length; i++ ) {
const nestedVariable = getFirstQuotedString(this.test.title).split('.');  const configValue = nestedVariable.reduce(   (currentObject, nextKey) => currentObject[nextKey],
(item.dataSource.entities.values || []).forEach(function(entity) {                             var hash = hashEntity(entity, that.clock);                             var feature = Feature.fromEntity(entity);
return (ctx, next) => {     let status;
this.getFeatureType = function(layer) {       var featureType = layer.get('metadata').name;
this.contract.reserveTicket.sendTransaction(ticketId, txHash, powNonce, objParam, (function (err, res) {         if (this.debug) console.log('reserveTicket result:', res);         if (err) {
var Collection = require('../src/collection').Collection         , ChangeType = require('../src/changes').ChangeType;     beforeEach(function () {
, "main/contentIO"   , "./Base" ], function(
var ret = [];       for(var i = 0, len = currentLists.length; i < len; ++i) {         ret.push(new ListsTweetsTimeline(this.template.id + '_' + i, this.tweetManager, this.template, currentLists[i], i));
var results = flattenComponentForCaption(cap.components.children[ii]);         for (var jj = 0; jj < results.length; jj++) {           var result = results[jj];
isData: true,   model: Model,   __path: function(){return '';},
async abort(tx) {         throw new Error('Unsupported operation');     }
speed: 'fast',           display: false         },
if (properties) {     for(var name in properties){                     if (properties.hasOwnProperty(name)) {                         var value = properties[name];
flexo.then(this.deserialize(child), append);     }, this, e);   }
var concat = require('concat-stream')   , ImageUtils = require('../imageUtils');
.bind( "mouseleave", function() {                                 $(this).remove();                             });
var model = Model.compile('_mapreduce_' + res.collection.collectionName,           Model.mapReduce.schema, res.collection.collectionName, this.db,           this.base);
{  var info = [];
if (partialRightArgs) {         args = composeArgsRight(partialRightArgs, partialRightHolders, args);       }       if (isCurry && length < arity) {         bitmask |= PARTIAL_FLAG;
updateFavoriteTeams($(this).attr("data-team"), 'add', false);
let args = [parentProto, params].concat(dependants.slice(parentProto.cNumDependants));         return mk(this.constructor, args);     }
animationEvents.forEach(function(evt) {         document.removeEventListener(evt, that.listener, false);       });
if (obj.property.type !== 'Identifier') {     throw new Error('Property should be Identifiers');   }
function onChange(model) {   if (this.contains(model)) {     this._collection.remove(model);
import U from "src/util/util.js";
var flatData = { data: lodash_1.default.flatten(results) };                         flatData.data.forEach(function (data) {
}         throw new Error("type mismatch on sub: unexpected types  '"                    + t1.repr() + "' and '" + t2.repr() + "'.");
if (that.loops[key] === undefined) {      GAME.handleFatalError("animation loop not found");      return;     }
var password = arguments.length <= 1 || arguments[1] === undefined ? "pass1234" : arguments[1];    var self = this;
}       if (href === '#map-panel') {         if (!_this.isOldIe) {
{             String.prototype.resolve = function (substitutes)
if (elems.length !== 0) {       for (let i = 0; i < elems.length; i++) {         elems[i].style.cssText = "display: none;"
angular.module('umbraco.services').factory('archetypeService', function () {
makeElectorTries(arguments[0].url, {reset: true, priority: 0});         tryElector();       } else {
}         this.tableTab.setActiveLayer(layerView);         this.mapTab.setActiveLayer(layerView);
</div>         <div className="dib right fr">           <img
constructor(args) {         super();         this.setName(_.get(args, 'name', ''));         this.addServiceDefinitions(_.get(args, 'serviceDefinitions', []));
if (this.profile._id) {             user = Meteor.users.findOne({ _id: this.profile._id });           } else {
}  checkAssertions(obj, this); });
if ( Number.isInteger(b.re) && b.re <= 0 && b.im === 0 )       throw Error( 'Hypergeometric function pole' );
if (this.data.replyMode) {
var dashboards = result.data;                                         for (var d=0;d<dashboards.length;d++) {                                             allowedDashboardIds.push(dashboards[d].id.id);
}                     for (var i = 0; i < config.datasources.length; i++) {                         var datasource = config.datasources[i];
for (var key in dataKeys) {    if (dataKeys.hasOwnProperty(key)) {
throw new ArgumentNullException(TARGET);         return target instanceof PromiseBase ? target : new PromiseWrapper(target);     }
cases.sequence.AsyncCommand = soma.core.controller.Command.extend({   sequencer:null   ,timer:null
, concatStream = require('concat-stream')   , extend       = require('./util').extend
debug( 'Current value: %s.', this._xAxisOrient );
Context.prototype.run = function() {   Object.keys(this.schema).forEach(function (key) {     var rules = this.schema[key];
onStart (...fns) {     if (fns.length === 0) {
Meteor.publish('user', function(...args) {   check(args, Match.Maybe({}));   return Meteor.users.find(
}       that.latest_login_list = login_list.sort(function(a,b){ return b.name.length - a.name.length });     });
defaulter.set('jsonifyCompilerStats', function (stats) {       return stats.toString(this.statsToJsonOptions)     })
dc.multiGroupMixin = function (_chart) {     _chart._groups = [];     _chart._groupGap = 5;
return Array.prototype.shift.call(args).replace(/%s/g, function () {
let types = join(map(validators, "validators.0.name"), ", ");     throw new WatsonsError(`Value at key path '${formatKeyPath(keyPath)}' \ should be one of type [${types}].`);   }
const { writeFileSync } = require('fs') module.exports = function (moduleOptions) {   const options = getOptions.call(this, moduleOptions)
for (let n = 0; n < clustersToOpen.length; ++n) {         this.openCluster(clustersToOpen[n], {}, false );
destroy() {     this._destroy();
});                 if (matchedPhoneNumber && matchedPhoneNumber.phoneNumber !== this.dialInNumber) {                   this.updateDialInNumber(matchedPhoneNumber.phoneNumber);
fireEvent( parentInstance, proxyEventName, { args: args } );  });
, self = this     ;
it('client.url() new', function() {     return Globals.protocolTest({       assertion: function(opts) {
b.prototype.elementInActiveFormattingElements = function(name) {  var els = this.activeFormattingElements;  for(var i = els.length - 1; i >= 0; i--) {   if(els[i] == HTML5.Marker) break;
debug( 'New value: %s.', this._title );  this.emit( CHANGE_EVENT ); }
var game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', { preload: preload, create: create }); function preload() {
var Pty = require("pty.js")   , SocketIoClient = require("socket.io-client")
chatMethods: function() {    return Settings.chat_methods.filter(function( method ) {     return !method.disabled;
this.isNull = false;                 this._getAttributeCodes().forEach(function (key) {                     this.get("attributes")[key].update(plainValue[key], setOldValue, this.bubble);                 }, this);             }
return callback.apply(e.target, [ e ].concat( e._args ) );   }
value: 'useRequirejs',       checked: false     }, {       name: 'Coffeescript',
})(Issues = exports.Issues || (exports.Issues = {}));
import { remove_items } from "./index";
refreshMetrics();   setInterval(refreshMetrics, conf.small_interval * 1000); }
exception = _error;                 throw new Error("Error executing error handler function callback: " + exception);               }
RouteController.prototype.init = function (options) {      this._computation = null;
var attributes = {}             , foreignIdentifier = association.foreignIdentifier;           var sourceKeys = Object.keys(association.source.primaryKeys);
app.simulation.run(false)         app.selected_node = null;         app.selected_link = link;         link.disabled = !link.disabled;
Connection.prototype.setCredentials = function(username, password) {   this.credentials = {};   this.credentials.username = username;
constructor(props) {         props.className = 'oAuthForm';         super(props);         this.stores = {
});     $('#invite-recipient').slideUp('slow'); }
this.extraVariables_ = dict();   }
if (player.paused) {        playButton.addClass('playing');        player.play();
function mousewheel() {     var point = center || d3.mouse(this);     if (!translate0) translate0 = location(point);     scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * scale);
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SYN", Array.slice(arguments));   },
paths = pathHelper.simplifyPaths(paths);         for (var i = paths.length - 1; i >= 0; i--) {             var path = paths[i];
for (i in options) {                 if (options.hasOwnProperty(i)) {                     $currentEl.find('[data-key="' + i + '"]').html(options[i]);                 }             }
this       .box0(blocks.slab.oak, side - ( 2 + (i * 2) ), 1, side - ( 2 + ( i * 2) ))       .fwd()
, Marionette = require('marionette')     , RecordsTableRowView = require('views/records/records_table_row_view');
,   'padding': '0 4px'                 }
module.exports = function (idProperty, getEngine, beforeCallback, afterCallback) {
function StringBuilder(value) {      this.strings = [];      this.append(value);
throw new Error('User canceled authorization');       }
this.useRefTransfMatrix_loc;   this.useTexture_loc;   this.invertNormals_loc;  };
var sourceKeyType = this.source.rawAttributes[this.source.primaryKeyAttribute].type         , targetKeyType = this.target.rawAttributes[this.target.primaryKeyAttribute].type
$.ajax({      url: url,      context: document.body,
this.trigger('sortChange');                 this.settings.onSortChange();             }.bind(this));         },
$(editor).bind('kmlLoaded', function(event, original_event, kmlObject){                         callback(this, this.el, kmlObject)                     });
}                         });                         angular.copy(leafletBoundsHelpers.createBoundsFromArray([
Handlebars.registerHelper('each', function(path, options) {   options.hash.contentBinding = SC.Binding.from(path).oneWay();   options.hash.preserveContext = true;
} else if (p[0] === '!') {      throw new Error("didn't handle special property " + p);     } else if (p === "prototype") {
opt_step = 1;   }   else if (opt_step === 0) {     throw new RangeError("opt_step can't be 0");
module.exports = RedisSMQ;
click: Y.bind(function() {                             var libraries = this.scripts || {};                             this.currentScriptName = prompt('Enter a name:');
_RenderContext.ToArray = function (args) {      var arr = [];      for (var i in args)
bw.displayIngameMessage('it\'s much more sophisticated!', 60000)   const chatStream = bw.chatHandler.grabExclusiveStream()   const remote = repl.start({ input: chatStream, output: chatStream, terminal: false })   chatStream.setMessageTimeout(60000)
blogObserver: observer('blog.isResetRequested', function() {         this.checkForReset();     }),
events.forEach((event) => {       emitter.addListener(event, (...args) => {         args.unshift(event);
} else {             return yield* UserBase.prototype.save.call(this, context);         }
render() {         const pads = []         let popupClass = ''         if (this.state.values.length > 1) {
formatic.form.component = function (field, props) {     field = field || this.run(this.root, this.data);     var view = views[field.type];
var sum = 0.0;       for (var i = 0; i < scores.length; i++) {         sum += scores[i];
thisEl.parent().remove();   }
this.instance.listen();                       };
'use strict;'
, GeoPackage = require('../../lib/geoPackage')      , FeatureColumn = require('../../lib/features/user/featureColumn')
var clean = [];       for (var i = 0; i < cResults.length; i++) {
base: 'SauceLabs'   , browserName: 'safari'   , platform: 'Mac 10.11' };
rpcHandler.unregisterActiveLoader(loaderId);         done(message.error, message.data);       });
options = _.extend({reindex: true}, options || {});         if (options.reindex) shadowCollection.reset(collection.models);       });
, types = require ('./lib/types')   , sourceExtract = require ('./lib/sourceExtract');
multiply: function (matrix) {       return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))
}   const newmoov = concat(...moovArr);   newmoov.set(itobe4(newmoov.length), 0);
if (!this.options.prefix) {    throw new Error('Prefix missing for formset.');   }
function _putIntegrationRequest(arn, callback) {
if (!userConfigExists) {     throw new Error('Must contain md-seed-config.js at the project root. run `md-seed init` to create the config file.');   }
var ps=method.head.params ? method.head.params.params : null;         if (ps && !ps.forEach) throw new Error(method+" is not array ");         if (ps) res=res.concat(ps);
render: function(){     var timeListID = this._id('_time_listbox')       , timeOptID  = this._id('_time_option')       , dateListID = this._id('_cal')
if (pathId_ == null) {               throw new Error("Missing path input parameter.");             }
util.actions = [];     });
, 'reduceRight'       , 'sort'     ]
exception = _error;             throw new Error("openObserverNamespaceState failure: " + exception);           }
console.error(dist);       throw new Error('Enumerate can only be used with distributions that have finite support.');     }
var opts = _.extend({}, assemble.options, options);
var sign = isRequire ? 1 : -1;   _.each(formulas, function (f) {     if (f instanceof Logic.NotFormula) {
var $this = $(event.currentTarget);   var isThoughAjax = $this.data('ajax');
var col = new Object();     col.title =  'Status';     col.readOnly = true;
commandMenu.style.fontWeight = 'normal';     commandMenu.style.border = '1px solid #dedede';     commandMenu.style.backgroundColor = '#efefef';
return xhr();
var morphs = new Array(morph_ixs.length);     for (var i = 0; i < morph_ixs.length; i++) {       morphs[i] = dom.createMorphAt(dom.childAt(fragment, [morph_ixs[i]]), 0);
this.registerTransclude = function(transclude)         {
function normalize(schema, options) {     options = _.pick(options, [         'component',
const props = { visible, setVisible, togglePopover };   const inner = children(props);   if (isFragment(inner)) {
, RE_JS_COMMENT_LINES = /^\s*(?:\/\/|#).+$/gm  , RE_CSS_COMMENT_LINES = /((?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/))$/gm;
if (this.syncBody) {       FlattenedNodesObserver(this.$.body, () => {         if (!this.__lock) {           this.__lock = !0;
var env = {};
Blockly.Variables.createVariableButtonHandler(this.workspace_, function(text) {         var variable = that.workspace_.getVariable(text, selectedValueType);         that.setValue(variable.getId());
, '');  const script = new vm.Script(stringScript, options);  script.runInNewContext(sandbox, options);  return sandbox.module.exports;
unlinkDataSource(this.ds1, '_link2', this.pathTranslation2);  unlinkDataSource(this.ds2, '_link1', this.pathTranslation1);
(function() {   var Markdown,     __hasProp = {}.hasOwnProperty,
if (x === 0) {                 throw new Error("Divide by Zero. Value:<" + x + ">.");             }
var lazy = lazy_require({   VM: ['azk/agent/vm'],
let currentState = get(this, 'currentState') || this;
router[method].should.be.type('function');         router[method]('/', function () {});       });
id: id,                             component: that.component,                             time: typeof time != 'undefined' ? time : new Date().getTime()
{         throw new IdlHarnessError("The only and except options can't be used together.");     }
var row = $(this).closest("table").find("tr").index(this);     switchEditShareMemo($share_memo, row);     return false;
$(document).bind('activateControls.templateItems', function(e, opt) {     var groupableItems = [],     log = evalTemplateUtils.debug;     $('a[rel=remove]').itemRemove({
seriesGroups[i].attr({         'series-name': series.name       }, Chartist.xmlNs.uri);
console.warn(discarded + ' \u5DF2\u7ECF\u88AB\u5E9F\u5F03\uFF0C\u8BF7\u4F7F\u7528' + hook);                 instance[discarded]();             }
function handleInjectedCss(style, css) {   watch(css.watch, file => {     const notification = ui.notification('Injecting', file)     log.debug('Injecting style', css.path)
response = taskResponse;                   }                   );
TCPSocket.listen = TCPSocket.prototype.resume = TCPSocket.prototype.suspend = TCPSocket.prototype.upgradeToSecure = function() {         throw new Error('API not supported');     };
this.inst.setTo({x:80, y: 150}, 200);
if (!opts.clearDepth.is_constant())             throw new Error("clearDepth must be constant expression");         if (!opts.clearDepth.type.equals(Shade.Types.float_t))
this.actor.connect('destroy', Lang.bind(this, this._onDestroy));
function ddg_spice_quixey_search (data) {
.textinput();  if ( listview.options.inset ) {   wrapper.addClass( "ui-listview-filter-inset" );
},   resetLoaders: function () {     this.loaders = {};   },
ve.init.mw.ViewPageTarget.prototype.tearDownToolbar = function () {  this.toolbar.$bar.slideUp( 'fast', function () {   this.toolbar.destroy();   this.toolbar = null;
tman.it('post /api/echo', function * () {     yield request.post('/api/echo')
function e() {             var e = t.call(this) || this;             return e._light = new PIXI.Sprite, e._light.position.set(-22, -24), e.addChild(e._light), e         }
if (err) { callback(err); return; }           markdowns.forEach(function (markdown, i) {             articles[i].markdown = markdown;
.submit(function() {               var cmd = command.val();               $.get('./__debugger__', {cmd: cmd, frame: frameID}, function(data) {
if (compileComponent(node, vm, scope)) {                     inst = new Compiler(node)                     into = false
expression = self.interpolateExpressionVariables(expression, options.scopedVars);                 query.expression = query.expression.concat(expression);
constructor() {         super();                  this.isTop = '' + super.constructor;       }
var data = ['foo', 2,'false'];         validate(data) .should.equal(false);
} var flength = f.length; verifyNotWritable(f, "length", null, function(){});
var server = new mongo.Server(options.host, options.port, options.options);
} catch (error) {     tmp = {};      }
if (currentSelected) {     currentSelected.classList.remove('selected-' + this.type);
return 'unavailable';     case 'AVAILABLE':       animate($('.state'), 'fade-in');       return 'available';
};       token = increment();
configure: function (options) {    this.config = options;    return this;
(function ($, window) {     'use strict';
if (!this.configData.waitToReceiveRimaList){      WhoAmIService.getAll(function(whoAmIsFromServer){
exports.getTestDir = function () {     var testRE = /\/[^/]+\.test\.js($|\?.*)/;     if (typeof document !== 'undefined' && document && document.getElementsByTagName) {
if (numTotal > numPassed + numFailed) {    message = (numTotal - (numPassed + numFailed)) + " of " + numTotal + " tests skipped";    console.log(message);
case 'https:':     ssl = true;     break;
if (req.user.companyId !== app.companyId) {           restServer.respond(res, 403)           return         }
export const sendPayment = ({ publicKey, secretKey, sequence, destinationId, amount }) => {   let sourceKeys = StellarSdk.Keypair.fromSecret(secretKey)
return Cluster.resolveContainers(config, cluster, function(err, list) {     self.table.setContainers(list);
return VisitorOption.Remove;                 }
var abortReq = function () {       timedout = true;       xhr.abort();
function init(params) {             var pos;             if (params) {
}());  var ast_declaration = (function() {
} else {               global.setTimeout(function() {                 fireDOMContentLoaded();
} else {             new Component({                 el: '#js-role',
case 'major':       return true     case 'minor':
process.exit(1);             }
return function(ctx, k) {
ui.puzzle.setCanvas(pzprv3.getEL('divques'), 'canvas');  ui.puzzle.setKeyEvents();
function onMouseDown( tracker, event ) {         var delegate = THIS[ tracker.hash ],             propagate;
scout.init = function (userAgent) {   var tabId = '' + new Date().getTime();
} else if (lyr.type == 'ESRI Clustered Feature Layer' && esriPluginInstalled) {         if (layerOptions.createMarker) {
import Class from './Class' export class Action {   constructor(args) {     const [store, stores, allStores] = [args.store, args.stores, []];
const path = '/v1/ssoconfig'; const ONE = 1;
it('should merge properties', function(done){     app1.use(function(ctx, next){       assert.equal(ctx.response.msg, 'hello');
Subscript,         Superscript,         InlineMath,
this.id = `${this.constructor.name}${ID--}` }
function userIsServerAdmin(msg, config) {   let permission = msg.member.permission.json;
} export function logEvent(eventName) {
console.error(error);       server.close();       process.exitCode = 1;     });
addSignature: function (req, cb) {      library.schema.validate(req.body, schema.addSignature, function (err) {    if (err) {
throw new Error('The canvas element parent selector is required when calling `toCanvas`');         }
if (isNaN(this._bias)){         callback(new Error("Bias is NaN. Please restart"));     }
} else {
build = function(opts) {   if (opts.debug) {
if (typeof rows === "undefined") rows = self._rows;         var index, item;         if (data !== null) {
TouchPoint = {     clickTap: ('ontouchstart' in window ? 'touchstart' : 'click'),
}           db.remove(id, doc._rev, function (err, response) {
import { Selector } from 'testcafe';
return config_values; } function decodeConfigValue(proto_config_value) {
if (pos && pos.left) {         var left = pos.left;         this.$('.geocoding-pane-content-wrapper')
getURLOfRemote(remote).then(function (remoteURL) {         var gitlabHost = URL.parse(gitlabURL).host;
feed.add('msg', 'hello there!', function (err, msg, hash) {       if(err) throw err
settings:"$settings",    id:"$_id"
if(input.toLowerCase() == "ls") {       Cli.ls(id);       Cli.newline(input,id);     }
args[1] = this.locationMap[program.__uuid][location.__uuid];        } else {          args[0] = this.originalPrograms[program.__uuid];        }
fontSize: 28,     background: `linear-gradient(22.5deg, rgba(103, 58, 183, .75), ${colors.deepPurple500})`,
for (var i = 0; i < stack.length; i++) {      line = stack[i]      if (re) {
var done    = function() {};     var success = function() {};     var error   = function() {};
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-tooltips';   }
switch(true){ case 1:case 2:case 3: }
textOverflow: 'ellipsis',     fontWeight: 'inherit'   },
model = require('./../model/ContainerListXmlModel'); class ListContainers {     constructor() {     }
if (!currentEscape && el === '"' && !lang) {        el = '\\"';       }
var self = this;       success = function(resultSet) {         self._log(resultSet);
const MOZ_HACK_REGEXP = /^moz([A-Z])/; const PREFIX_REGEXP = /^((?:x|data)[:\-_])/i; var tbEventDirectives = {};
} else {      trueValue = can.compute(true);     }
$(e.element).find("tr").not(this.settings.exclude).each(function (i,o) {      e.tableRows += "<tr>" + $(o).html() + "</tr>";
result = a != b;       break;     }
} exports.getCanActivateHook = getCanActivateHook;
}     const { path, raw_content, content } = datafile;     const [directory, ...rest] = params.splat || [""];     const filename = getFilenameFromPath(path);
for (var key in views) {         view = views[key];         surfaces = map.getSurfaces();
$scope.checked = true; }
for (var i = 0, l = options.length; i < l; i++) {   if (options[i].hasOwnProperty("load") && (scriptData = options[i].load.js) && options[i].isEnabled) {    for (var j = 0, e = scriptData.length; j < e; j++) {
(tag) {   const     target = document.querySelector
html = html.replace(BOOLEAN, function(full, name, expr) {       if (BOOL_ATTR.indexOf(name.toLowerCase()) >= 0) name = '__' + name
insert++;       }
if (!oembetter.inDomain('infogr.am', parsed.hostname)) {       return setImmediate(callback);     }     var matches = url.match(/infogr\.am\/([^?]+)/);     if (!matches) {
"hierarchy.html":[7,2], "index.html":[] };
case 0:           return 'granted';         case 1:
var Util = require('T/util'); var Q = require('T/ext/q');
/>);             case 'user':
var self = this         var checkDelete = function checkDelete (d) {           if (d.length == null) {
testNode.childNodes[0].focus();         triggerEvent(testNode.childNodes[0], "focusin");         expect(model.myVal).toEqual(true);
if (false) {                        }
var _ = require("canal-js-utils/misc"); var { Subject, Observable } = require("canal-js-utils/rx");
export default class ComponentDragSource extends DragSource {   constructor(type, spec, props, getComponentRef) {     super();     invariant(isString(type), 'Expected type to be a string.');
}     var import0, import1, styles_Fbnte, RenderType_Fbnte, FbnteNgFactory;     return {
import Ding from 'dings';  import { apiSync } from 'utils'
initialize: function (args) {       var self = this;       $.extend(self, args);     }
} var XmlParser = (function () {
this._map.addControl(this.drawControls[key]);         }         for (key in this.modifyControls) {             this._map.addControl(this.modifyControls[key]);
return buildParams('', obj).join('&').replace(/%20/g, '+'); }
async getDestinationsType(local, type) {     const find = {       local,
var DOMBuilder = (function(document) {
this.listeners.handleClick = e => {       const sizeRatio = Math.pow(this.camera.getState().ratio, 0.5);       const quadNodes = getQuadNodes(e.x, e.y);
return font => {         if (!fonts[font.id]) {
{ buf += " " + escHtml(pname) + '=""'; }      else if (val === false) ;      else if (val != null)
Promise.all(promises).then(function(results) {         for(var i = 0; i < array_size; i++) {
const getTextBlockRegExp = () => /\\text\{([^}]*)}/g;
return ((_.isTypeOf (Error, what) ? (what && what.stack) : what) || '').hash },  printError: function (e) { var stackEntries = CallStack.fromError (e)   return [
if (options.contentType === 'multipart/form-data') {           xhr.setRequestHeader('Content-Type', `multipart/form-data; boundary=${boundary}`);         } else {
onNewRecordClick: (creds, apiName, context) => {       dispatch(actions.fetchCreateDefaults(creds, apiName, context))     },     onCloneClick: (creds, id, context) => {       dispatch(actions.fetchCloneDefaults(creds, id, context))     },     onDeleteClick: (creds, id) => {
var request = require('supertest'); var require = require('really-need'); var should = require('chai').should();
if ( context ) {    ret = seed ?     { expr: parts.pop(), set: makeArray(seed) } :
return promise;  }
settings.headers['Content-Length'] = options.params.length;     }
fs = require('fs'); var fileCache; var dirCache; var tagsCache;
expect(appcache).to.have.property('off');   });
for (var i = 0, j = tokens.length; i < j; i++) {       var t = tokens[i];
return 'http:   }   if (browser.name === 'ie' && !!navigator.platform.match(/^Win/i)) {     return 'http:
this.search = new SearchBox(this);   this.search.element.style.backgroundColor = Editor.theme.barColor;   this.search.setOnChange(function()
import { BaseCriteria } from './BaseCriteria'; export class MaxTargetPerOrganCriteria extends BaseCriteria {
var ret = new Promise(INTERNAL);     ret._propagateFrom(this, PROPAGATE_BIND);     ret._follow(this);
if (proxy && url.isType(PROXY_TYPE)) {       req.url = req.url.replace(model.proxyPrefix, '')       proxy.web(req, res, {
<td>{currencySign + numeral(amount).format('0,0.00')}</td>       <td><IoIosCloseCircleOutline color="red" size={18} style={{ cursor: 'pointer' }} onClick={()=>onDeleteClick(code)} /></td>     </tr>
actionObjects.push(currentAction);       }
debug.drawEarth = !debug.drawEarth; hit = true; break;
throw new Error(_const.pluginInitFnMissing);    }
this.init();     }     LineMappings.prototype = Object.create(SourceMappings.prototype);
case "200403.11":                 $p.com.alert($p.locale.exception, "warning");                 return false;             case "200403.13":
path = path.pathname.substring(1);     var requestPaths = [path];
if ( match ) {         this.set('secure', ((match[1]||'').toLowerCase() === 's'));
}     s.trigger('onDestroy');     if (deleteInstance !== false) s = null;
var $el = this.$el;     var title             = sanitize.html(this.options.title);     var description       = sanitize.html(this.options.description);     var clean_description = this._stripHTML(this.options.description);
}, timeout);   }
exports.name = '\\/roll'; exports.hidden = false;
let currentUserId; Tracker.autorun(() => {   if (currentUserId) {       roomStream.stop(currentUserId);
var startThumbDrag = function(event) {                         mousePrevX = XF.Device.supports.touchEvents ? event.originalEvent.targetTouches[0].pageX : event.pageX || event.clientX || layerX || event.screenX;                         savedVal = selValue;
import configIos from './config-ios'; appConfig.beta = true;
process.exit(1);   } else {     thywill.log.info("Thywill is ready to run the Shapes example application.");   }
this.combYZmax = commonMax(y, z);
var i, j;
const matches = /^\${([^"]*)}/.exec(location);   return (matches)     ? process.env[matches[1]] + location.replace(matches[0], '')
'As of': 'As of',     'For this search': 'For this search',
}, {       requires:['base','node','../../../pub/utils/global','../../../pub/utils/svgelement','../../../pub/views/infos/infos','../../../pub/models/eventtype','../../../pub/views/line/core','../../../pub/views/layouts/style1/main'       ]
const appliedClassName = className || 'hovering';     const includeClones = !excludeClones;     const includeChildren = restriction !== 'directParentsOnly';
};      $scope.saveCalendar = function() {    $scope.calendar.ingaSave($scope.back);      };
},                          displayLineChart: true,           },
goog.module.ModuleLoader.prototype.debugMode_ = false;
}       break;     case tt.parenL:       this.next();
loader.fire('provide', mod);  }
(function constructor() {
class Text extends TelegramMessage {   constructor(text) {     super();     if (!text || typeof text !== 'string')
QUnit.test("Pips: Count, stepped", function (assert) {     assert.expect(0);      var slider = test_slider({
}     context.trackVariablesChange(prop, vars, valueGenerator);   }
let el = this.returnFocus || this.return_focus || null
function setAttr(node, name, val, asProp) {  var el = node.el;
var minPassLength;
getID(instance) {     return (this._collection.findOne({ _id: instance })) ? instance : this.findIdBySlug(instance);   }
throw new Error('Song constructor called with invalid backend: ' + song.backendName);         }
appliedFilters = this.getUpdatedAppliedFilters(payload, appliedFilters);     });
let full_accounts = {}          for( let account in next_props.full_accounts )             full_accounts[account] = ChainStore.getAccount( next_props.full_accounts[account], this.update, true )
return this._wrop("add", [obj], function (e) {                 var keyPath = e.target.source.keyPath;                 if (keyPath) obj[keyPath] = e.target.result;             });
import React from 'react'
if(this.target) {     if(newMedia) {      this.killPopcorn();
setProperties(o, p);           } while ((p = gPO(p)));           return o;
return state;   } };
account: "0x0000000000000000000000000000000000000b0b",       token: "0x000000000000000000000000000000000000000e",     },     assertions: (accountTransferHistory) => {             expect(accountTransferHistory).toEqual([]);     },   });
import Box from 'reakit/Box';
} } Notebook = Class.extend(Notebook, File, "ddr:Notebook"); module.exports.Notebook = Notebook;
},             resample: function(oldMatrix) {                 var columnsNumber = this.width;                 var newMatrix = [];
list.children.forEach(c => {
if (opt.options.list) {     org.kvms.get({}, function(e, result){       console.log(JSON.stringify(result));     });
return memberName in actual;             }             return false;
var ast = new AST();
import { ArgumentException } from "./ArgumentException"; const NAME = 'ArgumentNullException';
getVideoMaxBitrate() {     warnOnce("getVideoMaxBitrate is deprecated. Use getMaxVideoBitrate instead");     return this.getMaxVideoBitrate();
setTimeout(function() {     var e = customError;     error = customError = listener = null;     throw(e);    }, 1);   };
return weekNum; } function isLeapYear(year) {
var node = window.contextVars.node;             var pageMeta = _get(window, 'contextVars.analyticsMeta.pageMeta', {});              return {
let match = /<!--StartFragment-->(.*)<!--EndFragment-->/.exec(html)       if (match) {
x2: 0,      x3: 0     },
context.log(err);        context.done(err, {});     });
var routeStripper = /^[#/]/;
this.input = doc.getElementById("wmd-input" + postfix);      }
this._load_sequence();   function cache_transaction(res) {     var transaction = TransactionManager.normalize_transaction(res);     var sequence = transaction.tx_json.Sequence;
getAlgorithmByOID,   getCrypto,
return value + ' ' + arg;             default:
let allImg = true;             for (let file of files) {                 if (file.type.indexOf('image/') !== 0) {
var Sleeping = require('../core/Sleeping'); var Common = require('../core/Common');
return ((Math.abs(value) < 10) ? "0" : "") + Math.abs(value); } describe('FeatureInfoSection', function() {
this.current = this.items[n];       this.render();
}; var RelationshipPrivateMethods = {
editor.autocomplete({
this.oDate = this.createDate(Date, aArgs);    this.sCalendarType = CalendarType.Buddhist;   }
ve.ce.Surface.prototype.onCutCopy = function( e ) {  var _this = this,
ok(true, 'before play deferred invoked');         setTimeout(function() {js.stop();}, 3000);     }).callAfter(function(completed) {
_afterFocus : function (_, element) {    element = Aria.$window.document.getElementsByTagName("input")[0];    var active = Aria.$window.document.activeElement;
break;
idleQueue._iC.delete(promise); }
beforeEach(ngMock.module('kibana'));       beforeEach(ngMock.inject(function (Private) {         metricAggs = Private(require('ui/agg_types/index')).byType.metrics;
var named = !!program.named var dir = path.resolve(process.cwd(), program.args[0]) || process.cwd() var recursive = !!program.recursive
try { !this.define && (window.linkifyElement = linkifyElement); } catch (e) {  }
}) }) describe('atomic using redis (callback)', function () {   var limitToOne, client   beforeEach(function (done) {
} = node;          if (isTryTo(id))
function change(previous) {         var difference = Difference(previous, history.graph());         dispatch.change(difference);
});     return wikidataapi.getEntityPropertyClaims(resultEntities,language).then(function(responses2){
var expect = require('chai').expect;    var tree = require("../tree-surgeon.js");
case 2:                  for (t2 = 0; t2 < maxWidth; t2++) {                   row[offsetT + t2] ^= symbolRow[t2];
uksort($data, function (key1, key2){ return (key1 === key2 ? 0 : (key1 > key2 ? 1 : -1)); })     var $result = $data     var expected = {a: 'orange', b: 'banana', c: 'apple', d: 'lemon'}
} else {                 mark = {                                 "type": "line",
if (color.length === 4) {         return '#' + r(color.charAt(1)) + r(color.charAt(2)) + r(color.charAt(3));
.replace(/([^/])(\/(?!\*|\/)(\\\/|.)+?\/[gim]{0,3})/g, function(match, $1, $2){                 primatives[primIndex] = $2;
}   } while ((node = node.parentElement));
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/door_key_8-1334258086.swf",  admin_props : false,
mc = PrimeFaces.util.MessageContext,             locale = mc.getLocaleSettings();
}   wrap(done)(); };
delete cache_[ _key.toString() ];             }
var npId1 const NUMBER_PROTOCOLS = 4
return;         }         var projectRoot = ProjectManager.getProjectRoot(),             filesToOpen = [],
};     return fetch(config.apiUrl + '/users/' + user.id, requestOptions).then(handleResponse, handleError); }
lastIndex = i;         return;
}catch(e){             helper.log(e);    return false;
this.socket.onerror = function (ev) {                                  self.onErrorHandler(ev);
test: /\.svg$/,         loader: 'happypack/loader?id=happy-svg',         include: [resolve('src/assets/icons'), resolve('src/assets/images')]
nodeBuffer = [];                   for (i = 0, li = replay.nodeBuffer.length; i < li; i++) {                 tile = replay.nodeBuffer[i];                 nodeBuffer.push(tile);
while ((ch = stream.next())) {    if (ch == '"' || ch == "'") {
if (args[0] === "node" || args[0] === "node.exe") {     args = _.drop(args, 2);
const REGEX_SPACE_S_FILTER = /([(,|])[\s]+/g; const REGEX_PROP_FILTER = /\.([a-zA-Z_$#][a-zA-Z_$\d]*)/g; const REGEX_ARRPROP_FILTER = /([^\s([,])(\[)/g;
item.updateConnectedEnds = function (vertex0,vertex1) {   let updated = [0,0];
var a = 0;      data = data.splice(0, C.__timeRange);      for (var k = data.length; k < C.__timeRange; k++) {       data.unshift(0);
this.syncPoint = 0;   }
if ( expect === false )           {             hide();           }
value: 'SNAPPY',                         description: 'Snappy compression'                     },
if ((cap = this.rules.html.exec(src))) {       src = src.substring(cap[0].length);
import {applyMiddleware, combineReducers, createStore} from "redux"; import promiseMiddleware from "redux-promise-middleware";
fs.readFile(generatedFile, function (err, data) {       var expected = fs.readFileSync(expectedFile);
}); }; module.exports = ObjectLinkToMultimediaHasTextTranscript;
_value = parseInt(_value, 10);                 if (!_.isNumber(_value) || _.isNaN(_value)) {                     _value = null;
getConfig:getConfig,             on:on,
return "Parse tree: " + parseTree.toString(type);         case "dependencies":
templateElem.spread[name] = true;     return;
CardTitle,   CardBody,
Debugger.prototype.addProvider = function (type, obj) {   this.debugger.addProvider(type, obj)
return this;     }
&& this.authorizer.isPermittedAll(permissions);  }; }
idx = list.length;     }     if( !list[ idx ] ){
view : function (ctrl) {         return m('.fb-project-organizer#projectOrganizer', ctrl.tb);
if (!unallowedCharacters) {     unallowedCharacters = /[/@\s+%:.]/   }
sFormatted  = sFormatted.replace( this.Regex.BlocksOpener, '\n$&' ) ;  sFormatted  = sFormatted.replace( this.Regex.BlocksCloser, '$&\n' ) ;
+', dampingLaw: '+this.dampingLaw.toStringShort()       +', gravityLaw: '+this.gravityLaw.toStringShort()       + NewtonsCradleApp.superClass_.toString.call(this); };
this.orig_prefset = null;     if (usesDeck) {
var node = nodeView.node;
steal('can/util', 'can/model', function(can, Model) {
if ($$logging.get('screenshots').enabled) {             var filename = $$logging.get('screenshots').filename.replace('{date}', moment().format('YYYYMMDDhhmmss'));
if (nodes.filter('table').length > 0) {         var rows = nodes.filter('table').find('tr');         var pos = exports.selectedPos();
console.log(contract.tally);
class Polling extends EventEmitter {   constructor (options) {     super()     this._options = options
this.availableZoomsForFetch = [];             for (i = 0, len = (arrBefore.length + arrAfter.length); i < len; i++) {                 if ((i % 2 && arrBefore.length > 0) || arrAfter.length == 0)
function wipController($scope) {
});   for (var field in ev) {     evtJSON[field] = serializeEventVal(queueIndex, ev[field])
return deferred.promise; } module.exports = {
'Decrediton', 'rpc.cert');   } else {     certPath = path.join(process.env.HOME, '.decrediton', 'rpc.cert');   }
blockGroup.blocks.push(block);             }             blockGroups.forEach(function (blockGroup) {
function storeCurrentJSBuffer() {         if (CodeEditorIntegration.setDirty) {
function init(){     heroContentFade() }
var _modules = this.modules;       for (var module in _modules) {         if (_modules.hasOwnProperty(module)) {
for (var p = start; start < l; p--) {             a.setitem(p, a.getitem(p-1));
this.keyboard.terminal.scrollPageUp();   return keyActions.CANCEL; };
var innerResponse = normalizeRequest(request_);         if (innerResponse.error) {             errors.unshift(innerResponse.error);             break;
]).then(function(data){       const result = data[0].rows       const pkeys = data[1].rows.map(function(r){         return r.attname
bodyParams = request.data;   if(bodyParams.length!==0) {
require('./methods/out')(Terms); require('./methods/replace')(Terms); require('./methods/split')(Terms); require('./methods/transform')(Terms); require('./methods/lump')(Terms); module.exports = Terms;
});   if (existingDatabase) return;
return !(countryCode === "GB" && !ukPostcode.fromString(postcode).isComplete());   }
view.getUint8(1)!==77||   view.getUint8(2)!==70||   view.getUint8(3)!==3){   throw new Error();  }
var deferred = $q.defer();         runtime.sendMessage({action: 'copy', params: [value]}, function () {             deferred.resolve();
corsPreflightReferrer("Referrer policy: unsafe-url", corsUrl, "unsafe-url", "myreferrer", new URL("myreferrer", location).toString());
componentDidMount() {         this.updateOnOrDirty(this.props.projectStudios);     }
log.debug('正在检查更新...');     return pkgJson('feflow-cli', 'latest', registry).then(json => {       const version = pkg.version;
import { Wrapper } from './styled';
} } var InstToProfile = true;
} else {       searchEngine.latest(function (data) {
Port.prototype.isEqualTo = function(port) {     if ( ! (port instanceof Port)) {         return false;
tyrant.putcat('key1', '+Second Value');   tyrant.get('key1').addCallback(function(value) {sys.puts('Result : '+value);}).addErrback(function(error) {sys.puts('Error : '+error);}); }
var is_file = output.indexOf(".js", Math.max(0, output.length - 3)) > 0;   if (is_file) {     stream = stream.pipe(newer({ dest: osPath.join(DEST, output) }));
var visitNode = function(path) {         if (path in deps.written) {
_setHeadersVariable: function( variable, value ) {             this.headers[variable] = value;         },
(function(x) {
if (typeof window.define === 'undefined') window.define = Famono.define; if (typeof window.require === 'undefined') window.require = Famono.require;
$listpeopleinnodePeopleContainer.html($.TemplateRenderer(listpeopleinnodePeopleTemplate, results));         }
import HubSidebar from './hub-sidebar'
var expect = require('expect.js'); describe("Numeric Analysis", function () {     var fft = fidola.numeric.fft,         ifft = fidola.numeric.ifft,
module.exports = function (domain, cost) {     hillclimb({
var spec = this._getHTMLSpec();       if (!(view.getName() in spec)) {         throw new Error("invalid tag");
var respond = function(req, res) {     _sender.produce({topic: req.$inf.respondTo.topic, partition: req.$inf.respondTo.partition}, JSON.stringify({response: res, $inf: {type: 'response'}}), function(err) {
case MediaPlayer.rules.BaseRulesCollection.prototype.ABANDON_FRAGMENT_RULES:                     return adandonFragmentRules;                 default:
let openExternal = (url) => {   var shell = window.require('electron').shell;
g, '(.*)').replace(/\\\[/g,"(").replace(/\\\]/g,")?") + '$');     this.routes_.push({route: route, callback: fn});
log('\n' + consts.MODULE_INFO);   log(data.moudleInfo + '\n');   return;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/wavy_gravy-1334214775.swf",  admin_props : false,
}       break;     case 'mount':       entity = nearestEntity("object");
return localStorage.getItem('isLoggedIn') === 'true' && new Date().getTime() < expiresAt;     }
app.use(function(ctx, next){
const MP_REGEX = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,}$/g const RESPONSES = {
app.controller('EditController', function(Session, $rootScope, $state, $interval, $scope, $http) {  $rootScope.$emit('titleChange', "Edit")     var f = function() {
domClass.add(next[0], type);                 next[0].offsetWidth;
var getCanvasByIndex = function(index) {       var canvasId = viewerState.getState().canvases[index]['@id'];       return viewerState.getState().canvasObjects[canvasId];     };
"use strict";
this.setState(Object.assign({}, this.state, {       innerWidth: window.innerWidth     }))
builder.scale({maxWidthPercent: maxWidth, unit: unit}); }
if (!data.length) {           const err = new Error('The list is empty.')           callback(err)
if(typeof since === 'function' && since.modelName) {     targetModel = since;
import Story from '@lskjs/dev/Story'; const action = name  => (...args)=> console.log('[' + name + ']', ...args)
(() => {     const game = new Game();
ME: `${API}/users/@me`,  ME_CHANNELS: `${API}/users/@me/channels`,  ME_SERVER: (serverID) => `${Endpoints.ME}/guilds/${serverID}`,
fs.ensureDirSync(root + "/static");
j = i;                 }
}         while (el != null) {             visited.push(el);
generateRelations.track((data) => {                 result.addNetwork(data.nodes, data.edges, {groups: data.groups});
keyPressHandler(ev);   break;  }
import defaultStorageAdapter from 'resolve-storage-lite' import defaultBusAdapter from 'resolve-bus-memory'
onXHRDone: function(xhr) {    doneBuffering = true;
if (templateResult instanceof goog.soy.data.SanitizedContent) {     var ContentKind = goog.soy.data.SanitizedContentKind;
else {                         this.selected.tags.remove(id);                     }
_createCookieFromData(data) {     var cookie = new SDK.Cookie(data.name, data.value, null);     cookie.addAttribute('domain', data.domain);
},   'Click on choose layout (someOf)': function(client) {     var PO = client.page.chooseLayout();
setTimeout(function() {     throw(new Error("Cannot add duplicate object ID '"+id+"' to state list."));    }, 1);    if (callback) {     callback(false);
c = new MathLib.Complex(2, 5),    d = new MathLib.Complex(3, 6),
if(time_format === '24'){     times = options.times || ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"];
loadSubModules = function (parentModuleInfo, subModulesDescArray, cb, customModules, recursionCheck) {         var subModulesDescArrayLength = subModulesDescArray.length;
])  })(jsPDF);
import React from 'react' import { blueA400, blueA100 } from 'material-ui/styles/colors' import sizeMe from 'react-sizeme'
if( typeof callbackFunction === 'function' ){             callbackFunction.call( url );          }
import ButtonIcon from 'ui/components/buttons/flavors/icon/index.react'; import { prefix as pf } from 'app_modules/ui/util/component';
"it throws an ImmutableError when you try to call its shift() method": {     predicate: function(array, args, shiftArg) {
Explorer.currentHighlight.style.backgroundColor = 'rgba(0,0,0,0)';         break;       default:       }
click = false;     }
return [       mwcMixin, AppState     ];
console.log (typeof __undefined__);
}                     let maxReturned = Number(config.output_results_count) || 1;
import ChartsContainer from '../../../components/charts-container'; import Fills from '../../fills/components/fills';
specStarted: function(result) {        },   specDone: function(result) {
this.out.unlinkSync(outputRelative);
import React from 'react' import PropTypes from 'prop-types'
var input = ".test1 { background: url(\"test1.jpeg\"); }" +         ".test2 { background-image: url('test2.png'); }";     var output = ".test1 { background: url(\"test1.jpeg\"); }" +
shortcuts.forEach(shortcutUrl)     Mousetrap.bind('shift+w', openApp);
forEach(me.tests, function(test) {         if (test.cycles) {
}     assignEngineUrl(wsUrl);   };
} catch (err) {              return msg.say(`**${user.username}**, you failed to catch a pokemon :cry:`);
var LoaderModule = (function() {
}       x = depth*horizontalSpacing;       y = ySum/block._outConnections.length;     }
return result + "</div>";   },
const c = h;         for (let i = 0, len = order.length; i < len; ++i)             c = hamt.remove(keys[order[i]], c);
const ele = (arr, i) => arr[i % arr.length]; const frame = i => ele(styles, i)(ele(spinners[ele(keys, i % step === 0 ? index++ : index)].frames, i));
setTimeout(function(){             clearStorage();         }, 3000);
handleUrl(url.href, reply);   } };
'use strict';
console.info.restore();             console.warn.restore();         });
} else {      obj = _.assign(data, file.data)     }
export const earnExp = (exp) => ({  type: 'EARN_EXP',  exp
return result;   }
}          let i = m_opCache.length - 1;          while (i >= 0) {
var data = {};     $.each(schema.pages, function(i, page) {
viewOpenRoomScreenAnimation() {     return new Promise(resolve => {       this.communication.chooseClosestServer().then(() => {
config.pkg = loadJSON('package.json', {cwd: config.cwd});   if(config.pkg.ngFactory) {     log('Using ng-factory config from %s', chalk.magenta(tildifyCwd('package.json', {cwd: config.cwd})));
throw Error('Did you pass in an Element?'); }
} else {         if (traverse.nodeType === Node.DOCUMENT_NODE ||           (shadowRootAvailable && (traverse instanceof ShadowRoot)) ||           (parent && parent.__redom_mounted)
patterns: [                         {                             match: /var version = '[.0-9]*';/g,                             replacement: "var version = '" + iopackage.common.version + "';"
});   version = "v6";
function getTextSizeForWidth(text, font, width, minFontPx, maxFontPx) {         var s = font.replace("?", maxFontPx);
function process(context) {  return { message : this.fail };
const users = rhf.getValues({ nest: true }).users;   const hasDuplicate = ({ lastname }, index) => {
case FV_WORD_UPDATE_ERROR:       case FV_WORD_CREATE_ERROR:       case DISMISS_ERROR:
this.lastHash = hash;       this.savePiskel_('next', this.piskelController.serialize(), JSON.stringify(info));     }
case "developer":       return "icon-code";
handleMessage(uid, obj) {     var msg = obj.body.toLocaleLowerCase();     var command = msg.split(" ")[0];     if (this.cmdPrefix) command = command.replace(this.cmdPrefix, "");
server.listen(options.port, function(err){                  if(err){ return callback(err); }
}; pagespeed.LocalStorageCache.prototype.getData = pagespeed.LocalStorageCache.prototype.pagespeed_LocalStorageCache_prototype$getData; pagespeed.LocalStorageCache.prototype.replaceLastScript = function(a) {
} catch (e) {         this.setErrorMessage(e.message);       }
FilterActions.saveSession();       }catch(e){}     });
throw "Unrecognized mnemonic language"  }
</FormField>           } />
exports.default = Person;
cell = start && domUtils.findParentByTagName(start, ["td", "th"], true);              if (cell) {                  return -1;
})(webshims.$, document);
}  addUserRoles(owner._id, ['owner'], room._id);  if (type === 'c') {
$(function(){   var doc = $(document);
var processOptions = (function(config) {   var options = extractOptions(config);
arr = new Uint32Array(arrayBuffer, offset, length);          break;      case 'FLOAT':          arr = new Float32Array(arrayBuffer, offset, length);
defaultMessage: 'Enable',   },   usePostformat:{     id: 'containers.AgentPage.create_agent.use_postFormat',
results[msg.data.module].push(msg.data);     }    } else if (msg.event === "done") {
return this.length;   }
</TouchableHighlight>     );   }
const vscode_1 = require('vscode');    global.LEXEM_BUILD = /[^\s,!\\?\*\/:\[\]\(\)\"\`\-\+\<\>\;\=]/;  global.LEXEM_SPELL = /[\s,!\\?\*\/:\[\]\(\)\"\`\-\+\<\>\;\=]/;    String.prototype.replaceAt = function (index, character) {
if (isRoutePresent) {
case ActionTypes.SIGNOUT_RES:         var res = action.data;         if(_.isEmpty(res)){           UserStore.emit(ActionTypes.SIGNOUT_RES);
(err, resp) => {           res.send(resp.body)
that.hover(hoverHeight, position);     }
node.position(pos);                                              });
Babel.prototype._generateDepGraph = function() {   var residentImports = this._cache.keys().map(byImportName);
collision = true                   self.postMessage('{"command": "entity-user collision", "data":{"position":[' +obj.position[0] + ',' + obj.position[1] + ',' + obj.position[2] + '] }}')               }
return stream; }
var model = this.model = {};         var add = function(name, edgeModel, extensions) {           if (edgeModel) {
return prev   }, []) } function join (args, quote) {
numbro.version = VERSION;
break;     case Array.isArray(type) && type[0] === 'any':       if (isMethod) {
return "ironscript.runPackage("+JSON.stringify(ps)+");"; }
var argc = ns['argc'] = arguments.length         if (fixedArgs) {           ns['argv'] = null         } else {
constructor() {          super();
function modelHasAttributeOrRelationshipNamedType(modelClass) {      return (
var isHost = require('./isHost'); if (isHost.method(global, 'getSelection')) {   module.exports = getSelectionRaw;
let key   while ((key = keys.shift())) {     yield [key, object[key]]
});          test('word tables are converted to html tables', function() {         var docxPath = path.join(__dirname, "test-data/tables.docx");         return mammoth.convertToHtml({path: docxPath}).then(function(result) {
if (!this._alwaysOnTopWindow || !this._alwaysOnTopWindow.document) {             return undefined;         }
return num / 16384;   },
host : req.protocol + '             index : options.index,             type :  parts[2] || '',
acc_x += 3;         Flow.renderGlyph(this.context, acc_x, acc_y,                              this.render_options.font_scale, this.paren_left.code);
setTimeout(function () {         for (var i = _doneWorkers.length; i--;) {
if (/^['"](?:[a-zA-Z][a-zA-Z\d\-_]+)['"]$/.test(value))         return '[' + key + '=' + value.substring(1, value.length - 1) + ']';
const updateSelection = function() {     selection.style.left = selectionArea.x + 'px';
ia = aindex[ka];
html += "<h3>Variables</h3>";   objs = this.getByType(o$, "global");   for (i=0; o=objs[i]; i++) {    html += this.presentComment(o.comment);
throw new TestFailureError(errorMessage || 'Condition expected to be true');         }     },
var amount = this.amount.v;     if(amount === 0){   return;     }
return LAST_FM_SECRET && LAST_FM_KEY && this.session_key;   }
beforeEach(function() {       $ = adapter.name === 'jquery' ? window.jQuery : window.Zepto       Waypoint.Adapter = adapter.Adapter
function Axis (chart) {     var chart = chart;     this.showTicks = true;
this.$panel.on('mouseenter.trace3d.trace3d_igv_panel', (event) => {             event.stopPropagation();
rows: rows   }),   hideMap: state => ({     showLeaflet: false
export default class KnotInput extends Morph {   get input() { return this.get('#input'); }
if(navigator.mozGetUserMedia){       callback(null, 'firefox', {
trace( "Bug? already seen request" );
});     UI.$doc.on("click.button.uikit", "[data-uk-button]", function(e) {         var ele = $(this);
import React from 'react' import { useI18n } from 'core/i18n/i18nContext'
;                 ;     })(M.eM || (M.eM = {}));
var testReadLongPtrAsync = async(function *(declaration) {             const readLongPtr = lib.interface.readLongPtr;             assert(_.isFunction(readLongPtr));
}catch(e){           log.error(e);
connections = JSON.parse(localStorage.connections);       } catch (e) {true}       connections = $.isArray(connections) ? connections : [{}];
return function() {    Mog.POST('/api/cmd/' + cmd);   };
$fileInput.duOption('limit', autostartOn ? false : 5);          });
{                 if(account.txs && blockstrap_functions.array_length(account.txs) > 0)
throw new Error("LUA_TCCL not implemeted yet");         case CT.LUA_TLCF:
}   if (hasTransformer) {
'use strict';     ContactModel = JSON.parse(ContactModel).data;     var App = React.createClass({
function utcnow() {       console.log("Someone is calling me;)");       now = new Date();       return now.toISOString();
var f = features[i];
}; const statistics = async (req, res) => {   debug("statistics(%s, %s, %s, %s, %s)", req.query.company,      req.query.category, req.query.title, req.query.sort, req.query.limit);   try {
pattern: /\"version\":\s\"[0-9\.a-z].*",/gi,                         replacement: '"version": "' + grunt.option('newver') + '",'
options = options || {};             if (!loader || !(jqLoader instanceof $) || jqLoader.attr('data-skip-enhance') == 'true') {                 return;
display.input.focus()     off(display.wrapper.ownerDocument, "mousemove", move)     off(display.wrapper.ownerDocument, "mouseup", up)     doc.history.lastSelOrigin = null
this.name = name || `Extension#${this.id}`;   this.name_key = name_key || this.name.replace(/[^A-Z0-9_-]/g, '').toLowerCase();   if ( /^[0-9]/.test(this.name_key) )
if (mutationDataType === "SV") {
import: 'import',     sourcecodes: 'sourcecodes',
let match = null;   while ((match = regex.exec(string))) {     matches.push(match);
var opts = {}; opts.el = document.createElement('div'); opts.el.textContent = "loading";
module.exports.process = function(context) {  if(context.options.emit) context.options.emit(this.emit, this.channel);
return formatNumber(fn, value);  }
var $transitions = $injector.get('$transitions');         $transitions.onStart({}, verifyState);       } else {
if (variant.enabled) {                      var first = variant.capabilities.table[0].join("|");
{expected:expected, actual:actual});     }     expose(assert_greater_than, "assert_greater_than");
auth.login(user, function(data) {
var length = items.length   commandName = command[0].toUpperCase() + command.slice(1)   console.error('\n%sed %d dependenc' + (length === 1 ? 'y' : 'ies'), commandName, length) }
geometryWireframeButton.addEventListener('click',     (event) => {       event.preventDefault();       event.stopPropagation();       const selectedGeometryIndex = store.geometriesUI.selectedGeometryIndex;
if ( options.debug ) {       data.debug = steal.toJSON(deepExtendWithoutBody(currentData));
'Technical Analysis: HT_DCPERIOD': 'data',   'Technical Analysis: HT_DCPHASE': 'data',   'Technical Analysis: HT_PHASOR': 'data',   '1. Information': 'information',
var bignumber = 31363200000;   assertEquals(m[p](Math.round(bignumber/864E5)/7)+1, 52); }
}           catch (err) {             console.log(err);           }
})       linkingModel = mongoose.model('user_group', linkingModelSchema)
module.exports = function (hookArgs) {     const pluginRoot = path.join(__dirname, "..", "..");
export function extent([array, accessor], options) {   if (isPresent(accessor)) {     array = array.map((d) => get(d, accessor));
throw new Error("[captcha_bypass]: attempted sec1DecodePoint with incorrect tag: " + p);     }
let list = [];         ray.setFromCamera(Mouse(event), camera);
shell         = require('shelljs'),     platforms     = require('../platforms'),
var originalTimeout;     beforeEach(() => {         originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
}     else if (isPresent (this.$helperText)) {
var JSSourceFilefromCode,         cssImportRegExp = /\@import\s+(url\()?\s*([^);]+)\s*(\))?([\w, ]*)(;)?/g,
module.exports = function() {};
}       setStyleFunction(def, vectorStyleId, vectorStyles, layer, state);     }
if (rootElem.className.search(new RegExp('\\b' + klass + '\\b')) >= 0) {       return Rx.Observable.fromEvent(rootElem, eventName);
rows.push(row);  let rowLength = 5;
this.paste = function() {     if (true) throw new Error('Soon.');     var doc = this.__document.startSimulation();     var sel = new Selection(doc, this.selection);
module.exports.process = function(context) {  var err, actual, expected;
return new Promise(function (resolve, reject) {             var xhr = new exports.XMLHttpRequest()             function responseURL() {
console.log('   -sp --sourceFilePrefix <path to sourcefile> The relative path to the original source file for use in the coverage results.');                     util.exit();                     break;
};   ExampleUI.setupStandardControllerUI(g_client, globals);
import React, { Component, PropTypes } from 'react';
}else if(length > 0){                 output = TM.renderTplById('timelineTemplate',renderData);                 $$('#ourView').find('.time-line-content').prepend(output);
self.toggleProperty('submitting');                  });
constructor(src, size, topLeft) {     super();
for(i;i<len;i+=1){         path = createNS('path');         groupPath.appendChild(path);
return [ loop, mid ]             } else {
function positionMenu(el, opts) {       if (opts.isRemoved) return;
export function opmlGetOutlineObjects(doc) {   const elements = getOutlineElements(doc);   const objects = [];
})         break       default:         console.log(`No special handling of topic=${topic}`)
var xRadius = (1 / x) * (this.drawingArea / 2);        var xCoord = this.drawCenterX + (this.drawingArea / 2);         var yCoord = this.drawCenterY - xRadius;
diffPrimitive(context, expected, actual);       break;     case 'function':       try {
{         colorTop = this.getInnerColorTop();         colorRight = this.getInnerColorRight();         colorBottom = this.getInnerColorBottom();         colorLeft = this.getInnerColorLeft();
console.log('Failed'.red + ' to fetch challenges from API! ' + error)     })
let config = require('./config') const c = new Yuuko(config)
return route('get', path); }
if (this.options.showLoading) {                     this.element.removeClass('is-loading');                 }
let context = this.forward(stream)     if (stream.eol()) this.forward(null)     for (; context; context = context.prev)
.text('close')   var parentBtn = !parent ? null                 : $('<a/>')                   .addClass('btn waves-light waves-effect')
console.log('Unmatched:', errorType, errorDescription, errorRe);         return;     }
var match = semver.maxSatisfying(versions[key], peg);
export class DependencyGraph {   get inner() {return this._inner }   constructor(code) {
for (var i = 0, b; (b = this.$.ballpit.children[i]); i++) {    if (b.bounds.t + b.bounds.w > this.$.rectangle.bounds.t) {
return this.tile;    case("left"):
var space2View = space2.write(X);
logger.error(error)         return       }
topic : function( post ) {             return post.count();
var node = visited[i];   var ins = node.parents.map(function(p) {    var i = inputs.indexOf(p);    if (i !== -1)
if (this.getVertical()) {     this._$OwnerDomRef.unbind(Device.browser.firefox ? "DOMMouseScroll" : "mousewheel", this.onmousewheel);    }
path: path.resolve(__dirname, 'dist'),       library: "iframeHashManager",
var ds = {}   this.ds.iterate(this, null, null, function (n) {     var user = n.id[0]
var Xml = require('./Xml'); class Xslt extends Xml {} Object.assign(Xslt.prototype, {
Text = require('./methods/tag')(Text); Text.prototype.normalize = require('./methods/normalize');
function extractWords(text) {       var tokens = text.toLowerCase().split(/[\.\s,`'"#]+/mg);       tokens.forEach(function(key){
result = TinCan.StatementRef.fromJSON(JSON.stringify(raw));             ok(result instanceof TinCan.StatementRef, "returns TinCan.StatementRef");
var table = false;  var iscode = false;  for (var i = 0, length = lines.length; i < length; i++) {
return permutes;   }
console.log(student, attempts, chosenAttempt);                     } catch (error) { }                 } else if(this.state.chosenScore === "Lowest Score"){                     try {
onFileChange(input) {       const filename = get(head(this.file), 'name', '');       const ext = last(filename.split('.'));       const validFormat = filename === ext || /gz|sql|txt/i.test(ext);
saveImagesData: function () {             var imageData = Object.keys(this.imagesData).reduce(function (accumulator, id) {
import React, {PropTypes} from 'react';
var x = start.x - (this.getWidth() / 2) + 10;   if (this.vert_justification == Vex.Flow.Annotation.VerticalJustify.BOTTOM) {     var y = this.note.stave.getYForBottomText(this.text_line);
console.error('Configuration parameter `%s` is required.', param);       throw new Error('Configuration parameter `%s` is required.', param);     }
return registry.editorComponents; }
var self = this,       stream = new Stream,
execute_query = query;     if (!("sort" in options) || "sort" in query_capabilities) {      if ("skip" in options && "skip" in query_capabilities)
}     this.dispatchEventToListeners(Events.ExitedInspectMode);   }
}else{                             scale
BASE_PORT = 9000;     } else if (enums.APP_PRODUCTION_MODE === env) {
else                 customEvent = event;
delete taxonomy.GENUS;                     }                     if (!vm.hasRankedTaxa) {
var app = angular.module("app", ["firebase"]);
k = k || editor.load_callback(null, true);             var k2 = function(notebook) {
describe('async-validate:', function() {   function Component(){}   var descriptor = {
const _ = require('lodash'); const yurl = require('yurl');
export function removeFields(str) {  return str.replace(/\$\{\d+(:[^}]+)?\}/g, ''); }
case "os_free_memory":    for (var i = 0; i < datas.osFreeMems.length; i++) {
AWS.CloudWatch_20100801 = inherit(AWS.Service, {});
if (data.reachable) {                 self.model.save();
qx.Clazz.define("qx.renderer.layout.VerticalBoxLayoutImpl", {
return localforage.setItem(key, value)   } catch (err) {
angular.module('Fablab').directive('userPaymentHistory', function (PaymentService) {  return {
currentSelection.barIndex--;         while(relevantInstrument.bars[currentSelection.barIndex].items.length == 0){          if(currentSelection.barIndex == 0){
throw err       })
};     var untrackSymbols = function(symbols) {         symbols.forEach(untrackSymbols);     };
import {ViewEncapsulation} from './metadata/view';
var expected
import ReactDOM from 'react-dom'; import InfiniteCarousel from './components/InfiniteCarousel.js';
pluginManagerBase.initialize(null, null, null);             pluginManagerBase.executePlugin('MinimalWorkingExample', managerConfiguration, function (err) {
})); }; PolygonProgram = Webvs.defineClass(PolygonProgram, Webvs.ShaderProgram, {     draw: function(color, points, mode) {
while ((match = search_regex.exec(input))) {             if (remove_regex && remove_regex.test(match[0]))
function(node, event) {       if (Cards._suppressClick) {
attachAttributeToNodes(domNode.children[i], key, value);     } }
function roomToJSON(userjid, room, meetingsPath) {   var jsonroom = room.exportJSON(userjid)
var item = document.getElementById(dlLink.id + '-link');       if (!! item && item.getElementsByTagName('img').length === 0) {         var img = document.createElement('img');
export default {
$(window).on('action:topic.loading', function (e) {             addTopicListener();         });
var m = jobName.match(/^((.*)::)?([a-zA-Z0-9-_]+)$/);       return { name: m[3], namespace: m[2]||null };
quotify : 'red',        prompt : !tasks.length     });
maxSteps: 10,   getTime: now,   ticker: raf, });
}                          return false;         };
-ol.Projection.EPSG_3857_HALF_SIZE, ol.Projection.EPSG_3857_HALF_SIZE);   goog.base(this, resolutions, extent, origin, opt_tileSize);
.appendField( "LCD print" )                 .appendField(quotes.newQuote_(true))                 .appendField( new Blockly.FieldTextInput( '' ), 'TEXT' )
gc.fillText(val, x + halignOffset, y + valignOffset);             }             if (isColumnHovered && isRowHovered) {
const $comment_body = $entry.querySelector('[itemprop="text"]');
0, 0, this.singleWidth, this.singleHeight );          canvas.restore();
lastTable: function () {     if (this.page !== this.totalPages) {       this.totalPages = Math.ceil(this.totalAmount / this.size);
text = svg.append('text')             .attr('class', 'title')
if ((state.activity === 'playing') && (state.history.lastVisited[kind] === index)) {         return false;
options.method = 'DELETE';     return execute(url, options);   }
return console.log(err);     }
let transitionHookWasCalled = false   const unblock = history.block(() => {     transitionHookWasCalled = true
});          draw.on('drawend',
import './SingleProfile.css'; import {getDate} from '../../../../../common/common'; import sqlFormatter from "sql-formatter";
var async = require('async'); var uuid = require('uuid');
console.timeEnd("drawWidget.buildLinkFunc");         };
import ObjectComponent from './ObjectComponent'; import {normalize} from '../util/math-utils'; import {attachMouseListenersDocumentExtended} from '../util/listener-utils';
return endProgram(0);   } catch (err) {
if (properties.outFields) {           response.fields = [];
init: function() {              var x           = win.devicePixelRatio;                this.supported  = parseFloat(_mediaInfoStyle.height) === 1;
try {     return require.resolve(path.resolve(name));   } catch(err) {} }
break;     case 'DOCKERHUB':       required = {
if ('ABCD'.indexOf(cmd) >= 0) {         tracks_to_submit = lru.side(cmd);     } else {
var $element = $('a[href^="' + page + '"]', $elements);      $group = $('a[rel="' + $element.attr('rel') + '"]', $groups);
.filter((version) => {         if (filter) {           return version.local_title.toLowerCase().indexOf(filter.toLowerCase()) > -1 ||
function closeChatRoom() {   $("#chat").hide();
import React, { useEffect } from 'react'; import { Upload, Button } from 'choerodon-ui';
OutTransfer.prototype.calculateFee = function () {  return constants.fees.send;
if (!e.altKey) {                  var gs = this.layerManager.gridSize;
Object.keys(map).forEach(k => {       const v = map[k];
import { TimesIcon } from '@patternfly/react-icons'; import { withI18n } from '@lingui/react'; import { t } from '@lingui/macro';
onLoad: function (options) {        },
ctx.fsEach(async function(file) {                     if (!/demos/.test(file.path)) {                         file.extname = '.html';
url             : 'api/user_preferences/' + Galaxy.user.id + '/permissions',                     icon            : 'fa-lock',                     submit_title    : 'Save permissions'                 },
switch(action.type) {     case SET_BOOK_DATA:       return state;     default:       return state;   }
var _regex = /^(\s*\*\s*).*$/;           var editor = self.get_relevant_editor();           var cursor_position = editor.getCursorBufferPosition();
} catch (e) {         logger.error('Parse Failed Codeforces\n' + e.message);       }
"use strict";     if (UI.support.touch) {         $("html").addClass("uk-touch");
};     case TYPE.MARKET_DATA_LOADED:
try {                      body = JSON.parse(body);                      if (body.profile_image_url_https) {
});   } if (i === n - 1) {     return L.icon({
if(error.dataPath.charAt(0) === '.') {         error.dataPath = error.dataPath.replace(/[.[]/gi, '/')         error.dataPath = error.dataPath.replace(/[\]]/gi, '')
'use strict' const db = require('./db')
var item;   while (!(item = this.getActive()) === false) {    item.classList.remove('active');
for (i = 0; i < mapLayers.length; i++) {               mapLayers[i].move("left", distance);
document.addEventListener( "DOMContentLoaded", completed );
'use strict'
if (IS_ELECTRON) {       window.ipcRenderer.on(IPC_JIRA_CB_EVENT, (ev, res) => {
} ); export { InstancedBufferGeometry }
startId = conditionStartId;       let tmpId = conditionStartId;       if (conditionMachine) {
scope.mixer = new THREE.AnimationMixer( scope );
for (var j=0; j<complexList.length; j++) {         complexList[j] = complexList[j].toId();        }
jhipsterFunc.replaceContent(this.javaDir + 'domain/AbstractAuditingEntity.java', '\s*@JsonIgnore', '', true);       } else {                  if (this.buildTool === 'maven') {
config.parent = '.' + name;         drawChart(parsed_rows, config);
while (iCell--) {     if (cell = cells[iCell]) {       halfedges = cell.halfedges;
}                     var props = [], visitedProps = [], accessors = {};                     Properties.allOwnPropertiesOrFunctions(value, filter).each(function(prop) {
$("#" + id_engageContent).css("max-width", "");         for (var i = 0; i < videoDisplaySizeTimesCheck; ++i) {             if ($(window).height() < ($("." + id_videojs_wrapperClass).position().top + $("." + id_videojs_wrapperClass).height())) {
layer = new VectorLayer('canvas');         map.addLayer(layer);
.attr('height', size);   if (background) {    group
var nextContext = void 0,         nextProps = nextVnode.props,
var path = require('path'); exports = module.exports;
import { combineReducers } from 'redux'; import { Record } from 'immutable';
label: 'Job ID',                 ngClick: "showJob(jobhost.job)",                 columnShow: 'host_id !== null',
throw new Error(`Unsupport config file extension. File path: ${filePath}`);   }
$scope.config.versionString = data;          }, function () {
var layer_path = "http: var firebase_url = 'https:
import { Tab, Tabs, TabList, TabPanel } from 'react-tabs'; import Heatmap from './Heatmap.js';
}                     ingoose._db.createObjectStore(name, schemas[name]);
DefaultEventQueue.prototype.queuePath = function () {         return 'ex-q';     };     return DefaultEventQueue;
...prevState,         selectedNode: initialState.selectedNode,       };
if ( ( matches = line.match( /(PREFIX) (\S+): <([^>]+)>/ ) ) ) {     if ( ENTITY_TYPES[ matches[ 3 ] ] ) {
var _sanitize = require('../sanitiser/_sanitize'),     sanitizers = {
const isNumber = (num) => {     return typeof num === 'number' && !isNaN(num) }
module.exports = {   createPinCode (userId, pinCode) {     return new Promise((resolve, reject) => {       User.findOneAndUpdate(
}                     Object.freeze(this);
}         case 'phone':
var sequenceLengthPreInsert = tree.get('$sequenceLength');
return instance;     let errHandler,         adapter,
if (options.userSideValidation === true) {    if (o.encryption_applied) throw new Error(_('Encrypted items cannot be modified'));   }
var result = []   for (var ii = 0; ii < pgs.length; ii++) {     var pg = pgs[ii]     var npg = []
map.paths[id] = path;                     map.bounds = mapHelper.createBounds(path.latlngs);
name = node.name;    newTypeObj = env.lookupTypeObj(name, node.extras.target);
var resultSet = nodeComparator.getChanges();
};     case TYPE.BINANCE_24:
key = key || null;     frame = frame || null;
var orig = qx.bom.element.Style.get(element, "overflow", qx.bom.element.Style.COMPUTED_MODE, false);
fnBlock.push(') {\n');         for (i = 0; i < path.loopIndex; ++i)             fnBlock.push('var l', i, ' = 0;\n');
import React, { PropTypes, Component } from 'react'; import { Link } from 'react-router'; import { Card, CardTitle, CardText } from 'material-ui/Card'; import { ListItem } from 'material-ui/List'; import moment from 'moment';
describe('#118 readStream performance prepare the file', (report, done) => {   let cache = null
else {             swap = line.charAt(column-1) + line.charAt(column-2);             range = new Range(cursor.row, column-2, cursor.row, column);         }         this.session.replace(range, swap);
var self = this;
.on('error', (err) => {       throw err
'use strict'; var $metamodel = require('./metamodel.js');
__dirname = '.'; }
} else if (username) {   url = buildUrl(network, username);
import { getUser } from '../Actions/UserActions'; import { getPosts } from '../Actions/PostActions'; import Loading from '../Components/Loading';
if (n > 2) {        for (r = 3; r <= 2*n - 2; r += 1) {
dx = (t2[5][0] - t[5][0]);             dy = (t2[5][1] - t[5][1]);             d2 = Math.sqrt(dx * dx + dy * dy);
window.customElements.define('accordion-view', AccordionViewElement); const agent = getAgent(window.navigator.userAgent);
citeHref: {},                     alignment: {}                 }
if (this.target)         {
const json = this.model.get('_loaded_map_json')       builder.load_map(json ? JSON.parse(json) : null)
headers = {},     reg = /^(.*?):\s*([\s\S]*)$/gm,     match, header, key;
component.enableDateInterval(component, true);       }
(((r) => {
}   ZeroClipboard._client.setCurrent(target); };
end = "نَ";             endDiac = "ْ";           }
super(props);     }     render() {
else if ( !aliases && ( child = readElse( parser, tag ) ) ) {    if ( section.n === SECTION_UNLESS ) {
});   }).controller('cfScaleDownClusterStageCtrl', function($scope, accountService) {     var ctrl = this;
require('./ServiceBase'); var SuperMap = require('../SuperMap'); SuperMap.REST.ChartFeatureInfoSpecsService = SuperMap.Class(SuperMap.ServiceBase, {
if(status === "backbutton") {   cordova.fireDocumentEvent("backbutton");   return "true";
return 'thesis';
case DOMEvents.KEYPRESS:     var charCode = Client.isExplorer ? e.keyCode : e.which;     if (charCode >= 32) {
download(`https:
const Order = () => (     <Layout>
(function () {     'use strict';
for (let selectionParent = editor._variable.selectionNode; !util.isWysiwygDiv(selectionParent); selectionParent = selectionParent.parentNode) {                 if (selectionParent.nodeType !== 1) continue;
ParticleExplorerTool = function (createToolsWindow) {     var that = {};
withProps, } from 'recompose';
length = 1       }
this.__abortChange();                 }
function moveOn(e) {   if (e.width)
case 'Float':         return `${value}`;       case 'Boolean':
function $ext(dest, source, dont_overwrite) {    var src = source || {}, key;
const result = [];       const numSubs = this.template.length - 1;       for (let segnum = 0; segnum <= numSubs; segnum++) {
DEBUG_MODE = !!val; }
imageLoaders[scheme] = imageLoader;     }
complete: function() {         done && done();
r.lastIndexOf('/') + 1, r.lastIndexOf('.')                         ).replace(/[-+._]+/g, ' ')                     ).toLowerCase()
} else {      source.code = source.code.replace(makeTagRegEx(tag), empty);     }
console.log('Error :', err);         }
isDate(obj) {         return typeof obj === 'object' ? this.objectToString(obj).match(/date/i) !== null : false;     }
const onload = (event, element) => {   element.setAttribute("loaded", true);
{         return 0;     }
return callback(err);     }
name: "This is an example test",   tags: [process.env.TRAVIS_NODE_VERSION, 'CI'],   'tunnel-identifier': process.env.TRAVIS_JOB_NUMBER }
});     default:
var closestDate = closestTo(currentDate, closestAvailableDates);          if (closestDate) {
return this.file;  });  Clazz.defineMethod (c$, "autoSelectOnLoad",   function () {
ns.namespace('Core.Router');
let { x, y, circle } = wrapper;  noFill();
var yPos = i * hM + y;                         for (let x = 0; x < wM; x++) {                             var xPos = j * wM + x;                             var xyPos = (yPos * wDst2 + xPos) * 4;
require.mix(this, args); });
type="button">               {this.state.isGoalExpanded ?                  intl.str('show-goal-button') :
throw new Error(`[vuepress] Syntax highlight for language "${lang}" is not supported.`)     }
List.prototype.equals = function (that, equals) {     equals = equals || this.contentEquals || Object.equals;     if (this === that) {
var solutions = [];     for (i=0, l=states.length; i<l; i++) {       if (states[i].handlers) { solutions.push(states[i]); }
function view (state, emit) {   return html`
vAll[i].setZIndex(vIndex++);   } }
codegen.createMacroDirectory = require('./macroDirectory').createMacroDirectory;   importTerm('boolean');   codegen.typeof = require('../../../lib/typeof').typeof;
module.exports = Aria.classDefinition({         $classpath : "aria.storage.LocalStorage",
label: 'Rename',               action: function () {                 tree.edit(selectedNode);               }
actions: {     viewAllBuilds() {       return this.get('routing').transitionTo('builds');
var api_complete = false,             current_range,
for (i = 0; (r = references[i]); i++) {       var element = r.element;
this.emit('drag', this);     }
_.each(IB.FullColourDescriptionMap, function(colour) {         IB.ColourMap[colour.gcolour] = new IB.Colour(colour.gcolour, colour.html, colour.name);     });
import appSettings from 'common/appSettings'; import { clearDecorations } from 'editor/decorations';
obj.account = ['*'];                  else {                     if (tObj.accountscreate) arr.push('create');
.on('exit', function () {         done()       })
context.log(err);       context.done(err, {});     });
for (let y = 0; y < height - gap; y += gap) {     for (let x = 0; x < width - gap; x += gap) {
clone.worldTransform.copy(this.worldTransform);             clone.dirtyWorld = this.dirtyWorld;         },
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-11\/vegmageddon-1353118122.swf",  admin_props : false,
$("button").on('click', function() {    selectOption($(this).prop('name') == "choice--1" ? -1 : parseInt($(this).prop('name').split("-")[1]), getVisibleDilemma());   });
import FooterWrapper from '../../styles/layout/FooterStyles';
return multiReporter; };
const HOST_RE = /^(\[[0-9a-f:]+]|(?:\d{1,3}\.){3}\d{1,3}|[a-z][a-z0-9\-.]+)(?::([a-z][a-z0-9\-.]+))?(?::(\d+))?$/i function parseHostString (hostString) {
onMouseDown: function (evt) {                  if (evt.isLeftMouseButtonDown()) {
return _this3.row(field, key, size);             }
options = {};     }     if (typeof options.mood !== "undefined") {
Sprite.prototype.render = function (target, prepend) {   target = target || null;   prepend = typeof prepend === 'boolean' ? prepend : true;
ß.user.friends                 .remove(this.model, {
export default new Vuex.Store({   state: {
throw new Error(           'Module "' + mod.name + '" required an unknown identifier "' + id + '". ' +           'Available dependencies: ' + JSON.stringify(mod.deps, null, 2)
/\bMSIE 6\./.test(navigator.userAgent);   window['_pr_isIE6'] = function () { return isIE6; };   return isIE6;
form.append("design", new Blob([design], {type: 'application/octet-stream'}, "mydesign.glm"));       if (zip != null){          form.append("design_imsld",zip);
}                 }                 return call.apply(this, arguments);
var l = 2; for (var i = 0; i <= 2; i++) {
var k=-1;   for(i=0;i<=kn.length;i++){     if(kn[i]<=t && t<kn[i+1]){
calculateFee (trs, sender) {     super.library.base.block.calculateFee();   }
}   } else {
warnValidStyle = function(name, value, getStack) {     if (name.indexOf('-') > -1) {
this.onDraw(function () {         ctx.decorator = this.showHiddenCols._decorators[0];
default:         throw new Error('unknown pull_type method');     }
success("Completed export and written as CSV to \"" + config.exportfile + ".csv\".");                     });
text = text.replace($.fn.form.settings.regExp.escape, "\\$&");       return (value.search( new RegExp(text, 'i') ) !== -1);     },
percentagePageFromCfi(cfi){   var pg = this.pageFromCfi(cfi);
let { annotation } = props;
} else {       value = "You must ACCEPT the HIT before you can submit the results.";       inputElement = <input type="submit" id="submitButton" value={value} disabled />;     }
return state - 1;         }         case RESET_COUNTER: {
defaultMessage: 'entries',   },   categorySelectDefault: {     id: 'app.containers.SayingsPage.component.SayingDataForm.categorySelect',
if (selectedStyle && this.selectItemContains(item)) {                         if (selectedStyle.shadowBlur != null && selectedStyle.shadowColor == null) {
class UserStore extends Store {     constructor(flux) {         super(flux);         this.state = {
return 2;    case 'd2':
if (typeof(o.filters) != 'object') {           try {
};     case TYPE.SET_THRESHOLD:
getDefault(index) {      if (typeof index === 'undefined') {        return this.scope.default
.get('/')       .reply(200, { success: true });     var client = new RetryRestClient(restClientSpy);
for (let type of [`half`, `float`]) {             print(`native ${type} Sample(TextureDepth2D<${type}>, sampler, float2 location);`);
this.summaryWhiteList.forEach(function(property) {                 if (metacardDefinitions.metacardTypes[property] !== undefined) {                     propertyArray.push({
var Log = require('../../src/lib/log'); var now = new Date('2013-03-01T00:00:00Z');
switch (state.chargingState) {     case 'Charging': {       const timeToFull = toHoursAndMinutes(state.timeToFullCharge)       return [`Charging at ${state.chargerPower} kW, complete in ${timeToFull}. ${range}`]
modelCtrl.$render = function() {     input[0].checked = (modelCtrl.$viewValue == value);
selectable: true,      set: function () {
Date = function(str){     if(str == 'today'){ str = null; }      var d = str ? new nativeDate(str) : new nativeDate();
switch (v) {       case 'ecma3':           e = '--ecma3'           break
define(function(require, exports, module) {     var SpecManager = require('./SpecManager');
function noop() {} function escapeXml(str) {
element.rotation = angle;        }
$('body').html(data.body);     $('title').html(data.title);
function NextNights(props) {          return (
function findDoc(ts, doc, name) {     for (var n in ts.docs) {       var cur = ts.docs[n];       if (cur.doc == doc) return cur;
$interval(function () {                     saveAnswers($scope, true);                 }, 15000);
contractName: 'system',         pageSize: 105,         hashTagQueries: {             'alarm': 'Alarm eq true',
var TableNode = require(__dirname + '/node/table'); var JoinNode = require(__dirname + '/node/join');
return "P" + pIndex++; }
var overlap = results[ind].response.overlapV     overlap = [overlap.x, overlap.y]     var correction = self.correct(delta, overlap)
function ($scope) {                             $scope.isToggled = false;
throw new Error( 'Invalid resource to report.' );  }
else if (ch == "%") {       stream.eatWhile(/[^,\s()]/);       state.beforeParams = true;
this.inputProperty = null   }
if (disabled) {             gj.tree.methods.disableNode($tree, $node);         } else {
]   for (i = 0; i < singular_indicators.length; i++) {     if (str.match(singular_indicators[i])) {
while (match = this.regexpUnescape.exec(str)) {       value = handleFormat(match[1].trim());       str = str.replace(match[0], value);
export class AnyExcept extends Quantifier {     constructor(tokenTypes) {         super();         this.tokenTypes = tokenTypes;
window.jTool === window.$ && delete window.$; export default jTool;
link: function postLink(scope, element, attrs, controllers) {       var bsTabsCtrl = controllers[1];
modelChangeTgt = new ModelChangeStructure({                 affected:     node2.nodeId,
if (styleSheetsProcessed == styleSheetsToProcess) {                              console.log(_stringify(css));                          }
if( this._propagateEvents && !this.isPropagatingFrom( emitter, event ) ) {                 var propagate = (0, _lodash.once)( function() {                     if( !propagate._hasPropagated && _this._propagateEvents ) {
function model() {     }     model.prototype = $.extend(true, {}, Default, {
loader: 'file?name=${options.dir}[name].html!markdown-loader',                 test: /\\.md$/             }`
} function ensureLoggedOut(silent) {     execSync(buildCommand("logout"), { stdio: (silent ? "inherit" : "ignore") }); }
throw new Error(err);       }
this.sendToDaemon(func, args, cb); }
} catch (e) {     const msg = `There was a critical error loading XEditLib.dll:\n\n${e.stack}`;     logger.error(msg) && alert(msg);     remote.app.quit();
var img = this._createElement("img");                         var done = function() {                             img.onerror = function() {};
beforeEach(() => {     mocks = {       $t: jest.fn(),
if (!schemaVersion) {     let promises = []
console.error(e)          throw e
this.elem.find('.levelup'), this.elem.find('.levelup--number'));   this.pauseOverlay = this.elem.find('.pauseOverlay');   this.tutorial = new app.shared.Tutorial(this.elem, 'latlong', 'latlong', 'latlong');
configService.registryConfig(config);   }
CRUD = require('./../util/crud'),     crud = new CRUD('user'),     verify = require('./verify');
_function: while (_again) {     _again = false;     var n = _x2;
_.each(allBranches, function(obj, name) { branchNames.push(name); });
Create : function (buttonDescr)  {
[{               'mapId': self.map.__pgmId,               'instance': self.__pgmId + '-tileoverlay',               'args': [
elms = document.querySelectorAll('.audit-results *');   for (x = 0; elm = elms[x]; x++) {     elm.removeAttribute('data-style-using');
}     loadPlayerApi() {
app.use(bodyParser.urlencoded({ extended: false }))   return reduce(
var md5 = "${MD5}"
test("Work with a single delegated property", function() {   ok(!dog.get('type'));
var React = require('react'); var cx = require('classnames');
var delayedSpecWalker = require( './delayedSpecWalker' ); var coerceIntoSpec = require( '../utils/coerceIntoSpec' );
var regex = new RegExp(pattern);                         files = files.filter(function(file) {                             return file.name.match(regex);
return spaceship(v.localeCompare(w), 0);     case 'array': {       let vLen = v.length;       let wLen = w.length;
console.error('error:', error.message);     });
isMultiple = this.isMultiple,     indicies;
} catch(ee) {       console.log(ee);
} else {       TagBar.unfocusTagElement($focusTargets.eq(focusIndex));       focusIndex = nextFocusIndex;
import recording from '../../recording'; import feature from '../../utils/feature';
console.error('Only Bash, Zsh, and Fish shells are supported :(') }
appendSequenceItem: function(node) {         var $oid_node = $(node).closest('.deformSeq');         var $proto_node = $oid_node.find('.deformProto').first();
for (var key in obj2) {         if (obj2.hasOwnProperty(key)) obj[key] = obj2[key];       }
} else {    $nextmessageset = $('#messages .user-messages').first();    if (
export const licenses = (configuration, http) => {   const {get, put} = http;   const fn = licenseId => {
let renderKey = ccOption.renderKey;   if (!renderKey) renderKey = ccOption.renderKey = ccUniqueKey;   const ccUkeys = safeGetArrayFromObject(renderKey_ccUkeys_, renderKey);
return false;     }     Binding.create = function (bindingDef, targetScope, attrKey, context) {
element.append(toolbar);             }
restrict: 'A',       link: function(scope, element, attrs) {         var ignore = function(event) {           event.selectionModelIgnore = true;
case 'video':     var n, src, type;
collection = args.OldValue;              count = collection.GetCount();              for (i = 0; i < count; i++) {                  this._ElementRemoved(collection.GetValueAt(i));
})         .catch(err => done(err));     },
var DATE_PATTERN = /^(\d\d\d\d)(\-)?(\d\d)(\-)?(\d\d)$/i;   var GoogleChartsAdapter, HighchartsAdapter, ChartjsAdapter;
, Paginator  ;
init = function() {
let data = response.data;       if(data.hasOwnProperty('wallets')) {
var validations = checkVisibility ? fieldOptions.validations : fieldOptions;     var serverSide = typeof window === 'undefined';     for (var i = 0; i < validations.length; i++) {
}; } KwsMedia.prototype.__proto__   = EventEmitter.prototype;
const {
if (!this.editWindow) Ext4.Error.raise('editWindow config is required');         if (!(this.editWindow instanceof Ext4.window.Window)) Ext4.Error.raise('editWindow config needs to be a Ext.window.Window');
if ( !(error instanceof Error)) {         body = error;
data.user.permissions = [];             }             if(data.user.hotkeys == {empty: "hotkey"}){               data.user.hotkeys = [];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-01\/1294354086-7937.swf",  admin_props : false,
sort: 'Sırala',     sortTitle: '${type}\'ın alt alanlarını sırala',     sortTitleShort: 'İçerikleri sırala',
&& html.toString()     .replace(/ about="[^"]+"(?=[/> ])|<meta property="mw:TimeUuid"[^>]+>/g, ''); }
this.eventEmitter.removeListener(type, listener);     }
expect(received1[0].widget).to.equal(this.widgets.customEvents);         require('raptor-pubsub').channel('customEvents-' + this.id).emit('emitTestEvent2');
Date.getTimezoneAbbreviation = function (offset, dst) {      var n = (dst || false) ? Date.CultureInfo.abbreviatedTimeZoneDST : Date.CultureInfo.abbreviatedTimeZoneStandard, p;      for (p in n) {           if (n[p] === offset) {
_rerenderCb() {     if (this._renderRequestId) {
define(function () {  var restartPlayback = function () {
}) {             const allDirty = rootGetters['entities/allDirty']();
state = 'l' ;             break;           case 65:              state = 't' ;             break;           case 39:
var breakLoop;         for (let i = l; i--;) {             if (breakLoop === null) break;
return E24;         case 48 :
var logger;     var driver = model.load( module, {
throw self.constructor.name + " requires record to pushRecordDetailsView"    }
var sliderWidth = parseInt(style.getPropertyValue('width'), 10);
.catch((e) => {                });
test();       schema = { anyOf: [ schema ] };       test(1, '#/anyOf/0');
var name;                 name = self.target.canonicalName(variables.scope);
debug('%s Table Created',table);       if (createView!=='') {         client.query(createView,function(err){
var children = my_notebooks.concat(user_nodes).sort(compare_nodes);         children = as_folder_hierarchy(children);
import BigNumber from 'bignumber.js'; const { MKR, DAI } = Maker;
DockUtils.flush = function () {         if ( DockUtils.root['ui-dockable'] ) {             this.root._finalizeMinMaxRecursively();
var str = "";             for(var i = this.params.length - 1; i > -1; i--)             {
it('should clean out unsubscribed subscribers', function (done) {     var subject = new Subject();
return false;         subscript = script.subscript(s, lastSep);
return how.autoplay != false ? play() : play;  function play () {
canvas.getContext("2d").putImageData(img2, 0, 0);  }
this.initialLoginAndLoad();   }
Ext.define('devilry_subjectadmin.model.Subject', {     extend: 'Ext.data.Model',
console.log('Added image tile layer to world'); });
try {         await storage.set({rules});         return rules;
function writeOutput(result, cb) {       if (!options.output) {
console.log('you can find namuwiki database on [[나무위키:데이터베이스 덤프]] document') main()
var hookAfter;    describe('pluckQuery', () => {
return true; }
let hostName = null;     if (!vipPortError) {       hostName = (
expect(err).toBeDefined();       });
while (modulePath.indexOf('/./') > -1) {    modulePath = modulePath.replace(/\/[.][/]/g, '/');   }
setValue: function(options){             var hours, i, item, l, minutes, period, recur, temp;             if(options.startDateTime){
var SC = 1 + 0.045 * a_Cp;   var SH = 1 + 0.015 * a_Cp * T;   var RT = -2 * RC * sin(radians(2 * d_ro));
} catch (err) {         console.error(`[show_sha] could not fetch refspec for ${repo_path}, using fallback`, err)         refspec = 'n/a'     }
$('a').attr('title').should.eql('Google link');     $ = cheerio.load(link('Click here to Google http:     $('a').attr('href').should.eql('http:
var EventEmitter = require('events').EventEmitter; var path = require('path');
});       if (!!movement.left || !!movement.top) {         this._applyTransform3d(element, movement);
var defcols = {};   if(this.from) {    this.from.forEach(function(fr){
var Map = require('immutable').Map var Store = require('../src/store')
var setScales = function(chart, type){
var self = this;       var login = Ember.$("#application").find(".assignees .is-flying")         .data("assignee");
metricsAtlas = this.context.measureText(atlasLabel[ctr]);                 if (metricsAtlas.width > atlasLabelWidth) {
}     var tokens = $('#tokens button');
var Mouse = require('./model/Mouse'); require('./model/Mice'); var MiceAppView = require('./view/MiceAppView');
+ unicode.packages.Nd         + unicode.packages.Pc + "\\$_]|\\s])+", "g"     );
groupKey = item.u+":"+item.v;             cellGroup = null;             if (cellGroupsMap.hasOwnProperty(groupKey)) {
}             case 'S':
term.bold.red('\nHint: did you remember to install FFmpeg with x264 support?\n')     reject(err)   })
it("move should be 1 ", function () {              const stemGroup=file.createGroup('pmc/Trajectories');
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[49],{
}                                     }).catch(chalk.red(console.log));                                 }));
import Normalizer from './route-recognizer/normalizer'; var normalizePath = Normalizer.normalizePath;
return changeConnectionState(state, action.payload.connectionUri, won.WON.Closed);         case actionTypes.messages.openMessageReceived:
throw e && e.stack ? e.stack : e;     }
exports.download = function(req, res) {   var headers = {     "Content-Type": "application/force-download",
assert(sum(sum(one, two), three) === sum(sum(two, three), seven)); } catch (e) {     console.log(e.message); }
}; const FILE_TYPES = Object.keys(LOG_TYPES); const DAY_MILLISECONDS = api.common.duration('1d');
var first = false;    var loop = function(data) {     if (first) {
},   willDestroy: function() {     this._ov_teardown();     this.set('viewState', 'culled');     var key = this.get('keyForId');
if (regs[i].signals.any_one) {       result.push(terms[i]);       continue;
, colors = require('colors')   , tb = require('timebucket')
for (var i = 0, n = info.length; i < n; i++)           if (typeof info[i] !== 'string')             unpack(obj[i], info[i]);
var isStatic = false,    handler;   if (typeof Handler === 'function') {
});     it('activateFogOfWar works', () => {       const fogOfWarModule = Object.assign({}, fogOfWarMod);
getPerm = function(perm){    if (isNaN(parseInt(perm, 8))) {     var mode_array = perm.split('');
throw "GetUserToEnterExistingPasswordWithCB called but self.passwordEntryTaskMode not .None"    }
if (typeof process !== 'undefined' && process.env.STREAM_URL && !apiKey) {     var parts = /https:\/\/(\w+):(\w+)@([\w-]*).*\?app_id=(\d+)/.exec(       process.env.STREAM_URL
className={className}>         {children ? children : (           <span>
IOWA.webglGlobe.ShaderProgram.prototype.link = function() {   if (!this.vertexCompiled_) {
self.locked = get(featureOptions, 'locked', false);     self.membersCount = get(featureOptions, 'membersCount', null);     self.dateStart = get(featureOptions, 'dateStart', null);
isObject: function(obj) {   return !Ember.isNone(obj) && Ember.typeOf(obj) === 'object' && obj.constructor === Object;  },
} else {         last_trade = s.my_prev_trades[0]       }
errorout(event, instance) {                 event.stopPropagation();             }
app.all('/services/vector-tiles/dataset', flow.define(function(req, res) {   this.args = {};
value: newValue    }, null, !notAsNotification);   });
for(i = 0; i < cleanedPacketArray.length; i++) {   var origin = cleanedPacketArray[i].origin;
debugflag.should.equal(options.debug);       options = {         debug: undefined
], function(Controller, formatter) {  "use strict";
goog.net.XhrIo.prototype.getResponseText; goog.net.XhrIo.prototype['send'] = goog.net.XhrIo.prototype.send;
var SIGNALING_SERVER = 'https:
function make() {   var newrecord = component.slice();
var took = end - start;                 if (took >= threshold) {                   AlertService.warn('Loading cluster information is taking ' +
if (count)                 result.push(['count', count ? count : null]);             return result;         },
function execute(id, payload) {     const protocol_re = /https?:\/\
};         }         bindingPath = tsBinding.path.parentPath;
case 'boolean':           return value === true || value === false         default:
};     handler(req, null);   });
return detail; });
if((this.changeDelta)>1){     this.$fastTextDelta = 0
else if (ruleType === "COMPOUNDRULE") {     numEntries = parseInt(definitionParts[1], 10);
this.proxy.listen(this.proxy_port, block); }
import layout from '../templates/components/icon-facebook';
import React from 'react';
Process.prototype.startEventLoop = function() {         runtime.control._frame = 0;
import HelpButton from '~/components/HelpButton';
while (wrongWord) {                         index = text.indexOf(word, currentCursor + 1);
var force;    return function( delta ){
return sendNewPostToServerSuccess(state, action);         case actionTypes.SEND_NEW_POST_TO_SERVER_FAIL:             return sendNewPostToServerFail(state, action);
while (dfsList.length > 1) {       const node = dfsList.pop();       node.parent.total += node.total;
{             var result = self.loadModule(dep);
} else {                 ctrlKey.classList.remove('active');             }
});             },             parse: function (response) {                 return response.data;
}     return KeyMap;
constraints.min = Number(this.minimum);      if (!isNaN(parseInt(this.maximum)))    constraints.max = Number(this.maximum);
}   get_permalink(router) {     if (this.key) {
} else if (this._calculateMoveDirection() === -1 && this._checkRangeBarMoveRange()) {       for (var i = 0; i < this.index.length; i++) {        this.index[i] -= this.defaults.step;
if (!runtime.local && !runtime.environment) {             output.error('invalid runtime specification');             this.valid = false;
window.viewModel = viewModel;     $("body").loadTemplates({       bannerTemplate: "/ssp/MyGPS/templates/banner.html",       footerTemplate: "/ssp/MyGPS/templates/footer.html",       guideTemplate: "/ssp/MyGPS/templates/guide.html"
import { View, StyleSheet, Text } from 'react-native'; import React, { Component } from 'react';
var e, el, m, ml, fm, fml, element, material,   v1x, v1y, v2x, v2y, v3x, v3y, v4x, v4y;   if ( this.autoClear ) {
email: /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/,   url: new RegExp('^(?!mailto:)(?:(?:http|https|ftp):   hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,
if (container === window) {     fold = documentTop;    } else {
return '[' + typeTransformer(matches[1]) + ']';     case 'list':
return "ns="+ this.namespace +";i="+this.value;         case NodeIdType.STRING:
import { Permissions } from './permissions.js'; import { PermissionUtils } from './permissionUtils.js'; import { LoggedInMixin } from 'meteor/meteor-gazelle:method-mixins';
var testDocDefinitions;   beforeEach(function() {
success: function(data){          if(data.status==="success"){
if (d3.select(params.root+' .demo_group').empty()){
var input = "while echo 1 && do blah; done";     parse(input)
return _deployApp(c);
var tokens;  if ("Molecule".equalsIgnoreCase (localName)) {
$('#siteuserNotify').after($ul);                         bind_notify_click_event();                     }                     else {                         $('#siteuserNotify').text(0);                     }                 },
if(options.parameters){       href += '?';
onload: {a: handlers.EventAttributeHandler},      onprogress: {a: handlers.EventAttributeHandler},      complete: {p: properties.AssetComplete},
ngShow: ngShowDirective,             ngStyle: ngStyleDirective,
template.route(/\.md/, function (params, next) {   next(); });
if (hasHref) {       src = hasHref       key = 'href'
if (err) {                 console.log('Failed to delete post', err);             }
}             } catch (e) { console.error('ensureImageResourceHttps:', e); }
exports.buildFlags = function(env, flags) {     flags.context = env.contexts[0];     return flags;
const launchPuppeteer = async () => {  browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] })
normalize(bbox, 0, bbox, 12);                 d1 = dot(normal, bbox, 12);
Promise.resolve(this.insertBefore(newChild, oldChild)).then(function () {
function loadFile() {
var holdCtx = holdCanvas.getContext('2d');
scrollFunc() {       dispatch(loadMoreCharts());
return (
}                         return;                     default:                         return;                 }
}     return (
component: {       this.fs.copy(
if (settings.showHome !== false) pageArray.unshift(settings.homeTitle);   crumbURL = bcpie.globals.currentDomain;
];      if(tokenKinds.length <= 2) {          result += generateIfKindCheck(child, tokenKinds, indent);
select.el.querySelector("li[data-tid='" + tid + "']");     if (task) {       result += task.getAttribute('title') + ' . ';
if (process.env.TRAVIS) {     console.log("fetching remote")     https.get({host: credentialHost}, function(res) {
pubads.addEventListener('slotRenderEnded', function(event) {         if (event.isEmpty) {
function dfu() { } dfu.findCompatibleDFU = function() {
E2E4LoadButton.prototype.loadData = function () {                     this.ngListService.normalizedService.reloadData();
error.should.have.property('code', 'INVALID_TYPE');           error.should.have.property('message');           error.should.have.property('path', [ 'swagger' ]);
})     } else {       self.validationErrors.showAllMessages()     }
get: function () {         return this.data.sleepSpeedLimit;
var cookieValue = goog.net.cookies.get(eightball.Cookies.Keys.SOUND_EFFECTS, eightball.Cookies.CookieOnOffEnum.ON) == eightball.Cookies.CookieOnOffEnum.ON;   this.m_isSoundOn = cookieValue;
})             return data         }
import attr from 'ember-data/attr'; import { gravatarImage } from '../utils/urls';
initVal(_data, _hTmp, _comp) { }     flush() { }
delete params[c.key];             } else if (Type.isUndefined(params[c.key])) {                 return false;
await add.execute(argv);    break;   case "build":
assert(sum(one, two, three) === seven); } catch (e) {     console.log(e.message); }
{                 var trueNodeBox = DOM.getAncestorByClass(nodeBox, "nodeBox");                 CSS.setClass(trueNodeBox,'search-selection');
Account.create({name : 'Account ' + i, email : 'account' +i + '@gmail.com', age : i}); }
App.moduleMap({"home":"home.js"}, ''); })();
vChild._computedHeightTypeNull ? vChild._resetRuntimeHeight() : vChild._applyRuntimeHeight(vChild.getHeightValue());     }   } }
optionsDOM.style.top = "200px";
$scope.trainings_under_this_process = getNoOfTrainingJobs(data);         $scope.available_models = getAvailableModels(data);
expect(body._id).toBeDefined();             server.expectSuccess(body);
];         glObject.draw(cameraParameters, false);     }
var __executed = /a[a-z]{2,4}/.exec(new Object("abcdefghi")); var __expected = ["abcde"]; __expected.index=0;
if (options.backdrop) {           if ( $destroy ) options.backdrop.remove();           else              $animate.leave(options.backdrop);
this.name = "TransitionAborted"; } export { Transition, transitionByIntent, logAbort };
return fromClassForDoc(ampdoc, 'action', ActionService); }
}; inherit(contourFeature, feature);
return function(value) {          console.log('value: ', value)
this.status = 400; }
export function* getAgentDocument(payload) {   const agent = yield select(makeSelectAgent());
tagInsertMap.sort(function(a, b) {     if (a[0] > b[0]) { return 1; }     if (a[0] < b[0]) { return -1; }     return 0;
module.exports = () => {   return {
{                 "name": "京东中间页跳过",                 "src": "^http:                 "dst": "http:
var status = response.status;                 var details = response.data;                 if (status == 200) {
default:            basis.dev.warn('Unknown config property `' + key + '` for app, value:', value);       }
import React from 'react'; import { connect } from 'react-redux';
if (argv.bbox) {         argv.bbox = argv['bbox'].split(",").map(Number);     }
endOffset = denormalizeOffset(endOffset, $scope.textContent);   while ((node = it.nextNode())) {     let tc = node.textContent;
hasLegends = util.array(this._mark.def.legends).length > 0,       i, ilen, j, jlen, group, legend;
throw new Error("An url is required for loading media");   }else{
constructor() { super('yml'); }   invoke( rez ) {     return YAML.stringify(JSON.parse( rez.stringify() ), Infinity, 2);
else e.vectorContext.drawGeometry(geom);   } catch(e) {  }   if (imgs) imgs.setScale(sc);
return;
case 'isPaused': {         return !this.isPlaying;       }       case 'completeLoopCicles': {
if (err) {       pgdone();
indexLayer: function (layer) {         if (this.options.indexing !== undefined && !this.options.indexing)             return;
if (!$this.hasClass('tb-notes-activated')) {             $this.addClass('tb-notes-activated');
var from = diffs[i].from;      var fromLength = from.length;      var fromTree = this.root;
return function(){
function deleteDonor() {         util.ajax({             url: "/api/donor",
$scope.delete = function (customServiceSelected) {
function rebatchCommands(primitive, context) {         if (!primitive._batchDirty) {             return false;
Array.prototype.push.apply( target, array ); }
import DisableModal from './DisableModal.vue' import Styleguide from '@human-connection/styleguide'
selectedRows[0] = e.target.dataset.rowid;       }       for (let key in dataIndices) {         this.jsonData[selectedRows[0]][key] = dataIndices[key];
isEmpty() {       var isEmpty =     (this.liveBuffersOpaque == null || this.liveBuffersOpaque.length == 0) &&      (this.liveBuffersTransparent == null || this.liveBuffersTransparent.length == 0) &&
} } JUnitReporter.prototype.TPL_PATH = path.join(__dirname, 'tpl', 'junit_report.tpl');
import FactoryMaker from '../../core/FactoryMaker.js'; function FragmentExtensions() {     let boxParser;     function setConfig(config) {
var box = {                 width: opts.width
componentWillMount() {         fetch( 'http:             .then( results => { return results.json(); } )
var query = $location.search().q || '';         var facet_query = new RegExp(facet_id + '\\:"' + facet_value + '"', 'i');         if (query.match(facet_query)) {
return div.innerHTML; }
__handleResizeInternal: function () {                 setTimeout(function () {
constructor(key, value) {     super(`Validation failed for ${key}: ${value}`);   }
if (file.attempts < options.maxvalidateattempts) {
prev,     ini = pos = this.padding,     pad = this.pad,     i,
fetchUrl: url,         requestHeaders,         requestBody: data     } = getters.inputData;
function setURLProtocol (err) {       if (err) console.log.error(err.message);       console.log(protocolKey);
console.error(e);     throw e;   }
initTypeProto(Sequence, 'ceylon.language::Sequence', $init$Sequential(),             $init$Container());     }
return text             .replace(/(^|[^!])!{2}($|[^!])/, '$1!$2')             .replace(/(^|[^!])!{4}?($|[^!])/, '$1!!!$2');     }
this.setContext(gl); } WebGLFastSpriteBatch.prototype.constructor = WebGLFastSpriteBatch;
}  return null; };
const util = require('../lib/util.js'); module.exports = React.createClass({  displayName : 'Gridster',
for (let i in tags) {         let tag = tags[i];         doc[tag.title] = doc[tag.title] || [];         doc[tag.title].push(tag);     }
return this.varstmt();       case '{':
dofRadius: 1,   dofDepth: 6.76,   ssao: false,   ssaoIntensity: 5,
var hasValueHelper = require('../utils/hasValue.js') var transformPathToArray = require('./../utils/transformPathToArray.js')
return parts.join('\n');     }     _getCanonicalizedAmzHeaders(headers){
Transport.prototype.poorConsensus = function () {  if (__private.broadcaster.consensus === undefined) {   return false;
const viewUrl = Versioning.lastLoaded.view.url;             const reg = /\/([^/]+)\/view\.json/;             const m = reg.exec(viewUrl);
throw new Error('Do not drop the production database!!!!!'); }
cancel: function() {       if (this.content) {
else if(type === 2) {                     days = this.$element.find('.month-days').select('selectedItem').value;                     pos = this.$element.find('.month-day-pos').select('selectedItem').value;
return;   }   this._iconThemes = null;
} else {         window.localStorage.removeItem('config.default_app_id');         app_id = is_new_app ? 16299 : (domain_app_ids[getCurrentBinaryDomain()] || 1);     }
defaults_,       data_,
return folders.concat(relReqStr.split('/')).join('/'); }
load(absUrl, function(svgString) {               inject(img, svgString, absUrl, options);
import Z from '@effectful/generators'; function a_1() {   return Z.yldM(1, a_2); }
var ry = data[i++];                     var startAngle = data[i++];                     var endAngle = data[i++] + startAngle;
if (/\.feature$/.test(fileName)) {                          editor.getSession().setMode("ace/mode/gherkin");
const files = coverage[0].files   return files.map(file => {
throw Error('CodeFlask expects an object containing options as second parameter')     }
module.exports = function(socket, rf433mhz, dbFunctions){    var clients = [];
var main = modules.main;        (main.default || main)(data.request);
throw new Error("Value for " + data.val + " is bigger than " + data.max);   }
if(!_.isE())    return _.register(new iChart[_.is3D()?'Coordinate3D':'Coordinate2D'](_.get('coordinate'), _));   }  }
self.request.open('GET', self.url, true);       self.request.withCredentials = true;
process.addListener("exit", function () {   assert.equal(completed, 2);
_.each(files, (path) => {     const name = path.replace(/[a-z0-9/_.]*themes\     list.push(name)
if (n === p.left) {       g.left = p.right;       if (g.left) { p.right.parent = g; }       p.right = g;
$scope.workflows = data;         });
var toHexString = function(byteArray) {             return Array.prototype.map.call(byteArray, function(byte) {
console.log(new Date(date) + ' Created pings for check "' + check.name + '"');           }         },
stringify:   this.stringify,     label:       this.label   }) + '\n';
reportError("An error occurred!", e);   process.exitCode = 1; });
minZoom: 0,         maxResolution: 40075016.68557849 / 512
wrappedItem = wrap(list[i]);       if (!deep && (root = getTreeScope(wrappedItem).root)) {         if (root instanceof scope.wrappers.ShadowRoot) {
MediaStreamTrack.getSources(function (sources) {    expect(sources.length).to.be.at.least(1);    done();   });  });
layers: [baseMap.tileMap.prop_tilemap],     target: element    };
devConfig.devServer = {}; }
obj = new AX('ShockwaveFlash.ShockwaveFlash');        } catch(e) {          obj = null;        }
const CrowdsaleDAO = artifacts.require("./DAO/CrowdsaleDAO.sol"); const DAOx = artifacts.require("./DAOx.sol");
jsoneditor.ContextMenu.prototype._isChildOf = function (child, parent) {     var e = child.parentNode;
};                 Scanner.prototype._next = function () {
}; if (prod) {
Meteor.call("deleteItem", this._id);             toastr.success("Delete Item", "Item deleted");
return content     .replace(/\sdata-reactid="\S+"/g, ''); }
System.register(['./generated-chunk.js', './generated-chunk2.js'], function (exports) {  'use strict';
const remainingStack = stackProcessed.slice(level + 1)     return remainingStack.reduce((val, proto)=> proto.lift(val), val)
var mongoose            = require('mongoose'); var historySchema = mongoose.Schema({
var cancelMove = function(){                           Ember.$(ui.sender).sortable("cancel");
}       break;     case 'mouseup':       stage._mouseEvents.push('mouseup');
throw "INVALID_STATE_ERR: send flag is true";     }     headers[header] = value;
Aerospike.prototype.exists = function exists (key, policy, cb) {   if (typeof policy === 'function') cb = policy   this._currentClient.exists(key, policy, function existsCb (er, metadata, key) {     if (er.code !== 0) {
var startBlock, endBlock, copyRoot, contents, parent, newContents, node;          if ( !isEdge && clipboardData ) {
const result = await luis(config, serviceManifest, args, requestBody);     process.stdout(JSON.stringify(result, null, 2)); }
if (err) {   end(1);  }
throw 'Store must be a subclass of Settings.Store';   }   if (this.__stores__[name]) {     throw 'Duplicate store name: ' + name;
FILE_TEXT_SETTINGS: 'file_text_settings',   FILE_EXECUTABLE: 'bat_exec', };
const COLON_OR_SLASH = /[:/]/g const CONVERT_MAP = {":": "/", "/": ":"}
var CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin; var HtmlWebpackPlugin = require('html-webpack-plugin');
} for(var x in Date.prototype.getUTCSeconds) {   if(x === "length") {     $ERROR('#2: The Date.prototype.getUTCSeconds.length has the attribute DontEnum');
modified_state.f[dest] = { t: 'c', c: modified_state.c[src].pop() };         } else if (my_move.t == 's2s') {             modified_state.c[dest].push(modified_state.c[src].pop());
$('rg-modal .overlay').click()     $('rg-modal .modal.visible').length.should.equal(1)     spyOnClose.should.not.have.been.called
.promise()).Responses[tableName]
exists = false;   try {
else {             for (i=0; i < points.length - 1; i++) {                 if (x >= points[i][0] && x < points[i+1][0]) {
;(function($) {  'use strict';
});   it('provides \'modifier\' attribute', () => {     const select = element.querySelector('select');
(function(oipf) {         oipf.channelList = {};         oipf.channelList._list = [];         oipf.channelList._list.push({             'id': '0',
it('element has a thumbnail', function () {
var line = this.blockToCode(block);     if (Array.isArray(line)) {
description: "Reload specific commands",   usage: "reload <command>",   param: "",
if (this.graph == null) {         this.setupGraph(t);
const width = event.posX;     let latlngLabelPrecision;
} else if (err) {           console.log('balUtilPaths.scandir: readdir has failed on:', options.path);
'post-special': [],
import TmSessionImportSuccess from "common/TmSessionImportSuccess" jest.mock(`scripts/google-analytics.js`, () => () => {})
return `https: }
this.fireEvent('store');   if(this.storePrevented) {     return;
var privateDict = [];     for (i = 0; i < priv.size; i++) {       privateDict.push(aStream.getByte());
for (var i = 1; i < querySegments.length; i++) {           urlComponent = decodeURIComponent(querySegments[i]);           var itemsType = null;
return !!metadata && this._entities[metadata.ref] === entity;   },
{                 angular.forEach(obj.feature, function (subvalue, subkey)                 {
}                 log("### after for: " + stringOutValue);                 resolve({stringOut: stringOutValue});
if (node.nodeType == 3) {    var tempNodeVal = node.nodeValue.toLowerCase();   var tempWordVal = word.toLowerCase();   if (tempNodeVal.indexOf(tempWordVal) != -1) {
define(["dojo", "dijit", "dojox/main", "dijit/_Widget", "dijit/_Templated", "dojo/fx", "dojo/window"], function(dojo, dijit, dojox){
return TD.Direction.up;         case '>':
asyncLoader.addCallback(new paella.DictionaryCallback(this.initParams.dictionaryUrl));      asyncLoader.load(function() {
loadedLocales : null,
chartModel.noDataMessage = cowc.CHART_LOADING_MESSAGE;         } else if (contrail.checkIfExist(chartConfig['noDataMessage'])) {                      } else if (error) {
TrainingCustomSlideNode.save(spec_node, onSaveFinished);                     break;                 case "BranchNode":                     spec_node.node = new_trainingtreenode;
logger = require('morgan'),     service = require('./service'),
toWireType: function(destructors, o) {             if (null === o) {                 return 0;
for (i = 0, _len = Math.min(limit, sorted_corrections.length); i < _len; i++) {     if (!self.hasFlag(sorted_corrections[i][0], "NOSUGGEST")) {
assertEventListNotEmpty = (list, passedMessage, defaultMessage) => {   const assertionMessage = createAssertionMessage(passedMessage, defaultMessage);   if (!Array.isArray(list) || list.length === 0) {
update.activeTracks[i].artists = [];       for (let j = 0; j < this.activeTracks[i].artists.length; j++) {        update.activeTracks[i].artists[j] = {
element.remove();         done && $timeout(done, 0, false);       },
function isInteger(value) {     return /^(0|-?[0-9][1-9]*)$/.test(value); }
var TestScheduler = Rx.TestScheduler,     SerialDisposable = Rx.SerialDisposable,
it("should assert true", function(done) {     var example = Example.deployed();     assert.isTrue(true);
console.log(e);     data = {error: true};   }
class BaseDirectorService extends BaseService {   constructor(plan) {     super(plan);     this.plan = plan;
VolumeMenuButton.prototype.createEl = function(){   return Button.prototype.createEl.call(this, 'div', {     className: 'vjs-volume-menu-button vjs-menu-button vjs-control',
Dom(function () {                  result.appendTo(document.body, true);              });
var nbVerts = verts.length;                     for ( j = 0; j < nbVerts; ++j )                         vertices.push( verts[ j ] );
this._header = null;   }
throw new Error("Value for " + data.val + " is smaller than " + data.min);   }
if (process.env.FORCE_SSL) {     app.use(enforceHttps({
buffer[i] = 0xff;   }   for (i = 0; i < num_macs; ++i) {     mac_buffer.copy(buffer, (i + 1) * num_mac_octets, 0, mac_buffer.length)
col = frm.append("div").attr("class", "col");
}); } util.inherits(UserStream, EventEmitter);
},         link(scope) {             scope.pages = [];
},         resolve: (_srource, { role }) => {             const result = getUsers();
import React from 'react' import styled from 'styled-components' import {Helmet} from 'react-helmet'
function handleChangePassword(req, options, strategy) {  logger.debug("handleChangePassword");
var pid = receivers[i];           a = a_shares[pid];           b = b_shares[pid];           c = c_shares[pid];
commentText += text;     });
import SparklinesSpots from './SparklinesSpots'; import SparklinesReferenceLine from './SparklinesReferenceLine';
const path   = require('path'); const env   = process.env;
var street = getStreet()
$scope.riskTypeDictionaryDatas = JSON.parse($scope.data.riskTypeDictionaryDatas);  });
import React from 'react'
);         break;       default:         throw new Error('Should not reach here');
if (err != null) { cb(err); return; }           if (isEmailVerified) {             self.saveAccount(email, cb);
if (this.mxOpts.custom) {         dnsRecords = dnsRecords.concat(map(           this.mxOpts.custom.filter(custom => custom && custom.target !== ''),
return new PodioErrors.PodioBadRequestError(response.body, response.status, request.url);       case 401:
debug('%o', results)   if (results.every(result => result.success)) return
function getdata(data) {             if (!!about[data.key.split(":")[0]] && !!about[data.key.split(":")[0]].symbolToName) {                 let requestOptions ='',url = '';
if (typeof config.facetsCustomizer === 'function') {         var add = function(property, label) {           derivedFacets.push({value: property, label: label ? label : localize(property)});
zi = new Array(n-1)     var r = bound(n), t, c     for(i=0; i<n-1; ++i) {
} } startwebsocket_manualFiles();
const CodeBlockRequired = new RegExp('(</code-block>)', 'g');       if (CodeBlockRequired.test(parseHTML)) {
expect(Kefir.zip([a, b, c])).to.emit([[1, 0, 3], [4, 2, 5], [6, 9, 8], '<end>'], () => {       send(a, [1])
deleteAll: function(args) {           opalModel.$delete_all(opalHash(args));         }
}         break       case 'config':         log.debug('rendering config screen from unlock screen.')
return;     }     for (let i = 0; i < this._tabRects.length; i++) {
return undefined;  for(n in TiddlyWiki.standardFieldAccess) {   if(n == "tiddler")
QUnit.test( 'Sampler', function () {             var keys = [];
export const convertToGrayscale = pixels => {
}); } server = buildServer().listen(port);
case RECEIVE_QUERY:       return action.query;     case CLEAR_QUERY:       return null;     default:
return polygons; }
function dockerBuild(done) {      spawn('docker', ['build', '-t', 'executor', '.'], spawnOption)   .on('exit', (code) => {
function chalk(...args) {  return args }
import won from "../won-es6.js"; import { connect2Redux } from "../won-utils.js";
currentVersion = _.omitBy(currentVersion, function (i) {           return i != null && typeof i === 'object' && !(i instanceof Date);         });
notifyChanges(this);     }     function notifyChanges(state) {
if (err) return submit.show()       window.location.href = "/world.html#" + (username !== 'anonymous' ? username : '') + '/' + worldName
var Promise = Ember.RSVP.Promise; var PromiseArray = Ember.ArrayProxy.extend(Ember.PromiseProxyMixin);
else {     searchParams = { _id: req.params.id }    }
const arrayify = require('array-back') const ExplainStream = require('./explain-stream')
return url;     }     function getStyleString(styleObj) {
} from 'redux-immutable'  import {      fromJS  } from 'immutable'
tree.traverse_and_compute(_.noop, "pre-order", root_node, function(n) {     if (!tree.is_leafnode(n)) {       var bs = _.isString(n.bootstrap_values)         ? +n.bootstrap_values
cms.fillPath = function(data, path, list) {  path = ensureArray(path);
} else {     primary = {region: primary[0], table: primary[1]}; }
case "json":                   d3.json(this.service_path + "/getLatestRevision.php?vis_id=" + elem.file, setupTimelineVisualization);                   break;
case "radial":      var dx = pt.x - fill.cx, dy = pt.y - fill.cy;      o = Math.sqrt(dx * dx + dy * dy) / fill.r;      break;
it('should update selected (first) row', function () {                          runTest(scrollSettings,
var cldbid = response.client_database_id;                     cl.send("servergroupaddclient", {sgid: wantedrankid, cldbid: cldbid}, function (err) {                         if (typeof err !== "undefined") {
CLI_ANDROID_SDKMANAGER,     getAppVersion,
this.timeStamp = Date.now(); }
Template.sidebarItem.onCreated(function() {   });
expect(actual).toMatchSnapshot(); });
printBarcode: function(data, type, settings){     settings = settings || {};
HTML_ATTRIBUTE: /(^|\s)([\w-:]+)(\s*=\s*("([^"]+)"|'([^']+)'|(\S+)))?/ig,         CSS_SELECTOR: /([-_.#:\w]+(?:\s+)?[{,>])/g     },
for (let key in form) {       if (form[key] === true || form[key] === false) {
assert.fail("Should have thrown an error");    } catch(err) { callback(); };   });
return list(appId,envValue, cb);       case "unset":
function updateDependents(itsPath, alwaysRemove) {     return function(doc, next) {       if (!doc) return next(null)
}     if ( vars.dev.value ) print.timeEnd("focus labels")   }
var filters = require('../src/filters') var data = require('./data')
}        function draw (offset) {
parts[2] = text;                 subtitleArray[videoid - 1].push(parts);
filter (predicate) {     return this.prioritized.filter(predicate)
}         return items;     };
},   noResults: function (data) {    var nada = true;
]},    {kind: Item, components: [     {kind: Img, src: {      'hd' : 'http:
that.screenName = that.screenName || that.username       that.id = uuid.v4()
description: inKindDescription || "",     paymentMethod: ""
},         getSetAtb: (atbSetting, setAtb, callback) => {             return new Promise((resolve, reject) => {                 var xhr = new XMLHttpRequest();
itemCodes.lastIndexOf(EXPECTED_SUFFIX) !==             itemCodes.length - EXPECTED_SUFFIX.length) {         throw Error('Invalid search query url fragment for ' +                     itemsType + ': ' + urlComponent);       }
})     if (d.length) {       if (d[0].password === userItem.password) {         const now = new Date()
import React from 'react'; import { Components, registerComponent } from 'meteor/vulcan:core';
render() {     const { id, name, creator, description, image } = this.props;     return (
return (this.bookmarks) ? this.$q.when(this.bookmarks) : this.$http.get(this.URLS.FETCH).then(this.cacheBookmarks.bind(this));   }
static get refreshToken() { return 'refreshToken'; };     static get authenticatePlugin() { return 'authenticatePlugin'; };
render (texture, width, height) {     let gl = this.gl;
logs.push(<li key={i}>{this.state.logs[i]}</li>);         }         return (
}         var bboxdims = model.GetBody(0).GetBoundingBox();
copyTo: function(dest) {         dest.x = this.x;         dest.y = this.y;         return dest;
function exists(changes, version) {   const escaped_version = version.replace(/([.-])/g, '\\$1');   const regexp = new RegExp(`\r?\n## ${escaped_version}\r?\n`);
for(i=0, l=pattern.length; i<l; i++) {             pattern[i].latLng = map.layerPointToLatLng(pattern[i].pt);
for (let name in translate.keys) {              opts.keys[name] = opts.keys[name] || translate.keys[name];     }
removeSub: function (name, subName, options) {       if (typeof name !== "string" || name === "") {         return "";
item.opacity = parseFloat(value, 10);    break;   case 'visibility':    item.visibility = (value == 'visible') ? true : false;
t++;     createTiddlyText(place,msg[t].template.format([Math.round(v/msg[t].unit)]));    }
const bar = function (options, serie, coordinateSystem) {   if (isObject(options.grid) && !Array.isArray(options.grid)) {     console.log(options)   } else if (Array.isArray(options.grid)) {
});         break;       case 'batchGetRow':         request = new protos.BatchGetRowRequest({
.waitForInputText(selector, input);     });   }, };
else {cb ();}                 }, function () {exit (0);});             }
focusChanged: function(event) {              this.hasFocus = $(event.currentTarget);
throw new Error('We need an icc to continue with this operation');   }
for (var i=0, tx; (tx=this._queue[i]); i++) {     if (~tx.submittedIDs.indexOf(id)) {
for(;;) {             len = seqs.length;
'publishToEBSD-caption': '',   'attributes-caption': 'Возможные значения',
function outputToFile(flags) {    var args = toArray(arguments);
img.src = _resizeCanvas.toDataURL("image/png"); }
onChange (_, changes) {     console.log('--onChange--: ', changes)   }   onAttributesChange (_, changes) {     console.log('--onAttributesChange--: ', changes)   }   onCursorActivity () {
new CSSModalGallery(); new CSSModalHtml5video(); new CSSModalMaxwidth(); new CSSModalResize();
extension: defaultFiles,     content: /(['|"]?password['|"]? ?[:|=] ?['|"].*['|"])/,     caption: 'Potential password in file',
for(var i = 0 ; i < len ; i++ ) {     this.openItems[collection.content[i]] = this.$.items.createComponent(      { kind: "TamTam.Item", name: collection.content[i] },
for ( var i = 0, l = storages.length; i < l; i++ ) {             if ( this[ storages[ i ] ] ) {                 storage = storages[ i ];
if(relationship.kind === 'belongsTo') {
this.stopwatch.stop();   } }
key: 2                     }, [api_text("Manually Imported Template")])];                 }
}   function handleResize(){    if (!App.isPlugin) {
i; const REG_APO = /'/g; const REG_COLUMN = /^(!{1,}|\s)*/; const REG_COLUMN_CAST = /\[|\]/g;
export default function toStlString (CSG) {   var result = 'solid csg.js\n'
angular.module('umbraco.resources').factory('sectionResource', sectionResource);
bot.on('message', function (event) {      switch (event.message.type) {   case 'text':
fromObjects: function(objects, options, callback) {       options = (options !== undefined ? options : {});       var config = {};
if (numStr.indexOf('e') !== -1) {     formatedText = numStr;   } else {
.then( function(result)   {    accepted = new Error("this should not have been called");   })
return _items; }
const childArgNames = Object.create(argNames)         childArgNames['end'] = true
item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;               if ( angular.equals( ctrl.items[0], item ) ) {                 return;
export default ({ list, onEditTunnel, onSaveTunnel, onAddTunnel, onDeleteTunnel }) => (   <main className="window">
case 'h':
populate: function(model){         this.options = model || {};     }
}     $.bindingAdapter["css"] = $.bindingAdapter["class"]     var toggleClass = function (node, className, shouldHaveClass) {
xhr.onreadystatechange = function() {             if (this.readyState === 4 && /^[2]/.test(this.status)) {                 window.location.reload();             }
if (target && target.endsWith('/')) {               distTarget = target.replace(/\/$/, '');             }
return movieApi.discoverMovie(genre.value)       .then(carouselle => message.reply([carouselle])
status = data.status;
CommandManager          = require("CommandManager"),         PerfUtils               = require("PerfUtils");
getPreParcels : function(uid, cb) {         var kvp_uid = (typeof uid !== "undefined") ? uid : this.uuid;         var kvp_uidFilter = new OpenLayers.Filter.Comparison({
export class ServiceWorkerContextNamer {
$scope.setUnitChoice = function () {             if ($scope.namespace === 'AWS/AutoScaling') {                 $scope.unitField.val('Count');
buffer += '(';     for (ii = 0; ii < args.length; ++ii) {      skipTo(args[ii].range[0]);
var storageKey = getLocalStoragePrefixByType(type) + objectId;             Util.localforage.getItem(storageKey).then(function(data) {                 if(
function showPlan(container, planXml, options) {     options = setDefaults(options, {         jsTooltips: true
refreshBackdrop = function() {       if (backdrop != null) {         backdrop.remove();
return new Engine(opts); }
var calls = 0;       process.send = function() {         calls ++;
}                 cell = raw;             break;             case 'Array':
const roomValue = '';   for(let room in rooms) {    roomValue += room.name + ' Location: ' + room.location + '\n';
if(logger.isInfo()) logger.info(f('[%s] updating replicaset state %s', id, JSON.stringify(this)));
const isMac = /^Mac/.test(navigator.platform)
if (typeof values[0] ==  "object") {                 for (var i = 0; i < values.length; i++) {
return;             }
var cpb_cnt_minus1;      for (i = 0; i <= sps_max_sub_layers_minus1; i++) {       fixed_pic_rate_within_cvs_flag = 1;
const p = plan();     p.test('should not run', (t) => {       t.fail();
return ' el < ' + numPrefix + val + numSuffix + ' ';                 case '<=':
var line = 0;   for (var i = 0, j = 0, record; (record = records[i]); ++i) {     if (record.type) {
mod = phase;     if (mod.request) {
setTimeout(function() {               callback(null, document.cookie);
angular.module('pnc.util', [    'pnc.util.confirmClick',
$.get(
videoSelectorCommon: {     check: "Kontrollér",     notFound: "Video ikke fundet",
import { HTTP_PROVIDERS } from '@angular/http'; import './app.module';
idRegex = new RegExp('(\'|")' + oldID + '(-label)?(\'|")', 'g');
var new_child_keys = [];         for (ii = 0; ii < this._childKeys.length; ii++) {           key = this._childKeys[ii];           if (this._rawChildren[key] !== undefined) {
for (k in items) {    delete sessions[0].data[items[k]];   }
emotify: function(text) {    var i;    for(i = this.emoticons.length-1; i >= 0; i--) {
let url = req.query.url  url = normalizeUrl(url)
var i = 0;   while ((file = utils.fileExists(_file(i)))) {     i++;
doneSaving() {     var projectId = get(this, 'scope.currentProject.id');
});         if(CursorPositionChangedEvent.superclass)             CursorPositionChangedEvent.superclass.constructor.apply(this, arguments);         delegate.setPublished(this);
var ch;   while ((ch = stream.next())) {    if (ch === quote)
changeTemplateDropdownHandler: function() {             this.sandbox.emit('sulu.header.toolbar.item.enable', 'template');             if (!!this.template) {                 this.sandbox.emit('sulu.header.toolbar.item.change', 'template', this.template);
let slack;   try {     slack = require('slack');
} else {           return $location.path("/admin/gallery('" + entity.GalleryId + "')");
detailedBox = m.component(c.AdminTransaction,  {contribution: contribution()[0]});     view = detailedBox.view(null, {contribution: contribution});     $output = mq(view);
var events = [];                     for (var i = 0; i < result.length; i++) {
children: [],       transform: [         {
throw new Error("Invalid deviceId format.");     }     return {
const config = require('../config.json'); const bluebirdPromise = require("bluebird").Promise;
UI.showLoginPopup = function(callback) {     logger.log('password is required');
socket.on('end', () => {                  session.stop();
if (Alpaca.isUri(this.options.dataSource)) {      $.ajax({
$accountTable.empty();             var accountList = [];             for (var account in user.accounts) {
/^\d+$/.test(text) ||             /^[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-./:;<=>?@[\]^_`{|}~]+$/.test(text)         ) return false;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/gol_sign-1319744539.swf",  admin_props : false,
return lighten(0.36, hex);     case "HL":
if (wantedStates.length === 0) {             return Promise.resolve(null);         }
if (!alreadyRefreshed && catalogRefreshStrategy.beforeCommand) {       buildmessage.enterJob({title: 'Updating package catalog'}, function () {         catalogRefreshStrategy.beforeCommand();
this._userData = null;   }
var isHome = true   let p = new Promise((resolve) => {     if(templatePath !== null && filePath !== null) {
if (node instanceof UglifyJS.AST_ObjectProperty && node.key == 'body' && findOnServer(walker.parent())) {             var emptyFunction = node.clone();
}  case 'boolean':
if (options && options.noSubscription) {     if (options.requiresBaseUri) {       return new FactoryMethod(credentials, baseUri, factoryMethodOptions);
const SecurityException = goog.require('tink.exception.SecurityException');
this.props.html,       this.props.showImages ? defaultTagPolicy : tagPolicyNoImages     );
station.entry = result;                     angular.forEach(result.properties.timeseries, function(timeseries) {                         timeseries.selected = selectFirst || !preselectFirstTimeseries;
} else if (!doc) {    return callback(null, schema)   }
test('PointerMap .delete', function() {     var p = new PointerMap;     p.set(1, true);
throw "FOO";                               });
} onMouseOver(event) {   var $row = $(event.currentTarget),     row = $row.data('row');
Fixture.prototype = {  method: function() {   this.val++;
stopPlayer(player, session, callback);                 break;             case "AMAZON.CancelIntent":                 stopPlayer(player, session, callback);                 break;
return render ? ret : false; }
if (use_xy) {                  return false;
var isWin                               = /^win/.test(process.platform); var stmtInsertRowFullTextSearch                               = null;
return type;   }
() => logger.notice(`Ready for requests on port ${port}.`),     (e) => {throw e}    );
try {
var componentName = getTestableComponentName(fileString, 'controller');         this.fs.copyTpl(
var ConnectorFacade = function (env) {         var translationConnector;         translationConnector = new TranslationConnector(env);
}       }       return false;
{              if (document.getElementsByClassName('widget-login-qr-imgWrapper widget-login-qr-loading') [0] !== null)
else if(step.branchIndents < prevStep.branchIndents) {                                  let diff = prevStep.branchIndents - step.branchIndents;                 for(let i = 0; i < diff; i++) {                     this.popLocalStack();
}(this.laroux)); (function (laroux) {     'use strict';
selector = document.createElement(name);      }
var Paper = require( "graphic/paper" ),         Color = require( "graphic/color" ),
])     },     onFocus () {       this.isFocused = true
console.log('shutting down');     process.exit(1);    }
let language = {};   const languageTags = Object.keys(translationGetters);   if (forceLocale && languageTags.includes(forceLocale)) {     language = { languageTag: forceLocale, isRTL: forceLocale === 'ar' };
NR._Event = {     on: overloadSetter(function(type, fn){         if(isFunction(fn)){             var storage = getEventStorageByType(this, type);
badKey: /^[^a-zA-Z]|\||\/|\.|^toString$/,
}     process.exitCode = 1; };
beforeEach(() => {         synthesizer.and.callFake((req, opts, cb) => {           cb(null, { audioContent: testData.response })
this.resetData();              const page = await this.initData();
inputEx.registerType('object', inputEx.ObjectField); })();
import Logo from 'Components/header/logo'; import styles from './auth-layout.styl';
});      }      else if(data.configure == 'register'){       setup_application(data.build_marble_owners);      }     }
o = new f();      if(!no__proto__ && !('__proto__' in o) && !Object.getPrototypeOf){    o.__proto__ = proto;
this.sound.currentTime = time;             });             return this;
}       return filter(cloneDeep(images), filters);     }
function funcMousemove() {       tooltipContainer
},         setInterval: function(callback, ms) {             if (callback && ms) {
});   }   return next(); }
if(me.isMaster) {         if(me.isChild) {             me.acceptFd();
return attributes; }
const MongoAdapter = require('../modules/MongoAdapter');
var img = document.querySelectorAll('[src="/y/character/inc.png"]');       for (i = 0; i < img.length; i++) {         var temp = img[i].getAttribute('onmouseover').match(/Upgrade Cost: (\d+) Chaos Tokens?[ ]+Stock: (\d+)/);
export function removeProp($target, name, value) {   if (isCustomProp(name)) {     return;   }
this.addObserver(`spreadOptions.source.object.${sourceProperty}`, function () {       const spreadableHash = this.get(`spreadOptions.source.object.${sourceProperty}`)
case Serializer.TYPES.CLASSINSTANCE: {                 if (netSchemeProp.classId == null){                     console.error(`received CLASSINSTANCE but no classId!`)
onBuildStop: function( reason ) {    anvil.log.error( "The build has stopped because: " + reason );    transition( "interrupted" );
var _widget, isWidget, _element;         for (var widgetName in targets) {
items.splice(index, 1);           var c = source.removeAtIndex(index)           var newIndex = items.indexOf(firstDown);
return [ 'bef1' + args[0] ];     });     frame.adviseFunctionBefore(advisedBeforeM, function(f, self, args) {       return [ 'bef2' + args[0] ];
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-drop'   }
return await renderTemplate(template, params, renderData);  } };
this.validateNotEmpty('reason', 'reasonError', 'A description of the issue');       if (this.state.emailError != '' || this.state.reasonError != '') {         return;       }
var __moduleName = context_1 && context_1.id;     var testFilterCondition;     return {
console.log('Logged In!')     server.kill()   })
case NUMBER: {         let value = this.value;         if (value.charCodeAt(0) === 48) {
var expect = require("chai").expect; var _ = require("lodash");
urlRoot: "testModel",     wampRead: function () {       return this.toJSON();
data.user.activityHistory = [];                   }                   if(data.user.permissions == {empty:"permission"}){                     data.user.permissions = [];
if (hasHalo) {              gl.uniform1f(program.u_is_halo, 1);
}      return this.durationSentence(duration);
define("json_api_adapter",    ["exports"],
return () => Promise.reject(             new Error(`IMAPBox::${name} - Can't operate on a mailbox that is no longer open on the current IMAPConnection.`)           )
intent: makeSelectIntent(),   scenario: makeSelectScenario(),   intentData: makeSelectIntentData(),
return;     }     mapData = data[mapName];
t._timer = window.setInterval(function() {
notFound.title = 'Error';       notFound.message = 'An error occured. Please try again later.';     };
getMenu: function () {                         var locale = Aisel.getLocale();                         var url = Aisel.settings.api + '/' + locale + '/navigation/menu.json';
load().then(loaded => {   wasmTapestry = loaded.wasmTapestry;
}   this.log('SIGNATURE>', util.inspect(this.signature(), false, null));   this.stats.sources++;
rimraf(config.outdir, function() {   log(BIG, '[$] ' + config.unzip + ' ' + args.join(' '));   execFile (config.unzip, args, (rc, out, err) => {
browser.keys(ENTER_KEY);         expect(timePickerInput.isFocused()).toBe(true);     });
return links; }
assert.equal(_rec9._expr(_rec9._capt(str, 'arguments/0'), {   content: 'assert.equal(str, anotherStr)',
onHit: function(evt) {     var hitEl = evt.detail.el, used = false, hitElIndex,         peekTarget, useTarget;     if (!hitEl) { return; }
component: 'badges',   namespace: 'lightning:badge',   url: 'https:
(self.f = f); });
if (!module.factory) {     return load_module(module, function () {
console.warn('Compatibility error', 'Lighthouse requires node 5+ or 4 with --harmony');   process.exit(_RUNTIME_ERROR_CODE); }
this.catalog.prop('Pages', this.pages.toReference())   this._compute()
g;   var rArray = /Array\.<(.+)>/g;
export default class UserCallbackScenario extends Scenario {     constructor(config, extraData) {         super(config, extraData)         config.registerBeforeSendCallback((report, error) => {
const Exchange = require ('./base/Exchange') const { ExchangeError, AuthenticationError } = require ('./base/errors')
return build(422, config.MSG_HONEYPOT || 'You shall not pass')     case 'no-admin-email':
this.storage = {};             if (typeof config !== 'undefined') {                 Object.keys(config).forEach(function (property) {                     this[property] = config[property];
continue;     }
$("#SearchIndexFolderId").attr('disabled', "disabled");    },
store.dispatch({type: 'HOLOCHAIN_WEBSOCKET_CONNECTED', payload: url})   call = wsFunctions.call  })
function measure(viewport) {       const rect = coverEl.getBoundingClientRect();
iconName === 'wstone') {       currentPlayer = widget.controller.getCurrentPlayer();       if (widget.controller.canAddStone(pt, currentPlayer)) {
traverse(sample1, function (key, val, path, parentKey, parentVal, level, isRoot, isLeaf, isCircular) {             if (parentKey && parentKey === 'departments') {
_onTick: function() {     this._fn.invoke(this._bindedSend);   }
};                 objectStore = transaction.objectStore(this.objectStoreName);
import React, { Component } from 'react'; import { Field, reduxForm } from 'redux-form';
stage._children[0] = loader._content;
resizing(){       this.set("message", "adjusting...");
{   if (!(this instanceof Buffer)) return new Buffer ();   MemoryObject.apply(this);
return connection;       }
handleNewShellFrame ); }
if(that.is_open){                 that.decorate_cell(cell.cell.uuid,'deleted-cell',true);             }
} else if (name == 'todo') {
response = {}   }   if (!('body' in response)) {    response.body = {}
fileReadStream = await checkoutFS.pda.createReadStream(entry.path, range)   var dataStream = fileReadStream
this.options = options; } util.inherits(Server, events.EventEmitter);
case "200403.18":                 $p.com.alert($p.locale.exception, "warning");                 return false;             case "200404":
if (basis.NODE_ENV)      tokenMap = __nodejsRequire('./htmlentity.json');
onClick={e => {                 onHeartFavoriteHandler(e, speakerRec);
config.clean.vendor = {  src: [out_build+'/vendor'], options: { force:true } };
vjs.MediaFaker.prototype.supportsFullScreen = function(){ return false; }; vjs.MediaFaker.prototype.buffered = function(){ return {}; };
}     else if(cond.items)     {         throw new Error('Nested conditions currently unsupported in Jollof Memory Adapter')     }
return Point(types.m, prev.x + dx, prev.y + dy) } export function M(x, y) {   return Point(types.M, x, y)
options.props = options.props || {};   options.props.className = [options.props.className, options.className, parsedTagString.className].filter(className => className).join(' ');
} else if (isVComponent(lastInput)) {         } else if (isVFragment(nextInput)) {
.catch(() => {       debug('Stashed changes conflicted with hook auto-fixes! Restoring from conflicts...')       return gitPopWithConflicts(options).then(() => cleanup(options))
window.debug = log.debug;
$translate(['ERROR_IN_RESPONSE']).then(function (translations) {      alert(translations.ERROR_IN_RESPONSE);     });
) {                          return;
onGotUserInfo (event) {     const { backPath } = this.data
if (partsArray.length > 0) {             curPart = partsArray.shift()             var hash = Crypto.createHash('md5')
this.children.forEach(function (n) {         if (!(n instanceof Control)) {             throw 'Container: n is not an instance of Control.';
unsubscribe.push($rootScope.$on('updateLabels', () => {         $scope.$applyAsync(() => {
if (decoratorArgs.length >= 2) type = decoratorArgs[1];   if (type === "class") memoized = createCache(target);
tmpObject3d.updateMatrix()
checkMatchForDialects(dialect, value, expectations) {     if (expectations[dialect]) {       expect(value).to.match(expectations[dialect]);
case 'middleware':       key2 = props.name;       middlewaresSpecs = stashedSpecs.middlewares[key2] = {};       middlewaresSpecs.path = props.path;
}                 this.fetch({
for (let n in baseProperty) {                         let cloned = clone(baseProperty[n], true);                         if (baseProperty.hasOwnProperty(n)) {
this.updateRenderTargetMipmap = updateRenderTargetMipmap; } export { WebGLTextures };
stuck_out_tongue: /(^|\s)(:-?p)(?=$|\s)/gi,      rage: /(^|\s)(:-?[[@])(?=$|\s)/g,      slightly_frowning_face: /(^|\s)(:-?\()(?=$|\s)/g,
const info = UI.getItemData(item.id);
_digitalData.page.categoryId = (counter + 2);         if (counter === 3) {           done();
const PARAMS_END_PATTERN = '[/?_-]|$';
ev.stopPropagation();  }
const skills = props.skills     return (
return fallbackURL; }
Cmnd_STK_READ_PAGE: 0x74,   OK_RESPONSE: new Buffer([Resp_STK_INSYNC, Resp_STK_OK])
import turfBbox from '@turf/bbox';
function sendMessage(message, callback) {             if (typeof chrome !== 'undefined') {                 chrome.runtime.sendMessage(CONST.extensionId, message, callback);
debug('CLIENT use net.createConnection', options);       self.onSocket(net.createConnection(options));     }
TreeHashIndex.prototype.get = function(node) {         if (!(this.propname in node)) {             node[this.propname] = this.treehash.process(node);
ret.name = formattedFrom !== null ? formattedFrom[1] : address;   ret.email = formattedFrom !== null ? address.substring(formattedFrom[0].length).trim().replace(/[<>]/g, '') : '';   return ret;
;(function(window) {     'use strict';
const FeaturesPanel = () => (   <div className={styles.featuresPanel}>
index++;             }
.controller('AppView', function($scope, $routeParams, $filter, usersplaces, question, placeName) {     $scope.part = $routeParams.part;
} else if (format == 1) {     for (i = 1; i < count + 1; i++) {       var first = aStream.getByte();
JSM.ImportFileList.prototype.GetInputList = function () {
var tbname=input_name.substring(0,input_name.length-3);      var td=input.parent();
}, "J.api.JmolRendererInterface");  Clazz.defineMethod (c$, "plotCircleCenteredClipped",   function (xCenter, yCenter, zCenter, diameter) {
_.each(['disabled', 'readonly', 'checked', 'required', 'autofocus'], function (booleanProp) {     if (!(booleanProp in hash)) {       return;
sarg[i] = "args["+i+"]";     }     call = "oScope._applyTemp_(" + sarg.join(qx.constant.Core.COMMA) + ");";
this.config = config;             }             this.lastInsertId = 0;
uploadUrl: 'https:       uploadHeaders: {'X-Test-Header': 'vue-file-agent'},
clearInterval(this.timer)   var seconds = ((new Date() - this.startTime) / 1000).toFixed(2)   var winner = this.result === 'won'   var emoji = winner ? '😎' : '😵'   document.querySelector('.wrapper').classList.add(this.result)
}   if (resolve) return resolve(source, args, context, opts)   else return source && source[opts.fieldNodes[0].name.value] }
return E192;     }
}     const code = !isNaN( parseInt(error.code, 10) ) ? parseInt(error.code, 10) : 500;
var name = i.name;   return R.div({
this.dispatch({             to: envelope.from,
case TMS.TM_CONCAT:                 return ldebug.luaG_concaterror(L, p1, p2);             case TMS.TM_BAND: case TMS.TM_BOR: case TMS.TM_BXOR:             case TMS.TM_SHL: case TMS.TM_SHR: case TMS.TM_BNOT: {
return str; }; export default stripDiacritics;
if (/^(video|movie)/i.test(type)) type = 'video';    else if (/^(audio|music)/i.test(type)) type = 'audio';    else if (/^(image|photo)/i.test(type)) type = 'image';    else type = null;
if (bottomLabel) {             domutil.removeClass(timeElement, config.classname('time-guide-bottom'));
} else {       contentBody.push(<Request content={this.props.content.request} key={0}/>);
if (!err) {               var split = stdout.split(/,/);
let label = getWrapper().find('.user-stats__label').at(3);       expect(label.length).toBe(1);     });
} else {                         val = clone ? jsonQ.clone(value) : value;                     }
}       default:
\${1:\${numbers}} \${2:\${items|Foo,Bar,Baz|}}   \${3|$1|} \${2}   \${4|$1|} \${2}   \${5|$1|} \${2}
milkBoxStatus++;                  addMilk();
let t1 = performance.now();  outputDebug("1", "css", (t1-t0), (t1 - gt0)); };
var regexReg = /^([^\(\n\r\u2028\u2029]*)(\(.+\))$/   var parameterReg = /^(.*)(:\w+\b)(.*)$/   var escapeReg = /[.*+?^${}()|[\]\\]/g
if (code !== 0) {                 err = new Error('Child process exited on signal: ' + signal)
}   else if ( str.indexOf('=') === -1 && (match = str.match(/(\d+):([^\/]+)?(\/.*)?$/)) )   {
d.attr = function(node, name, value){
.once('end', function() {             process.exit();         });
var rename = require("gulp-rename"); var uglify = require('gulp-uglify');
case 'JSXText':         text = handleWhiteSpace(astNode.value);         if (text !== '') {
.done(function(){     $.boom.log('Scripts loaded into iFrame');
if (lookAt) {           threeObject.lookAt(lookAt);
goog.require('myphysicslab.sims.common.AbstractApp'); goog.require('myphysicslab.sims.common.TabLayout'); goog.require('myphysicslab.sims.pendulum.PendulumSim');
}     ).find( "div" ).show();     return { handle_minwidth_hint: handle_minwidth_hint }; };
var str = [this.__tableHead];       for (var i=0; i<this.__logs.length; i++) {
sendSync: function (message) {      msngr.utils.ThrowNotImplementedException();     },     receive: function (message, callback, context) {      msngr.utils.ThrowNotImplementedException();     },     remove: function (identifier) {
dataView.syncGridCellCssStyles(grid, 'currentSong_playing');                          var count = commify( parseInt( data.length, 10 ) );             $('.medialibrary.count').text(count);
}; (function() {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-06\/seed_silvertongue-1308763743.swf",  admin_props : false,
},   "statistics":{    "title":"Statistics",
for (var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n); k >= 0; k--) {                 if (k in o && o[k] === searchElement) {                     return k;
var path = require('path'); require('colors'); var PROTRACTOR_CMD = 'node_modules/protractor/bin/protractor';
resultHandler(JSON.parse(apiResult));                              }
if(config.passwordReset.tokens){     var utils = require('../utils');
tagName: 'table',   headerComponent: computed('childComponents.@each._isHeader', function() {     return this.get('childComponents').findBy('_isHeader');
for (let i = 0; i < TRAIN_STEPS; i++) {     const cost = optimizer.minimize( function () {       const batch = data.nextTrainBatch(BATCH_SIZE);
if ( chunk[ index + 1 ] === 0x0a ) { bytes ++ ; }      break ;     case 0x1b :
global.evalLib.runEvalPyret(newRT, src, options, function (result) {                  console.log('done.');
let assetConfig = {             type: AssetsType.json,
window.console.log("location findAll serializer data", ret);     return this._super(store, primaryModelClass, ret, id, requestType);   }
}).then(function () {
{ "namespaceqpp_1_1literals.html":[1,0,0,3],
utils.initRegion("cn-north-1"); var app_key = "*************";
promise = manips[manip].call(vars);      if (typeof promise !== "undefined") {
$scope.messages.validateError = 'Data format is not valid for source type ' + $scope.sourceTypeList[$scope.inputs.sourceFormat].name;      } else if (data.status === 'unsupported') {       $scope.validateStatus = '';
});         }         var errorPrefix = "Error in " + JS_HANDLE + ".viewDocument(): ";
done();             });     });
default :      throw new Error("Whatchoo talkin' bout Willis?");           }
if (stickyElement.positionType !== 'fixed') {           if (stickyElement.useTransform) {
drawQuesBorders : function(){   this.vinc('border_question', 'crispEdges');   this.getBorderColor = this.getQuesBorderColor;
var tn;             this.schema[elt.ns].simple[elt.name] = elt
import {StyleSheet, ScrollView, View, Text, TouchableOpacity, Alert} from 'react-native'; import {analytics, styles, colors, airloy, api, L, toast, hang} from '../../app';
}             var cb = function() {                 if (value !== void 0) {
} Vault.prototype.decrypt = function(encrypted, callback) {   this.deriveKeyFromPassword(function(error, pwDerivedKey) {     if (error) {
if (!vis) return;           var notify = createNotifier({             location: vis.typeName + ' visualization'           });
} const mergedRegex = /<li class="pull-request">\((?:.+?)(\d+)<\/a>\)<\/li>/; function findPull(res) {
var NodeEventType = {     MOUSE_DOWN   : 'mousedown',
var $divStructure = $(".starting-point.inventoryid-" + inventoryId + " .structure.hide").clone().removeClass("hide"),                         $prevHiddenInputCreator = $form.filter(".Hidden-Inputs-Creator").html(),
RTLConfFile = common.rtl_conf_file_path + '/RTL.conf';   let exists = fs.existsSync(RTLConfFile);
import { ArtistType } from "./artist" import { ArtworkType } from "./artwork"
nsHash = val;         break;       case 'byKey':         byKeyHash = ABBREVS.byKey + SEP + JSON.stringify(val);
async updateFolder(id, title) {     console.log('(local)UPDATEFOLDER', title)     await browser.bookmarks.update(id, {       title     })
keys.push(matches[i].substr(1));     }     var groups = {};
expect.addSnapshotSerializer(serializer); expect.addSnapshotSerializer(createEnzymeToJsonSerializer({ mode: 'deep' }));
else                         return !_this.options.inlineText ? data[i] : match + data[i++];                 });                 resolve(_this.output)
"widget": id                 }, function (data) {                     note(data.message, data.type, 10000);                 });
return prepareWidget('form', config); }
break;       }       case 'FALLTHROUGH':         return !!flag.trackEventsFallthrough;       }     }
this.forward = 0; }
} }; if (typeof config.log === 'string' && config.log !== '') {
static [config.actionPrefix + "-model"](node, val) {          this._update("model", node, val)
$unbind: function(){
import React, { PropTypes } from 'react'; import AuthForm from '../../auth/components/auth-form';
Separator, } from "../lib/components/Layout";
if (err) return console.log(err);             });
}         while ( (obj = obj.offsetParent) );         return [curleft, curtop];
(function ($, _, Backbone) {   "use strict";
entry: [path.resolve(__dirname, '../src/index.js')],   output: {
var Machine = require("../../../../lib/sentient/machine"); describe("Integration: 'and'", function () {
import {   typeForRelationshipMeta,
var re = new RegExp('({#)([\\s\\S]*)(#})');         var matches = re.exec(range.text);
} else {             process.stdout.write(`Pulling '${metadata.name}' from Google Drive...`);         }
it('should only log when page.close() rejects', async () => {         const sources = [
const fs = require('fs'); const path = require('path');
pool = pools[poolName] = genericPool.Pool({     name: poolName,
module.exports = function mergeSort(A, p, r) {   if (p >= r) {     return;   }
snippet.forEachArray(rawSeriesData, function(datum) {             var result = {
define(['lodash', 'log'], function (_, log) {
var output = ['document.write (\''];
}     case 'function':
super(props);
, win = window     , store = 'bkwld-tram-js'
fsExt.list(build, /\.js$/).forEach(function(moduleName) {     that.queue.push(moduleName);
exports = module.exports = function() {
isSync = false           }
var ABC = A.B.C;     function pong(x) {
} else if (this.match === ';') {   } else if (isWhiteSpace(this.match) || isLineTerminator(this.match)) {
return res; }
for (i = 0; i < actors.length; ++i) {       actor = actors[i];       if (actor.visible() === true) {
}       return state.render.push(` ${k}=${value[k]}`)
var hash = window.location.hash;   if (go2 && hash.indexOf('access_token') !== -1) {     go2._handleMessage(
} else if (!timerSpec.hasOwnProperty('interval')) {       user.error(this.TAG_, 'Timer interval specification required');       return false;     } else if (typeof timerSpec['interval'] !== 'number' ||
return __awaiter(this, void 0, void 0, function () {             var a, minimatch, _i, _a, match;             return __generator(this, function (_b) {                 a = {
dataStr = dataStr.replace( new RegExp( '<!--' + REPEAT_COMMENT_PREFIX + '\\/[^>]+-->', 'g' ), '' );
rulerProcessor(argv, mergedPlaces);     exit(); }
import { defaults, isFunction, merge, partial, property, omit } from "lodash";
loadMuiscSongLrc(_, song_id) {     eventBus.requestLrc()
return Array.isArray(value) ? value : [value]; } module.exports = Configuration;
_handleLogoutSuccess: function(data, status, jqXHR) {     CurrentUserActions.logout();
samples.push(v);     }     if (samples[samples.length - 1] !== violin.max) {
if (next) {         if (next.items) {           return next.items.head;
}             var _hoshi = utils.createElement("div", { class: "hoshi" });             if (hoshiY == 0) {
const html = wrapper.instance().document.documentElement;       wrapper.setProps({ open: false });
function printHelp() {   for (var command in chatCommands) {     if (chatCommands.hasOwnProperty(command)) {       addSystemLine('-' + command + ': ' + chatCommands[command].description);
return x + 1; }
parallel.queue = {}; me.parallel = parallel;
break;
var App = function() {
let spyService;     function Target() {}     beforeEach(() => {
var scenario = scenarios[ruleMatches[0].ind];           if(checkScenario(scenario)) {             var compiled;
updateQuery: (previousResult, {subscriptionData}) => {           const returnResult = Immutable.Map(previousResult);
class Package extends EventChannel {     constructor(args) {         super();         this.setName(_.get(args, 'name', ''));
return this; }
});    },    visibleWhen: function(items) {     var item = forceSingleItem(items);     return item.ServiceId && item.Name && item.status;
_environment = _config.environment;
} else if (this.format == "session") {         jsonToRender.helpText = true;
};     return args;
const publicKeyBuffer = new Buffer(signature.publicKey, "hex")     for (let i = 0; i < publicKeyBuffer.length; i++) {       bb.writeByte(publicKeyBuffer[i])
type:"t",                  value:Sudoku.textures[value]              }
, assert = require('assert')   , tests;
var Database = require('better-sqlite3');   try {
new window.ScrollWatch({   watch: '.feature-list__item',
'hqwebapp/js/initial_page_data', ], function($, alertUserModule, initialPageData) {     var alertUser = alertUserModule.alert_user;
throw 'unmatched request action: ' + request.action;   }
let id = annotation.provenance.analysis.execution_id;     let color = stringToColour(id);     let type = annotation.geometry.type;
if (!aTopic) {              throw new Error("Not specified any topic.");          }
if (value.roles === "יו\"ר ועדת הפירושים") {
'use strict'; var MediaFrameMulticaster = require('../mediaFrameMulticaster/build/Release/mediaFrameMulticaster');
var pollers = require('./pollers'); var hooks = require('./hooks');
throw new Error("only arrays with rank 1 or 2 supported")         var arrays = []
value = Number(value);   return typeof value === 'number' && isFinite(value) && value % 1 !== 0;  },
function InputNumberGtrOrEqualToZero(props) {   return <div style={{ display: "inline-block" }}><InputNumber {...props} min={0} /></div>; }
try {     azure.createBlobService().blobService.deleteBlob(this.get(paths.container), this.get(paths.filename), function() {});    } catch(e) {}
var group_id = -1;                 for (var k = 0; k < link_style.length; k++) {                    if (d3.select(this).classed(link_style[k].name) == true) {                        group_id = k;
}       const _transaction = ReactUpdates.ReactReconcileTransaction.getPooled();       _transaction.perform(         this.updateChildren,
} class KeyValueRecord {   constructor(key) {     this._key = key;
for (let i = 0; i < validDelays.length; i++) {   assert.doesNotThrow(function() {
var mode = args.mode;         if (window.File && window.FileReader && item.kind === 'folder' && item.data.provider && item.data.permissions && item.data.permissions.edit) {
for (i = 0; i < numFaces; i++) {         vindex = i * (3 * 3);
if ('visible' in props) {         if (props.visible) {           this.showWindow();
return createStore(reducers, initalState); }
Tensor.prototype.clone = function() {     var copy = new Tensor(this.dims);          return copy.copy(this); };
const data = []   const workspaceElement = atom.workspace.getElement()   document.body.appendChild(workspaceElement)
if (!this.noTrigger) {                 this.fireLongPressStart(this.currentTouch);             }
const SRC_DIR = constants.SRC_DIR; const SUCCESS_MESSAGE = 'TSLint: Everything is OK';
imageBuffer = fs.readFileSync(file + fileExt);             }         }
if(m) {           fs.writeFileSync(appMainPath, this.getPlaceholderContent(Number(m[1])));         } else {
map.fitBounds(bounds);
}     $("#progress .message").html(message);
return data; }
}else if( stype === "ses" ){             for( i = 0; i < n; ++i ){                 if( ( vpBits[ i ] & ISBOUND ) && ( vpBits[ i ] & ISDONE ) ){
import { Link } from 'gatsby'; import styles from './header.module.css';
import { Grid, Row, Col } from 'react-flexbox-grid/lib/index'; import log from 'loglevel';
runOrdered: function(list, consumer, onDone) {
}                 const pipeline = agent.settings[CONFIG_SETTINGS_DOMAIN_PIPELINE];
'information as possible.')   exit(1) }
}   render(props, {name, imageTab, imageSelected}) {     let imageTabContent
} else if (wm.localeString) {     djConfig.locale = wm.localeString.toLowerCase();  }
send();       }, function() {
return Object.assign({}, state, { labelling });     }     case 'SET_TOOL_CONTEXT_MENU_DATA': {       const contextMenu = Object.assign({}, state.contextMenu);
if (pathParts[1] == "model") {     event = ['model', pathParts[0]];    } else if (pathParts[1] == "aggregate") {
var p = ary[i];             p.X = mf(p.X);             p.Y = mf(p.Y - diffT);             newAry.push(p);
import Menu from "../Menu" import MobileFooter from "./MobileFooter"
callback.value = null;           callbacks = callbacksByType[otherType];           i = callbacks.indexOf(callback);           callbacksByType[otherType] = callbacks.slice(0, i).concat(callbacks.slice(i + 1));
import { View } from 'backbone';
tyval.array.extend(function empty () {     this.validators.push(function empty () {       check = check && variable.length === 0     })
var stringToArray = function (x) {  if (typeof(x) === "string") {   return [x];
this.store.push(shape);
exports.LobbyConnectInPayload = function(name) {  this.name = name;  this.getPayload = function() {
mongoose.Query.prototype.skip = function (input) {    skip = input;    return this;
summary = $filter('wrapTextWithEllipsis')(           summary, RULE_SUMMARY_WRAP_CHARACTER_COUNT);       }
.action(partial(ary(remove, 2), config)); }
}; module.exports = utils;
return this.readRaw(start * this.buffer.sampleRate, length * this.buffer.sampleRate) }
export function base64ToArrayBuffer(dataUrl) {     const base64 = dataUrl.replace(/^data:([^;]+);base64,/gmi, ''),         binary = atob(base64),
const { httpCodeList, currentSeries } = props;  return httpCodeList && httpCodeList.length ? (
return;             }             if (this._container) {
}());                  var deRegObject = [, new DeReg(), new DeReg()];
var regexp = new RegExp("/");                             sceneViewerUrl = sceneViewerUrl.replace(regexp,"");                             if(sceneViewerUrl.indexOf("share") > -1){
document.body.appendChild(dummy);    if (dummy.getBoundingClientRect().width !== window.innerWidth - 100) {     (function(calcs) {
category: "Fun",   description: "( ͡° ͜ʖ ͡°) u-ugh\n*d stands for delete*",   usage: "lennyd",
loadBalancer.availabilityZones[loadBalancer.region] = loadBalancer.regionZones;       if (!loadBalancer.vpcId) {         loadBalancer.securityGroups = null;       }
var index = findClosestChunk( i, j, k, this._chunksToAdd )     var toadd = this._chunksToAdd.splice(index,1)[0]     addNewChunk( this, toadd[0], toadd[1], toadd[2] )   }
if($this.data(renderPosDataName)){                     $this.removeData(renderPosDataName);
cml.extPlatformPlugin[type] = platformPlugin;
import getChannelsArray from '../../cache/lib/getChannelsArray';
_concat_base_removals,       _concat_moves,       _resolve_moves;
remakeInfo : function(cidlist){   var longColor = (this.irowakeEnable() ? this.getLongColor(cidlist) : "");
if (newProps && newProps instanceof Object) {       for (let key in newProps) {         if (this.props[key] && this.props[key] !== newProps[key]) {
case 'length':      return this.durationTime(this.props.data);       case 'date':
};                 if ((d = glyf2svg(glyf, ttf))) {                     g.d = 'd="'+ d +'"';
try {       if (require.cache && !!require.cache[relativeTemplate]) {         delete require.cache[relativeTemplate];
if (gmeConfig.debug) {                  logger[level]('state at ' + msg, JSON.stringify(state, replacer, 2));
throw Error("expecting one argument, got: " + pr(x) + ", " + spr(other));     }     return ["get", [
case 'test':     result = spawn.sync(       'node',
if (t.domNode.textTracks) {      for (i = t.domNode.textTracks.length - 1; i >= 0; i--) {      t.domNode.textTracks[i].mode = "hidden";
window.location.assign("/#/");     if (typeof ga !== 'undefined') {       ga('send', 'pageview');
isConnected () {         let connected = false;         if (this._scratchLinkSocket) {
import * as React from 'react' import * as Styles from '../styles' import StandardScreen from './standard-screen' import Text from './text'
if(oc.status){     return oc;
switch ( point.phase ) {
} else {             i = 0;             var maxi = pruned.length-1;
if (_gitPath) { return _gitPath; }         _gitPath = Preferences.get("gitPath");         return _gitPath;
exports.getBPMNProcess = function(processId, bpmnFilePath, persistencyPath, done) {      done = done || function() {};
html += "<dd>";         let this_count = lines[i].match(/^(:+)/)[1].length;         html += wiky.process_normal(lines[i].substring(this_count));
var i,k;   if(lang.isArray(errors)) {    for(i = 0 ; i < errors.length ; i++) {
var extent = _ol_proj_.transformExtent([-126, 24, -66, 50], 'EPSG:4326', 'EPSG:3857'); var startDate = threeHoursAgo();
fill: function (opts) {         return this.sendKeys(opts.selector, opts.text, {reset: true});     },
return state; }
var processCase = function () {       if (temp !== null) {
process.on('disconnect', function() {   logger.exit(0); });
$this.colorpicker({                 align:"left",
var target = replace ? elem.parentNode : elem         var scanTemplate = function(text) {             if (loaded) {
return forwardHandlerRegistry[name]; }
this.gl.enableVertexAttribArray(this.vertexPositionAttribute);       this.textureCoordAttribute = this.program.getAttributeLocation("aTextureCoord");       this.gl.enableVertexAttribArray(this.textureCoordAttribute);
{             d = time * this.length - lastKey.time;             value[0] = firstKey.value[0] + d * firstKey.left[0];
this.compile(options.callback); }
conversion = [0.299, 0.587, 0.114];          } else if (type == 'BT709') {             conversion = [0.2126, 0.7152, 0.0722];
return `${created.getFullYear()}/${(`00${created.getMonth() + 1}`).slice(-2)}/${(`00${created.getDate()}`).slice(-2)}`; };
if(ctx.resolve('username')) {     out += ctx.resolve('username');   }
render(){   return (
}); }; module.exports = TableUsesAbbreviationForHeader;
return true;      if (result["ResultSet"]["Result"][0]["DisplayUrl"]=="dojotoolkit.org/") {       return true;
this.listenTo(this.model, "change:field", this.add_field);         }         this.listenTo(this.model, "change:field_kind", this.add_field);
if (!(typeof ver === 'number' || (typeof ver === 'string' && ver.length > 0))) {                 throw new Error('version number missing!');
writeType: 'input',         validation: /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&         value: ''
if (el) {         el.parentNode.removeChild(el);
var Keypair = require('./keypair'); var BufferWriter = require('./bufferwriter');
import { shallow } from 'enzyme'; import { Container } from 'reactstrap';
newSlide.description = req.body.description       }       if (req.body.duration) {         newSlide.duration = req.body.duration
var _CACHE_TABLES = {}; Client.prototype._action = function (method, tableName, obj, useCache, retry, callback) {
chartPreview.data.setAssignDataFields(assignDataPanel.getAssignDataFields());     }
{recentOpenings.map(opening => {           var item = utils.processItem(opening.item)
} else {       sigVerified = true;     }
}    var esc = querystring.escape;
while (obj == obj.offsetParent) {     obj = obj.offsetParent;
return padNumber(offset / 60, 2) + padNumber(Math.abs(offset % 60), 2); }
ruleSpecs = handlers[h].rule_specs;         for (var i = 0; i < ruleSpecs.length; i++) {           adjMatrix[stateIds[stateName]][stateIds[ruleSpecs[i].dest]] = true;         }
});     return Promise.all(runOutTasks);   }   _clear() {
Object.create = function (obj) {         function F() {}         F.prototype = obj;
consolidate('rules', 'media', 'last', rule, context, i, cache);   }
import React from 'react' import ConnectedInstanceCard from '../containers/ConnectedInstanceCard'
if (infos){             coords = (
var sharder = {     getShardForModel: function(model) {
}             return false;
return "Green";                 case "failed":
} export default async function loadModels( materials ) {   const loader = createAsyncLoader( new GLTFLoader() );
if ( !window.isNormal () || !window.isMain () ) return;   const name = window.app ().name ();   if ( !/Terminal/.test ( name ) || false ) return;
expected: `.user{color:red'';}`  },  'noop tail VI': {   sample: `color:red""`,
module.exports = function (Component, options) {   options = arguments[1] || {};
try {         await orango.disconnect()
resize25: '25% 크기',         mirrorHorizontal: '좌우 반전',
var handlers = this.handlers;     if ( ! ( channel in handlers ) )       handlers[channel] = {};
return hexToUint8     } catch(err){
var client = new tracker.Client({trackerToken:token});                  client.project(projectId).uploads.create(filepath, function(error, attachment) {                      if (error) {
const Provider = new this.Provider(url);     url = Provider.normalizeURL(url);
});         htmleditor.addPlugin('relativeimages', /src=["'](.+?)["']/gim, function(marker) {             var replacement = marker.found[0];
this.ns(ns);    }
.expect(404)                     .end(function(err, res) {                         expect(res.body.message).to.be.ok;                         done(err);
}       xsRaSt = scope.ssffds.getSampleRateAndStartTimeOfTrack(dD.dots[i].xSsffTrack);       ysRaSt = scope.ssffds.getSampleRateAndStartTimeOfTrack(dD.dots[i].ySsffTrack);
} function create_fragment(ctx) {  var div;
keyForAttribute() {     return this._super(...arguments);
while ((result = r.exec(value))) {                 if (prefix === undefined || result[1].length < prefix.length)
const { Command, SwitchbladeEmbed, Constants } = require('../../')
var id = $scope.element.id;         $scope.showResult = $scope.element.poll;
reader.onload = function __onload_handler__(event){
assets: [                           { path: "dist
proto['itemAt'] = proto.itemAt;   proto['items'] = proto.items;
patterns: [                         {                             match: /var version = *'[.0-9]*';/g,                             replacement: "var version = '" + version + "';"
import { setChildren } from './setchildren'; import { isString, isFunction, getParentElRecursive } from './util';
}else{            slave[this.outputMessage] = val;
}     if (resolvedSource.match(/^\/\     var options = $.extend({}, this.options, {
}             done(conn);
var gutil = require('gulp-util');
if (edgesTokenIndex === -1)             return;           const bracketIndex = this._json.indexOf('[', edgesTokenIndex);           if (bracketIndex === -1)
parseTableMore (keyword) {       if (/^[ \t]$/.test(this.char)) {         return null       } else if (this.char === ']') {
function checkIsoCompat () {      function Date_ (y, m, d, h, mn, s, ms) {    var len, result;
case 'cond':           var fn = cond[token.name.substr(1)];           if (fn) {
ScrollPortTests.addTest('node-recycler', function(result, cx) {
},   clone: function(buffer){    return new this.constructor(this.current.getExpression(), this.max.getExpression(), this.width, this.contents.clone(buffer));   }
this.workspace.on('change', this.save, this);   }   ScriptEditor.prototype.save = function() {
while ( ( parent = node.parentNode ) ) {
var content = contents[i];                 var service = new OnlineData(me.mDatasUrl, content);                 services.push(service);
__docRef    = __window.document,     __isArray   = Array.isArray,
else if( typeof where == 'object' ) {                 ws = [];                 for( var key in where )
var assert = require('assert'); var fs = require('fs');
}else if(_isNodeList(object) || _isHTMLCollection(object)){   returned=_each_array(_toArray(object),funct);  }else{
DummyAnalyser.super.constructor.call(this); }; DummyAnalyser = Webvs.defineClass(DummyAnalyser, Webvs.AnalyserAdapter, {     isPlaying: function() {
dataTemp.push(curr); }); var fileCounter = 0;
if (!userInfo) {       app.goLoginPageTimeOut()     } else {
const diffRender = function (olds, news) {     if (!olds || olds.length !== news.length) {         return news;
return new Promise(function (resolve, reject) {     const script = targetDocument.createElement('script');     script.type = 'text/javascript';
app.use(function(err, req, res, next) {     if (err.type == "GITHUB_RESOLUTION_ERROR") {         res.redirect('/login?error=github_email_is_private');
"@requiredField": "This field is required",         "@data.customName": "Dataset name",         "@data.customBody": "Enter one item per line",
await logError('Main', 'Unhandled Rejection', err)     })
const reportName = yearlyReport ? `${year} Yearly Platform Report` : `${year}/${month + 1} Monthly Platform Report`;   console.log('startDate', startDate, 'endDate', endDate);
Zlib){          CloudServer.Gzip=true;      }
PreviewDocument = connect(mapStateToProps, {})(PreviewDocument); PreviewDocument = withRouter(PreviewDocument);
}           break;       case actions.complete_todo:           let completedTodo;           return {
var searchService = Promise.promisifyAll(require('./search')); var collectionHelper = require('./../helpers/collection');
for (__prop in __func.prototype){     if (__prop === 'constructor')         __constructor_was__enumed = true;
var auth_token = this.auth.getToken();   if (auth_token) {
if (options.schema && body.schema && body.schema.type && body.schema.type === 'object') {             common.schemaToArray(body.schema,1,parameters,false);
return out.set(this.centerX, this.centerY);             case Phaser.MIDDLE_RIGHT:
this.on('afterrender', function() {     this._onSet();
XSS.PIXELSIZE = 4; $(function() {     XSS.doc = $(document.body);
'waypointDown': function(component) {       console.log('waypointDown triggered on:', component);     },
console.log();         log.die(3);     }
break;                 case 'COMMENT':                   break;                 default:                   error("Unexpected tag type: " + tag.type);
break;      default:
if (info && info.type === 'enum') {                         const onChange = (e) => {                             delete varEdits[varDef.key];
var start_split_string = "  ";         db.adminCommand({split:collection,
dwr.engine._sendData(batch);   if (batch.rpcType == dwr.engine.XMLHttpRequest) {
if (result[i].error) {                 } else {
{    var canvas = App.renderer.canvas;    canvas.requestPointerLock = canvas.mozRequestPointerLock || canvas.requestPointerLock || canvas.webkitRequestPointerLock;    canvas.requestPointerLock();
}).on('/', () => {         const targetTagString = 'dmc-empty';         riot.mount('dmc-page', targetTagString);
return;   }
module.exports = jsonSchemaTable;
throw new Error( '无待签到贴吧' );  }
toRender = {               parcelId: response.get("parcel_id"),
} else if (argv._[0] === 'edit') {     stamp = argv._[1]     key = getKey(stamp)     prop = argv._[2]
lastStarted = Date.now();   var nodeMajor = parseInt((process.versions.node.split('.') || [undefined,undefined,undefined])[1] || 0, 10);   if (nodeMajor >= 8) {
case types.TOGGLE_UNICODE_ARRAY:       const unicodeArray = !state.unicodeArray;       return {
entity = this.allEntities[i];        if(entity.alwaysOn || entity.checkCollision || check(entity.getAABB(), aabbLogic)){         entity.checkCollision = false;
canCall(action) {         return !! this.instance[action] || action.indexOf('metadata:') === 0;     }
for (i = 0; i < length; i++) {             keyOrId = track[i]              var proxy = retain[keyOrId]
init () {     if (this._initializationStatus !== 0)       return console.warn(`The \`init\` method should only be called once.`);
const DEFAULT_STICKYFOR = 3*1000
for (var j=start; j<=end; j++) {      frame++;
switch (action.type) {       case PUT_DRAG_INDICATOR: {         const {isPlaceAfter, itemInfo} = action
return result;                                                },
renderInput: function(props) {       props.type = props.type || 'text';
export default class EventsExample extends React.Component {   constructor() {     super();     this.state = {
node.events.ng.on( IN + say + 'STAGE', function (msg) {             var stageObj;
var j,i; outer: for (j = 0; j < 5; j = j + 1) {
var oldCls = runButton.iconCls;         var code = this.editor.getValue();         if (JSHINT(code, CONFIG.LINT_SETTINGS)) {             runButton.setIconCls('icon-loading');
var searchCallback = function(found, err) {             --searchCount;
if (this.dynamicArea) {     var ratio = count / totalCount;
buildDir: './builds',                     winIco: './public/images/icon.ico'
getMovienfo(showId.trim(),"pm");                         }                     }
, multi     = 5
var done = function done(result) {
it("should be variable string info", function(done) {             const group   = file.openGroup('scada');
let ext = dom.src.includes("webp") ? ".webp" : path.extname(parsedUrl.pathname);             if (!ext) ext = ".png";
}           });         } catch (err) {           throw new Error('Invalid Config file, incorrect JSON format: ' + err.message, err);         }
feather.logger.error("Error getting markdown doc: " + res.statusCode);           cb(null, {doc: url + ": " + res.statusCode});
if (!(layer instanceof geo.layer)) {     console.warn("Invalid layer");
if (jqXHR.status == 200 && jqXHR.responseText && jqXHR.responseText.match(/^\<\?xml/) != null) {           var xml = jqXHR.responseText;           this.success(xml);
var enc = _child_process2["default"].spawn(_this3.getCommand(), options);    _this3.hookEncodingProcess(resolve, reject, enc);   });
}     var cache = {};     var getShaderProgram = function ( vs, ps, defines, useCache ) {
return bbox; }
fetch('/foo', { method: 'POST' }).catch(() => {       expect(shouldRefreshTokenSpy.mock.calls).toEqual([[reason]])       done()     })
return false;   else if (value === null)     return Boolean(expectedType.__IsReferenceType__);
function remit (options) {
throw new Error('Invalid m3u8 file: not "#EXTM3U"');       }
var pattern = tmplRule.replaceParam(),     matchArr, ret, i = 0;
import Resource from './resource'; import { attr, hasOne } from 'ember-jsonapi-resources/models/resource';
}         }         return results;
' already exists in DB.');             return;         }
cache.swapCache();   document.location.reload(); });
'use strict'; require('../common'); var assert = require('assert');
if (L.Browser.mobileWebkit) {     pane.removeChild(root);    }
}, function() {                         console.log('Error retrieving experiment statistics for ' + experiment.id);
const mongoose = require("mongoose");
.then((responses) => {     [subjectId, aspect, sample] = responses;     if (!subjectId) {       handleUpsertError(constants.objectType.subject, isBulk);
for (key in nodes) {       if (Object.prototype.hasOwnProperty.call(nodes, key)) {         node = nodes[key];
'react/addons': 'React',         'react-motion': 'ReactMotion'     },
function delTask (graph, taskId) { }
callback = jasmine.createSpy('callback'),           inputEvent = createEvent('input');       expect(handler).toBeDefined();
'-o-transform': "scale("+ $scope.config.style.scale +")",                         '-moz-transform': "scale("+ $scope.config.style.scale + ")",
if (!result.success) {       return callback(new Error('Error sending ESRI json ', result[0].error));     }
case Syntax.FunctionDeclaration:           name = node.declaration.id.name;           utils.move(node.declaration.range[0], state);
objectApp.status = 'crashed';               }
console.error('not logged in')   cli.exit(100) }
var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;     target = target || new Vec3();
var bottom = positionData;         for (i = 0; i < children.length; i++) {             if (children[i].type === "kern") {
} else {     data = key;     this._cfgData = _.assign(this._cfgData, data);   }
_renumber: function () {             var re = new RegExp('^([^\\\[]+\\\[)([#|\d]+)(\\\].*)$', 'gi');
const result = visit(bag, response, context.operation, operationSchema, context);   const data = {
args = {'josh': 'hello'};     var opts = {mock: true};
return "hsl(" + hue + ", 52%, 91%)";   }
const DropdownView = require('../dropdown.view')
output.error("Unhandled command '" + process.argv[2] + "'");         callback(MAIN_EXIT_CODE_ERROR);         return;
print += "\n\n";                 log.i(print);                 print = "";
var _this = this;         this.currentListeners = {};
const OPTIONS = {...state}       let {minify, ...rest} = type == SET_PROJECT_TYPE         ? getProjecTypeOptions(payload)
var theme = t.next(this.opt.areas ? "area" : "line", [this.opt, run], true),      lpoly,      ht = this._hScaler.scaler.getTransformerFromModel(this._hScaler),
return getRGB(color); }
history.listen( ({pathname,search}) => {         var query = queryString.parse(search)
}   case SET_ROLE : {     const commenters = state.get('commenters');     const idx = commenters.findIndex(el => el.id === action.id);
if (!fs.existsSync(modelFolder)) {
employee.name = employee.name.first + ' ' + employee.name.last;                     return employee;
element.autocomplete().autocomplete( "option", "appendTo", "#autocomplete-wrap1" );  assert.equal( element.autocomplete( "widget" ).parent()[ 0 ],   $( "#autocomplete-wrap1" )[ 0 ], "modified after init" );
corousal: function () {   $(".scroller-up").live("click", function () {         var scrollerContentHolderHeight = $(this).siblings().find(".scrollerContentHolder").css('height');
static async replaceResourceExternalToInternalLinks(body) {   const reString = pregQuote(Resource.baseRelativeDirectoryPath() + '/') + '[a-zA-Z0-9.]+';   const re = new RegExp(reString, 'gi');
el.setAttribute('crossorigin', 'anonymous');       el.addEventListener('canplaythrough', () => cb(el));       el.addEventListener('error', () => this.onError());
if (!def) return;  const events = def.events[name];  if (events) {
$scope.isIE9 = isIe9();             }]);
var mBook = this.model.book;         var data = {};
reportIfForbidden(argument.name, argument);         } else if (argType === 'Literal' && /^[a-z][^.]*$/.test(argument.value)) {           reportIfForbidden(argument.value, argument);
} else {   redisClient = redis.createClient(); }
var tagRe = /^((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;   SelectorSet.prototype.indexes.push({
renderDateError: function(){     const {fields: {month, day, year}} = this.props;     if (!year.error) { return null; }
};                 DataGridComponent = __decorate([                     core_1.Component({
} else {    selected = this.state.fieldValue;   }
Expect.describe('Enroll phone number', function () {       itp('has a list of countries in alphabetical order', function () {
list.sort().forEach(function(name){         filepath = path.join(dirpath , name);
describe('.serializeColorSpace(plugin)', function () {     var rgb, unnamed, broken, BaseSpace;
var x = b * options.width + encoding.barcodePadding;   if (binary[b] === "1") {    ctx.fillRect(x, yFrom, options.width, options.height);
if (lighting > 255) lighting = 255;     const r = lighting, g = lighting, b = lighting;     lighting = b + (g << 8) + (r << 16);
import css from 'styled-jsx/css' import { color, radius, space } from '_utils/branding' import { timeWidth } from 'itinerary/style'
}         if (response.whitelisted) {                          document.getElementById('kp-add-to-whitelist').style.display = 'none';
locals.newComment = newReply.id;
case Type.Parameter:       result = this.inferenceExpression(node.init);     break;     case Type.ReturnStatement:
var source = sourceDocument.documentElement.innerHTML;   for (var index = 0; index < dictionaryWrappers.length; index ++) {
this.clicked = function(){    var bl = this.parent.parent.parent;    var fg = this.find("flowgraph");
return res.status(internalError.status).send(createResponseError(internalError)); }
function DashboardCtrl () { }
var form = Promise.promisifyAll(new formidable.IncomingForm())           var progressListener = function(received, expected) {             if (expected) {
normalizeArrayResponse(store, primaryModelClass, payload) {     let documentHash = {
res.send(400,err.toString());             }         },
this._iFactorPage = Math.floor(iScrollBarSize * 0.8);    } else if (Device.browser.webkit) {     this._iFactor = stepSize;
}).catch(() => {                     exitError('Please check your internet connection');                 });
expect(fixedClasses).toMatchInlineSnapshot(`"imageClass gbi-fwatluf"`)   })
nextJob.delay(new Date(result.phases[0].deadline))
y,   xFormat,
this._childExpressions = childExpressions;   this.isUpdating = false;
this.title = this.composer.fields.title;   }
c.d = -10;           (a).b          =          c.d          ++; })();
Server.on('error', function (error) {                     Util.log(error, '\nCould not use https port: ' + sslPort);                     redirectServer.close();
SignatureEngine.prototype.unbox = function(msg, cb, opts) {       var eng, esc, literals, payload, ___iced_passed_deferral, __iced_deferrals, __iced_k;       __iced_k = __iced_k_noop;
static get mapping () {     return mapping   } }
})   .use(function *(next) {     yield next;   });
$connectionStatus.popover('destroy');                             ui.initializeConnectionStatus(transport);                             popoverTimer = null;
if (token === 'null') {       return false
var offset = 0;    for (i = 0; i < parts.length; ++i) {     buf.writeUInt32BE(parts[i].length, offset);
console.log(Detective)                      Detective[attrName](node, attrVal)
shindig.container.ContainerConfig.PRELOAD_TOKENS = 'preloadTokens';
}; const StayScrolledDemo = () => (   <Messages style={style} />
logLevel:'error'      , runners: 1
function assert(b, err) { if(!b) { throw err; } }
KVREG = /\s*"?([^\s"]*)"?\s*"([^"]*)"/;          var rl = readline.createInterface({
that.addTrailers = function(trailers) {     for( var header in trailers ) {       proxy.putTrailer(header, trailers[header]);
promise.resolve();       }       var continueCallback = params.continueCallback;
function (wss, params, scope) {     return new Promise(function (resolve) {
this.time = 0;     }; } Robot.prototype.geom = {
return state     case actions.getIdentityInformation.id_fail:       return state     default:       return state   }
logger.writeConsole = function writeConsole(level, module, args) {
break;             case 3:                 return 'submitted_by';                 break;             default:
Segment.prototype.createTerrainFromChildNodes = function () {        const node = this.node;      const nodes = node.nodes;
, searchLimit: 10 };
function concat(chunks, total) {   if (chunks[0] instanceof Buffer) {    var result = new Buffer(total);
};     if (model) {       if (model.then) {
getUnreadCount(_, done, fail) {     if (apiStatus.getUnreadCount != 200) {
temp += "    _ += '    $TPLS = nodetpl._tpls[\"\'+ PATH +\'\"];\\n';\n";       temp += "    _ += '    $DATA = nodetpl._data[dguid];\\n';\n";       temp += "    _ += '    try{\\n';\n";
return L.CRS.EPSG3857;       case "EPSG:3395":
return content;     }     sax.ondoctype = function(doctype) {
},           (code, responseText) => {             this._showAutocomplete(JSON.parse(responseText), target, val)
}         this.hwModule.setZero();     }
if (!isNaN(x) && !isNaN(y)) {           var geometry = new Point(x, y);
const TagRow = ({ data }) => {   let tags   if (data.markdownRemark.fields.tagSlugs) {
if (typeof source === 'number') {             return source.toString();
onClick: function(event){     $this = $(this);
}     return compute.just(x);
return a.priority - b.priority;         }
link: '<a href="/" class="cc-link">{children}</a>',         'link-right': '<a href="/" class="cc-link right">{children}</a>',         close: '<span class="cc-close">&#x274c;</span>',
this.contentDiv = $('<div class="igv-ideogram-content-div"></div>');         $(parentElement).append(this.contentDiv[0]);         var myself = this;
if (err) {       workflow.emit('exception', err);       return console.error('Error remove session' + err);     }
(function () {   'use strict';
.replace(/</g, "&lt;")             .replace(/>/g, "&gt;")             .replace(/"/g, "&quot;")             .replace(/'/g, "&apos;");     }
import ShareEmail from './ShareEmail' import ShareImage from './ShareImage'
var result = $tw.utils.deepCopy(object),t;  for(t in extendedProperties) {   if(object[t] !== undefined) {
require('./match')(Terms); require('./match/not')(Terms); require('./methods/tag')(Terms); require('./methods/loops')(Terms);
catch (e) {                 var err2 = new Error(e);                 err2.status = 400;                 next(err2);             }
itemClick() {                 FSBL.Clients.SearchClient.invokeItemAction(this.props.app, this.props.app.actions[0]);
default: throw new Error(`Unknown instruction ${instruction.id}.`);   }
controller.action_registerCommands = function( name ){
if (target.nodeName == 'BUTTON') {             event.preventDefault();         }
logger.info(error);         throw new Error('Error getting browsers list from BrowserStack');       }
});      } else if ((m = stream.match(/^\{([0-9]+)(:.+?)?\}/, false))) {
qooxdoo - the new era of web interface development
function Event( type, props ) {         if ( !(this instanceof Event) ) {             return new Event( type, props );
successModal: function() {              global.modalView.modalData.title = 'Success!';
if ($scope.account.notificationEmail.length > 0) {             return !tools.validEmail($scope.account.notificationEmail);         }
if (input.placeholder && 'placeholder' in document.createElement('input')) return input;   var placeholder_color = color || '#AAA';   var default_color = input.style.color;   if (input.value === '' || input.value == input.getAttribute('placeholder')) {
return false; }
}, {     id: "_m2",     name: "Deimos"
url: '',   regex: /^.*(?:(?:youtu\.be\/)|(?:youtube\.com)\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*)/ };
},     function (group) {
"License-Online-Resource" : "http:           }, {             "Part" : "Proj4JS",
this.$el.html(ProgressTemplates(this.options.bars))     },
openLoc: function(){       var basisjsTools = global.basisjsToolsFileSync;       if (basisjsTools && typeof basisjsTools.openFile == 'function')
}   clear() {     cache = {};   }
{     return players * 10 - 10;
return layerDefs;   } };
return width;     }     function getTextRect(text, textFont, textAlign, textBaseline) {
return <Icon.Hot shrink={0.75} />                             case Badges.OLD:
static extractExtension(url) {     url = ParsedURL.urlWithoutHash(url);     const indexOfQuestionMark = url.indexOf('?');
if (currentRow[3] === committedSketch){             var checkerOuter = currentRow[2];
} = actionHelpers;
export function isExplictCommand(name) {   return name && !name.startsWith('-') }
class Wrapper extends Component {    constructor(props){       super(props);       this.state = {
});     }else if(stage.status==3){      if(!stage.timeout){
return       }     }
if (rules && rules.length) {        for (i = 0, length = rules.length; i < length; i++) {         ruleStyleSheet = rules[i].styleSheet;
import $ from 'jquery' import cuid from 'cuid'
const collections = await this.getAllCollections();     for (const collection of collections) {
exports.focus_search = function () {     $("#search").width("504px");
transclude(function (clone) {                         element.append(clone);
compatibility: 'all',        },
alert('Thank you for contacting me! Message was sent succesfully, will get back to you soon!');         },
.join(true,'T');     test('parses single row description',function() {
getFirstVisibleChild : function() {       return this.getVisibleChildren()[0] || null;     },
_ol_TileRange_.prototype.containsTileRange = function(tileRange) {   return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&
exports.init = function() {  this.on("appinit1", function() {     });
if (Device.system.phone) {     return this.getAggregation(sAggregationName, null, true);
describe('repeatEvery', function() {     var job = new Job();     it('sets the repeat interval', function() {
);     if (this.hwModule.monitorTemplate) {         this.hwMonitor = new Entry.HWMonitor(this.hwModule);
);       for (i = 0; i < clientETags.length; i++) {
if(err) {             sage.log(err)
set: function (val) {       FileWriteStream = val     },     enumerable: true,
no.events._hid_key = '_hid';
} catch (err) {       return showError(err)     }
this.allocateQuantity = _scope(quantity, this.available);   }   if (!avoidSlider) {
if(VALID_HOOKS.indexOf(event) === -1) {     log.error('addHook: Unknown event type: ' + event + ' - ignoring');     debugger;     return;
{      var requestList = [];      var requestMap = {};      var selectedRequestId = null;      var lastModifiedRequestId = null;
let i = isTail ? this.items.length - 1 : 0;   while ((item = this.items[i])) {    idx = this._getColIdx(item);
var output = [];
const includes = transpileModules.map(module => (new RegExp(`${module}(?!.*node_modules)`)));   const excludes = [new RegExp(`node_modules(?!/(${transpileModules.join('|')})(?!.*node_modules))`)];
this.dumpStatistics();         cluster.worker.destroy();     }
var self = this,                 $el = self.$element;             var $navTab = self._getNavTab(navTab),
resultGeneratedData = generatedData;             return invokeSandbox('saveSandboxGenerated', generatedData);
if (this.showCursor) {                 index = (this.cursorIndex + samplesIndex) % samples;                 str = 'LODs:' + values[index][0];                 lods = values[index][1];
if (!Spaz.DB) Spaz.DB = {};
console.log(test1_2({})) function test1_3(c) {var a = ((a = c.a) === void 0 ? 3 : a), b = ((b = c.b) === void 0 ? a + 1 : b), c = ((c = c.c) === void 0 ? b + a + 1 : c);  {
}     } else if (lastVnode !== nextVnode || contextHasChange) {         dom = updateVnode(lastVnode, nextVnode, context, mountQueue);
controller.read(processData);  }
process.exitCode = 1; }
type: "2fv"
avatar: {         type: String       },       date: {
array1 = message.toString().split(': ');             array2 = array1[1].split('/');
$.Model.belongsTo = function(type, name){   name = name || $.String.camelize( type.match(/\w+$/)[0] );   var cap = $.String.capitalize(name),
if(_screen) {    APP.Detail[APP.currentStack].add(_screen);
date = new Date(date.replace(/(\d)-(\d)/g, "$1/$2") );    else if (/^(\d?\d):(\d\d)/.test(date)){      let matches = date.match(/(\d?\d):(\d\d)/);     date = new Date();
describe('autoStyling', () => {     it('adds \'material\' modifiers and effects on Android', () => {
env.property = env.property || ''     var match = env.property.match(/^([pP]?([0-9]+))?([/,][pP]?([0-9]+))?/)     if (match) {
} } GreaterThanExpression.sign = $lex.GreaterThan;
}     res.status(200).json(resource);   };
import DelayRender from '../DelayRender'; import { Consumer } from '../AxisContext';
for (keyName in scheme) {           definition = scheme[keyName];           if (definition.calculate) {
var posterImage;   Lib.BACKGROUND_SIZE_SUPPORTED = false;   posterImage = new PosterImage(this.mockPlayer);
disabled: boolean('disabled', false),       length: number('length', 25)
this.storage[fileName] = str;                     return Promise.as(str.length);                 },
} const mapStateToProps = ({ user,posts }) => {   return { user,posts } };
import referencesChecks from './references'; import wordpressChecks from './wordpress';
if ($scope.get('RUBY_ENGINE')['$==']("opal")) {         self.$require("chart-block-macro/extension")     }
if (_htOption.logoImage !== undefined) {             var logoScale = _htOption.logoScale;
Amount.prototype.to_human = function (opts) {   opts = opts || {};   if (!this.is_valid()) return '';
if (5 === 5)  console.log ("hello world");
iElement.on('click', function(){                 if (shortList) {                     scope.showList = true;
import { connect } from 'react-redux'; import { Link } from 'react-router';
diff) {     var originalLines = this.splitToLines(original);
var self = this,             map = App.getLeafletMap(),
{                                  body.blocked.up = true;
var get = Ember.get; var forEach = Ember.EnumerableUtils.forEach;
this.processing = false;       this.set('warningMessage', response.message);     }
prop.input.positions += "["+position.join(",")+"]";     e.preventDefault();
if ((err && err.status == '404') || value == null)           value = [];         value = [];         req.original_images = value;
var trigger = true;         requestTestRunner(References().simpleReference0, queue).
res.send(404, 'SensorID invalid!');     }   } else {
console.log("CRITICAL ERROR: FAILED TO START");                      } else {
ident: function() {     var captures;
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-jsoneditor';   }
config = JSON.parse(config)   let intlData = config.intlData
for (i = 0; i < n; i++) {         j = reverseBits(i, levels);         if (j > i) {
it("should be constructable.", function() {         expect(new RequestQueue({}, immediate));
redirect(model) {     let context = this.modelFor('organization');
Object.keys(runs).forEach(key => {       runAction(key, runs[key], counter1++, counter2++, result => {
for (var i = 0; i < res.length; i++) {                     if (res[i].name.match(new RegExp(adapter.config.kreis + '.xml$'))) {                         files.push(res[i].name);
import ProgressBar from 'progress'; import https from 'https';
Object.keys(tests).forEach(function(test) {   var re = new RegExp('^' + test + '.*\\.json$');   files.forEach(function(f) {
curtop += obj.offsetTop;             } while ((obj = obj.offsetParent));             return [curleft,curtop];
N = require('./../model/HttpHeaderNames'); class GetContainerProperties {     constructor() {     }
import React from "react-native"; import FloatingActionButton from "./floating-action-button"; import Modal from "./modal";
const {resolve, dirname} = require('path') const {read, write, exists, isAbs, del} = require('flipfile') const JSONChain = require('json-chain')
notify: function() {     } });
const Notification = ({   color = 'plain',   size = 'normal',   textAlign = 'center',   active = true,
logFileChanges: false,   notify: false,   online: false  });
"rotate(" + this.angleDeg + ")";   }
exports.Controller_.prototype.preparePopover_ = function() {
$(selector + " [data-index='" + index + "'] .wv-palettes-max")                 .html(max);             var title = legend.title || "&nbsp;";
list: []
, headers: {           Authorization: 'basic '+btoa(server.username+':'+server.password)         }
" " + xAxisRotation + " " + largeArcFlag +          " " + sweepFlag + " " + pointsRel[2] + " " +         pointsRel[3] + " ");   },
tinymce.util.Delay.setEditorTimeout(editor, function() {       editor.windowManager.confirm(message, function(state) {
_.extend(Assemble.prototype, Task.prototype); Template.extend(Assemble.prototype);
this._emberDebugWorker.destroy();     }
import { connect } from 'react-redux' import ViewContainer from './ViewContainer.jsx'
return newState;         case (TablesCntlr.TABLE_NEW_LOADED)  :             const {tbl_id, request} = action.payload;             if (has(state, tbl_id)) {
} else if (edge instanceof CircularEdge) {     if (Util.DEBUG) {       UtilityCollision.edgeEdgeCollisionTests++;
var solution = r.solution;   for(var i=0; i<cell.length; ++i) {
if (address !== undefined) {             let key = /^\s+(\w*):\s+\|/gm.exec(stream.string);             key = key ? key[1] : '';
var _widget, isWidget, _element;         for (var widgetName in targets) {
else             node.target().domdebuggerAgent().removeDOMBreakpoint(node.id, type);         this._saveBreakpoints();
} function endDraggingVertex(state, x, y) {   var catalog = state.catalog;
strategy = '+';         break;       case 'minus':         strategy = '-';
},     componentDidUpdate: function(prevProps, prevState) {         if (this.props.children !== prevProps.children) {             this.maybeUnprocess();
if (data) {           var username = data.layers[1].options.user_name;
steal('can/util/string',function() {
export const flagRejectEvent = (event, message, mode, user) => {              let _mode = mode == 'flag' ? 'flagged' : 'rejected';
_getCacheParam: function (method) {     var detectedBrowser = browserDetect();     var name = detectedBrowser && detectedBrowser.name && detectedBrowser.name.toUpperCase().trim();
} } function insertContent(parent,child,prepend){
} else if ((data.event !== undefined) && (data.event == "patternLab.annotationPanel")) {
var manager = this.managers[peer];       if (!manager) {         manager = new ConnectionManager(this.id, peer, this._socket, options);
}     let request = this._auditingEnabled ?       this._builder.update().item(item).atVersion(expectedVersion).buildRequest() :
this.menuText.anchor.setTo(0.5,0.5);         this.game.input.onTap.add(this.transition, this);     },
this.keypressSound.load();                 this.keypressSound.play().catch(err => console.log(err));             }
var singleAttrIdentifier = /([^\s"'<>/=]+)/,     singleAttrAssign = /=/,
this.forceLayout = layoutEngine;                 this.forceLayout.force.on("tick", function (d) {
const cache = { [`collection:${author}/${url}`]: collection };       await render(req, res, { title: name, description, canonicalUrl, cache }, true);       return;
if (typeof node.name === 'string') return node.name   if (t.isJSXMemberExpression(node)) {     return `${getTag(node.object, t)}.${node.property.name}`   }
return qx.renderer.border.BorderCache._data[propValue];   }
embedModulesIn: function(doc, relativeModuleURLs, progressBar, thenDo) {         var self = this,
if (solved) {     console.log(suspect + " did it in the " + room + " with the " + weapon + "!");
path: "/tutorials/blaze/creating-an-app",     contentTemplate: 'blaze-step01'   },
template: Handlebars.compile(user_profileTemplate),         render : function() {
});         it("async", function (done) {             augur.hashReport(ballot, salt, function (r) {                 test(r); done();
if(response.ok){                      res.json(response.body);
var Select = View.extend({   tagName: 'select',
export class KeyboardInput extends mixin( null, EmitterMixin ) {     constructor( { map, inputs, element = document.body } ) {         super( );
} else {     command = this._findIndexCommand();
app.controller('loginController', function($scope, $http, $state, $cookieStore, webchatService) {      $scope.$state = $state;
];     } else if ((m = s_rgbaRE.exec(s))) {       c = [
var reshape = this._impeach() || this._exile() || this._expand()             if (reshape) {                 this.ponged = false
module.exports.isContainerRunning = function (pod, container) {   return module.exports.containerState(pod, container) === 'running'; }
ChainDB.prototype._pruneCoinQueue = function _pruneQueue(block, batch, callback) {   var iter = this.db.iterator({     gte: 'u/q/' + pad32(block.height),
it('isSubscribable should return false for null', function () {         expect(isSubscribable(null)).toEqual(false);     });
onError : function(responseData, uuid) {     _app.u.throwMessage(responseData);     $(_app.u.jqSelector('#',_app.ext.admin.vars.tab+"Content")).hideLoading();     }
return number * fabric.DPI / 2.54;         case 'in':
finalMeasurements.splice(match, 1);     }   }
'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());         }
else {     this.instance = new core.CanvasRenderer(width, height, settings);   } };
var Web3 = require("web3");
function isArray (ar) {     return Object.prototype.toString.call(ar) === '[object Array]';   }
if (expected !== actual) {          Results.insert({n: next_result++, type: "assert",
var petApi = sample.pet;
CordovaInput.userInterface = new function() {
return this.props.vm.saveProjectSb3()
case 4:       day = "Thursday";       break;     case 5:
value = this.matchString_(text, pos, this.dateTimeSymbols_.QUARTERS);     if (value < 0) {
this._childManager.subscribe(publicationKey, this.swapChild.bind(this));             node.removeAllChildren();
if (wc.hostWebContents) {       const parentWindow = BrowserWindow.fromWebContents(wc.hostWebContents)
trustedDomains: window.location.host ? [ window.location.host ] : [],     cacheBust: true,     forceHandCursor: false,
this.app.removeActivities([msg.activity]);       break;     default:       logger.error('receive error signal: %j', msg);
}   require('events').resizedoc();     }
}         currCommand++;      }
function _helperRemapAsyncToGenerator() {   var data = _interopRequireDefault(require("@babel/helper-remap-async-to-generator"));   _helperRemapAsyncToGenerator = function _helperRemapAsyncToGenerator() {     return data;
for ( x = 0; x < iRowspan - 1; x++) {       if (oLabel) {
return injectZeros(data, this.data, orderBucketsBySum);     }
}    break;   case "say":    if (message.member.roles.some(r => ["Staff", "Développeur"].includes(r.name))) {
return static_url('images/icon-calc.svg');             case DG.TextView:
enyo.dispatch(e);  },
return header; } function decodeChannelHeader(header_bytes) {
console.log(e);         err = new Error('Uglification failed.');         if (e.message) {
PlaceholderComponent(quail, test, Case, options); }; module.exports = ImgAltNotPlaceHolder;
return arcgisGeometryType; } export function warn () {
tapPolyfill: true   },   isMatch(p) {     return p.isPlatform('ios', 'iphone|ipad|ipod');   },   versionParser(p) {
var p = this.props;   const advancedParamsArrow = !!p.showAdvancedMarketParams ? '▲' : '▼'
case 9:return 10         case 10:return 11
app.get('/api/inventory/storerooms/:id', function(req, res, next) {         models.Storeroom.findById(req.params.id, function(err, storeroom) {             if (err) return next(err);             res.json(200, storeroom);
return res.render(res.locals.template, data);
.replace( /\s+-\S+/g, "" )                 .replace( /([([{\\^$|)?*.+])/g, "\\$1" )                  .trim().replace(/\s+/g,'|'),
var clickEvent = 'click';     if (hasTouch) {         userbar.classList.add('touch');
var upper = this.model.interpolate(bounds[1]/n).toPrecision(2);         bounds[0] && this.model.set('lower', lower);
this.addEndSpacers();   }
const {HashNode} = nodes; const {SHORTNODE, FULLNODE} = nodes.types;
getGraphData();   });
set,     delay,
require('./bootstrap'); new Vue({
}     return false;
function(err, componentsInfo){       if(err){ return callback(err); }       server = http.createServer(self.app);
var escapeRegExp = function (str) {     return str.replace(/[\$]/g, "\\$&"); };
import React from 'react'; import ReactDOM from 'react-dom';
options = options || {};
it('MathParameter user resources getter', function () {         expect(mathParameter.getUserResources()).to.be.empty;
function view_find_localization(content, index) {     index = content.indexOf('@(', index);     if (index === -1)
const patternIsString = typeof findPattern === 'string'     if (!(findPattern instanceof RegExp) && !patternIsString) {       return false
logger.info('no changes to report');     }     notifications.wikiChanges(changes, function (err, stringifiedOptions) {
} else {         utils.removeClass(renderer.grid[intersection.y][intersection.x], "dead");       }
reason = evt.reason;     } catch (e) {       reason = undefined;     }
return result.replace(opts.replacement+"$",'');  }
const error = super.parseError(str);     if (!error) { return error }     if (error.name === 'JavascriptError') {
_buttonTxt = "Finish Quiz";             }             var _button = '<button id="nextQuestion" type="submit" class="btn btn-default">' + _buttonTxt + '</button>';
"self": { "href": "/" },     "orders": {
cur = cur[field]           }          })
console.error('Invalid option: ' + v);                         util.exit(1);                         break;                     }
case 'rotate':       cosValue = Math.cos(value)       sinValue = Math.sin(value)
}         minWidth = Math.max(minWidth, this.getColumnMinWidth(col));         maxWidth = this.getColumnMaxWidth(col);         if (this.getColumnWidth(col) !== null) {
if(isClient) {       var a = replicate(function (err) {         console.log('EBT failed, fallback to legacy', err)         rpc._emit('fallback:replicate')
handleMessage: function(msg){       handlers = messageListeners[msg['command']];
throw new Error(parser, "Unknown state: " + parser.state)     }
this.set('message.visible', false);       if (removeAfter) {         Ember.run.later(this, remove, removeAfter);
return this;   } }
for (opts in service.options) {       _req[opts](service.options[opts]);
var actual = new Date(1449662400000).toString();             var re = /^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-+]\d\d\d\d(?: |$)/;             expect(re.test(actual)).toBe(true, actual);
Class.schema.emit(event);     if (!event.stopped) {       return Astro.eventManager.emit(event);
this.downloadData(csvContent, 'csv');   }
if (!args.is_final && !!n.witness_script) {       pairs.push({
if (Ext.Msg) {             Ext.Msg.alert(trlVps('Error'), trlVps("An error has occured"));
console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );    return type[ value ];   }
return loggedIn ? (         <section>
if (hours.id == 9) {                             var matches = /([0-9]+:[0-9]{2})\s*([AP]M).*([0-9]+:[0-9]{2})\s*([AP]M)/.exec(hours.hours);                             if (matches) {
case 6:return 24         case 7:return 22
sequelize: Joi.object().type(Sequelize).required(),     sync: Joi.boolean().default(false),
var props = inst._currentElement.props;
jisp.emit("failure", err, task);       if (jisp.listeners("failure").length) {}       message = err.stack || err.toString();
toString() {     let str = this.name || this.constructor.name || this.constructor.prototype.name     if (this.message) str += ': ' + this.message     if (this.cause) str += '; caused by ' + this.cause.toString()
let rules = [...initialRules];          while (true) {       const currentTarget = targets[targets.length - 1];
if (options ) {         assert(_.isObject(options.cycleDetector));
setTimeout(function() {                     set_and_verify_json_sparse(this.test, suffix, [{
Array.prototype.push.call(newArgs, callbacks);     if(document.body){
horizon(httpServer, {     auto_create_collection: true,
(function (w, $) {     if (!$) return;
}    }    var referenceObj = framesArray.shift();
rep('(load-file "' + process.argv[2] + '")');  }
if(data.user.dataLists == ["1"]){                     data.user.dataLists = [];
await test.execute(argv);    break;   case "start":
beforeEach(() => {              testProps.columns[sortableColIdx].sortable = true;
var result;   var start = this.pos;
emitStack = [],   emitStackLevel = 0;
var _ = require('underscore'); var GeoJSON = require('geojson');
return _nextReplyId++; }
var that = this;  if(!this.groups[toId]) {   this.groups[toId] = {};  }
const dockerVersion = spawnSync('docker', ['--version'], {     env: process.env,
}     var mesh;
object = object || {};     object = appendLinks.call(_this, object);     var str = options.production ?       JSON.stringify(object, null, null) :
var output = eval(reassembleTest(chaiTestFromJSON, data));         }
githubs = JSON.parse(githubs);
export function success(message, title = "Success") {     toast.success(message, title);
this.children = node.children;       for (i = this.childNodes.length; --i >= 0;) {         this.childNodes[i].parentNode = this;
if (op = $(/^[<=>]/)) {                         if (b = $(this.addition) || $(this.entities.keyword) || $(this.entities.quoted)) {                             return new(tree.Condition)(op, a, b, index);
const t = document.querySelector('#pageTemplate');
var response = cache.get(requestConfig.url);       var promise;
}                      const getMembers = members.filter(isGetMember);
var sax;
import React, { Component } from 'react' import { Grommet, Box } from 'grommet' import { injectGlobal } from 'styled-components'
return <CmsContainerItem configuration={configuration} />;       default:
this.props.onUpdate({ valid: isFormValid, partialUpdate: changes })     }
function generate( params, query_mixer ){   var CmdGenerator = function(params){
import Ember from 'ember'; export default {
linuxDash.directive('diskSpace',[ 'server', function(server) {     return {
while ((prop_value = cssStrings[i++])) {     prop_value = prop_value.split(':');
var fieldName = 'f_' + field.id,             input = inputData[fieldName] || "";         originalFieldData = (originalFieldData && originalFieldData.content) || "";
})(); (function() {     M.inherit = function(ChildClass, ParentClass) {
case 'formData':
var resourceRef = sync.dataRef ? sync.dataRef.child('resource') : null;         if(sync.isMine && !this.refLock && resourceRef)    resourceRef.set(this.data.res);
setSubs: function (name, value, options) {       if (typeof name !== "string" || name === "") {         return "";
rollup_commonjs({      extensions: [ '.js', '.es6', '.es', '.jsx', '.ts', '.tsx' ]     }),
import * as serviceWorker from "./serviceWorker";
return config;   }   if (config[command] == null) {     throw new Error(ERRORS.noProperty(command));   }
summary.characterData = projection.getCharacterDataChanged();     return summary;
if (window === 'successWindow') {    this.$.successWindow.setAttribute('style', 'display:block;');
reset : _element("<input>", { "type" : "reset" }),
} else {
return /iPad|iPhone|iPod/.test(navigator.platform); }
if (level == 0) {                 xml += currentIndent + '</' + inflection.pluralize(n) + '>';               }
import { removeFromArray } from '../../utils/array';
marker.update(previous && previous.element);   if (previous && settings.scrollPreviewWithEditorSelection) {    let scrollTo = 0;
const temp = input.parentElement;     input.outerHTML = `${input.outerHTML}`;     input = temp.firstElementChild;
for(i = children.length-1; i >= 0; i--){     children[i]._testInputs(ctx, inputs);
function addResponsiveClass(str) {   return str.replace(/<img/g, '<img class="img-responsive"'); }
performSearch: ({ updateResults, fuse }) => (_, query) => {       let results
ipAddress: function(ipAddress) {     var match = ipAddress.match(/\)\)\)([0-9.]+)$/);     if (!match) return null;
if(err) { return handleError(err); }       roles = getArguments(arguments);       populateGlobalRoles(roles);
}       if (typeof o === 'object') {         var s = JSON.stringify(o);
try {   this.db = DatabaseModule.open(this.name);  } catch (ex) {
this._props.name = value;    this.emit('setName', value);    return true;
if (selection) {             editSelection(selection);           } else {
}     var nMeasured = 0;     morphWidth = morphWidth - paddingLeft - paddingRight;
this.PropertyPathWalker.Update(source);          } else if (this.Binding.RelativeSource && this.Binding.RelativeSource.Mode === namespace.RelativeSourceMode.Self) {              this.PropertyPathWalker.Update(this.Target);
debug('tip', {username, address}) } const publish = async (post) => {   debug('publish', post) }
django.jQuery(function($) {    django.cascade.TextLinkPlugin = ring.create(eval(django.cascade.ring_plugin_bases.TextLinkPlugin), {});
case 's':                 return s + "es";             case 'h':
if (oldState) {                 const upgradedState = ['_g'];
module.exports = line
function saveUserOnRegistration(auth, identity) {  _controllers.controller.storage.users.get(identity.user_id, function (err, user) {   var isnew = user ? false : true;
"d9/dec/a00090.html#a9c0d57cd72c091f63895944959e98330":[10,0,2,1,2,0], "da/d24/a00068.html":[10,0,3,0,0],
this.chunk = null;   length = this.offset - start;   if (headerState[this.state]) {
var currentNode = new PointCloudOctreeGeometryNode(name, pco, boundingBox);     currentNode.level = level;
}); }; module.exports = LanguageDirectionPunctuation;
var itemPropertyKeyPattern = match[2],           addItemPropertyKey = function (itemPropertyKey) {             cp.itemPropertyKey(dependentArrayKey, itemPropertyKey);
}else{             diffLocalAssets(conf, state).then(function() {
{token : "string", regex : "'",     next  : "start"},             {defaultToken : "string"}         ],
case 'divider':               return <Divider key={`menu-${(Math.random() * 100).toFixed(5)}`} />
return React.createElement(props.inline ? 'span' : 'div', { className: props.className }, items); } Group.propTypes = {
hex6: function() {     var captures;
}             }             for ( i = 0, l = this.types.length; i < l; i++ ) {                 this.order[ this.types[ i ] ] = storages;
import { startCase } from "lodash"; import FeatureProperties from "./FeatureProperties";
}     projectName = projectName ? projectName.textContent.trim() : '';     const link = togglbutton.createTimerLink({       className: 'phabricator',
return $.ajax({             url: baseUrl() + url,             type: "PUT",
describe('PublicProductListItemResultModel', () => {         it('should create an instance of PublicProductListItemResultModel', () => {
var r2 = obj.rectangles[1];   while((from = todo.pop()) !== null) {    vertices[from].neighList.forEach(function(obj) {
callback(null, msg);   }   this.slave.once('disconnect', onclose);
});  };  var fullResizeVideo = function() {
exports.prototype.setHeight = function(height) {   this.element_.height(height);
ev = both ? eventName : 'all';             list = calls[ev];             if (list) {                 for (i = 0, l = list.length; i < l; i++) {
if (comment) {
var eos = require('end-of-stream') var through = require('through2')
normalizedHighlights = $.unique(normalizedHighlights);             return normalizedHighlights;         },
clipboardy.writeSync(emoji);   onExit();  };
params.FilterDesc = args.optarg;                                         break;                                                  case "l":                 params.FilterLib  = args.optarg;
]);     _templateObject_45208030e11911e89f44553d39ad6ced = function() {       return data;
import Mosaic from '../../src/index';
return this.i18n.Normal;                 case 2:
exports.run = function (grunt) {     var replaceContent = function (content, sha1) {         content = content.replace('%extVersion%', grunt.config('pkg.extVersion'));
require(['gv', 'config', 'models/Books', 'models/State', 'views/AppView', 'layouts/Layout', 'routers/Router'],      function(gv, config, Books) {
.then((response) => {         if (response.status === 401) {
import theme from 'nivoTheme' import { totalCount, getColor } from '../../../constants' import ChartLabel from 'core/components/ChartLabel'
if (textfield) {       goog.dom.classlist.add(textfield, 'firebaseui-textfield-invalid');     }
var testMulAsync = async(function *(declaration) {             assert(lib._funcs);             assert(lib._funcs.mul);
TransportMetricsPlugin.prototype.unbind = function () {     $A.uninstallOverride("ClientService.send", this.sendOverride);
if ( typeof OrbitControls === 'function' ) this.controls = new OrbitControls( this.camera, this.container );
this.element.appendChild(img);     }
}))             )         }         componentDidMount() {
it('Should filter out bad values', () => {       const nodes = findById([testID, 'NotFound', null, '', {}, 99, undefined, 'Duplicate', ':bad-id']);       expect(nodes)
it('2. Basic Usage: collection observable with ko.computed', () => {     kb.statistics = new kb.Statistics();
.then(items => items.reverse())         .then(items => items.filter(item => !document.getElementById(item.guid)))         .then(items => items.map(item => applyTemplate(itemTemplate.cloneNode(true), item)))
item.addParents = function (person) {   if (person.inFamily) {
for (var metric in this.metrics) {       if (this.metrics[metric].target !== false) {         var name = this.metrics[metric].target + '-' + this.metrics[metric].source
}     this.zoom_container.go_to(new_zoom, new_pos);
if (addon.plan.name.match(/hobby/) != null) {       cli.exit(1, 'redis:maintenance is not available for hobby-dev instances')     }
Object.defineProperty(baseObj, property, {get: getter, configurable: true});   }   var setter = baseObjProperty && baseObjProperty.set;
function makeImage(src) {             return new Promise(function(resolve) {
function Consumer() {}     Consumer.prototype.consume = function (ip) {
angular.module('axisJSApp')   .service('pdfOutput', function pdfOutput(GenericOutput) {     var pdf = angular.copy(GenericOutput);
}             } catch (ignore) {                 return '';             }
var $scoreWrapperEle = $('.bubble-wrapper')[0]  if($scoreWrapperEle)   document.body.appendChild($scoreWrapperEle)
: str.replace(/\\/g, '/') } if (process.platform === 'win32') {
case 'boolean' :         return json;       default:
var wrap = require('./lib/wrap'); var fs = require('fs'); var coffee = require('coffee-script');
done();   }
let i = type === 'ssa' ? 2 : 1             for (; i < 9; i++) {               subtitle[ASS_KEYS[i]] = values[i]
log.info('CornerstoneToolsMeasurementModified');   const measurement = collection.find(
if (!item.next) {                      } else {
} ); export { Skeleton }
if (this.get('model')) {     var models = [this.get('model')];     for (var i = 0; i < types.length; i ++) {
pathname_prefix: "",       app_tag_on: true,
],       "category": Blockly.Categories.data,
require('./grouped_builds_view.css') const PipeLineBuild =  React.createClass({
let resp = QRespondent.findOne( {_id:Session.get("rid"+instance.qnrid())} );         $(".qq-val").each(function(idx, elem) {
var parts = /^(.+\/)*(([^/]+)\.[^/.]*|[^/.]+)$/.exec(process.env.GEOJS_TEST_CASE);     if (parts) {
if (!$.os.ios || !this.requiresNativeTap) this.allowDocumentScroll_ = false;
process.exit(1);            }
expect(data).to.deep.equal({id: step.id, key: 'foo', cells: {A: 4, B: 2, C: 3}});
return originalValue;       case 'object':
i = 0xFF;         do         {             var n = this.readRegister(this.DivIrqReg);
if (callback) {     var next = function(er, ret) {       if (ret)
computed,   get,
page.onConsoleMessage = function() {
const mqtt = require('mqtt') opt.subbroker = opt.subbroker || opt.broker
const Plugin = require('../plugin'); class Router extends Plugin {
return cb(); }
if(err) { return handleError(res, err); }       return res.json(attendance);     });
}    }    console.log("total rooms: ",this.map.roomsToExit.length);
};     return DigitalOcean;
return false;       case 'Object':
if (!session) return;
const targetName = target.name;
if (fs.existsSync(unixSocketFile)) {     return requestEmulator(unixSocketFile, options);
};     return new CommandStack();   });
forEach(appsList, function (app, key) {     appListData.push({
else return logs(args[0], cb);     }     case "stop":  {
};     ApiDemoPage = __decorate([         core_1.Component({
setDevicesDiscoveryConfig(config) {   }
return function defFunc(ajv) {     defFunc.definition = {
const instance = this;  Apps.getWsListener().unregisterListener(AppEvents.APP_STATUS_CHANGE, instance.onStatusChanged);  Apps.getWsListener().unregisterListener(AppEvents.APP_SETTING_UPDATED, instance.onSettingUpdated); });
};       } else if (!paymentCurData) {                           state = {
thesauris.save(data)       .then(() => {         return thesauris.get();
startEndMarkers.push(marker);         }
function doAddressSearch() {   var address = $("search_input").value;
goog.require('Zlib.Deflate'); goog.scope(function() {
output: {     filename: 'bundle.min.js'   },
this.pixelType = WEBGL_PIXEL_TYPE.FLOAT;         this.magFilter = WEBGL_TEXTURE_FILTER.NEAREST;         this.minFilter = WEBGL_TEXTURE_FILTER.NEAREST;         this.generateMipmaps = false;
case 'string':                     return "'" + value.replace(/'/g, "''") + "'";                 case 'number':
} function last(arr) {
}); (function ($) {  "use strict";
);                                  var middleRect = d3Ref.draw.centeredBasicRect( new DiagramCore.Models.Point({'x': center.x(), 'y':  center.y()+100}), 150, height, 0, 0);
if (!firstLang) {             return gettext('[unknown]');         }
this.name = 'MongooseError'; }
return 'web'   }   static get scheme () {     return 'session'   }
function use (names, fn) {   if (type(names) === 'string') {
for (var index = 0xF0; index <= 0xF7; index++) {   count++;    var hex = decimalToHexString(index);   try {
Compiler.prototype.visitRulesetList = Compiler.prototype.visitRuleList;
if(isStream(items)) {             iterateOn(iterations, items, scope, section.alias,
return new oid(); }
if(this.addproperty_checkboxes) {       for(i in this.addproperty_checkboxes) {         if(!this.addproperty_checkboxes.hasOwnProperty(i)) continue;
return 'Q';     case 'chancesleet' :
import 'whatwg-fetch'; import { TargomoClient } from './targomoClient';
return !!value;             case 'habool': {                 const haBoolean =                     this.nodeConfig.server.nodeConfig.ha_boolean === undefined
html += "<h3>Functions</h3>";    for (i=0; (o=objs[i]); i++) {     if (o.group) {
getSiteType: function() {         if(window.CHAT) {             return 'chat';
darkMode: window.Canvas.user.darkMode,     locale: window.Canvas.user.locale, };
function distribution(obj){         const o = normalizedObj(obj)         return function(){
return false;
case 'read':
if (!result.valid || polymorphicValidationErrors.length > 0) {                 error = new VError('Error validating request body');                 error.name = 'ValidationError';
if (data) {       data.id = data._id;       delete data._id;
.reduce((sortedLabels, labelName) => {       sortedLabels[labelName] = unsortedLabels[labelName];       return sortedLabels;
return rule.test(val);    case '[object Array]':
throw new Error('Logger.cli() was removed in winston@3.0.0');
} catch (e) {     let pathname = new URL(event.request.url).pathname
} else if (tag.type === "return" || tag.type === "returns") {
}             var viewGL = (coordSys && coordSys.viewGL) || chartView.viewGL;
var menuplate = function($userOptions) {};
if (unrenderers[i]($content, message)) break;   }  }
checkQuit();   });  }
return field     } catch (err) {       this.emit('log', {         source: 'types',         level: 'error',
render: function () {          var accountLinks;
}             if (!value) {               childScope = $scope.$new();
}else{     this.slave.apply(this, obj[key]);
return null; }
script
thisMonth = this.value.getMonth();     monthLength = this.getMonthLength(thisYear, thisMonth);     var dates = this.$.dates.getControls();
if(editor.isMathEditorVisible() && e.type === 'focus') editor.closeMathEditor()                      }).on('paste', e => {
};     RouteButton = __decorate([         react_redux_1.connect(null, function (dispatch) {
function webglInputEvents(webglGraphics) {     if (webglGraphics.webglInputEvents) {
import MoviesCardList from "../components/MoviesCardList"; import ReviewsList from "../components/ReviewsList";
if (this.v <= 5) this.errorReservedID();       break;     default:       pendingExprHead = this.id();
render(<Positioner />);
if(!!env.mongo) {         log('Starting MongoDB');
var sublocality_area = [];       geocoderResult.address_components.forEach(function(addrComp) {
else if (A.FormValidator.isCheckable(target)) {                             label = ancestor.previous('.' + label);
console.log('PDC:');   console.log('UserName:');
}   if (niantic_params.CURRENT_VERSION === undefined) {     dialog({
$advancedPreview.css("background-color",color);           methods.updateLightnessStyles($lightnessSpectrum,currentHue,saturation);           $hueSpectrum.attr("style",methods.updateHueStyles(saturation,currentLightness));
this.forward(req, res, function(r) {     r.on('error', function(err) {       self.emit('error', err);       res.end();
}); describe('GET /api/peers', function () {  describe('ip', function () {
constructor() {         this.wordPattern = /[^\s()[\]{};"\\]+/;         this.indentationRules = {
import { BackendService } from './services/backend.service'; import 'rxjs/add/operator/toPromise';
if (nodejs) {      require('./cluster');
export function* getRecords() {   const currentModel = yield select(makeSelectCurrentModelName());
onTick: () => {    Logger.debug('Cron job completed', 'Cron', false)   },
handleTlsConnection (socket, hostname) {     log.info({ for: hostname }, 'new Tls connection');
}                 for (i = 0; i < this.assetManager.indices.length; i++) {                     if (this.assetManager.indices[i]) {
parser.addHandler("season", /([0-9]{1,2})x[0-9]{1,2}/, { type: "integer" });     parser.addHandler("season", /(?:Saison|Season)[. _-]?([0-9]{1,2})/i, { type: "integer" });
x[0].id = path + '/' + i;             if (p !== 'src' && (t = props[ppre])) {                  if ((isPseudo && freezeID === t.freezeID) ||
lazy: true,                 useFactory: (config, bootstrap, types, resolvers, args, guards, graphqlConfig) => __awaiter(this, void 0, void 0, function* () {                     config = yield config;
const firstDigit = requestDetails.statusCode.toString()[0];             if (firstDigit !== "2" && firstDigit !== "3") {
return true       } else if (comparison < 0) {
}   global.ng.common.locales['ar-il'] = [     'ar-IL',
}).then(function (key) {   if (key._key)    t.pass('CryptoSuite_ECDSA_AES function tests: verify generateKey ephemeral=true return object');
const URL = req.body.url     appstore.fetchAppInfo(URL)       .then(info => appModel.add(info))
function _addChar(ch, pos){       var id = _.uniqueId('char-')
};  _ImplicitStylePropertyValueProvider.Instance.RecomputePropertyValue = function (propd, lower, higher, clear, error) {      if (!clear)          return;
return tokens;   }
a += b;       break;     }
var transactionsbypayeeRef = {};         var thisHouseId = myCache.get('thisHouseId');
var h;    while((h = this._notifyConnections.pop())){ h.remove(); }
}   file = path.resolve(process.cwd(), file);   if (!~file.indexOf(':
loadWidget: function(index) {
var mcos = 1.0 - cost; v0 = mcos*xy; v1 = mcos*xz; v2 = mcos*yz; return this.multMatrix([cost+mcos*x2, v0+zs, v1-ys, 0, v0-zs, cost+mcos*y2, v2+xs, 0, v1+ys,
showPoster(source);     } else if (ext == 'mp4' || ext == 'ogg' || ext == 'ogv'|| ext == 'webm') {      playVideo(source);
function basicGithubId(text) {   return text.replace(/ /g,'-').replace(/[\/?:\[\]`.,()*"';{}+]/g,''); }
for (index1 in parents) {           if (Object.prototype.hasOwnProperty.call(parents, index1)) {             var k1 = parents[index1];
options.id = layer.id;       esriLayer = new CartoLayer(layer);
columnClass: 'col-lg-3 col-md3 col-sm-2',                 linkTo: "\{\{ '/#/inventories/' + group.inventory + '/' \}\}"                 },
switch (action.type) {     case 'MEALS_REPLACE': {       let meals = [];
} else {           helpers.success("Docs successfully built.");         }
tabWidth: 2,       wrapColumn: 80,
$('#deletingAlert').addClass('in');                         var request = $.ajax({                             type: 'DELETE',
let state = arrayStates._START_;   while (this.index < this.tokenList.length) {    let token = this.tokenList[this.index];
loadItems: function() {   var hash = {};   hash.type = 'GET';
try {               var value = Slim.lookup(source, path, target);               target.innerText = target.innerText.split(expression).join(value || '');             } catch (err) {}           };
var assembleDefaultLayout = function(assemble, next) {       grunt.log.writeln('Assembling'  + ' default layout'.cyan);
seenNonDefaultActions.push(action);       if (actionConflicts[actionHash(action)]) {         actionConflicts[actionHash(action)].forEach(function (actionConflict) {
if(this.constructor.prototype==c.prototype && (ct=this.postscript)){ ct.apply(this, args); }   },
var config;
}     } finally {
console.log ("Error posting to instances, instance data json string no passed in or corrupt");         exit (1);     }
},  'no semi-colons II': {   options: {
var result = null;     models.forEach(function(model) {
whileplaying: function() {                     eqBarValues = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
if (args) {       if (typeof args.name != "undefined") {         this._name = args.name;       }
allParams = [];     _splitter = obj.splitter !== undefined ? obj.splitter : "-";
dobDays: Balanced.TIME.DAYS_IN_MONTH,
tDescription = this.getPath('model.attributeDescription.attribute.description') + '—' +                                     'DG.LegendView.attributeTooltip'.loc();         if( tDescription !== this._labelNode.get('description')) {
name: `npc${i}`,         labelText: n,         appendTo: this.npcSettingsWindow,
console.log('error!', res);                     });
return keysNotTranslatedPerLocale; }
if ( id instanceof Array )     {
throw "self.record undefined in start observing"   }
export function clearAutocomplete () {   if (autocompleteResults) {     autocompleteCurrentValue = null
let gatewayStatus = availableGateways[selectedGateway];     inputCoinType = !!gatewayStatus && gatewayStatus.assetWithdrawlAlias          ? gatewayStatus.assetWithdrawlAlias[inputCoinType.toLowerCase()] || inputCoinType.toLowerCase()
var QueueEmpty = exports.QueueEmpty = function() {     this.name = "QueueEmpty";
var isReadonly = angular.isDefined(attr.readonly);     var mdNoAsterisk = $mdUtil.parseAttributeBoolean(attr.mdNoAsterisk);
url: contextPath + "/loadLinksConfig",             data: {},             success: function (content) {                 if (tomlEditor != null) {
case 'oneToManyMorph':           case 'manyToManyMorph': {             const transformToArrayID = (array) => {               if(_.isArray(array)) {
}                   if(data.user.mostRecentIds == {corpusid:null}){                     data.user.mostRecentIds = {};
var me = this;         me.flow = new ThemeFlow();         me.offset = new ThemeOffset();         me.style = new ThemeGraduatedSymbolStyle();         if (options) {
$(window).on('resize.ADE',callback);   }
var web3 = require('./web3');
return (x)['+'](this);              }
return process;    case "relay":
return "?" + query.join('&'); }
import Plain from "slate-plain-serializer"; import { Value } from "slate";
this.setState({circuitType5: null});                                         break;                                     default:                                         break;                                 }
fs.unlinkSync(actualFile);     } catch (err){}
case "Lbracket":             if (this.lookahead(0) === "Number" || this.lookahead(0) === "Colon") {
return callback(null,'Done - Xml Process');           }
return gulp.src(config.path.resources)              .pipe(gulp.dest(path.join(config.path.build, 'res'))); }
: table[field].equals(context.request.urlTokenized[index - 1])           case "null":
_ol_.WEBGL_EXTENSIONS;
import MarkdownSerializer from 'slate-mdast-serializer' import { matchBlock } from '../utils' import shortId from 'shortid'
var g = ('undefined' === typeof window ? global : window) || {}   _crypto = (
if (e.url === component) {               flexo.notify(this, "@loaded", { instance: this
vNext = vItems[vItems.length-1];   }
return HoneyProxy.search("filter-"+($el.data("filterclass").split(" ").join(" filter-")),$el.val(),$el.data("negate"),ids);  }
const URL_REGEXP = /(url\s*\(\s*['"]?\s*)([^'"\)]+)(\s*['"]?\s*\))/g; function processStyleDeclaration(decl, opts) {
headerHeight:30,
}             for (i = startIndex; i <= endIndex; i++) {                 var item = childNodes[i];
forEach(tmp, function(value) {           if (!value.match(/^max[^-]/)) {             style.push(value);
.then(() => {      done.fail('Should not have been able to join a room uninvited');     }).catch(e => {
throw new Error();      };
type: 'array',           of: [
throw new Error('Should not execute unrelated afterEach');     });
this.update = function(node, template) {     node = this.get(node);     var oldName = node.name;
const request = require('request-promise-native') const pacote = require('pacote')
var React = require('react'); var APIRequest = require('superagent');
const monthsNumInc = text.toString().match(/:MM_[-,+]?[0-9]{1,2}(?!_)\b/ig);     if (monthsNumInc) {
if (inTimetable) {             type_text = "(" + (credit+au) + ")";
return model.getDocs(currentWord)         case 'definition':
location_arrow: 'location-arrow',  long_arrow_down: 'long-arrow-down',
escapeRegExCharacters(value) {     return value.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');   },
Observable.prototype[symbol('observable')] = Observable.prototype.toESObservable;
if (!ws || !ws.length) {       return null;     }
results:[params.pathToCode],            env:params.env,            arc:params.arc,            start:params.start,            stats:[stats]
var workers = self.workers;     if(config.workerCount !== self.workerCount) {
state.assignable = false;                         strings = [state.tokenValue];                         result = new runtime_1.TaggedTemplateExpression(strings, strings, result);
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-08\/mental_feeling-1312586254.swf",  admin_props : false,
return "mat3";                     case Kinds.MATRIX4:                         return "mat4";
console.log(chalk.white(prefix), sep, msg) }
var StringBuilder = traceur.util.StringBuilder;
result.errors.push(`Error: invalid data to convert to search format`);             return result;         }
describe('bundling', () => {   it('should work', () => {
charSet: null,     allowTransparency: null
Swiped.prototype.move = function() {         if ((this.dir > 0 && (this.delta < 0 || this.left === 0)) || (this.dir < 0 && (this.delta > 0 || this.right === 0))) {
wait: function(data, callback){         setTimeout.call(window, callback, data.timeout);     },
rawCase.status = { 'name': rawCase.status };             rawCase.group = { 'number': rawCase.folder_number };
export const getRidOf = str => {   if (/\{[^}]+\}/.test(str)) {     return {
var childPositionsValid = true;   for (let i = 0; i < this.children.length; ++i) {    if (!this.children[i].positionValid(this.children[i].getCurrentSpace())) {
const renderer = TestUtils.createRenderer(); describe('ObjectName', () => {
if (!(file instanceof File)) {    this.setState({
case 'de':       return formatNumber(this, '.', ',');     }
renderChannels() {     this.setState({ currentRoute: "channels" });
this.websocket.send(`${commandStr}${utc}`)   }
.replace(namedParam, function(match, optional) {                      return optional ? match : '([^/?]+)';                    })
var _documents = state.documents.get(targetName);           var _nextState = state;
};     case TYPE.BINANCE_CANDLESTICK:
<AppIcon />;    const codeIcon =
while (++idx < len) {         ch = str[idx];         substr += ch;
if(val.indexOf('rgb') > -1) {    matched = false;
$scope.removeSubscription = function() {             userSubscription.$remove().then(function() {                 NotificationService.success('Removed', 'User Subscription')
gpii.processReporter.live.get = function (request, processReporter, solutionsRegistryDataSource) {     var runningSolutions = [];
_.each(tagName, function(tag) {       tagIsComponent(tag, isComponent);     });
}                 }                 return postData.call(self, batchExt, { tx: self.txArray });
const value = xs => isEmpty(xs) ? `[]` : `${head(xs)}:${value(tail(xs))}`;     return `[${this.typeOf() === `[string]` ? fromListToString(this) : value(this)}]`;   }
self.annotate = function(req, action, objects) {     var matches = action.match(self.permissionPattern);     var property;
'(' + baseUrls.join('|') + ')' +     /(?::\/?|\/)([^\/]+\/[^\/]+?|[0-9]+)$/.source   );
updateResources(){         let tmpSwagger = this.state.swagger;
}, undefined)   var menu = shop.options.menuFactory.create(menuOptions)   if (!menu) {     renderNonTty(shop, menuOptions)
case GeochronoUnit.EPOCH:             dates = GeochronoLabeller.epochNames; break;         case GeochronoUnit.PERIOD:
options: {                 startkey: [startOfWeek, null, null],                 endkey: [endOfWeek, endOfWeek, 'appointment_'+maxValue]
this.handleOrientationChange();     }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-01\/1294353899-4428.swf",  admin_props : false,
for (var propertyId in statements) {     angular.forEach(properties.getRelatedProperties(propertyId.substring(1)), function(relPropScore, relPropId) {
draftPoint_attr,   draftPoint_clone,
self.remove = function (model, e) {             if (confirm(gettext("Are you sure you want to remove this conditional message?"))) {
document.getElementById("router").setAttribute("route", route); }
router.get('/', async (ctx, next) => {     ctx.body = { message: 'Hi there. ' +  process.env.npm_package_version} })
var test = document.createElement('div');     var fragment = parseAndBindHTML('<input value="{{bar}}" />', test);     test.appendChild(fragment);
this.inherited = true;   }
return (isNaN(n) ? (confVal === "true") : (n !== 0));   } else if(typeof confVal === "boolean") {
import { storiesOf } from "@storybook/vue"; import { withKnobs, select } from "@storybook/addon-knobs"; import createStorybookTable from "@/utilities/js-helpers/createStorybookTable"; import notes from "./README.md";
error : function(data){        Notification.error("Error while Searching.");       }
}; export const traverseEach = (navKey, state, resultFn, path, object, pathIndex, returnFn, context, mutationMarker) => {
augur.api = new contracts.Tx(process.env.ETHEREUM_NETWORK_ID || constants.DEFAULT_NETWORK_ID); augur.store.getState().contractsAPI.functions = augur.store.getState().contractsAPI.functions; augur.bindContractAPI();
createDat: {     desc: (param, pages, opts = {}) => {       if (opts.title) return `create a new Dat archive, "${opts.title}"`
var indexO = 0; for (var indexB1 = 0x00; indexB1 <= 0x7F; indexB1++) {   count++;   var hexB1 = decimalToHexString(indexB1);
var status = navigator.onLine ? true : false;     if (status) {
return originalValue;     case 'object':
}         case 1:
Ti.Android.currentActivity.startActivity(intent);  };  var createOptionsMenu = function(evt) {   var menu = evt.menu,
$("#saved-questionnaire-code").val(responseJson.form_code);
if (node.start !== pragmaParent.body [0].start) {     error = {      node: node,
binding,   bindings;
})(OpenSeadragon);
if (external.isEmptyString(path)) {                 node.id = external.uuid();                 path = "#" + node.id;             }
for (let i = 0; i < response.bids.length; i++) {
import { assert } from 'chai'; import * as InkModel from '../../../../src/model/InkModel';
} catch (e) {       parsed = params[param];     }
class CliApp {   constructor (options) {     options = options || {}     const Commands = require('./cli-commands')     this.commands = new Commands()
it('finds correct orfs in reverse direction in slightly more complex sequence', function() {   var orfs = getOrfsFromSequence({
|| font.bold) ? "bold " : "normal ";         css += font.pixelSize !== undefined             ? font.pixelSize + "px "
Rendition.prototype.moveTo = function(offset){  this.scrollBy(offset.left, offset.top);
if( CHAR.LINE_FEED === src.charCodeAt(c)) c++;       break;     case CHAR.LINE_FEED:     case 0x2028:
this._readStream.on("error", function(err) {     that.emit("error", err);
gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
path = url.parse(req.url).path,     schema = req.connection.encrypted ? 'https' : 'http',     dest = schema + ':
validation: {         regexString: '^/',         message: i18n.translate('kbn.advancedSettings.defaultRoute.defaultRouteValidationMessage', {
} else {        err = tools.formattedError('Redirect loop detected after %d requests.', reqId);        err.code = res.statusCode;
const bodyParser = require('body-parser'); const compression = require('compression');
themedLayer.setVisible(!themedLayer.getVisible()); });
var reader = fd_slicer.createFromBuffer(buffer);   fromRandomAccessReader(reader, buffer.length, options, callback);
'use strict'
if (error) {           if (onError && onError.length) {
await writeData     balances = balances.toNumber()
activityCollection: { name: 'sys_activitys' },       logCollection: { name: 'logs' },       fileCollection: { name: 'sys_files' }
ctx.shapeNode = XHTMLNS.create(this.tagName);         if (this.extentOverride) {             ctx.domInterface.setExtent(ctx.shapeNode, this.extentOverride);         }
function resolveInstanceNow (promisesToWaitFor) {     if (_.isUndefined(promisesToWaitFor)) {       finishResolution();       return Promise.resolve();
$rootScope.autoLogInInterval=setInterval(tokenRefresh, 1800000);          }  });
compSvg.setAttribute('height',this.data.h);         var g = createNS('g');         compSvg.appendChild(g);
this.TTCR = (this.TTCR + delta) & 0xFFFFFFFF; }
bible.APOCRYPHAL_BIBLE = bible.OT_BOOKS.concat(bible.AP_BOOKS, bible.NT_BOOKS);
return this.store.find('criterion').then((criteria) => {       return Ember.RSVP.hash({
if (event.type === "m.room.tombstone" && this._roomUpgradeHandler) {         this._roomUpgradeHandler.onTombstone(ev);         if (this.opts.RoomUpgradeHandler.consumeEvent) {             return Promise.resolve();
var bottomRow = new UIRow();  var bottom = new UICheckbox( parameters.bottom ).onChange( update );  bottomRow.add( new UIText( 'Bottom' ).setWidth( '90px' ) );
}       if (this.element.tagName === "FORM") {         _ref2 = this.element.querySelectorAll("input, textarea, select, button");
import "babel/polyfill"; import once from "once";
.catch(onError); export const apiFetchSelected = id =>
var self = this;
Transport.prototype.poorConsensus = function (consensus) {  if (library.config.forging.force) {   return false;
const dockerfilePath = 'Dockerfile.ui'    const dockerfile = `    FROM nginx
}     self.outputResources.push({       type: 'asset',
elemToPut.put(params, headers).then(function(serverElem) {                   var newArray = copyRestangularizedElement(__this);                   newArray[idx] = serverElem;
return choiceConditional;         case 'Wait':
var waiting = 1;     this._opposite.once('end', finish);
module.exports = goo; } if (typeof window !== 'undefined') {     window.goo = goo;
if (slippage > so.max_slippage_pct) {                     let err = new Error('\nslippage protection')                     err.desc = 'refusing to sell at ' + fc(price) + ', slippage of ' + pct(slippage / 100)
case "blackberry": validateBBParams(type); break;       default: '';     }     log.info("Uploading resource : path : " + filepath + ", destination : " + destination + ", config : " + config + ", type : " + type);
import { ShaderCache } from './shader_cache.js'; import { WebGl } from './webgl.js';
return w; }
return [path_selection.guard, path_selection.middle, path_selection.exit] }
ln = readline.line;       var pos = readline.cursor;
PublicKeyRing.fromObj = function(data) {   preconditions.checkArgument(!(data instanceof PublicKeyRing), 'bad data format: Did you use .toObj()?');   var opts = PublicKeyRing.trim(data);
si.key = ki;     }     for (i = 0, oz = order(sz); i < n; ++i) {       sz[oz[i]].index = i;
$scope.tokenActivity = transactions;
include: /source/,                     exclude: /node_modules/,                     use: { loader: 'ts-loader' }
grunt.registerTask('test', 'Runs test in node', function() {         var done = this.async();         require('./test/runner').node(done);     });
const config = require('config'); const app = express();
uniforms: UniformsUtils.merge( [    UniformsLib[ 'common' ],    UniformsLib[ 'aomap' ],    UniformsLib[ 'fog' ]
useCssTransition         ? h(ReactCSSTransitionGroup, {
$(node).on( ev[0], VMhooks.bindEventListener(it, ev[1]));         } else if(vmKey === "show") {           it.attrs[ vmVal ] = [ VMhooks.show( $(node) ) ];         } else if(vmKey === "for") {
_resizeContainers() {    this.$.titleContainer.style.width = 'auto';    const titleContainerWidth = this.$.titleContainer.getBoundingClientRect().width;
return 0.4;    }   }
assert.fail();             } catch (error) {                 assert.isObject(error);             }
return (this.categories) ? this.$q.when(this.categories) : this.$http.get(this.URLS.FETCH).then(this.cacheCategories.bind(this));   }
var renderToString = require('preact-render-to-string').render var nanohref = require('nanohref') var nanoraf = require('nanoraf')
var temp = {};   line = message.match(/^.*$/m)[0];   while ( line ) {    message = message.substring( line.length );
if (branchSymbols.length > 0) {          var _branchSymbols = branchSymbols;
goog.require('ol.render.Event'); goog.require('ol.render.canvas');
throw "invalid shape " + type;       }
file._id = store.create(file);         let fut = new Future();         let proto;
.setView(center, 14); L.hash(map); var route = {
(function() {   var Mustache, defaultContent, fs, template;   fs = require('fs');
var console = window.console,          $ = window.jQuery,
return false;         case this.OPERATORS.dateOperatorMonths:
Vue.filter('formatDate', function(value, format) {     if (!format) {
this.el = el;     this.commands = {};
if (gap > 0 && first)       for (let i = 0; i < first.length; ++i)         if (first[i].to == null)
if (!err) {     var now = new Date();     now = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0, 0);     for (var i in files) {
var file = files[i];                    $upload.upload({
$("#github").removeClass('hidden');     }else if (value === 'asn'){         $("#github").addClass('hidden');
html += '    <tr>';         for (var index in row) {           var v = row[index].value;           if(getTableContentFormat(v) !== 'html') {
extension: 'xlsx'       });     case 'application/vnd.google-apps.presentation':
var [ min2, mean2, max2, rps2 ] = await runner(u)   debug('unfurl')
inspect = function() { return "" + global.x + global.y + global.z + global.z1; }
describe('debug', function () {   var log = debug('test');      log.log = sinon.stub();     it('passes a basic sanity check', function () {
})(); ; ; var M;
try {       fs.writeFileSync(filename, JSON.stringify(source, null, '  '), { flag: 'wx' });     } catch (err) {}      if (--count === 0) resolve();
}   }   onMouseUp() {      this.m_mousePressed = false;
callback(0, absPathToFile, parentFolder);         } else if(err.code === 'ENOENT') {
var target = $tags.get();    var configObj = _app.ext.partner_addthis.vars.addthis_config;    var sharingObj = _app.ext.partner_addthis.u.buildSharingObj(infoObj);
} else if ($location.$$path.split("/")[2]) {                     list = $location.$$path.split("/")[1];                     id = $location.$$path.split("/")[2];                     $rootScope.listBeingEdited = list;
textTyped += key;     fontSizes.push(newFontSize);   }
var raccsign = request.post(   { url: 'https:
case 'getCode':             return this.send('eth_getCode', [params.address, params.blockTag]);         case 'getStorageAt':
var configXmlPath = path.join(appDirectory, 'config.xml');         fs.readFile(configXmlPath, { encoding: 'utf8' }, function (err, data) {
else             range = new Range(                 rows.first-1, this.session.getLine(rows.first-1).length,
import { h, Component } from 'preact'; export default class Home extends Component {
function () {       self.connecting = false;
group.optimize = true;     }     if (group.helpers !== false) {       group.helpers = true;
for(var prop in triggers) {       var that = this;       if(!triggers.hasOwnProperty(prop)) continue;
has_notebook_info: function(gistname) {             return this.model_.has_notebook_info(gistname);                 },
app.use((err, req, res, next) => {       reject(new Error('Something went wrong!, err:' + err))       res.status(500).send('Something went wrong!')     })
try {             if(meta.cfg.type) {
}   return newCursor
onSuccess: (result => {     console.log(result);   }),
constructPackage(strucDiffPerType) {     if (!strucDiffPerType) {       return Promise.resolve();     }
return ast; } function makeAnyPropTypeAST() {
var index = fs.readFileSync(indexPath, 'utf8');           index = index.replace('<meta name="rollbar"/>', rollbarSnippet);           fs.writeFileSync(indexPath, index);
Polymer({   _template: html`     <style>
});     case REQUEST_PALETTE_SUCCESS: {       const isLoading = update(state.isLoading, { $unset: [action.id] });       return lodashAssign({}, state, {
(async () => {   const locale = chrome.i18n.getMessage('@@ui_locale');   const defaultPrivacyDoc = 'PRIVACY.md';
}     for (attr in settings) {       if (! settings.hasOwnProperty(attr)) {
this.maximizeControl();         }     },
maxHeight: 0      };     default:
if(err) return defer.reject(err);         d = d.replace(/{{cmd}}/g, path.basename(name)).replace(/^#!.*?\n/, '');
if(ui.puzzle.flags.irowake){    ac('irowake','disp', '線の色分け','Color coding');
case org.xml3d.debug.WARNING:     window.console.warn(msg);     break;    case org.xml3d.debug.ERROR:
listHover() {         if (this.props.lectureActiveClicked)             return;
if (!String(user.reportedBy).includes(String(job.client))) {         keyboard[0].push({
var length = block_info.position + block_info.length;         var der_certificate = buffer.slice(0,length);         certificate_chain.push(der_certificate);
const path4 = action.payload.path;              console.log('check path', path4, 'key', key4);
try {
var pricingMethod;   if (source === "hi/lo") {    pricingMethod = d => ({ high: d.high, low: d.low });
newConnectionMode = 'manual';         }         if (getServerAddress(currentServerInfo, newConnectionMode)) {             return newConnectionMode;
if (process.env.FORCE_SSL) {     app.use(enforceHttps({       trustProtoHeader: true
for (i = 0; i < contractBallot.length; i += 1) {       if (contractBallot[i].rank) {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_chicken_brick_piece4-1348197925.swf",  admin_props : false,
app.use(function(ctx){         ctx.body = { foo: 'bar' };
}      return queries.join("&");
render() {     let completed = +this.props.completed;     if (completed === NaN || completed < 0) { completed = 0 };     if (completed > 100) {completed = 100};
var numberItems = count;         if (count == 0) {          $('.no-results').fadeIn();         }
(function() {
{         propKey = "rgb(" + propValue.join(",") + ")";         propKeyAsStyle = true;
return new Iterator(function () {             while (index !== 0 || !(next = it.next()).done) {                 if (elements === null) {
var v, show = true;                     for (v in s)                         if (s[v].show) {
return getClientUrl() + '/api/data/v' + version + '/'; }
import { remote } from "electron"; import Logo from "./Logo";
if (PORT != 3000 || process.env.JOYENT) {     Server.set('env', 'production');
var year_or_cat = year_or_cat || '2010';         var val = parseFloat(this.sf1val(sf1_json,field,year_or_cat))
$.bootstrapGrowl = function(message, options) {     options = $.extend({}, $.bootstrapGrowl.default_options, options);     var $alert = $('<div>');
this.playerProxy_ = {};   for (let k in (this.localPlayer_)) {     Object.defineProperty(this.playerProxy_, k, {
if(property in HTMLElement.prototype) {      var arr = [], newNodes = new Set();
return compareStats('size', first, second, firstName, secondName) * descending;     case 4:
if(domReady){   domReady(handleDomReady);
sizeCls = constants.largeClass;           }           classes.push(sizeCls);
if (that.pullUpToRefresh) {    loading = that.pullUpEl.className.match('loading');    if (loading && !that.contentReady) {
function isDigit (character) {     return isInRange(character, '0', '9');
window.eon = window.eon || {}; window.PubNub = PubNub; window.eon.c = {
Throttle.setCollection = function(input) {     if (typeof input === "string" || input === null) {
var dirty = oldValue!=x;           if(dirty){
var db = new Dexie('testdb');
removeFromArray(child, "composes", fn);     }
if ( typeof window.CustomEvent !== "function" ) {  var CustomEvent = function(event, params) {   params = params || {bubbles: false, cancelable: false, detail: undefined};
} else {       throw new State.DefinitionError();
if (this.getVertical()) {    if (Device.browser.firefox) {     this._iFactor = stepSize;    } else if (Device.browser.webkit) {     this._iFactor = stepSize;
if(!!base) return base;     var loc = pageWindow.location;     return (hashbang && loc.protocol === 'file:') ? loc.pathname : base;   }
processCss,   processorOpts,   append = [],
p["estimateSize"] = p.estimateSize; p["lookup"] = p.lookup;
Paginator.prototype.paginate = function (output, active, pageSize) {   pageSize = pageSize || 7;   var middleOfList = Math.floor(pageSize / 2);   var lines = output.split('\n');
}       }).then((resp) => {
self.cookies = function(name, value) {     var cookieLength, cookieArray, cookie, i, index;
},   addTextsForExport: function( $svg, width, height, exportMap ) {    var margins = App.ChartModel.get( "margins" );
return request;     }
constructor(location) {     this.location = location;
} else {      items = allBlock.removeClass('fw-filter');     }
import React, { PropTypes } from 'react'; import HelpSidebarItem from './helpSidebarItem';
Repl.prototype.deliverContent = function(content){   this.settings.data.transpiler.beforeTransform();   try {
if (landCoverTotal === 0) {                 alertView = new modalViews.AlertView({                     model: new modalModels.AlertModel({
throw new Error('Empty Object has been passed');     }     if (!this.input.replyId) {         throw new Error('Attribute replyId is missing');
if (typeof browser === "undefined") {     browser = self.chrome; }
cheerio = require('cheerio'); var registerHelper = function () {
if (!this._application) {    console.error('Could not find ZombieBox application');    process.exit(1);   }
_.forEach(docs, function(doc) {       log.info('Processed doc', doc.id);     });
SharedKey = require('../azure2/utils/sharedkey');
const result = renderComponent();     expect(result.find('.pui-toggle').exists()).toBeTruthy();     expect(result.find('.toggle-switch').exists()).toBeTruthy();   });
showProgress: function (message) {             console.log(chalk.grey(message));         }
getInteractionPropNames: () => ["scrollZoom", "boxZoom", "dragPan"]   }   if (enableInteractions) {     rtn.enableInteractions()
(function () {     var mediaElement = window.document.body.children[0];
Header = require('./../containers/header'),  Link = require('react-router').Link;
var resp = mldb.query("select '" + str + "' as res"); mldb.log(resp); unittest.assertEqual(resp[0].columns[0][1], str);
var updated = false;   var i, j, input, output, coin, unspent, orphan;   var key, orphans, some;
core.getClassList().forEach(function (c) {       if (c in _global) return;       _global.__defineGetter__(c, function () {
this.base(arguments);       var slideBar = new qx.ui.container.SlideBar();       slideBar.set({         width: 300
import EditableTable from './stories/EditableTable.js'
} else {           elem.attr(ns, attr.localName, attr.value);         }
return filename.replace(/[\.-/, \\]/g, "_").trim().toLowerCase();
elements.append(e).append($('<br/>'));             }             header = false;
throw "Got message back from worker after timeout"    }
for (let j = i + 1; j <= end; j++) {                 let nested_count = lines[j].match(/^(\*+|#+):? /)[1].length;                 if (nested_count <= this_count) {
for (let i = 0; i < rows.length; i++) {             let row = rows[i];             if (row.parentKey == node.key) {
fontFamily: 'Verdana',          labelOutlineColor: '#dddddd',
clearTimeout(timeout);     this.setState({
var page = req.params[1];          if (typeHandler.cache[page]) {
login: function(userIdEmail, password, rememberMe) {                  var signIn =  {
this.close = function(callback){     if(server){       server.close(callback);
important: function() {     var captures;
function _init () {     _getInterpreterSettings()   } }
get: function (key, cb) {             if(typeof(key) != 'string') {               cb('argument "key" should be a string');
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-query-params-reset';   }
var token = AuthStorage.get();                 if(token) {                     config.headers.Authorization = 'Bearer: ' + token;                 }
originalReadyFunction.call(this);     readyFunction.call(this);
switch (type) {         case 'add': {           const { pathname, data, isMarkdown } = change           commit('ADD_FILE', change)
$('.repeater-template [name]').each(function () {         var $this = $(this);         $this.attr('data-name', $this.attr('name'));
this.toggle.$link.on( 'click', function () {   if ( this.toggle.open ) {
for (var i = 0; i < inputByLine.length; i += 1) {     SpotifySearchFactory.search(inputByLine[i], function(response) {
if(da[i] < 1){ da[i] = 1; }       }       for(i = 1; i < da.length; i += 2){        da[i] += s.width;
if (scrolledPx > previousScrolledPx) direction = 'down';     else if (scrolledPx < previousScrolledPx) direction = 'up';     previousScrolledPx = scrolledPx;
var groupIndex = $.inArray(currentPipeline.groupName, groupNames);                     if (groupIndex > -1) {
import d3 from "d3"; import { shallowEqual, identity, isDefined } from "./utils"; import { shouldShowCrossHairStyle } from "./utils/ChartDataUtil";
$ERROR('#Й'); } var \u041A = 1; if (К !== 1) {   $ERROR('#К');
}     points =  matrixIdentity(dim);     points.unshift(points0);
grunt.log.writeln('File ' + chalk.cyan(file.dest) + ' created.');       if (options.includedemo) {         $resultSvg.attr('style', 'width:0;height:0;visibility:hidden;');
_leaveStringState();             } else if (_checkForPlaceholder(ch, code, stringDelimiter)) {                 attribute.possibleStaticText = false;             } else {
for(i=0; i < this.length; i++) {         fn(this[i], arg1, arg2);
var results = {}   for (i = 0; i < NUM_SERVERS; i++) {     worker = cluster.fork()     workers[worker.id] = worker
UI.Mockup.loadImages();         }     }
constructor(props) {   super(props);   this.state = {};
}( window.jQuery )
<p>             Collection {`"${this.props.collectionLabel}"`} has been deleted.           </p>
callback(tokenData.token, tokenData.account);     }
} else {      dialog.ajax_error ('Only "Curve" type plots are implemented.')("","","");     };
case keyCodes.down:     case keyCodes.up: {       const isArrowUp = event.keyCode === keyCodes.up;       const isArrowDown = event.keyCode === keyCodes.down;
log.error('The method ' + argv.method + ' is not available');    process.exit(0);    }
if (frontEntity !== undefined) {
const errorHandler = require('../common/errorHandlers')
const files = [];
: this.toValue());   return !this.isMultiple() ? value : (value[0] || '');
--self.current_connections;     self.trigger('connectionFreed');     if(coords.length) {
var util = require('util'); var fs = require('fs');
const docFromServer = await transport(mutationString, variables);
} else {       sqPop(RED_SWEEP_QUEUE, RED_SWEEP_INDEX, redActive--, e - redShift)     }
if (v) {                 c = current.toLowerCase().replace(/-([a-z])/g, function (a, b) {                     return b.toUpperCase();
case 'toolkit' :                 return this.processPackage();             case 'code' :
return L.CRS.EPSG4326;       default:
node: node   }, props)) }
Mergeatron.prototype = new events.EventEmitter(); var mergeatron = new Mergeatron(db); config.plugin_dirs.forEach(function(dir) {
}         const node = types.expressionStatement(           types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value),         );
return this.filterBy (orders, 'status', 'closed');     }
var PocketToken = artifacts.require('./PocketToken.sol') var PocketRegistry = artifacts.require('./PocketRegistry.sol')
import Frame from '../../components/Frame'
export async function create(parentValue, { clientId, name, email, mobile }, { auth }) {   if(auth.user && auth.user.id) {
var msie = ua.indexOf("Trident") + window.navigator.userAgent.indexOf("Edge") != -2;                     if (msie) {
return path.replace(/\\/g,'/').replace(/\/[^\/]*$/, ''); }
var bbox = layer.get("BoundingBox");                     if (angular.isString(bbox)) {                         extent = ol.proj.transformExtent(bbox, 'EPSG:4326', map.getView().getProjection());
break;         case 'SET_TRACK_OBJ': {             const tgt2 = scene.actors[args[0].value];             if (tgt2) {
});     baseNode.appendChild(dom_helper.elt("br"));    });
if (1/key === -Infinity) {     key = 0;
function vertex ( scope, x, y, z ) {   scope.vertices.push( new THREE.Vertex( x, y, z ) );  };
else {
var self = this;       var _hook = function (rules) {         rules.forEach(function (rule) {
if (index !== -1) {
this.context = new AudioContext();     this.gainNode = this.context.createGain();
platforms_template += "<li><a href='/"+ platforms[i] +"'>"+ platforms[i] +"</a></li>\n";         }
? `nab/t/chat:whatever+comments:all+all/new@${tabulator}.`     : `nab/t/chat:whatever/new@${tabulator}.` }));
function Hello_World() {
queue[i].removeNode();         }  },
sum += array[i].trueRange;  }  return sum;
(function (DataBinding) {
handlers.focus = view => {   if (!view.focused) {
const nextPath = nextState.location.pathname          if (!isLoggedIn) {       replaceState({nextPathname: nextPath}, '/login')
const EthereumForkArbiter = artifacts.require("EthereumForkArbiter");
return "pending";  }
}     } while ((oCurrentControl = oCurrentControl.getParent()) !== undefined);
hintString = [];     do {       remainder = number % base;
}     return promisify(fs.writeFile)(this.path, yaml.safeDump(obj), 'utf8')
goog.require('og.planetSegment'); og.control.MousePosition = function (options) {
if(isAdmin(userId) || (docs[0]._id && docs[0]._id==userId) || fields=='notifications'){           return true;
if (dec.specifiers.length) {}             return;           }
if (!!mediaRecorder && mediaRecorder.state === 'recording') {                 mediaRecorder.stop();
traverse(ast, {pre: setupReferences}); traverse(ast, {pre: detectLoopClosuresPre, post: detectLoopClosuresPost});
_fixPanel: function() {   if ( !!this.options.positionFixed && $.support.positionFixed ) {    this.element.addClass( this.options.classes.panelFixed );
if (description && description.length > config.descriptionLength) {             description = description.slice(0, config.descriptionLength) + '…'           }
setGeometry(geometry) { }
export function getTimeGridSlotEls(timeDuration) {   timeDuration = moment.duration(timeDuration)   var date = $.fullCalendar.moment.utc('2016-01-01').time(timeDuration)
});   test('with properties', (done) => {     const vm = new Vue({
dispatch({         type: data.id           ? 'accountUser/update'
import { Switch, Route, withRouter } from 'react-router-dom'
this.tree = undefined;   $http.get('data/tree.json').then(function(resp) {     this.tree = resp.data;
projector.append(root);
, events = require('../util/events')   , Animation = React.addonsCSSTransitionGroup
test('matches IndexRoute', async () => {   const callbacks = mockCallbacks();
} else {         if(message.message === 'MAX_TIME') {             const {feed} = message;
Ext.example.msg('Button Click', 'You clicked the {0} button and entered the text "{1}".', btn, text);     } });
var code = reqStatus.cert ? 200 : 202;       castHttp.returnJson(res, code, assignStatus(reqStatus));
return r;
if(thisModel.refreshWidget) {
include_user_filter(settings); });
function createNestedViews( node, parent, nextNode, depth, data, prevNode, index, context ) {  var tokens, parentElViews, view, existing, parentNode,   currentView = parent,
function checkEcc(type) {   if (subtle === undefined || !subtle.generateKey || !subtle.sign || !subtle.verify || !subtle.exportKey) {     {       debug('subtle crypto not supported');
var _class = "";     for (var field in document) {         var value = document[field];         var type = this.type_of(value);
var start_time = Date.now();                                  set_and_verify_json_sparse(this.test, suffix, [{
module.exports = {     production: function( err, req, res ) {         var body = {
const llex     = require('./llex.js'); const lobject  = require('./lobject.js');
compare: function (actual, selector) {             return { pass: $(actual).find(selector).length }
test: function test() {             this.dSetting[0].id = Math.random();
if (str === '\u0003') {         this.exit(0, true);       }
}, function() {             scb();         });
var mod = require("../")
moduleDefaults.forEach( function (module) {             if (Plotly[module]) Plotly[module].supplyDefaults(layoutIn, layoutOut, fullData);                      });
list.forEach(a => {       if(!a.get('type')) {         return;
{     uploaderEvents: function() {
}   }   var execPlugin = require(options.value);
QuestionnaireStore.emitChange();   return _errors.length > 0;
let res = yield rp(reqData); });
this.track = function (entity) {             _.each(
React.useEffect(() => {     (async () => {       try {
return;   }
case '{':             node.add(this.objltr());           break;           default:
} PDF.prototype.write = function() {   var line = Array.prototype.slice.call(arguments).map(function(arg) {     return typeof arg === 'number' ? toFixed(arg, this.doc.style.precision) : arg
function onImageLoad() {   this.classList.add('img-loaded');
};                         modal.append(dialogue.text.charAt(counter));                         $.sounds.fx.bip.play();
function getStyleByLayout(styles) {
this.$canopy.find('span').html(this.getThreshold());       if (! this.$canopy.is('visible')) {this.$canopy.fadeIn();}     },
var _ = require('underscore'); var BBPromise = require('bluebird'); var ItemSerializer = require('../item/itemSerializer');
.transition()       .duration(self.config.effects.duration)       .delay(idx * self.config.effects.duration)       .attr('height', function (d,i) { return -(axes.ver.scale(-csum[i]) - axes.ver.scale(-csum[i]-d.value)); })
return null       }     }
console.log("\nProcess done!\n".green);
"meta": { "shares": ["getResp"] },   "global": function* (ctx) {     ctx.scope.set("getResp", yield ctx.KRLClosure(ctx, function* (ctx) {       return ctx.modules.get(ctx, "ent", "get_resp");
var previousRange;     var selectionChangeHandler = function() {       var element        = document.activeElement;
} catch (err) {     removeOnExitHandler()     cleanup()     throw err
var movesWhitespace = doc && (function(document) {   var testEl = document.createElement('div');
function CatalogLoad() {     return (
base, digits = [];     if (0 <= '+-'.indexOf(value[0])) {       value = value.slice(1);
var HmacSha256Sign = require('./hmacsha256sign'),     HeaderConstants = require('./constants').HeaderConstants,     azureApi = require('../utils/azureApi'),     URL = require('url');
package_json.binary.package_name.indexOf('{node_napi_label}') === -1 &&   package_json.binary.package_name.indexOf('{node_abi_napi}{napi_build_version}') === -1; }
default:           return undefined;       }
import Portrait from '../portrait';
if (fn) {             fn.call(null);
org.email=  [body.email];     }     if(body.postalCode){
self.express.put(self.expressPath, self.handleRequest('DELETE')); } module.exports.AutoUri = AutoUri;
function assembleCssText(tooltipModel) {         var cssText = [];
if (!localesDir) {   return new i18n();  }  if (!providers[localesDir]) {
class FindBar extends React.Component {   constructor(props) {     super(props);     this.compiledCommands = {};
'exportedVariables': {},     'styleTuples': [['color', 'var(--primary)']]   }, {
else if (/^iP/.test(product)) {           name || (name = 'Safari');
angular.module('code.projects', ['ui.router'])   .controller('projectsController', function ($scope, $state, $http, Projects, chatFactory, $modal) {
menuview: DatumMenuView,
import { hasScope } from "webiny-api-security"; import gql from "graphql-tag";
function test() {     if (true)
var create_websocket_connection = function () {                  if (!window.WebSocket) {             alert("Boo Hoo WebSocket is not available on this browser");
var target = isArray ? [] : {}         return makeData(target, array, oldData, function (el) {             if (isArray) {
return function(input) {    return escapeHtml(input);     }
this[i].innerHTML = "";       }       return this;
var count = 1;         instructions.forEach(function(instruction) {             output.push("<tr>");
if (!block) throw new Error('Block not found')     if (req.query.transactions) {       const transactions = await app.sdb.findAll('Transaction', {
} break;
} catch (e) {     throw new Error('error in read: '+ e.toString());   }
let instance,         data,         dataIndex,
});   }   let rows = tbodies.selectAll('tr').data(d => d.values );
})   .test('shallow equality test on object', t => {     const nested = {foo: 'bar'};
})(M || (M = {}));     ;     })
function parseRevisionInfo(rev) {   if (!/^\d+-./.test(rev)) {     return createError(INVALID_REV);
}         if (this.options['z-index']) tp['z-index'] = this.options['z-index']
copyArray( axis, resAxis, 0, 3, 3 );         for( i = 2; i < n - 2; ++i ){             v1.fromArray( axis, 3 * ( i - 2 ) );
});       default:
return newObj;     }     function merge (target, source, keyList) {
flow = XIBLE.getFlowById(message.flowId);               if (flow) {
function lint(input, options, webpack, callback) {
} catch (err) {     if (!ensurePkg) { ensurePkg = require('./ensure-package.js') }     opts.log.level = opts.loglevel
var constRelId = getConstraintRelId(constraintsNode,name);              if(constRelId){                  var constraintNode = _innerCore.getChild(constraintsNode,constRelId);                  _innerCore.deleteNode(constraintNode);              }
publish = function () {};
it('async - should get a frontend view with name "test_view_async"',     browserTest((done, window) => {
var hasPressed = this.hasState("pressed");   var hasAbandoned = this.hasState("abandoned");
console.log("[VoteStore.js:18] ----- onAddWitness ----->");     }     onAddBudgetItem(data) {         console.log("[VoteStore.js:22] ----- onAddBudgetItem ----->");
}  var postdata = "username="+$.trim($("#addUsername").val())+"&name="+$.trim($("#addName").val())+"&phone="+ $.trim($("#addPhone").val());  ajax(
doJumpPage () {     this.$timeout(() => this.pageSliderPopover.hide(), 100)     if (this.inputPage === this.currentPage - 1) {
tr.innerHTML = '<td>' + room.roomName + '</td>' +             '<td><button class="join" id="' + room.roomToken + '">Join Conference</button></td>';         roomsList.insertBefore(tr, roomsList.firstChild);
self.ElementCellSet.forEach(function (cell) {                             cell.setIndexIncome(false);
callback:function (ele,destroy) {                           setTimeout(function() {
return this.retstmt();       case 'with':
mapWidth: 300,       zoom: 10,       annotations: [],       center: {         latitude: 40.72052634,
if (typeof require != 'undefined') {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/upgrade_card_reshuffle-1334013016.swf",  admin_props : false,
if ( isClient ) {    Object.defineProperties( createElement( 'div' ), { test: { value: 0 } });   }
return OP_toString.call(obj) === '[object Function]'; }
const { breadCrumbStyling, breadCrumbsWrapper } = classes;   return (
([  (function(module, exports, __webpack_require__) {
set : function(set){    set = parseInt(set,10) || 1000;    if(set!==priority){
if (plate.totalTime > 720 * 60 * 1000) {              plate.minimumTS = 10000;
$scope.dateFilters = [     {
el.getFirst().style.display = 'none';     if(e.event.dataTransfer) $A(e.event.dataTransfer.files).each(function (f) { uploadManager.upload(options).load(f) })    }
const cache = get('types.defs', context.cache)   let typeDef = get([ root ], cache)   if (typeDef) {
attributes = Ember.merge(attributes, attrs);    Ember.$.Velocity.Promise = Ember.Test.Promise;   moment.tz.setDefault('UTC');   Router.reopen({
console.log('Error: ' + err);       users.close();     }
ctx.putImageData(imgData, params.x, params.y);   }
createJavascriptStyleSheet(file, directory);       }     });     updateDocs(files);
$.each(this.bubbles, (index, elem) => {
bottom: Number(config.windowBottom),
log(chalk.red(`Could not locate .showroom folder in ${parentDir}`));   }
}).filter(each => isDefined(each)); } export function getCurrentCharts(chartConfig, mouseXY) {
g = g_axis.append('g').attr('transform', 'translate(' + (width - margin) + ',0)');       var y_axis = d3.svg.axis()
light.position.set(3.8, 2, 0.5);             const helper = new RectAreaLightHelper(light, 0x8e8e25);             const expected = new Object3D().copy(helper);             expected.updateMatrixWorld();
designedMinValue: 0,             designedMaxValue: 255,             designedMinStep: 1,
}              var pushToBinding = new gaffa.Path(this.target.binding).append(toObject.length.toString());              gaffa.model.set(pushToBinding, fromObj, this);                      }
c.d = -10;           a().b          =          c.d          ++; })();
var matches;     while ((matches = regClassInterface.exec(content))) {         var result = parsePair(content, matches.index + matches[0].length, '{', '}', 1);
tags = sys_tags.concat(tags);   }  }else{
function use_localserver() {  var localserver = localStorage.localserver;  if (localserver === "true") { return true; } else { return false; }
%&|^!=<>]=?/,     number: /(?:\b0x(?:[\da-f]+\.?[\da-f]*|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?)[ful]*/i   })
for(let k = 0; k < coords.length; k += 1) {             const nextIndex = k + 1 >= coords.length ? 0 : k + 1;
var path = require('path'); var version = require('../package.json').version;
return data.newValue != data.oldValue; } function createInternalData(sourceMessage, message, data) {
return new mongo.BSONPure.ObjectID(id)     } catch(err) {         return     }
import Breadcrumb from '../../components/layout/breadcrumb'; class Header extends React.Component {
});       };       socketConnection.sendChat = function (chatParams) {         ws.send(chatParams);       };
return { ...state, likedTracks: action.newfavs };     case "USER_UPDATE_SUCCESS":       return { ...state };
import {     View, Linking, StatusBar, InteractionManager, TouchableOpacity, Keyboard } from 'react-native';
for(var iterator = 0; iterator < ins.length; iterator++){       ins[ iterator ].setPosition(CardinalPortPosition('E', 0.5));     }
shadowOffset:{  width: 0,  height: -5,  },          paddingBottom: Platform.OS == 'ios' ? 3 : 0
break       }       case 'NEWLINE': {         let target = startBlock.type === 'span' ? parent : startBlock         stateFragments.forEach(block => {
.then(response => response.json())       .then(json => safeWrap(json, () => dispatch(userMarkedAsAttended(event, user))))       .then(() => dispatch(stopLoading()));
log(processID + "@inputs> Opening stream with apikey: " + streams['streams'][x]['apikey'] + " on port: " + streams['streams'][x]['apikey']);    messenger.streams[streams['streams'][x]['apikey']] = streams['streams'][x];
}     this._active = true   }
return;   }   this._appearances = null;
}         } catch (err) {}       }
} else {     proto = Object.getPrototypeOf(value)   }
inputEvent = module.get.changeEvent(type)               ;               $(this)
it('should correctly resolve a property route with foreach ruleset', function () {         var rulesetBuilder = new RulesetBuilder();         var elementRuleset = rulesetBuilder.create()
overflowX: 'scroll',           }}
SoundHandler.prototype._prepare = function (config) {   ObjectUtils.defaults(config, {    loop: false,
Color.fromHsl = function(hsl) {     if (hsl.indexOf('hsl(') !== 0) return null;     var result = Color.HSL_RE.exec(hsl);
goog.require('cwc.utils.Events'); goog.require('goog.Timer');
self.set('ready', true);  }
_Directory.prototype.getDir = function (cb) {     $.post('/list-d', {
} else {       this._finalize(null, COMPLETION_CANCEL);
setStrict: function (args) {         args.splice(args.indexOf('--strict'), 1);
var spawnValidator = require('gardr-validator');
if (options.browsers) {         autoprefixer = loadAndInstantiateAutoprefixer(options.browsers, 'The \'browsers\' option requires the autoprefixer module to be available. Please install it in the containing project.');
txt += ' --> '     }   }
var $, round;   options.normalizeWhitespace = options.normalizeWhitespace || false;
res.header('Access-Control-Allow-Origin', req.headers.origin);   res.header('Access-Control-Allow-Headers', 'X-Requested-With');
child = child.parentElement;                 }                 return false;
});         },         parse: function (response) {             return response;
const replays = req.rocky.proxy.replays   if (replays) {
return null;     } else if (duration) {       return duration;
.replace(path.resolve(this.options.outDir),'')                     .replace(/^[\/\\]/,'');   var levels = relativeOut == '' ? 0 : relativeOut.split(path.sep).length;   var relDir = repeating('../', levels);
try {   for(var key in data) {    this._cache[key] = data[key];
return new Service(options); } module.exports = init;
return nonce + cntstr;   } }
var remoteDB = require('./lib/remoteDB.js')
customLaunchers: batch,     reporters: process.env.CI       ? ['dots', 'saucelabs']
myNewChart = new Chart(ctx).Pie(data, {                         responsive: true,                         animation : false                     });
c = ol_proj_transform (f.geometry.coordinates, 'EPSG:4326', this.getMap().getView().getProjection());  } catch(e) {  }  this.dispatchEvent({ type:"select", search:f, coordinate: c });
} else if (options) {             $.data(grid[0], 'mvc-grid').set(options);         }
var child, length = data.children.length;         var children = entity.getChildren();
console.log("All tests done");         lockerd.shutdown(code);     });
".html":[11,0,9], ".html":[11,0,2,5],
describe('transformer(transformer)', () => {     it('sets transformer and returns self', () => {       const renderer = new Renderer(),
today: function () {      $.datepicker._gotoToday(id);     },     selectDay: function () {
allowed_attributes.each(function(attribute) {             if ((value = child.readAttribute(attribute)))               new_child.writeAttribute(attribute, value);
var LOG_SAGAS_STYLE = "font-weight: bold"; var globalScope = IS_BROWSER ? window : IS_REACT_NATIVE ? global : null; function time() {
dispatch(errorActions.rejectPromiseWithLocalError(message))     }   })
}     } else {
import _ from 'lodash'; import uiModules from 'ui/modules';
return function equalToSetMatcher(value )  {     let isEqual;
this.setOver(value);     };     Handle.prototype.draw = function (ctx) {
} } Set.prototype.add = function (member) {
log.remove(log.transports.Console);
var HeroesInfoParameters = React.createClass({   render: function() {
return RangeKey; }
message: this.errMessages.email,       regexp: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i     }, options);
google.maps.event.addListener(marker, 'click', function () {         if (openedInfoWindow != null) openedInfoWindow.close();
} else {               scaledX = x / fontSizeScale;               scaledY = 0;             }
case '3DES':                 encryptedOutput = this.encryptTDES(key, data, true);                 break;             case 'AES':
return 'id';   } else {     return id && id.name;   }
return x;     }
$(function() {   const queryInfo = {
if (dt.indexOf("chronological") > -1 || (schema.unpack && data[0].length > 2)) {       each(data[0], function(cell,i){         if (i > 0 && labelSet[i-1]) {
export default function query(options){   return new Query(options); };
}     OH(KxA(solve[$('#solveGround .ground0 .seled').attr('data-i').toLowerCase()](i0v,questionA())));
},             'api': {
{      id: AEscape.html(instance.get(ID)),      label: AEscape.html(instance.get(LABEL)),      name: AEscape.html(instance.get(NAME)),      value: AEscape.html(instance.get(PREDEFINED_VALUE)),
this.templates[file] = swig.compileFile(file, {autoescape: !1});             }
import * as TYPE from 'actions/actiontypes'
set: function( values ) {             FormData.visitInputs( this.options.inputs, function( input, name ) {                 input.value = values[ name ] !== undefined ? values[ name ] : input.value;
for (var i in data) {     if (dojo.isArray(data[i])) {      item[i] = data[i];
let createElement = function(html) {     let div = DOM.createElement('div');
deps: ['app.module']
var byteLengthForComponentType = require('./byteLengthForComponentType'); var numberOfComponentsForType = require('./numberOfComponentsForType');
var yMax = -1024;     for (var j = 0, record; (record = records[j]); ++j) {       if (record.type) {
import Divider from 'material-ui/lib/divider';
if (key === 'file' || key === 'attachment' || key === 'attachment_content_type') return 'INVALID_TYPE'   if (key === 'face_detection') {
if (true === success) {             this.config.$modal.on('shown.bs.modal', function (e) {
function ddg_spice_reddit(api_response) {
else {                             $item = this.getItemToTheRight(anchor);                         }                     }
attributes.forEach(function(attr) {             if ((matches = attr.match(/Attr ID="(.*)" Type=".*" Value="(.*)"/))) {               state[matches[1]] = matches[2];
};   this._request(getContainerOpts, function (err, body) {
var parsedParams = paramsList(params);   processRules(rule, parsedParams);   rule.removeSelf();
case SET_STATE:     var global = JSON.parse(action.payload).global;
test: /\.js$/,         include: /src\/js/,         use: {
case '3DES':                     encryptedOutput = this.encryptTDES(key, data, true);                     break;                 case 'AES':
},   makePhoneCall: {     options: {
if(seen) {                 var id  = object.identity()                 var obj = seen[id];                 if(obj) {                     return {
return drone;   }
include : [demobrowser.MDemoApplication],   members :
{         url = sourceURLMatch[1];
module.exports = () => React.createClass({     handleChange: function (event) {         this.props.model.setValue(this.props.fieldDescription.field, event.target.value);     },
} } DasTier.prototype.initSources = function() {
return async hook => {     const patchMenuBound = patchMenu.bind(hook.app, hook)     if(!hook.result) { return hook }
if(args.toString() === '[object BluetoothServiceHandler]') {     self._obj = args;    }
this._activeTextCache = {};  }
[new RegExp(/<!\[if !supportLists\]>(((?!<!).)*)<!\[endif]>/gi), '$1']         ];
var GLCubeMap = function (gl) {     SamplerConfig.call(this);     this.setDefaults();
if(parameters){           _.each(parameters, function(value, parameter){
return E48;         case 96 :
};         rcloud.get_completions = function(text, pos) {             return rcloud_ocaps.get_completionsAsync(text, pos)
rail.on('plugin-response', function(call, options, response) {     call.__intercept('response', onResponse);   });
var direction = this.targetRubik.getDirection(sub, this.normalize);           var elements = this.targetRubik.getBoxs(this.intersect, direction);
import {constants} from './constants'; import {config} from './config';
throw Error("A password field is strictly required!");         if (this._fields.password.type !== "password")             throw Error("The type of password field should be password!");
var classRe = /^\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/g;   SelectorSet.prototype.indexes.push({
case 'cmd_showUnsavedChanges':         var view = ko.views.manager.currentView;         var changes = view.koDoc.getUnsavedChanges();
instance._syncIconUI();    },
responseTemplateName = "paragraphResponsePreview"             }             if (this.selectedPromptType == "multipleChoice") {                 responseTemplateName = "multipleChoiceResponsePreview"
var page = new boomPage($el.data('page-id')),    $settings = $('<div></div>');
module.exports = (query, skip, maxSkip) => {    skip =  min([config.get('maxSkip'), maxSkip, skip]);    if(skip < 0) {
this.impl.addEventListener("suspend", () => {       this.error |= this.MediaPlayer.NetworkError;     });
} function socketPath(channelName, readerUuid) {
app.get('/', function(request, response) {   filed(path.join(htmldir, 'index.html')).pipe(response) });
if (address != null && address.length > 0) {
],         content = [];     function cleanCollection(col, callback){
(function() {   var accessToken, addGroupItemToStroage, groupItems, removeGroupItemFromStorage;
import { withAsyncComponents } from "react-async-component" import AppContainer from "../app/AppContainer"
function addEntriesToTestSoup(entries,cb) {     sfSmartstore().upsertSoupEntries(SAMPLE_SOUP_NAME,entries,                                            function(items) {
chrome.alarms.onAlarm.addListener(function(alarm){     if(alarm.name === "scheduleRequest"){       courseService.updateData();
link: function(scope, element, attrs, ngModel) {       var invalidRegex = /^[^A-Za-z]+|[^A-Za-z0-9\-\.]+/g;       ngModel.$parsers.push(function(inputValue) {
targetCtx = targetCtx || ctx;   if (targetX == null) { targetX = x; }   if (targetY == null) { targetY = y; }   try {
} else {             selector += '[data-' + this.filters[j] + '="' + filter + '"]';           }
case 0x0: case 0x1:             case 0x2: case 0x3: {                 let bank = 0;                 if (this._mode == 1) bank = this._hbank << 5;
const swiper = vnode.context[instanceName]       if (swiper) {         swiper.destroy && swiper.destroy()
this.specialCbs[specialCb] = null;     }
async openBrowser (browserId, pageUrl, configString, allowMultipleWindows) {         const parsedPageUrl = parseUrl(pageUrl);
import {MOD_SYM} from '../lib/constants';
return -1;   return converBytesToInt64([data[9], data[8], data[7], data[6], data[5], data[4], data[3], data[2]], 0, isLE);  }
fsDestinationPath = fsDestination;         bm_layerElement.reset();
sc.app.password = null;    sc.app.prefs = null;   }
action = item;       let index = this.actions.indexOf(action);       if (index !== -1) {
case FV_BOOK_ENTRIES_FETCH_ERROR:         return Object.assign({}, state, { isFetching: false, isError: true, error: action.error });       break;
localStorage.removeItem('focusMode');         localStorage.removeItem('mode');
mappings.retrieveAutocompleteInfoFromServer(); }
Meteor.autorun(function() {
export function changeNightMode(value, flag=true) {     if(flag){         let dao = new SettingsDataDAO();         dao.saveOpenNightMode(value);     }
var zs = [];     for (i = 0, len = endpoints.z.length; i < len; i++) {         var point = endpoints.z[i];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function isFloat(str, options) {
var jm = SCHEDULER.jm;
const accessor = gltf.accessors[accessorKey];                 return new ElementBufferView({
catch(e){     pathToPartial = `${defaultPartials}/${file}.html`   }   if (fileUtils.isFile(pathToPartial)) {
}       result.push(item);
var first = typeof sequence == 'string' ? sequence: sequence[0];       if(first.charAt && first.charAt(0) == "@"){
function init ( options ) {         options = kity.Utils.extend( {}, RES_CONF, options );         if ( !/^(https?:)?\/\
if (!(parent instanceof LocusZoom.Panel)){         throw "Unable to create legend, parent must be a locuszoom panel";
return this.i18n.Unknown;                 case 1:
$('#TransactionTable').empty();   for(i = 0; i < ledger.transactions.length; i++) {     var tx = ledger.transactions[i],
import TransactionShow from './tx/show';
}     if (!IsThere(path)) {         return callback(new Error("The provided path doesn't exist."));
;   var _scripts = {};
if (nestedContent[option.value]) {           return (
self.attachList(0,true);
if( isArray ) {     options.field = new fieldTypes[typeName(type[0])](options)     type = 'Array'
key_inputcircle : function(ca){   var cell = this.cursor.getTCC();
return function ($scope, $element) {   if ($element[0].localName !== 'form') {
if(hGrid.data[currentDropCell['row']-1]['type']=='folder'){         dropDestination = hGrid.data[currentDropCell['row']-1]['uid'];     }
writable: false,             value: function (type) {                 return GetScope(type, true, false);             },
yield* scope()             yield* s.leave()             continue           case Tag.AssignmentExpression:             if (i.value.eff) {
this.regex.grantType = new RegExp('^(' + this.grants.join('|') + ')$', 'i'); }
}; if (prod) {   delete module.exports.compilers.babel.sourcesMap;
import "ng-redux";  import needMapModule from "./need-map.js";
});                 var result = [];                 var unsigned_headers = [],
if( gid != self.currentGearId ){      KC3StrategyTabs.gotoTab(null, gid);
var pageActivated = window.localStorage.getItem('tvViewer_active') == 'true'; if (pageActivated) {
if (node && node.lookupPrefix) {                         prefix = node.lookupPrefix(namespaceURI);                         if (prefix) {
onClose() {     this.onCancel()
_lookupRoute : function(hash) {       if (!this._cache[hash]) {
import jsdom from "jsdom-global"; import ImageCrop from "./index";
if(typeof elm.defaultView !== 'undefined') { elm = elm.defaultView; }
var editorDiv = gdom.getElement('editor');   var editor = CodeMirror(editorDiv);
if (yAxis) {       var ans = api.getSplits(max);       max = ans.max;
return this.emptstmt();       case 'if':
this.start(); } sysu.inherits(Feedback, events.EventEmitter);
for (;;) {    exitLoop++;
import { setActiveCommunity } from './actions/communities'; import { asyncComponent } from './helpers/utils'; import LoadingIndicator from './shared/loading/global';
if(steps & Warp.TO_LINE)   {    normalize.toLine(this.element)   }
constructor(eventType, userCallback = null) {         super();         this.eventType = eventType;
} else {                 log.die(err);             }
it( 'all client have received all events', function( done ){         expect( callbackA.calls.length ).toBe( 3 );
return this.remoteAsyncCall_.bind(this, targetName, property);     }     if (CastUtils.PlayerGetterMethods.indexOf(property) >= 0) {       return this.propertyGetter_.bind(this, targetName, property);
} else if(this.props.mxEvent) {             name = this.props.mxEvent.getContent().body;         } else {
else if (!policy) {   return [ function (req,res,next) { res.send(403); } ];  }
this._pane = null;   }
ReactDOM.render(     (module.hot) ?       (function () {
if (is_ie || is_webkit || is_ff)  addLoadEvent(smf_codeBoxFix);
});  it(`log`, function() {   assert.strictEqual(1, $.log(1, 2));
} catch (e) {         error(e);     }
async function CounterAct(dispatcher) {   for await (const message of dispatcher) {
it('Expect request method to be get', function () {                 http.getWithRetry('', function() { }, 2);                 expect(requests[0].method).to.be.equal('GET');
error(`Error encountered while traversing directory: ${relative(run.dir)}`);     }
result.status.should.equal(401)     text = await result.text()     text.should.equal(nullIdText)
self.model.type = self.selectedResource.id;             self.service.save(self.model).then(successCallback, errorCallback);
import 'jest-styled-components' import { InputField } from '..'
has_info : this.has_info,  asset_swf : "\/c2.glitch.bz\/items\/2011-10\/proto_rock-1319818709.swf",  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/proto_rock-1319818709.swf",  admin_props : true,
`); } else if (argv.version || argv.v || argv._.indexOf('version') > -1) {
CC.inputUp= data.distance / 50; }); joystick.on('end', function () {  CC.inputLeft=0;
initialize: function () {     },
} ComputedProperty.prototype = new Descriptor();
return model.bind('change', function(model_) {             return view.updateView(model_, map);           });
case "count":             if (_.isObject(aggregate.val)) {
resize: render,   }; }
return;
elm.isolateScope().enqueueFileAddition(mockObject);         expect(elm.isolateScope().handles.length).toBe(l + 1);     });
me = this,    nextIteration, iterate, length, onComplete;
this.updated = function(data, opt, cb) {                                  if (!data) return;
var s = Array(sizes[ix] - c.length + 1).join(' ');             if (align[ix] === 'r') {                 return s + c;             }
success: function (resp) {                         var success = true;                         me.progressSpinner.stop();
return false;   }
} ); export { Quaternion }
import React from 'react'; import { Grid } from '@material-ui/core';
for (var i = 0; i < observers.length; i++) {
}, params);   var resultsUri = Utils.applyUriFilters(baseUri, searchParams);   return SearchModelArray.newArrayLoadedFromUri(resultsUri, resultsType);
ko.punches.enableAll();
_this.openDBs[_this.dbname] = DB_STATE_OPEN;                 }                 if (success) {                     success(_this);
reactprops.headersOnly = {};     reactprops.getTabId = (ReactWrapper_1.onlyAureliaBound);      var DuPivot =  (function (_super) {
return client.connect(mock_uri)         .then(function() {           return client.createReceiver(queue);         })
});         } else {
break;    case editor.config.getKey( 'controls/translate' ):      editor.signals.transformModeChanged.dispatch( 'translate' );
assert.strictEqual('xxx', ' xxx   '.trim());  });  it(`toLow`, function() {   assert.strictEqual('abc1', 'ABC1'.toLow());
case "ArrowFunctionExpression":         if (n.async)
return E96;         case 192 :
get: function() {                 throw new Error('Not implemented "secret".');             }
} catch (err) {           this.logger_.logFailure(loggerTitle, failureMessageStart + '.', err);
return contact; }
for (var b = 0; b < baseIds.length; b++) {             var baseIdMapping = baseIds[b];             baseIdMappings[baseIdMapping.toString()].indexOf(Number(relatedIdMapping)).should.not.equal(-1);           }
let conf = message.guild.get("Filter", "filters");         let f = message.args[0];
stats && stats.hasErrors() && stats.toJson().errors.forEach(e => logger.error(e));     process.exitCode = 1;   }
}     break;    case 27:
} async function decline(context, params) {} async function pendingMemberships(context, params) {
$(function() {  $(document).on('click', '#assets-container .asset-add-btn', function(event) {
module.exports = class SchwiftyModel extends Objection.Model {
}   raw = this.checkRaw(value);   if (raw) return raw;   if (_.isNumber(value)) return value;
this.withConsoleApi = false; };
request.open('POST', url, true);   if(!(data instanceof FormData)){     request.setRequestHeader("Content-Type", "application/json");
}     document.cookie = name + "=" + value + expires + "; path=/";
export function RestangularFactory(config) {   let configObj = {
try {          result = await upload(({ lengthComputable, loaded, total }) => {       if (lengthComputable) {
import { Platform } from 'react-native' export const isIOS = Platform.OS === 'ios'
}); }; module.exports = ImgAltIsDifferent;
.action(amount =>     wallet.sendRLC(cli.network, amount, cli.to).catch(handleError('wallet')));
if (process.env.RLV_ENV && process.env.RLV_ENV === 'browser') {     ScrollComponent = require("./scrollcomponent/web/ScrollComponent").default;
return functionName +  "(" + argStr + ")";       }
exports.default = _default;
getAppropriateNode(babelASTNode) {     if (babelASTNode && babelASTNode.type === 'Identifier') {       return <ast-node-identifier></ast-node-identifier>;
return <ChannelsList channels={activeChannels} updateSelectedChannels={updateSelectedChannels} selectedChannelIds={selectedChannelIds} />         case 3:
var _erc = _interopRequireDefault(require("./erc20"));
console.log(err)         if (!err){             olUI.setLoading('fail', step)             return;         }
}         else if ( (match = doctype.exec( html )) ) {           if ( handler.doctype )
this.version = {'str': version};       if (!checkVersion.test(version)) {         throw 'Invalid Elasticsearch version[' + version + ']';
if (!changeDelegate) {    return;   }
getArgMixed(name) {   if (this.args[name] === undefined) {    throw ("Missing argument " + name);   }
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
const backend = new Webiny.App('Core.Backend'); backend.beforeRender(() => {
var file = path.join(__dirname, catalogfile);         debug('Loading data from %s', file);         var readcatalog = JSON.parse(fs.readFileSync(file));
".html":[6,0,1,0], "BadStateHandlers_8h_source.html":[7,0,1,0,0,3,1,0,0],
},       url: {         type: String       }
self.imageObjects [i] = new Image();    self.imageObjects[i].src = self.fileName.replace('{i}', i);    self.imageObjects[i].onload = function() {
var images = [];         for (q = 0; q < count; q++) {           transformArgs = argsArray[j + (q << 2) + 1];           var maskParams = argsArray[j + (q << 2) + 2][0];
.doError(() => data.$el.remove()))     ).onValue(() => $editor.trigger('input')), 0) }
_listenForClick() {     document.body.classList.remove(Selectors.KEYBOARD_CLASS);
return true;     }
'weibo.com': {         '.': [{             title: '微博博主',
} else {         }
initialize: function(options) {         let Galaxy = getGalaxyInstance();         this.modal = Galaxy.modal || new Modal.View();         this.model = (options && options.model) || new Backbone.Model(options);
parentDiv.appendChild(popoverDiv);
var apiOptIn = true;                           console.log(apiOptIn);
key = speakeasy.hex_to_ascii(key);   } else if (encoding == 'base32') {     key = base32.decode(key);   }
} else {        xfactor = 45.48385;        xoffset = 264.2620;        x = (lon * xfactor) + xoffset;
var unit = 'm';    if (App.unitSystem === 'english') {     value *= 3.28;     unit = 'ft';
if (this.session.userId) throw new httpErrors.ConflictError('Session already active')   const { username, password } = this.request.body      if (!username || !password) {
function SelectSortBy(props) {  let selected;
}; }( OpenSeadragon ));
LogicNodeWASD2.prototype.onSystemStopped = function() {    document.removeEventListener('keydown', this.eventListenerDown);
for(prop in proto){      v = n.getAttributeNode(prop);      v = v && v.nodeValue;
particlePositions[i * 3] = xBounds / 2;     else if (particlePositions[i * 3] > xBounds / 2)       particlePositions[i * 3] = -xBounds / 2;
wink.addClass(btnNode, "w_button w_radius pp_popup_btn pp_popup_alert w_bg_light");     var btnNodeValue = wink.translate('alertOk', this);     if (wink.isSet(opt.btn))
node.add(this.classexpr());           break;           case 'this':           case 'null':
_resizeStreetWidth()   updateStreetName()   _createDomFromData()   _segmentsChanged()
} function _parseWhitespace(line) {   var regex = /^([\s]*)/;   var match = regex.exec(line);
async getProvider (providerName) {         const parsedProviderName = parseProviderName(providerName);
let isFlying = x => {       return x.get("status_fluffy-wing");     };
} catch (e) {           this.emit('error', e);         }
resFolderName = "ldpi";     break;    case "m":     resFolderName = "mdpi";
version = scriptText.match(/jquery:\s*"([^"]+)/);    if (version) {
const removedEvtUuid = state.findIndex((evt) => evt.uuid === action.payload);       newState = Array.of(...state);
var ne = window.ne = ne || {};
describe("setGithubToken", () => {   test("calls setGithubToken", () => {     const originalState = {
var n1 = 0;     var outer = readonly(r.pipe(through.obj(write, end)));     return outer;
{    this.compContext.loadJS( file+".js" )
var nValue;                            if (sValue){
prepareString,   queryOne } from '../database/grakn';
for (var i = 0; i < schemas.BasicTypes.properties.length; i++) {       var prop = schemas.BasicTypes.properties[i];       if (prop.type == Realm.Types.FLOAT) {
class ConfigServers extends EventEmitter {   constructor(binary, nodes, options) {     super();     options = options || {};
var material = glBoostContext.createClassicMaterial(); material.shaderClass = MyCustomShader;
var I = require('../valid') var u = require('../util')
case 'KNodeCreated':         node = new NodeWithPort(message);         node.addTo(graph);
"volapük": "vo",   "walloon": "wa",
let uv = vals.map(function(coord){return parseFloat(coord) || 0});         let tuv = exports.transformUV(uv, transforms.uvTransforms);
if (finished) {             capturedDoc.close();
import gutil from 'gulp-util'; import path from 'path';
var chalk = require('chalk'); var _ = require('lodash'); module.exports = yeoman.Base.extend({
constructor (name, estimatedDuration) {         super();         this._name = name;
return await getProductAlerts(keyword, lastUpdatedAt)     case RELATED_BRANDS:
console.log(formResult); }
if (!this.editor) {             var wrapper = this.$('.search-advanced');             this.editor = CodeMirror(this.$('.well')[0], _.extend(Genghis.defaults.codeMirror, {                 lineNumbers: false,
};     case TYPE.BITTREX_CANDLESTICK:
scope.$on('$destroy', function () {                     chart.detach();
ApplicationManager.prototype.addLanguageToMenu = function(ln) {     if(this.addedLanguages.indexOf(ln) == -1){
export function setZoom(transform) {  if (!isNaN(transform.k) && !isNaN(transform.x) && !isNaN(transform.y)) {   return {
getTransaction(hash) {   if (!Validator.isTransactionHash(hash)) {
this.source = null;
return { getIn, includes, assignIn, reduce, concat, find, join, sum, append, setIn, pick, findIndex, includesValue, has, reverse, last, head, compact}; };
case 'TopicNotFoundError':     case 'DynamoItemNotFoundError': return 404;     case 'DynamoConcurrencyError': return 409;
}     default:
const { createMetricTypes } = require('../types'); const NS_PER_SEC = 1e9;
context.fillText(item.str, x + item.delta, req.y);       x += context.measureText(item.str).width + item.delta;     });
var consts = require('../../constants');
while((chc=ch[++i]) && i<vIndex) {         chc.addToLayoutChanges("locationY");       }
for (key in obj) {         res.push(key);     }
function showSearchbar(triggerInput) {  searchbar.hidden = false;
properties.submitted = new Date().getTime();         }else if($('#submitted_date').exists()){
const debugAggregate = async (model, pipeline) => {   for (let i=1; i<pipeline.length; i++) {     const p = pipeline.slice(0, i);
var states = this.states    if(!this.hasOwnProperty('_states')) this._states = this._states?Object.create(this._states):{}    for(let key in states) this._states[key] = states[key]
const defs = document.createElementNS('http:       const marker = sticker.makeSvgElement('marker', {         id:'arrowHead',
return this.value(type)     }
if (metaData.value && metaData.value.binary && typeof metaData.value.binary === 'object' && metaData.value.binary != null) {
const R_NUMBER_COMPONENT = /(\d|-|\.)/; const R_FORMAT_CHUNKS = /([^\-0-9.]+)/g; const R_UNFORMATTED_VALUES = /[0-9.-]+/g; const R_RGB = (() => {
this._id = 'dummy'; } exports.FileStorage = FileStorage;
return { type: actionTypes.SET_STARTING_AGE, age };   },   setStartingSavings(savings) {     return { type: actionTypes.SET_STARTING_SAVINGS, savings };
while ( len !== 0 ) {   i = ( i + inc + len ) % len;
});   return _.extend(styles, {     default: _.map(['blue', 'green', 'orange', 'red'], function(color) {       return {
import { useState } from 'react' import Head from '~/components/layout/head'
cmd.stdout.on('data', function (data) {             bot.say("data: " + data, input.message.room);                      });
beforeEach(ngMock.inject(function (Private, $injector) {         $state = {filters:[]};
break;
export const initialFairPrices = (formState) => {  if (!formState.initialFairPrices || formState.type !== formState.initialFairPrices.type) {   return {
exprEqual(       `function() {         throw eff(1);         eff(2);
else if (process.platform == 'win32') {        dirs.push('C:\\Windows\\Fonts');     }
throw name + " class does not exist. Use method \"create\" for build the structure of this class";  }
it('should be possible to call nextStep from last step', function(done) {
) {     vError = this._getTextResources().getText("MSG_INCORRECT_APP_VERSION_ERROR");     FlexUtils.log.error(vError);
if (handler) {     return handler.apply(null, handlerArgs);   }
KadiraData._traceDefinitions = {};
cop.proceed(target, highlighterRules);         if (this.specialHighlighting == "none") return this.hideError();         try {
, feature = require(BASE_PATH + 'feature')   , humane = require(BASE_PATH + 'humane')
module.directive('diff', ['$stateParams', '$HUB', '$RPC', 'Issue',     function($stateParams, $HUB, $RPC, Issue) {         return {
box.on(n, function() {
import { mount } from 'enzyme'; import { DropdownItem } from 'reactstrap';
const path = require('path'); const events = require('events');
return uin.reverse();   };
<View style={{padding: 10, backgroundColor: '#fcfcfc'}}>           <Text style={{color: 'black', fontSize: 16}}>             选择您感兴趣的3-5个类别
const utils = require('./utils'); const lint = require('../app/lib/lint');
: Array(3).join(processedOpts.quote);     processedOpts.header = processedOpts.header !== false;
vPreviousParentFolder.addToTreeQueue();       }     }
try {         yield cb => fs.mkdir(folder, cb);     } catch (error) {         if (error.code !== 'EEXIST') {
const run = () => {   runs = runs - 1   lighthouse
export async function reserveToCacheTree(aHint) {   if (!gActivated ||       !configs.useCachedTree)     return;
], function(     declare,     Edit ) {
},   meridiem(hour) {     if (hour < 12) {
function() {         var middleware = swagger(helper.router());         expect(middleware).to.be.an.instanceOf(swagger.Middleware);       }
return this.led(token.type, {type: "Identity"});           case "Lbrace":
class AMQPClient extends MessagingClient {     constructor(config, name, channel) {        super(config, name, channel);         this.config = config;
if ((bench = result[0])) {       options.onStart.call(benches, new Event('start'), bench);
_ol_webgl_.COMPILE_STATUS = 0x8B81;
function parseBase64Image(imageString) {   var matches = imageString.match(/^data:image\/([A-Za-z-+/]+);base64,(.+)$/);   var resource = {};
})       .catch(() => {                });
_regex: {     default: /.+@.+\..+/   },
import React, { Component } from 'react'; import { Form, Input, Button } from 'antd'; import { connect } from 'react-redux';
filterGreaterThan,   filterBetween, }
import Login from 'containers/login'; import { getToken, setToken, getSetupStatus } from 'helpers/user'; import styles from './styles';
var box = new qx.ui.layout.VBox();       var container = (new qx.ui.container.Composite(box)).set({height: 300, decorator: "black", backgroundColor: "yellow"});
case PARTICIPANT_JOINED:         participant = action.participant;         id = participant.id             || (participant.local && LOCAL_PARTICIPANT_DEFAULT_ID);
}; lists.geocodingContainers = {
if (!(this instanceof $.imgAreaSelect)) {             options.onSelectChange(img, getSelection());
for( x = canvasWidth-1; x >= 0; x-- ) {             off = ( y * canvasWidth + x ) * 4;             if( pixels[ off ] !== r || pixels[ off + 1 ] !== g ||
if (! ("opacity" in _docElt.style) && ("filters" in _docElt)) {              styleHandlers.opacity = {
handleBulkDelete(event, items) {     this.props.actions.confirmDeletion.deleting();     return this.props.onDelete(items.map(item => item.id))       .then((resultItems) => {
};     },     invalidData: function(n) {       return n + 1;
if ( clampToLine ) {     t = _Math.clamp( t, 0, 1 );    }
Math.floor(Math.random() * 128).toString(10) + ')';         };         break;
let tagName = _this.$cursorElm.tagName.toLowerCase()
var OAuth = require('oauth');
bodyFontFamily: ['Open Sans', 'serif'],   headerFontFamily: ['Open Sans', 'serif'],
GM_DocHandler.prototype.onProgressChange =  function(webProgress, request, curSelfProgress, maxSelfProgress,           curTotalProgress, maxTotalProgress) {   GM_log("> GM_DocHandler.onProgressChange");
case types.Symbol:       symDesc = getSymbolDescription(obj);       if (symDesc) {
console.log(err);             }             else {                 callback();             }         };
webhookHandler(req, res, (err) => {       console.log('Webhook error:', err);       res.statusCode = 404;
_values: function _values() {     return this.props.multiple ? this.state.dataItems : this.props.value;   }
impliedauth: function (storageApi, redirectUri) {       storageApi = this.remote.storageApi;       redirectUri =  String(document.location);
}     log.info('[surveys/survey] Tracking onAddedEvent', model.attributes);     var eventDataView = Alloy.createController('surveys/surveyRow', {model: model}).getView();
var body = html + renderer_helper.getJavaScript(payload);   html = renderer_helper.getHTML(body, header, css, javascript);   return html;
_RotateNormal(normal){                  let originalNormal = normal.clone();
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-04\/trophy_egghunt-1302028751.swf",  admin_props : false,
(function () {     if (!('Element' in global) || Element.prototype.matches) {       return
case types.ACTIVE_TYPE_CHANGE: {             let multipleChoiceModifiers = state.activeMultipleChoiceModifiers;             if (action.value.resetModifiers === true) {
data = !isEmpty(data[field.split('.')[k]]) ? data[field.split('.')[k]] : '';       }
bluebird = require('bluebird'),   responses = require('../responses'),
members = extend({}, members);   members._events = extend({}, _defaultEvents, members._events || {});   if (members._properties !== true) {
if (!this.mrf.multi && !value) {              this.refs.input.setState({ searchText: '' });
instance.on('finish', function () {     fs.readFile(generatedFile, function (err, data) {
b = parseInt(m[3], 16);         } else if ((m = input.match(/rgba?\((\d{1,3}(?:\.\d+)?),\s?(\d{1,3}(?:\.\d+)?),\s?(\d{1,3}(?:\.\d+)?)(?:,\s?(\d(?:\.\d+)?))?\)/i))) {
<div className="instructions">                     <$_>Select all that apply.</$_>                 </div>}
AUDIO_VIDEO: { i_id: (0x01 << 1) | (0x01 << 2), s_name: "audio/video" },     ALL: { i_id: 0xFF, s_name: "all" } };
if(state.transitions.has(eventName)) {     return transitionTo(service, event, state.transitions.get(eventName)) || machine;
stageView.borderRight();     this.canvas.add(stageView.borderRight);   };
wrapper = function(event){
module.exports = function xmlwriter_write_attribute (xmlwriter, name, value)  {
break;         case 'EADDRINUSE':             console.error('EADDRINUSE, ' + bind + ' is already in use')             break;         default:
return <ast-node-identifier></ast-node-identifier>;     } else if (babelASTNode && babelASTNode.type === 'MemberExpression') {       return <ast-node-member-expression></ast-node-member-expression>;     }
}));    node_code_color = d3.scaleOrdinal().domain(value_set).range(d3.range(0,value_set.size))    d3.selectAll(".base_circle").style("fill",function(d){
}); var render = function render(html, container) {
);   }   return {
})     if (syncVertices instanceof Error) {       throw syncVertices;
popupBody[0].style.height =  newHeight + 'px';           }
var cacheKey = sourceProto.$toolCacheKey    if(cacheKey){     var cache = fnCache[cacheKey+methodName]
hnumerals.parseYearHebrewLetters  = function( year){
variantPosition  = isVariantValid( variantPosition );   if(variantPosition) {     runValidTest();
zipCallback();  }
singleRun: true,     customLaunchers: {
pp.views.Error = pp.View.Common.extend({
if (model.constructor === Balanced.Reversal) {    title = (parentModel.constructor === Balanced.Reversal) ? 'Other reversal' : 'Reversal';    return {
{  Camera.call(this);
setConfigParams(chrome.runtime.getManifest()); }
], callback);                      function insert(callback) {
case SELECT_DATE:       case COMPARE_CHANGE_STATE: {         const state = store.getState();         const selectedDateStr = state.compare.isCompareA ? 'selected' : 'selectedB';
import StyledScreen from './StyledScreen'; import SideMenu from './SideMenu';
while (true) {       var next = walk.nextSibling;
if (criteria.name) {     criteria.$text = { $search: criteria.name };   }
}, "~N");  Clazz.overrideMethod (c$, "renderMesh",   function (mesh) {
constructor(target, selector, args, undo, meta) {     super(target);     this.selector = selector;
format: "polys",             sql:
remove: function(token){       var className = this.get_();       var newClassName = className.replace(tokenRegExp(token), '');
return 'V';     case 'nt_chancetstorms' :
Util        = main.util,         APIURL      = '/api/v1',
this.sock.on('end', function () {   self.emit('close');  });  this.sock.on('close', function () {
var length = end-start;  for (i = 0; i < length; i++) {   subBuffer[i] = writeByte(byteData.slice(i*8, (i+1)*8));
return ret;     }
async start() {     while (this.batchSize ? this.processedItemCount < this.batchSize : true) {       const item = await this.itemReader.next();
icon.bind('click', function (event) {                 event.preventDefault();
const header = props => <div className="anchor"><a name={`${props.children.replace(/[ -]/g, ``).toLowerCase()}`}></a><h2>{props.children}</h2></div> const components = {
try {    } catch (err) {      res.sendErr(err);    }
import Ember from 'ember'; export default Ember.Object.extend({   unknownProperty: function(property) {
offset = rowStretchOffsets[row] ? rowStretchOffsets[row].offset : 0;         rowHeights[row] = prefHeights[row].height + offset;
unit.fuel -= lastFuel;       if (this.DEBUG) assert(unit.fuel >= 0);     }
if ($(window).width() !== _.windowWidth) {             clearTimeout(_.windowDelay);
}   ,"statistics":{    "title":"통계"
} else {     tryCatch = this;   }
adjustOtherProportions(remove) {     const before = this.axisBefore, after = this.axisAfter,
var attributeList = ['headers', 'aria-controls', 'aria-describedby', 'aria-flowto', 'aria-labelledby', 'aria-owns'];       attributeList.forEach(function (item) {         var attr = $element.attr(item);
layout: "images",         selected: function (file, response) {             $input.val(base_path + file.url.to_filesystem_public_url());
if (o.maskType == 'Password') {                  new MUI.Require({js: ['PassShark.js'],
url: url,             data: data
this.render();    this.listenTo(App.ChartModel, "change", this.onChartModelChange.bind(this));
}),   visibleErrors: computed('shouldShowErrors', 'errors.[]', function() {     return this.get('shouldShowErrors') ? this.get('errors') : [];   }),
return;   map.addKmlOverlay({
if (this.url !== undefined) {             $.get(this.url, function(data) {                 that.element.html(data);
if (target.type === 'folder') {        const sideConfig = {}
for (i = 1; i < services.length; i++) {         if (services[0].uuid.length !== services[i].uuid.length) {
str = str.toString();         var len = str.length, i;         for(i = 0; i < len; i++){
adaptor.applyStyling = function ($box, $slides, settings) {       var imgSrc = slideImageURL($slides.eq(settings.bsfaceindex || 0))         , $frag = $()
}).data("ui-autocomplete")._renderItem = function (ul, item) {     return $("<li></li>")       .append(`<a>${item.dom}</a>`)
render() {     const { fetchStatus, counts, health } = this.props;     let content = fetchStatus;
var jsbin = exports.jsbin = /jsbin.com\/[a-zA-Z0-9_]+\/[0-9_]+/i; var jsfiddle = exports.jsfiddle = /jsfiddle.net\/[a-zA-Z0-9_]+\/[a-zA-Z0-9_/]+/i; var plunker = exports.plunker = /plnkr.co\/edit\/[a-zA-Z0-9?=]+/i;
this.init();     }     ChoroMappings.prototype = Object.create(SourceMappings.prototype);
{     if (device && !(device instanceof Ci.IWebCLDevice))     {
tag_input.keypress(function(event){     var keyCode = event.keyCode || event.which;     if (keyCode == BACKSPACE) {
var qr = LQ._query;
navSubItemName = pattern.patternName.replace(/-/g, ' ');
checkLayout: function () {             var scrollContainerRect, scrollLeft;
} else {                  var conditions = options.conditions || [""];                 var quests = [];                 if(Object.prototype.toString.call(options.conditions) === '[object Array]') {
if (!ondemand)     await tool.after();
styleProp = styleProp.replace(/-(\w)/g, function(str, letter) {       return letter.toUpperCase();
}     return mergedState;
file.contents.toString(),           enforce ? '})();' : '})(window, window.angular);'       ].join('\n'));
return "null";             case "[object Object]":
var json = parser.parse(contents).sml;
let node = '<div></div>';              if( area.hidden ) {
yql = 'SELECT * FROM twitter.search WHERE ' + where.field + ' = ' + where.value + ' AND q="' + (request.timeline) + '";';     responseHandler = this.tweetHander;    }
if (oView instanceof View) {    var oComponent = sap.ui.core.Component.getOwnerComponentFor(oView);
import Entity from "./Entity"; import validate from "../utils/validate";
}     id = self.apos.launder.id(id);     if (Array.isArray(locales)) {
} else {     debuglog = function() {}; }
function validateEmail(cadena) {     return validatePattern(cadena,/[\w-\.]{3,}@([\w-]{2,}\.)*([\w-]{2,}\.)[\w-]{2,4}/); } function validatePass(cadena) {
function init(opts) {     config = opts;     requestData(100, function(data) {
var items = [];                     for (var index = 0; index < data.length; index++) {
Backgrid.AudioCell = Backgrid.StringCell.extend({   className: 'audio-cell',
offset = offset || 0;   var endian = isBigEndian ? 'BE' : 'LE';   var method = buffer['readUInt' + bits + endian];
var creep = Game.creeps[this.data.creep]     if (creep.spawning) {       return
try {         b = Class({ 'extends': b }, {             num: 'not a number'
switch(dtype){     case "ship": return this.ship(jp_name);     default: return this.generic(jp_name);    }
ISeries.prototype.genres = function($) {   throw new Error('Not implemented.'); };
regionImageryProvider = new WebMapServiceImageryProvider({             url: proxyCatalogItemUrl(catalogItem, regionDetail.regionProvider.server.url),             layers: regionDetail.regionProvider.layerName,
import classNames from 'classnames' import { localVersionAvailable, LinkToLocalVersion } from 'src/page-viewer' import niceTime from 'src/util/nice-time'
title: '500 - Erreur',         message: "Une erreur s'est produite. Veuillez rafraichir la page.",         solutions: [
handler = createHandler({then:then}, value, onRejected);     };
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/missing.swf",  admin_props : true,
render(ctx) {     const drawFeaturePathToContext = geoPath()       .projection(this._project)
if(!K.Admin.isMe()) return null;
try {         const mediator = new BufferGeometry();         const expected = mediator.copy(new RingBufferGeometry()).toJSON();         expect(mediator.copy(vm.$refs.g.inst).toJSON()).toEqual(expected);         done();
Entry.BlockMenuScroller = function(board) {     this.board = board;     this.board.changeEvent.attach(this, this._reset);
qx.Clazz.define("qx.io.remote.AbstractRemoteTransport", {
function(res){                              });
}               }               displayModal(                 true,
let prevValue = initialValue;   for (;;) {     const { done, value } = iterator.next();
.then((htmlRes) => {        resolve(htmlRes);
case 'app':       app = stashedSpecs.app;       app.name = props.name;
toPID : function(name){   if(!!this.info[name] && !!this.info[name].ja){ return name;}   for(var pid in this.info){
});   })   .config(function ($ionicConfigProvider) {     $ionicConfigProvider.navBar.alignTitle('left');   })   .config(function ($stateProvider, $urlRouterProvider, $translateProvider) {
return this.withstmt();       case 'switch':
console.log('Validating SHA "' + sha + '"');     if (! isContributor(githubUser, contributors)) {         githubClient.rejectPR(sha,              githubUser + ' has not signed the Numenta Contributor License',             'http:
chrome.storage.local.get(null, function(items) {         console.log("items = " + JSON.stringify(items) );         if(items["m_quotes"] == null) {
} else {                     this.object.Shape[specialOption[this.object.type][item.attr]][item.attr] = item.source + item.incre * this.timer.getGoesByTime() / this.duration;                     console.log(this);                 }
this.height = height || 100;     this.resolution = resolution || CONST.RESOLUTION;     this.scaleMode = scaleMode || CONST.SCALE_MODES.DEFAULT;
const pdfW = pdf.internal.pageSize.width;
function getPeerConnection(id, room) {   if (PeerConnectionStore[id]) {     return PeerConnectionStore[id];
query.limit(1).sort({timestamp:-1}).toArray(function(err, res){        out(err, res);
var stack = d3.layout.stack().offset(stackOffset);
},         zh_tw: {             reload: '重新加載',
batch = batch.crop(100, 150);                                 break;                             case 4:                                 batch = batch.scale(1.1, 0.66);
var req = new sm.io.Request(ncms.Application.ACT.getRestUrl("pages.check.rights",
else {   render = {};   win = function () {     return window;
try {             outbox = require('./outbox');         } catch(e) {
case "Notice":       color = "blue-inverse";       break;     case "Warning":
for(idx in this.Parsers) {      var parser = this.Parsers[idx];
console.log('Ignoring input as is null')     return resolve({})   }
this.orient = o[0];   this.normal = Vector.normalize(o);  },
g = 1;    var TestClick = register("test-events", [ HTMLElement, Widget], {
var dynamicTyping = _config.dynamicTyping || false;         if (typeof dynamicTyping == 'function') {
} catch (err) {     t.regex(err.toString(), /TypeError: Expected string but assigned 42 of type number to property "name" on author/)     t.is(err.joiError.isJoi, true)
} else if (matches[5]) {      match_func = matches[5].trim();     }  else if (matches[7]) {
case DCS_CHANNEL_5_OFF:       case DCS_CHANNEL_6_OFF: {         const channel = sampleId - DCS_CHANNEL_0_OFF;         this._callbackChannelOff(channel);
const glowGeometry = new THREE.CylinderGeometry(       outerRadiusSize,       outerRadiusSize,       rescaleNumber(0.00005),
} catch (err) {             log.error(err);
MapService.getVersions(req.param('mapId')).then((versions) => {             res.json(versions);         }).catch((error) => {             sails.log.error("Error getting versions", error);             res.badRequest();
for (var t2 in tokens) {   tokens[t2].regexp = expandPatternToRegExp(tokens[t2].pattern, expansion);   tokens[t2].count = 0;  }
var info = [];     var fix_commits = _.filter(commits, function (c) {
expect(e.loaded).toEqual(jasmine.any(Number));       expect(e.total).toEqual(jasmine.any(Number));       xhr.getReadyState().then(function(readyState) {
editActivity: function () {             app.mobileApp.navigate('#components/activitiesView/addEdit.html?id=' + this.currentActivity.Id);
if ( !/^\w+:/.test(url) ) {                     url = 'http:
for (         let i = 0;         typeof elements[i] !== 'undefined';         tags.push(elements[i++].getAttribute('aria-label'))
if (embed) {       return embed.metadata;
var log = require('../log').logger('wifi');
console.log(h_triple);  },
var encode = function(imgData, quality) {   if (typeof quality === 'undefined') quality = 100;
timeout = this.options.timeout;             }             var key = this.key || name;
var callback = sinon.spy();         var disposable = queue.get([], [['one', 'two']], callback);
export default class JassAttackType extends JassEnum {}
this.storage.verifySubscriber(token, callback);
exports.precompile = function(){   return "Version: WOOT CUSTOM HANDLEBARS - 'Some random text here'"; };
if (exist) {         _yapi2.default.commons.log('runtime/init.lock文件已存在，请确认您是否已安装。如果需要重新安装，请删掉runtime/init.lock文件');         process.exit(0);     }
* run(context) {     const testArgs = yield this.formatTestArgs(context);     console.log('%j', testArgs);
},       cbk) =>     {       try {         const check = checkInvoicePayable({
function _replaceMinus(str) {   return str.replace(/-/g, '\\-'); }
define(['app/auth', 'model/site', 'model/file'], function(auth, Site, File) {     var app, site;     site = new Site({
value = JSON.parse(value);                         break;                 }
} else {      message = path + ".undefined";     }
} finally {       if (_didIteratorError23) {         throw _iteratorError23;       }
setTimeout(() => {     if (token) {       cb({
for (var i = 0; i < ips.length; i++) {             if ((match = IP.IPv4_REGEX.exec(ips[i]))) {                 ip = IP._str_to_ipv4(match[1]) >>> 0;
load('test/mjsunit/mjsunit.js'); load('test/mjsunit/wasm/wasm-module-builder.js');
const mappedTree = constructTree(mappedLabel, mappedChildren);       pathMap.set(stringify(path), mappedTree);
$.getJSON('/js/publicsettings.json', '', function(data) {                  log.push('Data successfully retrieved from publicsettings.json');
publicPath: "/assets/",     path: "assets/"   },
import Entity from './Entity' class User extends Entity {  constructor (...options) {   super (User.OPTIONS, ...options)  }
Object.defineProperty(exports, "__esModule", {
function openWelcomePage() {   chrome.tabs.create({
function NetIP()  {
editable: false,       layout: SimpleFormLayout.ResponsiveGridLayout      });
function shortFormatDateHTML(date) {   return moment(date).format("dd M/D[<wbr />]@h:mm"); }
if((joint = isSegmentRayCross(p0, p1, p))) {
minify: {       exclude: ["\\.min\\."]     }
this.texture = null; }
if (err == false) {     fatalError('Specification file is not valid: ' + JSON.stringify(validator.getLastErrors()));   } else {
var material = new GLBoost.ClassicMaterial();   material.shaderClass = MyCustomShader;   var texture = new GLBoost.Texture('resources/iceball.png');
it('renders a input with type radiobutton and a value of 1', () => {       let radiobutton = TestUtils.scryRenderedDOMComponentsWithTag(instance, 'input')[0];
logAddMorph: function (morph, optMorphBefore) {         var goesToUnloggable = !this.isLoggable && !this.isHand
function evalFunc(func, args) {   if (!(func in EVAL_FUNCTIONS)) {     throw "Unexpected function in eval " + JSON.stringify(func);
const { connections } = options;   if (!Array.isArray(connections) || connections.length === 0) {     throw new Error("The `connections` option array needs to be provided with at least one connection.");
const response = this.interface.waitKey()
document.removeEventListener('mousemove', handleMouseMove);       enableUserSelect();     }
_.each(group.polygons, function(polygon) {       var line = gmaps.geometry.encoding.decodePath(         polygon.points
import { warn } from 'core/util/debug'
}   ,"statistics":{    "title":"Statistici"
} else {       winston.debug("Access to user search denied. "+socket.logviewer_token);      }
static isSignedIn() {         return !!AuthStore.getToken();     } }
let replacedPlaceHolder = false;    for (;;) {     const idx = findIndex(params);
it('returns icon list', function(done) {             initNodes({
client.authDriver(new Dropbox.AuthDriver.Popup({                      receiverUrl: constants.BASE_URL + "html/dropbox-oauth-receiver.html",                      rememberUser: true
throw err;         },
return this._parseVecterParam(type, param);
var path = require('path'); var fs = require('fs');
} catch (err) {             console.warn(`effect not implemented: ${channel.cmd.toString(16).padStart(2, '0')}/${channel.data.toString(16).padStart(2, '0')}`);
client.eth.call({ to: bridge, data: call }, (err, nSigs) => {     if (err) { cb(err); }
function positiveRange(a, b, inc, fn, isLetter) {   var arr = [];   a -= inc;
curKeyId = (mod ? "c" : "") + code;       if (sel.inverted && movementKeys.hasOwnProperty(curKeyId)) {         var range = selRange(input);
console.logRed('Error: '+ e);  utils.exit(1); }
action.log(shapeshifter.chalk.red(error.message));         process.exitCode = 1;       });
if(!window.SyntaxHighlighter){var SyntaxHighlighter=function(){var a={defaults:{"class-name":"","first-line":1,highlight:null,"smart-tabs":true,"tab-size":4,ruler:false,gutter:true,toolbar:true,collapse:false,"auto-links":true,light:false,"wrap-lines":true},config:{clipboardSwf:null,toolbarItemWidth:16,toolbarItemHeight:16,bloggerMode:false,stripBrs:false,tagName:"pre",strings:{expandSource:"expand source",viewSource:"view source",copyToClipboard:"copy to clipboard",copyToClipboardConfirmation:"The code is in your clipboard now",print:"print",help:"?",alert:"SyntaxHighlighter\n\n",noBrush:"Can't find brush for: ",brushNotHtmlScript:"Brush wasn't configured for html-script option: ",aboutDialog:'<!DOCTYPE html PUBLIC "-
for (var i = 0; i < this._implementNames.length; ++i) {    var baseClass = context.parser.lookup(context.errors, this._implementNames[i], this._implementNames[i].getValue());    var success = true;
var matchIndex = 0;       while ( (match = regex.exec(text)) ) {         matches.push(this.prepareMatch(match, matchIndex));
let output = path.join(outputDir, basename)   const bundler = browserify(es6File)
b = Class({ 'implements': [i1, i2] }, {         num: 1,
for(var i = 0; i < connectionCount; i++) {         reauthenticate(self, connections[i], function() {           connectionCount = connectionCount - 1;
setTopBarText: true,     startPullDownRefresh: true,
const handleHideTxs = state => {   const txs = Set(
var iconSearch = this.$('.icon-search');   this.$('#search').hover(function() {    iconSearch.toggleClass('search-highlight');   });
grunt.file.expandFiles({cwd: base}, '*').join(', ') + '.\'');   grunt.util.exit(12); }
}     this.beatLoader.generateBeat({
var fontFamily = this.fontFamily;             return content.replace( /\\([a-zA-Z,{}]+)\\/g, function ( match, input ) {
browserName = /edge\/(\d+)/i.exec(userAgent);
$('.conTitle').html(contitle)                 $('nav  .mainbav').eq(arr[0]).children('a').next().show();
var searchRes   ,scrapePtrn = /\[\[([^\:]+)\:([0-9]+)\]\]/gi   ,resultHTML = markdown.toHTML( raw )
const groupList = this.userRelatedGroups.map((group) => {       return <li>           <Button onClick={this.onClickGrantGroup(group)} bsClass="btn btn-sm btn-primary">{group.name}</Button>         </li>;     });
for (i = 0; i < 255; i += 1) {     LOG_TABLE[EXP_TABLE[i]] = i;
export async function projectsByOrganization({ auth }) {   if(auth.user && auth.user.id) {
case 'names':       for (p = 0; p < value.length; p++) {         format += value[p].replace('/', '');
$('.nav-tabs').stickyTabs(); });
api.getConfiguration().then(function (response) {             $scope.configuration = response.name;
switch (action.type) {       case GET_CURRENT_USER_SUCCESS: {         const newLoginValue = isNewLoginValue         isNewLoginValue = false
_.merge(o, matter(o.content, options));     o.content = o.content.replace(/^\s+/, '');     next(null, o);
return makeModuleMap(moduleName, relModuleMap).fullName in defined;             },             requireSpecified: function (moduleName, relModuleMap) {                 return makeModuleMap(moduleName, relModuleMap).fullName in specified;
const fs = require('fs'); const $ = global.jQuery = require('./../bower_components/jquery/dist/jquery.js'); require('./../bower_components/jquery-csv/src/jquery.csv.js');
{                         if (err.code=='notfound')                           p.trigger.updatedsinceread();
return !!getLanguageByCode(code); }
url: "/fs-moni/live/events",
this.close();             osmEdit.createNode()             .then(function (nodeId) {
pattern: '(m|f){2}c',     rel: 'parent\'s sibling'   },
$scope.templatesByStatus = $scope.templates[status];             if (typeof $scope.templatesByStatus === 'undefined' ||                 ($scope.templatesByStatus && $scope.templatesByStatus.length === 0)) {
familyTokens = parsed.family.toLowerCase().split(' ')     parsed.variations.forEach(function(v){         res.push(familyTokens.concat(v).join('-'))
import TextLoop from 'react-text-loop'; import Section from '../components/Section';
var rows2 = [];           for (j = 0; j < series.length; j++) {             rows2.push([]);
Mpl115A2.prototype.getPressure = Mpl115A2.prototype.getPT; Mpl115A2.prototype.getTemperature = Mpl115A2.prototype.getPT;
setDirty: function() {         wm.job(this.getRuntimeId() + "_hasChanged", 500, dojo.hitch(this, function() {
.catch(function (err) {         context.done(err, {});     });
left: 0,             'z-index': '1000'
import { storiesOf } from '@storybook/react-native'; import App from '.';
, Event = require('../models/event')     , access = require('../access');
UNDO_REDO_STATE_STATUS,   Commands,  MappingSide,
return n;  }, "java.io.InputStream");  Clazz.defineMethod (c$, "readTrailer",    function () {  return true;
const regex = new RegExp(`                     source = source.replace(regex, '
var grammar = Grammar([   Rule('A', [NT('A'), NT('A')]),
return i;   }   function deltaHue(h1, h0) {
function noop(){} let Link = props => (
R._engine.setSize = function (width, height) {             this.width = width || this.width;
.toString('utf8')         .should.match(/ref: refs\/heads\/testBranch/);
import { connect } from 'react-redux' import { Text, View, Image } from 'react-native' import { ScrollView, withNavigation } from 'react-navigation'
} else {             console.log(readNodeVersionForOlder(rmmvPath));
where: {     name: groupName    }
return '&#'   })   txt = txt.replace(/ﬂ°/g, function () {     return '&'
return {type: "Pipe", children: [left, right]};           case "Or":
parse: function (response) {
} }(function (_, Backbone) {   Backbone.Attributes = _.extend({}, Backbone.Events);   var modelMethods = ['get', 'set', 'unset', 'clear', 'has', 'changed', 'hasChanged', 'changedAttributes', 'previous', 'previousAttributes'];
setDimensionGroupById : function (id, group, widget, model) {          model.setDimensionGroupById(id, group)          this._refreshPreview(widget, model);      },
that.setData({           viewHeight: res.windowHeight - 40,         });
c.y = c.y || scaleLinear().range([c.height, 0])   c.xAxis = c.xAxis || axisBottom().scale(c.x)   c.yAxis = c.yAxis || axisLeft().scale(c.y)   c.drawAxis = function(){
options.yaw = options.yaw || 0;     options.clickable = options.clickable || true;     options.class = 'marker';
const self = this;     logger.log(`Starting to encrypt event for ${this._roomId}`);
|| typeof value == 'boolean'       || value === 'null'       || value == undefined
});     if (doc.nodeType === 9  && doc.childNodes.length > 1) {     }
destPoint : this.props.destMarker,       routePrirority : this.props.routePrirority,
}  return ES5internalSlots['[[DefaultValue]]'](input, PreferredType); };
} else {         rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)).
return x;   }
}       this.Configure = function () { };       repository = JSON.parse(localStorage.getItem("TemplateRepository")) || { Templates: {} };
showDropDown(!navHandler.classList.contains('on'))   })   document.body.addEventListener('click', () => {     showDropDown(false)
crypto.randomBytes(8, function(err, bytes_slow_buf) {       if (err) { return args.cb(err); }       unsigned_int = Buffer(bytes_slow_buf).readUInt32LE(0);
} else if (tagName === '@member') {           let {paramName} = ParamParser.parseParamValue(value, true, true, false);           name = paramName;
return 'K';     case 'nt_hazy' :
console.log("finished touch");       stifle(e);
} else {    try { source = eval('(' + TheTextBox.innerHTML + ')'); } catch (e) { return erra (e); }   }   if (Object.prototype.toString.call(source) !== '[object Object]') {
throw 'Provide remote URL to log errors remotely';     } else if(remoteSettings.additionalParams && typeof remoteSettings.additionalParams !== 'object') {
toStandardMinutes() {    return (this.days * 24 + this.hours) * 60 + this.minutes   }   plus({days, hours, minutes}) {
date.setMinutes(date.getMinutes() + part);    }    if ( ! isNaN(part = Number(to.hours)) ) {     date.setHours(date.getHours() + part);
}     case 'PANEL_REMOVE': {       const { payload } = action
: !!args.matchesFiles;      this.matchesDirectories = null == args.matchesDirectories    ? false
timeEntries.push(this._createTimeEntry(geojson[i]));       }
}         let tmp = new Uint8Array(bytes.length + leadingZeros);         for (let i = 0; i < bytes.length; i++)             tmp[i + leadingZeros] = bytes[bytes.length - 1 - i];
findAll: function (callback) {       var sql = `         select
to: data.path.clone().stringify(),                                 easing: Vue.chartist.Svg.Easing.easeOutQuint                             }
form = {                       type: "object",
return value;   }
data = getLocale(key);            } else {
i++;   }
}       self.lr.resume();
import React from 'react'; import {mount} from 'enzyme'; import Baobab from 'baobab';
obj.changeStream = true;             }
class Sock extends EventEmitter {   constructor(ws) {     super()     this.ws = ws
parser.setAttribute("href", url);         parser.href = String(parser.href);         var isCrossDomain = parser.host !== location.host;
deactivate(map)       expect(map).to.emit([{current: 0}])     })
settings.family = [settings.family];                 }                 for (i = 0; i < settings.family.length; ++i) {                     this.family.push(settings.family[i]);
} else {                         if (checkTagOrTerm.tag) {                             tagTermList.push(object);                         }
for (i=0, len=handlers.length; i<len; i++) {           handlerObj = handlers[i];
const parts = (phone.name || '').split(/\./);         set(phone, 'displayName', `${upperFirst(head(parts))} ${parts.slice(1).map(p => (p || '').toUpperCase()).join(' ')}`);       });
} else if (match && match[1]) {                 target = doc.getElementById(match[1]);             }
result = true;           _this.tree.iterate(function(child) {             if (node === child) {
"global": function* (ctx) {     ctx.scope.set("eci", yield ctx.KRLClosure(ctx, function* (ctx) {       return yield ctx.modules.get(ctx, "meta", "eci");     }));
if (!code && !t._ok && (!only || name === only)) {                     exit(1);                 }             });
this._resultNameCacheCount = 0;     }     WsWorkunits.prototype = Object.create(Comms.prototype);
coordinates.forEach(function(line){         str += convertor.LineString(line);       });
return parsedDom.getElementsByTagNameNS(xml.parserErrorNS, PARSER_ERROR_TAG).length > 0;     } catch (e) {       return false;     }
var menuOpts = [];             var createMenuOpt = function(x,y,opt) {                 opt.el = menu.append("div")
multisigFees: 'Multisig Fees',      cosignatory: 'Cosignatory'
const router = require('express').Router() const { User } = require('../db/models') const Op = require('sequelize').Op;
type: 'GET_SEARCH_RESULTS',     request: `${apiURL}/articles?q=${keyword}&_limit=${limit}`   };
console.log('Received ' + articles.length + ' unique articles for "' + company + '" from Discovery');     var theArticleData = {       company : company,
import theme from './components/themeConfig/themeConfig';
var entityNameRegex = /https:\/\/duckduckgo.com\/(.*?)\/?$/         if (entityNameRegex.test(item.FirstURL)) {
d = (d<1000) ? d.toFixed(0)+' m' : (d/1000).toFixed(2)+' km';     t = f.get('durationT')/60;     console.log(f.get('duration'),t)
var html;    if(options.isDropdown) html = '<ul style="display: none;" class="shareMenu">' + "\n";    else html = '<ul class="shareMenu">' + "\n";
function parseUserProvidedColor(c) {   let testElement = document.createElement('div');
l = 0.5 * add;     if (l === 0) {
Content.create = function(contentJson) {         for (var i in Content._contentTypes) {             if (Content._contentTypes[i].canParse(contentJson)) {           return new Content._contentTypes[i](contentJson);
define(function (require) {     'use strict';
exports.showKitten = function showKitten(result) {   var title = result.titleHtml.replace(new RegExp('<\/?\\w[^>]*>', 'g'), '');   var snippet = result.snippetHtml.replace(new RegExp('<\/?\\w[^>]*>', 'g'), '');
createTest : function (config) {         var test = new Fiesta.model.TestCase(Ext.apply(config || {}, {
export class  SCDomElement {
}     throw new AppError(chalk.red(`> Config file does not exist at ${tildify(configPath)}`))   }
Polymer.cs.behaviors.csNavTabs = [     Polymer.cs.behaviors['this'], {       hostAttributes: {
} );    var Sub = Super.extend();
System.register(["aurelia-framework", "../services/index", "aurelia-i18n", "./selectEditor"], function (exports_1, context_1) {     "use strict";
label: 'Change value',           action: function(args) {                        var name = args.data.jsonObj.name;
if(rule.href){                     var childSheet = rule.styleSheet || rule;
var MockHolding = artifacts.require('MockHolding');  var MockApproval = artifacts.require('MockApproval');
} } var Modul_colorwheel = function () {
OSjs.Applications.ApplicationTextpad = ApplicationTextpad;
placementKeys = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'],    coords, rotation, steps, x;
shaka.extern.Error = function() {};
window.fbAsyncInit = function() {          var parent = Atomate.auth;     FB.init({
var testAutomation = function( options ) {  options = options || {};  var subProcesses = [];
export default zora()   .test('compose table factory', (t) => {     const data = [];
const { ERROR_MESSAGE } = rule; const ruleTester = new RuleTester({
if (analysis) {         const color = rgbToHex(
self.state.loadQueue = self.state.loadQueue.concat(cellIndices);         }       }
},   messageView: {
map.add_layer(layer);                         console.log(map.toXML());
import sinon from 'sinon' import chunkify from '../index'
let {range} = editor;         let matches = text.match(/(^|[^*])\*([^*].*?)\*$/);         if (matches) {
logUpdate(`\n${pos} Maybe \n\n${pre} ${dim('Broken link')} or\n${pre} ${dim('Media shared by private profile')}\n`);  end(1); };
export default function Login(props) {   const baseRedirectUrl = `${window.location.protocol}
r.on('raw', function (rect) {     !initialized && handleConnection(rect.width, rect.height);
if (!(path.extname(file) in fileTypes)) return false;
} else {                     var regex = "<.*?>";                 }
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-shepherd'   }
} finally {     if (_didIteratorError2) {       throw _iteratorError2;     }
var result = CSSLint.verify(value);         this.sender.emit("csslint", result.messages.map(function(msg) {
var h;   while((h = this._notifyConnections.pop())){ h.remove(); }
const app = new Koa(); app.use(function (ctx) {   ctx.body = 'Hello Pandora.js';
'Background color'        : 'لون الخلفية',  'Indent'                  : 'مسافة بادئة',   'Outdent'                 : 'مسافة خاتمة',   'Format'                  : 'النتسيق',
function assert(mustBeTrue, message) {     if (mustBeTrue === true) {
_modifyIconHeight : function(propValue, propOldValue)     {
this.upstreamListeners[type] = upstreamListener;             for (i = 0; i < this.upstream.length; i++) {                 this.upstream[i].on(type, upstreamListener);
case "FunctionExpression":             return new astExpression.FunctionExpression(node.loc, transform(node.id), transform(node.params), transform(node.body));
var consoleNode, msie,     NOOP              = 'noop',
var parts = this.getParts_();   for (var i = 0, part; i < parts.length; i++) {     part = goog.string.trim(parts[i]);
import * as aN from './authentication';
var stringId = new String(profile + Meteor.userId() + 'country');         Modules.both.getUserInfo(profile, stringId);         return Session.get(stringId).profile.country.name + ' ' + Modules.client.searchJSON(geoJSON.country, Session.get(stringId).profile.country.name)[0].emoji;                }
Git.readFile('alle/europaweite-veranstaltungen-' + year + '.md', 'HEAD', function (err, contents) {       callback(null, err ? {} : eventsToObject(contents, year));     });
module.exports = function unary(x) {   if (arguments.length != 1) {
exports.exception = function (exception) {   console.log("function" === typeof exception.getStack ? exception.getStack() : exception.stack); }
}   }   processItem(this.currentItem);
return x === null ? NaN : +x; }
var regex = /%%|%(\d+\$)?([-+\'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuidfegEG])/g;     var a = arguments, i = 0, format = a[i++];
results = request.doSearch();
export class TargetWithNoDropResult extends DropTarget {   constructor() {     super();     this.didCallDrop = false;
_clearLoadingState: function(overlayMask) {         if(overlayMask) {this._hideLoadMask();}     },
const currentRunning = String(event.target)       .replace(/(.*) x/, (match, p1) => `*${p1}* x`)     debug.log(currentRunning)
"use strict";
return await Promise.all(promises)       .catch(e => {
proxy, port , files , startPath: '/' , logPrefix: 'snuggsiツ' }
update: function(value) {         var options = {
}                 var oldWorkFlow = this.currentModel.get('workflow')._id;
initializeSignalHandlers() {     new SignalHandlerSingleton().addReceiver(       `${this.props.signalNameSpace}.FocusOnSelectableItem.${this.props.itemKey}`,
var constants = require("../../../src/constants"); var Augur = require("../../../src");
break;                     default:                         break;                 }
if (!context.flags.seconds) {       cli.exit(1, 'Please specify a valid timeout value.')     }
mainStory.error(`Invalid version for ${chalk.bold(pkgName)}: ${chalk.bold(version)}`);       throw new Error('INVALID_VERSION');     }
let prev = getValue(this, name)         if (equal(prev, value)) return this         setValue(this, name, value)
timer = setTimeout(function() {         if (!serialPortFound) {             _tryNextSerialPort();         }
await store.dispatch(getInsights());     }     return { isServer, user, url };
var toRun = function() {       var namespaceToUse = namespace || RUNTIME.namespace;
charset = parser.parseCharsets(3, 2, new CFFStrings(), true);       expect(charset.charset).toEqual(['.notdef', 8, 9]);
try {       viewValue = input.toString().trim();     } catch (e) {
}          var labelFiles = new Array(fonts.length);
i++;  } });
export class SingletonRegistration extends Registration {   constructor(keyOrRegisterInChild, registerInChild=false){     super();     if(typeof keyOrRegisterInChild === 'boolean'){
jade.page_args = function () {     var page_args = window.location.search.match(/([^?=&]+)(=([^&]*))?/g);     var result = {};
if(matches){          suffix = matches[1]
} } CacheTL.prototype.get = function (key) {
return false;             }             return (value + "").length === this.field.length;         },
document.write('<script type="text/javascript" src="scripts/prototype.js"></script>'); document.write('<script type="text/javascript" src="scripts/scriptaculous.js"></script>');
set(contextName, contextDefinitions) {         const enabled = this.enabled;
current = ComputedStyle.borderMap[current];                 } else {                      current = 0;                 }
} else {                 return all.replace(content, BASE_URL + replacement);             }
progress(null, "Fetching repositories ...");         Config._github.repos.getFromUser({             user: user
navigateExistingAsana(request.fragment, -1, function(b) {}); });
bar = "hello"; bas = "world";
(function() {
$analyticsProvider.api.trackGoal = function(goalID, revenue) {                     if ($window._paq) {                         _paq.push(['trackGoal', goalID, revenue || 0]);
let nangle = normalize_angle(angle - rot1 + rot2);         return new Face(npos.x, npos.y, face.rad, nangle);     }
for (let symbol of Object.getOwnPropertySymbols (attribs)) {                  let descrip = Object.getOwnPropertyDescriptor (attribs, symbol);                  Object.defineProperty (cls, symbol, descrip);
ret.image = 'android'       rep = ret.ua.match(/(Android|Adr)[ |\/]([.0-9]+)/i)       if (rep) {         ret.version = rep[2]
var angle = Math.acos(vector.dotProduct(vectorToReferencePoint) / (vector.r() * vectorToReferencePoint.r()));       return angle;
return !((typeof v === 'undefined')    || (v === null)
this.moveStep = function(id, prev_id) {              var dataToBeSend = {'prev_id': prev_id},
pivot: 0.5,                         texture: {type: Lightning.textures.StaticTexture, options: {}}                     }
if (isList(as) === false) { return error.listError(as, catMaybes); }   if (isMaybe(head(as)) === false) { return error.typeError(as, catMaybes); }   const p = x => isJust(x);
var tests = []; for (var file in window.__karma__.files) {
var hasPath = vendorPaths[name],         isIgnored = (typeof vendorPaths[name] === 'boolean' && vendorPaths[name]),         hasExternal = vendorComplete[name];     return !isIgnored && !hasPath && !hasExternal;
if (res.status > 300) {             console.error('Error getting Auth0 users ' + res.status);             reject(res.error);           } else {
this.saveAndEncryptUserToLocalStorage(function(){         if(typeof successcallback == "function"){           successcallback();         }
return true;             case fts.date:                 return '2015-0'+(idx+1)+'-'+(idx+14);
strokeColor() {         const color = colorAsArray(this.root.getElementById('strokecolor-option').value).slice();         color[3] = parseInt(this.root.getElementById('strokeopacity-option').value) / 100;
return {x: d.x, y: newY, color: pow.toString()};   }; }
return 2 * p;       };
},   propDescriptions: {     filter: "Enable a filter for the menu. When this is enabled each menu item requires a name prop.",
var __executed = /\bot/.test("pilot\nsoviet robot\topenoffice");
if(!localStorage['tutorial-shown']) {  GAME.tutorial = new Tutorial(spawnPos)
scope.deleting = true;            scope.deleteClicked = true;
}             return contextData;
if (dojo.byId("debugbar_position").innerHTML != "") {             frame = 0;         }
var ostatus=require('ostatus');
var WrapText = function (text, getTextWidth, wrapMode, wrapWidth, offset) {     var retLines = WRAP_RESULT;
require = require("esm")(module);  let { namespace } = require('../lib/jake');
FbxSkin.prototype.connectObject = function(obj) {
console.log(e)     }
this.offset = styleJson["line-offset"];             this.opacity = styleJson["line-opacity"] | 1;             this.width = styleJson["line-width"];
var chars;
if (!authToken) {     console.log('WARNING: Cannot find NOW_TOKEN environment variable')   }
import { ipcRenderer } from 'electron';
if (outdated) {       module.hot.apply(function(err, outdatedModules) {         console.error('Should not happen', err);         process.exit(1);
const basePath = file.split(/[/\\]/);     basePath[basePath.length - 1] = "";
createFlagSeries(highchart);          for (var i = 0; i < chartData.flags.length; i++) {
const a = prop()       expect(a.takeWhile()).to.flowErrors(a)     })
var token = jwt.sign({
if (result !== true) {         if (result !== undefined) {           arangoHelper.arangoError("Collection error: " + result);
} customElements.define('project-loader', ProjectLoader);
areaid = this.id[cell2.id];    if(this.irowakeEnable()){ cell.color = cell2.color;}   }
return format;         }
if (line.indexOf('author') !== -1) {         info.author = parseAuthor(line.replace('author ', ''))         if (info) {             return true;
get R() {     return this.privateR;   }
}      break;  }     }
traverse = decor !== false;         }         if (traverse === false) {           return false;         }       }
function addInstance(ip, device, options, callback) {
return;     }     database.BeginTransaction(err => {         if (err) return onError(req, res, err.message || 'Database transaction error');
ListItemText,    CircularProgress,
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/flaming_humbaba-1334193679.swf",  admin_props : false,
const yAxis = new Vector3( 1, 1, 1 ).normalize();
innerHeight].join(); }
stopDrag(e) {
][parsed];   } else if (parsed) {     return String(parsed);
if (!matches) {           for (var _idx = 0; _idx < index.aliases.length; _idx++) {             var alias = index.aliases[_idx].toLowerCase();             matches = true;
if (isExpressionType(parentNode)) {             return '"' + node.value + '"';
if (callback) {             callbackID = `${this._uniqueMethodIdentifier()}_${methodName}`;             this._callbacks.add(callbackID, callback);
query = StringUtils.regexEscape(query);         return new RegExp(query, "gi");
for (jj = 0; jj < data.join.length; jj++) {       var join = data.join[jj];
return this.use(route, handler, arguments[2], arguments[3], method);       case 5:
state.isTable = true     state.render.push(
oldSnapshot.push(this._currentSnapshot[i]);       }
break;    case rfb.encodings.copyRect:
return () => {                 window.removeEventListener(SLIDER_EVENT.MOVE, onMouseMove);                 window.removeEventListener(SLIDER_EVENT.UP, onMouseUp);             }
storage.getURL(id).then(function(url) {       if(!url) {           res.send(JSON.stringify({error: "ENOTFOUND: "}))       } else {
const rootNode = findDOMNode(wrapper).children[0];     const styleNode = rootNode.children[0];     expect(rootNode.id).toEqual('heart');
function getDyno (client, appID, dynoID) {   return client.request({
} else {                                 if (self.compileOnBuild && fileType.CompiledField) {
};                 break;             case 4:                 this.get = function (idx, out) {
return createIterable(() => {     for (;;) {       const { done, value } = iterator.next();
Button,   Box,
broadcast(message, fromSelf){         var msgbuf;         fromSelf = fromSelf !== false ? true : fromSelf;
arrayFromObject,     isArray,
} else {       caption = 'Complete';     }
let url = baseUrl + urlPath     return new Promise((resolve, reject) => {
throw new SyntaxError('Trailing characters: "' + str + '"');     }
if (changelogUrl) {                     console.log(`Opening ${strong(changelogUrl)}...`);
if (is_phylotree_active===false) {
polyfill = versionMatch && parseInt(versionMatch[2]) < 21;     } else if (isAndroid) {
xmlHttp.setRequestHeader('X-Algolia-Application-Id', this.applicationID);             for (var i = 0; i < this.extraHeaders.length; ++i) {                 xmlHttp.setRequestHeader(this.extraHeaders[i].key, this.extraHeaders[i].value);             }
const {       noActiveNotices,
console.log("Wrote: " + fileName);   }
if(executeUpdates) {                 TrainingTreeUtil.ExecuteUpdate.save({id: $scope.rootNode.id}).$promise.then(function(treeStatus) {                     $scope.getAndDisplayTree();
return field <= (value1.getTime()) || field >= (value2.getTime());         case this.OPERATORS.dateOperatorIsBlank:
import {Parser} from 'expr-eval'; import App from 'website-examples/plot/app';
if (req.query.private === true) {     scopes.push('repo');
Posts.insert(data);   }
CurrentTimeDisplay.prototype.createEl = function(){   let el = Component.prototype.createEl.call(this, 'div', {     className: 'vjs-current-time vjs-time-controls vjs-control'
return cb(null); }
import * as React from 'react';
if (options.add) {                         add_to_sprint.addIssuesViaKey(options, finalCb);                     } else if (options.jql){                       add_to_sprint.addAllJqlToSprint(options, finalCb)                     }else {
.blur(function (e) {                     if (blurCausedByInputFieldSwitching) {
return doWriteOp(project, 'setBranchHash', branch, oldhash, newhash, callback);
const PIPELINE_HEADER = `${V3_HEADER}.pipelines` function pipelineCoupling (client, app) {   return client.get(`/apps/${app}/pipeline-couplings`)
date.setMonth(date.getMonth() + part);    }    if ( ! isNaN(part = Number(to.year)) ) {     date.setFullYear(date.getFullYear() + part);
console.log('Connection state changed to', conn.connectionState);             }
import React, { Component } from 'react'; import SearchFilterCollectionTag from './SearchFilterCollectionTag';
undefined, undefined, function (data, p) {           if (p === 404) {
if (this.stream) {       if (process.platform !== 'win32') {         this.stream.close();
if (!this.props.note) return;   if (this.props.note.encryption_applied) return;
subClient.on("message", (channel, message_str)=>{
const urlParsed = require('url').parse(request.url);   if (process.platform === 'win32') {
headers: {     accept: "application/json"    }
var navCharacters = helper.e(".nav-characters");     for (var i in array) {       var characterAnchor =_render_navCharacters(array[i].input.name, i);
layers[baseLayer].addTo(map);     if (baseLayer == 'Bing Satellite') contextLayer.addTo(map).bringToFront();     L.control.layers(layers).addTo(map);
if ( isFunction(msgHide = field && field.msgHide || opt.msgHide) ) {                 msgHide.call(me, $msgbox, msgOpt.type);
Console.prototype.editGetText = function() {         if (!(this instanceof Console)) return;
return newNode;   case document.TEXT_NODE:
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/bean_bean-1334602769.swf",  admin_props : false,
Translator.Locale = Locale; Translator.FilterList = FilterList;
pem.can = _.union(pem.can, pemList);          reply (sprintf('%s 的权限添加成功!', target.userNick));
var last = list.length - 1;   for(i = 0; i < last; i++){    var child = this._getChildNode(node, list[i]);
for (var key in global) (function() {       return (context)[key] = (global)[key];     })();
label: this.startTimeText,                     renderer: Format.date.bindDelegate(this, this.startDateFormatText, false),                     exclude: this.isActivityTimeless
}, "DAS": function (cpu) {             util.panic("Execute (DAS) :: unsupported");
stores = require('stores'),       ProviderCollection = require('collections/ProviderCollection');
request.post(url, options, function (err, res, body) {     var error = utils.error(err, res, body)     done(error, body)   })
}     this.queue.receive(this.obj, patches);
options = options || {};   options.defaultValue = (options.defaultValue ? options.defaultValue : c.SUPPRESS);   options.dest = (options.dest || c.SUPPRESS);
}       return false;     });
import Layout from "../components/layout" import SEO from "../components/seo" import Footer from "../components/home-footer" const BlogIndex = ({
ctrl.field = {};                          options.field.on("value", function(snap) {
console.log(message.text());            }
this.setInputsInline(true);   }
flareMapSrc: '/img/sunflare.png',  init() {   this.root = new Object3D();
share.cmult = function (cst) {
mongoose.connection.db.collection(collectionName, function(err, collection){       if (err) { return reject(err); }
title: "www.luehangs.site",         description: "Test 11",
delete this[qx.OO.values[a[i]]];     }
if (VERBOSE)       node.log("post /conversations, ", req.body.idOperator);     if (!isValidSignature(req.header("X-iAdvize-Signature"), req.body)) {
if (text) {     return text.substr(-1, 1).toLowerCase() === 's' ? text + '\'' : text + '\'s';
if ((rid = RID.parse(ref))) {       return rid;
const REGEXP_COMMAND = /^\/([0-9а-я\w\d_\-]+)/;
# A regular expression for date.   (?<year>\\d{4})-    # year part of a date   (?<month>\\d{2})-   # month part of a date   (?<day>\\d{2})      # day part of a date
if (addr === 0xFF0F) return this._if;
import { ErrorHandler, topology, grpc } from "orbs-common-library"; import StorageService from "./service";
catch(err) {             logger.error("Error in getOrderList Service", {meta: err});             result = {httpStatus: httpStatus.BAD_REQUEST, status: "failed", errorDetails: err};
var p = v.clone();
Link, } from 'react-router';
.argv; if(argv.v) th.debug(console.log); if(argv.port == 42420)
import React, { Component, PropTypes } from 'react' import { TextInput, StyleSheet, View, Platform, Dimensions } from 'react-native' import colors from '../config/colors'
"resizable": false         };         customConfig = customConfig || {};         utils.extend(config, customConfig);
throw new Error('This function should never be called!'); }
case LIST_COMMENTS_RESPONSE:             comments = action.comments;             newList = concatList(comments,state.comments.list);
}     },     _onWindowBlur : function() {       this._hideCalendar();
if (message['nlpResponse']['result']['actionIncomplete'] == false) {          alreadyAskedCount = 0;
for (var name in this.xhr.callbacks) {   if (this.xhr.callbacks.hasOwnProperty(name)) {    this[name] = function(name) {
lookup['ta'][d.panchayat_code] = true;                     }                     else if (d.task_assign === null) {                         lookup['ta'][d.panchayat_code] = false;
type: "bi.style_table",              el: {
switch (assertNode.localName) {   case 'all-of': {    const asserts = evaluateXPathToNodes('*', assertNode).map(createAsserter);    return (xpath, contextNode) =>
return matrix[b.length][a.length]; }
fileTypes[dest][config][fileType].push(file);             }           }         }         var filesToUpload = [];
extension: 'docx'       });     case 'application/vnd.google-apps.spreadsheet':
cleanupDistStep         ], function(err) {             if (err) {                 grunt.fatal(err);
} else {                     Ext.Msg.alert('Failed to save report', 'This report failed to save to the server:<br><br>' + (operation.getError() || 'Unknown reason, try again or contact support'));                 }
const isOpen = this.get("isOpen");         const pageX = e.touches[0].pageX;         const rootNode = this.get("rootNode");
function I1DChart() {     }     I1DChart.prototype._palette = Palette.rainbow("default");
}             var _event3 = _ref7;             emitter.addListener( _event3, reject_handler );         }
case Actions.ResetState:   return { ...initialState, netInfo: state.netInfo, dimensions: state.dimensions };  default:
box(reqdiff, pubkey, keys).then(boxed => {               connection.send(JSON.stringify({
$('img' , oThumbs).each( function() {     nId = parseInt(this.id.replace('image-',''), 10);     $('input[id=elcodi_admin_product_form_type_product_images_'+ nId +']', oContainer).click();    });
(function () {     'use strict';
return value;     }
/wireless/ig,         /(shop|store)/ig     ];
var changedNode = e.target;
};         OHIF.viewerbase.showConfirmDialog(() => {
return _ENCODE_HTML_RULES[c] || c; }
var window = require(__dirname + "/../../lib/browser").windowAugmentation(dom); var document = window.document; var location = window.location; var navigator = window.navigator = { userAgent: "node-js" };
var tiles = tileLayer.getTiles();             var tile = tileLayer.getTiles().tiles[0];             expect(tile.point.toArray()).to.be.eql([-256, -256]);             done();
var opts = {'type':value,'animation':'explode','useLite':true};      if(value == 'lines'){    opts.animation = 'slide';
sms.processIncoming(fromNumber, text, MessageStatus, MessageSID)     .then((conversations) => {       let conversationIds = conversations.map((conversation) => {         return conversation.convid;
class ToshihikoModel extends EventEmitter {     constructor(collectionName, toshihiko, schema, options) {         super();         this.ai = null;
function fib(n) {   if (n === 0 || n === 1)
getTagsIndex: function(callback) {         callback = callback || jsGen.lib.tools.callbackFn;         that.find({}, {
this.name = path.basename(this.name).replace(/^\.+/, '');     while (_existsSync(options.uploadDir + '/' + this.name)) {       this.name = this.name.replace(nameCountRegexp, nameCountFunc);     }
const compression = require('compression'); const bodyParser = require('body-parser');
console.log('releasing slug...');     return app.releases().create({
break;     case TRANSACTIONS_DELETE_REQUEST:
const h = ht.empty;         for (let i = 0, len = keys.length; i < len; ++i)             h = ht.set(i, keys[i], h);
var commonStack = [];   for ( i=0, l=annotationStackFrom.length; i<l; i++ ) {    if ( annotationStackFrom[i] != annotationStackTo[i] ) {     break;
console.log((new Date()).getTime()-start);         return {             molecules: molecules,
export const userSetting = (menuItem, browserWindow) => {   createWindow(userPreference.userDataPath) }
export default ({ mainStyle, address, balance, burnWallet, goBack }) => {   return (
return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];     case DIRECTIONS[1]:
this._nodes.set('header', value);   }   get content() {     return this._nodes.get('content');   }
trigger: function(event) {         if (this.__listeners__[event]) {
parsers.push(wv.data.parse);         }
fkeys = Object.keys(machbox.functions);  for (i in fkeys) {
placement: 'bottom',                 placeholder: 'Enter email...',
var adapted = adapter(fakeQunit);
var loaded = q.all(moduleLoads.map(function(ml) { return ml.promise; }));           allImports.then(function(astAndNames) {
}       errors[validator.id] = err;     }
return THREE.AnimationUtils.lerp_string_immediate;     }   }  }
return queue.await((err) => {       if (err) return done(err);
var DEFAULT_RPC = utilities.urlstring({          protocol: "http",     host: "127.0.0.1",
return     }
var self = this;         var ship, drot;         ship = self.model.ship;
let id = uid()  internals.subscribers.push({ id: id, fn: fn})  return id
token : ["text", "string", "text", "constant", "text"],             regex : "(\\[)(" + escaped("]") + ")(\\]\\s*\\[)("+ escaped("]") + ")(\\])"         }, {
this.client.putFile(file.path, path + filename, {   'Content-Type': filetype,
const openProModal = () => {     dispatch(openModal('UPGRADE_MODAL', { user: currentUser }));   };
behaviors: [],      onVisit: function(merchant, roomObj, incomingRoomObj, target, command) {       if (target.race !== 'ogre') {
})       geometry.faces.push(new THREE.Face3(...indices))
return s.replace(/\/+$/, '').replace(/^\/+/, '/'); }
p = path.normalize(p);         var arr = p.split(/[\\/]+/);
import { Footer } from "./Footer.jsx"; import { Loading } from "./Loading.jsx";
import LayerManager from 'components/widgets/editor/helpers/LayerManager';
actual(function () {           assert.that(result).is.equalTo(65);           done();
].concat(node.body.body)))     },
});     this.editor.applyingChangeState = false;     return editor;   }
eM.eF = eF;         ;         var eC = (function () {
}         return this._children.map((child, index) => child ? this.prefix + index.toString(16) : undefined)             .filter(child => !!child);
this.loadQueue = [];     this.onloaded(angular.bind(this, function() {       this.callback(this.getData());
if (callback) {
componentWillReceiveProps(nextProps) {         this.updateOnOrDirty(nextProps.projectStudios);     }
var ModulesListingView = require('./ModulesListingView'); var _ = require('underscore');
var IOUtil = require('io/IOUtil');   var parsed = IOUtil.parseDelimited(data, opts);   return new LabelMapping({ name: opts.name || filename, mapping: parsed.data, defaultIndex: opts.defaultIndex, maxIndex: opts.maxIndex });
.then((volumes) => {           this.volumes = get(volumes, 'volumes');         }),
point,         basis,
nextData = data;       return;
{  updateControls     self.obj.body.fixedRotation = self.fixedRotation.getValue();
export default function one(s, context) {  return new Init(s, context)[0]; }
const textOrientation = item.text.orientation;     const stack = itemStack[textOrientation];
var urls = _.difference(def.url.paths, aliases[name]);     urls = _.map(urls, function (url) {       var optionalVars = {};
try {       let moduleName = config[helperName].require         ? path.resolve(global.codecept_dir, config[helperName].require)
return matches; } functions.findRepeaterElement = wrapWithHelpers(findRepeaterElement, repeaterMatch);
$rootScope.$on('$routeChangeError', function handleMiddlewareRedirects(event, current, previous, rejection) {
if (this[kState].closed)       return undefined;
var error = new Error('If you set the mode to "transit" you must also specify either a departure_time or an arrival_time');     if (typeof callback === 'function') {       return callback(error);
};             json.data = JSON.stringify(json.data);             return json;
export const clickCounter = (state = 0, action) => {   if (action.type !== INIT_REDUX_OPERATIONS) return state;
if (!this.hasID(nodeID) || this.hasOwnID(nodeID)) {                                  if (!node.isLive()) throw "Can pin only live nodes"                                  this.nodesByID[ nodeID ] = node
var ModelGenerator = module.exports = function ModelGenerator(args, options, config) {     console.log(config);     yeoman.generators.NamedBase.apply(this, arguments);
console.log(error);     process.exitCode = 1;   }
var message = data.message
it('should have a background gradient', () => {       expect(input.props.style.backgroundImage).toMatch(/^linear-gradient/)     })
onUnregister: Class.empty,   onUpdate: Class.empty,
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[57],{
return handleUndefinedAndNull(file.license)     } else if (typeof file.license === 'object') {       return handleUndefinedAndNull(file.license.type)
this.X.gestureManager = this.GestureManager.create();       this.Y.registerModel(this.ActionButtonCView.xbind({
{                    $scope.project.deleted = true;                 }
);       default:
if (!zoneData) return null;   const co2Intensity = getProductionCo2Intensity(mode, zoneData);
handleFocusChange = function() {     var _active = activeElements();
case actions.CREATE:       const binary = action.binary;       return state.concat([ {binary} ]);
Git.prototype.submoduleUpdate = function (args, then) {       if (typeof args === 'string') {         this._getLog('warn', 'Git#submoduleUpdate: args should be supplied as an array of individual arguments');
adeModule.directive('adeUrl', ['ADE','$compile','$rootScope', '$filter', function(ADE, $compile,$rootScope,$filter) {
default:
README.*`,   `**/CHANGELOG.*`
type: og.video.type,             rel: CONFIG.R.player,             height: og.video.height,
var tile1 = new maptalks.TileLayer('tile1', {             urlTemplate : '#'         });
success: loginState => {               var _loginState = loginState.data;
if (utils.cellMaps.location[graffitiId] !== undefined) {         return utils.cellMaps.location[graffitiId];
} else {   Promise.each(Object.values(languages), language => language.build()).catch(exit); }
'save': ['ctrl+s'],     'saveAs': ['ctrl+shift+s'],     'play/pause': ['space'],
return injector.resolveDependencies();   }   function markAsApplyed( template ){
};     case `${ACTION_TYPES.CHECK_SERVICE_EXIST}_FULFILLED`: {       const serviceExists = !!action.payload;       return {
console.error('Database error:', error.message);     } else {
case 5:       (r = v), (g = p), (b = q)       break   }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_glove_metal_finger_piece1-1348197973.swf",  admin_props : false,
if (!chain && create) {   chain = this.newChain(chainName);  }
}); }; module.exports = ScriptsDoNotFlicker;
this.setSourceNodeId(vId);   } });
throw new Error("ellipse not yet supported");     }     clip() {
_allCompleted (tasks) {     for (let i = tasks.length - 1; i >= 0; i--) {       if (!tasks[i].available) {
});          this.redirect('/resume', {sheetObject: finalObj, template: this.state.template});
var path = this.processDataPath(dataPath);     if (path === undefined) {         return;     }
hour = hhmmss[0] || 0;             minute = hhmmss[1] || 0;             second = hhmmss[2] || 0;             millisecond = hhmmss[3] || 0;         }
CONSTANTS.Dir_Top             ];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2010-03\/1268344207-8296.swf",  admin_props : false,
var targetClass,unclassified;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-12\/proto_shrine_alph-1323999218.swf",  admin_props : true,
MonitorChrome.disconnect(errback); }
event.sub('location.refreshed', onLocationRefreshed);   };
arrayIdent = scope.reserveParam();           }           init = [];
Ext.example.msg('Button Click', 'You clicked the {0} button', btn);     }
throw new Error("Should not execute this test");             });
this.api.registerHook = (name, handler, description) => {     assert(typeof name === 'string', `钩子名称必须为字符串类型`);     assert(typeof handler === 'function', `钩子处理函数必须为函数类型`);
.replace(/'/g, "\\'")             .replace(/\{(\w+)\}/g, "' + (_.$1 || '') + '") + "'")       )(data);
it('works', function () {       var cdb = new loki('cloningEnabled');       var citems = cdb.addCollection('items', {         clone: true
return false;                 }             }             if (Date.now() > (cacheFileMtime + cacheTime * 1000)) {
easeInBounce: function (x, t, b, c, d) {   return c - Aristochart.Easing.easeOutBounce (x, d-t, 0, c, d) + b;  },
download(options);       break;     case 'r':     case 'run':
});   if( UTILS.db_ill_char.test( config.db )){     throw new Error( 'Database name contains illegal characters' );
var column_data = _cache[block_id];                     for (let j = 0; j < limit; j++) {                         var value = values[j];
const path       = require('path'); const source     = require('vinyl-source-stream');
$tab_t.width(1 / $tab_t.length * 100 + '%');    }
jQuery.multimediaSupport = {};  var m  = $.multimediaSupport,   vID = new Date().getTime(),
$scope.elasticsearch_dblist = function(queryStr) {       var words = queryStr.split(" ");       var query = $scope.ejs.BoolQuery();       var terms = _.map(words, function(word) {
getBinFromUrl(medias[nb].url, bind.filename, function (err) {    that.totalDuration += medias[nb].length;
name: 'driver',                     fieldLabel: 'Driver',                     value: 'org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver',
throw new error.UnsupportedTypeError('equal', x, y); };
isGreaterOrEqualThan,   isNonNegative,
state.lastViewClassOrInstance = state.viewClassOrInstance;
while ( (m = rEscapes.exec(sLine)) !== null ) {
var stop = mobx.spy(c => events.push(c));    doStuff();
element.getHierarchy().push(elements[i]);             if (layers[i].parent !== undefined) {                 this.buildItemHierarchy(data,element, layers, layers[i].parent,elements);
return newState;  case 'SET_VEHICLES': {   const veh = Object.assign({}, newState.vehicles);   veh[action.route] = action.vehicles;
if(!updated) {                         zeros = this._zeroGenerator(newLen);                         oldData[i].data = oldData[i].data.concat(zeros);
let is_host_selector =           !!token.selector.startsWith(':host');         let psudo_rules =           token.styles.map(s => compose_rule(s, coords));
options = {       'source': getArgumentString(this.props.currentCommand, constants.specialCommands[constants.WALLET_033X]),
process.exit(1);         }
for (var i = 0; i < this.app3d.meshes["field"].length; i++) {                 this.app3d.meshes["field"][i].name = name             }         } else {
drawGpx.enabled = function(_) {         if (!arguments.length) return Gpx.enabled;         Gpx.enabled = _;         dispatch.change();
filterChain.push(this.buildMethodFilter(proxy));         }         if (this.hasPathFilter(proxy)) {             filterChain.push(this.buildPathFilter(proxy));         }         return filterChain;
marginBottom: '4px',               fontSize: 16,
if(typeof data === "object") {          data = querystring.stringify(data);
while (pts.length >= 4) {           let x1 = bx            let y1 = by            bx = parseFloat(pts.shift())
function filterNotILike(value, append) {         filterILike(value, append);         if (append) {           return;         } else {
var bestRect = bestLogo.foregroundRect;   for (i = 1; candidate = bestCandidates[i]; ++i) {     rect = candidate.foregroundRect;     if (bestRect.top > rect.top ||
type: 'GET',                 url: url + '?tags=&search=' + text + '&type_search=groups&incldead=0&sorting=0&type_sort=desc',                 cache: false,
case 'performance':       performance(log, contentType);       break;     default:
}; } util.inherits(H2183CompassInput, SerialInput);
if (process.env.ENV !== 'production') {     Error['stackTraceLimit'] = Infinity;
}             else if (this[levelProp] && !(this[levelProp] instanceof Array) && this[levelProp].implementsOrExtends && this[levelProp].implementsOrExtends('BaseEntity'))                 entity[levelProp] = this[levelProp];
}   }   get isGizmoVisible() {     return this._gizmos[0].isVisible;   }
Image.static.toHtml = function(image) {   var $el = $('<img>')
return null;
var cancel = new Element('input', {'type': 'button', 'class':'btn-primary', 'value': 'Cancel'}).setStyle('margin-right', "5px");     cancel.setStyle('margin-left', "5px");
for (var key in presences) {     message = presences[key];     messageType = this._getMessageType(message.to);     this._handleResourceMessage(socket, message, messageType);
}     return MyInline; }(polymer.Base)); MyInline = __decorate([
'inspector': ['three-inspector', {value: this.bind('selected')}],           'app-ctrl': ['demo-app-ctrl', {value: this.bind('selected')}]
switch (association.nature) {                 case 'manyToMany': {                   const arrayOfIds = obj[association.alias].map(related => {                     return related[ref.primaryKey] || related;
case 'ul':             return document.createElement('ul');         case 'svg':             return document.createElementNS(svgNamespace, 'svg');         default:
equal(table.getTitleBody().style.width, table.getBody().offsetWidth + 'px', 'The title style "width" is the initial value');   table.addRow( {
var _ = _self.Prism = {  util: {
import { compose } from 'ramda'; import Avatar from '@material-ui/core/Avatar';
app.use((req, res) => {         res.status(404).render("error", {
it("should be compiled and applied to file multiple times", function(done) {         try
var GLBuilders = require('./gl/gl_builders.js'); var Style = require('./style.js');
isEnabled: YES,
const entity = this.refs.form.getData();     if (entity._added) {
return;             }
} else {         s = this.val.toString()
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-05\/npc_swoonerfly-1305238807.swf",  admin_props : true,
restoredMapping = restoreMapping(this, cmd.storedMapping);      return super.addMappingItems(mapping, restoredMapping);
export default class JassEventId extends JassEnum {}
metrics.trackIncrement);  }; DetailedEventPainter.prototype.softPaint = function() { }; DetailedEventPainter.prototype._prepareForPainting = function() {
case 128:    var v = Services.prefs.getBoolPref(prefs[i]).toString().replace(/"/g, '\\"');    result.push(`user_pref("${p}", ${v});`);    break;
app.utils.setSettings();    } else if ($.inArray(targetName, editorOptions) !== -1) {
ret = anchor.getAttribute('href', 4);        }        $(anchor).detach();       }
if (typeof max === 'object') {     options = max;   }
};       if (opts)
return 'N';     case 'nt_rain' :
it('should see paused file stream (no buffer)', function(done) {     husk(__filename)       .read({buffer: false})
export function getSong(guild_id) {   return client.lindexAsync(`guild_${guild_id}`, 0)
}, props);   let el = Component.prototype.createEl.call(this, type, props);
azk.fail("agent already started");       return helpers.exit(0);     } else {
SceneGraph.prototype.Traverse = function() {
inputEx.registerType("number", inputEx.NumberField, []); }, '3.0.0a',{ requires: ['inputex-string']
constructor() {     super();     this.agentService = ContainerJS.Inject;
percentSpan.textContent = percentText;     const valueAccessibleText = this.tree._formatter.formatValueAccessibleText(value, this);
if (stream.match(/[^_\*]+/)) {           return getTokens();
if (exports._best) return exports._best;   for (var i=0, k; (k = exports.preferred[i]); i++){     var transport = exports[k];
require("./diffs/revision-diff.jsx"); var PropCheckBox = require("./components/prop-check-box.jsx");
var orderedModels = order || toAdd;           for (var i = 0; i < orderedModels.length; i++) {             this.models.push(orderedModels[i]);
cdDojoService.find({dojoLeadId: uncompletedDojoLead.id}, function (response) {               if (!_.isEmpty(response)) {
return engine; }
body,           icon: icon || APP_ICON,           title,
session.source = 'foo this should not change';           return app.__internals__.cache.set(messenger.getCacheKey(baseMessage.sender.id), session);         })
var parsedHostHeader = parseHostHeader(req.headers.host, 443);             req.originalUrl = req.url;
import App from './Components/App';
invert_point: function(pixel) {         var abs_diff = this.x_pixels.map(function(elem) { return Math.abs(elem - pixel); });
if (typeof(AjaxUpload) != "undefined") {       var info = {
if (!!root.Set) {
if (result.implicitResults && !executeOpts.resultSet) {         const processImplicitResult = function(ix) {           const resultSet = result.implicitResults[ix];
facebook: "kleinsch",       phone: "1231231234",
mPebble.set_time(date.getTime() - date.getTimezoneOffset() * 60000);
return function(elem) {                 if (comparator(elem, value, 0) !== 0) return elem;
require('./methods/query')(SpaceTime); require('./methods/add')(SpaceTime); require('./methods/same')(SpaceTime); require('./methods/compare')(SpaceTime);
var result = response;                 for (var i = 0; i < result.length; i++) {                     if (result[i].serialNo.match(self.serialNo)) {
}         case 'm':
{      msg = removemsg;     }
if (event.type === 'DELETE') {     return {
context.container.$setManager(context.lifecycleManager);                         var result = context.container.$setDirty();
}     }).then((xhr) => {       const out = xhr.body.items;       set(this, 'machineTypes', out);
tt._while.updateContext = function() {   if (this.state.inForHeader) return;   this.state.context.push(types.kw_stat);
var errors = require('./errors'); var Request = require('./request');
treeWorker.postMessage(tmpArr);       let pointHelper = new Lore.PointHelper(lore, 'TestGeometry', 'sphere', {         pointScale: 10
.map(toUnmountPromise)
pattern.prototype.loadPluginMacros = function(plugin) {   for (let macro in plugin.macros) {     if (typeof plugin.macros[macro] === "function") {       this.macro(macro, plugin.macros[macro]);
while ((result = lines[lnIdx++])) {       if (result.indexOf("
return newMet;     });     PMethod.prototype.toString = function() {return 'fun ... end'}
if (__DEV__ && true) {   config.allowStartupFailure = true
removeHexPrefix,         isAddress,
}, function () {             callback.apply(this, arguments);
if (sources.len) {       sources.ids.forEach(function( id) {
function renderOptVElementToString(optVElement, isRoot, context) {   }
function parseTerm(term, messages) {
this.sn = new ROS3D.SceneNode({       frameID : message.header.frame_id,
for(let i = 0; i < index; ++i) {       copy[i].close();     }
return '';       }
this._sendMessage('tell');             }         };         this._channel.addEventListener('internal', isLeaderListener);
options = {};     } else if (typeof options !== 'object' && !(options instanceof HTMLElement)) {
onData: function(d) {      return d;
this.setState({ isLoading: false });             return;         }         const { question } = this.state;
item.addNode  = function (layerNum,right) {   let lastLayer = layerNum === this.numLevels;
IfcSystemFurnitureElement: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},   IfcBuildingElementPart: {r: 1, g: 0.5, b: 0.5, a: 1.0},
class FileBranch extends FileTreeLeafObject {   constructor(file, cjbranch) {     super()     this.file = file
goTo.marker("11"); verify.referencesCountIs(7);
export class PropertyAccessor {     constructor(obj, propertyKey) {
case 'char': case 'nchar':           return Char(p)
return store.create(model, options);             case "update":
configurable: false,             get: function() {                 return _createdAt;
this.useRefTransfMatrix_loc;   this.useTexture_loc;   this.invertNormals_loc;  };
return exists(this) ? cloudinary.image(this.get(field.path), options) : '';   },   fit: function(width, height) {
var renameView = require("../views/renameView"); var contextView = require("../views/contextView");
var put = function (name, value) {                 var symbol = newSymbol(name, value);
return new paddle.TensorType(variable.type.lod_tensor.tensor);             default:
var conf = require('ember-cli/tests/helpers/conf'); var Promise = require('ember-cli/lib/ext/promise');
};                   if(data.user.teams == ["1"]){                     data.user.teams = [];
var soajsUtils = require('soajs').utils; var colName = 'cicd';
}       function find(id) {
if (!(mainId in cache)) {     def = cache[mainId] = core.createResourceDef(pathInfo.config, mainId, isPreload, pathInfo.ctxId);     def.url = core.checkToAddJsExt(pathInfo.url);
var async = require('async'); var BitcoinRPC = require('bitcoind-rpc');
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-keyword-complete';   }
const rmsie11 = /(trident)\/[\w.]+;.*rv:([\w.]+)/;  const redge = /(edge)[ /]([\w.]+)/;  const rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/;
id = match[0];       tok = app.ids.get(id);
this.transparent = true;         this.blending = BLEND_TYPE.ADD;         this.depthTest = true;
IDBTransaction: window.IDBTransaction || window.webkitIDBTransaction,         IDBKeyRange: window.IDBKeyRange || window.webkitIDBKeyRange     };
try {     stdout = await execPromise('git', ['pull'], { cwd: localDir });     stdout = await execPromise('gmake', [makeParms], { cwd: localDir });     stderr = undefined;
emptyMessage: React.PropTypes.string,   errors: React.PropTypes.arrayOf(React.PropTypes.string),   label: React.PropTypes.string,
if (sps_max_sub_layers_minus1 > 0) {    for (i = sps_max_sub_layers_minus1; i < 8; i++) {
case ACTION_TYPES.FETCH_RECORDS_SUCCESS:             recordType = action.payload.recordType;
var newNode = kNode;     if(typeof newNode === 'undefined' || newNode === null){      newNode = new knalledge.KNode();
assert.throws(function() { Buffer.concat(null, null); }, TypeError); assert.throws(function() { new Buffer(null); }, TypeError); new Buffer(-1); var buff_1 = new Buffer('asd');
], function (err) {     if (err) return cb_(err);     else return cb_();    });
module.exports = function() {  do {
console.log("finished_with_success");          assert(expected_error === null);         assert(warnings.length == 0);
var appjs = require('./build/Release/appjs.node'); var EventEmitter = require('events').EventEmitter;
var child_styles = this._getChildStyles(style_tr, stream);     return child_styles.map(function(child_style){       return new TableCellGenerator(child_style, this._createStream(child_style));
generalSettings: {             webpackDevConfigFile         },
function isStatic (ext) {   var extensions = ['.yml', '.yaml', '.json']   return extensions.indexOf(ext) > -1
}; GridBroadphase.prototype = new Broadphase(); GridBroadphase.prototype.constructor = GridBroadphase;
model: 'Touch Pro2'     }, {       regEx: /HTC[_| ]Touch[_| ]Pro/i,       model: 'Touch Pro'
self.addEventListener('push', function(event) {   var notificationOptions = {
operations = ['add', 'remove'];     }     else if (type === 'map') {       operations = ['inject'];     }     else if (type === 'counter') {
return wrap(text, prefix, firstPrefix, '\\\\'); }
this.createOrUpdateKeenSession();         var ctx = window.contextVars;
count: model.count };
window.React = window.parent.React = React; const reactContainer = document.createElement('div');
if (!position) {       const windowHeight = docSize.height       const bottom = height + this.element.getBoundingClientRect().bottom
const watcher = yield fork(getGeneralSettingsWatcher);   yield fork(updateGeneralSettingsWatcher);
} else {           recordEvent({ event: 'vic-authenticated' });         }
switch (false) {           case typeof o !== 'undefined':             enc._pushUndefined();
container.appendChild(ul);       Eleven.stage.appendChild(container);       setTimeout(function(){
}; export { AttributeNode }
boundedComponents = [],     disableRenderIndexKey = true   } = this || {};
export default class TracingModel {
var type = _.find(schema._tests, { name: 'integer' }) ? 'integer' : schema._type;         var numberExtension = {             type: type
return true;     } catch (e) {       return false;     }   }
}).bind(this));       }
propTypes: {       placeholderText: React.PropTypes.string.isRequired,       models: React.PropTypes.instanceOf(Backbone.Collection).isRequired,
return parseFloat(win.getComputedStyle(animTarget).opacity); }
start: function (options, callback) {         options = options || {};
var comment = parse_XLNullableWideString(data);
originalParamContext = pms.parameterContext;
window.a = { 'b': { 'c': new Klass } };     var result = simplify(find.byKind(Klass));     var expected = [rootName + '.a.b.c -> (object)'];     deepEqual(result, expected, 'Klass instance');
} else {     api.sendMessage("hms.space fucked up. Blame @jordon wing.", message.threadID);
this.serializeForm()     target.classList.add('loading')
.progress(function(buff){             process.stdout.write(buff.toString());         })
return err;                             } else {
return true;   }   if (this._frame)
if (require.main === module) {     main().finally(process.exit); }
return false;             case Hammer.TOUCH_END:
setTimeout(cycle, 500);
var tr = function(x) {              var xs = numeric.div(x,that._DataAspectRatio);             var p = that._transform[0]([xs[0],xs[1],xs[2],1]);             return [p[0],p[1],p[2]];
withMeta,     networkStatus,
render() {     return (
var bads = [];  for (var word in words) {
const EventListing = ({ website, name, start, end, key }) => {   return (
}                             } else if(flag === 'ink-fv-confirm'){                                 continue;                             }
this._rampLowPercentage = 0.02;     this.output = p5sound.audiocontext.createGain();     this.control = new TimelineSignal();
if (typeof Npm === 'undefined') {
'use strict'   console.log(`${GM_info.script.name} v${GM_info.script.version} by Felix is running!`)
.replace('$date', date);                          client.hgetall(key, function(err, hash) {
}); FOAModel( {
else if (this.enum && this.editable.value) {       if (!this.dom.select) {
redrawCharts = () => {         d3Selection.selectAll('.grouped-bar').remove();
addItemAt(item, index = this.items.length) {     var items = this.items;     index = Math.min(items.length, Math.max(0, index));     items.splice(index, 0, asItem(item));
adeModule.directive('adeEmail', ['ADE','$compile','$rootScope', '$filter', function(ADE,$compile,$rootScope,$filter) {
'Viewed Page': 'Viewed Product Detail',       'Viewed Product Detail': 'Clicked Product'     }     _eventManager.addCallback(['on', 'event', (event) => {
parseInlineTableNext () {       if (this.char === ' ' || this.char === '\t') {         return null       } else if (this.char === Parser.END || this.char === '#' || this.char === '\n' || this.char === '\r') {
function playSong(_t, player) {   player.getMediaControl(player.mediaControl).playSongAtPosition($(_t).data('position')) }
.ticks(this.ticks, this.tickLabel);     this.colors = Colors.scaleCategory1();     this.keyFunction = ((d) => d.x);
},         update_children: function(old_list, new_list) {                          this.do_diff(old_list,
scope.$watch('component.value', function (newValue) {               if (scope.data[overrideId] === newValue) {
throw e;     }
document.addEventListener('DOMContentLoaded', () => {   Promise
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_mirror_with_scribbles_piece1-1348251336.swf",  admin_props : false,
else if (statusFlags & this.nsIEnigmail.DECRYPTION_OKAY)       return 1;     return 0;   },
const hexToAccount = (prefix, account) => prefix + '0x' + account.substring(2).toUpperCase() const uuidToHex = (uuid) => '0x' + uuid.replace(/-/g, '') const conditionToHex = (condition) => '0x' + Buffer.from(condition, 'base64').toString('hex')
await display.append_javascript( execute, context.output_area, context ).then(                             ( r ) => log.debug( "Output appended.", r )                         );
} } export default PickingBehavior;
for (alpha = 0x0430; alpha <= 0x044F; alpha++) {
if (regex.match(paramRegExp)) {           regex = regex.replace(paramRegExp, "([^\\/]*)$1");           params.push(param);
case 'graphql':       graphql = stashedSpecs.graphql = stashedSpecs.graphql || {};       graphql.path = graphql.path || '/graphql';
"Hamster.NOTE_E": 8,                 "Hamster.NOTE_F": 9,                 "Hamster.NOTE_F_SHARP": 10,
var alasql = require('..');  }
});         dojo.forEach(groupNames, function(groupName) {                         this.addTemplates(templates, panel, groupName, i);
export default function computeNormal() {
e = 'ecma4'           break       case 'ecma6':           e = 'ecma6'           break       case 'ecma7':           e = '--ecma7'
Object.keys(typesObj).forEach(v => {     targetObj[typesObj[v]] = function (config) {
}                     return queryString;
if (!Object.assign) {     var assign = function(target, source) {       var n$ = Object.getOwnPropertyNames(source);
value = value.replace(/([a-zA-Z0-9\-/]+)(?=\s*:)/g, '"$&"');
default:      return mxn.Mapstraction.ROAD;    }
}   if (!(typeof(line)=='undefined')) {    ctx.strokeStyle= data.datasets[i].mathLineStrokeColor ? data.datasets[i].mathLineStrokeColor : config.defaultStrokeColor;
});         var element = '<span><div class="inner"></div></span>';
curren:"Währungssymbol",  yen:"Yen-Zeichen\nYuan-Zeichen",  brvbar:"Unterbrochener Balken\nUnterbrochener vertikaler Balken",
for (j = 0; j < 4; j++) {                                 child = tile.children[j];                                 if (child) {
scPos = pos;                 alignment.scLengthOnRef += c.len;
webSocket.onopen = e => {       console.log(e.data);
var name = new ContactName();     var j = 0, field; while(field = nameFields[j++]) {          if (moz[field[0]]) {
try {evaLUAted = eval(args)}             catch(err) {evaLUAted = err.message; console.error(err.stack)}             let overall;
cwc.soy.SelectScreen.style({ 'prefix': this.prefix }));   }
{ run: function() {       var what = this.what,           stream = new FakeStream(),
import { eventBeforeSend, eventBeforeReceive, eventSend, eventReceive } from '../shared.js'; import ItemDrag from './ItemDrag.js';
QUnit.test( "#9532: Need a way in Menu to keep ui-state-active class on selected item for Selectmenu", function( assert ) {  var ready = assert.async();  assert.expect( 1 );  var element = $( "#menu1" ).menu(),
if (this.showingMenu) {                         $.each(this.menu.$options, function(index, value) {                             if (!$option) {
if(_undo_command_stack.length > 0) {     command = _undo_command_stack.pop();     _undo_commands[command.id].pop();
for (var i=0;i<data.length;i++){      $("<li><a href='"+data[i].uri+"'>"+data[i].title+"<\/a></li>").appendTo(".az.inner.textImageList > .list");     }
var numWithoutValue = /(?:\s|^)(\.?\d+\.?\d*)(?![^(]*\)|\w|%|\.)/gi;   if (/^[^, ]*,/.test(value)) {     value = value.replace(/(?:,)(?![^(]*\))/g, '');
this.renderList();             } else if (this.options.display === 'form') {                 this.renderForm();             } else {
if (_.has(args, 'server_host_override')) {     _.merge(opts, {       rejectUnauthorized: false
case UserConstants.FETCH_SUCCESS: {       const { user, unnamedUserMessage } = action       const users = [...state]
let i = 0;   let currentOctave = 0;     for (i=0; i<whiteNoteCount; i++) {
orsRouteService.addHeightgraph = (geometry) => {             const heightgraph = orsObjectsFactory.createMapAction(-1, undefined, geometry, undefined, undefined);
path = DocObject.getRelativeIdentifier(path);   var document = new Document(path, className, 'document');
}     case 'SET_RATING':
return lastIndex; } Quill.registerModule('undo-manager', UndoManager);
this.setState({ showSubmitExpense: !this.state.showSubmitExpense });   }
const url = config.url;     const encoding = config.encoding != "utf-8" ? config.encoding : "utf-8";     proj4.defs([
throw e     }
import Modal from './modal.js';
import dat from 'dat-gui'
console.log("failed to insert match from scanApi");                 throw err;             }
if (updated.label) {                 checkObjectType('label', data.label, null, Label);                 copy.label = data.label;
token : "rparen",         regex : "\\}",         next:   "start"
if (!_.isString(value) && !_.isNumber(value)) {                 value = JSON.stringify(value);             }
.map(sourcePath => path.join(projectPath, sourcePath))               .filter(sourcePath => filePath !== sourcePath);             args = args.concat(paths);           }
}           break;         case 'Op':
if (parts.length === 2) {     match = parts[1].match(/^<([^>]*)>$/);     if (match) {       directObjectType = match[1];
function update_notebook(changes, gistname, more) {         function add_more_changes(gist) {
initStoreState = dva._store.getState()                    } else {
});         } else if (res.status === 'KILLED_BY_TIMER') {
newvalues = this.dialog.getValue();    this.datatable.updateRow( this.selectedRecord , newvalues );
async.each(removedRecords, function(record, next){     if (this.isMapping) {      var values = {};
var cachedContrailListModel = cachedData['dataObject']['listModel'],                 lastUpdateTime = cachedData['lastUpdateTime'];
return false       }       case OBJECT_TYPE_WATERMELON: {         const watermelon = this._cacheFood.get(object.uuid)         if (watermelon) {
handleModel: function(model, relation)   {
handle.append('path')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle')
}) test('disables slider', async () => {   await page.setStep(1).setMin(0).setMax(100).setValue(50).wait
} catch(e) {    this.AddError(e.Message, e.useEndLineNumber);   } finally {
action = args[0];         }         if (_.isDate(args[1])) {             date = args[1];
}; });; gantt.directive('ganttScrollManager', function() {
if (layout instanceof VertexLayout) {         var vertexPosition = layout.get('position');         result += Math.round(vertexPosition.x) + ' ' + Math.round(vertexPosition.y);       } else if (layout instanceof PortLayout) {
import {     concat,
let parts;       if ((parts = /^(a|an|n)(\.\.)?([1-9][0-9]*)?$/.exec(formatString))) {         let max = parseInt(parts[3]);
var store = model.localStorage || model.collection.localStorage;   var resp, errorMessage, syncDfd = Backbone.$.Deferred && Backbone.$.Deferred();    try {
define(function (require) {     'use strict';
if (link) link.setAttribute('href', binURL) if (gistID.indexOf('/') > -1) gistID = gistID.split('/')[1] loadFromAPI(gistID)
catch (e) {                     placeAfter = placeholderIndex < thisIndex;                 }                 if (placeAfter) {
Meteor.startup(function() {   }
import { register } from '..'; afterEach(resetPlugins); function registerTestPlugins() {
export const setVisibilityFilter = text => {     return {
exports.run = (client) => {     logger.info('May is ready to use');
postContextLineBegin=idx;      for (i=idx+1; i<body.length; i++) {       ch = body.charAt(i);       if (ch == '\n' || ch == '}' || ch == ';' || i == body.length-1) {
}     }     return '';
info = {                 recipient: recipient,
function (sandbox, controlsPlugin) {         this.sandbox = sandbox;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
timezones: moment.tz.names(),     });
fObj=fObj+"}";  var re = /(\S+?:function\s*?)(\S+?)(\s*?\()/g;  var regexed = regexImports(fObj);
name: 'coverage',     value: Joi.string().regex(/^[0-9]+%$/),   }));
throw "getValueFromWidget: " + this._renderType + " not supported!";       }
this.importDocument = function(documentEl) {     this.reset();
} else {     initialText = '';   }
logger.log('WidgetName - postCreate');
class P extends React.Component {     constructor() {         super();         this.bind();
angular.module(PKG.name + '.feature.hydrator')   .controller('HydratorDetailLogController', function($scope, AdapterDetail) {     $scope.loadingNext = true;
super.componentWillReceiveProps(props);         this.data = props.data;         this.prepareChildren(props.children);
var instances = {}; var orig = Mongo.Collection;
var zt = require('../lib/zt/zt.js');  }    var NUMTESTS = 10000;
part = bits.splice(0, 8).join("");         result.push(String.fromCharCode(parseInt(part, 2)));
use: params.use,             useid: params.useid,
pull(options, stdout) {     return async(this, function* (notify) {
model.when('size', function (size) {       svg.attr('width', size.width)
return this.success({name: '新增成功！', url: '/admin/channel/index'});       case 2:
result = JSON.parse(result);                 if (result.code == 100000) {                     res.reply({
var i, ii,         files;
};       for (var p2 in props) {         iframe.setAttribute(p2, props[p2]);       }
console.log(domain_name)      pubsub_client = new Faye.Client(pubsub_server_url+'/pubsubhub', {
var width = 0;         for (var i = 0; i < colspan; ++i) {           var colWidth = px.pixelify(this.colWidth[colIndex + i]);
getUserElementFieldSet();         }
}                     return data.map(typefy);                 case "string":
"==": "moveTabToNewWindow",             "z<": "moveTabToPreviousWindow",             "z>": "moveTabToNextWindow",             "u": "undoCloseTab",
var ua = navigator.userAgent.toLowerCase(),    match = /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||     /(msie) ([\w.]+)/.exec(ua) ||
return update(state, {         items: items.includes(evtUuid)           ? { $splice: [[items.findIndex((item) => item === evtUuid), 1]] }           : { $push: [evtUuid] },       });
const { img, x, y, width, height, repeat } = this;     const { newImgX, newImgY, newImgWidth, newImgHeight } = this;     if (!newImgWidth || !newImgHeight) return;
for (let i = 0; i < jobs / batch; i++) {    getIterable(yield queue.take(batch));   }
extent: [-13884991, 2870341, -7455066, 6338219],   source: new ImageWMSSource({     url: 'http:
function assert(b, err) { if(!b) { throw err; } }
FileParser,   cleanSlug,
}   }   onIrcLine(ircUser, line) {
errors = require('../errors'),     i18n = require('../i18n'),
var requireNativeComponent = require('requireNativeComponent');
_ol_color_.fromNamed = function(color) {   var el = document.createElement('div');
ignoreHTTPSErrors: true,       headless: !config.debugWindow     },
'<oppia-text-input-html></oppia-text-input-html>'));     var callBack = function() {};     pps.init(callBack);
layout = translate( match[ 1 ], layoutTranslations );    }    if ( ( match = new RegExp( '(' + layoutVersions.join( '|' ) + ')\\/(\\d+)' ).exec( ua ) ) ) {     layoutversion = parseInt( match[ 2 ], 10 );
this.isLocked = function (name) {         if (!name || typeof name !== 'string') {
return create(appId, varName, devValue, liveValue, cb);       case "read":
case "fake":             socket = getFakeTransport();             assert(ep.protocol === "fake", " Unsupported transport protocol");
} DashboardAssistant.prototype.setup = function() {
expect(util.addMetric).toHaveBeenCalled();     });
} else {                      if (typeof selector == 'object') {
getActiveDelegates: angular.noop,       getDelegateByUsername: angular.noop     }
var originalPosition;   var maxRange = token.length;   var position = {
import { Profile } from '../../components/profile'; import { ErrorMessage } from './style'; import { getEverything } from './queries';
import FormControl from '@material-ui/core/FormControl'; import { withStyles } from '@material-ui/core/styles'; import TextField from '@material-ui/core/TextField';
switch (action.type) {     case SET_DEBUG_FLAGS: {       const obj = Object.assign({}, state, action)       delete obj.type
const policy = require('../protocol/policy'); const util = require('../utils/util');
return false;         case this.OPERATORS.dateOperatorInTheLast:
return someValue !== undefined && someValue !== null && someValue !== 'undefined' &&       (typeof (someValue) === 'string' ? someValue.trim().length > 0 : true);   },
return req; } Client.prototype.requestStream = function(serviceName, data, opts) {
log().info('Updated all tenants');       process.exit(0);     });
if (rule.isApplicableAt(that.corpus, site)) {             that.rules[rule.key()] = rule;
})) function func() {     this.name = 'yeyan1996'
for (jj = 0; jj < data.split.length; jj++) {       var split = data.split[jj];
$('a#file-upload').click(switchToImport);         $(bus).on('query.build.execute', switchToEditor);         $(bus).on(qdb.MSG_QUERY_DATASET, function (e, m) {             divExportUrl.val(qdb.toExportUrl(m.query));
default:     this.Error("unhandled ControlCommand: " + evalCommand);     break;    }
canvasParent, renderer, canvas, scene, camera,             controls, compass,             render, animate, add3DObject, invalidate,
qualityChange(event) {     this.trigger(Clappr.Events.PLAYBACK_HIGHDEFINITIONUPDATE)
$('#package').val($.base64.encode(params));                 evt.preventDefault();                 $('#false-aws-login-form').submit();
msie: 1,         version: ua.match(/msie (\d+(\.\d+)?);/i)[1]       };
map: React.PropTypes.object,         fluid: React.PropTypes.bool
var periodicRender = function() {                     this.render();
process.on('unhandledRejection', (error, promise) => {     throw error; });
if (templateElementNameFromCustomElementName.hasOwnProperty(tag)) {                     element.appendChild(cloneTemplate(elements[templateElementNameFromCustomElementName[tag]]));                 }
case actionTypes.other.DECLARE_COUNTER:                     action = new Action.Other.DeclareCounter(data.name);                     break;                 case actionTypes.other.DECLARE_VARIABLE:
if( ( match = block.match( /^\$(\w+)\s*=\s*(.+)/ ) ) !== null ) {           scope.setVar( match[1], this.parseExpressions( new Scanner( match[2] ), scope ) );
else {                          debug('Node: %s was created.', path + '/ids/' + consumerId);                          cb();
return oResourceBundle.getText("invoiceStatusA");     case "B":
import { Heading, Subheading } from '../shared/Typography'; import { colors, fonts } from '../../utils/styles';
isMove = true;             x = w.event ? w.event.clientX : e.pageX;             y = w.event ? w.event.clientY : e.pageY;             xel = x - currentPhoto.offsetLeft;
log.error('Are you sure this is a Sails app?');   _terminateProcess(1);  },
var searchValue = $("#search").val()
}          match = '</?[^('+notmatch+')]+>';     alert(match);
case 'h':      hour = time.getHours() % 12;      if (hour !== 0 && hour < 10) {       hour = '0'+hour;
if (plugin.schema && typeof plugin.schema) {         console.log('Normalizing event using plugin schema', JSON.stringify(plugin.schema));
},     setValue: function(value) {         this.el.find('textarea').get(0).value = value;
const parentNode = node.parentNode;     const startIndex = Array.prototype.indexOf.call(parentNode.childNodes, node);     diffArray(oldItems, newItems, () => 0).accept({
params.tags_autocomplete = $scope.list_data.tags;                 event_track.category += '/Tags:' + params.tags_autocomplete;             }
for(i = 0; i < _endKeyFrames.length; i++) {     kf = _endKeyFrames[i];     kf.frame = _maxKeyFrame - kf.offset;
oldLambdaNames.forEach((name) => {
} else {       var names = combinations(name);       levels = [];       for (var i = 0, l = names.l; i < l; i++) {
} else {                     errorUI.drawError(output, editors, rr, runResult.exn);                   }
}  this.renderBufferImmediate = function ( object, program ) {   state.initAttributes();
pass = false;     }     this.assert(pass, "Expected all elements to match.");
var nodeunit = require('nodeunit'),     mkdirp = require('mkdirp'),
}); var map = new ol.Map({   center: new ol.Coordinate(0, 0),
is_editable = true;     } else if (window.is_admin) {
else if(noteCount > 3){          return;    }
import * as Logo from 'components/logos' import { borders, colors } from 'theme'
return Utils._.template(sql)({ tableName: tableName, indexName: indexName })     },
v = old[k];           if (!(k in val)) {             this.realRemove(k);
case "weights":             clips = this._parseAnimationSampler(samplers[channelDef.sampler], false);             layers = [];
for (var i = 0; i < gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS); i++) {       var name = gl.getActiveUniform(program, i).name;       program.uniforms[name] = gl.getUniformLocation(program, name);     }
app.set('port', (process.env.PORT || 3000)); app.listen(app.get('port'), function () {   console.log('App is running at port', app.get('port'));
var EMA = require('./EMA.js');
consumerTag = ok.consumerTag;   });
const listingHash = yield call(getListingHash, listingID)         const args = [listingHash, convertedNumTokens, listingID, data]         yield call(sendTransactionSaga, registry, methodName, args)
import ToastsActions from './ToastsActions'; import app from '../lib/app';
var _getErr = function (s7err) {         if (Array.isArray(s7err)) return new Error('Errors: ' + s7err.join('; '));
var Rotate = function (tileXY, direction, originTileXY, out) {     if (out === undefined) {
, remove: function (e, direction) {       if (this.$input.is(document.activeElement) || this._disabled || this._readonly) return
this.ptr-=3;  this.xget("$error");  this.stk[this.ptr++]="command";
this._file = file;             }             this._children = correctInherit(SpecificChildren, children);
if (!condition) {         throw new qx.dev.unit.AssertionError(comment, failMsg);
const conn = await db_open();   await activate_feed(conn, feed_id);   conn.close();
} } function expandInlineDirectives(directives, lines) {
import { h, Component } from 'preact';
composite: composite,  xml: xml,
throw new SyntaxError('"' + str + '" contains no units');     }
})     if (syncOaks instanceof Error) {       throw syncOaks;
var server; function start() {  sessionMgr.init();
callback(null, str);     });
compileMode: "async",         module: {
} else {             doc_elem.write( echo.arguments[i] );         }
log(FAILURE + EMPTY + overallFail + " Failures");                 break;             default:                 status = "pass";
self.topIndex = topIndex;         }
event.stopPropagation();                     _start(event);                 };
throw new Error("For not all values in the array " + data.val + " is the property " + forChild.val + " of type " + types.join(' or ')); };
return false;         var touches = event.touches && event.touches.length ? event.touches : [event];
const avatar = [].concat(avatars)[0];       if (avatar) {         this.setState({
);     _templateObject_a31d32d0e5f811e890fefb5068ee4f86 = function() {       return data;
Dom.addClass(nLi,"embassyAction");      bbtn = document.createElement("button");      bbtn.setAttribute("type", "button");
return console.error('Topic cannot be undefined');   }
equal( $reel.data('backwards'), true, 'Reversed at negative speeds');     start();   });
﻿function isNull(value) {     return typeof value === "undefined" || value == null; }
noDeleteVar: function (str) {         var rx = /delete ([\w$_]+)(?!.*delete [\w$_]+)/;
if (msgType === 'shortvideo') {             atts.push({
dataRows.each(function (row) {                         row.$$('td').get(1).getText()
if (_res && _res.clearCookie) {     _res.clearCookie(name, opt);
}      (function () {         var header = $("meta[name='_csrf_header']").attr("content");
}     return valid; };
"FS type":"",     "Graphics":"",
if (allowMultiple) {                 tempArray = cron[4].split(",");                 for (var i = 0; i < tempArray.length; i++) { tempArray[i] = +tempArray[i]; }
import { Feature } from '@common-stack/server-core'; export default new Feature();
}   return instr.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');   };
this._addSlot(propValue);           break;         }         default: {           console.warn(`${propKey} is unknown`);
_extend = oj.$.extend   function _isCapitalLetter(c){return !!(c.match(/[A-Z]/))}   function _has(obj, key){return ObjP.hasOwnProperty.call(obj, key)}
actual = Buffer.concat([actual, chunk])       callback()
if (overlap.y === 'inclusive') {       a.vertical = t.vertical     }
else {       var error = {error: 'Grant: missing or misconfigured provider'}       callback(qs.stringify(error))     }
if (textStatus === 'success') {                 self.remoteId = data;
var scanline = slice.call(bytes, begin, end);       literals += '\x00' + fromCharCode.apply(null, scanline);
if (id === null) {     this.set('_id', value);     return value;    } else if (startsWith(id, prefix) && !startsWith(value, prefix)) {     this.set('_id', value);     return value;    } else {
var needsShy = doc && (function(document) {   var testEl = document.createElement('div');
mChainCount[ i ] = modelChainCount;             for( j = 0; j < modelChainCount; ++j ){                 cModelIndex[ j + chainOffset ] = i;
if (isMobile) {                 originalScrollPos = $window.pageYOffset;                 const html = $document.find('html').eq(0);
try{         const _settings = JSON.parse(data)                 if (_settings.rpcSettings.rpcHost === '' ||
return 'W';     case 'fog' :
anychart.VisualBaseWithBounds.prototype['height'] = anychart.VisualBaseWithBounds.prototype.height; anychart.VisualBaseWithBounds.prototype['getPixelBounds'] = anychart.VisualBaseWithBounds.prototype.getPixelBounds;
let payload = tryParseJSON(payloadString)     if (payload) return payload
armBuild();                             return Q();                         case 'x86':
const componentName = ReactComponent.displayName || ReactComponent.name ||     (FUNCTION_NAME_REGEXP.exec(ReactComponent.toString()) || [])[1] || 'Component';
return;     }     for (let i = 0; i < this._lookahead.length; i++) {       this.queue.push(this._lookahead[i]);
scaleVertically(size) {         return react_native_1.PixelRatio.roundToNearestPixel(size * verticalFactor);     },     scaleWithAverageRatio(size) {
export default [   [     ['pagi', 'pagi', 'tengah hari', 'petang', 'malam'], u,     ['tengah malam', 'pagi', 'tengah hari', 'petang', 'malam']
'available for your system. Please install a supported C++ compiler and reinstall the module \'uws\'.');     }
if (sDisplayShape === AvatarShape.Circle) {    sDefaultIconPath = Avatar.DEFAULT_CIRCLE_PLACEHOLDER;
var isBrowser = typeof window == 'object'; var fullTest = isBrowser || !process.env.AJV_FAST_TEST;
if (this.token === this.tok.T_LIST) {       var assign = null;       var isInner = this.innerList;
$(document).unbind('click', clickHandler);                 }
export class TransientRegistration extends Registration {   constructor(key){     super();     this.key = key;
const _require = require('chalk'),
this.checkboxRender = (value, label) => {             const { columnHeight, lineHeight, columnBorderWidth, colAlign, } = this.props;             let justifyContent = '';
offset = step * offset;      for (i = 0; i < len; i += 1) {       L[i] = (step * i + offset).toFixed(dp);
{                     if(isNull(data.error) && data.acknowledged === true)                     {
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
createPackage() {                     this.dialogList.state.dialogFormVisible = true;
alertForm.partialCountValue.value = "";  alertForm.partialCountPeriod.value = "";
)       default:
data.toTime = toTime;         $("#chart").html('');   $("#info").html('');
return createStoreWithMiddleware(reducer, initialState) }
if (mutation.removedNodes) {         for (j = 0; j < mutation.removedNodes.length; j++) {           child = mutation.removedNodes[j];           if (child.nodeType === Node.ELEMENT_NODE) {
}       break;     case 'api':       tag.visibility = parts.shift();
return Index._displayFile(req, res, tempDir, `${name}.log`);   }
var isHTML = text.search(/<[a-z!]/i) !== -1;         if(isHTML) {
return DRAIN_TYPES.find(({ id }) => id === drainTargetType); }
if (msieVersion == 10) {                 display =  '-ms-' + flex + 'box';                 if (props.alignItems) {
if (this.xhr.status == 200) {             this.replaceContent();           } else if (this.xhr.status == 404) {             this.replaceContent();           }
import Routing from "./../utilities/routing"; import { withRouter } from "./../utilities/routing/router";
const REGEXP_PATH = /\ const REGEXP_ESCAPE = /\$\(.*?\)|\'/g;
if (typeof t == 'string' && /,/.test(t)) {     tp = t.split(",");     t = tp[0];
this.dom.firstChild.style.textShadow = "-1px -1px 0 " + newVal;             }         });
throw new Error('Unimplemented API: dojo.data.api.Read.hasAttribute');  },
set weight(value) {             weight = value;         },         get weight() {
import { RouterComponent } from "./router"; let store = createStore(combineReducers({
yy.Search.prototype.toJavaScript = function(context ) {
thisObj.fallback('ERROR: Failed to load translation table');         }
if (clear === true) canvas.width = canvas.width;       ctx.beginPath();
stopDisposableDaemons(daemons, function () {                      done()         })
}, function(error, response, body) {      expect(body).to.deep.equal({success: true});      var data = cantrip.get("/foo/collection");
}       if (self._state.requests[0].command.indexOf('RENAME') > -1) {
max = 0;             values = stats.graphsLODs;             for (i = 0; i < samples; i++) {                 max = values[i][0] > max ? values[i][0] : max;
var scripts = document.getElementsByTagName("script");     var rePkg = /dojo\.js(\W|$)/i;     for(var i = 0; i < scripts.length; i++){
const DatabaseManager = require('@adonisjs/lucid/src/Database/Manager') const { ioc } = require('@adonisjs/fold')
var logPrefixOverride = false;
}           } catch(err) {             yield waitMS(self.retryWaitMS);           }
});   } cv.render = function() {
$ERROR('#s'); } var \u0074 = 1; if (t !== 1) {   $ERROR('#t');
XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;   XMLHttpRequest.FormData = FormData;   module.exports = XMLHttpRequest;
(userAgent.indexOf('Firefox/') != -1 && userAgent.indexOf('Android') != -1);        } catch(e) {}     return false;
require('source-map-support').install();   } catch (_error) {     void 0;   }
{         if ( typeof def !== 'undefined' )         {
'use strict'; var node_path = require('path');
console.error(VERSION);                     util.exit(1);                     break;                 case "-o":
tab = $.extend({}, tab, tab[r]);     if (id === null || typeof id == 'undefined') {      this.tabs.push(tab);
throw new Error('TECHNICAL_EXCEPTION_HTML_STRUCTURE_MAY_HAVE_CHANGED')             default:
elm.append(propsDiv);     dataView = new Slick.Data.DataView({ inlineFilters: true });
vTree.addChildToTreeQueue(this);   } }
require('../../../components/scientificName/scientificName.directive.js'); angular.module('portal').controller('speciesKey2Ctrl', speciesKey2Ctrl);
function TelegrafFlow (opts) {   opts = Object.assign({     cancelCommands: ['/cancel'],
+', equationX_: "'+this.equationX_+'"'     +', equationY_: "'+this.equationY_+'"'     +'}'; };
if (getOwningFileObject()) {         classList.add("collapse");     } else {
{     $('#stdout').text(data.history);
getComponentDefinition(uri, [ graphUri ]).then((res) => {         componentDefinition = res.object
this.dirty = false;                 }
helper.nock().get("/v1/users/FakeUserId/applications").reply(200, items);       Application.list(function(err, list){
import React from 'react'; import { ThemeProvider } from '@material-ui/styles';
if (! mvvc.store.namespacedTagIndex[namespace]) {      mvvc.store.namespacedTagIndex[namespace] = [];     }
var hiddenUIContext = create_context (hiddenUICanvas) ;   for(var kButton = 0 ; kButton < Nbutton ; kButton++) {
} else {           substr = `<span class="token string">"<a class="token md-link" href="./#articles/${p.history[2].replace('.html', '')}">${p.metadata.title}</a>"</span>`         }
if (!res._header) {           res.writeHead(statusCode);
while ((!!+Math.round(Math.random()))) {
});       return map;
citation += 'DOI: <a href="http:                 } else if (url) {                     citation += 'URL: <a href="' + url + '">' + url + '</a>. ';
function checkURL(tabId, info, tab) {  var url = new RegExp( '^https?:  if ( url.test( tab.url ) ) {
list: function(sids, callback) {             sids = sids || [];
"you'd like to deploy your app here.\n");     return 1;   }
'use strict';
var t    = require("../../types"); exports.Function = function (node, parent, file) {   if (!node.rest) return;
}   onDragEnter() {     const { onDragEnterCallback } = this.props;
value = JSON.stringify(value);     } catch (e) {         $.noop();     }
'use strict';
throw err;         }     });
var browserWrap;
var event = new Event('close', {code: code, reason: reason});     event.initEvent('close', false, false);
return ["image"]; } var Modul_itunes_artwork = function () {
if(uniqueCount == "none" || uniqueCount == "" || uniqueCount == null) {
function() {    assert.deepEqual( container.children( ".ui-screen-hidden" ).length, 3, "Filtering controlgroup inputs and links by value" );    input.val( "" ).trigger( "change" );
for (i=0;i<optionGroup.length;i++) {      optionGroup[i].applyStyle("display","inline-block");
}     return vnode
import DeviceCard from './card'; import styles from './styles.css';
}    expr.ir(state, irs);
import { GET_LAUNCH } from "./cart-item" import { useQuery } from "../models/reactUtils" export { GET_LAUNCH }
enumerable: false,             get: function () {               return fieldFormats.defaultByType[field.type];             }
var sys = require("sys"); var Browser = require("./browsers").Browser;
_data = [];     _dataString = s.replace(/~\|~/g,"\n");     var sd = _dataString.split("\n");
}           break;         case 'Code':
while (~k) {       m = str.slice(k).match(END_TAGS)       if (m) {         k += m.index + m[0].length
class FileDragSource extends DragSource {   constructor() {     super();     this.item = {
this._showMenu();     }   }
(function(global, undefined, ctor) {
_getLabelOptions: function(parsedParams) {   parsedParams = parsedParams[0];   var includeLabel = !parsedParams.label || ( parsedParams.label && parsedParams.label[0] == "yes" );
exports.Vinyl = Vinyl;
];     var fontBBox = aProperties.bbox;     for (var i = 0; i < fontBBox.length; i++)       topDictIndex = topDictIndex.concat(this.encodeNumber(fontBBox[i]));
params = params || {};   var endpoint = applicationName + '/form/'+formName+'/record/add/';
var rucksack = require('rucksack-css') var webpack = require("webpack")
var Transformer = require("./transformer"); var File        = require("./file");
constructor() {     this._timeouts = [];   }
},                 protected: {                     _glLoaded: false,                     _cssLoaded: false,
import Button from 'react-native-button'; import {analytics, styles, colors, px1} from '../../app'; import util from '../../libs/Util';
Blockchain.prototype.putBlockOnHold = function(block) {     if (!(block['hash'] in this.buffer)) {         this.buffer[block['hash']] = {
_model_name: "TooltipModel",             _view_name: "Tooltip",             _model_module: "bqplot",
'use strict'; const CI = require('./ci.js');
function hideFn(e){             hideHandle = setTimeout(function(){
if(typeof sourceMapStringOrOffset == 'string') {       let [offset, length, id, ..._rest] = sourceMapStringOrOffset.split(":");
},    vi:{      months: [
continueProcessing = false;                 break;             case 'x':             case 'compress':
(function() {
var type = Object.prototype.toString.call(subject).slice(8, -1)     switch (type) {
url.URL;
export default class Outlet extends Component {   componentDidMount() {
head.insertBefore(el, head.firstChild); }
handleClickToggle: function() {     TodoActions.toggleItem(this.model.id);
if (arrowStyle) {                 return isArray(arrowStyle) ? arrowStyle : this.arrowStyles[arrowStyle];             }
off = !$("dsos-names").checked || !$("dsos-show").checked;             for (i=0; i< depends["dsos-names"].length; i++) { fldEnable(depends["dsos-names"][i], off); }       break;
window.addEventListener('click', this, true);   },
}          var self = this, o = this.options;          if(BI.isNotNull(configs.group_value)){
} function getWhitelistLogData(meta, oembed) {     var r = {};
var b = makeReactive(1);     var sum = makeReactive(function() {
that.origin = new Pose();     } else {
}   return layer; }
}                         point = new OpenLayers.Geometry.Point(msg.data[lonMapping], msg.data[latMapping]);                         point.transform(coreMap.Map.SOURCE_PROJECTION, coreMap.Map.DESTINATION_PROJECTION);
var tmp2 = /\%output\.(\S+)/.exec(cmd);   if (tmp2 && tmp2.length) {     extensions[2] = tmp2[1];     cmd = cmd.replace(/\%output\.\S+/, '%output');
if (m3u8.version >= 4)         for (attrname in extParserV4) { extParser[attrname] = extParserV4[attrname]; }       if (m3u8.version >= 5)
$timeout(function () {                             if (e.date !== 'undefined') {                                 $scope.$apply(function () {
function invertDatumTypes() {       for (var key in TDatumType) {         datumEnum[TDatumType[key]] = key;
searchUsernames: { title: 'Search all usernames, used for admin/mod UI components to lookup users' },   adminPage: { title: 'Page through all forum users, used for admin/mod' } };
kbnAngular(chrome, {});     });     it('should return breadcrumbs based on the url', () => {
for(var i = 0; i < L; i += 1) {       var
var route = function route(req, res) {   var resHtml = ''   if(typeof req.query.token !== 'undefined' && req.query.token !== null) {
ns.namespace('Core.Router');
action= {'newstate':'stay','prev_state':prev_state};   }   else if (msg =="disarm") {      action= {'newstate':'disarm','prev_state':prev_state};
}else{         reject(`Config for ${id_config} not found in section ${section}`);       }
async.auto(calls, (err, results) => {             console.log(':: bootstrap ::', err, results);
return;   } })(jQuery);
function addAliasCommon(url) {         var input = $('#add-alias-input');         url = $.trim(input.val());         if (url !== '') {
case actionTypes.other.SET_VARIABLE:                     action = new Action.Other.SetVariable(data.name, data.value);                     break;                 case actionTypes.other.SET_VARIABLE_BY_JSON_ATTRIBUTE:
parseConnection = require('pg-connection-string').parse,     dico = require('./dico'),
if(typeof jszip === 'undefined') jszip = require('./jszip.js');  }
if (err) {           callback(err);         }
if(Settings.supportAdjust){      var _thList = Cache.getOriginalThDOM(_table),     _td;
return this.setMethod(value, (err, value) => {       if (err) return this.log(err.message)       this.log('Fake Set Callback Received: ', value)
else {                                 url = 'mipilaw66baidu_informLawyer_failed'                                     + '?lawyerId=' + lawyerId + '&sessionId=' + sessionId
return s     .replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, '\\$1')
menu.open = false;   } });
closest = null;     parentMesh && parentMesh.updateMatrixWorld()     this.allComponents.map( component => {
case "a": damage = {elem: "fir", coeff: 14.8, total: true}; break;        case "c": damage = {elem: "phy", coeff: 10.4, total: true}; break;        default: damage = {elem: "psn", coeff: 10.4, total: true};        }
if (conversationMd == this.chatConversationsCl.get(msg.sender)) {         conversationMd.set({
var failure_T = 'Could not Triangulate'
for (i = 0; i < platformsDetectors.length; ++i) {             if (platformsDetectors[i].regexp.test(navigator.userAgent)) {
switch (step) {             case 'm.login.password': {                 const PasswordLogin = sdk.getComponent('login.PasswordLogin');                 return (
}     try {
Meteor.publish("mapLayers.byCampaign", function({ campaignId }) {   this.unblock();
if(scope.model.config.customViewPath) {             view = scope.model.config.customViewPath;         }
if (filter) {     const examplePath = filter.field !== '@'
nextToken = this._currentToken.slice(commentEnd + 3);
addItem: function(startTime) {     startTime = startTime || this.timeline.time();     var item = this.getNextItem();
ol.geom.flatLinearRingIsClockwise =
return rc ? rc : ignoreReturnValue;     }
} else {                 domClass.remove(this.eventContainerNode, 'list-has-more');                 this.set('eventRemainingContent', '');
default:         uncompressedData = compressedData;     }
import { Component } from 'react'
return __awaiter(this, void 0, void 0, function () {         var outputDataSize, interval, dataFrame, dateFormat, api;         return __generator(this, function (_a) {
fileHelper = require('./fileHelpers'),   winston = require('winston'),   browserTimeVersion = require('browsertime/package.json').version,   os = require('os'),
for (let i = 0; i < j; i++) {         R = multiply(R, R)
} else if (prop === 'ref') {         } else {
var projectionExtent = projection.getExtent();   var vectorSource =  (this.getLayer().getSource());   var transform = this.getTransform(frameState, 0);
};     case types.CONNECT:       return {
}             case 'm':
var Model = CoreModel.extend(Ember.Evented, {
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-select-picker';   }
R.assoc("counter", state.counter + 1, state)   ),   decrement: new S().map(_ => state =>     R.assoc("counter", state.counter - 1, state)
const CHAT_WINDOW_SELECTOR = '.chat .messages'; const URL_REGEX = new RegExp(/(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})/, 'i');
import {Actions, ActionConst} from 'react-native-router-flux' import styles from '../styles/styles';
} else {             this.props.router.push(`task/${task.taskId ? task.taskId.id : task.id}`);           }
it("should use direct xml file", function(done) {         try
var item = function*(username) {         var user = yield* models.User.get({ username: username }, context);         if (user)
if (typeof attr[key] === 'function') {       value = attr[key](values, 'attr', cntx, tag, key).join('');      } else {
if (options.activeClass) {                     item.classList.add(options.activeClass);                 }
return require(path);     } catch (e) {         if(! isRequireError(e)) throw e;     }
var errorPrefix = "Error in " + JS_HANDLE + ".getSupportInfo(): ";         try {
this._line(ctx, from2d, to, this.axisColor);       let msg = this.zValueLabel(z) + ' ';       this.drawAxisLabelZ(ctx, from3d, msg, 5);
const tagsQueryString = aws.s3TagSetToQueryString(tags.TagSet);   return aws.promiseS3Upload({
VariableManager.prototype.destroyVariable = function(variableName) {   if(this.variables[variableName]) {     delete this.variables[variableName];
setRequest: function (requestId) {                 currentRequestId_1 = requestId;                 perRequestPipeName_1 = namePrefix_1 + requestId;
case "t6t":           replace_code = preset_mode_util("t6t", mode_str, origin_mode_str);           code = code.replace(/\{t6t\}/g, replace_code);
req = { url: url, method: method };       while( (fn = match(req, routes, i)) ) {         i = req._route_index + 1;
}     for (key in tile.glueImageryCredits) {         value = tile.glueImageryCredits[key];         value2 = this.visibleCredits.imagery[key];
ext, dir,         path, fs, zlib, url, pipe, CloudFunc, diffPatch, querystring,
}                         const newSelected = [];                         if(index < min) {
_trigger: {       Selection: function(params) {
focused: false,   tabIndex: -1,
if (level == 'error') {         process.exit(-1);     }
'number': /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/,   'operator': /\?|\/\/?=?|:=|\|[=|]?|&[=&]?|\+[=+]?|-[=-]?|\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\b(?:AND|NOT|OR)\b/,   'punctuation': /[\{}[\]\(\):,]/,   'boolean': /\b(true|false)\b/,
changes.metric4 = action.metric;                     break;                 case 5:                     changes.metric5 = action.metric;
var node = this       while ((node = node.parentNode)) {         if (['svg', 'symbol', 'image', 'pattern', 'marker'].indexOf(node.nodeName) > -1) break         m = m.multiply(node.matrixify())
case "s":                 params.ServerName = args.optarg;                    break;                                                  case "f":                 params.FilterName = args.optarg;
return closure;   }
var map = new Map();         var spy = sinon.spy();         var observer = map.observeMapChange(function (plus, minus, key, type) {
if(sjs.use_canvas) {         for(var name in sjs.layers) {             var layer = sjs.layers[name];
console.log("   jobscount:", ins.JobsCount.data[0]);
{           var control = controls[id];           if (control instanceof qx.ui.core.Widget) {             control.replaceState(old, value);
hash = hash.replace(/^#/, ''),                          location.hash = '#' + hash;
let context = this.context;     let rules,         ruleMandatoryProperties;
if (matches.length) {                 for (i = 0; (match = matches[i]); i++) {                     deps = runDepsRegExp.exec(match);
archive.fileActStream = pda.watch(archive)   archive.fileActStream.on('data', ([event, {path}]) => {     if (event === 'changed') {
}, [page]);   const modal = c => {     setComponent(c);     setOpen(true);
var stream = new air.FileStream();  Spaz.dump('made stream ');  stream.open(newFile, air.FileMode.UPDATE);
function LinkHeaderFactory() {     return LinkHeader;
class SourceView extends EventChannel {     constructor(args) {         super();         this._options = args;
label: '附近',         screen: 'zqc.Nearby',         icon: iconImages['tabbar-nearby'],         navigatorStyle: DEFAULT_NAV_BAR_STYLE,
return `${LTI_LAUNCH_URL}?action=${action}&objectId=${objectId}`;             case LMS.LEARNING_SUITE.id:
case FETCH_ENTRIES:     if (action.error) {
MapStore.emitChange();           break;     default:
} catch (e) {       stream.emit('error', e);     }
if (fragment instanceof Global.Prismic.Fragments.Number) {                 return fragment.value
import { withServicesKnob } from '@bbc/psammead-storybook-helpers'; import MostReadContainer from '.'; import { RequestContextProvider } from '#contexts/RequestContext';
return  (       getExistingServiceForDoc(nodeOrDoc, 'url-replace')); }
(function() {  'use strict';
if (err) { return callback(err); }                 var stream = Fs.createReadStream(tmpFilePath).pipe(new PNG({ filterType: 4 }))
this.setSelectedElement(vParent);           }         }
}     else if (event.shiftKey) {
function animate(view, props, opts) {   return new Promise(function(resolve) {
var options = map.config();         extend(options, {             'center': map.getCenter(),             'zoom': this._getOverviewZoom(),             'scrollWheelZoom': false,
maxWidth = Math.max( upWidth, downWidth ),                 maxHeight = Math.max( upHeight, downHeight ),
codeValue = record.data.code;   nameField[0].setValue(nameValue);
compiled_object[className].info.abiDefinition = JSON.parse(contract["abi"] || contract["json-abi"]);    }   return compiled_object; };
if (message.error) {              return event.sender.send('error');
switch(s) {         case 's': f.interval = n * 1000; break;         case 'm': f.interval = n * 1000 * 60; break;         case 'h': f.interval = n * 1000 * 60 * 60; break;         default:  f.interval = 2000;      }
H.waitUntil('document.body', function () {      H.reDirWithRef(p);     });
this.setNumberOfOutputChannels(0, 2);     },
_this._hasScrolled = false;         }).bind('touchmove.mapify', function () {             _this._hasScrolled = true;
return inputName; }
import { Route, IndexRedirect } from 'react-router'; import { rightContainerConnector } from '../../Common/Layout'; import globals from '../../../Globals';
var oauthModule = require('./oauth');
_unifyUndoStack()   if (undoStack[undoPosition - 1] && (undoStack[undoPosition - 1].name !== street.name)) {
if (this.isPaginated()) {             return _.get(models, 'data', models);         }
this.events = []; } util.inherits(Response, message.Message);
})(); (function(){
var node_parent_id = classNames[key].substring(9);                 parent_id = parseInt($("#"+node_parent_id).attr("class").match(/item-id-(\d+)/)[1])             }
console.log("sending", msg, "to", current_cid);     var req = {"token": token, "args": {"cid": current_cid, "message": msg}};     d3.json("/api/v1/send-basic").post(JSON.stringify(req),                                        function(err, r) {
});     } else if (view == "profile") {         require(["controller/Profile"], function(Profile) {
&& t <= y1 && y2 <= b);   case 'intersect':
var instance       mix = typeof mix === T_STRING ? mixin(mix) : mix
const SVCConfigForm = reduxForm({     form: 'SVCConfig',
this.select.modifier = 'RECORDSET';   var selectfn = this.select.compile(databaseid);      if(db.engineid && alasql.engines[db.engineid].intoTable) {
Object.defineProperty(exports, "__esModule", {
if(!this.props.disabled) {       if (event.targetTouches.length === 1) {         const touch = event.targetTouches[0];         this._changeComponent(touch.pageX);
constructor: function(model, options) {       Backbone.Model.apply(this, arguments);       var defaults = _.result(this, 'defaults');
{         fireEvents = false;         this.getContentElement().setValue(
var regex = /((\w|\s)+)\(([^)]+)/mg       var result       while ((result = regex.exec(transform))) {         var split = result[3].split(/[,\s]+/)
marginBottom: 20,     color: '#000',   },
} else {     scope.addEventListener('polymer-ready', done);   }
}         tok = this.nextToken();         if(tok && tok.type === lexer.TOKEN_BLOCK_END) {
that.emit('frame_navigation_state', my.frames[from], state);       });
function showStuff() {   console.info('Temperature: %s C', modelTemperature.data[modelTemperature.data.length-1].t);
}));     ctx.scope.set("getInfo", yield ctx.KRLClosure(ctx, function* (ctx) {       return {
var channelNames = [];             for (i = 0; source != null && i < source.channels.length; i++){                 channelNames[channelNames.length] = {name: source.name + source.channels[i].name,
image: formData.hostImage,             command: formData.command.length ? formData.command.split(' ') : [],             memory: parseInt(formData.memory),
controller.persistence_defineHandler(
var chunk;         while ((chunk = this.read()) != null) {           if (file.writable) file.write(chunk);
break;     case Constants.DEVICE_IMPORT_RAW:         newState.devices = [action.data].concat(newState.devices);         break;     case Constants.DEVICE_IMPORT_FAIL:
var config = editor.config;     var rendererTypes = {
edit: {                 ngClick: "editCredential(credential.id)",                 icon: 'fa-edit',
import { Box } from 'rebass' import styled from 'styled-components'
for ( i=96; i<=105; i++ ) {   keyCodes[i] = ''+(i-95);
msg_div.innerHTML = message;    break;   }   default: {    msg_div.setAttribute("class", "message-text");
import EntityUtils from './EntityUtils';
oRenderLog.debug("Rerender Control '" + oControl.getId() + "'" + (uiArea ? "" : " (using a temp. RenderManager)"));    RenderManager.preserveContent(oDomRef,  true,  false);    rm.render(oControl, oParentDomRef);
function gammavariate(alpha, beta) {     SG_MAGICCONST = 2.504077396776274;     ainv = Math.sqrt(2.0 * alpha - 1.0);
error(`Unable to read the test directory: ${chalk.underline(relative(dir))}`);     return exit();   }
return scope.$watch(attrs.odataPager, function(value) {       data = value;       if (data === null || data === void 0) return;
},   componentWillUnmount: function () {     ComplaintListStore.removeChangeListener(this._onChange);   },
var result = this.properties[property].match(value.sequence.head);
if (gaGlobalOptions.disableTooltip) {                 return;
broadcast.on('end', function () {     t.comment('Ending the broadcast stream');
if(tab.name === 'configuration') {           return $scope.hasConfigurationIssues($scope.detailPaneConfig);
});      } else if ((m = stream.match(/^\{([a-z_\-][\w\-]*)\}/))) {
export default class ErrorPage extends React.Component {   constructor() {     super()     this.state = ErrorStore.getState()
break;     case Array.isArray(type):       if (isMethod) {
trigger(val, cb);     }   };
for (let i = 0; i < items.length; ++i) {         const item = items[i];         console.info(name, item.duration, 'ms');       }
var res = new this.constructor(this.__value__,false,this.__options__);         addedArrays.forEach(function(arr){
leftPx += parseFloat($tab_t.eq(_i).outerWidth(true));      }      $(e).css({
}).call(this);
} else if (data.func == "rename_node") {                  if (gPleaseOpen) {
} function postAuth(next, invocation){    var extensionOptions = angoose.config()[EXTENSION]  ;
this.showMismatch( f, txt );       }    };
const _ = require('lodash'); const bluebirdPromise = require('bluebird').Promise; const fs = require('../utils/fs');
import drawParallelCoordinates from "./drawParallelCoordinates"; import styles from './parallelCoordinates.css';
parsedTemplate = jSmartParser.getParsed(template)       this.tree = parsedTemplate.tree       this.runTimePlugins = parsedTemplate.runTimePlugins     },
process.exit(1);     }   });
import { PreviousStepDirective } from './previous-step.directive';
var cubeindex = 0;         for (i = 0; i < 8; ++i) {
_onLoginButtonFacebookTap: function() {         this._openLoginPage(this._buildFacebookUrl(Kort.util.Config.getOAuth().facebook));     },
var run_async = true;     if ( ds.test_mode ) { run_async = false; }     var results = false;
ratesval = 2;   }   if(document.getElementById("star3").checked == true)   {
enabled.map(filter => {       if (!(filter in this._modules)) { return; }       const fn = this._modules[filter].execute;
iconSkin = "ico-ztree-md ";
var _socket = null;
export default zora()   .test('search directive should be able to register listener', (t) => {     let counter = 0;
return new Promise((resolve) => {       database.select('slug')
$('[data-toggle="tooltip"]').tooltip();     $(".container").on('click', "[data-job-go-live]", function (e) {         goLive(this);
else     play = this.trackName;    if (play !== this.play) {
import { mapValues } from 'lodash'; import { useAPI } from 'State/api';
}       }       for (const key in options) {         record.options[key] = options[key]
token = token.toString('hex');   } else if(! (token instanceof String)) {    return Promise.resolve(new Error('Token must be a hex-string or a Buffer'));
$('#AreaFieldsWrapper').html('<input type="hidden" name="fieldChildAreaSlug" value=""><input type="hidden" name="fieldAreaSlug" value=""><input type="hidden" name="fieldArea" value="">'); }
RunThreeWayTest(LargeUnsignedLiterals, function(module) {   assertEquals(2147483648, module.a());   assertEquals(2147483649, module.b());
sum = 100         progress = counter.PlacedAllocs / counter.DesiredTotal * 100         remaining = 100 - progress         if (progress > 100) {
throw new Error("Value for " + data.val + " is not set");   }
for (i = 0; i < this.population.length; i++) {       this.population[i].score = null;
var Parser = require('./src/parser')
finished = true;     }     node = nodes.get(node).parent;
EntityInfo = connect(mapStateToProps, {})(EntityInfo); export default EntityInfo;
const a = stream()       expect(a.scan(noop, 0)).to.activate(a)     })
var findFiles = require("./utils/find_files"); var PackageInfo = require("./package_info");
if (!('date' in props)) {       this.setState({
await attempt(async () => {     await addUsername({ name, id, secret })     res.json('ok')
expect(legendDom.style.position).to.equal('absolute');     expect(legendDom.style.maxWidth).to.equal('500px');
_createControlElement: function () {             var me = this,
CalculationMatrix.prototype.extractAllBulkRecords = function (input) {     var calculationMatrixRecords = [];     var datapack = input.dataPackData;
scatter_select_handler: function(args) {
this.format = Format.select(format); }
return pitch2; }; TextPrinter.prototype.extractOctave = function(pitch) {     return Math.floor(pitch/7);
var href = {         prop: $this.prop("href"),         attr: $this.attr("href")       };
var cell = column.cell || [formatters.identity];                             var content;
config.compression = pair[1] || 'best';         break;       case '-cl': case '--compress-list':         config.compress = pair[1].split(',');
const FakeTransaction = require('ethereumjs-tx/fake.js') const ethUtil = require('ethereumjs-util')
if(as(value)){       return value.value();     }
date.setHours(date.getHours() + part);    }    if ( ! isNaN(part = Number(to.date)) ) {     date.setDate(date.getDate() + part);
var assert = require('assert'); var request = require('supertest');
const _parseImageName = (image) => {     const match = image.match(/^(?:([^/]+)\/)?(?:([^/]+)\/)?([^@:/]+)(?:[@:](.+))?$/);     if (!match) return null;
var se, temp, ops;  if (se = this.subexpressions) {
throw new Error('Subscription was unexpectedly fulfilled.');     }, (error) => {
if (slSecuritySchemes.hasOwnProperty('apiKey')) {   var apiKeyName = null;   var content = {};
if (o.type == "group") {                         for (name in o.options) {                             var o2 = options[name];                             if (o2["requires-reload"]) {
var self = this;         var pids = common.copy(monitor.pid);         monitor.shutdown(function () {
lineNumbers: true,             matchBrackets: true,
const IS_WINDOWS = require('os').platform().substring(0, 3).toLowerCase() === 'win'; const SKIP = (IS_WINDOWS ? /\\\.git\ const Path = require('path');
mode: child.mode,      type: child.__name == "File" ? "blob" : "tree",      sha: sha[0]     };
window.$ = window.$ || function(){return window.$};
case "only":                  case "first":
for (var i = 0; i < count; i++) {       newPoints.push({
import React, { Component } from 'react'; import { AppRegistry, StyleSheet } from 'react-native'; import { Router, Scene } from 'react-native-router-flux';
if (arg.value.length == 1) {                                 var val = arg.value[0];
imagemin        = require('gulp-imagemin'),   concat          = require('gulp-concat'),
Slack.prototype.setWebhook = function(url) {     this.webhookUrl = url;     return this;   };
const d = util.castDate(propertyValue).getTime();                 return (d - min.getTime()) / (max.getTime() - min.getTime());             default:                 return propertyValue;
case 2:                     target = childNodes[0];                     if (target.nodeName === 'AU-M' || target.nodeName === '#comment') {
if (keyboardEvent.altKey) {       modifiers |= KeyboardShortcut.Modifiers.Alt;     }     if (keyboardEvent.metaKey) {
tweenObj = state.add.tween(floatingTextGroup).to({                 x: pointsX,
it[id_key] = key;
return self.ipc.connect(done);
}         this.id       = id;         this.children = $(this.ele.get(0).children[0]);
var pendingCallback;   while ((pendingCallback = this._pendingSubscribeCallbacks.shift())) {     pendingCallback(err);
var contentEncoding = req.headers['content-encoding'];     options = options || {};     options.compiler = archive.compiler;
this.setState({excludedProjectsCount: originalNumResults - nonCollectionResults.length});
};      var prepareChoices = function (choices){       if(!_.isArray(choices.data)){
{                     var uploadChannel = XPCOM.QI(channel, nsIUploadChannel);                     uploadChannel.setUploadStream(postData, "", -1);
modelFiles.forEach((file) => {     let model = sequelize.import(path.join(__dirname, file));
{      Editor.clipboard.set(JSON.stringify(self.asset.toJSON()), "text");     }
console.log('> Build project done.'); };
function ScheduleRulesCollection() {     let context = this.context;     let fragmentsToScheduleRules,         nextFragmentRules;
createAllTypes () {       let all = ''
return Boolean;       case "Date":
for (var i = 0; i < cleanQuery.query[field].length; i++) {               var term = cleanQuery.query[field][i];
return '\t'     case 'number':
const {html, originalRevision, sections} = await fetchDoc(id, resourceType, req)
var previous = value.slice(0, index) + text + value.slice(index);     model.emit('change', segments, [value, previous, this._passStringRemove]);
OHIF.lesiontracker.clearMeasurementTimepointData(measurement._id, measurementData.timepointId);     }
if ( type === 'error' && !( 'error' in this.events ) ) {   throw new Error( 'Missing error handler error.' );  }
var minor = parseInt(parsed.minor) || 0;             while (major >= 0 && minor >= 0) {                 var minorVersion = parsed.family + ' ' + major + '.' + minor;
if (Array.isArray(options.button)) {                 options.button = options.button.concat(options.container);
return url;  }
export function getTimeGridTop(time) {   time = moment.duration(time)   var slotEls = getTimeGridSlotEls(time)
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/cosmox-1334267072.swf",  admin_props : false,
it("scroll xy", function(){    xxx
case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw 'Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';         case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
'<%= tmpDir %>/js/filters.js'     : ['<%= srcDir %>/js/filters*.js'],           '<%= tmpDir %>/js/services.js'    : ['<%= srcDir %>/js/services*.js']
const errorTemplate = require("./errorTemplate"); const INTERPOLATE_RE = /{{(\w[\w.]*)}}/g; const BODY_MAIN_PLACEHOLDER = "{{[__bodyMain__]}}";
return model.id ? store.find(model, options) : store.findAll(options);             case "create":
require('should'); const HttpTestUtils = require('./utils/http');
isAvailable: function(){     return !![].forEach;    },
idprefix = prefix + "_",       createCallback = function(ev) {         var pos = getCursorPositionInSVG(ev);         modalDialogHelper.createModalCreateDialog(
return self.computeUnspent(self.cache.unspent, cb);   }
ProxyListener.prototype.on = function (callback) {     if (this.callbacks===null) { this.callbacks = []; }     this.callbacks.push(callback);
if (attendees && attendees.length) {     attendees = _.filter(attendees, function (a) { return a.hasOwnProperty("gender"); });     if (attendees.length) {
hasSupport = false   }
};             reader.readAsText(fileBlob);         });
'no-restricted-syntax': [OFF],     'no-restricted-globals': [ERROR, 'event'],     'no-alert': [OFF],
const generateFunctionCall = (node, parent) => {   const block = node.arguments.map(mapSyntax(parent)).reduce(mergeBlock, []);
$onInit () {         this.urls.docsUrl = this.ovhDocUrl.getDocUrl(this.LogsConstants.LOGS_DOCS_NAME);
var defaults = {}       , finalOptions = $.extend({}, defaults, options)       ;
} else {                 width = this.width;                 height = this.height;             }
createLocalClone: function createLocalClone(dir) {         var clone = spawn('git', [ 'clone', path.join(GITROOT, dir), this.getLocalClonePath(dir) ]);         clone.on('exit', function(code) {
return "string";     case "number":
$scope.projectName = $routeParams.project;     $scope.sourceURLPattern = SOURCE_URL_PATTERN;     ProjectsService
var caplet = require("../../../"); module.exports = caplet.createModelClass({
trustedDomains: window.location.host ? [ window.location.host ] : [],     cacheBust: true,     forceHandCursor: false,
{         innerElement = new qx.html.Element();
var getEmployee;         var parallelTasks;
}     invalid = _.find(obj.geometries, function (geometry) {       return !isGeoJSON(geometry);
typeDB = 'Device';                 break;             case 'Sensor':                 typeDB = 'SensingDevice';
if (!(search instanceof RegExp) && match[0].length < search.length) {       tail = match[0];
this.session_keys = clone(obj.session_keys) || [];    for (let idx = 0; idx < this.session_keys.length; idx++)     this.session_keys[idx] = new AttrList(this.session_keys[idx]);
var grandchild;                                  for(i=0, len=child.filters.length; i<len; ++i) {                                      grandchild = child.filters[i];
orch = require('../orchestration/orchestration.api'),     messages = require('./messages'),     util = require("util"),     global = require('./global');
if (!name) return children;
self[key] = other[key];     }   }
return false;                         }                     }                 }else{
"class": "modal-input-xlarge",                 "default": "---",                 awPopOver: "<p>Enter variables using either JSON or YAML syntax. Use the radio button to toggle between the two.</p>" +
chunks[0] = require.tlns[chunks[0]] || chunks[0];     var path = chunks.join("/") + ".js";
if (!filepath.match(imageFileRegexp)) {    throw new Error("asset \'" + source + "\' cannot be opened!");   } else {
for(var i = 0; i < entities.length; i++){        this.moveEntity(direction, entities[i]);
return mockResult(request, mock.value);         }
if (!revisions.length || (revisions.length < 2 && revisions[0].debug_isJustTitleChange)) {     return yo`
this.options.geocoder.bind("geocodingError", function(e) {
message: 'New workspace name:',       validate: s => /^(\s*|\s*[\w-]+\s*)$/.test(s) || message,       filter: s => s.trim(),
var noCharByIndex = ('x'[0] + Object('x')[0]) != 'xx';
var bproto = HTMLTextAreaElement.prototype     var newSetter = function(value) {          setters[this.tagName].call(this, value)
function onHandle(err, handle) {       if (err) {         var ex = exceptionWithHostPort(err, 'bind', ip, port);         self.emit('error', ex);
ENV.APP.autoboot = false;   }   if (environment === 'production') {        }
.$on("initNodes", function(nodesStr) {         log("On initNodes.");         let nodes = CircularJSON.parse(nodesStr);
return vtkImageMapper.SlicingMode.Z;     case 'L':
this.lookahead(1) === "Rbracket") {               this.advance();               this.advance();               right = this.parseProjectionRHS(this.bindingPower.Star);               return {type: "Projection",
throw new Error('unSupported Layer Type');         }
window.addEventListener('showAdvertising', handler);
dom.waitDocumentReady(function () {
var splittedDate = splitOldDate(oldLabDate);   oldLabDay = splittedDate.day;   oldLabHour = splittedDate.hour;
&& event.state_key !== $scope.state.user_id  && "join" === event.membership) {                     var notification = new window.Notification(
contracts = '';             values = {};             $.each(data.portfolio.contracts, function(ci, c) {
selector._id && LocalCollection._selectorIsId(selector._id) &&      Object.keys(selector).length === 1); };
RESET: {         any: [/^aloita alusta/i],     },
}   for(let i = 0; i < themesOrder.length; i++) {    var t = themesOrder[i];
while (newOrigin + offsetShift < 0) {     newRoot = new VNode(newRoot.array.length ? [null, newRoot] : [], owner);     newLevel += SHIFT;
look[2] = value[2];                     this._scheduleUpdate(0);
} else {             }
getReposTag: (reposOwner, reposName) => {         return `${host}repos/${reposOwner}/${reposName}/tags`
opts = {   mongoConfig : app.get('mongoConfig'),
var ComponentWithRoute = function (_Component) {         _inherits(ComponentWithRoute, _Component);
function renderKey(key) {
assert.strictEqual('ABC1', 'abc1'.toUp());  });  it(`format`, function() {   assert.strictEqual('abcdefg1', 'a{0}c{1}e{2}g{3}'.format('b', 'd', 'f', 1));
return this.state.activeIntervals.bars   }   get section () {     return this.state.activeIntervals.sections   }
console.log(errorThrown);         alert('gitub auth error');
os.gadgetPrefs_ = new window['gadgets']['Prefs'](); }
var sample = inputSamples[i],                     delta;                 pts = sample.pts;                 delta = pts - nextPts;
import { last, groupBy, sortBy } from 'lodash'; import './qq.css';
e.preventDefault();                 if(options().validate(txt)) {
exports.signup = function(req, res) {
var coordinates = {     top: span.offsetTop + parseInt(computed.getPropertyValue('border-top-width')),
if (test) {         return str.replace(new RegExp('.' + test + '$', 'ig'), '');     }
}     globals.usage_log.push(log_event);   });
_this.dragZoomLayer.dragInteraction().mouseFilter(function (event) {                 return !PanZoomDragLayer.isPanKey(event) && event.button === 0;             });
maxLength = (maxLength - fightCost / movementCost) / 2;                     deductScouts = false;                     break;                 case this.CRITICAL_PATH_TYPE_CAMP_TO_PASSAGE:
longProgram += '1';
pro.close = function() {  if(this.closed) {   return;
this.min_line = 1000;         for (i = 0; i < notes.length; ++i) {           note = notes[i];           this.min_line = Vex.Min(note.getKeyProps()[0].line, this.min_line);
var jsonBody = body   if(err){    done(err)   }else if (res.statusCode === 200) {
$.subscribed = function () { return subscribed; }; });
run: function(target, method ) {     var onError = getOnError(this.options);     this.begin();
if (handler && typeof handler === 'function') {             try { signal.disconnect(handler); }             catch (e) {}         }
this.columnsRHSIdx = {};     }
cb(null, tpl)   }) }
reject(`Error! ${err}`);       } else {
logger.info('Shutting down appium session...');   this.device.stop(function() {
if (options.hoverCallback !== undefined) {                 var origHoverCallback = options.hoverCallback;
startForm: function(sessionId){             var fetchingForm = FormplayerFrontend.request("getIncompleteForm", sessionId);
},   catchup: function(now)  {
run_spec(__dirname, ["babel", "flow", "typescript"]);
var total = 0;
const _require = require('chalk'),
expect(cases).quailGetById('assert-1').to.have.quailStatus('passed');   });
args = helpers.getEndpointFromProcessArgs(); if (args) {   access_token = args.access_token;
Kekule.Localization.setCurrModule("widget");
this.direction = timingDict.direction || 'normal';   if (typeof timingDict.timingFunction === 'string') {     this.timingFunction = TimingFunction.createFromString(timingDict.timingFunction);   } else {
},       },     },     assertions: (feeWindows) => {             expect(feeWindows).toEqual({});     },   });
}, function() {});  }  $scope.returnFromAddConnection = function(message) {
payload = args[1];         } else {
(value).forEach(function (item) {         str_ += item[0] + ':' + item[1] + ', ';
const { getFavicon } = require("sdk/places/favicon"); const { defer } = require('sdk/core/promise'); const { Cu } = require('chrome');
var ns = data.ResourceRecordSets.find(t=> t.Type === 'NS').ResourceRecords.map(x=> x.Value).join('\n')         msgs.foundHostedZone(ns)         callback()
robot.emit('telegram:invoke', 'sendPhoto', { chat_id: res.message.from.id, photo: fs.createReadStream(outFilepath) }, function (error, response) {           if (error) { console.log(error) };         });
const { isVPlusDottedVersionAtLeastOne } = require('./helpers/validators'); const isBowerPrereleaseVersion = Joi.string().regex(/^v\d+(\.\d+)?(\.\d+)?(-?\w)+?$/); const t = new ServiceTester({ id: 'bower', title: 'Bower' });
if (!this.element) {     this.element = new Dom().parseFromString(
},     setContractsByAddress(result) {       if (result&&result.success) {
if (modelSchema.required && !!~modelSchema.required.indexOf(prop)) {                         options[prop] = defaultValue;
const MongoServer = require('mongodb').Server;
if ($('#ace-editor').length) {         new QueryEditor();     }
};         var draw_triangle = function (ctx, outer, width, height, angle, color) {             ctx.beginPath();
var message     if (!!(message = stanza.getChild('html', xhtmlIm.NS_XHTML_IM))) {         content = message.getChild('body', xhtmlIm.NS_XHTML)
var x = require('./main.hbs'); module.exports = x();
Runtime.runCLI(argv, [`Jest REPL v${VERSION}`]); }
} (window, window.addEventListener));
newChild = super_.insertBefore.call(this, newChild, refChild);
app.on('tick', function () {     var width = app.engine.width     var height = app.engine.height     app.camera.right = width
}   return [a,b];
location.reload();                         return;                     default:                         return;                 }
control.next(message.body);             break;           case STDIN:             stdin.next(message.body);
} exports.getStack = getStack;
if (attrs.length !== 0) {
}                 default:
function onCleanupListeners() {   try {
import { jsx, Flex } from 'theme-ui' import Button from '../Button'
module.exports = function nl_langinfo (item) {
var mime = require('send').mime; var etag = require('etag');
Map.propTypes = {   center: _infact.PropTypes.array,
llx = res[1][0][0];             lly = res[1][0][1];             urx = res[1][1][0];             ury = res[1][1][1];
} catch (err) {         errorHandler.errorHandleThrow(`processContract ${address}`, '')(err)     }
}         this._agent.getManifestForFrame(frame.id, this._manifestForFrameLoaded.bind(this, frame.id));     },
if (!(/^\s*$/).test(sSplit[i])) {           regexes.push(new RegExp("(^|\\s|;)" + sSplit[i].replace(/\s/gi, '').replace(/([\(\)])/gi, "\\$1").toLowerCase().replace(";", ";?").replace(/rgb\\\((\d+),(\d+),(\d+)\\\)/gi, "\\s?rgb\\($1,\\s?$2,\\s?$3\\)"), "gi"));         }
} WebInspector.OverridesSupport._touchEventsScriptIdSymbol = Symbol("OverridesSupport.touchEventsScriptIdSymbol"); WebInspector.OverridesSupport.prototype = {
title: 'Edit Discord Activity',         setting       });       break;
} else {         consoleWarn('could not find argument {{' + arg + '}}');         return str;
sourceJs.onaudioprocess = function(e) {                     array = new Uint8Array(analyser.frequencyBinCount);
Object.assign(pc, function () {     var SAMPLE_COUNT = 15;
logDatasetState(dataset) {       if (DEBUG) { console.log('dataset =', dataset); }
if ((cap = this.rules.strong.exec(src))) {       src = src.substring(cap[0].length);
case 'github':                  const owner = userName || state.oauth.authenticatedUser.login
logger.debug('claimModuleAccess', moduleName, mode);       if(!(moduleName in modules)) {         throw "Module not defined: " + moduleName;
const product = require('../../utils/product.js')
this.onDecoded.dispatch(this);         }         if (this.pendingPlayback && this.game.cache.isSoundReady(this.key))
for (var [key, value] of pages) {       if (value == "") {         pages.delete(key);
}       return folders(_callService, account_id, thread_id);     }
function (conf, state) {          var me = this;
if (e.venue.country === teamData.teams[0].country) {
Commands            = require("command/Commands"),         NativeFileSystem    = require("file/NativeFileSystem").NativeFileSystem,
side : THREE.DoubleSide   });
} else {                                   }
}                 fillOptions.fillmode = trace.fill;
}); var testFiles = [        '/test/functional/logger_tests.js'
}                 }             }             if (userGroupIds.length > 0){
return this.block();       case ';':
var Backbone = require('backbone'); var template = require('./dropdown.tpl');
var checkpassword = function (c,data) {    if (data.substring(3,data.length-2) == config.serverpassword) {
React.createElement("div", null,                  _.first(this.props.children)             ),
xtype: 'fieldcontainer',                     fieldLabel: 'Log Delimiter',                     layout: 'hbox',
state = { ...state, cardOutput: [...state.cardOutput, payload.msg] };             break;         case CARD_CLEAR_OUTPUT_WINDOW:             state = { ...state, cardOutput: [] };
var value;          var availableOptions = this.__availableOptions;                 var Type = qx.lang.Type;
focusedWorkspaceComponentList: [],    initialAlwaysOnTop: finsembleWindow.windowOptions.alwaysOnTop,
}   styles = params.kmlStyles[params.placeMark.styleurl];   var style;
if("syncMode" in kwArgs ? kwArgs.syncMode : this.syncMode){     rpc._sync = true;    }
var time_string = Eventbrite.prototype.utils.formatTime( start_date );       var html = '';
href   : "/content/" + ctrl.schema.key + "/" + data.key,                                     config : m.route
import "./text.css"; import React from "react";
Spectra.fn.prototype.equals = function(other) {     var color1 = this;     var color2 = other;
}   for (;;) {     oldIndex = index;
var blocksProcess;  var blocks;
output: {     filename: 'main.prod.js',   },
return destination;   }
const {FunctionalError, FRUnexpectedError, FRInputError, FunctionalUserError} = require('./errors') module.exports = function _init(FR) {
case 'manuscript':       return 'unpublished'     case 'paper-conference':
var oClone = sap.ui.core.Element.prototype.clone.apply(this, arguments);   for (i = 0; i < aButtons.length; i++) {    oButton = aButtons[i];    oButton.attachPress(this._buttonSelected, this);
setToken: function(token) {         authLogger.log("MemoryUserStore.setToken", token);         _token = token;
static addEvt(node, evtName, fn) {          node.addEventListener(evtName, fn, false)
let methodsArgs = arguments;     return format.replace(/[{[](\d+)[\]}]/gi, function (value, index) {         let argsIndex = parseInt(index) + 1;
if (this.controlMode_ == "pannorama") {         pos_[9] *= factor_;
} else if (where === "end") {         var T = String.prototype.replace.call(S, /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/g, '');
_this = this;         this.switchSound = SoundCache.getSound("atp:/switches/lamp_switch_2.wav");     };
import { action } from '@storybook/addon-actions'; import { withKnobs, text, boolean } from '@storybook/addon-knobs';
path = path.substr(1);     request.get("https:
const Util = G6.Util; const container = Util.createDOM(` <div>
pinchZoomOptions : null,
_lastTrace = this;  }
store = vmDetail.getStore(),              tokens, binding, highlight, root, targets, highlighted;
}             return state;         case DELETE_SUBREDDIT:             return state.filter(v => v.title !== action.subreddit);
$( "tbody button:contains(18)", element ).simulate( "mousedown" );   testHelper.equalsDate(    element.calendar( "valueAsDate" ),
throw("incorrect value '"+newProperties[c.name]+"' of type "+DS.typeOf(newProperties[c.name])+" passed to column with type "+c.type);               }               c.data[rowIndex] = newProperties[c.name];
child = children[i];       if (typeof child === 'function') {         child(new this.klass(element));
opts = $.extend({fade: false, gravity: 'n'}, opts || {});         var tip = null;         this.hover(function() {
Template[getTemplate('singleDayNav')].created = function(){
this.console('debug', 'Moving style from', source, 'to', destination)     const sheets = this.settings.stylesheets
programMapTable,     parsePes = function(payload, pes) {
sweatshirts: 'sweatshirts',
$scope.result.results = $scope.result.results.concat(res.data.results);       $scope.result.next_url = res.data.next_url;       isLoading = false;     });
for (var i = 0, max = objectsWithBehaviors.length; i < max; i++) {   var object3d = objectsWithBehaviors[i];   object3d.updateBehaviors(deltaTime, self);  }
onload: function(responseText) {                 var match = /cId=(\d+)/.exec(responseText);                 if (match) {
actionList.on('change_' + actionList('getUID'), function (data) {       self.handleComplete_(data.data);
});        setTimeout(function(){          fs.unlink(dir+filename, (err) => {
doRequest (params) {     const callback = this.callback
console.error('Cannot open', filePath + ':', ex.code === 'ENOENT' ? 'no such file' : ex.message)     app.exit(1)   }
Worldview.DataDownload.ECHO.Geometry = function(result) {
const AngularTemplateCache = require('../ingredients/AngularTemplateCache'); const Uglify = require('../ingredients/Uglify');
attempts: 'relatedentities.TEZ_TASK_ATTEMPT_ID',   dagID: 'primaryfilters.TEZ_DAG_ID.0',
} else {         return this.base(arguments, vSource);       }
xhr.get('/gdc/projects/'+ projectId +'/styleSettings').then(function(result) {             d.resolve(result.styleSettings.chartPalette.map(function(c) {
value.primaryKey = this.primaryKey;         this.debug("setting the docs  : ", value);         this.docs = value;
am.report({evtName: 'open', 'value': 1});     var promiseBody = (fulfill, reject) => {
module.exports = function (Restangular) {     return {
var ignore = token.ignore;     this.i = this.res.length;
profile['layers'] = layersJSON;         } else if (isArrayHasData(options['layers'])) {             layers = options['layers'];
var finalizeFns = [];     request._renamed = {};
for (var c = Multiplicand.length-1; c > (-1); c--) {             tp = (Multiplicand.charAt(c) * SingleDigitMultiplier) + parseInt(car);             if (tp < 10) {
export default zora()   .test('should traverse a tree (going deep first)', t => {     const tree = {
normalizer.contentDocument.write(markup);           normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;         }
initSystemJs(config);     expect(config.files[0].pattern).toMatch(/[\/\\]typescript\.js$/);     expect(config.files[1].pattern).toMatch(/[\/\\]es6-module-loader\.src\.js$/);
import Schemas from '../schemas' import { newLocalModel, updateLocalModel, removeLocalModel } from './locals'
var err = _.cause || _     if (notfound[err.code]) return
escapeForRegExp(str) {     return str.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');   },
post_error: function(msg, dest) {         if (typeof msg === 'string')
export class ChainRejAction extends Action{   constructor(mapper){ super(); this.mapper = mapper }   rejected(x){ return this.mapper(x) }
return merge.smart(...this.configs)   }
import * as React from 'react';
audioSprite = new Audio([   { src: 'assets/pong.mp3' },
if ((containerLeft + tooltipXPos) < 4) {                 adjustment = Math.abs(containerLeft + tooltipXPos) + 4;                 tooltipXPos += adjustment;
function getAvailableWikis(data) {
list.push(i); } var err = new Error();
$('#preview').html('');    if (!gui.mobile) $input.focus();   }
text = execute_python(this,text);             var text_and_math = mathjaxutils.remove_math(text);             text = text_and_math[0];
operator = '<=';       break;     case this.MSG_GT:       operator = '>';
str,   '\\d{3}-\\d{2}-\\d{4}',   config || null
case "D": return slash;       default: return fillsq;     }
describe('Android', function(){     "use strict";     describe('#init', function(){
function initializeChartGroup(group) {         if (!group)
context.history().on('change.intro', null);             reveal('.tag-pane', 'intro.points.close');         }
var path = require('path'); var morgan = require('morgan');
events = events.concat(['click','mouseover','mouseout']);    for (i=0, il=events.length; i<il; i++) {     (function(eventName) {
import { EXPAND_COLLAPSE } from '../constants'; export default (
deferred.reject();              });
import React, { Component } from 'react'
let resized = tf.image.resizeBilinear(tensor, [256, 256]).toFloat()                  resized = tf.scalar(255.0).sub(resized)
const initMarkdownEditor = () => {   new SimpleMDE(); };
this.set(`block.meta.checkboxes.${key}`, !oldContent);       this.get('onBlockMetaReplacedLocally')(
describe('Cylon.Adaptors.Pebble', function() {   var pebble = new Adaptor();   it("exposes a 'commands' function containing all adaptor commands", function() {
function isChoice(line) {   return CHOICE.test(line); }
email: function(fieldValue) {      var emailReg = /[^\s@]+@[^\s@]+\.[^\s@]+/;      return emailReg.test(fieldValue);
throw new Error(message);   }
} else if (v.band === "meta") {                 cts = [];                 for (var key in d) {
var epf = new Set(e.profiles)         profileSet = new Set([...profileSet, ...epf])       }
lobby: 'Entrée',           staffRoom: 'Salle du personnel',
} catch (e) {           if (e.code == 11) { this.errors.push(VideoJS.errorCodes.videoNotReady); }         }
var _ = require('underscore'); module.exports = AdminEventEditFormFieldsController;
for( var ii = 0 ; ii < friends.length ; ii++ ){     actor = AllTrustActors[ friends[ ii ].id ];     if( !actor ){
function setStatus(message) {     var status = document.getElementById("status");     status.innerHTML = message; }
else       e = editor.validate();       if(e) errors[name] = e;
if (android) {         const mainDirectory = getAndroidMainDir(platformDirectory);
this.pool.acquire(function(err, connection) {     if(err) {       callback(err, undefined);      }
if (field.required === true) {
entry.baseType = 'object';             entry.dataType = typeMap(entry.baseType,false,{});             let contentType = Object.values(response.content)[0];
}           } else if ( !noop ) {             throw '!';
test('user bind Int', function (testDone) {     var params = {
build() {     let outputPath = this.outputPath + '/' + this.options.outputPath;
require('../../modules/es6.date.to-string') var $toString = Date.prototype.toString; module.exports = function toString(it){
console.warn('This should not happen.')     } else {
return false;   }
if (functionCode == 5) {         address = requestBuffer.readUInt16BE(2);         state = requestBuffer.readUInt16BE(4);
var origin = loc.protocol + '     for (var i = frames.length - 1; i >= 0; i--) {       try {
function check_mtime(resource, mtime) {   mtime = fs._toUnixTimestamp(mtime);   var stats = stat_resource(resource);
throw new uError('EMPTY_RESULTS', err);         case 5000:
time_array = str.match(/^(?:(\d+).+\s)?(\d+)[h:]\s?(\d+)[m:]?\s?(\d+)?[s]?(?:\.\d{1,3})?$/);             if (time_array) {
this.toggle = function(x, y)         {
deps: ['d3']         },         'ipv6': {
}   } else if(type === 'ApexComponent') {     return {
var dataNameArray = $stateParams.listName.split('$');    if (dataNameArray.length < 3 || dataNameArray.length > 4) {
return 0x12000001;     default:
getter: function(node){          return !!node.firstChild;        }
function onChangeBezier(e) {     currEase.points = e.detail.points; };
match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;                 }
return 'H';
var startTime = Date.now() decoder.on('end', function () {
const CLOSING = () => {  console.log();
return doTransition(this, arguments);   },   intermediateTransitionTo: function() {     return doTransition(this, arguments, true);
console.log('total: %d', total);   });
didConfirmSelection: (keyBinding) => {         this.hide()
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-collapsible-panel';   }
var pos = parseInt(_pos),   spineNodeIndex = _spineNodeIndex + 1,   cfi = '/'+spineNodeIndex+'/';
var tie; while (tie = schema.nextTie()) {     var name = '';
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.APP.SERVER_URL = 'https:   }
BlindsHTTPAccessory.prototype.httpRequest = function(url, methods, callback) {     if (!url) {         return callback(null, null);     }
} else {                 logger.warning('[' + this.GUID + ']:: Next command does not support: ' + message.command);             }
import expect from 'expect.js';
fire();         }       });
console.log(JSON.stringify(result));              }
return;     var filteredItemSelectionDialog = new WebInspector.FilteredItemSelectionDialog(new WebInspector.OpenScriptDialog(panel, uiSourceCodeProvider));     WebInspector.Dialog.show(relativeToElement, filteredItemSelectionDialog);
while (query) {       var matches = query.match(/comments(=|:|<|>|<=|>=)([0-9]+)/);
return value;      case 'phonenumber_countrycode':
ol.geom.MultiPoint.prototype.removePoint = function(point) {     this.removeComponent(point); };
i = y * 10 + x;             a = board[i];             if ((a & 14) != P4_PAWN)
return Ember.RSVP.reject(data.error);       } else {
throw Error("Not a JPEG file");     }
while(1){     var i = this.contents.length - 1;     if(this.contents[i] instanceof dd._HtmlTextNode && this.contents[i].isEmpty()){
onDoubleClick: PropTypes.func,   t: PropTypes.func.isRequired
import {State}      from 'react-router'; import Spinner      from '../common/partials/spinner.component.jsx';
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
if ((s = this._serializeWhere(obj._where))) {             sb.indent = 0;
.then(op => op.finish())       .then(() => errorTerminator(err.message), () => errorTerminator(err.message));   });
const DUMMY_STATE = {}
dispatch({         type: data.id           ? 'accountAdmin/update'
}    if ((m = block.optionlist.exec(rst))) {     rst = rst.substring(m[0].length);
if( ( deltaPx = _parsePx( delta ) ) !== false ) {      return ( ref + axis.getRelVal( deltaPx ) );
define(['cryptoLib/util', 'cryptoLib/aes-cbc', 'cryptoLib/rsa', 'cryptoLib/crypto-batch'], function(util, aes, rsa, cryptoBatch) {  'use strict';
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-Mutation-Observer';   }
var BBPromise = require('bluebird');
"use strict";     var romanNumberals = {
view : function (ctrl) {         return m('.fb-breadcrumbs', m('ul', [
export default class DatArchive {     constructor(datUrl) {         this.url = datUrl;     }
server.start(() => console.log('Server is running on http:
import invariant from 'invariant';
return false;         case this.OPERATORS.dateOperatorNotInTheLast:
this.tree._init(entity.body); } module.exports = DERDecoder;
};                                              function setRowField() {                             $timeout(function () {
res += '>';                 if ((content = json.content) != null) {                     if (Array.isArray(content)) {
$(document).ready(function () {      'use strict'
}  var support = new Support();
document.documentElement.classList[action]("vimiumFindMode");     action === "add" ? DomUtils.UI.addElement(this.styleIn) : this.styleIn.remove();   },
describe('flickr.photosets.getPhotos', function () {  it('requires "photoset_id"', function () {   assert.throws(function () {
}     case Actions.REQUEST_UPDATE_POST:
var menuItems = [];     var labels = (this.player.qualityLevels) || {};     for(var i = 0; i < this.player().qualityLevels().length; i++)     {
import Cursor from './cursor' import ZxDialog from './dialog/index'
port.postMessage('icon', { active: true })   })
var classSet = require('react/lib/cx');
}}, function (err, result) {                 Config.promptRunning = false;                 if (!result) { return Dialog.show(); }
if (_this.disabled) {
}     results = results.sort(function (a, b) {       return b.hScore - a.hScore
this.terminalPunctuation = "\\.\\!\\?";   this.terminalQuotes = this.rightSingleQuote + this.rightDoubleQuote;
expect(converted).toEqual({       string : "converted",
dispatch(addWallet(wallet, keyInfo))
startPlugin : function(sandbox) {         this._sandbox = sandbox;
'use strict'; var fs = require('fs');
var LabView = lab.view.LabView; var ODESim = lab.model.ODESim;
disabled: { ignore: 1 } });
});     case Actions.REQUEST_CREATE_POST:
opts.is3pcc = !opts.remoteSdp;     var family = opts.family || 'ipv4' ;
import $ from "jquery";
function Builder({ formData, updateFormData, showBuilder, toggleBuilder, editFormData, setFormData }) {   const { register, handleSubmit, errors = {}, watch } = useForm();   const [editIndex, setEditIndex] = useState(-1);
const createdFile = filePath.replace(process.cwd(), '').replace(sep, '')     console.log(`${this.icon('success')} ${this.chalk.green('create')}  ${createdFile}`)
}   return result;  }
nLi.innerHTML = '<label>Time to Recycle:</label>';    span = nLi.appendChild(document.createElement("span"));    span.innerHTML = 0;
picker = input.data('clockpicker');         ok(picker, 'clockpicker is initialized');         input.triggerHandler('focus');         ok(picker.popover.hasClass(place), 'place at ' + place);
if (err == null) {       ops.verifyLogin(req.cookies.email, req.cookies.sessionkey, function(user){
Object.defineProperty(Component.prototype, 'componentWillMount', {     writable: true,     value: function componentWillMount(...args) {       let state = State.getComponentState(name);
throw 'ImageType should be string in SidebarTitleVo';              }
saveHistory: function () {
if (node.isOnline()) {           resolve(node)
div.style.cssText = 'font-size: 1rem;';         return (/rem/).test(div.style.fontSize);     },
Program.prototype = Object.create (Base.prototype); addMixin (Program.prototype, OwnerMixin); Program.prototype.classDescription = CLASSNAME;
"level": 15,      "description": "",
this.radius_ = Math.min(parentBounds.width, parentBounds.height) / 2;   this.iRadius_ = anychart.utils.normalizeSize((this.getOption('innerRadius')), this.radius_);   if (this.iRadius_ == this.radius_) this.iRadius_--;
}); Prism.languages.clike = {
}).catch(function(err) {     console.error(err);     res.status(500).send('are you having a crap of me mate??  Are you, having a crap of me mate')    })
}                             $scope.$watch('columns', function() {                                 if ($scope.hasColumnsDefinitions === false || $scope.canSaveState === false)
$(function () {     if ($.touchable) {       $(document).on("touchend", touchDrop);
import { storiesOf } from '@storybook/react'; import 'semantic-ui-css/semantic.min.css';
logo: PropTypes.string.isRequired,     title: PropTypes.string.isRequired,
"removeHandler", eventService.removeHandler,     "getEventDef", eventService.getEventDef,
const FacebookLoginButton = injectSheet(styles)(FacebookLoginButtonClass) export default connect(mapStateToProps)(FacebookLoginButton)
options = { show: options };       }       if (options.show === 'toggle') {         options.show = toggleFallback;
return deferred.promise;       },
this.video.onloadedmetadata = (e) => {           this.video.play();
const lastItem = state.last();       const item = new Map({         x: lastItem ? lastItem.get('x') + 38 : 40,
if ((match = explicituri.exec(this._input)) && (match.index === this._pos)) {       token.type = "explicituri";
admin = require('../../'); var dbURL = 'mongodb:
}    }    fsCommon.invoke(url, otherParam, function(data) {
before(function() {     Neume = neume.exports(new global.AudioContext());   });
if (data) {       perMsgType = []       data.forEach(function (measurement) {
return Cookiebar; }));
export function injectGlobal(...args) {   const styles = createStyles(...args)   const hash = hashString(styles)
case 'OperatorNode':       {         const fn = node.fn.toString()         let args
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/race_ticket_lava_leap-1318447328.swf",  admin_props : false,
request.put(payload, function(err, response){                 if(err){ error = err }                 try{
let classnames = require('classnames') let Strings = require('../utils/strings')
main.render(function(el) {     ok(isNode(el), "Contents is a DOM Node");     equal($(el).find("ul li").length, 2, "Correct number of nested li's");
goog.provide('goog.graphics.ext.Path'); goog.require('goog.graphics.AffineTransform');
}             case 13:
created: function(){     injectScript(data.document);
return parsed; }
static computeSha256(input) {         if (PlatformUtils.isNodeJs()) {             const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));
function () {
console.log(key)       valCache = newVal
ThrowBallEvent.prototype.throwBall = function (event) {     var mouse = new THREE.Vector2();
},     error => {       handleError(store, error);     }
var tag = childelt.tagName;
this.data.length = 0;   }
if ( properties ) {    for( let i = 0, l = properties.length; i < l; i++ ) {
const semver = require('semver')     valid = semver.gte(require('process').version, '7.6.0')
if (rs.indexOf(jiff_instance.id) > -1 && ss.indexOf(jiff_instance.id) > -1) {     deferred = $.Deferred();     promise = deferred.promise();     var promises = [];
for (i = 0; i < pixLen; i++) {                             idx = i * 4;                             pixels[idx] += state.red * image[i] * alpha / alphaImgLen;
renderSongCards () {     const { genre, playlists } = this.props;     return (
this.params.geometry = EsriLeaflet.Util.geojsonToArcGIS(geometry);       this.params.geometryType = EsriLeaflet.Util.geojsonTypeToArcGIS(geometry.type);       return;
import { ThemeProvider, makeStyles } from '@material-ui/styles';
const { decodeJWT, verifyJWT } = require('did-jwt') const Room = require('ipfs-pubsub-room')
__models.widgets.find(req.params.cid).then(function (widget) {         let w = __.getWidget(widget.widget_type);         w.render_setting(req, res, widget.widget_type, widget).then(function (re) {             res.send(re);
var FunctionNode = require('nodes/FunctionNode');     return Node.Model.extend({
} } exports.eachProp = eachProp; function objectToArray(obj) {
var action = function () {} var enduro_server = require(enduro.enduro_path + '/server')
export default [   [['午夜', '清晨', '上午', '中午', '下午', '晚上', '凌晨'], u, u], u,   [
}         return false;     }
condition: function () {                 var a, b, op, index = i;                 if (a = $(this.addition) || $(this.entities.keyword) || $(this.entities.quoted)) {                     if (op = $(/^[<=>]/)) {
import config from "../config/config"; import URLUtil from "../helpers/URLUtil";
);         assert.approximately(           navbar.getBoundingClientRect().top,
} else {             rot = CubeRotation.byCode[rotCode];             scaledCollideAABB = aabb.translate([-x, -y, -z]).rotate(rot.inverse).scale(scale);           }
}   return identifier.replace(/[/|\\]/g, '_'); }
element.autocomplete();  assert.equal( element.autocomplete( "widget" ).parent()[ 0 ],   $( "#autocomplete-wrap2" )[ 0 ], "null, inside .ui-front" );
}         break       case 'balance':         return this.formatCurrency(this.data.totalReceived[this.currency] - this.data.totalSpent[this.currency], this.data.keyspace)
module.exports.setVariables = function(string, syntax, variables) {   var ast, result, changeVariable;   changeVariable = function(ast, key, value) {
constructor(token, options = {}) {   super();
btnMultiSelect.addListener("changeChecked", function(e) {          var enable = e.getValue();          tree.getManager().setMode(enable ? "multi": "single");          if (!enable) {
for ( i = 0; i < swap.length; i++ )      if ( swap[ i ] != null )
socket.on('connect_error', err => {    if (err.message === 'xhr poll error') {     if (loggedXhrPollError) {
throw error;     } };
.catch(function(error){     console.log(error);    });
'Ember.ArrayProxy, but you passed %@', [typeof arrangedContent]),          isArray(arrangedContent) || content.isDestroyed);
static iconForUISourceCode(uiSourceCode) {     var binding = Persistence.persistence.binding(uiSourceCode);
import React from "react"; import { StyleSheet } from "react-native"; import MagicMove from "./magic-move";
}; export {InputRow};
log.info('server.js: Starting server at: ' + port)         app.listen(port)
} else {         startSide  = start - (item.getWidthLeft()  + 10) * factor;         endSide = end   + (item.getWidthRight() + 10) * factor;       }
var set = function( text ) {   settings.element.title.text( text );
var deferred = $q.defer();                          var post = ipfs.catJson(ipfsHash, function(err, ipfsData) {
function RecipeBullet($timeout) {         return {
throw new Error('Unimplemented API: dojo.data.api.Identity.getIdentityAttributes');  },
Promise.resolve(this.run(argv0, argv, { stdin, stdout, stderr, ... rest })).then(exitCode => {             process.exitCode = exitCode;         }, error => {
while ((peek = context.reader.peek(++count)) && peek.length === count) {      if (!/[\w@]$/.test(peek)) {
if (option.type === 'POST') {     request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')     if (typeof sendData === 'object') {       sendData = []
var distance = this.computeDistanceToTile(tile, frameState);         tile._distance = distance;
var domutil = require('../../common/domutil'); var reqAnimFrame = require('../../common/reqAnimFrame');
import { NavigationHandler } from 'navigation-react'; import getStateNavigator from './getStateNavigator';
}),   new Action({     name:    'export-csv',
import alt from '../alt';
var tab = dtResult.tab;     this.setUp(tab, settings, resultDOM);
function Sequence(tests, bail) {  if (!(this instanceof Sequence)) {   throw new TypeError('Class constructor Sequence cannot be invoked without \'new\'');
return 'unpublished';     case 'paper-conference':
export default class DialogActivate extends Component {  constructor( props ) {   super(props);      this.state = {
, validateList = require('./util/validateListInterface')   , scrollTo = require('./util/dom/scroll');
onDrop: function () {                 this.dagrePosition(placeHolderName);             }
Notification: true, Settings: true,
if (typeof(text) === "string") {     return text.replace(sensitivePattern(client), "「ｒｅｄａｃｔｅｄ」").replace(/`/g, "`" + String.fromCharCode(8203)).replace(/@/g, "@" + String.fromCharCode(8203));   } else {
module.exports = Aria.classDefinition({     $classpath : "aria.jsunit.SonarReport",
if (isSecondTab) {             return false;         }
})   .fail(function() {
var s;     while ((s = query.match(statement))) {       var s_name = s[1];
to: "Zu",         memo: "Memo",
console.log(`Running chaincode for location(s): ${chaincodeLocations.join(', ')}`);     const copyAllChaincode = () => Promise.all(chaincodeLocations.map(location => copyChaincode(location)));
case 'size':     return dfrd.resolve({error : fm.res('error', 'cmdsupport')});    case 'search':
import React from 'react'; import { string } from 'prop-types';
it('should not throw when matched intent handler undefiend', async () => {     const { builder, classifier } = setup();
QueryInterface.prototype.removeIndex = function() {   }
if(err){           if(err === 'Unauthorized'){
gutil.beep();     }
return (str+'').replace(/([\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!<>\|\:])/g, "\\$1"); }
orga() {     const orga = Organizations.findOne({ _id: FlowRouter.getParam('_id') });
this.connection.close(callback);     }
EventEmitter = require('events').EventEmitter,   inherits = require('util').inherits;
if (precision) return r.substr(0, precision);                 return r;             case '%':                 return '%';
switch(element.type) {       case FIELD: {         const matchInField = checkFieldByLine(element, line);         if(matchInField) return matchInField;
let loader = new LoadersVolume();
getSiteType: function () {         if (location.hostname.indexOf('chat.') > -1) {             return 'chat';
var elt;     while ((elt = this.next()) !== null) {       this[this.cache.length] = elt;
import React        from 'react'; import { activateSimulationStep } from '../../../../network/helpers/simulations';
console.log(currentResult);     if(event.keyCode  == 70){
.attr({                 cx: function (d) {                   var pivotNodeTranslate = that.getPivotNodeAlignedTranslationX(that.pathWrappers[d.pathIndex]);
logger.log(`No ${chalk.green("xclap.js")} found in ${x}`);   } else if (search) {
}         }         return Promise.reject(error)     }
define.args.normalize = function(payload) {
module.exports = function(expect) {  function foo() {
return files_data;
write_record(ba, "BrtWbProp", write_BrtWbProp());
expect(component.draw).toHaveBeenCalledWith(                         jasmine.any(Object)
else {                     host.exception(new SklearnError("Unknown function '" + name + "'."), false);
return thisThing.execute(this._semantics, this);   }
if (this.accept('{')) {       this.css++;       delim = '}';
const roptions = {
Action.runTask(this.context, errorTask);    }
export async function create(parentValue, { clientId, name, email, mobile, experience, resume, salaryCurrent = '', salaryExpected = '' }, { auth }) {   if(auth.user && auth.user.id) {
this.init = function() {                 that.attr('id', params.fieldDef["name"] + '--id_0');
module.exports = require('apps/drawapp').extend({  onDraw:function(){
throw new Error('Element must be in document');   }
var queryHash = queries[index]       var method = Sequelize.Helper.Array.without(Sequelize.Helper.Hash.keys(queryHash), "params")[0]       var object = queryHash[method]
}); }; module.exports = FormWithRequiredLabel;
import Components from '../Components'; import TableOfContents from '../TableOfContents';
import classSet from "classnames"; import { app, createComponent } from 'webiny-app'; import TabHeader from './TabHeader';
if(g.isVml){     sourceDir = bidiEngine.checkContextual(text);
looksLikeSelector: function() {     var i = 1;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-08\/subway_gate-1346109087.swf",  admin_props : true,
function pos () {   if (typeof window === 'undefined') return {}   return {
: table[field].gte(context.request.urlTokenized[index - 1])           case "explicit":
Signature.prototype.baseString = function(method, url, params) {  querystring.escape = _encodeURI;
const characters = account.getCharacters();         const maxCharacters   = 3;
var connUrl = {pathname: ''};           try { connUrl = new URL(conns[i].url); } catch (e) {}             var connPathname = connUrl.pathname.replace(/\/$/, "");
z += x[a];    if (z == 42)      delete x["c"]
for (let i = 0; i < quadLen - 1; i++) {             if (OverLap) {
var FluxMixin = Fluxxor.FluxMixin(React); var Button = require('react-bootstrap/lib/Button');
this.ul.classList.add("dropdown"); };
GenoverseUtils.prototype.getGenomeObject = function(genome, genomes) {
path += ')/'      this.query('function', [path], session, cb, function() {});     }, this);
var arr = ["hello world"]; console.log (arr[0]);
w.terminate(); };
var orderByCode = null;   for (var i = 1; i <= block.orderFieldCount_; i++) {     var text_order =
window.addEventListener('load', function() {   if ('PaymentRequest' in window) {
if (!isAsync) {             return jQuery.parseJSON(request.responseText);         }
it("xpath without namespace declaration", function(done) {         try
timer.stop();         timer.report();     });
if ( document.getElementById( id ) ) {   Expr.find.ID = function(match, context, isXML){
return source;  }
data: function() {    var convData = getConverById(this.params.convId).fetch()[0];    convData.title = convData.title || i18n('ui.titles.pageConver');    convData.usersItems = _.map(convData.usersIds, Climbo.newUser);
delete data[field];     });    }    return data;
yBits = decCoefficientToBinaryString(bitNot(y))     for (let i = 0; i < yBits.length; ++i) {       yBits[i] ^= 1
Flow.durationToTicks.durations = {   "1/2":  Flow.RESOLUTION * 2,   "1":    Flow.RESOLUTION / 1,   "2":    Flow.RESOLUTION / 2,
default:       msg = "Unknown Platform";       break;   }
var modal = this.modal = new editors.List.Modal.ModalAdapter({         content: form,
it('168.2 content is null', async () => {     let conn;     try {
} else {                }
} ); export { OrthographicCamera }
import styled from 'styled-components' import { StyledH1, StyledP } from '../theme/globalStyle'
((isContentEditableSupported) ? '' : '<input type="text" class="cursor" autocapitalize="off"/>') +           ((isContentEditableSupported) ? '' : '' +             '<div class="context-menu">' +
var stores = function( storeName, hash ){     var definedStores, definedStore, resolvedTarget;
for (key in source) {              formatName = this.getFormatName(key);              if (typeof formatName !== 'undefined') {
Source.prototype.destroy = Source.prototype.update;
const controller = function (Base, $element) {         class DexBlock extends Base {
setupEvent();
config = readConfigFile(envVal);     }     catch (e) {         return when.reject(e);     }
mapAndSave(model, source);   }
_serializeValue: function (value) {   if (BetaJS.RMI.Skeleton.is_instance_of(value)) {    var registry = this;
return false;   }   if (typeof WebSocket != 'undefined' && !('__initialize' in WebSocket)) {     return false;
tpl = new TemplateFile(__dirname + Path.sep +                                ".."+ Path.sep +
var init = function() {         renderContainer(tswcalc.data.template_data);         addHash();
enyo.args.root = (enyo.args.root || tag.path);
let right = r * scale * self.opW_;          if (scale < 0.2) {         context.strokeStyle = "#888888";
}      return;
if (consume(ID, "octet")) return "octet";     }
import React from 'react' import { Msg } from './messages'
if (panInProgress && panEnabled && onPanEnd) {     const { dx, dy, panStartXScale, panOrigin } = panStart;
for (i in options.columns) {             column = options.columns[i];             if (column.filterable == "advanced") {
if (this._transform)   modelViewMatrix = modelViewMatrix.multiply(this._transform.transpose());  if (!this.dataAdapter)
var payers = null;     before(function (done) {
var rawCreateElement = doc.createElement;   doc._createElement = function(tagName, callConstructor) {
do(noOp, noOp, function() {             expect(lhs[__ref_index]).to.equal(0);
success: function(r) {                  this.grid.reload();
case "Cube":                 div2.append(jQuery('<span \>',{ class:'input-group-addon',}).html('Length'));
'clientY': offset - $(window).scrollTop(),         'offsetX': offset - get_player()[0].offset().left,         'offsetY': offset - get_player()[0].offset().top,         'pageX': offset,
_sendMessage(destination, content, mentions){      var self = this;
constructor(options) {     super(options);     this.listenTo(this.model, 'change', this.render);
if (err && err.hasOwnProperty('responseText') && err.responseText !== undefined) {         alertHandler.error(err.responseText);       }
'use strict'; const path = require('path');
mockedCdn.putFileContent.yields(null, 'ok');         initialise();
var EXPLICIT_CLASSIFICATION, TRAINING_DATA_CLASSIFICATION;     var acs, sof, oof, acrof, stateName, state, state2,       registryService, stateClassifierMapping;
cy.logout()       })
}     for(ti in this.tails) this.tails[ti].sort(); };
nodecg.log.error('Failed to load "sounds" lib:', e.stack);   process.exit(1);  }
} if (!String.prototype.repeat) { String.prototype.repeat = function(count) {     if (count < 1) return '';
var model = deepClone(pagesConfig)           model.basic = model.basic || {}           model.cols = model.cols || []
import {   PushButton,
<AddContributionForm     onSubmit={x => console.log(x)}     initialValues={{
return _function.apply(_this, curryArgs.concat(slice.call(arguments, 0, arguments.length)));   };
ezmlm.replyToList(id, callback);   }, function (err1) {     handle(err1);     process.exit();   });
var evt = new ns.MouseEvent("onMouseUp", o.x, o.y, this, e, id, id==this._primaryPointerID);   if (this.onMouseUp) { this.onMouseUp(evt); }
} catch( ex ) {     Copper.logError(ex);    }
PageActions = require('./../app/PageActions'),   Loading = require('./../widgets/Loading'),
var appy = require('appy'); var request = require('request'); var async = require('async');
}   }   return { time : time, price : zigzag };
for (var i in edit) {             if (i === '_read' || i === '_modified' || i === '_modifier' ||                      i === '_creator' || i === '_created' || i === '_commitId') {                 continue;
console.log("Didn't remove the device " + err);     return when.reject();    });  },
if (adapter.config.everyCalOneColor) {                  result.suffix += '<span style=\"font-weight:normal;color:' + col + '\">';              } else {
} else {       nextButtons[buttonIndex].value = pressed         ? 1.0
});     return deferred.promise; };
ISense.prototype.setCompilationSettings = function (options) {                  var compOptions = new TypeScript.CompilationSettings();                  for(var i in options) {
throw new Error(WarningTextEnum.INVALID_DATA);     }   }
QUnit.test( "Popup placement works correctly", function( assert ) {  var desired, result,
p.once( function( newVal, oldVal ) {       count++;
var path = [];     while (node) { path.unshift(node); node = this.parentNode(node); }     return path;
if (result.error) {                     console.warn("[tangelo.stream.run()] error: " + result.error + "; aborting stream run");                 } else if (result.finished) {
const master_model_1 = require("../master/master.model"); class RoomsModel extends master_model_1.default {
const hookPrefix = 'redibox-hook'; const hookRegexReplace = new RegExp(`@?[a-zA-Z-_0-9.]*?\/?${hookPrefix}-`);
propValue ? this.hig.showSideNav() : this.hig.hideSideNav();           break;         }         default: {           console.warn(`${propKey} is unknown`);
return locs;         },
if (this.distinctHost) {     this.listeningServer.listen(this.port, this.host);
if (areaType === REGION) {       return false;     } else if (areaType === DISTRICT) {       return false;     } else {
import { connect } from 'react-redux';
isArray = comb.isArray,     combDeepEqual = comb.deepEqual,
var urlParts = this.url.split("/");                     this.url = this.url.replace(appRootRegex,"/");                 }
} } GrowlerContentWrapper.displayName = "GrowlerContentWrapper";
if (userRoles.isModeratorOf(id)) {             UserRoles.removeAllRolesFor(id);             MeetingSeriesCollection.remove(id);
}     continue;    }    if ((m=s.match(/^\s*(https?:\/\/[^\s<>"]+\/[^\s<>"]+)\.(bmp|png|webp|gif|jpg|jpeg|svg)\s*$/))) {          lout.push('<img src="'+m[1]+'.'+m[2]+'">');
msg = '메타마스크 로그인 안됨';   }
var index = 0, x, y, random;     for (x=0; x < imageData.width; ++x) {       for (y=0; y < imageData.height; ++y) {         random = Math.random() * 0.8;
module.exports = function date_timestamp_set (dt, timestamp)  {
var intv;     if(has("ie")){      f.onreadystatechange = function(){
{     this.vertices = [];     dotgrid.guide.refresh();   }
}         for(let j = 0; j < pack.images.length; j++) {             let image = pack.images[j];             if (image.enabled && this.enabledImages.indexOf(image) == -1) {
scope.meta["Class"] = scope.meta.Class;
checkUsername: function(event, input) {
{        indices = indices_;      };
for (var key in labelsMap) {                                 hasKeys = true;                                 text += key + " : <i>"+ labelsMap[key] + "</i>,\n ";
att = await collection.get(this.att_id, { id: this.att_id });         att = await att.fetch();       }
} else {       setMode(MODES.NEW_STREET)     }
}        $switcher.on('click', function(e) {     return toggle();
const LandingPage = ({ heroImage }) => (   <div>
}          XMSS_OBJECT = new QRLLIB.Xmss(thisSeedBin, 10)     const thisAddress = XMSS_OBJECT.getAddress()
handleNavigate(newUrl, options) {     locationStore.actions.navigate(newUrl, options)
switch (activityType) {     case 'create_comment': {       const commentText = content.text;       const commentContent = JSON.parse(annotation.content);
}()); function sayDelete(e) {  alert('Hey you just deleted something!');
try {             var obj = JSON.parse(item);
else if (_panes[name]) {                 _panes[name].loadData(val);
this.applyNumberFormat(column, options);           break;         case 'DateFormat':           this.applyDateFormat(column, options);
RegExp.escape = function(s) {   return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'); };
for(var i = 0; this.outputs.length; ++i)    {
case 'since':       sym = '>' + sym;       break;   }
elem = elem instanceof Node ? elem : this;     if (!(elem instanceof Node)) {       throw new Error('No node provided to diff renderer as either the first argument or the context.');
if (str.length == 6) {                     y = str.substr(0, 4);                     var m = str.substr(4, 2);
export async function notify(aParams = {}) {   var id = await browser.notifications.create({
if (!Array.isArray(value)) {           return false         }
if (nodejs) {   require('./metrics');
data.user.activityHistory = [];                   }                   if(data.user.permissions == {empty:"permission"}){                     data.user.permissions = [];
bottomshape: '置后',             align: '水平方向',
default:         throw "unknown type: " + format;     }
const parseCodeFenceHeader = require('./parseCodeFenceHeader'); const { downloadExtensionIfNeeded } = require('./downloadExtension');
if (myTop < containerScrollTop) this.props.setContainerScrollTop(myTop);     if (myBottom > containerScrollBottom)
if (isPropStateSet === true) {           var pCcClassKeys = util.safeGetArrayFromObject(propModuleName_ccClassKeys_, module);
this.newMetadata["textsize"] = this.newDataAsText.length;    }   }
this.sandbox.on('husky.column-navigation.edit', function(item) {                 if (this.data.ids.indexOf(item.id) === -1) {                     this.data.ids.push(item.id);
{   var rowheight = 25;
gameArea.stop();   if (currentLevel == totalLevels) gameComplete();   else{
P0FClient.prototype.process_send_queue = function () {     if (this.send_queue.length === 0) { return; }     for (var i=0; i<this.send_queue.length; i++) {
return basicForm(verb, eSound, vtype);
var spacing = this.getSpacing();       var left = alignOffset + (options[0].marginLeft || 0);       var thisMargin, nextMargin;
import Footer from './Shared/Footer'; import InfoWeb from './Home/InfoWeb';
return IconComponent.tick(color);       case "ercc only":
loopFlow(view, proxy, generic);              } catch (exception) {
if (!('context' in this)) {         this.context = context;
const idMatch = val.match(/^#([a-z\d-]+)/);
case 'Q' :        for(k=0, v=data.length; k<v; k+=4){         generatePoint(tn, pc, sn, data[k], data[k+1], lc+1, sx, sy); pc++;
popupCard.target = target;     popupCard.position = _positionCard(source, target);     _renderPopup();
}));       },       "prelude": function* (ctx) {         ctx.scope.set("baz", yield ctx.callKRLstdlib("*", ctx.scope.get("foo"), ctx.scope.get("bar")));       },       "action_block": {
prop = prop.substr(0, prop.length - loader.packages[pkgMatch].main.length - 1);         setPkgConfig(loader, prop, { map: v }, false);       }
var air_name = 'air:'+name+'List';         if (!_.isObject(obj[air_name]))             throw new uError('PARSING_AIR_WRONG_TYPE', obj[air_name]);
function GBAbstractPoint() {   LabeledGeom.apply(this, arguments); } GBAbstractPoint.prototype = new LabeledGeom();
const idDroplet = params[1];     const api = new DigitalOceanApi({
if (doc.readyState == 'complete' ||       doc.readyState == 'interactive') {     callback.call(opt_scope);
for(var timer, sent=sc.dom.querySelector("send[id="+id+"]").sent;    timer=sent.pop(); timer.cancel());  },
var MASTHEAD_BG_CLASS_REGEX = /(\s|^)bg-[a-z-]+(\s|$)/;
this.startGameLoop(this.run);   }   if (parameters.debugKeys) {    this._addDebugKeys();
}          break;         case "selectandLockField":          if ( !_.isEmpty( fld ) && ( !_.isEmpty( val )) ) {
html: function(token, attrs, content) {    var attribs = '';
center: proj.startCenter,         rotation: (proj.id === 'geographic' || proj.id === 'webmerc') ? 0.0 : models.map.rotation,         zoom: proj.startZoom,
console.error(e);         throw e;     });
this._numList = [];      }     Paginator.prototype = Object.create(HTMLWidget.prototype);
function garg_ontick(data) {      switch (data.stack.castInfo.rune) {
render() {     if (this.props.workflowStatus === statusConstants.RUNNING) {       return (
processor.emit = function() {                          var event = arguments[0];
console.log('Import: error ', _.omit(fileObj,'blob') );    throw new Meteor.Error(500, i18n('error_import_formatNotValid') + K.Util.humanize.filesize(K.settings.public.import.maxFileSize) );   }
mapping.generateElement(this.editor, start);     editor.selection.range = editor.selection.range.collapse(true);     if (!editor.commit()) {
function _getColorsFromPaletteTypeTop(palette, numCategories, othersColor) {     let colors = _getSubPalettes(palette, numCategories);     return _avoidShowingInterpolation(numCategories, colors, othersColor);
stop();
is: "hax-blox-picker",   properties: {
console.log('Uh oh: ' + err);    }
if (plugin.active) {                 jsdata = plugin.fn(jsdata, plugin.params);             }
radius = Base.readNamed(arguments, 'radius');    return createEllipse(center, new Size(radius), arguments);   },
this._p; }
"darwin" : [         { name : 'fontmanager.category.system.folder.name', type : 'system', directory : '/Library/Fonts'},         { name : 'Google Font', type : 'googlefont', directory: 'data/googlefont/main-font'},
bz.legacyIE = (bz.IE6||bz.IE7||bz.IE8);  var Gecko7orOlder = (bz.Gecko && UA.match(/rv\:(\d+\.\d+)/) && parseFloat(RegExp.$1)< 8.0);
readable.on('data', function (data) {     if (!(data instanceof Buffer)) {       data = new Buffer(data)     }
this.domain = scheme + ': } function Util() {}
import React from 'react'; import './App.scss';
var moment = require('../module/moment'); var util = require('../util');
case Syntax.VariableDeclaration:           name = node.declaration.declarations[0].id.name;           utils.append('var ' + name + ' = module.exports.' + name + ' = ', state);
if ((menu.initialTop - currentTop) <= 30) {       top = 30;       menu[0].className = 'docs-side-menu menu-fixed';
'use strict';
this.root = { box: { center: center, halfDim: halfDim }, point: data[0] };             for (let i = 1; i < data.length; ++i) {                 this.insert(this.root, data[i]);
else {          inputSource += `<select ${attributes} class="${inputClass}">`
if (lastLayer) {     let topText = node.topText;
var trackers = storage.trackers;                 if (areaName === 'local') {
elem.src = url;         document.getElementsByTagName('head')[0].appendChild(elem);     }
init : function() {                  this.setColour([ 143, 164, 2 ]);         this.appendDummyInput().appendField(Blockly.Msg.SENSOR_INFRARED);
const duartionRegexp = /([0-9]+ms)/g; const categoryRegexp = /(\[[\w\-_.:]+\])/g; const httpMethodRegexp = /(GET|POST|PUT|PATH|HEAD|DELETE) /g;
if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {                         extended[prop] = Extend(true, extended[prop], obj[prop]);                     } else {
import React from 'react'; import { PropTypes } from 'prop-types';
var distance = finalPosition.distanceToSquared(imagePosition);
this.childs = children.length ? children : [this];         if (showProp) {             children = this.childs.filter(child => child.data.get(showProp));
} else {       console.log(`${context} key '${key}' not found in ${parentKey}`);       error = true;
if (excludes.length) {                 result = mask.mask(result, excludes);             }             return result;
}                 }                 if (!matrixSide) {
var sharedProjects = require('./db/sharedProjects'); module.exports = {};
}); Formsy.addValidationRule('isAlpha2', (values, value) => {   if (value !== null){
r.base = null;   if (r._previousTree) unmount(r._previousVTree, ancestorComponent);  }
element.parentNode.MaterialTextfield.boundUpdateClassesHandler(); }
process.on('exit', () => {     if (updateData) {
post('/chat', function(){   messages.push(this.param('message'))   this.halt(200)
obj = obj || { id: id, cls: "PFVArType2IEEEVArController" };                 super.submit (id, obj);
import React from 'react'; import { Link, IndexLink } from 'react-router';
});       case 'Validation':
var state = uri.getData(path);     if (!state) {
throw "Got unexpected control cell."         }
},   'diagnoses.primary_diagnosis': {     type: 'Diagnosis',
var outPath = data.path.replace(/(\.js)?$/, '.css');       var css = layerBuffer.join('');
if(err){    next(err);   }else{
core.item(qs.error, function() {         current._osm_object_type = current.object_type;
"actions": [{             "action": function* (ctx) {               return yield (yield ctx.modules.get(ctx, "event", "send"))(ctx, [{                   "eci": ctx.modules.get(ctx, "meta", "eci"),
var height = 0;     for (var index = 0; index < indexOfElement; index += rowSize) {       var value = obj.get(index);
rows: rows     }   } }
this._frameObject = null;   }
const instance = mount(PageProposal, {       doBefore: () => {         store.commit(`setProposal`, {})
handleFocusChange();   };   let observeShadowFocus = function() {     document.addEventListener('focus', handleDocumentFocusEvent, true);
if (infos){             if (!infos[1]){
return compiler.rewrite(code,o); }; exports.rewrite = __root.rewrite;
if (view.isView) {
app.use(noopServiceWorkerMiddleware());     },
return this.i18n.Major;                 case 5:
var formData = new FormData(_this.$form.get(0))         $.ajax({             url: window.location.href,
return  n;                 }
import React from 'react'; import Content from '../../components/Content';
var contents = this.gobble_expression();     match = this.buffer.match(close_paren_regex);     if (match) {      this.buffer = this.buffer.substr(match[0].length);
for(name in properties) {    value = getOwnProperty(properties, name);    if (name === 'implements' || value === undefined) continue;
var _engine = require('./engine');
if (_activeRequests == 0) {       _callback(_config);
throw new Error( 'stroked round lineJoin not implemented .. add arc/arcTo' );                                                      case 'miter':
const errStr = "Input to set emoji was not a known emoji."       fn(new Error(errStr))       return
{     DockerManager.startOrchestra(DockerManager.defaultOrchestra, function (err, restoredCheckpoint)     {
return field > (value1.getTime());         case this.OPERATORS.dateOperatorIsBetween:
switch (format) {           case 'csv': {             const {send} = res;             res.send = (data) => {
+ _volume._childrenInfo[1]._sliceNormal[2]*_ras[2]     + _volume._childrenInfo[1]._originD;
g, fn ? fn : "");   }
function logUserRequest(message, conversationId) {   log(message, conversationId, conversationId, 'incoming'); }
loadedGroup = new LayerGroupCollection(null, item.name[defaultLanguage]);                     loadedGroup.id = item.id;
$page.find('#main').append($footer); }
if (schema.type === 'object') {     var instance = {};
throw new Error("Error referencing component '" + root.tag + "'. Components can only be used when within modules. See documentation for more information on t7.module().");             }
frame.minSpeed = matchArray[2];         },         updatesEnding: function (message, frame) {             gpsMessageOnlyParse(message, frame);
this.gl.glp().stateTracker.toggleBoolState(data);       } else if (data.type == "num") {         this.gl.glp().stateTracker.changeNumberState(data);
toLabel: ({ assert }) => `(is ${ assertToLabel( assert ) })`,   toGherkin: ({ target, assert }) => `Assert that element \`${ target }\`     is located ${ assertToLabel( assert ) }`,
}); var uploadFileName = "upload1.txt"; frisby.create('file upload with ticket, anonymous')
.replace(/\./g, '-')      .replace(/[/\\?%*:'|"<>()]/g, '');
$('body').on('click', '[data-reload]', function(){    window.location.href = window.location.href.split('#')[0];   });
result = this.scanInjections(ruleStack, lineWithNewline, position, firstLine)     if (result) {       for (let injection of baseGrammar.injections.injections) {
case 'incollection':       return 'chapter'     case 'conference':
rm.write("<div  id=\"" + oControl.getId() + "_SB\" tabIndex=\"0\" role=\"separator\" title=\"" + oControl.getText("SPLITTER_MOVE") + "\"");   if (orientation == Orientation.Vertical) {    if (oControl.getSplitterBarVisible()) {
if (this._promises) {       for (i = 0; i < this._promises.length; i += 1) {         data._chainPromise(this._promises[i])
return f32_scratchLoad()   }
require.def("ace/lib/core", function() {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/scrumptious_frittata-1334210155.swf",  admin_props : false,
setTimeout(() => doQueueNext(msg), 20000);             return runOnJenkins(null, path, {}, null, false);         });
let json = utils.xmlToJson(xml)         let flatTileMatrix = null;
var csv = require('../js/util/csv') var moment = moment || require('moment'); describe('csv utils', function() {
if (typeof ciTime !== 'undefined') {             hoursAgo = (ciTime-bgTime)/(45*60*1000);
if (existsFiles.length>0) {                     mes="同じ名前のファイルが既に登録されています：\n";                     existsFiles.forEach(function(f){
switch (name) {       case 'date': {         const dateMoment = evt != null ? evt.format('YYYY-MM-DD') : null;         date = dateMoment ? `@${dateMoment}` : null;
} else {     homeDir = process.env.HOME;   }
var r = require('rethinkdb') var mongoose = require('mongoose')
console.log("restarting!");          } else {
var days = [];     for (var i = 1; i < 6; i++) {         var weekDay = moment().day(i).hours(0).minutes(0).seconds(0).milliseconds(0);
exports.stringHexColor = stringHexColor;
if (activeSchedule) {
return fs.copy(src, destination).then(() => {     console.log(`Docs synced to ${destination}`)   })
import TwiddleResolver from "ember-twiddle/lib/twiddle-resolver";
item.addPartnerRightAction = function (person) {   let node = person.nodeOf;
var path = basis.path;   var consts = require('basis.template.const');
html += "}));";     return html;
} else if (leftNum < rightNum) {   this.prover.evaluate(this.prover.create('<', [sexp.left(), sexp.right()]));   var result = this.prover.getLast();
this.diffDependencies[diff.id].forEach(function(diffId) {                             self.trigger('markPublishDiffItem', { diffId: diffId, state: false });
function quasi(value) {     if (value.slice(value.length - 2) != "${") return cont();
import { Anchor, Box } from 'grommet' import { string } from 'prop-types'
return await Promise.all(compilation.graph.map(file => {       const path = file.path === '/' ? '' : file.path;
this.btnHowToPlay = game.add.button(400, 370, 'ssButtons',      function(){
async eventSocket (Socket, data) {
tag = [tag];   }   if (!data || typeof data === 'function') {     callback = data;
const a = send(prop(), [0])       expect(a.debounce(100)).to.emitInTime([[0, {current: 0}], [160, 3], [360, 4], [710, 8], [710, '<end>']], tick => {         send(a, [1])
});        Deferred.all(allInfoDeferreds).then(done, done);
return str;   }
init: function() {         this.setColour(Blockly.Blocks.communicate.HUE);         this.appendValueInput('VAR')
result = err;     }
decompileFromAst, };
exports.post = function(req, res, next) {   var obj = this.new(req.body);
} else {                         this.send_message_and_exit('DUPLICATE', 68);                      }
var res = {};             for (const memo_id in memos) {               res[memo_id] = JSON.parse(memos[memo_id]);
} else {             map[id] = factory;         }
if (scope.timeout !== null) {                     $timeout.cancel(scope.timeout);
}; } function afterEachAllRewrite() {
for(var index =0 ;index<hosts.length;index ++){    var hh = hosts[index];
const masterPlan = plan();     p1.test('should not run this test', (t) => {       t.fail();
return;             }             if (!pred.has(w)) {               forward_fringe.push(w);
}).slice(0, -1).join('\n') }
continue;
exec(function() {         if (typeof callback === "function") {
cwt.storage.itemLoader = function (itemKey, itemReceiver, errorReceiver) {   localforage.getItem(itemKey, function (err, value) {     if (err === null) {       errorReceiver(err);
log.debug('Starting to install app', app)     const appRegex = new RegExp(`^${vendorPattern}.${namePattern}@${wildVersionPattern}$`)     if (!appRegex.test(app)) {
} else {     fromdata = Object.keys(alasql.databases[databaseid].objects).map(      function(key) {return alasql.databases[databaseid].objects[key]}     );     selectors.unshift({srchid:'CHILD'});
const b = str(body);     return { body: b.str, tracers: b.tracers };   };
var seperator = seperator || '---'       , pattern = '^('
webWorker._init();    if ( Validator.isValid( this.crossOrigin ) ) webWorker.setCrossOrigin( this.crossOrigin );
default:         this.$ele.find('[data-notify="' + cmd + '"]').html(commands[cmd]);
import * as Animatable from 'react-native-animatable'; import { View, Button } from 'react-native'; import { WoWsLoading } from '../component';
var getUserPrefFunction = function(prefKey){         if(shouldUseLocalStorageFunc()){             return localStorage[prefKey] || defaultPrefs[prefKey];
case 'super': pendingExprHead = this.parseSuper(); break SWITCH;     case 'break': return this.parseBreakStatement();     case 'catch': this.notId (); break;     case 'class': return this.parseClass(CONTEXT.NONE ) ;     case 'const':
lightningHost: 'localhost:10009',   cert: `/Users/${userInfo().username}/Library/Application Support/Lnd/tls.cert` }
propagateArrayChange: function(mode, element, modifiers) {         var affectedMorphs = this.entangledMorphs.without(this.updatingMorph);
var i = 1;  files.forEach(function(name) {
}     for (; i < 27; i++) {         var version = versions[i][ec_level];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2009-12\/1261531551-3616.swf",  admin_props : false,
if (newId !== data.$id) {
.on('callUpdate', (call) => {         if (call.state === 'done') {
if(!(this instanceof Touche)) return new Touche(nodes);      if (!nodes) {
data: {category: category,                criterion: criterion},
gateway.connect(function() {
const points = this.selected.geometry.parameters.points;         app.editor.execute(new SetGeometryCommand(this.selected, new THREE.LatheBufferGeometry(
this._setGeneratedUser = function(properties) {       var generatedId = this.localStorage.getObject(this.generatedIdKey);       var user = { id: generatedId, properties: properties };
tChildren.forEach( function( iChild, iIndex) {               iChild.adjust( { top: tCurrTop, left: (kCellHeight - iChild.iconExtent.width) / 2 });               iChild.set('isVisible', true);
getOBJ : function(){ return this.owner.board.getobj(this.pos.bx, this.pos.by);},  setOBJ : function(obj){
}; export { EllipseCurve }
class App extends Component {   constructor() {     super();     this.state = {
} var hydra = new RoboHydra();
return persistence.getDataForServer(serverId).then(data => {       let settingsReturnBlob = {};
finish(null); }
for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {           let sourceMaterial = materials[mi];           buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);
it('Should set path to http:     expect(url('http:       .to.be.eql('http:   })
},   where: function(modelData) {     var collection = this;
const { _ } = require('lib/locale.js'); const { sprintf } = require('sprintf-js');
});         var map = this.router.mbMap.map.olMap;         this.set({
description: $('.content_for_perma', elem).textContent,     projectName: projectFunc   });
}; export default register;
import DynamicInput from './DynamicInput'; import Text from 'preact-i18n'; import t from '../Utility/i18n';
let resolvedUrl = null;
jQuery.sap.clearDelayedCall(this.oLoadEvent);   }   if (this.oFailedEvent) {    jQuery.sap.clearDelayedCall(this.oFailedEvent);
console.log('A personal access token is needed to use the GitLab API\n' + url.grey);     var tokenQuestion = 'Enter personal access token: '.yellow;     while (!options.token) {
Light.prototype._updateScaledIrradiance = function () {
playerSpy(amount);   }
week: 'ddd D/M'         },         eventClick: function (calEvent) {           $scope.setTimeSlot(calEvent.start);         },         eventMouseover: function (event) {
if (!(validOutPort > 0 && validOutPort <= 65535)) {    throw new Error(portInvalidMsg[1]);
require('./libraries')
});       for (let i = 1; i <= groups.length; i++) {         newVal = newVal.replace('$' + i, groups[i]);
this.inChunkSize = rtmpBody.readUInt32BE();                  break;
PlaceholderComponent(quail, test, Case, options); }; module.exports = ObjectMustHaveValidTitle;
offset += 2;         cookie.address = buf.unpackString(addressLen, offset);
else {
return str.split(/[-.\s]+/) }
notifyLayerVisibilityChanged : function(layer) {         var scaleOk = layer.isVisible();
if (!item) return '';   if (item.encryption_applied) return '🔑 ' + _('Encrypted');   return item.title ? item.title : _('Untitled');  }
headers["cache-control"] = "max-age=" + self._cache;         for (aH in additionalHeaders) {             headers[aH] = additionalHeaders[aH] || headers[aH];
else if (text == freelanceMenuOptions.editBio) {   textInput.askForBio(msg, bot);  } else if (text == freelanceMenuOptions.editCategories) {
typeahead.on("typeahead:initialized", function() {       Ember.run(function () {         self.$('input').focus();
this._show(context, widget);             },             detach: function () {             },
var alasql = require('..');  }
onkeyup   : () => {},     onmouseup   : () => {},
event.waitUntil(self.clients.claim.bind(self.clients)); }
data = undefined;         if (args.hasOwnProperty('data')) {             data = args.data;         }
app.use(function *redirect(next) {   this.redirect('/graphql');
document.querySelector('#coinmarketcapli').addEventListener('on', (e) => {
camelize: function(str, upper){       if (upper) { return lib.upperCamelize(str); }       return str.replace(/[-_]+(.)?/g, function(match, chr) {
"use strict";
var BAUDRATES = [115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 120, 600, 300, 200, 150, 134, 110, 75, 50]; var DATABITS  = [8, 7, 6, 5];
if (typeof arguments[0] === 'object') {             var target = arguments[0];
userAgent: window.navigator.userAgent,                     language: window.navigator.language                 }),
var orientation_ = map_.getPositionOrientation(pos_);
onChange(ev) {         this.props.onChange(this.props.field, ev.target.value);     }
console.log('done');      return html; });
const UNCHANGED_WAIT = 1000;
clashingName1 = 'test'; let clashingName2 = () => {}; export default clashingName2;
static ["text"](node, key, vm) {        Register.registDomListener4Hubs("text", node, key, vm)
append("<a>").text("Full Color Wheel"));           }           $listContainer.append($tabContainer);
let ret = true               for (let i = 0; i < this.validators.length; i++) {                 const { name } = this.validators[i]
value: function enableScroll() {       this.documentBody().style.removeProperty('overflow');     }
it('must be prototype', function () {     newObj = buildLogger(originalObj, function (event, payload, ts) {     });
const max = this.input.max.eval();         const tmin = min.getTime();
}   log('messenger:'+processID+'@inputs> zmq_pattern: ' + zmq_pattern );         mq_sockets[c]['socket'] = mq.socket(zmq_pattern);
import React from 'react'; import { Button, Image, Menu, Panel, PanelGrid, Popover, Tile, Token } from '../'; import { DocsText, DocsTile, Header, Import, Properties, Separator } from '../_playground';
}   var optionsWrapper = document.getElementById('options')   for (var key in options) {
for (let i = 0, cur = outerType; i < len; ++i) {       let type = types[i]       if (cur == "L" && type == "1") types[i] = "L"
mc.get([counterMcKey, registerMcKey], function (err, data) {
$story = $('#article-wrapper p')
Store.prototype.del = function(packet, cb) {   packet = this._inflights[packet.messageId];   if (packet) {
throw new Error();         })
EntityViewsMenu = connect(mapStateToProps)(EntityViewsMenu); EntityViewsMenu = withRouter(EntityViewsMenu); export default EntityViewsMenu;
var SignInManager = Streamus.backgroundPage.SignInManager;     var LinkUserIdView = Backbone.Marionette.ItemView.extend({
SQR.Matrix44 = function() {     this.data = new Float32Array(16);
options:{                 nav : true,                 dots: true,                 callbacks: true,
{ "group__stan_conn_mgt_group.html":[2,2,11,0],
module.exports = function() {  for(let x = 0; x <= 10; ++x) {
return cutStr;   }
exports.preCheckTemplateSyntaxForVue = function(source, type, options) {   let {lang} = options;
setFormData: (state, items) => {         state.getFormData[items.ref] = items.value
a = b;                      _startShape.style.x = a;
{   if (!(this instanceof Event)) return new Event ();   Base.apply(this);
var mapper = [] ;    var model = new mTextModel.TextModel(fileText, "\r\n");
const normalizeArrayIndices = (path) => {      return path.replace(/\.\d+\./g, '.*.') }
$rootScope.$on("importComplete", function() {          alertify.success("Import has completed");
this.opt = assign({}, defaults, option);     this.scrollAmount = -this.opt.offsetTop;     this.scrollOld = 0;
view.dimensionFilter = tdimension;      var parts = view.cube.cvdim_parts(tdimension);      var params = {
el.parent = root;    x += el.x;    y += el.y;   });
if (currentBranch.votePeriod === (currentPeriod - 1)) {         percentComplete = parseFloat( ((currentBranch.currentPeriod - currentPeriod) * 100).toFixed(3) );       } else {
add: function(other) {   var dx = other.x - this.x;   var dy = other.y - this.y;   return Math.abs(Math.sqrt((dx * dx) + (dy * dy)));
ownsDocument = function(userId, doc) {   return doc && doc.userId === userId || Roles.userHasRole(userId, "admin");
exports.getRules = function( url, opts, cb ){   var defaultCb = function( err, output ){    if( err ){
export default function () {
if (!this._window.qxloader) {         this.__fireReady();
a1.value = 5;     expect(a1.type).to.equal(Enums.ValueType.Number);     expect(row1.hasValues).to.be.ok;     var b1 = row1.getCell(2);
unitHeight = 30,             width = 980,             unitWidth = width / maxCt,             axisThickness = 2,
o.redirectUrl = browser.runtime.getURL('images/1x1-black.gif');         }
proto.setCoords = setCoords;          function Marker(){}          Marker.prototype = proto;
}   for(y = prevHeight; y < this.height; ++y) {     row = [];     for(x = 0; x < this.width; ++x) {       row[x] = null;
customDebugDraw.drawAxes(context);                 this.ngBox2DSystem._world.DrawDebugData();
var transaction = transactionData.transaction;  transactionObj.operations = transaction.operations;  transactionObj.lengthDifference = transaction.lengthDifference;  this.dmSurface.change( transactionObj, new ve.Range( 1, 1 ) );
}); }); Router.plugin('ensureSignedIn', {   only: ['profileEdit', 'profileNew', 'jobEdit', 'jobNew']
winston.error('Database Error: ' + err.message);             throw new Error('Database Error: ' + err.message);         }
configuration.data.filename = environment[key];                 break;             case 'website_auth_signing_key':                 configuration.auth.secret = environment[key];
import { connect } from 'react-redux'; import MonacoEditor from 'react-monaco-editor'; import { ActionGroup, Alert, Button } from '@patternfly/react-core';
case 'last':           while ( (node = node.nextSibling) )  {             if ( node.nodeType === 1 ) return false;
}  };  return dojo.declare("dojox.charting.action2d.MouseZoomAndPan", dojox.charting.action2d.ChartAction, {
mapAndSave(model, pollingLocation);   }
return Class.verifyUserToken(user, session.password);       } else if (isAdminScope(session.scope)) {
}         return false;     }
if (isNumber(k)) {           if (!isInteger(k) || k < 0) {             throw new TypeError('Positive integer value expected in function permutations');           }
EffectCompositor.prototype.getSSAOTexture = function () {     return this._ssaoPass.getTargetTexture();
import { PLANE_GEOM } from './utils/geometry-factory'; import { BACK_DEFAULT } from './utils/material-factory'; import checkProperty from './utils/property-check';
if ('function' !== typeof stepRule) {             throw new TypeError('Game.shouldStep: stepRule is not a function.');
return 'application/octet-binary';
firstItemOffset = $firstItem.offset().top;     for (i = numItems; i > 1; i--) {
this.getstate = function(select) {   var sel = this.files(select),    cnt = sel.length,
for(let i = 0; i < args.length; i++){      var arg = args[i]
if (config.packages) {             for (i = 0; i < config.packages.length; i++) {                 config.packages[i].location = baseUrl + config.packages[i].location;
}); CKEDITOR.instances['editor'].on('change', function() {
buf = BN(this.stack.length).toScriptNumBuffer();           this.stack.push(buf);
kafka.on('message', function(message, commit) {             _options.bus.callback(JSON.parse(message.value));
context.beginPath();         for (x = 0; x < width; x++) {           var time = x / width * duration;
senchaRows = this.get("sencha");                     if (senchaRows) {
function failStatic (basename, ...args) {   it(`should refuse to load '${basename}'`, function () {     let failed = false;
.fail( function() {                 alert( errorMsg );             } );
if (this.origin_soldier) {           this.log("play_mode では盤上の駒を駒台に置くことはできない")           return true
}    else sails.on('hook:controllers:bound:actions', this.bindCRUDRoutes);
} else {    tmp = a.pipelineSource();    code += a.transformSource();
}     mount(parent, child, current);
UserAgent.prototype._onAcceptSuccess = function _onAcceptSuccess(ist, dialog) {   this.inviteServerTransactions.delete(ist);
html = html.replace(/@CLASSNAME/g, '');       break;     default:       break;   }
ascii,         encryptPrivateKey,
return str.split('').reverse().join('').replace(/^,/, ''); };
result = true;         if (isSuperscriptAtom(stream)) {
var SPAN_CLASS = 'number-display';     var _formatNumber = d3.format('.2s');     var _chart = baseMixin({});     var _html = {one: '', some: '', none: ''};
positionBelow: [left2, top2],         length,
let results = _.transform(settings, (result, setting) => {         let merged = v.merge(setting, routeTableSettingsDefaults, mergeCustomizer);         let errors = v.validate({
try {                     this.writeToCache(descriptor, config);                 } catch(e2) {
var OPCUABaseServer = require("./base_server").OPCUABaseServer; var OPCUAClientBase = require("node-opcua-client").OPCUAClientBase;
var name = this.ds[i+1] || this.ds[i];      this.graphs[gid].updateDataset(       name, instance
import React from 'react'; import PropTypes from 'prop-types';
}    , delete_detail: function delete_detail( bundle ){
const logger = winston.createLogger({     level: process.env.NODE_PRODUTION ? 'info' : 'debug',     format: winston.format.combine(
s.delete(next);         next += 1;         deliver(vatID, msg);       } else {
match = buffer.toString().trim().match(/#!(.+)/i);     if (match) {
.update('shouldRefetchData', v => !v);     case SUBMIT_TEMP_GROUP_SUCCEEDED: {       const newGroup = state         .get('newGroup')
exports.removeEmpty(value)   for (let i = 0;i < list.length;i++) {     if (list[i][key] === keyValue) {
else if ( c === "total" ) {           a = 1;         }
Cut(function(root, container) {   Cut.Mouse(root, container, true);
case 0x44:      return this.parseD(buffer, length);   case 0x45:
externalClasses: ['wux-class'],     data: mergeOptionsToData(defaults),
if (err) return cb(err)         this._loadArchive(this.props.archiveId, context, (err, archive) => {
let rstOutput = '';     if (self.config.rst) {       rstOutput += `${self.config.rstTitle}\n`;       rstOutput += `${'='.repeat(self.config.rstTitle.length)}\n\n`;       rstOutput += `.. code-block:: shell\n\n`;
return false   }   if (Memory.spawnqueue.index[this.name][name]) {     return true
return config; }
var flows = this.get('elements.Flow').content;    var toSend = flows.length;    var toReceive = toSend;    if (!toSend) {
act.setAttributes(activity);             this.__analyzerDB.activities.addEntry(act);
self.hoodie.emit('warn', err.message);               }
}     this.exit()   }
import SocialButton from '../components/SocialButton'; import { getCurrentYear, socialLinks, manifest } from '../lib/constants';
actions: {     completed(hostConfig) {
q[_this.get('queryKey')] = query;       const queryObj = Ember.$.extend(true, {}, q , _this.get('params'));
name:'ngAnimate',                       files:['bower_components/angular-animate/angular-animate.js']                     }),                     $ocLazyLoad.load(                     {
import { storiesOf } from '@storybook/react';  import {
ol_layer_Geoportail.getCapabilities = function(gppKey) {   var capabilities = {};
ret.priority = (raw_packet[offset] & 0xE0) >> 5;
'markdown': staticPath('js/markdown.js'),         'mathrender': staticPath('js/mathrender.js'),         'citations': staticPath('js/citations.js')     }
} else {    taskList.removeTask(task);
const StaticTeamDescription = ({description}) => (   description ? <p className="description read-only">{description}</p> : null );
import BaseLayout from '../layouts/BaseLayout'; import {
return axios.get(this.baseUrl);   }
past(years, refDate) {   let date = refDate ? new Date(Date.parse(refDate)) : new Date();
drawValues(scope.vs, canvas, scope.config, col);                            }
case REQUEST_ALL_KNOWTATIONS:       onSuccess = knowtations => {         dispatch(receiveAllKnowtations(knowtations));
return this.use(route, handler, method);
return this;   } }
module.exports['internal/streams/pipeline.js'] = [     once   , errorsTwoLevel
for (let i = 1; i < args.length; ++i) {     if ((obj = args[i])) {       for (let key in obj) {
scientific: 'modules/scientific/0-0-1/js',   shakemap: 'modules/shakemap/0-0-1/js'  },
var user = req.body;     if (!user.username || !user.password) {
function testcase() {   if(Number.isNaN(Math.hypot(NaN, 3))) {    return true;
log.start('building static site')     const build = require('./lib/build')     build(opts)
case exports.UNZIP:       status = zlib_inflate.inflateInit2(         this.strm,
}     return s;
var firstDayOfWeek = scheduler.get(FIRST_DAY_OF_WEEK);     var monthStartDate = instance._findCurrentMonthStart();
"use strict"; function Launcher() {}
return this; }
let devDependencies = config.devDependencies;                  for (let key in addonConfig) {
orion = {};
} else if (isVPlaceholder(input)) {   hydrateVPlaceholder(input, dom);  } else {
var waitForLoad = function(callback, constructor) {   if (document.body)     return callback.call(constructor);
this.creator.classList.remove('is-hidden');   }
},           punctuation: [/[\[\]().,:`]|->/],           operator: [
var rePostInline = /^[-\s`'")\]}>/:.,;!?\\_]/;     var reExamples = /^\s+(>>>|In \[\d+\]:)\s/;
});     case CHANGE_SIDEBAR_TAB: {       const isActive = action.activeTab === 'events';       if (isActive === state.active) return state;
try {     const branch1 = master.get(['deep', 'real']).create()     branch1.set('override')   } catch (error) {
await knex.raw(`drop database "${target}"`);     return endProgram(0);   } catch (err) {
if ( data.activated && !ops.noAck ) {      messages.addMessage( ops.message );
if (date) {                             self.val(formatters.date.dateString(date));
Seadragon.Drawer = function Drawer() {     this.ensureArguments(arguments, 'Drawer');
parseFloat(m[1]) > parseFloat(m[2]))    {     Y.error(e.name+' has min_value > max_value', null, 'FormManager');    }
nodeName = nodeExpression.getOperator();             if (TreeUtil.isBinaryExpr(nodeExpression)) {                 paramExpressions.push(nodeExpression.getLeftExpression());
else{       final = mw.color.hexToRgb(CSScolor);       final.alpha = 1
var data = [];       options = {         delimiter: config.delimiter,
return "八";             case 9:                 return "九";
this.data.children = {}     }     if (this.data.children[label]) {       return true
define(function(require) {     'use strict';
var box = new qx.ui.layout.HBox();       var container = (new qx.ui.container.Composite(box)).set({width: 500, decorator: "black", backgroundColor: "yellow"});
console.error("Got a non-GET request to the redirect destination URL");         res.writeHead(400);         res.end();         return;
ngClick: "deleteGroup(\{\{ group.id \}\})",                 awToolTip: 'Delete group',
gl.blendFunc( gl.SRC_ALPHA, gl.ONE ); var scene = glBoostContext.createScene(); var camera = glBoostContext.createCamera(   {
return accumulator;   }
const contact = this.currentContact()     return (contact && contact.messages().fetch().length === 0) ? assignment.campaign().initialScriptText() : ''
sequence: DS.attr('number'),     tab_text: DS.attr('string'),
if (angular.isDefined(previousRangeDataPoints) && previousRangeDataPoints.length > 0) {                     $log.debug("Running PreviousRangeOverlay");                     prevRangeLine = d3.svg.line()
M.DialogView = M.View.extend({
}     users.close();   });
this.addEventListener('mousemove', this.parent.move3d.bind(this.parent, this, controlAxis));       break;     case ROS3D.INTERACTIVE_MARKER_MOVE_AXIS:       this.addEventListener('mousemove', this.parent.moveAxis.bind(this.parent, this, controlAxis));
var TextMode = require("./text").Mode; var FtlHighlightRules = require("./ftl_highlight_rules").FtlHighlightRules;
}); }; module.exports = ListNotUsedForFormatting;
DataAccessObject.prototype[i] = dataSource.constructor.DataAccessObject.prototype[i];         }     }
import PropTypes from 'prop-types'
}       } else if(list[i] instanceof Node){         nodes.push(list[i]);       }
})(jQuery);
this.monitor_element = monitor_element;   monitor_element.setAttribute('id', 'submon');
it('should call onSubmitFailure function with errors when the invalid form is submitted', done => {     const spy = sandbox.spy();
if (mergePolys instanceof Error) {     done(err);
productionSourceMap: app.buildSourcemaps === true ? true : false,
},         drop: {             date: d => new Date(d.date),             onMouseOver: (commit) => {
}     $scope.delBookmark = function(bookmarkId) {         var params = {             id: bookmarkId
if (me._sandbox.getUser().hasRole(me.instance.conf.adminId)) {
}));          beforeEach(inject(($q, $rootScope, $compile, StateService, FolderService) => {
inner = core( head );   while ( !false ) {      switch (this. lttype) {
let exists = []   if (thisid) tags = tags.filter(_ => thisGroupMap[_.id].data.includes(thisid))
for (i=0; i < offers.length; i++) {     var rows = orderBookScreen.makeRows(offers[i]);
this.a_nextPos = gl.getAttribLocation(program, 'f');
valid = state.validate(this, params, transition);       if(asyncCount === 0) callback.call(this, valid && result);     } else {
_Format.prototype.date = function (date) {   date = new Date(date)   return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()  }
export const packageNameRegex = /^reptar-/;
export async function create(parentValue, { name, description = '' }, { auth }) {   if(auth.user && auth.user.id) {
openInBrowser(schemesHtmlPath, function(err) {       if (err) {         logger.error(`Unexpected error: ${JSON.stringify(err)}`);       } else {
matcherRegex : (function() {   var emailRegex = /[\w\-;:&=+$.,]+@/,      domainNameRegex = Autolinker.matcher.domainNameRegex,
for(var i = 0; i < slides.length; i++) {     var oldPosition = positions.shift();     var newPosition = oldPosition - 100;
}                     if (! old) old = new pc['Vec' + len]();                     for(i = 0; i < len; i++)                         old.data[i] = value[i];
borderBottomStartRadius: true,   borderRadius: true,
.attr('class', 'member-entity-name')                         .text(function(d) { return displayName(d.member); });
import NowViewingItem from './NowViewingItem.jsx'; import ObserveModelMixin from './../ObserveModelMixin';
function testHasOneHelpers(test, orm) {   return Promise.resolve(); }
let pos = 0;         for (const i of tup) {           if (i.name != null) continue;
var unassignObj = getTagsToAddRemove("unassign", tags, origTags);       var collection = 'service_templates/' + id + '/tags';       if (assignObj.resources.length > 0) {
var matchCount = 0;           for (var param in targetParams) {             if (param != 'q' && params[param] && params[param] == targetParams[param]) {
undo: 'Son değişikliği geri al (Ctrl+Z)',     validationCannotMove: 'Alt alan olarak taşınamıyor',     autoType: 'Alan tipi "otomatik". ' +
'line-height': this.getMjAttribute('line-height'),       'text-align': this.getMjAttribute('align'),
export default createComponent([ExportModal, ModalComponent], {     modules: ["Modal" , "CodeHighlight", "Loader", "Button"] });
return value;    }
if (body.error) {                         botkit.debug('API ERROR', body.error);                         return cb && cb(body.error.message);                     }
if (_aLeftChannel[pos] < -SPIKE_THRESH) {                         startSpikePos = pos;
wif = getProperWif(['active']);       }
function ExperimentsService($resource) {     var ExperimentsService = {}     var res = $resource('experiments', null, {
function buildTree() {   var material = new THREE.MeshFaceMaterial([
injectCSS('res/features/main.css'); ensureDefaultsAreSet().then(applySettingsToDom);
$(iframeElement).on('load', function () {             var already_loaded = false             updateIframeLoadStatus(1);             console.log("iframe loaded");
tricksByUser: function() {     var blockUserTrick = '.block-tricks-user';
return self.tab.vm.maPager.load();         },         attached : function() {             var self = this;
const params = this.getParams(),       scene = Physijs.default !== false       ? new Physijs.Scene(
import React from "react"; import PropTypes from "prop-types";
var spaceLeft = false;    vAlign = null;    if(this.parser.source.substr(this.parser.pos).search(/^\^([^\^]|\^\^)/) === 0) {
o = $.extend(this.options, this.element.data('options')),    input = this.element;
}       case Actions.ADD_PRODUCT_TO_LIST: {         let idArray = [...state.items];         idArray.indexOf(action.id) === -1 ? idArray.push(action.id) : console.log("Item is already in list");
return link; };
var cacheKeyLocale= context.locale ? context.locale + "_" : '';    paymentProductSpecificInputs = paymentProductSpecificInputs || {};    var promise = new Promise()
decimalsRounded: 2       })     };
}, function(err, n) {           if (err) {
case 'mssql':       return `[${identifier.replace(/[[\]']+/g, '')}]`;
console.log(`not ok - error during cluster.collapse: ${err}`);             return callback(err);         });
}                     for (i = 0, len = value.length; i < len; i++) {                         light = value[i];
console.info("Time to load api indexfile from server: " + (loadEnd.getTime() - loadStart.getTime()) + "ms");       }, this);       req.addListener("failed", function(evt) {         alert("Couldn't load file: " + url);
import { defineMessages, injectIntl } from 'react-intl'; import Waypoint from 'react-waypoint';
record = registeredUIPreviewerTarget.contentStore.getRecord(             itemId.replace(/\.[^.]+$/, "")         );
var paths = this.searchPaths.filter(function(p) { return existsSync(p); });             var watcher = chokidar.watch(paths);             var _this = this;
getItem: function(hash) {       if ( (item = this.attachedItems[hash]) ) {
var verticalHeights;   verticalHeights = window.getVerticalHeights();
'use strict'
}     _This.$GetEvent = GetEvent;     _This.$EventSrc = function (event) {
it('> 1 amino acid long sequence', function() {   aaData = getAminoAcidDataForEachBaseOfDna('atgtaat', true);
define(['imp/otherModule/DataHelper', 'imp/renderModule/nodeShapeRelative'], function(DataHelper, nodeShapeRelative){
intake.create = function(options){     var context = require("zeromq");
: table[field].lt(context.request.urlTokenized[index - 1])           case "explicit":
return false;   };  };
describe('.reset()', () => {     var store = new JsonApiDataStore(),         payload = {
if (typeof line === 'string') {       var data = /^([^(<]+)\s*(<([^>]*)>)?\s*(\((https?:\/\/[^)]+)\))?/.exec(line)       line = {
$("#"+sourceId).on("select2:open", function () {                 var predefinedStructs = self._package.getStructDefinitions();
chrome.storage.local.get(message.data, function(response) {              sendResponse(response);
function(error) {       $scope.alert_service.error("Error while clearing index cache", error);      }
r = BigInteger.small[diff];   if (this._s < 0) {
var vm = require('vm'); var nunjucks = require('nunjucks');
__inline('./tab');
break;         case 6:             if (visitor.onCompositeType) {
if (id !== data[pkName]) {     err = new Error(g.f('{{id}} property (%s) ' +             'cannot be updated from %s to %s', pkName, id, data[pkName]));
$("#github").removeClass('hidden');     }else if (value === 'asn'){         $("#github").addClass('hidden');
while ((parent = parent.parent)) {            nestedIncludes = [_.extend({}, child, { include: nestedIncludes })];
(function() {
reporters: ['mocha', 'coverage'],
document.getElementById("id_snippet").cols=40;       });   $('#id_type').bind('change',function(event){
return timestamp; }
});     return formatted_portfolio; };
angular.module('copayApp.directives')   .directive('incomingDataMenu', function($timeout, $rootScope, $state) {     return {
var chance = require('chance')(),   url = require('url'),   PouchDB = require('pouchdb'),
return this.i18n.Suspended;                 case 4:
viz.ui.button = setup_buttons (viz, viz.ui) ;      var playerConfig = {
this.init( );   }   Selectpicker.prototype = {
return res.type('application/json').status(200).send('{"state": "' + state + '", "key": "' + req.params.name + '"}');       });
entryOrderLength = entryOrder.length;                 for (i = 0; i < entryOrderLength; i++) {                     o.push(entryGroups[entryOrder[i].format(dateCompareString)].join('') + this.groupEndTemplate.apply(this));
pool.trigger(_tick_);         $.reel.cost= (+new Date() + $.reel.cost - start) / 2;         return ticker= setTimeout(tick, max(16, 1000 / tempo - $.reel.cost));       }else{
cwt.CoSheet = my.Class( cwt.SheetDatabase, {
}   state = stringReduce(state.keypath, reducer, initialState)   state = reducer(state, 'END', state.keypath.length, initialState.keypath)
function _clickItem(scrollWheel, event) {         if (scrollWheel && event && event.target) {             scrollWheel.scrollController.goToRenderNode(event.target);
it('returns root dir from config', () => {   const { rootDir } = createCosmosConfig(getCwdPath('..'));   expect(rootDir).toBe(getCwdPath('..'));
var relation = new Relation(left.header, left.data)     for( i = 0; i < right.data.length; i++ ) {       relation.push( right.data[i] )     }
}   } catch(e) { console.log(e); }   return false;
return fr.readAsArrayBuffer(packet.data); }
};     function resetCrop() {       viewerStore.imageRepresentationProxy.getCropFilter().reset();       viewerStore.croppingWidget.resetWidgetState();       resetCropHandlers.forEach((handler) => {
Object.defineProperty(exports, "__esModule", { value: true });
case fragmentValueTypes.COMPONENT:          break;   }
'/cgi-bin/lookup-tunnel-dns', '/cgi-bin/rootca', '/cgi-bin/log/set']; var PLUGIN_PATH_RE = /^\/(whistle|plugin)\.([^/?#]+)(\/)?/; var STATIC_SRC_RE = /\.(?:ico|js|css|png)$/i;
success(function(){                         ModalServ.motechAlert('security.delete.user.saved', 'security.deleted');                         $scope.showUsersView=!$scope.editUserView;
const library_name = 'react-phone-number-input'
}   ugrid.end();  })();
var lines = text.split(splitRegExp),         line, remainWidth, isLaseLine, newLineMode;     for (var i = 0, linesLen = lines.length; i < linesLen; i++) {         line = lines[i];
var keymap = top, valmap       for( var i = 0; i < keys.length; i++ ) {
function _pluginSyntaxAsyncGenerators() {   var data = _interopRequireDefault(require("@babel/plugin-syntax-async-generators"));   _pluginSyntaxAsyncGenerators = function _pluginSyntaxAsyncGenerators() {     return data;
mouseUpHandler() {     this.mouseDown = false;
this.object = object;  this.domElement = domElement;
import React from 'react'
}   return obj }
var v = req.param('v');   var thumbnail = '/'+THUMBNAILS_DIR + v + '.jpg';
import React from 'react'; import {
server.close();   }
get events() {       return {}     } }
HEADER_FORMAT = '\n',  BRACKETS_REGEXP = /(?:^\[)|(?:\]$)/g;
var field_array = [];     obj = kbn.flatten_json(obj._source);     for (var field in obj) {       field_array.push(field);
} else {       seekTime = this.hoverPosition * this.duration     }
} else {       for (var keys = _.keys(data), i = 0, res = [], l = limiter || keys.length; i < l; i++)         if (predicate(data[keys[i]], keys[i], data)) res.push(data[keys[i]]);
args.schema = path.join(process.cwd(), args.schema); args.destination = path.join(process.cwd(), args.destination); const validSchema = validateSchema(args.schema);
return edge[+(edge.left === cell.site)];   }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/lemene-1334267482.swf",  admin_props : false,
ok(_.isFunction(layout.setView), "Has the setView function"); });
var deferred = new DeferredGlassPaneTarget();   var renderedHandler = function(event) {
}                 return null;             case 'vec2':
function HudObject () {} HudObject.stdWidth  = 40;
const swagger = require('swagger-parser'); require('colors'); const _ = require('lodash');
import { Link } from 'gatsby'; import PropTypes from 'prop-types';
return result;   }   var regjsparser = {
var names = Object.keys(tree);   for (var i = 0, l = names.length; i < l; i++) {     var name = names[i];
media.playtime = time   }
if (xhr.readyState === 4) {       console.log('readystate is 4');
var x1 = y1 = 0.0;   var x2 = 1.0, y2 = this.canvas.width / this.canvas.height;
function AgenciesController () {} })();
var failure_T = 'Could not Triangulate'
res.end();   }  });
vdom.val = el.textContent;           for(var child in vdom.children) {             vdom.children[child].val = compileTemplate(vdom.children[child].val);           }
cbus.server.searchPodcasts = function(searchTerm, callback) {      xhr({        url: "https:
if (params.viz.resize) {
set(value) {           if (!Array.isArray(value)) value = [String(value), {}];
return 'pending';       case 1:
switch (action.type) {     case types.ADD_FRIEND: {       const len = state.friends.length ? state.friends.length : 1;       const newId = (state.friends[len - 1] + 1) || 0;
render(pageBody, pageData) {     const layoutTemplate = this.layouts[pageData.layout];
return 'application/json';         case Resource.XHR_RESPONSE_TYPE.DEFAULT:
}, function () {         });
ecma: 6,                         module: true                     },
function showCashBalance(augur, address, callback) {   augur.api.Cash.balanceOf({ _owner: address }, function (err, cashBalance) {
try {                         return new global.Blob([str], {                             type: 'application/octet-stream'
return conn.connect(config); } module.exports = createClient;
case "amortization":                         calculation_method = calculateAmortization;                     break;
}).catch(done); }
}       } else {
innerTableDate:function () {             let self = this;
return false;
export default class DataGridImpl extends Common.Object {
export function merge(oldCookieString, newCookieString) {   const oldCookieJar = oldCookieString ? parse(oldCookieString) : [];   const newCookieJar = newCookieString ? parse(newCookieString) : [];
function tocView(mode) {     var toc = $(".github-toc");     if (toc) {
getBrowserName : function() {    return this.browserInfo.browser;   },
write(ctx, ctx.currentIndent);                     var childNodeText = children[iTextChild];                     ctx.currentOMNode = childNodeText;                     writeSVGNode(ctx, iTextChild);                     write(ctx, ctx.terminator);
const versionFile = path.join(__dirname, '../src/version.js'); const newContent = `export default '${newVersion}';\n`; fs.writeFileSync(versionFile, newContent);
firstStep = false;    }    for(var i in obj){     if(typeof obj[i] == 'function'){
db.rpush("log-" + this.room, this.cmdstr, __bind(function() {               return emit(this);             }, this));
