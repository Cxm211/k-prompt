if(fs.existsSync(path)) {     throw new Error('The file "' + path + '" already exists!');   }
this.formTitle = '修改字典'         var details = []         details.forEach(function(val,index){           var arr = val.split(':')
var response = {      cookies: req.cookies,     host: req.headers.host,     cache: qs.parse(req.headers['cache-control']) || {}
var _super = this.$super,                     _self = this.$self;
ret[inputtypes] = (function(props) {         for (i in props ) {             f.setAttribute('type', props[i]);
var that = this;         this.__proto__.constructor = that.constructor;         this._properties = attrs || {};
}    var name = $this.val(),      filter = controls.search.filter;
self = this,      ta   = $(textarea),
var ring_desc_start = ring_start + 4;
StringPrototype.escape = function() {     return _.escape(this) }
}; }(this));
if (!gl) {         throw new Error("WebGL: Failed to create a WebGL context!");     }
var concat = require('concat-stream') module.exports = load
evt.preventDefault();                             self._trigger('selected', null, file);                             modal.close();
var baseDir = config.assetsDir + 'img';     src = this.buildGulpSrc(src, baseDir, '**
{                     constructor: FindSearch,                 }
this._streamBindings = undefined;     this._super(...arguments);   },
for (var k in result.response.headers) {                                         if (result.response.headers.hasOwnProperty(k)) {                                                      result.response.headerArray.push({                                             name: k,
targetElement.setAttribute('id', container.getAttribute('id'));     }     for(key in container.style) {       targetElement.style[key] = container.style[key];
}(this));
"Position cursor after last char and hit backspace", function() {         this.editor.selection.set({           start: [0, 4],
if (input.eventType!= 1) {    throw new Error("Parser must be on START_ELEMENT to read next text.");   }
var section = null;
describe("create an h5 and group ", function () {          let file;
var buffer = context.createBuffer(1, 44100, context.sampleRate)       var upsampled = utils.upsample(array, 44100)
}       }, _callee);     }));
}             handler(self.collectEventData(element, type, ev));         };
a = query.split(/\s+and\s+/);            for (k = 0; k < a.length; k++) {             s = a[k];
async function _setup (accounts){   mockToken = await MockToken.new();
var $export = require('./_export'); var $task = require('./_task'); $export($export.G + $export.B, {
helpers.each(values,function(dataPoint,index){         var color = colorManager.getColor(dataPoint);         datasetObject.bars.push(new this.BoxClass({
method: 'POST'         }).done((resp) => {             this.set(resp);
if (source.warns)         warns.push(...source.warns);
.reply(500);       this.customDomains.verify(this.data).catch(function(err) {         expect(err).to.exist;
Validator.prototype.validate=function(grp, args){     var isGroup =!(!grp ||!grp.length);     var inputs  = isGroup? this._inputsForGroups(grp) : Object.keys(this._inputs);
function compact(a) {     var results = [];
}(this));
Promise.all(promises).then(function () {                     var canvas = document.createElement("canvas");
return globalFunctionTrampoline[globalFunctionName](...args)       } else {
if ( isFunction ||!( l <= 1 || typeof value!== "string" || jQuery.support.checkClone ||!rchecked.test( value ) ) ) {    return this.each(function() {     if ( isFunction ) {
return {       contentType : HoneyProxy.getContentTypeFromHeaders(request.headers)      }
spyOn(this.addon, 'getDOMImage').and.returnValue(stubbedImage);         this.$el.on('input', function () {             inputTriggerCount++;
var value;         return (function(...args) {             if ((value === undefined))(value = f.apply(undefined, args));             return value;
if (sourceName) {         this.collection.add(val);         memo[this._sourceIdAttr(name)] = val.id;       } else {
for (let p = 0; p < polygons.length; p++) {         let polygon = polygons[p][0];
values = this.uniqueValues;     }     this.uiFilteredValues = {};     for (var i = 0; i < values.length; i++) {
functionPrivateKey(version, buf, compressed) {  PrivateKey.super_.call(this, version, buf, compressed);   if (compressed!== undefined)
var server = require('./server') var request = require('../index') var tape = require('tape') var s = server.createServer()
'upper',     function(s) {       return (String(s).toUpperCase());     }
function fill (a, b, c) {       return setter(Array.prototype.fill.call(this, a, b, c))     }
return function() {               return __slot_1.self_sig = arguments[1];             };
var focused  = dates.eq(date,  this.state.focusedDate,  'year')          , selected = dates.eq(date, this.props.value,  'year');
}     }, _callee6);   }));
return this._config; };
, 'collection'    , 'connections/server'    , 'cursor'
exports.testCases = [      'specs/util-path/test.html'
bespin.subscribe("file:saved", dojo.hitch(this, function(e) {             this.fetchFileUpdate(e.filename);         }));
TNTools.register('fontChange', function() {   var font = proof.val();   proof.empty();
}         return fn(...parameters);     }
cache: false,             data: $form.serializeArray(),             type: 'PUT',
s += "var " + __rt + "=require('streamline/lib/callbacks/runtime').runtime(__filename)";   for (var key in rt) {    if (!rt.hasOwnProperty(key)) continue;    var k = _safeName(options.precious, key);
if (this.__isDrag) return;         if (!this.__scrollOntoEdge()) evt.preventDefault();         updateRecords(evt);
var request = require('request')  , qs = require('querystring'); module.exports = function routes(app){
function native_BoolImplementation_EQ(other) {   return typeof other == 'boolean' && that == other; }
case KEY_ENTER:             return onEnter(...args);         case KEY_TAB:
else {                 throw new me.Error("no level loader defined");             }             return true;
var Advisor = function() {  this.pointcut = null;  this.advice = null;
, rewrites = [        { from:"/", to:'pages/index.html', before: function(req, res, cb) { console.log(req.connection.remoteAddress); cb() }}    , { from:"/edit
this.checkStates();
var Atom = I.inherit(function Atom() {     AbstractMutable.call(this);     if (arguments.length) this._emitValue(arguments[0]);
return _ret = (_temp = (_this = __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default()(this, (_ref = Demo.__proto__ || Object.getPrototypeOf(Demo)).call.apply(_ref, [this].concat(args))), _this), _this.state = {       disabled: false,
, join = require('./shieldbattery/join') var socket = io.connect('https:
componentDidUpdate(prevProps, prevState) {     if (this.state.editing &&!prevState.editing) {
return cb(err);              fs.write(info.fd, msg);
}       return this.fromBuffer(buf,...rest)     }
const argument = [...arguments];     this.imageURL = ``;     this.options = {};
} else {         throw new Error(typeof data === 'object' && 'data' in data? 'data' : typeof data);       }
storeErrors(filterDuplicates(idCounts), this);
if (Array.isArray(this._renderProperties)) {   for (var i = 0; i < this._renderProperties.length; i++) {    render(this._renderProperties[i], this._encodings, this._options);
, end = { p : verb.last( knots ), l : totalLen }  , mid = {};
if (layers.hasOwnProperty(id)) {       throw new Error('invalid or duplicate layer id:'+ id);     }
render: (text, record) => (       <Button color="primary" size="sm" onClick={() => hoodleDeleteCrud(record.id)}>         Delete
var map = self.get("map");
"Integer": new Integer(),   "Boolean": new Boolean()  };
everyHour = 5 || minute * 60; function updateScript(script) {
Pipeline.prototype.index = function() {     return this.add('', 'Index', arguments);   };
(subAsParent, schemaFromAllOf) => {           collapseSchemas(             subAsParent,
var request = require('../index') var http = require('http') var tape = require('tape') var methodsSeen = {
for (var j=0; j<wires.length; j++) {                         var node = flows.get(wires[j]);
function(language){  return this.toTypedExpression(language).s; }
if (response) {           for (i in response.structure) {             if (response.structure.hasOwnProperty(i)) {                 nest.structure = i;                 nest.presence  = response.structure[i].away === false? 'on' : 'off';
exchange () {     throw new Error('exchange Not Yet Implemented', 'AbstractOverlay.js');   }
describe('2.8 connection request queue (basic functionality)', function(){     function getBlockingSql(secondsToBlock) {
evt.target = el;   el.dispatchEvent(evt); };
if (confProps.scales!= null) {                 confProps.resolutions = [];                 for(var i = 0; i < confProps.scales.length; i++) {
, doc = xmlbuilder.create()        , child = doc.begin('plist', XMLHDR, XMLDTD).att('version', '1.0')        , next, tag_type, i, prop;
, inherits  = require('util').inherits
} else {             if (newListener!== 'newListener') {                 if (events[arguments[0]]) {
this.toggleBottomMenubar();         },
typeof getter =='string'? getter : getter && getter[name] || name,          firstArg);
}     this._items.sort(function (a, b) {return mcmp(key(a), key(b));}); }; list.PY$insert = Function(function(index, x) {
return {     type: actions.UNLOCK_IN_PROGRESS,   }
this.fire( YS_COMPLETE );       }.bind( this );
}     return result;   }).catch((error) => {
'use strict'; var deferred = require('../../lib/deferred'); module.exports = {
accepts: ['js', 'css'],
bus.emit('file-add', {         source: that.id,         name: file.name,
csv_row.push(friend.name);     for (i = 0; i < 3; i++){       this.addColumn_(csv_row, friend.email[i]);     }
if (!this.get('selectedRepo')) { return; }         this.set('category.customapprepo', this.get('selectedRepo'));
}         this.set('memberCount', this.store.peekAll('member').length);         this._lastFetchDate = newFetchDate;
function log(...aArgs) {  utils.log('autoHide',...aArgs); }
var constr = function () {                 var obj = this;
doneArgs = [...args ]       return
module.exports = function(palette) {  return new Palette(palette); }
done();       });     });
if(Array.isArray(encoded)){     for(var i = 0; i < encoded.length; i++){      nextLevel(encoded[i]);
if (finalConfiguration.zoomable) {                 this.zoom = zoom(d3.select(this), dimensions, scales, finalConfiguration, data, draw);             }
temp = replace     replace = []     for (i = 0; i < search.length; i += 1) {
function hoverTruncate(grid) {     var $grid = $(grid);     if ($grid.hasClass('hovercard')) {
cb(null, file);  }, function (cb) {
that.send(from, 'Hi'+ from + ', nice to meet you!');       });
var guid = $(this).attr('data-table-guid');
favMapView.render();      this.$('.js-favMapTitle').removeClass('is-hidden');     }.bind(this));
var RequestObject = Ember.Object.extend({     _init: function _init() {       this._super.apply(this, arguments);
try {         return expressionCompile(expression).apply(instance, args);       } catch (e) {
action = function(varName) {                 storedVars[varName] = accessorFunction();             };
const arg = combinator.args[i]                     switch (arg.type) {
var i, len = this.masksProperties? this.masksProperties.length : 0;     this.viewData = createSizedArray(len);     this.solidPath = '';
})(   this.Blotter, this._, this.THREE, this.GrowingPacker, this.setImmediate );
});   this.ipcClient.on('error', function (error) {
return key_promise.then(function(key) {       config = that.getSignConfig(getJwaNameForSignKey(key));       return Jose.crypto.subtle.verify(config.id, key, signature, Utils.arrayFromString(aad + "." + payload)).then(function(res) {
type: Array,             default: () => []         },
const checksum = JSON.parse(new Buffer(process.env.ASSETS_CHECKSUMS, 'base64').toString('ascii'));     Object.keys(uploadOptions.assets).forEach((srcPath) => {       const checksum = checksum.assets[srcPath];
function e(e) {             var i = t.call(this) || this;
default:         throw new Error('invalid matrix mode'+ mode);     }
promise = Q.resolve();             that._logger.warn('not-installed', name, {                 name: name
describe("copier", function() {   it("should send from Emitter to Collector via copier", async function() {     let result = [];
const results = []   content = String(content).replace(/\/\*.+?\*\/|\/\/.*(?=[\n\r])/g, '')   while ((match = exports.CSS_IMPORT_REG.exec(content))) {     results.push(match[2])
} else {       for (key in styles.computed) {         computedStyles[key] = styles.computed[key](styles);
this.anim(                 elem,
var typeName = this._getTypeNameForMessage(payload)           , cacheItem = new CacheItem()
items = this.filteredItems.map((item) => {       return <option value={item.id} selected={item.id == this.curValue}>{item.text}</option>     })
it('add block', function() {     let editor = this.setEditor('<p>0123</p>');     editor.formatAt(4, 1, 'align', 'center');
}else{    for(var arg in this.options){     if(this.options.hasOwnProperty(arg)){      this.payload += '&' + arg + '=' + this.options[arg];     }
var touch = e.changedTouches[i]             var slot = slotted[touch.identifier]             if (slot === void 0) {
{  a = typeof(arguments[i+1])=="string"?  arguments[i+1].charCodeAt(0) : arguments[i+1];  if(a!=header[i]) return false;
var args = Array.prototype.slice.call(arguments, 0);                     this.trigger(...args);                 }
};     this.__doreq("DESTROY-EXISTS",getoptions,null,function(result) {       self.logger.debug("Returned rest api info: " + JSON.stringify(result.doc));
showPageLoadingMsg: function( theme, msgText, textonly ) {    this.loaderWidget.loader('show', theme, msgText, textonly );   },
var c = w({ first: f('value') });       var result = c.build(this.grammar).fragment;       expect(result).to.eql('first = value');
var status = new app.Model.StatusUpdateModel();     status.set("attachmentIds", []);     _.each($(e.target).serializeArray(), function(data) {
cwd: './src/',                 files: [ 'test
, sourceExtract = require ('./sourceExtract')  , gruntUtil = require ('./gruntUtil');
var findIn = require('../examples/find-in'); describe('integration', function() {   var db, modules;
if (rc!= 0) {         console.log("can not call subscribe command");         return -1;     }
});         this.hasUploaded = false;         this.$el.trigger('change');         this.render();
} else {         log(`Winner: ${this.filter('fastest').map('name')}`);       }
{             value = [];             for(var i=0; i<count;i+=2)
html += getFileHTML(path,val)             })             html += "</ul>"
}).catch(function(ex) {                 return that.alert(ex.toString(), 'danger');             });
return indent + "[object " + (obj.tagName || "Node") +"]";             var arr = [],type = $.type(obj),next = indent +  "\t";             switch (type) {
return (dispatch) => {     dispatch(actions.showLoadingIndication())     _accountManager.clearSeedWordCache((err, account) => {
inherit: SVG.Element,
this.isMounted = false     delete this.root._tag   } }
, end = null                    , _this = e.currentTarget;
function getBalances(request, response, next) {   var options = {
lang.mixin(this.config, this.commonConfig, this.appConfig);
return { metaInfo, tags } }
provider: '',       traits: this.getSourceTraits(),    },
if (!goog.array.remove(this.topComments_, comment)) {     throw Error('Comment not present in workspace\'s list of top-most comments.');   }
define(Array, 'partitionBy', function(fn) {     var partition = {};
function newFile(req, res, next) {     var that = this, params = req.params,         themeHome = getViewsHome(req.app), themeId = params.id,
}; const getSiteConfig = async function(source, destination) {     let siteConfig = {};
this.element = element;  this.store = [];  this.store[0] = new this.coords(-1,-1);
if( descriptor.resource.getRegistered(namespace)!== model ) {         throw new Error('namespace [' + namespace + '] has already been registered, autoRegister failed.');       }
function _merge (getKeys, a, b) {     return reduce([a, b], function (result, source) {         forEach(getKeys(source), function (key) {
if (!extensions.instancedArrays) {         throw new Error("WebGL: No instanced rendering support!");     }
const result = [];     for (var idx in listValues) {       if (listValues.hasOwnProperty(idx)) {         result.push(this.valueType.getValue(listValues[idx]));       }
describe('#compile_solidity', function() {     var expectedObject = {};
const getCollectionLoader = function(collection) {         return async function(filePath) {             const extension = path.extname(filePath);
this.get('player').setVolume(this.get('volume'));   },
{    throw new Error("insufficient read permissions on path");   }
function checkToEnd(pos) {       if (pos.y <= this.maxScrollY + threshold) {         this.trigger('pullingUp');
options: options,
propCallback({             wavesurfer: wavesurfer           });
class UsersStore extends GetSetBaseStore {   constructor(...args) {     super(...args);
const key = [name, pipeline_name || '', +remote].join(':')   if (!this.asset_cache.has(key)) this.asset_cache.set(key, this._findAsset(name, pipeline_name, remote))   return yield this.asset_cache.get(key) }
module.exports = () => {   return async function(ctx, next) {     try {
var parsed = {};         for (var key in includeObj) {             if (includeObj.hasOwnProperty(key)) {                 parsed[key] = this._parseIncludeArgs(includeObj[key]);             }
if (_.contains([ "istate", "ostate", "state", "meta", "model", "connection" ], what)) {             _apply_persist("on", [model, connection]);         } else {
}             if (this_type == "checkbox") {
var ByteCode = new Array(); ByteCode.codes = {
if (proxyDetails.method && proxy[proxyDetails.method]) {             return proxy[proxyDetails.method](...proxyDetails.args);           } else {
return function (socket, nextstage) {     socket.emit(event,...rest);   }
default:         throw new Error('illegal char:'+ c);     }
function personalHolidays(data) {   var personalHolidays = [];   for(var i = 0; i < data.response.absences.length; i++) {
router.get('/connect', passport.authenticate('google', { scope:     [ 'https: router.get('/google/callback', passport.authenticate('google',
{          for(var key in modal_parameters.events){           if(modal_parameters.events.hasOwnProperty(key)){             $(this).on(modal_parameters.events[key], function(event){
trackException(error, fatal = false) {     GoogleAnalyticsBridge.trackException(this.id, error, fatal);   }
var tmpl = $('#job-template').html()    , from = 0;
case 114:              for (var idx = 0; idx < content.length; idx++) {                 records.push(processResult(content[idx], results.subcontents));
json = _a.sent();                         return [2, json? utils_1.assetFromJSON(json, _this.hostUrl) : null];                 }
HTMLMediaElement.prototype.play = function(...args) {       let p = originalPlay.apply(this, args);       if (p) {
} else if ("0".split(void 0, 0).length) {     StringPrototype.split = function split(separator, limit) {         if (separator === void 0 && limit === 0) { return []; }
const missedPrerequisites = this.checkPrerequisites(player);              missedPrerequisites.forEach(prereq => {
if (!json.txs) {         throw new Error('Could not fetch transactions from API')       }
var icon_dis;     for (var j = 0; j < res['RelatedTopics'][i]['Topics'].length; j++){         if (j + i > 3)              break;
Tabs.TabManager.initTabs = function (tabs) {   for (var i = 0; i < tabs.length; i++) {     Tabs.TabManager.addTab(tabs[i]);
const b = inst(this.body.infer())    const ps = new AST.TypeConstructor('Product', [])    for (const r of this.args) {
, fs = require("graceful-fs") rebuild.usage = "npm rebuild [<name>[@<version>] [name[@<version>]...]]"
console.log("CHAN_GET: " + url + " " + res.statusCode);                         stream_cb(that);                 });
var repoName= url.substring(url.lastIndexOf("/")+1,url.lastIndexOf(".git"));               var input = input.replace(/\s\s+/g,' ');               $("#"+id+".response").append("Cloning into '"+repoName+"'... <br/>");
initElements(nodes);     return init;   };
, async = require('async')  , isMac = process.platform === 'darwin';
) {                             that.markers[i].keep = true;                             doAdd = false;
this.blog.photo(this.options.blogName, postOptions, function(err, result) {   that._logResult(err, result, that.options.blogName);  });
} else {         throw new Error('illegal version:'+ version);       }
$.ElementList = function () {  function $ElementList(arr) {   this.src = Array.from(arr);  }
]).forEach(function(event) {     session.on(event, function(error) {       router.send(event, error);     });
var scale = this.container_div.width() / (this.view.high - this.view.low);         if (include_labels) this.zi_slots = {};         var dummy_canvas = $("<canvas></canvas>").get(0).getContext("2d");
function execSync(command, options) {   var opts = normalizeExecArgs(command, options, null);   var inheritStderr =!opts.options.stdio;
if (!$(this).parent().hasClass('dragging')) {                 $this.parent().css({ width: '' });             } else {
, Db       = require('../../')  , StringType = Db.String; module.exports = function () {
if (requestModel.security) {       for (var i = 0; i < requestModel.security.length; i++) {         var securityOption = requestModel.security[i];         var auth = AuthManager.getAuth(securityOption);
setTimeout(function () {      var oAppSettings = this._oCore.getConfiguration(),       oThemeSelect = this._oCore.byId("ThemeSelect"),
this.inherited("setAttribute", arguments);   if (key=="value"){    this._renderStars(this.value);
var fn = strings[this.fn];         return fn? fn(...newArgs) : this.fn + '(' + this.args.join(', ') + ')';     }
var calendar = [];             for (var i = 0; i < 6; i++) {
addon.port.on('socket-disconnected', function(response) {     disconnectingSockets[response.socketId]();   });
if (duration < 100) {       throw new Error('Duration should be greater than 100 milliseconds or it won\'t really be noticeable');     }
for (const pluginType in this.core.plugins) {         if (!this.core.plugins.hasOwnProperty(pluginType)) continue;         const plugins = this.core.plugins[pluginType]
clear: function(property) {             return function(fields) {                 return this.__clearPropertyValue([property].concat(_.isString(fields)? fields.split('.') : fields || []));             };
_cmdFilter: function(){    return this._filter.apply(this, arguments[arguments.length - 1]);   },
var datas = {};     var test_names = new Array();
that.options.autoplay = true;             if (!_built) that.load();         }
jsonfile.readFileSync(this.filepath);   return data;
var bigInsert = '';      for (var w = 0; w < config.widgetSets.length; w++) {          var file;
checkLogin(id, skey) {         let param = { id, skey };
var cometURL = String(document.location).replace(/\/jquery-examples\/.*$/, '') + '/cometd';       cometd.init({
}     var categorizr = {         is: is      , stringify: function () {           var args = [].slice.call(arguments, 0)
options.errorThrown = errorThrown;       if (error) error.call(this, e);     };
, len = socks.length    , sock = socks[this.n++ % len];
function handleEnter(event){         if (!this._down) return;         this._eventInput.off('mousemove', handleMove.bind(this));
step: function (ignoreTime) {
function _onEnd(){         this._dirtyLock--;         if (this._dirty && this._dirtyLock == 0) {
callback();       })      .catch(function (error) {
function moveNestedTags(child, i) {   for (var tagName in child.tags) {     if (!child.tags.hasOwnProperty(tagName)) continue;     var tag = child.tags[tagName]
module.exports = methods;   } else if (root) {     for (var key in methods) {       if (methods.hasOwnProperty(key)) root[key] = methods[key];     }
get Model() {         throw new Error("ModelHandler.Model must be overriden!");     },
toggleSelection: function (id, type, changeHead) {
var maxHeight = 0;  for(var i = 0; i < encodings.length; i++){    let options = merge(options, encodings[i].options);
return self._call(context, arguments);    };   },
return newModels;     }));     this.$namespace.publish('_.reset', oldModels);
setTimeout(function() {       if (this.windowSession.currentRecordingTabId[testCaseId] === activeInfo.tabId)         return;
var core = require('../../modules/_core'); var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify }); module.exports = function stringify(it) {
} else {     throw new Error('no view found for key'+ key);   }
function getPlayerByName(name) {     for (var i=0; i<discovery.players.length; i++) {         var player = discovery.players[i];
}             return apply.call(this, args);         };
var modul8  = require('../../')  , fs      = require('fs'); modul8('main.coffee')
this.onComplete(             function() {                 if (mustCompile) {
'use strict';
hook('onClick');    var url = getUrl(button);    var fullurl = 'u=' + encodeURIComponent(url);
var transform = function(chunk, enc, callback) {     return template(chunk);   };
var SimpleBrain = function(user){     Brain.call(this, user); };
}             throw new Error("unknown JPEG marker " + fileMarker.toString(16));         }
var key ='secret'      , pt = '☭'      , ct = twoFish.encrypt(key, pt)      , cpt = twoFish.decrypt(key, ct);
.done(function() {    var data = modal.find('form').serialize();
{     if (typeof(e) === 'undefined')      return false;
TextLayout.prototype = new RefObject;  TextLayout.prototype.constructor = TextLayout;
$(AVG_REPLICATE_VALS_BOTTOM_MENU).click(() => {         grnState.nodeColoring.averageBottomDataset =!grnState.nodeColoring.averageBottomDataset;         updateApp(grnState);
that do not match any member of "cols".`,       code: function(...args) {         const cols = this.getColIdxs_(args);         return this.DOT(this.GridRow.DATA, this.ArrayExtract.create({
var self = this;   args = _.toArray(arguments);   callback = extractCallback(args);   args[0] = Mongo.Collection._rewriteSelector(args[0]);
if (typeof (key) === 'object') {                 for (var name in key) {                     if (key.hasOwnProperty(name)) {                         this.setVisual(name, key[name]);                     }
function SaveCommand() {   SaveCommand.super.call(this, { name:'save' }); }
it('edits textbox', function() {       cy.get('@TextboxEl').within(() => {         cy.get('.widget-menu-regular').click({ force: true }).within(() => {
var Concur = require('Concur') var object = require('isomorph/object') var validators = require('validators')
constructor(){         super();         super.addMixedIn('Heritable');
} else {     return fn();   }
case "domain":         loadSiteNotes(true);         break;
init: function() {     this.A = [];     this.A[1] = +0.6399175073;     this.A[2] = -0.1358797613;
var generatorCoffee = path.join(self.generators, generator + '.coffee')           var generatorJs = path.join(self.generators, generator + '.js')           var generatorPath
pauseRecording(self.valueWillMutate,self);           if(write &&!self.write)throw new Error("This observable can't be set.");           self.value = value;
}  deny(...args) {   return this.model.deny.apply(this.model, args);  }
this.options = options; }
this.closing = false;   this.loaded = false;   await this.fire('close'); };
this.append(ws`    ${this.declVars(`__WRAP_CACHE__ = __RESULT__, __WRAP_TMP__ = [], __WRAP_POS__ = 0`)}    __RESULT__ = ${this.getReturnDecl()};
options = this.options? this.options(defaults) : _.extend(defaults, this.data.options);
root["javel"] = factory(); })(window, function() { return  (function(modules) {
gutil.log(gutil.colors.red('Running gulp is', cliPackage.version));     gutil.log(gutil.colors.red('Local gulp (installed in gulpfile dir) is', plugin.modulePackage.version));   }
if (val === 'y' || val === 'yes') {       for (var i = 0; i < newer.data.length; i++) {         debug('pushing', newer.data[i])
expect(emailValueAfter).toEqual(null);       const passwordValueAfter = this.component.loginForm.get('password').value;       expect(passwordValueAfter).toEqual(null);
try {         this._stackdriver.report(...arguments);       } catch (err) {         console.error('Error while reporting error:'+ err);       }
inputSignal = true;     };
if (err) {       return cb(err);     }
this.columns.splice(this.columns.indexOf(cardDom.data('column')), 1);
send: function(connectionId, reportId, data, callback) {                  if (connectionId ==='mockConnection') {
Renderer.prototype.render = async function(template, locals, options) {   var o = this.options;
if (!Array.prototype.map) {   Array.prototype.map = function(callback) {     var mapped = [];
module.exports = function zipWith(cb) {   var args = argsToArray(arguments).slice(1)
, getPrototypeOf = Object.getPrototypeOf  , proto = Proto.prototype;
if (window.DEBUG) {    console.log(...[].splice.call(arguments, 0));   }
function L(...args) { if (BarNote.DEBUG) Vex.L('Vex.Flow.BarNote', args); } export class BarNote extends Note {
for (key in file[testType]) {             factory(file[testType][key].name, file[testType][key], file.scope);
if (testNull === null) {       throw new Error('No match in string')     }
catch (e) {     alert("Exception deleting agent " + objectPath + " : " + e);    }   }
};  for (var p in thisClass) {   if (thisClass.hasOwnProperty(p)) {    Employee.prototype[p] = thisClass[p];   }
, Iterator   = require('./iterator')
user: require('lsk-user/uapp').default(...arguments),     posts: require('~/modules/posts/uapp').default(...arguments)   };
var Cookie = tough.Cookie exports.parse = function(str) {
if (evt.authorized) {                                 status = '<a>' + this.config.i18n.general.switchAccount + '</a>';                                 this._twitterStatusNode.innerHTML = status;
if (this.key_!== b.key_) {       throw new Error('Failed to sync VNode: keys does not match (old:'+ this.key_ + ', new:'+ b.key_ + ')');     }     if (this.type_!== b.type_) {
, Packager = require('package-jsonld')  , previewTabularData = require('preview-tabular-data').preview;
return [function split(separator, limit) {     var O = defined(this);     var fn = separator == undefined? undefined : separator[SPLIT];     return fn!== undefined? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
gulp.task('compress', () => {   let { version } = require('../app/manifest.json')   return gulp.src('dist*')
type = type || 'closest';   for (var idx1=0; idx1<a.length; idx1++){     var color1 = a[idx1];
, stream = fs.createReadStream(filename) , xml = new XmlStream(stream);
else       this.gotoFrame(frame);   },   gotoAndStop: function (frame, scene) {     this.stop();
}(this));
enyo.forEach(this.enyoIndexer.getFunctionList(pattern), function(name) {     name = name.substr(len)     suggestions.push(name)    }, this)
var researching;  var imagePathsArray = []; var imagePositionInArray;
const orgError = console.error;   console.error = function(...args) {     errors.push(args);     orgError.apply(console, args);   };
if (value) {       for (i in value) {         if (value.hasOwnProperty(i)) {           change    = 'neutral';           arrow     = 'arrows-h';
return this.verify(function verified(err) {     if (err) return fn(err);     var current = this.pid;
var newRow = {}       for (var col = 0; col < row.length; col++) {         var datatype = this.props.queryResult.meta[col].datatype
var sax = require('sax'),   ignored = require('./ignored.js')
if (old.length === neo.length) {                 if (old!== neo && old.length > 0) {                     arguments.callee.call(this, 'clear', pos, el)                 }
this.Alert = function Alert(){      colors.green('[OKAY] '+ this.fmt.apply(null,arguments)) );  }
beforeEach(function () {         this.addMatchers(imagediff.jasmine);         canvas = $('<canvas width="' + width + '" height="' + height + '"></canvas>');
} else if (options) {           for (var i in options) {             if (options.hasOwnProperty(i)) {               data.options[i] = options[i];             }
install: function () {         const injectJsFilesToIndex = function () {             this.log('\n' + chalk.bold.green('Running `gulp inject` to add JavaScript to index.html\n'));             this.spawnCommand('gulp', ['inject:app']);
if (!regl.hasExtension('ANGLE_instanced_arrays')) {       throw new Error('regl-error2d requires `ANGLE_instanced_arrays` extension enabled');     }
} else {     return eachObj(obj);   }
} export async function reset__rpc() {   log(`${logPrefix}|reset__rpc`)
var Project_ID = Session.get('projectId');     var portarray = [];     var delarray = [];     var hostid = undefined;
this._parentPicker && this._parentPicker._updateColumnHeights();        return FontWidget.prototype._doLayout.apply(this,[parent,column,height]);   },
thingsChanged: function() {          if ( this.get('application.currentRouteName') ==='splash')
Target.prototype.yield = function yield$() {     return this.then().yield(...arguments)   }   Target.prototype.ensure = function ensure() {
var needs++;  for (var key in this.tables) {   needs++;   if (key == tbl.name) this.tables[key].done = true;
_.each(this.getReverseRelations(), (relation) => {    relation.addRelated(this.instance, opts);   });  },
this.on('end', function() {       that._removeFromPool();     });
function e() {             var e = t.call(this) || this;
if(err){                 throw new Error('Error sending Keen data:'+ err);             }
if (response.status!== 200) {                 throw new Error('Query failed.');               }
maskToken.matches = maskToken.matches.reverse();                 for (var match in maskToken.matches) {                     if (!maskToken.matches.hasOwnProperty(match)) continue;                     var intMatch = parseInt(match);
});      return this.on(name, once, context);     },     writable: true,
}); NativeArray = NativeArray.without(...ignore);
export default class AuthenticatedUserAccountDropdown extends UserAccountDropdown {   constructor(...args) {     super(...args);
var traits = this.traits();             for (var i = 0, l = traits.length; i < l; i++) {                 traits[i].setFromArgs( obj, args,ignore );
catch(e) {         setTimeout(downloadIntoFrameContext, 0);         return;
class TuyaCloudRequestError extends Error {   constructor(options) {     super(options.message);     this.code = options.code;     this.message = options.message;   }
callMethod = function( methodName, args ) {
res = [];                  for (var b in obj) {                      if (obj.hasOwnProperty(b)) res.push(copyCleanModel(obj[b]));                  }
throw new Error('Unrecognized initial character in unidiff line')           }
module.exports = Cylon.Drivers.GPIO.MakeyButton;
async run() {     throw new Error(`Need to implement ${this.constructor.name} async run() function`);   }
this._commands = {}; });
this.route('map', {   path: '/',
default:       throw Error( 'Unsupported value' );   }
hasPendingChanges: false         }, () => {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path)
if (!this._parentWindow) {       this.parentWindow = exports.windowAugmentation(dom, {document: this, url: this.URL});     }
var that = this;             _.each(this.parents, function(v) {                 result[that.fields[i]] = v.constant_value();             });
ref.slotAt('_model').beCreator();     this.applyStyle(this.defaultStyle);
var slices = 24;   var wfs = [];   for (var i = 0; i < radii.length; i++) {
var ltx     = require('ltx')  , helper  = require('../helper')
origIt('should handle wd errors asynchronously', function(done) {     driver.run(function*() {       try {
var s = _getActiveSelection();         $(this).addClass("couzteauSpellCheck");
$("#redeem").keypress(function(e) {     if((e.keyCode? e.keyCode : e.which)!== 13) return;     var data = {passcode: $(this).val()};
io.register_write(port, this, function(out_byte)     {         write_data.call(that, out_byte);     }, function(out_word)
return function () {              compound.apply(this, arguments);          };
anInstance(that, $ArrayBuffer, ARRAY_BUFFER);   var numberLength = +length;   var byteLength = toLength(numberLength);   if (numberLength!= byteLength) throw RangeError(WRONG_LENGTH);
_validateReset(keyPath, options) {     if (typeof keyPath ==='string' || typeof keyPath === 'object') {       options = typeof keyPath === 'object'? arguments[0] : options;
} else if (this.readyState === 3) {                         span.imp().info('XMLHttpRequest loading (readyState=3)');                     } else if (this.readyState === 4) {
var key = '';         for (var i = 0; i < defaultParams.length; i++) {             var name = defaultParams[i];             var chunk = parameters[name].toString();
{    for(var i = 0; i < object._missing_components.length; ++i)    {
}),       takeEvery(self.types.events[event].get.SUCCESS, function({         meta,
if (!this.requireMinimumVersion(this.apiVersion, minimumVersion)) {       throw new Error("this method requires at least @{minimumVersion)");     }
this.state.set(this.state.value().join(''));                  status.emit('complete', 'concat', 'concatenated'+ stateItemCount +'item(s).');              }
return $.grep(this._pages, $.proxy(function(page, index) {    return current === this._core.maximum()    ? index === this._pages.length - 1     : page.start <= current && page.end >= current;   }, this)).pop();
})(EndGate || (EndGate = {}));
constructor: function GroupingModel(...args) {             GroupingModel.__super__.constructor.apply(this, args);         }
var _ = require('underscore');
function UiFactory() {   this._background = null;   this._foreground = null;
for (var i = 0; i < len; i++) {
var Element = function(board, element, options) {    this.element = element;    this.options = options;
$self.blur();
arguments[0].forEach(function(item, i) {    self[i] = item;   });   this.length = arguments[0].length;
t.ok(is.number(-Infinity), 'negative infinity is number');   t.ok(is.number(new Number(42)), 'object number is number');   t.notOk(is.number(), 'undefined is not number');
var utils = require('../utils')  , nodes = require('../nodes');
, cmdItems      , taskArgs      , preempt;
for (i = 0; i < this.regexpProps.length; i++) {       property = this.regexpProps[i]
this.$().data('DateTimePicker').destroy();   } });
this.assets = [];   var addressToPath = {};
async function extractApkInfoWithApkanalyzer (localApk) {   const apkAnalyzer = await getApkanalyzerForOs(this);   const args = ['-h','manifest', 'print', localApk];
TileRequestHandler.prototype['GET'] = function(server, req, callback) {  var self = this;  var done = _.once(callback);
var Query = require('../connection/commands').Query  , MongoError = require('../error');
this.bind('change', function(e) {     e.preventDefault();     var $selector = $(this);     this.find('option').each(function() {      var $form = $('#'+$(this).val());
port.send('deprecation:watch');     this._super(...arguments);   },
this.height = "";
});             for (l in removedLinks) {                 RED.nodes.removeLink(removedLinks[l]);
return {       originalPosition: originalPosition,       sourcesByFile: sourcesByFile   };
if (this._input.value.length > 0) {             DomUtil.removeClass(this._close, 'leaflet-pelias-hidden');
this.clearArgs = function() {         self.argArray[_POST] = [];         self.argArray[_GET]  = [];     }
})(typeof(window)!== 'undefined'? window : global);
gen.fs.write(gen.destinationPath('extension.js'), 'foo');      })     .on('end', done);
const asyncWrapper = function (f) {     return function (...args) {       return f.apply(this, args).catch((e) => {        Recorder.saveFirstAsyncError(e);
var self = this   Tensor.apply(self, arguments) }
, graveyard = []
_.each(state, (value, key) => {                 this.key_value_lock = [key, value];                 try {
$(".admin section").click(function (event) {         var sectionId = ExtractSectionId($(this));
function ondata (b) {
if (!internals.diff.fullcolumns )             internals.diff.fullcolumns = [];         var oKeys = Object.keys( db[ 0 ] );
{    throw new Error("QR Error: Error getVersionForNumber");   }
};      for(var i = 0; i < tokens.length; i++) {       yield parseToken(tokens[i]);
if ($(this).hasLabel()) {        $this.children(".classlabelbadge").remove();       }
var toObject = require('./_to-object'); var $getPrototypeOf = require('./_object-gpo');
throw new Error("invalid call: atomic expression");       },
this.startIoTjs = function(process) {
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.radians);     return x / Math.PI * 180;
}, function (reason) {                             throw new Error(file + ': Error loading data from.stl file:'+ reason);                         }
this.target = attachToOpts.element || document.body;   this.target.classList.add('shepherd-enabled','shepherd-target');
if (typeof val!== "number")                 throw new Error("texture_table requires numeric values");             elements.push(val);
Object.values = function(object, skipFunction)  {
let names = className.split(/\s+/);       for (let i = 0; i < names.length; i++) {         let name = names[i].slice('ql-'.length);         if (icons[name] == null) return;
if (memoryRegion >= this.REGION_ROM0) {   throw new Error("Bad access");  }
pzprv3.includeFile("tests/for_test.js");    setTimeout(checkForTest,10);    return false;   }
if (input.length!= this.size)         throw new Error("INPUT size and LAYER size must be the same to activate!");
this.targetElement.keyDown(key);           this.targetElement.keyPress(key);           this.targetElement.keyUp(key);
initXhr: function(xhrobj) {             var factor = arguments.length > 1? 90 : 98;             var addfact = arguments.length > 1? (self.uploadCount + 1) * 10/arguments[1] : 0;             if (xhrobj.upload) {
default:         throw new Error('Unsupported data type.');     }
Canvace.MultiSet.prototype.fastAdd = function () {  this.count += arguments.length;
var fs = require('fs')  , async = require('async');
return function() {     var value0 = style.getPropertyValue(name),         value1 = value(this);
let clickedEl = event.target;
}   }   var items = new Array();   items[0] = [];   items[0]['a'] = out;
return this._instantiateModel(dasherize(type), attrs);   }   create(type, attrs) {     var collection = this._collectionForType(type);
rebuild: function (rebuild) {
this.aParams = [];    this.vids = [];
var modelsChange = false;   for (var modelId in modelsMap) {     if (!modelsMap.hasOwnProperty(modelId)) { continue; }     modelsChange =
for ( var i = 0; i < this.propertyBindingsArray.length; i ++ ) {
var express = require('express')  , everyauth = require('everyauth')
this.inline = new InlineCompiler(this.options); };
this.url = url? url : window.location;
e.preventDefault();     if(!Meteor.user()) throw new Error('You must be logged in.');
else {                 throw new Error('buildfunc: unsupported refarg type:'+ func.name);             }             out.push('}');
if (_.isUndefined(t2))             throw new Error("t2 multiplication with undefined type?");         var type_list = [
} else {    this.keys = args;    this.defaultValues = {};
purge: function() {     var d = new Date();
[    "device"   , "streamHost"
}]);     this.layerView.trigger('mouseover', new $.Event('e'), [0, 0], [0, 0], {       test1: 'test1',
subnode.updateChildTransforms();   }   for(c = 0; c < this.components.length; c++) {    this.components[c].onUpdateTransform(absolute);
const mod = require(src);     if (args && args.constructor === Array) return mod(...args);     return mod();
getAllListenerInfo () {     return this.getHandlers().map(handler => handler.__events__)   }
}             $.when(...contentLoadedPromises).done(function() {                 this._hideLoading();
}             this.modal.show(context.content, { attachment: context.attachmentToFocus });         });     };
size: props.size,                   direction: dir                 });
script.onload = script.onreadystatechange = function() {       if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {         done = true
}                 ilios.pm.schoolDepartmentTreeModel = [];                 for (var key in parsedObject) {
var keys = [];     for (var key in obj) {       if (obj.hasOwnProperty(key)) keys.push(key);     }
if (arguments.length==2) {              if (r) throw  new Error(path+" is Read only.");              if (text==null) delete ls[path];
scene.args.unshift(playNextScene)         sequence.push(scene)
co(function* scrape() {  const res = yield fetch('http:
if (prev_output.is_stable === 0)            throw Error("prev is not stable");           if (prev_output.is_serial === 1 && prev_output.sequence!== 'good')
import U from "src/util/util.js";
var ll = par.getElementsByTagName('li'); var i = 0;  for (i = ll.length; i < i; i++) {   var range = ll[i].getAttribute('data-range');
this.append($=> this.getEndXMLTagDecl('script'));  }
var grafs = text.split(/\n{2,}/g);  var grafsOut = [];
if (!Pokedex._(self.species + "?")) {   throw new Error("There exists no Pokémon in the Pokédex object with thespecies name \"" + self.species + "\".");  }
Object.keys( extenders ).forEach( function( i ) {     for( key in extenders[ i ] ) {      result[ key ] = extenders[ i ][ key ];
var cs = this.current.fillColorSpace;       var rgbColor = Util.makeCssRgb.apply(null, cs.getRgb(arguments));       this.ctx.fillStyle = color;
if (options.fn) {         return withHelper(this, this.author, options);     }
if (qq.FileUploader.prototype._leaving_document_out(e)) {                         for (var elem in dropzones){ if (dropzones.hasOwnProperty(elem)){ dropzones[elem].style.display = 'none'; }
let onMouseMove = run.bind(this, (event) => {         if (plotter) {
this.retCallback(data);       this.retCallback = null;
if (VIE.prototype.Attribute) {  throw new Error("ERROR: VIE.Attribute is already defined. Please check your installation!"); }
NGN.BUS.emit(...args)       }     }
const model = modelParam;
'use strict'; var url = require('url'),     path = require('path'); module.exports = function(version) {
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "ST", Array.slice(arguments));   },
__extends(StickRightLocationDirective, AbstractLocationDirective);         function StickRightLocationDirective(...args) {             AbstractLocationDirective.apply(this, args);         }
target.findAll = function (match) {             let result = [];             for (let index = 0; index < this.length; index++) {                 const element = this[index];
for (var idattrs in dattrs) {    if (dattrs.hasOwnProperty(idattrs)) {     var cmd = dattrs[idattrs]
if (NoSqlProviderUtils.isCompoundKeyPath(index.keyPath)) {                                     throw new Error('Can\'t use multiEntry and compound keys');                                 }
node.set(request);      node.getChildren().forEach(function (child) {        this._setTreeNodes(child, request);       }, this);
var samplers;   for (var i=0; i<batches.length; i++) {    var batch = batches[i];
'use strict'; var http = require('http'); var parse = require('url').parse;
return config;     }.bind(this));   }.bind(this)); };
const keys = key.split(',');             _.each(keys, k => {                 this.keyListener.simple_combo(k, value.bind(this));             }, this);
this._fastBootCookiesCache = fastBootCookies;     return this._filterCachedFastBootCookies(fastBootCookies);   },   read(name, options = {}) {
while ( jsonml.length ) {     content.push( convert_tree_to_html( jsonml.shift() ) );   }
var that = this;  $(this.oTextHandle)  .attr({ name: 'dummy_' + Math.floor(Math.random() * 1000000), autocomplete: 'off' })  .bind(is_opera || is_ie? 'keypress keydown' : 'keydown', function (oEvent) { return that.handleKey(oEvent); })
if ( value === undefined ) {   throw new ve.Error( 'Undefined attribute:'+ key );  }
}         callback(err, res);     }
_setEditorSize: function( width, height ) {
if (endContainer.nodeType!== Node.TEXT_NODE) {                 throw new Error('Could not found endContainer, highlighting would be unstable');             }
return (cache[markup] = fn);     };     S = this.Simplate = function(markup, o) {         this.fn = make(markup, o);
, SessionStateStore = require('./state/session')  , setup = require('./setup');
this.x = null;         this.y = null;     }
}     return func(...args);   };
var Intercom = function() {   var a,b, toto;
var jsDAV_iQuota = module.exports = function() {     this.REGBASE = this.REGBASE | jsDAV.__IQUOTA__;
}         };         var result = cp.TransitManager.prototype.transit.apply(this, arguments);         if(result) {
var prefixes = OpenLayers.Style.SYMBOLIZER_PREFIXES;         for (var i=0; i<rules.length; i++) {             for (var s=0; s<prefixes.length; s++) {
for (var attribute in tests) {            phonetics = doubleMetaphone(attribute);             assert(phonetics[0] === tests[attribute][0]);
req.user = user;       passport.authenticate(strategyName, _onPassportAuth)(req, res);     })(req, res);
this.total  += t.total;       t.parent     = t.parent;       t.parent_uid = this.uid;
var storage = localStorage, i, key, new_value, func, all = bgSettings.defaults;   func = function(val) {
minValue(query=null) {         if (!this.__backend.connected) throw new Error('JungleDB is not connected');         return this._currentState.minValue(query);
}   }   this._super( "_setOption", key, value );  },
RANDO.TileContainer.prototype._computeUvs = function () {         var tiles = this._tiles;
module.controller('DatePickerCtrl', ['$scope', '$mdDialog', 'currentDate', '$mdMedia', function($scope, $mdDialog, currentDate, $mdMedia) {
var s = require('../index'),     assert = require('chai').assert;
if (!base) {         throw new Error("Please provide a base namespace!");     }
, sql = ''      , tableName = this._tableizeModelName(query.model.modelName);
var frequencies = [];         var context = new window.OfflineAudioContext(1, buffer.length, buffer.sampleRate);
expandIsoform(selectedIsoform);               sortDots(this.parentNode);             }
var mockContext = {   report: function(obj) {    collectedReport.push(obj);   }
var TableClass = function() {          this.cols_ = that.columns_.getKeys().map(function(colName) {       this[colName] = new lf.schema.BaseColumn(
{     throw new Error("unkown Message Type: '" + message.type + "'");   }
import ns from 'ima/namespace';
function get(concept) {             return $http.get('/openmrs/ws/rest/v1/concept/' + concept, {
var tar = require('tar')              , zlib = require('zlib');
value = arguments[0]         notifySubscribers(...args)       }
_hideCriteria: function () {             DateFilter.__super__._hideCriteria.call(this);         },
value: function(callback) {           return Collection.clone.apply(this, arguments);         },         writable: true,         enumerable: false
var express = require('express')  , routes = require('./routes')  , http = require('http')
if ( xhr === self.xhr ) {       response( data );      }
this.options = options;
const config = {     formComponent: 'vueForm',
return (this.patternFocused[patternId])   }   setPatternFocused (patternId, focused) {     this.patternFocused[patternId] = focused
var Utils = Class({  $singleton: true,
$('#help-summary h3').each(function(){    if ($(this).prevAll('h2').first()[0]!==h2) {     $(this).next();    } else {
if (result0!== null) {           result0 = node("node_directive", "DAT", node.apply(this, ["node_value", "val_paramlist"].concat(plist)));         }         if (result0 === null) {
each(['delete', 'has', 'get','set'], function (key) {     var proto = $WeakMap.prototype;     redefine(proto, key, function (a, b) {
constructor(args) {         super(args);         this._totalHeightGap = 50;         this._parent = _.get(args, "parent");
for (var key in attrValueHash) {         var value  = attrValueHash[key]         var _value = this.escape(value)
});             var mockModel = MockModel.get('items', {                 fetch: function() {
, binomial = require('binomial')  , labor = require('labor'); }
data.oldParams = item.Params;      var params = handleParamsInCommand(func, data, start? messages["startApplication"] : messages["stopApplication"]);
for (var index = 0; index < array[i].length; index++) {           var value = array[i][index] + "";
sheet = sheet || NOVAE.CurrentSheet;     var letter = arguments[0].match(NOVAE.REGEX.numbers).join("");     NOVAE.Cells.Used.registerCell(letter + number, sheet);
let bar = [];  bar.push(...[].concat(foo, 99)); }
if (missingOptions.length) {     throw new Error('The following options are required:'+ missingOptions.join(', '));   }
this.shapes = {}
'use strict'; var $export = require('./_export'); var $at = require('./_string-at')(false); $export($export.P, 'String', {
event.preventDefault();       this.moveFocusDown();       break;
obj.getCenterPt= function () {         var {pt1,pt2}= this;         var x= (pt1.x + pt2.x)/2;
if (edit_mode){         $(this).autofit({min_height: MIN_HEIGHT});         return;
each(data.handlers, function(handlerSpec, eventName) {       this._bindHandler($el[0], data._owner, eventName, handlerSpec);     }.bind(this));     return $el;
if(name in this._widgets){    return this._formWidgetValue(this._widgets[name], value);    }
} catch( error ) {       setTimeout( cleanup, 0 );       return;
if ( typeof textureDimensions[ file ] == "undefined" ) {    throw new Error( "No dimensions set for texture \"" + file + "\"" );   }
if (!converted) {     throw new Error("Unsupported language code '" + langCode + "'.");   }
this.get(wsRoute,...wrappedMiddlewares);
.replace(/<OTHER_SELECTIONS>/g, otherConstraints.join(' '))                .replace(/<SELECTIONS>/g, this.buildSelections(otherConstraints))                .replace(/<PREF_LANG>/g, this.getPreferredLang());
this.stopTrackingProgress();      }
if (!subDef.inactive && _postal.configuration.resolver.compare(subDef.topic, envelope.topic)) {             subDef.callback(envelope.data, envelope);         }
var lines = o.value.split("\n");    var indices = [];    var sl = 0;
if (!options) {             throw new ReferenceError('A date or time stamp must be provided.');         }
{          throw new Error("Long_Task no longer runnable");      }
define(Array, 'list', function () {         var l =Nil
if (!that.file) {         file = yield r.table(fileTable).get(fileId)
this.sandbox.emit('husky.select.terms-of-payment.revert');                         }.bind(this)                     });                 }.bind(this));             }
var dwords = [];        var len = message.length;
if (this.validURL()) {     return this.indexOf(':   }
return logDb(new settingDb());         else throw new Error("db nams is not valid");     },
if (typeof ctx[key] === 'function') {       Vue.prototype[`$${key}`] = (...args) => ctx[key](args);       Vue.directive(key, historyRedirect(ctx, key));
if (!fileStats.isFile()) {   throw new Error("Not a file: '"+inFile+"': ");  }
function promiseify(fn) {   return function (...args) {     return new Promise((resolve, reject) => {
var cwd = path.resolve(npm.dir, p)   var s = npm.config.get("shell")   fs.stat(cwd, function (er, s) {
labelNodesDidChange: function() {           this.notifyPropertyChange('labelNodes');         }.observes('*model.labels'),
requires: {         mongodb: ">=2.6.0"     }
if (format === undefined) {     throw new Error('idate() expects at least 1 parameter, 0 given')   }
const   cache = require('gulp-cache')  , del = require('del')
return Q.all([     exec.apply(null, args.sharepath),     exec.apply(null, args.root),   ]);
for (var i in defaultAspectRatios) {             if (defaultAspectRatios.hasOwnProperty(i)) {                 $aspectRatioToolbar.find('.btn-group').append(render(defaultAspectRatios[i]));             }
, hotplate = require('hotplate')
var feedback = Jasper(function() {       throw new Error('up');     });
var adUnit, error, createAd;         if (!that._frame.contentWindow) {             error = 'the iframe is not yet in the DOM tree';
if ('string' === typeof view) {                 return this.renderFromFile(file);             }
function PublicKeyInput() {   Input.apply(this, {}); }
if(fontSize.search('em') > 0) {       fontSize = $this.toPx({scope : quail.html});     }
function batchImages(descriptor) {    for (var i in descriptor.frames) {     (function (id, progress) {      if (id in imageset) {       progress();
return "mat";             throw new Error("internal error: not pod, vec or mat");         }
this.isTopPage = true;
export async function exploreCave (store, action) {   const {caveId} = action.payload
if (fragment.match(pathRegexp)) {           throw new Error("Recursive fragment usage detected on " + path + ".")         }
this.emit('event', packet.items);       this.emit(...packet.items);       break;
}     app.getAsyncHelper('include').apply(this, arguments);   });
enyo.forEach(this.enyoIndexer.getFunctionList(pattern), function(name) {     name = name.substr(len);     suggestions.push(name);    }, this);
var key ='secret'      , pt = '☢€  ☂ ڴ!'      , ct = twoFish.encrypt(key, pt)      , cpt = twoFish.decrypt(key, ct);
'/login' : controllers.auth.reverse  , '/logout' : controllers.auth.basic  }
throw new Error('Rev A boards are not yet supported.');         case 'B1':
var __call__ = function() { var args = Array.prototype.splice.apply(arguments, [0, 0, klass]); return create_object.apply(undefined, args);
var MAX_ATTEMPTS = 10              , toBeCached = {};
var i, len = value1.length;         var arr = createTypedArray('float32', len );         for(i=0;i<len;i+=1){
function createVideoNode(url) {
pinpointApp.factory('ServerMapFilterVo', [  function () {     var self = this;
if ($this.hasClass('dwwb')) {                     if (testTouch(e)) {
if (!$(this).hasClass('isPrime')) {                     $(this).css({textDecoration: 'none'});                 }
var ctx = this;   if (typeof gen === 'function') gen = gen.call(this);
if (g === null) {             throw new Error( 'Error creating WebGL context.' );         }
function askForAdminPassword() {     if (this.regenerate || this.composeApplicationType ==='monolith' || this.serviceDiscoveryType!== 'eureka') return;     var done = this.async();
const dynamic = {};         for (const field in render) {             if (render.hasOwnProperty(field)) {                 const target = `children.${code}.${field}`;                 dynamic[target] = render[field];
constructor(target, prop, value, meta) {     super(target);     this.prop = prop;
function update(dev, par) {
.attr('type', 'radio')                            .addClass(that.model)                            .val(item)
const shell = require('gulp-shell') ;
default:             throw new TypeError('Expected string, function, or undefined.');     }
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "ST", Array.slice(arguments));   },
expect(this.player1.amber).toBe(3);                 this.player1.clickCard(this.punch);                 expect(this.player1).toHavePrompt('Choose a card to play, discard or use');             });
unsubscribe(sid, optMax) {     return this.nc.unsubscribe(sid, optMax)   }
var statuses   = require("statuses"); var buffer     = respond; module.exports = respond;
_.each(this.views, function(v) {              this.listenTo(v, 'positionChanged', this.__handlePositionChanged);
constructor(image) {     super(`Not found '${image}' docker image`);     this.message = `Not found '${image}' docker image`;   }
var i = 0;       for (var r = 0; r < data.length; r++) {         var item = data[r];         textToInsert[i++] = "<tr>";
BengineConfig.extensibles.xcode = new function Xcode() {  this.type = "xcode";  this.name = "code";
else {     throw new Error('[sprintf] huh?');    }    _fmt = _fmt.substring(match[0].length);
if (this._transformContent)    this.applyMatrix(true);
const GlobalObject = (typeof self!== "undefined")? self : global;
default:       throw new Error(`Only support reference child(), parent(), val() \ and exists() now, ${obj.property.name} found`);   }
this.currentAuth = currentAuth;
if (typeof func === 'function') {                 return func(...evalList(flags, scope, locator, this.args, part));             }
val = "",     arr = [];    if (sel.eq(0).val() == "id") { val = "id_"; }
var Q =  driverBlock.Q  , path = require('path')
, Db      = require('../../')  , BooleanType = Db.Boolean, StringType = Db.String
this.tagSelectView = new App.TagSelectView({             allTags: this.allTags         })         this.tagListView = new App.TagListView({
if (!m_width ||!m_height) {       throw new Error('Map layer has size 0');     }
console.trace? console.trace()           : console.error(...arguments);     })
constructor(tag, url, path, xhrSettings, context) {         super();         this.context = audioContext;         var assetConfig = {             tag: tag,
let o = chalk.yellow('[out]')   console.log = function(...args) {     out.push(args)
this.updateLinkArray = function (essenceId) {         return co(function* () {
},   initRoles() {     this.set('roleArray', (this.get('primaryResource.projectRoleTemplateIds') || []).map(r => {       return {
var spriteY = this.y;                     if (this.sprite) {                         this.sprite.setPosition(x, y);                     }                     if (this.sprite nombre) {
if (event.keyCode === 13) {                 window.location.pathname = "/" + Util.escapeHtml(this.value);             }
, nameRe = /^[a-zA-Z][0-9a-zA-Z]*$/  , rel, setReverse, validate; setReverse = function (rel, index) {
return;   }); };
}; function printError(...args) {   console.error('INVALID COMMIT MSG:'+ util.format.apply(null, args)); }
'Complex': function (s) {       throw new Error('Cannot convert Complex number to Node');     }
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[62],{
else                 throw new Error("i > 0 in pod element");         }
var parse = function(dimension, elementType) {         var array = [];         if (dimension.length > 1) {
},   _resizeMap: function _resizeMap() {     var map = this._getMap();     map.resize();
retNode = node.left;     } else if (this.comparator_(node.value, value) < 0) {       retNode = node.right;
var _operationTypes = {         'and': true
});         instance.$service.apply(instance, concat([Class, instance], arguments, 1));
lrSnippet            , mountFolder(connect, '.tmp')             ]
this.parseResults = function(dataobj, facetMap) {       var resultobj = {};       resultobj["records"] = [];       resultobj["start"] = "";
if (!that.isDisabled() &&!$parent.hasClass('disabled')) {           var $options = that.$element.find('option'),
for(var key in obj) {    that[key] = obj[key];
test.equal(reason, undefined, 'Neither USB device was found');       });
it("should have one child of type group ", function () {              const group=file.openGroup('pmcservices');
app.config = config.init(_config)   app.use(route.get('/connect/:provider/:override?', function *(provider, override) {     if (override == 'callback') return yield callback     this.session.grant = {
if (this.position + numBytes > this.byteArray.length) {       throw new Error('dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread');     }
{    throw new Error("System.ArgumentException");   }
Scope.prototype.$emit = function() {                          return origEmit.apply(this, arguments);
}             throw new Error(str + ", line " + line + " (tokens: '" + tok + "')\n" + JSON.stringify(tokens.slice(0, 5), null, 4));         };
};     this.setHost = function (host) {         host = host;     };
this.parentItem.fetch();         }, this));     }.bind(this));     return this;
if (!((address_!= null) && address_)) {               throw new Error("Missing address input parameter.");             }
socket.send(from, 'Hi'+ from + ', nice to meet you!'); });
function off() {   config['off'](...arguments); }
me.callParent();    }
getFiles: function( data ) {         var configData = data;
constructor(system, depend) {     super(system);     this.depend = depend;
constructor (YoutubePlayerSettings, YoutubeSearch, YoutubeVideoInfo, PlaylistEditorSettings) {    super();
this.view.$('.js-collapse').click();       expect(this.model.toggleCollapsed.calls.count()).to.equal(0);     });
let topologyContextProps =         { handleReset: this.resetTopology        , handleTopoRequest: this.handleTopoRequest
var path = require('path')  , util = require('util')
if (Node.LEADER === data.state && Node.FollowER!== this.state) {       this.change({ state: Node.followER });     }
if (response.status!= 200) {     throw new Error('Failed loading data from'+ response.url);   }
this._eventInput.on('clean', function(){             this._dirtyLock--;             if (this._dirty) {                 this._dirty = false;
this.menuItemDiv.click (function (event) {   var myThis = this;   if (myThis.isOpen) {
data.eachItemGraphicEl(function (el, idx) {                 el.z = that.z;                 var itemModel = data.getItemModel(idx);
constreferer = req.get("Referer") || "http:  , showImage = true  , debugMode = false;  if (utils.isRefererValid(referer)) {
, Collection = require('./collection')  , uuid = require('../util/uuid')  , crypto = require('crypto')
(function () {     var opts = options(process.argv);
atEnd: function () {       if (this.sitember.loops === true) {
var toString = Object.prototype.toString  , id = toString.call(/a/); module.exports = function (x) {
this.set('mouseUpListener', () => {             Ember.$( 'body' ).removeClass('resizing' )
function getFixturePath(...args) {         return path.join(process.cwd(), "eslint", "fixtures", "config-hierarchy",...args);     }
utils.each(this.proxyLabelMethods, function(method) {         labels[method] = that[method];       }, this);
$('.prime-live-iframe')[0].contentWindow.CKEDITOR.inline(this);      $self.trigger('focus');     });
const hashmap = {};   Object.keys(this.items).forEach((key) => {     hashmap[key] = fn(this.items[key]);   });
Sequelize.prototype.log = function(msg) {   var args = Utils.sliceArgs(arguments)    , last = Utils._.last(args);
(function (require) {
{                 var document = that.documents[i];
it('superscript exclusitivity', function() {       let editor = this.setEditor('<p><sup>0123</sup></p>');       editor.formatAt(1, 2,'script','sub');
result = this.multiply(result, m.flat);         this.matrixCache_[m] = result.slice();         m.addListener(this.matrixChange);       }
Float64Array.prototype.toJSON = Float32Array.prototype.toJSON = Float64Array.prototype.toJSON = Float32Array.prototype.toJSON = function () {     var json = '[';
"database",     async function(siteConfig, builtInPlugins) {         if (process.env.NODE_ENV === "production") {
debuglog("search complete");             if (!self.isMounted() ||!self.state.searching || self.searchId!= localSearchId) {                 console.error("discarding stale search results");
if (typeof JpegImage === 'undefined') {     throw new Error('No JPEG Baseline decoder loaded');   }
saveAuth: async function(type, token, data) {       this.getApp().logger.debug('Save user auth', this._id, type, token);
let data = [];
, XMLDom = require("xmldom")  , helpers = require('../../helpers.js');
var args = _normalizeArguments.apply(this, arguments);    args.mode = 'toggle';    return this.effect.call(this, args);   }
};     me.callParent();     me.down('#id').setReadOnly(false);
var proc = spawn('REG', args, {         cwd: undefined,
export default function() {     save.call(this);
throw  new Error("aObj: " + aObj.toString() + " is not an IAnaforaObj");  }
this.primitives = [ "print_string", "print_number"];     this.labels = {};     this.instructionIndex = 0;
let recommendedCounters = null;   if (props.recommendedCounters) {     recommendedCounters = (
callback(err);         }.bind(this));
], function(c) {    c.addRemoveClass("hover",!that.spotlightPagingControls);   }, this);
{  var info = "";
}             this.trigger('g:deleted');         }).fail((err) => {             this.trigger('g:error', err);
}, function (next) {     this.push(footer);     next();
var Tile = function(tileCoord, state, opt_options) {   EventTarget.call(this);   var options = opt_options? opt_options : {};
function () {  Clazz.superConstructor (this, J.adapter.readers.xml.XmlMagResReader, []);  });
if (!content ||!content.serialize || typeof (content.serialize)!== 'function') {     throw new Error('Content.serialize requires non-null Content instance as first argument')   } else {
var process = this.process,         msgChannel = null,
} else {   window.ga = function(...args) {     console.log([].slice.call(args));   };
if (t.EQUALITY_BINARY_OPERATORS.indexOf(node.operator) >= 0 &&               t.get('right').isPure()) {               let left = node.left;
,    vec2 = require('../math/vec2'),    shallowClone = require('../utils/Utils').shallowClone; module.exports = Heightfield;
extensions.concat(excluded),             async function(filePath, ev, match) {                 if (!options.excludedWatchPatterns.some(regex => regex.test(filePath))) {
project.config.templateNames = this.getTemplateNames()
ctx.compile_type!== Shade.FRAGMENT_PROGRAM_COMPILE) {                 throw new Error("gl_FragColor and gl_FragData assignment"                        + " only allowed on fragment shaders");
var capture = require('./lib/capture_exec').capture
module.exports = Cylon.Drivers.GPIO.MakeyButton;
debug: (...args) => {                 console.log(...args);             }
StringPrototype.toUrl = function () {         var url;
var validUrl var malformedUrl var invalidUrl var server = http.createServer(function (req, res) {
}   Context.prototype.user = function(username) {     return Meteor.user(username);   }
if (op.test(parent.content[i].type)) {             throw new Error('Template theme variables are not permitted in operations:\n>>> '+Node.toString(parent));           }
kb.holds(subject, UI.ns.wf('tracker'))) {       tracker = kb.any(subject, WF('tracker'))       if (!tracker) throw 'This issue'+ subject + 'has no tracker'
if (err) {                 nodeUtil.p2jinfo("fieldInfo XML Error: " + JSON.stringify(err));                 this.ptiParser = null;
el.remove();                             onReady.callOnContentReady(this.el, {newRender: false});                         }).defer(5000, [el]);                     }
paths.push(pkg.name);   const parentDir = path.join(...paths);   const tarballFile = path.join(parentDir, `${pkg.version}-${pkg.dist.shasum}.tgz`);
for (var attr in self.defaultSettings) {         if (self.defaultSettings.hasOwnProperty(attr)) {             self.settings[attr] = self.defaultSettings[attr];         }
let items = [defaultItem].concat(this.props.services);     return items.map(function (service) {       var selectedHtml = this.getItemHtml(service);       var dropdownHtml = (<a>{selectedHtml}</a>);
let search = event.target.value.trim().toLowerCase();         $(".admin-element-item").hide().filter(() => {             return $(this).html().trim().toLowerCase().indexOf(search)!== -1;         }).show();
self._gen_table = function( table ) {         var t = [];         if( table instanceof Array ) {
Handlebars.registerHelper('truncate', function(options) {         var value = options.fn(this);         if(value.length > 255) {
describe("Validators",() => {     beforeEach(() => {         const wrapper = document.createElement("div");
didInsertElement() {     if (this.get('shouldTransition')) {       this.transitionDomNode(this.get('element'), 'enter', this.didTransitionIn);     }
if (!checkValue(value)) {     throw new Error('Not a valid boolean value, can\'t initialize.');   }
var authHeader = req.headers.authorization.split(' ')     var format = authHeader[0]     var tokenId = authHeader[1]
this.app[verb || 'all'](path, callbacks);
, "src/lib/keen-domready.js"          , "src/async.js"         ],
if (!semver.satisfies(pkg.version, that.options.gitbook)) {             throw new Error("GitBook version doesn't satisfy version required by the book: "+that.options.gitbook);         }
}   this.instance = this;
return fn( elem,...args )
callback(err);                              });                          }
if(typeof options.name!=='string') {      ko.logError('Components must be provided a name (namespace).');    }
val = val.replace(/[, ]/ig, '/').replace(/\/\    for (var m = 0; m < w2utils.settings.fullmonths.length; m++) {     var t = w2utils.settings.fullmonths[m];
exception = _error;               throw new Error("onNamespaceRemoved failure: " + exception);             }
makeNestedResource(this, 'invoices', 'invoice');             makeNestedResource(this,'refunds','refund');         });
type ='select';                 }                 if ( node.prop( 'nodeName' ).toUpperCase() === 'TEXTAREA' ) {                     type = 'textarea';
it('should respect noValidate', () => {     var change = sinon.spy()      , inst = tsp(
httpServer.listen(0, function(er) {     console.error(`test http server listening on ${port}`);     assert.ifError(er);
console.log("Error in projects:", error);          });            models.flavors.bind("error", function(model, error) {              console.log("Error in flavors:", error);
callback(null, json.objectIds)   }) }
message: 'What do you want to call your view?',      default: answers.slugifiedName     }, {
this.getDomEvent().returnValue = false;         this.base(arguments, vValue);       },
export const changeNumCols = (numCols) => (dispatch) => {     if (!numCols || numCols < 0) throw new Error(`Invalid number of cols:${numCols}`);     for (let i = 0; i < numCols; i++) {
if (key!== 1 &&!this.findTouch_(touchList, key - 2)) {         var p = value.out;         d.push(this.touchToPointer_(p));       }
var browsers = getBrowser().browsers;             for (var i=0; i<browsers.length; i++)             {
this.dialog('Insert Drop Zone', null, dialog_drop);   var node = select(container, toggle)[0];   if (node) {
} function AbortSignal () {   this.onaborted = null   this._abortSignal = {aborted: false}
it('prevents the second launch of app', (done) => {       const appPath = path.join(__dirname, 'fixtures', 'api','singleton-old')              const first = ChildProcess.spawn(remote.process.execPath, [appPath])
foreign_ids: ids        .map(id => {           return this.collection + ':' + id;         })
while (innerWrap.firstChild) innerWrap = innerWrap.firstChild             innerWrap.appendChild(inner)           }
if (notToReject-- === 0) {           deferred.reject(rejected);         }
this.items = [];                 }
module.exports = Cylon.Drivers.GPIO.MakeyButton;
var $export = require('./$.export');
close(...args) {     this.server.close(...args)   }
if(optFieldDefs) {       for (var name in optFieldDefs.fields) {         if (optFieldDefs.fields.hasOwnProperty(name)) {           var defs = optFieldDefs.fields[name];           var {result, keysToDelete} = parseFieldDef(x, name, defs);
var Itag=function(args){   this.loc="azcontentarea";   this._base=args.base;
function defaultSetter(name, value) {   this._nativeSet(name, value === undefined? null : value);   if (this['$prop_' + name].nocache) {     this._triggerChangeEvent(name, value);
requires: {         mongodb: ">=2.6.0"     }
},   willInsertElement: function() {     this.set('participants', this.get('proposal.possibleDelegates'));   },
options_clone.comm = comm;             return that.new_model(options_clone).then(function(model) {
this.cencKeyIds.push(...keyIds);     this.systemIds.push(systemId);
}     var type = nonpol[0];     switch ( type ) {
if (routeInfo.route.indexOf(':') >= 0) {                 throw new Error('default route must not have params:'+ routeInfo.route);             }
fn.call(cursor.context, {                         sender: this,
module.exports = Muxer;
var name = element.tagName.toLowerCase();                 if (BuildHelpers.doesStringLookLikeDependency(name)) {                     dependenciesList.push(name);
,setWaypoints: function(latLngs, cb) {     var firstErr;
var plugin_cli = shell.exec(cmd, {silent:true});                     if (plugin_cli.code > 0) throw new Error('An error occured during plugin installation for'+ platform + '.'+ plugin_cli.output);                 });
function _injectSprintfProcessor() {          var values = [];
module.exports = function (context ) {   var env  = arguments.length > 2? arguments[1] : false;
function maker(e, s) {     return function (...args) {       return func.apply(e[s], e, args)     }
if (_.config.selection) {     for (var idx = 0; idx < _.message.length; idx++) {      var item = _.message[idx], iType = typeof item,
it('dialog element should be focused', function() {                 this.dialog.focusContent();
for (i in this._lngCoords) {             lines.push(this._verticalLine(this._lngCoords[i], this.options.zoneStyle));         }
'use strict';
WMTSRequestEncoding. kvP;
'use strict';
}     else {       var method = require(filepath);       Object.defineProperty(Object.prototype, methodName, {         value: function () {
self.label = "General Plugin"; }(hatohol));
async function loadValue (ctx, { network, dataIdentifier }) {   await this.load(ctx, { where: {     networkId: network.id,
this.redirect('hacker', user);     }   }   this.next(); }
return api.getSite({ siteId }).then(async siteData => {       const accessToken = await api.authenticate();       const arr =Addon.map(({ addonName, addonDidInstall }) => {
if (inElements) {     for (var index = 0; index < inElements.length; index++) {      var elemObject = $(inElements[ index ]);
$self.one('animateClosedStart', function(e) {         e.stopPropagation();
var handler = dispatchHandlers[action]   if (handler) handler(...args)   else console.error('Missing dispatch handler:'+ action)
setHasClickThrough: function() {       const groups = this.layers.slice().filter(layer => layer.class() == MSLayerGroup)
if (fold.start.row < this.startRow || fold.endRow > this.endRow) {                 throw new Error("Can't add a fold to this FoldLine as it has no connection");             }
var isHardDisabled = isButtonDisabled($(this)) || isButtonDisabledVision($(this));                     var isResDisabled = isButtonDisabledResources($(this));
var express = require('express');
}   applyFilter(...args) {     return this.applyModifier(...args);   }
case'starred_at':             return values.push(starData[that.STARRED_AT]);           default:
var result = [];      for (var row in table.getRows()) {       if (!table.getRows().hasOwnProperty(row)) continue;       row = table.getRows()[row];
module.exports = avconv; var   Stream = require('stream');
do {     parent = parent? parent[i] = new Array(4) : this._root = new Array(4);     if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
default:                 throw new Error("Unsupported uniform format for setting. May be a todo.");
const printStyle = $(`<link rel="stylesheet" href="${runtime.getURL('build/css/print.css')}" media="print">`) class Observer {
accepts: ['js', 'css'],
, 'test exec pipe': function () {     var ex = jake.createExec('ls', function () {})
function getHandleNearImagePoint(element, data, coords) {         for (var handle in data.handles) {             if (!data.handles.hasOwnProperty(handle)) continue;             var handleCanvas = cornerstone.pixelToCanvas(element, data.handles[handle]);
this.setXhr(); };
exports.del = function(test, opts, callback) {  opts.method = 'POST'  return exports.request(test, opts, callback) }
Rye.define('DOMEvents', function(){
if (e.type === 'change' && this.tagName!== 'SELECT') {             type = this.type.toLowerCase();
var tasks = {}; options.map(function(t) { tasks[t] = 0 });
var o = {};  oForEach(that, function (value, key) {   if (callback.call(scope, value, key)) {
define(Array,'slice', function (begin, end) {
if(typeof name === 'emit')       return emitter._emit.apply(emitter, args)
"use strict";
for (var j = 0; j < columns.length; j++)   {
if (Error.captureStackTrace) {       Error.captureStackTrace(this, err)     }
testContext.list = [    {
string = ["I, [" + (new Date().toISOString()) + "]  INFO -- :"],     data = string.concat(args.slice());   return console.log(...data); };
this.expression._walk(visitor);             blockStatement.prototype._walk.call(this, visitor);         });
Crisp.Router.route('/:id', function() {     Crisp.View.get('NavbarMain').highlightItem('/forms/', this.id);
this.container = container.addClass(vendor + 'canvas');
if(server.shouldFail[method]) {     throw "You should not call anymethod on this object";
const rootPrefix = '../..'  , QueryDBKlass = require(rootPrefix + '/app/models/queryDb')  , ModelBaseKlass = require(rootPrefix + '/app/models/base')
exception = _error;       throw new Error("clone: " + exception);     }
'use strict'; var Db = require('../../')  , Base = Db.Base, StringType = Db.String; module.exports = function (a) {
} catch (ex) {           throw new Error('try to remove non-existing shortcut');         }
articleSchema.pre('findOne', function(next) {
current_state(data);           });         }
if (isMaster) {       rs = this._db[cmd].apply(this._db, args);       if (cb) process.nextTick(() => { cb(rs); });
esriRequest({               url: portalUrlUtils.getUpdateItemUrl(this.portalUrl, this.username, itemId, folder),               handleAs: 'json',
var pairs = s.split("&");       for (var pi in pairs) {         if (pairs.hasOwnProperty(pi)) {           var kvsegs = pairs[pi].split("=");           var key = decodeURIComponent(kvsegs[0]), val = decodeURIComponent(kvsegs[1]);
Minionette.CollectionView = Minionette.View.extend({     constructor: function(options) {         this.options = options || {};
this.aski18n(this); }
try {     var template = require(viewsDir + '/' + viewPath + '.hbs');     var html = template(data);     callback(null, html);
};   AbstractQuery.prototype.isBulkUpdateQuery = function() {     return this.options.type === QueryTypes.BULKUPDATE;   };
function formatArgs(args) {   var useColors = this.useColors;
if(this.options.callTip)    tip = this.options.callTip.call(this, tip);    else
return Math.floor(Math.random() * (max - min + 1)) + min;     },     topUpRooms: function () {
const redirHandler = (payload) => {             this.metrics.tick('request.redir');             return {
}   var _ = (deps && deps.underscore)? deps.underscore : global._;   var tweenable = (deps && deps.Tweenable)? deps.Tweenable : global.Tweenable;   var defaultConfig = {
const install = plugin.install || plugin;   const ret = install(target, options);   installed.set(plugin, ret);
}   return processPlugins(plugins, a[0], a); };
for (var i = 0; i < objects.length; i++) {       for (var j = 0; j < objects[i].length; j++) {         target[j] = objects[i][j];       }
} else {           callback();         }
});                     eventer.trigger(that, e);                     return e.result;
if ( $container.length === 0 ) {             throw new Error( "Container not found for PaletteSelector: " + spec.selector );         }
this.center = new Vector2();         this.rings = [];         this.isBridged = false;
function _tidyEmpersand(str, hasFirst, hasLast) {     if (str) {
if (!this.layers[this.meta.last_layer].boundary){
}     return this.outerHeight() - this.height();   };
function createElementCtor(ctor, base) {   function F(a) {     Element.call(this, a);     if (ctor) {
if (checkForProperty) {    throw new Error("You can't both check for the promises of a property and set it at the same time.");   } else {
if (definition.events) {                 for (event in definition.events) {                     this.addEventListener(event, createTrigger(definition.events[event]));                 }             }
if (this.messageToPeers) {             _.onAfter (log.impl, 'defaultWriteBackend', this.$ (function (params) {                 this.messageToPeers ({ what: 'log', params: params }, this.isDeveloper) })) } },
if(position === "left" || position === "right") {                     container.css({top:(container.height()/2) - (height/2) + "px"});                 } else {
constructor: function PageableCollection(...args) {             PageableCollection.__super__.constructor.apply(this, args);         },
var list = document.querySelectorAll('div.bf');     for (var i = 0; i < list.length; i++) {         console.log(list[i].innerText);
this.set(options.updatedAt, now);    }    if (options.updatedBy && this._req_user) {     this.set(options.updatedBy, this._req_user._id);
}   logDebug (...rest) {     this.log.debug(`[${this.socketId}]TcpSocket`,...rest);   }
console.log(node);                      throw new Error(node+" is not array. cannot join fmt:"+fmt);                  }
var params = {};       for (var i in this.pathParameterNames) {         if (this.pathParameterNames.hasOwnProperty(i)) {           var name = this.pathParameterNames[i];           params[name] = decodeURIComponent(matcher[parseInt(i, 10) + 1]);
avoidableParams[5] = avoidFords;                 var truckParams = [];                 var truck_length = permaInfo[preferences.value_lengthIdx];
if (i < 0 || i > 7) {       throw new Error("Invalid signature type");     }
Bridge.init(); })(typeof(window)!== 'undefined'? window : global);
_.each(fieldsValues, function(setValue, fieldName) {     this.setOne(doc, fieldName, setValue, options);   }.bind(this)); };
if (observer.addedComponent) {     for (var i = 0; i < entity._components.length; i++) {      observer.addedComponent(entity, entity._components[i]);
if (clip(d.geometry.coordinates) && dsoDisplay(d.properties, cfg.dsos.limit)) {           var pt = projection(d.geometry.coordinates),               type = d.properties.type;
fn.apply( this, arguments );   this._format();   if ( previous!== this.options.value ) {
JSii.prototype.queryParser = function(query) {     var res = [];        var currChar;
},         initContainer: function(original,...rest) {             original.apply(this, rest);
tasks: {    * a(f) {     t.equal(f, fly1, 'pass fly instance to tasks');
exception = _error;       throw new Error("ResolveNamespaceDescriptor failure: " + exception);     }
}     flags = flags || {};     const previousValue = this.dataValue;
var vec3 = exports
return true; }
this._selection = rawSelection.reduce(function (prev, curr) {             prev[curr] = true;             return prev;         }, {});     };
req.app = res.app = origApp;         return next(err);       });
var max = 0;     for (connectorId in this.edges) {         if (this.edges.hasOwnProperty(connectorId)) {             var connector = IdToConnector(connectorId);             if (connector.name == name) {
it("blank", function (done) {         this.timeout(constants.timeout);         Augur.blank(
export async function http__error(ctx, next) {   try {
var ptSlater =  Clazz.newIntArray (nFuncs, 0);  for (var i = 0, pt = 0; i < tokens.length; ) {
function e() {                  var e = t.call(this) || this;                  return e.alpha = 0, e.visible =!1, e              }
},     onContentChange: function(optionIndex, e) {         var options = this.props.options.slice();         var option = _.clone(options[optionIndex]);
}     if ( ++steps > that.options.executionLimit ) throw new Error('Execution Limit Reached');    }
} function UPlot(opts, data) {  var self = this;  var series  =defaults(opts.series, xSeriesOpts, ySeriesOpts);
, debug     = require('debug')('koa-better-ratelimit')  , copy      = require('copy-to');
this.bindSourceData(this.boundSource);         this.__reattach();     },
class Rectangle extends _RectangleBase$(T) {       constructor(left, top, width, height) {         super();         this.left = left;         this.top = top;
prepareSVG(svg, options, encodings);  for(var i = 0; i < encodings.length; i++){   var encodingOptions = merge(options, encodings[i].options);
var logger;     var driver = model.load( module, {
document.body.onmousemove = function(e) {   var halfHeight = canvas.height/2;   var halfWidth = canvas.width/2;
if (this._sPrettyPrintDelayedCallID) {        clearTimeout(this._sPrettyPrintDelayedCallID);       }
constructor(target, selector, args, undo, meta) {     super(target);     this.selector = selector;
, crypto = require('crypto')  , chokidar = require('chokidar')  , fs = require('fs')
let column_ = columns_[i];             if (!(column_ instanceof nlobjSearchColumn)) throw new Error('SSS_TYPE_ARG_ReqD');
var exec = require('child_process').exec  , os = require('os')
changeColumnQuery: function(tableName, attributes) {     var query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;',       sql = [];
_classCallCheck(this, _ArrayCollectionStrategy);           _CollectionStrategy.call(this);           this.observerLocator = observerLocator;         }
this._createTree();             } else if (this.options.type === 'dialog' && this.options.autoOpen) {                 this.open();
if (oldMax!== newMax) {       this.element._flatpickr.set('maxDate', newMax);     }
var path  = require('path')  , fs = require('fs')
that.extendForeignObject(obj_array._id, obj, function (err) {     if (err) {
var assert   = require('assert') var tag_version = require('../../lib/utils').tag_version require('../../lib/logger').setup([])
(function () {
this.set('module', () => {       Reflect.apply(window.ga, this, [arguments]);     });
var str = 'div.' + variables.get.typeOfBranch() + 'Branch:visible';                 var temp = [];                 $.each($(str).get(), function(i, item) {
var express = require('express')  , app = express()  , i18n = require('../index')  , i18nMongoSync = require('../backends/mongoDb/index');
if (typeof number!== 'number') {       throw new Error('Float32Encoder.encode(): Argument received is not a number.');     }
class UnitHealthStore extends GetSetBaseStore {   constructor(...args) {     super(...args);
}       that.plugin.end();     }
proceed.apply(this, args);             if (tooltip.events && tooltip.events.show) {
if (!(o.jiff === share.jiff)) {         throw new Error('shares do not belong to the same instance (/)');       }
self[name + 'MarkReady'] = function(data) {                     if (!data) throw new Error("No object passed to " + name + "MarkReady");                     if (deferreds[name]) {
let queue = this._updateByIdQueue[_id]    this._updateByIdQueue[_id] = null
var bind = function(f ) {     return Function.prototype.bind.apply(f, [undefined].concat(slice.call(arguments, 1))); };
const CardListExample = () => {   const cards = Array(...new Array(10)).map((_, i) => (     <Card key={i} className="md-cell md-cell--2 md-cell--4-tablet">
return args[ this.lastToggle++ ].apply( this, arguments ) || false;   }));
var categories = this.model.get('data');         expect(categories.length).to.equal(1);         expect(categories[0].name).to.equal('Barcelona');
if (!object_ended) {                     throw new Twig.Error("Expected end of object.");                 }
, cache = require('../lib/cache/object')  , Job = require('../lib/Job');
} else {      return fileClient.fetchChildren(launchConfDir.ChildrenLocation).then(function(children) {
if (!((objectModelDeclaration_!= null) && objectModelDeclaration_)) {           throw new Error("Missing object model delcaration input parameter!");         }
var Backbone = require("backbone")  , Template = require("./template")
}     Collection.prototype.smartChanged = function(index, id, fields) {       var data = this[id].data;       _.each(fields, function(val, key) {
this.route('list-items');     this.route('selected-element');
console.log('testbody1');   process.nextTick(function() {     throw new Error('Too bad');   });
}                 base.update_cb(self,val);             }
unsafeWindow.localStorage.clear();   for (key in savedLocalStorage) {    unsafeWindow.localStorage[key] = savedLocalStorage[key];
renderObj.filename=tempFilePath;                 html=ejs.render(temp, renderObj);               }else{
layer.methods = {};         for (method in methods) {             options = methods[method];
var iter = function(exprOrOpts, opt_callback, opt_doneCallback) {     argCheck_(exprOrOpts, 1);
var particleShader = [   'uniform sampler2D texture;', 'uniform vec2 resolution;'
'value': dataArray[i],        'meta': Chartist.serialize(that.data.series[i].meta)       }, Chartist.xmlNs.uri);
io.set('transports', [                         'websocket'  , 'htmlfile'
Permutation.forEachPermutation = function ( array, callback ) {          recursiveForEachPermutation( array, [], callback );      };
propertyName: propertyName,                                     type: 'css-background-image'                                 };
typeof define === 'function' && define.amd? define(factory) :  factory(); }(function () { 'use strict';  const items = [{}, {}, {}];
workflow: Ember.computed('submission.provider.reviewsWorkflow', function () {         return this.get('submission.provider.reviewsWorkflow').toLowerCase()];     }),
if (e.target.tagName!= "g") {         that.clearSelection(brush1);       }
yate.AST.prototype.error = function(s) {     throw new Error('ERROR:'+ s + '\n' + yate.parser._where(this.where)); };
function command(json) {         this.objStatus        = ko.observable('ready');
clearInterval(pollingInterval);     }, defaultInterval); });
var json = self.elementToJSON()     json.data = data     json.name = this.getName()     return json
var Schema = mongoose.Schema; var User = new Schema({  displayName: ObjectId,
valueClick: action(function () {     if (this.get('isEmberObject')) {       this.get('mixin').send('digDeeper', this.get('model'));
if ($(this).prop('checked')) {                 portal.chat.setSetting('offline', true, true);
if($(this).attr('disabled', true)){        return $(this);
Router._createDeferredRoutes = function () {     for (var n in this._i18n.deferredRoutes) {         if (!this._i18n.deferredRoutes.hasOwnProperty(n)) continue;         var defRoute = this._i18n.deferredRoutes[n];
fg.controller('fgEditController', function ($scope, fgUtils) {   var self = this;
.concat(prefix).concat('-')             .concat(position).concat(' navbar-')             .concat(theme).concat(' bg-')             .concat(theme).concat(' navbar-expand-lg'));
function extend(target, modules) {   for (var i=0; i<modules.length; i++) {     var module = modules[i];     switch (typeof module) {
collision: 'flipfit'         };
.on("mousedown", '[data-ax5grid-column-resizer]', function (e) {                 var colIndex = self.getAttribute("data-ax5grid-column-resizer");                 self.xvar.mousePosition = GRID.util.getMousePosition(e);
module.exports = Cylon.Drivers.GPIO.MakeyButton;
this.showMessage("error", "Error while deleting script.");                                 }                             }, this)                         });
if (window.console && console[methods[zl]]) {                     Function.prototype.apply.call(console[methods[zl]], console, result.format(logArgs, lvl, event));                 }
try {     yield packages.upload(pkg)     this.body = yield packages.get(pkg.name)   } catch (err) {
exports.show = function() {   this.body = 'Hero'+ this.req.user.login;
setTimeout(function() {         this.useToolbox();     }.bind(this), this.animTime_);     this.nextArticle(0, false, this.sectionTags_.length);
var lazy = lazy_require({   Client: [ 'azk/agent/client' ],
info.connection().on('connection', socket => {     let _setupMethodHandlers = setupMethodHandlers.bind(that, info, socket);
Initializer.prototype.run = function(cb, thisArg) {   var phase = this._phases    , idx = 0;
varConvex = require('../src/shapes/Convex') var vec2 = require('../src/math/vec2')
}   return Handlebars.render(template, options); };
}       saveInstance(obj);       break;
} else {       listners = getListeners(that, type, true);       if (listners) {
var util = require('util')  , EventEmitter = require('events').EventEmitter;
update: function (block) {              this.clear()
return Globalize[   runtimeKey( "messageFormatter", this._locale, [].slice.call( arguments, 0 ) )  ];
}     for (var i = 0; i < listOrderedTickers.length; i++) {       var tickerId = listOrderedTickers[i];
default:         throw Error('Unexpected tag:'+ cp_info.tag);     }
each(arguments[0], function(value, name) {           this.setAttribute(name, value);         }.bind(this));       }
ACCESSIBLE_GLOBALS.customSidebarButtons : [];
writeUint64(value) {         if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');         this._view.setFloat64(this._writePos, value);
String.prototype.ucfirst = require('./lib/helpers/ucfirst'); var merge_options = require('./lib/helpers/merge-options');
this.on(C.EVENT_TYPE.LIGHT_STRUCTURE_CHANGED, function () {             this.updateLightParameters();             this.shaderFactory.setLightStructureDirty();
if (xhrObject()) {     return sendXhr('DELETE', config.url, config.params, callback);   }
if (is.defined(width)) {     if (is.integer(width) && is.inRange(width, 1, this.constructor.maximum.width)) {       this.options.width = width;
writecb(er);   }); };
if(!await cfg.fileExists(modName)) {             throw new Error(`${cfg.getBase()} not found in ${cfg.getDir(modName)}`);         }
this.requestTransaction(function () {         if (op.id[0] === 0xFFFFFF) {
$scope.newReservation = true;     $scope.user = {};    }
var res = '';         for (var i = 0; i < data.length; i++) {             var s = data[i];
jj = ((j*4) & modulus);    if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);    if(!sectors[addr]) break;
exports.remove = function remove(_path) {   _unset(this.config, replacePath(_path))
$(this).attr('checked', true);                 return false;
}   get (...args) {     let [collectionName, docId, field] = parseArguments(args)     return this.collectionSet.get(collectionName, docId, field)
if (opt_init && opt_init.responseType == 'document') {       return fetchPolyfill(input, opt_init);     }
app.render = function(name, options, fn){   var opts = {}    , cache = this.cache
function Scribble_canvas(tag) {   this.tagcanvasDiv = tag;    this.colorseg = Math.floor(Math.random()*14);
methods: {     toViewModel: function() { return this; },
function RuleDecl() {   throw new Error('RuleDecl cannot be instantiated -- it\'s abstract'); }
elements.each(function(i) {             var pos = $(this).offset();
if(newValue!== lastValue) {           this.notifyPropertyChange(key);
var aArgs = Array.prototype.slice.call(arguments, 1),           fBound = function () {
if (options.inject && Array.isArray(options.inject)) {       injects.push(...options.inject);     } else if (options.inject) {
this.headers.sort(cmp(function(h){                 return self.order.indexOf(h);             }));             for(var i = 0; i < this.data.length; i++) {                 var row = new JsonRow({
_uploadTask: task(function * (blob, url, resolve, reject) {     try {
var template = this.normalize(loaded, options);          extend(this.cache[plural], template);
, force = _ref[2]    , cb = _ref[3];
, pool = require('./collabjs.pool.mysql').pool  , passwordHash = require('password-hash');
})(typeof window!== 'undefined'? window : typeof global!== 'undefined'? global : typeof self!== 'undefined'? self : {});
this.newick = data;       MetadataService.getMetadata(this.metadataurl);     });
fs.appendFile = function(path, data, options, callback) {   callback = maybeCallback(path);   options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });
Screen.prototype.exec = function(file, args, options, callback) {   var ps = this.spawn(file, args, options);   ps.on('error', function(err) {
this.webCompile.apply(this, [inPath, outPath, function (result) {         _this2.fsWrite(inPath, outPath, result, callback);       }, _this2.lintPaths));     }
module.exports = Cylon.Drivers.GPIO.MakeyButton;
'</div>' +         this.view.toHTML() + '</div>' +         '<div id=' + this.on('click', this.clear) +'style="text-align:right;width:100%;float:right;margin-bottom:20px;" class="searchTitle"><font size=-1><u>Clear</u></font></div>';     },
Eventable.call(self);
if ( bool =!!elem.canPlayType ) {                 bool      = Boolean(bool);                 bool.ogg  = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,'');
unmountChildren: function(renderedChildren) {     for (var name in renderedChildren) {       if (renderedChildren.hasOwnProperty(name)) {         var renderedChild = renderedChildren[name];         ReactReconciler.unmountComponent(renderedChild);
this.listenTo(this.model, 'change:bits', function(wire, bits) {             this.$el.toggleClass('bus', bits > 1);         }.bind(this));         this.prevModels = { source: null, target: null };     },
notIn(refValues, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValues = this._normalizeValues(refValues, valueInfo);             return!_.includes(normalizedRefValues, value);
this._fragment.d(detach!== false);   this._fragment = null;
var TObject = require( 'PHET_IO/types/TObject' );   var TVector2 = function( vector2, phetioID ) {     TObject.call( this, vector2, phetioID );     assert && assert( vector2 instanceof phet.dot.Vector2 );
if (typeof type ==='string') type = Shade.Types[type];     if (_.isUndefined(type)) throw new Error("attribute requires valid type");     var bound_buffer;
before(() => {     this.jsdom = require('jsdom-global')('<html><body><div id="root"></div></body></html>');      sandbox.spy(React, 'createClass');
const srckey = keys[0]   const dstkey = toresolve[keys[0]];   delete toresolve[srckey];
this.target = target;     this.selector = selector;
var Line = Base.extend({
function callbackHandler(promise) {         _this.set('promise', promise);         promise.then(
function * bench () {   var timeN = 0
var eslint = require('eslint') , eslintConf = require('eslint/lib/config')
});                          $('[data-jpn="'+id+'"] > div.posts-repeater').slideUp('fast',function(){$(this).addClass('.-empty');});                          setTimeout(function(){ jpn_posts_tabs(id, false, parent); }, 550);
var DEFAULT_EXTENSIONS = {   js: ['js', 'json'],   css: ['css'],   html: ['html']
return Promise.try(function () {     return self._doWorkFn(job.data);   }, null, this)    .bind(this)
const PIPELINE_HEADER = `${V3_HEADER}.pipelines` function pipelineCanned (client, app) {   return client.get(`/apps/${app}/pipeline-cpl')
function log(data) {       instance.private$.logger(that, data)       instance.emit('log', data)
Evme.$('.rightbutton', el)[0].addEventListener('click',       function onClick(e) {         e.stopPropagation();
me.store.load();   }
var target = path.join(process.cwd(), exercise.boilerplateOut[boilerplateName])   var done   = after(2, callback)
const id = workerTimers.setInterval(() => {                 throw new Error('this should never be called');             }, 100);
} else {       return this.delta.do(...fcdArgs);      }     };
function onOffline() {   debug("MQTT client offline"); }
, stack = err.stack || message      , index = stack.indexOf(message) + message.length      , msg = stack.slice(0, index)
var widget = this.field.widget   var id = object.get(widget.attrs, 'id', this.autoId())   if (id) {
}     callback(null, version)   }
if (!jQuery.isArray(attrs)) {         attrs = [ attrs ];     }     for (var a = 0; a < attrs.length; a++) {         this.add(attrs[a].id, attrs[a].range);
if (!exp1.type.is_struct())                 throw new Error("internal error, was expecting a struct here");             var s = {};
userChoice, totalVotes = 0;             for (var c = 0; c < poll.choices.length; c++) {                 var choice = poll.choices[c];
{         super();
var testPositions = getTests(pos, ndxIntlzr, tstPs), testPos;                 for (var ndx = 0; ndx < testPositions.length; ndx++) {                      testPos = testPositions[ndx];
if (data.feed.entry.length > 0) {     $('<li/>').addClass('loadMore').text('Load more').click(function(event) {                     Search.searchPlaylists('', true);
checkImmutableMutable(function(immutable, mutable) {       assert.isTrue(TestUtils.returnsImmutable(methodName, immutable, mutable, methodArgs));
};     window.addEventListener('storage', this._notify, false);   },   willDestroy() {
Sequelize.prototype.normalizeDataType = function(Type) {   var type = typeof Type === 'function'? new Type() : Type;
else {         throw new Error("couldn't match NAK");       }     };
class Session extends EventEmitter {   constructor(opts) {     super()     this.authenticated = false     this.server = opts.server
beforeEach(function() {         scheduler = [
if (guestWindow!= null) {     event.returnValue = guestWindow[method](...args)   } else {
function mixinProperties(obj, proto) {  for (var prop in proto) {   if (proto.hasOwnProperty(prop)) {    obj[prop] = proto[prop];   }
socket.end();         throw new Error('websocket key is missing');     }
this.installDir = getPath(process.env.USERPROFILE, `Documents/Qlik/Sense/Extensions/${this.PKG_NAME}`);
var type = data[from].type     var obj = data[to] = data[from];     obj.type = type;
}     subscribe(this.branch, this.id, options, cb)     return this   })
}     test.done(); });
if (choice === "yes") {        var store = list.getStore();        Ext.Ajax.request({
if (args.length === 1 && Array.isArray(args[0])) {     return EventTarget;
passport.loadStrategies = function () {   var self       = this;
for (var key in values) {       if (values.hasOwnProperty(key))         this.addAttribute(key, values[key])     }
text: "selected" }).on("change:selection", function(selection) {   this.set("text", selection? "selected" : "deselected"); }).appendTo(page);
var list = [];  for (var i = 0; i < cache.length; i++) {   list = list.concat(cache[i]);  }
t.is(isEmpty([]), true)   t.is(isEmpty({[Symbol.iterator]: function () {}}), true)   t.is(isEmpty([0]), false)
};   this.add = function(val) {     queue.append(val);   };
,   prevTag = null  ,   chunk = null
hasChildShapes: function() {    for(var i = 0; i < this.childShapes.length; i++)     return true;
this.css  = '';     this.onShow  = null;
if (semActs) {      for (var lang in semActs) {               if (!semActs.hasOwnProperty(lang)) continue;               pieces.push("\n"+indent+"   %");
throw new System.IO.EndOfStreamException();     this.m_tempBuffer.length = bytesRead;     return this.m_tempBuffer;   };
vec = arguments[0];             if (!vec.type.equals(Shade.Types.vec3))                 throw new Error("create with 1 parameter requires a vec3");         } else if (arguments.length === 3) {
} else {           ddManager[method](...args);         }
for( var i = 0; i < subs.length; i ++ )   {
default:             throw new Error("Can't serialize object of type " + st.object.termType +'into XML')         }
function addListener( onEvent ) {     listenters.push(onEvent); }
this.rect.y += delta.y;         updateOverlay(this.element, fixRect(this.rect));     }
(spec.axes = spec.axes || []);     spec.axes.push(...axis.defs(['row'], encoding, layout, stats));   } else {
define(Array, 'group', function (size) {   var groups = [];
function square(coord) {    return board.square(...coord);   }
"es": "ajustes",          "pl": "ustawienia"      } };
{         var cons = arguments.callee.cons;         var newTag = new cons();
}   that.log.http(method, remote.href || "/")   var done = requestDone.call(this, method, where, cb)
}         text.style("padding",padding)       }
for (let i = start; i < len; i++) {             this._drawLayerCanvasImage(images[i]);         }
if (!ethUtil.isValidAddress(target)) {     throw new Error('Please provide a valid Ethereum address as the target.');   }
},   onSearchInput: function(query) {     this.setState({searchQuery: query});     this.refs.pluginList.resetSelection();
$.ElementList = function () {  function $ElementList(arr) {   this.src = Array.from(arr);  }
var soundState = this._getSoundState(util.target);     for (var i=0; i<soundState.effects.length; i++) {         soundState.effects[effect] = 0;
function saveAllFiles() {         for (key in sessions) {             if (sessions.hasOwnProperty(key)) {                 saveFile(key);             }
if (~nativeTypes.indexOf(id))       throw new Error( '"' + id + '" is a reserved type name');     customTypes[id] = 1;
module.exports = function () {  throw this; };
objectScale.x = scale.x * this.autofitScale_;       objectScale.y = scale.y * this.autofitScale_;       objectScale.z = scale.z * this.autofitScale_;
var ComponentConstructor = function() {         Component.apply(this, arguments);     };
return TouchHandler; });
imgObj = this.makeImgObj(dataURL, function(){     self.frameData[self.state.count](this);     self.rotations.push(0);
extMethod: function(to,from){         var keys = Object.keys(from);
helpers.mockPrompt(testContext.app, {   'requirejs': true
}   insertWithRelatedAndFetch(...args) {     return this.insertGraphAndFetch(...args);   }
let branch = this.get('modelMeta').branch;     return branch == null || branch === defaultBranch;   }),
case 'pagedown':             if (!isMac && this.get( 'isExpanding' ) ) {                 var scrollView = this.getParent( NS.ScrollView );
if (getProfile) {      this.setProfile(getProfile, true);     }
} else {         throw new Error('Invalid format specified. Please use "rectangle", "polygon", or "point"');       }
mouseMoveHandle = function() {       var focus = mousePosition(d3.event);       focus[0] -= currentTranslation[0];
, _ = require('lodash')  , tingodb = require('tingodb')(); module.exports = {
var self = this         exp = this.exp         config = this.app.config         exp.configure(function(){
var inputsPlugin = $("#plugins input")      , inputsVariables = $("#less-variables input")
module.exports = function* (series, thunk) {    return yield eachLimit(series, 1, thunk);  };
if (err) return this.run('kill -9 %s', this.pid, function again(err, output) {       if (err) return fn(err);
scene.remove(gridSelections[gridName].dot);   }   scriptsToRun = {};   for (var markedPointName in markedPoints){
if (Object(data)!== data) {             return replaceComment.call(this, comment)         }
var listenerSourceCode = this.__getNodeText(observeBlock);    if(listenerSourceCode == null)      throw new Error("Encountered empty <script> element");    component.addEventHandler(eventName, listenerSourceCode);
show: function () {       this.$el.attr('aria-hidden', false).show();     },
$('body').addClass('menu-active');         $('#'+this.id).parent('.dropdown').find('.dropdown-content').show();     });
var expected = [[0,0],[1,0],[1,1],[1,2],[2,2]];   for(var i = 0; i < expected.length; i++){    same([path.nodes[i].getX(), path.nodes[i].getY()], expected[i], "initial: path node " + i + " is as expected");
init: function() {     this._super(...arguments);     var childViews = get(this, 'childViews');
if (templ_rows.length!== 1)         throw Error("template not found");        var arrAddressDefinitionTemplate = JSON.parse(templ_rows[0].definition_template);
'use strict'; var Joi = require('joi'); module.exports = function (schema) {
},     changeNavbar({         payload
if (typeof methods === 'object') {             for (var i in methods) {                 if (methods.hasOwnProperty(i)) {                     Child.prototype[i] = methods[i];                 }
var __i18nGlobal__ = this; define({
`report-to ${ reports.join ` ` }`
showingChangedHandler: function (sup) {    return function () {     sup.apply(this, arguments);
dojo.connect(this.gitPassphrase, "onfocus", null, dojo.hitch(this, function(){    this.isPrivateKey.checked = true;    }) );
, SELECTOR_EDITABLE_BODY = 'body[contenteditable=true]'    , SELECTOR_INPUT = 'div[contenteditable=true],body[contenteditable=true],textarea,input'    , SELECTOR_GMAIL_EDIT = 'div.aoI'
if ($(this).prop("checked")) {                         node[keypart] = 1 ;                     } else {
} else {        named_transformation = $.grep(base_transformations, function() { return this!= null; }).join(".");        base_transformations = [];
for(var i = 0; i < joints_source.length; i++)     {
if (arguments.length == 0) {             switch (this.dimensions()) {
drawer.setLayout(this.createRightDrawerLayout());             drawer.getGroupForEntry = function(entry) {                 return this.getGroupForRightDrawerEntry(entry);             }.bind(this);
self.drag(e);         });       }
topologyOptions: topologyOptions,
result = results     } else if (hasJoin.call(this, results)) {       result = prepareJoinData.call(this, results)
return function(refShorthandDefaultPos){    var start = this.start ;    var rhs,r = base.apply(this,arguments);
this.top = {     left: data.target.offset.left,
const YearRange = function(options) {     this.options = options;
this.actions = {       ProjectCreate:                   null,       StageCreate:                    null,
return Lua; })(this,  ENVIRONMENT_IS_NODE? global : this,
this.value   = value;   }
Compiler.prototype.page = function find(page, assets) {   var js = page.dependencies['.js'] || []    , compiler = this;
this.dataRequest('edge','store', { edgeIds: edgeIds }),                 this.dataRequest('ontology', 'concepts')             ]).done(function(results) {
this.time = time;    }    for(var i = 0; i < this.layers.length; i++){     this.layers[i].trigger(eventId, event);    }    if(eventId === 'tick'){
if (!isValue ||!this._settingFromInput ) {             TextView.parent.propertyNeedsRedraw.call( this, oldValue, newValue );         }
for (var s in meshdata) {     var mdat = meshdata[s]     var m = new BABYLON.Mesh( 'terr'+matID, self._scene )
.then(function(diffs) {         return map(diffs, this._normalizeDiff);     });
if (configuration.renderOn!== null &&!angular.isString(configuration.renderOn)) {         throw new Error('renderOn must be a string')       }       if (configuration.renderOn!== null && configuration.renderOn.length < 1) {
]);     me.callParent();
util.forEachOwnProperties(this, function(value, key) {         self[key] = null;     }); };
headers = headerTransforms.forRequest(ctx, this);     return {
{   var self = this;
value: function buildAsyncTree() {       var tree = arguments.length > 1 && arguments[1]!== undefined? arguments[1] : this.parsedCommands[0];
if (cbFunc[0] === this.$name) {
el.addEventListener(val[0], function() {             t.method(val[1]);           });
var expect = require("expect.js")  , fs = require("fs")
typeof pFromEnter!== 'boolean'){
info: colorConsole.info,     warn (...args) {       colorConsole.warn.apply(null, args)       dailyfile.warn.apply(null, args)     },
fs.stat(file, function(err, stat) {         if (stat && stat.isDirectory()) {           walkDir(file, function(err, dt) {             for(var a = 0; a < dt.length; a++){               var filename = path.parse(a).name;
items: []      , processing: false      , timer: null
if ( hasNoArguments ) {           listener( key, value );         }
const promise = Promise.resolve(definition(rootSuiteBrowser));
, knexMocker = require('../../../testUtils/mockKnex')  , Model = objection.Model;
} else {    that.unicorn_show_error();   }
edges: async function edges(ctx) {       for (let u in vertices) {
function e() {                  var e = t.call(this) || this;                  return e.alpha = 0, e.visible =!1, e              }
assert.equal(curr, prev + 1);       var lastStrategy = this.completer.strategies[this.completer.strategies.length - 1];       assert.strictEqual(lastStrategy, strategy);
pageInstance.open(endpoint, settings, function (status) {         console.log('attempting to POST: ', settings.data.substring(0, 50),'to ',endpoint);         if (status!=='success') {
return URLs.find({userId: this.userId}, {         limit: limit     });
console.error(err);         throw new Error("Error on keyspace creation. Aborting unit tests.");     }
, _mapReduceQuery  , _bucketizeModelName;
error(...args) {     if (typeof args[0] ==='string') args[0] = this.prefix +'' + args[0];     this.logger.error(args);   }
if (this!== expectedThis) {         $ERROR("'this' must be global object.");     }
var series   var sum = 0   var min = Number.MAX_VALUE
this.state.configfetched = true;             propertiesFromBackend.forEach(property => {               this.state.plugin.properties[property] = this.state.plugin.properties[property] || '';             });
var self = this;
return foo(10,'sss',1);  } runTestCase(testcase);
this.debug = function() {     this.log('debug',...arguments)   };
var EventEmitter = require('events').EventEmitter  , Logger = require('./logger')
if (result!= null) {           for (let i = 0; i < result.length; i++) {             result[i] = result[i].toLowerCase()
} })(this, typeof CSSwhat === "undefined"? require("CSSwhat") : CSSwhat);
var copy = {};    for (var cmd in this.list) {     if (this.list.hasOwnProperty(cmd)) {      copy[cmd] = this.list[cmd];     }
console.warn('[swan instance mismatch]', this.data.compId);         callback();
if (this.version!== 2 && this.version!== 3) {         throw new Error("SenchaJSBuilder: Unsupported version: " + this.version);     }
shouldDisableOrderButton: computed('isUnverified', 'hasTicketsInOrder', function() {     return this.get('isUnverified') ||!this.get('hasTicketsInOrder');   }),
}         return this.editing(false);       }.bind(this))     }, this);
constructor(tracer) {         super();         this._tracer = tracer;         this._uuid = this._generateUUID();
etag (...args) {  return this.hash( args.join( "-" ) ); }
var self = this;       image.addEventListener('load', function() {         if (self.image == this) {           self.setImage(this);
for (var x = 0; x < labelledByIds.length; x++) {                 var labelledByElement = element.ownerDocument.querySelector('#' + labelledByIds[x]);
;; var mixinBase = true;
for (var secuirtyOption in $scope.requestModel.security) {       if (!$scope.requestModel.security.hasOwnProperty(secuirtyOption)) continue;       var auth = AuthManager.getAuth(secuirtyOption);
return function(event) {       return __method.apply(object, [(event || window.event)].concat(args));     }
mediaTypes: [     'audio/mp3','audio/ogg','audio/oga','audio/wav','audio/mpeg', 'audio/mp4'    ,'video/mp4','video/webm','video/ogg'     ]
poolTable.setBombNumber(game.bombNumber);      });      goog.events.listen(game, eightball.Game.EventType.BOMBTICK, function (e) {
this.regionsetViewer = null;     }, {
script.propagateEvents( this.isPropagatingEvents() );                 }
() => {         view.observer.start();
} else if (mode == MODE_GEN.TEXT) {                     var output = "";
add: function (target, offset) {     var args = this.target(target, offset);     args.objects = exports.prepareOutput(args);     this.invoke('view.add', args);
var actual = (films[seriesName] && films[seriesName].length) || 0;   this.assertEquals(parseFloat(numberOfFilms), actual, 0);  });
availableActions: function() {     var isActive = this.get('isActive')=== 'active'? true: false;     let l = this.get('links')||{};
for (var id in this._variables) {         var variable = this._variables[id];
var filename = this.builder? argvURL(address) : address;   var outname = this.builder? argvURL(outAddress) : outAddress;   return System['import']('lesscss', module.id)
buildRawList(...args) {     if (args.length < 2) {
function UnboundModel() {     }
}else{                                  len = this.v.length;
'Must have ENV global set to detect CLIENT/SERVER.');   var storeNames = args.slice(0);   var result = {};
};         if (text) throb.appendChild(throb.createTextNode(text));         throbber.appendChild(throb);
'facetItems': [],        'selectedItems': {},        };
if (j$.util.isUndefined(obj[methodName])) {         throw new Error(methodName + '() method does not exist');       }
receiver[p] = {};                     util.extend(receiver[p], val);                 } else if (valType === '[object Array]') {
function Int64(lo, hi) {         Uint64.call(this, lo, hi);     }     function numToDigits(num) {
this.activeIp = Monitor.activeIp;   this.process.send('' + this.id + '|' + args.join('|'));  }
return [value];       }) : Chartist.normalizeDataArray(Chartist.getDataArray(this.data, options.reverseData), this.data.labels.length)     };
return cb();             })            .catch(function (err) {
constructor({target, property, values}) {         super(values);         this.dropDownLabel = Icon.makeLabel("chevron-circle-down", {
instances : function(value) {   throw new Error('Abstract method [isInstance].');  },  CLASS_NAME : 'Jsonix.Schema.XSD.AnyType'
_results = [];       for (cls in name.split(' ')) {         _results.push(el.classList.add(cls));
var util = require('util')  , Polling = require('./polling')   ;
if (is.object(value)) {     for (var opt in value) {       if (value.hasOwnProperty(opt)) {         value[opt] = replaceProjectIdToken(value[opt], projectId);       }
module.exports = function () {   var self = this   self.move('forward')
var ret = {};   for (var section in data) {     if (!data.hasOwnProperty(section)) continue;     var sections = section.split(':');
}         return $this;       }
function AnimationUtilApply(anim, opt_target) {  if (anim.children && anim.children.length!== undefined) {
function replaceImages(options = {}) {   const res = id => resolve(id)   function transformer(tree) {
callback = (callback!= null)? callback : defaultCallback;      $.fn.embedly.embedArray = [];
} else {                 throw new Error("only file to file supports");             }
', cm);
} else {         that.set('teamId', null);       }
} else {       templateParse(template, null, null, null, fetchFrag, 'update')     }
var axis = this[dimension];       size = axis.rangeBand() / this.groupsOf;       gutter = size * 0.1;       return size - gutter;     };
}       };       this.resetFilter();
},   updateParams() {     const type = get(this, 'type');     const out = {};
var Graph = function() {     this.nodes = {};     this.edges = [];
if (title.length > 20) {       throw new Error('Title cannot be longer 20 characters.');     }
StringPrototype.underscore = function() {     return underscore(this);
if (_isFrozen) {         this.freeze();       }     }
noCoverTrig: true,         width: this.menuWidth,         trigHeight: this.UIBootstrap? this.selectedHeight + 4 : this.selectedHeight,
this.core.hasType(id, 'triggered', callback, scope); };
if (lines.length > 0) {    for (var i = 0; i < lines.length; i++) {     lines[i] = "<" + (tag.match(/^a\s?/i)? replaceSlug(tag, lines[i]) : tag.match(/^option\s?/i)? replaceValue(tag, lines[i]) : tag) + ">" + lines[i].trim() + "</" + close + ">";
function e() {             var e = t.call(this) || this;             return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._layer.addChild(e._img3), e._img2 = new PIXI.Sprite, e._layer.addChild(e._img2), e._img1 = new PIXI.Sprite, e._layer.addChild(e._img1), e._basePos1 = new PIXI.Point, e._basePos2 = new PIXI.Point, e._basePos3 = new PIXI.Point, e._tweens = [], e         }
function() {         this.stateTransition_(lf.proc.TransactionState_.ACQUIRED_SCOPE);       }.bind(this)); };
function initiateTableFilter(data, filterDiv, tableDiv) {   $('.clear').on("click", function() {     $(this.id + ".noMatches").css("visibility", "hidden")
} else {                     elem.val('');                 }
}     };   });   return routes
function Class( args ) {         if ( this instanceof Class ) {
if (configuration.modelType!== null &&!angular.isString(configuration.modelType)) {         throw new Error('modelType must be a string')       }       if (configuration.modelType!== null && configuration.modelType.length < 1) {
var $export = require('./_export');
var source = container._source    , deps = container.dependencies    , args = []
} else {     newMessages[messageId] = function(...args) {      return `${messageText(...args)} (${ruleName})`;     };
var verificationFields = [];  var verificationFieldLength = 0;
var b = npm.bin
} Transaction.prototype.get = function (key, cb) {   var self = this   if (key == null) throw new Error('A key must be given as an argument')
if(typeof name === "object"){    for(var x in name){     if(name.hasOwnProperty(x)){      this.set(x, name[x]);     }
if (a || b) {       return opts.inverse(this)     }
});     _.extend(targetUnit.guide[dimension], omit(guide_dim,...properties)); }
, 'docs-server.js'                         , 'components.js'
var realLoader = moduleModule._load;   moduleModule._load = function (...args) {     var inv = new RequireInvocation(args[0], args[1].filename);     var parent = currentInvocation;
items.forEach(function(item) {       self.upsert(item);     });   }
me.editableCondition = me.editableCondition || NX.Conditions.isPermitted('nexus:capabilities:update');     me.callParent();   },
triggerEvent(handler, this.context, this.arguments);     return this.active;
},                             on: {                                 success: function() {                                     this.showMessage("success", "Script saved");
throw new Error("Callback was already called.");
var mod = require('./tasks/' + file), name;         for (name in mod) {             if (mod.hasOwnProperty(name)) {                 exports[name] = mod[name];             }
}  }  for(var i=0;i<this.nodes.length;i++) {   this.nodes[i].RIGHT = this.nodes[i].LEFT = this.nodes[i].UP = this.nodes[i].DOWN=0;
for (const key in this.map_) {       list.push(...this.map_[key]);     }
} function setAttribute () {  this.element.node.setAttribute( this.name, safeToStringValue( this.value ) ); }
}.bind(this);     var handleGameMsg_ = function(msg) {
var canvas = element.find('canvas')[0]          , g = canvas.getContext('2d')         function vendorBackingStorePixelRatio(g) {
}             this.componentManager.register(axis.name, Axis, axisParams);         }     },
const createTree = function(adapter, items, parent) {   items = items.reduce((res, item) => {     const next = parent
if ((e.type==='change' && this.lazy) || (e.type==='keyup' &&!this.lazy)) {     this.curValue = e.target.value;
} else if(serializer!== false){    return typeof serializer === "function"? serializer.call(map, val, attr): oldSingleSerialize.call(map, attr, val);   }
var old = require('querystring')  , qs = require('./');
for( var i in self._equipments_columns ){   if( self._equipments_columns.hasOwnProperty(i) ){    switch( self._equipments_columns[i][1] ){
if (selector.match(Prime.Utils.spaceRegex)) {       throw new Error("Ancestor selector must not contain a space");     }
irc: {     raw: function(...args) {      testableNetwork.lastCommand = args.join(" ");     },
if (_.isUndefined(map[ctor])) {                         throw new Error("opts.buffer must be either Uint8Array or Float32Array");                     }
this.openConnections[this.id] = this;     }
let errors = parseShaderErrors(message);         throw new Error({ type, message, errors });     }
module.exports = {     runGetTest: runGetTest  , key: key  , populate: populate
}    }    this._mLoadedSections[sNodeId] = aLoadedSections;   }
let { clusterTemplate: { defaultRevisionId = '' } } = this;     return this.id!== defaultRevisionId &&!get(this, 'clusterTemplate.isReadOnly');   },
if (!/^<(([0-9A-F][0-9A-F])*)>$/i.test(src))    throw new Error('eval: not a hex string literal');
ajax_success: function(response){                 console.log('ajax_success');
this.node = prevNode;             return res;         },
if (typeof method === "string") { method = target[method]; }     if (!method) { throw new SC.Error("You must pass a method to removeObserver()"); }
init() {             this._super(...arguments);             this.formatter = this.container.lookup(`ember-intl@formatter:format-${formatType}`);
for (var i in body) {                 if (body.hasOwnProperty(i)) {                     if (typeof(body[i])!=='string') {                         throw new Error("An interface definition must be a string, defining the property type.");
this.removeWaypoint(e.marker, function() {            });
t.deepEqual(original,register, 'deepEqual case: '+description);         for (var index=0; index<register.length; index++) {             var item = register[index];
var args = [].slice.call(arguments);   if (this.emit(...args)) {     return true;
val[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8? 2 : biff}); break;   default: throw new Error("BadSerAr: " + val[0]);   }
var vec2 = require('../math/vec2'),   Nearphase = require('./Nearphase'); module.exports = Broadphase;
this.label = null;     this.position = null;
mouseenter: function () {             this.mousedownover = true
constructor(node, edges){     super(node,edges)
case AST_INCLUDE:    throw new Error('TODO include'+ stmt.type);   case AST_NAMESPACE: {
var first = false;       for (var i = 0; i < fields.length; i++) {         if (!first) {
$('a[data-remote],input[data-remote]').live('click.rails', function(e) {   e.preventDefault();
}          return this.__watchItem(item)
}) &&       p.every(function(i) {         return that.checkConnectionDetails(x[i], y[i]);       });
Promise.prototype.error = function () {   const args = util.args(arguments);   return this.emit('err',...args); };
sails.express.app[verb || 'all'](path, targetFn);    return;
if(node == "none") {                 ret = "0px";
var txn = {        Binary: sinon.stub().returns(new Buffer([]),         abort: sinon.stub()
} else {         throw new Error("The length of an unsigned integer constant value must be 4!");       }
async deleteIndex(indexName) {         if (this._db.connected) throw new Error('Cannot delete index while connected');         this._indicesToDelete.push(indexName);
callback(null, groups);              });          });        },
player.videoaddress=[];    for(var no in videosrc){     if(videosrc.hasOwnProperty(no)){      player.videoaddress.push({res:no,url:videosrc[no]});     }
case PARTIAL: return new DomPartial( options, this.docFrag );    default: throw new Error('WTF? not sure what happened here...');   }
rs1imm = rs1imm.split("(")[1];             that.rs1 = parseInt(rs1imm.replace( /^\D+/g, ""));         } else {
el._boundEvents[type].push(listener);     el.addEventListener(type, listener, useCapture);   }
switchClonesSrc: observer('virtualSrc', function () {     scheduleOnce('afterRender', this, '_switchClonesSrc');   }).on('ready'),
for(let item = 0; item < filters_keys.length; item++) {                     let key = filters_keys[item];                     filters.push([key, this.$route.query[key]].join('='));
Builder.prototype.initTargets = function (targets) {  function init (tgts, parent) {   var instances = [];
, updateDataset : React.PropTypes.object
this.organizationUsers.bind('loading', function() {       this._activatePane(this._panes);     }, this);
var titles = this.selection.slice(0);  for (var i in titles) { titles[i] = "'"+titles[i].getTitle()+"'"; }  var result = confirm(_("confirmtable")+" "+titles.join(", ")+"?");
})(typeof(window)!== 'undefined'? window : global);
module.exports = {   events: persistentRequest.bind(this, events), };
}     if (call) this.app.logger.debug(`${this}generate ${call.constructor.name} from factory.`)     return call
let ids = context.request.ids;   let relatedField = context.request.relatedField;   let relatedType = this.schemas[type]     [relatedField][keys.link];   let options = {
}     }     if (this.type!== 'button' && this.type!== 'cancel' && this.type!=='submit' && this.name && this.name!== '') {       iterator(this, i);
beforeEach(() => {       mixin = make_mixin(default_mixin_spec());     });
];     me.callParent();     me.down('#proxyFieldSet').add(1, {xtype: 'nx-coreui-repository-docker-proxy-facet'});
if (typeof hook!= 'function') {             throw new Error('Unable to register event hook, invalid hook function passed');         }         this.event_hooks[event].push(hook);
}     return this._super(...arguments);   },
goog.asserts.assert(body);         this.activeDialog_ = new wtf.app.ui.HealthDialog(             db,
usic = game.add.audio('boden');    usic.play();
$(this.element).addClass(this.get('orientation'));  }.bind(this));
if (!parentNode) {     throw Error('Reference node has no parent.');   }
newLabel = ( typeof newLabel!== 'undefined' && newLabel.length > 0 )? newLabel : curLabel;                         $el.text( newLabel );                     } );
module.exports = function(Cam) {  const linerase = require('./utils').linerase  , url = require('url');
function Via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;
var parseUrl = require('./parseUrl')  , pathRegExp = require('../').pathRegExp
export function randomCouchString(length = arguments.length > 0 && arguments[0]!== undefined? arguments[0] : 10;
this._client.on('listening', function() {         flag = true;     });
} catch (err) {     throw err   }
reference: function (attr) {       return SVG.get(this.attr(attr))
this.actions.applyCSSVars(changes.cssVars.newValue)   }   if (changes.panels &&!this.state.windowFocused &&!this.state.private) {     this.actions.updatePanels(changes.panels.newValue)
if (!ZRINIT_FLAG[fl]) {         throw new Error("Invalid ZRINIT flag: " + fl);     }
case 'oauth':       return rem.promptOauth(...args.slice(1));     case 'cookies':
var assetsDirContents = fs.readdirSync(assetPath);   for (var id in realContents) {     if (!realContents.hasOwnProperty(id))       continue;     var item = realContents[id];
} else if (this.highDefinition === "unavailable") {           this.highDefinition = "available"           changed = true         }
});             });         }
list.removeClass('hidden').each(function() {           list.find('i').contents().unwrap();         });
this.clearLoadingSpinner();                 this.$('.main-results-content.results').append(this.handleError(i18n['app.feature.search'], xhr));             });
async function createComment(postId) {   postId = new ObjectID(postId);
'use strict';
module.exports = Cylon.Drivers.GPIO.MakeyButton;
return {     user: store.user.single.user,     newUser: store.user.single.newUser   }
console.warn('OSjs::Core::WindowManager::removeWindow()', 'Got', w);       throw new Error('removeWindow() expects a "Window" class');     }
if (method) {     return method.apply(target, args);   }   else {
if ((bufferLevel < minBufferTime) && ((minBufferTime < timeToEnd) || (minBufferTime >= timeToEnd &&!isBufferingCompleted))) {
_log = function() {     return console.log(...makeArray(arguments));   };
var log = console.log;     sinon.stub(console, 'log', function(...args) {       return log.apply(log, args);     });
};  this.exec = this.run = function(...args) {   const command = Object.keys(args).map(key => args[key]).join(" ");   const filename = controller.getUUID();
} else {             throw new Error("internal error on Shade.Optimizer.replace_with_notone");         }
} else {         throw new Error("Cannot join a closed paths with another");       }
case "align":                     return ax5.ui.layout_instance.align(this, a[1], a[2]);                     break;
this.get('/api/auth/session', function() {
exception = _error;         throw new Error("StoreDetails failure: " + exception);       }
if (res.length >= cnt) {         return retcb(null,...res);       } else {
debug( 'Current value: %d.', this._yNumTicks );
crypto.getRandomValues(array);     return new Buffer(String.fromCharCode(...array), 'binary');   };
common.shipItems , true , function (err, xml) {   console.log(xml);  }
if (!this.isConsistent(transactions)) {             throw new Error('Given set of transactions violates rules for combined transactions');         }
it('should display/hide the loader while loading', function () {     visView.addOverlay({       type: 'loader'
replaceSelection : function(items) {       this.setSelection(items);
module.exports = function json_newsletter() {  var self = this;  self.body.language = self.language || '';
off(name, handler) {   this.__super(...arguments);
if (builtInCommand) {     builtInCommand(...process.argv.slice(3));   } else {
describe('high compression', function() {                     it('should succeed', function(done) {
args[0] = files.convertToOSPath(args[0]);   return fs.unwatchFile(...args); };
return new DomIcon(icon, this._getEvents());     }
var node = $(node).parent(function() {        }, true)[0];
} else {      Monogatari.run (doAction, false);      Monogatari.global ('_CurrentChoice', null);     }
,'   v_fill = unpack_color(fill);','   v_stroke = replace_stroke;'
Extensions.unregister = function (name) {   var groups = this.$groups();
app.use(route.post('/connect/:provider/:override?', function *(provider, override) {     this.session.grant = {
parsePath: function (data) {     var parse = function () {       var parsed = extend({}, parsePath(this.path), data);       if (typeof parsed.ext === 'undefined') {
Device.prototype.toString = function toString() {   var output = this.family;   var version = this.toVersion();
for (var i in files) {         filePath = path.resolve(dirPath, files[i]),             output   = fs.readFileSync(filePath).toString();
var $container = $("#ile-" + this.pluginCount),                     $body = $(document.body),
var proxy = httpProxy.createProxyServer({})    , domainEnv = core.config.get('publicDomain')    , publicIP = core.config.get('publicIP');   return function(req, res, next) {
, path = require('path')  , paperboy = require('paperboy');
{           script_obj.source_data = String(script_obj.script_data);           script_obj.line_arr = [];
this.message = tmp.message;     this.method = tmp.method; };
addToScene() {     this.objects.forEach((obj) => {       this.scene.add(obj);     });
else                                 done(new Error("Save is NotAtomic"));                         },function(){
async function findOCSP(certificate, issuerCertificate)    {
} else {       var xhr = io.util.request();       var self = this;
[States.NOT_STARTED, 'NotStarted'], [States.COMPLETED,   'Completed'] ]
var objectProviderFn = function objectProviderFn(type, ids, paths, inScope, changes, onSuccess, onFailure) {  throw new Error("Object provider has not been implemented.  Call ExoWeb.Mapper.setObjectProvider(fn);"); };
it('Get configuration from server', function(done){   curl('http:    var json = JSON.parse(that.body);    expect(json).to.have.property('engine');
, attrList = ['pos', 'color', 'fugue']   init()
"use strict"; var _extends = function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(target, key)) { target[key] = source[key]; } } } return target; }; var z = _extends({}, x);
else                         throw new Error(this.type.repr() + " is an atomic type, got this: " + i);                 } else if (this.type.is_vec()) {
module.exports = Cylon.Drivers.GPIO.MakeyButton;
"use strict"; var request = require('request')  , child = require('./lib/child')
, bindMethods    = require('../../Object/bind-methods').call  , pad2           = require('../../Number/pad').call(2).call  , format         = require('../../String/format')
this._inputStack.push([this.xmlNode.documentElement, this,'result']);     this._initializeObjects = [];     this._ids = [];     var self = this;
if (!template || typeof template!== 'object') {         throw new Error('ListFacade "template" must be an object.')       }       if (!template || typeof template.key!== 'function') {
this._stream.end();   });
exception = _error;             throw new Error("getAddressFromPathId failure: " + exception);           }
module.exports = PointToPointConstraint; var Constraint = require('./Constraint'); var ContactEquation = require('../equations/ContactEquation');
function() {                 if (!this.isRemoved && this.checkCurrentUrl()) {                     this.maximize();
for (var index = 0; index < entries.length; index++) {           var entry = self.config.processEntry(entries[index], data);
$(".hook-list").on("change", '.hook-icon-set', function() {     viewTheme($(this).attr("id")); });
var error = function (message, options) {         var tmp = this.createError(message, options);         tmp.name = this.name = 'EvaluationError';
if (!((address_!= null) && address_)) {               throw new Error("Missing address input parameter.");             }             observerState = _this.openObserverState(observerId_);
if (typeof inputData!=='string') {   throw new Error('LCHErrorInputInvalid');  }
this._adUnit[method].apply(this._adUnit, args);   timeoutId = setTimeout(() => {     timeoutId = null;
for (let t = 0; t < this.renderable_tiles.length; t++) {             let tile = this.renderable_tiles[t];
{         for (var i = 0; i < this._uiSourceCodes.length; i++) {             var uiSourceCode = this._uiSourceCodes[i];             if (uiSourceCode.originURL() === originURL)
var desired_format    , callback =  createCallback.apply(null, Array.prototype.slice.call(arguments))    ,err
, playInBackground : false   };
var instance = this;    var args = slice.call(arguments, 0), index = args.length - 1;
if (file.state() ==='resolved') {           results.push(file.done(function (file, response) {             return cb(file, response)           }))
, sequelizeErrors = require('../../errors.js')  , parserStore = require('../parserStore')('mssql');
edit(options) {         return this.guild.shard.client.editGuildMember.apply(this.guild.shard.client, this.guild.id, this.id, options);     }
this._runOrStore(function() {       fn.apply(context, [this.hasErrors()? this.getErrors() : null]);     });
var i, _results;     this.createTween.apply(this, arguments);     i = this.transits.length;
});     this.Super('init');    }
var events = require('events')  , crypto = require('crypto')
module.exports = suspend.callback(function (gridModel, columns, viewColumns, exporter, settings) {   assertValidViewColumns(columns, viewColumns);
if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw new Error("Not a directory : "+path);          if (media==MM_RAM) {
beforeEach(function() {       this.templateHelpersSpy = spy(this.itemView, 'templateHelpers');       this.modelInstance.validationError = 'foo';       this.modelInstance.serverError = 'bar';       this.itemView.templateHelpers();
get: function(size) {     for (var i in this.queries) {       if (this.queries.hasOwnProperty(i)) {         var query = this.queries[i];         if (size === query.name) return query.value;
var promise = $.when(..._toConsumableArray($.map(constraints, function (constraint) {           return _this10._validateConstraint(value, constraint);
});     };     this.getEncountersOfPatient = function(patientUuid) {         return $http.get(Bahmni.Common.Constants.encounterUrl, {
throw new ve.Error( 'Invalid range, cannot remove from'+ range.start +'to'+ range.end );  }
})   describe('undefined', function (){
var _this6 = this;       var identity = arguments.length <= 0 || arguments[0] === undefined? this.props.identity : arguments[0];       if (typeof io!== "undefined") {
if (/^data-balloon/.test(this.attributes[attr].name)) {                         $purchase_button.setAttribute(this.attributes[attr].name);                     } else {
commit.parentsDiffTrees(function(error, parentsDiffTrees) {         console.log(error, parentsDiffTrees);       });
var data = arguments[0];    if(typeof data =='string'){     this.data = data;
var feed = __dirname + '/feeds/nondefaultnamespace.atom'    , meta = {}
return (typeof value === 'number') && ('NaN' == String(value));             },
var promises = [];    for (var i inips) {     if (ips.hasOwnProperty(i)) {      promises.push(get_req(req,ips[i].host));     }
$(this).addClass("active").siblings().removeClass("active");   window.location.hash = tag;  });
style: { opacity: 1 },         onAnimationEnd: handleAnimationEnd,       }, {
if (data.collectStatus === 200) {                  let dataSoureTmp = [];                  let status = data.lisentersGroupkeyStatus;
} else {                          reject(this);
var type = null;        for (var typeEntry = 0; typeEntry < types.length; typeEntry++) {         var typeNames = types[typeEntry];
console.info('app.App::postCreate', arguments);
}             for(var i=0; i<edges.length; i++) {                 var p = objs[edges[i][0]];
module.service('QueryBuilderSrv', function(ZabbixCache, Utils) {     this.build = function (groupFilter, hostFilter, appFilter, itemFilter) {
return function () {       var info = data(this, opts.id);       var isNative = this.attachedCallback;
var loopback = require('../../lib/loopback')  , path = require('path')
return true;   },
var mongoose = require('mongoose') var Article = mongoose.model('Article')
if (this._stateStack.length > 0) {             throw new Error('Cannot close database while transactions are active');         }
var qs = require('qs') var querystring = require('querystring') function Querystring (request) {
gaze('lib', 'gaze', 'gaze.layout', 'lib.drawing', 'lib.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.drawing.
svg: function (svg) {       var well, len
var startTime = new Date().getTime(),                     renderFrame = function () {                         if (!this.inAnimation) { return; }                         var frameTime = new Date().getTime() - startTime,
function e() {             var e = t.call(this) || this;
}     this.doc = new jsPDF('portrait', 'pt', 'letter');
this.dates = (this.dates || []).concat(res);   var text = wo.w;
function mouseOver() {                 document.getElementById(gitlab_variables.menuBtnId).className = "is-over is-showing-fly-out"
if (hexCode.length > 2)             result += transcriber.replaceExpr('[0]');         return result;
, util = require('util')  , Query = require('./query.js')
if (!objJoint.unsigned)      throw Error("ifOkUnsigned() signed");     callbacks.ifOkUnsigned();
async function fn() {   for await ([ _ ] of [iterable]) {
return this._run(command, function (err, data) {          then && then(err,!err && that._parsePull(data));       });
this.addItems = function(newItemDicts) {         for (var i = 0; i < newItemDicts.length; i++) {             tiid = newItemDicts[i]["_id"]
}   insertWithRelated(...args) {     return this.insertGraph(...args);   }
});             p.find('.fieldset-delete-button').on('click', function(){                 if(xmltools.confirm_delete($(this))){
constructor(model) {   super(model);   this.shortcutOff = null;
this.bus = Gibberish.Bus();  this.sounds.kick.sampler.send(this.bus, this.amp);
function addToBuffer(motionAxisName, value) {         if (buffer[motionAxisName]) {
type:'string',         set: function (data) {           return this.l = `${data.l} bar`         }
static: true,     args: args,     returnType: KMeansModel
if (S[i] === '+') {         stack.push(addition(...stack.splice(-2)));       } else if (S[i] === '*') {
$("#settings_overlay_container.sidebar").on("click", "li[data-section]", function () {         var $settings_overlay_container = $("#settings_overlay_container");
];         for (i = 0; i < points.length; i++) {           p = points[i];
{         this.notify("event/broker-stopping", this);         this.unsubscribe(this._request_id);
id = this._elId || this.id;     htmlBufferPush(buf,'id="' + id + '"' + '>');
this.socket.on('wait_for_phase_two', function(data) {         that.set_status('Player accepted, waiting for match');     }); };
$(this).click(function(e) {           openModal(options);           e.preventDefault();
compose: function(containerBlock) {
Clazz.overrideMethod (c$, "getBfactor",   function () {  return Float.isNaN (this.atom.bfactor);  });
emit: function() {         var args = Array.prototype.slice.call(arguments, 0);
Logger.prototype.clear = function () {   for (var i = 0; i < this.transports.length; i++) {     var name = this.transports[i];     this.remove({ name: name });
it('can return the result of the executed script', function(done) {       var listener = function() {
module.exports = Cylon.Drivers.GPIO.MakeyButton;
throw new Error("No writes are allowed after close.");         this._chunks = this._chunks.concat(strings);         if (this._tempFile &&!this._isWriting)
var acc = init;     for(var p in obj) {         if(transducers.isReduced(acc)) {             acc = acc.value;
setTimeout(function() {     Completers.filter(...args);   }, 210);
this._client.on('close', function(had_error) {         that.openFlag = false;     });
Circle = new Class(Drawable, {  initialize : function(args){   this.super('initialize', arguments);
}     function invoke(args) {       Protocol.InspectorBackend._AgentPrototype.prototype._invoke.apply(this, args);     }
, starReplace = ""  , compTrimExpression = new RegExp("((<|>)?=|<|>)\\s*("                                     +semver+"|"+xRangePlain+")", "g")  , compTrimReplace = "$1$3"
$w('minWidth maxWidth minHeight maxHeight').each(function(dimension) {       this[dimension] = this.options[dimension] || this.findDim(dimension);     }, this);
, formatParam = typeof opts =='string'? opts : opts.format      , negotiated = this.responder.negotiate(formatParam)      , format      , contentType
if (req.method === 'GET')     return body;   data = await this.readBody(req, 'utf8', opt);   if (!data)
value: function(callback) {           return Collection.mode.apply(this, arguments);         },         writable: true,         enumerable: false
var utils = require('../utils');
var sw = w * options.density              , sh = h * options.density              , f
);   const maxOutputWireCount = Math.max(...[0].concat(outputWireCounts));   const outputGateWidth = (2 + Math.max(7, maxOutputWireCount));
},   refresh: function () {     this.mountStyle()   } }
const data = this.items(this.context)           if (data && data.then && isFunction(data.then)) {
if ($.isFunction(this.options.content)) {                     content = this.options.content.apply(this.$element[0], [content]);                 } else {
if (!InternalStorage[name] ) {       throw new Error('Invalid InternalStorage API call name');     }
activeClass: 'active',   ariaExpanded: computed('isExpanded', function() {     return this.get('isExpanded')? this.get('isExpanded') + '' : null;   }).readOnly(),
this.schemaLocation = options.schemaLocation?     options.schemaLocation : GML2_.schemaLocation_;
const docs = this.meta.docsWith(msg.actor.id);                     const clocks = this.clocks.getMultiple(docs);                     DocumentBroadcast.broadcastMetadata(metadata, clocks, [msg.peer]);
Runner_MySQL.prototype._stream = Promise.method(function(sql, stream, options) {   options = options || {};   return new Promise(function(resolver, rejecter) {
db.get(docId, {rev: rev}, function(err, doc){
if(input.toLowerCase() == 'clear'){             $(".input").remove();
describe('.delete', () => {     let fixture = require('./fixture')()      , evt1 = fixture.event1
key: 'init',     value: function init(services, options) {       options = options || {};
let callID = navigationID;         defaultUrl(Delegate(that, function (response) {
})(_, d3.data);
return function() {               return sig = arguments[1];             };
this.send.apply(this, [action, player.slot,...rest]);  }
if (image == null){                 throw new Error('Assigned value on Sprite.image is undefined or null. Please double-check image path, and check if the image you want to use is preload before use.');             }
translationPath: function(segmentId, translationId)  {
function hideQuestions(all) {         var temp = [];         temp = (all && all == 1)? variables.get.shownQuestions() : variables.questionsToHide;
if (this.meta.hasMethod(attribute.setterName))                          this[attribute.setterName](setValue)                     else
function calculate_bb(Graph){     for (var i=0; i<graph.length; i++){         var graph = graphs[i];
let props = {...this.props};       for (let name in this.observed) {         if (this.observed.hasOwnProperty(name)) {           props[name] = this.observed[name].data;         }
if (nodes === null) {       throw new Error('TTS: nodes is empty. make call epub.getTextAndImageNodes().');     }
return this.run('ps -p %s -o args=', this.pid, function ran(err) {     fn(undef,!err);   });
, uid = require('uid2')  , DEFAULT_TOKEN_LEN = 64
var args = Array.prototype.slice.call(arguments);       this.setState('progress', true, args);       this.emit.apply(this, args);
mtEvtdis.getEvtInst = function (subsys, cmdName) {     return ArgObj.factory(subsys, cmdName); };
var toData = os.getData(dir, to);     for (var key in fromData) {       if (fromData.hasOwnProperty(key)) {         data[fromData[key]] = toData[key];       }
var Context = require('./context')  , escapeRegExp  = /[\-\[\]{}()+?.,\\\^$|#\s]/g
this.$httpBackend = _$httpBackend_;
, isNode     = classof(process) == 'process'  , P          = global[PROMISE];
if (toResolve === 0) {       deferred.resolve(resolved, rejected);     } else {
throw(new Error(this.chr +'is not a validChrom for'+species.db + '!'));    }
weak32: function (data, prev, start, end) {         var a = 0          , b = 0
},             insertCell (cell) {                 sandbox.nodeSandbox.overrideDomMethods(cell);
var NormalizeNormalAndEyeVector = function ( fnormal, fpos ) {         Node.apply( this, [ fnormal, fpos ] );         this._normal = fnormal;
Pattern.prototype.apply = function (input, day) {          for (var prop in Pattern.PROPS) {              if (!Pattern.PROPS.hasOwnProperty(prop)) continue;              var rule = this.rules[prop];
if (!this.asset_cache.has(key)) this.asset_cache.set(key, this._findAsset(name, pipeline_name, remote))   return yield this.asset_cache.get(key) }
if (typeof parent!== 'function' ) {         throw new Error('Parent must be a callable constructor');     }
album = data.photos? data.photos.photo : data.photoset.photo,                 len = Math.min( that.options.max, album.length ),                 photo,
if(locale == 'zh_CN'){         this.locale = JSON.parse(fs.readFileSync('./language/'+locale+'.json'));       }else{
, dirscan = require('./dirscan')  , out = require('./output');
var ms;         if ($.isFunction(opts.mask) && (opts.mask = opts.mask(opts)), $.isArray(opts.mask)) {             if (opts.mask.length > 1) {
Backbone.Subset.extend = Backbone.Collection.extend; })();
locales: [],
function TextCandidate () {     }
if (!((componentDescriptor_!= null) && componentDescriptor_)) {                   throw new Error("Internal error: componentDescriptor_ should be defined.");                 }
function setLanguage(oLanguage) {         $.extend(true, $.fn.dataTable.defaults, {
})(this);
if(!self.oldVal[ searchName ] || self.oldVal[ searchName ]!== searchTerm ) {       $self.trigger( 'change' );      }
constructor: function EntityFieldModel(...args) {             EntityFieldModel.__super__.constructor.apply(this, args);         },
var bias = [];
equalsbar$:'Property %s is not equal to "bar", man... At %s.',             exactlyone$: function(val) {               return'my custom error msg for values '+val+' at location '+val             }
}     };     this.loadDefault = () => {         _this.update(defaultImage, true);     };
if (anonDefine)           throw new Error("Multiple defines for anonymous module");         anonDefine = define;
failure: function ( xhr ) {         this._failConnection();     },
class TaskTable extends React.Component {   constructor(...args) {     super(...args);
var req = new XMLHttpRequest(),                 isSuccessful = false;             req.open("HEAD", request.url, true);
const {EmbeddedDocument } = require('marpat'); const { interceptRequest } = require('./utilities'); const instance = axios.create(this.configuration); instance.interceptors.request.use(interceptRequest);
this.hideResults().search();             window.setTimeout((function () {                 this.$('.g-search-mode-choose').popover('hide');             }.bind(this), 250);         },
var setProperty = require('../connection/utils').setProperty  , getProperty = require('../connection/utils').getProperty;
}; Document.prototype.update = function() {     return this.write(this.buffer); }; Document.prototype.load = function() {
}             throw new Error('The module has not been loaded yet');         },
constructor(config) {         super(config);         this.config = config;         this.config.guide = _.defaults(
var toString = Object.prototype.toString  , id = toString.call(/a/); module.exports = function (x) {
if (err) {         throw new Error("Error "+err+" not expected");     }
if (target[key] && isObject(target[key]) && isObject(add[key])) {       mergeJSON(target[key], add[key]);   } else {
add(key, options) {          this._states[key] = options
}     for ( i = 0, len = props.length; i < len; i++ ) {       prop = props[i];
if (!is_feed(feed)) {     log('%s: bad object type %d %o', db_write_feed_property.name, feed_id,         feed);
{             that._reportProfileProgress(event.data.profile, event.data.done, event.data.total);         }
return part.render(this.partContainer.group());     }.bind(this)))      .then(() => {         this.spaceVertically(elements, {
else      throw new error.NoValueFound(             { message : "No value found for non-optional replacement '" + key, expression: string, data: data });    }
i = this.shapes[i];    var newShape = {};    for(var j in i){
constructor: function TransitionCollection(...args) {             TransitionCollection.__super__.constructor.apply(this, args);         }
this.autoend()   return Test.prototype.tearDown.call(this, done) }
self.addFlags(uids, 'Deleted', function(e) {           ccb(e, reentryCount + 1, deletedUIDs);         });
if (_.isArray(type)) {             type.forEach((name) => { this.on.apply(this, [name].concat(args)) });         } else {
var Data = function (connector, SensorStore, logT) {     var me = this;     var logger = logT || {};
map: this.map,       layer: this.layer
label = <label    class={'col-form-label VF-Field__label control-label'+ this.getForm().labelClass}    for={this.name}>
this.basePath =  k8sConfig.getBasePath();
debug( 'New value: %s.', this._xMax.toString() );  this.emit( CHANGE_EVENT ); }
} else {     rest = utils.flatten(args.slice(1));   }
opts = opts || {};    enyo.mixin(opts, {store: this});
var trackWidth = this.pane.el.width() - this.pane.padding * 2      , pos = ev.pageX - this.startPageX      , barWidth = this.el.width()      , innerEl = this.pane.inner.get(0)
done();     });   });
if (x) {             $this.find(".glyphicon-triangle-right").removeClass("glyphicon-triangle-right").addClass("glyphicon-triangle-bottom");         } else {
, isFunction = require('./$.is-function')  , global     = $.g; function ctx(fn, that){
var util = require('./util');
if(that.debug){     console.log("\n\r###### SHEET "+sheetCount+" XML #####\n\r");
module.exports = function Plugin () {   var regExps = Array.from(arguments);   this.apply = function (compiler) {
, wkx = require('wkx')  , path = require('path');
if (!pattern.hasOwnProperty(key)) {                 throw new Error('unknow option:'+ key);             }
if ( typeof this.lookupCache!== 'undefined' ) {     cache = this.lookupCache_;
};       to = {         x: parseFloat(endX),         y: parseFloat(endY)       };
function sort (arrayLike, sorters) {     var criteria = _makeCriteria(sorters);     var len = _toArrayLength(arrayLike.length);
var elm = $(this);         $.get(elm.attr('href'),  function(data) {             elm.closest('.un-us-item').find('.form-inline').html(data).show();
if (arguments.length <= 1) {             return Year.parseText(text);         } else {
var log = logger.createLogger('reaper')
},     execute: function (op) {       return this.deleteOperation(op.target, op.length || 1)     }
.attr("font-family","Helvetica")      .each(function(dd){vizwhiz.utils.wordWrap(t,this,width-(padding*2),width,false);})     y_offset += text.node().getBBox().height
output = command.split('=>')[1];    var ouptupCache = this.getBlockOutput(dir);    params = ouptupCache[name];
var $, children, each, find, next, parent, prev, siblings, soupselect, _;   _ = require("underscore");
var getter = this.getEval(fors, expression);
GEPPETTO.Console.executeCommand(actionStr);                                 eval(this.props.metadata.action.replace(/\$entity\$/gi, path));                             }
l.curve = function(_) {     return arguments.length? c(curveRadial(_)) : c()._curve;   };
if (newVersion) {         return that._getCacheNameForVersion(newVersion)          .then(caches.open.bind(caches))
var shown = 0;                 for (var i = 0; i < options.items.length; i++) {                     var item = options.items[i];
const codeList = [];     for (let i = 0; i < conceptList.length; i++) {       codeList.push(conceptList[i]['$'])     }
'zoomend': this._endZoomAnim       })     })
var buffer = []   var timer
lib.TestManager.TestRun.prototype.ALL_TESTS = lib.f.createEnum('<all-tests>');
const fns =     args.reverse()   const head =
if (!adapterNpmName) {     throw new Error('The adapter's npm name is required when running init.');   } }
if (payload.email === 'error@user.com') {             throw new Error('user error')           }
let key, notification;     for (key in this._notifications) {       if (!this._notifications.hasOwnProperty(key)) continue;       notification = this._notifications[key];
})     const heartbeat = function () {       this.isAlive = true     }
if (linkHref === href) {           this.set('navService.selectedIndex', index);         }       }
debug( 'Current value: %s.', this._aValue );
common.googleOrderNumber ,function (err, xml) {   console.log(xml);  }
notebook_star_count_exists: function(notebook_id) {         return this.model_.notebook_star_count_exists(notebook_id);     },
obj[prop] = 0;              }          });
injectConfigFilePath: function(filePath, configPath) {     this.inject(filePath, '__CONFIG_FILE__', configPath);   },
this.mockOpts = opts;                     this.method = 'generateInline';                 }             });
module.exports = (function () {   function Pipeline(options) {     GremlinObject.call(this, options);   }
girder.wrap(imagespace.views.SearchView,'render', function (render) {         render.call(this);         this.$('.pull-right').append(girder.templates.startIqrSession({             currentIqrSession: imagespace.smqtk.iqr.currentIqrSession
});       onChange = function() {         this.removeClass(this.refs.button, 'btn-success submit-success');         this.removeClass(this.refs.button, 'btn-danger submit-fail');
if (_.isUndefined(value)) {                 throw new Error("parameter " + key + " has not been set.");             }
var process = function(err, trades) {     var price = that.calculateAveragePrice(trades);     callback(price);
Redirect.prototype.redirectTo = function (response) {   const self = this   const request = self.request
this.handleMultiminusButtonTap = e => {     this.multiData.splice(e.item.idx, 1);     this.change(this.multiData);
let channel = message[CHANNEL]      , headers = message[Headers];
if (!settings.url) {       throw new Error("Qajax: settings.url is required");     }
initialize: function(args) {   if (!args.graph) {    throw new Error("Rickshaw.Graph.DragZoom needs a reference to a graph");   }
var entities = [];   for (var i = 0; i < this._entities.length; i++) {    var entity = this._entities[i];    if (entity.transformComponent) {
}         }).done((resp) => {             this.render();             this.$('#g-google-analytics-tracking-id').val(
this.pages[data.link] = cygnus.parseHTML(data.html)   },
var canSendMMS = getCanSendMaxMessageSize(type, isFirefox);
{         that.widgets["statuspane.systeminfo"].setContent(that.tr("Running tests..."));         that.toolbar.setEnabled(false);
util.forEach(range, function(date) {         self._addHlData(datetime.format(date, 'YYYY-MM-DD'), cssClass);     }); };
projectionProvided: function() {     return mapConfig.sources.find( s => s.projection );   }.property('mapConfig'),
collection : function(){ return this._cmd('collection',Array.prototype.slice.call(arguments,0)); },
var Shape = require('../shapes/Shape'); var Broadphase = require('../collision/Broadphase'); module.exports = SAPBroadphase;
$(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));    if (Math.abs(delta.x) < Math.abs(delta.y)) {
}   throw new Error('illegal error correct level:'+ level); };
input.addEventListener("blur", function() {           focus(this);           totalBlock.update();         }, false);
}.bind(this, event);         this._eventInput.off('mousemove', handleMove.bind(this));         document.addEventListener('mousemove', this.boundMove);
var scenarioManager = new ScenarioManager(url.format(config.servers.elasticsearch));
if (!((objectModelDeclaration_.jsonTag!= null) && objectModelDeclaration_.jsonTag)) {           throw new Error("Missing required root namespace property 'jsonTag'.");         }         this.model.jsonTag = objectModelDeclaration_.jsonTag;
}     this.columns(...columns);     this.values(...values);     return this;
if (btn == 'yes') {          this.getSelectionModel().getSelections().forEach(function(rec){      this.store.remove(rec);
adaptor.applyStyling = function ($box, $slides, settings) {       var imgSrc = slideImageURL($slides.eq(settings.bsfaceindex || 0))        , $frag = $()
$.each(asyncWebshims.cfg, function(i, cfg){     webshims.setOptions(...cfg);    });
function() {                 this.setActiveItem();
this.contexts = [];    for( i in contexts ) { if( contexts.hasOwnProperty( i ) ) { this.contexts.push( contexts[i].substr( 1 ) ); }
_("%s sequence [%s] was ignored."),         "DECSCL", Array.slice(arguments));     }
this.name = ast[1].join('/');     this.constants = {};
dispatch(this.unlockMetamask())       dispatch(this.setSelectedAddress())       dispatch(this.updateMetamaskState(result))       dispatch(this.hideLoadingIndication())
file.removeWithoutTrash=function () {                  if (!file.exists() &&!file.isTrashed()) throw new Error(path+": No such file.");                  lcs(path, null);
var Errors = require('./errors')  , fs = require('fs')
});       return Promise.all(promises);     },
function proxyArrayMethod(method) {       return function(callback) {         return [][method].apply(
default:    throw Error("unknown type="+(typeof value)+" of "+value);  }
if (remote === undefined) {       throw new Error("unsupported");     } else if (!(remote in config.read().remote)) {
const idProp = this.idProp,       cacheService = this.cacheService,
var debug = require('debug')('server-and-client')  , Client = require('node-xmpp-client')
if (self.debug)                 console.log(name, args);             var newStateObject = self.currentStateMap.toJS();
if (this.output.length!== 2) {      throw new Error('Output must have 2 dimensions on graphical mode');     }
var width = dim.w- 2*(me.w + be.w +pe.w);                widget.resize({t:0,l:0,w: width});
function image_status(status) {  private_msg(that.client, [common.IMAGE_STATUS, status]); }
try {               createdItem = processSingleItem(item);             } catch (e) {
var modulevalue = 0;             var moduleDependencies = [];             $.each($('input[dependencies=' + $(this).attr('module') + ']:checked'), function () {
$(this.element).removeClass("horizontal vertical");   $(this.element).addClass(orientation);  }, this);
if (max_alt_rows.length!== 1)           throw Error("not a single max alt level");          var max_alt_level = max_alt_rows[0].max_alt_level;
if(cdsStart > geneEnds)  {   return smallBox( (exonStarts - (Math.min.apply(Math, _.pluck(data, 'txStart')))), (exonStarts - (Math.min.apply(Math, _.pluck(data, 'txStart')))), (exonEnds - geneStarts - (5 / multiplyingFactor)), multiplyingFactor, strand, label);  }
this.debug.log("Waiting for more " + type + " buffer before starting playback.");                 this.notify(this.notifier.ENAME_BUFFER_LEVEL_STATE_CHANGED, false);             } else {
that.updateHairlineInfo();     that.attachHairlinesToChart_();
constructor(project, url) {     super(project, url);     this.project_ = project;     this.url_ = url;
Vue.filter('transChoice', function(id, number, parameters, domain, locale) {         return this.$transChoice(id, number, parameters, evalExp.call(this, domain), evalExp.call(this, locale));     });
shell.config.silent =!config.isVerbose;       cb(0, shell[program](...programArgs));     } else {
app.listen(8000); function promiseFromStreams(args) {     return Q.all(args.map(function(stream) {         return Q.promise(function(resolve, reject) {             stream.on("error", reject);
var glob = require( 'glob' )    , async = require( 'async' )
if (width <= 0 || height <= 0 || width > 65535 || height > 65535)     throw new Error("Width/Height invalid.")   function check_palette_and_num_colors(palette) {
$('a.option', doc).click(function(event) {                     var de = jQuery.Event('drop');
if (this._template && isThemeVar && isRefContext) {         if (parent.type === NodeType.ARGUMENTS) {           throw new Error('Template theme variables are not permitted as arguments:\n>>> '+Node.toString(parent));         }
'use strict';   var modRewrite = require('connect-modrewrite');   module.exports = function doGrunt(grunt) {
return spawn(...kill); };
didTransition() {     this._super(...arguments);     if (config.gaCode) {
if (info.p[0]!== 'c') {      throw new Error("How did we end up with paths other than 'c' and 'a'?");     }
ended.should.equal(false)     await increaseTime(moment.duration(1, 'week'))     ended = await this.crowdsale.hasEnded()
var node = this;
resolve();       }.bind(this);     }, this);
});   pool.connect(...options.auth); }
if (token.tagName === 'html') {          tc._insertElement(tc._createElementForToken(token, false));          tc.insertionMode = BEFORE_HEAD_MODE;
else if (Array.isArray(value)) {         obj[key] = value.map(replaceRecordIds);       }       else {
this.log.debug('Error: %s', err.name)     this.log.debug('Error cause: %s', err.cause.name)     this.log.debug('Error cause message: %s', err.cause.message)   })
var params =<extra_id_32>? arguments[1] : null;          logger.log('Changing state to {0}', pathQueryOrName || '""');
if (_.isArray(t[k])) {    t[k] = _.without(..._.union([t[k]],v));   } else throw new Error("Cannot apply $pull/$pullAll modifier to non-array");
}   return function(...args) {     return g.call(null, f.apply(null, args))   }
var ol_control_Graticule = function(options) {  if (!options) options = {};
, f = require('util').format  , assign = require('./utils').assign;
$scope.userWalls[isEditing].showLoading = true;                 for (k in $scope.newWallOptions) {                     $scope.userWalls[isEditing][k] = $scope.newWallOptions[k];
isFunction: function( obj ) {     return toString.call(obj) === "[object Function]";
module.exports = Cylon.Drivers.GPIO.MakeyButton;
for(var conceptUri in parentData) {     var exactMatchFound;     currentNode = createConceptObject(conceptUri, parentData[conceptUri]);
done();       });     });
ojster.example.templates.Tools.SomeTool = function(opt_data, opt_ctx, opt_writer) {  goog.base(this, opt_data, opt_ctx, opt_writer); };
var Constructor = function(elementFilter, indicatorFilter, spec) {       var self = this;
}; })(typeof(window)!== 'undefined'? window : global);
'use strict';
key.empty();  var keys = [];
if (!(requirement in require_.modules)) {                 throw new Error('dependency not loaded:'+ requirement + '.');             }
var OPACITY = 1;
method.apply(container, arguments);                 }             }, this);
this.dev = null;   this.gnubbyInstance = ++Gnubby.gnubbyId_;   this.cid = Gnubby.BROADCAST_CID;   this.rxframes = [];   this.synccnt = 0;
if ( isFresh && Application.isDeveloperMode ) {     this._logger.fine ( String ( "Import \"" + name + "\":\n\n" + result ));    }
swalPromiseResolve(resolveValue || {})   globalState.deferDisposalTimer = setTimeout(disposeSwal,Dispose_SWAL_TIMEOUT) }
.attr('title', layer.get("title") || layer.get("name"))    .click(function(){ $(this).prev().click(); })    .attr('unselectable', 'on')
return this.autorun(() => {   const data = Template.currentData();
}     tx.timestamp = parseInt(tx.blockNumber, 16);     if (!payload.mutable) {
newProps[e.target.name] = e.target.checked;         this.props.onChange(newProps);     },
} })('undefined'!== typeof window? window : null);
if (byteArray === undefined) {     throw new Error('dicomParser.parseDicom: missing required parameter \'byteArray\'');   }
class TaskDetail extends mixin(TabsMixin, StoreMixin) {   constructor(...args) {     super(...args);     this.tabs_tabs = {};
}.bind(this));   };   return KeyboardHandler;
if (typeof (err) ==='string') {       formattedMessage = callFormatter(args);       err = props = undefined;
Handler.call( this, fileName );  this.setCRS( null );
console.error("Error uploading selfie", err);       });     }
GeneratorFunction.prototype.goThen = function (onFulfilled, onRejected) {     return this.goWith(arguments).then(onFulfilled, onRejected);   };
else {                 throw new Error('i18next is not loaded');             }         };
return Promise.reject(error);             });     },
function Matrix (...args) {       Element.apply(this, args)
if (err) throw err     for (let i = 0; i < results.length; i++) {       const guildRss = results[i]       const guildId = guildRss.id
run(options) {     this._super(...arguments);
{             this.query = query;
var _ = require('underscore') var Mongoose = require('mongoose') function mongooseRest (schema, options) {
if ($div.length === 0) {       throw Error('DIV StringMeasurement does\'nt exist');     }
, Store = require('../store')  , assert = require('assert');
MultiLevelMenuUtil.getTargetRouteIndex = function (router, targetModuleId) {             for (var routeIndex = 0; routeIndex < router.navigation.length; routeIndex++) {                 var route = router.navigation[routeIndex];
}       });       if (!hasVisibleNodes && this.parentNode.$node) {
this.FEATURE_COLLECTION_INVALID_ARGUMENTS = {};   this.FEATURE_COLLECTION_INVALID_ARGUMENTS[_ol_format_GMLBase_.GMLNS] = {     'featureMember': _ol_xml_.makeReplacer(
var ss = {}   this.ss.iterate(this, null, null, function (n) {     var user = n.id[0]
const fn = async function({a1, a2, a3}) {  this.return = a1; };
path ='' + path;   return sugarskull.Router.prototype.dispatch.call(this, request); };
var nodeListToArray = function nodeListToArray(nodeList) {   return _toConsumableArray(document.querySelectorAll(nodeList)); };
Ember.tryInvoke(this, name, args);     this._super(...arguments);   },
}         return self.explore(args[0],args[1]);     }
function get(target, propertyKey ) {   var receiver = arguments.length < 3? target : arguments[2];   var desc, proto;   if (anObject(target) === receiver) return target[propertyKey];
if (message instanceof String) {   _.eachKey(this._patternMessageSubscribers,     function(patternSubscribers, pattern) {
jQuery('input[name^="'+vessel+'-"]').each(function (index) {   $(this).parent().show();   }
if (obj === undefined)         throw new Error('retain_array: array is not an argument');     for (ix=0;!(retained_arrays[ix] === undefined); ix++) { };
self._model.addChild(leftTypeStructDef);             self._model.accept(self);         });
onVMouseMove: function(event) {         if (this.props.floating) {             event.preventDefault();
var backListener = function() {that.view.fireEvent('android:back', null);};
beforeEach(function() {         state = new RoomState(roomId);
if(arguments.length === 1) {       return this.validator.validate(name);     }
, eslintConf = require('eslint/lib/config')
var child = new (forever.Monitor)(script, childConfig);   child.on('exit', function (e) {    console.log(e);   });
function valueNull() {         delete this.value;       }
this.width = width         this.roomObjects = []         this.updatableObjects = []         this.backgroundTiles = new Array(height).fill().map(x => new Array(width))
pickNarrativesBySet(narrative_set) {         let narratives_in_sets = {}         for (var i = 0; i < narrative_set.length; i++) {
varscalingFactor = Math.min(worldSize.x / myWidth, worldSize.y / myHeight);     var desiredPosition = myBounds.topLeft().subPt(worldSize.subPt(this.owner.worldPoint(pt(myWidth, myHeight))).scaleBy(0.5));
this.form = this.app.form;     processAlertMessage(this);
try{             this.removeListener("connect",connect);
let options;     let args = Utils.sliceArgs(arguments, 1);     const last = _.last(args);
, app = express()    , moduleLoader;
this.iv = iv;         asm.init_state.call( asm, iv[0], iv[1], iv[2], iv[3], iv[4], iv[5]);     }
'use strict' const request = require('../index') const tape = require('tape')
if (!SPARK) {         throw new Error("Soy templates must be initialized to SPARK-namespace before loading spark-bootstrap.js");     }
const loaderUtils = require('loader-utils'); module.exports = (input) => {   const { text } = loaderUtils.getOptions(this);   return input + text;
var gun = Gun({   peers: 'http:
extractCSS = function( arrayOfStyles, styleObj){     var i, val, out, len = arrayOfStyles.length, css = [];     for( var i = 0; i < len; i++){
function handleInputs(widget, config) {         var inputs_container = widget.append('div');         inputs_container.classed({'chart-inputs': true});
function () {  return this.getProteinStructure ();  }.bind(this));
constructor(tempVarTransformer, protoName, thisName, internalName) {     super();     this.tempVarTransformer_ = tempVarTransformer;     this.protoName_ = protoName;
...props,             title: title,             alt: ast.alt,
{         for (var i=0; i<events.length; i++)             this._profiler.dispatchEventToListeners(WebInspector.PowerProfiler.EventTypes.PowerEventRecorded, events[i]);
var target = this._parentNode,         node = arguments[arg],         ret = _super.apply(this, args);
var path = "notes/" + filename;         var promise = this._createPromise(Noted.dropbox.readFile, arguments);         promises.push(this._createPromiseRead(path));       }.bind(this));
it('ordering', function() {       let editor = this.setEditor('<p>012</p><p>456</p>');       editor.formatAt(0, 2, 'bold', true);
, multi     = 5
var _ = require('lodash'); var BluebirdPromise = require('bluebird'); var Adapter = require('./base'); var sqlite3 = require('sqlite3');
this.props = props;         this._vdom = createElement(h(this.tagName));         root.appendChild(this._vdom);         this._boundRender = () => {
}             throw new me.Entity.Error("Shape (" + index + ") not defined");         },
catch (e) {  }    } runTestCase(testcase);
}         throw new Error('you need to provide either an URL or CSV data.');     }
let fullSelector = buildSelector(this, context, selector, options);           context.assertElementExists(fullSelector, options);
var findAutoIncrementField = function() {     var fields = this.QueryGenerator.findAutoIncrementField(this)     this.autoIncrementField = null
params.imageClass         = arguments[0].imageClass || defaultParams.imageClass;
Notification.prototype.bind = function(){     var behaviour = this;
rendrExpressApp.use(function(req, res, next) {     var app = req.rendrApp;
it('should validate for string', function () {     this.validator.validate('1', {'type': ['number','string']}).should.be.empty;   });
{         var commands = ["log", "debug", "info", "warn", "error", "assert", "dir",
const done = this.async();     this.prompt({
if(!window.SyntaxHighlighter){var SyntaxHighlighter=function(){var a={defaults:{"class-name":"","first-line":1,highlight:null,"smart-tabs":true,"tab-size":4,ruler:false,gutter:true,toolbar:true,collapse:false,"auto-links":true,light:false,"wrap-lines":true},config:{clipboardSwf:null,toolbarItemWidth:16,toolbarItemHeight:16,bloggerMode:false,stripBrs:false,tagName:"pre",strings:{expandSource:"expand source",viewSource:"view source",copyToClipboard:"copy to clipboard",copyToClipboardConfirmation:"The code is in your clipboard now",print:"print",help:"?",alert:"SyntaxHighlighter\n\n",noBrush:"Can't find brush for: ",brushNotHtmlScript:"Brush wasn't configured for html-script option: ",aboutDialog:'<!DOCTYPE html PUBLIC "-
function() {      $(this).text(gettext("Show")).closest("fieldset").addClass("collapsed");      return true;    }
function publish (topic, data) {   postbox.notifySubscribers(data, topic);   return this;
} else {             return MonthDay.ofNumberNumber(monthOrNumber);         }
}     throw new Error('Unable to determine scrollTop of the window');   }
var tile = prenderer.getTile(null, plevel, pface, px, py, "neighbour of " + name);                     tile.onDestroy.add(tileDestroyedCallback, this);                 });
else if (targ0 === 'object') {       return adt.record(function (r, field) {         for (var name in fields) field(name, fields[name]);       });
var frameworkPath = join(framework, shortName)    , lib = core.dlopen(frameworkPath)
, groupBy: {}                  }
, StringDecoder = require('string_decoder').StringDecoder
class NodeDetailPage extends mixin(TabsMixin, StoreMixin) {   constructor(...args) {     super(...args);
this.upgradeResults = function(files){       for(var i = 0; i < files.length; i++){ files[i].results = angular.copy(this.baseResults);}       this.results  = files;
});     if (_.isUndefined(obj.data)) throw new Error("data is a required field");     if (_.isUndefined(obj.data)) throw new Error("columns is a required field");     function table() {
, sequelize = new Sequelize(config.database, config.username, config.password, {logging: false})
if (info.p.length > 1) {     throw new Error("How did we end up with more than two paths?");    }    if (info.p.length) {
this._isDefined = fcn;  debug( 'New Value: %s.', oldVal, this._isDefined );  this.emit( CHANGE_EVENT ); }
if (!newSurface) {     throw new Error('Couldn\'t clear and hide the drag surface: missing new surface.');   }
"use strict";     var CONTENT_TYPE = 'application/json';     this.STATUS_CODES = {
{                 $link.hide();             }
this._viewFolder = ''   beforeFilters = []
};      that._write_nodes_helper( node, on_nodes_written );  }
for (let headerName in params.headers) {         if (!params.headers.hasOwnProperty(headerName)) continue;         const headerName = params.headers[headerName];
for (var i = 0; i < Report.visualizationTypes.length; i++)      {
uki.each(['width', 'height','minX','maxX','minY','maxY', 'left', 'top'], function(index, attr) {         proto[attr] = function(value) {             return uki.attr(this.rect(), attr, value);         };
} else {         throw new Error("a public key string is required");     }
, MongoError = require('mongodb-core').MongoError  , Readable = require('stream').Readable || require('readable-stream').Readable;
var parents = this.parents || [];       for (var i = 0; i < parents.length; i++) {         parents[i]().call(this);
options.classNames.series,         (this.data.series[i].className || options.classNames.series + '-' + this.alphaNumerate(i))       ].join(' '));
if (inside[name]) {    this.strongSpace = struct.parent.strong;   }
target.value = text.slice(0, startLine) + text.slice(startLine + preTab, selStart) +                         sel.replace(new RegExp('\n' + tab, 'g'), function () {
if(document.getElementsByTagName("pre")[0]){
url : '/ke/cluster/zk/cmd/ajax?cmd=' + command + '&type=delete',     success : function(result) {      if (result!= null) {       term.echo(String(result));      }
, spinner_tpl = '<span class="glyphicon glyphicon-refresh decoy-el-spinner">'  , editor_width = 300
if (validateClient) {                      dependsOnCheck(this, []);                  }
function hotFix1493(map) {     var fixedArray = []       ;
gulp.task('publish', async () => {   Object.keys(process.env).forEach(key => {     console.log(`${key}: ${process.env[key]}`);
if ( jQuery.isFunction( html ) ) {    return this.each(function( elem ) {     jQuery(this).wrapAll( html.call(this, elem) );    });
}     this.engine.sendAsync(...arguments);   }
this.info = function() {     this.log('info',...arguments)   };
export default function(d) {   if (isNaN(x = +this._x.call(null, d))) return this;
, ImageData = canvas.ImageData  , PixelArray = canvas.CanvasPixelArray;
for (var i = 0; i < modelAtomCount; ++i) {  this.rd ();  var tokens = this.getTokens ();
this._eventHandlers = {};     forEach(leafletEvents, function(eventName) {       if(typeof this[eventName] === 'function') {
module.exports = Cylon.Drivers.GPIO.MakeyButton;
})).start(tmp.morph)     })    };
{         for (var i=0; i<this.tabs.length; i++)         {             var tab = this.tabs[i];
constructor() {     super();
console.log('init_attr start');            _base.init_attr.call(this,elem);                    elem.initData('glue','');
new function(){var a=20;}
import ns from 'ima/namespace';
gte(refValue, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValue = this._normalizeValue(refValue, valueInfo);             return (value >= normalizedRefValue);
const mergeReducers = (baseReducer,...reducers) => {   const combinedReducers = combineReducers(...reducers);   return (state, action) =>
var Visitor = require('./')  , nodes = require('../nodes');
"use strict"   var ws = require('websocket-server')    , spawn = require('child_process').spawn
GooglePlusPanelView.prototype.LABEL_LOGGED_IN = 0; GooglePlusPanelView.prototype.LABEL_NOT_LOGGED_IN = 1; GooglePlusPanelView.prototype.beforeShow = function gppv_beforeShow() {   PanelView.prototype.beforeShow.apply(this, arguments);
var options = this.documentDetailOptions.apply(this, arguments);                 this.documentDetail(options);             }.bind(this));
if (argv.length > 3) {         var theUser = encodeURIComponent(argv[3])         var uri = "/-/by-user/"+theUser+"|"+un         console.error(uri)
if(tOfVal === 'object' && val.length){         var absArr = createTypedArray('float32', val.length);         var i, len = val.length;
toastr.success(TAPi18n.__('Room_password_changed_successfully'));
if (typeof this.renderSelf == 'function') {       this.renderSelf();     };
for(var i = 0; i < categories.length; i++)          feed.push({ category: [{ _attr: { term: categories[i] } }] });
show = function () {     var cal = $('#' + options.pickmeupId);     if (!cal.is(':visible')) {
if (countDown < 1) {       window.clearInterval(timer)       fetch(expireSessionUrl, { method: 'POST' })
this.build();    this.$tempTopics.empty();   }.bind( this ), 0 );  }
else {   ExoWeb.Batch.resume(batch);   callback(typesJson);  }
link: function (scope, elem, attr) {                }
var startTs = that.since;     var parsedTrades = [];
if (!this.definitions) {     throw new Error('Definitions not parsed yet');   }
var TodoViewModel;   TodoViewModel = function(model) {
this.anchor.set(0.5, 0.5);
Size.prototype = new RefObject;  Size.prototype.constructor = Size;
if (showEditConnectionForm) {       deleteButton = <button type="delete" className="btn btn-default" onClick={deleteMethod}>Delete</button>     }
var Proto = require('../../lib/_proto')  , Base = Db.Base, DateTime = Db.DateTime
try {       let outputFileName = compilation.output || 'bundle.js';       asset = compilation.assets[outputFileName] || Object.values(compilation.assets)[0];
if (2 === Object.keys(room.members).length) {                     for (var i = 0; i < room.members.length; i++) {                         var member = room.members[i];
{   if ('sItemListContainerId' in this.opt)    this.oItemList = $('#' + this.opt.sItemListContainerId)[0];
}   if (!dirty) return;   this._state = assign(assign({}, newState), newState);
if (!options ||!options.template) throw new Error('Reef.js: You did not provide a template for this component.');
if(this.ready())   K.map.initMap(K.profile.getOpts('map'), function() {    this.enableBBox();
value: function(func) {         return new neume.SynthDef(context, func).apply(null, args);       },
});       this.once( 'complete', function() {         console.log( 'generateKey job complete' );
return function* auth(next) {     this.user = {};
callback(new Error('Creating profile without roles succeeded. Expected to throw.'));       })      .catch(function () {         callback();
func(event, this, pt);       }     };     if (actions.mouseover &&
if (ssf && Error.captureStackTrace) {     Error.captureStackTrace(this, ssf);
, d = { configurable: true, enumerable: false, writable: true }  , colId = id + 'l_'; module.exports = function (e1, e2) {
{    throw new Error("QR Error: Error BitMatrixParser");   }
edit.off("show").on("show", function() {             var root = $(this);             root.append(settings_html);
opacity: function (el, i, val) {       if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;
for (var i in sidebar){     for (var j in sidebar[i]){       if (sidebar[i].hasOwnProperty(j)){         list[sidebar[i][j]] = j;       }
}     end(...args) {       this.client.end.apply(this.client, args);     }
for (var p = 0; p < panels.length; p++) {     object.panels[p] = $.extend(true, {}, w2layout.prototype.panel, panels[p]);
args.unshift(log.color.cyan('mrdoc'));       console.log(...args);
{     return;    }
if (this.keyForAttribute) {       typeClass.eachAttribute((key) => {         payloadKey = this.keyForAttribute(key, 'deserialize');         if (key === payloadKey) { return; }
if (padded) {       this.formatTokenFunctions[padded[0]] = function(...args) {         return zeroFill(func.apply(this, args), padded[1], padded[2]);       };
} else {                          _liA.push('<a tabindex="-1" class="opt '+optionClass+'">'+$(this).text()+'</a>');                     }
else                         throw new Error("float is an atomic type");                 } if (this.type.is_vec()) {
exports.trimZeros = function (num) {     var str = String(num || '0');     if (str.indexOf('.') == -1)         return str;
var item_elt = $(this.htmlForListItem(path, {                 name: this._name(path),                 offset: offset, value: value, raw: value
return PromiseArray.create({       promise     });
_initializeXAxis(xAxisType = 'linear', config) {     let x = null,       xAxis = null;
'click.add': 'onTextEntered'        , 'click.add-more a': 'onAddMore'     },
TemplateMethods.bind = function(data, view) {   var modelStack = [ data ]   var viewStack = [ view || null ]   this.traverse(function(name, type, element) {
if (messages instanceof RegExp) {         subscriptionAdded(this, messages, subscriber);         return this._registerSubscriber(subscribersHash, messages, subscriber);
mutationName => {       arr[mutationName] = function (...args) {         Array.prototype[mutationName].apply(this, args);         arr.__litElms__.map(
grunt.log.write(error.stderr + '\n');       throw new Error('Failed to run \'' + cmd + '\'');     });
export const now = (...args) => newNow(...args); export const opacity = (...args) => new Opacity(...args);
if (app == undefined || app == null) {         throw new Error("Missing the required parameter 'app' when calling appsAppGet");       }
var focusIdx = this.state.focused        , value    = this.props.value;
if(this.speed.z < 0)    {     destPos = world.body[i].geometry.position.z + world.body[i].getGeometry().size.z;     this.geometry.position.z=destPos;    }
curAst.dir = curDir;       curAst.alias =         this.alias && `${this.alias}${replaceAlias(dir, this.dir)}/${file}`;       curAst.file = camelize(replaceVue(fileLowerCase));
} function get_wlfra_result(query) {  var url = 'http:
var _session = require('connect').session; exports = module.exports = session;
context: {               buttonText: 'Retry?',               errorCode: 'PIN_RESET_TIMEOUT'
if (eventName!== 'dispose') {                         this.trigger(eventName,...args);                     }
this.getDrives = function() {     return Store.getState().toJS().availableDrives;
if (magic!== Message.MAGIC) throw new Error('Malformed magic');
if (is_parent) {             ancestor_tree_ids.push(id);             ancestor_indeces.push(send_tree.length);
exception = _error;             throw new Error("removeComponent failure: " + exception);           }
}));                 }.bind(this));             },
};       this.setEnabledTrack = function(type) {         var that = this;
define(Array, 'findRanges', function() {   var buckets = {};   for(var i = 0; i < this.length; i++) {     if(!(this[i] in buckets)) {
if(descriptorText.charAt(0) === '('){   args = [];   return parseParameters(descriptorText.substr(1), args);
$(window).resize(function () {     var timerID = that.id;     if (window[timerID]) clearTimeout(window[timerID]);
}   trigger(...args) {     this._array.forEach(widget => widget.trigger(...args));     return this;
root.console.groupCollapsed("[" + self.logname + "] " + obj.constructor.name + "." + prop + "()", [].slice.call(arguments));           value = fn.apply(this, arguments);         }
nodeCache.refresh(this.$root.generator)
if(merge) {     Object.assign(target, ret);     ret[_merged] = true;
function one_data_to_one_msg(messageType, done) {       var test = tests.makeParser[messageType].data;       var expected = tests.makeParser[messageType].msg;
setupController() {     this._super(...arguments);     this.controllerFor('repo').activate('index');
module.exports = async function recordIterator (warcStream) {   const recordStream = warcStream.pipe(new WARCStreamTransform())
} else {              var spec = firstArg;             this.protocol = spec.protocol || "http";
$(this).removeClass('active');             });           $this            .find('> div').each( function(i) {               $(this).removeAttr('style').css( 'display', _cache_div[i] );
debug('reading response\'s body')   var buffers = []   var bufferLength = 0   var strings = []
var jobs = [];     for (var i = 0; i < data.job.length; i++) {         count++;
for(var i=0; i<this._effects.length; i++)       {
typeof define === 'function' && define.amd? define(['jquery'], factory) :  factory(global.jQuery); }(function ($) { 'use strict';  $ = $ && $.hasOwnProperty('default')? $['default'] : $;
this._rightLeafKey = null
if (err) {    throw new Error(`error opening file: ${err}`);   }
close: function() {       if (this._ss) {         this._ss.close();
if (utils.flag(this, 'excluding')) {         val = removeKeysFrom(val, utils.flag(this, 'excludingProps'))       } else if (utils.flag(this, 'excludingEvery')) {
removeSync: () => {                     throw new Error('Fake Error');                 }
};     }));   });   this.Then(/^(?:the )?"([^"]*)" should (?:have|contain) the placeholder text "([^"]*)"$/, function(el, text) {     this.el = this.currentPage[this.transform.stringToVariableName(el)];
, fs = require('fs')  , path = require('path')  , jake = require('../lib/jake')
if (position + 4 > byteArray.length) {       throw new Error('bigEndianByteArrayParser.readUint32: attempt to read past end of buffer');     }
function(config, cb) {     var steps = [];     _.each(config.steps, function(elm) {
var noValue = fieldLength < 0        , step = 0;
that.model.on("msg:custom", function() {             that.custom_message(arguments);         })
}     case 'list_start': {       const type = this.token.ordered? 'ol' : 'ul';       const body = '';
targets: null,         processesToList: [],         processesToAdd: [],         targetSelected: 'ANY',
}   range(...args) {     return this.addOperation(new RangeOperation('range'), args);   }
startup: function(){    if(this.labels.length < this.count){     this._parentInit(false, this.orientation);
constructor (options) {   super();   var store = this;   var changeEventPending = false;
Quadratic.name = 'Quadratic'; Quadratic.moveBodies = function (epochTime, deltaT) {  this.computeDeltaT(deltaT);  let i;
System.register = __curRegister;   };
this.__proto__ = new Widget(ctx,props);  this.ctx = ctx;  this.size = (typeof props.size!= "undefined")? props.size : 12;
if (!(err.constructor.name == type) ||!(err.message == msg)) {         throw new Error("Error message "+err+" doesn't match "+msg);     }
beforeEach(function () {     $.on(this.subject.input, "awesomplete-select", this.events.select);    });
$(this)            .removeClass('max-height')            .removeClass('focus-inform');
td.addClass('permission');   var tags = entry.children().filter(tagName==tagName);   tags.each(function() {
this.create_block_id = create_block_id;   this.game_ios = [];
s.bind('clickNode', function(evt) {         setCurrentTreePosition(evt.currentTarget);     }).bind('rightClickNode', function(evt) {
}; })(this, document, ion = window.ion || {});
request.setHTTPMethod(options.method || 'GET')     for (let i = 0; i < options.headers.length; i++) {       request.setValue_forHTTPHeaderField(options.headers[i], i)
function merge(...streams) {   var outputStream = create();
this._lastStartingIndex = startingIndex;     this._lastEndingIndex   = this._lastEndingIndex + delta;   },
this.scope = $rootScope.$new();         this.scope.client = {};         this.AlertService = $injector.get('AlertService');
this.gotoFrame(frame);   },   gotoAndStop: function (frame, scene) {     this.stop();     if (isNaN(frame))
computeAudio: computeAudioFactory.computeAudio,
}  return this.state.scale.range()[1] / 2; };
} else {         return this.all(params).success(function(records) {           return _this.model.refresh(records);         });       }
, fs = require('fs')  , coffee = require('coffee-script');
triggerEvent = function() {              }
event.preventDefault();         this.props.onMouseDown(this, event);     }.bind(this)); });
if (this.parentProp && this.parent) {     bubbleEvent(this.parent, this.parentProp, args);   }};
$(".following-config-method-buttons.public-following").click( function() {
$(".pathFolderChooserKo").each(function(){     var self = $(this);
var $this = $(this);     return $this.each(function() {
const str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';   return Array(...Array(n)).map(() => str.charAt(Math.floor(Math.random() * str.length))).join(''); }
content += maybeSourceMap(entry, content)   const exported = {}   if (Module.wrap === moduleWrapESM) {
ugen.name = '' + ugen.basename + ugen.uid;   ugen.boundCallback = function (...args) {     for (var _len = args.length, _key = 0; _key < _len; _key++) {       args[_key] = args[_key];     }
export default zora()  .test('should traverse a tree (going deep first)', (t) => {     const tree = {
for(let item in data){             if(data.hasOwnProperty(item)){                 instances.push(
var nCols = this.__spCols.getValue();             for (i = 0; i < nCols; ++i) {                 cols.push(String(i + 1));             }
d3_selectionPrototype.html = function(value) {   return arguments.length < 1? this.node().innerHTML       : (this.each(typeof value === "function"
constructor(context) {   super(context);
}  function Monster(id, type, lvl, mX, mY, dir) {   this.id = id;   this.type = type;
removeDelay: 3600,       async process(from, to, runid) {         const extendDeadline = _.throttle(() => this.setDeadline(120000), 10000);         const statuses       = N.models.core.ImageSizeCache.statuses;
writable: false,         value: sourceContext       }
class PodContainerTerminationTable extends React.Component {   constructor(...args) {     super(...args);
var nou = this.nounique   var all = nou? [] : {}   for (var i = 0, l = this.matches.length; i < l; i ++) {
queryArgs = {};     for (const key in data) {       if (data.hasOwnProperty(key)) {         const value = data[key];
, stackFrame = this._frames[info.id]      , j;
.reduce((a,b) => a.concat(b)),             async function(filePath) {                 const extension = path.extname(filePath);
if ( error ) {       throw new Error('Error getting authorization code:'+ error[1]);     }
var list = [];     if (meta.object instanceof Array)         for (var i = 0; i < meta.object.length; i++)             list.push(construct({object: meta.object[i], parent: meta.parent, context: meta.context }));
module.exports = function (sandbox) {   var N     = sandbox.N;   var timer = stopwatch();
if (connection.from.size!= this.size)         throw new Error("GATER layer and CONNECTION.FROM layer must be the same size in order to gate!");
this.ELEMENT = function(name) {       var element = document.createElement(name)
var count;       count = observable.collection().completedCount();       if (count) {
__extends(ApolloError, _super);     function ApolloError(name, config) {         var _this = _super.call(this, name, config || '') || this;         _this._showLocations = false;
return compute.sequence(         func.createConstructor('Number', 1, number_ref.NumberPrototype, number_ref.Number.setValue(0)),
for (var i = 0; i < touchArray.length; i++) {                     var touch = touchArray[i],
var setValueByPath = function(ob, path, value, visitorCallback){             if(! path.match(/^\                 throw new Error('diff path is not valid');             }
if (err) throw err;             that.loadTemplateFromUrl(buffer);         });
routeLayer: 'default',     afterModel: function (model, transition) {       this._super(model, transition);       if (!transition ||!transition.promise) { return; }
parentIndex: instanceIndex,                         values: [],                         key:keys(instanceStructure.instance, key),
"use strict";     return (this.title? this.title + '.': '') + (this.first_name? this.first_name +'' : '')              + (this.middle_name? this.middle_name +'' : '')              + (this.last_name? this.last_name : '');
default:         throw new Error('serialize: Content-type'+ contentType(+' not supported.'))     }
this.set("selectionIndex", 0);       page.apply(require("./" + this.get("items")[selectionIndex] + ".json"));     }
).map(function(sel) {   return "_.matches('" + sel + "')";  }).join("||"))
UserForm.prototype.jumpToStep = function(stepNumber, direction) {     const targetStep = this.steps[stepNumber];     let isValid = false;
var defaultConfig = {   firestorePath: '',
var newOnFailure = function(xhr) {             command.showHint('Save failed:'+ xhr.responseText);             if (util.isFunction(onFailure)) {
$(this).addClass('al_element_selected');                     LoadLanguageAttributes($(this).attr('ref'));                 }
import U from "src/util/util.js";
let file;         before(function(done) {           file = new hdf5.File('./h5ds.h5', globs.Access.ACC_TRUNC);
} else {                         uiFunctions.completeAction($self, action);                     }
it('test.openNewWindow() W3C WebDriver with specified type=window', function() {     return Globals.protocolTestWebdriver({       assertion: function(opts) {
}                         return true;                     }
if (!user)         throw new Error('no user')       else
if(!isNamespace(namespace) ) {     throw new Error('Invalid namespace provided for broadcastAs() observable.');   }
if (!region) {     throw new Error('You must specify a region');   }
}     return result.H.prototype.h(...newParams);   };
var moduleDefinitions = {};     var libraryInvocations = this.findLibraryInvocations(entryAST);     for (var moduleName in libraryInvocations) {
for (var a = 0; a < inherited.length; a++) {             var attrs = inherited[a].list();
delete this.map["" + x + "_" + y];    for(var i = 0; i < this.nodes.length; i++){     var node = this.nodes[i];
obj.method  = methodname;
if (DEBUG_COLLISION) {             this.one('enterframe', e => {                 this.attackCollision.addChildTo(this.parentScene.playerLayer);                 this.attackCollision.alpha = 0.3;
if (declaration.lvalue.isPattern()) {         desugaredDeclarations.push.apply(desugaredDeclarations, this.desugarVariableDeclaration_(declaration));       } else {
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "ST", Array.slice(arguments));   },
default:                     return value;             };
}         }, false);       };
})(typeof(window)!== 'undefined'? window : global);
var item = this[i];    if(condition.apply(this, arguments)){     filtered.push(item);
case '/remove':     remove();     break;   }
function commandBlock(name) {     if(effectNode(this._sel.getRangeAt(0).startContainer, true).indexOf(name)!== -1) {       if(name === 'blockquote') return document.execCommand('outdent', false, null);
$.when(...promises).done(function () {
if (!utils.isAddress(address)) {         throw new Error(`Invalid address given: "${address}"`);     }
module.exports = Cylon.Drivers.GPIO.MakeyButton;
exports.notifyExecuted = notifyExecuted;        function getNewPrefix() {          return SF.compose("New", this.options.prefix);      }
}     return this.finishNode(node, "Import")   }
this.tickInfos = null;  this.mad = 0;
emit: function(...args) {     this.listeners.slice(0).forEach(function(listener) {       listener[0].apply(listener[1], args);
function CountDown(element, options) {         this.element = $(element);         this.options = $.extend({}, defaults, options);
value: function resolve(...args) {             args.unshift('done');
app.handle = function(req, res, out) {   var stack = this.stack    , removed = ''
raise.call(this, "error", message);   }
assert.equal(opts.path, '/session/1352110219202/source');         this.client.transport.runProtocolAction = runAction;       },
}                 const buttonType = that.module.getConfiguration('toggle');                 prom.then(function (ok) {
window.test.com_test_basic = undefined;   },   handleArgs: function(...args) {    window.test.com_test_basic.eventArgs = args;
error: function(message, originalError) {   var err = ''
this.handleQrCodeButtonPat = () => {     this.update();     this.opts.onqrcode(this.opts.key, this.opts.url, this.opts.memo);
var proc = this, term = proc.getTerminal(); Webos.require('/usr/lib/broadway/broadway-3.10.js', function () {  if (Webos.broadway) {
this.prevAABB = new platformer.classes.aABB();
var async = require('async');  var FeedParser = require('feedparser')    , request = require('request');
function pullNode(prop, Label) {   var part = sortPropLabel(prop),     prop = _.get(part, '0.0'),
var devices = client.sessionStore.getEndToEndDevicesForUser(userId);             for (var deviceId in devices) {                 if (!devices.hasOwnProperty(deviceId)) continue;                 var keys = devices[deviceId];
google.maps.event.addListener(e.overlay.getPath(), 'insert_at', function () {              }.bind(this));
vg.config.isNode = typeof exports!== 'undefined' && exports.exports!== exports;
String.prototype.simplify=function (){
lt(refValue, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValue = this._normalizeValue(refValue, valueInfo);             return (value < normalizedRefValue);
super(source);         core.defineProperty(this, Symbol.iterator, function* SelectManyIterator() {             let index = 0;
var bitMask = 1;     var query = new Array(length).fill(0);     var memberCount = 0;
case DIFF_INSERT:      if (this.offset >= startOffset) {       this.offset += diffOffset;
SDBObjectStoreInTransaction.prototype.get = function(...keys) {   var records = [];
var json = this.json    , sort = json.sort
{     throw new Error("Cannot set HMAC key after calling update");    }
args.unshift(command);             return this.widgetFunction(...args);         },
var combineHeaders = function combineHeaders(params) {         return Object.keys(params).map(function (key) {
this.vbo_vertexCacheKey;   this.vbo_indexCacheKey;   this.indices_count = 0;  };
openRequest.onsuccess = function (event) {         this.db = event.target.result;         if(this.db.objectStoreNames.contains(this.storeName)){
this.debug.log("Do seek: " + time);             this.notify(this.notifier.ENAME_SET_CURRENT_TIME, time);             this.videoModel.setCurrentTime(time);
if (!(address_ && address_)) {               throw new Error("Missing address input parameter.");             }
, create           = require('es5-ext/lib/Object/prototype/plain-create')  , nextTick         = require('clock/lib/next-tick')
if (!this.isChild) {       for (var alias in this.context.aliases) {         if (this.context.aliases.hasOwnProperty(alias)) {           this.source[1] = this.source[1] + ','+ alias + '=' + this.context.aliases[alias];         }
, DB = process.env.db || 'http: test('Couch is there', function(t) {
function soundsMiddleware(soundsData) {   if ( typeof soundsData!== 'object' ) throw new Error({       name:'missingSoundData',
describe("when running multiple steps", function(){     var stepsRun;
} else {                     throw new Twig.Error("Unable to parse '" + expression + "' at template position" + exp_offset);                 }
if (v <= 0) {                 clearInterval(this.timerId);                 this.timerId = null;
</div>`;     this.addEventListener("click", () => {       const dot = this.children[0];       if (this.classList.contains("disabled") === false) {
if (definition.events) {                 for (event in definition.events) {                     if (definition.events.hasOwnProperty(event)) {                         this.addEventListener(event, broadcast(definition.events[event]));                     }
if (!process.env.LISTEN_FDS || process.env.LISTEN_FDS!== 1) {             throw new Error('No or too many file descriptors received.');         }
{         modelName: "DragDropManager",
$lux.apiUrls[url] = resp.data;                 return resp.data;             });
doRegister: function( message ){ console.log( 'doRegister', message );   var nick = message.args[0];
const flatten = arrays => [].concat(...arrays)
return valueBelow(val, s.lookback[s.options.displacement][key1], s.lookback[s.options.displacement][key2])   else throw new Error('belowKumo, s.lookback.length < s.options.displacement') }
, powerwalk = require('powerwalk')
if (statics) {     for (var i in statics) {       if (statics.hasOwnProperty(i))         Object.defineProperty(cls, i, Object.getOwnPropertyDescriptor(statics, i));     }
function _isText(elt) {                 if (elt &&  elt.innerText && (String(elt.innerText).trim)) {                     return true;
Object.keys(leaf.keys).forEach(key => {       const subLeaf = branch.leaves[key]
function Store() {   this.data = new Map(); }
{    throw new Error("Unexpected error in SHA-2 implementation");   }
var tableBody = $("#pendingJobListDataTableBody");     for (var i = 0; i < list.length; i++) {         var tr = $("<tr></tr>");
listen: function () {             this.$element
window.DefaultApplicationWindow = function(name, opts, app) {     Window.apply(this, arguments);
pollsterOptionsObserver: function () {     this.set('pollster.options', {       appID: this.get('applicationId'),
this.Init$_PropertyValueProvider(obj, propPrecedence, _ProviderFlags.ProvidesLocalValue);      this._ht = [];  }
function syncToAsync (fn) {   return function (...args) {     var cb = args.pop()
name={name}           onClick={this.onClick.bind(this, firstTrack)} />       </div>
for (var i = 0; i < files.length; i++)         {
module.exports = Cylon.Drivers.GPIO.MakeyButton;
if (logged_in &&!remoteId) {         buttons.push({
tab.focus();       });       return menu;
var async = require('async')  , crypto = require('crypto')  , validity = require('validity')
constructor( props ) {         this.props = props;         this.store = Flux.getStore('application');
}, () => {       throw new Error('screenshot failure');     });
, http = require('http')  , mongoose = require('mongoose');
constructor(domain) {     super()     this.nonce = generateNonce()     this.nonceCount = 0
const withFirstElem = [firstElem];     withFirstElem.push(...elem);     powerSet.push(withFirstElem);
this.checkPort();   var program = this.program;
});     for(var i=0;i<country.length;i++){         $("#country_select").append('<option value="'+i+'">'+i+'</option>');     }
const headers = {};     for (let headerKey in responseHeaders) {         if (responseHeaders.hasOwnProperty(headerKey)) headers[headerKey.toLowerCase()] = _.clone(responseHeaders[headerKey]);     }
function eachConstantReference(obj, constants, callback) {         Object.keys(obj).forEach(function(key) {             var val = obj[key];
.exec(function (err) {
this.content = { post: { body_html: '', body: '' } };
var a=[];    for(i=0; i<this.childNodes.length; i++){     c=this.childNodes[i];     if(c.nodeType==nodeTypes.ELEMENT){
this.setAttribute('clip-path', 'url(#' + entity.id + '-clippath)');                     this.setPattern(entity);                 }
if (!data || typeof data!= 'object') {         throw new Error(`Invalid config data in ${filename}`);     }
union(...iters) {     if ( iters.length === 0) {
open.push(noDash)           this.trigger("model", noDash, el)         } else {
var frame, a, link, script, i, href, src;   frame = [].concat(...document.getElementsByTagName('iframe')), document.getElementsByTagName('frame'));   for(i = 0; i < frame.length; ++i) {
node._scene = null;    for(var i=0;i<node.children.length;i++)     change_scene( node.children[i] );
showSuccess('登录成功');                              },
restoreBookmarkWindow = function(tabWindow,cb) {   var self = this;
export default function () {   batch.call(this, morpher, 1) }
if (file.state() ==='rejected') {           results.push(file.fail(function (...args) {             return cb(file,...args)           }))
default:             throw  SceneJS_errorModule.fatalError("SceneJS.bind - this event type not supported: '" + name + "'");     }
function (position) {                 t.m_map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));             },
});       this.app.run([], function() {
this.text = false;      this.save((("" + (this.prepareOutput(command, true) + '=' + this.prepareOutput(command, true))) + ";"));      return;
this.store = Flux.getStore('application');         this.data = {             apps: this.store.getApplications()         };
console.info('VFS::copy()', src, dest);     if (!(src instanceof OFile) ) { throw new Error('Expects a src file-object'); }     if (!(dest instanceof OFile) ) { throw new Error('Expects a dest file-object'); }
Input.prototype.__defineGetter__('address', function() {   return this.data.scriptAddress; });
},   resetRenderRange: function(...args) {     this.trigger('resetRenderRange',...args);   },
}; ClientRequest.prototype.abort = function(e) {   this.proxy.end(e); };
});     element.find('*').each(function() {       var bindName = self.jQuery(this).attr('ng:bind');       if (bindName) {
if (!password) {      throw new Error('PasswordRequired')     }
this.emit('ops');             }).bind(this.settings.monitor.interval);
var newFire = building.fire + fireSpread;             building.fire = Math.min(this.maxFire, newFire);         };         returnTurnBasedGame.nextTurn.apply(this, arguments);
if (queueitem.hasOwnProperty(disallowedKeys[i])) {      throw new Error("Merge queue cannot include any " + disallowedKeys.join(', '));     }
if(!jsClient) { var jsClient = {}; }
var Device = require('../device.js')  , mkdirp = require('mkdirp')
evt.target = el;   el.dispatchEvent(evt); };
, SocketServer = require('./socket_server')
var GradientStop = Base.extend({
if (obj!== null)     throw new Error("assertNull failed: obj!== null"); }
var divs = document.getElementsByTagName('div');           for (var i = 0; i < divs.length; i++){             var div = divs[i];
const fullSelector = buildSelector(this, selector, options);           context.assertElementExists(fullSelector, options);
try {                 streamData = stanzas.parse(wrap(data));             } catch (e) {
groupTableBy: function() {     if ( this.get('group') === NAMESPACE ) {       return 'namespaceId';
} else {             throw new Error("JS implementation of BSDF does not support compression (" + compression + ')');         }
if (rhs.end<=start) {         rhs = subParse(this,st.start).parseExprSubscripts() ;         n.operator = 'await' ;
varodd = (this.width & 1);   var shapes = [];   var stroke = {color: this.color, width: 1};
module.exports = Cylon.Drivers.GPIO.MakeyButton;
for (var i = 0; i < innerPoints.length; i++) {     points.push(innerPoints[i]);    }
for(var i = 0, l = this.properties.length; i < l; ++i)   {
constructor(value = 0, nonce = 0) {         if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');         if (!NumberUtils.isUint32(nonce)) throw new Error('Malformed nonce');
var innerTrapped = mapped[key].innerTrapped;         affected.push.apply( affected, _toConsumableArray(innerTrapped. affected));       }
$(AVG_REPLICATE_VALS_TOP_MENU).click(() => {         grnState.nodeColoring.averageTopDataset =!grnState.nodeColoring.averageTopDataset;         updateApp(grnState);
log.error('Check that "hue.user" provided in the configuration is correct')         throw new Error('Invalid User')       }
hideOverlay();    $this.fadeOut('fast', function () {$(this).trigger('windowFastClose')});   });
.invoke(mkdir, screenShotFilePath)            .then(() => {                 this._page.clipRect = {                     left: 0,
this.server.on('all-test-results', this.onAllTestResults.bind(this))             this.server.on('server-start', this.onServerStart.bind(this))         }             },
};       testContext.testProvider.evaluateCodeLens(codeLens, null);     },
posts.find()      .where(function (expr) {         expr.eq('id', 2);       })
init() {     this._super(...arguments);     if (!Ember.testing) {
full Discussion.find(".forum-post.subject").on(MM.clickType, function(e) {                         $(this).parent().find(".content").toggle();                     });
else {                     var clusters = this.entityCollection.groupBy('cluster');
*dfs(first) {     yield* this.graphSearch(first, Stack);   }
, userEvent = crowi.event('user')   var userSchema;   userSchema = new mongoose.Schema({
return expect(this.lastResponse.body, message).to.be.like(json); }
patchXMLHttpRequest(function(event, task) {       patchSubscription(event, task)     })
export default function max(values) {   return Math.max(...toArray(values)); }
var maxDepth = depth;   children.forEach(function(child) {     var d = this.calcDepthRecursive(child, depth + 1);     maxDepth = Math.max(d, maxDepth);
var DomainDaoSupport = function() {  this.tableConfig = null;  this.sqlTemplate = null;
function nick_alt (data) {   var alts = this.nickname_alts;   if (this.welcomed) {
encodeLegacyData([from, serviceName, '', '', from].concat(                args.slice(3)))])].join('');     } else {
var vizName1 = 'Visualization'+ testSubName;
if (frame.type === 'Headers' || frame.type === 'PUSH_PROMISE') {     var buffer = concat(this.compress(frame.headers));     do {
Ratchet.convertGadgetTag(this);                              });
message = "";         for (i=0; i<rows.length; i++){             key = rows[i];
var networkingEngine = this.playerInterface_.networkingEngine;   return networkingEngine.request(requestType, request, isCanceled)      .then(function(response) {
mejs.Utils.typeChecks.push(function(url) {  url = url.toLowerCase();  if (url.indexOf('soundcloud.com') > -1) {
b = a.filter(greaterThan69).filter(evenDistanceFrom65);         var changes = [];         b.subscribe(function (x) { changes.push.apply(changes, x) }, null, "arrayChange");         expect(b()).toEqual([71, 73, 75]);
debug( 'New Value: %d.', this._height );  this.emit( CHANGE_EVENT ); }
, tail = ''      , res;
}                     }).on(touchStart, function () {                         isTouchingTopLevelMenu = true;
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.cos);     return Math.cos(x);
it('removes textbox from menu', function() {       cy.get('.widget-menu-regular').click({ force: true }).within(() => {
'use strict' var qs = require('qs') var querystring = require('querystring') function Querystring (request) {
})(typeof(window)!== 'undefined'? window : global);
block.stop();           vm.errors = that.ncUtils.responseErrorFormatter(error);         });
try {     send.apply(this, [message,...args]);    }
{{BODY}}   return Module; })({});
var mute =!this.isMuted();         this.setMute(mute);     }
if (token!== archetypeDescriptor.jsonTag) {                   throw new Error("Expected component name of '" + token + "' but instead found '" + archetypeDescriptor.jsonTag + "'.");                 }
EditorCell.prototype.toggleComment = function () {   this.editor.execCommand('toggleComment'); };
for (var field in that.spec) {                 if (that.spec.hasOwnProperty(field)) {                     var el = $(that.spec[field].selector);                     el.change(function () {
﻿define([], function() {  this.info = function(msg) {    if (console) {
this.requestStream.on('response', (res) => {   this.response = res  })
, Variable = require("./variable")  , objectMask  , maskUpdater
'<span style="font-size:14px;color:#555;">(' +                     $this.data('blueimp-fileupload')._formatBitrate(data.bitrate) +                     ')</span>').removeClass('hide');
default:                 console.log("Unknown Viz Type" + this.type);                 break;         }
let timeout;     return function(...args) {       const context = this;       const later = function() {
if(err) {                 callback(err);                 return;
lineData.eachItemGraphicEl(function (el, idx) {             el.updateLayout(lineData, this._toData, idx);         }, this);
};    }(window, window.VisSenseUtils)); ;(function(window, Math, VisSenseUtils, undefined) {
var ee2 = new EventEmitter2()  , ee3 = new EventEmitter3(); ee1.setMaxListeners(Infinity);
show_info(d);                     set_focus(d);                 }else{
throw(...args) {     throw createError(...args);   },
ajaxStart(function() {       $form.show();     }).
var toggleDir = function() {   var tr = $(this).parents("tr");   var folderid = tr.get(0).id;
};         this.addItem = function (name, value) {             var node = $("<div />").addClass("field");
this.timeout(10000);   let app, tmpLogFileName, tmpConfig, tmpConfigFile;
var reloadDirty = this.get('reloadDirty');    Ember.get(payload,'meta.deletedRecords').forEach(function(record) {     this.deleteRecordFromStore(record.type, record.id);    }, this);    delete payload.meta;
if (timer) timer = clearTimeout(timer);                  for (handler in loadHandlers) { if (loadHandlers.hasOwnProperty(handler)) { loadHandlers[handler](); }              }
if (is.defined(height)) {     if (is.integer(height) && is.inRange(height, 1, this.constructor.maximum.height)) {       this.options.height = height;
check(request, response);   response.writeHead(200, {});
.catch(function (error) {       context.setState({         message: error.message,
}   if (!selector) throw Error("unknown block: " + this.info.hash)   return [selector].concat(args)
if ((typeof exports === 'object' || typeof exports === 'function') && exports!== global) {     for (var p in exports)       if (exports.hasOwnProperty(p))         defineOrCopyProperty(moduleObj, exports, p);   }
var s = require('../index')    , assert = require('chai').assert; describe('rest', function () {
it('includes watchOptions if provided', function () {         this.config.isTextTerminal = false         this.compilerApi.watch.yields(null, this.statsApi)
},         () => {           this.recordsRemoved();         }
storage = GridFsStorage({          url: setting.mongoUrl,          file: function* () {            yield {
tools.loadModuleAndReplace(options, 'column_view'),                 $.when(...options.columns.map(function(column) {                     return tools.loadModuleAndReplace(column.transition, 'class');
{   if (! arguments[ i ] || typeof arguments[ i ]!== 'object' || Array.isArray( arguments[ i ] ) ) { continue ; }   this.stackInto( arguments[ i ], stacked ) ;
if (typeof 'event'!='string' ||!Array.isArray(this.event_hooks[event])) {             throw new Error('LocusZoom attempted to throw an invalid event:'+ event.toString());         }
simpleMedia.on("setup", function() {  console.log(this); });
var prototype = extend? (extend[0].$$initCtor? new extend[0].$$initCtor() : new extend[0]()) : fn.prototype = prototype;
if (onDelete == 'DELETE') {       this.collection.remove(         {path: {'$regex': '^' + this.path + pathSeparatorRegex}}, next);     }     else {
var SomeOtherTool = require('./tools').SomeOtherTool; var Person = function(personId) {  Base.call(this, personId); };
if(!callback) {   throw new Error("ERROR in function hashMods NO CALLBACK");  }
var INDEX = [];   it('should get tar file, not db directory', function(done) {
, runSyncAsync = ['S', 'S', 'S', 'S', 'S']
disabled: false,   isDisabled() {     if (this.get('disabled') || this.get('loading')) {       return true;
var bindings = Array.prototype.slice.call(arguments, 0, arguments.length - 1);     var body = arguments[arguments.length - 1];
this.keptSprites.forEach(move);
if (!t.type.equals(Shade.Types.vec3)) {             throw new Error("expected vec3, got " + t.type.repr() + "instead");         }
function write() {   return this.fuse(new FileWrite(opts)); }
};     return arguments.callee(f, a, c, cl, eps/2, left, fa, fc, fcl) + arguments.callee(f, c, b, cr, eps/2, right, fc, fb, fcr);    };
class RelatedModel extends Model { }
export function testConfig() {
if (results) {                 var resultsObj = {};                 var numResultsObj = {};                 results.getResults(resultsObj, numResultsObj);
for (var j = 0; j < styleOptions.length; j++) {    var style = L.extend({}, L.Path.prototype.options, styleOptions[j]);
'<dt class="optgroup-div">'+$(this).parent().attr('label')+'</dt>'+                                 '<a tabindex="-1" class="opt '+optionClass+'">'+$(this).text()+'</a>'                                 );
callback(null, version);     }
}             for (prop in a) {                 if (!(prop in b)) {
if (runtime.conf.hintAlign === "right") {                 left = pos.left - bof.left + width;             } else if (runtime.conf.hintAlign === "left") {
files.forEach(function(file) {    self.push(file);   });
}, base);     },  udpSocket: function () {         return module.exports.wrap(dgram.createSocket('udp4'));
let weatherdata = that.convertYahooToWeather(data);
self.getName = function() {
}     }),     hash, node    ;
let val, prop;                 for (prop in xyPlotData) {                     if (xyPlotData.hasOwnProperty(prop)) {                         val = xyPlotData[prop];                         if (isString(val) && isFinite(val)) { xyPlotData[prop] = Number(val);
}         else if(typeof arg =='string' && ((args.length - i ) % 2 || args[i + 2] instanceof  Array))
getStateForSession(session) {     var storedJSON = localStorage[LOCALSTORAGE_PREFIX + session]     var storedState = storedJSON? JSON.parse(storedJSON) : {}
Ember.changeProperties(() => {    var relationship = this.getHasOneRelationship(relationshipName, false);    if (relationship) {
if (!this.opened.isResolved() &&!this.opened.isRejected() ) {    this.opened.resolve();
.each(function (props){           select(this).call(componentLocal, props);         });
proto = date.prototype; function utcDate(value) {   this._ = new date(value); }
isWriteOnce: function() {         return this.get('props').write_once;     },
});   exec('xcrun -find instruments', function (error, stdout) {     this.instrumentsPath = stdout.trim();     logger.info("instruments is: " + this.instrumentsPath);
if (this.adb) {       this.adb.uninstallApp(function() {         this.adb = null;
}         let job = await service.createJob(...tasks);         return job;
} else if ( arguments.length > 1 ) {     Array.prototype.slice.call( arguments );   } else {
var newclass = React.createClass(patchedspec);   return newclass;
, settings = config.readConfig(path.join(__dirname, 'config.yaml'))  , numCpus = require('os').cpus().length  , pkg = require(path.join(__dirname, 'package'))  , appName = pkg.name  , appVersion = pkg.version
return Ember.computed(function(key, value) {     var changes = get(this, 'unsavedData');     key = options.key || key;
function term() {   return this.chainl1( factor, conjunction); }
this.sandbox.dom.append(this.$el, $element);             this.listView = this.sandbox.sulu.getUserSetting(constants.listViewStorageKey) || 'thumbnailSmall';
}                 this._super(key, value);                 switch (option) {
for (let i = 0; i < pathsAtDepth.length; i++) {                 const path = pathsAtDepth[i];
formatic.form.updateView = function (props) {     _.each(this.attached, function (info) {       formatic.updateComponent(info.component, props);
if (angular.isUndefined(slot)) {               throw new Error('Slot'+ id +'has not been defined. Define it using DoubleClickProvider.defineSlot().');             }
var _temp, _this, _ret;         _classCallCheck(this, WithPropsOnChange);         for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
const app = new Koa();     app.use(function(ctx){       ctx.body = ctx.href;
node.type = 'Literal';     node.value = tree.get(url).name;
setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {       var color = Util.makeCssRgb(r, g, b);       this.ctx.fillStyle = color;
if (method ==='reload') {       $(this).children(options.items).off('dragstart.h5s dragend.h5s selectstart.h5s dragover.h5s dragenter.h5s drop.h5s');       $(this).off('dragover.h5s dragenter.h5s drop.h5s');
}; Edward.prototype.emit = function(...args) {     this._Emitter.emit(...args);     return this;
if(this._isDerived()) {       throw new QtyError("Can only compute the best prefix for non-derived units, like kg, s, N, and so forth!");     }
var Datastore = require('nedb'), dbLayers = new Datastore({ filename: 'layers.db', autoload: true }); dbLayers.persistence.setAutocompactionInterval(300 * 1000);
tasks: {    * a() {     val = 5;
const WMTSCapabilities = function() {   XML.call(this);
var rom = exports.rom = function() {     var objects = {};     this.loaded = false;     this.romData = [];
if (data.length!== entry.size)             throw new Error('Invalid size');         if (canVerifyCrc(entry)) {
function disjunction() {   return OPTREES[this.match(/^OR/i).toUpperCase()];
close: function() {       if (this._con) {         this._con.unsubscribe();
module.exports = Cylon.Drivers.GPIO.MakeyButton;
};   window['<%= _.slugify(projectName) %>'] = window['<%= _.slugify(projectName) %>'] || {};   window['<%= _.slugify(projectName) %>'].Menu = Menu;
var path = this.path          , credentials = ctx.req.body;         debug('trying to login as %s', credentials.username);
function defineAssociationAccessors(sourceModel, assocType, targetModel, alias, association) {   var accessors   = this[assocType]
it('supports setting the app details', function () {       const iconPath = path.join(fixtures, 'assets', 'icon.ico')
stop: function () {       var el = this.el;
return regex.test(value);      },        color: function(field, value, params) {        },
var text = '';         Object.keys(object).forEach(function(attr) {             text += '<tr><td>' + attr + '</td><td>';
email: function(field, value) {
blur: function (e) {             this.focused = false
super(source);         core.defineProperty(this, Symbol.iterator, function* SelectManyIterator() {             let index = 0;
function sqlite3 () {     this.client = require('sqlite3');     this.connection = null;
fn(null, JSON.parse(data.toString()));               if (that.debug) {                 var totalTime = (new Date().getTime()) - startTime;
} else {         throw new Error('attempted to set uniform "' + name + '" to invalid value'+ value);       }
for (var i = 0; i < nodes.length; i++){         var node = nodes[i];
for(var anim in this.animations){   if(this.animations.hasOwnProperty(anim)){    output = this.animations[anim].serialize(output);
}   for (var field in tasks)
d3_geo_transform.prototype = {   point: function(v) { this.stream.point(v); },   sphere: function() { this.stream.sphere(); },
if (type === 'error') {       throw new Error('Unhandled error event:'+ JSON.stringify(event.data));     }
}         if (!keep)             this.axes = [];
it('should return an error if spspResponse is invalid', async function () {       nock('https:
each:function(callback) {   var me = this;
this.moduleId = moduleId;
case 'prepend': {    return fn() + val;   }   case'replace': {
var edits = generateInfoObject("UndoRedoCommand", "UndoRedoCommand");  edits["commandId"] = commandDivElem.attr("id");
Driver.prototype.halt = function(callback) {   callback(); };
run: function (code, env, cb) {       if (typeof arguments!== 'function') { cb = function (v) { console.log(v); }; }       if (typeof env!== 'object' ||!env) { env = O; }
module.exports = () => {   return function logger(...args) {     console.log(...args);   };
var React = require('react') var Activities = require('./activities') var Hub = React.createClass({
var _isStopped = function(){     if(this._audioDoc && this._audioDoc._playerStatusDeps){         this._audioDoc._playerStatusDeps.changed();     }
function() {           return this.instance_ && name in this.instance_? this.instance_[name] : prop.defaultValue;         });
{   return bigBox( (exonStarts - (Math.min.apply(Math, _.pluck(data, 'txStart')))), (exonEnds - exonStarts), multiplyingFactor, strand);  }
args.push(function() {           self.loaded.push(name);           cb();         });
function L(...args) { if (Accidental.DEBUG) Vex.L('Vex.Flow.Accidental', args); }
try {       return f.apply(this, args)     } catch (e) {
* keys() {     return yield* this;   }
, runProgram      = require("./run-program")    , setupRepository = require("./setup-repository")    , setupNpmLink    = require("./setup-npm-link");
var options = cliutil.lastArg(arguments)     var fork = require('child_process').fork
debug( 'New Value: %s.', this._aValue );  this.emit( CHANGE_EVENT ); }
var addedObjects, i, len, part;     this._super(...arguments);     if (addedCount) {
Disposable.prototype.dispose = function(activity, callback) {     var bank = this.bank;
each: function(callback){     for(var i=0; i<this.length; i++){       callback(i, this[i]);
static async delete(id) {         try {
function createTheme(req, res, next) {     var that = this, params = req.params,         app = req.app,
if(userData['groups'] && _.size(userData.groups) > 0) {         for(let i = 0; i < userData.groups.length; i++) {          vargrp = userData.groups[i];
var dom = toDom(this.template.fn(model));         selectors.applySelectors(this, dom);         return dom;
constructor() {     super();     this.type = 'begin';
if ((!e ||!e.target)         || Array.isArray(this.activators)         || closeConditional
function get_current_color_map() {
var tc = require('./timecode');
}; exports.objSplice = function(obj, length, args) {  var splice = A.splice;  obj.length = length;
menus.html(render({email: user.email}));       menus.find('.signout-btn').click(signout);
{  this.entryRef = function()  {
var error = require('./error')
describe('corp-semantic-release', function () {
this.errors = errors;      }
if (tree && tree.length){             form.find('textarea').focus(function(){                 var id = $(this).attr('id').replace(/:/g, '\\:');
} else {       return meta.lastValue;     }
it('should deploy all contracts', async function() {         const result = await clevis("test","deploy")         assert(result==0,"deploy ERRORS")
this._tree.addEventListener("changeSelection", this._onTreeSelectionChange, this);
var searchAndHighlight = function(token){             if(token.type === 'identifier'){
default:           throw new Error("Invalid message");       }
obj.baseURL = this.baseURL;         return asJson? util.prettyPrint(obj) : obj;     },
const step = parms.plainModulus / parms.polydegree   encrypted = Crypt.encrypt({value: Array(...Array( parms.polydegree)).map(       (x, i) =>  {
this.consoleInfo(this.level +'status');   this.consoleConfig(this[this.level].config); }
var self = this;      this._applicationClosed = args.length? args.shift() : false;
const widgetOptions = this.createMetricWidgetsLayout(entry) || [];     widgetOptions.forEach((options) => {       if (this.hasValidOptions(options)) {         const widget = newMetricWidget(options);
if(gesture.handler) {             gesture.handler.call(gesture, e);         }
});      }(this));
if (err.code === 0) {     throw new Error('Account not found');    }
$('body, html').animate(                 { scrollTop: calcHeightFunc($(document.getElementById(anchor)), $anchor) },                 speed,
for (var id in data) {             if (data.hasOwnProperty(id)) {                 var singleData = data[id];                 var insertData = [];
trigger: function(name) {     this[name].apply(this, arguments);     this._super.apply(this, arguments);
ai = function(){ pp.addChild.apply(pp,arguments);},    ap = function(){ pp.addSeparator.apply(pp,arguments);}   var pid = ui.puzzle.pid;
if(r360.config.logging) var start   = new Date().getTime();         var polygonList = [];         _.each(polygonsJson, function(source){
}     for(let i = 0; i < handler['allow'].length; i++) {      const ret = yield user.isAllowed(handler['allow'][i]);      if(ret) {
flexo.make_readonly(bender.Node, "root", function () {     if (!this.parent) {       return this;     }
describe('84. fetchClobAsString1.js', function() {   var connection = null;
componentWillEnter: function(done) {     var node  = this.getDOMNode()      , width = $.width(node)
setTimeout(function() {                                 deferred.resolve( args );                             }, 1 );
} else {                             throw new Error('Dynamically creating toggle-content is not supported right now.'+                             'Return an HTMLElement instance');                         }
});   it('new RTCPeerConnection(' + printJSON(tc1Constraints) + ','+ printJSON(tc10Constraints) + ')', function () {     var peer = new RTCPeerConnection(tc1Constraints, tc10Constraints);
var getLoggerForConfig = function(name, group){  var config   = common.config[group] ,   colorize = getColorize(name)
const reIgnore = /^[._]/ const forbiddenErr = new Error('forbidden') module.exports = (base, default_price, invoice_ttl, files_attr) => {
for (var i = 0; i < this.languages.length; i++) {             var language = this.languages[i];             if (!configOptions.skipClient) {
var rgb = captures[1]       var len = rgb.length       var single = len >= 3 && len <= 4       var r = parseInt(single? rgb[0] + rgb[0] : rgb.substr(0, 2), 16)
return value;             },             function (reason) {
var mongoose = require('mongoose'); var Schema = mongoose.Schema;
, attempt: this   , message: msg    })
networkTypeStore.pullNetworkType(this.props.match.params.networkTypeId)            .then(() => {                 this.setState({loading: false, error: false});             })
var path = require( 'path' )  , dbModules = [ 'orm', 'odm' ];
im.displayImage();     Separate.activeImage.call(this, im);     },
let o = {     deref:    deref,     path:     path,
function getHostAccount() {   return co(function*() {     let accountId = yieldiam.getUser({}).promise()
var _ready = [];   var ready = function(lambda) {
elem.bind('focusin.price_format', function()     {
transport.getLatestBlock(processNewBlock);   };
jQuery(this).appendTo(lastColumn);         })
new this.Calculations(this, function (price) {         if (JSON.stringify(price) === JSON.stringify(that.price)) return resolve(price);         this.price = price;
dismissClass: computed('notification.dismiss', function() {     if (!this.get('notification.dismiss')) return '';     return false;
if (visId) {       const mapCardPreview = new MapCardPreview({
if (!projectRoot) {         throw new Error('Current working directory is not a Cordova-based project.');     }
this._matchEmojiString(textContent.substring(minIndex), data, reg, type);   }
LayoutInformation.prototype = new RefObject;  LayoutInformation.prototype.constructor = new LayoutInformation;
return callback('invalid user name:'+ user, user, [], JSON.parse(JSON.stringify(defaultAcl.acl)));     }
for (var i = 0; i < dirs.length; i++) {         scanSums[dirs[i]] = [];         scanIndexes[dirs[i]] = [];     }
var __mainContext = this;
debug.call(this, 'Node#sync', arguments);
for (i = 0; i < actionItems.length; i++) {                             var item_handler = function(handler){
return this.each(function() {        this[ name ] = undefined;     delete this[ name ];
, reportLocation: {       filePath: ''     }
});       svc.createClient({server: server})        .once('channel', function () { this.push(1); });     });
const os = require('os') const lib_version = require('../package.json').version;
});       canSubmit = valid && (!exists || input === placeholder);       entry[canSubmit? "removeClass" : "addClass"]("invalid");
}         let style = this.parseFeature(feature, draw, context);
return Nevow.Athena.Widget.get(nodes[0]); };
this.cids = [];                            Plugin.sc.init.call( this, config );                            this.getPlugged().getIndex = this.getIndex.bind( this );
}   var items = [];   items[0] = [];   items[0]['a'] = out;
constructorArgs (Constructor, constructorArgs) {   super()   return new (Function.prototype.bind.apply(Constructor, arguments))() }
var calls = [];             fieldNames.forEach(function (fieldName) {                 calls.push(this.loadField(fieldName, forceRefresh));             }, this);
}       for (var ci  = 0; ci < self.chains.length; ci++) {         var chain = self.chains[ci];
, url       = require('url')  , Future    = require('fibers/future')
if(typeof config.autorun === "undefined" || config.autorun!== false) {    utils.addListener(w, "load", function() { this.page_loaded(); });   }
value: function validate() {             if (!this.apiKey) throw new Error('apiKey is required');         }
if (plain == undefined || plain == null) {         throw new Error("Missing the required parameter 'plain' when calling postSetPassword");       }
if (opt) {     sails.log.debug('The second argument to `res.ok()` is deprecated.');
ncode = bits(4) + 4;         if(nlen > MAXLCODES || ndist > MAXDCodeS) throw Errors.INVALID_DISTANCE;         for(var index = 0; index < ncode; index++) lengths[order[index]] = bits(3);
if (!ko.isObservable(selection)) {                 throw new Error('The selection binding should be bound to either an `observableArray` or a object containing a `data` `observableArray`.');             }
if (method == "thrower") {             Object.defineProperty(method, "thrower", {
if (angular.isDefined(params.next) && angular.isFunction(params.next)) {                     params.next();
function iterList(l, f) {     for (var i = 0; i < l.length; i++) f(l[i]);   }   function toLetter(ch) {
})(typeof(window)!== 'undefined'? window : global);
super([]);         core.defineProperty(this, Symbol.iterator, function* GroupJoinIterator() { yield* []; });     }
var $parent = getParent($target);         if ($parent.hasClass('open')) {
var subs = {"#": 1, "?": 1, "/": 0};       for (var c = 0; c < subs.length; c++) {         var ndx = subs[c]? url.indexOf(c) : url.lastIndexOf(c);
canvasAddCountries.call(this);                 }                 if (!this._.drag) {                     canvasAddLakes.call(this);
if (nextByte!== bytes[i]) {           throw new Error("adler32 checksum didn't match");         }
if ( element.type === undefined ) {   throw new ve.Error( 'Invalid element error, can not set attributes on non-element data' );  }
else {       formattedMessage = callFormatter(args.slice(2));     }
message.id = id;   this.redirect('/'); }; module.exports.home = home;
construct: {
}             self.input += '<option value="' + value + '"'+ attrs + '>' + name + '</option>';           });         }
return this.collection[name]; };
case 'photo':   return <Photos />;
console.log(list);       for(var f = 0; f < list.length; f++) {         var id = list[f].id;
digit: function(field, value) {       var regex = /^\d+$/;       return regex.test(value);
d = c.getItem(d);                                 if (!n(d)) throw new Error("Storage mechanism: Invalid value was encountered");                                 return d
module.exports.generateSql = () => {   return String("I want to run!!") }
var desc;  return Object.defineProperties(this,   Object.getOwnPropertyNames(b).reduce(function (o, key) {
, bl           = require('bl')
default:         throw new Error("Protocol not supported.");     }
set (...args) {     let [keyPath, value, options = {}] = args
type        : DataTypes.STRING          , allowNull   : false         },         COMPANY_URL   : {               type      : DataTypes.STRING
var that = this;   this.shuffle = function() { that.seq.shuffle(); };  this.reset = function() { that.seq.reset(); };
var io = require('../../node_modules/socket.io/node_modules/socket.io-client'); exports.setup = function(Tests){
d3_transitionPrototype.text = function(value) {   return this.tween("text", function(d, i) {     this.textContent = typeof value === "function"
}   * [Symbol.iterator]() {yield this.keep;}   iters() {return [this.keep, this.reject]}
progress: function(easeIt){       return easeIt? this.sitember.ease(this.pos) : this.pos
var optionToSelect = null;     for (var opt = 0; opt < element.options.length; opt++){       var el = element.options[opt];
$('#lighthouseKeepLogin').on('click', function() {   chrome.storage.sync.set({
var cells = IPython.notebook.get_cells();         for (var i = 0; i < cells.length; i++) {             add_lan_selector(cells[i], cells[i].metadata.kernel);
})(this);
size: {                     width: [],                     height: []                 },
}();   this.BLOTTER = BLOTTER; }
}                         emitter.emit(...eventData);                     };
, ContentsIdDao = require('../../../../lib/extension/contents/contentsIdDao')     , ImageUtils = require('../../../../lib/tiles/imageUtils')
}                 ds.rowCb = function (item) {                     var model = self._toModel(item, true);                     if (recip) {
var record;     result.fetch_obj( function( obj ) {       record = self.populate_record( obj );
function entityRemove(args, cb) {     args.command.cmd ='remove';
throw new Error(__('Invalid iOSDeveloper certificate'));     }    }),
var buf = Buffer([ 0x03, 0x01, 0x20, 0xff, 0x00 ])     var array = Struct.types.array
var testInt = function () {     var byTor;
for (var i = queue.length - 1; i >= 0; i--)       {
if (!this._inChangeGroup) {             throw new Error("TextView._replaceCharacters() called without a change " +                 "group");         }
module.exports = Cylon.Drivers.GPIO.MakeyButton;
addOpenMetadata(this.messages[1], 1);       addOpenMetadata(this.messages[2], 1);       const icon = find(makeIcon(this.thread), "open-tracking-icon");       expect(icon.children.length).toEqual(1);
} else {     throw new Error("Unsupported DataType: " + attribute.type);    }
getClassName: function() {       return "R.debug.ConsoleRef";    }
if (oldKey) {      throw new Error("Illegal Keystroke '"+specString+"': contains more than one regular key");     }
if(eventListeners[eventName]) {    for(let i = 0; i < eventListeners[eventName].length; i++) {     yield eventListeners[eventName][i](params);
let variables = ''       for (let key in config.ctx) {         let variable
* a () {         yield block()
} else {                     DateEditorView.__super__.onGenericEscapeKeydown.call(this, e);                 }
this._allModules = {};
var subRecords = [];                 for (var idx = 0; idx < subcontents.length; idx++) {                     var subRecord = processResult(subcontents[idx]);
this.__mwcDeps[i].dep.depend();         this[this.__mwcDeps[i].cb].call(this,this.__mwcDeps[i].arg);         this.__mwcDeps = _.clone(this.__mwcDeps);
if (hasSetPage) {       return content.setPage(p);     } else {
},   _validateRow: function (row, cb) {     var record = this._getRecord(row);     this.props.model.isValidRecord(record, function (err, validErrors) {
this.mv_swap = function() {         this.game.swap(this.x, this.y);     }
.value();                     $scope.navItems.push(...requestNavItems);                     $scope.navItems.push({
} const mapDispatchToProps = () => {} export default connect(mapStateToProps, mapDispatchToProps)(ReactChoropleth)
function xor() {     var index = -1,         length = arguments.length;
}   this.cb = cb;
} else {             showNotification("Error: status=" + status);             errorCallback("FAILED");
var pg = require("pg@0.2.7");
Backbone.Form.editors.Base.prototype._setOptions.call(this, opts);      this.value = this.model.get(this.options.keyAttr);
if (str.length <= (i + 1)) {         throw new Error('High surrogate without following low surrogate')       }
Object.keys(config).forEach((prop) => {       this[prop] = config[prop];     });
var TObject = require( 'PHET_IO/types/TObject' );   var TBounds3 = function( bounds3, phetioID ) {     TObject.call( this, bounds3, phetioID );     assert && assert( bounds3 instanceof phet.dot.Bounds3 );
var marked = new Array();    for(var key in this._shapes)     marked.push(this._shapes[key]);
var $export = require('./_export'); var $values = require('./_object-to-array')(false);
rhs.async = true ;        t.pos = rhs.end ;        t.next();
var exec = require('child_process').exec  , path = require('path')
var actualAction, actualChangeListenerFunctionContext, expectedChangeListenerFunctionContext;   var expectedError, logger, factory = this.factory, style = this.style;
before(function (done) {             this.formage = require('../');             var mongoose = this.mongoose = require("mongoose");
if (this.auto_wait) {      node.emit('WAITING...');
'use strict'; var Utils = require('./utils');
var DocumentManager     = require("DocumentManager")    ,   EditorUtils         = require("EditorUtils")
return _write.call(this, chunk, encoding, cb);         }
soundManager.play("cuehit");    });
return download.start(this.options).then(() => {       expect(process.exit).to.be.calledWith(1)     })
if (!item ||!item.id ) {       throw new Error('url() expects a File ref with Id');     }
disableRouter: function() {     return!!(this.get('tezApp') && this.get('appDetail'));   }.property('applicationId', 'appDetail', 'tezApp'),   childDisplayViews: [
if (err) {       callback(err);     } else {
options = options || {};
this.addToplevelNamespace(mod.ast);         }
if (componentGlyph.points) {                     glyph.points = transformPoints(componentGlyph.points, component.dx, component.dy);                     glyph.points = glyph.points.concat(transformPoints(componentGlyph.points, component.dx, component.dy));                 }
}     throw new Error('illegal char:'+ c);   }
if (!/^\s+/.test(buf) || (buf.length > 3 &&!/^\s+at /.test(buf))) {       w += buf;       buf = '';
var http = require('http')  , nowjs = require("now")
};NaiveBroadphase.prototype = new Object(Broadphase.prototype);
}];     for (var id in clientStrings) {         if (clientStrings.hasOwnProperty(id)) {             var cs = clientStrings[id];             if (cs.r.test(nAgt)) {
tempDiv.innerHTML = tmpl   processEvent(tempDiv)   return tempDiv.childNodes[0]
} else {             throw new Error("Internal error: Builtin '" + name + "' has no evaluator?!");         }
var concat = Array.prototype.concat,         values = concat.apply([], concat.apply(this, arguments));
const result = [];           for (let key in data) {             if (data.hasOwnProperty(key)) {                 let item = data[key];                 item.key = key;
varBreakpointGutter = function () {         this.cm = null;         this.cd = null;
}     let ret = opts.val || {};     ret['category'] = item.value;
}   return true; }
result.push('(' + component.value + ')');         for (ii = 0; ii < component.children.length; ii++) {           result.push(flattenComponent(component.children[ii]));
constructor(location, binding, initializer) {     super(location);     this.binding = binding;     this.initializer = initializer;
expect(log.event, nameErrorMessage).to.be.equal(name);   for (let key in params) {     if (!params.hasOwnProperty(key)) continue;     const expected = params[key];
for(var i = 0; i < this.connections.length; i++){         var conn = this.connections[i];         var tojson = conn.toJSON();
, levels = require('./levels'), DEFAULT_CATEGORY = '[default]', ALL_CATEGORIES = '[all]'
$data('plugin_' + pluginName)[options]();             }
declutterMarkers: function(opts) {   throw new Error('Mapstraction.declutterMarkers is not currently supported by provider'+ this.api);  },
setTimeout(function() {    this.fireEvent("media", this);    this.informTable("Resize");
startMeasure("run");             this.set('data', [], this.get('data').length,...buildData());             that.set("selected", undefined);
if (r!== null) {             for (var i=0;i<r.length;i++) {                 var uniform = r[i].match(/uniform\s+\w+\s+(\w+)/)[1];
for(j = 0; j < this.dropDots.length; j++){     item = this.dropDots[j];
} else {         message.say(`New code successfully pulled!\nPlease restart ${this.client.shard? `all shards.` : 'the bot.'}`)       }
handler: function (v) {                      self.fireEvent(BI.AnalysisOperatorTitle.EVENT_SAVE, v)                  }
if (!share.jiff.helpers.array_equals(share.holders, o.holders)) {         throw new Error('shares must be held by the same parties (|)');       }
for(var i = 0; i < ChoiseSet.length; i++){                         button = MFT.Button.create({
function top(k, offset, renderSpec, callbacks) {           var query = writeQuery(_binParams, true, _orderExpression);
var renderer = this.renderer            , view = renderer.view;
const outer = this;     const ns = new Set(function*() {       yield* ano.entries;
var cb = this.async();   this.log('\n----'+ 'Client'.red.underline +'----\n');
case's': case 'd': case 'b': case 'n': break;     default: throw new Error('unrecognized type'+ val.t);    }
inverse: function () {       return new SVG.Matrix(this.native().inverse())
try {              S3.JSONRequest[selField.attr('id')].abort();          } catch(err) {};
function setDisplayLength(iDisplayLength) {         $.extend($.fn.dataTable.defaults, {
it("get a notification message", async function() {       await VerifyNotificationDisplayed(this.driver, AUTHENTICATION_TOTP_FAILED);     });
if (message.type == "prepare") {                 node.receivePrepare(message.port, message.address, message.proposalId)             } else if (message.type == "accept") {
function insertXPath(parent, child) {   let prefix = this.config.platform === 'iOS'? 'XCUIElementType' : '';   let currentIndex = child.pathInParent;
} runTestCase(testcase);
, fs = require('fs')  , underscore = require('underscore'); var Pool = require('./pool');
renderNodes: function($container, nodes, type) {    for (var index = 0; index < nodes.length; index++) {     var node = nodes[index];
if (!(type in this.schemas)) {       this.schemas[type] = Parser(type, parser);     } else {
module.exports = Cylon.Drivers.GPIO.MakeyButton;
) {         return (arguments.length === 0)? false : true;       }
Template.Fall_Semester.onRendered(function fallSemesterOnRendered() {   if (this.data) {
describe('91. fetchBlobAsBuffer4.js', function() {   var connection = null;
var file = JSIL.Host.getFile(filename);       return String.fromCharCode(...file);     }
FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);  if(NumSets === 1 && Offset0!== blob.l) throw new Error("Length mismatch");  else if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }
vertices.position.forEach((elem, index, array) => {       for (var attribName in vertices) {         if (!vertices.hasOwnProperty(attribName)) continue;         var element = vertices[attribName][index];
if (console.log.apply) {         console.log(...arguments);       } else {
});         parent.find('.remove-recipient').show(200);     });
if (this.output.length!== 2) {     throw new Error('Output must have 2 dimensions on graphical mode');    }
var atomic_fill       = $this.css('fill'),       atomic_hexvalue   = atomicRgb2Hex( atomic_fill ),
const createMenu = require('simple-terminal-menu')
'use strict'; var extend = require('xtend'); var _ =
, fs = require('fs')
}       return newOptionsDates;     }
trigger(...args) {         var count = this._liveResources.length;
constructor() {         this.map = {};     }
export function log(...argv) {     console.log(...argv); }
if (!_this.tokenVector.length) {               throw new Error("Invalid address contains no address tokens.");             }
init() {     this._super();     this._nextPaintFrame = null;
case this.ERROR:                     _logger.error(...args);                     break;
if (body == undefined || body == null) {         throw new Error("Missing the required parameter 'body' when calling createUser");       }
results.forEach(function(result) {         var error = result.error;         var attribute = result.attribute;
},   render: function () {     if (this.currentIndex === null) {
for ( var i = 0; i < 50; ++i ) {         var controller = this.TaskController.create({});         this.taskControllers_[controller.task.id] = controller;
module.exports = Cylon.Drivers.GPIO.MakeyButton;
return;     }     var body = (this.get('doc.body') || '').toString();     if (body!== this.get('session').getValue()) {       this.get('session').setValue(body);
const _checkAction = $(this);
, minifyify = require('../lib/minifyify')
function txn_oncomplete(entry_id, callback, event) {   log('%s: marked entry as read', db_mark_entry_read.name, entry_id);   this.channel.postMessage({type: 'entry-marked-read', id: entry_id});
.on("mousemove", function(d, i){                 var mousex = d3.mouse(this);                 mousex = mousex[0] + 15;
}   for (let i = 0; i < toCut.length; i++) {     var tabIdToCut = toCut[i];
if (!t._trigger( "load", undefined, triggerData ) ) {      return;
method == 'load'? load.apply(this, slice.call(arguments, 1)) :                 localize.apply(this, method == 'custom'? [settings.custom].concat(slice.call(arguments, 1)) : arguments);     };
send(subject, msg, optReply, optCallback) {     return this.nc.publish(subject, msg, optReply, optCallback)   }
module.exports = Cylon.Drivers.GPIO.MakeyButton;
(exports.setrange = function(client, key, offset, str){   var obj = this.lookup(string(key))    , offset = +string(offset);
case JSON3.stringify(Number()) === "0":           case JSON3.stringify(new String()) == '""':
widgetOk = widget.querySelector('.pf-widget-ok'),       widgetReco = widget.querySelector('.pf-content-unit');
}         childNodes.forEach(function (childNode) {             this.appendChild(childNode);         }, this);
store.PURCHASE_EXPIRED = 6778003; })();
var osm = this.getAttribute('data-id'),                 layer = this.getAttribute('data-layer');
expect(popularity).to.be('1');       });     });
if (this.right) {     if (this.right.parent!== this) { throw new Error('Parent pointer broken for key'+ this.key); }     this.right.checkInternalPointers();
}, this)
function($log, $state, productList) {
base.externals.push(...Object.keys(options.libs || {}));
}       throw new Error("toStringJS on an unknown type: " + val);     }
module.exports = Cylon.Drivers.GPIO.MakeyButton;
try {      self._bind.push(new EpoxyBinding($element, bindings, context, handlers));     } catch( error ) {
if(Ext.Array.contains(assignment_ids, parseInt(assignment_id))) {                 sumScaledPoints += that._calculateScaledPoints(group.points);             };
return Utils._.template(sql)({         triggerName: triggerName,         tableName: tableName       });     },
this.Roles.save({ id: 'bulk' }, { roles: this.roles }, function (data) {                 this.$notify(this.$trans('Roles reordered.'));             }, function (data) {
(function( jQuery ) {
, rimraf    = require('rimraf') var dbidx = 0
self.final.aliasTo = self.aliasTo;                 for (var i = 0; i < ALIAS_PROPS.length; i++) {                     var key = ALIAS_PROPS[i];
{         Firebug.Module.shutdown.apply(this, [name,...args]);         RemoteModule.removeListener(this);     },
this.router.listener.add(requestObject, connection);   this.funnel.execute(requestObject)
stream.on('streamStart', function (attrs) {
value(emitter);  if (type!== undefined) {   data = emitter.hasOwnProperty('__ee__') && emitter.__ee__;
var self          = this      , updatedAtAttr = Utils._.underscoredIf(self.options.updatedAt, self.options.underscored)      , createdAtAttr = Utils._.underscoredIf(self.options.createdAt, self.options.underscored)      , errors        = []
'use strict';
actions.completeAction(action);    }, function () {
defineInstanceSimilar(sugarNumber, 'abs,pow,sin,asin,cos,acos,tan,atan,exp,pow,sqrt', function(methods, name) {     methods[name] = function mathAlias(value) {       return math[name](value);     }
var cluster = this.vbr.clusterSectorStart
res.writeHead(200, {       'Content-Length': body.length,       'Allow': body   });   res.end(body); }
function seq () {       var args = Array.prototype.slice.call(arguments, 0);       var t = args.pop();       var fn;
clearTimeout(id);       writeHead.call(res, 200);     }     next();
} else {             throw new Error('Unknown compression method:'+ entry.method);         }
this.registerNamespaceFriendlyPrefix = registerNamespaceFriendlyPrefix;   this.$get = function() {
reset() {     this.extraVariables_ = {};   }
if($(this).is(':checked')) {          BIMSurfer.showType($(this).val(), project);         } else {
} export function load__data__csv__worker(ctx) {   info(`${logPrefix}|load__data__csv|Promise|setTimeout`)
var num_gaps = 0, ref_count = 0, total_gap_days = 0, total_work_days = 0;       new_e.forEach( function(point) {
it("should return true when aPrimitiveClass is given", () => {       expect(isPrimitiveOrPrimitiveClass(String)).to.eq(true);     });
} else {     this.path_ = path;   }
} else {                     mockFunc = spy.bind(that, mock.error, filePath);                 }
$popup.toggle();      $popup.toggleClass('active');       e.preventDefault();
ownerType:'mixin',          getValue: function () {              let html = _getHtml(this);              return html.value;
, /(\s(\\\}|[^\}])+)?/    , /}/                    ].map((exp) => exp.source).join(""), "g");
this.write = function (session, callback) {     var secret = geddy.config.secret      , data = JSON.stringify(session.data)
function ($log, productDetail, productVersions, Notifications) {       $log.debug('ProductDetailController >> this=%O, productDetail=%O,'+                  'productVersions=%O', this, productDetail, productVersions);       var that = this;
, async.apply(commonUtilities.prepareDb, benchDb), function (cb) { d.loadDatabase(cb); }, async.apply(commonUtilities.insertDocs, d, n, profiler)
var destination = {};  for (var property in source)   if (source.hasOwnProperty(property))     destination[property] = source[property];  return destination;
export default function(array, f) {   var v = variance(array, f);   return v? Math.sqrt(v) : v;
getClassName: function() {       return "R.debug.ConsoleRef";    }
}).catch( function(error) {         that.showErrorMessage("Error loading data. " +error);         console.error(error);
this.table = table;         var name;
function compileModes() {     for (var i in LANGUAGES) {       if (!LANGUAGES.hasOwnProperty(i))         continue;       var language = LANGUAGES[i];
} function LinkTree(doc, treeElement) {     this.doc = doc;     this.treeElement = treeElement;
if (!this.container) {             throw new Error('Toggleable container with id "' + ContainerId + '" not found');         }
this.sessionId = sessionId;   for (prop in properties) {     if (properties.hasOwnProperty(prop)) {       this[prop] = properties[prop];     }
[ targets.show, targets.hide, targets.tooltip, targets.container, targets.content, targets.window ],      function(){ return this!== FALSE; }     )
server.decorate('server','setupViews', function (path, engines) {     this.views({       path: path,       isCached: config.get('optimize.viewCaching'),       engines: _.assign({ jade: require('jade') }, engines || {})
var c, parts, part, p, fullName;    for ( var i = 0; i < list.length; i ++ ) {     c = list[i];     if ( c.type =='script' ) {      continue;
ref: function (x, y) {       return this.attr('refX', x).attr('refY', y)
CommonViewFunction.saveTermToAsset({                             termName: this.modal.find('.taxonomyTree li.active a').data('name').split("`").join(""),                             guid: this.guid
{       throw new Error("QR Error: ReedSolomonException Bad error location");      }
this.updateFastColorPickMenu();     this.setUiColor(this.favoriteColors[0].color);   } else {
mocha.accept = -1;  mocha.nfa_set = [];  mocha.done = false;
{   this.config = Object.assign(    {scale: 1.15, duration: 75, revertOnDispose: true},
var index;      for (var i = 0; i < data.length; i++) {          if (data[i].ts <946681200000) data[i].ts *= 1000;
try {       await closeStream(this.stream);     } finally {
for (var dep in scope.dependencies) {                         if (scope.dependencies.hasOwnProperty(dep)) {                             dep_name = dep;                             dep_src = scope.dependencies[dep];
if (Meteor.users.find().count() === 0) {         var userId = null;
default:         throw new Error("Invalid argument for node-brackets module initialization.");     }
function getGridFragment(callback) {     if (!this.world ||!this.gridSize) {         callback(false);
}; Dword.prototype.emit = function(...args) {     this._Emitter.emit(...args);     return this;
this.getKeyValueView("From", "from_date", "date"),    this.getKeyValueView("To", "to_date", "date"),    this.getEditableKeyValueView("Payment method", "payment_method", Balanced.ChangeFundingSourceModalView, "change-funding-source-btn")   ];
if (_byte == undefined || _byte == null) {         throw new Error("Missing the required parameter '_byte' when calling testEndpointParameters");       }
$('#channels a.server').live('click', function(event){      self.focusOnServer($(this));     });
})(typeof(window)!== 'undefined'? window : global);
position: 'absolute',               transform: [
const logger = require('./logger') function separateEnvModule() {   const { server, client,...env } = this.nuxt.options.env
editIntegration(integrationID) {         return this.shard.client.editGuildIntegration.apply(this.shard.client, this.id, integrationID);     }
function toRegex(...args) {   var str = fill(...args);   return new RegExp('^(' + str + ')$');
vector: function (x, y) {                            throw new Error("internal error, can't evaluate matrix/vector");                       },
errorCount+=ec;       console.log("found "+errorCount+" errors in child "+child.id+" of "+that.id);     }else{
}   table.render();
_.each(this.getReverseRelations(), (relation) => {    relation.addRelated(this.instance, options);   });
test.done();         };
.bind('keydown', function( event ) {     var index;     if ( self.options.disabled ) {
onBroadcast (callback) {     throw new Error('onBroadcast Not Yet Implemented', 'AbstractAdapter.js');   }
args.push(raw);                     self.emit(...args);                 } else {
var store = this       this.requestTransaction(function () {         varexeNow = store.listenersByIdExecuteNow
if(!this.queryModel.get('queryText') || isEmpty(fieldNames)) {                     this.model.set('processing', false);
var path = require('path')  , hotplate = require('hotplate')
Base.call(this, {});             this.initialize.call(this,...arguments);         },
var result = {};             for (var key in obj) {                 if (obj.hasOwnProperty(key)) {                     result[key] = deepWalk(obj[key]);                 }
module.exports = ModelBaseClass;
this.events.addEventType("tileloaded");         this.grid = [];     },
this.$from.animationComplete($.proxy(function() {      this.doneOut( screenHeight, reverseClass, none );     }, this));
static createError (name) {     return SuperError.subclass(name)   }
{      options.current.extraParams = eval('(' + $this.parent().data('id') + ')');     }
this.sections.each(function(section){    if (section.position == 'footer') this.hasFooter = true;    if (section.position == 'headertool') this.options.hasHeaderTool = true;   }, this);
})(typeof(window)!== 'undefined'? window : global);
if (this.active) {             for(var i in this.handlers) {                 if (this.handlers.hasOwnProperty(i)) {                     this.handlers[i].deactivate();                 }
answer.error = err;             this.eventEmitter.emit("error",asked,answer);         });
};   Neatline.commands.setHandler(Records.ID+':display', display); });
let last;     for (let i = 0; i < keys.length; i++) {       last = get(keys[i]);
, Component = require('node-xmpp-component')
CrawlGraph.prototype.getAllCrawlers = function () {         var c = [];         for(var key in this.allCrawlers) {             c.push(this.allCrawlers[key]);
groups = [];            for(let i = 0; i < user['groups'].length; i++) {             var g = user['groups'][i];             var gr = yield userManager.getGroup(g);
}     }, _callee5);   }));
.get('/log/(*)', logAPI.get) const app = Toa(function *() {   var path = this.path
if (!doc.exists) {             throw new Error('Document does not exist!');           }
pulse.Metric = function (name, aggregate, rate, groupBy) {  this.tags = {};  this.name = name;
it('should clear suggestions', function() {       this.source.andReturn(mockResults);       this.dataset.update('woah');
$('#actions input').each(function(i){       if ($(this).is(':checked') && $(this).val()!= "") {         actions[i] = $(this).val();
}     }, { engine: engineMock });     this.tooltipManager.start(this.layerView);
var sendOpts = config.app.env === 'production'? {root: 'client', maxage: config.app.cacheTime} : {root: 'client'};   app.use(async function (next) {
this.editMode = false;     $attrs.$observe('disabled', function (isDisabled) {
})     var test1 = thisFuncs instanceof Library     var test2 = thisFuncs.printf instanceof Function     expect(test1).to.be(true)     expect(test2).to.be(true)   })
throw new Error("Illegal state: unexpected event type [" + et + "].");   }
} else {           for (param in userAccounts) {             if (userAccounts.hasAccount) {               hasAccount = true;               if (param in svcOptions) {
var match = cache.search(type,+shard,+id);             if (match) result.push(...match);         }
removeKeys: function(keys) {     _.each(keys, (key) => {       if (this.get(key)) {         this.get(key).remove();
.bind( "blur.button", function() {     $button.removeClass( focusClass );    });
}     text = text + elem.text();     text = text.toLowerCase();
function FlowLayoutController() {         BaseLayoutController.apply(this, arguments);
, $ = require('jquery')  , moment = require('moment'); module.exports = AdminEventEditFormFeedController;
Object.prototype.indexOf = function(key) {     if(key in this) { return 0; } else { return -1; }   };   String.prototype.  should    = nativeShould;
return gameGroup.addPlayer(player);   };
this.favoriteColors = JSON.parse(colors);     this.setUiColor(rgbaToHex(this.favoriteColors[0].color));   } else {
} else {     throw new Error('Unable to create route instance: routeClass or viewClass must be defined')   }
.on('change.dirty', function () {           var el = input,             field = input.closest('.field'),
selectionUpdated() {     const selection = this.get('_selection');     if(isNone(selection)) {
, filesize = require('filesize')  , docker = new Docker({ socketPath: '/var/run/docker.sock'})  , exec = require('child_process').exec
requestToSave = function(request, cb){       var snapshot, ref$, cs;       if (request.is('application/json')) {
change: function () {     this.set('value', this.$('option:selected').val());   },   initSelected: function () {
if (MaxSendRate <= 1 && process.env.NODE_ENV === "production") {                 throw new Error('You are currently in Sandbox Mode. Please contactAmazon to get this lifted.');             }
this._maxLength = 4;  this.shapes = createSizedArray(this._maxLength); };
function updateSampleKeys(featureList) {     const samples = new Set(this.sampleKeys);     for (let feature of featureList) {
History.pushQueue({
} else {         return false;       }
for (var i = 0; i < srcOutputLoc.length; i++) {         var srcOutputDir = path.resolve(apiOutputDir, srcOutputLoc[i]);
var tmpl = $('#job-template').html()    , from = activePage * perPage;
updateRepresentations = function(adaptation) {             var reps,                 manifest = manifestModel.getValue();
var chunks = getChunks(wordpos, nextcur);       for (var j = 0; j < chunks.length; j++) {         ret.push([word].concat(chunks[j]));
this.classList.remove(...ALL_COLOR_CLASSES);
this._Width = 0.0;      this._Length = 0;  };
}       return this.base(arguments, type, listener, self, capture);     }
var feed = __dirname + '/feeds/complexNamespaceFeed.xml'    , meta = {}
}, promise );     } )
}; Connection.prototype.onclose = function (close) {     EventLogActions.add_event("WebSocket Connection closed."); };
} catch ( error ) {       throw 'Cannot setImageData() invalid or no mime';
exports.nextId_ = 1;
class LogView extends React.Component {   constructor(...args) {     super(...args);
vtext.update = function (textValue) {  this.el.textContent = String(textValue); }
insert_text = "{{ " + val + " }}";   tinyMCE.activeEditor.execCommand('mceInsertContent', false, insert_text); }
, Lexer = require ('./lexer')
module.exports = Cylon.Drivers.GPIO.MakeyButton;
alert(err.message)         dispatch(actions.txError(err))         return console.error(err.message)
for ( var i = 0; i < d.length; i++ ) {     old["padding" + d[i]] = 0;
['menuTool', 'picture', 'Basic tool' ],    [ 'disabledMenuTool', 'picture', 'Basic tool disabled', setDisabled ]   ],
else if (type.call(oldRoute) === STRING) {    var oldRoute = currentRoute;
, rewrites = [        { from:"/socket.io", to:'pages/index.html', before: function(req, res, cb) { console.log(req.connection.remoteAddress); cb() }}    , { from:"/socket.io
, MediaRow = require('../../../../lib/extension/relatedTables/mediaRow')     , RelatedTablesUtils = require('./relatedTablesUtils')
constructor: function() {             this.processes = [];             this.targets = [];         },
const svgSpinner = () => {   switch (this.props.size) {     case 'large':
} })(typeof jQuery!== 'undefined')? jQuery : null);
var ERR_cyCLE = 2; var CSnmpError = function(aMessage, aCode) {   this.message_ = aMessage;   this.code_ = aCode || ERR_OTHER;
LQ._invokeListeners(eventName, arguments);                                              } else {
, http = require('http')  , res = http.ServerResponse.prototype;
oldActiveControllers = Array.from(activeControllers.keys());   newActiveControllers = [];
this.plugin.sendTransfer = (transfer) => {           return Promise.resolve(null)         }
var argsLen = arguments.length;     var selector;     args = new Array(argsLen);     while (++argsIdx < argsLen) {
Agent.prototype.toString = function toString() {   var agent = this.toAgent();
var lines = this.code.split("\n");   for(var i = 0; i < lines.length; ++i)    lines[i] = lines[i].split("
it('stops eventPropagation', function (done) {   const naja = this.mockNaja();   new this.RedirectHandler(naja);
for(key in copy){         item = copy[key];
_schemas: {},   registerSchema(name, schema) {     if (this._schemas[name]) {       throw new Error(`Schema with name "${name}" already exists.`);
setToolbar: function(){    this.inherited("setToolbar", arguments);    var forRef = this.button;
it("should store data", () => {             this.propertyMetadata.schema.exclusiveMaximum.should.eq(10);         });     });
this.data = data;
, webui_https_certificate: null           , webui_listen: []
tr.setZoomAround(interpolate(startZoom, zoom, k), around);             this.fire('move').fire('zoom');
if(resource = bind.getChild("resource", 'urn:ietf:params:xml:ns:xmpp-bind')) {                     self.fullJid = that.bareJid + "/" + resource.getText();                 }
for (i = keys.length - 1; i >= 0; i--) {                 id = keys[i];                 model = this.editCollection.get(id);
if (parent_rows.some(function(parent_row){ return!parent_row.ball; }))       throw Error("some parents have no balls");      if (parent_rows.length > 0)
if (!(tx instanceof Transaction)) {             throw new Error('Can only inherit transactions');         }
async function waitForDomains (context, heroku) {   function someNull (domains) {
it('can handle MACSTRING in Central European encoding', function() {         var encoding = String('x-mac-ce');         var data = '42 6574 F574 92 70 7573';
if (!stat.isFile()) {                 throw(new Error("Source file not found: "+files[i]));             }
queue.forEach(function(func) {       if (func) func.call(self, err);     });     self.commit();
table.push(header)   table.push(...rows)   return table.toString()
CanvasControl.prototype.constructor = CanvasControl;
}      var objectSize = size(object.getBounds());     function scale(size, value) {
it('should allow arguments to be passed on initialization', function(done) {    suspend(function*(foo, resume) {     assert.strictEqual(foo, 'bar');
return handle.apply(undefined, [trackingInfo, options].concat(toDecorate));   }
$("button[value='Lodge Request']").html("Lodge Request").attr("class", "button").css("font-weight", "bold").on('click', function() {    var requestBody = {};    var time = Date.now();
window.sim = sim; function createCube(device) {   const geometry = new THREE.BoxGeometry(10, 10, 50);
async once() {     var now = Date.now();
} var debugFlag = argv['debug'] == true;
} function Controller ($state) {     let vm = this;     vm.dismiss = dismiss.bind(vm, $state);
var http = require('http') var request = require('../index') var tape = require('tape') var validUrl
} catch(e) {                     throw new Error("Unable to run getValueSync because allowSync was set back to false by when get method executed synchronously within a selector function.");                 }
(function(){    if ( document.readyState!= "loaded" && document.readyState!= "complete" ) {     setTimeout( checkIsReady, 0 );     return;
map: function map() {     return this.interpolate(...arguments);   }
function Runic(lines = [],templater = null) {
const workshopper = require('../') const path = require('path') workshopper({
module.exports = Cylon.Drivers.GPIO.MakeyButton;
var data = jwtutil.decode(req.query.jwt, options.secret)       var redir = urlutil.removeParam(req.url, 'jwt')       if (data) {
var proxyquire =  require('proxyquireify')(require)  , stats      =  require('./fixtures/stats')
DAO.prototype.equalsOneOf = function(others) {     var result = false;     others.forEach(function(other) { result = result || self.equals(other) })
'stream error',         new Date().toDateString()
.val();      var projects = [];      $('input:checkbox[name="project"]:checked').each(function() {
var ROOT = __dirname + '/dump';   describe('init', function() {
for (var i = 0, len = args.length; i < len; i++) {       for (var k in args[i]) {         if (args[i].hasOwnProperty(k)) {           dest[k] = args[i][k];         }
if (data) {   if (typeof data[method] == 'function')    data[method].apply(this, Array.prototype.slice.call(arguments, 1));
var virtualList = ctrls[1];
this.AlertService = $injector.get('AlertService');     this.ClusterService = $injector.get('ClusterService');
var config = byPath[file];     var transformed = config? wrap(content, config) : content;
if (fallbackChain) {         this.freeze(fallbackChain)       }
return (lefts? lefts.length : 0) -         (rights? rights.length : 0);   },
let fnString = fn.toString();     fnString = `(${fnString}).apply(window, ` +               JSON.stringify(args) + ')';     this.sendToWindow(windowID, 'execute', {
case 'LINK':       return resolve(elm.attr('href'));     case 'OBJECT':
if (typeof options!== 'object') {             throw new Error('AV.realtime need a argument at least.');         }
var matrix = renderer.getZoomMatrix(scale, origin);         renderer.transform(matrix);         Z.DomUtil.preventDefault(event);
, viewportH = makeViewportGetter('height', 'innerHeight', 'clientHeight')      , xports = {};
case 'ReferenceError':                 $consoler.warn(e.message + __$expression__)                 break
clearInterval(interval);   update(selectedIndex); }
calculateATR(rawData.D, period);  var brickSize = function (d) { return d["atr" + period]};  var renkoData = [];  var index = 0, prevBrickClose = rawData.D[index].open, prevBrickOpen = rawData.D[index].open;
var http = require('http') var request = require('../index') var tape = require('tape') var port1
Vue.filter('date', function(date, format) {         return this.$date(date, evalExp(format));     });
}         callback && callback();     });
this.__scheme = null;     return Process.prototype.destroy.call(this, scheme);   };
return function (_x6) {                     return _ref4.apply(this, arguments);                 };
div.innerHTML = this.elements[index].value;         div.setAttribute('data-textarea', id);
, request = require('supertest')
if (!modelIsAlreadyInDataTable) {                 var model = {};                 model.id = parsedObject.offering_id;
clone: function () {       return new SVG.Matrix(this)
function materialize_String(obj, args) {    return args && String(args[0]);   }
return (function fn(node_data,node_descriptor){     var xml = "";     var type = typeof node_data;     if(node_data instanceof Array) {
const tab = "  ";   for (let dep in libs) {     if (!libs.hasOwnProperty(dep)) continue;     const { props, ident } = libs[dep];
var idx_selected = indices.filter(function(index) {             var elem = this.model.mark_data[index];                 return (elem[0] >= min && elem[0] <= max);
if (this.blocks!== null) {             for (let blockIndex in this.blocks) {                 if (this.blocks.hasOwnProperty(blockIndex)) {                     this.blocks[blockIndex].destroy()                 }
'use strict';
const startTime = Date.now();       promiseFunc(...args)      .then(returnValue => {
}     throw new Error(`Unsupported logic operation: ${obj.operator}`);
let readyTimeOut = null; var pageLoaded = true; Recorder.addEventHandler("checkPageLoaded", "readystatechange", function(event) {   if (window.document.readyState === "loading") {
}, this);                 this.__workspaceMB.setMenu(menu);
scheduleAfterRender: function () {         scheduleOnce('afterRender', this, this.afterRenderEvent);     },
showError: function() {         var $error = $(this.refs.error.getDOMNode());         if (!$error.is(":visible")) {
module.exports = Cylon.Drivers.GPIO.MakeyButton;
function echoSingle(msg) {                 return msg;             }
chunkTemplate.plugin("render", function(modules, chunk) {    var jsonpFunction = this.outputOptions.jsonpFunction || Template.toIdentifier("webpackJsonp");    var source = new ConcatSource();
} else {     throw new ReferenceError('A container must be provided.');    }
uploadcare.jQuery(uploadcare).on('log.uploadcare', function(e, args){              });
target instanceof State ||                     ( target = target? origin.query( target ) : root );                 if (!target ||
executeFromRest.call(kuzzle, params, request, response);     });     api.post('/:collection', function (request, response) {
var loadInitalAnalyses = function () {       var analyses = self.seedAnalyses(state.tokens);
, DocumentObjectId = mongoose.Types.ObjectId  , MongooseArray = mongoose.Types.Array;
export default curry3(function mergeWith(cb, result) {   var rightIndex = 2   while (rightIndex < arguments.length) {     result = _merge(result, arguments[rightIndex++], cb)   }
"use strict";
constructor: function ColumnModel(...args) {             ColumnModel.__super__.constructor.apply(this, args);         }
screwunit: function(params) {         params = params? params : {};
util.log('GetTopic List for: '+this.id);     clients[this.id].socket.emit('topic', 'xxx:yyy');     getSomeTopics(clients[this.id].socket); }
var me = this;             return this.inherited(arguments, [id].then(function (item) {                 if (Array.isArray(item)) {
const ValidatingCreateMixin = Mixin.create({   create(...args) {     const instance = this._super(...args);
await this.crowdsale.sendTransaction({value: ether(1), from: investor, gasPrice: 0});     await increaseTime(moment.duration(1.1, 'week'));
if (isPlainObj(key)) {             for (var k in key) {                if ({}.hasOwnProperty.call(key, k))                 this.set(k, key[k]);             }
'use strict';
if (t.merged) {     throw new Error('!!!!')   }
function updateLocation(view, destination, skipPush) {         if (typeof destination.length!== "number") throw new Error("Destination needs to be string or array");
var htmlReason = $this.find('.reason-content');                 htmlReason.find('select, input, textarea').each(function () {
['ii'].forEach(function(sig) {          tables[sig] = zeros(t.nextIndex);        });
describe("concat", function() {   it("should concat 2 ports", async function() {     let result = [];
if(map) {    for(var key in map.properties) {     if(map.properties.hasOwnProperty(key)) {      var prop = map.properties[key],      propName = (prop.map)? prop.map : 'p-' + key,
if (this.options == null) {             this.options = {};         }
}  , is_safari = /Version\/[\d.]+.*Safari/.test(navigator.userAgent)  , req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem  , throw_outside = function(ex) {
this.connect = connect;     function connect(options) {
$form.closest('.accordion-child').next('.accordion-child').find('input:visible:first').focus();       }
}, this);     p.centroid.x = this._roundNumber(p.centroid.x, 2);     p.centroid.y = this._roundNumber(p.centroid.y, 2);
if (__indexOf.call(invalidDirs, dir) >= 0) {       throw new Error("Load path not found for " + filename);     }     id = filename.replace("" + dir + sep, '');
import ns from 'ima/namespace';
ProxyClass.prototype[prop] = function() {         return promisifyCursorRequest(this[targetProp][prop]);       };
}   trigger(...args) {     this._array.forEach(widget => widget.trigger(...args));     return this;
ret = [];             for(key in val){                 if (val.hasOwnProperty(key)) {                     ret.push( val[key] );                 }
'weekday' : $(this).index() + self.options.startIn,         'weekdayname' : self.options.weeks[self.options.startIn],         'data' : data
function checkOneFile(i, callback) {
if(opts.noRecord) {           throw new Error('RecordING_DISABLED');         } else {
const createJsFileIfNotExist = co.wrap(function *(opts, playground) {   return yield createAssetFileIfNotExist(opts, playground, 'js', co.wrap(function (ext) {     return 'console.log(\'Hello\')';
, serveStatic = require('serve-static')  , send = require('connect-send-json')
"use strict";
process = null;                 callback();             });
if (includes(methods, 'chain')) {           throw new Error('Chaining syntax is not yet supported');         }
} else {     throw new Error("Parent node of dropdown menu not found");    }
for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {     tail = re.slice(pl.reStart + pl.open.length)     this.debug('setting tail', re, pl)
})    .catch(this.base._handleError.bind(this.base, req, res, rdrUrl)); };
className: className,           disableTouchRipple: true,           disableFocusRipple: true,
thisZoo                        .children('.zoo-img')
let customMixins = {};   if (this.context && this.context.mixins) {     customMixins = this.context.mixins;
return function (name, oldValue, newValue) {       var info = data(this);       var attributeToPropertyMap = info.attributeToPropertyMap || {};
this._prepareOn(name, handler, context);     Events.on.call(this, name, handler, context);     return this;
if (cb) {                         cb(err, res);                     }                 });
enabled: true,         displayname: this.socialUserInfo.screen_name,
$(this).removeClass('on');   $(this).siblings(".current-menu-item").css("background-color","#f00").children().css("color","#fff"); };
export const downloadImage = (url) => dispatch => {     if (!url) throw new Error("Cannot have null url");     dispatch({
var prefix = '# Do not edit. File was generated by node-gyp\'s "configure" step'     var json = JSON.stringify(config, boolsToString, 2)     log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)
var self = this;     self.loadListeners = [];
} else {             throw Error('Sketch File Not Found:'+ file);         }
var self = this;         this.backend.stub            .post('/')
if(err){                 callback(err);             }
if (input.view && input.view.$input) {             that.$inputList.append( input.view.$input );           }
if (tapable.hooks) {     const hook = tapable.hooks[name];     return hook.call(...args);   }
for (var i = 1; i < arguments.length - 2; i++) {               match[i] =Undefined;               }
if (errors) {                 for (var i = 0; i < errors.length; i++) {                     toastr.warning(errors[i], "Não foi possível prosseguir devido a um erro.");                 }
batch = paths.slice(complete, complete + concurrency);     files.push(...batch.map(read));     complete += concurrency;
if ( $container.length === 0 ) {             throw new Error('No container for ProductMap:'+ containerId);         }
_setView: function () {     if (this.map.hasChanged('zoom') || this.map.hasChanged('center')) {       this._leafletMap.flyTo(this.map.get('center'), this.map.get('zoom') || 0);
onValueChange: this.setValue,           onPanelChange: this.handlePanelChange         })
it.each(_.range(0, dispatches), "dispatch %s", ['element'], function (element, next) {             Augur.dispatch({
function ZscElement(nm, abi, adr) {     this.name = nm;     this.parameNos = 0;
, logErrorFile = path.join(logDir, appName + '-errors.json')  , logLevel = settings.logs.level || 'debug';
function MeasureArea(format, gettextCatalog, options = ({})) {   ngeoInteractionMeasure.call(this,  (options));   if (options.continueMsg!== undefined) {
default:         throw new Error("Unknown brush predicate " + __.brushPredicate);       }
document.body.style.cursor = 'pointer';   layer.draw();  };
var size = this.headerLength.map(function(length){                 return _outputSize.call(this, length);             }.bind(this));             var modifier = new Modifier({size : size});
var log = logger.createLogger('storage:s3')   var app = express()   var server = http.createServer(app)
var util = require('util')  , cloneDeep = require('./util/clone')  , has = require('./util/has')  , Topo = require('./util/topo')  , c = require('case');
}; })('undefined'!== typeof window? window : null);
if (arguments.length!= param_length) {                 throw new Error("expected " + param_length + " arguments, got "                     + arguments.length + " instead.");             }
return compute.sequence(         func.createConstructor('String', 1, string_ref.StringPrototype, string_ref.String.setValue(new String())),
var samplers = {};     for(var i = 0; i < this.properties.length; ++i)   {
this.metadataRaw = metadataRaw;    this.streamMetadataRaw = streamMetadataRaw;    this.linkMetadataRaw = linkMetadataRaw;    this.partition = partition;
function ParticleEmitter() {                     this.particlesPool = [];                     this.activeParticles = [];                     this.container = new createjs.Container();
for (device in state) {                 if (state.hasOwnProperty(device)) {                     SB.spec.updateTemplate(state[device]);                 }
);    return fn(...params);   };
if (position + 8 > byteArray.length) {       throw new Error('bigEndianByteArrayParser.readDouble: attempt to read past end of buffer');     }
, changed   = require('gulp-changed')
return (   this.ua.satisfies() &&   this.ua.family in baseLineVersions &&
fill_table(datasets, ["date_created"], table);             table.children("tbody").find("tr").on("click", function () { select ($(this)); });
args = args || [];         if (!hop.call(arguments, 'length')) {             throw new Error('invalid `sx.parent` call, should receive arguments as array');
expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty({foo: 1})).toBe(false);       const array = new Array();       array.push('1');
var matcha = require('matcha'),     Seed = require('../lib/seed');
: parentSize;                 },                 [object, this.size]
this.doc = undefined;
console.error('An error occurred compiling the shaders:'+ gl.getShaderInfoLog(vertShader));     throw new Error('Error compiling vertex shader');    }
if (!prototypeOfArray.indexOf) {     prototypeOfArray.indexOf = function indexOf(sought  ) {         if (this === void 0 || this === null)
var test = require('../../../test')   require.async('./a', function(a) {
jQuery.readyList.push( function() { return fn(); } );
var env = require('env-variable')  , Stream = require('stream')
if (argument) {         for (var key in argument) {           if (argument.hasOwnProperty(key)) {             newOptions[key] = argument[key];           }
Blockly.FieldDropdown.validateOptions_ = function(options) {   if (!goog.isArray(options)) {     throw Error('FieldDropdown options must be an array.');   }
input.addEventListener("blur", function() {           focus(this);
var keys = [],             bindings = Bindings(this);         for (var k in bindings) {             if (bindings.hasOwnProperty(k)) {                 this.unbind(k);             }
try {         return [null, util.immutable(eval('with($scope){(%s)}'.replace('%s', r))]     } catch (e) {
} })(typeof(window)!== 'undefined'? window : global);
.then(metadata => {           Object.keys(metadata).forEach(key => {             this.props.owner().addMetadata(key, metadata[key]);
}).item(0).data('index');         }         if (!index ||!that.tabs[index]) {             index = 0;         }
, { carrier : 'UPS', trackingNumber : '123453423453' } , function (err, xml) {   console.log(xml);  }
var reThis = /\bthis\b/;
'use strict' var request = require('../index') var tape = require('tape') var local = 'http:
var sylvester = require('sylvester')  , _         = require('underscore');
{             var link = $(this);             link.dblclick(function()             {
describe('the "___" should be displayed', function() {
});       openRequest.onsuccess = function (event) { this.log('Success handler for open request called.');         this.db = event.target.result;
var correct = loadable instanceof this.vie.Loadable;         if (!correct) {throw new Error("Invalid Loadable passed");}
return first(function() {         if (this.classList) return this.classList.contains(name);         re.lastIndex = 0;
});       return Falcon.__binding__original_component__['init'].call(this, config);     }
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "ST", Array.slice(arguments));   },
function Socket(){   this.name = NAME;   this.bytes = 20;
var self = this,    args = arguments.length === 1? [] : _argToArr.apply(1, arguments);   _later(function () {
Template.apply(this, arguments);   Composer.call(this,'verb'); }
if(!window.SyntaxHighlighter){var SyntaxHighlighter=function(){var a={defaults:{"class-name":"","first-line":1,highlight:null,"smart-tabs":true,"tab-size":4,ruler:false,gutter:true,toolbar:true,collapse:false,"auto-links":true,light:false,"wrap-lines":true},config:{clipboardSwf:null,toolbarItemWidth:16,toolbarItemHeight:16,bloggerMode:false,stripBrs:false,tagName:"pre",strings:{expandSource:"expand source",viewSource:"view source",copyToClipboard:"copy to clipboard",copyToClipboardConfirmation:"The code is in your clipboard now",print:"print",help:"?",alert:"SyntaxHighlighter\n\n",noBrush:"Can't find brush for: ",brushNotHtmlScript:"Brush wasn't configured for html-script option: ",aboutDialog:'<!DOCTYPE html PUBLIC "-
} }(this, function(ApiClient) {   'use strict';
default:                     var val = this.value();      return '$'+Numbas.jme.display.texify(val);     }
this.setPointsLengths = [];
if(select_map){         for(var i = 0; i < data.length; i++){           var r = {};
valid(value) {       return value!== null && value!== undefined && String(value).length > 0;     },
if (!((callbackInterface!= null) && callbackInterface)) {                 throw new Error("Internal error: unable to resolve observer ID to obtain callback interface.");               }
}         console.log(...args);     }
NIN.THREENode = THREENode; })(this);
class MesosLogStore extends BaseStore {   constructor(...args) {     super(...args);     this.logs = {};
constructor(width, height, world, color = null) {     super(width, height);
dispatcher.trigger(dispatcher.CLEAR_TODOS);     };   }
module.exports = Cylon.Drivers.GPIO.MakeyButton;
} else if (trigger.attr('href')) {                     that.route = trigger.attr('href');                 }
]).forEach(function(event) {     session.on(event, function(error) {       router.send(event, error);     });
var model = params.db.models.AccountScheduleCalendar;   model.find({}).sort('from').exec(function(err, acEntries) {    for(var i=0; i < acEntries.length; i++) {
} else {       throw new Error("wat?!");     }
url,         aborted: false
var pkg = require('./package.json')    , webpack = require('webpack')
onKeyError(this._ss)       ).subscribe(evt => this.trigger(evt.type, evt));     },
this.model.reportCohortDefinitionId.subscribe(function (d) {     if (that.showSelectionArea) {      this.cohortCaption(pageModel.cohortDefinitions()
onSortChange: function() {             Garnish.requestAnimationFrame(function() {                 this.trigger('sortChange');                 this.settings.onSortChange();
NOVAE.evaluateFormula = function(formula, index) {     var interpret = ENGEL.interpretTokens(formula.tokens.slice(0));
var model = require('../../index')  , mongo  , operation = require('../../query/operation')
var args = Constructor.setup.apply(Constructor, [_super_class].concat(Array.isArray(arguments)) );
{         var matched = [],             i = 0;
ResourceDeployer.prototype._updateStack = function() {   var _this = this;
done(false);         return cb(err);       }
} else {                 videoElement.addEventListener("loadedmetadata", doSetKeys);             }
, d         = require('es5-ext/lib/Object/descriptor')  , isEmpty   = require('es5-ext/lib/Object/is-empty')  , contains  = require('es5-ext/lib/String/prototype/contains')
if (doAction!= 'null' && doAction!= '') {
this._fireQueuedEvents();    throw new Error('Mapstraction.getPixelRatio is not currently supported by provider'+ this.api);   },
realm.write(function() {             realm.list = realm.create('TodoList', ['List', []]);           });
var qty = newVal;             var cost = parseFloat($this.attr('data-cost'));             var rowid = $(this).attr('data-rowid');             if(qty > 0){
function meta_objs() {  const {CatManager, InfoRegManager, CatObj} = this.constructor.classes;  class MetaObjManager extends CatManager {
module.exports = version var semver = require("semver")  , path = require("path")
, feature = require(BASE_PATH + 'feature')   , logging = require(BASE_PATH + 'logging')
if (iemobile || iphone) {                                     var that = this;                                     return setTimeout(function() {
case 5:  return t[m](a[0], a[1], a[2], a[3], a[4]);     default: return t[m](a[0], a[1], a[2], a[3], a[4]);   }
Y.fire("gameJoined", {                             game: this.getTargetGame()                         });
}       postMessage(target, 'getHeight');     });
if (! condition.name ||! condition.operator ||! condition.value ) {    throw new ve.Error('missing required parameter to build a condition' )   }
, promise = new Promise(this.collection, operation)      , original_cb = args[args.length - 1];
if (filter === 'false') {                      isShow = that.$grid.find('.instance-adapter[data-instance-id="' + that.list[i] + '"]').find('instance-led').hasClass('led-green')? 'hide' :'show';                  }
namespaceMoveContext(newContext, removeFromOld) {         return Neatness.moveContext(newContext, removeFromOld);     },
this.hightDirty = false;     this.lockedResources = []; }
class ABI {   static toString(...args) {     const instance = new this();     return instance.toString.apply(instance, args);   }
, url = require('url') , mime = require('mime')
var gamelogs = [];  for(var i = 0; i < logs.length; i++) {   var log = logs[i];   gamelogs.push({
this.description = description || "";             this.required = [];             this.enum = null;             this.type = type || "";
var aEditors = [];     for (var i=0; i<aEditorIds.length; i++)         aEditors.push(tinymce.get(aEditorIds[i]));
if (conf.bLight &&!lightProps)   throw Error("no parent props for light");
if (this.depth2)   this._link2 = linkDataSource('_link1', this.ds2, this.ds1, subscriptionPath, this.pathTranslation2, this.pathTranslation1);  this.isOn = true;
var setup = require("../../common/setup-base")  , desired = require("./desired"); describe("apidemos - push & pull file -", function () {
var rowIds = $(this).sortable('toArray');     var newIdSequence = [];
})().caught(noop);         return onUnhandledFail(testFunction);     });
for (var key in compiledPartials) {         if (compiledPartials.hasOwnProperty(key)) {
var fail = function fail(location, msg) {    var err = new Error(msg);    err.name = 'AssertError';
}    this.own(this.binder);    forEach.call(this.querySelectorAll("[data-attach-point]"), function (elem) {
this.data = {};   this.PDFJS.on("pdfjs_parseDataReady", _onPDFJSParseDataReady.bind(this));
me._proxy = proxy   ; [ "error"    , "close"
}       for (var i=0; i<request.result.length; i++) {         var contactToRender = request.result[i];
'use strict';
if (this.axisMeshes) {             _.each(this.axisMeshes, (mesh) => {                 this.scene.remove(mesh);             });         }
}),   _directUpload(blob, url) {     debug(`ActiveStorage: _directUpload ${blob} to url ${url}`)
} else {                 throw new Error(`data type with code: ${$stateParams.code} not found`);             }
appendChild: function() {     throw new Error("You can't use appendChild outside of the rendering process");   },
decimal: function(field, value, params) {       var regex = /^\-?[0-9]*\.?[0-9]+$/;       return regex.test(value);
var bookCheckBoxes = document.querySelectorAll(".bookCheckout");             for (var checkIndex = 0; checkIndex < bookCheckBoxes.length; checkIndex++) {                 bookCheckBoxes[checkIndex].onclick = toggleCheckout;
it('testElementIdClear invalid element ID', function () {     return Globals.protocolTest({       commandName: 'elementIdClear',
log(...args) {     return console.log(...args);   },
Template.sidebarItem.onCreated(function() { });
, parse = require('url').parse  , utils = require('./utils');
if ( abs(p) < abs(pLast) ) converging = true;       if ( i > terms ) throw Error( 'Not converging after'+ terms +'terms' );
return (dispatch) => {     dispatch(actions.showLoadingIndication())     _accountManager.recoverFromSeed(password, seed, (err, metamaskState) => {
function insert(key, value, Node) {   let root = this.root;
.on('focus', function() {
} else {     that.listeners[type].push(fn)   }
if (options.events) {         for (var e = 0; e < options.events.length; e++) {           var keys = e.match(/\S+/g);
var slice = Array.prototype.slice
takeSnapshot: function(name, control) {     var snapshot = binding.heap.takeSnapshot.call(null, name, control);     snapshot.__proto__ =Snapshot.prototype;
} else {       throw new Error('未获取到图表实例元素');     }
before(function () {     Globals.protocolBefore();   });
if(notif == null || notif == undefined) {                 notif = {};             }
var output = [];           for(var i = 0; i < funcHandlers.length; i++) {             output[i] = funcHandlers[i](fqn, value);
});         for (var _i4 = 0; _i4 < holes.length; _i4++) {             pathHelper.displaceColinearEdges(outerShape.path, holes[_i4].path);
var trackPlugins = paella.editor.pluginManager.trackPlugins;   for (var i=0; i<trackPlugins.length; i++) {    var plugin = trackPlugins[i];    var label = plugin.getTrackName();
, setGitRev = gruntHelpers.setGitRev  , getGitRev = gruntHelpers.getGitRev;
{   for(var i = 0, l = this.properties.length; i < l; ++i)   {
describe('94.binding_procedureBindInout.js', function() {   var connection = null;
if (inst) {         throw new Error('player has already joined'+ inst.gameID);       }
afterEach(stopTracking);   it('should send events on outbound linkclick', function() {     var hitData = browser        .execute(utilities.stopLinkClickEvents)
return this._head!= null? this._head : String ( "" );  }
export async function handleError(ctx, next) {   try {
var tmpTranslate = [1, 0, 0, 1, -topLeft[0], -topLeft[1]];       graphics.transform(tmpTranslate[0], tmpTranslate[1], tmpTranslate[2]);       this.clipBbox(graphics, bbox, x0, y0, x1, y1);
this.label.refresh(display)   }  MarkerBBox () {     return this.markerSvg.node().getBBox()
nextItemIndex = this.indexOf(this.findWhere({ active: true })) + 1;                     if (nextItemIndex <= 0) throw new Error("Failed to find nextItemIndex");                 }
var adminRole = {};       for (var role in access.roles) {         if (access.roles.hasOwnProperty(roleName)) {           var role = access.roles[roleName];           if (role.default) {
constructor(value) {     return isIterable(value)? value : Seq(value);   }
this.mywords = this.getMnemonic();   };
module.exports = Cylon.Drivers.GPIO.MakeyButton;
var resolve = function() {             var ttf = this.ttf;
}     function setOptions(options){         this.options = $.Object.merge.apply(this.options || {}, options),key,match         if (typeof this.bind == "function") {
var _ = require('lodash');
var id;         assert("context is already connected", this.client.connected);         id = this.client.subscribe(destination, function(frame) {           var envelope;
let self = this;     chrome.devtools.network.onNavigated.addListener(function() {
if (!fs.existsSync(path.join(project, 'AndroidManifest.xml'))) {         throw new Error('The provided path is not an Android project.');     }
function ICMPV6() {   this.name = NAME;   this.bytes = 4;
}     unbind(element, "blur", blur);    });
this.metabolites = utils.clone(model_data.metabolites);  add_bigg_id_attribute(this.reactions);
console.log("Dash channel opened.");                 this.broadcast({                    event: "ready"
scrollTo(( eases[index] * targetY * dirY) + offsetY);       }
var utils = require('../../utils');
},   file: function(filename) {     return Package._getByPath(resolve(resolve(filename)));   },
if (typeof command!=='string') {     this.consoleWarn('You didn\'t mention any particular name, please configure --project <your_project_name> in your command');     return;
forEach(children, function (child) {                   set(child, undefined, get(that, definition.idAttribute))                 })
module.exports = Muxer;
import U from "src/util/util.js";
}       this.animate(newFollow(this.insertedSprites[0], { source: move }));     } else {
var limit = function (...limitRange) {                 if (limitRange.length === 1) {
});         it("should be node::Buffer io for double rank data", function(done) {             const buffer=Buffer.alloc(6*8, "binary");
,fs = require('fs') var local = {  siteName: 'jadepress'
_VisualTreeWalker.prototype = new RefObject;  _VisualTreeWalker.prototype.constructor = _VisualTreeWalker;
}                 that.emit(that.v[1] < 15? "selectable.init" : "init");             }, 10);
hmac = this._digest(this.secret, ct.ct, this.hashing, this.encodeas)     if (hmac!= ct.hmac) {       throw new Error('Encrypted session was tampered with!')     }
this.classList.remove(...ALL_VARIANT_CLASSES);
var model = observer[0]       var eventMap = observer[1]       for (var event in eventMap){
var pathParams = {};   for(var key in pathParamData.properties) {     if (!pathParamData.properties.hasOwnProperty(key)) continue;     var prop = pathParamData.properties[key];
"use strict"; var React = require("react"),  d3 = require("d3"),  PureRenderMixin = require("../mixin/restock-pure-render-mixin");
};      }(jQuery, window, window.document));
} else {     throw new Error('Unknown shader type');   }
toSort.sort(sorter);     for(var j = 0; j < toSort.length; j++)      result += attrC14nText(toSort[j]);
var responsePipe = preFlow.ele('Response');   for (var i = 0; i < api['x-a127-services'].length; i++) {     var serviceItem = api['x-a127-services'][i];     if (serviceItem.provider === 'x-cors') {
module.exports = Cylon.Drivers.GPIO.MakeyButton;
return typeof name ==='string'       ? name === 'length'? this.length          : typeof proto[name] === 'undefined'? null : proto[name]       : typeof name!== 'number'? null
$.AdminLTE = {};
constructor: function DashboardItemsCollection(...args) {             DashboardItemsCollection.__super__.constructor.apply(this, args);         }
var cursor = namespace.listeners;     while (cursor!== null) {
p.foo = function (arg1, arg2) {      throw new Error(arg1 +'' + arg2);     };
deactivate: function () {             Util.deprecatedMethod.call(this, 'deactivate', 'destroy', arguments, 'v5.0.0');         },
} else {       $parent.data('minute', Number($parent.data('minute')) + 1)     }
else {     for(let wfStep in newAPIs[route].workflow) {      let hash1 = objecthash(oldAPIs[route].workflow[wfStep]);      let hash2 = objecthash(newAPIs[route].workflow[wfStep]);      if(hash1!== hash2) {
lowerRight = {x: undefined, y: undefined};    for(i = 0; i < this._shapes.length; i++) {     var bounds = this._shapes[i].getAbsBounds();
EventEmitter.prototype.emit = function(event,...args){     var callbacks = this.callbacks[event]      , len;
options.www.users = {     "abcd": "1234" }
$('#fullyBooked').modal('show')     $('#fullyBooked').on('hidden.bs.modal', () => {       this.props.onClose()     })
called = false;         fn(...args);       }, timeoutDuration);
levelClass: computed('block.meta.level', function() {          return this.get('styles')[`${this.get('levelClassPrefix')}-${this.getWithDefault('block.meta.level', 1)}`];   }),
get: d(function (key) {   var index = eIndexOf.call(this.__mapKeysData__, key);   if (index === -1) return;
var delete_user = {};     var b_view = getBackgroundView();     for (var i = 0; i < userList.length; i++) {         var user = userList[i];
initialize() {     if (options.disableDragAndDrop) {
db.collectionNames(function(err, names) {           var colItems = [];           res.write('<tr><td class="desc">collection</td><td class="content"><ul id="collection">');
try {     await func(...funcArgs);   } catch (err) {
let $this = this;         this.$el   = $(element).data(name);         this.$opts = $.extend(true, {}, this.props, options);         Object.keys(this.props).forEach(prop => {
} else {         throw new TypeError('Unable to fire event.  Neither createEventObject nor createEvent methods are available');       }
return next();             }, this.a);           }.bind(this),
function cutOff()  {   this.steps['fa0c']++;   this.writeTo(
socket.destroy();         return this.finalize(true);       }
if (!blob) {   throw new Error('Could not generate blob');  }
getClassName() {     return "R.debug.ConsoleRef";   }
return callback( ret.length?                         '<ul>' + ret.join('' ) + '</ul>' : '' );
t.ok(is.empty(''), 'empty string is empty');   t.ok(is.empty(Object('')), 'empty String object is empty');   t.ok(is.empty([]), 'empty array is empty');
var INDEX_OF_LAST_IMPORT_Statement = -1; var arrayOfBroweseableClasses = []; varProtocol = {};
"use strict"; var wd = require("yiewd"); var o_O = require("monocle-js").o_O; var desiredCaps = {
returnData.fields.push.apply(returnData.fields, temp.fields);
var spawn = require("child_process").spawn,   jn = require("path").join,   u = require("url")
else if (arguments.length === 2) return s_3x3(arguments);     throw new Error("invalid size for scale"); };
var Mixin = require('../abstract/mixin') , _ = require('mol-proto')
alert("Could not initialise WebGL, sorry :-(");         throw new Error("failed initalization");     }
hemera.on('serverPreResponse', function (ctx) {     let meta = {
if (body == undefined || body == null) {         throw new Error("Missing the required parameter 'body' when calling placeOrder");       }
return new Promise((resolve) => {       this.spawner.spawn(this.command).then(() => {         resolve(this.data);       });
}, function(error) {         self.serverError = true;         self.serverMessage = "Failed to get status from crawler server.";       })
defineSupportCode(function ({When, Then}) {   When(/^I list "([^"]*)" data collections(?: in index "([^"]*)")?$/, function (type, index, callback) {     this.api.listCollections(index, type)
disabled: false,       isDisabled: function() {         if (this.get('disabled') || this.get('loading')) {           return true;
__extends(LinuxTaskBuilder, _super);     function LinuxTaskBuilder(_task) {         _super.call(this);         this._task = _task;     }
maxConnections: Infinity,     maxGates: Infinity   }
module.exports = function () {  this.setHours(0, 0, 0, 0);  return this;
var podcastItems = podcast.items;       var nodeDic = [];
otp.widgets.Widget.prototype.initialize.call(this, id, module.webapp.widgetManager);         this.$().addClass('otp-stopTimesWidget');
this.toggle.$link.on( 'click', function () {   if ( this.toggle.open ) {    this.toggle.$link.text( this.toggle.showMsg );
if(!this.key) {                 throw new ve.Error( 'You must set a key for your field type ('+ this.declaredClass +'), something like "text" or "bool" or "email".' );             }
async abort(tx) {         if (!this.__backend.connected) throw new Error('JungleDB is not connected');
var shared = require('./_shared')('keys'); module.exports = function (key) {
for(let server in servers) {         let parsedUrl = parseUrl(server)
const handleHeight = 1; function log(...params) {     console.log(...params); }
htmlScript.node.setAttribute('id', 'oneBootstrapper');                 assetGraph.inlineRelation(htmlScript);             } else {
functionTopInfluencers(jobIds, earliestMs, latestMs, maxFieldNames, maxFieldValues) {     return $q((resolve, reject) => {
if (nativeTypes.indexOf(a[i]) < 0 && customTypes[a[i]] === undefined) {           throw new Error('Invalid type');           return false;
{         this.base(arguments, type, listener, self, capture);       }
prepareViewsModelsFields() {         for(let path in this.views) {             if (!this.views.hasOwnProperty(path)) continue;             let view = this.views[path];
if (!SET ||!SET.length)  throw new Error("Table Update must have 'SET'");             if (!LEFT ||!LEFT.length) throw new Error("Table Update must have 'LEFT'");
for (prop in arguments[i]) {       if (arguments[i].hasOwnProperty(prop)) {         if (own(arguments[i], prop)) {           result[prop] = arguments[i][prop];
})       return index(dimensions)     }
, listeners = {}                 , targets = {};
if (canceled()) {       throw new Error(0);      }
var Line = function(coordinates, opt_layout) {   _ol_geom_SimpleGeometry_.call(this);
editNickname(nickname) {         return this.shard.client.editNickname.apply(this.shard.client, this.id, nickname);     }
t.end() })
}       if (this.y.$scale!== 'ordinal' || this.x.$scale === 'ordinal') {         return'middle'       } else {
set: function(value){     disabledReadonly.set._polyfilled.input.call(this, value);     var stepcontrols = $.data(this,'step-controls');     if(stepcontrols){
this.doAsBinary(function() {     SIN.super_.prototype.validate.apply(this, arguments);     if (this.data.length!= 22) throw new Error('invalid data length');
if (null == relX) { relX = e.layerX; }             callback(relX / that.clientWidth);         }, false);
let ael=(E,V)=>([].forEach.call(E.length?E:[E]),e=>{for(let v in V)e.addEventListener(v,V[v])}),E);
define(["knockout", "jquery", "text!components/datasource/add.html", "ajaxutil", "waitingmodal", "jstorage", "validator"], function (ko, $, template, ajaxUtil, waitingModal) {     function viewModel(params) {         var self = this;
}         o[this.name] = this.value;       } else {
default:     throw new Error('Unknown SHA variant');    }
var jgeXml = require('./jgeXml.js');
this.projection      = new projection();        this.providerWMTS    = new WMTS_Provider();        this.ellipsoid       = new Ellipsoid(6378137, 6378137, 6356752.3142451793);
if(cschema.type == "collection" || cschema.type == "sequence") {         for(var i=0,j=cobj.length; i<j; i++) {             var o = cobj[i];
constructor(server, name) {     super();     this.server = server;     this.name = name;
var fs = require('fs')  , path = require('path')
el: document.getElementById('view'),         sharer: function (callback) {             console.log('share', callback);         }
this.Logger = new function(){         var self = this,             methodArr = ["error", "warn", "info"];
options = $.extend({}, that.button_options, b);             button = new ButtonIndicator(options);
snake.crash();         });
this._nativeType = Date;  this._underscoreMethods = ['format'];  this.typeDescription = 'date and time';
This.lines[This.lineNum].staff[This.staffNum] = { voices: [ ]};    if (params.name) this.lines[This.lineNum].staff[This.staffNum].title = params.name;    createVoice(params);
constructor() {     super();     this.initialize(...arguments);   }
for (var i = 0; i < arguments.length; i++) {     if (ArrayLike.isArrayLike(arguments[i])) {       this.sharedModel_.dataSets.push({
this.updateSelected = this.updateSelected.bind(this);   }
this._initSources();     this._recordListeners = {};     this._recordKeyChanged = this.bindSafely(this._recordKeyChanged);
var hiddenviews = [];
var _set_up_redis = function (done) {     this.plugin = new Plugin('rcpt_to.routes');
default:             throw Error("Unsupported opcode '" + opcode + "'");         };
has: function(property) {             return function(fields) {                 return this.__hasPropertyValue([property].concat(_.isString(fields)? fields.split('.') : fields || []));             }
that.onLoginPromise = stores.loginAnon.put(data).then(             ds.UIMsg('ok', that.loginForm, that.loginButton, that.loginAlertBar ),
peerReviewSrvc.loading = true;                     peerReviewSrvc.groups = [];                     peerReviewSrvc.details = {};                     $.ajax({
var func = function(s,e)
var should = require('should')  , sinon = require('sinon');
doc.links.forEach(function(link) {       if (!byFullId[link]) throw new Error('Not existing link "' + link + '" in'+ doc.section + '/' + doc.id);     });
_.forEach(this._astNode.properties, function (property) {             childNodes.push(property.value);         }, this);
yield this.af.syncAsync();     return Math.sqrt(yield this.af.sumAsync(sq)) / sq.elements(); };
if (this._singletonInstance) {         return this._singletonInstance;     }
geometry = this.cacheGeometry[cooWMTS.zoom][cooWMTS.row];     } else {         if (this.cacheGeometry[cooWMTS.zoom] === undefined)             this.cacheGeometry[cooWMTS.zoom] = [];
this.nowViewingUpdate.addEventListener(function(){           ReactDOM.render(<SidePanel events={this.nowViewingUpdate} />, nav);         });
return this.ajax('getVsoProjectWorkspaceQueries', project.name).done(function (data) {                 project.queries = data.value;             }.bind(this));         },
functionModel() {   var model = DataFlowNode.apply({}, arguments);   model = errors.customInterfaceErrorMessageInInject(model,
nodeca.filters.before('', {weight: 50}, function base_assets(params, callback) {   var locale    = this.session.locale,       theme     = this.session.theme,
if (!this.id ||!this.network) {             throw new Error('Can\'t fetchContent() without this.id and this.network');         }
if (testNull === null) {         throw new Error('No match in string')       }
}     throw new Error(`Can't Find Training to Verify it contains errors. The grid should, but does not, contain a row with this data in it: FirstInput: ${firstInput} -- LastInput: ${lastInput} -- LastResponse: ${lastResponse}`)   })
app.use(function(ctx) {   'use strict';
typeof define === 'function' && define.amd? define(factory) :  factory(); }(function () { 'use strict';  function foo() { return true; }
for (var i = 0; i < args.length - 1; i++) {       logArgs.push(args[i]);     }     log.apply(null, logArgs);
if (obj!== Ember && 'function' === typeof obj.sendEvent) {     obj.sendEvent(eventName, params);   }
for (const key in entities) {             if (entities.hasOwnProperty(key)) {                 const entity = entities[key]                 if (entity[idKey] == lookupId) {
dom.prependElem(cont, this.element);       }     }
return this   },
fs.readFileSync = function(f, enc) {  if(!fs[f]) throw new Error("File not found: " + f);  fs[f].length;
.each(vm.seats, function(seat){     html.render(this, {seat: seat})    .tr()     .td().input(seat.name).$().$()
getFullURL(...fragments) {     fragments = fragments.map((fragment) => encodeURIComponent(fragment));     return urljoin(this.serviceUrl,...fragments);
var globalCache = {  'true': {},
throw new Error("Unknown "+objName+" `"+name+"`");   this.emit(objName+"change", objName, value, obj[name]);   obj[name] = value;
parent.children().each(function(index) {       if (!disabled_or_hidden($(this)) &&          area($(this))>max_area) {
var feed = __dirname + '/feeds/nondefaultnamespace-baseline.atom'    , meta = {}
};     delegate.setNgModel = function ( ngModel ) {       ngModel = ngModel;      };
default:             throw new Error('Unrecognized command "' + command + '". Use either `add`, `remove`, or `list`.');     }
return utils.validFields(model, field)   })   var keys =  utils.keysFromObject(fields);   var vals =  buildMultiInsert(fields, keys, outValues);
var $element = $(this)       var className = 'alert-message'       $element = $element.hasClass(className)? $element : $element.parent()
} catch (e) {                }
wasRequiredBy: function() {         return Global.subNamespaces(true).select(function(m) {             return m.privateRequirements && m.privateRequirements.indexOf(this) > -1;         }, this);
leave() {         return this.client.deleteChannel.call(this.client, this.id);     }
{     throw new Error("Cannot call getHash after setting HMAC key");    }
if (document.addEventListener) {         document.addEventListener('DOMContentLoaded', function factorial() {           document.removeEventListener('DOMContentLoaded', factorial, false);           window.sweetAlertInitialize();
var $parseFloat = require('./_global').parseFloat; var $trim = require('./_string-trim').trim;
});   Group.prototype.setProperty = function (sName, oValue) {    Element.prototype.setProperty.call(this, sKey, oValue, oPage);    var oPage = this.getParent();
var markup_list = exports._initialization_markup;     for (var i = 0; i < exports._initialization_markup.length; i++) {         var m = markup_list[i];         if (m.value instanceof Function) {
typeof define === 'function' && define.amd? define(factory) :  factory(); }(function () { 'use strict';  function foo() { return 'foo'; }
var copyOf = function(from, to) {     return from.clone(); };
run(options) {     this._super(...arguments);     let prepare = newPrepare({
if (this.callsRemaining <= 0) {         callback(...args);       }
this.folderExists = false;     this.installables = {};     $scope.checkboxModel = new Object();
var matched = false;       for (var op_init = 0; op_init < is_op_init.length; op_init++) {         if (match_here(op_init)) {
}, function (res) {             var result = "";
let param = { code, encrypt_data };         return this._sendRequest(constants.Interface_LOGIN, param);     },
if (! this.hideOwnActions ) {         this.toolbarActions_ = this.wrapToolbarActions(this, this.model_.actions);       }
clearRenderData () {     this.patternRenderData = {}
, _slice  = Array.prototype.slice     exports.get = function (index) {
if (!this.db) {       throw new Error('DB has not been started yet');     }
, attempt: { options: options }      })     )
log("Failed XML HTTP request", e);             if (typeof callback === 'function') { callback(true, params, e.responseText); }         }
this.webview.addEventListener("MSWebViewDOMContentLoaded", () => {         this.webview.invokeScriptAsync("eval", `             addEventListener("keydown", e => {
c.on('invalidPage', (e) => {         this.sendAction('invalidPageAction',e);       });
zucht_und_ordnung(false);         var form = main_form.parents('form');         form.attr('action', form.attr('action')+window.location.hash);
, regexStr = '^'        , regexStrEnd = '';
var oMode = oModes.oModesByName[oResponse.sMode];                      this._oToolbar.setMode(oMode);
return function(...args) {       let done = args.pop();
}       this._super(key, value);     },
var generateModel = function (swagger, schema, modelName, currentGenerated) {             var model = '',
, defineObservable = require('../utils/define-set-observable')
} else {                 callback.call(null, e, root, path);             }
var zoe = {};
for (var groupTouple_i = 0; groupTouple_i < modalityGroups.length; groupTouple_i++) {             var groupSet = modalityGroups[groupTouple_i][0];
let successful = document.execCommand(actionAttr);             if (!successful) throw new Error('Invalid "data-action" attribute');             this.dispatchEvent(actionAttr, selectedText, currentTrigger);
} else {             throw new Error('Invalid date:'+ modelValue);           }
} else if (/\s/.test(content[0])) {       throw new Error('Illegal whitespace character');     } else if (indent === stack[stack.length - 1]) {
top: $("#editor-top-bar").height() + 'px',                     left: ($left + 35) + 'px'                 });
}     this.spinnerArgs = merge(opts, configArgs);   },
function googleLogin() {   this.redirect(
}; stdlib.map = async function(ctx, val, iter){     if(!types.isFunction(iter)){
return __awaiter(this, void 0, void 0, function* () {             const query = this.getParamsQuery(entity);             return this.service.create(entity, query, callback);         });
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "ETB", Array.slice(arguments));   },
ConsistentException.prototype = {};  function ConsistentException(message) {
const view = (() => {           switch (this.interaction.reason) {             case 'consent_prompt':
)  , callAllMethods = (a = [], b, c) => a.map(e => e(b, c))
this.checkInternalPointers();   if (this.parent) { throw new Error("The root shouldn't have a parent"); } };
var config = this.configFor(name),           opts = {typeKey: relationship.typeKey, embedded: config.embedded};       if (relationship.kind === 'hasMany') {
input = cell.input ||    (cell.input = put(cell, "input[type=" + column.editor + "].dgrid-input", {     name: column.field || that.id + "-selection",     tabIndex: isNaN(column.tabIndex)? -1 : column.tabIndex
parser.end(() => {       resolve(function* rules() {         for (const rule of rules) {
utils.executeRequest_( ({       action: constants.Actions.LIST_KEYS,
function onMessageReceived(topic, payload) {   debug("Message received on", topic);
function getUserInfoMethod() {     return persistencePathMethod(conf.get('authUserInfoRoute')); }
});     this.resource('voucherRedeemDone', {path: '/giftcards/redeem/done'});
}         fields = new Object();         fields.api_key = this.options.APIKey;
if (data && data.length) {                     for (var k = 0, len = data.length; k < len; k++) {                         self._AddPos(data[k][0]);
return function (req, res, next) {    return req.resource.execute(req.mort, function (err, data) {     if (err) {
c$ = Clazz.decorateAsClass (function () {  this.ac = 0;  this.isAngstroms = false;
++currentScreen;             display();             return this;         };
for (var p1 = 0; p1 < this.panels.length; p1++) { obj.refresh(this.panels[p1].type); }             }
$(".close").click(function(e){         e.preventDefault();         this.input.val( "" );         this.element.val( "" );     })
SamplesPerGr: 576,     SamplingFrequency44100: 0,
var data = [];         for (var timestamp in dataTotals) {             if (!dataTotals.hasOwnProperty(timestamp)) continue;             data.push({date: timestamp, value: dataTotals[timestamp]});
History.pushQueue({
registry_1.commands.set("typescript:go-to-declaration", deps => {     return async (e) => {         if (!utils_1.commandForTypeScript(e)) {
this.dispose() }
, sep = require('path').sep  , signature = require('cookie-signature');
this.whenorderedby = null; }
this.token = await HealthCashMock.new()     this.drs = await HealthDRS.new()   })
}       services['ecmascript-debugger'].setConfiguration(...config_arr);       _is_initial_settings_set = true;
var utils = require('./../utils') var Cookie = require('express-session').Cookie  , debug = require('debug')('connect:cookieSession')
gpaMax: gpaMax,                          currentlyRegistered: currentlyRegistered == null? null : new Boolean(currentlyRegistered).toString(),             earlyAlertResponseLate: earlyAlertResponseLate,
var self = this   var done = function(err) {
init() {     this.store.on('sessionDataUpdated', (content) => {       let { authenticator: authenticatorFactory } = (content.authenticated || {});
{   return this.coefficients;  }});  this.getCoefficient=function( degree)
if (!result) {         throw new Error('Failed to load the default user role!');       }
var endOfLine = require('os').EOL  , exports = module.exports;
var histogram = {}, tmp_arr = [];     var key, i, code, strl = 0;
if (isStepTouched(stepName))       throw new Error("Expected step \"" + stepName + "\" to have been skipped.");   }
fakeObj = function () {             FakeRequest.call( this );         };
super(source);         core.defineProperty(this, Symbol.iterator, function* SelectManyIterator() {             let index = 0;
var path = require('path')  , webpack = require('webpack')
const args = [this.request, this.response, this._lazyBody.content].concat(this._lazyBody.args)       nodeRes[method](...args)     }
function wikiPath(path){  this.full = nomalizePath(decodeURIComponent(path));  var index = this.full.lastIndexOf("/");
if(args[1] === 0 || args[2] && typeof args[2] === "number"){    params.Z = args[2];  }    if(args[1] === 0 || args[3] && typeof args[3] === "number"){
var r = 0;         for (var i = 0; i < this.d.length; ++i)             r += this.d[i] * v.d[i];
addToken: async (currency) => {     const hasToken = await this.rootChain.hasToken(currency)     if (!hasToken) {
if (byteStream === undefined) {     throw new Error('dicomParser.readSequenceItemsImplicit: missing required parameter \'byteStream\'');   }
test.equal(self.setupLocal.callCount, 0);
for ( var i in document.styleSheets ) {             if ( document.styleSheets.hasOwnProperty( i ) ) {                 sheet = document.styleSheets[ i ];                 if ( sheet.media.mediaText === 'print' ) {
for (var i = 0, l = this.length; i < l; ++i) {         if (this[i] in u) {             continue;
})   appkeys.on('message', function(channel, id, cmd, data) {     devkeys.send(channel, id, cmd, data)   })
this.settings = {};   this.store = new Store();   this.parts = {};
const licenseTextMapping = {};       const licenseTexts = [];       const dependencies = [];       Object.keys(packages).forEach(key => {
, binomial = window.binomial  , labor = window.labor; }
this.totalPages = 0;
if(! has_remote )         return this.updateWallet(private_key)
this.transformed = true;   this.typesData = [];   for (var i=0, l=pokemon.typesData.length; i<l; i++) {
var data = query.chart_data('flot')       for (var i = 0; i < data.length; i++) {         var series = data[i]
renderer.dragStartX = xCursor - this.offsetLeft;       renderer.dragStartY = yCursor - this.offsetTop;       zoomContainer.style.transition = "none";
var child = p._handler;    parent.chain(child, parent.receiver, onFulfilled, onRejected);    return p;
, callback = _.isFunction(data.callback)? data.callback : function() {}      , exitCode = data.exitCode || 0      , exitCodes = exitCode.length? exitCode : [exitCode]      , command
componentNameElt.text($(this).val());                          $('<style>.main-table::after{content:"' + $(this).val() + '"}</style>').appendTo('head');             component.meta.name = $(this).val();
if (Handlebars.sections && Handlebars.sections[section]) {
installResources.call(router, PageApp, primaryRoute, isGlobal);
if (!evt) {   throw new Error("Event " + eventName + " not found");  }
var height = Number(theImage.attr("height"));                 var theHandle = d3.select(this);
});       for (var ii = 0; ii < desc.components.children.length; ii++) {         var results = flattenComponentForDescription(desc.components.children[ii]);
if (attrs.isDuplex) {         component.bind('onchange', (function() {           return attrs.call(this.component, this.value);         }), 'before');
});       this.map.setView(center,14);     };   },
StringPrototype.times = timesFunction; NumberPrototype.times = timesFunction;
HTML5.debug("inserting " +  name);  return element;
for (s = 1; s < arguments.length; ++s) {   props = keys(arguments[s]);   for (i = 0; i < props.length; ++i) {
}   let that = first(...firstArgs);   let lastArgs = Helper.mapObject(components, function(name, component) {
for (var i = 0; i < subscriptions.length; i++) {                 var url = subscriptions[i];                 lgtv.subscribe(url, function (err, res) {
function mixinProperties(obj, proto) {  for (var prop in proto) {   if (proto.hasOwnProperty(prop)) {    obj[prop] = proto[prop];   }
return function () {     return func.apply(ctx, args.concat([].slice.call(arguments)));    };
});       if (resp.status!== 200) throw new Error('HTTP status'+ resp.status);     } catch (error) {
};    this['set' + Base.capitalize(component)] = function(value) {     var color = this.convert(colorType);
Object.prototype.__defineProperty__("getData", function () {   return clone(this.data);
} else {    throw new Error('ERROR: CoapPacket.serialize [Nibble value larger that 526345 is not supported]');   }
, helper     = require('../helper')  , chatState  = require('../../index').utils['xep-0085']  , correction = require('../../index').utils['xep-0308']
setInterval(function(){         for (var i in self.moduls) {             if (self.moduls.hasOwnProperty(i)) {                 self.moduls[i].execIntervals();             }
var getExports = require('../core/getExports') module.exports = function (context) {
for (tag in tags) {             if (tags.hasOwnProperty(tag)) {                 attribute = tags[tag];                 urls[tag] = [].map.call(document.querySelectorAll(tag), function(item) { return item.getAttribute(attribute); });
this.positioner = new Positioner(this.window)     this.window.on('blur', () => {       this.opts.alwaysOnTop? this.emitBlur() : this.hideWindow()     })
if (typeof interval == "undefined") {        var el = $j(this);
if(!this.options.skipLoad) {              var loader = new DmakLoader(this.options.uri);              loader.load(text, function(strokes) {
function * runClockSaga () {   yield take(actionTypes.START_CLOCK)
var compile = jsonMask.compile  , filter = jsonMask.filter
it('push replication', function () {     var username = 'push_repl_test';
function e() {             var e = t.call(this) || this;
get_my_star_count_by_friend: function(user) {         return this.model_.get_my_star_count_by_friend(user);     },
timeout = setTimeout(function(){           return L.system_server_connection_error;
jQuery.fn[func_name] = function(...args) {    var res, hasHLookup, secArgType = typeof args[1];
if (x === this) {                     throw new Error("internal error: would have gone into an infinite loop here.");                 }
Handlebars.registerHelper("url", function() {     return "http: });
delete params.production;             that.params = params;         }
}     this.length = _arr.length }
function queue(){   if (this instanceof queue === false) {
throw "FOO";
var elementRemoveEventListener = ElementProto.removeEventListener? function(eventName, listener, useCapture) {     return this.removeEventListener(eventName, listener, useCapture);   } : function(eventName, listener) {
if (templates.length < 1) {     throw new Error(`No "${filetypes}" templates found in \`${globalConfig.build.templates.source}\`. If the path is correct, please check your \`build.templates.filetypes\` config setting.`)   }
}       this._appendUndo(action);     }
});             it('does not add a request', function(done) {                 expect(this.messageParser.requests.length(0)).to.equal(0);                 done();
var response = Thorax.View.prototype.render.call(this, output || this[templateAttributeName] || layoutTemplate);       return response;
var StoreWatchMixin = function(storeNames) {   return {
, distribution = {}
var Table = require("./Table")
function slotOwnUpdate(changes, isFromOuter) {     if (me.nameBind && nodeEvalExpr(me, me.nameBind.expr)!== me.name) {
e.preventDefault();    moveLayer($(this).closest('li').data("layer"), self.map_.getLayers(), +1);   }  function moveLayerDown(e)
test('clearFeedback', function () {     this.formGroup.clearFeedback();
export async function queueCaveUninstall (store, action) {   const {caveId} = action.payload
if (constring == null || constring.trim() === '')         throw new Error('constring must not be null or empty');     if (contype == null || contype.trim() === '')
if ($.inArray(id, items)!== -1) {                     $this.show();                 }
ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);     return window.Parsley[method](...arguments);   };
var self = this      , fileWatcher = self.fileWatcher     self.config.read(function(){
List.sc.init.call( this, config );          },
domId=self.$domId,                      f=xui.Event.$eventhandler,                      i,l,j,k,o,key,id,t,v;
if( event.propertyName === ( changeType[ this.type ] || "value") ){             $.event._dispatch( $._data( this, "publisher" ), type, event );
_setOption: function( key, value ) {   this._super( "_setOption", key, value );   if ( key === "source" ) {
template: function(){             var icon = this.get('component._icons.loadingRows');
return function(test) {         test._ntf = { meta: (typeof(test.meta) === 'object'? this.meta : {}) }         exports.tcp.apply(this, [test, opts, callback])
})( typeof( window )!== 'undefined'? window : global );
this.y += dy     }),     setName: action(function(newName) {         this.name = newName     }) })
self.selectItem(item);             $item.addClass('pat-active');             if(self.options.maximumSelectionSize > 0){
var options = {}
qq.attach(document, 'drop', function(e){           for (var i = 0; i < dropzones.length; i++){ dropzones[i].style.display = 'none'; }           e.preventDefault();
willDestroy() {     this._super();
});       openRequest.onupgradeneeded = function( event){         this.db = event.target.result;         if(this.db.objectStoreNames.contains(this.storeName)){
}     return originalMiddleware.call(this, next);   }
} catch (error) {       this.setState({ error });     }
exercise.addSetup(function (mode, callback) {
disabled: function () {       return this.get("processing") ||!this.get("isValid");   }.property("processing","isValid"),
else             result = fallback(descriptor, args);         resolved = resolved || identity;
function ClientSnake(index, location, direction, size, speed, local) {     Snake.call(this, index, location, direction, size, speed, local);     this.crashed = false;
}     this.clearHouse()     this.emit('end')
constructor() {     this.x = 10;     super();
var kotti = {     dom_changed_handlers: [] };
for (var i = 3; i < arguments.length; ++i)          url += "&amp;" + arguments[i];    }
this.createFile = function(name, data, callback) {};
load(dumpBasePath, snapshotStoreFolder, config) {     console.log(config);   },
typeof define === 'function' && define.amd? define(['https:  factory(global.external); }(function (external) { 'use strict';  external = external && external.hasOwnProperty('default')? external['default'] : external;
if (parent_rows.some(function(parent_row){ return!parent_row.ball; }))           throw Error("some parents have no balls");          if (parent_rows.length > 0)
}       else if ( val == 'xml file'  ) {         obj_form.dataset = '\
var data = this.getSection(syntax), matchedItem = null;    _.find(['snippets', 'abbreviations'], function(sectionName) {     var data = this.getSection(syntax, sectionName);     if (data) {
, containerPosition             , trackBodyPosition            , trackBodyOffset;
this.setTimeout();     return this._super(...arguments);   },
return _s.slugify(val);    }   }, {
case SocketConnectionState.DISCONNECTED:                 this.DUID = undefined;                 this.socketConnection = undefined;
return newCancelablePromise(function onCreate(resolve, reject) {     promise.catch(...args).then(resolve, reject);   }, this._onCancel);
typeof define === 'function' && define.amd? define(['../foo'], factory) :  factory(global.foo); }(function (foo) { 'use strict';  foo = foo && foo.hasOwnProperty('default')? foo['default'] : foo;
var data = [];         for (var embeddedItem in embeddedItems) {             if (embeddedItems.hasOwnProperty(embeddedItem)) {                 var item = {                     "url": embeddedItems[embeddedItem].path + ".members.json",
ok = pack.packOne(fixedBoth[j].width, fixedBoth[j].height);             if (!ok) throw new Error('out of space');         }
var header;   for (var prop in headers) if (headers.hasOwnProperty(prop)) {     header = headers[prop];
return filterPrefix(validUrns, 'thirdeye:metric:').reduce((agg,urn) => {         agg[urn] = that._makeMetricLabel(urn);         return agg;
await this.get(taskPath).perform(...args);
if(!path) {       throw new Error('no route with name:'+ to)     }
Tabs.show = function() {         $list.focus();
$mdDialog.hide("saved!");                     }, function() {                         debugger;
if (streamObj.mediastream){     for (var connection in rtc.producedPeerConnections) {      if (rtc.producedPeerConnections.hasOwnProperty(connection)) {       rtc.producedPeerConnections[connection][mediastream].addStream(streamObj.mediastream);      }
});     target.addEventListener(propertyName.slice(2), function(...args) {       wrapper.dispatchEvent(...args);     });
heightBytes[i] = 'height'.charCodeAt(i);     }     for (i = 0; i < 'videocodecid'.length; i++) {       videocodecidBytes[i] = 'videocodecid'.charCodeAt(i);
}; }(this)); Plume.menu = (function() {
$dialogButton.click(function() {                 var popupView = that.getPopupView(this);                 if (popupView.isShowed) {
};                                  var val = this.value.replace(/</g, '&lt;')                                    .replace(/>/g, '&gt;')
var Polling = require('./polling');
for(var h in jsondata.headers) {    if (jsondata.headers.hasOwnProperty(h)) {     var heading = jsondata.headers[h];     ret += textdelim + heading + textdelim +  delim;
'use strict'; var exports = module.exports;
}             queue.push(src);         }
var jetzt  = window.jetzt    , H      = jetzt.helpers;   function on (event, cb) {
$scope.isOpenSearch =!$scope.isOpenSearch;     };          $scope.isOpenSearch = false;
if (!((ONMD_!= null) && ONMD_)) {               throw new Error("Missing object model layout object input parameter! If you specified the namespace declaration via object reference, check the validity of the reference.");             }
}   var opts = this.defaults(options);   this.src(config.src, opts)    .pipe(this.dest(config.dest, opts))
{                 parentObj.parent().find('label').removeClass('active');             }
let alreadyOpenedMenu = new Menu(status.opened);       alreadyOpenedMenu.close(() => {         this.open(callback);       });
function modelFinder (params) {   for (var key in params) {     if (!params.hasOwnProperty(key)) { continue; }
{    throw new Error("Invalid b64Pad formatting option");   }
for (i = 0; i < this.documents.length; i++)             {
} else {     child  = parent;     parent = Object;     props  = props;   }
spyOn(parentCtrl,'registerAutocomplete').and.returnValue(tagsInput);         options = $.makeArray(arguments).join(' ');         element = angular.element('<auto-complete source="loadItems($query)"'+ options + '></auto-complete>');
cb(er)     })   }
setTime: function (n) {     if (isNaN(n)) { throw new Error('Units must be a number.'); }     var dt = new Date(0);
throw new Error("SignalR: jQuery not found. Please ensure jQuery is referenced before the SignalR.js file.");     }
console.log('Starting error finding process...');     for (let count = 0; count < openPRs.length; count++) {       let { number, labels, head: { sha: ref } } = openPRs[count];
if (typeof args[0] ==='string') args[0] = `react-i18next:: ${args[0]}`;       console.warn(...args);     }
) {   var Example = function (name, contents) {     this.name = name || 'Example';     var defaultContents = ('\
$scope.$on('$destroy', function () {       for (var i = 0; i < $scope.currentModals.length; i++) {         modal.remove();
this.logger.debug(         '\n{{magenta'+ e.req.method + '}}',         node_url.parse(e.req.safe_url).pathname,
assert(Number.isInteger(this.deactivationThreshold));   if(feed.errorCount > this.deactivationThreshold) {     console.debug('Error count exceeded threshold, deactivating feed', feed.id, Feed.peekURL(feed));
var result22 = result23!== null          ? (function($1, $2) {  return $2.length!= 1? new PEG.Grammar.Sequence($2) : $2[0];  }).call(this, result23)           : null;
'use strict' var jsonSafeStringify = require('json-stringify-safe')  , crypto = require('crypto')
});         return data;     }
let args = []      args.forEach((argu) => {
personalizationColors: function () {     const palette = this.themeColors().palette;     const brand = this.themeColors().brand;
export function setConfig (...args) {   return config.set(...args); }
}       this.$refs.searchField.focus()
if (!body) {         throw new Error('Expected function body.');     }
},     nodeTraverse: function (...args ) {         Node.prototype.traverse.apply( this, args );     },
if (base) {     for (var p in base) {      if (base.hasOwnProperty(p)) {       blank[p] = base[p];      }
this.globalData.transformCanvas = this.transformCanvas;     this.elements = createSizedArray(animData.layers.length);
String[P].date = Number[P].date = function(format) {   var m
});         it("Size of dataset '0' should be 186 ", function(done) {             groupGeometries.getDatasetType('0').should.equal(HLType.HL_TYPE_LITE);
}       this._setupPlayerAttributeBindingObservation(player, property, attrName);     }.bind(this));   },
function cancelDelete() {         that.modal.dismiss();     }
this.evaluate();                                 }.bind(this), { priority: this.context.depth });                             }
if (settings.slides.length) {      $this.rsfSlideshow('addSlides', settings.slides);      settings.slides = Array();
var cmElement = function(options) {     this.prop = options.prop;     this.prettyName = options.prettyName;
size: 'S',           ui: this.ui         }
unformatted = data.get( address );    formatted = anglebars._format( unformatted, model.formatters );    this.update( formatted );
array.forEach(files, function(f, i){    var fieldName = that.name+"s[]";    var fileName  = f.fileName;
}   this.prevTime = timer.start();  },
constructor() {     super();     this.state = { result: null };     this._callback = this._callback.bind(this);
start = 0;     }     for (let i = start, l = this.length; i < l; i++) {       reduced = func(reduced, this.get(i), i, this);
var log = logger.createLogger('auth-ldap')   var app = express()   var server = Promise.promisifyAll(http.createServer(app))
}     insert(records,...rest) {         return __awaiter(this, void 0, void 0, function* () {
function Weaver() {
{           columns[$(this).attr('groupid')]=obj;         }
delete model[from + ':' + this.valueAttr];           }
this.debug("Socket data being routed for '" + data.event + "' event");         this.eventRouter[data.event].bind(this)(data, conn);       }
Tabs.initialize = function() {
let r = [];    for(let i in map){     if(map.hasOwnProperty(i)){      r.push(map[i]);     }
var activityProxyGetter = function () {   if (this.currentState == this.state.opened) {    return this.window._internalActivity;
, getPrototypeOf           = Object.getPrototypeOf  , f                        = require('../Function/functionalize')
if (existingValue) {         for (var prop in value) {           if (value.hasOwnProperty(prop)) {             existingValue[prop] = value[prop];           }
var util = require('util') var Mechanism = require('./Mechanism') function anonymous () {}
, 'test exec stderr events': function () {     var ex = jake.createExec('echo "foo" 1>&2', function () {});
}      this._highlight({row: e.visualIndex});     },
}         return grid     }
_.camera.add(_.light);
Gate.prototype.beforeAny = function(fn) {     this.beforeAnyRequest = fn; };
$('.title a').each(function () {     var href = $this.attr('href');     if (checked){
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "ST", Array.slice(arguments));   },
__extends(DependencyObjectCollection, _super);          function DependencyObjectCollection(object) {              _super.call(this, object);            }
if (!((this.objectModelDeclaration!= null) && this.objectModelDeclaration)) {           throw new Error("Failed to deep copy (clone) source object model declaration.");         }
goog.exportSymbol('WebGLEarth.prototype.getCenter', function() {   var pos = this.camera.getPos();   return [goog.math.toDegrees(pos[0]), goog.math.toDegrees(pos[1])];
hasFiles() {     for (const ignored in this.compiling) return true;     for (const ignored in this.copying) return true;     return false;   }
if(get(this,'renderSrc')) {       this.setupActualImg()     } else {
exception = _error;             throw new Error("openNamespace failure: " + exception);           }
, fs        = require( 'fs' )  , assetPath = path.join( __dirname, '..', '..', 'assets' );
temperature.on("data", function() {             self.emit("data", temperature);         });
});             return [].concat(...ret).join('');         };
constructor(location, interfaces) {     super(location);     this.interfaces = interfaces;   }
data = _.extend({}, {validateOnChange: true}, data);             var parsedData = this.parseAction(data);
module.exports = function (ctx, name, getter) {   var _get = Object.getOwnPropertyDescriptor(ctx, name)    , _super = function () {};
const IgniterConsole = {   warn(...args) {     console.warn(...args);   },
QUnit.test( "afterEach must be called after test ended", function( assert ) {  var testContext = this;  assert.expect( 1 );
var params = "";       for (var name in event) {         if (event.hasOwnProperty(name)) {           var value = event[name];           if (typeof value!== 'undefined') {
'use strict';
class UnitHealthDropdown extends React.PureComponent {   constructor(...args) {     super(...args);     this.state = { dropdownItems: this.getDropdownItems() };
module.exports = Cylon.Drivers.GPIO.MakeyButton;
extend(target,...objs) {     objs = [].slice.call(arguments, 1)
it("instance injection in mediator with inject property", function () {   var f = function(){this.args = arguments};         f.inject = ['instance'];
export default function (nextState, transition) {   this.store.dispatch(sync())   this.store.dispatch(checkToken())
var app = require('../../examples/auth/app')  , request = require('../support/http');
function(){                 t.find('i').remove();             }
if (confirm('Are you sure you want to delete the entire list?')) {      this.base.del(t, d);     } else {
}); function createLogger(...args) {   const options = args.length <= 0 || args[0] === undefined? {} : args[0];
mUIUtils.getUserText(domId+"EditBox", refNode, false, defaultName,       function(name) {      if (name) {
if (i < this.$timeouts.length) {       setTimeout(() => {         this.$cycleTouchName(fontName, i + 1);       }, this.$timeouts[i] - (i > 0? this.$timeouts[i - 1] : 0));
var g_fButtonPressedOnAnyGamepadEver = false; var g_gamepadVisualizers = []; function runAnimation() {
var globalMatch = haystack.match(globalRegex);    matchArray = [];    for (var i in globalMatch) {
const arr = []   Object.keys(editors).forEach(uuid => {     arr.push(editors[uuid])
if (koFileEx.scheme!= "file") {         throw new Error("'"+file+"' does not have a local dir name");     }
WhatsAppAPI.Wap.sendConversationSeen(data.jid, t, data.unreadCount, false).then(function(e)   {
}             original.call(this);         });
function _log() {   console.log(...[`[${moment().format('DD/MM/YYYY HH:mm:ss')}] =>`], Array.from(arguments) || []) }
(...args) =>     fns.reduceRight((acc, fn) => [fn(...args)[0];
return function getGlobals() {    return _ref8.apply(this, arguments);   };
function OverlayBlock(el, overlay, points) {         OverlayBlock.__super__.call(this, el, overlay, points);         this.jsPlumbOverlayInstance = overlay;
if (exp!== undefined) {         return expressionCompile(exp).apply(instance, args);       } else {
case 'http:       Object.assign(vocab, module.exports.DRAFT_04_HYPER);       break;   }
that._defineDimentions();     that     .removeClass('animating')
, pg  , generator = require('../../../lib/generators/sql')  , model = require('../../index')
key:'renderEnum',     value: function renderEnum(definition, depth) {       var _definition$config = definition.config;
init: function() {     this._super(...arguments);     if (!this.$) {
} else {              for (var p = 0; p < icon_paths.length; p++) {                 var iconPath = path.join(icon_paths[p],req.params.icon);
import ExtractTextPlugin from 'extract-text-webpack-plugin' export function extractStyles (ext) {   return!this.dev &&!!this.options.build.extractCSS && this.options.build.extractCSS[ext]!== false }
this._encoder.on('error', function(err) {     nurpc.rpcCode('INTERNAL', err);     onFinish();   })
console.log('runner run cb', stats);   process.exit(stats.failCount > 0? 1 : 0);
if ('string' == typeof msg) msg = new Buffer(msg);   var len = msg.length;   var buf = new Buffer(len + 4);
for (var i = 0; i < templates.length; i++) {       this.$markAsBound(templates[i]);
var husk = require('../..'); describe('husk:', function() {
console.log('IMAP server closed');                     });
, Log = require('./log')
} else {         throw new Error("unexpected context: name='" + context.name + "' type=" + context.type);     }
Events.prototype.one = function(ev, callback) {     return this.bind(ev, function(...args) {       this.unbind(ev, args.callee);       return callback.apply(this, args);     });
if (this._oOpenPopoverDeferred) {    setTimeout(function () {     this._oOpenPopoverDeferred.resolve();     this._oOpenPopoverDeferred = undefined;
var v=RegExp.$1;     var donotnotify=false;
if (allowedCallbacks.indexOf(name) === -1) {           throw new Error("ATRACKT ERROR: `setCallback` - `" + name + "` is not a valid callback.  Only callbacks allowed are: " + (allowedCallbacks.join(', '));         }
$.each(this.columns, function (i, column) {             that.columns[i].visible = visible;         });
if (! field ||! field.name ) {    throw new Error('A field must have a name')   }
function unroute(...args) {     return unbindRoute.apply(this, args); }
this.dirnames.push(this.locale);     }     this.dirnames.push(...srcNames);     if (this.document &&!this.index) {
this.params = validator(options, 'params') || {};         this.urlParams = validator(options, 'urlParams') || {};         this.method = validator(options,'method') || 'get';         this.config = validator(options, 'config') || {};
import U from "src/util/util.js";
if (this.previous) {                 var result = this.previous.allConnections;                 result.push(...this.includedConnections);                 return result;
, shared = require('./shared')  , utils = require('./utils')
for(var j = 0; j < this[relation.name].length; j++){               if(this[relation.name][j]){                 (function(relation, subrecord){
return this.fetch(offset).done(_.bind(function (results) {             var result = results[type];                          if (result.length > 0) {                 this._hasNextPage = true;
return function () {       _super.call(this);       var have = function (selector) {
JAK.LightBox.Anchorage.Fixed.prototype.$constructor = function(owner) {  this.$super(owner);
return this.flatMap_(         makeSpawner(f),          {
return'school' + schoolCount.toString();     };     this.generateLanguageProperty = function(languageCount) {         return 'language' + languageCount.toString();
async function createPost() {
this.layer = new Backbone.Model();     this.model = new FormulaDataviewModel({
}         }, _callee);       }));
})(typeof(window)!== 'undefined'? window : global);
, max_iob: maxiob_data.max_iob || 0     };
var $export = require('./_export'); var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');
if(properties.getter) {      value = typecast.call(this, properties.getter(value), value, properties);    }
this.creative = creative;         this.variation = variation;         this.vastUtil = new VASTUtil();
this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height);     this.radius = globeModel.get('globeRadius');
return emit.apply(this, args) }
}     throw new Error("internal error: no is_mul_identity value on input to replace_with_notone"); };
delete that.models[this.id];             that._initModel(that.id);         });
triggerOutput(...args) {    Node.triggerOutput(...args);   }
}   function safeDigest(digest) {    return Helpers.safeDigest(digest);   }
'use strict'; var pagelet = require('registry-status-pagelet');
if (this.mouseUpTime < opts.pressDuration) {                             progress("disable", $this);                         } else {
sensor.scale([ 0, 100 ]).on("read", function() {        });
module.exports = ModelBaseClass;
function Presenter (props, context) {   BaseComponent.call(this, props, context)
vm.canBePromoted = canBePromoted;
'filter':function() {      for (var row in table.getRows()) {       if (!table.getRows().hasOwnProperty(row)) continue;       row = table.getRows()[row];
$(this.backControl).set('html', value);                 that._currentState.back = value;             }, true);
let dictionary = Object.keys(self.contracts);         for (className in self.contracts) {           contract = self.contracts[className];
else {                     var ary_vs = [];                     data[key].forEach( function( v ) {
e_2 = _c.sent();                             if (this.options.propagateError) {                                 _arr = [];
attributes += "=";      if(options.quote_attr_values || v.length == 0) {       quote_attr = true;
var KEYCODE_SPACEBAR = 32  , TIME_CLEAR_BUFFER_TIMEOUT = 750  , TIME_CHECK_EDITABLE_ELEMENTS = 1000 * 30    , TIME_OUTLOOK_EDITOR_CHECK = 500
borderColor: "#0066cc",                             type: "line",                             fill: false                     },                     {
clearTimeout(this.timeoutID);     this.timeoutID = setTimeout(...args);   },
acceptsCharsets(...args) {     return this.accept.charsets(...args);   },
copyItems.forEach(function(name) {       Router[itemName] = ReactRouter[itemName];
expect(spied).to.have.been.called();       expect(this.slider._transitioning).to.be.false;       await wcutils.delay(100);
vars: {       loginState : false,
newValue = that[head].setIn(tail, value);     } else {
mejs.Utils.typeChecks.push(function(url) {         url = url.toLowerCase();         if (url.indexOf('vimeo') > -1) {
:'mb.core.printclient.btn.deactivate';                     $this.val(Mapbender.trans(buttonText));                     self._getTemplateSize();
number.charAt(number.length - 1) == 'e') {           throw new Error('Lexer found invalidExponent value "' + text + '"');         } else {
self.rerenderGraphs(data);       };
var r1 = oldRotation < 0? 360 + oldRotation % 360 : oldRotation % 360
function calcError(outputs, target) {       return target[this.thread.x] - outputs[this.thread.x];     }
var qs = require('qs') var settings = {}
return error('Error loading exercise text:', err.message || err)     })   } }
Snakeskin.addDirective(  'with',
}     return utils.transformValue(this._path, args[argIndex], utils.encrypt);   };
return this.getParent().sendAndReceive.apply(this.getParent(), arguments);     }     return this._getActor().sendAndReceive.apply(this._getActor(), arguments);   }
this,       args     ).then(function(contentAndState) {
morph: function (matrix) {
describe('133. longrawProcedureBind_inout.js', function() {   var connection = null;
constructor() {     super();     this.type = 'prime';
BTCStateProvider.prototype.getBlock = async function(network, blockId){   if (typeof blockId!=='string' ||!this.chain ||!network){     throw 'Missing required param';
return!model? 'Set model or data.' : properties;       }, this.model$, this.properties$));     },
return {                'string': String.fromCharCode(...out),                 'length': offset - start
}   var modelPath = EmberHandlebars.get(this, 'formForModelPath', options);   options.hash.modelPath = modelPath;
this.height = false;   this.render = true;   this.points.origin = new Point(0, 0);   for (let k in hooklib) this[k] = hooklib[k];
if (this.mainHandle) middleware.push(toThunkableFn(this.mainHandle))   middleware.push(function (done) { this.seq(this.onPreEnd)(done) }.bind(this))
};       RemoteStorage.Unauthorized = function(error) { Error.call(this, error); };       RemoteStorage.Unauthorized.prototype = Object.create(Error.prototype);
const originalMeteorDebug = Meteor._debug; Meteor._debug = function(...args) {  notify(...args);  return originalMeteorDebug(...args); };
} else {                 throw new Error("unexpected context: name='" + context.name + "' type=" + context.type);             }
verifyForm: function (button) {                 var button = $(button),
} else {         throw new Error('unsuport typed array: ${uncompressedData}');       }
console.log('NOTIFY: %s@%s', key || id, id);       original.call(this, key, original);     };
this.bind("enterframe", function() {     var old = {x: this.x, y: this.y, w: this.w, h: this.h},      changed = false;
return this; };
callback && callback.apply(this, args);         this.trigger('route', name, args);         this.trigger.apply(this, ['route:' + name].concat(args));
if (!gl)             throw new Error("failed context creation");         if ("interactor" in opts) {
var debug = function(msg) {    };
.each(function() { ++n; })                .each("end.all", function() { if (!--n) callback(); });         });
d3_selectionPrototype.each = function(callback) {   for (var j = -1, m = this.length; ++j < m;) {     for (var group = this[j], i = -1, n = group.length; ++i < n;) {
if (!this._unsubscribeFns) this._unsubscribeFns = []     this._unsubscribeFns.push(Bacon.onValues(...arguments))   },
];    for (var i = 0; i < this._editorTextPlusPlacements.length; i++)     on(this._editorTextPlusPlacements[i], "click", this.onEditorTextPlusPlacementClick);
exports.Bucket = function(capacity) {     this._store = [];     this._capacity = capacity;
constructor(rootPattern, referencer, callback) {         super(rootPattern);         this.referencer = referencer;
var async = require('async') var should = require('should') module.exports = function(idProperty, getEngine) {
function log(level) {   if (log.level >= level) {     console.log(..._.toArray(arguments).slice(1));   }
stub(Backbone.Radio, 'log');       this.channel.command('some:event', 'argOne');     });
});     this.route('reroute-guid', {path: 'preprints
return function () {                 throw new Error("Roles cant be instantiated");             }
}     const p = promising();     return p.fulfill(...args);   }
callback.apply(this, arguments);     });    }
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.fract);     return Math.floor(x);
function getTimespan(date, param) {     if (!param)
}       $this.parent().css({         "overflow": "hidden"
css: function(property, value) {     var args = [].slice.call(arguments, 0);     if (!this._checkElement(args[0])) {
} else {       path = path.fmt(...otherArgs);     }
open_file(target, files, path, flags, check_result);         deferred.promise.then(
$scope.selectNode = this.selectNode;         $scope.dblClick = this.dblClick;
var what, a = arguments, L = a.length, ax;     while (L > this.length) {       what = a[--L];
class Test extends phrase.Phrase {       describe() {
this.data = data!= null? data : {};     }
} export async function favicon_refresh_feeds() {   const promises = [];
var log = logger.createLogger('storage:plugins:apk')   var app = express()   var server = http.createServer(app)
, 'testSamePrereqTwice': function () {     h.exec('../bin/cli.js foo:asdf', function (out) {
messages: {},
data: this.get('defaultDataStructure'),
socket.on('data', this.emit.bind(this, 'data'));  socket.on('close', this.emit.bind(this, 'close'));  this.emit('connection', socket);
.complete(function(){       $el.css({ 'opacity': 1 });     });
var type = event.type || event;
ComponentFacet.prototype.init.apply(this, arguments);     var model = new Model;     var self = this;
toJSON: function(...args) {    var jsonObj = Backbone.Model.prototype.toJSON.apply(this, args);    var children = this._nodes.toJSON();
this.size = { radius:6, infoX:3, infoZ:3 }      this.state = 'new player'      this.color = 'rgba(240,240,240,1.0)'
callback.apply(this, arguments);     });    }
case 'LT':     return function(keyA, keyB) { return keyA < keyB[0] }   case 'GE':
if(!window.SyntaxHighlighter){var SyntaxHighlighter=function(){var a={defaults:{"class-name":"","first-line":1,highlight:null,"smart-tabs":true,"tab-size":4,r2:false,gutter:true,toolbar:true,collapse:false,"auto-links":true,light:false,"wrap-lines":true},config:{clipboardSwf:null,toolbarItemWidth:16,toolbarItemHeight:16,bloggerMode:false,stripBrs:false,tagName:"pre",strings:{expandSource:"expand source",viewSource:"view source",copyToClipboard:"copy to clipboard",copyToClipboardConfirmation:"The code is in your clipboard now",print:"print",help:"?",alert:"SyntaxHighlighter\n\n",noBrush:"Can't find brush for: ",brushNotHtmlScript:"Brush wasn't configured for html-script option: ",aboutDialog:'<!DOCTYPE html PUBLIC "-
if (instructor.instructor_group_id!= null) {                         model = {};                         model.isGroup = true;
this.formTag(params, function () {           buf = buf;           if (block) self.fieldsFor(resource, params, block);
if(!object.isValid()) {       throw new Error("Could not convert to date", expression: match, key : key, data : data });      }     }
}),                     error: function () {                         this.layerJSON[url] = {};                         deferred.resolve(this.layerJSON[url]);                     }
$scope.$watch(angular.bind(this, function() {     return this.lang;   }), angular.bind(this, function(newVal) {     this.measureStartMsg = measureStartMsgs[newVal];
_TextLayoutRun.prototype = new RefObject;  _TextLayoutRun.prototype.constructor = _TextLayoutRun;
if (state!== OPENED) {     throw new Error('Already closed');     }
self.tag = function () {         _apply_command(model.Model.prototype.tag, arguments, KEY_TAG);         _persist_command(model.Model.prototype.tag, arguments, KEY_TAG);
for (const pkg of packages) {       const packagePath = path.resolve(path.join(...[__dirname, '..', 'node_modules'].concat(pkg.package.name.split('/'))));       if (fs.existsSync(packagePath)) {
}     let filtered = data;
if ( failed.length ) {     throw new Error('[CKEDITOR.resourceManager.load] Resource name "' + urlsNames[ failed[ 0 ] ].join( ',' ) +      '" was not found at "' + failed[ 0 ] + '".');    }
return {         servicesList: ServicesStore.services,         sizeArr      : [ "s", "m", "l" ]        , widgets      : {
, mkKey = require("../support/models").mkKey Promise.promisifyAll(crypto)
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.min);     return x >= 0? x : -x;
,'src/core/pagelet.js'            ,'src/core/mu.js'             ]
SettingsWindow.prototype.removePanelItem = function(iter) {     this.panelItems.splice(iter.index, 1);     this.refreshPanelItems();
auth[fn](id, projectname, type, rights)                 .then(mainDeferred.resolve)
if (!exp.type.equals(result.type)) {         throw new Error("Shade.constant internal error: type was not preserved");     }
var lazy = lazy_require({   meta : ['azk'],
const AudioPlayer = () => (   <JPlayer className="jp-default">     <Gui>
throw new Error("I dont know how change this corpus' public/private setting ");     }
if (!Hash.isHash(hash)) throw new Error('Malformed hash');
} else {       const protocol = strategies[key].protocol;       const callback = strategies[key].callback;
}                         var releases = result;                         var versions = releases.filter(function (target) {
return {     type: actions.BACK_TO_ACCOUNT_DETAIL,     value: address,
name:'string',   check: function(value) {     return _.isString(value);   },
localStats = new LocalStats(stream, 100, eventEmitter);
try {   let caller = sugoCaller({
, GeometryColumnsDao = require('../../../../lib/features/columns/geometryColumnsDao')     , path = require('path')
constructor() {     super();     this.type = 'array';
else {      for (var index in this.idAttributes) {        if (!this.idAttributes.hasOwnProperty(index)) continue;        attr = utils.findAttr(node, this.idAttributes[index], null);
delete self.container.dataset.dragging;              callback();
if ($(this).text().toLowerCase() === curText.toLowerCase() ||!$(this).text().length) {                         elem.html('<em style="color: gray;">' + curText + '</em>');                     }
var _write = function(data, position) {  this.requires.fs.write(this.fd, data, 0, data.length, position, this.onWrite); };
name: 'date',   check: function(value) {     return!_.isNumber(value);   },
function Dialog(selector, options) {   var _this = this;   this.elements = (0, _utils.getElements)(selector);
};       this.bindKeyboardShortcuts();
if (!await fs.exists(this.settingsPath)) {    throw new Error(`Couldn't write settings file: ${this.settingsPath}`);   }
}   visit(tree, depth);   return this;
var projection = d3.geo.albersUsa().scale(1070)  , path = d3.geo.path().projection(projection)
'use strict'; var readdirp = require('readdirp')  , maps = require('map-stream')
var add = function (obj) {   if (!obj ||!_.isPlainObject(obj)) {
if(results instanceof Array){     for (var i = 0; i < results.length; i++){      this._processResults(results[i]);     }
var middleware = _initialize(passport)   return function*(next) {
} catch (err) {    throw new Error(`Cannot include file at path ${file}, non-existent or can't be read.`);   }
var dataAttribute = rotateAttr? 'data-rotate' : 'data-sequence';                 $this.attr(dataAttribute, result[1]);                 if (!result[1]) {
extractParams(...args) {             return extractParams.apply(this, args);         }
} catch (error) {     throw new Error( 'Error creating WebGL context' );   }
this.compile = function () {     var src      , fn      , opts = this.opts
else if(this.isTemperature() &&!other.isUnitless()) {         throw new QtyError("Cannot divide with temperatures");       }
"use strict";
, helpers    = require('./helpers')
$ops.each(function() {          data[$(this).data('opt')] = $(this).data('value');
console.log(' '+ color.magenta('[' + section + ']'));     for (var key in data[section]) {       if (!data[section].hasOwnProperty(key)) continue;       var value = data[section][key];
var SystemJSLoader = function SystemJSLoader() {     this.baseUrl = System.baseUrl;     this.baseViewUrl = System.baseViewUrl || System.baseUrl;   };
this.selectPath = selectPath;
else if (category == 'tv') {     for (let key in data) {         if (!data.hasOwnProperty(key)) continue;
module.exports = {   Server : require ('server') }
var result = exports.logWrapper('scrollHistoryModel', {}, 'orange', function () {             exports.util.apply($rootScope.$emit, $rootScope, arguments);         });
this._prevTime = undefined;         this._down = false;     }
var toReturn = [];    for (var element in elements) {      if (!elements.hasOwnProperty(element)) continue;      toReturn.push(addElementToInternalArray(elements[element]));
if( err.name && err.name == 'ValidationError' ){     for( error in err.errors ){       req.flash( 'flash-error', err.errors[ error ].message );
const version = buf.readUint16();         if (!BlockHeader.SUPPORTED_VERSIONS.includes(version)) throw Error('Block version unsupported');         const prevHash = Hash.unserialize(buf);
top: function() {         return 0;     },
$scope.$on('$destroy', function() {       this.gifPopover.remove()
function arrayIntersectOrSubtract(arr1, args, subtract) {   var result = [], o = {}, arr2 = [].concat(...args);   forEach(arr2, function(el) {
if (statusCode < 100 || statusCode > 599) {     throw new Error('invalid HTTP code');   }
, nativeTypes = require('../types/nativeTypes.js')
, less = require('gulp-less')  , rename = require('gulp-rename')
btn.addEventListener('click', function() { f.track('trackLink', this.href, 'link'); });  btnc.appendChild(btn);
for (var i=0; i<shift.length; i++) {       var shift = shift[i]
global.get_nickname = async function(uid){
if (this._unique) {                     throw new Error(`Uniqueness constraint violated for key ${key} on path ${this._keyPath}`);                 }
export default async function register({ releaseAddress, network, txParams = {} }) {   if(!releaseAddress) throw new Error('You must provide a release address')   const kernel = await KernelProvider.fromKernelNetworkFile(network, txParams)
var route = false      , path = req.url;     for (var i in this.routes) {
function SVGSpriteStandalone(spriter, config, data) {  SVGSpriteBase.apply(this, [spriter, config, data]); }
Object.prototype.isType = function (t) { return t.name === Object.getPrototypeOf(this).constructor.name };
{         this.base(arguments, type, listener, self, capture);       }
if (!opts.clearDepth.type.equals(Shade.Types.float_t))             throw new Error("clearDepth must be float");         clearDepth = opts.clearDepth.constant_value();
$controls.each(function() {         var eventType = $controls.data('disable-event');         if (!eventType) {
handle = aspect.after(field, 'complete', lang.hitch(field, function() {                 var list = this.owner,
this._req.socket.write(req, "ascii");   this._req.socket.write("\r\n\r\n", "ascii");   this._req.socket.flush();
}                     decorator.call(this, item);                 }
return new Gaze(patterns, opts, done); }; module.exports.Gaze = Gaze;
var key = [];     for (var i = 0; i < values.length; i++)      {
this.logger.error('Trying to initialize a ConnectionRouteManager3 without a canvas...');             throw new Error('ConnectionRouteManager3 can not be created');         }
topRange(startDate, endDate, timeGranularity, direction, startingAt, limit, callback) {     const args = [startDate, endDate, timeGranularity, direction, startingAt, limit];
return 'parsley-' + this.group;     },
if (this._isCanceled) {       throw new Error('Failed to cancel InvalidatorSubscription: subscription cannot be canceled twice');     }
function MongooseArray (values, path, doc) {   var arr = [];   arr.push(...values);   arr.__proto__ = MongooseArray.prototype;
inherit(Merge, _AbstractPool, extend({_name:'merge'}, MergeLike)); Kefir.merge = function(agrs) {   return new Merge(agrs); }
var soda = require('soda'),                 browser = soda.createSauceClient({                 url: 'http:                 host: obj.sel_host                 browser: obj.sel_browser                 }),
var rec = new RecordType(this.ctor)   recs.push({ self: this, filteredType: rec })
return this.wait(this.send(msg)).then(() => {         return this.createResultList(msg.oids);
for (var i = 0; i < predef.nametypes.length; i++) {             var nametype = predef.nametypes[i];
this.triggerEvent('destroy', this);   }   this.code = function () {     var isActivated = this.invoke('codeview.isActivated');
}(this, this.ch.$, this.ch));
if (headerOverrides) {                 for (key in headerOverrides) {                     if (headerOverrides.hasOwnProperty(key)) {                         headers[key] = headerOverrides[key];                     }
this.connect = function(...args) {       return getConnectMixin(...[this].concat(args));     };
} else if (typeof opt === 'object') {     for (var key in opt) {         if (!opt.hasOwnProperty(key)) continue;
} else {             throw new Error('Uses require, but no AMD loader is present');           }
var info = {};         for (var i=0; i<namespace_names.length; i++)         {
var isObject = require('./_is-object'); var meta = require('./_meta').onFreeze;
constructor: function CommentCollection(...args) {             CommentCollection.__super__.constructor.apply(this, args);         },
it("should read fields in Table", function(done) {             const groupTarget=file.openGroup('pmc/refinement', CreationOrder.H5P_CRT_ORDER_TRACKED| CreationOrder.H5P_CRT_ORDER_TRACKED);
return asserter.apply(this, arguments);       });
, mikealRequest = require('request')  , superagent = require('superagent'); var globalCount;
$('.star a').bind('ajax:success', function() {     $(this).toggleClass('glyphicon-star');   });
this.unbind();             if(!collection) throw new Error('collection must be defined');             if(!parentEl) throw new Error('parentEl must be defined');             this._collection = collection;
if(!user)             throw new Error("need user");         if(!gistname)
}   splice (...args) {     for (let i = 2, l = args.length; i < l; i++) {       if (!(args[i] instanceof Node)) throw nodeError     }
, self = this    , candidates = this.getCandidates(query)
if (tagName === 'INPUT') {    if ((type === 'checkbox' || type === 'radio') &&! $input.attr('checked')) {     return;
var self     = this
this._addObserverIfNotSpying();     const listeners = get(this, 'viewportListeners');
var variables = {};
onProcessPaste () {     }
class A {constructor() { this.levels = 1; }}     class B {       constructor() {         this.levels++;       }
gifWriter.prototype.createCT = function(frame) {   var sizes    , uniq    , ltable
var Extension = require('./index').Extension;
this.type = type;
var bucketGraphDate = new Date(startTime + (dayMillis * i));                 for (series in resultData){                     if (resultData.hasOwnProperty(series)){                         resultData[series].data.push({date: bucketGraphDate, value: 0});                     }
render: function() {             ParametricResultsView.prototype.render.apply(this);             this.$content.html(this.tableTemplate());
, gameObject                , gameObjectBodyCount            , i, j;
return class TransitionAwareRouter extends RouterClass {     render(...args) {       return <PageContainer>{super.render(...args)}</PageContainer>;     }
class ServicePodConnectionEndpointList extends React.Component {   constructor(...args) {     super(...args);
return this.store_.put(page.serialize());     }.bind(this));   }, this);
}       $el.hide();     });
module.exports.lowerKeys = function (obj) {     var out = {};     for (var key in obj) {         if (!hasOwnProperty.call(obj, key)) continue;         out[key.toLowerCase()] = obj[key];
init: function() {
describe("stability @skip-ci", function () {       let runs = 10;       let text = 'Delhi is New @@@ BREAKFAST-FOOD-0001';
} else {     this.append(`return ${val};`);    }
return function (scene, config) {         var _transform = new Transform(this),             _components = [_transform],             _layer = 1,
}   var windowedSignal = utilities.applyWindow(data, this.windowingFunction);
callback = event.data.callback,                     panel = event.data.panel,                     hasShadow = panel.hasClass(classes.active),
case JSON3.stringify(Number()) === "0":           case JSON3.stringify(new String()) == '""':
if (!callback) return;     callback(e.message);   });
it(NUM_RETRY, "should load", function(done) {       var self = this;       if(url) {
if (typeof source!== 'function') {     throw new Error('SlideViewer second argument should be a generator function!');    }
if (typeof source === 'undefined') {    throw new Error('Missing source parameter');   }
if (value.groups) {           for (i = 0; i < value.groups.length; i++) {             tempMarkup      = tempMarkup + templateGroup;             subDeviceMarkup = '';
beforeEach(function() {       stub(this.controller, 'bindEntityEvents');     });
getAddOverlayData = function() {             var data = [],                 oldData = this.getData();
var concat_node_distro_files = [ 'src/shortjsdoc-header.txt','src/typeParser.js','src/JsDocMaker.js'
var diff     = jsdiff.createPatch(info.outputPath, result.output.toString(), result.input);   var diffPath = path.join(this.tmpDifferenceDir, 'currentDiff.diff');
emit(...args) {     this.get('socket').emit(...args);   },
each(seed.nodes, function(nodeData) {       that.create(nodeData);     }, this);
(function (me){ var wnr = {
var specProps = SchemaOrg["types"][id]["specific_properties"];         for (var p in specProps) {             if (!specProps.hasOwnProperty(p)) continue;             var pId = specProps[p];
if (!stream ||!host)              throw new Error('new Pipe(host,stream[,opts])');
if (subscription == null) {         console.log("can not create subscription");         return -1;     }
format: function (msg, args) {         for (var i=0; i<args.length; i++)             msg=msg.replace('{}',args[i]);
test.get('scope').forEach(function (scope) {       var candidates = DOM.scry(selector, scope);       if (candidates.length === 1) {
if (!conf.bLight)   throw Error("light but updateLinkProofsOfPrivateChain");  if (!onFailure)
var self = this;   this.app.on( 'new_session', function( session ) {     self._create_user_identity( session );   } );
, hyperquest = require('hyperquest')  , defaults   = {method: 'POST', headers: {'content-type': 'application/json'}}
paths = pathHelper.simplifyPaths(paths);         for (let i = 0; i < paths.length; i++) {             const path = paths[i];
var Boom         = require('boom')  , Class        = require('../class')
handlers.forEach(function (handler) {                     handler(...args);                 });
var mixin = require('utils-merge')  , escapeHtml = require('escape-html')
return (this.hasTagsInContent(node) && this.isBlock(node))      || _.any(node.children, (child) => {      return this.isBlock(child);     }, this);
sel.options.length = 0;     const opt = document.createElement("option");                 const ore = Array();                 for(const oKey in this.ore) {                     ore.push(oKey);
if (!style) {     throw Error('Trying to set block style before Blockly.setStyle() has been called');   }
CanvasControl.prototype.constructor = CanvasControl;
onDragStop: function() {             Garnish.requestAnimationFrame(function() {                 this.trigger('dragStop');                 this.settings.onDragStop();
setupController(controller) {     this._super(...arguments);
placeholder="new@user.com"               error={error}             />
var MenuItem = function(domNode) {   this.domNode = domNode;   this.submenu = null;
if (!expanded_set.length) return '';       return char.call(this, randSelect.call(this, expanded_set));
function locationRatingChickController() {         var vm = this;
var args = new Array(arguments.length);     for (var i = 0; i < arguments.length; i++)         args[i] = arguments[i];
var formula = function () { };
renderFilter() {     let model = this.props.model      , filters = model.filters || []
var providers = [];   for(var s = 0; s < services.length; s++)   {
const wrapCBMiddleware = function wrapCBMiddleware(handler, action) {   if (that.options.circuitBreaker.enabled) {    return function circuitBreakerMiddleware(ctx) {
_forwardEvents: function(view, prefixer) {         this.listenTo(view, 'all', function(...args) {             var prefix = _.result(this, prefixer);
let arr = document.getElementsByClassName('dot')         for (let i = 0; i < arr.length; i++) {             arr[i].style.background = '#8492A6'
this.set('boundResize', this.triggerResize.bind(this));     $(window).on('resize', this.get('boundResize'));   }.on('init'),
$toinsert.find( "table" ).addClass("table table-condensed table-nonfluid");     n = arguments[4].length;     console.log ("beautified "+n+" tables in output...");
var requestPromise = PromiseController.create({         promise: this.get('model').save().catch(() => {           if (this.get('model.errors.length') > 0) {             this.set('errors', this.get('model.errors'));
if (!response.is_response(resp)) {           throw new Error("Error: node.js http adapter did not receive a proper response map");         }
, replaceDateHeader = require('./replace-date-header')  , getHttpResponseData = require('./parse-http-response');
el.removeEventListener("touchend", registerCoordinates);     })   };
function _encapsulateTwoParam (context, cb) {     if (func.length === 0 || func.length === 1) {       process.nextTick(cb)
if (this.maintainCollections) {       this.collections = {};     }
loaders: [             {test: /\.css$/, loader: "style!css"}            , {test: /\.scss$/, loader: "style!css!sass"}
withoutConversion(() => {       for (let key in props) {         if (props.hasOwnProperty(key)) {           defineReactive(vm, key, getPropValue(data, key))         }
internals.addMethod(['most'], function (value) {     return this.assert(this._ref <= value, 'be at most'+ value); });
deferred.resolve(remoteContent)     })     this.getRemoteContent(hash)
this.on(configFile.events.end, function () {    fs.rename(path.join(this.destinationRoot(), '.yo-rc.json'), path.join(this.destinationRoot(),'setup.json'), function (err) {     if (err) _this.log('ERROR:'+ err);
function get() {    return this._paddingBottom; }
, path = require('path')  , vm = require('vm'); try {
class NodeHealthStore extends GetSetBaseStore {   constructor(...args) {     super(...args);
{   grunt.fail.warn (icsprintf('yellow', arguments)); };
function L(...args) { if (Ornament.DEBUG) Vex.L('Vex.Flow.Ornament', args); }
},         disable: function(...args) {             return this.applyWidgetFunction('enable', args);         },
ugenInterface[key.substr(1)] = fn(function(...args) {           var tag  = args[args.length - 1];           var instance = ctor.apply(new Klass(name), args);
Error.call(this);     var typeKey = _.first(_.where(_.keys(defs), function(defKey) {
var request = require('request') var should = require('should') var qs = require('qs') var express = require('express')
var PlatformStream = require('stream') var Stream = require('readable-stream') var isStream = require('isstream')
if (e.keyCode === KEYS.SHIFT) {                 $this.data('expandmode', false);             }
varLease = $(this).parents('tr').attr('ip');         if (lease == "undefined"){           Lease = $(this).parents('tr').attr('mac');         }
this.model = (model_!= null) && model_ || (function() {           throw new Error("Missing object model input parameter.");         })();
if (!filename) {       throw new Error(`Cannot find module: ${request}\n`);     }
setTimeout(function() { Tabs.__working = false; }).bind(this), duration);     } else {
var output = config.path.output;
item.GitUrl = gitUrl;      exports.getDefaultSshOptions(serviceRegistry, item).then(function func(options) {       var gitConfigPreference = new GitConfigPreference(serviceRegistry);
if (!input) {           throw new Error('Input does not exist:'+ name);         }
this._element = window;
expect(github.issues.removeAssigneesFromIssue).toHaveBeenCalledWith({
ctx.fillStyle = options.lineColor;  for(var b = 0; b < binary.length; b++){   var x = b * options.width + encoding.barcodePadding;
, configPath    , versionStr   checkPython()
this.on('popoverInitialize', function() {                 var self = this,
function conjunction() {   return OPTREES[this.match(/^AND/i).toUpperCase()];
this.g = newdagre.Digraph();  for (var i=0;i<this.graph.nodes.length;i++) {   var node = this.graph.nodes[i];
currentDoc: null   }
var onDelayTrigger = window.setTimeout( function() {                 that._sendQueriesBatch(as, params, callback, classToDerive);             }, delay);
saveOnUpdate: Ember.on('didUpdate', function() {     if (Tracker.isAutoSaveEnabled(this) || Tracker.isIsDirtyEnabled(this)) {       this.saveChanges();
const panel = this.state.panels[this.state.panelIndex]
.service('global_functions', function() {     this.showTimestamp = function(timestamp) {
}     with(...args) {       return args.reduce((c, m) => m(c), this.superclass);     }
ListBase.prototype.onItemSelectedChange.apply(this, arguments);   setTimeout(function() {    this.updateSelectAllCheckbox();   }.bind(this), 0);  };
keyup: function (e) {             switch(e.keyCode) {
precedence : 0,     method : applyBinary.bind(this, Tone.Divide)    },
for(var k in apiCalls) {       spec = apiCalls[k].split(' ');       for (i = 0; i < spec.length; i++) {         if(types[spec[i]]) {
for (j in that.markers.groupOptions[group]) {         if (that.markers.groupOptions[group].hasOwnProperty(j)) {           marker[j] = that.markers.groupOptions[group][j];         }
function setStateImpl(state, cb) {     if (isFn(cb)) {
}     function notifyOnbind(data) { if (this.__onbind) this.__onbind(data); notifyOnboundedUpdate.call(this, data); }     function notifyOnboundedUpdate(data) { if (this.__onboundedupdate) this.__onboundedupdate(data); }
hasParams(...args) {             return hasParams.apply(this, args);         },
elem.val( value ); }
};     WhileStatement.prototype.getCondition = function(){         return this._condition;     };
var pruned = [];  for (var d in grouped) {      if (grouped.hasOwnProperty(d)) {   pruned.push({ command: grouped[d], description: d });
var cbCount = connections.length, cbIndex = 0;   for (var i = 0; i < connections.length; i++) {    var url = connections[i].url.replace('memcached:
} catch (e) {     throw new Error(filePath +'' + filename +'load failure!');   }
var callback = sinon.spy();     this.srp.identify = callback;     this.expectRequest('register/salt/', "I=user");     this.respondJSON({salt: "5d3055e0acd3ddcfc15"});
, y       = [ 0, 0, 0 ]    , runs    = [ new Run([NEGATIVE_INFINITY, POSITIVE_INFINITY, POSITIVE_INFINITY], -1) ];
this.logger.debug('Found Eureka Server @ ', results);         callback([]);       });
this;   function Swipe(container, options) {
setTimeout(key, fn,wait) {         if (this._timeouts[key]) throw new Error('Duplicate timeout for key'+ key);         this._timeouts[key] = setTimeout(fn,wait);
if (head!= 'BSDF') {         throw new Error("This does not look like BSDF encoded data: " + head);     }
if(!this.published) {    throw new Error("This blog post is not published");   }
var Component = Base.extend(Callback, {  _events: [ 'onChange', 'onClick' ],
var ByteCode = new Array(); ByteCode.codes = {
} else {       data = this.file_.data.substring(0, size);     }
this.file = opts.file   this.query = require(query)  }
return this._config; };
function scrap(from, to, dates, persistData) {         for (let targetDate of dates) {
var validUrl    , invalidUrl
e.target.removeEventListener(e.type, callback);           return callback(e);
try {         return Ext.Element.prototpye.origContains.call(this, match);     } catch(e) {
this.physics.add.collider(player, bottomLayer)   this.physics.add.collider(player, topLayer)
this.model = ((model_!= null) && model_) || (function() {           throw new Error("Internal error missing model input parameter.");         })();
module.exports = Cylon.Drivers.GPIO.MakeyButton;
Ember.TEMPLATES["articles/create"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) { this.compilerInfo = [4,'>= 1.0.0']; helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
if (!darkener ||!navigationContainer) {             throw new Error('Could not find needed elements (Darkener and/or NavigationId)');         }
var onMutated = bind(this, '_onItemSetMutated')    this._itemSetSubs = this.server.subscribeToItemSetMutations(request.id, onMutated,      bind(this,'sendFrame', 'FIN_EVENT_ITEMSET_SNAPSHOT'))   }))
if( gradientColor!= null && percents!= null ) {         gradient = [];         for( var i = 0; i < gradientColor.length; i++ ) {
const nestedVariable = getFirstQuotedString(this.test.title).split('.');  const value = nestedVariable.reduce(   (currentObject, nextKey) =><extra_id_41>[nextKey],
(item.dataSource.entities.values || []).forEach(function(entity) {                             var hash = hashEntity(entity);                             var feature = Feature.fromEntity(entity);
return async function jsonErrorHandler(ctx, next) {     let status;
function getFeatureType(layer, dataStore) {       var featureType = layer.get('metadata').name;
this.contract.reserveTicket.sendTransaction(ticketId, txHash, powNonce, objParam, function (err, res) {         if (this.debug) console.log('reserveTicket result: ', res);         if (err) {
var Collection = require('../src/collection').Collection        , ChangeType = require('../src/changes').ChangeType;     beforeEach(function () {
, "main/contentIO"  , "dijit/MenuItem" ], function(
var ret = [];       for(var i = 0; i < currentLists.length; i++) {         ret.push(new ListsTweetsTimeline(this.template.id + '_' + i, this.tweetManager, this.template, currentLists[i], i));
var results = flattenComponentForCaption(cap.components.children[ii]);         for (var jj = 0; jj < results.length; jj++) {           var result = results[jj];
isData: true,   __path: function(){return '';},
async abort(tx) {         throw new Error('Unsupported operation');     }
speed: 'fast',           display: true         },
if (properties) {     for(var i = 0; i < properties.length; i++){      var name = properties[i];      var value = properties[name];
flexo.then(this.deserialize(child), append);     }).then(flexo.funcify(elem));   }
var util = require('util')  , concat = require('concat-stream');
.bind( "mouseleave", function() {                                 $this.fadeOut( "fast", function() { $this.remove() } )                             });
var model = Model.compile('_mapreduce_' + res.collection.collectionName,           Model.mapReduce.schema, res.collection.collectionName, _this.base);
{  var info = [];
if (partialRightArgs) {         args = composeArgsRight(partialRightArgs, partialRightHolders, args || arguments);       }       if (isCurry && length < arity) {         arity = arity;
updateFavoriteTeams($(this).attr("data-team"), 'add', false);
let args = [parentProto, params].concat(dependants.slice(parentProto.cNumDependants));         return S$.t(...args);     }
animationEvents.forEach(function(evt) {         document.removeEventListener(evt, that.listener, false);       });
if (obj.property.type!== 'Identifier') {     throw new Error('Property should be Identifiers');   }
function onChange(model) {   if (this.contains(model) && this._collection.indexOf(model)!== modelInsertIndex.call(this, model)) {     this._collection.remove(model);
define(Array,'sum', function() {     return this.reduce(function(e1, e2) { return e1 + e2; }, 0); };
var flatData = { data: [].concat(...results) };                         flatData.data.forEach(function (data) {
}         throw new Error("type mismatch on sub: unexpected types  '"                    + t1.repr() + "' and '" + t2.repr() + "'.");
if (that.loops[key] === undefined) {      throw Error("animation loop not found");     }
var password = arguments.length <= 1 || arguments[1] === undefined? "pass1234" : arguments[1];    var callback = arguments[2];    var self = this;
}       if ($this.attr('href') === '#map-panel') {         if (!_this.isOldIe) {
{             StringPrototype.isNullOrEmpty = function ()             {                 return (this == null || this === "");             };
if (elems.length!== 0) {       for (let i = 0; i < elems.length; i++) {         elems[i].style.cssText = "display: none;"
angular.module('umbraco.services').factory('archetypeService', function () {          var executeFunctionByName = function (functionName, context) {         var args = Array.prototype.slice.call(arguments).splice(2);
makeElectorTries(arguments[0].url, {reset: true, priority: 0});         tryElector(url);       } else {
}         this.tableTab.setTable(this.table);         this.mapTab.setActiveLayer(layerView);
</div>         <div className="dib right fr" onClick={toggleMenu}>           <img
constructor(args) {         super(args);         this.setName(_.get(args, 'name', ''));         this.addServiceDefinitions(_.get(args,'serviceDefinitions', []));
if (this.profile._id) {             user = Meteor.users.findOne({ _id: this.profile._id });           } else {
}  checkAssertions(obj, this); });
if ( Number.isInteger(b.re) && b.re <= 0 && b.im === 0 )       throw Error( 'Hypergeometric function pole' );
if (this.data.replyMode) {
var dashboards = result.data;                                         for (var d = 0; d < dashboards.length; d++) {                                             allowedDashboardIds.push(dashboards[d].id.id);
}                     for (var i = 0; i < config.datasources.length; i++) {                         var datasource = config.datasources[i];
for (var key in dataKeys) {    if (dataKeys.hasOwnProperty(key)) {     sumRows.forEach(function (total) {      if (dataKeys[key] === total) {
throw new ArgumentNullException(TARGET);         return target instanceof PromiseBase? target : new PromiseWrapper(target);     }
,sequencer:null
, concatStream = require('concat-stream')  , extend       = require('./util').extend
debug( 'Current value: %s.', this._xAxisOrient );
Context.prototype.run = function() {   for (var key in this.schema) {     if (!this.schema.hasOwnProperty(key)) continue;     var rules = this.schema[key];
onStart (...fns) {     if (fns.length === 0) {
Meteor.publish('user', function(match) {   check(match, Match.OneOf({}, null, undefined));   return Meteor.users.find(
}       latest_login_list = login_list.sort(function(a,b){ return b.name.length - a.name.length });     });
defaulter.set('jsonifyCompilerStats', function (stats) {       return stats.toJson(this.statsToJsonOptions)     })
dc.multiGroupMixin = function (_chart) {     _chart._groups   = [];     _chart._groupGap = 5;
format: function format(args) {             return Array.prototype.shift.call(args).replace(/%s/g, function () {
let types = join(map(validators, "validators.0.name"), ", ");     throw new WatsonsError(`Value at key path '${formatKeyPath(keyPath)}' \ should be one of type [${types}].`);   }
const { writeFile } = require('fs') function robotsModule (moduleOptions) {   const options = getOptions.call(this, moduleOptions)
for (let n = 0; n < clustersToOpen.length; n++) {         this.openCluster(clustersToOpen[n], {}, false );
destroy() {     this._destroy();
});                 if (matchedPhoneNumber && matchedPhoneNumber.phoneNumber!== this.dialInNumber) {                   this.updateDialInNumber(matchedPhoneNumber.phoneNumber);
parentInstance.fire(...args );  });
, self = this
it('client.url() new', function() {     return Globals.protocolTest({       assertion: function(opts) {
b.prototype.elementInActiveFormattingElements = function(name) {  var els = this.activeFormattingElements;  for(var i = els.length - 1; i >= 0; i--) {   if(els[i] == HTML5.Marker) break;
debug( 'New value: %s.', this._title );  this.emit( CHANGE_EVENT ); }
var game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', { preload: preload, create: create, update: update, render: render }); function preload() {
var CliResize = require("cli-resize")  , OArgv = require("oargv")   ;
chatMethods: function() {    return get( this, "settings.content.constructor.chat_methods" );
this.isNull = false;                 for (var key in this.attributes) {                     if (this.attributes.hasOwnProperty(key)) {                         this.attributes[key].update(plainValue[key], setOldValue, this.bubble);                     }
return callback( e );   }
{       name: 'Coffeescript',
})(Issues = exports.Issues || (exports.Issues = {}));
import { remove_items } from "./index";
refreshMetrics();   setInterval(refreshMetrics, 1000); }
exception = _error;                 throw new Error("Error executing error handler function callback: " + exception);               }
RouteController.prototype.init = function (options) {   this.error = options.error;   this._computation = null;
var attributes = {}            , foreignIdentifier = association.foreignIdentifier;           var sourceKeys = Object.keys(association.source.primaryKeys);
app.simulation.run(false)         var link = app.data.links[linkId]         link.disabled =!link.disabled;
Connection.prototype.setCredentials = function(username, password) {   this.credentials = {};   this.credentials.username = username;
constructor(props) {         props = props || { edit: false };         props.className = 'oAuthForm';         this.stores = {
});     var json = {};     json.params = list;     console.log("json: " + JSON.stringify(json));
this.extraVariables_ = {};   }
if (player.paused) {        playButton.addClass('playing');        player.play();
function mousewheel() {     if (!translate0) translate0 = location(e);     scaleTo(Math.pow(2, d3_behavior_zoomDelta() *.002) * scale);
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "ETB", Array.slice(arguments));   },
paths = pathHelper.simplifyPaths(paths);         for (var i = 0; i < paths.length; i++) {             var path = paths[i];
for (var i in options) {                 $currentEl.find('[data-key="' + i + '"]').html(options[i]);             }
this.box0('126:0', side - ( 2 + (i * 2) ), 1, side - ( 2 + ( i * 2) ))      .fwd()
, Marionette = require('marionette')    , RecordsTableRowView = require('views/records/records_table_row_view');
,   'color': '#FFEB3B'                ,   'padding':'20px'                ,   'line-height':'110px'                 }
var n = 15         var c = 1         var ids = []
function StringBuilder(value)  {      this.strings = [];      this.append(value);
throw new Error('User canceled authorization');       }
this.useRefTransfMatrix_loc;   this.useTexture_loc;  };
var combinedTableAttributes = {}       var sourceKeyType = this.source.rawAttributes[this.source.primaryKeyAttribute].type       var targetKeyType = this.target.rawAttributes[this.target.primaryKeyAttribute].type
$.ajax({      url: link.attr('href'),      context: document.body,
this.trigger('sortChange');                 this.settings.onSortChange();             }.bind(this));         },
$(editor).bind('kmlLoaded', function(event, original_event, kmlObject){                         callback(this, kmlObject)                     });
}                         });                         angular.copy(leafletBoundsHelpers.createBoundsFromArray([
Handlebars.registerHelper('each', function(path, options) {   options.hash.contentBinding = Binding.from('*'+path, this);   options.hash.preserveContext = true;
} else if (p[0] === '!') {      throw new Error("didn't handle special property " + p);     } else if (p === "prototype") {
opt_step = 1;   }   else if(args.length === 3 && args[2] === 0) {     throw new RangeError("opt_step can't be 0");
module.exports = Cylon.Drivers.GPIO.MakeyButton;
click: Y.bind(function() {                             this.currentScriptName = prompt('Enter a name:');
_RenderContext.ToArray = function (args) {      var arr = [];      for (var i in args)
bw.displayIngameMessage('it\'s much more sophisticated!', 60000)   var chatStream = bw.chatHandler.grabExclusiveStream()   repl.start({ input: chatStream, output: chatStream, terminal: false })   chatStream.setMessageTimeout(60000)
blogObserver: observer('blog.isResetRequested', function() {         const blog = this.get('blog');
events.forEach((event) => {       emitter.addListener(event, (...args) => {         args.unshift(event);
} else {             return yield* UserBase.prototype.save.call(this, context);         }
render() {         let pads = [];         let popupClass = '';         if (this.state.values.length > 1) {
formatic.form.component = function (field, props) {     field = field || this.run(this.root, this.data);     var view = views[field.type];
var sum = 0.0;       for (var i = 0; i < scores.length; i++) {         sum += scores[i];
$link.remove();   }
this.instance.listen();         Handsontable.editors.TextEditor.prototype.focus.call(this, evt);     };
var stepHandler = function () {             util.batch.apply(util, [beforeHandlers].concat(handlerArgs));
, GeoPackageAPI = require('../../.')  , FeatureColumn = require('../../lib/features/user/featureColumn')
var clean = [];       for (var i = 0; i < cResults.length; i++) {
base: 'SauceLabs'  , browserName:'safari' };
rpcHandler.unregisterActiveLoader(loaderId);         done(null, loader);       });
options = _.extend({reindex: true}, options || {});         if (options.reindex) {           this.shadowCollection.reset(model.models);         }       });
, types = require ('./lib/types')  , sourceExtract = require ('./lib/sourceExtract');
multiply: function (matrix) {       return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))
}   newmoov = concat(...newmoov);   newmoov.set(itobe4(newmoov.length), 0);
if (!this.options.prefix) {    throw new Error('Prefix missing for formset.');   }
var _putIntegrationRequest = function (arn, callback) {
if (!userConfigExists) {     throw new Error('Must contain md-seed-config.js at the project root. run `md-seed init` to create the config file.')   }
var ps=method.head.params? method.head.params.params : null;         if (ps &&!ps.forEach) throw  new Error(method+" is not array ");         if (ps) res=res.concat(ps);
render: function(){     var timeListID = this._id('_time_listbox')      , timeOptID  = this._id('_time_option')      , dateListID = this._id('_cal')
if (pathId_ == null) {               throw new Error("Missing path input parameter.");             }
that.actionsMatching = [];     });
,'reduceRight'      ,'sort'     ]
exception = _error;             throw new Error("openObserverNamespaceState failure: " + exception);           }
console.error(dist);       throw new Error('Enumerate can only be used with distributions that have finite support.');     }
var opts = _.extend({}, assemble.options, options);              var root = path.resolve(opts.root || that.dest.root || assemble.get('root'));
var sign = isRequire? 1 : -1;   _.each(_.flatten(f), function (f) {     if (f instanceof Logic.NotFormula) {
$('.confirm-button').on('click', function(event) {   event.preventDefault();   var $this = $(this);   var isThoughAjax = $this.data('ajax');
var col = {};     col.title =  'Mode';     col.readOnly = true;
commandMenu.style.fontWeight = 'normal';     commandMenu.style.border = '1px solid #dedede';     commandMenu.style.backgroundColor = '#efefef';
return xhr();
var morphs = new Array(morph_ixs.length);     for (var i = 0; i < morph_ixs.length; i++) {       morphs[i] = dom.createMorphAt(dom.childAt(fragment, [morph_ixs[i]]), 0);
this.init = function()         {
function normalize(schema, options) {     options = pick(...[options].concat([         'component',
const props = { visible, setVisible, togglePopover };   const inner = props.children(props);   if (isFragment(inner)) {
, RE_JS_COMMENT_LINES = /^\s*(?:\/\/|#).+$/gm , RE_CSS_COMMENT_LINES = /((?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/))$/gm;
if (this.syncBody) {       this.$.body.observeNodes(function() {         if (!this.__lock) {           this.__lock =!0;
var env = {};
Blockly.Variables.createVariableButtonHandler(this.workspace_, function(text) {         var variable = that.workspace_.getVariable(text, selectedValueType);         that.setValue(variable.getId());
, '')  const script = new vm.Script(stringScript, options)  script.runInNewContext(sandbox)  return sandbox.module.exports
unlinkDataSource(this.ds1, '_link2', this.pathTranslation2);  unlinkDataSource(this.ds2, '_link1', this.pathTranslation1);  this.isOn = false;
(function() {   var SimditorMarkdown,     __hasProp = {}.hasOwnProperty,
if (x === 0) {                 throw new Error("Divide by Zero. Value:<" + x + ">.");             }
var lazy = lazy_require({   VM: ['azk/agent/vm'],
var contexts = context? Array.prototype.slice.call(arguments, 1) : [],         currentState = get(this, 'currentState') || this;
router[method].should.be.type('function');         router[method]('/', function () {});       });
id: id,                             component: that.component,                             time: typeof time!= 'undefined'? time : new Date().getTime()
{         throw new Error("The only and except options can't be used together.");     }
var row = $(this).closest("table").find("tr").index(this);          return false;
$(document).bind('activateControls.templateItems', function(e, opt) {     var groupableItems = [];     $('a[rel=remove]').itemRemove({
seriesGroups[i].attr({        'series-name': that.data.series[i].name       }, Chartist.xmlNs.uri);
console.warn(discarded +'\u5DF2\u7ECF\u88AB\u5E9F\u5F03\uFF0C\u8BF7\u4F7F\u7528' + hook);                 return fn2.apply(instance, args);             }
function handleInjectedCss(style, css) {   watch(css.watch, file => {     const notification = ui.notification('Injecting', file)     log.debug('Injecting style', css.path)
response = taskResponse;                   }                   );
TCPSocket.listen =TCPSocket.prototype.resume =TCPSocket.prototype.suspend =TCPSocket.prototype.upgradeToSecure = function() {         throw new Error('API not supported');     };
inst.animateTo(destPos, 0);
if (!opts.clearDepth.is_constant())             throw new Error("clearDepth must be constant expression");         if (!opts.clearDepth.type.equals(Shade.Types.float_t))
this._destroyed = false;             this.actor.connect('destroy', this._onDestroy);
, thumb_width: 90    , li_height: 90    , li_margin: 10
.textinput();  if ( wrapper.jqmData( "inset" ) ) {   wrapper.addClass( "ui-listview-filter-inset" );
},   reset loaders: function () {     this.loaders = {};   },
ve.init.mw.ViewPageTarget.prototype.tearDownToolbar = function () {  this.toolbar.$bar.slideUp( 'fast', function () {   this.toolbar.destroy();   this.toolbar = null;
tman.it('post /api/echo', function * () {     yield request.post('/api/echo')
function e() {             var e = t.call(this) || this;             return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._layer.addChild(e._img3), e._img2 = new PIXI.Sprite, e._layer.addChild(e._img2), e._img1 = new PIXI.Sprite, e._layer.addChild(e._img1), e._basePos1 = new PIXI.Point, e._basePos2 = new PIXI.Point, e._basePos3 = new PIXI.Point, e._tweens = [], e         }
if (err) { callback(err); return; }           files.forEach(function (markdown, i) {             articles[i].markdown = markdown;
.submit(function() {               var cmd = this.command.value;               $.get('./__debugger__', {cmd: cmd, frame: frameID}, function(data) {
if ((inst = compileComponent(node, vm, scope))) {                     into = false
expression = self.interpolateExpressionVariables(expression, options.scopedVars);                 query.expression = query.expression.concat(expression);
constructor() {         super();         this.isTop =!!super.constructor;       }
data = ['foo',,'false'];         validate(data).should.equal(false);
} var length = f.length; f.length = function(){};
var server = new mongo.Server(options.host, options.port, options.options);
} catch (error) {     exit(1); }
if (currentSelected) {     currentSelected.classList.remove('selected-' + this.type);
return 'unavailable';
};       token = increment();
configure: function (options) {    return this;
(function ($, window, document) {     'use strict';
if (!this.configData.waitToReceiveRimaList){      WhoAmIService.getAll(function(whoAmIsFromServer){
exports.getTestDir = function () {     var testRE = /\/[^/]+\.test\.js($|?.*)/;     if (typeof document!== 'undefined' && document && document.getElementsByTagName) {
if (numTotal > numPassed + numFailed) {    message = (numTotal - (numPassed + numFailed)) + " of " + numTotal + " tests skipped";    console.log(message);
case 'https:':     throw new Error("SSL is not implemented.");     break;
if (req.user.companyId!= app.companyId) {           respond(res, 403)           return         }
export const sendPayment = ({ publicKey, secretKey, sequence, destinationId, amount }) => {   let sourceKeys = StellarSdk.Keypair.fromSecret(secretKey)
return Cluster.resolveContainers(config, cluster, function(err, list) {     self.table.setContainers(list);
return VisitorOption.Remove;                 }
function abortReq() {       var timedout=true;       xhr.abort();
function init(params) {             var fixFlag = [];             if (params) {
})();  var ast_declaration = (function() {
} else {               setTimeout(function() {                 fireDOMContentLoaded();
} else {             new Vue({                 el: '#js-role',
case'major':       return true;     case'minor':
process.exit(1);             }
return function(ctx) {          var r = statement(ctx);
ui.puzzle.setCanvas(pzprv3.getEL('divider'), 'canvas');  ui.puzzle.addSubCanvas();  ui.puzzle.setKeyEvents();
function onMouseDown( tracker, event ) {         var delegate = THIS[ tracker.hash ],             propagate;
window.onload = function() {   var tabId = '' + new Date().getTime();
} else if (lyr.type == 'ESRI Clustered Feature Layer' && esriPluginInstalled) {         layerOptions = _.extend(options, layerParams);         if (layerOptions.createMarker) {
import Class from './Class' export class Action extends Class {   constructor(args) {     super();     const [store, stores, allStores] = [args.store, args.stores, []];
const path = '/v1/ssoconfig'; const ONE = 1;
it('should merge properties', function(done){     app1.use(function(ctx, next){       assert.equal(ctx.response.msg, 'hello');
Subscript,         InlineMath,
this.id = `${this.constructor.name}${ID--}`; }
function userIsServerAdmin(msg, config) {   let permission = msg.member.permission.json;
} export function logEvent(eventName) {
console.error(error);       users.close();       return;     });
addSignature: function (req, cb) {   library.schema.validate(req.body, schema.addSignature, function (err) {    if (err) {
throw new Error('The canvas element parent selector is required when calling `toCanvas`');         }
if (isNaN(this._bias)){         throw this._error;     }
} else {
build = function(opts, foo, bar, baz, what) {   if (opts.debug) {
if (typeof rows === "undefined") rows = self._rows;         var item;         if (data!== null) {
TouchPoint = {     isSafari:!!navigator.userAgent.match(/Version\/[\d.]+.*Safari/),     clickTap: ('ontouchstart' in window? 'touchstart' : 'click'),
}           db.remove(id, doc._rev, function (err, response) {
const { Key, browser, ElementArrayFinder, ElementFinder, WebElement, by, element, $, $$ } = require('protractor'); const { code: htmlDnd } = require('html-dnd');
return config_values; } function decodeConfigValue(proto_config_value) {
if (pos && pos.left) {         this.$('.geocoding-pane-content-wrapper')
getURLOfRemote(remote).then(function (remoteURL) {         var regexParseProjectName = new RegExp(".+[:/](.+\/.+)\.git");         var gitlabHost = URL.parse(gitlabURL).host;
feed.add('msg', 'hello there!', function (err, msg) {       if(err) throw err
settings:"$settings",    id:"$_id"
if(input.toLowerCase() == "ls") {       cli.ls(input);     }
args[1] = this.locationMap[program.__uuid][location.__uuid];        }
fontSize: 28,     background: `linear-gradient(22.5deg, rgba(103, 58, 183,.75), ${colors.deepPurple500})`,
for (var i = 0; i < stack.length; i++) {      line = stack[i]      if (re) {
var done    = function() {};     if (!success) success = function() {};     if (!error)   error   = function() {};
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
a(1,2,3,4)
textOverflow: 'ellipsis',     fontWeight: 'inherit'   },
model = require('./../model/ContainerListXmlModel'); class ListContainers {     constructor() {     }
if (!currentEscape && el === '"' &&!lang) {        el = '"';       }
var self = this;       var success = function(resultSet) {         self._log(resultSet);
const MOZ_HACK_REGEXP = /^moz([A-Z])/; var tbEventDirectives = {};
} else {      trueValue = can.compute(true)     }
$(e.element).find("tr").not(this.settings.exclude).each(function (i,o) {      e.tableRows += "<tr>" + $(o).html() + "</tr>";
default:         break;     }
}; exports.getCanActivateHook = getCanActivateHook;
}     const { path, relative_path, raw_content, content, params } = animation;     const [directory,...rest] = params.splat || [""];     const filename =FilenameFromPath(path);
for (var key in views) {         if (views.hasOwnProperty(key)) {             var view = views[key];             var surfaces = map.getSurfaces();
$scope.checked = true; }
for (var i = 0, l = options.length; i < l; i++) {   if (options[i].load && options[i].load.js) {    for (var j = 0, e = scriptData.length; j < e; j++) {
const target = document.querySelector
html = html.replace(/([\w-]+)=["'](\{[^}]+\})["']/g, function(full, name, expr) {       if (BOOL_ATTR.indexOf(name.toLowerCase()) >= 0) name = '_' + name
insert++;       }
if (!oembetter.inDomain('infogr.am', parsed.hostname)) {       return setImmediate(callback);     }     var matches = url.match(/infogr\.am\/([^?]+)/);     if (!matches) {
"hierarchy.html":[7,2], "index.html":[0] };
case 0:           return 'granted'         case 1:
var Q = require('T/ext/q');
/>);             case 'user':
var self = this         var checkDelete = function (d) {           if (d.length == null) {
testNode.childNodes[0].focus();         utils.triggerEvent(testNode.childNodes[0], "focusin");         expect(model.myVal).toEqual(true);
if (false) {             self.emit(self.EventName_errorWhileBooting(), err);           }
var _ = require("canal-js-utils/misc"); var { Subject, Observable } = require("canal-js-utils/rx");
export default class ComponentDragSource extends DragSource {   constructor(type, spec, props, getComponentRef) {     super();     invariant(isString(type), 'Expected type to be a string.');
}     var import0, import1, styles_Fbnte, RenderType_Fbnte, FbnteNgFactory;     return {
import { apiSync } from 'utils'
initialize: function (args) {       $.extend(self, args);     }
} var XmlParser = (function () {
this._map.addControl(this.drawControls[key]);         }         for(key in this.modifyControls) {             this._map.addControl(this.modifyControls[key]);
return buildParams('', a).join('&').replace(/%20/g, '+'); }
return data   }   async getDestinationsType(local, type) {     const find = {       local,
jscriptVersion = '0.0.1'
this.listeners.handleClick = e => {       const sizeRatio = Math.pow(this.camera.getState().ratio, 0.5);       const quadNodes = getQuadNodes(e.x, e.y);
return font => {         if (!fonts[font.id]) {
{ buf += " " + escHtml(pname) + '=""'; }      else if (val!= null)
Promise.all(promises).then(function(results) {         for(var i = 0; i < array_size; i++) {
const getTextBlockRegExp = () => /\\text\{([^}]*)\}/g;
return ((_.isTypeOf (Error, what)? (what && what.stack) : what) || '').hash },  printError: function (e) {   return [
if (options.contentType ==='multipart\/form-data') {           xhr.setRequestHeader('Content-Type', `multipart\/form-data; boundary=${boundary}`);         } else {
onNewRecordClick: (creds, apiName) => {       dispatch(actions.fetchCreateDefaults(creds, apiName))     },     onCloneClick: (creds, id) => {       dispatch(actions.fetchCloneDefaults(creds, id))     },     onDeleteClick: (creds, id) => {
var request = require('supertest'); var should = require('chai').should();
if ( context ) {    ret = seed?     { expr: parts.pop(), set: makeArray(seed) } :
return promise;  }
settings.headers['Content-Length'] = options.params.length;     }
var fileCache = {}; var dirCache = {}; var tagsCache;
expect(appcache).to.have.property('off');     expect(appcache).to.have.property('swapCache');   });
for (var i = 0, j = tokens.length; i < j; i++) {       var t = tokens[i];
return 'http:   }   if (browser.name ==='safari' || browser.name === 'ie') {     return 'http:
this.search = new SearchBox(this);   this.search.element.style.backgroundColor = Editor.theme.barColor;   this.search.setOnChange(function()
import { BaseCriteria } from './BaseCriteria'; export class MaxTargetPerOrganCriteria extends BaseCriteria {
var ret = new Promise(INTERNAL);     ret._propagateFrom(this, propAGATE_TRACE | propAGATE_BIND);     ret._follow(this);
if (proxy && url.isType(PROXY_TYPE)) {       proxy.web(req, res, {
<td>{currencySign + numeral(amount).format('0,0.00')}</td>       <td><IoIosCloseCircleOutline color="red" size={18} style={{ cursor: 'pointer' }} onClick={() => alert(123)} /></td>     </tr>
actionObjects.push(currentAction);       }
debug.drawEarth =!debug.drawEarth; hit = true; break;
throw new Error(_const.pluginInitFnMissing);    }
this.init();     }     LineMappings.prototype = Object.create(SourceMappings.prototype);
case "200403.11":                 $p.com.alert($p.locale.exception, "warning");                 return false;             case "200403.13":
path = path.pathname.substring(1);     requestPaths = [path];
if ( (match = hostname.match(/^http(s)?:\/\         this.set('secure', ((match[1]||'').toLowerCase() ==='s'));
}     if (s.params.onDestroy) s.params.onDestroy();
var $el = this.$el;     var title             = sanitize.html(this.options.title);     var description       = sanitize.html(this.options.description);     var clean_description = this._stripHTML(this.options.description);
}, timeout);   }
exports.name = '\\/roll'; exports.hidden = false;
let currentUserId; Tracker.autorun(()=> {   if (currentUserId) {       roomStream.stop(currentUserId);
var startThumbDrag = function() {                         mousePrevX = event.pageX || event.clientX || layerX || event.screenX;                         savedVal = selValue;
import configIos from './config-ios'; appConfig.beta = true;
process.exit(1);   }
this.combYZmax = commonMax(y, z);
var i, j;
const matches = /^\${([^"]*)}/.exec(location);   return matches    ? process.env[matches[1]] + location.replace(matches[0], '')
'As of': 'As of',     'Saved': 'Saved',     'For this search': 'For this search',
}, {       requires:['base','node','../../../pub/utils/global','../../../pub/utils/svgelement','../../../pub/views/infos/infos','../../../pub/models/eventtype','../../../pub/views/line/core','../../../pub/views/layouts/style1/main'       ]
const appliedClassName = className || 'hovering';     const includeClones =!excludeClones;     const includeChildren = restriction!== 'directParentsOnly';
$scope.saveCalendar = function() {             $scope.calendar.ingaSave($scope.back);      };
},             presenterType: "VerticalTablePresenter"         },
goog.module.ModuleLoader.prototype.codePostfix_ = null;
}       break;     case tt.parenL:       this.next();
loader.fire('provide', mod);  }
(function constructor() {
class Text extends TelegramMessage {   constructor(text) {     super()     if (!text || typeof text!=='string')
QUnit.test("Pips: Count, stepped", function (assert) {     assert.expect(0);      var slider = test_slider({
}     context.trackVariablesChange(prop, vars, valueGenerator);   }
let el = this.returnFocus || document.activeElement || null
function setAttr(node, name, val, asProp, initial) {  var el = node.el;
var minPassLength;     var emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
getID(instance) {     return (this._collection.findOne({ _id: instance }))? instance : this.findIdBySlug(instance);   }
throw new Error('Song constructor called with invalid backend:'+ song.backendName);         }
appliedFilters = this.getUpdatedAppliedFilters(payload, appliedFilters);     });
let full_accounts = {}          for( let account in next_props.full_accounts )             full_accounts[account] = ChainStore.getAccount( next_props.full_accounts[account], this.update, true )
return this._wrop("add", [obj], function (e) {                 var keyPath = req.source.keyPath;                 if (keyPath) obj[keyPath] = req.result;             });
import React, { Component } from'react' import SectionLayout from '../../SectionLayout'
if(this.target) {     if(newMedia) {       this.killPopcorn();
setProperties(o, p);           } while ((p = gPO(p))!== undefined);           return o;
return state;   } }
token: "0x000000000000000000000000000000000000000e",     },     assertions: (err, accountTransferHistory) => {       expect(err).to.be.false;       expect(accountTransferHistory).to.equal([]);     },   });
import Box from'reakit/Box';
} module.exports.Notebook = Notebook;
},             resample: function(oldMatrix) {                 var columnsNumber = this.width;                 var newMatrix = [];
list.children.forEach(c => {
if (opt.options.list) {     org.kvms.get({}, function(e, result){         test.assertHttpStatus(200);     });
return memberName in actual;             } catch (e) {                 return false;
var ast = new AST();
import { ArgumentException } from "./ArgumentException"; const NAME = 'ArgumentNullException';
getVideoMaxBitrate() {     warn("getVideoMaxBitrate is deprecated. Use getMaxVideoBitrate instead");     return this.getMaxVideoBitrate();
setTimeout(function() {     error = customError = listener = null;    }, 10);   };
return weekNum; } function isLeapYear(year) {
var node = window.contextVars.node;             return {
let match = /<!--StartFragment-->(.*)<!--EndFragment-->/.exec(html)       if (match) {
x2: 0,      x3: 0     },
context.log(err);        self.emit(self.EventName_errorWhileBooting(), err);        context.done();     });
var routeStripper = /^[#/]/;
this.input = doc.getElementById("wmd-input" + postfix);      }
this._load_sequence();   var cache_transaction = function(transaction) {     var transaction = TransactionManager.normalize_transaction(transaction);     var sequence = transaction.tx_json.Sequence;
getAlgorithmByOID,   getCoin,
return value +'' + arg;             default:
let allImg = true;             for (let file of files) {                 if (file.type.indexOf('image/')!== 0) {
varSleeping = require('../core/Sleeping'); var Common = require('../core/Common');
return ((Math.abs(value) < 10)? "0" : "") + Math.abs(value); }
this.current = this.items[n];       this.render();
}); EG.Model.reopen({
editor.autocomplete({
this.oDate = this.createDate(Date, aArgs);    this.sCalendarType = CalendarType.Buddhist;   }
ve.ce.Surface.prototype.onCutCopy = function( e ) {  var _this = this,
ok(true, 'before play deferred invoked');         setTimeout(function() { js.stop(); }, 3000);     }).callAfter(function(completed) {
_afterFocus : function (_, element) {    element = Aria.$window.document.getElementsByTagName("input")[0];    var active = Aria.$window.document.activeElement;
case 'info':                         log('info', 'info');                         break;
idleQueue._iC.delete(promise); }
beforeEach(ngMock.module('kibana'));       beforeEach(ngMock.inject(function (Private) {         metricAggs = Private(require('ui/agg_types/index')).byType.metrics;
var named =!!program.named var recursive =!!program.recursive
try { let a =!define && linkifyElement; } catch (e) {}
}); }); describe('atomic using redis (callback)', function () {   var limitToOne;   beforeEach(function (done) {
} = node;          if (isTryTo(id))
function change(previous) {         var difference =Difference(previous, history.graph());         dispatch.change(difference);
});   });   return wikidataapi.getEntityPropertyClaims(resultEntities,language).then(function(responses2){
var expect = require('chai').expect;    var tree = require("../tree-surgeon.js");
case 2:                  for (t2 = 0; t2 < maxWidth; t2++) {                   row[offsetT + t2] ^= symbolRow[t2];
uksort($data, function (key1, key2){ return (key1 === key2? 0 : (key1 > key2? 1 : -1)); })     var expected = {a: 'orange', b: 'banana', c: 'apple', d: 'lemon'}
} else {                 mark = {                                 "type": "line",
if (color.length === 4) {         var r = function (x) {return x.toUpperCase() + x.toUpperCase()}         return '#' + r(color.charAt(1)) + r(color.charAt(2)) + r(color.charAt(3));
.replace(/([^/])(\/(?!\*|\/)(\\\/|.)+?\/[gim]{0,3})/g, function(match, $1, $2){                 primatives[primIndex] = $2;
}   } while ((node = node.parentElement));
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/door_key_8-1334258086.swf",  admin_props : false,
mc = PrimeFaces.util.MessageContext,             locale = PrimeFaces.locales[PrimeFaces.settings.locale];
}   nextTick(wrap(done)); }
delete cache_[ _key.toString() ];              }
const NUMBER_PROTOCOLS = 4
var projectRoot = ProjectManager.getProjectRoot(),             filesToOpen = [],
};     return fetch(config.apiUrl + '/users/' + user.id, requestOptions).then(handleResponse); }
lastIndex = i;         return;
}catch(e){    return false;
this.socket.onerror = function (ev) {                 self.onErrorHandler(ev);
test: /\.svg$/,         include: [resolve('src/assets/icons'), resolve('src/assets/images')]
var nodeBuffer = [];                   for (i = 0, li = replay.nodeBuffer.length; i < li; i++) {                 tile = replay.nodeBuffer[i];                 nodeBuffer.push(tile);
while ((ch = stream.next())) {    if (ch == '"' || ch == "'") {
if (args[0].match(/node[.exe]*$/)) {     args = _.drop(args, 2);
const REGEX_SPACE_S_FILTER = /([(,|])[\s]+/g; const REGEX_PROP_FILTER = /\.([a-zA-Z_$#][^\s./,[\]()'"|#]*)/g; const REGEX_ARRPROP_FILTER = /([^\s([,])(\[)/g;
item.updateConnectedEnds = function (vertex0,vertex1) {   let updated = [0,0];
var a = 0;      data = data.splice(0, 25);      for (k = data.length; k < 25; k++) {       data.unshift(0);
this.syncPoint = 0;   }
if ( expect === false )           {             window.location.reload( true );           }
value: 'SNAPPY',                         description: 'Desc'                     },
if ((cap = this.rules.html.exec(src))) {       src = src.substring(cap[0].length);
import {applyMiddleware, combineReducers, compose} from "redux"; import promiseMiddleware from "redux-promise-middleware";
fs.readFile(generatedFile, function (err, data) {       var expected = fs.readFileSync(expectedFile);
}); }; module.exports = ObjectLinkToMultimediaHasTextTranscript;
_value = parseInt(_value, 10);                 if (isNaN(_value)) {                     _value = null;
getConfig:getConfig,             on:on,
return "Parse tree: " + parseTree.toString(type);    case "dependencies":
templateElem.spread[name] = true;     return;
CardTitle,   CardBody,
Debugger.prototype.addProvider = function (type, obj) {   this.debugger.addProvider(type, obj)
return this;     }
&& this.authorizer.isPermittedAll(permissions);  }; }
idx = list.length;     }     if(!list[ idx ] ){
view : function (ctrl) {         return m('.fb-project-organizer#projectOrganizer', ctrl.tb);
if (!unallowedCharacters) {     unallowedCharacters = /[/@\s+%:.]/;   }
sFormatted  = sFormatted.replace( this.Regex.BlocksOpener, '\n$&' ) ;
+', dampingLaw: '+this.dampingLaw.toStringShort()       +', gravityLaw: '+this.gravityLaw.toStringShort()       + NewtonsCradleApp.superClass_.toString.call(this); };
this.orig_prefset = null;     if (usesDeck) {
var node = nodeView.node;   var typeDescr = node.constructor.description;
steal('can/model',function(){     'use strict';
if ($$logging.get('screenshots').enabled) {             var filename = $$logging.get('screenshots').filename.replace('{date}', moment().format('YYYYMMDDhhmmss'));
if (nodes.filter('table').length > 0) {         rows = nodes.filter('table').find('tr');         var pos = exports.selectedPos();
console.log(contract.tally);
class Polling extends EventEmitter {   constructor (options) {     super()     this._options = options
this.availableZoomsForFetch = [];             for (i = 0, len = (arrBefore.length + arrAfter.length); i < len; i++) {                 if ((i % 2 && arrBefore.length > 0) || arrAfter.length == 0)
wipController.$inject = ['$scope'];         function wipController($scope) {
});   for (var field in ev) {     evtJSON[field] = serializeEventVal(queueIndex, ev[field])
return deferred.promise; } module.exports = {
'Decrediton', 'rpc.cert');     } else {         certPath = path.join(process.env.HOME, '.decrediton', 'rpc.cert');     }
blockGroup.blocks.push(block);             }             blockGroups.forEach(function (blockGroup) {
function storeCurrentJSBuffer() {         if (CodeEditorIntegration.setDirty) {
function init(){   heroContentFade(); }
var _modules = this.modules;       for (var module in _modules) {         if (_modules.hasOwnProperty(module)) {
for (var j = 0; j < Sk.builtin.range(start, l,-1).v.length; j++){             a.setitem(p, a.getitem(p-1));
this.keyboard.terminal.scrollPageUp();   return KeyActions.CANCEL; }
var innerResponse = normalizeRequest(request_);         if (innerRequest.error) {             errors.push(innerRequest.error);             break;
]).then(function(data){       var result = data[0].rows       var pkeys = data[1].rows.map(function(r){         return r.attname
bodyParams = request.data;   if(bodyParams.length!==0) {
require('./methods/out')(Terms); require('./methods/replace')(Terms); require('./methods/split')(Terms); require('./methods/transform')(Terms); require('./methods/lump')(Terms); module.exports = Terms;
});   if (existingDatabase) return;
return!(countryCode === "GB" &&!ukPostcode.fromString(postcode).isComplete());   }
view.getUint8(2)!=70||   view.getUint8(3)!=3){   throw new Error();   return null;  }
var deferred = $q.defer();         chrome.runtime.sendMessage({action: 'copy', params: [value]}, function () {             deferred.resolve();
corsPreflightReferrer("Referrer policy: unsafe-url", corsUrl, "unsafe-url", "myreferrer", new URL("myreferrer", location).toString()); done();
componentDidMount() {         this.updateOnOrDirty(this.props.projectStudios, this.props.myStudios);     }
log.debug('正在检查更新...');     pkgJson('feflow-cli', 'latest', registry).then(json => {       const version = pkg.version;
import { wrapper } from './styled';
} } var InstToProfile = true;
} else {       searchEngine = require('./searchT.js')       searchEngine.latest(function (data) {
Port.prototype.isEqualTo = function(port) {     if (! (port instanceof Port) ) {         return false;
tyrant.putcat('key1', '+Second Value');   tyrant.get('key1').addCallback(function(value) {sys.puts('Result : '+value);}).addErrback(function(error) {sys.puts('Error : '+error);}); }
var is_file = output.indexOf(".js", Math.max(0, output.length - 3)) > 0;   if (forceUpdate && is_file) {     stream = stream.pipe(newer({ dest: osPath.join(DEST, output) }));
var visitNode = function visitNode(path) {         if (path in deps.written) {
_setSessionVariable: function( variable, value ) {             this.cookies[variable] = value;         },
(function(x) {
if (typeof window.define === 'undefined') window.define = Famono.define;
$listpeopleinnodePeopleContainer.html($.TemplateRenderer(listpeopleinnodePeopleTemplate, results));         }
import HubSidebar from './hub-sidebar'
describe("Numeric Analysis", function () {     varfft = fidola.numeric.fft,         ifft = fidola.numeric.ifft,
for (;;) {     hillclimb({
var spec = this._getHTMLSpec();       if (!(view.getName() in spec)) {         throw new Error("invalid tag");
var respond = function(req, res) {     _sender.produce({topic: req.$inf.respondTo.topic, partition: req.$inf.respondTo.partition}, JSON.stringify({response: res, $inf: {type:'response'}}), function(err) {
case MediaPlayer.rules.BaseRulesCollection.prototype.ABANDON_FRAGMENT_RULES:                     return Q.when(adandonFragmentRules);                 default:
let openExternal = (url) => {   var shell = window.require('electron').shell;
if(goog.isString(route))         route = new RegExp('^' + goog.string.regExpEscape(route).replace(/:\w+/g, '(\\w+)').replace(/\*\w+/g, '(.*?)') + '$');     this.routes_.push({route: route, callback: fn});
log('\n' + consts.MODULE_INFO);   log(msg + '\n');   return;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/wavy_gravy-1334214775.swf",  admin_props : false,
}       break;     case'mount':       entity = nearestEntity("object");
let expiresAt = JSON.parse(localStorage.getItem('expires_at'));       return new Date().getTime() < expiresAt;     }
app.use(function(ctx, next){
const MP_REGEX = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,}$/g const URL_REGEX = /[-a-zA-Z0-9@:%_+.~#?& const responsesS = {
app.controller('EditController', function(Session, $state, $interval, $scope, $http) {  $rootScope.$emit('titleChange', "Edit")     var f = function() {
domClass.add(next[0], type);                 next[0].offsetWidth;
var getCanvasByIndex = function(index) {       return self.canvasObjects[index];     };
})                                               .catch(softThrow);                                       break;
this.setState(Object.assign({}, this.state, {       innerWidth: this.innerWidth     }))
builder.scale({maxWidthPercent: maxWidth, unit: unit}); }
if (!data.length) {           err = new Error('The list is empty.')           callback(err)
if(typeof since === 'function' && since.modelName) {     targetModel = since;
import Story from '@lskjs/dev/Story'; const action = name  => (...args)=> console.log('[' + name + ']',...args)
res.loadAssets(() => {     const game = new Game();
ME: `${API}/users/@me`,  ME_CHANNELS: `${API}/users/@me/channels`,  ME_SERVER: (serverID) => `${Endpoints.ME}/guilds/${serverID}`,
fs.ensureDirSync(root + "/static");
j = i;                 }
}         for (;;) {             visited.push(el);
generateRelations.track((data) => {                 result.addNetwork(data.nodes, data.edges, {groups: data.groups});
keyPressHandler(ev);  }
import { createStore } from'redux' import defaultBusAdapter from'resolve-bus-memory'
onXHRDone: function(xhr) {    doneBuffering = true;
if (templateResult instanceof goog.soy.data.SanitizedContent) {     var ContentKind = goog.soy.data.SanitizedContentKind;
else {                                                  if (options.treePath!== undefined) {                                      path = options.treePath;                         }
_createCookieFromData(data) {     const target = SDK.targetManager.targets(SDK.Target.Capability.Network)[0];     const cookie = new SDK.Cookie(target, data.name, data.value, null);     cookie.addAttribute('domain', data.domain);
},   'Click on choose layout': function(client) {     var PO = client.page.chooseLayout();
var stateManager;   if (this.objects.hasOwnProperty(id)) {    if (callback) {     callback(false);
c = new MathLib.Complex(2, 5),    d = new MathLib.Complex(3, 6),
if(time_format === '24'){     times = options.times || ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"];
var loadSubModules = function (parentModuleInfo, subModulesDescArray, cb, customModules) {         var subModulesDescArrayLength = subModulesDescArray.length;
])  })(jsPDF, typeof self!== "undefined" && self || typeof global!== "undefined" && global || typeof window!== "undefined" && window || (Function ("return this"))());
import React from'react' import { blueA400, grey500, grey600, blueA100 } from'material-ui/styles/colors' import sizeMe from'react-sizeme'
if( typeof callbackFunction === 'function' ){             callbackFunction( thisElem, url );          }
import ButtonIcon from 'ui/components/buttons/flavors/icon/index.react'; import { prefix as pf } from 'app_modules/ui/util/component';
"it throws an ImmutabilityError when you try to call its shift() method": {     predicate: function(array, args, shiftArg) {
Explorer.currentHighlight.style.backgroundColor = 'rgba(0,0,0,0)';         break;       default:         }
click = false;     }
return [       mwcRouter, AppState     ];
console.log (typeof __undefined__);
}                     let max returned =                         Number(this.nodeConfig.output_results_count) || 1;
import ChartsContainer from '../../../components/charts-container'; import Fills from '../../fills/components/fills';
specStarted: function(result) {        },   specDone: function(result) {
this.out.unlinkSync(outputRelative);
import React from'react' import PropTypes from 'prop-types'
var input = ".test1 { background: url(\"test1.jpeg\");()" +         ".test2 { background-image: url('test2.png\'); }";     var output = ".test1 { background: url(\"test1.jpeg\");()" +
shortcuts.forEach(shortcutUrl)     Mousetrap.bind('shift+w', openApp);
while ((test = me.tests[i++])) {         if (test.cycle) {
}     window.location.assign(`${window.location.protocol}(...arguments)`)   };
} catch (err) {       msg.say(`**${user.username}**, you failed to catch a pokemon :cry:`);
var LoaderModule = (function() {   'use strict';   var modules = ['game', 'cookiedata', 'controls'];
}       x = depth*horizontalSpacing;       y = ySum/block._outConnections.length;     }
return result + "</div>";       },
const c = h;         for (let i = 0, len = order.length; i < len; ++i)             c = hamt.remove(keys[order[i]], c);
const ele = (arr, i) => arr[i % arr.length]; const frame = i => ele(styles, i)(ele(spinners[ele(keys, i % step === 0? index++ : index)].frames, i));
setTimeout(function(){             casper.evaluate(function(){                 localStorage.clear();             }.bind(this));         }, 3000);
handleUrl(url.href, reply);   } }
import React from'react'
console.info.restore();         });
} else {      return Object.assign(data, file.data)     }
export const earnExp = (exp) => ({  type: 'EARN_EXP',  exp
return result;   }
}          i = m_opCache.length - 1;          while (i >= 0) {
var data = {};     $.each(schema.pages, function(i, page) {
viewOpenRoomScreenAnimation() {     return new Promise((resolve) => {       this.communication.chooseClosestServer().then(() => {
config.pkg = loadJSON('package.json', {cwd: config.cwd});   if(config.pkg.ngfactory) {     log('Using ng-factory config from %s', chalk.magenta(tildifyCwd('package.json', {cwd: config.cwd})));
throw Error('Did you pass in an Element?'); }
} else {         if (traverse === document ||           (shadowRootAvailable && (traverse instanceof SShadowRoot)) ||           (parent && parent.__redom_mounted)
patterns: [                         {                             match: /var version = '[.0-9]*';/g,                             replacement: "var version = '" + iopackage.common.version + "';"
});   }   localStorage["missingSharingLink"] = true;   version = "v6";
function getTextSizeForWidth(text, font, width, minFontPx, maxFontPx) {         var s = font.replace("?", maxFontPx);
function process(context) {  return { message : this.fail };
const users = rhf.getValues({ nest: true }).users;   const hasDuplicate = ({ lastname }, index) => {
case FV_WORD_UPDATE_ERROR:       case DISMISS_ERROR:
this.lastHash = hash;       this.store.setItem('bkp.next.piskel', this.piskelController.serialize());       this.store.setItem('bkp.next.info', JSON.stringify(info));     }
case "developer":       return "icon-file";     case "developer-code":       return "icon-code";
handleMessage(uid, obj) {     let msg = obj.body.toLocaleLowerCase();     let command = msg.split(" ")[0];     if (this.cmdPrefix) command = command.replace(this.cmdPrefix, "");
server.listen(options.port, function(err){                  if(err){ return callback(err); }
}; pagespeed.LocalStorageCache.prototype.getData = pagespeed.LocalStorageCache.prototype.getData; pagespeed.LocalStorageCache.prototype.replaceLastScript = function(a) {
} catch (e) {         this.setErrorMessage(e.message);       }
FilterActions.saveSession();       }catch(e){}     });
throw "Unrecognized mnemonic language"     }
</FormField>           } />
exports.default = Person;
cell = start && domUtils.findParentByTagName(start, ["td", "th"], true);              if (cell) {                  return -1;
})(jQuery);
}  authz.addUserRoles(owner._id, ['owner'], room._id);  if (type === 'c') {
$(function(){   var doc = $(document);
var processOptions = (function(config) {   var options = extractOptions(config);
arr = new Uint32Array(arrayBuffer, offset, length);          break;      case 'FLOAT':          arr = new Float32Array(arrayBuffer, offset, length);
id: 'containers.AgentPage.create_agent.use_postFormat',
}    } else if (msg.event === "testDone") {     results[msg.data.module].push(msg.data);    } else if (msg.event === "done") {
return this.length;   }
</TouchableHighlight>     );   }
const vscode_1 = require('vscode');        String.prototype.replaceAt = function (index, character) {
if (isRoutePresent) {     route.routePresent = true;     ui.setRouteIsPresent(true);
case ActionTypes.SIGNOUT_RES:         err = action.data;         if(!err){           UserStore.emit(ActionTypes.SIGNOUT_RES);
(err, resp) => {           res.send(resp.body)
that.hover(hoverHeight, position);     }
node.position(pos);                         } catch (e) { console.log(e); }                     });
Babel.prototype._generateDepGraph = function() {   var residentImports = this._cache.keys().map(byImportName);
collision = true                   self.postMessage('{"command": "entity-user collision", "data":{"position":[' +obj.position[0] + ',' + obj.position[1] + ',' + obj.position[2] + '] }}')               }
return stream; }
var model = this.model = {};         var add = function (name, edgeModel, extensions) {           if (edgeModel) {
return prev;   }, []); } function join (args, quote) {
numbro.version = VERSION;
break;     case Array.isArray(type) && type[0] === 'any':       if (isMethod) {
return "ironscript.runPackage("+JSON.stringify(ps)+");"; }
var argc = ns['argc'] = arguments.length         if (fixedArgs) {           argc = ns['argc'] = fixedArgs;         } else {
constructor() {     super();          this.poolActivity = {};
function modelHasAttributeOrRelationshipNamedType(modelClass) {   return (
var isHost = require('./isHost'); if (isHost.method(window, 'getSelection')) {   module.exports = getSelectionRaw;
let key   while ((key = keys.shift())) {     yield [key, object[key]]
},     test('word tables are converted to html tables', function() {         var docxPath = path.join(__dirname, "test-data/tables.docx");         return mammoth.convertToHtml({path: docxPath}).then(function(result) {
if (!this._alwaysOnTopWindow ||!this._alwaysOnTopWindow.document) {             return null;         }
return num / 16384;        var intg = (num >> 14);    return (intg>0)? (intg+frac) : (intg-frac);   },
host : req.protocol +'            type :  parts[2] || '',
acc_x += 3;         Flow.renderGlyph(this.context, acc_x, acc_y,                              this.render_options.font_scale, this.paren_left.code);
setTimeout(function () {         for (var i = _doneWorkers.length; i--;) {
if (/^['"](?:[a-zA-Z][a-zA-Z\d-]+)['"]$/.test(value))         return '[' + key + '=' + value.substring(1, value.length - 1) + ']';
var updateSelection = function() {     selection.style.left = selectionArea.x + 'px';
ia = aindex[ka];
html += "<h3>Variables</h3>";   objs = this.getByType(o$, "global");   for (i=0; o=objs[i]; i++) {    html += this.presentComment(o.comment);
throw new TestFailureError(errorMessage || 'Condition expected to be true');         }     },
var amount = this.amount.v;     if(amount!== 0){         this.isSpentTX = true;     }
returnLast_FM_SECRET &&Last_FM_KEY && this.session_key;   }
beforeEach(function() {       $ = adapter.name === 'jquery'? jQuery : Zepto       Waypoint.Adapter = adapter.Adapter
function Axis (plot) {     this.showTicks = true;
panel.on('mouseenter.trace3d.trace3d_igv_panel', (event) => {             event.stopPropagation();
rows: rows   },   hideMap: () => ({     showLeaflet: false
export default class KnotInput extends Morph {   get input() { return this.get('#input'); }
if (browser.mozGetUserMedia) {       callback(null, 'firefox', {
trace( "Bug? already seen request" );
});     $(document).on("click.button.uikit", "[data-uk-button]", function() {         var ele = $(this);
import React from'react' import { useI18n } from 'core/i18n/i18nContext'
;                 ;     })(M.eM || (M.eM = {}));
var testReadLongPtrAsync = async(function *(declaration) {             const readLongPtr = lib.interface.readLongPtr;             assert(_.isFunction(readLongPtr));
}catch(e){           log.error(e);
connections = JSON.parse(localStorage.connections);       } catch (e) {}       connections = $.isArray(connections)? connections : [{}];
return function() {    global.POST('/api/cmd/' + cmd);   };
$fileInput.duOption('limit', autostartOn? false : 5);              if (autostartOn) {                  $fileInput.duOption('limit', 1);              } else {
{                 if(account.txs && blockstrap_functions.array_length(account.txs) > 0)
throw new Error("LUA_TCCL not implemeted yet");         case CT.LUA_TLCF:
}   if (hasTransformer) {
'use strict';     var App = React.createClass({
console.log("Someone is calling me;)");       now = new Date();          return now.toISOString();
var f = features[i];
}; const statistics = async (req, res) => {   try {
}],                 options: {                     replacements: [{                         pattern: /\"version\":\s\"[0-9.a-z].*",/gi,                         replacement: '"version": "' + grunt.option('newver') + '",'
options = options || {};             if (!loader ||!(jqLoader instanceof $) || jqLoader.attr('data-skip-enhance') == 'true') {                 return;
display.input.focus()     doc.history.lastSelOrigin = null
this.name = name || `Extension#${this.id}`;   this.name_key = name_key || this.name.replace(/[^A-Z0-9_-]+/g, '').toLowerCase();   if ( /^[0-9]/.test(this.name_key) )
if (mutationDataType === "SV") {
import: 'import',     sourcecodes:'sourcecodes',
let match = null;   while ((match = regex.exec(string))) {     matches.push(match);
var opts = {}; opts.el = document.createElement('div'); opts.el.textContent = "loading";
module.exports.process = function(context) {  if(context.options.emit) context.options.emit(this.emit, this.channel);
if (typeof value === 'number') {   return formatNumber(fn, value);  }  if (typeof value === 'bigint') {   return formatBigInt(fn, value);
var $transitions = $injector.get('$transitions');         $transitions.onStart({}, verifyState);       } else {
if (variant.enabled) {           var first = variant.capabilities.table[0].join("|");
{expected:expected, actual:actual});     }     expose(assert_greater_Than, "assert_greater_Than");
auth.login(user, function(data) {
var length = items.length   var commandName = command[0].toUpperCase() + command.slice(1)   console.error('\n%sed %d dependenc' + (1 == length? 'y' : 'ies'), commandName, length) }
geometryWireframeButton.addEventListener('click',     () => {       const selectedGeometryIndex = store.geometriesUI.selectedGeometryIndex;
if (options.debug) {       data.debug = steal.toJSON(deepExtendWithoutBody(currentData));
'Technical Analysis: HT_DCPERIOD': 'data',   '1. Information': 'information',
var bignumber = 31363200000;   assertEquals(m[p], Math.round(bignumber/864E5)/7)+1, 52); }
}           catch (err) {             logger.log("Offline Persistence Toolkit simpleRestJsonShredding: Error during shredding: " + err);           }
})       linkingModel = mongoose.model('user_group', linkingModelSchema)
module.exports = function (hookArgs) {     const pluginRoot = path.join(__dirname, "..", "..");
export function extent([array, accessor], options) {   if (accessor) {     array = array.map((d) => get(d, accessor));
throw new Error("[captcha_bypass]: attempted sec1DecodePoint with incorrect tag: " + p);     }
let list = [];         Mouse.setFromCamera(new Vector2((event.clientX / window.innerWidth) * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1), camera);
shell         = require('shelljs'),     platforms     = require('../platforms'),
var originalTimeout;     beforeEach(() => {         originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
}     else if (this.$helperText) {
var JSSourceFilefromCode,         textDepRegExp = /["'](text)!([^"']+)["']/g,         relativeDefRegExp = /(require\s*\.\s*def|define)\s*\(\s*['"]([^'"]+)['"]/g,         cssImportRegExp = /@import\s+(url\()?\s*([^);]+)\s*(\))?([\w, ]*)(;)?/g,
module.exports = function () {};
}       setStyleFunction(def, vectorStyleId, vectorStyles, layer, state, day);     }
if (rootElem.className.search(new RegExp('\\b' + klass + '\\b')) >= 0) {       return Rx.Observable.fromEvent(rootElem, eventName);
rows.push(row);  let rowLength = 5;
this.paste = function() {     var doc = this.__document.startSimulation();     var sel = new Selection(doc, this.selection);
module.exports.process = function(context) {  var err, actual, expected;
return new Promise(function (resolve, reject) {             var xhr = new XMLHttpRequest()             function responseURL() {
console.log('   -sp --sourceFilePrefix <path to sourcefile> The relative path to the original source file for use in the coverage results.');                     break;
};   ExampleUI.setupStandardControllerUI(g_client, globals);
import React, { Component } from'react'; import TopBar from './TopBar';
}else if(length > 0){                 output =TM.renderTplById('timelineTemplate',renderData);                 $$('#ourView').find('.time-line-content').prepend(output);
self.toggleProperty('submitting');                  });
constructor(src, size, topLeft) {         super();
for(i;i<len;i+=1){         path = createNS('path');         groupPath.appendChild(path);
return [ loop, mid ]                 callback(null, mid)             } else {
function positionMenu(el, opts) {       if (opts.isRemoved) return;
function opmlGetOutlineObjects(doc) {   const elements = opmlGetOutlineElements(doc);   const objects = [];
})         break       default:         console.log(`No special handling of topic=${topic}`)
var xRadius = (1 / x) * (this.drawingArea / 2);        x = this.drawCenterX + (this.drawingArea / 2);         y = this.drawCenterY - xRadius;
diffPrimitive(context, expected, actual);       break;     case 'function':       try {
{         var colorTop = this.getInnerColorTop();         var colorRight = this.getInnerColorRight();         var colorBottom = this.getInnerColorBottom();         var colorLeft = this.getInnerColorLeft();
console.log('Failed'.red +'to fetch challenges from API!'+ error)       return Promise.reject(error)     })
let config = require('./config') config.commandDir = require('path').join(__dirname, config.commandDir) const c = new Yuuko(config)
return route('get', path); }
if (this.options.showLoading) {                     this.element.removeClass(Titon.options.loadingClass);                 }
let context = this.forward(stream)     if (stream.eol()) { this.forward(null) }     for (; context; context = context.prev)
.addClass('btn waves-light waves-effect')                 .text('close')  .addClass('btn waves-light waves-effect')
console.log('Unmatched:', errorType, errorDescription, errorRe);     };
var match = semver.maxSatisfies(versions[key], peg);
export class DependencyGraph {   get inner() { return this._inner }   constructor(code) {
for (var i = 0, b; (b = this.$.ballpit.children[i]); i++) {    if (b.bounds.t + b.bounds.w > this.$.rectangle.bounds.t) {
return this.tile;    case("left"):
space2View = space2.write(document);
logger.error(error)       }
topic : function( post ) {             return post.count();
var node = visited[i];   var inputs = node.parents.map(function(p) {    var i = that.ins.indexOf(p);    if (i!== -1)
if (this.getVertical()) {     this._$OwnerDomRef.unbind(Device.browser.firefox? "DOMMouseScroll" : "mousewheel", this.onmousewheel);    }
path: path.resolve(__dirname, 'dist'),       library: "iframeHashManager",
var ds = {}   this.ds.iterate(this, null, null, function (n) {     var user = n.id[0]
var Xml = require('./Xml'); class Xslt extends Xml {} Object.assign(Xslt.prototype, {
require('./methods/tag')(Text); require('./methods/termFns')(Text); Text.prototype.normalize = require('./methods/normalize');
function extractWords(text) {       var tokens = text.toLowerCase().split(/[,.`\'\"\#\s]+/mg);       tokens.forEach(function(key){
result = TinCan.StatementRef.fromJSON(JSON.stringify(raw));             ok(result instanceof TinCan.StatementRef, "returns TinCan.StatementRef");
var table = false;  for (var i = 0, length = lines.length; i < length; i++) {
return permutes;   }
console.log(student, attempts, chosenAttempt);                     } catch (error) {  }                 }
onFileChange(input) {       const filename = get(_.head(this.file), 'name', '');       const ext = get(_.last(filename.split('.'));       const validFormat = filename === ext || /gz|sql|txt/i.test(ext);
saveImagesData: function () {             var imageData = Object.keys(this.imagesData).reduce(function (accumulator, id) {
import React from'react';
var x = start.x - (this.getWidth() / 2) + 10;   if (this.vert_justification == Vex.Flow.Annotation.VerticalJustify.BOTTOM) {     var y = this.note.stave.getYForBottomText(this.text_line);
console.error('Configuration parameter `%s` is required.', param);       throw new Error('Configuration parameter `%s` is required.');     }
return registry.editorComponents; }
var self = this,       stream = new Stream,
execute_query = query;     if (!("sort" in options || "sort" in query_capabilities)) {      if ("skip" in options && "skip" in query_capabilities)
}     this.dispatchEventToListeners(Events.ExitedInspectMode);   }
}else{                             scale
BASE_PORT = 9000;         MATCH_SERVER_PORT = 8081;     } else if (enums.APP_PRODUCTION_MODE === env) {
else                 evt   = event;
delete taxonomy.GENUS;                     }                     if(!vm.hasRankedTaxa){
var app = angular.module("app", ["firebase"]);
k = k || _.bind(editor.notebook_loaded, editor, null);             var k2 = function(notebook) {
describe('async-validate:', function() {   function Component(){}   var descriptor = {
const _ = require('lodash'); const yurl = require('yurl');
export function removeFields(str) {  return str.replace(/\$\{\d+(:[^}]+)?\}/g, ''); }
case "os_free_memory":    cunit = "";    for (var i = 0; i < datas.osFreeMems.length; i++) {
AWS.Service_20100801 = inherit(AWS.Service, {});
if (data.reachable) {                 self.model.set({password: hex_sha512(self.model.get('password')));                 self.model.save();
qx.Clazz.define("qx.manager.object.AliasManager", {
return localforage.setItem(key, value)   } catch (err) {
angular.module('Fablab')  .directive('paymentHistory', function () {  return {
currentSelection.barIndex--;         while(relevantInstrument.bars[currentSelection.barIndex].items.length == 0){          if(currentSelection.barIndex == 0){
throw err       })
};     var untrackSymbols = function(symbol) {         symbol.forEach(untrackSymbols);     };
import {ViewEncapsulation} from './metadata/view'; import {TypeDecorator, makeParamDecorator, makePropDecorator} from './util/decorators';
var expected     var x = 0;     var y = 0;
import ReactDOM from'react-dom'; import InfiniteCarousel from './components/InfiniteCarousel.js';
pluginManagerBase.initialize(null, null, null);             pluginManagerBase.executePlugin('MinimalWorkingExample', managerConfiguration, function (err) {
})); }; PolygonProgram = Webvs.defineClass(PolygonProgram, Webvs.ShaderProgram, {     draw: function(color, points, mode) {
while ((match = search_regex.exec(input))) {             if (remove_regex && remove_regex.test(match[0]))
function(node, event) {       if (Cards._suppressClick) {
attachAttributeToNodes(domNode.children[i], key, value);     } }
function roomToJSON(userjid, room, meetingsPath) {   var jsonroom = room.exportJSON(userjid)
var item = document.getElementById(dlLink.id + '-link');       if (item) {         var img = document.createElement('img');
export default {
$(window).on('action:topic.loading', function (e) {             addListener($(elements.BUTTON));         });
var m = jobName.match(/^((.*)::)?([a-zA-Z0-9-_]+)$/);       return { name: m[3], namespace: m[2]||null };
quotify :'red',        prompt :!tasks.length     });
maxSteps: 10,   getTime: Date.now.bind(performance),   ticker: window.requestAnimationFrame.bind(window), });
}             return false;         };
-ol.Projection.EPSG_3857_Half_SIZE, ol.Projection.EPSG_3857_Half_SIZE);   var tileSize = new ol.Size(256, 256);   goog.base(this, resolutions, extent, origin, tileSize);
.appendField( "LCD print" )                .appendField( new Blockly.FieldImage( this.block_.pathToMedia +                     'quote0.png', 12, 12 ) )                .appendField( new Blockly.FieldTextInput( '' ), 'TEXT' )
gc.fillText(val, x + halignOffset, y + valignOffset);             }             if (isColumnHovered && isRowHovered) {
const $comment_body = $entry.querySelector('[itemprop="text"]');
0, 0, this.singleWidth, this.singleHeight );           }          canvas.restore();
lastTable: function () {     if (!this.page) {       this.totalPages = Math.ceil(this.totalAmount / this.size);
text = svg.append('text')            .attr('class', 'title')
if ((state.activity === 'playing') && (state.history.lastvisited[kind] === index)) {         return false;
options.method = 'DELETE';     return execute(url, options);   }
return console.log(err);     }
let transitionHookWasCalled = false   const unblock = history.block(() => {     transitionHookWasCalled = true
});     draw.on('drawend',
import './SingleProfile.css'; import sqlFormatter from "sql-formatter";
var lounge = require('../../lib'); var uuid = require('uuid');
console.groupEnd("drawWidget.buildLinkFunc:"+type);         };
import ObjectComponent from './ObjectComponent'; import {map} from '../util/math-utils'; import {attachMouseListenersDocumentExtended} from '../util/listener-utils';
return process.exitCode = 0;   } catch (err) {
if (filter.outFields) {           response.fields = [];
init: function() {              var w           = screen.width,                  h           = screen.height;                this.supported  = parseFloat(_mediaInfoStyle.height) === 1;
try {     return require.resolve(path.resolve(name));   } catch (err) {} }
name,       };       break;     case 'DOCKERHUB':       required = {
if ('ABCD'.indexOf(cmd) >= 0) {         tracks_to_submit = side(cmd);     } else {
var $element = $('a[href^="' + page + '"]', $elements);      var $group = $('a[rel="' + $element.attr('rel') + '"]', $groups);
.filter((version) => {         if (filter) {           return version.local_title.toLowerCase().indexOf(filter.toLowerCase()) > -1 ||
function closeChatRoom() {   $("#chat").hide();
import React from'react'; import { Upload, Button } from 'choerodon-ui';
OutTransfer.prototype.calculateFee = function (transaction) {  return constants.fees.send;
if (!e.altKey) {                  var gs = this.layerManager.gridSize;
Object.keys(map).forEach(k => {       const v = map[k];
import { TimesIcon } from '@patternfly/react-icons'; import { t } from '@lingui/macro';
onLoad: function (options) {        },
ctx.fsEach(async function(file) {                     if (/demos/.test(file.path)) {                         file.extname = '.html';
url             : 'api/user_preferences/' + Galaxy.user.id + '/permissions',                     submit_icon     : 'Save permissions'                 },
switch(action.type) {     case SAVE_BOOK_DATA:       return state   }
var _regex = /^(\s*\*\s*).*$/;           editor = atom.workspace.getActiveTextEditor();           var cursor_position = editor.getCursorBufferPosition();
} catch (e) {         console.log('Parse Failed Codeforces\n' + e.message);       }
"use strict";     if ("ontouchstart" in window || window.DocumentTouch && doc instanceof DocumentTouch) {         $("html").addClass("uk-touch");
};     case TYPE.MARKET_DATA_LOADED:
try {                      body = JSON.parse(body);                      if (body.profile_image_url_https) {
});   } if (i === n) {     return L.icon({
if(error.dataPath.charAt(0) == '.') {         error.dataPath = error.dataPath.replace(/[.[]/gi, '/')         error.dataPath = error.dataPath.replace(/[\]]/gi, '')
'use strict' const db = require('./db')
var item;   while ((item = this.getActive())) {    item.classList.remove('active');
}           }           else if(xyMapOffset.x <= 0) {             for (var i = 0; i < mapLayers.length; i++) {               mapLayers[i].move("left", distance);
document.addEventListener( "DOMContentLoaded", completed, false );
'use strict';
if (angular.isDefined(window.ipcRenderer)) {       window.ipcRenderer.on(IPC_JIRA_CB_EVENT, (ev, res) => {
} ); export { InstancedBufferGeometry }
startId = conditionStartId;       tmpId = conditionStartId;       if (conditionMachine) {
scope.mixer = new AnimationMixer( scope );    scope.mixer = scope.mixer;
for (var j=0; j<complexList.length; j++) {         complexList[j] = toId(complexList[j]);        }
jhipsterFunc.replaceContent(this.javaDir + 'domain/AbstractAuditingEntity.java', '\s*@JsonIgnore', '', true);       }
config.parent = '.' + name;         drawChart(parsed_rows, config);
while (iCell--) {     if ((cell = clippedCell = cells[iCell])) {       halfedges = cell.halfedges;
}                     var props = [], visitedProps = [], accessors = {};                     Properties.allOwnPropertiesOrFunctions(value, filter).each(function(prop) {
$("#" + id_engageContent).css("max-width", "");         for (var i = 0; i < videoDisplaySizeTimesCheck; ++i) {             if ($(window).height() < ($("." + id_videojs_wrapperClass).position().top + $("." + id_videojs_wrapperClass).height())) {
layer = new VectorLayer('canvas');         map.addLayer(layer);
.attr('height', size);      if (background) {    group
var nextContext = void 0,         nextProps = nextVnode.props,
var path = require('path'); exports = module.exports;
import { combineReducers } from'redux';
label: 'Job ID',                 ngClick: "showJob(jobhost.job)",                 columnShow: 'host_id!== null',
throw new Error(`Unsupport config file extension. File path: ${filePath}`);   }
$scope.config.versionString = data;   }, function () {
var layer_path = "http: var firebase_url = 'https:
import { Tab, Tabs, TabList, TabPanel } from'react-tabs';
}                     ingoose._db.createObjectStore(name, schemas[name]);
DefaultEventQueue.prototype.queuePath = function () {         return!!this._config.apiKey? "ex-" + this._config.apiKey.slice(0, 8) + "-q" : null;     };     return DefaultEventQueue;
...prevState,         errorMsg: action.payload,       };
if ( ( matches = line.match( /(PREFIX) (\S+): <([^>]+)>/ ) ) ) {     if ( ENTITY_TYPES[ matches[ 3 ] ] ) {
var logger = require('../src/logger'),     _sanitize = require('../sanitiser/_sanitize',     sanitizers = {
const isNumber = (num) => {     return typeof num === 'number' &&!isNaN(num) }
module.exports = {   createPinCode (userId, pincode) {     return new Promise((resolve) => {       User.findOneAndUpdate(
}                     Object.freeze(this);
}         case 'phone':
var sequenceLengthPreInsert = tree.get('$sequenceLength');
return instance;     let system,         adapter,
if (options.userSideValidation === true) {    if (o.encryption_applied) throw new Error(_('Encrypted items cannot be modified'));   }
var result = []   for (var i = 0; i < pgs.length; i++) {     pg = pgs[i]     var npg = []
map.paths[id] = path;                     map.bounds = mapHelper.createBounds(path.latlngs);
name = node.name;    newTypeObj = env.lookupTypeObj(name, node.extras.target);
var resultSet = nodeComparator.getChanges();
};     case TYPE.BINANCE_24:
Object.defineProperty(Phaser.TileSprite.prototype, "frame", {
orig = qx.bom.element.Style.getComputed(element, "overflow");
fnBlock.push(') {\n');         for (i = 0; i < path.loopIndex; ++i)             fnBlock.push('var l', i,'= 0;\n');
import React, { PropTypes, Component } from'react'; import { Link } from'react-router'; import { Card, CardActions, CardMedia, CardTitle, CardText } from'material-ui/Card'; import moment from'moment';
describe('#118 ', (report) => {   let cache = null
else {             swap = line.charAt(column-1) + line.charAt(column-2);             range = new Range(cursor.row, column-2, cursor.row, column);         }         this.session.replace(range, swap);
var self = this;
.on('error', (err) => {       seleniumServer.kill()       throw err
'use strict'; var $metamodel = require('./metamodel.js');
__dirname = '.'; }
} else if (username) {   url = buildUrl(network, username);
import { getUser } from '../Actions/UserActions';
if (n > 2) {        for (r = 3; r <= 2*n - 2; r += 1) {
var dx = (t2[5][0] - t[5][0]);             var dy = (t2[5][1] - t[5][1]);             var d2 = Math.sqrt(dx * dx + dy * dy);
window.customElements.define('accordion-view', AccordionViewElement); const agent = getAgent(window.navigator.userAgent);
citeHref: {},                     alignment: {}                 }
if (target!== null)         {
const json = this.model.get('_loaded_map_json')       builder.load_map(json? JSON.parse(json) : null)
headers = {},     reg = /^(.*?)\:\s*([\s\S]*?)$/gm,     match, header, key;
component.enableDateInterval(component, true);       }
+!~-(((r) => {
}   ZeroClipboard._client.setCurrent(elementWrapper(target)) }
end = "نَ";             endDiac = "ْ";           }
super(props);     }
else if ( ( child = readElse( parser, tag ) ) ) {    if ( section.n === section_UNless ) {
});   }).controller('cfScaleDownClusterStageCtrl', function($scope, accountService, stageConstants) {     var ctrl = this;
require('./ServiceBase'); var SuperMap = require('../SuperMap'); SuperMap.REST.ChartFeatureInfoSpecsService = SuperMap.Class(SuperMap.ServiceBase, {
if(status === "backbutton") {   events.fire("backbutton");   return "true";
return 'thesis';
case DOMEvents.KEYpress:     charCode = e.which? e.which : e.keyCode;     if (charCode >= 32) {
download(`https:
const Order = () => (     <Layout>
var PowerChart = (function () {     'use strict';
for (let selectionParent = editor._variable.selectionNode;!/sun\-editor\-id\-editorArea/i.test(selectionParent.className); selectionParent = selectionParent.parentNode) {                 if (selectionParent.nodeType!== 1) continue;
var ParticleExplorerTool = function() {     var that = {};
withProps, } from'recompose';
length = 1         throw new Error("dtrnd")       }
this.previousValues = tail(this.previousValues);                 }
function moveOn(e) {  if (e.width)
case 'Float':         return `${value}`;       case 'Boolean':
function $ext(dest, src) {    src = src || {};
const result = [];       const numSubs = template.length - 1;       for (let segnum = 0; segnum <= numSubs; segnum++) {
DEBUG_MODE =!!val; }
image loaders[scheme] = imageLoader;     }
complete: function() {         done && done();
r.lastIndexOf('/') + 1, r.lastIndexOf('.')                         ).replace(/[-+._]+/g,'')                     ).toLowerCase()
} else {      source.code = source.code.replace(new RegExp('(\\s?)\\/\/!' + tag + '-start((.|\r?\n)*?)\\/\/!' + tag + '-end', 'gim'), empty);     }
console.log('Error :', err);         }
isDate(obj) {         return typeof obj === 'date'? true : typeof obj === 'object'? this.objectToString(obj).match(/date/i)!== null : false;     }
const onload = (event, element) => {   if (window.LOADED_ITEMS && window.LOADED_ITEMS.length > 0) {     window.LOADED_ITEMS.push(element.href);   }
{         return 0;     }
return callback(err);     }
name: "This is an example test",   tags: [process.env.TRAVIS_NODE_VERSION, 'CI'],   'tunnel-identifier': process.env.TRAVIS_JOB_NUMBER,   }
});     default:
var closestDate = closestTo(currentDate, closestAvailableDates);     if (closestDate) {
return this.file;  });  Clazz.defineMethod (c$, "autoSelectOnLoad",   function () {
this.LOOSE_SLASHES_REGEXP = new RegExp('^/|/$','g');
let { x, y, circle } = wrapper;  stroke('whitesmoke');  noFill();
var yPos = i * hM + y;                         for (x = 0; x < wM; x++) {                             xPos = j * wM + x;                             var xyPos = (yPos * wDst2 + xPos) * 4;
require.mix(this, args); });
type="button">               {
throw new Error(`[vuepress] Syntax highlight for language "${lang}" is not supported.`)     }
List.prototype.equals = function (that, equals) {     equals = equals || this.contentEquals || Object.equals;     if (this === that) {
var solutions = [];     for (i=0, l=states.length; i<l; i++) {       if (states[i].handlers) { solutions.push(states[i]); }
function renderNotFound () {   return html`
vAll[i].setZIndex(vIndex++);   } }
codegen.createMacroDirectory = require('./macroDirectory').createMacroDirectory;   codegen.typeof = require('../../../lib/typeof').typeof;
module.exports = Aria.classDefinition({         $classpath : "aria.storage.LocalStorage",
label: 'Rename',               action: function () {                 tree.edit(node);               }
actions: {     viewAllbuilds() {       return this.get('routing').transitionTo('builds');
var api_complete = false,             current_range,
for (i = 0; (r = references[i]); i++) {       var element = r.element;
this.emit('drag', this);     }
_.each(IB.FullColourDescriptionMap, function(colour) {         var gcolour = _.findWhere(colour.literals, {'id': 'define'}).value;        IB.ColourMap[gcolour] = newIB.Colour(gcolour, colour.html, colour.name);     });
import appSettings from 'common/appSettings'; import { clearDecorations } from 'editor/decorations';
obj.account = ['*'];                 } else {                     arr = [];                     if (tObj.accountscreate) arr.push('create');
.on('exit', function () {         process.exit(0)       })
context.log(err);        self.emit(self.EventName_errorWhileBooting(), err);        context.done();     });
for (var y = 0; y < height - gap; y += gap) {     for (var x = 0; x < width - gap; x += gap) {
clone.worldTransform.copy(this.worldTransform);             clone.dirtyWorld = this.dirtyWorld;         },
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-11\/vegmageddon-1353118122.swf",  admin_props : false,
$("button").on('click', function() {    selectOption($(this).prop('name'));   });
import EmailSubForm from './EmailSubForm';
log.error('Reporter "%s" does not exist!');   exit(1); };
const HOST_RE = /^(\[[0-9a-f:]+\]|(?:\d{1,3}\.){3}\d{1,3}|[a-z][a-z0-9\-.]+)(?::([a-z][a-z0-9\-.]+))?(?::(\d+))?$/i function parseHostString (hostString) {
onMouseDown: function (evt) {         if (evt.isLeftMouseButtonDown()) {
return _this3.row(field, key, size);             }
options = {};     }     if (typeof options.mood!== "undefined") {
Sprite.prototype.render = function (target, prepend) {   target = target || null;   var prepend = typeof prepend === 'boolean'? prepend : true;
$window.user.friends                .remove(this.model, {
export const store = new Store({   state: {
throw new Error(           'Module "' + name + '" required an unknown identifier "' + id + '".' +           'Available dependencies:'+ JSON.stringify(mod.deps, null, 2)
/\bMSIE 6\./.test(navigator.userAgent);   return isIE6;
form.append("design", new Blob([design], {type: 'application/octet-stream'}, "mydesign.glm"));       if (zip!= null){         form.append("design_imsld",zip);
}                 }                 return call.apply(this, arguments);
l = 2; for (i = 0; i <= 2; i++) {
var k=-1;   for(i=0;i<=kn.length;i++){     if(kn[i]<=t && t<kn[i+1]){
calculateFee (trs, sender) {     this.library.base.block.calculateFee();   }
}     return doc[steps[1]]   } else {
warnValidStyle = function(name, value) {     if (name.indexOf('-') > -1) {
this.onDraw(function () {         ctx.decorator = this.showHiddenCols._decorators[0];
default:         throw new Error('unknown pull_type method');     }
console.log("Completed export and written as CSV to \"" + config.exportfile + ".csv\".");                         done(0);                     });
text = text.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");       return (value.search( new RegExp(text) )!== -1);     },
percentageFromCfi(cfi){   var pg = that.pageFromCfi(cfi);
}             function fauxChange(annotation) {               props.onChange(Object.assign({}, props.annotation, { value: currentComboAnnotations }));             }             let { annotation } = props;
} else {       value = "You must accept the HIT before you can submit the results.";       inputElement = <input type="submit" id="submitButton" value={value} disabled />;     }
return state - 1;         }         case RESET_COUNTER: {
defaultMessage: 'entries',   },   categorySelect: {     id: 'app.containers.SayingsPage.component.SayingDataForm.categorySelect',
if (selectedStyle && this.selectItemContains(item)) {             if (selectedStyle.shadowBlur!= null && selectedStyle.shadowColor == null) {
class UserStore extends Store {     constructor(flux) {         super();         this.state = {
return 2;    case 'd2':
if (typeof(o.filters)!= 'object') {           try {
};     case TYPE.SET_THRESHOLD:
getDefault(index) {      if (typeof index == 'undefined') {        return this.scope.default
.get('/')      .reply(200, { success: true });       var client = newRetryRestClient(restClientSpy);
for (type of [`half`, `float`]) {             print(`native ${type} Sample(TextureDepth2D<${type}>, sampler, float2 location);`);
this.summaryWhiteList.forEach(function(property) {                 if (metacardDefinitions.metacardTypes[property]) {                     propertyArray.push({
var Log = require('../../src/lib/log'); var TracerLogger = require('../../src/lib/loggers/tracer'); var now = new Date('2013-03-01T00:00:00Z');
switch (state.chargingState) {     case 'Charging': {       const timeToFull = toHoursAndMinutes(state.timeToFullcharge)       return [`Charging at ${state.chargerPower} kW, complete in ${timeToFull}. ${range}`]
modelCtrl.$render = function() {     input[0].checked = (modelCtrl.$viewValue == value);
selectable: true,      set: function () {
var Date = function(str){     var d = str === undefined? new nativeDate() : new nativeDate(str);
switch (e) {       case 'ecma3':           e = 'ecma3'           break
define(function(require, exports, module) {     var SpecManager = require('./SpecManager');
function noop() {} function escapeXml(str) {
element.rotation = angle;        }
$('body').html(data.body);     $('#loading-bg').css({'opacity': 0.75});     $('title').html(data.title);
functionNextNights(props) {     var opacities = props.nights.map((_, index) => {return {opacity: 0.5 * ((10-index)/10) + 0.5};});     return (
function findDoc(ts, doc, name) {     for (name in ts.docs) {       cur = ts.docs[name];       if (cur.doc == doc) return cur;
$interval(function () {                     saveAnswers($scope, true);                 }, 15000);
},         hashTagQueries: {             'alarm': 'Alarm eq true',
var TableNode = require(__dirname + '/node/table'); var JoinNode = require(__dirname + '/node/join');
return "P" + pIndex++; }
var overlap = results[ind].response.overlapV     overlap = [overlap.x, overlap.y]     correction = self.correct(delta, overlap)
function ($scope) {                             $scope.isToggled = false;
throw new Error( 'Invalid resource to report.' );  }
else if (ch == "%") {       stream.eatWhile(/[^,^\\s^(^)]/);       state.beforeParams = true;
constructor(animation) {     super()
if (disabled) {           disableLink(link);         } else {
]   for (i = 0; i < singular_indicators.length; i++) {     if (str.match(singular_indicators[i])) {
while ((match = this.regexpUnescape.exec(str))) {       let value = handleFormat(match[1].trim());       str = str.replace(match[0], value);
export class AnyExcept extends Quantifier {     constructor(tokenTypes) {         super();         this.tokenTypes = tokenTypes;
window.jTool === window.$ && delete window.$; export default jTool;
link: function postLink(scope, element, attrs, controllers) {       var bsTabsCtrl = controllers[1];
var modelChangeTgt = new ModelChangeStructure({                 affected:     node2.nodeId,
if (styleSheetsProcessed == styleSheetsToProcess) {                                                                                      }
if( this._propagateEvents &&!this.ispropagatingFrom( emitter, event ) ) {                 var propagate = function() {                     if(!propagate._haspropated && _this._propagateEvents ) {
function model() {     }     model.prototype = $.extend(true, {}, Default, {
loader: 'file?name=${options.dir}[name].html!markdown-loader',                 test: /\\.md$/             }`
} function ensure loggedOut() {     exec(buildCommand("logout"), { silent: true }); }
throw new Error(err);       }
this.sendToDaemon(func, args, cb); }
} catch (e) {     remote.app.quit();
var img = this._createElement("img");                         img.onerror = function() {};
beforeEach(() => {     const mocks = {       $t: jest.fn(),
if (!schemaVersion) {          let promises = []
console.error(e)                   throw e
this.elem.find('.levelup'), this.elem.find('.levelup--number'));   this.tutorial = new app.Tutorial(this.elem);
configService.registryConfig(config);   }
CR = require('./../util/crud'),     verify = require('./verify');
_function: while (_again) {     _again = false;     var n = _x2;
_.each(allBranches, function(obj, name) { branchNames.push(name); });
var createButton = function(buttonDescr)  {
[{              'mapId': self.map.__pgmId,               'tileoverlay': self.__pgmId + '-tileoverlay',               'args': [
elms = document.querySelectorAll('.audit-results *');   for (var x = 0; x < elms.length; x++) {     elm = elms[x];     elm.removeAttribute('data-style-using');
}     loadPlayerApi() {
app.use(bodyParser.urlencoded({ extended: false }))   return reduce(
var md5 = "${MD5}"   if (typeof document === 'object') {     var appendStyle = function() {       var style = document.getElementById(md5 + '-style')
test("Work with a single delegated property", function() {   ok(!dog.get('type'));
var React = require('react'); var cx = require('classnames');
var delayedSpecWalker = require( './delayedSpecWalker' ); var coerceIntoSpec = require( '../utils/coerceIntoSpec' );
var regex = new RegExp(pattern);                         files = files.filter(function(file) {                             return file.name.match(regex);
return spaceship(v.localeCompare(w), 0);     case 'array': {       let vLen = v.length;       let wLen = w.length;
console.error('error:', error.message);       users.close();       return;     });
isMultiple = this.isMultiple,     indices = this.indices;
} catch(ee) {              console.log(ee);
} else {       scout.TagBar.unfocusTagElement($focusTargets.eq(focusIndex));       focusIndex = nextFocusIndex;
import recording from '../../recording'; import feature from '../../utils/feature';
console.error('Only Bash, Zsh, and Fish shells are supported :(') }
appendSequenceItem: function(node) {         var $oid_node = $(node).parent();         var $proto_node = $oid_node.find('.deformProto');
for (var key in obj2) {         if (obj2.hasOwnProperty(key)) obj[key] = obj[key];       }
} else {    $nextmessageset = $('#messages.user-messages').first();    if (
export const licenses = (configuration, http) => {   const {post, put} = http;   const fn = licenseId => {
let renderKey = ccOption.renderKey;   if (!renderKey) renderKey = ccOption.renderKey = ccUniqueKey;   const ccUkeys = safeGetArrayFromObject(renderKey_ccUkeys_, renderKey);
return false;     }     Binding.create = function (bindingDef, targetScope, attrKey, context) {
element.append(toolbar);             }
restrict: 'A',       link: function() {         element.on('click', function(event) {           event.selectionModelIgnore = true;
case 'video':     var src, type;
collection = args.OldValue;              count = collection.GetCount();              for (i = 0; i < count; i++) {                  this._ElementRemoved(collection.GetValueAt(i));
})        .catch(err => done(err));     },
var DATE_PATTERN = /^(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)$/i;   var adapters = [];
, Paginator  ;
var Logger = require('js-logger'); Logger.useDefaults(); Logger.setLevel(Logger.INFO);
let data = response.data;       if(data.hasOwnProperty('wallets')) {
var validations = checkVisibility? fieldOptions.validations : fieldOptions;     var serverSide =!window;     for (var i = 0; i < validations.length; i++) {
}; } KwsMedia.prototype.__proto__   = EventEmitter.prototype;
module.exports = {  StrictMode,
if (!this.editWindow) Ext4.Error.raise('editWindow config is required');         if (!(this.editWindow instanceof Ext4.window.Window)) Ext4.Error.raise('editWindow config needs to be a Ext.window.Window');
if (!(error instanceof Error) ) {         body = error;
data.user.permissions = [];             }             if(data.user.hotkeys == {empty: "hotkey"}){               data.user.hotkeys = [];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-01\/1294354086-7937.swf",  admin_props : false,
sort: 'Sırala',     sortTitle: '${type}'ın alt alanlarını sırala',     sortTitleShort: 'İçeriklik sırala',
&& html.toString()    .replace(/ about="[^"]+"(?=[/> ])|<meta property="mw:TimeUuid"[^>]+>/g, ''); }
this.eventEmitter.removeListener(type, listener);     }
expect(received1[0].widget).to.equal(this.widgets.customEvents);                  require('raptor-pubsub').channel('customEvents-' + this.id).emit('emitTestEvent2');
Date.getTimezoneAbbreviation = function (offset, dst) {      var n = (dst || false)? Date.CultureInfo.abbreviationTimeZoneDST : Date.CultureInfo.abbreviationTimeZoneStandard;      for (var p = 0; p < n.length; p++) {           if (n[p] === offset) {
_rerenderCb() {     if (this._renderRequestId) {
require(function (require) {  var restartPlayback = function () {
}) {             const allDirty = rootGetters['entities/allDirty']();
case 37:              state = 'l' ;             break;           case 39:
var breakLoop;         for (i = l; i--;) {             if (breakLoop === null) break;
return E24;         case 48 :
var logger;     var driver = model.load( module, {
throw self.constructor.name + " requires record to pushRecordDetailsView"    }
sliderWidth = parseInt(style.getPropertyValue('width'), 10);
.catch((e) => {         console.log('If this error states "' + event_id + '" is not really an error', e);       });
test();       schema = { anyOf: [ schema ] };       test(1, '#/anyOf/0');
var name;                 name = self.target.canonicalName(variables.scope);
debug('%s Table Created',table);       if (createView!='') {         client.query(createView,function(err){
var children = my_notebooks.concat(user_nodes).sort(compare_nodes);         children = as_folder_hierarchy(children);
import BigNumber from 'bignumber.js'; const { MKR, DAI } = Maker;
DockUtils.flush = function () {         if (!( DockUtils.root instanceof FireDock ) ) {             this.root._finalizeMinMaxRecursively();
var str = "";             for(var i = this.params.length - 1; i > -1; i--)             {
it('should clean out unsubscribed subscribers', function (done) {     var subject = new Subject();
}                  var subscript = script.subscript(s, lastSep);
return how.autoplay!= false? play() : play;  function play () {
canvas.getContext("2d").putImageData(img2, 0, 0);  }
this.initialLoginAndLoad();   }
Ext.define('devilry_subjectadmin.model.Subject', {     extend: 'Ext.data.Model',
console.log('Added image tile layer to world'); });
try {         await storage.set({rules});         return rules;
function writeOutput(result, cb) {       if (!options.output) {
console.log('you can find namuwiki database on [[나무위키:데이터베이스 덤프]] document') main()
var hookAfter;  describe('pluckQuery', () => {
return true; }
let hostName = null;     if (!vipPortError) {       hostName = (
return translate({bool: true}, 'es')      .then(e => {        expect(e).to.exist();        expect(e).to.equal({bool: true});       });
while (modulePath.indexOf('/./') > -1) {    modulePath = modulePath.replace(/\/[.][/]/g, '/');   }
setValue: function(options){             var hours, i, item, l, minutes, period, recur, startDate, temp;             if(options.startDateTime){
var SC = 1 + 0.045 * a_Cp;   var SH = S_H = 1 + 0.015 * a_Cp * T;   var RT = -2 *RC * sin(radians(2 * d_ro));
} catch (err) {         throw new Error(`[show_sha] could not fetch refspec for ${repo_path}`, err)     }
$('a').attr('title').should.eql('Google link');     $ = cheerio.load(link('Click here to Google http:     $('a').attr('href').should.eql('http:
var EventEmitter = require('events').EventEmitter; var path = require('path');
});       if (movement.left) {         this._applyTransform3d(element, movement);
var defcols = {};   if(this.from) {    this.from.forEach(function(fr){
var Map = require('immutable').Map var Store = require('../src/store')
var setScales = function(chart, type){
var login = $("#application").find(".assignees.is-flying")        .data("assignee");
metricsAtlas = this.context.measureText(atlasLabel[ctr]);                 if (metricsAtlas.width > atlasLabelWidth) {
}     var tokens = $('#tokens button');
var Mouse = require('./model/Mouse'); var MiceAppView = require('./view/MiceAppView');
+ unicode.packages.Nd         + unicode.packages.RegExp         + unicode.packages.RegExp + "\\$_]\\s])+", "g"     );
var groupKey = item.u+":"+item.v;             if (cellGroupsMap.hasOwnProperty(groupKey)) {
}             case 'S':
term.bold.red('\nHint: did you remember to install FFmpeg with x264 support?\n')   })
it("move should be 1 ", function () {              const stemGroup=file.createGroup('pmc/Trajectories');
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[62],{
}                                     }).catch(chalk.red(console.log));                                 }));
import Normalizer from './route-recognizer/normalizer'; var normalizePath = Normalizer.normalizePath;
return changeConnectionState(state, action.payload.connectionUri, won.WON.Closed);         case actionTypes.messages.connectMessageReceived:         case actionTypes.messages.openMessageReceived:
throw e && e.stack? e.stack : e;     }
exports.download = function(req, res) {   var headers = {     "Content-Type": "application/force-download",
assert(sum(sum(one, two), three) === sum(sum(two, three), seven)); } catch (e) {     console.log(e.message); }
}; const day_MILLISECONDS = api.common.duration('1d');
var first = false;    var loop = function(data) {     if (first) {
},   willDestroy: function() {     var key = this.get('keyForId');
if (regs[r].signals.any_one) {       result.push(terms[i]);       continue;
, colors = require('colors')  , tb = require('timebucket')
for (var i = 0, n = info.length; i < n; i++)           if (info[i] instanceof Array)             unpack(obj[i], info[i]);
var isStatic = false,    handler;   if (typeof Handler === 'function') {
});     it('getFoWObjectArray works with subcontainers', () => {       const fogOfwarModule = Object.assign({}, fogOfwarMod);
getPerm = function(perm){    if (isNaN(parseInt(perm, 8))) {     var mode_array = perm.split('');
throw "GetUserToEnterExistingPasswordWithCB called but self.passwordEntryTaskMode not.None"    }
if (typeof process!== 'undefined' && process.env.STREAM_URL &&!apiKey) {     var parts = /https:\/\/(\w+)\:(\w+)\@([\w-]*).*\?app_id=(\d+)/.exec(       process.env.STREAM_URL
className={className}>         {children? children : (           <span>
offsiteGlobe.ShaderProgram.prototype.link = function() {   if (!this.vertexCompiled_) {
self.locked = _.get(featureOptions, 'locked', false);     self.dateStart = _.get(featureOptions, 'dateStart', null);
isObject: function(obj) {   return!Em.isNone(obj) && Ember.typeOf(obj) === 'object' && obj.constructor === Object;  },
} else {         last_trade = s.my_prev_trades[0]       }
errorout(event, instance) {         this._events.emit('errorout', event, instance);     }
app.all('/services/vector-tiles/dataset', flow.define(function(req, res) {   this.args = {};
value: newValue    }, null,!notAsNotification);   });
for(let i = 0; i < cleanedPacketArray.length; i++) {   var origin = cleanedPacketArray[i].origin;
debugflag.should.equal(options.debug);       options = {         debug: undefined
], function(Controller,formatter, VerticalLayout,HorizontalLayout, Text, Input, Dialog, Button) {  "use strict";
goog.net.XhrIo.prototype.getResponseText; goog.net.XhrIo.prototype['send'] = goog.net.XhrIo.prototype.send;
var SIGNALING_SERVER = 'https:
module.exports = function make(redirect, _) {   var newrecord = component.slice();
var took = end - start;                 if ( took >= threshold) {                   AlertService.warn('Loading cluster information is taking'+
if (count)                 result.push(['count', count? count : null]);             return result;         },
function execute(id, payload) {     const protocol_re = /https?:\/\
};         }         bindingPath = tsBinding.path.parentPath;
case 'boolean':           return value === true || value === false;         default:
};     req.set('Content-Type', 'application/vnd.uber+json');   });
}(jQuery, d3));
if(abs(this.changeDelta)>=1){     this.$fastTextDelta = 0
else if (ruleType === "COMPOUNDRULE") {     numEntries = parseInt(definitionParts[1], 10);
this.proxy.listen(this.proxy_port, block); }
import layout from '../templates/components/icon-facebook';
import { Container } from 'elemental';
Process.prototype.startEventLoop = function() {         runtime.control._frame = 0;
import { Form, Input } from '~/components/Form'; import HelpButton from '~/components/HelpButton';
while (wrongWord) {                         index = text.indexOf(word, currentCursor + 1);
var force;    return function( delta ){
return sendNewPostToServerSuccess(state, action);         case actionTypes.SEND_NEW_POST_TO_SERVER_FAIL:             return sendNewPostToServerFail(state, action);
while (dfsList.length > 1) {       node =dfsList.pop();       node.parent.total += node.total;
{             var result = self.loadModule(dep);
} else {                 $('#keyboard.key-CTRL').removeClass('active');             }
parse: function (response) {                 return response.data;
}     Object.assign( hx, { KeyMap : KeyMap });
constraints.min = Number(this.minimum);      if (!isNaN(parseInt(this.maximum)))    constraints.max = Number(this.maximum);
}   getState() {     if (this.key) {
} else if (this._calculateMoveDirection() === -1 && this._checkRangeBarMoveRange()) {       for (var i = 0; i < this.index.length; i++) {        this.index[i] -= this.defaults.step;
if (!runtime.local &&!runtime.environment) {             this.valid = false;
window.viewModel = viewModel;
import { PropTypes } from'react'; import { View, StyleSheet, Text } from'react-native'; import React, { Component } from'react';
var e, el, m, ml, fm, fml, element, material,   v1x, v1y, v2x, v2y, v3x, v3y, v4x, v4y,   size;   if ( this.autoClear ) {
email: /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/,   url: /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})(([\/\w\.-]*)?)(\?[-_+=~\.;&%\w]*)?(\#[-_/\!\w]*)?( *)?$/i,   hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,
if (container === window) {     fold = container.pageYOffset || document.body.scrollTop;    } else {
return '[' + typeTransformer(matches[1]) + ']';     case 'list':
return "ns="+ this.namespace +";i="+this.value;         case NodeIdType.STRING:
import { Permissions } from './permissions.js';
var testDocDefinitions;   beforeEach(function() {
success: function(data){          if(data.status==="success"){
if (d3.select(params.root+'.demo_group').empty()){
var input = "while echo 1 && do blah; done";     parse(input)
return _deployApp(c);
var tokens;  if ("Molecule".equalsIgnoreCase (localName)) {
bind_noify_click_event();                     }                     else {                         bind_noify_click_event();                     }                 },
if(options.parameters){       href += '?';
onload: {a: handlers.EventAttributeHandler},      complete: {p: properties.AssetComplete},
ngShow: ngShowDirective,             ngStyle: ngStyleDirective,
template.route(/\.md/, function (params, next) {   return params; });
src = $el.attr('href')     if (src) {       key = 'href'
if (err) {                 logger.error('Failed to deletenews', err);             }
}             } catch (e) {  }
exports.buildFlags = function(env, flags) {     flags.context = env.contexts[0];     return flags;
(async () => {  browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] })
normalize(bbox, 0, bbox, 12);                 d1 = dot(normal, bbox, 12);
var _ActiveCallsPanel = _interopRequireDefault(require("../../components/ActiveCallsPanel"));
function loadFile() {
bgCtx = bgCanvas.getContext('2d'); holdCtx = holdCanvas.getContext('2d');
scrollFunc() {       dispatch(loadMoreCharts());
const innerScale = (vWidth - padding * 2) / vWidth   return (
}                         return true;                     default:                         return false;                 }
}     return (
dist: {       this.fs.copy(
if (settings.showHome!== false) pageArray.unshift(settings.homeTitle);   crumbURL = (win.location.href.indexOf(bcpie.globals.primaryDomain) > -1)? bcpie.globals.primaryDomain : bcpie.globals.secureDomain;
];      if(hasNext) {        result += generateIfKindCheck(child, tokenKinds, indent);
select.el.querySelector("li[data-tid='" + tid + "']");     if (task) {       result += task.getAttribute('title') + '. ';
https.get({host: credentialHost}, function(res) {
pubads.addEventListener('slotRenderEnded', function(event) {         if (event.isEmpty) {
function dfu() { } dfu.findCompatibleDFU = function() {
E2E4LoadButton.prototype.loadData = function () {                     this.ngListService.normalizedService.reloadData();
error.should.have.property('code', 'INVALID_TYPE');           error.should.have.property('message', 'Expected type "string" but found type "integer"');           error.should.have.property('path', ['swagger' ]);
})     } else {         next({path: '/'})     }
get: function () {         return this.data.sleepSpeedLimit;
var cookieValue = goog.net.cookies.get(eightball.SoundEffectManager.s_CookieSoundOn, eightball.SoundEffectManager.s_CookieOnOffEnum.ON);   this.m_isSoundOn = cookieValue;
return {x: 0, y: 0}         }
import attr from 'ember-data/attr'; import { hasMany } from 'ember-data/relationships'; import {gravatarImage} from '../utils/urls';
initVal(_data, _hTmp, _comp) { }     flush() { }
delete params[c.key];             } else if (params[c.key]) {                 return false;
await add.execute(argv);    break;   case "build":
assert(sum(one, two, three) === seven); } catch (e) {     console.log(e.message); }
{                 var trueNodeBox = nodeBox.getAncestorByClass(nodeBox, "nodeBox");                 CSS.setClass(trueNodeBox,'search-selection');
Account.create({name : 'Account'+ i, email : 'account' +i + '@gmail.com', age : i}); }
App.moduleMap({"home":"home.js"}, ''); ; })();
vChild._computedHeightTypeNull? vChild._resetRuntimeHeight() : vChild._applyRuntimeHeight(vChild.getHeightValue());     }   } }
subscribe("show_options", function(){   optionsDOM.style.top = "200px";
$scope.trainings_under_this_process = getNoOfTrainingJobs(data);         $scope.available_models =AvailableModels(data);
expect(body._id).toBeDefined();             server.expectSuccess(body);
];         var result = null;         if (pickResult) {
var __executed = /a[a-z]{2,4}/.exec(new Object("abcdefghi")); var __expected = ["abcde"]; __expected.index=0;
if (options.backdrop) {           if (!$destroy ) options.backdrop.remove();           else              $animate.leave(options.backdrop);
this.name = "TransitionAborted"; } export { Transition, transitionByIntent };
return fromClassForDoc(ampdoc, 'action', ActionService); }
}; inherit(geo.contourFeature, geo.feature);
return function(value) {     console.log('value: ', value)
this.status = 400; }
export function* getAgentDocument(payload) {   const agent = yield select(makeSelectAgent());
tagInsertMap.sort(function(a, b) {     if (a[0] > b[0]) { return 1; }     if (a[0] < b[0]) { return -1; }     return 0;
module.exports = (server) => {   return {
{                 "name": "京东中间页",                 "src": "^http:\/\/re.jd.com\/cps\/item\/([0-9]*).html",                 "dst": "http:
var status = response.status;                 var details = response.data;                 if (status == 200) {
default:            basis.dev.warn('Unknown config property `' + key + '` for app, value:', value);       }
import React from'react'; import { connect } from'react-redux';
if (argv.bbox && typeof argv.bbox ==='string') {         argv.bbox = argv.bbox.split(",").map(Number);     }
endOffset = denormalizeOffset(endOffset, $scope.textContent);   while ((node = it.nextNode())) {     let tc = node.textContent;
hasLegends = util.array(this._mark.def.legends).length > 0,       i, ilen, j, jlen, group, legend;   bounds.mark(this._mark, null, group &&!hasLegends);
throw new Error("An url is required for loading media");   }else{
constructor() { super('yml'); }   invoke( rez, themeMarkup, cssInfo ) {     return YAML.stringify(JSON.parse( rez.stringify() ), Infinity, 2);
else e.vectorContext.drawGeometry(geom);   } catch(e) {  }   if (imgs) imgs.setScale(sc);
var tile_ = this.extraInfo_.tile_;         if (tile_) {
case 'isPaused': {         return!this.isPlaying;       }       case 'completeLoopCicles': {
if (err) {       pgdone();
indexLayer: function (layer) {         if (!this.options.indexing)             return;
if ($this.hasClass('tb-notes-activated')) {             $this.addClass('tb-notes-activated');
var from = diffs[i].from;      var tree = this.root;
(function() {
function deleteDonor() {         $.ajax({             url: "/api/donor",
$scope.delete = function (customServiceSelected) {
function rebatchCommands(primitive, context) {         if (!primitive._batchDirty) {             return false;
Array.prototype.push.apply( target, array ); }
import disableModal from './DisableModal.vue' import Styleguide from '@human-connection/styleguide'
selectedRows[0] = e.target.dataset.rowid;       }       for (key in dataIndices) {         this.jsonData[selectedRows[0]][key] = dataIndices[key];
isEmpty() {    return (this.liveBuffersOpaque == null || this.liveBuffersOpaque.length == 0) &&      (this.liveBuffersTransparent == null || this.liveBuffersTransparent.length == 0) &&
} } JUnitReporter.prototype.TPL_PATH = path.join(__dirname, 'tpl', 'junit_report.tpl');
}; function BoxParser() {     let boxParser;     function setConfig(config) {
var box = {                 width: opts.width
componentWillMount() {         this.fetch( 'System.getenv("DATABASE_URL") )            .then( results => { return results.json(); } )
var query = $location.search().q || '';         var facet_query = new RegExp(facet_id + ':' + facet_value + '"', 'i');         if (query.match(facet_query)) {
return div.innerHTML; }
__handleResizeInternal: function () {                 setTimeout(function () {
constructor(key, value) {     super(`Validation failed for ${key}: ${value}`);   }
if (file.attempts < max_validate_attempts) {
prev,     ini = pos = style(panels[0].getParent(), 'padding' + (that.up? 'Top' : 'Left')),     i,
fetchUrl: url,         headers: headers     } = getters.inputData;
function setURLProtocol (err) {       if (err) { logger.error(err.message);       console.log(protocolKey);
console.error(e);     exit(1);   }
initTypeProto(Sequence, 'ceylon.language::Sequence', $init$Container(), $init$Cloneable());     }
return text            .replace(/(^|[^!])\!{2}($|[^!])/, '$1!$2')            .replace(/(^|[^!])\!{4}?($|[^!])/, '$1!!!$2');     }
this.setContext(gl); } WebGLFastSpriteBatch.prototype.constructor = WebGLFastSpriteBatch;
}  return this.makeEmptyArtistTrack(); };
var Container_Gridster = React.createClass({  displayName : 'Gridster',
for (let i in tags) {         if (tags.hasOwnProperty(i)) {             let tag = tags[i];             doc[tag.title] = tag;
return this.varstmt();       case '{':
dofRadius: 1,   ssao: true,   ssaoIntensity: 5,
varhasValueHelper = require('../utils/hasValue.js') var transformPathToArray = require('./../utils/transformPathToArray.js')
return parts.join('\n');     }     _getCanonicalizedAmzHeaders(headers){
Transport.prototype.poorConsensus = function () {  if (__private.broadcaster.consensus === undefined) {   return false;
const viewUrl = Versioning.lastLoaded.view.url;             const reg = /\/([^/]+)\/view\.json/;             const m = reg.exec(viewUrl);
throw new Error('Do not drop the production database!!!!!'); }
cancel: function() {      if (this.content) {
else if(type === 2) {                     days = this.$element.find('.month-days').select('selectedItem').value;                     pos = this.$element.find('.month-day-pos').select('selectedItem').value;
return;   }   this._iconThemes = null;
} else {         window.localStorage.removeItem('config.default_app_id');         app_id = domain_app_ids[getCurrentBinaryDomain()] || 1;     }
defaults_,       data_,
return folders.concat(relReqStr.split('/')).join('/'); }
load(absUrl, function(svgString) {               inject(img, svgString, absUrl, options);
import Z from '@effectful/generators'; function a_1() {   return Z.pure(2); }
var ry = data[i++];                     startAngle = d[i++];                     endAngle = d[i++] + startAngle;
if (/\.feature$/.test(fileName)) {             editor.getSession().setMode("ace/mode/gherkin");
const files = coverage[0].files   return files.map(file => {
throw Error('CodeFlask expects an object containing options as second parameter');     }
module.exports = function(socket, rf433mhz, db){    var clients = [];
var main = modules.main;        (main.default || main)(data.request);
throw new Error("Value for " + data.val + " is bigger than " + data.max);   }
if(!_.isE())    return _.register(new iChart[_.is3D()?'Coordinate3D':'Coordinate2D'](_.get('coordinate'), _));   }  }
self.request.open('GET', self.url, true);       self.request.overrideMimeType('text/plain; charset=x-user-defined');       self.request.withCredentials = true;
process.addListener("exit", function () {   assert.equal(completed, 2);
_.each(files, (path) => {     const name = path.replace(/[a-z0-9/_.]*themes\     list.push(name)
if (n === p.left) {       g.left = p.right       if (g.left) { p.right.parent = g; }       p.right = g;
$scope.workflows = data;         });
var<extra_id_36> = function(byteArray) {             return Array.prototype.map.call(byteArray, function(byte) {
console.log(new Date(date) +'Created pings for check "' + check.name + '"');           }         },
stringify:   this.stringify,     label:       this.label   }) + '\n';
reportError("An error occurred!", e); });
minZoom: 0,         maxZoom: 19,         maxResolution: 40075016.68557849 / 512
wrappedItem = wrap(list[i]);       if (root) {         if (root instanceof scope.wrappers.ShadowRoot) {
setTimeout(function () {    expect(track.ended).to.equal(true);    done();   }, 1500);  });
layers: [baseMap.tileMap.prop_tilemap],     target: element     };
devConfig.devServer = {}; }
obj = newAX('ShockwaveFlash.ShockwaveFlash');        } catch(e) {           console.log(e);        }
const CrowdsaleDAO = artifacts.require("./DAO/CrowdsaleDAO.sol"); const DAOx = artifacts.require("./DAOx.sol");
JSONEditor.ContextMenu.prototype._isChildOf = function (child, parent) {     var e = child.parentNode;
};                 Scanner.prototype._next = function () {
}; if (prod) {
Meteor.call("deleteItem", this._id);             toastr.success("Delete Item", "Item deleted");
return content    .replace(/\sdata-reactid="\S+\"/g, ''); }
System.register(['./generated-chunk.js', './generated-chunk2.js'], function (exports) {  'use strict';
const remainingStack = stackProcessed.slice(level + 1)     return remainingStack.reduce((val, proto)=> proto.lift(val), val)
var mongoose            = require('mongoose'); var historySchema = mongoose.Schema({
var cancelMove = function(){              Ember.$(ui.sender).sortable("cancel");
}       break;     case'mouseup':       stage._mouseEvents.push('mouseup');
throw "INVALID_STATE_ERR: send flag is true";     }     headers[header] = value;
Aerospike.prototype.exists = function exists (key, policy, cb) {   this._currentClient.exists(key, policy, function existsCb (er) {     if (er.code!== 0) {
if (!isEdge &&!isIOS && clipboardData ) {
const result = await luis(config, serviceManifest, args, requestBody); }
if (err) {   throw err;  }
throw 'Store must be a subclass of Settings.Store';   }   if (this.__stores__[name]) {     throw 'Duplicate store name:'+ name;
FILE_TEXT_SETTINGS: 'file_text_settings',   FILE_TEXT: 'file_text' };
const PROVIDER_OR_SLASH = /[:\/]/g const CONVERT_MAP = {":": "/", "/": ":"}
var CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin; var HtmlWebpackPlugin = require('html-webpack-plugin');
} for(var x in Date.prototype.getUTCSeconds) {   if(x === "length") {     $ERROR('#2: The Date.prototype.getUTCSeconds.length has the attribute DontEnum');
modified_state.f[dest] = { t: 'c', c: modified_state.c[src].pop() };         } else if (my_move.t =='s2s') {             modified_state.c[dest].push(modified_state.c[src].pop());
$('rg-modal.overlay').click()     $('rg-modal.modal').length.should.equal(1)     $('rg-modal.modal.visible').length.should.equal(0)     tag.opts.visible.should.be.false     spyOnClose.should.not.have.been.called
.promise()).Responses[tableName]
var exists = false;   try {
else {             for (i=0; i < points.length - 1; i++) {                 if (x >= points[i][0] && x < points[i+1][0]) {
(function($, window) {  'use strict';
});   it('provides \'modifier\' attribute', () => {     const select = element.querySelector('select');
(function(oipfCapabilities) {         var window = oipfCapabilities.window;         window.oipf.channelList = {};         window.oipf.channelList._list = [];         window.oipf.channelList._list.push({             'id': '0',
it('element has a thumbnail', function () {
var line = this.blockToCode(block);     if (goog.isArray(line)) {
description: "Reload specific commands",   usage: "reload <command>"",   param: "",
if (this.graph == null) {         this.setupGraph(t);
const mapcontainer = document.getElementById('map-container');     let latlngLabelPrecision;
} else if (err) {           console.log('balUtilPaths.scandir: readdir has failed on:', options.path);
'post-special': [],
import TmSessionImportSuccess from "common/TmSessionImportSuccess"
return `https: }
this.fireEvent('store');   if(this.storePrevented) {     return;
var privateDict = [];     for (i = 0; i < priv.size; i++) {       privateDict.push(aStream.getByte());
for (var i = 1; i < querySegments.length; i++) {           var itemsType = null;
remove: function(entity, refresh, depth, doneCallback, failCallback) {     throw new Error("Remove is not yet implemented.");   }
{                 if (obj.feature instanceof Array)                 {
}                 resolve({stringOut: stringOutValue});
if (node.nodeType == 3) {    var tempNodeVal = node.nodeValue.toLowerCase();   var tempWordVal = word.toLowerCase();   if (tempNodeVal.indexOf(tempWordVal)!= -1) {
define(["dojo/_base/kernel", "dojo/widget/Toaster"], function(dojo, dojox, widget, toaster){  dojo.getObject("dojox.widget.Toaster", dojox, widget, toaster);  dojo.experimental("dojox.widget.Toaster");
return TD.Direction.up;         case '>':
asyncLoader.addCallback(new paella.DictionaryCallback(this.initParams.dictionaryUrl));   asyncLoader.load(function() {
loadedLocales : null,
chartModel.noDataMessage = cowc.CHART_LOADING_MESSAGE;         } else if (chartModel['noDataMessage']) {             chartModel.noDataMessage = chartModel['noDataMessage'];         } else if (error) {
TrainingCustomSlideNode.save(spec_node, onSaveFinished);                     break;                 case "BranchNode":                     spec_node.node = new_trainingtreenode;
logger = require('morgan'),     service = require('./service'),
toWire: function(destructors, o) {             if (null === o) {                 return 0;
for (i = 0, _len = Math.min(limit, sorted_corrections.length); i < _len; i++) {     if (!self.hasFlag(sorted_corrections[i][0], "NOSUGGEST")) {
assertEventListNotEmpty = (list, passedMessage, defaultMessage) => {   const assertionMessage = createAssertionMessage(passedAssertionMessage, defaultMessage);   if (!Array.isArray(list) || list.length === 0) {
update.activeTracks[i].artists = [];       for (j = 0; j < this.activeTracks[i].artists.length; j++) {        update.activeTracks[i].artists[j] = {
element.remove();         $timeout(done || noop, 0, false);       },
function isInteger(value) {     return /^-?\d+$/.test(value); }
var Observable = Rx.Observable,     SerialDisposable = Rx.SerialDisposable,
it("should assert true", function(done) {     var example = Example.at(Example.deployed_address);     assert.isTrue(true);
console.log(e);     data = {error: true};   }
class BaseDirectorService extends BaseService {   constructor(plan) {     super();     this.plan = plan;
vjs.VolumeMenuButton.prototype.createEl = function(){   return new vjs.Button({     className: 'vjs-volume-menu-button vjs-menu-button vjs-control',
Dom(function () {                  if (!element.contains(result)) {                      element.append(result);                  }              });
var nbVerts = verts.length;                     for ( j = 0; j < nbVerts; ++j )                         vertices.push( verts[ j ] );
this._header = null;   }
throw new Error("Value for " + data.val + " is smaller than " + data.min);   }
if (process.env.FORCE_SSL) {     app.use(enforceHttps({
buffer[i] = 0xff;   }   for (i = 0; i < num_macs; ++i) {     mac_buffer.copy(buffer, (i + 1) * num_mac_octets, 0, mac_buffer.length)
frm.append("div").attr("class", "col");
}); } util.inherits(UserStream, EventEmitter);
},         link: function(scope) {             scope.pages = [];
},         resolve: (_source, { role }) => {             const result = getUsers();
import React from'react' import {graphql} from 'gatsby' import styled from'styled-components' import {Helmet} from'react-helmet'
function handleChangePassword(req, options = {}, strategy) {
var pid = receivers[i];           a = a_shares[pid];           b = b_shares[pid];           c = c_shares[pid];
commentText += text;     });
import SparklinesSpots from './SparklinesSpots'; import DataProcessor from './DataProcessor';
const path   = require('path'); const env   = process.env;
var street =Street()
$scope.riskTypeDictionaryDatas = JSON.parse($scope.data.riskTypeDictionaryDatas);  }, function (error) {   $scope.onError = error;  });
import React, { Component } from'react' import Header from '../components/Header'
);         break;       default:         throw new Error('Should not reach here');
if (err!= null) { cb(err); return; }           if (email) {             self.saveAccount(email, cb);
dnsRecords = dnsRecords.concat(map(           this.mxOpts.custom.filter(custom => custom && custom.target!== ''),
return new PodioErrors.PodioBadRequestError(response.body, response.status, request.url);       case 401:
debug('%o', results)   if (results.every(result => result.success) return process.exitCode = 0
function getdata(data) {             if (about[data.key.split(":")[0]].symbolToName) {                 let requestOptions ='',url = '';
if (typeof config.facetsCustomizer === 'function') {         var add = function(property, label) {           derivedFacets.push({value: property, label: label? label : localize(property)});
zi = new Array(n-1)     a = 1.0, b = 0.0, k1, k2, k3     for(i=0; i<n-1; ++i) {
} } startwebsocket_manualFiles();
const CodeBlockRequired = new RegExp('(<\/code-block>)', 'g');       if (CodeBlockRequired.test(parseHTML)) {
expect(Kefir.zip([a, b, c])).to.emit([[1, 0, 3], [4, 2, 5], [6, 9, 8], '<end>'], () => {       send(a, [1])
deleteAll: function(args) {           this.model.$delete_all(__hash2(args));         }
}         break       case 'config':         log.debug('rendering config screen from unlock screen.')
return;     }     for (let i = 0; i < this._tabRects.length; i++) {
return undefined;  for(n in TiddlyWiki.standardFieldAccess) {   if(n == "tiddler")
QUnit.test('sampler', function () {             var keys = [];
export const convertToGrayscale = pixels => {   if (!(pixels instanceof Array)) throw new TypeError("Expected array of pixels");
}); } var server = buildServer().listen(port);
case RECEIVE_QUERY:            case CLEAR_QUERY:            default:
return polygons; }
function dockerBuild(done) {   dockerRun(done);   spawn('docker', ['build', '-t', 'executor', '.'], spawnOption)  .on('exit', (code) => {
const esmRequire = require('esm')(module) module.exports = esmRequire('./chalk.mjs')
import won from "../won-es6.js"; import { connect2Redux } from "../won-utils.js";
currentVersion = _.omitBy(currentVersion, function (i) {           return i!= null && i === 'object' &&!(i instanceof Date);         });
notifyChanges(this);     }     function notifyChanges(state) {
if (err) return submit.show()       window.location.href = "/world.html#" + hoodie.account.username + '/' + worldName
var Promise = Ember.RSVP.Promise; var PromiseArray = Ember.ArrayProxy.extend(Ember.PromiseProxyMixin);
else {     { _id: req.params.id }    }
const arrayify = require('array-back') const ExplainStream = require('./explain-stream')
return url;     }     function getStyleString(styleObj) {
} from'redux-immutable'
tree.traverse_and_compute(_.noop, "pre-order", root_node, function(n) {     if (!d3.layout.phylotree.is_leafnode(n)) {       bs = _.isString(n.bootstrap_values)        ? +n.bootstrap_values
cms.fillPath = function(data, path) {  path = ensureArray(path);
} else {     primary = {region: primary[0], table: primary[1]}; }
case "json":                   var php_script = require('services/getLatestRevision.php');                   d3.json(php_script + "?vis_id=" + elem.file, setupTimelineVisualization);                   break;
case "radial":      dx = pt.x - fill.cx, dy = pt.y - fill.cy;      o = Math.sqrt(dx * dx + dy * dy) / fill.r;      break;
it('should update selected (first) row', function () {             runTest(scrollSettings,
var cldbid = response.client_database_id;                     cl.send("servergroupaddclient", {sgid: wantedrankid, cldbid: cldbid}, function (err) {                         if (typeof err!== "undefined") {
CLI_ANDROID_SDKManager,     getAppVersion,
this.timeStamp = Date.now(); }
Template.sidebarItem.onCreated(function() { });
expect(shallowToJson(actual)).toMatchSnapshot(); });
printBarcode: function(data, type, settings){     settings = settings || {};
HTML_ATTRIBUTE: /(^|\s)([\w-:]+)(\s*=\s*("([^"]+)"|'([^']+)'|(\S+)))?/ig,         CSS_SELECTOR: /([-_.#:\w]+(?:\s+)?[{,>])/g     },
for (var key in form) {       if (form[key] === true || form[key] === false) {
assert.fail("Should have thrown an error");    } catch(err) { }   });
return list(appId,envValue, cb);       case "unset":
function updateDependents(itsPath, alwaysRemove) {     return function(_doc, _next) {       if (!doc) return next(null)
}     if ( vars.dev.value ) print.timeEnd("focus labels")   }
var filters = require('../src/filters') var data = require('./data')
}   function draw (offset) {
parts[2] = text;                                  subtitleArray[videoid - 1].push(parts);
filter (predicate) {     return this.prioritized.filter(predicate)
}         return false;     }
},   empty: function () {    var empty = true;
]},    {kind: Item, components: [     {kind: Image, src: {      'hd' : 'http:
that.screenName = that.screenName || that.username       that.id = uuid.v4()
description: inKindDescription || "",     oaeType: ""
return new Promise((resolve, reject) => {                 var xhr = new XMLHttpRequest();
itemCodes.length - EXPECTED_SUFFIX.length) {       throw Error('Invalid search query url fragment for'+ itemsType + ':'+ urlComponent)     }
})     if (d.length) {       if (d[0].password == userItem.password) {         const now = new Date()
import React, { Component } from'react'; import { Components, registerComponent } from'meteor/vulcan:core';
render() {     const { id } = this.props;     return (
return (this.bookmarks)? this.$q.when(this.bookmarks) : this.$http.get(this.URLS.FETCH).then(this.cacheBookmarks.bind(this));   }
static get refreshToken() { return'refreshToken'; };     static get createPluginToken() { return 'createPluginToken'; }     static get authenticatePlugin() { return 'authenticatePlugin'; }
render (texture, width, height) {     let gl = this.gl;
logs.push(<li key={i}>{this.state.logs[i]}</li>);         }         return (
}         var bboxdims = model.GetBody(0).GetBoundingBox();
copyTo: function(dest) {         dest[x] = this.x;         dest[y] = this.y;         return dest;
function exists(changes, version) {   const escaped_version = version.replace(/([.-])/g, '\\$1');   const regexp = new RegExp(`\r?\n## ${escaped_version}\r?\n`);
for(i=0, l=pattern.length; i<l; i++) {             pattern[i].latLng = map.layerPointToLatLng(pattern[i].pt);
for (let name in translate.keys) {       if (translate.keys.hasOwnProperty(name)) {         opts.keys[name] = opts.keys[name];       }
removeSub: function (name, subName, options) {       if (typeof name!== "string" || name === "") {         return "";
item.opacity = parseFloat(value, 10);    break;   case 'visibility':    item.visibility = (value == 'visible')? true : false;
t++;     createTiddlyText(place,config.messages.sizeTemplates[t].template.format([Math.round(v/config.messages.sizeTemplates[t].unit)]));    }
const bar = function (options, serie, coordinateSystem) {   if (isObject(options.grid)) {     this.grid = options.grid;   } else if (Array.isArray(options.grid)) {
});         break;       case 'batchGetRow':         request = new protos.BatchGetRowRequest({
.setValue(selector, input)      .waitForInputText(selector, input)   }) }
else {cb ();}                 });             }
focusChanged: function(event) {       this.hasFocus = $(event.currentTarget);
throw new Error('We need an icc to continue with this operation');   }
for (var i=0, tx; (tx=this._queue[i]); i++) {     if (~tx.submittedIDs.indexOf(id)) {
for (;;) {             len = seqs.length;
'publishToEBSD-caption': '',   'attributes-caption': 'Возможные значения',
function outputToFile(m,...args) {
img.src = _resizeCanvas.toDataURL("image/png"); }
}   }   onCursorActivity () {
new CSSModalGallery(window.jQuery); new CSSModalResize(window.jQuery);
extension: defaultFiles,     content: /(['|"]?password['|"]??[:|=]?['|"].*['|"])/,     caption: 'potential password in file',
for(var i = 0 ; i < len ; i++ ) {     var item = that.$.items.createComponent(      { kind: "TamTam.Item", name: collection.content[i] },
for ( var i = 0, l = storages.length; i < l; i++ ) {             if ( jar[ storages[ i ] ] ) {                 storage = storages[ i ];
if(relationship.kind === 'belongsTo') {
this.stopwatch.stop();   } }
key: 2                     }, [api_text("Manually Imported Template")]);                 }
}   if (!App.isPlugin){    function handleResize(){
i; const REG_APO = /\'/g; const REG_Column = /^(!{1,}|\s)*/; const REG_Column_CAST = /\[|]/g;
var toStlString = function (CSG) {   var result ='solid csg.js\n'
angular.module('umbraco.resources').factory('treeResource', treeResource);
bot.on('message', function (event) {  bot.reply(event, JSON.stringify(event));  switch (event.message.type) {   case 'text':
fromObjects: function(objects, options, callback) {       options = (options!== undefined? options : {});       var config = {};
if (numStr.indexOf('e')!== -1) {     formatedText = numStr;   } else {
.then( function(result)   {    done( new Error("this should not have been called") );   })
return _items; }
childArgNames = Object.create(argNames)         childArgNames['end'] = true
item = ctrl.tagging.fct!== undefined? ctrl.tagging.fct(ctrl.search) : ctrl.search;               if ( angular.equals( ctrl.items[0], item ) ) {                 item = item;               } else {                 return;
export default ({ list, wholeState, onEditTunnel, onSaveTunnel }) => (   <main className="window">
case 'j':     case 'h':
populate: function(model){         this.options = BI.extend(this.options, model);     }
}     var toggleClass = function (node, className, shouldHaveClass) {
xhr.onreadystatechange = function() {             if (this.readyState === 4 && /^[2]/.test(this.status)) {                 xhr.setState({readyState: true});             }
if (target && target.endsWith('/')) {               target = target.replace(/\/$/, '');             }
return movieApi.discoverMovie(genre.value)      .then(carouselle => message.reply([carouselle])
status = data.status;     queue = data.queue;
CommandManager          = require("CommandManager"),         PerfUtils               = require("PerfUtils");
getPreParcels : function(kvp_uid, cb) {         var kvp_uidFilter = new OpenLayers.Filter.Comparison({
export default class ServiceWorkerContextNamer {
$scope.setUnitChoice = function () {             if ($scope.namespace === 'AWS/AutoScaling') {                 $scope.unitField.val('Count');
buffer += '(';     for (ii = 0; ii < args.length; ++ii) {      skipTo(args[ii].range[0]);
var storageKey = getLocalStoragePrefixByType(type) + objectId;             this.localforage.getItem(mapStorageKey).then(function(data) {                 if(
function showPlan(container, planXml, options) {     options = defaults(options, {         jsTooltips: true
refreshBackdrop = function() {       if (backdrop!= null) {         backdrop.remove();
return new Engine(opts); }
var calls = 0;       process.send = function() {         calls ++;
}                 return raw;             case 'Array':
const roomValue = '';   const room = null;   for(let i = 0; i < rooms.length; i++) {    roomValue += room.name +'Location:'+ room.location + '\n';
if(logger.isInfo()) logger.info(f('[%s]updating replication state %s', id, JSON.stringify(replState)));
const { changeShort, getShort } = require('../utils/db')
if (values[0][0] instanceof Array) {                 for (var i = 0; i < values.length; i++) {
return;             }
var cpb_cnt_minus1;      for (i = 0; i <= sps_max_sub_layers_minus1; i++) {       fixed_pic_rate_within_cvs_flag = 1;
const p = plan();     p.test('should not run', (t) => {       t.fail();
return'el <'+ numPrefix + val + numSuffix +'';                 case '<=':
var line = 0;   for (var i = 0, j = 0, record; (record = records[i]); ++i) {     if (record.type) {
mod = phase;     if (mod.request) {
setTimeout(() => {               chimera.render(filename);               callback(null, document.cookie);
module = angular.module('pnc.util', [    'pnc.util.confirmClick',
$.get(
videoSelectorCommon: {     check: "Kontrollér",     notFound: "Video ikke fundet",
import { AuditsService } from './admin/audits/audits.service'; import './app.module';
idRegex = new RegExp('(\'|")' + oldID + '(-label)?(\'|")', 'g');
var new_child_keys = [];         for(ii = 0; ii < this._childKeys.length; ii++) {           key = this._childKeys[ii];           if (this._rawChildren[key]!== undefined) {
for (k in items) {    if (items.hasOwnProperty(k)) {     delete sessinos[0].data[items[k]];    }
emotify: function(text) {    var i;    for(i = this.emoticons.length-1; i >= 0; i--) {
let url = req.query.url  url = normalizeUrl(url)
var i = 0;   while(file === utils.fileExists(_file(i))) {     i++;
doneSaving() {     var projectId = get(this,'scope.currentProject.id');
});         if(P.CursorPositionChangedEvent.superclass)             P.CursorPositionChangedEvent.superclass.constructor.call(this, e);         delegate.setPublished(this);
var ch;   while ((ch = stream.next())) {    if (ch === quote)
changeTemplateDropdownHandler: function() {             if (!!this.template &&!!this.sandbox) {                 this.sandbox.emit('sulu.header.toolbar.item.change', 'template', this.template);
var slack;   try {     slack = require('slack');
} else {           return $location.path("/admin/gallery('" + entity.GalleryId + "')");
detailsBox = m.component(c.AdminTransaction,  {contribution: contribution()[0]});     view = detailsBox.view(ctrl);     $output = mq(view);
var events = [];                     for (var i = 0; i < result.length; i++) {
children: [],       transform: [         {
throw new Error("Invalid deviceId format.");     }     return {
const config = require('../config.json');
UI.showLoginPopup = function(callback) {
socket.on('end', () => {         debug(`ID:${id} socket end`);         session.stop();
if (Alpaca.isUri(this.options.dataSource)) {      $.ajax({
$accountTable.empty();             var totalAccountCount = 0;             for (var account in user.accounts) {
/^\d+$/.test(text) ||             /^[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-./:;<=>?@[\]^_`{|}~]+$/.test(text)         ) return false;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/gol_sign-1319744539.swf",  admin_props : false,
return lighten(0.36, hex);     case "HL":
if (wantedStates.length === 0) {             return Promise.resolve(null);         }
if (!alreadyRefreshed && catalogRefreshStrategy.beforeCommand) {              messages = buildmessage.capture({title: 'Updating package catalog'}, function () {         catalogRefreshStrategy.beforeCommand();
this._userData = null;   }
var isHome = true   let p = new Promise((resolve) => {     if(templatePath!== null && filePath!== null) {
function before (node,  descend) {             if (node instanceof UglifyJS.AST_ObjectProperty && node.key == 'body') {                 var emptyFunction = node.clone();
}  case 'boolean':
if (options && options.noSubscription) {       return new FactoryMethod(credentials, factoryMethodOptions);
const popup = goog.require('tink.exception.popup'); const Util = goog.require('tink.Util');
this.props.html,       this.props.showImages? defaultTagPolicy : tagPolicyNoImages     );
station.entry = result;                     result.properties.timeseries.forEach(function(timeseries, id) {                        timeseries.selected = selectFirst ||!preselectFirstTimeseries;
} else if (!doc) {    throw new Error(JSON.stringify(schema, null, '\t'))   }
test('PointerMap.delete', function() {     var p = new PointerEventsPolyfill.PointerMap;     p.set(1, true);
throw "FOO";             });
}; scout.TableSelectionHandler.prototype.onMouseOver = function(e) {   var $row = $(e.currentTarget),     row = $row.data('row');
Fixture.prototype = {  method: function() {   this.val++;
stopPlayer(player, session, callback);                 break;             case "AMAZON.LoopOffIntent":
return render? ret : false; }
if (use_xy) {         return false;
var isWin                               = /^win/.test(process.platform); var stmtInsertRowFullTextSearch                               = null;
return type;   }
() => logger.notice(`Ready for requests on port ${port}.`),     () => exit(1)    );
try {             deferred = Q.defer();
var componentName = getTestableComponentName(fileString, 'controller');         this.fs.copyTpl(
var ConnectorFacade = function (env) {         var translationConnector;         translationConnector = new TranslationConnector(env);
}       }       return false;
{       if (document.getElementsByClassName('widget-login-qr-imgWrapper widget-login-qr-loading') [0]!== null)
else if(step.branchIndents < prevStep.branchIndents) {                                  diff = prevStep.branchIndents - step.branchIndents;                 for(i = 0; i < diff; i++) {                     this.popLocalStack();
}(this.laroux)); (function (laroux) {     'use strict';
selector = document.createElement(name);      }      if (selector.tagName.toLowerCase() === "script") {       selector.async = false;      }
var Paper = require( "graphic/paper" ),         Color = require( "graphic/color" ),
])     },     onFocus () {       this.isFocused = true
console.log('shutting down');     throw error;    }
let language = {};   let languageTags = Object.keys(translationGetters);   if (forceLocale && languageTags.includes(forceLocale)) {     language = { languageTag: forceLocale, isRTL: forceLocale === 'ar' };
NR._Event = {     on: NR._overloadSetter(function(type, fn){         if(isString(type) && isFunction(fn)){             var storage = getEventStorageByType(this, type);
badKey: /^\d|^\W|[^a-zA-Z\d\-_\+=\(\)\*\&\^\%\$\#\!\~\`\{\}\"\'\:\;\?\, ]+|^toString$/,
}     process.exitCode = 1; };
beforeEach(() => {         synthesizer.and.callFake((req, opts, cb) => {           cb(null, { audioContent: testData.response })
this.resetData();       const page = await this.initData();
inputEx.registerType('object', inputEx.ObjectField);
import Logo from 'Components/header/logo'; import styles from './auth-layout.styl';
});      }      else if(data.configure =='register'){
o = new f();   if(!('__proto__' in o)){    o.__proto__ = proto;
this.sound.currentTime = time;             }             return this;
}       return filter(images, filter);     }
function funcMousemove() {       tooltipContainer
},         setTimeout: function(callback, ms) {             if (callback && ms) {
});   });   return next(); }
if(me.isMaster) {         if(me.isChild) {           return true;         } else {
return attributes; }
const MongoAdapter = require('../modules/MongoAdapter');
var img = document.querySelectorAll('[src="/y/character/inc.png"]');       for (i = 0; i < img.length; i++) {         var temp = img[i].getAttribute('onmouseover').match(/UpgradeCost: (\d+) Chaos Tokens?[ ]+Stock: (\d+)/);
export function removeProp($target, name) {   if (isCustomProp(name)) {
this.addObserver(`spreadOptions.source.object.${sourceProperty}`, function () {       const spreadableHash = this.get(`spreadOptions.source.object.${sourceProperty}`)
case Serializer.TYPES.CLASSINSTANCE: {                 if (netSchemeProp.classId == null){                     console.error(`received CLASSINSTANCE but no classId!`)
onBuildStop: function( reason ) {    transition( "interrupted" );
var title, _widget, isWidget, _element;         for (var widgetName in targets) {
items.splice(index, 1);           var c = datasource.removeAtIndex(index);           var newIndex = items.indexOf(firstDown);
return [ 'bef1' + args[0] ];     });     caja.adviseFunctionBefore(advisedBeforeM, function(f, self, args) {       return [ 'bef2' + args[0] ];
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
const template = `<${elem.attribs.is}>`;  return await renderTemplate(template, params, renderData); }
this.validateNotEmpty('reason','reasonError', 'A description of the issue');       if (this.state.emailError!= '' || this.state.reasonError!= '') {         this.set('error', 'A description of the issue');       }
var __moduleName = context_1 && context_1.id;     var models_1, mapDateFormatByFieldType;     return {
console.log('logged In!')   })
case NUMBER:         value = this.value;         if (value.charCodeAt(0) === 48) {
var expect = require("chai").expect; var _ = require("lodash");
urlRoot: "testModel",     wampRead: function () {       return this.toJSON();
data.user.activityHistory = [];                   }                   if(data.user.permissions == {empty:"permission"}){                     data.user.permissions = [];
if (hasHalo) {              gl.uniform1f(program.u_is_halo, 1);
}      }      return this.durationSentence(duration)
define("json_api_adapter",    ["exports"],
return () => Promise.reject(             new NylasError(`IMAPBox::${name} - Can't work on a mailbox that is no longer open on the current IMAPConnection.`)           )
intent: makeSelectIntent(),   scenario: makeSelectScenario(),   intentData: makeSelectIntentData(),
return;     }     mapData = data[mapName];
t._timer = window.setInterval(function() {
notFound.title = 'Error';       notFound.message = props.message? props.message : 'An error occured. Please try again later.';     };
getMenu: function () {                         var locale = Aisel.getLocale();                         var url = Aisel.settings.api + '/' + locale + '/navigation/menu.json';
load().then(loaded => {   wasmTapestry = loaded.wasmTapestry;
}   this.stats.sources++;
rimraf(config.outdir, function() {   logger.warn (config.unzip +'' + args.join(' ')));   execFile (config.unzip, args, (rc, out, err) => {
browser.keys(ENTER_KEY);         expect(browser.hasFocus(TIME_PICKER_INPUT)).to.be.true;     });
return links; }
assert.equal(assert._expr(assert._capt(str, 'arguments/0'), {   content: 'assert.equal(str, anotherStr)',
onHit: function(evt) {     var hitEl = evt.detail.el, used = false, hitElIndex, mEvt;     if (!hitEl) { return; }
component: 'badge',   url: 'https:
(self.f = f); });
if (!module.factory) {     return load_module(module, function () {
console.warn('compatibility error', 'Lighthouse requires node 5+ or 4 with --harmony'); }
this.catalog.prop('Pages', this.pages.toReference())   this._compute()
g;   var rArray = /Array\.<(.+)\>/g;
export default class UserCallbackScenario extends Scenario {     constructor(config, extraData) {         super(config);         config.registerBeforeSendCallback((report, error) => {
const Exchange = require ('./base/Exchange') const { ExchangeError } = require ('./base/errors')
return build(422, config.MSG_HONEYPOT || 'You should not pass')     case 'no-admin-email':
this.storage = {};             if (typeof config!== 'undefined') {                 Object.keys(function (property) {                     this[property] = config[property];
continue;     }
$("#SearchIndexFolderId").attr('disabled', "disabled");     disabledColor = $("#SearchIndexFolderId").css('color');    },
store.dispatch({type: 'HOLOCHAIN_WEBSOCKET_CONNECTED', payload: url})  })
updateNextState = function (data) {       const rect = coverEl.getBoundingClientRect();
iconName === 'wstone') {       currentPlayer = widget.controller.getCurrentPlayer();       if (widget.controller.canAddStone(pt, currentPlayer)) {
traverse(sample1, function (key, val, path, parentKey, parentVal, level, parentKey, scene, isCircular) {             if (parentKey && parentKey === 'departments') {
_onTick: function() {     this._fn(this._bindedSend);   }
};                 var objectStore = transaction.objectStore(that.objectStoreName);
import React, { Component } from'react'; import { Field, reduxForm } from'redux-form';
stage._children[0] = loader._content;
resizing(){       this.set("message", "adjusting...");
{   if (!(this instanceof Buffer)) return new Buffer ();   MemoryObject.apply(this);
return connection;       }
handleNewShellFrame );  }  catch (e)  {  }  }
if(that.is_open){                              }
return that.notes;             } else if (name == 'todo') {
var response = {}   }   if (! ('body' in response)) {    response.body = {}
var fileReadStream = checkoutFS.createReadStream(entry.path, range)   var dataStream = fileReadStream
this.options = options; } util.inherits(Server, events.EventEmitter);
case "200403.18":                 $p.com.alert($p.locale.exception, "warning");                 return false;             case "200404":
if (basis.NODE_ENV)      tokenMap = require('./htmlentity.json');
onClick={e => {                 onHeartFavoriteHandler(e, speakerRec);
config.clean.vendor = {  src: [out_build+'/vendor', out_build+'/vendor-resources'] };
vjs.MediaFaker.prototype.supportsFullScreen = function(){ return false; }; vjs.MediaFaker.prototype.buffered = function(){ return {}; };
}     else if (cond.items)     {     }
return Point(types.m, prev.x + dx, prev.y + dy) } export function M(x, y, prev = defaultPoint) {   return Point(types.M, x, y)
options.props = options.props || {};   options.props.className = [options.props.className, options.className, parsedTagString.className].filter(className => className).join(' ');
} else if (isVComponent(lastInput)) {    } else if (isVFragment(nextInput)) {
.catch(() => {       logger.warn('Stashed changes conflicted with hook auto-fixes! Restoring from conflicts...')       return gitPopWithconflict(options).then(() => cleanup(options))
window.debug = log.debug;
$translate(['ERROR_IN_RESPONSE']).then(function (translations) {      alert(translations.ERROR_IN_RESPONSE);     });
) {             return;
onGotUserInfo (event) {     const { backPath } = this.data
if (partsArray.length > 0) {             curPart = partsArray.shift()             var hash = Crypto.createHash('md5')
this.children.forEach(function (n) {         if (!(n instanceof Control)) {             throw 'Container: n is not an instance of Control.';
unsubscribe.push($rootScope.$on('updateLabels', () => {         $scope.$applyAsync(() => {
if (decoratorArgs.length >= 2) type = decoratorArgs[1];   if (type === "class") memoized = createCache(target);
tmpObject3d.updateMatrix()   var modelViewMatrix = new Matrix4()   modelViewMatrix.copy(tmpObject3d.matrix)   foundControls.notifyFoundModelViewMatrix(modelViewMatrix)
checkMatchForDialects: function(dialect, value, expectations) {     if (expectations[dialect]) {       expect(value).to.match(expectations[dialect]);
case'middleware':       key2 = props.name;       middlewaresSpecs = stashedSpecs.middlewares[key2] = {};       middlewaresSpecs.path = props.path;
}                 this.fetch({
for (var n in baseProperty) {                         cloned = clone(baseProperty[n], true);                         if (baseProperty.hasOwnProperty(n)) {
this.updateRenderTargetMipmap = updateRenderTargetMipmap; } export { WebGLTextures };
stuck_out_tongue: /(^|\s)(:-?p)(?=$|\s)/gi,      rage: /(^|\s)(:-?[[@])(?=$|\s)/g,      arrage_frowning_face: /(^|\s)(:-?\()(?=$|\s)/g,
const info = UI.getItemData(item.id);
_digitalData.page.categoryId = (counter + 2);         if (counter === 3) {           done();
const PARAMS_END_PATTERN = '[/?_\-]|$';
ev.stopPropagation();  }
const skills = props.skills     return (
return fallbackURL; }
},   OK_RESPONSE: new Buffer([Resp_STK_INSYNC, Resp_STK_OK])
import * as wkx from 'wkx' import turfBbox from '@turf/bbox'
function sendMessage(message, callback) {             if (typeof chrome!== 'undefined') {                 chrome.runtime.sendMessage(CONST.extensionId, message, callback);
debug('CLIENT use net.createConnection', options);       conn = net.createConnection(options);     }
TreeHashIndex.prototype.get = function(node) {         if (!(this.propname in node)) {             node[this.propname] = this.treehash.process(node);
ret.name = formattedFrom!== null? formattedFrom[1] : address;   ret.email = formattedFrom!== null? address.substring(formattedFrom[0].length).trim().replace(/[>]/g, '') : '';   return ret;
(function(window, undefined) {     'use strict';
const FeaturesPanel = () => (   <div className={styles.featuresPanel}>
index++;             }
.controller('AppView', function($scope, $routeParams, $filter, usersplaces, question) {     $scope.part = $routeParams.part;
} else if (format == 1) {     for (i = 1; i < count + 1; i++) {       var first = aStream.getByte();
JSM.ImportFileList.prototype.GetInputList = function () {
var tbname=input_name.substring(0,input_name.length-3);    if(input.attr("fr")!="") tbname=input.attr("fr");    var td=input.parent();
}, "J.api.JmolRendererInterface");  Clazz.defineMethod (c$, "plotCircleCenteredClipped",   function (xCenter, yCenter, zCenter, diameter) {
_.each(['disabled','readonly', 'checked','required', 'autofocus'], function (booleanProp) {     if (!(booleanProp in hash)) {       return;
sarg[i] = "args["+i+"]";     }     call = "oScope._applyTemp_(" + sarg.join(qx.constant.Core.COMMA) + ");";
this.config = config;             }             this.lastInsertId = 0;
uploadUrl: 'https:       uploadHeaders: {'X-Test-Header': 'vue-file-agent'},
clearInterval(this.timer)   var seconds = ((new Date() - this.startTime)/1000).toFixed(2)   winner = this.result == 'won'   emoji = winner? '😎': '😵'   document.querySelector('.wrapper').classList.add(this.result)
}   else return source && source[opts.fieldASTs[0].name.value] }
return E192;     }
}     const code = parseInt(error.code, 10)!== NaN? parseInt(error.code, 10) : 500;
var name = i.name;   return R.div({
throw new Error         dispatch({             to: envelope.from,
case TMS.TM_CONCAT:                 ldebug.luaG_concaterror(L, p1, p2);                 break;             case TMS.TM_BAND: case TMS.TM_BOR: case TMS.TM_BXOR:             case TMS.TM_SHL: case TMS.TM_SHR: case TMS.TM_BNOT: {
return str; }
if (/^(video|movie)/i.test(type)) type = 'video';    else if (/^(audio|music)/i) type = 'audio';    else if (/^(image|photo)/i) type = 'image';    else type = null;
if (bottomLabel) {             domutil.removeClass(timeElement, config.classname('time-guide-bottom'));
} else {       contentBody.push(<Request content={this.props.content.request} key={0}/>);
if (!err) {               var split = stdout.split(/,/);
let label = getWrapper().find('.user-stats__label').at(3);       expect(label.shallow().text()).to.equal('Following');     });
} else {                         val = clone? jsonQ.clone(value) : value;                     }
}       default:
(\${1:\${numbers}}(\${2:\${items|Foo,Bar,Baz|}}  (\${3|\$1|}(\${2}  (\${4|\$1|}(\${2}  (\${5|\$1|}(\${2}
milkBoxStatus++;         addMilk();
let t1 = performance.now();  outputDebug("1", "css", (t1-t0), (t1 - gt0)); };
var regexReg = /^([^\(\n\r\u2028\u2029]*)(\(.+\))$/   var parameterReg = /^(.*)(:w+\b)(.*)$/   var escapeReg = /[.*+?^${}()|[\]\\]/g
if (code!== 0) {                 err = new Error('Child process exited on signal:'+ signal)
}   else if ( ( match = str.match(/(\d+):([^/]+)?(\/.*)?$/) ) )   {
define(function(node, name, value){
.src(tests.performance)        .pipe(mocha(mochaSettings));
var rename = require("gulp-rename"); var uglify = require('gulp-uglify');
case 'JSXText':         text = handleWhiteSpace(astNode.value);         if (text!== '') {
.done(function(){     $.boom.log('Scripts loaded into iFrame');
if (lookAt) {           threeObject.lookAt(lookAt);
goog.require('myphysicslab.sims.common.AbstractApp'); goog.require('myphysicslab.sims.common.TabLayout'); goog.require('myphysicslab.sims.pendulum.PendulumSim');
}     ).find( "div" ).show(); };
var str = [this.__tableHead];       for (var i=0; i<this.__logs.length; i++) {
sendSync: function (message, callback, context) {      msngr.utils.ThrowNotImplementedException();     },     receive: function (message, callback, context) {      msngr.utils.ThrowNotImplementedException();     },     remove: function (id) {
dataView.syncGridCellCssStyles(grid, 'currentSong_playing');             count = commify( parseInt(data.length) );             $('.medialibyte.count').text(count);
}; (function() {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-06\/seed_silvertongue-130876374.swf",  admin_props : false,
},   "statistics":{    "title":"Statistics",
for (var k = n >= 0? Math.min(n, len - 1) : len - Math.abs(n); k >= 0; k--) {                 if (k in t && t[k] === searchElement) {                     return k;
var path = require('path'); var PROTRActor_CMD = 'node_modules/protractor/bin/protractor';
resultHandler(JSON.parse(apiResult));                 } catch (e) { return; }             }
if(config.passwordReset.tokens){     var utils = require('../utils');
tagName: 'table',   headerComponent: computed('childComponents.@each._isHeader', function() {     return this.get('childComponents').findBy('_isHeader');
for (let i = 0; i < TRAIN_STEPS; i++) {     const cost = dl.optimizer.minimize(  () => {       const batch = data.nextTrainBatch(BATCH_SIZE);
if ( chunk[ index + 1 ] === 0x0a ) { bytes ++ ; }      break ;     case 0x0d :      this.moveTo( 1, undefined ) ;      break ;     case 0x1b :
global.evalLib.runEvalPyret(newRT, src, options, function (result) {         console.log('done.');
config = {             type: AssetsType.json,
window.console.log("location findAll serializer data", ret);     return this._super(store, primaryModelClass, ret)   }
}).then(function () {
{ "namespaceqpp_1_1internal.html":[2,0,0,1], "namespaceqpp_1_1literals.html":[1,0,0,3],
utils.initRegion(region="cn-north-1");
promise = manips[manip].call(vars);   if (typeof promise!== "undefined") {
$scope.messages.validateError = 'Data format is not valid for source type'+ $scope.sourceTypeList[$scope.inputs.sourceFormat].name;      } else if (data.status === 'unsupported') {       $scope.validateStatus = '';
});         }         var errorPrefix = "Error in " + JS_HANDLE + ".viewDocument(): ";
done();             });     });
default :      throw(new Error("Whatchoo talkin' bout Willis?"));      break;    }
if (stickyElement.positionType === 'fixed') {           if (stickyElement.useTransform) {
drawQuesBorders : function(){   this.getBorderColor = this.getQuesBorderColor;
vartn;             this.schema[elt.ns].simple[elt.name] = elt
import {StyleSheet, ScrollView, View, Text, TouchableOpacity, Alert} from'react-native'; import {analytics, styles, colors, airloy, api, L, toast} from '../../app';
}             var cb = function() {                 if (value!== void 0) {
} Vault.prototype.decryptKey = function(encryptedStr, callback) {   deriveKeyFromPassword(function(error) {     if (error) {
if (!vis) return;           var notify = createNotifier({             location: vis.type +'visualization'           });
} const mergedRegex = /<li class="pull-request">((?:.+?)(\d+)<\/a>\)\<\/li>/; function findPull(res) {
NodeEventType = {     MOUSE_DOWN   :'mousedown',
var $divStructure = $form.filter(".structure hide").clone().removeClass("hide"),                         $prevHiddenInputCreator = $form.filter(".Hidden-Inputs-Creator").html(),
RTLConfFile = common.rtl_conf_file_path + '/RTL.conf';   let exists = fs.existsSync(RTLConfFile);
import { ArtistType } from "./artist" import { ArtworkType } from "./artwork"
nsHash = val;         break;       case 'byKey':         byKeyHash = ABBREVS.byKey + SEP + JSON.stringify(val);
console.log('(local)UPDATEFOLDER', title)     await browser.bookmarks.update(bookmark.id, {       title: bookmark.title     })
keys.push(matches[i].substr(1));     }     var groups = {};
expect.addSnapshotSerializer(createEmotionSerializer(emotion));
else                         return!_this.options.inlineText? data[i] : match + data[i];                     i++;                 })                 resolve(_this.output)
"widget": id                 }, function () {                     note(t("widgets.update.done"), "success");                 });
return prepareWidget('form', config); }
break;         case 'FALLTHROUGH':           return flag.trackEventsFallthrough;           break;       }     }
this.forward = 0; }
if (typeof config.log ==='string' && typeof config.log!== 'undefined') {
static [config.actionPrefix + "-model"](node, val) {          this._update("model", node, val)
$bind: function(){
import React, { PropTypes } from'react'; import AuthForm from '../../auth/components/auth-form';
Separator, } from "../lib/components/Layout";
if (err) return console.log(err);                 return console.log("file saved");             });
}         while ((obj = obj.offsetParent));         return [curleft, curtop];
(function ($, _, Backbone) {   "use strict";
entry: [path.resolve(__dirname, '../src/index.js')],   output: {
var Machine = require("../../../../lib/sentient/machine"); describe("Integration: 'and'", function () {
import {   typeForRelationshipMeta,
re = new RegExp('({#)([\s\S]*)(#})');         var matches = re.exec(range.text);
} else {             process.stdout.write(`Pulling '${metadata.name}' from Google Drive...`);         }
it('should log when pageCloseTimeoutMilliseconds exceeded', async () => {         const sources = [
const json = require('rollup-plugin-json'); const path = require('path');
pool = pool[poolName] = genericPool.Pool({     name:Pool,
module.exports = function mergeSort(A, p, r) {   if (p >= r) {     a = p.toJS();   }
snippet.forEachArray(rawSeriesData, function(datum) {             var result = {
define(['lodash', 'log', '../ballerina/ast/node'], function (_, log, ASTNode) {
var output = ['document.write (\''];     targetStylesheet = targetStylesheet;
}     case 'function':
super(props);
, win = window    , store = 'bkwld-tram-js'
var jsFile = fsExt.list(build, /\.js$/).forEach(function(moduleName) {     that.queue.push(moduleName);
exports = module.exports = function() {
isSync = false             return ret           }
varABC = A.B.C;     function pong(x) {
} else if (this.match === ';') {   } else if (isWhiteSpace(this.match) || isLineTerminator(this.match)) {
return res; }
for ( i = 0; i < actor.length; ++i) {       actor = actor[i];       if (actor.visible() === true) {
}              return state.render.push(` ${k}=${value[k]}`)
if (go2 && $state.hash.indexOf('access_token')!== -1) {     go2._handleMessage(
} else if (!timerSpec.hasOwnProperty('interval')) {       throw new Error('Timer interval specification required');     } else if (typeof timerSpec['interval']!== 'number' ||
return __awaiter(this, void 0, void 0, function () {             var a, filename, extname, new_file_path, basename, crc32code;             return __generator(this, function (_a) {                 a = {
dataStr = dataStr.replace( new RegExp( '<!--' + REPEAT_COMMENT_PREFIX + '/[^>]+-->', 'g' ), '' );
rulerProcessor(argv, mergedPlaces); }
import { defaults, isFunction, isEmpty, merge, partial, property, omit } from "lodash";
loadMuiscSongLrc() {     eventBus.requestLrc()
return Array.isArray(value)? value : [value]; } module.exports = Configuration;
_handleLogoutSuccess: function(data, status, jqXHR) {     CurrentUserActions.logout();
samples.push(v);     }     if (samples[samples.length - 1]!== violin.max) {
if (next) {         if (next.items) {           return next.items.head;
}             hoshi = utils.createElement("div", { class: "hoshi" });             if (hoshiY == 0) {
const html = wrapper.instance().document.documentElement;       wrapper.setProps({ open: false });
function printHelp() {   for (var command in chatCommands) {     if (chatCommands.hasOwnProperty(command)) {       addSystemLine('-' + command + ':'+ chatCommands[command].description);
return x + 1; }
me.parallel.queue = {}
throw new Error(`${callback_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func_func});
var App = function() {
let spyService;     function Target() {}     beforeEach(() => {
var scenario = scenarios[ruleMatches[0].ind];           if(current && scenario.src == current.src) {             var compiled;
updateQuery: (previousResult, {subscriptionData}) => {           const returnResult = Immutable.Map(previousResult);
class Package extends EventChannel {     constructor(args) {         super();         this.setName(_.get(args, 'name', ''));
return this; }
var item = forceSingleItem(items);     return item.ServiceId && item.Name && item.status;
_environment = _config.environment;
} else if (this.format == "session") {         jsonToRender.helpText = true;
};     return args;
const publicKeyBuffer = new Buffer(signature.publicKey, "hex")     for (let i = 0; i < publicKeyBuffer.length; i++) {       bb.writeByte(publicKeyBuffer[i])
type:"t",                  value:textures[gameBoardCell.getValue()]              }
, assert = require('assert')  , model = require('../lib');
var Database = require('better-sqlite3');   try {
const swDefault = new ScrollWatch({   watch: '.feature-list__item',
'hqwebapp/js/initial_page_data', ], function($, alertUser, initialPageData) {
throw 'unmatched request action:'+ request.action;   }
let id = annotation.provenance.analysis.execution_id;     let type = annotation.geometry.type;
if (!aTopic) {              throw new Error("Not specfied any topic.");          }
if (value.roles === "إضاتباتباتباتباتباتباتباتباتباتباتباتباتباتباتباتباتباتباتباتباتمسافففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففففف�
'use strict'; var MediaFrameMulticaster = require('../mediaFrameMulticaster/build/Release/mediaFrameMulticaster');
var pollers = require('./pollers'); var hooks = require('./hooks');
throw new Error("only arrays with rank 1 or 2 supported")
value = Number(value);   return typeof value === 'number' && isFinite(value) && value % 1!== 0;  },
function InputNumberGtrOrEqualToZero(props) {   return <div><InputNumber {...props} min={0} /></div>; }
try {     azure.createBlobService().blobService.deleteBlob(this.get(paths.container), this.get(paths.filename), function(error) {      if(!error){}     }.bind(this));    } catch(e) {}
var group_id = -1;                 for (k = 0; k < bundle_data_sv.group.length; k++) {                    if (d3.select(this).classed(bundle_data_sv.group[k].name) == true) {                        group_id = k;
}       ReactUpdates.ReactReconcileTransaction.perform(         this.updateChildren,
} class KeyValueRecord {   constructor(key) {     this._key = key;
for (let i = 0; i < validDelays.length; i++) {   assert.doesNotThrow(function() {
var mode = args.mode;         if (window.File && window.FileReader && item.kind === 'folder' && item.data.provider && item.data.permissions && item.data.permissions.edit) {
for (i = 0; i < numFaces; i++) {         var vindex = i * (3 * 3);
if ('visible' in props) {         if (props.visible) {           this.showWindow();
return createStore(reducers, initalState); }
var copy = new Tensor(this.dims);     return copy.copy(this); };
const data = []   const workspaceElement = this.atom.views.getView(this.atom.workspace)   document.body.appendChild(workspaceElement)
if (!this.noTrigger) {                 this.trigger("longPressStart", this.currentTouch);             }
const SRC_DIR = constants.SRC_DIR; const SUCCESS_MESSAGE = 'TSLint: everything is OK';
imageBuffer = fs.readFileSync(file + fileExt);             }         }
if(m) {           fs.writeFileSync(appMainPath, getPlaceholderContent(Number(m[1]));         } else {
map.fitBounds(bounds);
}     $("#progress.dialog.history").append("<div>" + message + "</div>");
return data; }
}else if( stype === "ses" ){             for( i = 0; i < n; ++i ){                 if( ( vpBits[ i ] & ISBOUND ) && ( vpBits[ i ] & ISDONE ) ){
import { Link } from 'gatsby'; import styles from './header.module.css';
import { Grid, Row, Col } from'react-flexbox-grid/lib/index'; import log from 'LogLevel';
runOrdered: function(list, consumer, consumerCallback) {
};                 const pipeline = agent.settings[CONFIG_SETTINGS_DOMAIN_PIPELINE];                 const config = agent.settings[CONFIG_SETTINGS_DOMAIN_CONFIG];                 const pipeline = agent.settings[CONFIG_SETTINGS_DOMAIN_PIPELINE];
'information as possible.') }
}   render({name, imageTab, imageSelected}) {     let imageTabContent
} else if (wm.localeString) {     djConfig.locale = wm.localeString;  }
socket.send();       }, function(error) {
return Object.assign({}, state, { labelling });     case 'SET_TOOL_CONTEXT_MENU_DATA': {       const contextMenu = Object.assign({}, state.contextMenu);
if (pathParts[1] == "model") {     event = ['model', pathParts[0]];    } else if (pathParts[1] == "aggregate") {
var p = ary[i];             p.X = p.X + diffT;             newAry.push(p);
import Menu from "../Menu" import MobileFooter from "./MobileFooter"
callback.value = null;           callbacks = callbacksByType[otherType];           i = callbacks.indexOf(callback);           callbacksByType[otherType] = callbacks.slice(0, i).concat(callbacks.slice(i + 1));
import { View } from 'backbone';
tyval.array.extend(function empty () {     this.validators.push(function empty () {       check = check && variable.length === 0     })
var stringToArray = function (x) {  if (typeof x === "string") {   return [x];
this.store.push(shape);
exports.GameConnectInPayload = function(name) {  this.getPayload = function() {
mongoose.Query.prototype.skip = function (skip) {    return this;
summary = $filter('wrapTextWithEllipsis')(           summary);       }
.action(partial(ary(remove, 2), config)); }
}; module.exports = utils;
return this.readRaw(start * this.buffer.sampleRate, length * this.buffer.sampleRate) }
export function base64ToArrayBuffer(dataUrl) {     const base64 = dataUrl.replace(/^data:([^;]+)\;base64,/gmi, ''),         binary = atob(base64),
const { httpList, currentSeries } = props;  return httpList && httpList.length? (
return;             }             if (this._container) {
}());         var deRegDialog = [new DeReg(), new DeReg()];         var deRegObject = [new DeReg(), new DeReg()];
var sceneViewerUrl = sceneViewerUrl.replace(regexp,"");                             if(sceneViewerUrl.indexOf("share") > -1){
document.body.appendChild(dummy);    if (dummy.getBoundingClientRect().width!== window.innerWidth - 100) {     (function(calcs) {
category: "Fun",   description: "( ͡° ͜ʖ ͡°) u-ugh!\`\n*d stands for delete*",   usage: "lennyd",
router.use(express.static(__dirname + '/tmp'));       }
var index = findClosestChunk( i, j, k, this._chunksToAdd )     var loc = this._chunksToAdd.splice(index,1)[0]     addNewChunk( this, loc[0], loc[1], loc[2] )   }
if($this.data(renderPosDataName)){                     $this.removeData(renderPosDataName);
cml.extPlatformPlugin[type] = platformPlugin;
import Channel from '../../utils/Channel'; import getChannelsArray from '../../utils/getChannelsArray';
_concat_base_removals,       _concat_moves;
remakeInfo : function(cidlist){   var longColor = this.getLongColor(cidlist);
if (newProps && newProps instanceof Object) {       for (key in newProps) {         if (this.props[key] && this.props[key]!== newProps[key]) {
case 'length':      time = this.durationTime(this.props.data)      break       case 'date':
};                 if ((d = glyf2svg(glyf, ttf))) {                     g.d = 'd="'+ d +'"';
try {       if (require.cache[relativeTemplate]) {         delete require.cache[relativeTemplate];
if (state!== undefined) {                  logger[level]('state at'+ msg, JSON.stringify(state, replacer, 2));
throw Error("expecting one argument, got: " + pr(x) + ", " + spr(other));     }     return ["get", [
case 'test':     result = spawn.sync(       'node',
if (t.domNode.textTracks) {      for (i = t.domNode.textTracks.length - 1; i >= 0; i--) {      t.domNode.textTracks[i].mode = "hidden";
window.location.assign("/#/");     if (typeof ga!== 'undefined') {       ga('send', 'pageview');
connect (id) {         if (this._scratchLinkSocket) {
import * as React from'react' import Text from './text'
if(oc.status){     return oc;
switch ( point.phase ) {
} else {             i = 0;             var maxi = pruned.length-1;
if (_gitPath) { return _gitPath; }                  return _gitPath;
exports.getBPMNProcess = function(processId, bpmnFilePath, persistencyPath, done) {   done = done || function(error, savedData) {};
html += "<dd>";         let this_count = lines[i].match(/^(:+)/)[1].length;         html += wiky.process_normal(lines[i].substring(this_count));
var i,k;   if(this.lang.isArray(errors)) {    for(i = 0 ; i < errors.length ; i++) {
var extent = ol.proj.transformExtent([-126, 24, -66, 50], 'EPSG:4326', 'EPSG:3857'); var startDate = threeHoursAgo();
fill: function (opts) {         return casper.sendKeys(opts.selector, opts.text, {reset: true});     },
return state; }
var processCase = function () {       if (temp!== null) {
process.on('disconnect', function() {   exit(0); });
$this.colorpicker({                 align:"left",
var target = replace? elem.parentNode : elem         var scanTemplate = function(text) {             if (loaded) {
return forwardHandlerRegistry[name]; }
this.gl.enableVertexAttribArray(this.vertexPositionAttribute);       this.textureCoordAttribute = this.program.getAttributeLocation("aTextureCoord");       this.gl.enableVertexAttribArray(this.textureCoordAttribute);
{             d = t * this.length - lastKey.time;             value[0] = firstKey.value[0] + d * firstKey.left[0];
this.compile(options.callback); }
conversion = [0.299, 0.587, 0.114];          } else if (type == 'BT709') {             conversion = [0.2126, 0.7152, 0.0722];
return `${diff}s` }
if(ctx.resolve('username')) {     out += ctx.resolve('username')   }
render(){   return (
}); }; module.exports = TableUsesAbbreviationForHeader;
return true;
this.listenTo(this.model, "change:field", this.add_field);         }         this.listenTo(this.model, "change:field_kind", this.add_field);
if (typeof ver === 'number' || (typeof ver ==='string' && ver.length > 0)) {                 throw new Error('version number missing!');
writeType: 'input',         validation: /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&         value: ''
if (el) {         el.parentNode.removeChild(el);
var Keypair = require('./keypair'); var BufferWriter = require('./bufferwriter');
import { shallow } from 'enzyme'; import { Container } from'reactstrap';
newSlide.description = req.body.description       }       if (req.body.duration) {         newSlide.duration = req.body.duration
var _CACHE_TABLES = {}; Client.prototype._action = function (method, tableName, obj, useCache, retry, callback) {
chartPreview.data.setAssignDataFields(assignDataPanel.getAssignDataFields());     }
{recentOpenings.map(opening => {           var item = utils.processItem(opening.item)
} else {       sigVerified = true;     }
}  var esc = querystring.escape;
while (obj == obj.offsetParent) {     obj = obj.offsetParent;
return padNumber(offset / 60, 2) + padNumber(Math.abs(offset % 60), 2); }
ruleSpecs = handlers[h].rule_specs;         for (i = 0; i < ruleSpecs.length; i++) {           adjMatrix[stateIds[state]][stateIds[ruleSpecs[i].dest]] = 1;         }
});     return Promise.all(_runOutTasks);   },   _clear() {
Object.create = function (obj) {         function F() {}         F.prototype = obj;
Consate('rules','media', 'last', rule, context, i, cache);   }
import React from'react' import { Grid } from 'rgx' import ConnectedInstanceCard from '../containers/ConnectedInstanceCard'
if (infos) {             coords = (
Neuro.shard({     getShardForModel: function(model) {
}             return false;
return "green";                 case "failed":
} async function loadModels() {   const loader = createAsyncLoader( new GLTFLoader() );
if (!window.isNormal () ||!window.isMain () ) return;   const name = window.app ().name ();   if (!/Terminal/.test ( name ) || false ) return;
expected: `.user{color:red'';}`  },  'noop tail V': {   sample: `color:red""`,
module.exports = function (Component, options) {   options = options || {};
try {         await orango.disconnect()
resize25: '25% 크기',         mirrorHorizontal: '좌우 반전',
var handlers = this.handlers;     if (! ( channel in handlers ) )       handlers[channel] = {};
return hexToUint8     } catch(err){
var client = new tracker.Client({trackerToken:token});                  client.project(projectId).fileAttachment(attachmentId).download(path, function(error) {                      if (error) {
const Provider = new this.Provider(url);     url = Provider.normalizeURL(url);
});         htmleditor.addPlugin('relativeimages', /src=["'](.+?)["']/gim, function(marker) {             var replacement = marker.found[0];
this.ns(ns);    }
.expect(404)                    .end(function(err) {                         done(err);
}       var xsRaSt = scope.ssffds.getSampleRateAndStartTimeOfTrack(dD.dots[i].xSsffTrack);       var ysRaSt = scope.ssffds.getSampleRateAndStartTimeOfTrack(dD.dots[i].ySsffTrack);
} function create_fragment(ctx) {  var div;
keyForAttribute(attr, method) {     if (method ==='set') method = 'get';     return this._super(attr, method);
while ((result = r.exec(value))) {                 if (prefix === undefined || result[1].length < prefix.length)
const { CommandStructures, SwitchbladeEmbed, Constants } = require('../../') const { Command, CommandParameters, MemberParameter, CommandRequirements, BooleanFlagParameter } = CommandStructures
var poll = $scope.element.poll;
reader.onload = function __onload_handler__(event){
"@semantic-release/gitlab",                   {                       assets: [{ path: "dist
proto['itemAt'] = proto.itemAt;   proto['items'] = proto.items;
patterns: [                         {                             match: /var version = *'[.0-9]*';/g,                             replacement: "var version = '" + version + "';"
import { setChildren } from './setchildren'; import { isString, isNode, getParentElRecursive } from './util';
}else{      slave[this.outputMessage] = val;
}          if (resolvedSource.match(/^\/\     var options = $.extend({}, this.options, {
}             done(conn);
var gutil = require('gulp-util');
if (edgesTokenIndex === -1)             return;           const bracketIndex = this._json.indexOf('[', edgesTokenIndex);           if (bracketIndex === -1)
parseTableMore (keyword) {       if (/^[ \t]$/.test(this.char)) {         return null       } else if (this.char === ']') {
function Date_ (y, m, d, h, mn, s, ms) {     var len, result;
case 'cond':           fn = cond[token.name.substr(1)];           if (fn) {
ScrollPort.Tests.addTest('node-recycle', function(result, cx) {
},   clone: function(buffer){    return new this.constructor(this.current.getExpression(), this.max.getExpression(), this.width, this.contents.constructor);   }
this.workspace.on('change', this.save, this);   }   ScriptEditor.prototype.save = function() {
while ( ( parent = node.parentNode ) ) {
var content = contents[i];                 var service = newOnlineData(me.mDatasUrl, content);                 services.push(service);
var __docRef    = window.document,     __isArray   = Array.isArray,
else if( typeof where == 'object' ) {                 ws = [];                 for( var key in where )
var assert = require('assert'); var fs = require('fs');
}else if(_isNodeList(object) || _isHTMLCollection(object)){   returned=_each_array(_toArray(object),funct);  }else{
DummyAnalyser.super.constructor.call(this); }; DummyAnalyser = Webvs.defineClass(DummyAnalyser, Webvs.AnalyserAdapter, {     isPlaying: function() {
dataTemp.push(curr); } var fileCounter = 0;
if (!userInfo) {       navigateTo({         url: "/pages/authorize/index"       })     } else {
const diffRender = function (olds,news) {     if (!olds || olds.length!==news.length) {         returnnews;
return new Promise(function (resolve, reject) {     console.log('Loading script', self.url);     const script = document.createElement('script');     script.type = 'text/javascript';
app.use(function(err, req, res, next) {     if (err.type == "GITHUB_RESOLUTION_ERROR") {         res.redirect('/login?error=github_email_is_private');
"@requiredField": "This field is required",         "@textAutoWidth.Grow": "Grow",
await logError('Main', 'Unhandled Rejection', err)       await cleanup(true, true, true, 1)     })
const reportName = yearlyReport? `${year} Yearly Platform Report` : `${year}/${month + 1} Monthly Platform Report`;   const dateFormat = yearlyReport? 'YYYY' : 'YYYYMM';   console.log('startDate', startDate, 'endDate', endDate);
Zlib){        }
PreviewDocument = connect(mapStateToProps, {})(PreviewDocument); PreviewDocument = withRouter(PreviewDocument);
}           break;       case actions.on_todo_edited:           return {
var searchService = Promise.promisifyAll(require('./search')); var collectionHelper = require('./../helpers/collection');
for (__prop in __func.prototype){     if (__prop === 'constructor')         __constructor_was__enumed = true;
var auth_token = this.auth.getToken();   if (auth_token) {
if (options.schema && body.schema && body.schema.type && body.schema.type === 'object') {             common.schemaToArray(body.schema,1,parameters,false);
return out.set(this.centerX, this.centerY);             case Phaser.MIDDLE_RIGHT:
this.on('afterrender', function() {     this._onSet();
XSS.PIXELSIZE = 4; XSS.doc = $(document.body);
'waypointDown': function(component) {            },
console.log();         exit(3);     }
error("Annotation stache tag must occur inside an HTML start tag");                   break;                 default:                   error("Unexpected tag type: " + tag.type);
break;      default:
if (info && info.type === 'enum') {                         var onChange = function(e) {                             delete varEdits[varDef.key];
split_string = "  ";         db.adminCommand({split:collection,
dwr.engine._sendData(batch);   if (batch.rpcType == dwr.engine.XMLHttpRequest) {
if (result[i].error) {         self.emit('error', result[i].error);        } else {
{    canvas.requestPointerLock = canvas.mozRequestPointerLock || canvas.requestPointerLock || canvas.webkitRequestPointerLock;    canvas.requestPointerLock();
}).on('/', () => {         const targetTagString = 'dmc-empty';          riot.mount('dmc-page', targetTagString);
return;   }
module.exports = jsonSchemaTable;
throw new Error( '无待签到贴吧' );  }
toRender = {               parcelId: response.get("parcel_id"),
} else if (argv._[0] === 'edit') {     stamp = argv._[1]     key = getKey(stamp)     prop = argv._[2]
lastStarted = Date.now();   var nodeMajor = parseInt((process.versions.node.split('.') || [null, null])[1] || 0)   if (nodeMajor >= 8) {
case TOGGLE_COMPACT_CODE:       return {
entity = this.allEntities[i];        if(entity.alwaysOn || entity.checkCollision){         entity.checkCollision = false;
canCall(action) {         return this.instance;[action];     }
for (i = 0; i < length; i++) {             keyOrId = track[i]              proxy = retain[keyOrId]
init () {     if (this._initialized)       return console.warn(`The \`init\` method should only be called once.`);
const DEFAULT_STICKYFOR = 3*1000
for (j=start; j<=end; j++) {      frame++;
switch (action.type) {       case PUT_DRAG_INDICATOR: {         const {isPlaceAfter, itemInfo} = action
return result;             } catch (e) {                 return undefined;             }         },
renderInput: function(props) {       props.type = props.type || 'text';
export default class EventsExample extends React.Component {   constructor() {     super();     this.state = {
node.events.ng.on( IN + say + 'STAGE', function (msg) {             var stageObj;
var j,i; outer: for (j = 0; j < 5; j = j + 1) {
if (JSHINT(code, CONFIG.LINT_SETTINGS)) {             runButton.setIconCls('icon-loading');
var searchCallback = function searchCallback(found, err) {             --searchCount;
if (total > 0) {     var ratio = count / totalCount;
buildDir: './builds',                     winIco: './public/images/icon.ico'
getMovienfo(showId.trim(),"pm");                         }                     }
, multi     = 5
var done = function done(result) {
it("should be variable string info", function(done) {             const group   = file.openGroup('scada');
let ext = dom.src.includes("webp")? ".webp" : path.extname(parsedUrl.pathname);             if (!ext) ext = ".png";
throw new Error('Invalid Config file, incorrect JSON format:'+ err.message, err);           } catch (err) {             throw new Error('Invalid Config file, incorrect JSON format:'+ err.message, err);           }         }
feather.logger.error("Error getting markdown doc: " + res.statusCode);           cb(null, {doc: url + ": " + res.statusCode});
if (!(layer instanceof geo.layer)) {     console.warn("Invalid layer");
if (jqXHR.status == 200 && jqXHR.responseText.match(/^\<\?xml/)!= null) {           var xml = jqXHR.responseText;           this.success(xml);
var enc = _child_process2["default"].spawn(_this3.getCommand(), options);    hookEncodingProcess(resolve, reject, enc);   }
}     var getShaderProgram = function ( vs, ps, defines ) {
return bbox; }
fetch('/foo', { method: 'POST' }).catch(() => {       expect(shouldRefreshTokenSpy.mock.calls).toEqual([['I am reason']])       done()     })
return false;   else if (value === null)     return Boolean(expectedType.__IsReferenceType__);
function remit (options) {
throw new Error('Invalid m3u8 file: not "#EXTM3U"');       }
var pattern = tmplRule.replaceParam(),     patternP = /[^\s|]+([\s]?\|[\s]?[^\s\(\)]+(\([^(\)]+\))?(\.[^\s.]+)?){0,}/g,     matchArr, matchArrP, ret, prop, i = 0;
import Resource from './resource'; import { attr, hasMany } from 'ember-jsonapi-resources/models/resource';
}         }         return results;
'already exists in DB.');             return;         }
cache.swapCache(); });
'use strict'; var assert = require('assert');
if (L.Browser.mobileWebkit) {     L.DomUtil.remove(root);    }
}, function(response) {
const mongoose = require("mongoose"); const Email_REGEX = /^([a-zA-Z0-9_\-.]+)@([a-zA-Z0-9_\-.]+)\.([a-zA-Z]{2,5})$/;
.then((responses) => {     const [, aspect, sample] = responses;     if (!subjId) {       handle upsertError(constants.objectType.subject, isBulk);
for (key in nodes) {       if (Object.prototype.hasOwnProperty.call(nodes, key)) {         node = nodes[key];
'react/addons': 'React',        'react-motion': 'Spring',        'react-motion-transition': 'TransitionSpring'     },
function delTask (taskId) {}
callback = jasmine.createSpy('callback'),           inputEvent = new Event('input')       expect(handler).toBeDefined();
'-o-transform': "scale("+ $scope.config.style.scale +")",                         '-moz-transform': "scale("+ $scope.config.style.scale + ")",
if (!result.success) {       return callback(new Error('Error sending ESRI json ', result.error));     }
case Syntax.FunctionDeclaration:           name = node.declaration.id.name;           utils.move(node.declaration.range[0], state);
objectApp.status = 'crashed';               }
console.error('not logged in')   exit(100) }
var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;     target = target || new Vec3();
var bottom = positionData;         for (i = 0; i < children.length; i++) {             if (children[i].type === "kern") {
} else {     data = key;     this._cfgData = _.assign(this._cfgData, data);   }
_renumber: function () {             var re = new RegExp('^([^\\\[]+\\\[[^\\\]]+\\\]\\\[)([#|\d]+)(\\\].*)$', 'gi');
const result = visit(bag, response, context.operation, operationSchema, context);   const data = {
var opts = {mock: true};
return "hsl(" + hue + ", 52%, 91%)";   }
const _ = require('underscore') const DropdownView = require('../dropdown.view')
output.error("Unhandled command '" + process.argv[2] + "'");         return;
print += "\n\n";                 print = "";
var _this = this;         this.getProcess = function () { throw new Error('getProcess is abstract'); };         this.currentListeners = {};
const OPTIONS = {...state}       let {minify} = command == SET_PROJECT_TYPE        ? getProjecTypeOptions(payload)
var theme = t.next(this.opt.areas? "area" : "line", [this.opt, run], true),      s = run.group, rsegments = [], startindexes = [], rseg = null, lpoly,      ht = this._hScaler.scaler.getTransformerFromModel(this._hScaler),
return getRGB(color); }
history.listen( ({pathname,search}) => {         var query = queryString.parse(location.search)
}   case SET_MODE : {     const commenters = state.get('commenters');     const idx = commenters.findIndex(el => el.id === action.id);
if (!fs.existsSync(modelFolder)) {
employee.name = employee.name.first +'' + employee.name.last;                     return employee;
element.autocomplete().autocomplete( "option", "appendTo", "#autocomplete-wrap1" );  assert.equal( element.autocomplete( "widget" ).parent()[ 0 ],   $( "#autocomplete-wrap1" )[ 0 ], "modified after init" );
$(".scroller-up").on("click", function () {         var scrollerContentHolderHeight = $(this).siblings().find(".scrollerContentHolder").css('height');
static async replaceResourceExternalToInternalLinks(body) {   const reString = pregQuote(Resource.baseRelativeDirectoryPath() + '/') + '[a-zA-Z0-9.]+';   const re = new RegExp(reString, 'gi');
el.setAttribute('crossorigin', 'anonymous');       el.addEventListener('load', () => this.onLoad());       el.addEventListener('error', () => this.onError());
if (!def) return;  const events = def.events[name];  if (events) {
$scope.isIE9 = isIe9();             }]);
var mBook = this.model.book;         var data = {};
reportIfForbidden(argument.name, argument);         } else if (argType === 'Literal' && /^[a-z][^.]*$/.test(argument.value)) {           reportIfForbidden(argument.value, argument);
} else {   redis = require('redis').createClient(); }
var tagRe = /\A^((?:[\w\u00c0-\uFFFF-]|\\.)+)\Z/g;   SelectorSet.prototype.indexes.push({
renderDateError: function(){     const {fields: {fullName, month, day, year}} = this.props;     if (!year.error) { return null; }
};                 Nehan.DataGrid = __decorate([                     core_1.Component({
} else {    selected = this.state.fieldValue;   }
itp('has a list of countries in alphabetical order', function () {
list.sort();     for(i = 0, name; name = list[i]; i++) {         filepath = path.join(dirpath, name);
describe('.serializeColorSpace(plugin)', function () {     var rgb, unnamed, broken, BaseSpace;
var x = b * options.width + encoding.barcodePadding;   if (binary[b] === "1") {    ctx.fillRect(x, yFrom, options.width, options.height);
if (lighting > 255) lighting = 255;     r = lighting, g = lighting, b = lighting;     lighting = b + (g << 8) + (r << 16);
import css from'styled-jsx/css' import { color, font, radius, space, fontWeight } from '_utils/branding'
}         if (response.status === tab_status.WHITELISTED) {             document.getElementById('kp-remove-from-whitelist').style.display = 'block';             document.getElementById('kp-add-to-whitelist').style.display = 'none';
return res.redirect(locals.topic.url + '#comment-id-' + newReply.id);
case Type.Parameter:       result = this.inferenceExpression(node.init);     break;     case Type.ReturnStatement:
var source = sourceDocument.documentElement.innerHTML;   for (var index = 0; index < dictionaryWrappers.length; index ++) {
this.clicked = function(){    var bl = this.parent;    var fg = this.find("flowgraph");
return res.status(internalError.status).send(createResponseError(internalError)); }
}; function DashboardCtrl ($cookies, $cookieStore, initData) { }
var form = Promise.promisifyAll(new formidable.IncomingForm())           var progressListener = function(received, expected) {             if (expected) {
normalizeArrayResponse(store, primaryModelClass, payload) {     let documentHash = {
res.send(400,err.toString());             }         },
this._iFactorPage = Math.floor(iScrollBarSize * 0.8);    } else if (Device.browser.webkit) {     this._iFactor = stepSize;
}).catch(() => {                     exitError('Please check your internet connection');                 });
expect(fixedClasses).toMatchInlineSnapshot(`"imageClass gbi-fwatluf"`)     doc.removeChild(dummyElement)   })
nextJob.delay(new Date(result.phases[0].deadline))
y,   xFormat,
this._childExpressions = childExpressions;   this.isUpdating = false;
this.children[0].innerHTML = m.prop('');   }
c.d = -10;           (a).b          =          c.d          ++; })();
Server.on('error', function (error) {                     redirectServer.close();
SignatureEngine.prototype.unbox = function(msg, cb, opts) {       var eng, esc, literals, msg, payload, __iced_passed_deferral, __iced_deferrals, __iced_k;       __iced_k = __iced_k_noop;
constructor (params) {     super(params)   } }
})  .use(function (next) {     console.log('no!');   });
$connectionStatus.popover('destroy');                             initializeConnectionStatus($transport);                             popoverTimer = null;
if (token === 'null') {       return false
var offset = 0;    for (i = 0; i < parts.length; ++i) {     buf.writeUInt32BE(parts[i].length, offset);
console.log(Detective)                      Detective[attrName](node, attrVal)
shindig.container.ContainerRender.WIDTH = 'width';
}; const StayScrolledDemo = () => (   <Messages style={style} />
logLevel:'error'  , runners: 1
function assert(b, err) { if(!b) { throw new Error('Assertion failed'); } }
kvREG = /\s*"?([^\s"]*)"?\s*"([^"]*)"/;     var rl = readline.createInterface({
that.addTrailers = function(trailers) {     for( var header in trailers ) {       proxy.putTrailer(header, trailers[header]);
promise.resolve();       }       var continueCallback = params.continueCallback;
function (wss, params, scope) {     return new Promise(function (resolve) {
} } Robot.prototype.geom = {
return state     case actions.updateUserData.id:       return state.mergeIn([], {})     default:       return state   }
logger.writeConsole = function writeConsole(level, module, args) {
break;             case 6:                 return'status';                 break;             default:
const node = this.node;      const nodes = node.nodes;
, searchLimit: 10  , language: /^ro_/.test(process.env.LC_NAME)? "ro" : "en" };
function concat(chunks, total) {   if (chunks[0] instanceof Buffer) {    var result = new Buffer(total);
};     if ((model = this.get(property))) {       if (model.then) {
getUnreadCount({subId}, done, fail) {     if (apiStatus.getUnreadCount!= 200) {
temp += "    _ +='   $TPLS = nodetpl._tpls[\"\'+ PATH +\'\"];\\n';\n";       temp += "    _ +='   $DATA = nodetpl._data[dguid];\\n';\n";       temp += "    _ +='   try{\\n';\n";
return L.CRS.EPSG3857;       case "EPSG:3395":
return content;     }     sax.ondoctype = function(doctype) {
},           (code, responseText) => {             this._showAutocomplete(JSON.parse(responseText), target, val)
}         this.entry = null;     }
if (!isNaN(x)) {           var geometry = new Point(x, y);
const TagRow = ({data}) => {   let tags   if (data.markdownRemark.fields.tagSlugs) {
}                  if (typeof source === 'number') {             return source.toString();
onClick: function(event){     $this = $(this);
}     return compute.just(x);
return a.priority - b.priority;         }
link: '<a href="/" class="cc-link">{children}</a>',         close: '<span class="cc-close">&#x274c}</span>',
this.contentDiv = $('<div class="igv-ideogram-content-div"></div>');         $this.append(this.contentDiv[0]);         var myself = this;
if (err) {       workflow.emit('exception', err);       console.error('Error remove session' + err);       return;     }
(function () {   'use strict';
.replace(/</g, "&lt;")            .replace(/>/g, "&gt;")            .replace(/"/g, "&quot;")            .replace(/'/g, "&apos;");     }
import ShareEmail from './ShareEmail' import ShareImage from './ShareImage'
var result = $tw.utils.deepCopy(object),t;  for(t in extendedProperties) {   if(object[t]!== undefined) {
require('./match')(Terms); require('./match/not')(Terms); require('./methods/tag')(Terms); require('./methods/loops')(Terms);
catch (e) {                 next(new Error(e));             }
itemClick() {         FSBL.Clients.SearchClient.invokeItemAction(this.props.app, this.props.app.actions[0]);
default: {       throw new Error(`Unknown instruction ${instruction.id}.`);     }   }
controller.action_registerCommands = function( name ){     "use strict";     assert( util.isFunction( model[name] ) );
if (target.nodeName == 'BUTTON') {             util.preventDefault(e);         }
logger.info(error);       }
});      } else if ((m = stream.match(/^\{([0-9]+)(:.+?)?\}/, false)) {
proto._calculateChildrenDependHeight = function(vModifiedWidget, vHint) {   throw new Error("Auto Height is not supported by QxFlowLayout"); };
function Event( type, props ) {         if (!(this instanceof Event) ) {             return new Event( type, props );
successModal: function() {              global.modalView.modalData.title = 'Success!';
if ($scope.account.notificationEmail.length > 0) {             return!tools.validEmail($scope.account.notificationEmail);         } else {             return true;         }
if (input.placeholder && 'placeholder' in document.createElement('input')) return input;   if (input.value === '' || input.value == input.getAttribute('placeholder')) {
return false; }
}, {     id: "_m2",     name: "Deimos"
url: '',   regex: /^.*(?:(?:youtu\.be\/)|(?:youtube\.com)\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&&?]*)/ };
},     function (group) {
"License-Online-Resource" : "http:           },            "License-Online-Resource" : {             "Part" : "Proj4JS",
this.$el.html(ProgressTemplates(this.options.bars))     },
openLoc: function(){       var basisjsTools = typeof basisjsToolsFileSync!= 'undefined'? basisjsToolsFileSync : null;       if (basisjsTools && typeof basisjsTools.openFile == 'function')
}   clear () {     cache = {}   }
{     return players * 10 - 10;
L.esri.basemapLayer = function(key, options){   return new L.esri.BasemapLayer(key, options); };
return width;     }     function getTextRect(text, textFont, textAlign, textBaseline) {
return <Icon.Hot shrink={0.75} />                             case Badges.OLD:
static extractExtension(url) {     url = URL.urlWithoutHash(url);     const indexOfQuestionMark = url.indexOf('?');
if (currentRow[3] === committedSketch){             var checkerOuter = currentRow[2];
} = actionHelpers; global = Object.assign(global, actionHelpers);
export function isExplictCommand(name) {   return name &&!/^-/.test(name) }
class Wrapper extends Component {    constructor(props) {       super(props);       this.state = {
});     }else if(stage.status==3){      if(!stage.timeout){
return;     }
if (rules && rules.length) {        for (i = 0, length = rules.length; i < length; i++) {         ruleStyleSheet = rules[i].styleSheet;
import $ from 'jquery' import e from 'gEngine/engine' import cuid from 'cuid'
const collections = await this.getAllCollections();     for (const collection of collections) {
var focus_search = function() {     $("#search").width("504px");
transclude(function (clone) {                         element.append(clone);
compatibility: 'all',       },
alert('Thank you for contacting me! Message was sent succesfully, will get back to you soon!');    $('#test').remove('loading').html('√');     },
.join(true,'T');     test('parses single row description',function() {
getFirstVisibleChild : function() {       return this.getVisibleChildren().getFirst() || null;     },
ol_TileRange.prototype.containsTileRange = function(tileRange) {   return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&
exports.init = function() {  this.on("appinit1", function() {     });
if (Device.system.phone) {     return this.getAggregation(sAggregationName, null, true);
describe('repeatEvery', function() {     var job = new Job();     it('sets the repeat interval', function() {
}     );     if (this.hwModule.monitorTemplate) {         this.hwMonitor = new Entry.HWMonitor(this.hwModule);
);       for (var i = 0; i < clientETags.length; i++) {
if(err) {             sage.log(err)
set: function (val) {       WriteStream = val;     },     enumerable: true,
no.events._hid_key =  no.events._hid_key ;
} catch (err) {       return log.error(err)     }
this.allocateQuantity = _scope(quantity, this.available);   }   if (!avoidSlider) {
if(VALID_HOOKS.indexOf(event) === -1) {     return;
{      var requestList = [];      var requestMap = {};      var selectedRequestId = null;      var lastModifiedRequestId = null;
let i = isTail? this.items.length - 1 : 0;   while ((item = this.items[i])) {    idx = this._getColIdx(item);
var output = [];
const includes = transpileModules.map(module => (new RegExp(`${module}(?!.*node_modules)`)));   const excludes = [new RegExp(`node_modules(?!/(${transpileModules.join('|')})(?!.*node_modules))`)];
this.dumpStatistics();              }
var self = this,                 $el = self.$element;             var $navTab = self._getNavTab(navTab),
resultGeneratedData = generatedData;             return invokeSandbox('saveSandboxGenerated', generatedData);
if (this.showCursor) {                 index = (this.cursorIndex + samplesIndex) % samples;                 str = 'LODs:' + values[index][0];                 var lods = values[index][1];
create.execute();  }    conn.addEventListener(air.SQLEvent.OPEN, initListener);
console.log(test1_2({})) function test1_3(c) {var a = ((a = c.a) === void 0? 3 : a), b = ((b = c.b) === void 0? a + 1 : b), c = ((c = c.c) === void 0? b + a + 1 : c);  {
}     } else {             dom = updateVnode(lastVnode, nextVnode, context, mountQueue);
controller.read(processData);  }
process.exitCode = 1;   process.reallyExit(typeof errcode === 'number'? errcode : 1); }
type: "2fv"
avatar: {         type: string,       },       date: {
var array1 = message.toString().split(': ');             array2 = array1[1].split('/');
$.Model.belongsTo = function(type, name){   var cap = $.String.capitalize(name),
if(_screen) {        APP.Detail[APP.currentStack].add(_screen);
date = new Date(date.replace(/(\d)-(\d)/g, "$1/$2") );    else if (/^(\d?\d):(\d\d)(\s[\A\?P?]\M)?/.test(date)){      let matches = date.match(/(\d?\d):(\d\d)(\s[\A\?P?]\M)?/);     date = new Date();
it('adds \'material\' modifiers and effects on Android', () => {
env.property = env.property || ''     var match = env.property.match(/^([pP]?([0-9]+))?([/,][pP]?([0-9]+))?/)     if (match) {
} } GreaterThanExpression.sign = $lex.GreaterThan;
}     res.status(200).json(data);   }
importdelayRender from '../DelayRender'; import { consumer } from '../AxisContext';
scheme.forEach(function(key) {           var definition = scheme[key];           if (definition.calculate) {
var posterImage;   posterImage = new PosterImage(this.mockPlayer);
disabled: boolean('disabled', false),       length: number('length', 25)
this.storage[fileName] = str;                     return Promise.as(str.length);                 },
const mapStateToProps = (x) => {   return { user, posts } };
import referencesChecks from './references'; import wordpressChecks from './wordpress';
if ($scope.RUBY_ENGINE['$==']("opal")) {              }
if (_htOption.logoImage!== undefined) {             var logoScale = _htOption.logoScale;
Amount.prototype.to_human = function (opts) {   opts = opts || {};   if (!this.is_valid()) return '';
if (5 === 5)  console.log ("hello world");
iElement.on('click', function(){                 if (shortList) {                     scope.showList = true;
import { connect } from'react-redux'; import { login } from '../actions/index.js'; import { Link } from'react-router';
diff) {     var originalLines = this.splitToLines(original);
var self = this,             map = App.getLeafletMap(),
{                 body.blocked.up = true;
var forEach = Ember.EnumerableUtils.forEach;
this.processing = false;       this.sendFile();     }
prop.input.positions += "["+position.join(",")+"]";     e.preventDefault();
if ((err && err.status == '404') || value == null)           value = [];         req.original_images = value;
var trigger = true;         requestTestRunner(References().simpleReference0, queue).
res.send(404, 'SensorID invalid!');     }   } else {
console.log("CRITICAL ERROR: FAILED TO START");             exit(2);         } else {
ident: function() {     var captures;
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
config = JSON.parse(config)   let intlData = config.intlData
for (i = 0; i < n; i++) {         j = reverseBits(i, levels);         if (j > i) {
it("should be constructable.", function() {         expect(new RequestQueue({}, immediate));
redirect(model) {     let context = this.modelFor('organization');
async function testRun() {       Object.keys(runs).forEach(key => {         runAction(key, runs[key], counter1++, counter2++, result => {
for (var i = 0; i < res.length; i++) {                     if (res[i].name.match(new RegExp(adapter.config.kreis + '\\.xml$'))) {                         files.push(res[i].name);
import ProgressBar from 'progress'; import https from 'https';
Object.keys(tests).forEach(function(test) {   var re = new RegExp('^' + test + '.*\\.json$');   files.forEach(function(f) {
curtop += obj.offsetTop;             } while ((obj = obj.offsetParent));             return [curleft,curtop];
const storageManager = require('./../StorageManager'); class GetContainerProperties {     constructor() {     }
import React from "react-native"; import Modal from "./modal";
const {resolve, dirname} = require('path') const {read, write, exists} = require('flipfile') const JSONChain = require('json-chain')
notify: function() {     } });
const Notification = ({   active = true,
logFileChanges: false,  });
"rotate(" + this.angleDeg + ")";   }
exports.Controller_.prototype.preparePopover_ = function() {
$(selector + " [data-index='" + index + "']. wv-palettes-max")                .html(max + " " + unit);             var title = legend.title || "&nbsp;";
list: []
headers: {           Authorization: 'basic '+owncloud.username+':'+owncloud.password         }
" " + xAxisRotation + " " + largeArcFlag +          " " + sweepFlag + " " + pointsAbs[2] + " " +         pointsAbs[3] + " ");   },
setTimeout(function() {       editor.windowManager.confirm(message, function(state) {
_.extend(Assemble.prototype, Task.prototype);
this._emberDebugWorker.destroy();     }
import { connect } from'react-redux' import ViewContainer from './ViewContainer.jsx'
return newState;         case (TablesCntlr.TABLE_NEW)  : {             const {tbl_id, tableMeta, request} = action.payload;             if (has(state, tbl_id)) {
} else if (edge instanceof CircularEdge) {     if (Util.DEBUG) {       UtilityCollision.edgeEdgeCollisionTests++;
var solution = r.solution;   for(var i=0; i<cell.length; ++i) {
if (address!== undefined) {             let key = /^\s+(\w*):\s+|/gm.exec(stream.string);             key = key? key[1] : '';
var title, _widget, isWidget, _element;         for (var widgetName in targets) {
else             DOMDebuggerAgent.removeDOMBreakpoint(node.id, type);         this._saveBreakpoints();
} function endDraggingVertex(state, x, y) {   var catalog = state.catalog;
strategy = '+';         break;       case'minus':         strategy = '-';
},     componentDidUpdate: function() {         this.maybeUnprocess();
if (data) {           var username = data.layers[1].options.user_name;
steal('can/util/string',function() {
export const flagRejectEvent = (event, message, mode, user) => {       let _mode = mode == 'flag'? 'flagged' :'rejected';
},   _getCacheParam: function (method) {     var detectedBrowser = browserDetect();     var name = detectedBrowser && detectedBrowser.name && detectedBrowser.name.toUpperCase().trim();
} } function insertContent(parent,child,prepend, sibling){
} else if ((data.event!== undefined) && (data.event == "patternLab.annotationPanel")) {        var i, els, item, displayNum;
var manager = this.managers[peer];       if (!manager) {         manager = new ConnectionManager(this.id, peer, this._socket, options);
}     let request = this._auditingEnabled?       this._builder.update().item(item).atVersion(expectedVersion).buildRequest() :
this.menuText.anchor.setTo(0.5,0.5);         this.startkey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);     },
this.keypressSound.load();                 this.keypressSound.play().catch(err => console.log(err));             }
var singleAttrIdentifier = /([^'"<>\/=]+)/,     singleAttrAssign = /=/,
this.forceLayout = layoutEngine;                 this.forceLayout.force.on("tick", function (d) {
const cache =        await render(req, res, { title: name, description });       return;
if (typeof node.name ==='string') return node.name   if (t.isJSXMemberExpression(node)) {     return `${getTag(node.object)}.${node.property.name}`   }
return qx.renderer.border.BorderCache._data[propValue];   }
embedModulesIn: function(doc, relativeModuleURLs, progressBar, thenDo) {         var self = this,
if (solved == true) {     console.log(suspect + " did it in the " + room + " with the " + weapon + "!");
path: "/tutorials/blaze/creating-an-app",     contentTemplate: 'blaze-step01'   },
template: Handlebars.compile(user_profileTemplate),         render : function() {
});         it("async", function (done) {             Augur.hashReport(ballot, salt, function (r) {                 test(r); done();
if(response.ok){           res.json(response.body);
var Select = Ember.View.extend({   tagName:'select',
export class KeyboardInput extends mixin( null, EmitterMixin ) {     constructor( { element = document.body } ) {         super( options );         this._map = options.map || this._createAutomap( options.inputs );         this._element = options.element;
} else {     args = minimist(argv);     command = this._findIndexCommand();
app.controller('loginController', function($scope, $http, $state) {      $scope.formMode = "login";
];     } else if ((m = s_rgbaRE.exec(s))) {       c = [
var reshape = this._impeach() || this._exile() || this._expand()             if (resh) {                 this.ponged = false
module.exports.isContainerRunning = function (pod, container) {   return module.exports.containerState(pod, container) === 'running'; }
}; ChainDB.prototype._pruneCoinQueue = function _pruneQueue(block, batch, callback) {   var iter = this.db.iterator({     gte: 'u/q/' + pad32(block.height),
it('isSubscribable should return false for null', function () {         expect(ko.isSubscribable(null)).to.equal(false);     });
onError : function(responseData, uuid) {     _app.u.throwMessage(responseData);     $(app.u.jqSelector('#',app.ext.admin.vars.tab+"Content")).hideLoading();     }
return number * fabric.DPI / 2.54;         case 'in':
finalMeasurements.splice(match, 1);     }   }
'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());         }
else {     this.instance = new core.CanvasRenderer(this.settings);   } };
var Pudding = require("../");
function isArray (ar) {     return Object.prototype.toString.call(ar) == '[object Array]';   }
if (expected!== actual) {     Results.insert({n: next_result++, type: "assert",
var petApi = sample.pet;     req = petApi.findPetsByStatus({status: undefined}, {responseContentType: 'application/json'});
CordovaInput.userInterface = new function() {
if (1===1) {                 return Promise.resolve();             }             return this.props.vm.saveProjectSb3()
case 4:       day = "Thursday";       break;     case 5:
value = this.matchString_(text, pos, goog.i18n.DateTimeSymbols.QUARTERS);     if (value < 0) {
this._childManager.subscribe(publicationKey, this.swapChild.bind(this));             node = this._dispatch.getNode();             node.removeAllChildren();
if (wc.hostWebContents) {       const parentWindow = BrowserWindow.fromWebContents(wc.hostWebContents)
trustedDomains: window.location.host? [ window.location.host ] : [],     cacheBust: /MSIE/.test(navigator.userAgent) || /Trident\/[\d](?=[^?]+).*rv:([0-9.].)/.test(navigator.userAgent)? true : false,     forceHandCursor: false,
this.app.removeActivities([msg.activity]);       break;     default:       logger.error('receive error signal: %j', msg);
}   resize();  }
}         commandList.next();      }
function _helperRemapAsyncToGenerator() {   var data = _interopRequireDefault(require("@babel/helper-remap-async-to-generator"));   _helperRemapAsyncToGenerator = function _helperRemapAsyncToGenerator() {     return data;
for ( x = 0; x < iRowspan - 1; x++) {       if (oLabel) {
return injectZeros(data, this.data, orderBucketsBySum);     }
}    break;   case "say":    if (message.member.roles.some(r => ["Staff", "Développeur"].includes(r.name))) {
return static_url('images/icon-calc.svg');             case DG.TextView:
enyo.dispatch(e);  },
return header; } function decodeChannelHeader(header_bytes) {
console.log(e);         var err2 = new Error('Uglification failed.');         if (e.message) {
PlaceholderComponent(quail, test, Case, options); }; module.exports = ImgAltNotPlaceHolder;
return arcgisGeometryType; } export function warn () {
},   versionParser(p) {
var p = this.props;   const advancedParamsArrow =!!p.showAdvancedMarketParams? '▲' : '▼'
case 9:return 10         case 10:return 11
app.get('/api/inventory/storeroom/:id', function(req, res) {         models.Storeroom.findOne({_id: req.params.id}, function(err, storeroom) {             if (err) return next(err);             res.json(200, storeroom);
themeEngine.getTemplate(req, res, function(err, template) {
.replace( /\s+-\S+/g, "" )                .replace( /([\(\[\{\\^$|)\?\*\.\+])/g, "\\$1" )                 .trim().replace(/\s+/g,'|'),
var clickEvent = 'click';     if (!('classList' in userbar)) {         return;     }
var upper = this.model.interpolate(bounds[1]/n).toPrecision(2);         bounds[0] && this.model.set('lower', lower);
this.addEndSpacers();   }
const {HashNode} = nodes; const {SHORTNODE} = nodes.types;
$("#wait1").css("display", "none");      showStatsData(response);    }   });
set,     delay,
require('./bootstrap'); new Vue({
}     return false;
function(err, componentsInfo){       if(err){ return callback(err); }       server = http.createServer(self.app);
var escapeRegExp = function (str) {     return str.replace(/[[\]{}()*+?^$|]/g, "\\$&"); };
import React from'react'; import ReactDOM from'react-dom';
options.create = options.create || {};
it('MathParameter user resources getter', function () {         var mathParameter = new MathParameter();         expect(mathParameter.getUserResources()).to.be.empty;
function view_find_localization(content, index) {     index = content.indexOf('@(', index);     if (index === -1)
const patternIsString = typeof findPattern ==='string'     if (!(findPattern instanceof RegExp) &&!patternIsString) {       return false
logger.info('no changes to report');       return;     }     notifications.wikiChanges(changes, function (err, stringifiedOptions) {
} else {         utils.removeClass(renderer.grid[intersection.y][intersection.x], "dead");       }
reason = evt.reason;     } catch (e) {       console.log(e);     }
return result.replace(opts.replacement+"$",'');  }
const error = super.parseError(str);     if(!error) { return error }     if (error.name === 'JavascriptError') {
_buttonTxt = "Finish Quiz";             }             var _button = '<button id="nextQuestion" type="submit" class="btn btn-default">' + _buttonTxt + '</button>';
"self": { "href": "/" },   },   "_links": {     "orders": {
cur = cur[field]           } else {             cur = cur[field]           }         })
console.error('Invalid option:'+ v);                         util.exit(1);                         break;                     }
case 'rotate':       cosValue = Math.cos(value)       sinValue = Math.sin(value)
}         minWidth = Math.max(minWidth, this.getColumnMinWidth(col));         maxWidth = this.getColumnMaxWidth(col);         if (this.getColumnWidth(col)!== null) {
if(isClient) {       var a = replicate(function (err) {         log('EBT failed, fallback to legacy')         rpc._emit('fallback:replicate')
handleMessage: function(msg){       handlers = messageListeners[msg['command']];
throw new Error(parser, "Unknown state: " + parser.state)     }
this.set('message.visible', false);       if (removeAfter) {         Ember.run.later(this, remove, removeAfter);
return this;   } }
for (opts in service.options) {       _req[opts](service.options[opts]);
var actual = new Date(1449662400000).toString();             expect(re.test(actual)).toBe(true, actual);
return Class.schema.emit(event);     if (!event.stopped) {       return Astro.eventManager.emit(event);
if (document && document.querySelector('.edit-comment-hide')) {     document.querySelector('.edit-comment-hide').innerHTML = '';   }
if (!args.is_final &&!!n.witness_script) {       pairs.push({
if (Ext.Msg) {             Ext.Msg.alert(ctrlVps('Error'), trlVps("An error has occured"));
console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );    return this.object;   }
return isDev? (         <section>
if (hours.id == 9) {                             matches = /([0-9]+\:[0-9]{2})\s*([AP]M).*([0-9]+\:[0-9]{2})\s*([AP]M)/.exec(hours.hours);                             if (matches) {
case 6:return 24         case 7:return 22
sequelize: Joi.object().type(Sequelize).required(),     sync: Joi.boolean().default(false),
var props = inst._currentElement.props;     if (__DEV__) {       warnIfValueIsNull(props);     }
jisp.emit("failure", err, task);       if (jisp.listeners("failure").length) undefined;       message = err.stack || err.toString();
toString() {     let str = this.name || this.constructor.name || this.constructor.prototype.name     if (this.message) str += ':'+ this.message     if (this.cause) str += '; caused by'+ this.cause.toString()
const targets = [mainTarget];     let rules = [...initialRules];     while (targets.length > 0) {       const currentTarget = targets[targets.length - 1];
if ( options ) {         assert(_.isObject(options.cycleDetector));
setTimeout(function() {                     set_and_verify_json_sparse(this.test, suffix, [{
Array.prototype.push.call(newArgs, callbacks);     if(document.body){
horizonServer = horizon(httpServer, {     auto_create_collection: true,
(function (w, $) {     if (!$) return;
}    }    var referenceObj = framesArray.shift();
rep('(load-file "' + process.argv[2] + '")');      return 0;  }
if(data.user.dataLists == ["1"]){                     data.user.dataLists = [];
await test.execute(argv);    break;   case "start":
beforeEach(() => {       testProps.columns[sortableColIdx].sortable = true;
var result;   var start = this.pos;
emitStack = [],   emitStackLevel = 0;
var _ = require('underscore'); var GeoJSON = require('geojson');
return _nextReplyId++; }
var that = this;  if(!trigger.groups[toId]) {   trigger.groups[toId] = {};  }
const dockerVersion = spawnSync('docker', ['--version'], {     env: process.env,
}     mesh = new THREE.Mesh();     mesh.castShadow = true;
object = object || {};     if(baseUrl) object = appendLinks.call(_this, object);     var str = production?       JSON.stringify(object, null, null) :
var output = eval(reassembleTest(chaiTestFromJSON, data));         }
githubs = JSON.parse(githubs);       } catch (err) {         logger.debug('Unable to parse githubs: ', err);       }
export function success(message, title = "Success") {   if (lastMsg === message) {     toast.success(message, title);
this.children = node.children;       for (var i = this.childNodes.length; --i >= 0;) {         this.childNodes[i].parentNode = this;
if (op = $(/^[<=>]/)) {                         if ($(this.addition)) {                             return new(tree.Condition)(op, a, b, index);
const t = document.querySelector('#pageTemplate');
var response = cache.get(url);
}                      const getMembers = members.filter(isGetMember);
(function (xml_digester) {
import React, { Component } from'react' import { Grommet, Box, Grid } from 'grommet' import { injectGlobal } from'styled-components'
return <CmsContainerItem configuration={configuration} />;       default:
this.props.onUpdate({ valid: isFormValid, partialUpdate: changes })     }
function generate( params ){   var CmdGenerator = function(params){
EG.Model.reopen({
}; }]);linuxDash.directive('cpuIntensiveProcesses',['server', function(server) {     return {
while ((prop_value = cssStrings[i++])) {     prop_value = prop_value.split(':');
var fieldName = 'f_' + field.id,             input = inputData[fieldName] || "";
})(); (function() {     M.inherit = function(ChildClass, ParentClass) {
case 'formData':
var resourceRef = sync.dataRef? sync.dataRef.child('resource') : null;   if(sync.isMine &&!this.refLock && resourceRef)    resourceRef.set(this.data.res);
setSubs: function (name, value, options) {       if (typeof name!== "string" || name === "") {         return "";
rollup_commonjs({      extensions: [ '.js', '.es6', '.es', '.jsx', '.ts', '.tsx' ]     }),
import Popup from "react-popup";
return config;   }   if (typeof config[command] === 'undefined') {     abort(ERRORS.NO_PROPERTY(command));   }
summary.characterData = projection.getCharacterDataChanged();     }     return summary;
if (window ==='successWindow') {    this.$.successWindow.setAttribute('style', 'display:block;');
reset : _element("<input>", { "type" : "reset" }),
} else {       const fbLoginUiCb = (func) => {         UI.del('fblogin');         if (!func) {           return;
return /iPad|iPhone|iPod/.test(navigator.platform); }
if (level == 0) {                 xml += currentIndent + '</' + geddy.inflection.pluralize(n) + '>';               }
import { defineProperty } from '../../utils/object';
marker.update(previous && previous.element);   if (previous && initialData.scrollPreviewWithEditorSelection) {    let scrollTo = 0;
let temp = input.parentElement;     input = temp.firstElementChild;
for(i = children.length-1; i >= 0; i--){     children[i]._testInputs(ctx, inputs);
function addResponsiveClass(str) {   return str.replace(/<img/g, '<img class="img-responsive"'); }
performSearch: ({ updateResults, fuse }) => (_, query) => {       let results
ipAddress: function(ipAddress) {     var match = ipAddress.match(/)\)\)([0-9.]+)$/);     if (!match) return null;
if(err) { return handleError(err); }       populateGlobalRoles(roles);
}       if (typeof o === 'object' || Array.isArray(o)) {         var s = JSON.stringify(o);
try {   this.db = Ti.Database.open(this.name);  } catch (ex) {
this._props.name = value;    this.emit('setName', value);    return true;
if (selection) {             onSelectText(selection)           } else {
}     var directRenderTextLayerFn = textRenderer.directRenderTextLayerFn(morph);     var nMeasured = 0;     morphWidth = morphWidth - paddingLeft - paddingRight;
this.PropertyPathWalker.Update(source);          } else if (this.Binding.RelativeSource && this.Binding.RelativeSource.Mode === RelativeSourceMode.Self) {              this.PropertyPathWalker.Update(this.Target);
} const publish = async (post) => { }
django.jQuery(function($) {  django. cascade.TextLinkPlugin = ring.create(eval(django. cascade.ring_plugin_bases.TextLinkPlugin), {});
case's':                 return s + "es";             case 'h':
if (oldState) {                 const upgradedState = ['_g'];
d3plus.visualization.line.shapes       = [ "line" ]
_controllers.controller.storage.users.get(identity.user_id, function (err, user) {   var isnew = user? false : true;
"d9/dec/a00090.html#a9c0d57cd72c091f63895944959e98330":[10,0,2,1,2,0], "da/d01/a00153.html":[9,0,2,0], "da/d24/a00068.html":[10,0,3,0,0],
this.chunk = null;   length = this.offset - start;   if (headerState[this.state]) {
currentNode = new Potree.PointCloudOctreeGeometryNode(name, pco, boundingBox);     currentNode.level = level;
}); }; module.exports = LanguageDirectionPunctuation;
if (Ember.FEATURES.isEnabled('propertyBraceExpansion')) {         var itemPropertyKeyPattern = match[2],             addItemPropertyKey = function (itemPropertyKey) {               cp.itemPropertyKey(dependentArrayKey, itemPropertyKey);
}else{             diffLocalAssets(conf, state).then(function() {
{token : "string", regex : "'",     next  : "start"},             {defaultToken : "string"}         ],
case 'divider':               return <Divider key={`menu-${index}`} />
return React.createElement(props.inline?'span' : 'div', { className: props.className }, items); } Group.propTypes = {
hex6: function() {     var captures;
}             }             for ( i = 0, l = this.types.length; i < l; i++ ) {                 this.order[ this.types[ i ] ] = storages;
import { startCase } from "lodash"; import FeatureProperties from "./FeatureProperties";
}     projectName = projectName? projectName.textContent.trim() : '';     link = togglbutton.createTimerLink({       className: 'phabricator',
return $.ajax({             url: that.base_url() + url,             type: "PUT",
describe('Property next', () => {         it('should have the property next (base name: "next")', () => {
var r2 = obj.rectangles[1];   while((from = todo.pop())) {    vertices[from].neighList.forEach(function(obj) {
callback(null, msg);   }   this.slave.once('disconnect', onclose);
});  }  function fullResizeVideo() {
exports.prototype.setHeight = function(height) {   this.element_.height(height);
ev = both? eventName : 'all';             if (list) {                 for (i = 0, l = list.length; i < l; i++) {
comment =Doc(node);       if (comment) {
var fs = require('fs') var through = require('through2')
});             return normalizedHighlights;         },
clipboardy.writeSync(emoji);   return;  };
params.FilterDesc = args.optarg;                                         break;                                                  case "l":                 params.FilterLib  = args.optarg;
]);     _templateObject_bd41acb0dea811e8bb74b182b64af7a1 = function() {       return data;
import Mosaic from '../../src/index'; import { ARRAY_DELETE_PLACEHOLDER } from '../../src/util';
return this.i18n.Normal;                 case 2:
exports.run = function (grunt) {     var replaceContent = function (content, sha1) {         content = content.replace('%extVersion%', grunt.config('pkg.extVersion'));
require(['gv', 'config','models/Books','models/State', 'layouts/Layout', 'routers/Router'],      function(gv, config, Books) {
.then((response) => {         if (response.status === 401) {
import theme from 'nivoTheme' import { colors, totalCount } from '../../../constants' import ChartLabel from 'core/components/ChartLabel'
if (textfield) {       goog.dom.classlist.add(textfield, goog.getCssName('firebaseui-textfield-invalid'));     }
var testMulAsync = async(function *(declaration) {             assert(lib._funcs);             assert(lib._funcs.mul);
TransportMetricsPlugin.prototype.unbind = function () {     $A.uninstallOverride("ClientService.send", this.sendOverride);
if ( typeof OrbitControls === 'function' ) this.controls = new OrbitControls( this.camera, this.container );
this.element.appendChild(img);     }
}))             );         }         componentDidMount() {
it('Should filter out bad values', () => {       const nodes =ById([testID, 'NotFound', null, '', {}, 99, 'Duplicate', ':bad-id']);       expect(nodes)
it('2. Basic Usage: collection observable with ko.computed', () => {     kb.statistics = new kb.Statistics();
.then(items => items.reverse())        .then(items => items.filter(item =>!(document.getElementById(item.guid))))        .then(items => items.map(item => applyTemplate(itemTemplate.cloneNode(true), item)))
item.addParents = function (person) {   if (person.inFamily) {
for (var metric in this.metrics) {       if (this.metrics[metric].target === false) {         var name = this.metrics[metric].target + '-' + this.metrics[metric].source
}     this.zoom_container.go_to(new_zoom, new_pos);
if (addon.plan.name.match(/hobby/)!= null) {       cli.exit(1,'redis:maintenance is not available for hobby-dev instances')     }
Object.defineProperty(baseObj, property, {get: getter, configurable: true});   }   var setter = baseObjProperty && baseObjProperty.set;
function makeImage(src) {             return new Promise(function(resolve) {
functionConsumer() {}     consumer.prototype.consume = function (ip) {
angular.module('axisJSApp')  .service('pdfOutput', function pdfOutput(GenericOutput, chartProvider) {     var pdf = angular.copy(GenericOutput);
}             } catch (err) {                 plugin.routes.post = null             }
if($scoreWrapperEle = $('.bubble-wrapper')[0])   document.body.appendChild($scoreWrapperEle)
: str.replace(/\\/g, '/') } if (process.platform === 'win32') {
case 'boolean' :             return json;       default:
var wrap = require('./lib/wrap'); var coffee = require('coffee-script');
done();   }
const i = type ==='ssa'? 2 : 1             for (; i < 9; i++) {               subtitle[ASS_KEYS[i]] = values[i]
log.info('CornerstoneToolsMeasurementModified');   constMeasurement = collection.find(
if (!item.next) {                      } else {
} ); export { Skeleton }
if (this.get('model')) {     var models = [this.get('model')];     for (var i = 0; i < types.length; i ++) {
pathname_prefix: "",       action_name_black_list: ["super", "init", /^_[^_]+/],      app_tag_on: true,
],       "output": "Boolean",       "outputShape": Blockly.OUTPUT_SHAPE_HEXAGONAL,       "category": Blockly.Categories.data,
require('./grouped_builds_view.css') var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup; const PipeLineBuild =  React.createClass({
let resp = Qrespondent.findOne( {_id:Session.get("rid"+instance.qnrid())} );         $(".qq-val").each(function(idx, elem) {
var parts = /^(.+\/)*(([^/]+)\.[^/]*|[^/]+)$/.exec(process.env.GEOJS_TEST_CASE);     if (parts) {
if (!af.os.ios) this.allowDocumentScroll_ = false;
process.exit(1);     }
step.args.find('A').value = 4;   data = step.pack();   expect(data).to.deep.equal({id: step.id, key: 'foo', cells: {A: 4, B: 2, C: 3}});
return originalValue;       case 'object':
i = 0xFF;         while (this.pos<this.input.length) {             var n = this.readRegister(this.DivIrqReg);
if (callback) {     const next = (er, ret) => {       if (ret)
computed,   get,
consolePage.onConsoleMessage = function(msg) {
const mqtt = require('mqtt') opt.broker = opt.broker || opt.broker
const Plugin = require('../plugin'); class Router extends Plugin {
return cb(); }
if(err) { return handleError(res, err); }       return res.json(attendance);     });
}    }    console.log("total rooms: ",this.map.roomsToExit.length);
};     return DigitalOcean;
return false;       case 'Object':
if (!session) return;
const targetName = target.name;
if (fs.existsSync(unixSocketFile)) {     return requestEmulator(unixSocketFile, options);
}     return new CommandStack(); });
forEach(appsList, function (app, key) {     appListData.push({
else return logs(args[0], cb);     }     case "stop":  {
};     MainPage = __decorate([         core_1.Component({
setDevicesDiscoveryConfig(discoverUsbDevices, portForwardingEnabled, portForwardingConfig) {     this.config.set('discoverUsbDevices', discoverUsbDevices);   }
return function defFunc(ajv) {     if (ajv.RULES.keywords[keyword])       return console.warn('Keyword', keyword, 'is already defined');     defFunc.definition = {
const instance = this;  window.Apps.getWsListener().unregisterListener(AppEvents.APP_STATUS_CHANGE, instance.onStatusChanged); });
};       } else {         const timeoutHours = orderState === 'DISPUTED'?
thesauris.save(data)      .then(() => {         return thesauris.get();
startEndMarkers.push(marker);         }
function doAddressSearch() {   var address = $("search_input").value;
goog.require('Zlib.Deflate'); goog.scope(function() {
output: {     filename: 'bundle.min.js'   },
this.pixelType = WEBGL_PIXEL_TYPE.FLOAT;         this.magFilter = WEBGL_TEXTURE_FILTER.NEAREST;         this.minFilter = WEBGL_TEXTURE_FILTER.NEAREST;         this.generateMipmaps = false;
} else {                         return "'" + value.replace(/'/g, "''") + "'";                     }                 case 'number':
} function last(arr) {
}); (function($){  "use strict";
);                 height = (model.getHeight() - prefs.rect.height);                 var middleRect = d3Ref.draw.centeredBasicRect( newDiagramCore.Models.Point({'x': center.x(), 'y':  center.y()+100}), 150, height, 0, 0);
if (!firstLang) {             return gettext('[unknown]');         }
this.name = 'MongooseError'; }
return 'web'   }   static get scheme () {     return'session'   }
function use (names, fn) {   if (type(names) ==='string') {
for (index = 0xF0; index <= 0xF7; index++) {   count++;   var hex = decimalToHexString(index);   try {
Compiler.prototype.visitRulesetList = Compiler.prototype.visitRulesetList
if(isStream(items)) {             iterateOn(iterations, items, scope, section.alias,
return new oid(); }
if(this.addproperty_checkboxes) {       for(i in this.addproperty_checkboxes) {         if(!this.addproperty_checkboxes.hasOwnProperty(i)) continue;
return 'Q';     case 'chancesleet' :
import { LatLng } from './../types'; import { TargomoClient } from './targomoClient';
return!!value;             case 'habool': {                 const haBoolean =                     this.nodeConfig.server.nodeConfig.ha_boolean === undefined
html += "<h3>Functions</h3>";    for (i=0; (o=objs[i]); i++) {     if (o.group) {
getSiteType: function() {         if($('#jplayer').length && /^chat\./.test(location.hostname)) {             return 'chat';
darkMode: window.Canvas.user.darkMode,     locale: window.Canvas.user.locale };
function distribution(obj){         var o = normalizedObj(obj)         return function(){
return false;
case'read':
if (!result.valid || polymorphicValidationErrors.length > 0) {                 error = new VError('Error validating request body');                 error.name = 'ValidationError';
if (data) {       delete data._id;
.reduce((sortedLabels, labelName) => {       sortedLabels[labelName] = obj[labelName];       return sortedLabels;
return rule.test(val);    case '[object Array]':
console.warn('Use a custom winston.format(function) instead.');
} catch (e) {     const newEvent = {...event }     let pathname = new URL(event.request.url).pathname
} else if (tag.type === "return" || tag.type === "returns") {
}             viewGL = coordSys.viewGL;
var menuClose = function() {    web.eventRemove(window,'resize', menuClose);    if (web.exists(document.querySelector('.mnp.mnp-display'))) {     web.classRemove(document.querySelector('.mnp.mnp-display'),'mnp-display');
if (unrenderers[i]($content, message)) break;   }  }
checkQuit();   });  };
return field     })   } catch (err) {     this.emit('log', {       source: 'types',       level: 'error',
render: function () {     var accountLinks;
}             if (value) {               childScope = $scope.$new();
}else{     this.slave.apply(this, obj[key]);
return null; }
script     );     if (typeof module!== 'undefined' && module.exports) {         module.exports = createApp;
thisMonth = this.value.getMonth();     var dates = this.$.dates.getControls();
if(editor.isMathEditorVisible() && e.type === 'focus') editor.closeMathEditor()         }).on('paste', e => {
};     InvalidActionButton = __decorate([         react_redux_1.connect(null, function (dispatch) {
Graph.webglInputEvents = function (webglGraphics) {     if (webglGraphics.webglInputEvents) {
import MoviesCardList from "../components/MoviesCardList"; import ReviewsList from "../components/ReviewsList";
if (this.v <= 5) this.errorReservedID();       break;     default:       pendingExprHead = this.id();
render(<Positioner />, mountNode);
if (plug.util.env.mongo) {         log('Starting MongoDB');
var sublocality_area = [];       geocoderResult.address_components.forEach(function(addrComp) {
else if (A.FormValidator.isCheckable(target)) {                             label = ancestor.previous('.' + label);
console.log('PDC:');   console.log('UserName:');
}   if (niantic_params.CURRENT_VERSION === undefined || Object.keys(window.niantic_params.botguard_method_group_flag).length == 0) {     dialog({
$advancedPreview.css("background-color",color);           methods.updateLightnessStyles($lightnessSpectrum,hue,currentSaturation);           $hueSpectrum.attr("style",methods.updateHueStyles(saturation,currentLightness));
this.forward(req, res, function(r) {     r.on('error', function(err) {       self.emit('error', err);       res.end();
describe('GET /api/peers', function () {  it('using invalid ip should fail', function (done) {   var ip = 'invalid';
constructor() {         this.wordPattern = /[\w\-.:<>\*][\w\d\.\\/\-\?<>\*!]+/;         this.indentationRules = {
import { BackendService } from './services/backend.service'; import 'rxjs/add/operator/toPromise';
if (nodejs) {      require('./cluster');
export function* getRecords() {   const currentModel = yield select(makeSelectCurrentModelName());
onTick: () => {    log.info('Cron job completed')   },
handletlsConnection (socket, hostname) {
}                 for (i = 0; i < this.assetManager.indices.length; i++) {                     if (this.assetManager.indices[i]) {
parser.addHandler("season", /([0-9]{1,2})x[0-9]{1,2}/, { type: "integer" });     parser.addHandler("season", /(?:Saison|Season)[. _\-]?([0-9]{1,2})/i, { type: "integer" });
x[0].id = path + '/' + i;             if (t) {                 if ((isPseudo && freezeID === t.freezeID) ||
lazy: true,                 useFactory: (config, bootstrap, types, resolvers, args, guards) => __awaiter(this, void 0, void 0, function* () {                     config = yield config;
const firstDigit = requestDetails.statusCode.toString()[0];             if (firstDigit!== "2" && firstDigit!== "3") {
return true       } else if (comparison < 0) {
}   global.ng.common.locales['ar-il'] = [     'ar-IL',
}).then(function (key) {   if (key._key)    t.pass('CryptoSuite_ECDSA_AES function tests: verify generateKey ephemeral=true return object');
const URL = req.body.url     appstore.fetchAppInfo(URL)      .then(info => appModel.add(info))
function _addChar(ch, pos){       pos = pos || _chars.length;       var id = _.uniqueId('char-')
};  _ImplicitStylePropertyValueProvider.Instance.RecomputePropertyValue = function (propd, providerFlags) {      if ((providerFlags & _ProviderFlags.RecomputesOnClear) === 0)          return;
return tokens;   }
a += b;       break;     }
var transactionsbypayeeRef = {};         var authData = fb.getAuth();         var thisHouseId = myCache.get('thisHouseId');
var h;    while((h = this._notifyConnections.pop())){ h.remove(); }
}   file = path.resolve(process.cwd(), file);   if (!~file.indexOf(':
loadWidget: function(index) {
var mcos = 1.0 - cost; var v0 = mcos*xy; var v1 = mcos*xz; var v2 = mcos*yz; return this.multMatrix([cost+mcos*x2, v0+zs, v1-ys, 0, v0-zs, cost+mcos*y2, v2+xs, 0, v1+ys,
showPoster(source);     } else if (ext ==='mp4') {      playVideo(source);
function basicGithubId(text) {   return text.replace(/ /g,'-').replace(/[/?:[\]`.,()*"';{}+]/g,''); }
for (index1 in parents) {           if (Object.prototype.hasOwnProperty.call(parents, index1)) {             var k1 = parents[index1];
options.id = layer.id;       esriLayer = new CartoLayer(layer);
columnClass: 'col-lg-3 col-md3 col-sm-2',                 linkTo: "\{/#/inventories/' + group.inventory \}\}"                 },
switch (action.type) {     case 'MEALS_REPLACE': {       let meals = [];
} else {           log("Docs successfully built.".bold.green);         }
tabWidth: 2,       trailingComma: true,       wrapColumn: 80,
$('#deletingAlert').addClass('in');                         $.ajax({                             type: 'DELETE',
let state = arrayStates._START_;   while (this.index < this.tokenList.length) {    let token = this.tokenList[this.index];
loadItems: function() {   var hash = {};   hash.type = 'GET';
try {               var _value2 = lookup(source, path, target);               target.innerText = target.innerText.split(expression).join(_value2 || '');             } catch (err) {}           };
var assembleDefaultLayout = function(assemble, next) {       grunt.log.writeln('Assembling'  +'default layout'.cyan);
seenNonDefaultActions.push(action);       if (actionconflicts[actionHash(action)]) {         actionconflicts[actionHash(action)].forEach(function (actionConflict) {
if(this.constructor.prototype==c.prototype && (ct=this.postscript)){ct.apply(this, args)};   },
var config;
}     } catch(e) {         return;     } finally {
console.log ("Error posting to instances, instance data json string no passed in or corrupt");         return false;     }
},  'prettier/prettier': {   options: {
var result = null;     models.forEach(function(model) {
while (playing: function() {                     eqBarValues = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
if (args) {       if (typeof args.name!= "undefined") {         name = args.name;       }
allParams = [];     _splitter = obj.splitter!== undefined? obj.splitter : "-";
var superError = 'error critical';    var $termsAndConditionsControlGroup = this.get('#terms-and-conditions').closest('.control-group');    $termsAndConditionsControlGroup.removeClass(superError);    if (!this.get('termsAndConditions')) {
tDescription = this.getPath('model.attributeDescription.attribute.description') + '—' +             String.loc( 'DG.LegendView.attributeTooltip');         if( tDescription!== this._labelNode.get('description')) {
name: `npc${i}`,         labelText: n.replace(/(\}|\{|\:|\.|\(|\)|\-|=|\[|\])/g, ""),         appendTo: this.npcSettingsWindow,
console.log('error!', res);                     });
return keysNotTranslatedPerLocale; }
if ( typeof( id ) == 'object' )     {
throw "self.record undefined in start observing"   }
export function clearAutocomplete () {   if (autocompleteResults) {     autocompleteCurrentValue = null
let gatewayStatus = availableGateways[selectedGateway];     inputCoinType =!!gatewayStatus &&!!gatewayStatus.assetWithdrawlAlias         ? gatewayStatus.assetWithdrawlAlias[inputCoinType.toLowerCase()] || inputCoinType.toLowerCase()
var QueueEmpty = exports.QueueEmpty = function() {     this.name = "QueueEmpty";
var isReadonly = angular.isDefined(attr.readonly);     var mdNoAsterisk = angular.isDefined(attr.mdNoAsterisk);
url: contextPath + "/loadLinksConfig",             data: {activeClassifier: lastActiveClassifier},             success: function () {                 if (tomlEditor!= null) {
case 'oneToManyMorph':           case'manyToManyMorph': {             const transformToArrayID = (array) => {               if(_.isArray(array)) {
}                   if(data.user.mostRecentIds == {corpusid:null}){                     data.user.mostRecentIds = {};
var me = this;         me.flow = new ThemeFlow();         me.offset = new ThemeOffset();         me.style = new ThemeGraduatedSymbolStyle();         if (options) {
$(window).on('resize.ADE',callback);   }
if (!('build'!== 'build')) {}
return (x)['+'](this);         throw new Error('Unknown Type for Rational +');     }
return process;    case "relay":
return "?" + query.join('&'); }
import Plain from "slate-plain-serializer"; import { Value } from "slate";
this.setState({circuitType5: null});                                         break;                                     default:                                         break;                                 }
fs.unlinkSync(actualFile);     } catch (err){}
case "Lbracket":             if (this.lookahead(0) === "Number" || this.lookahead(0) === "Colon") {
return callback(null,'Done - Xml Process');           }
return gulp.src(config.path.resources)             .pipe(gulp.dest(path.join(config.path.build,'res'))); });
: table[field].equals(context.request.urlTokenized[index - 1])           case "null":
exports.WEBGL_EXTENSIONS;
import MarkdownSerializer from'slate-mdast-serializer' import { matchBlock } from '../../utils' import shortId from'shortid'
var g = ('undefined' === typeof window? window : window) || {}   var crypto = (
if (e.url === component) {                              flexo.notify(this, "@loaded", { instance: this
vNext = vItems[vItems.length-1];   }
return HoneyProxy.search("filter-"+($el.data("filterclass").split(" ").join(" filter-")),$el.val(),$el.data("negate"),ids);  }
const URL_REGEXP = /(url\s*\(\s*['"]?\s*)([^'"\)]+)(\s*['"]?\s*\))/g; const HTTP_PROTOCOL_REGEXP = /^https?:\/\ function processStyleDeclaration(decl, opts) {
this._dataView.get('contentView').set('calculatedWidth', left);   }
}             for (i = startIndex; i <= endIndex; i++) {                 item = childNodes[i];
forEach(tmp, function(value) {           if (!value.match(/^max[^-]/)) {             style.push(value);
.then(() => {      fail('Should not have been able to join a room uninvited');     }).catch(e => {
process.exit(-1);     }
type: 'array',           of: [
throw new Error('Should not execute unrelated afterEach');     });
this.update = function(node, template) {     var node = this.get(node);
const fs = require('fs-extra') const pacote = require('pacote')
var _ = require('underscore'); var APIRequest = require('superagent');
const monthsNumInc = text.toString().match(/:MM_[-,+]?[0-9]{1,2}(?!_)\b/ig);     if (monthsNumInc) {
var type_text, credit_text, au_text;       if (false) {             type_text = "(" + (credit+au) + ")";
return model.getDocs(currentWord)         case 'definition':
location_arrow: 'location-arrow',  long_arrow_down: 'long-arrow-down',
escapeRegExCharacters(value) {     return value.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');   },
Bacon.Observable.prototype[symbol('observable')] = Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] = Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] = Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] = Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] = Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype[symbol('observable')] || Bacon.Observable.prototype
if (!ws ||!ws.length) {       return null;     }
results:[pathToCode],            stats:[stats]
var workers = self.workers;     startTime = new Date().getTime();     if(config.workerCount!== self.workerCount) {
state.assignable = false;                         strings = [state.tokenValue];                         result = new runtime_1.TaggedTemplateExpression(strings, strings, result);
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-08\/mental_feeling-1312586254.swf",  admin_props : false,
return "mat3";                     case Kinds.Matrix3:                         return "mat4";
console.log(chalk.white(prefix), sep, msg) }
var StringBuilder = traceur.util.StringBuilder;   var PredefinedName = traceur.syntax.PredefinedName;
result.errors.push(`Error: invalid data to convert to search format`);             return res;         }
describe('bundling', () => {   it('should work', () => {
charSet: null,     allowTransparency: null
Swiped.prototype.move = function() {                  if ((this.dir > 0 && (this.delta < 0 || this.left === 0)) || (this.dir < 0 && (this.delta > 0 || this.right === 0))) {
wait: function(data, callback){         waitAsync.setTimeout(callback, timeout);     },
rawCase.status = { 'name': rawCase.status };             rawCase.group = { 'number': rawCase.folder_number };
export const getRidOf = str => {   if (/\{[^}]+\}/.test(str)) {     return {
var childPositionsValid = true;   for (let i = 0; i < this.children.length; ++i) {    if (!this.children[i].positionValid(this.children[i].getCurrentSpace())) {
const renderer = TestUtils.createRenderer(); describe('ObjectName', () => {
if (!(file instanceof File)) {    this.setState({
case 'de':       return formatNumber(this, '.');     }
renderPlaylists() {     this.setState({ currentRoute: "channels" });
this.websocket.send(`${commandStr}${utc}`)   }
.replace(namedParam, function(match, optional) {                      return optional? match : '([^/?]+)';                    })
var _documents = state.documents.get(targetName);           var _nextState = state;
};     case TYPE.BINANCE_CANDLESTICK:
<AppIcon />; const codeIcon =
while (++idx < len) {         ch = str[idx];         substr += ch;
if(val.indexOf('rgb') > -1) {    matched = false;
$scope.removeSubscription = function() {             userSubscriptionRef.$remove().then(function() {                 NotificationService.success('Removed', 'User Subscription')
gpii.processReporter.live.get = function (request, processReporter, solutionsRegistryDataSource) {     var runningSolutions = [];
_.each(tagName, function(tag) {       component.tagIsComponent(tag, isComponent);     });
}                 }                 return postData.call(self, batchExt, { tx: self.txArray });
const value = xs => isEmpty(xs)? `[]` : `${head(xs)}:${value(tail(xs))}`;     return `[${typeof this === `string`? fromListToString(this) : value(this)}]`;   }
self.annotate = function(req, action, objects) {     var matches = action.match(/^(\w+)\-([\w-]+)$/);     var property;
'(' + baseUrls.join('|') + ')' +     /[:\/]([^/]+\/[^/]+?|[0-9]+)$/.source   );
updateResources(){         let tmpSwagger = this.state.swagger;
}, undefined)   let menu =shop.options.menuFactory.create(menuOptions)   if (!menu)     renderNonTty(shop, menuOptions)
case GeochronoUnit.EPOCH:             dates = Geochrono.epoches; break;         case GeochronoUnit.PERIOD:
options: {                 startkey: [startOfWeek, null, null],                 endkey: [endOfWeek, endOfWeek, 'appointment_'+maxValue]
this.handleOrientationChange();     }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-01\/1294353899-4428.swf",  admin_props : false,
for (propertyId in statements) {     if (!statements.hasOwnProperty(propertyId)) continue;     angular.forEach(properties.getRelatedProperties(propertyId.substring(1)), function(relPropScore, relPropId) {
draftPoint_attr,   draftPoint_clone,
self.remove = function (model, e) {             if (confirm(gettext("Are you sure you want to remove this conditional message?"))) {
document.getElementById("router").setAttribute("route", route); }
router.get('/', async (ctx, next) => {     ctx.body = { message: 'Hi there.', ctx: ctx.request.ip } })
var test = document.createElement('div');     var fragment = Polymer.parseAndBindHTML('<input value="{{bar}}" />', test);     test.appendChild(fragment);
this.inherited = true;   }
return (isNaN(n)? (confVal === "true") : (n!== 0));     if(confVal === "1" || that.data[conf] === "true");   } else if(typeof confVal === "boolean") {
import { storiesOf } from "@storybook/vue"; import { withKnobs } from "@storybook/addon-knobs"; import notes from "./README.md";
error : function(data){        $scope.greeting = "Error while Searching.";       }
}; export const traverseEach = (navKey, state, resultFn, path, object, pathIndex, returnFn, context, mutationMarker) => {
augur.api = new contracts.Tx(process.env.ETHEREUM_NETWORK_ID || constants.DEFAULT_NETWORK_ID); augur.bindContractAPI();
createDat: {     desc: (param, pages, opts = {}) => {       if (opts.title) return `create a new Dat archive, "${opts.title}"`
var indexO = 0; for (var indexB1 = 0x00; indexB1 <= 0x7F; indexB1++) {          count++;   var hexB1 = decimalToHexString(indexB1);
var status = navigator.onLine? true : false;     if (status) {
return originalValue;     case 'object':
}         case 1:
Ti.Android.currentActivity.startActivity(intent);  };  var createOptionsMenu = function(evt) {   var menu = evt.menu,
var has_newly_added_question = questionnaireViewModel.has_newly_added_question();
if (node.start!== pragmaParent.body [0].start) {     let error = {      node: node,
binding,   bindings,   errorMessage;
})(typeof(window)!== 'undefined'? window : global);
if (external.isEmptyString(path)) {                 node.id = external.id();                 path = "#" + node.id;             }
for (i = 0; i < response.bids.length; i++) {
import { assert } from 'chai'; import * as InkModel from '../../../../src/model/InkModel';
} catch (e) {       parsed = params[param];     }
class CliApp {   constructor (options) {     const Commands = require('cli-commands')     this.commands = new Commands()
it('finds correct orfs in reverse direction in slightly more complex sequence', function() {   var orfs = getOrfsFromSequence({
|| font.bold)? "bold " : "normal ";         css += font.pixelSize!==Undefined            ? font.pixelSize + "px "
Rendition.prototype.moveTo = function(offset){  this.scrollBy(offset.left, offset.top);
if( CHAR.LINE_FEED === src.charCodeAt(c)) c++;       break;     case CHAR.LINE_FEED:     case 0x2028:
this._readStream.on("error", function(err) {     that.emit("error", err);
gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
path = url.parse(req.url).path,     schema = req.client.pair? 'https' : 'http',     dest = schema + ':
validation: {         regexString: '^/',         message: i18n.translate('kbn.advancedSettings.defaultRoute.defaultRouteValidationMessage', {
} else {        err = tools.formattedError('Redirect loop detected after %d requests.', reqId);        err.code = res.statusCode;
const bodyParser = require('body-parser'); const compression = require(' compression');
themedLayer.setVisible(!themedLayer.getVisible()); }
var reader = fd_slicer.createFromBuffer(buffer);   options = {autoClose: false};   fromRandomAccessReader(reader, buffer.length, options, callback);
Link.pattern = /(?:\<([^\>]+)\>)((\s*;\s*([a-z\*]+)=(("[^"]+")|('[^']+')|([^,;]+)))*)(\s*,\s*|$)/gi
if (error) {           if (onError && onError.length) {
await writeData     balances = balances.toNumber()
activityCollection: { name:'sys_activitys' },       fileCollection: { name:'sys_files' }
ctx.shapeNode = XHTMLNS.create(this.tagName);         if (this.extentOverride) {             ctx.shapeNode.ownerDocument.createElement('svg');             ctx.shapeNode.ownerDocument.createElement('svg');         }
if (isEntity(viewModel)) {     function resolveInstanceNow (promisesToWaitFor) {       if (_.isUndefined(promisesToWaitFor)) {         finishResolution();         return Promise.resolve();
$rootScope.autoLogInInterval=setInterval(tokenRefresh, 1800000);          }  });
compSvg.setAttribute('height',this.data.h);         var g = createNS('g');         compSvg.appendChild(g);
this.TTCR = (this.TTCR + delta) & 0xFFFFFFF; }
bible.APOCRYPHAL_BIBLE = bible.OT_BOOKS.concat(bible.AP_BOOKS, bible.NT_BOOKS); bible.APOCRYPHAL_BIBLE_USFM = bible.OT_BOOKS_USFM.concat(bible.AP_BOOKS_USFM, bible.NT_BOOKS_USFM);
return this.store.find('criterion').then((criteria) => {       return Ember.RSVP.hash({
if (event.type === "m.room.tombstone" && this._roomUpgradeHandler) {         if (this.opts.RoomUpgradeHandler.consumeEvent) {             return Promise.resolve();
var bottomRow = new UIRow();  var bottom = new UI.Checkbox( parameters.bottom ).onChange( update );  bottomRow.add( new UI.Text( 'Bottom' ).setWidth( '90px' ) );
}       if (this.element.tagName === "FORM") {         _ref2 = this.element.querySelectorAll("input, textarea, select, button");
import "babel/polyfill"; import once from "once";
.catch(onError); export const apiFetchSelected = id =>
var self = this;
Transport.prototype.poorConsensus = function (consensus) {  if (consensus === undefined) {   return false;
const dockerfilePath = 'Dockerfile.ui'    const dockerfile = `    FROM nginx
}     resources.push({       type: 'asset',
elemToPut.put(params, headers).then(function(serverElem) {                   var newArray = restangular.copy(__this);                   newArray[idx] = serverElem;
return choiceConditional;         case 'Wait':
var waiting = 1;     var finish = function() {       if (--waiting === 0) self.destroy();     };     this._opposite.once('end', finish);
module.exports = goo; } if (typeof window!== 'undefined') {     window.goo = goo;
if (slippage > so.max_slippage_pct) {                     var err = new Error('\\nslippage protection')                     err.desc ='refusing to sell at'+ fc(price) + ', slippage of'+ pct(slippage / 100)
case "blackberry": validateBBParams(type); break;       default: return;      }     log.info("Uploading resource : path : " + filepath + ", destination : " + destination + ", config : " + config + ", type : " + type);
import { ShaderCache } from './shader_cache.js'; import { WebGl } from './webgl.js';
return w; }
return [path.guard, path.middle, path.exit] }
var ln = readline.line;
PublicKeyRing.fromObj = function(data) {   preconditions.checkArgument(typeof data!== 'object');   var opts = PublicKeyRing.trim(data);
si.key = ki;     }     for (i = 0, oz = order(sz); i < n; ++i) {       sz[oz[i]].index = i;
$scope.tokenActivity = transactions;
include: /source/,                     exclude: /(node_modules|source-todo)/,                     use: { loader: 'ts-loader' }
grunt.registerTask('test', 'Runs test in node', function() {         require('./test/runner').node();     });
const config = require('config'); const app = express();
uniforms: UniformsUtils.merge( [    UniformsLib[ 'common' ],    UniformsLib[ 'aomap' ],    UniformsLib[ 'fog' ]
useCssTransition        ? h(ReactCSSTransitionGroup, {
$(node).on( ev[0], VMhooks.bindEventListener(it, ev[1]));         } else if(vmKey === "show") {           callback(null, ev[0]);         } else if(vmKey === "for") {
_resizeContainers() {    this.$.titleContainer.style.width = 'auto';    const titleContainerWidth = this.$.titleContainer.getBoundingClientRect().width;
return 0.4;    }   }
assert.fail();             } catch (error) {                 assert.fail();             }
return (this.categories)? this.$q.when(this.categories) : this.$http.get(this.URLS.FETCH).then(this.cacheCategories.bind(this));   }
var renderToString = require('preact-render-to-string').render var nanoraf = require('nanoraf')
var temp = {};   while ( (line = message.match(/^.*$/m)[0])!== null ) {    message = message.substring( line.length );
if (branchSymbols.length > 0) {          var _branchSymbols = branchSymbols;
goog.require('ol.render.Event'); goog.require('ol.render.canvas');
throw "invalid shape " + type;       }
throw new Meteor.Error(500, err.message);         };         let fut = new Future();         let proto;
.setView(center, 14); var route = {
(function() {   var Mustache, defaultContent, fs, showdown, template;   fs = require('fs');
var document = window.document,          $ = window.jQuery,
return false;                    case this.OPERATORS.dateOperatorMonths:
Vue.filter('formatDate', function(value, format) {     if (!format) {
this.el = el;     this.context = document;
if (gap > 0 && first)       for (let i = 0; i < first.length; ++i)         if (first[i].to == null)
if (!err) {     var now = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0, 0);     for (var i in files) {
var file = files[i];                    $upload.upload({
$("#github").removeClass('hidden');     }else if (value == 'asn'){         $("#github").addClass('hidden');
html +='   <tr>';         for (let c in row) {           let v = row[c].value;           if(getTableContentFormat(v)!== 'html') {
extension: 'xlsx'       });     case 'application/vnd.google-apps.presentation':
var [ min, mean, max, rps ] = await runner(u)
var inspect = function() { return "" + x + y + z + z1; }
describe('debug', function () {   const log = debug('test')   log.log = sinon.stub()     it('passes a basic sanity check', function () {
})(); ; ; var M;
if (--count === 0) resolve();
}   }   onMouseUp() {     this.m_mousePressed = false;
callback(0, absPathToFile, parentFolder);         } else if(typeof err.code === 'undefined') {
var target = $tags.get();    var configObj = app.ext.partner_addthis.vars.addthis_config;
} else if ($location.$$path.split("/")[2]) {                     list = $location.$$path.split("/")[1];                     id = $location.$$path.split("/")[2];                     $rootScope.listBeingEdited = list;
textTyped += key;     fontSizes = append(fontSizes, newFontSize);   }
const r = request.post(   { url: 'https:
case 'getCode':             blockTag = params.blockTag;             if (utils.isHexString(blockTag)) { blockTag = utils.hexStripZeros(blockTag); }             return this.send('eth_getCode', [params.address, blockTag]);
var configXmlPath = path.join(appDirectory, 'config.xml');         fs.readFile(configXmlPath, { encoding: 'utf8' }, function (err, data) {
else             range = new Range(                 rows.first-1, this.session.getLine(rows.first-1).length,
import { h, Component } from 'preact'; import './Home.css'; export default class Home extends Component {
function () {       self.connecting = false;
group.optimize = true;     }     if (!(group.helpers = false)) {       group.helpers = true;
for(var prop in triggers) {       if(!triggers.hasOwnProperty(prop)) continue;
has_notebook_info: function(gistname) {             return this.model_.has_notebook_info(gistname);        },
app.use((err, req, res, next) => {       res.status(500).send('Something went wrong!')     })
try {             if(meta.cfg.type) {
}   return newCursor
onSuccess: (result => {        }),
constructPackage(strucDiffPerType) {     if(!strucDiffPerType) {       return Promise.resolve()     }
return ast; } function makeAnyPropTypeAST() {
var index = fs.readFileSync(indexPath, 'utf8');           index = index.replace('<meta name="rollbar"/>', rollbarSnippet);           fs.writeFileSync(indexPath, index);
Polymer({   _template: `     <style>
});     case REQUEST_PALETTE_SUCCESS: {       const isLoading = update(state.isLoading, { $unset: [action.id] });       return lodashAssign({}, state, {
(async () => {   const locale = window.navigator.language.split('-')[0];   const defaultPrivacyDoc = 'PRIVACY.md';
}     for (attr in settings) {       if (! settings.hasOwnProperty(attr)) {
this.maximizeControl();         }     },
maxHeight: 0      };     default:
if(err) return defer.reject(err);         d = d.replace(/{{cmd}}/g, path.basename(name)).replace(/^#!.*?\n/, '');
if(ui.puzzle.flags.irowake){    ac('irowake','disp', '線の色分け','Color coding');
case org.xml3d.debug.WARNING:     console3d.debug.warn(msg);     break;    case org.xml3d.debug.ERROR:
listHover() {         if (this.props.active)             return;
if (!isNaN(rateInfo)) {         keyboard[0].push({
var length = block_info.position + block_info.length;         var der_certificate = buffer.slice(cursor,cursor+length);         certificate_chain.push(der_certificate);
const path4 = action.payload.path;              console.log('check path', path4, 'key', key4);
try {                     try {           debuggerStatementFunction();
var pricingMethod;   if (source === "hi/lo") {    pricingMethod = d => ({ high: d.high, low: d.low });
newConnectionMode = MediaBrowser.ConnectionMode.Manual;         }         if (MediaBrowser.ServerInfo.getServerAddress(currentServerInfo, newConnectionMode)) {             return newConnectionMode;
if (process.env.FORCE_SSL) {     app.use(enforceHttps({       trustProtoHeader: true
for (let i = 0; i < contractBallot.length; i++) {       if (contractBallot[i].rank) {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_chicken_brick_piece4-1348197925.swf",  admin_props : false,
app.use(function(ctx){         ctx.body = { foo: 'bar' };
}  } catch (err) {   return queries.join("&");
render() {     let completed = +this.props.completed;     if (completed === NaN || completed < 0) { completed = 0 };     if (completed > 100) {completed = 100};
var numberItems = count;         if (count === 0) {          $('.no-results').show();         }
(function() { var define, requireModule, require; (function() {
{         propKey = qx.renderer.color.Color.RGBCSS_START + propValue.join(qx.constant.Core.COMMA) + qx.renderer.color.Color.RGBCSS_STOP;         propKeyAsStyle = true;
return new Iterator(function () {             while (elements!== null) {                 if (elements === null) {
var v, show = true;                     for (v in s)                         if (s[v].show) {
return getClientUrl() + '/api/data/v' + version + '/'; }
import { remote } from "electron"; import Logo from "./Logo";
if (PORT!= 3000 || process.env.JOYENT) {     Server.set('env', 'production');
var year_or_cat = year_or_cat || '2010';         precision = precision || 2;         var val = parseFloat(this.sf1val(sf1_json,field,year_or_cat))
$.bootstrapGrowl = function(message, options) {     options = $.extend({}, $.bootstrapGrowl.default_options, options);     var $alert = $('<div>');
this.playerProxy_ = {};   for (k in (this.localPlayer_)) {     Object.defineProperty(this.playerProxy_, k, {
if(property in HTMLElement.prototype) {      var arr = [], newNodes = new Set();
return compareStats('size', first, second, firstName, secondName) * descending;     case 4:
if( handleDomReady ){   domReady(handleDomReady);
sizeCls = constants.largeClass;           }           classes.push(sizeCls);
if (that.pullUpToRefresh) {    loading = that.pullUpEl.className.match('loading');    if (loading &&!that.contentReady) {
function isDigit (character) {     return isInRange(character, '0', '9');
window.eon = window.eon || {}; window.eon.c = {
Throttle.setCollection = function(input) {     if (typeof input === "string" || input === null) {
var dirty = oldValue!=x;           if(dirty){
var db = new Dexie('testdb');
removeFromArray(child, "composes", fn);     }
if ( typeof window.CustomEvent!== "function" ) {  var CustomEvent = function(event, params) {   params = params || {bubbles: false, cancelable: false, detail: undefined};
} else {       throw new State.DefinitionError();
if (this.getVertical()) {    if (Device.browser.firefox) {     this._iFactor = stepSize;    } else if (Device.browser.webkit) {     this._iFactor = stepSize;
if(base) return base;     return (hashbang && location.protocol === 'file:')? location.pathname : base;   }
processCss,   append = [],
p["estimateSize"] = p.estimateSize; p["lookup"] = p.lookup;
Paginator.prototype.paginate = function (output, active, pageSize) {   pageSize = pageSize || 7;   var lines = output.split('\n');
} console.log("\n3.) Conersations being submitted to: ", conversations, "\n");       }).then((resp) => {
self.cookies = function(name, value) {     var cookieLength, cookieArray, cookie, i, keyValue, index;
},   stylesForExport: function( $svg, width, height ) {    var margins = App.ChartModel.get( "margins" );
return request;     }
constructor(type, location) {     this.type = type;     this.location = location;
} else {      items = allBlock.removeClass('fw-filter');     }
import React, { PropTypes } from'react'; import HelpSidebarItem from './helpSidebarItem';
Repl.prototype.deliverContent = function(content){   if(this.settings.data.transpiler === 'traceur')     traceur.options.experimental = true;   try {
if (landCoverTotal === 0) {                 this.alertView = new modalViews.AlertView({                     model: new modalModels.AlertModel({
throw new Error('Empty Object has been passed');     }     if (!this.input.replyId) {         throw new Error('Attribute replyId is missing');
if (typeof browser === "undefined") {     browser = self.chrome; }
var cheerio = require('cheerio'); var registerHelper = function () {
if (!this._application) {    throw new Error('Could not find ZombieBox applicion');   }
_.forEach(docs, function(doc) {       debug('Processed doc', doc.id);     });
SharedKey = require('../azure2/utils/sharedkey');
const result = renderComponent();     expect(findByClass(result, 'toggle-switch')).toBeDefined();   });
showProgress: function (message) {                      }
}   }   if (enableInteractions) {     rtn.enableInteractions()
(function () {     var mediaElement = window.document.body.children[0];
Header = require('./../containers/header'),  Link = require('react-router').Link;
var resp = mldb.query("select '" + str + "' as res"); assertEqual(resp[0].columns[0][1], str);
var updated = false;   var i, j, input, output, coin, unspent, index, orphan;   var key, orphans, some;
core.getClassList().forEach(function (c) {       if (_global[c]) return;       _global.__defineGetter__(c, function () {
this.base(arguments);       this.slideBar = new qx.ui.container.SlideBar();       this.slideBar.set({         width: 300
import EditableTable from './stories/EditableTable.js'
} else {           e.attr(ns, attr.localName, attr.value);         }
return filename.replace(/[/],\./g, "_").trim();
elements.append(e).append($('<br/>'));             }             header = false;
throw "Got message back from worker after timeout"    }
for (let j = i + 1; j <= end; j++) {                 let nested_count = lines[j].match(/^(\*+|#+):? /)[1].length;                 if (nested_count <= this_count) {
for (i = 0; i < rows.length; i++) {             row = rows[i];             if (row.parentKey == node.key) {
fontFamily: 'Verdana',          labelOutlineColor: '#dddddd',
clearTimeout(timeout);     this.setState({
var page = req.params[1];          if (typeHandler.cache[page]) {
login: function(userIdEmail, password, rememberMe) {         var signIn =  {
this.close = function(callback){     if(server){       server.close(callback);
highlight: function() {     var captures;
function _init() {     _getInterpreterSettings();   } }
get: function (key, cb) {             if(typeof(key)!='string') {               cb('argument "key" should be a string');
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
var token = AuthStorage.get();                 if(token) {                     return token;                 }
originalReadyFunction.call(this);          readyFunction.call(this);
switch (type) {         case 'add': {           const { pathname, data, isMarkdown } = change           commit('ADD_FILE', change)
$('.repeater-template [name]').each(function () {         var $this = $(this);         $this.attr('data-name', $this.attr('name'));
this.toggle.$link.on( 'click', function () {   if ( this.toggle.open ) {
for (var i = 0; i < inputByLine.length; i += 1) {     SpotifySearchFactory.search(inputByLine[i], function(response) {
if(da[i] < 1){ da[i] = 1; }       }       for(i = 1; i < da.length; i += 2){        da[i] += s.width;
if (scrolledPox > previousScrolledPx) direction = 'down';     else if (scrolledPox < previousScrolledPx) direction = 'up';     previousScrolledPx = scrolledPx;
var groupIndex = $.inArray(currentPipeline.groupName, groupNames);                     if (groupIndex > -1) {
import d3 from "d3"; import { shallowEqual, identity, last, isDefined } from "./utils"; import { shouldShowCrossHairStyle } from "./utils/ChartDataUtil";
$ERROR('#Й'); } var \u041A = 1; if (К!== 1) {   $ERROR('#К');
}     points =  numeric.identity(dim);     points.unshift(points0);
grunt.log.writeln('File'+ chalk.cyan(file.dest) +'created.');       if (options.includedemo) {         $resultSvg.attr('style', 'width:0;height:0;visibility:hidden;');
_leaveStringState();             } else {
for(i=0; i < this.length; i++) {         fn(this[i], arg1, arg2);
var results = {}   for (i = 0; i < NUM_SERVERS; i++) {     worker = cluster.fork()     workers[worker.id] = worker
UI.Mockup.loadImages();         }     }
constructor(props) {   super(props);   this.state = {};
}( window.jQuery )
<p>            Collection {(`${collectionName} ${collectionVersion}`)} has been deleted.           </p>
callback(tokenData.token, tokenData.account);     }
} else {      console.error ('Only "Curve" type plots are implemented.');     };
case keyCodes.down:     case keyCodes.up: {       const isArrowUp = event.keyCode === keyCodes.up;       const isArrowDown = event.keyCode === keyCodes.down;
log.error('The method'+ argv.method +'is not available');    process.exit(0);   }
var frontEntity = that.getEntityAt(position);         if (frontEntity!== undefined) {
function validAddress(address) {             return address.length === 42                 && validator.isHexlify(address.substr(2))                 && address.substr(0, 2) === '0x'
const files = [];
: this.toValue());   return!this.isMultiple()? value : (value[0] || '');
--self.current_connections;     self.trigger('connectionFreed');     if(coords.length) {
var util = require('util'); var fs = require('fs');
const docFromServer = await transport(mutationString, variables);
} else {       var idx = e - redShift       sqPop(RED_SWEEP_ queue, RED_SWEEP_INDEX, redActive--, idx)     }
if (v) {                 c = current.toLowerCase().replace(/-([a-z])/g, function (a, b) {                     return b.toUpperCase();
case 'toolkit' :                 node = this.processPackage();                 break;             case 'code' :
return L.CRS.EPSG4326;       default:
node: node   }, props)); }
Mergeatron.prototype = new events.EventEmitter(); var mergeatron = new Mergeatron(db); config.plugin_dirs.forEach(function(dir) {
}         const node = types.expressionStatement(           types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value)         );
return this.filterBy (orders,'status', 'closed');     }
var PocketToken = artifacts.require('./PocketToken.sol') var PocketRegistry = artifacts.require('./PocketRegistry.sol')
import Frame from '../../components/Frame'
export async function organizationByUser({ auth }) {   if(auth.user && auth.user.id) {
var msie = ua.indexOf("Trident") + window.navigator.userAgent.indexOf("Edge")!= -2;                     if (msie) {
return path.replace(/\\/g,'/').replace(/\/[^\/]*$/, ''); }
var bbox = layer.get("BoundingBox");                     if (bbox.length) {                         extent = ol.proj.transformExtent(bbox, 'EPSG:4326', map.getView().getProjection());
break;         case 'SET_TRACK_OBJ': {             const tgt2 = scene.actors[args[0].value];             if (tgt2) {
});     root.appendChild(dom_helper.elt("br"));    });
if (1/key === -Infinity) {     key = 0;
function vertex ( scope, x, y, z ) {   scope.vertices.push( new THREE.Vertex( x, y, z ) );  }
else {      newFile =Files(section[4], concat(section[5], cssReg,EOL +EOL), true);            if (options.rev === true)      {
var self = this;       var _hook = function (rules) {         rules.forEach(function (rule) {
if ((index = cache.indexOf(value))!== -1) {
this.context = new AudioContext();     this.context.onstatechange = function() {     this.gainNode = this.context.createGain();
platforms_template += "<li><a href='/"+ platforms[i] +"'>"+ platforms[i] +"</a></li>\n";         }
? `nab/t/chat:whatever+comments:all+all/new@${tabulator}.`     : `nab/t/chat:whatever/new@${tabulator}.`,   count: 0 }));
function Hello_World() {
queue[i].removeNode();         }for (var i = Things.length - 1; i >= 0; i--) {          Things[i];         }  },
sum += array[i].trueRange;  }  return sum;
(function (DataBinding) {
handlers.focus = (view) => {   if (!view.focused) {
const nextPath = nextState.location.pathname     if (!isLoggedIn || nextPath === '/') {       replaceState({nextPathname: nextPath}, '/login')
const AccessRoles = artifacts.require("AccessRoles");
return "pending";  }
}     } while ((oCurrentControl = oCurrentControl.getParent())!== undefined);
hintString = [];     remainder = 0;     while (remainder < number) {       remainder = number % base;
}     return promisify(fs.writeFile)(this.path, yaml.safeDump(obj), 'utf8')
goog.require('og.planetSegment'); og.control.MousePosition = function (options) {
return true;
return;                                       if (dec.specifiers.length) { return; }           }
if (mediaRecorder) {                 mediaRecorder.stop();
traverse(ast, {pre: setupReferences}); ast.$scope.print(); traverse(ast, {pre: detectLoopClosuresPre, post: detectLoopClosuresPost});
_fixPanel: function() {   if (!!this.options.positionFixed && $.support.positionFixed ) {    this.element.addClass( this.options.classes.panelFixed );
if (description && description.length > config.descriptionLength) {             description = description.slice(0, config.descriptionLength) + '…';           }
setGeometry(geometry) { }
export function getTimeGridSlotEls(timeDuration) {   timeDuration = moment.duration(timeDuration)   var date = $.fullCalendar.moment.utc('2016-01-01').time(timeDuration)
});   it('with properties', function () {     const vm = new Vue({
dispatch({         type: data.id          ? 'accountUser/update'
import { Switch, Route, withRouter } from'react-router-dom'
this.tree = undefined;   $http.get('data/tree.json').then(function(resp) {     this.tree = resp.data;
projector.append(root).then(() => {  console.log('Attached!'); });
, events = require('../util/events')
test('renders RouterContainer', async () => {   mockCallbacks();
} else {         if(message.message === 'MAX_TIME') {             const {feed} = message;
Ext.example.msg('Button Click', 'You clicked the {0} button and entered the text "{1}".', btn, text);     } });
var code = reqStatus.cert? 200 :202;       castHttp.returnJson(res, code, assignStatus(reqStatus));
return r;
if(thisModel.refreshWidget) {
include_user_filter(settings); });
function createNestedViews( node, parent, nextNode, depth, data, prevNode, index, context ) {  var tmplName, parentElViews, get, from, view, existing, parentNode,   currentView = parent,
function checkEcc(type) {   if (!subtle === undefined ||!subtle.generateKey ||!subtle.sign ||!subtle.verify ||!subtle.exportKey) {     if (subtle === undefined) {       debug('subtle crypto not supported');
var _class = "";     for (var field in document) {         var value = document[field];         var type = this.type_of(value);
var start_time = Date.now();                 set_and_verify_json_sparse(this.test, suffix, [{
module.exports = {     production: function( err, req, res ) {         var body = {
const llex     = require('./llex.js'); const lobject  = require('./lobject.js');
compare: function (actual, selector) {             return { pass: $(actual).find(selector).length }
test: function test() {             this.dSetting[0].id = Math.random();
if (str === '\u0003') {         return;       }
}, function() {             return callback && callback();         });
var mod = require("../")
moduleDefaults.forEach( function (module) {             if (Plotly[module]) Plotly[module].supplyDefaults(layoutIn, layoutOut, fullData);             else console.warn('defaults from'+ module +'not applied');         });
list.forEach(a => {       if(a.get('type')) {         return;
{     uploaderEvents: function() {
}   }   var execPlugin = require(options.value);
QuestionnaireStore.emitChange();   return _errors.length > 0;
let res = yield rp(reqData); });
this.track = function (entity) {             _.each(
React.useEffect(() => {     (async () => {       try {
return;   }
case '{':             node.add(this.objltr());           break;           default:
} PDF.prototype.write = function(line) {   line = Array.prototype.slice.call(arguments).map(function(arg) {     return typeof arg === 'number'? toFixed(arg, this.doc.style.precision) : arg
function onImageLoad() {   this.classList.add('img-loaded');
};                         modal.append(Dialogue[dialogue].text.charAt(counter));                         $.sounds.fx.bip.play();
function getStyleByLayout(styles) {   const testRes = isInPreset(styles,'showArrows');
this.$canopy.find('span').html(this.getThreshold());       if (! this.$canopy.is('visible')) {this.$canopy.fadeIn()}     },
var _ = require('underscore'); var BBPromise = require('bluebird'); var ItemSerializer = require('../item/itemSerializer');
.transition()      .duration(this.config.effects.duration)      .delay(this.config.effects.duration)      .attr('height', function (d,i) { return -(axes.ver.scale(-csum[i]) - axes.ver.scale(-csum[i]-d.value)); })
return null       }     }
console.log(likers.length);     });     console.log("\nProcess done!\n".green);
"meta": { "shares": ["getResp"] },   "global": function* (ctx) {     ctx.scope.set("getResp", yield ctx.KRLClosure(ctx, function* (ctx) {       return ctx.modules.get(ctx, "ent", "get_resp");
var previousRange;     var selectionChangeHandler = function() {       var element        = document.activeElement;
} catch (err) {     process.exit()     try { fs.unlinkSync(tmpfile) } catch (e) {}     throw err
var movesWhitespace = document && (function() {   var testEl = document.createElement('div');
function CatalogLoad() {     return (
base, digits = [];     if (/[-+]/.test(value[0])) {       value = value.slice(1);
var HmacSha256Sign = require('./hmacsha256sign'),   azureApi = require('../utils/azureApi')   URL = require('url');
package_json.binary.package_name.indexOf('{node_napi_label}') === -1 &&   package_json.binary.package_name.indexOf('{node_abi_napi}{napi_build_version}') === -1; }
default:           result = null;       }
import Portrait from '../portrait';
if (fn) {             fn.call(null);
org.email=  [body.email];     }     if(body.postalCode){
self.express.put(self.expressPath, self.handleRequest('DELETE')); } module.exports.AutoUri = AutoUri;
function assembleCssText(tooltipModel) {         var cssText = [];
if (!localesDir) {   throw new Error('*** Locales folder not found for'+ initialDir +'***');  }  if (!providers[localesDir]) {
class FindBar extends React.Component {   constructor() {     super();     this.compiledCommands = {};
'exportedVariables': {},    'styleTuples': [['color', 'var(--primary)']]   }, {
if (data === /iP[ao]d|iPhone/.exec(os)) {           name || (name = 'Safari');
angular.module('code.projects', ['ui.router'])  .controller('projectsController', function ($scope, $state, $http, Projects) {
model : DataList,         template: Handlebars.compile(data_listTemplate),
import { hasScope } from "webiny-api-security"; import gql from "graphql-tag";
if (false)
var create_websocket_connection = function() {         if (!("WebSocket" in window)) {             alert("Boo Hoo WebSocket is not available on this browser");
var target = isArray? [] : {}         for (var i = 0, el; (el = array[i++]); ) {             if (isArray) {
return function(input) {    return textarea.text(input).html();     }
this[i].innerHTML = "";       }       return this;
var count = 1;         instructions.forEach(function(instruction) {             output.push("<tr>");
if (!block) throw new Error('Block not found')     if (req.query.transactions) {       const transactions = await app.sdb.findAll('Transaction', {
} break;
} catch (e) {     throw new Error('error in storage: '+ e.toString());   };
let data,         dataIndex,
});   }   let rows = tbodies.selectAll('tr').data(d => d.values );
})  .test('shallow equality test on object', (t) => {     const nested = {foo: 'bar'};
})(M || (M = {}));     ;     })
function parseRevisionInfo(rev) {   if (!/^\d+\-./.test(rev)) {     return createError(INVALID_REV);
}                  if (this.options['z-index']) tp['z-index'] = this.options['z-index']
copyArray( axis, resAxis, 0, 3, 3 );         for( i = 2; i < n - 2; ++i ){             v1.fromArray( axis, 3 * ( i - 2 ) );
});       default:
return newObj;     }     function merge (target, source) {
flow = XIBLE.getFlowById(message.flowId);               if (flow) {
function lint(input, options, webpack, callback) {   var filename = webpack.resource.split('/').pop();   var format = /[^.]*$/.exec(filename)[0];
} catch (err) {     if (!ensurePkg) { ensurePkg = require('./ensure-package.js') }     opts.log.level = opts.LogLevel
var constRelId = getConstraintRelId(constraintsNode,name);              if(constRelId){                  relId = getConstraintRelId(constraintsNode,name,relId);              }
function publish () {}
xit('async - should get a frontend view with name "test_view_async"',     browserTest((done) => {
var hasPressed = this.hasState(qx.ui.form.Button.STATE_PRESSED);
}     onAddBudgetItem(account_name, budget_item) {         console.log("[VoteStore.js:22]-- onAddBudgetItem-->");
}  ajax(
doJumpPage () {     this.$timeout(() => this.pageSliderPopover.hide(), 100)     if (this.inputPage === this.currentPage - 1) {
tr.innerHTML = '<td>' + room.roomName + '</td>' +             '<td><button class="join" id="' + room.roomToken + '">Join Room</button></td>';         roomsList.insertBefore(tr, roomsList.firstChild);
self.ElementCellSet.forEach(function (cell) {                             cell.setIndexIncome(false);
callback:function (ele,destroy) {              setTimeout(function() {
return this.retstmt();       case 'with':
zoom: 10,       markers: [],       center: {         latitude: 40.72052634,
const do_destroy_on_timeout =false;     if (do_destroy_on_timeout) {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/upgrade_card_reshuffle-1334013016.swf",  admin_props : false,
if ( isClient ) {    Object.defineProperties( document.createElement( 'div' ), { test: { value: 0 } });   }
return OP_toString.call(obj) === '[object Function]'; }
const { breadCrumbStyling, breadCrumbsWrapper } = classes;   return (
([  (function(module, exports, __webpack_require__) {
set : function(set){    set = parseInt(set) || 1000;    if(set!==priority){
if (plate.totalTime > 720 * 60 * 1000) {             plate.minimumTS = 10000;
$scope.dateFilters = [     {
el.getFirst().style.display = 'none';     if(e.event.dataTransfer) $A(e.event.dataTransfer.files).each(function (f) { uploadManager.upload(options).load(f) })    }
const cache = get('types.defs', context.cache)   const typeDef = getProp(root, cache)   if (typeDef) {
attributes = Ember.merge(attributes, attrs);    Router.reopen({
console.log('Error:'+ err);       users.close();       return;     }
ctx.putImageData(imgData, params.x, params.y);    } catch(error) {  }   }
createJavascriptStyleSheet(file, directory);       }     });     updateDocs(files);
$.each(this.bubbles, (index, elem) => {
bottom: Number(config.windowBottom),                          top: Number(config.windowTop),
log(chalk.red(`Could not locate.showroom folder in ${parentDir}`));     return false;   }
}).filter(each => isDefined(each)); } export function getCurrentCharts(chartConfig, mouseXY) {
g = g_axis.append('g').attr('transform', 'translate(' + (width - margin) + ',0)');       var y_axis = d3.svg.axis()
light.position.set(3.8, 2, 0.5);             const helper = new RectAreaLightHelper(light, 0x8e8e25);             const expected = new Object3D().copy(helper);             expected.updateMatrixWorld();
colorsMinValue: 0,             colorsMaxValue: 100,             colorsMinStep: 1,
}              pushToBinding = this.getPath().append(this.target.binding, gaffa.relativePath + gaffa.pathSeparator + toObject.length);              gaffa.model.set(pushToBinding, fromObj, this);
c.d = -10;           a().b          =          c.d          ++; })();
var matches;     while ((matches = regClassInterface.exec(content))) {         var result = parsePair(content, matches.index + matches[0].length, '{', '}', 1);
tags = sys_tags.concat(tags);   }  }else{
function use_localserver() {  var localserver = localStorage.localserver;  if (localserver === "true") { return true; } else { return false; }
md.use(require('markdown-it-include'), {     root: __dirname   })
for(let k = 0; k < coords.length; k++) {             const nextIndex = k + 1 >= coords.length? 0 : k + 1;
var path = require('path'); var version = require('./package.json').version;
return data.newValue!= data.oldValue; } function createInternalData(sourceMessage, message, data) {
return new mongo.BSONPure.ObjectID(id)     } catch(err) {       return null     }
import Breadcrumb from '../../components/layout/breadcrumb'; import { Tabs, Tab } from '../../components/layout/tabs'; class Header extends React.Component {
});         socketConnection.sendChat = function (chatParams) {           ws.send(chatParams);         };
return {...state, likedTracks: action.newfavs };     case "USER_UPDATE_START":       return {...state };
import {     View, Text, StatusBar, InteractionManager, TouchableOpacity, Keyboard } from'react-native';
for(var iterator = 0; iterator < ins.length; iterator++){       ins[ iterator ].setPosition(portInfo.cardinalPortPosition('E', 0.5));     }
shadowOffset:{  width: 0,  height: -5,  },     paddingBottom: Platform.OS == 'ios'? 3 : 0
break       case 'NEWLINE': {         let target = startBlock.type ==='span'? parent : startBlock         stateFragments.forEach(block => {
.then(response => response.json())      .then(json => dispatch(userMarkedAsAttended(event, user))      .then(() => dispatch(stopLoading()));
log(processID + "@inputs> Opening stream with apikey: " + streams['streams'][x]['apikey'] + " on port: " + streams['streams'][x]['apikey']);    messenger.streams[streams['streams'][x]['apikey']] = streams['streams'][x];
}     return true;   }
return;   }   this._appearances = null;
}         } catch (err) {}       }
} else {     proto = Object.getPrototypeOf(value)   }
inputEvent = module.get.changeEvent(type)               $(this)
it('should correctly resolve a property route with foreach ruleset', function () {         var rulesetBuilder = new RulesetBuilder();         var elementRuleset = rulesetBuilder.create()
overflowX:'scroll',             fontSize: 11,           }}
SoundHandler.prototype._prepare = function (config) {   _.defaults(config, {    loop: false,
Color.fromHsl = function(hsl) {     if (hsl.indexOf('hsl(')!== 0) return null;     var result = Color.HSL_RE.exec(hsl);
goog.require('cwc.utils.Events'); goog.require('goog.Timer');
self.set('ready', true);  }
_Directory.prototype.getDir = function (cb) {     $.post('/list-d', {
} else {       this._finalize(null, COMPLE_CANCEL);
setData: function (args) {         args.splice(args.indexOf('--strict'), 1);
var spawnValidator = require('gardr-validator'); var config = require('../config.js');
if (options.browsers) {         var autoprefixer = loadAndtransformAutoprefixer(options.browsers, 'The \'browsers\' option requires the autoprefixer module to be available. Please install it in the containing project.');
txt +='-->'    }   }
var round;   options = {}, $;   options.normalizeWhitespace = options.normalizeWhitespace || false;
res.header('Access-Control-Allow-Origin', req.headers.origin);   res.header('Access-Control-Allow-Headers', 'X-Requested-With');
child = child.parentElement;                 }                 return false;
parse: function (response) {             return response;
if (replays) {
return null;     } else if (duration) {       return duration;
.replace(path.resolve(this.options.outDir),'')                    .replace(/^[/\\]/,'');   var levels = relativeOut === ''? 0 : relativeOut.split(path.sep).length;   var relDir =Repeat('../', levels);
try {   for(var key in data) {    this._cache[key] = data[key];
return new Service(options); } module.exports = init;
return nonce + cntstr;   } }
var http = require('http') var remoteDB = require('./lib/remoteDB.js')
customLaunchers: batch,     reporters: process.env.CI      ? ['dots','saucelabs']
var myNewChart = new Chart(ctx).Pie(data, {                         responsive: true                     });
c = ol_proj_transform (f.geometry.coordinates, 'EPSG:4326', this.getMap().getView().getProjection());  } catch(e) {  }  this.dispatchEvent({ type:"select", search:f, coordinate: c });
} else if (options) {             $.data(grid[0],'mvc-grid').set(options);         }
var i, child;         var children = entity.getChildren();
console.log("All tests done");         lockerd.shutdown();         process.exit(code);     });
".html":[11,0,9], ".html":[11,0,10], ".html":[11,0,2,5],
describe('vertexVisibility()', () => {     it('sets vertexVisibility and returns self', () => {       const renderer = new Renderer(),
today: function () {      window["DP_jQuery_" + dpuuid].datepicker._gotoToday(id);     },     selectDay: function () {
allowed_attributes.each(function(attribute) {             value = child.readAttribute(attribute);             if (value)               new_child.writeAttribute(attribute, value);
var LOG_SAGAS_STYLE = "font-weight: bold"; var globalScope = typeof window.document === "undefined" && navigator.product === "ReactNative"? window : null; function time() {
dispatch(errorActions.rejectPromiseWithLocalError(message))     },     getPost: id => post(id)   })
}     } else {
import _ from 'lodash'; import uiModules from 'ui/modules';
return function equalToSetMatcher(value )  {     let isEqual;
this.setOver(value);     };     Handle.prototype.draw = function (ctx) {
} } Set.prototype.add = function (member) {
log.remove(log.transports.Console);     log.add(log.transports.Console, {         colorize: true     });
var HeroesInfoParameters = React.createClass({   render: function() {
return RangeKey; }
message: this.errMessages.email,       regexp: /^[\w\-]{1,}([\w\-+.]{1,1}[\w\-]{1,}){0,}[@][\w\-]{1,}([.]([\w\-]{1,})){1,3}$/     }, options);
google.maps.event.addListener(marker, 'click', function () {                 if (openedInfoWindow!= null) openedInfoWindow.close();
} else {               scaledX = x / fontSizeScale;               scaledY = 0;             }
case '3DES':                 decryptedOutput =  this.encryptTDES(key, data, true);                 break;             case 'AES':
return 'id';   }
return x;     }
document.addEventListener('DOMContentLoaded', () => {   const queryInfo = {
if (dt.indexOf("chrono") > -1 || (schema.unpack && data[0].length > 2)) {       _each(data[0], function(cell,i){         if (i > 0 && labelSet[i-1]) {
_Query.prototype.query = function(params){   return new _Query(params); };
}     OH(KxA(solve[o](i0v,questionA())));
},             'api': {
{      id: A.Escape.html(instance.get(ID)),      label: A.Escape.html(instance.get('LABEL')),      name: A.Escape.html(instance.get('NAME')),      value: A.Escape.html(instance.get(PREDEFINED_VALUE)),
this.templates[file] = swig.compileFile(file, {autoescape:!1});             else if (_fs.isdir(file)) {                 this.templates[file] = swig.compileFile(file, {autoescape:!1});             }
import * as TYPE from 'actions/actiontypes'
set: function( values ) {             FormData.visitInputs( this.options.inputs, function( input, name, prefix ) {                 input.value = values[ name ]!== undefined? values[ name ] : input.value;
for (i in data) {     if (Array.isArray(data[i])) {      item[i] = data[i];
let createElement = function(html) {     let div = DOM.createElement('div');
deps: ['app.module']
var byteLengthForComponentType = require('./byteLengthForComponentType'); var numberOfComponentsForType = require('./numberOfComponentsForType');
var yMax = -1024;     for (j = 0; record = records[j]; ++j) {       if (record.type) {
import Divider from'material-ui/lib/divider';
if (key === 'file' || key === 'attachment' || key === 'attachment_content_type') return 'INVALID_TYPE'   if (key === 'face_detection') {
if (true === success) {             this.config.$modal.on('shown.bs.modal', function (e) {
function ddg_spice_reddit(api_response) {
else {                             $item = this.getItemToTheRight(anchor);                         }                     }
attributes.forEach(function(attr) {             if ((matches = attr.match(/Attr ID="(.*)" Type=".*" Value="(.*)"/))) {               state[matches[1]] = matches[2];
};   this._request(getContainerOpts, function (err, body) {
var params = paramsList(params);   rule.processRules(rule, params);   rule.removeSelf();
case SET_STATE:     var global = JSON.parse(action.payload).global;
test: /\.js$/,         use: {
case '3DES':                     decryptedOutput =  this.encryptTDES(key, data, true);                     break;                 case 'AES':
},   getClipboardData: {     options: {
if(seen) {                 var id = object.identity();                 var obj;                 if((obj = seen[id])) {                     return {
return drone;   }
include : [demobrowser.MDemoApplication],   members :
{         url = sourceURLMatch[2];
module.exports = () => React.createClass({     handleChange: function () {         this.props.model.setValue(this.props.fieldDescription.field, event.target.value);     },
} } DasTier.prototype.initSources = function() {
return async hook => {     let patchMenu = patchMenu.bind(hook.app)     if(!hook.result) { return hook }
if(args.toString() === '[object BluetoothServiceHandler]') {     this._obj = args;    }
this._activeTextCache = {};  }
[new RegExp(/<!\[if!supportLists\]>(((?!<!).)*)<!\[endif]\>/gi), '$1']         ];
var GLCubeMap = function (gl) {     this.setDefaults();
if(parameters){           _.each(parameters, function(value, parameter){
return E48;         case 96 :
};         rcloud.get_completions = function(text, pos) {             return rcloud_ocaps.get_completionsAsync(text, pos)
rail.on('plugin-response', function(call, options, response) {        });
var direction = this.targetRubik.getDirection(sub, this.normalize);           var elements = this.targetRubik.getBoxs(this.intersect, direction);
import {utils} from './utils'; import {config} from './config';
throw Error("A password field is strictly required!");         if (this._fields.password.type!== "password")             throw Error("The type of password field should be password!");
var classRe = /\A\.((?:[\w\u00c0-\uFFFF-]|\\.)+)\Z/g;   SelectorSet.prototype.indexes.push({
case 'cmd_showUnsavedChanges':         var changes = view.koDoc.getUnsavedChanges();
instance._syncHitArea(children);     var instance = this;
responseTemplateName = "paragraphResponsePreview"             }             if (this.selectedPromptType == "multipleChoice") {                 responseTemplateName = "multipleChoiceResponsePreview"
var page = new boomPage($el.data('page-id')),    $el = $(el);
module.exports = function(query, skip, maxSkip) {    skip =  _.min([config.get('maxSkip'), maxSkip, skip]);    if(skip < 0) {
this.impl.addEventListener("suspend", () => {       this.error |= NetworkError;     });
} function socketPath(channelName, readerUuid) {
app.get('/', function(request, response) {   filed(path.join(app.dir, 'index.html')).pipe(resp) });
if (address!= null && address.length > 0 && address.startsWith('t'),('R')) {
],         content = [];     function cleanCollection(col, callback){
(function() {   var accessToken, addGroupItemToStroage, groupItems, removeGroupItemFromStorage;
import { withAsyncComponents } from "react-async-component" import AppContainer from "../app/AppContainer"
function addEntriesToTestSoup(entries,cb) {     sfSmartstore.upsertSoupEntries(SAMPLE_SOUP_NAME,entries,                                            function(items) {
chrome.alarms.onAlarm.addListener(function(alarm){     if(alarm.name === "scheduleRequest"){       courseService.updateData();
ngModel.$parsers.push(function(inputValue) {
targetCtx = targetCtx || ctx;   if (targetX == null) { targetX = x; }   if (targetY == null) { targetY = y; }   try {
} else {             selector = '[data-' + this.filters[j] + '="' + filter + '"]';           }
case 0x0: case 0x1:             case 0x2: case 0x3: {                 let bank = 0;                 if (this._mode == 1) bank = this._hbank << 5;
const swiper = vnode.context[instanceName]       if (swiper) {         swiper.destroy && swiper.destroy()
this.specialCbs[specialCb] = null;     }
async openBrowser (browserId, pageUrl, configString, allowMultipleWindows) {         const parsedPageUrl = parseUrl(pageUrl);
import {MOD_SYM} from '../lib/constants';
return -1;   var bLength = [data[9], data[8], data[7], data[6], data[5], data[4], data[3], data[2]];   return converBytesToInt64(bLength, 0, isLE);  }
fsDestinationPath = fsDestination;         $.__bodymovin.bm_textShapeHelper.reset();        bm_layerElement.reset();
sc.app.password = null;    sc.app.prefs = new scPrefs(default_preferences);
action = item;       index = that.actions.indexOf(action);       if (index!== -1) {
case FV_BOOK_ENTRY_CREATE_ERROR:         return Object.assign({}, state, { isFetching: false, isError: true, error: action.error, pathOrId: action.pathOrId });       break;
localStorage.removeItem('focusMode');         localStorage.removeItem('mode');         _.each(_.keys(localStorage), function(key) {             if(key.match(/file\.\S+\\.editorSelectRange/)) {                 localStorage.removeItem(key);
mappings.retrieveAutocompleteInfoFromServer(); }
function fetchEvents (accessToken, callback) {     let timestamp = moment().unix();     let url = "https:     url += "&access_token=" + accessToken;
export function changeNightMode(value, flag=true) {     if(flag){         this.props.onChangeNightMode(value, flag);     }
var zs = [];     for (i = 0, len = endpoints.z.length; i < len; i++) {         var point = endpoints.z[i];
function _interopRequireDefault(obj) { return obj && obj.__esModule? obj : { default: obj }; } var float = /^(?:[-+])?(?:[0-9]+)?(?:\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/; function isFloat(str, options) {
var jm = SCHEDULER.jm;
const accessor = gltf.accessors[accessorKey];                 return new ElementBufferView({
catch(e){     pathToPartial = `${defaultPartials}/${file}.html`   }   if (fileUtils.isFile(pathToPartial)) {
}       result.push(item);
first = sequence[0] || sequence;       if(first.charAt && first.charAt(0) == "@"){
function init ( options ) {         options = kity.Utils.extend( {}, RES_CONF, options );         if (!/^(https?:)?\/\
if (!(parent instanceof LocusZoom.Panel)){         throw "Unable to create legend, parent must be aloczoom panel";
return this.i18n.Unknown;                 case 1:
$('#TransactionTable').empty();   for(i = 0; i < ledger.transactions.length; i++) {     var tx = ledger.transactions[i],
import TransactionShow from './tx/show';
return callback(err);     }     if (!Path.IsThere(path)) {         return callback(new Error("The provided path doesn't exist."));
;   var _storageCookie = window.localStorage? (document.scriptCookie ||'scripts') : null;   var _scripts = {};
if (nestedContent[option.value]) {           return (
var redis = require("redis");       var client = redis.createClient(data.redis.port, data.redis.server);         self.attachList(0,true);
if( isArray ) {     options.subType = type.length? type : null     type = 'Array'
key_inputcircle : function(tc){   var cell = tc.getTCC();
return function ($scope, $element) {   if ($element[0].localName!== 'form') {
if(data[currentDropCell['row']-1]['type']=='folder'){         dropDestination = data[currentDropCell['row']-1]['path'];     }
writable: false,             value: function () {                 throw new Error("Not implemented.");             },
break;                        case Tag.AssignmentExpression:             if (i.value.eff) {
this.regex.grantType = new RegExp('^(' + this.grants.join('|') + ')$', 'i'); }
}; if (prod) {   delete module.exports.compilers.babel.sourcesMap;
import "ng-redux";  import needMapModule from "./need-map.js";
});                 var result = [];                 var unsigned_headers = [],
if( gid!= that.currentGearId ){      window.location.hash = KC3StrategyTabs.pageParams[0]+"-"+gid;
var pageActivated = this.localStorage.getItem('tvViewer_active') == 'true'; if (pageActivated) {
if (node && node.lookupPrefix) {                         prefix = node.lookupPrefix(namespaceURI);                         if (prefix) {
onClose() {     this.onCancel()
_lookupRoute : function(hash) {       var routeablePath = this._routeablePath(hash)       if (!this._cache[hash]) {
import jsdom from "jsdom-global"; import { validateNode } from "../libs/validators";
if(typeof elm.defaultView!== 'undefined') { elm = elm.defaultView; }
editor = ace.edit('aceEditor');
if (yAxis) {       var ans = api.getSplits(max);       max = ans.max;
return this.emptstmt();       case 'if':
this.start(); } sysu.inherits(Feedback, events.EventEmitter);
for (;;) {    exitLoop++;
import { setActiveCommunity } from './actions/communities'; import { addNotification } from './actions/notifications'; import LoadingIndicator from './shared/loading/global';
if(steps & Warp.TO_LINE)   {     return true;   }
constructor(eventType, userCallback = null) {         super();         this.eventType = eventType;
} else {                 done(err);             }
it( 'all client have received all events', function( done ){         expect( callbackA.calls.length ).toBe( 3 );
return this.remoteAsyncCall_.bind(this, targetName, property);     }     if (shaka.cast.CastUtils.PlayerGetterMethods.indexOf(property) >= 0) {       return this.propertyGetter_.bind(this, targetName, property);
} else if(this.props.mxEvent) {             name = this.props.mxEvent.getContent().body;         } else {
else if (!policy) {   policy = createPolicy();  }
this._pane = null;   }
ReactDOM.render(     (process.env.NODE_ENV === 'development')?       (function () {
if ((is_ie &&!is_ie4) || is_webkit || is_ff)  addLoadEvent(smf_codeBox);
});  it(`log`, function() {   assert.strictEqual(1, $.log(1, 2));
} catch (e) {         console.log(chalk.magentaBright(' ⚠ '), chalk.red(e.message));         process.exit(1);     }
async function CounterAct(dispatcher) {   for await (const message of dispatcher) {
it('Expect request method to be get', function () {                 http.getWithRetry('', function () { }, 2);                 expect(requests[0].method).to.be.equal('GET');
error(`Error encountered while traversing directory: ${relative(run.dir)}`);       throw new Error('Error encountered while traversing directory:'+ run.dir);     }
result.status.should.equal(401)     text = await result.text()     text.should.equal(nullIdText)
self.model.type = self.selectedResource.id;             self.service.save(self.model).then(successCallback, errorCallback);
import 'jest-styled-components'
has_info : this.has_info,  asset_swf : "\/c2.glitch.bz\/items\/2011-10\/proto_rock-1319718709.swf",  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/proto_rock-1319718709.swf",  admin_props : true,
`); } else if (argv.version || argv.v || argv._.indexOf('version') > -1) {
CC.inputUp= data.distance / 50; }); joystick.on('end', function (evt, data) {  CC.inputLeft=0;
initialize: function () {              },
} ComputedProperty.prototype = new Descriptor();
return model.bind('change', function(model_) {             return view.updateView(model_, map);           });
case "count":             if (_.isObject(aggregate.val)) {
resize: render,   }; }
var start = Date.now();
elm.isolateScope().enqueueFileAddition(mockObject);         expect(elm.isolateScope().startRendering).toHaveBeenCalled();     });
me = this,    next, length;
this.destroyed = function(data, opt, cb) {                 if (!data) return;
var s = Array(sizes[ix] - c.length + 1).join(' ');             if (align[ix] === 'r') {                 s = r(sizes[ix]);             }             if (align[ix] === 'r.') {                 s = r.';             }
success: function (resp) {                         me.progressSpinner.stop();
return false;   }
} ); export { Quaternion }
import React from'react'; import { Grid } from '@material-ui/core';
for (i = 0; i < observers.length; i++) {         var observer = observers[i];
}, params);   var resultsUri = Utils.applyUriFilters(baseUri, searchParams);   return SearchModelArray.newArrayLoadedFromUri(resultsUri, resultsType);
ko.punches.enableAll();
_this.openDBs[_this.dbname] = DB_STATE_OPEN;                 }                 if (success) {                     success(_this);
reactprops.headersOnly = {};     var DuPivot =  (function (_super) {
return client.connect(mock_uri)        .then(function() {           return client.createReceiver(queue, function(err, payload) {});         })
});         } else {
}     break;    case editor.config.getKey( 'controls/translate' ):      editor.signals.transformModeChanged.dispatch( 'translate' );
assert.strictEqual('xxx','xxx   '.trim());  });  it(`toLow`, function() {   assert.strictEqual('abc1', 'ABC1'.toLow());
case "ArrowFunctionExpression":         parts = [];         if (n.async)
return E96;         case 192 :
get: function() {                 throw new Error('Not implemented "_secret".');             }
} catch (err) {           this.logger_.logFailure(loggerTitle, failureMessageStart + '.', err);
return contact; }
for (var b = 0; b < baseIds.length; b++) {             baseIdMappings[baseIds[b].toString()].indexOf(Number(relatedId)).should.not.equal(-1);           }
run: async(message, bot, send) => {         let conf = message.guild.get("Filter", "filters");         if (Object.keys(filters).length > MAXFILTERS) return message.fail("Max filter limit reached:", MAXFILTERS);         let f = message.args[0];
stats.hasErrors() && stats.toJson().errors.forEach(e => logger.error(e));     process.exitCode = 1;   }
}    break;    case 27:
} async function decline() {} async function pendingMemberships(context, params) {
$(function() {  $(document).on('click', '#assets-container.asset-add-btn', function(event) {
module.exports = class SchwiftyModel extends Objection.Model {     static get joiSchema() { return {}; }
}   raw = this.checkRaw(value);   if (raw) return raw;   if (_.isNumber(value)) return value;
withConsoleApi: false; }
request.open('POST', url, true);   if(!(data instanceof FormData)){     request.setRequestHeader("Content-Type", "application/json");
}     expires = "";     document.cookie = name + "=" + value + expires + "; path=/";
export function RestangularFactory(config) {   let configObj = {
try {     result = await upload(({ lengthComputable, loaded, total }) => {       if (lengthComputable) {
import { Platform, Alert, ActionSheetIOS, Linking } from'react-native' export const isIOS = Platform.OS === 'ios'
}); }; module.exports = ImgAltIsDifferent;
.action(amount =>     wallet.sendRLC(cli.network, amount, cli.to).catch(handleError('wallet')));
if (process.env.RLV_ENV && process.env.RLV_ENV === 'browser') {     ScrollComponent = require("./scrollcomponent/web/ScrollComponent").default;
return functionName +  "(" + argStr + ")";       }
exports.default = _default;
getAppropriateNode(babelASTNode) {     if (babelASTNode && babelASTNode.type === 'Identifier') {       return <ast-node-identifier></ast-node-identifier>;
return <ChannelsList channels={activeChannels} updateSelectedChannels={updateSelectedChannels} selectedChannelIds={selectedChannelIds} />         case 3:
var _ActiveCallsPanel = _interopRequireDefault(require("../../components/ActiveCallsPanel"));
console.log(err)         if (!err){           done(err)         }
}         else if ( ( match = doctype.exec( html )) ) {           if ( handler.doctype )
this.version = {'str': version};       if (checkVersion.test(version)) {         throw 'Invalid Elasticsearch version[' + version + ']';
if (!changeDelegate) {    return;   }
getArgMixed(name) {   if (!this.args[name]) {    throw new Error("Missing argument" + name);    return   }
var _ActiveCallsPanel = _interopRequireDefault(require("../../components/ActiveCallsPanel"));
const backend = new Webiny.App('Core.Backend'); backend.setInitialElement(React.createElement(Container)); backend.beforeRender(() => {
var file = path.join(__dirname, catalogfile);         var readcatalog = JSON.parse(fs.readFileSync(file));
".html":[6,0,1,0], "BadStateHandlers_8h_source.html":[7,0,1,0,0,3,1,0,0],
}       },       icon: {         type: String,         value: ""       }
self.imageObjects [i] = new Image();    self.imageObjects[i].src = self.fileName.replace('{i}', i);    self.imageObjects[i].onload = function() {
var images = [];         for (q = 0; q < count; q++) {           transformArgs = argsArray[j + (q << 2) + 1];           maskParams = argsArray[j + (q << 2) + 2][0];
.doError(() => data.$el.remove()))     ).onValue(() => $editor.trigger('input')), 0) }
_listenForClick() {     document.body.classList.remove(Selectors.KEYBOARD_CLASS);
return true;     }
script: '({uid: document.querySelector(\'head\').innerHTML.match(/\\$CONFIG\\[\'uid\']=\'(\\d+)\'/)[1]})',             verification: (params) => params.uid,         }],         '.': [{             title: '微博博主',
} else {         }
initialize: function(options) {         this.modal = new Modal.View();         this.model = (options && options.model) || new Backbone.Model(options);
parentDiv.appendChild(popoverDiv);
var apiOptIn = ((localStorage && localStorage['use_api']) ||                     location.search.indexOf('use_api') >= 0);     console.log(apiOptIn);
key = speakeasy.hex_to_ascii(key);   } else if (encoding == 'base32') {     key = speakeasy.hex_to_ascii(key);   }
} else {        xfactor = 45.48385;        xoffset = 264.2620;        x = (lon * xfactor) + xoffset;
unit ='m';    if (App.unitSystem === 'english') {
if (this.session.userId) throw new httpErrors.ConflictError('Session already active')   let { username, password, remember } = this.request.body   remember =!!remember   if (!username ||!password) {
function SelectSortBy(props) {  const { sortBy } = props;  let selected;
}; $.Strings = $.Strings; }( OpenSeadragon ));
LogicNodewasD2.prototype.onSystemStopped = function() {    document.removeEventListener('keydown', this.eventListenerDown);
for(prop in proto){      v = n.getAttributeNode(prop);      v = v && v.nodeValue;
particlePositions[i * 3] = xBounds / 2;     else if (particlePositions[i * 3] > xBounds / 2)       particlePositions[i * 3] = -xBounds / 2;
wink.addClass(btnNode, "w_button w_radius pp_popup_btn pp_popup_alert w_bg_light");     var btnNodeValue = this._('alertOk', this);     if (wink.isSet(opt.btn))
node.add(this.classexpr());             break;           case 'this':           case 'null':
_resizeStreetWidth()   _updateStreetName()   _segmentsChanged()
} function _parseWhitespace(line) {   var regex = /^([\s]*)/;   var match = regex.exec(line);
async Provider (providerName) {         const parsedProviderName = parseProviderName(providerName);
let isFlying = x => {       return token.get("status_fluffy-wing")     }
} catch (e) {                    }
resFolderName = "ldpi";     break;    case "m":     resFolderName = "mdpi";
var version = scriptText.match(/jquery:\s*"([^"]+)/);    if (version) {
const removedEvtUuid = state.findIndex((evt) => evt.uuid === action.payload);       newState = Array.of(...state);
disableRow: function(rowKey) {             this.core.disableRow(rowKey);         },
describe("interruptKernel", () => {   test("sends a signal to the kernel", () => {     const originalState = {
var n1 = 0;     r = readonly(r.pipe(through.obj(write, end)));     return r;
{    $: meowConsole.info("Meow.Sys: Loading javaScript module "+file)        this.compContext.loadJS( file+".js" )
var nValue;                   if (sValue){
prepareString,   write } from '../database/grakn';
for (i = 0; i < BasicTypesObjectSchema.properties.length; i++) {       prop = BasicTypesObjectSchema.properties[i];       if (prop.type == Realm.Types.FLOAT) {
class ConfigServers extends EventEmitter {   constructor(binary, nodes, options) {     super();     options = options || {};
var material = glBoost.ClassicMaterial(); material.shaderClass = MyCustomShader;
var I = require('../valid') var u = require('../util')
case 'KNodeCreated':         node = new NodeWithPort(message);         node.addTo(graph);
"volapük": "vo",   "walloon": "wa",
let uv = vals.map(function(coord){return parseFloat(coord) || 0});         let tuv = exports.transformUV(uv, transforms.uvTransforms);
if (finished) {             captureDoc.close();
import gutil from 'gulp-util'; import path from 'path';
var chalk = require('chalk'); module.exports = yeoman.Base.extend({
constructor (name, estimatedDuration) {         super();         this._name = name;
return await productAlerts(keyword, lastUpdatedAt)     case RELATED_BRANDS:
console.log(formResult);    }
if (!this.editor) {             this.editor = CodeMirror($('.well', this.el)[0], _.extend(Genghis.defaults.codeMirror, {                 lineNumbers: false,
};     case TYPE.BITTREX_CANDLESTICK:
scope.$on('$destroy', function () {                     chart.detach();
ApplicationManager.prototype.addLanguageToMenu = function(ln) {     if(this.addedLanguages.indexOf(ln) == -1){
export function setZoom(transform) {  if (!isNaN(event.transform.k) &&!isNaN(event.transform.x) &&!isNaN(event.transform.y)) {   return {
}   } Transaction(hash) {   if (!Validator.isTransactionHash(hash)) {
this.source = null;
return { getIn, includes, assignIn, reduce, concat, find, append, setIn, pick, includes, findIndex, includesValue, has, reverse, last, head, compact}; }
case 'TopicNotFoundError':     case 'DynamoItemNotFoundError': return 404;     case 'DynamoConcurrencyError': return 409;
}     default:
const NS_PER_SEC = 1e9;
context.fillText(item.str, x + item.delta, req.y);       x += measureText(item.str).width + delta;     });
var utils = require('../../utils');
while((chc=ch[++i]) && i<vIndex) {         chc.addToLayoutChanges(Widget.JOB_LOCATIONY);       }
for (key in obj) {         if (obj.hasOwnProperty(key)) {             rorm.push(key);         }
function showSearchbar(triggerInput) {  searchbar.hidden = false;
Meteor.call('post_approve', selectedPostId);         }else{
const debugAggregate = async (model, pipeline) => {   for (let i=1; i<pipeline.length; i++) {     const p = pipeline.slice(0, i);
var states = this.states    this._states = this._states?Object.create(_states):{}    for(let key in states) this._states[key] = states[key]
const defs = document.createElementNS('http:       const marker = svg.makeSvgElement('marker', {         id:'arrowHead',
return this.value(type)     }
if (metaData.value && metaData.value.binary && typeof metaData.value.binary === 'object' && metaData.value.binary!= null) {
const R_NUMBER_COMPONENT = /(\d|\-|\.)/; const R_RGB = (() => {
this._id = 'dummy'; } exports.FileStorage = FileStorage;
return { type: actionTypes.SET_STARTING_AGE, age };   },   setStartingAge(savings) {     return { type: actionTypes.SET_STARTING_SAVINGS, savings };
for (;;) {   i = ( i + inc + len ) % len;
return {     default: map(['blue', 'green', 'orange','red'], function(color) {       return {
import { useState, useEffect } from'react' import Head from '~/components/layout/head'
cmd.stdout.on('data', function (data) {             bot.say("data:" + data, msg.room);             console.log('stdout:'+ data);         });
beforeEach(inject(function (Private) {         $state = {filters:[]};
switch (action) {                 case 'publish':                 break;
export const initialFairPrices = (formState) => {  if (!formState.initialFairPrices || formState.type!== formState.initialFairPrices.type) {   return {
exprEqual(       function() {         eff(1);         eff(2);
else if (process.platform == 'win32') {        dirs.push('C:\\Windows\\Fonts');     }
throw name + " class does not exist. Use method \"create\" for build the structure of this class";  }
describe('Gandalf()', function() {   it('should call nextStep from last step', function(done) {
) {     var vError = this._getTextResources().getText("MSG_INCORRECT_APP_VERSION_ERROR");     FlexUtils.log.error(vError);
if (handler) {     return route.handler(...handlerArgs);   }
KadiraData._traceDefinitions = {};
cop.proceed(target, highlighterRules);         if (this.specialHighlighting == "none") return this.hideError();         try {
, feature = require(BASE_PATH + 'feature')  , humane = require(BASE_PATH + 'humane')
module.directive('diff', ['$stateParams', '$HUB', '$RPC',     function($stateParams, $HUB, $RPC) {         return {
for(var n in theme) {         var f = theme[n];         box.on(n, function() {
import { mount } from 'enzyme'; import { DropdownItem } from'reactstrap';
const path = require('path'); const events = require('events');
return uin.reverse();   };
<View style={{padding: 10, backgroundColor: '#fcfcfc'}}>           <Text style={{color: 'black'}}>             选择您感兴趣的3-5个类别
const utils = require('./utils'); const lint = require('../app/lib/lint');
: Array(3).join(processedOpts.quote);     processedOpts.header = processedOpts.header!== false;
vPreviousParentFolder.addToTreeQueue();       }     }
try {         return await cb => fs.mkdir(folder, cb);     } catch (error) {         if (error.code!== 'EEXIST') {
const run = () => {   runs = settings.runs - 1   lighthouse
async function reserveToCacheTree(aHint) {   if (config.useCachedTree)     return;
define('Mobile/SalesLogix/Views/TextEdit', ['Edit'], function() {
},   meridiem(hour, minute) {     if (hour < 12) {
function() {         var middleware = swagger(env.router());         expect(middleware).to.be.an.instanceOf(swagger.Middleware);       }
return this.led(token.type, {type: "Identity"});           case "Lbrace":
class AMQPClient extends MessagingClient {     constructor(config, name, channel) {        super(config, name, channel);         this.config = config;
if (bench) {       options.onStart.call(benches, new Event('start'), bench);
ol_webgl.COMPILE_STATUS = 0x8B81;
function parseBase64Image(imageString) {   var matches = imageString.match(/^data:image\/([A-Za-z-+/]+);base64,(.+)$/);   var resource = {};
})      .catch(err => {         console.log(err);       });
_regex: {     default: /^([a-zA-Z0-9_\.\-])+@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/   },
import React, { Component } from'react'; import { Form, Button } from 'antd'; import { connect } from'react-redux';
filterGreaterThan, }
import Login from 'containers/login'; import { getSetupStatus } from 'helpers/user'; import styles from './styles';
var box = new qx.ui.layout.VBox();       box.set({height : 300, decorator: "black", backgroundColor: "yellow"});       box.setSpacing(5);
case PARTICIPANT_JOINED:         participant = action.participant;         id = participant.id             || (participant.local && LOCAL_PARTICIPANT_DEFAULT_ID);
}; lists.distanceUnits = ['m', 'km', 'yd','mi']; lists.geocodingContainers = {
if (!(this instanceof $.imgAreaSelect)) {             options.onSelectChange(img, getSelection());
for( x = canvasWidth-1; x >= 0; x-- ) {             off = ( y * canvasWidth + x ) * 4;             if( pixels[ off ]!== r || pixels[ off + 1 ]!== g ||
if ((! "opacity" in _docElt.style) && "filters" in _docElt) {              styleHandlers.opacity = {
handleBulkDelete(event, items) {     return this.props.onDelete(items.map(item => item.id))      .then((resultItems) => {
};     },     invalidData: function(n) {       return n + 1;
if ( clampToLine ) {     t = Math.clamp( t, 0, 1 );    }
Math.floor(Math.random() * 128).toString(10) + ')';
let tagName = _this.$cursorElm.tagName.toLowerCase()
var AuthenticationContext = require('adal-node').AuthenticationContext;
bodyFontFamily: ['Open Sans','serif'],   headerFontFamily: ['Open Sans','serif'],
GM_DocHandler.prototype.onProgressChange =  function(webProgress, request, stateFlags) {   GM_log("> GM_DocHandler.onProgressChange");
case types.Symbol: {       const symDesc =symbolDescription(obj);       if (symDesc) {
console.log(err);             }             else {                 done(err);             }         };
webhookHandler(req, res, (err) => {       res.statusCode = 404;
_values: function _values() {     return this.props.multiple? this.state.dataItems : this.props.value;   }
impliedauth: function (storageApi, Redirect) {       var redirect =  String(document.location);
}     var eventDataView = Alloy.createController('surveys/surveyRow', {model: model}).getView();
var body = html + renderer_helper.getJavaScript(payload);   html = renderer_helper.getHTML(body, header, css, javascript);   return html;
_RotateNormal(normal){         let originalNormal = normal.clone();
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-04\/trophy_egghunt-1302028751.swf",  admin_props : false,
(function () {     if (!('Element' in global) || Element.prototype.matches) {       return
case types.ACTIVE_TYPE_CHANGE:             multipleChoiceModifiers = state.activeMultipleChoiceModifiers;             if (action.value.resetModifiers === true) {
data = data[field.split('.')[k]];                }
bluebird = require('bluebird'),   responses = require('../responses'),
members = extend({}, members);   members._events = extend({}, registerWidget._defaultEvents, members._events || {});   if (members._properties!== true) {
if (!this.mrf.multi &&!value) {       this.refs.input.setState({ searchText: '' });
instance.on('finish', function () {     fs.readFile(generatedFile, function (err, data) {
b = parseInt(m[3], 16);         } else if ((m = input.match(/rgba?\((\d{1,3}(?:\.\d+)?),\s?(\d{1,3}(?:\.\d+)?),\s?(\d{1,3}(?:\.\d+)?)(?:,\s?(\d(?:\.\d+)?))?\)/i))) {
<div className="instructions">                     {this._("Select all that apply.")}                 </div>}
AUDIO_VIDEO: { i_id: (0x01 << 1) | (0x01 << 2), s_name: "audio/video" },     MSRP: { i_id: ((0x01 << 3) | (0x01 << 4)) | ((0x01 << 1) | (0x01 << 2)) | (0x01 << 5), s_name: "all" } };
if(state.transitions.has(eventName)) {     return transitionTo(service, event, state.transitions.get(eventName)) || machine;
stageView.borderRight();     this.canvas.add(stageView.borderRight).calcOffset();   };
wrapper = function(event){
module.exports = function xmlwriter_write_attribute (xmlwriter, name, value)  {
case 'EADDRINUSE':             console.error('EADDRINUSE,'+ bind +'is already in use')             break;         default:
return <ast-node-identifier></ast-node-identifier>;     }
}));    var code_color = d3.scaleOrdinal().domain(value_set).range(d3.range(0,value_set.size))    d3.selectAll(".base_circle").style("fill",function(d){
}); var render = function render(html, container) {
);   }   return {
})     if (syncVertices instanceof Error) {       throw syncVertices;
popupBody[0].style.height =  newHeight + 'px';           }
var cacheKey = sourceProto.$toolCacheKey    if(false){     var cache = fnCache[cacheKey+methodName]
var parseYearHebrewLetters  = function( year){
variantPosition  = isVariantValid( variantPosition );      if(variantPosition) {     runValidTest();
zipCallback();  }
singleRun: true,     customLaunchers: {
var Error = Backbone.View.extend({     template: _.template($('#template-error').text()),
if (model.constructor === Balanced.Reversal) {    title = (parentModel.constructor === Balanced.Reversal)? 'Other reversal' : 'Reversal';    return {
{  this.projectionMatrix.makeOrthographic(-this.size.x, this.size.x, this.size.y, -this.size.y, near, far); }
setConfigParams(chrome.runtime.getManifest()); }
], callback);           function insert(callback) {
case SELECT_DATE:       case COMPARE_CHANGE_STATE: {         const state = store.getState();         const selectedDateStr = state.compare.isCompareA?'selected' :'selectedB';
import StyledScreen from './StyledScreen'; import ModalScreen from './ModalScreen'; import NotificationScreen from './NotificationScreen'; import SideMenu from './SideMenu';
while (true) {       var next = walk.nextSibling;
if (criteria.name) {     criteria.$text = { $search: critera.name };   }
}, "~N");  Clazz.overrideMethod (c$, "renderMesh",   function (mesh) {
constructor(target, selector, args, undo, meta) {     super(target);     this.selector = selector;
format: "polys",             sql:
remove: function(token){       var className = this.element.className;       var newClassName = className.replace(tokenRegExp(token), '');
return 'V';     case 'nt_chancetstorms' :
Util        = main.util,         APIURL      = '/api/v1',
this.sock.on('end', function () {   self.emit('close');   if (!inBrowser) process.exit(0);  });
var length = end-start;  for (i = 0; i < length; i++) {   subBuffer[i] =Write(byteData.slice(i*8, (i+1)*8));
return ret;     }
async start() {     const item = await this.itemReader.next();
icon.bind('click', function (event) {                 event.preventDefault();
const header = props => <div className="anchor"><a name={`${props.children.replace(/[-]/g, ``).toLowerCase()}`}></a><h2 className="" {...props} /></div> const components = {
try {    } catch (err) {     throw err;    }
var Errors = Ember.Validations.Errors = Ember.Object.extend({   unknownProperty: function(property) {
offset = rowStretchOffsets[row]? rowStretchOffsets[row].offset : 0;         rowHeights[row] = prefHeights[row].height + offset;
unit.fuel -= lastFuel;       if (this.DEBUG) assert(unit.fuel >= 0);     }
Slick.prototype.resize = function() {         if ($(window).width()!== _.windowWidth) {             clearTimeout(_.windowDelay);
}  ,"statistics":{    "title":"통계"
} else {     tryCatch = this;   }
adjustOtherProportions(remove) {     const before = this.axisBefore, after = this.axisAfter,
var attributeList = ['headers', 'aria-controls', 'aria-describedby', 'aria-flowto', 'aria-labelledby', 'aria-owns'];       attributeList.forEach(function (item) {         var attr = $element.attr(item);
layout: "images",         selected: function (res) {             var file = _.first(res);             $input.val(base_path + file.url.to_filesystem_public_url());
if (o.maskType == 'Password') {                  new MUI.Require({js: ['PassShark.js'],
url: ('Home/?handler=Filter' : '/Home/Filter'),             data: data
this.render();    this.listenTo(App.ChartVariablesCollection, "add remove change reset", this.onVariablesCollectionChange.bind(this));
}),   visibleErrors: computed('shouldShowErrors', 'errors.[]', function(){     return this.get('shouldShowErrors')? this.get('errors') : [];   }),
return;   map.addKmlOverlay({
if (this.url!== undefined) {             $.get(this.url, function(data) {                 that.element.html(data);
if (target.type === 'folder') {       const sideConfig = {}
for (i = 1; i < services.length; i++) {         if (services[0].uuid.length!== services[i].uuid.length) {
str = str.toString(), len = str.length, i;         for(i = 0; i < len; i++){
adaptor.applyStyling = function ($box, $slides, settings) {       var imgSrc = slideImageURL($slides.eq(settings.bsfaceindex || 0))        , $frag = $()
}).data("ui-autocomplete")._renderItem = function (ul, item) {     return $("<li></li>")      .data("item.autocomplete", item)      .append(`<a>${item.dom}</a>`)
render() {     const { sourceId, fetchStatus, fetchData } = this.props;     let content = fetchStatus;
var jsbin = exports.jsbin = /jsbin.com\/[a-zA-Z0-9_]+\/[0-9_]+/i; var jsfiddle = exports.jsfiddle = /jsfiddle.net\/[a-zA-Z0-9_]+\/[a-zA-Z0-9_/]+/i; var plunker = exports.plunker = /plnkr.co\/edit\/[a-zA-Z0-9?=]+/i;
this.init();     }     ChoroMappings.prototype = Object.create(SourceMappings.prototype);
{     if (device &&!(device instanceof Ci.IWebCLDevice))     {
tag_input.keypress(function(event){     var keyCode = event.keyCode || event.which;     if (keyCode == BACKSPACE) {
var qr = LQ._query;        if (qr instanceof LQ) {         if (qr.hasOwnProperty(method)) {
var navSubItemName = pattern.patternName.replace(/-/g,'');
checkLayout: function (e) {             var scrollContainerRect;
} else {                  conditions = options.conditions || [""];                 quests = [];                 if(Object.prototype.toString.call(options.conditions) === '[object Array]') {
if (!ondemand) {     logger.info(`${GREEN_OPEN}thetool> node process finished, tool output:`);     await tool.after();
styleProp = styleProp.replace(/-(\w)/g, function(str, letter) {       return letter.toUpperCase();
}     return mergedState;
file.contents.toString(),           enforce? '})();' : '})(window, window.angular);'       ].join('\n'));
return "null";             case "[object Object]":
var json = parser.parse(contents).sml;
const node = doc.createElement( 'div' );             if( area.hidden ) {
yql = 'SELECT * FROM twitter.search WHERE'+ where.field +'='+ where.value +'AND q="' + (request.timeline) + '";';     responseHandler = this.tweetHander;    }
if (oView instanceof View) {    var sOwner = Component.getOwnerIdFor(oView);
import Entity from "./Entity"; import validate from "../utils/validate";
}     id = self.apos.launder.id(id);     if (Array.isArray(locales)) {
} else {     debuglog = function() {}; }
function validateEmail(cadena) {     return validatePattern(cadena,'/[\w-.]{3,}@([\w-]{2,}\.)*([\w-]{2,}\.)[\w-]{2,4}/'); } function validatePass(cadena) {
function init() {     requestData(100, function(data) {
var items = [];                     for (var index = 0; index < data.length; index++) {
var AudioCell = Backgrid.StringCell.extend({   className: 'audio-cell',
offset = offset || 0;   var endian = isBigEndian? 'BE' : 'LE';   var method = buffer['readUInt' + bits + endian];
var creep = Game.creeps[this.data.creep]     if(creep.spawning) {       return
try {         b = Class({ 'extends': b }, {             num: 'not a number'
switch(dtype){     case "ship": return this.ship(jp_name);     default: return this.generic(jp_name);    }
ISeries.prototype.genres = function($) {   throw new Error('Not implemented.'); };
regionimageryProvider = new WebMapServiceimageryProvider({             url: proxyCatalogItemUrl(catalogItem, regionDetail.regionProvider.server),             layers: regionDetail.regionProvider.layerName,
import classNames from 'classnames'
title: '500 - Erreur',         message:           "Une erreur s'estproduite. Veuillez rafraichir la page.",         solutions: [
handler = createHandler(promise, value, onRejected);     }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/missing.swf",  admin_props : true,
render(ctx) {     const drawFeaturePathToContext = geoPath()      .projection(this._project)
},  cleanAllFavorites: function() {   if(!K.Admin.isMe()) return null;
try {         const mediator = new BufferGeometry();         const expected = mediator.copy(new RingBufferGeometry()).toJSON();         expect(mediator.copy(vm.$refs.g.inst).toJSON()).to.deep.equal(expected);         done();
Entry.BlockMenuScroller = function(board) {     this.board = board;     this.board.changeEvent.attach(this, this.resizeScrollBar);
qx.OO.addProperty( {
function(res){                              });
}               }               Modules.client.displayModal(                 true,
let prevValue = initialValue;   for (;;) {     const { done, value } = iterator.next();
.then((htmlRes) => {    resolve(htmlRes);
case 'app':       app = stashedSpecs.app;       app.name = props.name;
toPID : function(name){   if(this.info[name].ja){ return name;}   for(var pid in this.info){
});   })  .config(function ($ionicConfigProvider) {     $ionicConfigProvider.setup();   })  .config(function ($stateProvider, $urlRouterProvider, $translateProvider) {
return this.withstmt();       case'switch':
console.log('Validating SHA "' + sha + '"');     if (! isContributor(githubUser, contribs)) {         githubClient.rejectPR(head.sha,              githubUser +'has not signed the Numenta Contributor License',             'http:
chrome.storage.local.get(null, function(items) {         var iii = items;         if(items["m_quotes"] == null) {
} else {                     this.object.Shape[specialOption[object.type][item.attr]][item.attr] = item.source + item.incre * this.timer.getGoesByTime() / this.duration;                 }
this.height = height || 100;     this.resolution = resolution || CONST.RESOLUTION;     this.scaleMode = scaleMode || CONST.SCALE_MODES.DEFAULT;
const pdfW = pdf.internal.pageSize.width;         const pdfH = pdf.internal.pageSize.height;
functionPeerConnection(id, room) {   if (PeerConnectionStore[id]) {     return PeerConnectionStore[id];
query.limit(1).sort({timestamp:-1}).toArray(function(err, res){        out(err, res);
var stack = d3.layout.stack().offset(stackOffset);
},        zh_cn: {             reload: '重新加載',
batch = batch.crop(100, 150);                                 break;                             case 0:                                 batch = batch.scale(1.1, 0.66);
var appState = ncms.Application.APP_STATE;             var req = new sm.io.Request(ncms.Application.ACT.getRestUrl("pages.check.rights",
else {   var render = {};   var win = function () {     return window;
try {             outbox = require('./outbox');         } catch(e) {
case "Notice":       color = "blue-inverse";       break;     case "Warning":
for(var idx in this.parsers) {      if (!this.parsers.hasOwnProperty(idx)) continue;        var parser = this.parsers[idx];
console.log('Ignoring input as is null')     return self.resolve(uid)   }
this.orient = o[0];   this.normal = vector.normalize(o);  },
var TestClick = register("test-events", [ HTMLElement, Widget], {
var dynamicTyping = _config.dynamicTyping || false;         if (typeof dynamicTyping == 'function') {
} catch (err) {     t.regex(err.toString(), /TypeError: Expected string but assigned 42 of type number to property "name" on author/)     t.is(err.joiError.isJoi, true)
} else if (matches[5]) {      match_func = matches[5].trim();     }  else if (matches[7]) {
case DCS_CHANNEL_5_OFF:       case DCS_CHANNEL_6_OFF: {         const channel = sampleId - DCS_CHANNEL_0_OFF;         this._callbackChannelOff(channel);
const glowGeometry = new THREE.CylinderGeometry(       outerRadius,       rescaleNumber(0.00008),
} catch (err) {             log.error(err);
MapService.getVersions(req.param('mapId')).then((versions) => {             res.json(versions);         }).catch((error) => {             res.log.error("Error getting versions");             res.badRequest();
for (var t in tokens) {   if (tokens.hasOwnProperty(t)) {    tokens[t].regexp = expandPatternToRegExp(tokens[t].pattern, expansion);    tokens[t].count = 0;
var info = [];     var fix_commits = _.filter(commits, function (c) {
expect(e.loaded).toEqual(jasmine.any(Number));       expect(e.total).toEqual(jasmine.any(Number));       xhr.getReadyState().then(function(readyState) {
editActivity: function () {             app.monitor.TrackFeatureValue('Activities.EditActivity');             app.mobileApp.navigate('#components/activitiesView/addEdit.html?id=' + this.currentActivity.Id);
if (!/^\w+:\/\                     url = 'http:
for (         var i = 0; i < elements.length; i++) {         tags.push(elements[i++].getAttribute('aria-label'))
if (embed) {       return embed.metadata;
var log = require('../log').logger('wifi');
console.log(h_triple);  },
var encode = function(imgData, quality) {   if (typeof quality === 'undefined') quality = 100;
timeout = this.options.timeout;             }             var key = this.key || name;
var callback = sinon.spy();         var disposable = queue.get([], [['one', 'two']], callback);
export default class JassAttackType extends JassEnum {}
this.storage.verifySubscriber(token, callback);
exports.precompile = function(){   return "Version: " + Handlebars.VERSION + " - 'Some random text here'"; };
if (exist) {         return _yapi2.default.commons.log('runtime/init.lock文件已存在，请确认您是否已安装。如果需要重新安装，请删掉runtime/init.lock文件');              }
* run(context) {     const testArgs = this.formatTestArgs(context);
{       try {         const check = checkInvoicePayable({
function _replaceminus(str) {   return str.replace(/-/g, '\\-'); }
site = new Site({
value = JSON.parse(value);                     }                     catch (err) {                         return;                     }                 }
} else {      return path + ".undefined";     }
} finally {       if (_didIteratorError30) {         throw _iteratorError30;       }
setTimeout(() => {     if (token) {       cb({
for (var i = 0; i < ips.length; i++) {             if ((match = IP.IPv4_REGEX.exec(ips[i]))) {                 ip = IP._str_to_ipv4(match[1]) >>> 0;
load('test/mjsunit/mjsunit.js'); load('test/mjsunit/wasm/wasm-module-builder.js');
const mappedTree = constructTree(mappedLabel, mappedChildren);       pathMap.set(stringify(path), mappedTree);
$.getJSON('/js/publicsettings.json', '', function(data) {         log.push('Data successfully retrieved from publicsettings.json');
publicPath: "/assets/",     path: "assets/",     filename: "main.js"   },
class User extends Entity {  constructor (...options) {   super()
var _ActiveCallsPanel = _interopRequireDefault(require("../../components/ActiveCallsPanel"));
var openChangelogPage = function() {   chrome.tabs.create({
if ( typeof NetIP!= 'undefined' ) {    function NetIP()  {
editable: false,       layout: SimpleFormLayout.ResponsiveGridLayout      });
function shortFormatDateHTML(date) {   return moment(date).format("dd M/D[<wbr />]@h:mm"); }
if((joint = isSegmentRayCross(p0, p1, p))) {
minify: {       exclude: [".min."]     }
this.texture = null; }
if (err == false) {     throw new Error('specification file is not valid:'+ JSON.stringify(validator.getLastErrors()));   } else {
var material = new GLBoost.ClassicMaterial();   material.shader = new MyCustomShader();   var texture = new GLBoost.Texture('resources/iceball.png');
it('renders a input with type radiobutton and a value of 1', () => {       let radiobutton = TestUtils.scryRenderedDOMComponentsWithTag(instance, 'input')[0];
logAddMorph: function (morph, optMorphBefore) {         var goesToUnloggable =!this.isLoggable &&!this.isHand
function evalFunc(func, args) {   if (!(func in EVAL_FUNCTIONS)) {     throw "Unexpected function in eval " + JSON.stringify(func);
const { connections } = options;   if (!Array.isArray(connections) || connections.length === 0) {     throw new Error("The `connections` option array needs to be provided with at least one connection.");
const response = await Promise.race([this.interface.waitKey()])
document.removeEventListener('mousemove', handleMouseMove);       document.removeEventListener('selectstart', preventDefault);     }
_.each(group.polygons, function(polygon) {       var line = encoding.decodePath(         polygon.points
import { warn } from 'core/util/debug' import { android, AndroidApplication } from 'application'
}  ,"statistics":{    "title":"Statistici"
} else {       self.log("Access to user search denied. "+socket.logviewer_token);      }
static isSignedIn() {         return!!AuthStore.getToken();     } }
let replacedPlaceHolder = false;    while (params) {     const idx = findIndex(params);
it('returns icon list', function(done) {             initNodes({
client.authDriver(new Dropbox.AuthDriver.Popup({                      senderUrl: BASE_URL + "html/dropbox-oauth-sender.html",                      rememberUser: true
throw err;         },
return this._parseVecterParam(type, param);
e2eSpecsSrc: 'test/e2e/src',
} catch (err) {             console.warn(`effect not implemented: ${channel.cmd.toString(16).padStart(2, '0')}/${channel.data.toString(16).padStart(2, '0')}`);
client.eth.call({ to: bridge, data: call }, (err, nSigs) => {     if (err) { cb(err); }
function positiveRange(a, b, inc, fn, isLetter) {   a -= inc;
curKeyId = (mod? "c" : "") + code;       if (sel.inverted && movementKeys.hasOwnProperty(id)) {         var range = selRange(input);
console.logRed('Error: '+ e);  utils.exit(1); }
action.log(shapeshifter.chalk.red(error.message));       });
"use strict";
for (var i = 0; i < this._implementNames.length; ++i) {    var baseClass = this.parser.lookup(this._implementNames[i].getValue());    var success = true;
var matchIndex = 0;       while ((match = regex.exec(text))) {         matches.push(this.prepareMatch(match, matchIndex));
let output = path.join(outputDir, basename)   logger.verbose('Converting'+ basename + '...')   const bundler = browserify(es6File)
var b = Class({ 'implements': [i1, i2] }, {         num: 1,
for(var i = 0; i < connectionCount; i++) {         reauthenticate(self, connections[i], function() {           connectionCount = connectionCount - 1;
setTopBarText: true,     startPullDownRefresh: true,
const handleHideTxs = (state) => {   const txs = Set(
var iconSearch = $('.icon-search');   $('#search').on('click', function() {    $(iconSearch).toggleClass('search-highlight');   });
grunt.file.expandFiles({cwd: base}, '*').join(', ') + '.\''); }
}     this.beatLoader.generateBeat({
var fontFamily = this.fontFamily;             return content.replace( /\\([a-zA-Z,{}]+)\\/g, function ( match, input ) {
browserName = /edge\/(\d+)/i.exec(userAgent);
$('.conTitle').html(contitle)                 $('nav .mainbav').eq(arr[0]).children('a').next().show();
var searchRes  ,scrapePtrn = /\[\[([^:]+)\:\:([0-9]+)\]\]/gi  ,resultHTML = markdown.toHTML( raw )
const groupList = this.userRelatedGroups.map((group) => {       return (       <li>         <Button onClick={this.onClickGrantGroup(group)} bsClass="btn btn-sm btn-primary">{group.name}</Button>       </li>     });
for (i = 0; i < 255; i += 1) {     LOG_TABLE[EXP_TABLE[i]] = i;
export async function organizationByUser({ auth }) {   if(auth.user && auth.user.id) {
case 'names':       for (p = 0; p < value.length; p++) {         format += value[p].replace('/', '');
$('.nav-tabs').stickyTabs(); });
api.getConfiguration().then(function (response) {             $scope.configuration = response.name;
switch (action.type) {       case GET_CURRENT_USER_SUCCESS: {         let newLoginValue = isNewLoginValue         isNewLoginValue = false
_.merge(o,matter(o.content, options));     next(null, o);
return makeModuleMap(moduleName, relModuleMap).fullName in defined;             },             specified: function (moduleName, relModuleMap) {                 return makeModuleMap(moduleName, relModuleMap).fullName in specified;
const $ = require('./../bower_components/jquery/dist/jquery.js'); require('./../bower_components/jquery-csv/src/jquery.csv.js');
{                         if (err.code=='notfound')                           p.trigger.updatedsinceread();
return!!getLanguageByCode(code); }
url: "/fs-moni/live/events",
this.close();             osmEdit.createNode()            .then(function (nodeId) {
pattern: '(m|f){2}c',     rel: 'parent\\s sibling'   },
$scope.templatesByStatus = $scope.templates[status];             if (typeof $scope.templatesByStatus === 'undefined' ||                 ($scope.templatesByStatus && $scope.templatesByStatus.length === 0)) {
familyTokens = parsed.family.toLowerCase().split(' ')     parsed.variations.forEach(function(v){         res.push(familyTokens.concat(v).join('-'))
import TextLoop from'react-text-loop'; import Section from '../components/Section';
var rows2 = [];           for (j = 0; j < series.length; j++) {             rows2.push([]);
module.exports = Cylon.Drivers.I2C.Mpl115A2;
setDirty: function() {         wm.job(this.getRuntimeId() + "_hasChanged", 500, dojo.hitch(this, function() {
.catch(function (err) {         context.done();     });
left: 0,             'z-index': '1000'
import { storiesOf } from '@storybook/react-native'; import { Scene, Router, Actions } from'react-native-router-flux'; import App from '.';
, Event = require('../models/event')    , access = require('../access');
UNDO_REDO_STATE_STATUS,  Commands, MappingSide,
return n;  }, "java.io.InputStream");  Clazz.defineMethod (c$, "readTrailer",    function (fz = function () {  return true;
source = source.replace(/\/\/11\.url\.cn\/now\/([^"'\)\`]+)(["'\`\)])/g, '
grammar = [   Rule('A', [NT('A'), NT('A')]),
return i;   }   function deltaHue(h1, h0) {
function noop(){} let Link = props => (
R._engine.setSize = function (width, height) {             this.width = width || this.width;
.toString('utf8')        .should.match(/ref: refs\/heads\/testBranch/);
import { connect } from'react-redux' import { withNavigation } from'react-navigation'
} else {             console.log(readNodeVersionForOlder(rmmvPath));
where: {     name: $tagName    }
return '&#'   })   txt = txt.replace(/ﬂ°/g, function () {     return '&'
return {type: "Pipe", children: [left, right]};           case "Or":
parse: function (response) {         response.forEach(function (item) {             var start = new Date(
} }(function (Backbone, $) {   Backbone.Attributes = _.extend({}, Backbone.Events);   var modelMethods = ['get','set', 'unset', 'clear', 'has', 'changed', 'hasChanged', 'changedAttributes', 'previous', 'previousAttributes'];
setDimensionGroupById : function (id, group, widget, model) {          this._refreshPreview(widget, model);
that.setData({           viewHeight: res.windowHeight - 40 - (that.answerKey? 44 : 0)         });
c.y = c.y || scaleLinear().range([c.height, 0])   c.xAxis = c.xAxis || d3.axisBottom().scale(c.x)   c.yAxis = c.yAxis || d3.axisLeft().scale(c.y)   c.drawAxis = function(){
options.yaw = options.yaw || 0;     options.class ='marker';
const self = this;
|| typeof value == 'boolean'       || value == null       || value == undefined
});     if (NODE_TYPE[doc.nodeType] === 'Document' && doc.childNodes.length > 1) {         return;     }
destPoint : {},       destMarker : this.props.destMarker,       routePrirority : this.props.routePrirority,
}  return ES5internalSlots['[[DefaultValue]]'](input); };
} else {         rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)).
return x;   }
}       repository = JSON.parse(localStorage.getItem("TemplateRepository")) || { Templates: {} };
showDropDown(!navHandler.classList.contains('on'))   })   document.body.addEventListener('click', () => {     showDropDown(false)
crypto.randomBytes(8, function(err, bytes_slow_buf) {       if (err) { return cb(err); }       unsigned_int = Buffer(bytes_slow_buf).readUInt32LE(0);
} else if (tagName === '@member') {           let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value, true, true, false);           name = paramName;
return 'K';     case 'nt_hazy' :
console.log("finished touch");       if (stifle)          stifle(e);
} else {    try { source = eval('(' + TheTextBox.innerHTML + ')'); } catch (e) { return erra (e); }   }   if (Object.prototype.toString.call(source)!== '[object Object]') {
throw'provide remote URL to log errors locallyely';     } else if(remoteSettings.additionalParams && typeof remoteSettings.additionalParams!== 'object') {
toStandardMinutes() {    return (days * 24 + hours) * 60 + minutes;   }   plus({days, hours, minutes}) {
date.setMinutes(date.getMinutes() + part);    }    if (! isNaN(part = Number(to.hours)) ) {     date.setHours(date.getHours() + part);
}     case 'PANEL_CREATE': {       const { payload } = action
:!!args.matchesFiles;   this.matchesDirectories = args.matchesDirectories   ? false
timeEntries.push(this._createTimeEntry(geojson[i]));       }
}         const tmp = new Uint8Array(bytes.length + leadingZeros);         for (let i = 0; i < bytes.length; i++)             tmp[i + leadingZeros] = bytes[bytes.length - 1 - i];
findAll: function (callback) {       var sql = `       $u.commentOf(function () {
to: data.path.clone().stringify(),                                 easing: Easing.easeOutQuint                             }
form = {                       type: "object",
return value;   }
data =Locale(key);       locale = data.locale;     } else {
i++;   }
}       self.lr.resume();
import React from'react'; import {mount} from 'enzyme'; import Baobab from 'baobab';
obj.changeStream = true;             } catch (ex) {  }
class Sock extends EventEmitter {   constructor(ws) {     super()     this.ws = ws
parser.setAttribute("href", url);         parser.href = String(parser.href);         var isCrossDomain = parser.host!== location.host;
deactivate(map)       expect(map).to.emit([{current: 0}])     })
settings.family = [settings.family];                 }                 for (i = 0; i < settings.family.length; ++i) {                     this.family.push(settings.family[i]);
} else {                         checkTagOrTerm = Utils.checkTagOrTerm(object.typeName);                         if (!checkTagOrTerm.term) {                             tagTermList.push(object);                         }
for (i=0, len=handlers.length; i<len; i++) {           handlerObj = handlers[i];
const parts = (phone.name || '').split(/\./);         set(phone, 'displayName', `${_.capitalize(_.first(parts))} ${parts.slice(1).map(p => (p || '').toUpperCase()).join(' ')}`);       });
} else if (match && match[1]) {                 target = doc.getElementById(match[1]);             }
result = true;           iterate(function(child) {             if (node === child) {
"global": function* (ctx) {     ctx.scope.set("eci", yield ctx.KRLClosure(ctx, function* (ctx) {       return yield ctx.modules.get(ctx, "meta", "eci");     }));
if (!code &&!t._ok && (!only || name === only)) {                     exit(1);                 }             });
this._resultNameCacheCount = 0;     }    WsWorkunits.prototype = Object.create(Comms.prototype);
coordinates.forEach(function(line){         str += DewShape.LineString(line);       });
return parsedDom.getElementsByTagNameNS(xml.parserErrorNS, PARSER_ERROR_TAG).length > 0;     } catch (e) {       return parsedDom.getElementsByTagNameNS(xml.parserErrorNS, PARSER_ERROR_TAG).length > 0;     }
var menuOpts = [];             var createMenuOpt = function(x,y,opt) {                 opt.el = menu.append("div")
multisigFees: 'MultisigFees',      cosignatory: 'Cosignatory'
const router = require('express').Router() const { User } = require('../db/models') const Op = require('sequelize').Op
type: 'GET_SEARCH_RESULTS',     promise: fetch(`${apiURL}/articles?q=${keyword}&_limit=${limit}`)   }
console.log('Received'+ articles.length +'unique articles for "' + company + '" from Discovery');     data = {       company : company,
import theme from './components/themeConfig/themeConfig';
var entityNameRegex = /https:\/\/duckduckgo.com\/([a-zA-Z0-9\)\(_%]+)$/         if (entityNameRegex.test(item.FirstURL)) {
d = (d<1000)? d.toFixed(0)+' m' : (d/1000).toFixed(2)+' km';     t = f.get('durationT')/60;     console.log(f.get('duration'),t)
if(options.isDropdown) html = '<ul style="display: none;" class="shareMenu">' + "\n";    else html = '<ul class="shareMenu">' + "\n";
function parseUserProvidedColor(c) {   let testElement = document.createElement('div');
l = 0.5 * add;     if (l === 0) {
Content.create = function(contentJson) {         for (var i in Content._contentTypes) {             if (Content._contentTypes[i].canParse(contentJson)) {           return new Content._contentTypes[i](contentJson);
define(function (require) {     'use strict';
exports.showKitten = function showKitten(result) {   var title = result.titleHtml.replace(new RegExp('<\/?\w[^>]*>', 'g'), '');   var snippet = result.snippetHtml.replace(new RegExp('<\/?\w[^>]*>', 'g'), '');
createTest : function (config) {         var test = new Fiesta.model.TestCase(Ext.apply(config || {}, {
export class  SCDomElement {
}     throw new Error(chalk.red(`> Config file does not exist at ${tildify(configPath)}`))   }
Polymer.cs.behaviors.csNavTabs = [     Polymer.cs.behaviors['this'], {       hostAttributes: {
} );    var Sub = AFrame.Class( Super );
System.register(["aurelia-framework", "aurelia-i18n", "../services/index", "dompurify", "jquery"], function (exports_1) {     "use strict";
label: 'Change value',           action: function(args) {             var name = args.data.jsonObj.name;
if(rule.href){        var childSheet = rule.styleSheet || rule;
var MockHolding = artifacts.require('MockHolding');  var MockLitigation = artifacts.require('MockLitigation');
} } var Modul_colorwheel = function () {
})(OSjs.Helpers.DefaultApplication, OSjs.Helpers.DefaultApplicationWindow, OSjs.Core.Application, OSjs.Core.Window, OSjs.Utils, OSjs.API, OSjs.VFS, OSjs.GUI);
placementKeys = ['nw', 'n', 'ne', 'e','se','s','sw', 'w'],    placement, rotation, steps;
shaka.extern.Error = function() {};
window.fbAsyncInit = function() {     var parent = Atomate.auth;     FB.init({
var testAutomation = function( options ) {  options = options || {};  var subProcesses = [];
export default zora()  .test('compose table factory', (t) => {     const data = [];
const { ERROR_MESSAGE } = rule; const ruleTester = new RuleTester({
if (analysis) {         const color = rgbToHex(
self.state.loadQueue = self.state.loadQueue.concat(cellIndices);         }       }
},   messageView: {
map.add_layer(layer);                         console.log(map.toXML());
import _ from 'underscore' import chunkify from '../index'
let {range} = editor;         let matches = text.match(/(^|[^\*])\*([^*].*?)\*$/);         if (matches) {
logUpdate(`\n${pos}Maybe \n\n${pre} ${dim('Broken link')} or\n${pre} ${dim('Media shared by private profile')}\n`);  end(1); };
export default function Login(props) {   const prevPath = props.history.pathname;   const baseRedirectUrl = `${window.location.protocol}
r.on('raw', function (rect) {    !initialized && handleConnection(rect.width, rect.height);
if (!(path.extname(file) in fileTypes)) return false;
} else {                     regex = "<.*(?!<\/option>)\>";                 }
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
} finally {     if (_didIteratorError2) {       throw _iteratorError2;     }
result = CSSLint.verify(value);         that.sender.emit("csslint", result.messages.map(function(msg) {
var h;   while((h = this._notifyConnections.pop())){ h.remove(); }
const app = new Koa(); app.use(function (ctx) {   ctx.body = 'Hello Pandora.js';
'Background color'        : 'لون الخلفية',  'Indent'                  : 'إضافة',  'Outdent'                 : 'إضافة',  'Format'                  : 'النتسيق',
function Test262Error(message) {   this.message = message || ""; } function assert(mustBeTrue, message) {     if (mustBeTrue === true) {
_modifyIconHeight : function(propValue, propOldValue)     {
this.upstreamListeners[type] = upstreamListener;             for (i = 0; i < this.upstream.length; i++) {                 this.upstream[i].on(type, upstreamListener);
case "FunctionExpression":             return new astExpression.FunctionExpression(node.loc, transform(node.id), transform(node.params), transform(node.body));
var consoleNode, msie,     NOOP              = 'noop',
var parts = this.getParts_();   for (var i = 0, part; i < parts.length; i++) {     part = parts[i];
import * as aN from './authentication'; import config from 'config';
return Session.get(stringId).profile.country.name +'' + Modules.client.searchJSON(geoJSON.country, Session.get(stringId).profile.country.name)[0].emoji;       }
Git.readFile('alle/europaweite-veranstaltungen-' + year + '.md', 'HEAD', function (err, contents) {       callback(null, err? {} : eventsToObject(contents, year));     });
module.exports = functionUnary(x) {   if (arguments.length!= 1) {
exports.exception = function (exception) {   global.debug(e.getStack()); }
}   }   processItem(this.currentItem);
return x === null? NaN : +x; }
var regex = /%%|%(\d+\$)?([\-+\'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuidfegEG])/g;     var a = arguments, i = 0, format = a[i++];
results = request.doSearch();
export class TargetWithNoDropResult extends DropTarget {   constructor() {     super();     this.didCallDrop = false;
_clearLoadingState: function() {     },
const currentRunning = String(event.target)      .replace(/(.*)\ x/, (match, p1) => `*${p1}* x`)     debug.log(currentRunning)
"use strict";
return await Promise.all(promises)      .catch(e => {
proxy, port, files, startPath: '/', logPrefix:'snuggsiツ' }
update: function(value) {         var options = {
}                 var oldWorkFlow = this.currentModel.get('workflow')._id;
initializeSignalHandlers() {     new SignalHandlerSingleton().addReceiver(       `${this.props.signalNameSpace}.FocusOnSelectableItem.${this.props.itemKey}`,
var constants = require("../../../src/constants"); var Augur = require("../../../src");
default:                         break;                 }
if (!context.flags.seconds) {       cli.exit(1, 'Please specify a valid timeout value.')     }
mainStory.error(`Invalid version for ${chalk.bold(pkgName)}: ${chalk.bold(version)}`);       throw new Error('INVALID_VERSION');     }
let prev = getValue(this, name)         if (is(prev, value)) return true         setValue(this, name, value)
timer = setTimeout(function() {         if (!serialPortFound) {           return;         }
await store.dispatch(getInsights());     }     return { isServer, user, url };
it("Asynch", function(done) {     var toRun = function(RUNTIME, doneCallback) {       var namespaceToUse = namespace || RUNTIME.namespace;
charset = parser.parseChar(3, 2, new CFFStrings(), true);       expect(charset.charset).toEqual(['.notdef', 8, 9]);
try {       viewValue = input.toString().trim();     } catch (e) {
}     fonts = labelData.fonts;     var labelFiles = new Array(fonts.length);
i++;  } });
export class Singleton extends Registration {   constructor(keyOrRegisterInChild, registerInChild=false){     super();     if(typeof keyOrRegisterInChild === 'boolean'){
jade.page_args = function () {     var page_args = window.location.search.match(/\w+=[\w|%|:]+/g);     var result = {};
if(matches){          suffix = matches[1]
} } CacheTL.prototype.get = function (key) {
return false;             }             return (value + "").length == this.field.length;         },
document.write('<script type="text/javascript" src="scripts/scriptaculous.js"><\/script>');
set(contextName, contextDefinitions, extend=false) {
current = ComputedStyle.borderMap[current];                 }
if (g) {                 g.replace('#', '').replace('/', ''));             }
progress(null, "Fetching repositories...");         githubRepo.getFromUser({             user: user
for (var i = 0; i < listeners.length; i++) {           console.log("registered new listener");
var bar = "hello"; var bar = "world";
(function () {
$analyticsProvider.api.trackGoal = function(goalID, revenue) {                     if (typeof _paq!== 'undefined') {                         _paq.push(['trackGoal', goalID, revenue || 0]);
let nangle = normalize_angle(angle - rot1 + rot2);         return new Face(npos.x, npos.y, rad, nangle);     }
for (const symbol of Object.getOwnPropertySymbols (attribs)) {                  const descrip = Object.getOwnPropertyDescriptor (attribs, symbol);                  Object.defineProperty (cls, symbol, descrip);
ret.image = 'android'       rep = ret.ua.match(/(Android|Adr)[ |\/]([.0-9]+)/i)       if (rep) {         ret.version = rep[2]
var angle = Math.acos(vector.dotProduct(vectorToReferencePoint) / (vector.r() * vectorToReferencePoint.r()));       return angle;
return!((typeof v === 'undefined')    || (v === null)    || (v === null)
this.moveStep = function(id, prev_id) {       var dataToBeSend = {'prev_id': prev_id},
pivot: 0.5,                         texture: {type: lng.textures.StaticTexture}                     }
if (isList(as) === false) { return error.listError(as, catMaybes); }   if (isMaybe(head(as)) === false) { return error.typeError(m, catMaybes); }   const p = x => isJust(x);
var tests = []; for (var file in window.__karma__.files) {
var hasPath = vendorPaths[name],         isIgnored = (typeof vendorPaths[name] === 'boolean' && vendorPaths[name]);     return!isIgnored &&!hasPath &&!hasExternal;
if (res.status > 300) {             console.error('Error getting Auth0 users'+ res.status, err);             reject(err);           } else {
this.saveAndEncryptUserToLocalStorage(function(){         if(typeof callback == "function"){           callback();         }
return true;
strokeColor() {         const color = colorAsArray(this.root.getElementById('strokes-option').value).slice();         color[3] = parseInt(this.root.getElementById('strokeopacity-option').value) / 100;
return {x: d.x, y: newY, color: pow.toString()};   }; }
return 2 * p;       };
},   propTypes: {     filter: "Enable a filter for the menu. When this is enabled each menu item requires a name prop.",
var __executed = /\bot/.test("pilot\nsoviet robot\topenoffice");
if(!localStorage['tutorial-shown']) {  GAME.tutorial = new Tutorial(spawnPos)
scope.deleting = true;      scope.deleteClicked = true;
}             return contextData;
if (dojo.byId("debugbar_position").innerHTML!= "") {             frame = 0;         }
var ostatus=require('ostatus');
var WrapText = function (text, getTextWidth, wrapMode, wrapWidth, offset) {     var retLines =WRAP_RESULT;
let assert = require('assert');
FbxSkin.prototype.connectObject = function(obj) {
console.log(e)     }
this.offset = styleJson["line-offset"];             this.opacity = styleJson["line-opacity"] | 1;             this.width = styleJson["line-width"];
var addr;
if (!authToken) {     throw new Error('ERROR: Cannot find NOW_TOKEN environment variable')   }
import path from 'path';
if (outdated) {       module.hot(...outdatedModules) {         console.error('Should not happen');         process.exit(1);
const basePath = file.split(/[/\\]/);     basePath[basePath.length - 1] = "";
createFlagSeries(highchart);     for (var i = 0; i < chartData.flags.length; i++) {
const a = prop()       expect(a.takeWhile()).to.flowErrors(a)     })
var token = jwt.sign({
if (result!== true) {         if (result!== undefined) {           arangoHelper.arangoError("Collection error: " + result);
} customElements.define('project-loader', ProjectLoader);
areaid = this.id[cell2.id];    if(this.irowakeEnable()){ cell.color = cell2.color;}   }
return format;         }
if (line.indexOf('author')!== -1) {         if ((info.author = parseAuthor(line.replace('author ', ''))) {             return true;
get R() {     return this.R;   }
}      shareholders.push(newShareholder);  }     }
traverse = decor!== false;         }         if (traverse === false) {           return;         }       }
socket.on('listening', () => {             const whoIsCommand = '{"cmd": "whois"}';             socket.send(whoIsCommand, 0, whoIsCommand.length, 4321, ip);         });
});     database.BeginTransaction(err => {         if (err) return onError(req, res, err.message || 'Database transaction error');
ListItemText,    CircularProgress,
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/flaming_humbaba-1334193679.swf",  admin_props : false,
const yAxis = new Vector3( 1, 1, 1 ).normalize();
innerHeight].join(); }
stopDrag(e) {
][parsed];   } else if (parsed) {     return String(parsed);
if (!matches) {           for (let idx = 0; idx < index.aliases.length; idx++) {             let alias = index.aliases[idx].toLowerCase();             matches = true;
if (isExpressionType(parentNode)) {             return '"' + node.value + '"';
if (callback) {             const callbackID = `${this._uniqueMethodIdentifier()}_${methodName}`;             this._callbacks.add(callbackID, callback);
query = query.replace(/([(){}[\].^$|?+*\\])/g, "\\$1");         return new RegExp(query, "gi");
for (jj = 0; jj < data.join.length; jj++) {       var join = data.join[jj];
return this.use(route, handler, arguments[2], arguments[3], method);       case 5:
state.isTable = true     state.render.push(
oldSnapshot.push(this._currentSnapshot[i]);       }
break;    case rfb.encodings.copyRect:
return () => {                 document.removeEventListener(SLIDER_EVENT.MOVE, onMouseMove);                 document.removeEventListener(SLIDER_EVENT.UP, onMouseUp);             }
storage.getURL(id).then(function(url) {       if(!url) {         return Promise.reject(url);       } else {
const rootNode = findDOMNode(wrapper).children[0];     expect(rootNode.id).toEqual('heart');
function getDyno (client, appID, dynoID) {   return client.request({
} else {                                 if (self.compileOnBuild && fieldData.CompiledField) {
};                 break;             case 4:                 this.get = function (idx, out) {
return createIterable(() => {     for (;;) {       const { done, value } = iterator.next();
Button,   Box,
broadcast(message, fromSelf){         var mess;         fromSelf = fromSelf!== false? true : fromSelf;
arrayFromObject,     isArray,
} else {       capation = 'Complete'     }
let url = baseUrl + urlPath     return new Promise((resolve, reject) => {
throw new SyntaxError('Trailing characters: "' + str + '"');     }
if (changelogUrl) {                     console.log(`Opening ${strong(changelogUrl)}...`);
if (is_phylotree_active===false) {   console.log('[BUG] phylocanvas not initialised and we're trying to start up gubbins. Problems to follow...')
polyfill = versionMatch && parseInt(versionMatch[2]) < 21;     } else if (userAgent.indexOf('Android') >= 0) {
xmlHttp.setRequestHeader('X- algolia-Application-Id', this.applicationID);             for (let i = 0; i < extraHeaders.length; ++i) {                 xmlHttp.setRequestHeader(extraHeaders[i].key, extraHeaders[i].value);             }
const {       noActiveNotices,
console.log("Wrote: " + fileName);   }
if(executeUpdates) {                 TrainingTreeUtil.ExecuteUpdate.query({id: $scope.rootNode.id}).$promise.then(function(treeStatus) {                     $scope.getAndDisplayTree();
return field <= (value1.getTime()) || field >= (value2.getTime());         case this.OPERATORS.dateOperatorIsBlank:
import {Parser} from 'expr-eval'; import {App} from 'website-examples/plot/app';
if (req.query.private) {     scopes.push('repo');
Posts.insert(data);   }
vjs.CurrentTimeDisplay.prototype.createEl = function(){   var el = Component.prototype.createEl.call(this, 'div', {     className: 'vjs-current-time vjs-time-controls vjs-control'
return cb(null); }
import * as React from'react';
if (options.add) {                         add_to_sprint(options, finalCb);                     } else {                         finalCb();                     }else {
.blur(function (e) {                     if (blurCausedByInputFieldSwitching) {
return doWriteOp(project,'setBranchHash', branch, oldhash, newhash, callback);                 }                 if (writeOps.size()) {                     fsyncs.push({
const PIPELINE_HEADER = `${V3_HEADER}.pipelines` function pipelineCanned (client, app) {   return client.get(`/apps/${app}/pipeline-cpl')
date.setMonth(date.getMonth() + part);    }    if (! isNaN(part = Number(to.year)) ) {     date.setFullYear(date.getFullYear() + part);
console.log('Connection state changed to', conn.connectionState);   }
import React, { Component } from'react'; import SearchFilterCollectionTag from './SearchFilterCollectionTag';
undefined, undefined, function (data, p) {           if (p === 404) {
if (this.stream) {       if (process.platform!== 'win32') {         this.stream.close();
if (!this.props.note) return;   if (this.props.note.encryption_applied) return;
subClient.on("message", (channel, message_str)=>{
const urlParsed = require('url').parse(request.url);   if (process.platform === 'win32') {
headers: {     accept: "application/json"    }
var navCharacters = helper.e(".nav-characters");     for (var i = 0; i < array.length; i++) {       var characterAnchor =_render_navCharacters(array[i].input.name, i);
layers[baseLayer].addTo(map);     if (baseLayer == 'BingSatellite') contextLayer.addTo(map).bringToFront();     L.control.layers(layers).addTo(map);
if ( ( msgHide = field && field.msgHide || opt.msgHide ) ) {                 msgHide.call(me, $msgbox, msgOpt.type);
Console.prototype.editGetText = function() {         if (!(this instanceof Console)) return;
return newNode;   case document.TEXT_NODE:
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/bean_bean-1334602769.swf",  admin_props : false,
lang.Locale = Locale; lang.Namespace =Namespace; lang.FilterList = FilterList;
pem.can = _.union(pem.can, pemList);     self.setPem (target.qNum, pem);     reply (sprintf('%s 的权限添加成功!', target.userNick));
var last = list.length - 1;   for(i = 0; i < last; i++){    var child = this._getChildNode(node, list[i]);
for (var key in global) (function() {       return (context)[key] = (global)[key];     })();
label: this.startTimeText,                     renderer: Format.date.bindDelegate(this, this.startDateFormatText, false),                     exclude: this.isActivityTimeless
}, "DAS": function (cpu) {             util.panic("Execute (DAS) :: unsupported");
stores = require('stores'),       ProviderResources = require('./ProviderResources.react'),       ProviderCollection = require('collections/ProviderCollection');
request.post(url, options, function (err, res, body) {     var err2 = utils.error(err, res, body)     done(err2, body)   })
}     this.queue.receive(this.obj, patches);
options = options || {};   options.defaultValue = (options.defaultValue? options.defaultValue : c.SUPPRESS);   options.dest = (options.dest || c.SUPPRESS);
}       return false;     });
import Layout from "../components/layout" const BlogIndex = ({
ctrl.field = {};                          options.field.on("value", function(snap) {
console.log(message.text());       exit(2);     }
this.setInputsInline(true);     this.setTooltip(Blockly.Msg.MATH_NUMBER_TOOLTIP);
flareMapSrc: '/img/sunflare.png',  init() {   this.root = new Object3D();
return result;       } catch (err) {console.log(err)}     };     share.cmult = function (cst) {
mongoose.connection.db.collection(collectionName, function(err, collection){       if (err) { return reject(err); }
title: "www.luehangs.site",         description: "Test 11",
delete this[qx.OO.values[a[i]]];     }
if (verbose)       debug("[iAdvize] post /conversations, ", req.body.idOperator);     if (!isValidSignature(req.header("X-iAdvize-Signature"), req.body)) {
if (text) {     return text.substr(-1, 1).toLowerCase() ==='s'? text + '\'' : text + '\'s';
if (rid)       return rid;
const reCMD = /^\/([0-9а-я\w\d_\-]+)/;
# A regular expression for date.   (?<year>\d{4})-    # year part of a date   (?<month>\d{2})-   # month part of a date   (?<day>\d{2})      # day part of a date
if (addr === 0xFF0F) return true;
import bind from "bind-decorator"; import StorageService from "./service";
catch(err) {             result = {httpStatus: httpStatus.BAD_REQUEST, status: "failed", errorDetails: err};
return _Math.genPerpendicularVectorFrisvad( v );
Link, } from'react-router';
.argv; if(argv.v) th.debug(console.log); if(argv.port == 42420)
import React, { Component } from'react' import { TextInput, StyleSheet, View, Platform, Dimensions } from'react-native' import colors from '../config/colors'
"frame": false,             "resizable": false         };         const customConfig = customConfig || {};         utils.extend(config, customConfig);
throw new Error('This function should never be called!'); }
case LIST_COMMENTS_RESPONSE:             comments = action.comments;             const newList = concatList(comments,state.comments.list);
}     },     _onWindowBlur : function() {       this._hideCalendar();
if (message['nlpResponse']['result']['actionIncomplete'] == false) {          alreadyAsked = false;     var alreadyAskedCount = 0;
for (var name in this.xhr.callbacks) {   if (this.xhr.callbacks.hasOwnProperty(name)) {    this[name] = function(name) {
lookup['ta'][d.panchayat_code] = true;                     }                     else if (d.task_assign === null) {                         lookup['ta'][d.panchayat_code] = false;
type: "bi.style_table",              el: {
switch (assertNode.localName) {   case 'all-of': {    const asserts = evaluateXPathToNodes('*', assertNode).map(createAsserter);    return (xpath, contextNode) =>
return matrix[b.length][a.length]; }
fileTypes[dest][config][fileType].push(file);             }           }         }         var filesToUpload = [];
extension: 'docx'       });     case 'application/vnd.google-apps.spreadsheet':
cleanupDistStep         ], function(err) {             if(err) {                 grunt.fatal(err);
} else {                                      }
const isOpen = this.get("isOpen");         const rootNode = this.get("rootNode");
function I1DChart() {     }     I1DChart.prototype._palette = Palette.rainbow("default");
}             var _event = _ref6;             emitter.addListener( _event, reject_handler );         }
case Actions.ResetState:   return initialAppState(reducer(undefined, { type: Actions.ReduxInit }), state);  case Actions.ToggleLoading:  default:
box(reqdiff, pubkey, keys).then(boxed => {               connection.send(JSON.stringify({
$('img', oThumbs).each( function() {     sName = parseInt(this.id.replace('image-',''), 10);     $('option[value='+ sName +']', oSelect).attr('selected','selected');    });
var DefaultConfig = (function () {     'use strict';
return value;     }
/wireless/ig,         /(shop|store)/ig,         /[.,/#!$%\^&\*;:{}=\-_`~()]/g,         /\s/g     ];
var target = e.relatedNode;
}         showConfirmDialog(function() {
return _ENCODE_HTML_RULES[c] || c; }
var window = require(__dirname + "/../../lib/browser").windowAugmentation(dom); var document = window.document; var location = window.location; var navigator = window.navigator = { userAgent: "node-js" };
var tiles = tileLayer.getTiles();             expect(tiles.anchor.toArray()).to.be.eql([1, -255]);             done();
var opts = {'type':value,'animation':'explode','useLite':true};      if(value == 'lines'){    opts.animation ='slide';
.then((conversations) => { console.log("RES", conversations, "\n") throw Error("Stopping,")       let conversationIds = conversations.map((conversation) => {         return conversation.convid;
class ToshihikoModel extends EventEmitter {     constructor(collectionName, toshihiko, schema, options) {         super();         this.ai = null;
function fib(n) {   if (n === 0 || n === 1)
getTagsIndex: function(callback) {         callback = callback || jsGen.lib.tools.callbackFn;         that.find({}, {
this.name = path.basename(this.name).replace(/^\.+/, '');     while (_existsSync(options.uploadDir + '/' + this.name)) {         break;     }
const compression = require(' compression'); const bodyParser = require('body-parser');
console.log('releasing slug...');     return app.releases().create({
break;     caseTransactionS_DELETE_REQUEST:
const h = ht.empty;         for (let i = 0, len = keys.length; i < len; ++i)             h = ht.set(i, keys[i], h);
for ( i=0, l=annotationStackFrom.length; i<l; i++ ) {    if ( annotationStackFrom[i]!= annotationStackTo[i] ) {     break;
return molecules;
export const userSetting = (menuItem, browserWindow) => {   const settingPath = path.join(__static, 'preference.md')   createWindow(settingPath) }
export default ({mainStyle, address, balance, burnWallet, goBack, dollarDisplay}) => {   return (
return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];     case DIRECTIONS[1]:
this._nodes.set('header', value);   }   get content() {     return this._nodes.get('content');   }
trigger: function(event) {         if (this.__listeners__[event]) {
parsers.push( wv.data.parse);         }
fkeys = Object.keys(machbox.functions);    for (i in fkeys) {
placement: 'bottom',                 placeholder: 'Enter email...',
var adapted = adapter(fakeQunit);
var loaded = q.all(moduleLoads.map(function(ml) { return ml.promise; }));           allImports.then(function(astAndNames) {
}       this.errors[fieldName] = err;     }
return THREE.AnimationUtils.lerp_string_immediate;     };   }  }
return queue.await((err) => {       if (err) { return callback(err); }
var DEFAULT_RPC = utilities.urlstring({     protocol: "http:     host: "127.0.0.1",
return     }
var self = this;         var ship;         ship = self.model.ship;
let id = uid()  subscribers.push({ id: id, fn: fn})  return id
token : ["text", "string", "text", "constant", "text"],             regex : "(\\[)(" + escaped("]") + ")(\\]\\[)("+ escaped("]") + ")(\\])"         }, {
knox.createClient(that.options).putFile(file.path, path + filename, {   'Content-Type': filetype,
const openProModal = () => {     dispatch(openModal('UPGRADE_MODAL'))   };
behaviors: [],      onVisit: function(merchant, roomObj, target, incomingRoomObj) {       if (target.race!== 'ogre') {
})       geometry.faces.push(new THREE.Face3(...indices))
return s.replace(/\/+$/, '').replace(/^\/+/, '/'); }
p = path.normalize(p);         var arr = p.split(/[\\/]+/);
import { Footer } from "./Footer.jsx"; import { Loading } from "./Loading.jsx";
import LayerManager from 'components/widgets/editor/helpers/LayerManager';
actual(function () {           assert.that(result, is.equalTo(65));           done();
].concat(node.body.body)))     },
});     editor.applyingChangeState = false;   }
eM.eF = eF;         var eC = (function () {
}         return this._children.map((child, index) => child? this.prefix + index.toString(16) : undefined)            .filter(child =>!!child);
this.loadQueue = [];     this.onloaded(function() {       this.callback(this.getData());
const callback = this.callbacks[id];         if (callback) {
componentWillReceiveProps(nextProps) {         this.updateOnOrDirty(nextProps.projectStudios, nextProps.myStudios);     }
var ModulesListingView = require('./ModulesListingView'); var _ = require('underscore');
var IOUtil = require('io/IOUtil');   var parsed = IOUtil.parseDelimited(data, opts);   return new LabelMapping({ name: opts.name || filename, mapping: parsed.data, defaultIndex: opts.defaultIndex, maxIndex: opts.maxIndex });
.then((volumes) => {           this.volumes = get(volumes, 'volumes');         }),
point,         basis,
nextData = data;       return;
{     self.obj.body.fixedRotation = self.fixedRotation.getValue();
export default function one(s, context) {     return new Init(s, context)[0]; }
const textOrientation = item.text.orientation;     const stack = itemStack[textOrientation];
var urls = _.difference(def.url.paths, aliases[name]);     urls = _.map(urls, function (url) {       var optionalVars = {};
try {       var module = config[helperName].require        ? path.resolve(global.codecept_dir, config[helperName].require)
return matches; } functions.findRepeaterElement = wrapWithHelpers(findRepeaterElement,repeaterMatch);
$rootScope.$on('$routeChangeError', function handleMiddlewareRedirects(event, current, previous, rejection) {   var pattern = /redirectTo:([^(]*)(\((\{.*\})\))?/;   var match;
if (that[kState].closed)       return;
var error = new Error('If you set the mode to "transit" you must also specify either a departure_time or an arrival_time');     if (typeof callback === 'function') {       return callback(error);
};             return json;
export const clickCounter = (state = 0, action) => {   if (action.type!==INIT_REDUX_OPERATIONS) return state;
if (!this.hasID(nodeID) || this.hasOwnID(nodeID)) {                                  this.nodesByID[ nodeID ] = node
var ModelGenerator = module.exports = function ModelGenerator() {     yeoman.generators.NamedBase.apply(this, arguments);
console.log(error);     exit(0);   }
message = message  .replace(/&/g, "&amp;")  .replace(/"/g, '&quot;')  .replace(/'/g, "&apos;")
it('should have a background gradient', () => {       expect(input.props.style.backgroundImage).toMatch(/^linear-gradient/)     })
on unregister: Class.empty,   onUpdate: Class.empty,
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[62],{
return handleUndefinedAndNull(file.license)     } else if (file.license === 'objcet') {       return handleUndefinedAndNull(file.license.type)
this.X.gestureManager = this.GestureManager.create();       this.Y.registerModel(this.ActionButtonCView.xbind({
{                     self.project.deleted = true;                 }
);       default:
if (!zoneData) return null;   const co2ColorScale = getCo2Scale(colorBlindModeEnabled);   const co2Intensity = getProductionCo2Intensity(mode, zoneData);
var handleFocusChange = function() {     var _active = activeElements();
case actions.CREATE:       binary = step.createBinary();       return state.concat([ {binary} ]);
Git.prototype.submoduleUpdate = function (args, then) {       if (typeof args!== 'object') {         this._getLog('warn', 'Git#submoduleUpdate: args should be supplied as an array of individual arguments');
adeModule.directive('adeUrl', ['ADE','$compile','$rootScope', '$filter', function(ADE, $compile,$rootScope,$filter) {
case "exit":         process.exit(1);       default:
README.*`,   `**/react-docsreact-stylesreact-integration
type: og.video.type,             rel: CONFIG.R.og,             height: og.video.height,
var tile1 = new maptalks.TileLayer('tile1', {             urlTemplate : 'tiles/tile1.png'         });
success: loginState => {               var loginState = loginState.data;
if (utils.cellMaps.location[graffitiId]!== undefined) {         return utils.cellMaps.location[graffitiId];
} else {   Promise.each(Object.values(languages), language => language.build().catch(exit); }
'save': ['ctrl+s'],     'play/pause': ['space'],
return injector.resolveDependencies();   }   function markAsApplyed( template ){
};     case `${ACTION_TYPES.CHECK_SERVICE_EXIST}_FULFILLED`: {       const serviceExists =!!action.payload;       return {
console.error('Database error:', error.message);       exit(1);     } else {
case 5:       (r = v), (g = p), (b = q)       break   }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_glove_metal_finger_piece1-1348197973.swf",  admin_props : false,
if (!chain && create) {   chain = newChain(chainName);  }
}); }; module.exports = ScriptsDoNotFlicker;
this.setSourceNodeId(vId);   } });
throw new Error("ellipse not yet supported");     }     clip() {
_allCompleted (tasks) {     for (let i = tasks.length - 1; i >= 0; i--) {       if (!tasks[i].available) {
});     this.redirect('/resume', {sheetObject: finalObj, template: this.state.template});
var path = this.processDataPath(dataPath);     if (path === undefined) {         return false;     }
hour = hhmmss[0] || 0;             minute = hhmmss[1] || 0;             second = hhmmss[2] || 0;             millisecond = hhmmss[3] || 0;         }
CONSTANTS.Dir_Top             ];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2010-03\/1268344207-8296.swf",  admin_props : false,
var targets,unclassified; function $HLMethodClassifier(){return $globals.HLMethodClassifier||(typeof HLMethodClassifier=="undefined"?nil:HLMethodClassifier)}
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-12\/proto_shrine_alph-1323999218.swf",  admin_props : true,
MonitorChrome.disconnect(errback); }
event.sub('location.refreshed', onLocationRefreshed);    $(win).on('resize load', adjustSize);   };
arrayIdent = scope.reserveParam();           }           init = [];
Ext.example.msg('Button Click', 'You clicked the {0} button', btn);     }
throw new Error("Should not execute this test");             });
this.api.registerHook = (name, handler) => {     assert(typeof name === 'object', `钩子名称必须为字符串类型`);     assert(typeof handler === 'function', `钩子处理函数必须为函数类型`);
.replace(/'/g, "\\'")            .replace(/\{([^}]+)\}/g, "' + (_.$1 || '') + '") + "'")       )(data);
it('works', function () {       var citems = db.addCollection('items', {         clone: true
return false;                 }             }             if (Date.now() > (cacheFileMtime + cacheTime * 1000)) {
easeInBounce: function (x, t, b, c, d) {   return c - easing.easeOutBounce (x, d-t, 0, c, d) + b;  },  easeOutBounce: function (x, t, b, c, d) {
download(options);       break;     case 'r':     case 'run':
});   if( /[\s<>!@#\$%^&*,.]+/g.test( config.db )){     throw new Error( 'Database name containsillegal characters' );
var column_data = _cache[block_id];                     for (j = 0; j < limit; j++) {                         var value = values[j];
const path       = require('path'); const source     = require('vinyl-source-stream');
$tab_t.width(1 / $tab_t.length * 100 + '%');    }
jQuery.multimediaSupport = {};  var m  = jQuery.multimediaSupport,   vID = new Date().getTime(),
$scope.elasticsearch_dblist = function(query) {       var words = query.split(" ");       var terms = _.map(words, function(word) {
getBinFromUrl(medias[nb].url, bind.filename, function (err) {    if (err) { return callback(err); }    $$.totalDuration += medias[nb].length;
name: 'driver',                     fieldLabel: 'Driver',                     value: 'org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver',
throw new error.UnsupportedTypeError('equal', x, y); };
isGreaterOrEqualThan,   isNonNegative,
state.lastViewClassOrInstance = state.viewClassOrInstance;
while ( (m = rEscapes.exec(sLine))!== null ) {
var stop = mobx.spy(c => events.push(c));    doStuff();
element.getHierarchy().push(elements[i]);             if (layers[i].parent!== undefined) {                 this.buildItemHierarchy(data,element, layers, layers[i].parent,elements);
return newState;  case 'SET_VEHICLES': {   const veh = Object.assign({}, newState.vehicles);   veh[action.route] = action.vehicles;
if(!updated) {                         zeros = this._zeroGenerator(newLen);                         oldData[i].data = oldData[i].data.concat(zeros);
let is_host_selector =           token.selector.startsWith(':host');         let psudo_rules =           token.styles.map(s => compose_rule(s, coords));
options = {      'source':ArgumentString(this.props.currentCommand, constants.specialCommands[constants.WALLET_033X]),
process.exit(1);         }
for (var i = 0; i < this.app3d.meshes["field"].length; i++) {                 this.app3d.meshes["field"][i].name = name;             }         } else {
drawGpx.enabled = function(_) {         if (!arguments.length) return gpx.enabled;         gpx.enabled = _;         dispatch.change();
filterChain.push(this.buildMethodFilter(proxy));         }         return filterChain;
marginBottom: '4px',               fontSize: 16,
if(typeof data === "object") {          data = querystring.stringify(data);
while (pts.length >= 4) {           x1 = bx            y1 = by            bx = parseFloat(pts.shift())
function filterNotILike(value, append) {         filterILike(value, append);         if (append) {           return;         } else {
var bestRect = bestLogo.foregroundRect;   for (i = 1; candidate = bestCandidates[i]; ++i) {     rect = candidate.foregroundRect;     if (bestRect.top > rect.top ||
type: 'GET',                 url: url + '?tags=&search=' + ex_kit.in_cp1251(text) + '&type_search=groups&incldead=0&sorting=0&type_sort=desc',                 cache: false,
case 'performance':       return performance(log, contentType);     default:
}; } util.inherits(H2183CompassInput, SerialInput);
if (process.env.ENV === 'production') {     Error['stackTraceLimit'] = Infinity;
}             else if (this[levelProp] && (!(this[levelProp] instanceof Array) && this[levelProp].implementsOrExtends('BaseEntity'))                 entity[levelProp] = this[levelProp];
}   }   get isGizmoVisible() {     return this._gizmos[0].isVisible;   }
Image.static.toHtml = function(image) {   var $el = $('<img>')
log(`ExponentConstants.deviceYearClass: is unimplemented on web.`);         return null;
var cancel = new Element('input', {'type': 'button', 'class':'btn-primary', 'value': 'Cancel','class':'btn-primary'}).setStyle('margin-right', "5px");     cancel.setStyle('margin-left', "5px");
for (var key inpresences) {     message =presences[key];     messageType = this._getMessageType(message.to);     this._handleResourceMessage(socket, message, messageType);
}     var MyInline = __decorate([
'inspector': ['three-inspector', {value: this.bind('selected')}],           'object': ['io-object', {value: this.bind('selected')}, expanded: true}],           'app-ctrl': ['demo-app-ctrl', {value: this.bind('selected')}]
switch (association.nature) {                 case'manyToMany': {                   const arrayOfIds = obj[association.alias].map(related => {                     return related[ref.primaryKey] || related;
case 'ul':             return document.createElement('ul');             break;         case 'elipse':             return document.createElementNS(svgNamespace, 'elipse');             default:
equal(table.getTitleBody().style.width, table.getBody().offsetWidth + 'px', 'The title style "width" is the initial value');   table.addRow( {
var Prism = {  util: {
import { compose } from 'ramda'; import Avatar from '@material-ui/core/Avatar';
app.use((req, res) => {         res.status(404).render("error", {
it("should be compiled and applied to file multiple times", function(done) {         try
var GLBuilders = require('./gl/gl_builders.js'); var Style = require('./style.js');
applyTheme: YES,
const entity = this.refs.form.getData();     if (entity._added) {
return;             }
} else {         s = this.val.toString()
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-05\/npc_swoonerfly-1305238807.swf",  admin_props : true,
const restoredMapping = restoreMapping(mapping, cmd.storedMapping);      return super.addMappingItems(mapping, restoredMapping);
export default class JassEventId extends JassEnum {}
metrics.trackIncrement);  }; DetailedEventPainter.prototype.softPaint = function() { }; DetailedEventPainter.prototype._prepareForPainting = function() {
case 128:    p = pref.replace(/"/g, '\\"');    v = Services.prefs.getBoolPref(pref).toString().replace(/"/g, '\\"');    result.push(`user_pref("${p}", ${v});`);    break;
app.utils.setSettings();    } else if (targetName === 'author' || targetName === 'description') {     app.utils.loadAuthorAndDescription();    } else if (targetName === 'useTabs') {     app.utils.loadUseTabs();    } else if ($.inArray(targetName, editorOptions)!== -1) {
ret = anchor.getAttribute('href', 4);        } catch(er){}       }
if (typeof max === 'object') {     max = length;   }
};       if (opts)
return 'N';     case 'nt_rain' :
it('should see paused file stream (no buffer)', function(done) {     husk(__filename)      .read({buffer: false})
export function getSong(guild_id) {   return client.lindexAsync(`guild_${guild_id}`, 0)
}, props);   el = Component.prototype.createEl.call(this, type, props);
azk.fail("agent already started");     } else {
SceneGraph.prototype.traverse = function(callback) {
inputEx.registerType("number", inputEx.NumberField, []); })();
constructor() {     super();     this.agentService = ContainerJS.Inject;
percentSpan.textContent = percentText;     ARIAUtils.markAsHidden(valueSpan);     ARIAUtils.markAsHidden(percentSpan);     const valueAccessibleText = this.tree._formatter.formatValueAccessibleText(value, this);
if (stream.match(/[^_\*]+/)) {           returnTokens();
if (exports._best) return exports._best;   for (var i=0, k; (k = exports. preferred[i]); i++){     var transport = exports[k];
require("./diffs/revision-diff.jsx"); var PropCheckBox = require("./components/prop-check-box.jsx");
var orderedModels = order || toAdd;           for (i = 0, length = orderedModels.length; i < length; i++) {             this.models.push(orderedModels[i]);
cdDojoService.find(dojoLeadId, function (response) {               if (!_.isEmpty(response)) {
return engine; }
body,           icon: icon? icon: APP_ICON,           title,
session.source = 'foo this should not change';           return app.__internals__.cache.set(baseMessage.sender.id, session);         })
var parsedHostHeader = parseHostHeader(req.headers.host, 443);             req.originalUrl = req.url;
import App from './Components/App';
invert_point: function(pixel) {         x_scale = this.scales.x;         point = 0;         var abs_diff = this.x_pixels.map(function(elem) { return Math.abs(elem - pixel); });
if (typeof(AjaxUpload)!= "undefined") {       var info = {
if (root.WeakMap) {
if (result.implicitResults &&!executeOpts.resultSet) {         const processImplicitResult = (ix) => {           const resultSet = result.implicitResults[ix];
facebook: "kleinsch",       phone: "1231231234",
mPebble.set_time(date.getTime() - date.getTimezoneOffset() * 60000);
return function(elem) {                 if (comparator(elem, value, 0)!== 0) return elem;
require('./methods/query')(SpaceTime); require('./methods/add')(SpaceTime); require('./methods/same')(SpaceTime); require('./methods/compare')(SpaceTime);
var result = response;                 for (var i = 0; i < result.length; i++) {                     if (result[i].serialNo.match(self.serialNo)) {
}         case'm':
{      msg = confirm(confirm_msg);     }
if (event.type === 'DELETE') {     return {
context.container.$setManager(context.lifecycleManager);                         var result = context.container.$setDirty();
}     }).then(() => {       const out = machineTypes;        set(this,'machineTypes', out);
tt._while.updateContext = function() {   if (this.state.inForHeader) return;   this.state.context.push(types.kw_stat);
var errors = require('./errors'); var Request = require('./request');
treeWorker.postMessage(tmpArr);       pointHelper = new PointHelper(lore, 'TestGeometry','sphere', {         pointScale: 10
.map(toUnmountPromise)
this.prototype.loadPluginMacros = function(plugin) {     for (let macro in plugin.macros) {       if (plugin.macros.hasOwnProperty(macro)) {         if (typeof plugin.macros[macro] === "function") {
while ((result = lines[lnIdx++])) {       if (result.indexOf("
return newMet;     };     PMethod.prototype.toString = function() {return 'fun... end'}
if (__DEV__ && process.env.KEYBASE_LOCAL_DEBUG) {   config.allowStartupFailure = true
removeHexPrefix,         isAddress,
}, function () {                          callback.apply(this, arguments);
if (sources.len) {       sources.ids.forEach(function( id) {
function renderOptVElementToString(optVElement, isArray, context) {  return JSON.stringify(this.value); }
function parseTerm(term, messages) {
that.sn = new SceneNode({       frameID : message.header.frame_id,
for(let i = 0; i < index; ++i) {       browser.tabs.remove(copy[i].id);     }
return '';       }
this._sendMessage('tell');             }         }         this._channel.addEventListener('internal', isLeaderListener);
options = {};     } else if (typeof options!== 'object' && (!(options instanceof HTMLElement)) {
onData: function(d) {     Series.zeroFill(d);      return d;
}         const { question } = this.state;
item.addNode  = function (layerNum,right) {   let lastLayer = layerNum === this.numLevels;
}                  a: 0.5},   IfcSystemFurnitureElement: {r: 1, g: 0.427450980392, b: 0, a: 1.0},   IfcSpace: {r: 0.137255, g: 0.303922, b: 0.570588, a: 0.5},   IfcBuildingElementPart: {r: 1, g: 0.5, b: 0.5, a: 1.0},
class FileBranch extends FileTreeLeafObject {   constructor(file, jsbranch) {     super()     this.file = file
goTo.marker("11"); verify.referencesCountIs(7);
const slice = Array.prototype.slice; export class PropertyAccessor {     constructor(obj, props) {
case 'char': case 'nchar':         return Char(p)
return store.create(model, options);             case "update":
configurable: false,             get: function() {                 return _createdAt;
this.useRefTransfMatrix_loc;   this.useTexture_loc;  };
return exists(this)? cloudinary.image(this.get(field.path), options) : '';   },   src: function(options) {    return src(this, options);   },   fit: function(width, height) {
var renameView = require("../views/renameView"); var contextView = require("../views/contextView");
var put = function (name, value) {                 var symbol = newSymbol(name, value);
return new paddle.TensorType(variable.type.lod_tensor.tensor);             default:
var conf = require('ember-cli/tests/helpers/conf'); var Promise = require('ember-cli/lib/ext/promise');
};                   if(data.user.teams == ["1"]){                     data.user.teams = [];
var soajsUtils = require('soajs').utils; var colName = 'cicd';
}       function find(id) {
if (!(mainId in cache)) {     def = cache[mainId] = core.createResourceDef(pathInfo.config, mainId, isPreload, parts.pluginId? pathInfo.path : undef);     def.url = core.checkToAddJsExt(pathInfo.url);
var async = require('async'); var BitcoinRPC = require('bitcoind-rpc');
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
const rmsie11 = /(trident)\/[\w.]+;.*rv:([\w.]+)/;  const redge = /(edge)[ \/]([\w.]+)/;  const rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/;
const id = m[0];       tok = app.ids.get(id);
this.transparent = true;         this.blending = BLEND_TYPE.ADD;         this.depthTest = true;
IDBTransaction: window.IDBTransaction || window.webkitIDBTransaction,         IDBKeyRange: window.IDBKeyRange || window.webkitIDBKeyRange     }
try {     var { stdout, stderr } = await execPromise('git', ['pull'], { cwd: localDir });     stderr = undefined;
emptyMessage: React.PropTypes.string,   messages: React.PropTypes.arrayOf(React.PropTypes.string),   label: React.PropTypes.string,
if (sps_max_sub_layers_minus1 > 0) {    for (let i = sps_max_sub_layers_minus1; i < 8; i++) {
case ACTION_TYPES.FETCH_RECORDS_SUCCESS:             recordType = action.payload.recordType;
var newNode = kNode;     if(typeof newNode === 'undefined' || newNode === null){      newNode = new knalledge.KNode();
assert.throws(function() { Buffer.concat(null, null); }, TypeError); assert.throws(function() { var buff_err = new Buffer(null); }, TypeError); var buffer_err = new Buffer(-1); var buff_1 = new Buffer('asd');
], function (err) {     if (err) return cb(err);     return cb();    });
module.exports = function() {  do {
console.log("finished_with_success");          assert(warnings.length === 0);
var appjs = require('./build/Release/appjs.node'); varExtend = require('util')._extend;
var child_styles = this._getChildStyles(style_tr, stream);     return Nehan.List.map(child_styles, function(child_style){       return new TableCellGenerator(child_style, this._createStream(child_style));
generalSettings: {             jspmConfigFile         },
function isStatic (ext) {   var extentions = ['.yml', '.yaml', '.json']   return extensions.indexOf(ext) > -1
}; CANNON.GridBroadphase.prototype = new CANNON.Broadphase();
model: 'Touch Pro2'     }, {       regEx: /HTC[_| ]Touch[_| ]Pro/i,       model: 'Touch Pro'
self.addEventListener('push', function(event) {   var notificationOptions = {
operations = ['add','remove'];     }     else if (type ==='map') {       operations = ['add','remove'];     }     else if (type === 'counter') {
return wrap(text, prefix, firstPrefix, '\\\\'); }
this.createOrUpdateKeenSession();         var ctx = window.contextVars;
count: model.count,   get: model.get };
window.React = window.parent.React = React; const reactContainer = document.createElement('div');
if (!position) {       const windowHeight = this.window.innerHeight || this.document.documentElement.clientHeight       const bottom = height + this.element.getBoundingClientRect().bottom
const watcher = yield fork(getGeneralSettingsWatcher);
} else {           this.dataLayer.push({ event: 'vic-authenticated' });         }
switch (false) {           case typeof o!== 'undefined':             enc._pushUndefined();
container.appendChild(ul);       setTimeout(function(){
}; export { AttributeNode }
boundedComponents = [],     disableRenderIndexKey = false;   };
SDK.TracingModel.Process = class {
var type = _.find(schema._tests, { name: 'integer' })? 'integer' : schema._type;         var extension = {             type: type
return true;     } catch (e) {         return false;     }   }
}).bind(this));       }
propTypes: {       models: React.PropTypes.instanceOf(Backbone.Collection),
return parseFloat(win.getComputedStyle(animTarget).opacity); }
start: function (options, callback) {         options = options || {};
comment = parse_XLNullableWideString(data);  if(0 ) {
originalParamContext = pms.parameterContext;
window.a = { 'b': { 'c': new Klass } };     result = simplify(find.byKind(Klass));     expected = ['window.a.b.c -> (object)'];     deepEqual(result, expected, 'Klass instance');
} else {     api.sendMessage("hms.space fucked up. Blame @jordon wing.", message.threadID);
this.serializeForm()               target.classList.add('loading')
.progress(function(buff){             console.log(buff);         })
return err;                             } else {
return true;   }   if (this._frame)
if (require.main === module) {     main().catch(console.error); }
return false;             case Hammer.TOUCH_END:
setTimeout(cycle, 500);
var tr = function(x) {              var xs = numeric.div(x,that._DataAspectRatio), n=xs.length;             var p = that._transform[0]([xs[0],xs[1],xs[2],0]);             return [p[0],p[1],p[2]];
withMeta,     networkStatus,
render() {     const { loggedIn, loggedInUser } = this.props;     return (
var bads = [];  for (var word in words) {
const EventListing = ({ website, name, start, end, key }) => {   return (
}                             } else if(flag === 'ink-fv-confirm'){                                                        }
this._rampLowPercentage = 0.02;     this.output = p5sound.audiocontext.createGain();     this.control = new TimelineSignal();
if (typeof Npm!== 'undefined') {
'use strict'
.replace('$date', date);             client.hgetall(key, function(err, hash) {
}); var issue = FOAM( {
else if (this.enum && this.editable.value) {       if (!this.dom.select) {
var redrawCharts = function () {         d3Selection.selectAll('.grouped-bar').remove();
addItemAt(item, index = this.items.length) {     var items = this.items;     index = Math.min(items.length, Math.max(0, index));     items.splice(index, 0, asItem(item));
adeModule.directive('adeEmail', ['ADE','$compile','$rootScope', '$filter', function(ADE,$compile,$rootScope,$filter) {
'Viewed Page': 'Viewed Product Detail',       'Viewed Product Detail': 'Test Event',     };     _eventManager.addCallback(['on', 'event', (event) => {
parseInlineTableNext () {       if (this.char ==='' || this.char === '\t') {         return null       } else if (this.char === Parser.END || this.char === '#' || this.char === '\n' || this.char === '\r') {
function playSong(_t, player) {   player.getMediaControl(player.mediaControl).playSongAtPosition(player.data('position')); }
.ticks(this.ticks, this.tickLabel);     this.colors = scaleCategory1;     this.keyFunction = ((d) => d.x);
update_children: function(old_list, new_list) {             this.do_diff(old_list,
scope.$watch('component.value', function (newValue, oldValue) {               if (scope.data[overrideId] === newValue) {
throw e;     }
document.addEventListener('DOMContentLoaded', () => {   Promise
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_mirror_with_scribbles_piece1-1348251336.swf",  admin_props : false,
else       return 0;   },
const hexToAccount = (prefix, account) => prefix + '0x' + account.substring(2).toUpperCase() const uuidToHex = (uuid) => '0x' + uuid.replace(/-/g, '') const conditionToHex = (condition) => '0x' + Buffer.from(condition, 'base64').toString('hex')
await display.append_javascript( execute, context.output_area, context ).then(                             ( r ) => logger.debug( "Output appended.", r )                         );
} } export defaultPickingBehavior;
result = true;  for (alpha = 0x0430; alpha <= 0x044F; alpha++) {
if (regex.match(paramRegExp)) {           regex = regex.replace(paramRegExp, "([^/]*)$1");           params.push(param);
case 'graphql':       graphql.path = graphql.path || '/graphql';
"Hamster.NOTE_E": 8,                 "Hamster.NOTE_F": 9,                 "Hamster.NOTE_F_SHARP": 10,
var alasql = require('..');  }
});         dojo.forEach(groupNames, function(groupName) {             this.addTemplates(templates, panel, groupName, i);
export default function computeNormal(vertices) {   var v, vl, f, fl, face, vertices;
e = 'ecma4'           break       case 'ecma6':           e = 'ecma6'           break       case 'ecma7':           e = 'ecma7'
Object.keys(typesObj).forEach(v => {     targetObj[typesObj[v]] = function (config) {
}                     return queryString;
if (!Object.assign) {     assign = function assign(target, source) {       var n$ = Object.getOwnPropertyNames(source);
value = value.replace(/([a-zA-Z0-9\-/]+)(?=\s*:)/g, '"$&"');
default:      return mxn.Mapstraction.ROAD;    }
}   if (isNumber(line)) {    ctx.strokeStyle= data.datasets[i].mathLineStrokeColor? data.datasets[i].mathLineStrokeColor : config.defaultStrokeColor;
});         var $element = that.dom.find('<span><div class="inner"></div></span>');
curren:"Währungssymbol",  brvbar:"Unterbrochener Balken\nUnterbrochener vertikaler Balken",
for (j = 0; j < 4; j++) {                                 child = tile.children[j];                                 if (child) {
alignment.scLengthOnRef += c.len;
webSocket.onopen = e => {       setWebsocket(webSocket);       console.log(e.data);
var name = new ContactName();     var j = 0, field; while(field = nameFields[j++]) {         if (moz[field[0]]) {
try {evaLUAted = eval(args)}             catch(err) {evaLUAted = err.message; console.error(err.stack)}             let overall;
cwc.soy.SelectScreen.style({ 'prefix': this.prefix }));     goog.style.installStyles(         cwc.soy.SelectScreenNormal.style({ 'prefix': this.prefix }));     this.styleSheet = true;   }
{ run: function() {       var what = this.what,           stream = new FakeStream(),
import { eventBeforeSend, eventBeforeReceive, eventSend, eventReceive } from '../shared.js'; import ItemDrag from './ItemDrag.js';
asyncTest( "#9532: need a way in Menu to keep ui-state-active class on selected item for Selectmenu", function( assert ) {  assert.expect( 1 );  var element = $( "#menu1" ).menu(),
if (this.showingMenu) {                         $.each(this.menu.$options, function(index, value) {                             if (!$option) {
if(_undo_command_stack.length > 0) {     command = _undo_command_stack.pop();     _undo_commands[command.id].pop();
for (var i=0;i<data.length;i++){      $("<li class='imageItem'><a href='#'><span class='imageTitle'>"+data[i].title+"</span> <span class='imgURI'>"+data[i].uri+"</span></a></li>").appendTo(".az.inner.textImageList >.list");     }
var numWithoutValue = /(?:\s|^)(\.?\d+\.?\d*)(?![^(]*\)|\w|%|\.)/gi;   if (/^[^, ]*,/.test(value)) {     value = value.replace(/(?:,)(?![^(]*\))/g, '');
this.renderList();             } else {
if (_.has(args,'server_host_override')) {     secure: _.merge(opts, {       rejectUnauthorized: false
case UserConstants.FETCH_SUCCESS: {       const { user, unnamedUserMessage } = action       const users = [...state]
var i = 0;   for (i=0; i<whiteNoteCount; i++) {
orsRouteService.addHeightgraph = (geometry) => {             const heightgraph = orsObjectsFactory.createMapAction(-1, undefined, geometry, undefined, undefined);
path = DocObject.getRelativeIdentifier(path);   doc = new Document(path, className, 'document');
}     case 'SET_RATING':
return lastIndex; } Quill.registerModule('undo-manager', UndoManager);
this.setState({ showSubmitExpense:!this.state.showSubmitExpense });   }
const url = config.url;     const encoding = typeof config.encoding!= "undefined"? config.encoding : "utf-8";     proj4.defs([
throw e     }
import LoginForm from './login-form';
import dat from 'dat-gui'
console.log("failed to insert match from scanApi");                 throw new Error("failed to insert match from scanApi");             }
if (updated.label) {                 checkObjectType('label', data.label, null, Label);                 copy.label = data.label;
token : "rparen",         regex : "]",         next:   "start"
if (!_.isString(value) &&!_.isNumber(value)) {                 value = JSON.stringify(value);             }
.map(sourcePath => path.join(projectPath, sourcePath))              .filter(sourcePath => filePath!= sourcePath);             args = args.concat(paths);           }
}           return _results;         case 'Op':
if (parts.length === 2) {     match = parts[1].match(/^<([^>]*)>$/);     if (match) {       directObjectType = match[1];
function update_notebook(changes, gistname, more) {         function add_more_changes(gist) {
initStoreState = dva._store.getState()         } else {
});         } else if (status === 'Stopped') {             callback();         } else if (res.status === 'KILLED_BY_TIMER') {
newvalues = this.dialog.getValue();    this.datatable.updateRow( this.selectedRecord, newvalues );
async.each(addedRecords, function(record, next){     if (this._isMapping) {      var values = {};
var cachedContrailListModel = cachedData['dataObject']['listModel'],                 cachedContrailListModel = cachedData['dataObject']['listModel'];
}         return false       case OBJECT_TYPE_WATERMELON: {         const watermelon = this._cacheFood.get(object.uuid)         if (watermelon) {
handleLoad: function(model)   {
triangle = handle.append('path')      .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle')
}) test('disables slider', async () => {   await page.setStep(1).setMin(0).setMax(100).setValue(50).wait
} catch(e) {    this.AddError(e.Message, e.useEndLineNumber);   } finally {
action = args[0];         }         if (typeof args[1] == 'object') {             date = args[1];
}; });; gantt.directive('ganttScrollManager', function() {
if (layout instanceof VertexLayout) {         var vertexPosition = layout.get('position');         var result += Math.round(vertexPosition.x) +'' + Math.round(vertexPosition.y);       } else if (layout instanceof PortLayout) {
import {     concat,
let parts;       if ((parts = /^(a|an|n)(\.\.)?([1-9][0-9]*)?$/.exec(formatString))) {         let max = parseInt(parts[3]);
var store = model.localStorage || model.collection.localStorage;   var resp, errorMessage;    try {
define(function (require) {     'use strict';
if (link) link.setAttribute('href', binURL) if (gistID.indexOf('/') > -1) gistId = gistId.split('/')[1] loadFromAPI(gistID)
catch (e) {                     placeAfter = placeholderIndex < thisIndex;                 }                 if (placeAfter) {
Meteor.startup(function() {     }
import { register } from '..'; afterEach(resetPlugins); function registerTestPlugins() {
export const setVisibilityFilter = text => {     return {
const loggerClass = require('zhlogger'); const logger            = new loggerClass({timeStamp: moment(new Date).format('hh:mm:ss:')}); exports.run = (client) => {     logger.info('May is ready to use');
postContextLineBegin=idx;      for (let i=idx+1; i<body.length; i++) {       const ch = body.charAt(i);       if (ch == '\n' || ch == '}' || ch == ';' || i == body.length-1) {
}     }     return '';
var info = {                 recipient: recipient,
function (sandbox, controlsPlugin) {         this.sandbox = sandbox;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj!== Symbol.prototype? "symbol" : typeof obj; };
timezone: moment.tz.names(),         upload_quota: attachments_ui.bytes_to_size(page_params.upload_quota),         total_uploads_size: attachments_ui.bytes_to_size(page_params.total_uploads_size),     });
fObj=fObj+"}";  var regexed = regexImports(fObj);
name: 'coverage',     value: Joi.string().regex(/^[0-9]+%$/),   }));
throw "getValueFromWidget: " + this._renderType + " not supported!";       }
this.importDocument = function(documentEl) {     this.reset();
} else {    initialText = '';   }
log('WidgetName - postCreate');
class P extends React.Component {     constructor() {         super();         this.bind();
angular.module(PKG.name + '.feature.hydrator')  .controller('AdapterDetailLogController', function($scope, AdapterDetail) {     $scope.loadingNext = true;
super.componentWillReceiveProps(props);         this.data = clone(props.data);         this.prepareChildren(props.children);
Mongo.Instance = {};
var zt = require('../lib/zt/zt.js');  }
part = bits.splice(0, 8).join("");         result.push(String.fromCharCode(parseInt(part, 2)));
use: params.use? params.use.replace('gfw_','') : null,             useid: params.useid,
pull(options, stdout) {     options = options || {};     return async(this, function* (notify) {
model.when('size', function (size) {       svg.attr('width', size.width)
return this.success({name: '新增成功！', url: '/admin/channel/index'});       case 2:
result = JSON.parse(result);                 if (result.code == 100000) {                     res.reply({
var i, ii,         index;
};       for (var p in props) {         if (props.hasOwnProperty(p)) {           iframe.setAttribute(p, props[p])         }
console.log(domain_name)   pubsub_client = new Faye.Client(pubsub_server_url+'/pubsubhub', {
var width = 0;         for (var i = 0; i < colspan; ++i) {           var colWidth = px.pixelify(this.colWidth[colIndex + i]);
getUserElementFieldSet();         }
}                 case "string":
"==": "moveTabToNewWindow",             "u": "undoCloseTab",
var ua = navigator.userAgent.toLowerCase(),    match = /(webkit)[ \/]([\w.]+)/.exec(ua) ||     /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||     /(msie) ([\w.]+)/.exec(ua) ||
return update(state, {         items: { $push: [data.evtUuid] },       });
const { img, x, y, width, height, repeat } = this;          if (repeat ==='repeat-x') {
for (let i = 0; i < jobs / batch; i++) {    for (let job of yield queue.take(batch)) {}   }
extent: [-13884991, 2870341, -7455066, 6338219],   source: new olSourceImageWMS({     url: 'http:
function assert(b, err) { if(!b) { throw err; } }
FileParser,   cleanSlug,
}   }   onIrcPing(ircUser, msg) {     this.ircd.write(ircUser.socket, 'irslackd', 'PONG', []);   }   onIrcLine(ircUser, line) {
errors = require('../errors'),     i18n = require('../i18n'),
var verifyPropTypes = require('verifyPropTypes');
ol_color.fromNamed = function(color) {   var el = document.createElement('div');
ignore HTTPSErrors: true,       headless:!config.debugWindow     },
'<oppia-text-input-html></oppia-text-input-html>'));     var callBack = function() {};     pps.init(callBack);
layout = translate( match[ 1 ], layoutTranslations );    }    if ( ( match = new RegExp( '(' + layoutVersions.join( '|' ) + ')\\/(\\d+)' ).exec( ua ) ) ) {     layoutversion = parseInt( match[ 2 ], 10 );
this.isLocked = function (name) {         if (!name || typeof name!=='string') {
return create(appId, varName, devValue, liveValue, cb);       case "read":
case "fake":             assert(ep.protocol === "fake", " Unsupported transport protocol");
}; DashboardAssistant.prototype.setup = function() {
statful.timer();         expect(util.addMetricToQueue.calls.count()).to.equal(0);     });
} else {                      if (typeof selector == 'object') {
promise.then(function(result) {       expect(result.data).toBeArrayOfSize(1);       expect(result.data).toBeArrayOfSize(2);       expect(result.data).toBeArrayOfSize(3);     })
var originalPosition;   var maxRange = token.replace(/[+~]/g,'$1 ').length;   var position = {
import { Profile } from '../../components/profile'; import { DashboardContainer } from './style'; import { getEverything } from './queries';
import FormControl from '@material-ui/core/FormControl'; import { withStyles, MuiThemeProvider } from '@material-ui/core/styles'; import TextField from '@material-ui/core/TextField';
switch (action.type) {     case SET_DEBUG_FLAGS: {       const obj = Object.assign({}, state, action)       delete obj.type
const policy = require('../protocol/policy'); const util = require('../utils/util');
return false;                    case this.OPERATORS.dateOperatorInTheLast:
return someValue!== undefined && someValue!== null && someValue!== 'undefined' &&       (typeof (someValue) ==='string'? someValue.trim().length > 0 : true);   },
return req; } Client.prototype.requestStream = function(serviceName, data, opts) {
log().info('Updated allTenants');         }         process.exit(0);     });
if (rule.isApplicableAt(corpus, site)) {             that.rules[rule.key()] = rule;
})) functionFunc(a,b,c) {     this.name = 'yeyan1996'
for (jj = 0; jj < data.split.length; jj++) {       var split = data.split[jj];
$('a#file-upload').click(switchToImport);         $(document).on('query.build.execute', switchToEditor);
default:     throw Error("unhandled ControlCommand: " + evalCommand);     break;    }
canvasParent, renderer, canvas, scene, camera,             render, animate, add3DObject, invalidate,
qualityChange(event) {     this.trigger(Clappr.Events.PLAYBACK_HIGHDEFINITIONUPDATE)
$('#package').val($.base64.encode(params));                 evt.preventDefault();                 $('#false-aws-login-form').submit();
msie: 1,         version: ua.match(/msie (.+);/i)[1]       };
map: React.PropTypes.object,         fluid: React.PropTypes.bool
window.onload = function() {                     this.render();
process.on('unhandledRejection', (error, promise) => {     console.error('Unhandled promise rejection', {error, promise}); });
if (templateElementNameFromCustomElementName.hasOwnProperty(tag)) {                     element.appendChild(importNode(elements[templateElementNameFromCustomElementName[tag]].content, true));                 }
case actionTypes.other.DECLARE_COUNTER:                     action = new Action.Other.DeclareCounter(data.name);                     break;                 case actionTypes.other.DECLARE_VARIABLE:
if( ( match = block.match( /^\$(\w+)\s*=\s*(.+)/ ) ) ) {           scope.setVar( match[1], this.parseExpressions( new Scanner( match[2] ), scope ) );
else {                          log('Node: %s was created.', path + '/ids/' + consumerId);                          cb();
return oResourceBundle.getText("invoiceStatusA");     case "B":
import { Heading, Subheading } from '../shared/Typography';
isMove = true;             x = event.clientX;             y = event.clientY;             xel = x - currentPhoto.offsetLeft;
log.error('Are you sure this is a Sails app?');   _terminateProcess(1);  },
search = "";
}          match = '/?[^('+notmatch+')]+>/gi';     alert(match);
case 'h':      hour = time.getHours() % 12;      if (hour!== 0 && hour < 10) {       hour = '0'+hour;
if (typeof plugin.schema === 'object') {         console.log('Normalizing event using plugin schema', JSON.stringify(plugin.schema));
},     clearValue: function(value) {         this.el.find('textarea').get(0).value = value;
const parentNode = node.parentNode;     diffArray(oldItems, newItems, () => 0).accept({
params.tags_autocomplete = $scope.list_data.tags;                 $scope.event_track.tags = $scope.list_data.tags;             }
for(i = 0; i < _endKeyFrames.length; i++) {     ws = _endKeyFrames[i];     ws.frame = _maxKeyFrame - ws.offset;
oldLambdaNames.forEach((name) => {
} else {       names = combinations(name), levels = [];       for (var i = 0, l = names.l; i < l; i++) {
} else {             this.node.startUpdateFingers();         }
}  this.renderBufferImmediate = function ( object ) {   state.initAttributes();
pass = false;     }     this.assert(pass, "Expected all elements to match.");
var path = require('path'),     mkdirp = require('mkdirp'),
}); var map = new ol.Map({   center: new ol.Coordinate(0, 0),
is_editable = true;     } else if (is_admin) {
else if(noteCount > 3){     throw new Error("This bar is full already!");    }
import * as Logo from 'components/logos' import React from'react' import { borders, colors } from 'theme'
setAutocompleteQuery: function(value) {       return "SET autocommit = " + (value? 1 : 0) + ";"     },
v = old[k];           if (!(k in val)) {             this.realRemove(k);
case "weights":             clips = this._parseAnimationSampler(samplers[channelDef.sampler], false);             layers = [];
for (var i = 0; i < gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS); i++) {       var name = gl.getActiveUniform(program, i).name;       program.uniforms[name] = gl.getUniformLocation(program, name);     }
var server = app.listen(app.get('port'), function () {   debug('App is running at port', app.get('port'));
var EMA = require('./EMA.js');
consumerTag = ok.consumerTag;   });
const listingHash = yield call(getListingHash, listingID)         args = [listingHash, convertedNumTokens, listingID, data]         yield call(sendTransactionSaga, registry, methodName, args)
import ToastsActions from './ToastsActions'; import app from '../lib/app';
var _getErr = function (s7err) {         if (Array.isArray(s7err)) return new Error('Errors:'+ s7err.join('; '));
var Rotate = function (tileXY, direction, originTileXY, out) {     if (out === undefined) {
, remove: function (e, direction) {       if (this.$input.is(document.activeElement) || this._disabled || this._readonly) return
this.ptr-=3;  var t=this.dstk.get("$error");  if (t instanceof Function) t.call(this); else this.stk[this.ptr++]=t;  this.stk[this.ptr++]="command";
this._file = file;             }             this._children = correctInherit(SpecificChildren, children);
if (!condition) {         throw new qx.dev.unit.AssertionError(comment, failMsg);
const conn = await db_open();   await activate_feed(conn, feed_id);   conn.close();
} } function expandInlineDirectives(directives, lines) {
import { h } from 'preact'; import Page from '../Page.jsx';
composite: composite,  xml: xml,
throw new SyntaxError('"' + str + '" contains no units');     }
})     if (syncOaks instanceof Error) {       throw syncOaks;
var server; function start() {  sessionMgr.init();
log.warn('Support for AMD-bundles is not yet implemented', arguments[i]);     });
compileMode: "async",         module: {
} else {             document.write( echo.msg );         }
log(FAILURE + EMPTY + overallFail + " Failures");                 break;             default:                 status = "pass";
self.topIndex = topIndex;         }
event.stopPropagation();                     start();                 };
throw new Error("For not all values in the array " + data.val + " is the property " + forChild.val + " of type " + types.join(' or ')); };
return false;         var touches = event.touches && event.touches.length? event.touches : [event];
const avatar = [].concat(avatars)[0];       if (avatar) {         this.setState({
);     _templateObject_a9de04f0e5f811e88dd52590c4efd568 = function() {       return data;
Dom.addClass(nLi,"embassyAction");      var bbtn = doc.createElement("button");      bbtn.setAttribute("type", "button");
return console.error('Topic cannot be undefined');   }
$reel.trigger('fractionChange', Number(ix));       assert.equal( $reel.data('value'), it, 'Passed '+ix);     });     QUnit.start();   });
﻿function isNull(value) {     return typeof value === "undefined" || value == null; }
noDeleteVar: function (str, o) {         var rx = /delete ([\w$_]+)(?!.*delete[\w$_]+)/;
if (msgType =='shortvideo') {             atts.push({
dataRows.each(function (row) {                         row.$$('td').get(1).getText()
if (_res && _res.clearCookie) {     opt = path? { path: path } : undefined;     _res.clearCookie(name, opt);
}     $(function () {         var header = $("meta[name='_csrf_header']").attr("content");
}     return valid; };
"FS type":"",     "Graphics":"",
if (allowMultiple) {                 tempArray = cron[4].split(',');                 for (var i = 0; i < tempArray.length; i++) { tempArray[i] = +tempArray[i]; }
import { Feature } from '@common-stack/server-core'; export default new Feature(authModule);
}   return args.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');   };
this._addSlot(propValue);           break;         }         default: {           console.warn(`${propKey} is unknown`);
_extend = oj.$.extend   function _isCapitalLetter(c){return!!(c.match(/[A-Z]/));}   function _has(obj, key){return ObjP.hasOwnProperty.call(obj, key)}
actual = Buffer.concat([actual, chunk])       callback()
if (overlap.y === 'inclusive') {       t.vertical = t.vertical;     }
else {       const err2 = {error: 'Grant: missing or misconfigured provider'}       callback(qs.stringify(err2))     }
if (textStatus ==='success') {                 self.remoteId = data;
var scanline = slice.call(bytes, begin, end);       literals += '\x00' +CharCode.apply(null, scanline);
if (id === null) {     this.set('_id', value);     return value;    } else if (String.startsWith(id, prefix) &&!String.startsWith(value, prefix)) {     this.set('_id', value);     return value;    } else {
var needsShy = document && (function() {   var testEl = document.createElement('div');
mChainCount[ i ] = modelChainCount;             for( j = 0; j < modelChainCount; ++j ){                 cModelIndex[ j + chainOffset ] = i;
if (!isMobile) {         const html = $document.find('html').eq(0);
try{         const _settings = JSON.parse(data);         if (_settings.rpcSettings.rpcHost === '' ||
return 'W';     case 'fog' :
anychart.VisualBaseWithBounds.prototype['height'] = anychart.VisualBaseWithBounds.prototype.height;
let payload = tryParseJSON(payloadString)     if (payload) return payload
armBuild();                             return Q();                         case 'x86':
const componentName = ReactComponent.displayName || ReactComponent.name ||     (/function ([^(]+)?\(/.exec(ReactComponent.toString()) || [])[1] || 'Component';
return;     }     for (let i = 0; i < this._lookahead.length; i++) {       this.queue.push(this._lookahead[i]);
scaleVertically(size) {         return react_native_1.PixelRatio.roundToNearestPixel(size * verticalFactor);     },     scaleWithAverageRatio(size) {
export default [   [     ['pagi', 'pagi', 'tengah hari', 'petang','malam'], u,     ['tengah malam', 'pagi', 'tengah hari', 'petang','malam']
'available for your system. Please install a supported C++ compiler and reinstall the module \'uws\'.');     }
if (sDisplayShape === Avatar.DEFAULT_CIRCLE_PLACEHOLDER) {    sDefaultIconPath = Avatar.DEFAULT_CIRCLE_PLACEHOLDER;
var isBrowser = typeof window == 'object'; var fullTest = isBrowser ||!process.env.AJV_FAST_TEST;
if (this.token === this.tok.T_LIST) {       var result = this.node("list");       var assign = null;       var isInner = this.innerList;
$(document).unbind('click', clickHandler);                 }
export classTransient extends Registration {   constructor(key){     super();     this.key = key;
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); }
this.checkboxRender = (value, label) => {             const { columnHeight, lineHeight, columnBorderWidth, colAlign, col: { columnAttr = '', editor }, } = this.props;             let justifyContent = '';
offset = step * offset;      for (i = 0; i < len; i += 1) {       L[i] = (step * i + offset).toFixed(dp);
{                     if(isNull(data.error) && data.acknowledged === true)                     {
case 20:                         _context.next = 23;                         return prompt([{
createPackage() {                     this.dialogList.state.dialogFormVisible = true;
document.forms[0].partialCountValue.value = "";
)       default:
data.toTime = toTime;         $("#chart").html('<div align="center">Loading...</div>');   $("#info").html('');
return createStoreWithMiddleware(reducer, initialState) }
if (mutation.removedNodes) {         for (j = 0; j < mutation.removedNodes.length; j++) {           child = mutation.removedNodes[j];           if (child.nodeType === Node.ELEMENT_NODE) {
}       break;     case 'api':       tag.visibility = parts.shift();
return Index._displayFile(req, res, tempDir, `${name}.log`);   }
var isHTML = text.search(/<[a-z!]/i)!== -1;         if(isHTML) {
return DRAIN_TYPES.find(({ id }) => id === drainTargetType); }
if (msieVersion == 10) {                 display: '-ms-' + flex + 'box';                 if (props.alignItems) {
case 4:            if (this.xhr.status == 200) {             this.replaceContent();           } else {             this.replaceContent();           }
import Routing, { Router, Switch } from "./../utilities/routing";
const REGEXP_PATH = /\ const REGEXP_ARG = /'/g; const REGEXP_ESCAPE = /\$\(.*?\)|\'/g;
if (typeof t =='string' && /,/.test(t)) {     tp = t.split(",");     t = tp[0];
this.dom.firstChild.style.textShadow = "-1px -1px 0 " + newVal;             }         });
throw new Error('Unimplemented API: dojo.data.api.Read.hasAttribute');  },
},         get weight() {
import { RouterComponent } from "./router"; const { SchemaForm } = schemaFormReact; let store = createStore(combineReducers({
yy.Search.prototype.toJavaScript = function(context) {
throw new Error('ERROR: Failed to load translation table');         }
if (clear === true) canvas.width = canvas.width;    ctx.beginPath();
stopDisposableDaemons(daemons, function () {           process.kill(process.pid, 'SIGTERM')           process.kill(process.pid, 'SIGTERM')                    })
}, function(error, response, body) {      expect(body).to.equal({success: true});      var data = cantrip.get("/foo/collection");
}       if (self._state.requests[0].command.indexOf('RENAME') > -1) {
var max = 0;             values = stats.graphsLODs;             for (i = 0; i < samples; i++) {                 max = values[i][0] > max? values[i][0] : max;
var scripts = document.getElementsByTagName("script");     var rePkg = /dojo\.js([?.]|$)/i;     for(var i = 0; i < scripts.length; i++){
const DatabaseManager = require('@adonisjs/lucid/src/Database/Manager') const { ioc } = require('@adonisjs/fold')
logPushApi = '';
}           } catch(err) {             logger.log("Offline Persistence Toolkit simpleRestJsonShredding: Error during shredding: " + err);           }
});   } cv.render = function() {
$ERROR('#s'); } var \u0074 = 1; if (t!== 1) {   $ERROR('#t');
XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;   module.exports = XMLHttpRequest;
(userAgent.indexOf('Firefox/')!= -1 && userAgent.indexOf('Android')!= -1);        } catch(e) {}     return false;
require('source-map-support').install();   } catch (error) {     console.error(error);   }
{         if ( def!== null && typeof def!== 'undefined' )         {
'use strict'; var node_path = require('path');
console.error(VERSION);                     util.exit(1);                     break;                 case "-o":
var tab = $.extend({}, tab, tab[r]);     if (id == null || typeof id == 'undefined') {      this.tabs.push(tab);
throw new Error('TECHNICAL_EXCEPTION_HTML_STRUCTURE_MAY_HAVE_CHANGED')             default:
elm.append(propsDiv);     this.dataView = new Slick.Data.DataView({ inlineFilters: true });     this.dataView.beginUpdate();     this.dataView.setFilter(this.filter);     this.dataView.endUpdate();
vTree.addChildToTreeQueue(this);   } }
require('../../../components/scientificName/scientificName.directive.js'); angular.module('portal').controller('speciesKey2Ctrl',speciesKey2Ctrl);
function TelegrafFlow (opts) {   var optsf = Object.assign({     cancelCommands: ['/cancel'],
+', equationY_: "'+this.equationY_+'"'       +'}'; };
if (getOwningObject()) {         addClass(primary_selector, "collapse");     } else {
{     $('#stdout').text(data.history);
getComponentDefinition(uri, [ graphUri ]).then((res) => {         componentDefinition = res.object
this.dirty = false;                 }
helper.nock().get("/v1/users/FakeUserId/applications").reply(200, items);       Application.list(function(err, list){
import React from'react'; import { ThemeProvider } from '@material-ui/styles';
if (!$iugo['store']['bind_to_dom'].namespacesTagIndex[namespace]) {      $iugo['store']['bind_to_dom'].namespacesTagIndex[namespace] = [];     }
var hiddenUIContext = create_context (hiddenUICanvas) ;   for(var kButton = 0 ; kButton < Nbutton ; kButton++) {
} else {           substr = `<span class="token string">"<a class="token md-link" href="./#articles/${p.history[2].replace('.html', '')}">${p.metadata.title}</a>"</span>`         }
if (!res._header) {           res.writeHead(statusCode);
while ((foo -= bar) > 0) {
});       return map;
quote += 'DOI: <a href="http:                 } else if (url) {                     quote += 'URL: <a href="' + url + '">' + url + '</a>. ';
function checkURL(tabId, info, tab) {  var url = new RegExp( '^https?:\/\/play\.google\.com\/music\/listen' );  if ( url.test( tab.url ) ) {
list: function(sids, callback) {             var sid = sid || [];
"you'd like to deploy your app here.\n");     return 1;   }
'use strict';
var t    = require("../../types"); exports.Function = function (node) {   if (!node.rest) return;
}   onDragEnter() {     const { onDragEnterCallback } = this.props;
value = JSON.stringify(value);     } catch (e) {         return;     }
'use strict';
throw err;         }     });
var cordova = require('cordova'),     channel = require('cordova/channel');
event = new Event('close', {code: code || 1000, reason: reason || ''});     event.initEvent('close', false, false);
return ["image"]; } var Modul_itunes_artwork = function () {
if(uniqueCount == "none" || uniqueCount == "" || uniqueCount == null) {
function() {    assert.deepEqual( container.children( ".ui-screen-hidden" ).length, 3, "Filtering controlgroup inputs and links by value" );    input.val( "" ).trigger( "change" );
for (i=0;i<optionGroup.length;i++) {      optionGroup[i].applyStyle("display","inline-block");
}     return vnode
import DeviceCard from './card'; import styles from './styles.css';
}    expr.ir(state, irs);
import { GET_LAUNCH } from "./cart-item" export { GET_LAUNCH }
enumerable: false,             get: function () {               return fieldFormats.defaultByType[field.type];             }
var Browsers = require("./browsers").Browsers;
_data = [];     _dataString = s.replace(/~|~/g,"\n");     var sd = _dataString.split("\n");
}           return _results1;         case 'Code':
while (~k) {       m = str.slice(k).match(END_TAGS)       if (m) {         k += m.index + m[0].length
class FileDragSource extends DragSource {   constructor() {     super();     this.item = {
this._showMenu();     }   }
(function (global) {
_getLabelOptions: function(parsedParams) {   parsedParams = parsedParams[0];   var includeLabel =!parsedParams.label || ( parsedParams.label && parsedParams.label[0] == "yes" );
exports.Vinyl = Vinyl;
];     const fontBBox = aFontInfo.bbox;     for (let i = 0; i < fontBBox.length; i++)       topDictIndex = topDictIndex.concat(this.encodeNumber(fontBBox[i]));
params = params || {};   var endpoint = applicationName + '/form/'+formName+'/record/add/';
var webpack = require('webpack'); var webpack = require("webpack")
var Transformer = require("./transformer"); var File        = require("./file");
constructor() {     super()
},                 protected: {                     _loadGL() {                         Public(this).loadGL()                         Public(this).emit(Events.BEHAVIOR_GL_LOAD, Public(this))
import Button from'react-native-button'; import {analytics, airloy, styles, colors, api, L} from '../../app'; import util from '../../libs/Util';
Blockchain.prototype.putBlockOnHold = function(block) {     if (!(block['hash'] in this.buffer)) {         this.buffer[block['hash']] = {
_model_name: "TooltipModel",             _model_module: "bqplot",             _model_module: "bqplot",
'use strict'; constCI = require('./ci.js');
function hideFn(e){             var target = baidu.event.getTarget(e);             hideHandle = setTimeout(function(){
if(typeof sourceMapStringOrOffset =='string') {       [offset, length, id,..._rest] = sourceMapStringOrOffset.split(":");
},    es:{      months: [
continueProcessing = false;               break;             case 'x':             case 'compress':
function computedDecorator(fn, params) {       let dec = function(prototype, key, desc) {         assert(           `ES6 property getters/setters only need to beDecorated once, '${key}' wasDecorated on both the getter and the setter`,
var type = Object.prototype.toString.call(subject).slice(8, -1)     switch (type) {
window.onload = function() {     var URL;
export default class Outlet extends Component {   constructor() {     super()   }   componentDidMount() {
head.insertBefore(el, head.firstChild); }
handleClickToggle: function() {     TodoActions.toggleItem(this.model.id);
if (arrowStyle) {                 return Util.isArray(arrowStyle)? arrowStyle : this.arrowStyles[arrowStyle];             }
off =!$("dsos-names").checked ||!$("dsos-show").checked;             for (i=0; i< depends["dsos-names"].length; i++) { fldEnable(depends["dsos-names"][i], off); }       break;
window.addEventListener('click', this, true);     window.addEventListener('keydown', this, false);     window.addEventListener('keyup', this, false);   },
}          var self = this, o = this.options;          if(BI.isNotNull(configs.group_value)){
} function getWhitelistLogData(meta) {     if (!meta) {
var b = makeReactive(1);     var sum = makeReactive(function() {
that.origin = new ROSLIB.Pose();     } else {
}   return false; }
}                         point = new OpenLayers.Geometry.Point(msg.data[lonMapping], msg.data[latMapping]);                         point.transform(coreMap.Map.SOURCE_PROJECTION, coreMap.Map.destination_PROJECTION);
var tmp = /\%output\.(\S+)/.exec(cmd);   if (tmp && tmp.length) {     extensions[2] = tmp[1];     cmd = cmd.replace(/\%output\.\S+/, '%output');
if (m3u8.version >= 4)         for (attrname in extParserV4) { if (extParserV4.hasOwnProperty(attrname)) { extParser[attrname] = extParser[attrname]; }
$timeout(function () {                             if (e.date) {                                 $scope.$apply(function () {
function invertDatumTypes() {       for (var key in TDatumType) {         datumEnum[TDatumType[key]] = key;
searchUsernames: { title: 'Search all usernames, used for admin/mod UI components to lookup users' },   adminPage: { title: 'Page through allforum users, used for admin/mod' },   removeInvite: { title: 'Remove an Invitation' } };
kbnAngular(chrome, {});     });     it('should return breadcrumbs based on the url', () => {
for(var i = 0; i < L; i += 1) {       var
var route = function route(req, res, next) {   resHtml = ""   if(typeof req.query.token!== 'undefined' && req.query.token!== null) {
this.ESCAPED_CHARS_REGEXP = new RegExp('[\\.+*?^$[\](){}/'#]','g');
action= {'newstate':'stay','prev_state':prev_state};   }   else if (msg =="disarm") {     action= {'newstate':'disarm','prev_state':prev_state};
}else{         reject(`Config for ${id_config} not found in section ${section}`);       }
async.auto(calls, (err, results) => {             console.log(':: bootstrap ::', err, results);
return;   } })(jQuery);
function addAliasCommon(url) {         var input = $('#add-alias-input');         url = $.trim(input.val());         if (url!== '') {
case actionTypes.other.SET_VARIABLE:                     action = new Action.Other.SetVariable(data.name, data.value);                     break;                 case actionTypes.other.SET_VARIABLE_BY_JSON_ATTRIBUTE:
parseConnection = require('pg-connection-string').parse,     dico = require('./dico'),
if(typeof jszip === 'undefined') jszip = require('./jszip.js');  }
if (err) {           callback(err);         }
if(Settings.supportAdjust){      return;    var _thList = _this.getOriginalThDOM(_table),     _td;
return this.setMethod(value, (err, value) => {       if (err) throw console.error       this.log('Fake Set Callback Received: ', value)
else {                                 window.location.href ='mipilaw66baidu_informLawyer_failed'                                     + '?lawyerId=' + lawyerId + '&sessionId=' + sessionId
return s    .replace(/([-()\[\]{}+?*.$^|,:#<!\\])/g, '\\$1')
menu.open = false;   } });
closest = null;     parentMesh.updateMatrixWorld();     this.allComponents.map( component => {
case "a": damage = {elem: "fir", stmt: 14.8, total: true}; break;        case "c": damage = {elem: "phy", stmt: 10.4, total: true};        default: damage = {elem: "psn", stmt: 10.4, total: true};        }
if (conversationMd) {         conversationMd.set({
var failure_T = 'Could not Triangulate'
for (let i = 0; i < platformsDetectors.length; ++i) {             if (platformsDetectors[i].regexp.test(navigator.userAgent)) {
switch (step) {             case'm.login.password': {                 const PasswordLogin = sdk.getComponent('login.PasswordLogin');                 return (
}          try {
Meteor.publish("mapLayers.tags", function() {   this.unblock();
if(scope.model.config.customViewPath) {             view = scope.model.config.customViewPath;         }
if (filter) {     const examplePath = filter.field!== '@'
nextToken = this._currentToken.slice(commentEnd + 3);
addItem: function(startTime) {     startTime = startTime || this.timeline.time();     var item = this.getNextItem();
ol_geom.flatLinearRingIsClockwise =     function(flatCoordinates, offset, end, stride) {
return rc? rc : ignoreReturnValue;     }
} else {                 this.set('eventRemainingContent', '');
default:         uncompressedData = compressedData;     }
import { Component } from'react'
return __awaiter(this, void 0, void 0, function () {         var outputDataSize, interval, api, bars, bars;         return __generator(this, function (_a) {
fileHelper = require('./fileHelpers'),   os = require('os'),
for (i = 0; i < j; i++) {         R = multiply(R, R)
} else if (prop ==='ref') {    } else {
var projectionExtent = projection.getExtent();   var vectorSource = this.getLayer().getSource();   goog.asserts.assertInstanceof(vectorSource, ol.source.Vector);   var transform = this.getTransform(frameState, 0);
};     case types.CONNECT:       return {
}             case'm':
var Model = EG.CoreModel.extend(Ember.Evented, {
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
R.assoc("counter", state.counter + 1, state)   ),   decrement: new Subject().map(_ => state =>     R.assoc("counter", state.counter - 1, state)
const CHAT_WINDOW_SELECTOR = '.chat.messages'; const URL_REGEX = new RegExp(/(http:\/\/|https:\/\/)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&
import {Actions, ActionConst} from'react-native-router-flux' import styles from '../styles/styles';
} else {             app.router.navigate(`task/${first(responses).taskId.id}`, {trigger: true});           }
it("should use direct xml file", function(done) {         try
var item = function*(username) {         var user = yield* models.User.get({ username: username }, db);         if (user)
if (typeof attr[key] === 'function') {       arr = attr[key](values, 'attr', cntx, tag, key);       value = arr.join('');      } else {
if (options.activeClass) {                     item.classList.add(options.activeClass);                 }
return require(path);     } catch (e) {  }
}         var errorPrefix = "Error in " + JS_HANDLE + ".getSupportInfo(): ";         try {
this._line(ctx, from2d, to, this.axisColor);       msg = this.zValueLabel(z) +'';       this.drawAxisLabelZ(ctx, from3d, msg, 5);
const tagsQueryString = aws.s3TagSetToQueryString(tags.TagSet);   return aws.promiseS3Upload({
VariableManager.prototype.destroyVariable = function(variableName) {   if (this.variables[variableName]) {     delete this.variables[variableName];
setRequest: function (requestId) {                 currentRequestId_1 = requestId;                 perRequestPipeName_1 = namePrefix_1 + requestId;
case "t6t":           replace_code = preset_mode_util(mode_str, origin_mode_str);           code = code.replace(/\{t6t\}/g, replace_code);
req = { url: url, method: method };       while ((fn = match(req, routes, i))) {         i = req._route_index + 1;
}     for (key in tile.glueimageryCredits) {         value = tile.glueimageryCredits[key];         value2 = this.visibleCredits.imagery[key];
ext, dir,         path, fs, zlib, url, pipe, CloudFunc, diffPatch, querystring, time,
}                         newSelected = [];                         if(index < min) {
_trigger: Proxy._widgetTrigger({       Selection: function(params) {
active: false,
if (level == 'error') {         throw new Error(winston.config.syslog.levels[level]);     }
'number': /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/,   'operator': /[+\-\*\\\/:=\?&\|<>]/,   'punctuation': /[\{}[\]\(\):]/,   'boolean': /\b(true|false)\b/,
changes.metric4 = action.metric;                     break;                 case 5:                     changes.metric5 = action.metric;
var node = this       while(node == node.parentNode){         if(['svg','symbol', 'image', 'pattern','marker'].indexOf(node.nodeName) > -1) break         m = m.multiply(node.matrixify())
switch (opt) {             case "s":                 params.Server = args.optarg;                 break;                                     case "f":                 params.FilterName = args.optarg;
return closure;   }
var map = new Map();         var observer = map.observeMapChange(function (plus, minus, key, type) {
if(sjs.use_canvas) {         for(var name in sjs.layers) {             var layer = sjs.layers[name];
console.log("   jobscount:", ins.JobsCount.data[0]);     var threatLevel = calculateThreatLevel(ranks);
{           var control = controls[id];           if (control instanceof qx.ui.core.Widget) {             control.replaceState(old, value);
hash = hash.replace(/^#/, ''),                          $window.onhashchange = null;
return instance;     let rules;
if (matches.length) {                 for (i = 0; i < matches.length; i++) {                     deps = runDepsRegExp.exec(match);
archive.fileActStream = pda.watch(archive)   archive.fileActStream.on('data', ([event, data]) => {     if (event === 'changed') {
}, [page]);   const modal = component => {     setOpen(true);
var stream = new air.FileStream();  stream.open(newFile, air.FileMode.UPDATE);
function LinkHeaderFactory($q, $extendReadOnly, $injector) {     return LinkHeader;
class SourceView extends EventChannel {     constructor(args) {         super();         this._options = args;
label: '附近',         navigatorStyle: DEFAULT_NAV_BAR_STYLE,
return `${LTI_LAUNCH_URL}?action=${action}&objectId=${objectId}`;             case LMS.LEAVE_SUITE.id:
case FETCH_ENTRIES:     if (action.error) {
MapStore.emitChange();       break;     default:
} catch (e) {            }
if (fragment instanceof Prismic.Fragments.Number) {                 return fragment.value
import { withServicesKnob } from '@bbc/psammead-storybook-helpers';
return  (       getExistingServiceForWindow(window, 'url-replace')); }
(function() {  'use strict';
if (err) { return callback(err); }                 var stream = Fs.createReadStream(tmpFilePath).pipe(new PNG({ filterType: 4 }))
this.setSelectedElement(vParent);           }         }
}     else if (event.ctrlKey || event.metaKey) { return; }     else if (event.shiftKey) {
function animate(view, props, opts) {   return new Promise(function(resolve) {
var options = map.config();         Util.extend(options, {             'center' : map.getCenter(),             'zoom'   : this._getOverviewZoom(),            'scrollWheelZoom' : false,
maxWidth = Math.max( upWidth, downWidth ),                 maxHeight = Math.max( upHeight, downHeight ),
codeValue = record.data.code;   nameField[0].setValue(nameValue);
compiled_object[className].info.abiDefinition = JSON.parse(contract.interface);   }   return compiled_object; };
if (message.error) {       return event.sender.send('error');
case's': f.interval = n * 1000; break;         case'm': f.interval = n * 1000 * 60; break;         case 'h': f.interval = n * 1000 * 60 * 60; break;         default:  f.interval = 2000;      }
H.waitUntil('document.body', function () {      window.location.pathname = p;     });
this.setNumberOfOutputChannels(0, 2);         this.pan = new AudioletParameter(this, 1, pan);     },
_this._hasScrolled = false;         }).bind('touchmove.mapify', function () {             _this._hasScrolled = true;
return inputName; }
import { Route, IndexRedirect, Link } from'react-router'; import { layoutConnector } from '../../Common/Layout'; import globals from '../../../Globals';
var oauthModule = require('./oauth');
if (undoStack[undoPosition - 1] && (undoStack[undoPosition - 1].name!= street.name)) {
if (this.isPaginated()) {             return get(data, 'data', data);         }
this.events = []; } util.inherits(Response, message.Message);
})(); (function(){
var node_parent_id = classNames[key].substring(9);                 var parent_id = parseInt($("#"+node_parent_id).attr("class").match(/item-id-(\d+)/)[1];                 tobj[1] = parent_id;             }
console.log("sending", msg, "to", current_cid);     var req = {"token": token, "args": {"cid": current_cid, "message": msg}};     d3.json("/api/v1/send-basic").post(JSON.stringify(req),                                        function(err, r) {
});     } else if (view == "profile") {       profile();     } else if (view == "follow") {
&& t <= y1 && y2 <= b);   case 'intersect':
var instance       mix = typeof mix === T_STRING? riot.mixin(mix) : mix
const SVCConfigForm = reduxForm({     form: 'SVCConfig',
this.select.modifier = 'RecordSET';   var selectfn = this.select.compile(databaseid);   if(db.engineid && alasql.engines[db.engineid].intoTable) {
var _ActiveCallsPanel = _interopRequireDefault(require("../../components/ActiveCallsPanel"));
if(!this.props.disabled) {       if (e.targetTouches.length == 1) {         const touch = e.targetTouches[0];         this._changeComponent(touch.pageX);
constructor: function(model, options) {       var defaults = _.result(this, 'defaults');
{         this.getContentElement().setValue(
var regex = /((\w|\s)+)\(([^)]+)/mg       var result = regex.exec(transform)       while (result) {         var split = result[3].split(/[,\s]+/)
marginBottom: 20,     fontSize: 20   },
} else {     root.addEventListener('polymer-ready', done);   }
}         tok = this.nextToken();         if(tok && tok.type === lexer.TOKEN_BLOCK_END) {
that.emit('frame_navigation_state', my.frames[from], state);       });
var showValue = function() {   console.info('Temperature: %s C', modelTemperature.data[modelTemperature.data.length-1].t);
}));     ctx.scope.set("getInfo", yield ctx.KRLClosure(ctx, function* (ctx) {       return {
var channelNames = [];             for (i = 0; source!= null && i < source.channels.length; i++){                 channelNames[channelNames.length] = {name: source.name + source.channels[i].name,
image: formData.hostImage,             command: formData.command.length? formData.command.split(' ') : [],             memory: parseInt(formData.memory),
this.model.data_coParser.addHandler( function( sheet ){
var chunk;         while ((chunk = this.read())) {           if (file.writable) file.write(chunk);
newState.devices = [action.data].concat(newState.devices);         break;     case Constants.DEVICE_IMPORT_FAIL:
var config = editor.config;     var rendererTypes = {
edit: {                 ngClick: "editCredential(credential.id)",                 icon: 'fa-edit',
import React from'react' import styled from'styled-components'
for ( i=96; i<=Arrow; i++ ) {   keyCodes[i] = ''+(i-95);
msg_div.innerHTML = message;    break;   }   default: {    msg_div.setAttribute("class", "message-text");
import _ from 'lodash'; import EntityUtils from './EntityUtils';
oRenderLog.debug("Rerender Control '" + oControl.getId() + "'" + (uiArea? "" : " (using a temp. RenderManager)"));    rm.render(oControl, oParentDomRef);
function gammavariate(alpha, beta) {     var SG_MAGICCONST = 1.0 + Math.log(4.5);     ainv = Math.sqrt(2.0 * alpha - 1.0);
error(`Unable to read the test directory: ${chalk.underline(relative(dir))}`);     return exit();   }
return scope.$watch(attrs.odataPager, function(value) {       var data = value;       if (data === null || data === void 0) return;
},   rowGetter: function (rowIndex) {     return rows[rowIndex];   },
var result = this.properties[property].match(value.sequence.head, true);
if (gaGlobalOptions.disableTooltip) {                 return;
broadcast.on('end', function () {     t.comment('Ending the broadcast stream');
if(tab.name === 'configuration') {           return $scope.hasConfigurationIssues($scope.detailPaneConfig);
});      } else if ((m = stream.match(/^\{([a-z_\-][\w\-]*)\}/))) {
export default class ErrorPage extends React.Component {   constructor() {     super()     this.state = ErrorStore.getState()
break;     case Array.isArray(type):       if (isMethod) {
trigger(val, cb);     }   }
for (let i = 0; i < items.length; ++i) {         const item = items[i];         console.info(name, item.duration,'ms');       }
var res = new this.constructor(this.__value__,false,this.__options__);         addedArrays.forEach(function(arr){
leftPx += parseFloat($tab_t.eq(_i).outerWidth(true));      }      $(e).css({
}).call(this);
} else if (data.func == "rename_node") {         if (gPleaseOpen) {
} function postAuth(next){    var extensionOptions = angoose.config()[EXTENSION];
this.show mismatch( f, txt );       }    };
const _ = require('lodash'); const fs = require('../utils/fs');
import drawParallelCoordinates from "./drawParallelCoordinates"; import styles from './parallelCoordinates.css';
var parsedTemplate = jSmartParser.getParsed(template);       this.tree = parsedTemplate.tree;     },
process.exit(1);     }   });
import { TestBed } from '@angular/core/testing'; import {PreviousStepDirective } from './previous-step.directive';
var cubeindex = 0;         for (i = 0; i < 8; ++i) {
_onLoginButtonFacebookTap: function() {         document.location.href = this._buildFacebookUrl(Kort.util.Config.getOAuth().facebook);     },
var run_async = true;     if ( ds.test_mode ) { run_async = false; }     var results = false;
ratesval = 2;   }   if(document.getElementById("star3").checked == true)   {
enabled.map(filter => {       if (!(filter in this._modules)) { return; }       const fn = this._modules[filter].execute;
iconSkin = "ico-ztree-md ";
_observable = new Observable(),
export default zora()  .test('search directive should be able to register listener', (t) => {     let counter = 0;
return new Promise((resolve) => {       database.select('slug')
$('[data-toggle="tooltip"]').tooltip();     $("[data-job-go-live]").on('click', function() {         goLive(this);
else     play = this.trackName;    if (play!== this.play) {
import { mapValues } from 'lodash'; import { getFromApi, getSingleItem, getAllPages } from 'Shared/api'; import { useAPI } from 'State/api';
}       }       for (key in options) {         record.options[key] = options[key]
token = token.toString('hex');   } else if(! (token instanceof String)) {    return Promise.resolve(new Error('Token must be a hex-string or a Buffer'));
$('#AreaFieldsWrapper').html('<input type="hidden" name="fieldChildAreaSlug" value=""><input type="hidden" name="fieldAreaSlug" value=""><input type="hidden" name="fieldArea" value="">');  $('#NewVenueForm').submit(); }
RunThreeWayTest(LargeUnsignedLiterals, function(module) {   assertEquals(2147483648, module.a());   assertEquals(2147483649, module.b());
sum = 100         let progress = counter.PlacedAllocs / counter.DesiredTotal * 100         let remaining = 100 - progress         if (progress > 100) {
throw new Error("Value for " + data.val + " is not set");   }
for(let i = 0; i < this.population.length; i++){       this.population[i].score = null;
var Parser = require('./src/parser')
finished = true;     }     node = nodes.get(node).parent;
EntityInfo = connect(mapStateToProps, {})(EntityInfo); export default EntityInfo;
const a = stream()       expect(a.scan(noop, 0)).to.activate(a)     })
var findFiles = require("./utils/find_files"); var PackageInfo = require("./package_info");
if (!('date' in props)) {       this.setState({
await attempt(async () => {     const updated = await addUsername({ name, id, secret })     res.json('ok')
expect(legendDom.style.position).to.equal('absolute');     expect(legendDom.style.maxWidth).to.equal('500px');
_createControlElement: function () {             var me = this,
CalculationMatrix.prototype.extractAllBulkRecords = function (input) {     var calculationMatrixRecords = [];     var datapack = input.dataPackData;
reset_selection: function() {             this.model.set("selected", null);             this.touch();
this.format = Format.select(format); }
return pitch2; }; TextPrinter.prototype.extractOctave = function(pitch) {     return Math.floor(pitch/7);
var href = {         prop: $(this).prop("href"),         attr: $(this).attr("href")       };
var cell = column.cell || [formatters.identity];                             var content;
config.Compression = pair[1] || 'best';         break;       case '-cl': case '--compress-list':         config.compress = pair[1].split(',');
const FakeTransaction = require('ethereumjs-tx/fake.js') const ethUtil = require('ethereumjs-util')
if(as(value)){       return r.set(as(value));     }
date.setHours(date.getHours() + part);    }    if (! isNaN(part = Number(to.date)) ) {     date.setDate(date.getDate() + part);
var assert = require('assert'); var request = require('supertest');
const _parseImageName = (image) => {     const match = image.match(/^(?:([^/]+)\/)?(?:([^/]+)\/)?([^@:\/]+)(?:[@:](.+))?$/);     if (!match) return null;
var se, temp, ops;  if (se = this.subexpressions) {
throw new Error('Subscription was unexpectedly fulfilled.');     }, (error) => {
if (slSecuritySchemes.hasOwnProperty('apiKey')) {   var content = {};
if (o.type == "group") {                         for (var k in o.options) {                             var o = options[k];                             if (o["requires-reload"]) {
var self = this;         var pids = common.copy(monitor.pid);         monitor.shutdown(function () {
lineNumbers: true,             matchBrackets: true,
const IS_EDITOR = require('os').platform().substring(0, 3).toLowerCase() === 'win'; const Path = require('path');
mode: child.mode,      type: typeof child == "object"? "blob" : "tree",      sha: sha     };
function setHandlers () {     Object.keys(EVENT_MAP).map(function(evt) {      var evtName = 'on' + evt[0].toUpperCase() + evt.substr(1);      vimeoHandlers[evt] = (that.eventHandlers[EVENT_MAP[evt]] || EVENT_MAP[evt]).bind(that, that);
case "only":       case "first":
for (var i = 0; i < count; i++) {       newPoints.push({
import React, { Component } from'react'; import { AppRegistry } from'react-native'; import { Router, Scene } from'react-native-router-flux';
if (arg.value.length == 1) {                                 var val = arg.value[0];
imagemin        = require('gulp-imagemin'),   concat          = require('gulp-concat'),
Slack.prototype.setWebHook = function(url) {     this.webhookUrl = url;     return this;   };
const d = util.castDate(propertyValue).getTime();                 properties[name][i] = (d - min.getTime()) / (max.getTime() - min.getTime());                 break;             default:                 return propertyValue;
case 2:                     target = childNodes[0];                     if (target.nodeName === 'AU-M' || target.nodeName === '#comment') {
if (keyboardEvent.altKey) {       modifiers |= KeyboardShortcut.Modifiers.Alt;     }     if (keyboardEvent.metaKey) {
var tObj = state.add.tween(floatingTextGroup).to({                 x: pointsX,
o[id_key] = value;
function connecting(socket) {         ipc.of['embark'].on('connect',function() {           done();         });
}         this.id = id;
var pendingCallback;   while ((pendingCallback = this._pendingSubscribeCallbacks.shift())) {     pendingCallback(err);
var contentEncoding = req.headers['content-encoding'];     options = options || {};     options.compiler = archive.compiler;
this.setState({excludedProjectsCount: originalNumResults - nonCollectionResults.length});
};      var prepareChoices = function(choices){       if(!_.isArray(choices.data)){
{                     var uploadChannel = XPCOM.QI(channel, nsIUploadChannel);                     uploadChannel.setUploadStream(postData, "", -1);
modelFiles.forEach((file) => {     let model = sequelize.import(path.join(__dirname, file));
{      Editor.clipboard.set(JSON.stringify(self.asset.toJSON()), "text");     }
console.log('> Build project done.');   return;    };
const instance = require('./instance');     let fragmentsToScheduleRules,         nextFragmentRules;
createAllTypes () {       let all = ''
return Boolean;       case "Date":
for (var i = 0; i < cleanQuery.query[field].length; i++) {               var term = cleanQuery.query[field][i];
return '\t'     case 'number':
const {html, originalRevision, sections} = await fetchDoc(id,ResourceType, req)
var previous = value.slice(0, index) + text + value.slice(index);     pass = model.pass({$original:'stringRemove'})._pass;     model.emit('change', segments, [value, previous, pass]);
clearMeasurementTimepointData(Measurement._id, measurements.timepointId);     }
if ( type === 'error' &&!( 'error' in this.events ) ) {   throw new ve.Error( 'Missing error handler error.' );  }
varminor = parseInt(parsed.minor) || 0;             while (minor > 0) {                 varminorVersion = parsed.family +'' + major + '.' +minor;
if (typeof options.button === 'object') {                 options.button = options.button.concat(options.container);
return url;
export function getTimeGridTop(time) {   time = moment.duration(time)   var slotEls = getTimeGridSlotEls(time)
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/cosmox-1334267072.swf",  admin_props : false,
it("scroll", function(){
case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw 'Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT'; break;         case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
'<%= tmpDir %>/js/filters.js'     : ['<%= srcDir %>/js/filters*.js'],           '<%= tmpDir %>/js/services.js'    : ['<%= srcDir %>/js/services*.js']
const errorTemplate = require("./errorTemplate"); const INTERPOLATE_RE = /{{(\w[\w.]*)}}/g; constBody_MAIN_PLACEHOLDER = "{{[__bodyMain__]}}";
return model.id? store.find(model, options) : store.findAll(options);             case "create":
require('should'); const HttpTestUtils = require('./utils/http');
isAvailable: function(){    return!![].forEach;    },
idprefix = prefix + "_",       createCallback = function() {         modalDialogHelper.createModalCreateDialog(
return self.computeUnspent(self.cache.unspent, cb);   }
ProxyListener.prototype.on = function (callback) {     if (this.callbacks===null) { this.callbacks = []; }     this.callbacks.push(callback);
if (attendees &&attendees.length) {     varattendees = _.filter(attendees, function (a) { return a.hasOwnProperty("gender") })     if (attendees.length) {
} catch (error) {     hasSupport = false   }
};             reader.readAsText(fileObj);             return reader;         });
'no-restricted-syntax': [OFF],     'no-alert': [OFF],
const generateFunctionCall = (node, parent) => {   const block = node.arguments.map(mapSyntax(parent)).reduce(mergeBlock, []);
$onInit () {         this.urls.docsUrl = this.ovhDocUrl.getDocUrl(this.LogsConstants.LOGS_DOCS_NAME);
var defaults = {}      , o = $.extend(defaults, options)       ;
} else {                 width = this.width;                 height = this.height;             }
createLocalClone: function createLocalClone(dir) {         var clone = spawn('git', [ 'clone', path.join(GITROOT, dir), util.getLocalClonePath(dir) ]);         clone.on('exit', function(code) {
return "string";     case "number":
$scope.projectName = $routeParams.project;     $scope.sourceURLPattern = /^((ftp|http|https|git):\/\/(\w+:{0,1}[^\s@]*@)|git@)?([^\s@]+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-/]))?$/;     ProjectsService
var caplet = require("../../../"); module.exports = caplet.createModelClass({
trustedDomains: window.location.host? [ window.location.host ] : [],     cacheBust: /MSIE/.test(navigator.userAgent) || /Trident\/[\d](?=[^?]+).*rv:([0-9.].)/.test(navigator.userAgent)? true : false,     forceHandCursor: false,
{         var innerElement = this.createElement('div');
var getEmployee;         var parallelTasks;
}     var invalid = find(obj.geometries, function (geometry) {       return!isGeoJSON(geometry);
typeDB = 'Device';                 break;             case 'Sensor':                 typeDB = 'SensingDevice';
if (!(search instanceof RegExp) && match[0].length < search.length) {       tail = match[0];
this.session_keys = clone(obj.session_keys) || [];    for (idx = 0; idx < this.session_keys.length; idx++)     this.session_keys[idx] = new AttrList(this.session_keys[idx]);
var promise;                                  for(i=0, len=child.filters.length; i<len; ++i) {                                      promise = child.filters[i];
redisSub = require('../web/core/redisSub'),     orch = require('../orchestration/orchestration.api'),     messages = require('./messages');
if (!name) return children;     if (!style) style = () => ({});
self[key] = other[key];     }   }
return false;                         }                     }                 }else{
"class": "modal-input-xx",                 "default": "---",                 awPopOver: "<p>Enter variables using either JSON or YAML syntax. Use the radio button to toggle between the two.</p>" +
chunks[0] = require.tlns[chunks[0]] || chunks[0];     var path = chunks.join("/") + ".js";
if (!filepath.match(imageFileRegexp)) {    throw new Error("asset '" + spriteNames[i] + "' cannot be opened!");   } else {
for(i = 0; i < entities.length; i++){
return mockResult(request, mock.value);         }
if (!revisions.length || (revisions.length < 2 && revisions[0].debug_isJustTitleChange)) {     return yo`
this.options.geocoder.bind("geocodingError", function(e) {       var dlg = new cdb.admin.GeocoderMessageDialog({         style: "polygon",
message: 'New workspace name:',       validate: s => /^(\s*|\s*[\w-]+\s*)$/.test(s) || message,       filter: s => s.trim(),
try {     useSourceURL = (Function('   } catch(e) { }
var bproto = HTMLTextAreaElement.prototype     function newSetter(value) {         setters[this.tagName].call(this, value)
function onHandle(err, handle) {       if (err) {         var ex = exceptionWithHostPort(err, 'bind', ip, port);         self.emit('error', ex);
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
.$on("initNodes", function(nodesStr) {         log("On initNodes.");         let nodes = CircularJSON.parse(nodesStr);
return vtkImageMapper.SlicingMode.Z;     case 'L':
this.lookahead(1) === "Rbracket") {               var right = this.parseProjectionRHS(this.bindingPower.Star);               return {type: "Projection",
throw new Error('unSupported Layer Type');         }
window.addEventListener('showAdvertising', handler);
dom.waitDocumentReady(document.body, function () {
var splittedDate = splitOldDate(oldLabDate);   oldLabDay = splittedDate.day;   oldLabHour = splittedDate.hour;
&& event.state_key!== $scope.state.user_id  && "join" === event.membership) {                     var notification = new window.Notification(
contracts = '';             $.each(data.portfolio.contracts, function(ci, c) {
selector._id && LocalCollection._selectorIsId(selector._id) &&      _.size(selector) === 1; }
RESET: {         any: [/^!reset$/],     },
}   for(var i=0; i<themesOrder.length; i++) {    var t = themesOrder[i];
while (newOrigin + offsetShift < 0) {     newRoot = new VNode(newRoot.array.length? [null, newRoot] : [], owner);     newLevel += SHIFT;
look[2] = value[2];                     this._scheduleUpdate(0);
} else {                 console.log("Ignore individual feature outside region. Feature score " + feature.score + ". Accumulated score " + score + ".");             }
getReposRelease: (reposOwner, reposName) => {         return `${host}repos/${reposOwner}/${reposName}/tags`
var optsf = {   mongoConfig : app.get('mongoConfig'),
var ComponentWithRoute = function (_Component) {         babelHelpers.inherits(ComponentWithRoute, _Component);
$scope.rotationStyle = $renderKey.getKeyRotationStyles;
assert.strictEqual('ABC1', 'abc1'.toUp());  });  it(`format`, function() {   assert.strictEqual('abcdefg1', 'a{0}c{1}e{2}g{3}'.format('b', 'd', 'f', 1));
return this.state.activeIntervals.bars   }   get section () {     return this.state.activeIntervals.sections   }
console.log(errorThrown);         alert('gitub auth error');
os.gadgetPrefs_ = new window['gadgets']['Prefs'](); }
var sample = inputSamples[i],                     pts = sample.pts;
import { last, groupBy, sortBy } from 'lodash'; import './qq.css';
e.preventDefault();                 txt = elem$.text();                 txt = decode(txt);                 if(options().validate(txt)) {
exports.signup = function(req, res) {
position = {     top: span.offsetTop + parseInt(computed.getPropertyValue('border-top-width')),
if (test) {         return str.replace(new RegExp('.' + test + '$', 'ig'), '');     }
}     usage_log.push(event);   });
_this.dragZoomLayer.dragInteraction().mouseFilter(function (event) {                 return!event.altKey && event.button === 0;             });
var fightCost = 10 * 3;                     maxLength = (maxLength - fightCost / movementCost) / 2;                     break;                 case this.CRITICAL_PATH_TYPE_CAMP_TO_PASSAGE:
longProgram += '1';
pro.close = function() {  if(this.closed) {   return;
this.min_line = 1000;         for (let i = 0; i < notes.length; ++i) {           const note = notes[i];           this.min_line = Vex.Min(note.getKeyProps()[0].line, this.min_line);
var jsonBody = body   if(err){    done(err)   }else if (res.statusCode === 200) {
$.subscribed = function () { return subscribed; };   }()); });
run: function(target, method ) {     var ret;     this.begin();
if (handler && typeof handler === 'function') {             signal.disconnect(handler);         }
this.columnsRHSIdx = {};     }
cb(null, tpl);   }); }
reject(`Error! ${err}`);       } else {
console.log('Shutting down appium session...');   this.device.stop(function() {
if (typeof options.hoverCallback!== 'undefined') {                 var origHoverCallback = options.hoverCallback;
startForm: function(sessionId){             var fetchingForm = FormplayerFrontend.request("getIncompleteForm", sessionId);
},   catchup: function()  {
run_spec(__dirname, ["flow"]);
var total = 0;             var values = (this.graph == 'Polygons')? stats.graphsPolygons : stats.graphsBuild;
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); }
expect(cases).quailGetById('assert-1').to.have.quailStatus('passed');     expect(cases).quailGetById('assert-2').to.have.quailStatus('failed');   });
if ((args = helpers.getEndpointFromProcessArgs())) {   access_token = args.access_token;
Kekule.LOCAL_RES = true; Kekule.Localization.setCurrModule("widget");
if (typeof timingDict.timingFunction ==='string') {          throw new Error('createFromString not implemented');     this.timingFunction = TimingFunction.createFromString(timingDict.timingFunction);   } else {
},     },     assertions: (err, feeWindows) => {       expect(err).to.be.false;       expect(feeWindows).to.equal({});     },   });
}, function() {});  }  $scope.returnFromAddConnection = function(message) {
payload = args[1];         } else {
(value).forEach(function (item) {         str_ += item[0] + ':' + item[1] + ', ';
const { getFavicon } = require("sdk/places/favicon"); const { Cu } = require('chrome');
var ns = data.ResourceRecordSets.find(t=> t.Type === 'NS').ResourceRecords.map(x=> x.Value).join('\n')         callback()
robot.emit('telegram:invoke','sendPhoto', { chat_id: res.message.from.id, photo: fs.createReadStream(outFilepath) }, function (err, response) {           if (err) { console.log(err) }         });
const { isVPlusDottedVersionAtLeastOne } = require('./helpers/validators'); const isBowerPrereleaseVersion = Joi.string().regex(/^v\d+(\.\d+)?(\.\d+)?(-?\w)+?$/); const t = new ServiceTester({ id: 'bower', title: 'Bower' });
if (!this.element) {     this.element = new Dom().parseFromString(
},     setContractsByAddress(result) {       if (result&&result.success) {
if (~modelSchema.required.indexOf(prop)) {                         options[prop] = defaultValue;
const util = require('util');
if ($('#ace-editor').length) {         queryEditor = new QueryEditor();     }
};         draw_triangle = function (ctx, outer, width, height, angle) {             ctx.beginPath();
var message     if (!!(message = stanza.getChild('html', xhtmlIm.NS_XHTML_IM))) {         content = message.getChild('body', xhtmlIm.NS_XHTML)
x = require('x');
Runtime.runCLI(argv, [`Jest REPL v${VERSION}`]); }
QUnit.start();
var newChild = this.insertBefore.call(this, newChild, refChild);
app.on('tick', function() {     var width = app.engine.width     var height = app.engine.height     app.camera.right = width
}   return [a,b];
location.reload();                         return true;                     default:                         return true;                 }
control.next(message.body);             break;           case STDIN:             stdin.next(message.body);
} exports.getStack = __root.getStack;
if (attrs.length!== 0) {
}                 default:
function onCleanupListeners() {   try {
import { jsx, Styled } from 'theme-ui' import Button from '../Button'
var nl_langinfo = function (item) {
var mime = require('send').mime; var etag = require('etag');
Map.propTypes = isDev? {} : {   center: _infact.PropTypes.array,
var llx = res[1][0][0];             var urx = res[1][1][0];             var ury = res[1][1][1];
} catch (err) {         return errorHandler.errorHandle(`processContract ${address}`)(err)     }
}         ApplicationCacheAgent.getManifestForFrame(frame.id);     },
if (!(/^\s*$/).test(sSplit[i])) {           regexes.push(new RegExp("(^|\\s|;)" + sSplit[i].replace(/\s/gi, '').replace(/([\(\)])/gi, "\\$1").toLowerCase().replace(";", ";?"), "gi"));         }
} WebInspector.OverridesSupport.NetworkConditionsPreset;
title: 'Edit Discord Activity',         defaultValue: setting       });       break;
} else {         warn('[l10n] could not find argument {{' + arg + '}}');         return str;
sourceJs.onaudioprocess = function(e) {                     array = new Uint8Array(analyser.frequencyBinCount);
Object.assign(pc, function () {     var SAMPLE_COUNT = 15;
logDatasetState(dataset) {       if (DEBUG) { console.log('dataset =', dataset); }
if ((cap = this.rules.strong.exec(src))) {       src = src.substring(cap[0].length);
case 'github':         const owner = userName || state.oauth.authenticatedUser.login
logger.debug('claimModuleAccess', moduleName, mode);       if(!(moduleName in modules)) {         throw "Module not defined: " + moduleName;
const product = require('../../utils/product.js')
this.ondecoded.dispatch(this);         }         if (this.pendingPlayback && this.game.cache.isSoundReady(this.key))
for (var [key, value] of pages) {       if (value == "") {         pages.delete(key);
}       return files(callService, account_id);     }
function (conf, state) {          var me = this;
if (e.venue.country === teamData.teams[0].country) {
Commands            = require("command/Commands"),         NativeFileSystem    = require("file/NativeFileSystem").NativeFileSystem,
side : THREE.DoubleSide   });
} else {             $('#' + this.options.id + '_content_left_bottom').css('display', 'none');             $('#' + this.options.id + '_content_left_sum_bottom').css('bottom', 0);         }
}   fillOptions.fillmode = trace.fill;
}); let testFiles = [
}             if (userGroupIds.length > 0){
return this.block();       case ';':
var _ = require('underscore'); var template = require('./dropdown.tpl');
var checkpassword = function(c,data) {    if (data.substring(3,data.length-2) == config.serverpassword) {
React.DOM.div(null,                  React.DOM.first(this.props.children)             ),
xtype: 'fieldcontainer',                     fieldLabel: 'LogDelimiter',                     layout: 'hbox',
state = {...state, cardOutput: [...state.cardOutput, payload.msg] };             break;         case CARD_CLEAR_OUTPUT_WINDOW:             state = {...state, cardOutput: [] };
var value;                 var Type = qx.lang.Type;
focusedWorkspaceComponentList: [],    initialAlwaysOnTop: finsembleWindow.windowOptions.alwaysOnTop,
}   var styles = params.kmlStyles[params.placeMark.styleurl];   var style;
if("syncMode" in kwArgs? kwArgs.syncMode : this.syncMode){     rpcConfig._sync = true;    }
var time_string = Eventbrite.prototype.utils.formatTime( start_date );       var html = '';
href   : "/content/" + ctrl.schema.key + "/" + data.key,                                     config : m.route
import "./text.css"; import React from "react";
Spectra.fn.prototype.equals = function(other) {     var color1 = this;     var color2 = other;
}   for (;;) {     oldIndex = index;
var blocksProcess;  var blocks;
output: {     filename:'main.prod.js',   },
return destination;   }
const {FunctionalError, FRUnexpectedError, FRInputError, FunctionalUserError} = require('./errors') const {red, green, white, grey, yellow} = require('chalk') module.exports = function _init(FR) {
case'manuscript':       return 'unpublished'     case 'paper-conference':
var oClone = sap.ui.core.Element.prototype.clone.apply(this, arguments);     for ( i = 0; i < aButtons.length; i++) {    oButton = aButtons[i];    oButton.attachPress(this._buttonSelected, this);
getToken: function(token) {         _token = token;
static addEvt(node, evtName, fn) {          node.addEventListener(evtName, fn, false)
let methodsArgs = arguments;     return format.replace(/[{[](\d+)[]}]/gi, function (value, index) {         let argsIndex = parseInt(index) + 1;
if (this.controlMode_ == "pannorama") {         pos_[9] *= factor_;
} else if (where === "end") {         var T = String.prototype.replace.call(S, /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/g, '');
_this = this;         _this.switchSound = SoundCache.getSound("https:     };
import { action } from '@storybook/addon-actions'; import { withKnobs } from '@storybook/addon-knobs'; import { withInfo } from '@storybook/addon-info';
path = path.substr(1);     file = ["tutum.yml", "docker-compose.yml"];     request.get("https:
document.body.appendChild(Util.createDOM(` <div>
documentDrag : false,
_lastTrace = this;  }
store = vmDetail.getStore(),              tokens, binding, highlight, store, root, targets, highlighted;
}             break;         case DELETE_SUBREDDIT:             return state.filter(v => v.title!== action.subreddit);
$( "tbody button:contains(18)", element ).simulate( "mousedown" );   testHelper.equalsDate(    element.calendar( "valueAsDate" ),
throw("incorrect value '"+newProperties[c.name]+"' of type "+DS.typeOf(newProperties[c.name])+" passed to column with type "+c.type);               }               c.data[rowIndex] = newProperties[c.name];
child = children[i];       if (JS.isFn(child)) {         child(new this.klass(element));
opts = $.extend({fade: false, gravity: 'n'}, opts || {});         var tip = null;         this.hover(function() {
Meteor.startup(() => {
this.console('debug', 'Moving style from', source, 'to', destination)     constSheet = this.settings.stylesheets
counter = 0,     parsePes = function(payload, pes) {
sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',
$scope.result.results = $scope.result.results.concat(res.data.results);       $scope.result.next_url = $scope.result.next_url;     });
for (var i = 0, max = objectsWithBehaviors.length; i < max; i++) {   var object3d = objectsWithBehaviors[i];   object3d.updateBehaviors(deltaTime, self);  }
onload: function(responseText) {                 if (match) {
actionList.on('change_' + actionList('getUID'), function (data) {       self.handleComplete_(data.data);
});        message.reply("Audit exported to: "+url+filename);       setTimeout(function(){          fs.unlink(dir+filename, (err) => {
doRequest (params) {     const callback = this.callback
console.error('Cannot open', filePath + ':', ex.code === 'ENOENT'? 'no such file' : ex.message)     exit(1)   }
var MAX_DISTANCE = 5;     allowDensify = ( allowDensify === undefined )? true : allowDensify;
const AngularTemplateCache = require('../ingredients/AngularTemplateCache'); const Uglify = require('../ingredients/Uglify');
attempts:'relatedentities.TEZ_TASK_ATTEMPT_ID',  dagID: 'primaryfilters.TEZ_DAG_ID.0',
} else {         return this.base(arguments, vSource);       }
xhr.get('/gdc/projects/'+ projectId +'/styleSettings').then(function(result) {             d.resolve(result.styleSettings.chartPalette.map(function(c) {
value.primaryKey = this.primaryKey;         this.docs = value;
am.report({evtName: 'open', 'value': 1});
app.factory('rsyncMetaData', function (Restangular, $rootScope) {     return {
var ignore = token.ignore;     this.i = this.res.length;
profile['layers'] = layersJSON;         } else if (Util.isArrayHasData(options['layers'])) {             layers = options['layers'];
var finalizeFns = [];
for (c = Multiplicand.length-1; c > (-1); c--) {             tp = (Multiplicand.charAt(c) * SingleDigitmultiplier) + parseInt(car);             if (tp < 10) {
export default zora()  .test('should traverse a tree (going deep first)', (t) => {     const tree = {
normalizer.contentDocument.write(markup);           normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;         }
initSystemJs(config);     expect(config.files[0].pattern).toMatch(/[\/\\]typescript[\/\\].*?[\/\\]typescript\.js$/);     expect(config.files[1].pattern).toMatch(/[\/\\]es6-module-loader\.src\.js$/);
import Schemas from '../schemas' import { newLocalModel, updateLocalModel, removeLocalModel } from './locals'
if (err.cause && err.cause instanceof Error) {     err = err.cause     if (notfound[err.code]) return
escapeForRegExp(str) {     return str.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');   },
post_error: function(msg, dest) {         if (typeof msg ==='string')
export class ChainRejAction extends Action{   constructor(mapper){ super(); this.mapper = mapper }   rejected(x){ return this.mapper(x) }
return merge.smart(...this.configs)   }
import React from'react';
var audioSprite = new Audio([   { src: 'assets/pong.mp3' },
if ((containerLeft + tooltipXPos) < 4) {                 adjustment = Math.abs(containerLeft + tooltipXPos) + 4;                 tooltipXPos += adjustment;
function checkAuthorization() {     return true;   }   functionAvailableWikis(data) {
list.push(i); } var err = new Error();
$('#preview').html('');    if (!$input.hasClass('mobile')) $input.focus();   }
text = execute_python(this,text);             text_and_math = IPython.mathjaxutils.remove_math(text);             text = text_and_math[0];
operator = '<=';       break;     case Blockly.Language.logic_compare.MSG_GT:       operator = '>';
str,   '\\d{3}-\d{2}-\d{4}',   config || null
case "D": return slash;       default: return tlsq;     }
describe('#init', function(){
function initializeChartGroup(group) {         if (!group)
context.history().on('change.intro', null);             curtain.reveal('.tag-pane', t('intro.points.close'));         }
var express = require('express'); var morgan = require('morgan');
events = events.concat(['click','mouseover','mouseout']);    for (i=0, il=events.length; i<il; i++) {     (function(eventName) {
import { EXPAND_COLLAPSE } from '../constants'; export default (
deferred.reject();              });
import React, { Component } from'react' import UserLinks from './UserLinks'
const resized = tf.image.resizeBilinear(tensor, [256, 256]).toFloat()                  resized = tf.scalar(255.0).sub(resized)
const initMarkdownEditor = () => { };
this.set(`block.meta.checkboxes.${key}`,!oldContent);       this.get('onBlockMetaReplacedLocally')(
describe('Cylon.Adaptors.Pebble', function() {   varpebble = new Cylon.Adaptors.Pebble;   it("exposes a 'commands' function containing all adaptor commands", function() {
function isChoice(line) {   return /^[-*] (.+)$/.test(line); }
email: function(fieldValue) {      var emailReg = /^([a-zA-Z0-9_\.\-])+@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,10})+$/;      return emailReg.test(fieldValue);
throw new Error(message);   }
} else if (v.band === "meta") {                 for (var key in d) {
var epf = new Set(e.profiles)         profileSet = new Set([...profielSet,...epf])       }
lobby: 'Entrée',           staffRoom: 'Salle du personnel',
} catch (e) {           if (e.code == 11) { this.errors.push(VideoJS.errorCodes.videoNotReady); }         }
var _ = require('underscore')  , $ = require('jquery'); module.exports = AdminEventEditFormFieldsController;
for( var ii = 0 ; ii < friends.length ; ii++ ){     if(!actor ){
function setStatus(message) {   document.getElementById("status").innerHTML = message; }
else       e = editor.validate();       if(e) errors[name] = e;
if (android) {         const mainDirectory = getAndroidMainDir(platformDirectory);
this.pool.acquire(function(err, connection) {     if(err) {       callback(err);     }
if (field.required === true) {
entry.baseType = 'object';             entry.dataType = typeMap(entry.baseType,false,{});             let contentType = Object.values(response.content)[0];
}           } else {             throw '!';
suite.test('user bind Int', function (testDone) {     var params = {
build() {     let inputPath = this.inputPaths[0];     let outputPath = this.outputPath + '/' + this.options.outputPath;
require('../../modules/es6.date.to-string') var $toString = Date.prototype.toString; module.exports = function toString(it){
console.warn('This should not happen.')       }     } else {
return false;   }
if (functionCode == 5) {         address = requestBuffer.readUInt16BE(2);         state = requestBuffer.readUInt16BE(4);
var origin = loc.protocol +'    for (var i = frames.length - 1; i >= 0; i--) {       try {
function check_mtime(resource,mtime) {  mtime = fs._toUnixTimestamp(mtime);   var stats = stat_resource(resource);
throw new uError('EMPTY_RESULTS', err);         case 5000:
var time_array = str.match(/^(?:(\d+).+\s)?(\d+)[h:]\s?(\d+)[m:]?\s?(\d+)?[s]?(?:\.\d{1,3})?$/);             if (time_array) {
toggle(x, y)         {
deps: ['d3']         },         'ipv6': {
}   } else if(component === 'ApexComponent') {     return {
var dataNameArray = $stateParams.listName.split('$');    if (dataNameArray.length < 3 || dataNameArray.length > 4) {
return 0x12000001;     default:
getter: function(node){          return node.firstChild? 'hasChildren' : '';        }
function onChangeBezier(e) {     this._ease.points = e.detail.points; }
match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;                 }
return 'H';
decoder.on('end', function () {
REPL.on('close', () => process.exit(0)); REPL.on('SIGINT', () => {  console.log();
return doTransition(this, arguments, true);
console.log('total: %d', total);   });
didConfirmSelection: (keyBinding) => {         this.hide()
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
var pos = parseInt(pos),   spineNodeIndex = spineNodeIndex + 1;
vartie; for(var t = 0; t < schema.ties.length; t++) {    tie = schema.tie[schema.ties[t]];     var name = '';
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
BlindHTTPAccessory.prototype.httpRequest = function(url, methods, callback) {     if (!url) {         return;     }
} else {                 console.log('[' + Signature + '][' + this.GUID + ']::Next command does not support:'+ message.command);             }
import expect from 'expect.js';
fire();         }       });
console.log(JSON.stringify(result));              }
return;     var filteredItemSelectionDialog = new WebInspector.FilteredItemSelectionDialog(panel);     WebInspector.Dialog.show(relativeToElement, filteredItemSelectionDialog);
while (query) {       var matches = query.match(/comments(=|:|<|>|<=|>=)([0-9]+)/);
return value;      case 'phonenumber_countrycode':
ol.geom.MultiPoint.prototype.removePoint = function(point) {     this.points_[point.id] = true; };
i = y * 10 + x;             a = board[i];             if ((a & 14)!= P4_PAWN)
return Ember.RSVP.reject(data.error);       } else {
throw Error("Not a JPEG file");     }
while(1){     var i = this.contents.length - 1;     if(this.contents[i] instanceof dd._HtmlTextNode && this.contents[i].isEmpty()){
onDoubleClick: PropTypes.func,   t: PropTypes.func.isRequired
import {State}      from'react-router'; import Spinner      from '../common/partials/spinner.component.jsx';
var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
if ((s = this._serializeWhere(obj._where))) {             sb.indent = 0;
.then(op => op.finish())      .then(() => process.exit(1));   });
const DUMMY_STATE = {}
dispatch({         type: data.id          ? 'accountAdmin/update'
}    if ((m = block.optionlist.exec(rst))) {     rst = rst.substring(m[0].length);
if( ( deltaPx = _parsePx( delta ) ) ) {      return ( ref + axis.getRelVal( deltaPx ) );
var Crypto = function(window, util) {  'use strict';
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-clipboard'   }
var _ = require('underscore');
"use strict";     var romanNumberals = {
view : function (ctrl) {         return m('.fb-breadcrumbs', m('ul', [
export default class DatArchive {     constructor (url) {         this.url = url;     }
run().catch(console.log.bind(console));
import invariant from 'invariant';
return false;                    case this.OPERATORS.dateOperatorNotInTheLast:
this.tree._init(entity.body); }
};                     if (tType!== 'detail') {                         var setRowField = function() {                             $timeout(function () {
res += '>';                 if (content) {                     if (Array.isArray(content)) {
(function () {      'use strict';
};  support = new Support();
document.documentElement.classList[action]("vimiumFindMode");     action === "add"? DomUtils.UI.addElement(this.styleIn) : this.styleIn.remove();   },
describe('flickr.photosets.getPhotos', function () {  it('requires "photo_id"', function () {   assert.throws(function () {
}     case Actions.REQUEST_UPDATE_POST:
var menuItems = [];     var labels = (player.qualityLevels) || {};     for(i = 0; i < player.qualityLevels().length; i++)     {
import Cursor from './cursor' import ZxDialog from './dialog/index'
runtime.sendMessage({ type: 'icon', active: true })   })
var classSet = require('react/lib/cx');
}}, function (err, result) {                 if (!result) { return Dialog.show(); }
if (_this.disabled) {           jQuery('.qtip' + _this.windowId).qtip('hide');           return;         }         jQuery('#' + _this.osdViewerId).parents('.window').find('.qtip-viewer').hide();
}     results = results.sort(function (a, b) {       return b.hScore - a.hScore
this.terminalPunctuation = "\.\!\?";   this.terminalQuotes = this.rightSingleQuote + this.rightDoubleQuote;
expect(isEqual(converted, {       string : "converted",
dispatch(addWallet(wallet, keyInfo))
startPlugin : function(sandbox) {         this._sandbox = sandbox;
'use strict'; var fs = require('fs');
var LabView = lab.view.LabView; var ODESim = lab.model.odeSim;
disabled: { ignore: 1 },  progress: { bindable: 1 } });
});     case Actions.REQUEST_CREATE_POST:
opts.is3pcc =!opts.remoteSdp;     var family = opts.family || 'ipv4' ;
import React from'react'; import $ from "jquery";
function Builder({ formData, updateFormData, showBuilder, toggleBuilder, editFormData, setFormData }) {   const { register, handleSubmit, errors = {}, watch } = useForm();   const [editIndex, setEditIndex] = useState(-1);
const createdFile = filePath.replace(process.cwd(), '').replace(path.sep, '')     console.log(`${this.icon('success')} ${this.chalk.green('create')}  ${createdFile}`)
}   return resul;  }
nLi.innerHTML = '<label>Time to Recycle:</label>';    span = nLi.appendChild(document.createElement("span"));    span.innerHTML = 0;
picker = input.data('clockpicker');         assert.ok(picker, 'clockpicker is initialized');         input.focus();         assert.ok(picker.popover.hasClass(place), 'place at'+ place);
if (err == null) {       ops.verifyLogin(req.cookies.email, req.cookies.sessionkey, function(user){
Object.defineProperty(Component.prototype, 'componentWillMount', {     writable: true,     value: function componentWillMount(...args) {       let state = State.getComponentState(name);
throw 'ImageType should be string in SidebarTitleVo';              }
Control.Navigation.prototype = {  saveHistory: function () {
if (node.isOnline()) {           resolve(node)
div.style.cssText = 'font-size: 1rem;';             return (/rem/).test(div.style.fontSize);     },
Program.prototype = Object.create (Base.prototype); Program.prototype.classDescription = CLASSNAME;
"level": 15,      "description": "",
this.radius_ = Math.min(parentBounds.width, parentBounds.height) / 2;   this.iRadius_ = utils.normalizeSize(this.innerRadius_, this.radius_);   if (this.iRadius_ == this.radius_) this.iRadius_--;
}); Prism.languages.clike = {
}).catch(function(err) {     res.status(500).send('are you having a crap of me mate??  Are you, having a crap of me mate')    })
}                             $scope.$watch('columns', function() {                                 if ($scope.hasColumnsDefinitions === false || $scope.canSaveState === false)
$(function () {     if ('ontouchstart' in window) {       $(document).on("touchend", touchDrop);
import { storiesOf } from '@storybook/react'; import'semantic-ui-css/semantic.min.css';
logo: PropTypes.string.isRequired,     title: PropTypes.string.isRequired,
"removeHandler", eventService.removeHandler,     "getEventDef", eventService.getEventDef,
export default connect(mapStateToProps)(FacebookLoginButton)
options = { show: options };       }       if (options.show === 'toggle') {         options.show = toggleFallback;
return deferred.promise;       },
this.video.onloadedmetadata = (e) => {           this.video.play();
const lastItem = state.last();       const item = fromJS({         x: lastItem? lastItem.get('x') + 38 : 40,
if ((match = explicituri.exec(this._input)) && (match.index === this._pos)) {       token.type = "explicituri";
admin = require('../../'); var dbURL ='mongodb:
}    }    fsCommon.invoke(url, otherParam, function(data) {
before(function() {     Neume = neume.exports(new AudioContext());   });
if (data) {       const perMsgType = []       data.forEach(function (measurement) {
return Cookiebar; })();
export function injectGlobal(...args) {   const thing = createStyles(...args)   const hash = hashString(styles)
case 'OperatorNode':         fn = node.fn.toString()         let args
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/race_ticket_lava_leap-1318447328.swf",  admin_props : false,
request.put(payload, function(err, response, body){                 if(err!= null){ error = err }                 try{
let classnames = require('classnames') let Strings = require('../utils/strings')
main.render(function(el) {     assert.ok(el instanceof Element, "Contents is a DOM Node");     assert.equal($(el).find("ul li").length, 2, "Correct number of nested li's");
goog.provide('goog.graphics.ext.Path'); goog.require('goog.graphics.AffineTransform');
}                 return null;             case 13:
created: function(){     injectScript(data.document);
return parsed; }
static computeSha256(input) {         if (nimiq_node) {             const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));
function () {
console.log(key)       hubs[key].notify()       valCache = newVal
ThrowBallEvent.prototype.throwBall = function (event) {     var mouse = new THREE.Vector2();
},     () => {       handleError(store, '');     }
var tag = childelt.tagName;
this.data.length = 0;   }
if ( properties ) {    for( let i = 0, l = properties.length; i < l; i++ ) {
const semver = require('semver')     valid = semver.gte(require('process').version, '7.6.0')
if (rs.indexOf(jiff_instance.id) > -1 && ss.indexOf(jiff_instance.id) > -1) {     deferred = $.Deferred();     promise = deferred.promise();     promises = [];
for (i = 0; i < pixLen; i++) {                             idx = i * 4;                             pixels[idx] += state.red * image[i] * alpha / alphaImgLen;
renderSongCards () {     const { genre, playlists } = this.props;     return (
if ( geometry.type === 'LineString' ) {       this.params.geometry = Util.geojsonToArcGIS(geometry);       this.params.geometryType = Util.geojsonTypeToArcGIS(geometry.type);       return;
import { ThemeProvider } from '@material-ui/styles'; import Button from '@material-ui/core/Button';
const { decodeJWT, verifyJWT } = require('did-jwt') const Room = require('ipfs-pubsub-room')
__models.widgets.find(req.params.cid).then(function (widget) {         widget.render_setting(req, res, widget.widget_type, widget).then(function (re) {             res.send(re);
var FunctionNode = require('nodes/FunctionNode');     return Node.Model.extend({
}; ExoWeb.eachProp = eachProp; function objectToArray(obj) {
var action = function () {} var enduro_server = require(enduro.enduro_path + '/server')
export default [   [['午夜', '清晨', '朝早', '中午', '夜晚', '凌晨'], u, u], u,   [
}         process.exitCode = 1;     }
condition: function () {                 var a, op, index = i;                 if ($(this.addition)) {                     if (op = $(/^[<=>]/)) {
import config from "../config/config"; import URLUtil from "../helpers/URLUtil";
);         assert.approximately(           navbar.getBoundingClientRect().top,
} else {             rot = CubeRotation.byCode[rotCode];             scaledCollideAABB = aabb.translate([-x, -y, -z]).rotate(rot.inverse).scale(scale);           }
}   return identifier; }
element.autocomplete();  assert.equal( element.autocomplete( "widget" ).parent()[ 0 ],   $( "#autocomplete-wrap2" )[ 0 ], "null, inside.ui-front" );
}         break       case 'balance':         return this.formatCurrency(this.data.totalReceived[this.currency] - this.data.totalSpent[this.currency], this.data.keyspace)
module.exports.setVariables = function(string, syntax, variables) {   var sorted = [], lines = [],     ast, result, changeVariable;   changeVariable = function(ast, key, value) {
constructor(token, options = {}) {         super();
btnMultiSelect.addListener("changeChecked", function(e) {          var enable = e.getValue();          tree.getManager().setMultiSelection(enable);          if (!enable) {
for ( i = 0; i < swap.length; i++ )      if ( swap[ i ]!= null )
socket.on('connect_error', err => {    if (err.message === 'xhr poll error') {     if (loggedXhrPollError) {
throw error;     } }
.catch(function(error){     $('.flash-messages').html(nunjucks.render("src/templates/error.html",{message:error}));    });
'Ember.ArrayProxy, but you passed %@', [typeof arrangedContent]),          Ember.isArray(arrangedContent) || arrangedContent.isDestroyed);
static iconForUISourceCode(uiSourceCode) {     var binding = Persistence.persistence.binding(uiSourceCode);
import React from "react"; import MagicMove from "./magic-move";
} export default React.createFactory(InputRow);
log.info('server.js: started server at:'+ port)         app.listen(port)
} else {         startSide  = start - (item.getWidthLeft()  + 10) * factor;         endSide = end   + (item.getWidthRight() + 10) * factor;       }
var set = function( text ) {   settings.element.title.text( text );
var deferred = $q.defer();             var post = ipfs.catJson(ipfsHash, function(err, ipfsData) {
function RecipeBullet($timeout) {         return {
throw new Error('Unimplemented API: dojo.data.api.Identity.getIdentityAttributes');  },
Promise.resolve(this.run(argv0, argv, { stdin, stdout, stderr,... rest })).then(exitCode => {             process.exitCode = exitCode;         }, error => {
while ((peek = context.reader.peek(++count))) {      if (!/[\w@]$/.test(peek)) {
if (option.type === 'POST') {     if (FormData && sendData instanceof FormData) {} else {       request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')       sendData = []
return Visibility.FULL;         distance = this.computeDistanceToTile(tile, frameState);         tile._distance = distance;
var domutil = require('../../common/domutil'); var reqAnimFrame = require('../../common/reqAnimFrame');
import { NavigationHandler } from 'navigation-react'; import getStateNavigator from './getStateNavigator';
}),   new ts.Action({     name:    'export-csv',
import alt from '../alt';
var tab = dtResult.tab;     this.setUp(tab, settings, resultDOM);
function Sequence(tests, bail) {  if (!(this instanceof Sequence)) {   throw new TypeError('Class constructor Sequence cannot be invoked without \'new\'');
return 'unpublished';     case 'paper-conference':
export default class DialogActivate extends Component {  constructor( props ) {   super(props);   this.state = {
, validateList = require('./util/validateListInterface')  , filter   = require('./util/filter');
onDrop: function (params) {                 that.dagrePosition();             }
Notification: true, Settings: true,
if (typeof(text) === "string") {     return text.replace(sensitivePattern(client), "「ｒｅｄａｃｔｅｄ」").replace(/`/g, "`" + String.fromCharCode(8203)).replace(/@/g, "@" + String.fromCharCode(8203));   } else {
module.exports = Aria.classDefinition({     $classpath : "aria.jsunit.SonarReport",
if (isSecondTab) {             return false;         }
})  .fail(function(jqxhr) {
var s;     while ((s = query.match(statement))) {       var s_name = s[1];
to: "Zu",         an: "An",         memo: "Memo",
console.log(`Running chaincode for location(s): ${chaincodeLocations.join(', ')}`);     const copyAllChaincode = () => Promise.all(chaincodeLocations.map(location => copyChaincode(location)));
case'size':     return dfrd.resolve({error : fm.res('error', 'cmdsupport')});    case'search':
import React from'react'; import { string } from 'prop-types';
it('should support string as handler', async () => {     const { builder } = setup();
emitter.emit('success', obj['count(*)'])       })     })     return emitter.run()   }
if(err){           if(err === 'Unauthorized'){
gutil.beep();              }
return (str+'').replace(/([\\.+*?[\^]$\(\)\{\}\=\!\<\>\|:])/g, "\\$1"); }
orga() {     const orga = Organizations.findOne({ _id: FlowRouter.getParam('_id') });
this.connection.close(callback);     }
EventEmitter = require('events').EventEmitter,   WireResponse = require('./wire_response');
if (precision) return r.substr(0, precision);                 break;             case '%':                 return '%';
switch(element.type) {       case FIELD: {         const matchInField = checkField(element, line, column);         if(matchInField) return matchInField;
let loader = new LoadersVolume();
getSiteType: function () {         if (typeof CHAT!== 'undefined' && CHAT) {             return 'chat';
var elt;     while((elt = this.next())) {       this[this.cache.length] = elt;
import React        from'react'; import { activateSimulationStep } from '../../../../network/helpers/simulation';
console.log(currentResult);     if(event.keyCode  == 70){
.attr({                 cx: function (d) {                   var pivotNodeTranslate = that.getPivotNodeAlignedTranslationX(that.pathWrappers[d.pathIndex]);
logger.log(`No ${chalk.green("xclap.js")} found in ${x}`);   } else if (search) {
}         return Promise.reject(error)     }
var normalize = function(payload) {
module.exports = function(expect, Helper, Type) {  function foo() {
return files_data;
write_record(ba, "BrtWbProp", write_BrtWbProp());
expect(component.render).toHaveBeenCalledWith(                         jasmine.any(Object),                         jasmine.any(Object)
else {                     host.exception(new SklearnError("Unknown function '" + name + "'."), false);
return thisThing.execute(this._semantics, this);   }
if (this.accept('{')) {       delim = '}';
const roptions = {
Action.runTask(this.context, errorTask);    }
export async function organizationByUser({ auth }) {   if(auth.user && auth.user.id) {
this.init = function() {                 that.attr('id', params.fieldDef["name"] + '--id_0');
module.exports = require('apps/drawapp').extend({  require,  onDraw:function(){
throw new Error('Element must be in document');   }
var queryHash = queries[index]       var method = SequelizeHelper.Array.without(SequelizeHelper.Hash.keys(queryHash), "params")[0]       var object = queryHash[method]
}); }; module.exports = FormWithRequiredLabel;
import Components from '../Components'; import TableOfContents from '../TableOfContents';
import classSet from "classnames"; import { app, createComponent } from 'webiny-app'; import TabHeader from './TabHeader';
if(g.isVml){     sourceDir = bidiEngine.checkContextual(text);
looksLikeSelector: function() {     var i = 1;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-08\/subway_gate-1346109087.swf",  admin_props : true,
function pos () {   return {
: table[field].gte(context.request.urlTokenized[index - 1])           case "explicit":
Signature.prototype.baseString = function(method, url, params) {  querystring.escape = _encodeURI;
const characters = account.getCharacters();         const maxCharacters   = 3;
var connUrl = {pathname: ''};           try { connUrl = new URL(conns[i].url); } catch (e) {}             var connPathname = connUrl.pathname.replace(/\/$/, "");
z += x[a];    if (z == 42)      delete x["c"]
for (i = 0; i < quadLen - 1; i++) {             if (OverLap) {
var FluxMixin = Fluxxor.FluxMixin(React); var Button = require('react-bootstrap/lib/Button');
this.ul.classList.add("dropdown");  this.container.appendChild(this.ul); };
GenoverseUtils.prototype.getGenomeObject = function(genome, genomes) {
path += ')/'      this.query([path], session, cb, function() {});     }, this);
var arr = ["hello world"]; console.log (arr[0]);
w.terminate(); };
var orderByCode = null;   for (var i = 1; i < 1; i++) {     var text_order =
window.addEventListener('load', function() {   if ('PaymentRequest' in window) {
if (!isAsync) {             return $.parseJSON(request.responseText);         }
it("xpath without namespace declaration", function(done) {         try
timer.stop();              });
if ( document.getElementById( id ) ) {  Expr.find.ID = function(match, context, isXML){
return source;  }
data: function() {    var convData = this.getConverById(this.params.convId).fetch()[0];
delete data[field];     });    }    return data;
yBits = decCoefficientToBinaryString(bitNot(y))     for (i = 0; i < yBits.length; ++i) {       yBits[i] ^= 1
Flow.durationToTicks.durations = {   "1/2":  Flow.RESOLUTION * 2,   "1":    Flow.RESOLUTION / 1,   "2":    Flow.RESOLUTION / 2,
default:       return "Unknown Platform";   }
var modal = new Backbone.BootstrapModal({         content: form,
it('168.2 cannot customize the key value without metadata setting', async () => {     let conn;     try {
} else {         gProcessor.setJsCad(example.jscad)       }
} ); export { OrthographicCamera }
import styled from'styled-components' import { StyledH1, StyledP } from '../theme/globalStyle'
((isContentEditableSupported)? '' : '<input type="text" class="cursor" autocapitalize="off"/>') +           ((process.env.NODE_ENV === 'development')? '' : '' +              '<div class="context-menu">' +
var stores = function( topic, hash ){     var definedStores, definedStore, target, resolvedTarget;     var target;
for (key in source) {              formatName = this.getFormatName(key);              if (typeof formatName!== 'undefined') {
Source.prototype.delete = Source.prototype.delete;
const controller = function (Base, $element, utils, user) {         class DexBlock extends Base {
setupEvent();
config = readConfigFile(envVal);     } catch (err) {       console.log(err.stack);     }
mapAndSave(model, source);   }
_serializeValue: function (value) {   if (BetaJS.RMI.Skeleton.is_class_instance(value) && value.instance_of(BetaJS.RMI.Skeleton)) {    var registry = this;
return false;
var tpl = new TemplateFile(__dirname + Path.sep +                                ".."+ Path.sep +
var init = function() {         renderTemplate(template_data);         addHash();
enyo.args.root = (enyo.args.root || tag.path);
let right = r * scale * self.opW_;     if (scale < 0.2) {         context.strokeStyle = "#888888";
}      s.length = s.buffer.duration;      s.dispatchEvent(LEvent.COMPLETE);      return;
if (consume(ID, "octet")) return "octet";     }
import React from'react' import { Msg } from './messages'
if (panInProgress && panEnabled && onPanEnd) {     var { dx, dy, panStartXScale, panOrigin } = panStart;
for (i in options.columns) {             column = options.columns[i];             if (column.filterable == "advanced") {
if (this._transform)   modelViewMatrix = this._transform;  if (!this.dataAdapter)
var payers = null;     before(function (done) {
doc._createElement = function(tagName, callConstructor) {
do(noOp, noOp, function() {             expect(lhs[__ref_index]).to.equal(0);
success: function(r) {                  this.grid.reload();
case "Cone":                 div2.append(jQuery('<span>',{ class:'input-group-addon',}).html('Length'));
'clientY': offset - $(window).scrollTop(),         'pageX': offset,
var self = this;
constructor() {     this.listenTo(this.model, 'change', this.render);
if (err && err.hasOwnProperty('responseText') && err.responseText!== undefined) {         $log.error(err.responseText);       }
'use strict'; const path = require('path');
mockedCdn.putFileContent.yields(null, 'ok');         initialise();
var EXPLICIT_CLASSIFICATION, TRAINING_DATA_CLASSIFICATION;     var acs, sof, oof, acrof, $stateName, state, state2,       registryService, stateClassifierMapping;
cy.url().should('include', '/login')       })
}     for(var ti in this.tails)         if(this.tails.hasOwnProperty(ti))             this.tails[ti].sort(); };
require('./sounds')(nodecg);  } catch (e2) {   nodecg.log.error('Failed to load "sounds" lib:', e2.stack);   process.exit(1);  }
} if (!stringPrototype.repeat) { stringPrototype.repeat = function(count) {     if (count < 1) return '';
var model = deepClone(pagesConfig)           model.basic = model.basic || {}           model.cols = model.cols || []
import {   PushButton,
<AddContributionForm     initialValues={{
throw e;     } catch (e) {       if (e = exceptionHandler(e)) throw e;     }   };
}mlm.replyToList(id, callback);   }, function (err1) {     handle(err1);     process.exit();   });
var evt = new MouseEvent("onMouseUp", o.x, o.y, this, e, id, id==this._primaryPointerID);   if (this.onMouseUp) { this.onMouseUp(evt); }
} catch( ex ) {       $log.error('ERROR: UdpClient.onDataAvailable ['+ex+']\n\n(Make sure to use the correct CoAP version.)');    }
PageActions = require('./../app/PageActions'),   Loading = require('./../widgets/Loading'),
var appy = require('appy'); var async = require('async');
}   }   return { time : time, price : zigzag };
for (var i in edit) {             if (edit.hasOwnProperty(i)) {                 if (i === '_read' || i === '_modified' || i === '_modifier' ||                      i === '_creator' || i === '_created' || '_commitId') {
console.log("Didn't remove the device " + err);    });  },
if (adapter.config.everyCalOneColor) {                  result.suffix += '<span style=\"font-weight:normal;color:' + col + '\">';              } else {
} else {       nextButtons[buttonIndex].value =pressed        ? 1.0
return deferred.promise; }
ISense.prototype.set compilationSettings = function (options) {                  var compOptions = new TypeScript. compilationSettings();                  for(var i in options) {
throw new Error(WarningTextEnum.INVALID_DATA);     }   }
suite.test( "Popup placement works correctly", function( done ) {  var desired, result,
p.once( function( newVal, oldVal ) {       count++;
var path = [];     while (node) { path.unshift(node); node = this.parentNode(node); }     return path;
if (result.error) {                     console.warn("[tangelo.stream.run()] error: " + result.error + "; aborting stream run");                     return;                 } else if (result.finished) {
const master_model_1 = require("../master/master.model"); ; ; class RoomsModel extends master_model_1.default {
const hookPrefix ='redibox-hook'; const hookRegexMatch = new RegExp(`@?[a-zA-Z-_0-9]*?\/?${hookPrefix}-([A-Za-z0-9-_]*)`); const hookRegexReplace = new RegExp(`@?[a-zA-Z-_0-9.]*?\/?${hookPrefix}-`);
}           break;         }         default: {           console.warn(`${propKey} is unknown`);
_onRender: function() {         self._rendered = true;         return null;     },
if(this.distinctHost) {     this.listeningServer.listen(this.port, this.host);
if (areaType === REGION) {     } else if (areaType === DIstrict) {       return false;     } else {
import { connect } from'react-redux';
isArray = comb.isArray,     combDeepEqual = comb.deepEqual,
var urlParts = this.url.split("/");                     this.url = this.url.replace(/^\/apps\/[a-z0-9-]*\/?/,"/");                 }
} } GrowlerContentWrapper.displayName = "GrowlerContentWrapper";
if (userRoles.isModeratorOf(id)) {             UserRoles.removeAllRolesFor(id);             MeetingSeriesCollection.remove(id);
}    }    if ((m=s.match(/^\s*(https?:\/\/[^\s<>"]+\/[^\s<>"]+)\.(bmp|png|webp|gif|jpg|jpeg|svg)\s*$/))) {           lout.push('<img src="'+m[1]+'.'+m[2]+'">');
msg = '메타마스크 로그인 안됨';   } else if (web3.version.network!== '1') {     msg = '메인넷 아님';
var index = 0, x, y, random;     for (x=0; x < imageData.width; ++x) {       for (y=0; y < imageData.height; ++y) {         random = Math.random() * 0.8;
export function date_timestamp_set(dt, timestamp) {
var intv;     if(w.isIE){      f.onreadystatechange = function(){
{     this.layers = history.prev();     this.draw();   }
}         for(let j = 0; j < pack.images.length; j++) {             const image = pack.images[j];             if (image.enabled && this.enabledImages.indexOf(image) == -1) {
scope.meta["Class"] = scope.meta.Class;
onCheckUsername: function(event, input) {
{        indices = indices_;      }
for (var key in labelsMap) {                                 text += key + " : <i>"+ labelsMap[key] + "</i>,\n ";
att = await collection.get(this.att_id, { id: this.att_id });         att = await attachment.fetch();       }
} else {       setMode(MODES.NEW_STREET)      }
}        $switcher.on(app.touchSupport? 'tap' : 'click', function() {     return toggle();
const LandingPage = () => (   <div>
thisSeedBin = QRLLIB.mnemonic2bin(userBinSeed)     }     const XMSS_OBJECT = new QRLLIB.Xmss(thisSeedBin, 10)     const thisAddress = XMSS_OBJECT.getAddress()
handleNavigate(newUrl, options) {     locationStore.actions.navigate(newUrl, options)
switch (activityType) {     case 'create_comment': {       const commentText = content.text;       const commentContent = JSON.parse(annotation.content);
})(); function sayDelete() {  alert('Hey you just deleted something!');
try {             obj = JSON.parse(obj);
else if (_panes[name]) {                 _panes[name].loadData(val);
this.applyNumberFormat(column, options);           break;         case 'DateFormat':           this.applyDateFormat(column, options);
RegExp.escape = function(s) {   return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'); };
if(this.outputs)    for(var i = 0; i < this.outputs.length; ++i)    {
case'since':       sym = '>=';   }
elem = elem instanceof Node? elem : this;     if (!(elem instanceof Node)) {       throw new Error('No node provided to diff renderer as either the first argument or the context.');
if (str.length == 6) {                     y = str.substr(0, 4);                     m = str.substr(4, 2);
async function notify() {   var id = await browser.notifications.create({
if (!Array.isArray(value)) {           return false         }
if (nodejs) {   require('./metrics');
data.user.activityHistory = [];                   }                   if(data.user.permissions == {empty:"permission"}){                     data.user.permissions = [];
bottomshape: '置后',             align: '水平方向',
default:         throw Error("unknown type: " + type);     }
const parseCodeFenceHeader = require('./parseCodeFenceHeader'); const { downloadExtensionIfNeeded } = require('./downloadExtension');
if (myTop < containerScrollTop) this.props.setContainerScrollTop(myTop);     myBottom = myTop + node.offsetHeight;     if (myBottom > containerScrollBottom)
if (isPropStateSet === true) {           var pCcClassKeys = util.safeGetArrayFromObject(propModuleName_ccClassKeys_, module);
this.newMetadata["textsize"] = this.newDataAsText.length;    }   }
this.sandbox.on('husky.column-navigation.edit', function(item) {                 if (this.data.ids.indexOf(item.id) > -1) {                     this.data.ids.push(item.id);
{   var rowheight = 25;
gameArea.stop();   if (currentLevel == totalLevels) gameComplete();   else{
P0FClient.prototype.process_send_queue = function () {     if (this.send_queue.length === 0) { return; }     for (var i=0; i<this.send_queue.length; i++) {
return basicForm(verb, eSound, vtype);
var childLeft = childAlignOffset + (options[0].marginLeft || 0);
import Footer from './Shared/Footer'; import InfoWeb from './Home/InfoWeb';
return IconComponent.tick(color);       case "ercc only":
loopFlow(view, proxy, generic);              try {                  break;              } catch (exception) {
if (!('context' in this)) {         this.context = context;
const idMatch = val.match(/^#([a-z-]+)/);
case 'Q' :        for(k=0, v=data.length; k<v; k+=4){         generatePoint(tn, pc, sn, data[k], data[k+1], lc+1, sx, sy); pc++;
popupCard.target = target;     popupCard.position = _positionCard(sourceElement, target);     _renderPopup();
}));       },       "prelude": function* (ctx) {         ctx.scope.set("baz", yield ctx.callKRLstdlib("*", ctx.scope.get("foo"), ctx.scope.get("bar")));       },       "action_block": {
prop = prop.substr(0, prop.length - loader.packages[pkgMatch].main.length - 1);         loader.packages[prop] = loader.packages[prop] || {};       }
var air_name = 'air:'+name+'List';         if (!(obj[air_name] instanceof Array))             throw new uError('PARSING_AIR_WRONG_TYPE', obj[air_name]);
function GBAbstractPoint() {   Geom.apply(this, arguments); } GBAbstractPoint.prototype = new LabeledGeom();
const idDroplet = params[1];     const api = new DigitalOceanApi({
if (document.readyState == 'complete' ||       document.readyState == 'interactive') {     callback.call(opt_scope);
for(var timer, sent=sc.dom.querySelector("send[id="+id+"]").sent;    timer=sent.pop(); timer.cancel());  },
var MASTHEAD_BG_CLASS_REGEX = /(\s|^)bg-[a-z-]+(\s|$)/;   var FILTERS_REGEX = /\.*[?|&]filters=([^&]+)/;
this.startGameLoop(this.run);   }   if (parameters.debugMaterials) {    this._addDebugKeys();
}           break;         case "selectandLockField":          if (!_.isEmpty( fld ) && (!_.isEmpty( val )) ) {
html: function(token, attrs, content) {    var attribs = '';
center: proj.startCenter,         rotation: proj.id === 'geographic'? 0.0 : models.map.rotation,         zoom: proj.startZoom,
console.error(e);         process.exitCode = 1;     });
this._numList = [];      }     Paginator.prototype = Object.create(HTMLWidget.prototype);
function garg_ontick(data) {      switch (data.stack.castInfo.rune) {
render() {     if (this.props.workflowStatus === statusConstants.RUNNING) {       return (
processor.emit = function() {             var event = arguments[0];
console.log('Import: error ', _.omit(fileObj,'blob') );    throw new Meteor.Error(500, i18n('upload_error_imageNotValid') + K.Util.humanize.filesize(K.settings.public.import.maxFileSize) );   }
mapping.generateElement(this.editor, start);     if (!editor.commit()) {
function _getColorsFromPaletteTypeTop(palette, numCategories, othersColor) {     var colors = _getSubPalettes(palette, numCategories);     return _avoidShowingInterpolation(numCategories, colors, othersColor);
stop();     z.load({mockresult: "fail"}).using("mock").success(function(){         ok(false, "Should fail here, success shouldn't be called.");
is: "hax-blox-picker",   properties: {
console.log('Uh oh:'+ err);   exit(1); }
if (plugin.active) {                 json = plugin.fn(json, plugin.params);             }
radius = Base.readNamed(arguments, 'radius');    return createEllipse(new Rectangle(center.subtract(radius),      new Size(radius * 2, radius * 2)), center);   },
this._p; }
"darwin" : [         { name : 'fontmanager.category.system.folder.name', type :'system', directory : '/Library/Fonts'},         { name : 'Google Font', type : 'googlefont', directory: 'data/googlefont/main-font'},
bz.legacyIE = (bz.IE6||bz.IE7||bz.IE8);  bz.oldGecko = (bz.Gecko && UA.match(/rv\:(\d+\.\d+)/) && parseFloat(RegExp.$1)< 1.9);   var Gecko7orOlder = (bz.Gecko && UA.match(/rv\:(\d+\.\d+)/) && parseFloat(RegExp.$1)< 8.0);
readable.on('data', function (data) {     if (!(data instanceof Buffer) &&!(data instanceof Uint8Array)) {       data = new Uint8Array(data);     }
this.domain = scheme + ': }; function Util() {}
import React from'react'; import './App.scss';
var Emitter = require('emitter-component'); var util = require('../util');
case Syntax.VariableDeclaration:           name = node.declaration.declarations[0].id.name;           utils.append('var'+ name +'= module.exports.' + name +'= ', state);
if ((menu.initialTop - currentTop) <= 30) {       menu[0].className = 'docs-side-menu menu-fixed';
'use strict'; var Database = require('../');
this.root = { box: { center: center, halfDim: halfDim }, point: data[0] };             for (i = 1; i < data.length; ++i) {                 this.insert(this.root, data[i]);
else {     lastValues = JSON.stringify(params.value).replace(/\'/g, '&quote;')     inputSource += `<select ${attributes} class="${inputClass}" last-values='${lastValues}'>`
if (lastLayer) {     let topText = node.topText;
var trackers = storage.trackers;                 if (areaName === 'local') {
elem.rel ='stylesheet';         elem.type = 'text/css';         elem.href = url;     }
init : function() {         this.setHelpUrl(Blockly.Msg.INFRARED_HELPURL);
const duartionRegexp = /([0-9]+ms)/g; const categoryRegexp = /(\[[\w\-_.:]+\])/g; const httpMethodRegexp = /(GET|POST|PUT|PATH|HEAD|DELETE) /g;
if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {                         extended[prop] = extend(true, extended[prop], obj[prop]);                     } else {
import React from'react'; import { PropTypes } from 'prop-types';
var distance = finalPosition.distanceToSquared(imagePosition);
if (showProp) {             children = this.childs.filter(child => child.data.get(showProp));
} else {       console.log(`${context} key '${key}' not found in ${parentKey}`);       error = true;
if (excludes.length) {                 result._doc = mask.mask(result, excludes);             }             return result;
}                 }                 if (!matrixSide) {
var sharedProjects = require('./db/sharedProjects'); module.exports = {};
}); Formsy.addValidationRule('isAlpha2', (values, value) => {   if (value!== null){
r.base = null;   if (r._previousVTree) unmount(r);  }
element.parentNode.MaterialTextfield.boundUpdateClassesHandler(); }
process.on('exit', () => {     if (updateData) {
post('/chat', function(){   this.halt(200)
obj = obj || { id: id, cls: "PFVArType2IEEEVArController" };                 super.submit (id, obj);
import React from'react'; import { Navbar, Nav, NavItem, NavDropdown, MenuItem, Button } from'react-bootstrap'; import { Link, IndexLink } from'react-router';
});       case 'Validation':
var state = uri.getData(path);     if (!state) {
throw "Got unexpected control cell."         }
},   'diagnoses.age_at_diagnosis': {     type: 'Diagnosis',
var outPath = data.path.replace(/(\.js)?$/, '.css');       var css = layerBuffer.join('');
if(err){    cb(err);   }else{
core.item(qs.error, function() {         current._osm_object_type = current.object_type;
"actions": [{             "action": function* (ctx) {               return yield ctx.modules.get(ctx, "event", "send")(ctx, [{                   "eci": ctx.modules.get(ctx, "meta", "eci"),
var height = 0;     for (var index = 0; index < indexOfElement.length; index++) {       var value = obj.get(index);
rows: rows     }   } }
this._frameObject = null;   }
const instance = mount(PageProposal, {       doBefore: () => {         store.commit(`setProposal`, {})
handleFocusChange();   }   observeShadowFocus = function() {     document.addEventListener('focus', handleDocumentFocusEvent, true);
if (infos){             if (!infos[1]){
return compiler.rewrite(code,o); }; exports.rewrite = __root.rewrite;
if (view.isView) {
app.use(noopServiceWorkerMiddleware());       spawn(findpath(), [paths.appPath], { stdio: 'ignore' })        .on('close', code => process.exit(code));     },
return this.i18n.Major;                 case 5:
var formData = new FormData(_this.$form.get(0));         $.ajax({             url: window.location.href,
return  n;                 }
import React from'react'; import { connect } from'react-redux'; import Content from '../../components/Content';
var contents = this.gobble_expression();     match = this.buffer.match(close_paren_regex);     if(match) {      this.buffer = this.buffer.substr(match[0].length);
for (name in properties) {    value = getOwnProperty(properties, name);    if (name === 'implements' || value === undefined) continue;
var _ActiveCallsPanel = _interopRequireDefault(require("../../components/ActiveCallsPanel"));
if (_activeRequests == 0) {       _callback(_config);
throw new Error('stroked round lineJoin not implemented.. add arc/arcTo' );                         case'miter':
const errStr = "Input to set emoji was not a known emoji."       fn(new Error(errStr))       return
{     DockerManager.startOrchestrator(DockerManager.defaultOrchestrator, function (err, result)     {
return field > (value1.getTime());         case this.OPERATORS.dateOperatorIsBetween:
switch (format) {           case 'csv': {             const { send } = res;             res.send = (data) => {
+ _volume._childrenInfo[1]._sliceNormal[2]*_ras[2]     + _volume._childrenInfo[1]._originD;
static removeUrls(message, fn) {     return message.replace(/(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([-.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?/g, fn? fn : "");   }
function logUserRequest(message, conversationId) {  log(message, conversationId, conversationId, 'incoming'); }
loadedGroup = new LayerGroupCollection(null, item.name[defaultLanguage]);                     loadedGroup.id = item.id;
$page.find('#main').append($footer); }
if (schema.type === 'object') {     required = schema.required? schema.required : [];     var instance = {};
throw new Error("Error referencing component '" + root.tag + "'. Components can only be used when within modules. See documentation for more information on t7.module().");             }
frame.minSpeed = matchArray[2];         },         requestLocation : function(message, frame) {            GPSMessageOnlyParse(message, frame);
this.gl.glp().stateTracker.toggleBoolState(data);       } else if (data.type == "num") {         this.gl.glp().stateTracker.changeNumberState(data);
toLabel: ({ assert }) => `(is ${ assertToLabel( assert ) })`,   toGherkin: ({ target, params, assert }) => `Assert that element \`${ target }\`     is located ${ assertToLabel( assert ) }`,
}); uploadFileName = "upload1.txt";
.replace(/\./g, '-')     .replace(/[(|)]/g, '');
$('body').on('click', '[data-reload]', function(){    window.location.reload(true);   });
if (result) {       for (let injection of baseGrammar.injections.injections) {
case 'incollection':       return 'chapter'     case 'conference':
rm.write("<div  id=\"" + oControl.getId() + "_SB\" tabIndex=\"0\" role=\"separator\" title=\"" + oControl.getText("SPLITTER_MOVE") + "\"");   if (orientation == Orientation.Vertical) {    if (oControl.getSplitterBarVisible()) {
if (this._promises) {       for (let i = 0; i < this._promises.length; i += 1) {         data._chainPromise(this._promises[i])
return f32_scratchLoad()   }
if (typeof ace!== 'undefined')     ace = {};
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/scrumptious_frittata-1334210155.swf",  admin_props : false,
setTimeout(() => doQueueNext(msg), 20000);         })
let json = utils.xmlToJson(xml)                  let flatTileMatrix = null;
var csv = require('../js/util/csv'); describe('csv utils', function() {
if (ciTime) {             hoursAgo = (ciTime-bgTime)/(45*60*1000);
if (existsFiles.length>0) {                     existsFiles.forEach(function(f){
switch (name) {       case 'date': {         const dateMoment = evt!= null? evt.format('YYYY-MM-DD') : null;         const dateMoment = evt!= null? evt.format('YYYY-MM-DD') : null;         date = dateMoment? `@${dateMoment}` : null;
} else {     homeDir = process.env.HOME;   }
var r = require('rethinkdb') var mongoose = require('mongoose')
console.log("restarting!");              return;          } else {
var days = [];     var i;     for (i = 1; i < 6; i++) {         var weekDay = moment().day(i).hours(0).minutes(0).seconds(0).milliseconds(0);
exports.stringHexColor = stringHexColor;
if (activeSchedule) {
return fs.copy(src, destination).then(() => {     logger.info(`Docs synced to ${config.blog.outputPath} folder`)   })
import TwiddleResolver from "ember-twiddle/lib/twiddle-resolver";
item.addPartnerRightAction = function (person) {   let node = person.nodeOf;
var path = basis.path;   var consts = require('basis.template.const');
html += "}));";     return html;
} else if (leftNum < rightNum) {   this.prover.evaluate(GH.operatorUtil.create('<', [sexp.left(), sexp.right()]));   var result = this.prover.getLast();
var deps = this.diffDependencies[diff.id];                         deps.forEach(function(diffId) {                             self.trigger('markPublishDiffItem', { diffId: diffId, state: false });
function quasi(value) {     if (value.slice(value.length - 2)!= "${") return cont();
import { Box, Image } from 'grommet' import { string } from 'prop-types'
return await Promise.all(compilation.graph.map(file => {       const path = file.path === '/'? '' : file.path;
this.btnHowToPlay = game.add.button(game.world.centerX, game.world.centerY - (position - 2*range),'ssButtons',      function(){
async eventSocket (Socket, data) {
tag = [tag];   }   if (typeof data === 'function') {     callback = data;
const a = send(prop(), [0])       expect(a.debounce(100)).to.emitInTime([[0, {current: 0}], [160, 3], [360, 4], [710, 8], [710, '<end>']], tick => {         send(a, [1])
});        var done = function() {         if (progress) progress.done();        };        Deferred.all(allInfoDeferreds).then(done, done);
return str;   }
Blockly.Blocks['communicate_ow_read'] = {     init: function() {         this.appendValueInput('VAR')
result = err;     }
decompileFromAst, };
exports.post = function(req, res, next) {   var obj = this.new(req.body);
} else {                         exit(68);                      }
var res = {};             for (var memo_id in memos) {               res[memo_id] = JSON.parse(memos[memo_id]);
} else {             resolved[id] = factory;         }
if (scope.timeout) {                     $timeout.cancel(scope.timeout);
}; } function afterEachAllRewrite() {
for(var index =0 ;index<hosts.length;index ++){    var hh = hosts[index];
const masterPlan = plan();     p1.test('should not run this test', (t) => {       t.fail();
return;             }             if (!goog.object.containsKey(pred, w)) {               forward_fringe.push(w);
}).slice(0, -1).join('\n')   }
for (var x = 0; x < items.length; x++) {                                     var item = items[x];                                     break;
exec(function() {         if (typeof callback === "function") {
cwt.storage.itemLoader = function (itemKey, itemReceiver, errorReceiver) {   cwt.storage.getItem(itemKey, function (err, value) {     if (err === null) {       errorReceiver(err);
log.debug('Starting to install app', app)     const appRegex = new RegExp(`^${vendorPattern}\\.${namePattern}@${wildVersionPattern}$`)     if (!appRegex.test(app)) {
} else {     fromdata = Object.keys(alasql.databases[databaseid].objects).map(       function(key) {return alasql.databases[databaseid].objects[key]}      );     this.selectors.unshift({srchid:'CHILD'});
({ str, tracers } = str(body));     return { body: str, tracers: tracers };   }
, match = regex.exec(string)     seperator = seperator || '---'     var pattern = '^('
webWorker._init();    if ( this.crossOrigin ) webWorker.setCrossOrigin( this.crossOrigin );
default:       }         this.$ele.find('[data-notify="' + cmd + '"]').html(commands[cmd]);
import * as Animatable from'react-native-animatable'; import { View, Text } from'react-native'; import { WoWsLoading } from '../component';
var getUserPrefFunction = function(prefKey){                  return localStorage[prefKey] || defaultPrefs[prefKey];
case 'break': return this.parseBreakStatement();     case 'class': return this.parseClass(CONTEXT.NONE ) ;     case 'const':
lightningHost: 'localhost:10009',   cert: `/Users/${userInfo().username}/Library/Application Support/Lnd/tls.cert` }
propagateArrayChange: function(mode, element, modifiers) {         var affectedMorphs = this.entangledMorphs.without(this.updatingMorph);
var i = 1;  files.forEach(function(name) {
}     var len = message.data10.length;     for (var i = 10; i < 27; i++) {         var version = versions[i][ec_level];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2009-12\/1261531551-3616.swf",  admin_props : false,
if (newId!== data.$id) {
.on('callUpdate', (call) => {         if (call.state === 'done') {
if(!(this instanceof Touche)) return new Touche(nodes);      if (!nodes) {
data: {category: category,                criterion: criterion},
gateway.connect(function() {
const points = this.selected.geometry.parameters.points;         app.editor.execute(new SetGeometryCommand(this.selected, new THREE.LatheBufferGeometry(
this._setGeneratedUser = function(properties) {       var generatedId = this.generatedIdKey;       var user = { id: generatedId, properties: properties };
tChildren.forEach( function( iChild, iIndex) {               iChild.adjust( { left: kPadding, top: tCurrTop, left: (kCellHeight - iChild.iconExtent.width) / 2 });               iChild.set('isVisible', true);
getOBJ : function(){ return bd.getobj(this.pos.bx, this.pos.by);},  setOBJ : function(obj){
}; export { EllipseCurve }
class App extends Component {   constructor() {     super();     this.state = {
} const robohydra = new RoboHydra();
return persistence.getDataForServer(serverId).then(data => {       let settingsReturnBlob = {};
finish(null); }
for (mi = 0,miLen = materials.length;mi <miLen;mi++) {           sourceMaterial = materials[mi];           buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount,mi);
it('Should set path to http:     expect(url({ jackal: { baseUrl: "http:      .to.be.eql('http:   })
},   get: function() {     var collection = this;
const { _ } = require('lib/locale.js'); const { sprintf } = require('sprintf-js');
});         var map = $target.data('mapbenderMbMap').map.olMap;         this.set({
description: $('.content_for_perma', elem).textContent,     projectName: ($(".project"))? ($(".project > title") || $(".project > header > h1 > a")).innerHTML : ""   });
}; export default register
importDynamicInput from './DynamicInput'; import { Text } from 'preact-i18n'; import t from '../Utility/i18n';
resolvedUrl = null;
jQuery.sap.clearDelayedCall(this.oLoadEvent);   }   if(this.oFailedEvent){    jQuery.sap.clearDelayedCall(this.oFailedEvent);
console.log('A personal access token is needed to use the GitLab API\n' + url.grey);     var question = 'Enter personal access token: '.yellow;     while (!options.token) {
Light.prototype._updateScaledIrradiance = function () {
playerSpy(amount);   }
week: 'ddd D/M'         },         eventClick: function (calEvent, jsEvent, view) {           $scope.setTimeSlot(calEvent.start)         },         eventMouseover: function (event, jsEvent, view) {
if (!(validOutPort > 0 && validOutPort <= 65535)) {
window.$ = window.jQuery = require('jquery') require('bootstrap-sass/assets/JavaScripts/bootstrap.js')
});       for (i = 1; i <= groups.length; i++) {         newVal = newVal.replace('$' + i, groups[i]);
this.inchunk = rtmpBody.readUInt32BE();         log('[rtmp handleRtmpMessage] Set In chunkSize:' + this.inchunk);         break;
PlaceholderComponent(quail, test, Case, options); }; module.exports = ObjectMustHaveValidTitle;
offset += 2;         cookie.address = buf.unpackString(addressLen, offset);
}                  else {
return str.split(/[-.]+/) }
notifyLayerVisibilityChanged : function(layer) {         var scaleOk = layer.isVisible();
if (!item) return '';   if (item.encryption_applied) return '🔑'+ _('Encrypted');   return item.title? item.title : _('Untitled');  }
headers["cache-control"] = "max-age=" + self._cache;         for (aH in additionalHeaders) {             headers[aH] = additionalHeaders[aH] || headers[aH];
else if (text == freelanceMenuOptions.editBio) {   return;  } else if (text == freelanceMenuOptions.editCategories) {
typeahead.on("typeahead:initialized", function(event, prefetchedData) {       Ember.run(() => {         self.$('input').focus();
this._show(context, widget);             },             detach: function (context, widget) {                 this._detach(context, widget);             },
var alasql = require('..');  }
onkeyup   : () => {},
event.waitUntil(self.clients.claim.bind(self.clients)); }
data = undefined;         if (args.hasOwnProperty('data')) {             data = args.data;         }
app.use(function redirect() {   this.redirect('/graphql');
document.querySelector('#coinmarketcapli').addEventListener('on', (e) => {
camelize: function(str, upper){       if (upper) { return lib.upperCamelize(str); }       return str.replace(/[-_]+(.)?/g, function(match, chr) {
"use strict"; var EventEmitter = require("lib/events");
var BAUDRATES = [115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 120, 600, 300, 200, 150, 134, 110, 75, 50]; varDATABITS  = [8, 7, 6, 5];
if (typeof arguments[0] === 'object') {             var target = arguments[0];
userAgent: window.navigator.userAgent,                     language: window.navigator.language                 }),
var orientation_ = map_.getPositionOrientation(pos_);
onChange(ev) {              }
console.log('done');   return html; });
const ID_ALIAS = 'nonoonoono';
clashingName1 = 'test'; clashingName2 = () => {}; export default clashingName2;
static ["text"](node, key, vm) {    Register.registDomListener4Hubs("text", node, key, vm)
append("<a>").text("Full Color Wheel"));           }           $listContainer.append($tabContainer);
let ret = true               for (let i = 0; i < this.validators.length; i++) {                 const { name } = this.validators[i]
value: function enableScroll() {       $container.style.removeProperty('overflow');     }
it('must be prototype', function () {     newObj = buildLogger(originalObj, 'name', 'id', function (name, id, ts, event, payload) {         newObj = buildLogger(originalObj, 'name', 'id', function (name, id, ts, event, payload) {             newObj = buildLogger(originalObj, 'name', 'id', function (name, id, ts, event, payload) {                 newObj = buildLogger(originalObj, 'name', 'id', function (name, id, ts, event, payload) {                     newObj = buildLogger(originalObj, 'name', 'id', function (name, id, ts, event, payload) {
const max = this.input.max.eval();         const tmin = min.getTime();
}         mq_sockets[c]['socket'] = mq.socket(zmq_pattern);
import React from'react'; import { Button, Image, Menu, MenuItem, MenuList, Panel, Popover, Tile, Token } from '../'; import { DocsText, DocsTile, Header, Import, Properties, Separator } from '../_playground';
}   var optionsWrapper = document.getElementById('options')   for (var key in options) {
for (let i = 0, cur = outerType; i < len; ++i) {       let type = types[i]       if (cur == "L" && type == "1") types[i] = "L"
mc.get([counterMcKey, registerMcKey], function (err, data) {
var $story = $('#article-wrapper p')  $story.layoutMode()
Store.prototype.del = function(packet, cb) {   var packet = this._inflights[packet.messageId];   if (packet) {
throw new Error();         })
EntityViewsMenu = connect(mapStateToProps)(EntityViewsMenu); EntityViewsMenu = injectIntl(EntityViewsMenu); EntityViewsMenu = withRouter(EntityViewsMenu); export default EntityViewsMenu;
var SignInManager = Streamus.backgroundPage.SignInManager;     var LinkUserIdView = Backbone.Marionette.ItemView.extend({
SQR.Matrix44 = function() {     var Float32Array = Array;     this.data = new Float32Array(16);
options:{                 nav : _modules['carousel']['nav-buttons']['enabled'],                 dots: _modules['carousel']['bullets']['enabled'],                 callbacks: true,
{ "group__opts_group.html#gae68fb615835364c0809555e8dc93f57e":[2,2,3,16], "group__stan_conn_group.html":[2,2,11], "group__stan_conn_mgt_group.html":[2,2,11,0],
module.exports = function() {  for(let x = 0; x <= 10; ++x) {
return cutStr;   }
exports.preCheckTemplateSyntaxForVue = function(source, type, options) {   let {lang} = options;
setFormData: (state, items) => {         state.getFormData[items.ref] = items.value
a = b;                      _startShape.style.x = a;
{   if (!(this instanceof Event)) return new Event ();   Base.apply(this);
var model = new orion.textview.TextModel(fileText, "\r\n");
const normalizeArrayIndices = (path) => {   return path.replace(/\.\d+\./g, "\.*.") }
$rootScope.$on("importComplete", function() {          alertify.success("Import has completed");
this.opt = assign({}, defaults, option);     this.scrollAmount = -this.opt.offsetTop;     this.scrollOld = 0;
view.dimensionFilter = tdimension;      var params = {
el.parent = root;    x += x;    y += y;   });
if (currentBranch.votePeriod === (currentPeriod - 1)) {         percentComplete = ((currentBranch.currentPeriod - currentPeriod) * 100).toFixed(3);       } else {
add: function(other) {   var dx = pos.x + this.x;   var dy = pos.y + this.y;   return Math.abs(Math.sqrt((dx * dx) + (dy * dy)));
OwnDocument = function(userId, doc) {  return doc && doc.userId === userId || Roles.userHasRole(userId, "admin");
exports.getRules = function( url, cb ){   var defaultCb = function( err ){    if( err ){
module.exports = function (config) {
if (!qxloader) {         this.__fireReady();
a1.value = 5;     expect(a1.type).toEqual(Enums.ValueType.Number);     expect(row1.hasValues).toBeTruthy();     var b1 = row1.getCell(2);
unitHeight = 30,             axisThickness = 2,
o.redirectUrl = browser.runtime.getURL('images/1x1-black.gif');         }
proto.setCoords = setCoords;          function Marker(){}          Marker.prototype = proto;
}   for(let y = prevHeight; y < this.height; ++y) {     let row = [];     for(let x = 0; x < this.width; ++x) {       row[x] = null;
customDebugDraw.drawAxes(context);                 this.ngBox2DSystem._world.DrawDebugData();
var transaction = transactionData.transaction;  transactionObj.operations = transaction.operations;  transactionObj.lengthDifference = transaction.lengthDifference;  this.dmSurface.change( transactionObj, this.dmsurface.getSelection() );
}); Router.onBeforeAction(AccountsTemplates.ensureSignedIn, {   only: ['profileEdit', 'profileNew', 'jobEdit', 'jobNew']
winston.error('Database Error:'+ err.message);             throw new Error('Database Error:'+ err.message);         }
configuration.data.filename = environment[key];                 break;             case 'website_auth_signing_key':                 configuration.auth.secret = environment[key];
import { connect } from'react-redux'; import { MonacoEditor } from'react-monaco-editor'; import { ActionGroup, Alert, Button } from '@patternfly/react-core';
case 'last':           while ( (node = node.nextSibling) )  {             if ( node.nodeType === 1 ) return false;
}  var action = dojo.declare("dojox.charting.action2d.MouseZoomAndPan", dojox.charting.action2d.ChartAction, {
mapAndSave(model, pollingLocation);   }
return Class.verifyUserToken(user, session.password);       } else if (isAdminScope(session.scope)) {
}         return (             <div>Enjoy this HTML placeholder.</div>         );     }
if (isNumber(k)) {           if (!isInteger(k) || k < 0) {             throw new Error('Invalid value type.');           }
EffectCompositor.prototype.getSSAOTexture = function (renderer, scene, camera, frame) {     return this._ssaoPass.getTargetTexture();
import { PASTE_GEOM, BOX_GEOM } from './utils/geometry-factory'; import checkProperty from './utils/property-check';
if ('function'!== typeof stepRule) {             throw new TypeError('Game.shouldStep: stepRule is not a function.');
return 'application/octet-binary';
firstItemOffset = $firstItem.offset().top;     for (i = numItems; i > 1; i--) {
this.getstate = function(select) {   var sel = this.files(select),    cnt = sel.length,
for(let i = 0; i < args.length; i++){      var arg = args[i]
if (config.packages) {             for (let i = 0; i < config.packages.length; i++) {                 config.packages[i].location = baseUrl + config.packages[i].location;
}); CKEDITOR.instances['editor'].on('change', function() {
let buf = BN(this.stack.length).toScriptNumBuffer();           this.stack.push(buf);
Kafka.on('message', function(message, commit) {             _options.bus.callback(JSON.parse(message.value));
context.beginPath();         for (x = 0; x < width; x++) {           var time = x / width * duration;
senchaRows = this.get("sencha");                     if (senchaRows) {
function failStatic (basename,...args) {   it(`should refuse to load '${basename}'`, function () {     let failed = false;
.fail( function() {                 $log.error( wpAuth0EmailVerification.e_msg );             } );
if (this.origin_soldier) {           return true
}    else sails.on('hook:controllers:bound:actions', bindCRUDRoutes);
} else {    tmp = a.pipelineSource();    code += a.transformSource();
}     mount(parent, child, current);
userAgent.prototype._onAcceptSuccess = function _onAcceptSuccess(ist, dialog) {   this.inviteServerTransactions.delete(ist);
html = html.replace(/@CLASSNAME/g, '');       break;     default:       break;   }
ascii,         encryptPrivateKey,
return str.split('').reverse().join('').replace(/^\,/, ''); }
result = true;         if (isSuperscriptAtom(stream)) {
var SPAN_CLASS = 'number-display';     var _formatNumber = d3.format('.2s');     var _chart = baseMixin({});     var _html = {one: '', some: '', none: ''};
positionBelow: [left2, top2],         length,
let results = _.transform(settings, (result, setting) => {         let merged = v.merge(setting, routeTableSettingsDefaults, mergeCustomizer);         let errors = v.validate({
try {                     that.writeToCache(descriptor, config, mark);                 } catch(e2) {
var OPCUABaseServer = require("./base_server").OPCUABaseServer; var OPCUAClientBase = require("node-opcua-client").OPCUAClientBase;
var name = this.ds[i+1] || this.ds[i];      this.graphs[instance].updateDataset(       name, instance
import React from'react'; import PropTypes from 'prop-types';
} , _patch_detail: function _patch_detail( bundle ){
const logger = winston.createLogger({     level: process.env.NODE_PRODUTION? 'info' : 'debug',     format: winston.format.combine(
s.delete(next);         next += 1;         deliver(msg);       } else {
match = buffer.toString().trim().match(/#!(.+)/i);     if (match) {
.update('shouldRefetchData', v =>!v);     case SUBMIT_TEMP_GROUP_SUCCEEDED: {       const newGroup = state        .get('newGroup')
exports.removeEmpty(value)   for (let i = 0;i < list.length;i++) {     if (list[i][key] === keyValue) {
else if ( c === "total" ) {           a = 1         }         else {           a = 0
var ppu = 16.0; Cut(function(root, container) {   Cut.Mouse(root, container, true);
case 0x44:      msg = this.parseD(buffer, length);     break;   case 0x45:
externalClasses: ['wux-class'],     data: mergeOptionsToData(defaults),
if (err) return cb(err)         this._loadArchive(this.props.archiveId, context, (err, archive) => {
let rstOutput = '';     if (config.rst && config.rst.length) {       rstOutput += `${rstTitle}\n`;       rstOutput += `${'='.repeat(rstTitle.length)}\n\n`;       rstOutput += `.. code-block:: shell\n\n`;
return false   }   if (Memory.spawnqueue.index[this.name][name]) {     return true
return config; }
var flows = this.get('elements.Flow').content;    toSend = toReceive = flows.length;    if (!toSend) {
act.setAttributes(activity);             this.__analyzerDB.activities.addEntry(act);
self.hoodie.emit('warn', err.message);                 return callback(err);               }
}     return false   }
import SocialButton from '../components/SocialButton'; import { getCurrentYear, socialLinks, manifest } from '../lib/constants';
actions: {     goBack() {},     completed(hostConfig) {
q[_this.get('queryKey')] = query;       const queryObj = $.extend(true, {}, q, _this.get('params'));
name:'ngAnimate',                       files:['bower_components/angular-animate/angular-animate.js']                     }),                     $ocLazyLoad.load(                     {
import { storiesOf } from '@storybook/react'; import {
ol_layer_Geoportail.getCapabilities = function(gppKey) {   var capabilities = {};
ret.priority = (raw_packet[offset] & 0xE0) >> 5;
'markdown': staticPath('js/markdown.js'),     }
} else {    taskList.removeTask(task);
const StaticTeamDescription = ({description}) => (   description? <p className="description read-only">{description}</p> : null );
import React from'react'; import {
return axios.get(this.baseUrl);   }
past(years, refDate) {   let date = refDate? new Date(Date.parse(refDate)) : new Date();
drawValues(scope.vs, canvas, scope.config, col);                            }
case REQUEST_ALL_KNOWTATIONS: {       const onSuccess = knowtations => {         dispatch(receiveAllKnowtations(knowtations));
return this.use(route, handler, method);
return this;   } }
module.exports['internal/streams/pipeline.js'] = [   errorsTwoLevel
for (let i = 1; i < args.length; ++i) {     let obj = args[i];     if (obj) {       for (let key in obj) {
scientific:'modules/scientific/0-0-1/js',   shakemap:'modules/shakemap/0-0-1/js'  },
req.flash(config.constant.flash.error, '注册功能已被停用，请联系管理员: gefangshuai@outlook.com');     var user = req.body;     if (!user.username ||!user.password) {
function testcase() {   if(isNaN(Math.hypot(NaN, 3))) {    return true;
log.start('building static site')     require('.')     build(opts)
case exports.UNZIP:       status  = zlib_inflate.inflateInit2(         this.strm,
}     return s;
var firstDayOfWeek = scheduler.get(FIRST_DAY_OF_WEEK);     var monthStartDate = instance._findCurrentMonthStart();
"use strict"; function Launcher() {}
return this; }
let devDependencies = config.devDependencies;         for (let key in addonConfig) {
var orion = {}; orion.options = Options;
} else if (isVPlaceholder(input)) {     } else {
var waitForLoad = function(callback, constructor) {   if ((document.readyState === 'interactive' || document.readyState === 'complete') && document.activeElement) {     return callback.call(constructor);
this.creator.classList.remove('is-hidden');     window.addEventListener('scroll', this.creatorCallback);   }
},           punctuation: [/[[\]().,:`]|\->/],           operator: [
var rePostInline = /^[-\s`'")\]}>/:.,;!?\\_]/;     var reEnumerationList = /^\s*((\d+|[A-Za-z#])[.)]|\((\d+|[A-Z-a-z#])\))\s/;     var reBulletedList = /^\s*[-\+\*]\s/;     var reExamples = /^\s+(>>>|In \[\d+\]:)\s/;
});     case CHANGE_SIDEBAR_TAB: {       const isActive = action.activeTab === 'events';       if (isActive === state.active) return state;
try {     master.get(['deep','real']).create()   } catch (error) {
await knex.raw(`drop database "${target}"`);     return endProgram(0);   } catch (err) {
if ( data.activated &&!ops.noAck ) {      messages.addMessage( ops.message );
if (date) {                             self.val(formatters.date.dateString(date));
Seadragon.Drawer = function Drawer(seadragon) {     this.ensureArguments('Drawer');
parseFloat(m[1]) > parseFloat(m[2]))    {     Y.error(e.name+' has min_value > max_value', null, 'FormManager');    }
nodeName = nodeExpression.getOperator();             if (isBinaryExpression(nodeExpression)) {                 paramExpressions.push(nodeExpression.getLeftExpression());
else{       final = mw.color.hexToRgb(CSScolor);       final.alpha = 1
data = [];       options = {         delimiter: config.delimiter,
return "八";             case 9:                 return "九";
this.data.children = {}     }     if(this.data.children[label]) {       return true
define(['jquery', 'oroui/js/mediator', 'underscore', 'jquery-ui'], function($, mediator) {     'use strict';
var box = new qx.ui.layout.HBox();       container = (new qx.ui.container.Composite(box)).set({decorator: "black", backgroundColor: "yellow"});       box.setSpacing(5);
console.error("Got a non-GET request to the redirect destination URL");         resp.writeHead(400);         resp.end();         return;
ngClick: "deleteGroup(\{\{ group.group_id \}\},'{ group.name \}\}')",                 awToolTip: 'Delete group',
gl.blendFunc( gl.SRC_Alpha, gl.ONE ); var camera = new GLBoost.Camera(   {
return accumulator;   }
const contact = this.currentContact()     return (contact && contact.messages().fetch().length === 0)? assignment.campaign().initialScriptText() : ''
sequence: DS.attr('number'),     tab_text: DS.attr('string'),
if (angular.isDefined(previousRangeDataPoints) && previousRangeDataPoints.length > 0) {                     prevRangeLine = d3.svg.line()
(function() {     M.DialogView = M.View.extend({
}     process.exitCode = 1;   });
this.addEventListener('mousemove', this.parent.move3d.bind(this.parent, this, controlAxis));       break;     case ROS3D.INTERACTIVE_MARKER_MOVE_AXIS:       this.addEventListener('mousemove', this.parent.moveAxis.bind(this.parent, this, controlAxis));
var TextMode = require("./text").Mode; var FtlHighlightRules = require("./ftl_highlight_rules").FtlHighlightRules;
}); }; module.exports = ListNotUsedForFormatting;
DataAccessObject.prototype[i] = dataSource.constructor.DataAccessObject.prototype[i];         }     }
import PropTypes from 'prop-types'
}       } else if(list[item] instanceof Node){         nodes.push(list[item]);       }
})(jQuery);
this.monitor_element = monitor_element;   monitor_element = create('div');   monitor_element.setAttribute('id','submon');
it('should call onSubmitFailure function with asyncErrors when the invalid form is submitted', done => {     const spy = sandbox.spy();
if (mergePolys instanceof Error) {     done(err);
productionSourceMap: app.buildSourcemaps === true? true : false,
},         drag: {             onMouseOver: (commit) => {
$scope.delBookmark = function(bookmarkId) {         var params = {             id: bookmarkId
const do_destroy_on_timeout =false;     if (do_destroy_on_timeout) {
}));          beforeEach(inject(($q, $rootScope, $compile, StateService, FolderService) => {
var inner = core( head ) ;     while (!this.paused ) {      switch (this.lttype) {
let exists = []   if (thisid) tags = tags.filter(_ => thisGroupMap[_.id].data.includes(thisid))
for (var i=0; i<offers.length; i++) {     var rows = orderBookScreen.makeRows(offers[i]);
this.a_nextPos = gl.getAttribLocation(program, 'f');
valid = state.validate(this, params, transition);       if(!async) transition.resume(valid);     } else {
_Format.prototype.date = function (date) {   return new Date(date).getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()  }
export const packageNameRegex = /^reptar-/;
export async function organizationByUser({ auth }) {   if(auth.user && auth.user.id) {
openInBrowser(schemesHtmlPath, function(err) {       if (err) {         callback(err)       } else {
matcherRegex : (function() {   var emailRegex = /[-;:&=\+\$,\w.]+@/,      domainNameRegex = Autolinker.matcher.domainNameRegex,
for(var i = 0; i < slides.length; i++) {     var oldPosition = parseInt(slides[i].style.transform, 10);     var newPosition = oldPosition - 100;
}                     if (! old) old = new pc['Vec' + len];                     for(i = 0; i < len; i++)                         old.data[i] = value[i];
borderBottomStartRadius: true,   borderRadius: true,
.attr('class','member-entity-name')                        .text(function(d) { return displayName(d.member); });
importNowViewingItem from './NowViewingItem.jsx'; importObserveModelMixin from './../ObserveModelMixin';
export default async function testHasOneHelpers(test, orm) { }
let pos = 0;         for (const key in keys) {           if (keys.hasOwnProperty(key)) {             if (i.name!= null) continue;
var unassignObj = getTagsToAddRemove("unassign", tags, origTags);       var collection ='service_templates/' + id + '/tags';       if (assignObj.resources.length > 0) {
var matchCount = 0;           for (var param in targetParams) {             if (param!= 'q' && params[param] && params[param] == targetParams[param]) {
undo: 'Son değişikliği geri al (Ctrl+Z)',     validationCannotMove: 'Alt alan olarak taşınamıyor',     autoType: 'Alan tipi "otomatik".'+
'line-height': this.getMjAttribute('line-height'),       'text-align': this.getMjAttribute('align'),
export default createComponent([ExportModal, ModalComponent], {     modules: ["Modal", "Loader", "Button"] });
return value;    }
if (body.error) {                         botkit.debug('API ERROR', body.error);                         return cb && cb(body.error.message);                     }
if (_aLeftChannel[pos] < - spiKE_THRESH) {                         startSpikePos = pos;
case'sc':           token = accessToken();           return transferSc(token, from, to, amount, memo);           break;       }
function ExperimentsService($resource) {     var res = $resource('experiments', null, {
function buildTree() {   var obj = new Object3D();   var material = new THREE.MeshFaceMaterial([
injectCSS('res/features/main.css'); ensureDefaultsAreSet().then(applySettingsToDom);
$(iframeElement).on('load', function () {             that.already_loaded = false;             updateLoadStatus(1);             console.log("iframe loaded");
blockUserTrick: function() {     var blockUserTrick = $('.block-tricks-user');
return self.tab.vm.maPager.load();
const params = this.getParams(),       scene =!!physics      ? new Physijs.Scene(
import React from "react"; import PropTypes from "prop-types";
var spaceLeft = false,     vAlign = null;    if(this.parser.source.substr(this.parser.pos).search(/^\^([^^]|\^\^)/) === 0) {
o = $.extend(this.options, this.element.data('options')),    input = this.element;
}       case Actions.ADD_PRODUCT_TO_LIST: {         let idArray = [...state.items];         idArray.indexOf(action.id) === -1? idArray.push(action.id) : console.log("Item is already in list");
return link; };
var cacheKeyLocale= context.locale? context.locale + "_" : '';    var promise = new Promise()
decimalsRounded: 2       })     };
}, function(err, n) {           if (err) {
case'mssql':       return `[${identifier.replace(/[[\]']+/g, '')}]`;
console.log(`not ok - error during cluster.collapse: ${err}`);             return callback(err);         });
}                     for (i = 0, len = value.length; i < len; i++) {                         light = value[i];
this.info("Time to load api indexfile from server: " + (loadEnd.getTime() - loadStart.getTime()) + "ms");       }.bind(this);       req.addListener("failed", function() {         alert("Couldn't load file: " + url);
import { defineMessages, injectIntl } from'react-intl'; import Waypoint from'react-waypoint';
record = registeredUIPreviewerTarget.contentStore.getRecord(             itemId.replace(/\.[^.]+$/, "")         );
var searchPaths = this.searchPaths.filter(function(p) { return existsSync(p); });             chokidar.watch(searchPaths);             var _this = this;
getItem: function(hash) {       if ( (item = this.attachedItems[hash]) ) {
var verticalHeights;   $('.horizontal-context').fadeOut(100);   verticalHeights = this.getVerticalHeights();
'use strict';
}     _This.$GetEvent = GetEvent;     _This.$EventSrc = function (event) {
it('> 1 amino acid long sequence', function() {   aaData = getAstacidDataForEachBaseOfDna('atgtaat', true);
define(['imp/renderModule/nodeShapeRelative', 'imp/math/Vector3', 'imp/math/Vector2'], function(nodeShapeRelative, Vector3, Vector2){
intake.create = function(options){     options = options || {};     var context = require("zeromq");
: table[field].lt(context.request.urlTokenized[index - 1])           case "explicit":
return false;   }  }
describe('.reset()', function() {     var store = new JsonApi DataStore(),         payload = {
if (typeof line ==='string') {       var data = /^([^\(<]+)\s*(<([^>]*)>)?\s*(\((https?:\/\/[^\)]+)\))?/.exec(line)       line = {
$("#"+sourceId).on("select2:open", function (e) {                 e.preventDefault();                 var predefinedStructs = self._package.getStructDefinitions();
chrome.storage.local.get(message.data, function(response) {       sendResponse(response);
function(error) {       $scope.setAlert(new ErrorAlert("Error while clearing index cache", error));      }
r = BigInteger.small[diff];   if (this._s < 0) {
var vm = require('vm'); var nunjucks = require('nunjucks');
__inline('./scroll');
break;         case TypeKind.COMPOSITE:             if (visitor.onCompositeType) {
if (id!== data[pkName]) {     let err = new Error(g.f('{{id}} property (%s)'+             'cannot be updated from %s to %s', pkName, id, data[pkName]));
$("#github").removeClass('hidden');     }else if (value == 'asn'){         $("#github").addClass('hidden');
while (parent) {           nestedIncludes = [_.extend({}, child, { include: nestedIncludes })];
(function(module) {   'use strict';
reporters: ['progress', 'coverage'],
document.getElementById("id_snippet").cols=40;          $('#id_snippet').val("#To avoid indentation errors use tabs for indentation for Python questions");       })    $('#id_type').bind('change',function(event){
return timestamp; }
});     return formatted_data; };
angular.module('copayApp.directives')  .directive('incomingDataMenu', function() {     return {
var chance = require('chance')(),   PouchDB = require('pouchdb'),
return this.i18n.Suspended;                 case 4:
viz.ui.button = setup_buttons (viz, viz.ui) ;   var playerConfig = {
this.init( );   }   Selectpicker.prototype = {
return res.type('application/json').status(200).send('{"state": "' + state + '", "key": "' + req.params.name + '"}');       });
entryOrderLength = entryOrder.length;                 for (i = 0; i < entryOrderLength; i++) {                     o.push(entryGroups[entryOrder[i].format(dateCompareString)].join('') + this.groupEndTemplate.apply(this));
pool.trigger(_tick_);         ticker= setTimeout(tick, max(16, 1000 /leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2;       }else{
cwt.CoSheet = my.Class({
}   state = stringReduce(state.keypath, reducer, initialState)   state = reducer(state, 'END', state.keypath.length, initialState.keypath)
_clickItem = function(scrollWheel, event) {
it('returns root dir from config', () => {   const { rootDir } = createCosmosConfig({ rootDir: '..' });   expect(rootDir).toBe(getCwdPath('..'));
var relation = new Relation(left.header, left.data);     for( i=0; i < right.data.length; i++ ) {       relation.push( right.data[i] );     }
}   }   return false;
return fr.readAsArrayBuffer(packet.data); }
};     const resetCrop = () => {       imageRepresentationProxy.getCropFilter().reset();       croppingWidget.resetWidgetState();       resetCropHandlers.forEach((handler) => {
Object.defineProperty(exports, "__esModule", { value: true });
case fragmentValueTypes.COMPONENT:     break;   }
'/cgi-bin/lookup-tunnel-dns', '/cgi-bin/rootca', '/cgi-bin/log/set']; var PLUGIN_PATH_RE = /^\/(whistle|plugin)\.([a-z\d_\-]+)(\/)?/; var MOCK_SRC_RE = /\.(?:ico|js|css|png)$/i;
success(function(){                         alert('security.delete.user.saved','security.deleted');                         $scope.showUsersView=!$scope.editUserView;
import path from 'path'
}   grid.destroy();  })();
var lines = text.split(splitRegExp),         line, remainWidth, isLaseLine, newLineMode;     for (var i, linesLen = lines.length; i < linesLen; i++) {         line = lines[i];
var keymap = top, valmap       for( var i = 0; i < keys.length; i++ ) {
function _pluginSyntaxAsyncGenerator() {   var data = _interopRequireDefault(require("@babel/plugin-syntax-async-generators"));   _pluginSyntaxAsyncGenerator = function _pluginSyntaxAsyncGenerator() {     return data;
mouseUpHandler() {     this.mouseDown = false;
this.object = object;
submitComment: (parent, text, tags) => Promise.resolve({ ok: true }),
}   return obj; }
var v = req.param('v');   if(!v ||!v.match(/201[0-9]\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}/))     return res.send(400,"Invalid video id");      var thumbnail = '/'+THUMBNAILS_DIR + v + '.jpg';
import React from'react'; import {
server.close();   }
get events() { return false; } }
HEADER_FORMAT = '\n',  CONSTRUCTOR_REGEXP = /(?:function)\s+(?:[A-Z][$\w]*)\s*\([\$\w\s,]+\)/g,  PARENTHESES_REGEXP = /\(\s*[\$\w]+\s*(?:,\s*[\$\w]+\s*)*\)/,  BRACKETS_REGEXP = /(?:^\[)|(?:\]$)/g;
var field_array = [];     for (var field in obj) {       field_array.push(field);
} else {       seekTime = this.hoverPosition * this.duration     }
} else {       for (keys = _.keys(data), i = 0, res = [], l = limiter || keys.length; i < l; i++)         if (predicate(data[keys[i]], keys[i], data)) res.push(data[keys[i]]);
args.schema = path.join(process.cwd(), args.schema); const validSchema = validateSchema(args.schema);
return edge[+(edge.left === cell.site)];   }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/lemene-1334267482.swf",  admin_props : false,
ok(_.isFunction(layout.setView), "Has the setView function"); });
var deferred = new DeferredGlassPaneTarget();   var renderedHandler = function(event) {
}                 return null;             case'vec2':
function HudObject () {} HudObject.stdWidth  = 40;
const swagger = require('swagger-parser'); const _ = require('lodash');
import { Link } from 'gatsby'; import PropTypes from 'prop-types';
return result;   }   var regjsparser = {
var names = Object.keys(tree);   for (var i = 0, l = names.length; i < l; i++) {     var name = names[i];
media.playtime = time     media.custom.currentTime = time   }
if (xhr.readyState === 4) {
x1 = y1 = 0.0;   x2 = 1.0;   y2 = this.canvas.width / this.canvas.height;
function AgenciesController ($log, agencies) {} })();
var failure_T = 'Could not Triangulate'
res.end();   }  });
vdom.val = el.textContent;           for(var child in vdom.children) {             if(vdom.children.hasOwnProperty(child)) {               vdom.children.push(child);             }
cbus.server.searchPodcasts = function(searchTerm, callback) {      request({        url: "https:
if (params.viz.resize) {
set(value) {       if (!Array.isArray(value)) value = [String(value), {}];
return 'pending';       case 1:
switch (action.type) {     case types.ADD_FRIEND: {       const len = state.friends.length? state.friends.length : 1;       const newId = (state.friends[len - 1] + 1) || 0;
render(pageBody, pageData) {     const layoutTemplate = this.layouts[pageData.layout];
return 'application/json';         case Resource.XHR_RESPONSE_TYPE.DEFAULT:
}, function () {                      });
ecma: 6,                         module: true                     },
function showCashBalance(augur, address, callback) {   augur.api.Cash.balanceOf({ _owner: address }, function (err, cashBalance) {
try {                         return new Uint8Array([str], {                             type: 'application/octet-stream'
return conn.connect(config); } module.exports = createClient;
case "amortization":                         calculation_method = calculateAmortization;                     break;
}).catch(done); }
}       } else {
innerTableDate:function () {             let self = this;
return false;
export default class DataGridWidget extends VBox {
export function merge(oldCookieString, newCookieString) {   const oldCookieJar = oldCookieString? parse(oldCookieString) : [];   const newCookieJar = newCookieString? parse(newCookieString) : [];
tocView = function(mode) {     var toc = this.document.querySelector(".github-toc");     if (toc) {
getBrowserName : function() {    return BrowserDetect.browser;   },
write(ctx, ctx.currentIndent);                     writeSVGNode(ctx, i);                     write(ctx, ctx.terminator);
const versionFile = path.join(__dirname, '../src/version.js'); const newContent = `export default '${newVersion}';\n`; fs.writeFileSync(versionFile, newContent);
firstStep = false;    }    for(var i = 0; i < obj.length; i++){     if(typeof obj[i] == 'function'){
db.rpush("log-" + this.room, this.cmdstr, __bind(function() {               return io.sockets.emit('broadcast', _this);             }, this));
