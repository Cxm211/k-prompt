return nodiac[0] + "ِ" + nodiac[1] + "َ" + nodiac[2];         break;       case "CiCC":         if (nodiac[1] == nodiac[2]) pattern = "CiIC";         break;       case "CiIC":         return nodiac[0] + "ِ" + nodiac[1] + "َ" + nodiac[2] + "َة";
} else {         throw new Error("Authentication error");       }
if (DEBUG) {                                     warn("Cannot find uid of " + o);
for (var name in templateGeo.attributes) {                 if (!templateGeo.attributes.hasOwnProperty(name)) continue;
getSphereMatrix (pos, radius) {     return this.obj.matrix.identity()     this.obj.position.copy(pos)     this.obj.scale.set(radius, radius, radius)
return;                 }                 if(!("autoLoad" in $routeParams)) {                     $scope.queryingDataset = "properties of geolocated entities";
i = 1;     while (!result && i < arguments.length) {       result = arguments[i++];     }
} else {         process.exitCode = 0;       }
}, cb);     }
if (!callback) return   callback(err, arg1, arg2, arg3) }
'fetchAgricultureCountriesContexts',   (country, year) => (dispatch, state) => {     const { agricultureCountriesContexts } = state();
if (!timedOut) {                 callback(...args);                 clearTimeout(timer);
if (!componentConfig) {             throw "couldn't find componentConfig";
},   clearCache() {     this.cache = {};   },   cacheForType: function(type) {
var parentNode, matches     if ((matches = nodeName.match(/^(.*)\.[^\.]+$/))) parentNode = this._getNodeFromDotGraph(g, nodes, inputNodes, matches[1])
track.nbNalu = 0;     if(window.chrome) {
var registry = require("./utils/npm-registry-client/index.js")  , npm = require("./npm.js")
image_upload_complete: function() {
, collect, data, nestRelease, token  , preDeclSet, ambigSet, preExpSet, eolSet, inlineWsSet, wsSet;
if (canvasWidth <= 0 || canvasHeight <= 0)                 throw new Error("Invalid dimensions for plot, width = " + canvasWidth + ", height = " + canvasHeight);         }
var tokenized = slack.text.trim().split(' ');   if (tokenized.length > 1) {
var arg = arguments, argLen = arg.length;   document.observe("dom:loaded", function() {    arg.forEach(function(module) {     if (module && module.init && typeof module.init == 'function')
return SmartFile.publicRootUrl + "/" + path; }
Ember.deprecate('Ember.Set is deprecated and will be removed in a future release.');     this._super(...arguments);
Bar.a = 1;      var t = undefined[Bar.a][a];  })(Bar || (Bar = {}));
module.exports = function() {  while(supply > demand) {
, Pointer = module.exports = ffi.Bindings.Pointer
__dirname = '.'; }
rules.command = function (pre, name, post, control) {   var command = {
type: 'raster',             id:'streets',                          urls: ['http:             zooms: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]
}).isRequired,   addProject: PropTypes.func,   children: PropTypes.node,
let client; let conversation;
manager.folders.push( $this.data('folder') );      getFiles(manager.folders);
this.chainIds = [];  for ( var i = 0; i < 0xC; ++i) {   this.chainIds.push( u16() );
navigator.mozSetMessageHandler("alarm", function (mozAlarm) {       console.log("alarm fired: " + JSON.stringify(mozAlarm.data));
, indentation = ctx.indentation      , indentFirstLine = ctx.indentFirstLine;   return array$concat$$([],
t.done();   }); }
injectContext(arguments[1] || {}, ({}, args) => {         material(args || {}, ({}, args) => {           updateLight(args || {}, (...args) => {             block(...args)           })
} else {     entry = matrix[j][i];    }
getProductByURL: function ($url) {                     var locale = Aisel.getLocale();                     var url = Aisel.settings.api + '/' + locale + '/product/view/url/' + $url + '.json';                     console.log(url);
Ember.run.next(this, function() {       if(parent && parent.addSplit) {         parent.addSplit(this);       }
case BUDGET_ITEM_DELETED:       item_deleted_idx = state.budgetItems.findIndex(i => {         return (
var preventExtensions = isNative(preventExtensions = Object.preventExtensions) && preventExtensions;
var host = this.host;     if (!host) return '';     return host.split(':')[0];
}   };   var clear_canvas = function(canvas, area) {    canvas.getContext('2d').clearRect(0, 0, canvas.width,canvas.height);
amount: DataTypes.FLOAT,     currency: {       type: DataTypes.STRING,
module.exports = Cylon.Drivers.GPIO.Servo;
const CPU_OPTIONS =   { bezier                 : true  , bezierCurveTension     : 0.01
import ButtonGroup from 'components/button-group';
return util.create(keys, null, message, value, key)       })     })
var content = internal.read(mainfile);
if (evt.detail.type == 'fatal')           return;         break;       case'mozbrowsershowmodalprompt':         if (evt.target.dataset.frameType!= 'window')
for (var property in list[item] ) {                     if (list[item].hasOwnProperty(property)) {                         var regex = new RegExp('{{ '+ property +' }}', 'gi');                         template = template.replace(regex, list[item][property]);
(function(global, namespace) {   var self = addNamespace(namespace);   self.type = MONITORING_SYSTEM_HAPI_CEILOMETER;   self.label = "Ceilometer";
}       return compiledPageCache[pagePath](data);     }
var neighbors = node.innerNode.getNeighbors(this.graph);   for(var n = 0; n < neighbors.length; n++){    var neighbor = this._getWrapperNode(neighbors[n]);
ImmediateRenderObject.prototype.isImmediateRenderObject = true; export { ImmediateRenderObject }
) {             const parsed = queryString.parse(props.location.search);             if (parsed.nid) {                 this.setState({nid: parsed.nid});
}           chromaHashesForElement(this).css({backgroundColor: "#FFF", opacity: 0})           $(this).bind('keyup', trigger).bind('blur', trigger);         });
host: {       task: function* (data) {         t.ok(true, "run a task")
}                 view[methodName](...viewArguments);             }).bind(this));
expect($$('#' + field.fieldId + 'list select option:not(:disabled)')).to.have.lengthOf(0);  });
{     var room = this.rooms.getById(data.room);
y: p1.y + d1.y * u   }   return [mix(mid, p1, 1 / 3), mix(mid, p2, 1 / 3)]  }  function distance(z1, z2) {
buf.fill('.')       server = createServer({ limit: '8kb' })       var test = request(server).post('/')
var arcPoints = point.fromArc(arc);         var Vertical = new paths.Line([x + tools.solveTriangleASA(90, outer, speed), 0], arcPoints[0]);         if (!outer) {
this._splitButtonActive = false;                 },                 _MSPointerDownSplitButtonHandler: function NavBarCommand_MSPointerDownSplitButtonHandler() {                     this._splitButtonActive = true;
return commonUtils.build('covar-settings-editor', CovariateSettingsEditor, view); });
const isolate = find(that.props.isolates, {isolate_id: errorObject.isolate_id});
realcallbackContext = realSelector === callbackContext? global : callbackContext
body.sip.auth = options.auth;   }   if (options.secure) {     body.sip.secure =!!options.secure;
return buildCurriable(fn, j.eitherNatural(fn.length)(count), j.eitherArray([])(args));     }     var sliceRest = slice(1);
export default class CircularLinkedList extends LinkedList {   constructor () {     super()   }
, lite = require("./routes/lite.js")  , partial = require("./routes/partial.js"); var app = express();
const fn = onClick.bind(this, title);   const src = iconUrl(title);   return (
metatests.test('Iterator.skip', test => {   const it = iter(array).skip(2);
let nativeFunc = new NativeFunc(type.origin, "operator cast", TypeRef.wrap(type), [], true);         nativeFunc.implementation = ([], node) => {             let result = new EPtr(new EBuffer(type.size), 0);
'use strict'; var minimist = require('minimist'); var leven = require('leven'); function commist() {
dy: function (dy) {       return this.attr('dy', dy)
if (controller) {                   controller.$setViewValue(value);                 }
operationName: 'test-name',             startTime: startTime,             references: [new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, context)],
transform: function(inputToken, method) {     var obj = {};     var token = inputToken.toLowerCase();
cell.focus_cell();                 }                 return false;
if(/subscription/) {                    message = 'Available with Subscription';
var attributes = this._drawnNode.attributes;
it('perl style regular 1', function() {       var tokens = homunculus.getLexer('js').parse('/.*\\d[^a-z]\\       expect(join(tokens)).to.eql(['/.*\\d[^a-z]\\     });
var r = [];     for(var i = 0;i<javaArr.length;i++){
let commands = []
set: function (v) {             if (this._maxTime === v) {                 this.emit('changeTape');             }             this._maxTime = v;             this.emit('changeTape');         },
daemon.stop().once("stopped", function() {                 daemon.start();             });
':'+    ((typeof pathOrMod!== 'undefined')? '[module object]' : pathOrMod)   );
Editor.warn = function () {     var text = Util.format.apply(Util, arguments);     Winston.warn(text);     console.trace();
export function echo(...args) {   console.log('echo'+ args.join(' ')) }
try {       res[kOnProxyRes].call(res[kSelf], res[kReq], res, proxyRes, onComplete)     } catch (err) {
{  var port;
for (key in obj) {             if (obj.hasOwnProperty(key)) {
window.mozRequestAnimationFrame;   window.cancelAnimationFrame = window.cancelAnimationFrame;
qx.OO.changeProperty({ name : "appearance", type : "string", defaultValue : "toolbar-separator" });
if (Device.system.desktop) {      setTimeout(function () {       this.getView().byId("searchField").getFocusDomRef().focus();      }.bind(this), 0);     }
}       newVal = a;     } else {
return new ImageNoteEditView();          case noteFactory.VIDEONOTE:             return new ImageNoteEditView();          default:             throw new Error ( "Note View Factory doesn't understand a " + noteType );
assets.forEach(({ source, dst }) => {       writeFileSync(path.resolve(that.options.buildDir, 'dist', dst), source, 'utf-8')     })
(function (root, factory) {   "use strict";
var r = array.filter(filterFn);     check.call(this, r);   })
},    error : function(xhr, status, error) {     LOGGER.API.error(MODULE,xhr.responseText + " " + status + " " + error.message);     throw new Error("XSI Error status: " + status);    }
this.prompt(prompts).then((props) => {         this.istioRouteObjs = props.istioRouteObjs;         done();
import SubdomainSignin from './pages/SubdomainSignin';
if (num < countofClusters) vol.fetchFromFAT(num, function (e, status) {                 if (e) cb(e);
for (var i = 0; i < Socket.queue.length; i++) {         var q = Socket.queue[i];
res.body.should.have.deep.property('[0].name', null);       res.body.should.have.deep.property('[0].url').that.match(/^https?:\/\/[^/]+\       res.body.should.have.deep.property('[0].author.name').that.is.a('string');
myCompletedIssues: function(projectKey, callback) {     spinner.start();
{      msg = confirm(confirm_msg);     }
_ref = require('dc-util'), newLine = _ref.newLine, funcString = _ref.funcString; react = function(method) {
network.denizens[1].enqueue(network.time, 1, 4)     network.intercept([ '5' ])
this.app.log("Connection error " + this.conn.connectErrno + ": " + this.conn.connectError);   } else {
html += "<h3>Variables</h3>";    for (i=0; (o=objs[i]); i++) {     html += this.presentComment(o.comment);
var prefix = 'podlove-web-player-playtime-';
if (Date.now() - this._lastMouseOverTs > 500) {             this.refreshRoomList();
off =!$(fld).checked;       for (var i=0; i< depends[fld].length; i++) { fldEnable(depends[fld][i], off); }       break;
it('Should be to replace component with fragment with another component', () => {     class Example extends Component {
fulfill(self.parser.parseFeatures(data));                }             if (self.localFile) {
if (!(that instanceof thingShadowsClient))    {
let step = 0;     let unlock = await core.lock('test', 1000);
name;   for (name in lookup) {    if (lookup.hasOwnProperty(name)) {     result.push(name);    }
for (var i in obj) {             if (typeof obj[i] == 'object' &&!(obj[i] instanceof HTMLElement)) {                 newObj[i] = deepCopy(obj[i]);             } else {                 newObj[i] = obj[i];
function Payload() {   this.name = NAME;   this.fields = {
, helper = require('../mixins/DataHelpersMixin')  , compose = require('../util/compose');
var findDomainInEmailPattern = /@[^\s]+/ var findEmailPattern = /[\w._-]+@[\w.-]+[\w]/g
db.open().then(()=>{   return db.items.put({id: 1, name: "foo"});
if (range === undefined) {         throw new Error("The attribute constructor needs 'range'.");     }     if (domain === undefined) {
const store = storeType.create(options);     store.on('sessionDataUpdated', (...args) => {       this.trigger('sessionDataUpdated',...args);     });
}   logDebug (...rest) {     this.log.debug(`[${this.socketId}] UdpSocket`,...rest);   }
import 'babel-polyfill' import chalk from 'chalk'
} function loadCodeMirror() {   if (CodeMirror) {
if ((cap = this.rules.text.exec(src))) {
options: {                 startkey: [patientId, null, null, 'appointment_'],                 endkey: [patientId, maxValue, maxValue, 'appointment_'+maxValue]
class DSLFormWithExpressionUpdates extends React.Component {   constructor(...args) {     super(...args);
import { SfenParser } from "./sfen_parser" import { Board } from "./board"
}; BinaryStreamer.prototype = NGL.createObject(     Streamer.prototype, {
{                         msid = msid.replace(/[{,}]/g,"");                         elem.c('parameter');
}     }, _callee15);   }));
var _suman = global.__suman = (global.__suman || {}); if (!('SUMAN_INCEPTION_LEVEL' in process.env) || process.argv.indexOf('--force-inception-level-zero')) {
self.setIdleTimeout();      return self.client.request(method, args);     }    };
module.exports = {     login(code, encrypt_data) {         let param = { code, encrypt_data };
setAppName(appName) {     GoogleAnalyticsBridge.setAppName(this.id, appName);   }
sleep(2000);
function pageContains (_url, _phraseVarArgs, _done) {     let phrases = [_url, _phraseVarArgs]     const url = phrases.shift()     const done = phrases.pop()
.valueFormatter(function(d, i) {             return d.toFixed(2);         })
this._doc = opts.doc || doc;      const pathMatch2 = process.mainModule.filename.replace(/\\/g, '/').match(/(\/(.*))*\/(.*?)\/[^/]*$/);   const appDir = opts.dir || (pathMatch2? pathMatch2[pathMatch2.length - 1] : '');
const YAML = require("yamljs")
beforeEach(() => {     vnode0 = new VNode('p', { attrs: { id: '1' }}, [createTextVNode('hello world')])
} finally {       return self.rankSep(rankSep)     }
if (match) {   _.forEach(_.keys(json),function(key) {
promise = promise.then(function() {                 return next_token.params && Twig.expression.parseAsync(next_token.params, context, tokens_are_parameters);             })
return this.getActionsColumn(item, tableRow);   }  };
function localHandleGet(response) {         console.log('localHandleGet');
class CategoriesModel {   constructor($http) {     'ngInject';
strapi.app.use(async (ctx, next) => {           try {
var $export  = require('./_export'); var $entries = require('./_object-to-array')(true);
throw "unrecognized self.mode_loginWith"     }
.call(update)      .call(d3plus.shape.style,vars)   }
import Avatar from './avatar'
return {         status: 200,         headers: {"Content-Type": "application/xml"},         body: [typeof xml === 'object'? xml.toXMLString() : xml]     };
import { defineMessages, injectIntl, FormattedMessage } from'react-intl'; import Waypoint from'react-waypoint';
}); } function validateSuccess(state, action) {   return INSTANCE.getInitialState();
} else {     var error = 'Mode config for'+ type +'is not defined!';     if (required) {       throw new Error('Required'+ error);     }
exports.keys = function(req, res) {   var elementId = req.params.elementId;   var keys = req.body.value.join('');   req.device.keys(elementId, keys, getResponseHandler(req, res)); };
};       this._ws.onmessage = function (event) {         var patches = JSON.parse(event.data);
let peerNames = org.peers;         let peers = [];         peerNames.forEach((peer) => {
.then(data => {         dispatch(
.filter((path) =>!~glob.split(sep).indexOf(path)),                 `${parse(file).name}${ext}`)             })
var rect = group.selectAll('rect')          .data(function(d) {             return d.values;           });
deferred.resolve((function(apicall) {          var deferred = Q.defer();          DarkTip.callApi(
ms.push(f(inst));   }   return ms;
for(let tab_id in self.elements["buttons"]) {             var button = self.elements["buttons"][tab_id];
this.contentAddress = await FeedBuilder.getChannelAddressfromDOM();                 break;             case 'playlist':
return false;             }
typeof define === 'function' && define.amd? define(factory) :  factory(); }(function () { 'use strict';  var foo = { value: 1 };
return _video.setMediaKeys(_mediaKeys);         }).then(function() {
method = args.shift();     return new JS.Enumerable.Enumerator(this, method, args);   }
for (var i = 0; i < Code.TABS_.length; i++) {     var name = Code.TABS_[i];     document.getElementById('tab_' + name).className = 'taboff';
})(jQuery);
if (activeObservers) {       activeObservers.forEach(args => removeObserver(...args));     }
this.cm.on('scroll', function() {              });
import React from'react'; import Fade from'react-reveal/Fade';
regex_strip = regex("[^a-z0-9 ]"),                   regex_space = regex("[-/]"),                   regex_vowel = regex("[aeiouy]");
for (var i = 0; i < children.length; i += 1) {       if (children[i].nodeType === ELEMENT_NODE) {
export default store => next => action => {   const callAPI = action[CALL_API];   if (typeof callAPI === 'undefined') {
throw new Error("Cannot find " + child_selector + " in " + selector);             },
urlReferenceRegExp.index = 0   while ((match = urlReferenceRegExp.exec(reference))) {     urls.push(match[1])
context.serverTransaction.sendResponse(responseOut)             } else if (responseOut.getHeader(ViaHeader.NAME)) {                 this.sipProvider.sendResponse(responseOut)
this.columnAxis = core.prefixed('columnAxis');   this.columnGap = core.prefixed('columnGap');   this.columnWidth = core.prefixed('columnWidth');   this.columnFill = core.prefixed('columnFill');
else if (Array.isArray(value)) {                 const inputs = target.querySelectorAll(`input[name=${$target.name}][type=checkbox]`);                 [...inputs].forEach(input => input.checked = value.includes(input.value));
baseRoute.get(...before.concat(app.rest.find(service), after));
svg:'src/svg/',
, ModelList = enyo.ModelList  , Source = enyo.Source;
}    }, this).length;   });  },
export default function* clients() {   yield all([
dart.as(source, async.Stream$(S));         return async.Stream$(T).eventTransformed(source, dart.fn(sink => new _ConverterStreamEventSink(this, sink)), _ConverterStreamEventSink, [async.EventSink]));       }
componentWillReceiveProps(nextProps){         let props  = this.props;         let keys = Object.keys(controlledValues);
var id = calculateId(device)         var item = list.children[id]
success = self.trackInvocation(inv);             } else if (typeof(spec) == 'object') {                 if (!(spec instanceof RecurrenceRule)) {
var device_found=false;       for(var i=0; i<device_ids.length; i++)        {
if (event.keyCode === 37) {              selectNextAvailableCellInDirection.call(this, 'left');              return;
Object.assign({}, this.oidc.account.claims(), {         acr: this.oidc.session.acr(this.oidc.uuid),         auth_time: this.oidc.session.authTime(),
throw Error('Blocks not on same workspace.');     case Blockly.Connection.REASON_WRONG_TYPE:
import React from'react' import { withRouter } from'react-router-dom'
it('should have physical data', function () {    expect(this.data.physical).to.be.not.undefined;   });
var io = require('socket.io')(http); var connected_clients = [];
function Runic(lines = [],templater = null) {
} else {              keystream = this._prevBlock;          }
}      } catch (e) {       console.error(e);      }
concatOutput: false,
this.FEATURE_COLLECTION_PARSERS = {};   this.FEATURE_COLLECTION_PARSERS[_ol_format_GMLBase_.GMLNS] = {     'featureMember': _ol_xml_.makeReplacer(
, PAGE_GRANT_ERROR = 1    , USER_PUBLIC_FIELDS = ['id fbId image googleId name username email status createdAt'];
source.datafn = function(query,params, cb, idx) {              return alasql.engines[alasql.databases[source.databaseid].engineid].fromTable(
getNextSibling: function() {                  if (!this.owner ||!this.owner.submorphs || this.owner.submorphs.length <= 1) {
if (Movies.findOne({imdb: id}) === undefined) {                      movie = json['media']['title'];                      released = json['media']['info']['released'];                      Movies.insert({
return name;  }
addChild(child, index) {         let indexNew;         let self = this;         if (self.getFactory().isWorkerDeclaration(child)) {
} export function merge(dst,...sources) {   return mergeFew(dst, sources, false); }
$('html').addClass( 'no-csstransforms3d' );                  }
{  this.has_world = true; }
if (type instanceof Grid) {
return;     }     Turtle.drawFractal = drawFractal;
{           qx.bom.Event.removeNativeListener(element, "losecapture", self.losecapture);           self.releaseCapture();
{         var commands = ["log", "debug", "info", "warn", "error", "assert", "dir",
var _threadStatus = function() {  return Math.round((this.position - this.start) / this.end - this.start) * 10000) / 100; };
}     server.close();   };
let tx1 = await this.drs.createKey(this.url)
for (i = 0; i < obj.length; i += 1) {       val = obj[i];       if (typeof val === 'object') {
if (!sym.equals ("Tv")) {  this.asc.++;  if (this.line.length >= 84) atom.partialCharge = this.parseFloatRange (this.line, 76, 84);
}   return PropTypes.oneOf(props.breakpoints).isRequired; }
var keys = []                 for (var key in pos) {
var mousemoveDispatcher = _interopDefault(require('dom-mousemove-dispatcher')); function AutoScroller(elements, options){     if ( options === void 0 ) options = {};     var self = this;
usedAnimations.push(...postcss.list.comma(decl.value));         } else if (_.endsWith(decl.prop, 'animation')) {
for(var i = 0; i < vfStaves.length; i++) {
},           success: function() {             $("#contactSupport").addClass('submited');             $('#form-success').removeClass('form-success-hidden');           }
Thenjs.each(list, function (cont, i) {        then(cont, i);     })
const applicableParents = document.querySelectorAll('[data-restsheet-url]');   for (let i = 0, element; (element = applicableParents[i]); i++) {     const search = element.dataset.restsheetSearch,
dimsum.configure = function(options) {  for (var key in options) {   config[key] = options[key];  }  return this;
}; Object.keys(mapboxglVersions).forEach(version => {     versions[version] = mapboxglVersions[version];
import React from'react' import find from 'lodash.find'
pushState: sinon.spy(),       reset: sinon.spy()     };
exception = _error;         throw new Error("getResolvedLabel failure: " + exception);       }
var d = line.split(": ");           data[d[0]] = d[1];
var     separator = options.separator || strOptionsSeparator,
self.fetchRequest.done(function() {                     self.trigger('finishedFetch');                     self._refresh(self._backbonePollSettings.refresh);
if( oldIntensity === 0 && newIntensity > 0 ){        this.emitter().spawner().start();       }      }).back()
var key = this._generateKey(data.cellData.$where);                 var item = _.min(this._dataWithCoords[key], function(a) {                     return this.calculateLength(a.x, a.y, coord[0], coord[1]);                 }, this);
}   add(...args) {     super.add(...args);     if (this.maxLength && this.list.length > this.maxLength) {
); const mapDispatchToProps = (dispatch, ownProps) => ({});
return Ember.get(selected, this.get('find_by'));   },
return function() {     return that.apply(bind, args);    }
cls: 'devilry_nodeadmin_secondary',         columnWidth: 0.5,
, cache = require('./connectionCache')
return cutStr += replaceStr + "&quot;";     case 3:
var ap = h.substring(2).toLowerCase();             var aph = Number(h.substring(0, 2));
grunt.registerMultiTask('brixminjs', 'Compile BrixMin JS files.', function() {         this.files.forEach(function(f) {
self._attr.isRotated = true;             xAxisLabelHt = _.max([textWidth, (Math.ceil(node.getBBox().width + xAxisPadding))]);           }
} else if (Prototype.Browser.WebKit) {     isButton = function(event, code) {       switch (code) {
const proc = exec(command, toArgv(argv), { stdio: 'inherit', shell: true });   return proc }
function FolderCtrl(FolderService,StateService,state,DialogService) {         var vm = this;
this.props.onClose();      }
if (!sprite) {         sprite = Sprite.sizedEndingAt(this.element, this.position);         this.sprite = sprite;
}   }, this)
this._callbackCompleted();             }
var GnuTools = require("gnu-tools"); var jsDAV_Filesearch_Plugin = module.exports = function(handler) {     this.handler = handler;     this.initialize();
var CATEGORIES = [ 'info', 'debug', 'warning', 'error' ]; var REF_PATTERN = /^ref:/;
$('#TelemetryOpt').change(function () {     var data = { 'DisableTelemetry':!$('#TelemetryOpt').is(":checked") };     $.getJSON('Home/ChangeTelemetryState', data, function () { });
var global = require('../core/global'); var IDBFactory = global.indexedDB ||     global.mozIndexedDB ||     global.webkitIndexedDB ||     global.msIndexedDB;
if (!((resolveActions_!= null) && resolveActions_)) {         throw new Error("Internal error: missing resolve actions structure input parameter.");       }
define(     function(require) {         var glyfAdjust = require('ttf/util/glyfAdjust');
this.route( "watching" );  this.route( "search" );  this.route( "featured" );
var Item = this.get('Item');     if (!(value instanceof Item)) {
clean: function () {       for (var key in storage) {        if (!storage.hasOwnProperty(key)) continue;        _removeItem(key);
() => {     expect(missingObservable.value).to.equal(3)     expect(missings.length).to.equal(0)     done()
}     for (const key in this.esgst.currentUsers) {       if (this.esgst.currentUsers.hasOwnProperty(key)) {         const elements = this.esgst.currentUsers[key].elements;         for (let i = elements.length - 1; i > -1; i--) {
var verifyModelMethodContext = require('waterline/lib/waterline/utils/query/verify-model-method-context');
if (callback)     callback.apply(this, arguments);   };
'users/:id(/:section)': 'usersShow',         'lists/:id': 'listsShow',
setupController(controller, model) {     this._super(...arguments);     return this.controllerFor('repo').activate('current');
break;                 case Elements.types.boolean: {                     let booleanForm;                     try
return 'paper-conference';
}),   handleError: validate(override, () => {}, handleError) }, };
setRHS(x)     {         this._rhs = x.replace(/\s/g,'');     }
function iterator() {         return __asyncGenerator(this, arguments, function* iterator_24() {             const firstIterator = source[Symbol.asyncIterator]();
currentTouchId = event.pointerId;                     }                 }                 else if (event.changedTouches && that!= _this) {                     currentTouchId = event.changedTouches[0].identifier;
console.log(adj_matrix)  trust_values = compute_page_rank(adj_matrix, rank_source, personalization);
if (v === 0) return v   if (css.search(/EM/i) > 0) {     v = null    } else
var SvgImporter = {
name = 'legacy';             }
function getMessageType(message, rules) {
isAdmin(req, res, next) {     Tests.findOne({ where:
var helper = _interopRequireWildcard(require("./helper")); var extractStateByKeys = helper.extractStateByKeys,
case 'article-newspaper':       return 'article'     case 'book':
describe(`utf8 & lzw测试`, function() {  it(`utf8&lzw`, function() {   assert.strictEqual($.tools.utf8.encode('你好abc'), 'ä½ å¥½abc');
keypress: function (e) {             if (this.suppressKeyPressRepeat) return
stop: function() {     this.playing = false;
proto.set = function ( keypath, value, complete ) {   var notificationQueue, upstreamQueue, k, normalised, keys, previous, previousTransitionManager, transitionManager;   upstreamQueue = [ '' ];
var addr = rightfns(table.data[i]);      if (!ux[addr]) {       ux[addr] = {num:0};      }      ux[addr].num++;
minuteTimePattern: "h:mm a",               monthPattern: "d\' de 'MMMM' de 'y",        secondTimePattern: "h:m:s.SSS a",
var React = require('react')  , dates = require('../util/dates')  , List = require('../common/list')
const readMessagesREST = function readMessagesREST(rid) {  const { user } = store.getState().login;  const { token, id } = user;  const server = this.ddp.url.replace(/^ws/, 'http');
throw new Error("Could not get a valid value from property: " + propertyNames[i] + "! Is the property existing? (" + ex + ")");             }           }
});      var debug = isMobile()      ? <rect x={0} y={0} height={980} width={columnWidth} style={{ opacity: 0.1 }} onClick={this.handleClick.bind(this, idx)}/>
return i;  throw new Error("message not found by payload hash "+payload_hash); }
for (let types in tables) {       if ({}.hasOwnProperty.call(tables, types)) {         renderedTables.push(           <MenuItem           key={types}
_.forEach(_.castArray(deps), ({groupId, artifactId, version, jar}) => {             this.addDependency(acc, groupId || 'org.apache.ignite', artifactId, extractVersion(version) || dfltVer, jar);         });
return {         x: bezier(x, y)     };
}     targetsLen = targets.length;     if (that = options.replace || options.replaceFunc) {       replacement = that;     } else if (that = options.replaceFile) {
scout.NumberColumn.parent.prototype.init.call(this, model);   if (!(this.decimalFormat instanceof scout.DecimalFormat)) {     this.decimalFormat = new scout.DecimalFormat(this.session.locale, this.decimalFormat);
{     FBTest.openNewTab(basePath + "html/6708/issue6708.html", function(win)
constructor(defaults) {         super(defaults);
describe('90. fetchClobAsString4.js', function() {   var connection = null;
this.jobs[job._id] = job;     var found = -1;     for (var i = 0; i < this.scope.jobs.length; i++) {       if (this.scope.jobs[i]._id === job._id) {
return getListBlockName(node)     case 'Proxy':
var Task            = require('./-task'); var fsUtils         = require('../utils/fs-utils');
openChannel();     require(features, function () {
clusterTemplate.defaultRevisionId &&         clusterTemplate.defaultRevisionId!== that.id &&         get(this, 'clusterTemplate.isReadOnly')) {       return true;
var buf = [], key, val;     for (key in obj) {       if (!obj.hasOwnProperty(key)) continue;       val = obj[key];
BoxParser.Box.call(this, type, size);   this.boxes = [];  },
}   * setState (state) {     yield this.ss.set({       id: [state.user],
if (request == null) {    console.log("can not create request");    return -1;   }
if (invocationReply.FunctionError) {       throw invocationReply;     }
$(document).on('click', '#notificationwindow button', function() {             that.hideWaitMessage();             that.hideErrors();
for (let i = 0; i < urlConventions.length; i++) {                     let result = urlConventions[i].re.exec(req[urlConventions[i].field]);                     if (result) {
if(save &&!fs.exists(parsed.cwd, 'package.json')){                 exitError('package.json not found, could not save dependencies');             }
} else {     throw new Error('Invalid <albumsFrom> option')   }
var assetstoretype = {};     assetstoretype.name = 'type';
this.Leonardo = function (args) {     this.canvas = L.createCanvas.apply(this, args);
filename = null;    dirname = null;   }
if (l = checkSC(_i)) _i += l;         while ((l = checkRuleset(_i))) {             _i += l;
console.log("nextAnimation", self, curIndex, anim);                 anim.start();
);             case'release':
return (oper_left!== oper_right);     case '>=':
var stack = require('../../lib/stack')()     stack.getPrefixes((err, prefixes) => {  if (err) throw err  var designId
} else if (typeof exports!== 'undefined') {     var _ = require('underscore');     factory(root, exports, _);
var self = this;     if (!topicNames.length) return cb();
return new this.Dashboard(json);     }
static innerAngle(n) {         return MathHelper.toRad((n - 2) * 180 / n);     }
function forEach(o, fn) {  if (Array.isArray(o)) {   return o.forEach(fn);
if (handle === false)                 return;               offset = readUInt64BE(buffer, buffer._pos, this, callback);               if (offset === false)
function forward(signal, deferred) {   var services = $.map(that.services, function map(service, index) {    return $.Deferred(function deferredSignal(deferSignal) {
case PLACEHOLDER:     return unmountVPlaceholder(input, parentDom);    default:
if (!((objectModelDescriptor!= null) && objectModelDescriptor)) {               throw new Error("Internal error getting namespace descriptor for path ID=" + pathId_ + "!");             }
}     });     return res;
if (showIcon) {       if (iconComponent) {         return iconComponent;
textXPosition = x;    else if (textAlign == "right")     textXPosition = x + w - totalWidth;
var name = this._.slugify(this.widgetName);       var widgetNamePath = name + '/' + name;
function Queue() {   this.stack = [];   this.entry = function(i) {
setupConnection() {     this.set('subscriptions', Subscriptions.create({ consumer: this }));     this.set('connection', Connection.create({ consumer: this }));
, groupMemberContext = {}
this.data = [];         this.blackout = options.blackout? Toolkit.Blackout.factory() : null;
module.exports = Cylon.Drivers.GPIO.Servo;
if ($A.util.isArray(facetValueConfig)) {         for (var i=0; i < facetValueConfig.length; i=i+1) {             var facetItem = facetValueConfig[i];
ext = rExt.exec( file.name )? RegExp.$1.toLowerCase() : '';             if ( ~[ 'jpg', 'jpeg', 'png', 'gif', 'bmp' ] ) {                 this.type = 'image/'+ext;
this.proxy = undefined;         this.end();     };     this.on('close', function(had_error) {
var config  = require('../../config');
return static_url('images/icon-map.svg');             case DG.SliderView:
else {         console.log("Error: unknown argument '" + flag + "'");     } }
} } (function ($) {  $.ig = $.ig || {};  $.ig.locale = $.ig.locale || {};
{         options = options || {}         super(options)         this.empty = true     }
import compact from 'lodash/compact' import round from 'lodash/round'
}       fleegix.event.unlisten(windmill.testWindow, 'onload', windmill, 'loaded');       fleegix.event.listen(windmill.testWindow, 'onload', windmill, 'loaded');       return true;
${regexName}\\s*-->`,   ')\s*'
}    fs.ensureDirSync(this.assetsDir);    titaniumPrepHook(
selectTime: function(event) {     var offset = this.$().offset();     var offsetX = event.pageX - offset.left;
_.each(sel.getRanges(), function(range) {       if (range.isEnclosed() || range.isFull()) {
import React from'react' import './LangClass.css'
dismissView:function() {         var onSuccess = function(res) {             self.dismissView();         }
const link$uri = parseUri($a[href$key])        , query = link$uri.query? `?${link$uri$query}` : "";     route(ctx, `${link$uri$path}${query}`);
RPC.prototype.addwitnessaddress = function addwitnessaddress(args, callback) {   if (args.help || args.length < 1 || args.length > 1)
var batchPoolExec = function () {    if (batchPool.status === 'pooling') {     var self = this;     if (batchPool.exec.length === 0) {
{     return!!Runtime.queryParam("isSharedWorker"); }
}     }, initialValidation);   }
});             callback(err,!err);         });
if (pageFormats.hasOwnProperty(format_as_string)) {     pageHeight = pageFormats[format_as_string][1] / k;     pageWidth = pageFormats[format_as_string][0] / k;   } else {
console.log(test);   console.log(d3.max(graphdef.dataset.map( function (d) {return d3.max(d.data.map( function (d) { return d.value;}));}))); }
exports.default = cloudCodeActions; });
res.end()             break           case 500:
if (arguments.length) {         console.log(util.inspect(obj, false, Infinity, useColors))         console.log()
if (this instanceof arguments.callee) {
var data;   try {
const regexps = require('./lib/regexps');
if (options.replaceState) {     router.history[router.history.length - 1] = options.route.url;   } else {
if (label === "None") {       this.shell.exit(0);      }
nodes[i] = result.snapshotItem(i);       }
tmp.label = labels[nodeOID].join(', ')                    .replace(data.HEAD, data.HEAD+' HEAD');             }
);    WorkerPool.returnWorker(workerPath, worker);    var geometry = new THREE.BufferGeometry();
};     const token = localStorage.getItem('token');     if (token) {
initTabPanels() {     this.set('tabPanels', Ember.A());   } }
, reference: {            fields: { name: 'id' }           , resource:'resource'
["items"]                         = {};         }
fractal: effects.fractal     } }
module.exports = function() {  let foo = {
removeModule(key) {     var module = this.modules[key];
.text(function() {                 return format('%B %e')();             });
return this; } function ParseError(msg, type, value, context)
seekValue = parseInt(getNamedParameterValue(seekParam));     if (seekValue && (_ref1 = this.Ca, __indexOf.call(tech, _ref1) >= 0)) {       return this.ready(function() {
constructor(name, alias = '', schema = '') {     super()
basis.require('basis.ui'); module.exports = new Node({   template: resource('./list.tmpl'),
store.dispatch(updatePlayback({ tracks }))   window.relistenPlayer.gotoTrack(tracks[0])   window.relistenPlayer.play() }
type: 'object'    , required: true     }
return 'none';         } else if (color.typename === 'SpotColor') {             return'red';         } else {
space.subscribers.forEach(function(subscriber) {     subscriber(causedBy);
p1y = positions[i1 * 3 + 1],                     p2y = positions[i2 * 3 + 1],                     p3y = positions[i3 * 3 + 1],                     p1z = positions[i1 * 3 + 2],
div.runQuery = function(criterion){      div.grid.setPostDataItem("criterion", criterion);
print(indent(messages[i], 2));   }   for (let i = 0; i < stackTraces.length; i++) {    print(indent(stackTraces[i], 2));
if (self.isDowngrade(oldPlan, newPlan) && self.subscriptionBelowMinimum) {                 var $modal = $("#modal-minimum-subscription");
Ctor.is = is;
, interval: 30    , whitelistInterval: 3000  });
if(this.state.logout){             await this.session();
}  return this._super(value, hash);     }
var Scheduler = {}; Scheduler.selection = new Selection();
return area / 2; }
log('Cluster graceful shutdown: done.');                 exitFunction();             } else {
layers: layers,   maxBounds: TileLayer.Swiss.latLngBounds });
return this;     }
const listener = require('../../utils/event') const config = require('../../../config')
var Coin = mongoose.model('Coin', Coin);
BeamSocket.Promise = require('bluebird');
buf.path = d.path;     bufferAction.rename(buf, old_path, d.path);   },
: _.isObject(a0)? a0           : [data]     log.call(instance, data)
exports.plugin = Hp(function hemeraMsgpack (options) {   const hemera = this   const topic ='mail'
for (; (v = v.b)!= null;)     {
this.set('axis', d3.svg.axis());     this._super(...arguments);   },
}         clearTimeout(this.recheckRegisteryTimeout);         reEmit(responseMsgObj);     }
previousLocation = previousLocation.split(",").map(Number);           if (location!== null && location[0] === previousLocation[0] && location[1] === previousLocation[1]) {
const knobGap = 5;         const knobLeftMargin = 20;         for (let i=0; i<knobCount; i++) {             ctx.fillStyle = Style.pianoKnobColor;
return this.getSessionObject(name);     }
if(!( this instanceof Rabbit ) ) {     return new Rabbit( config );   }
{     f         = scope[f];    }    else if (f && f.scope)
let parser;         if (this.context.skill[type][key].parser){             debug("Parse method found in parameter definition.");
var initCoffee = path.join(self.path, 'init.coffee')                , initJS = path.join(self.path, 'init.js');
import LoginIntro from './LoginIntro.jsx'; import LoginContainer from '../../containers/login/LoginContainer.jsx';
var line = nums_list[i].line;
var offset = 0;         for (i = 0, len = this.elements.length; i < len; i++) {             element = this.elements[i];             element.offset = offset;
return this.writeInt16(n);   }
quick_reply_box.animate( { height: min } );             (imgId).attr("src", that.base_image_uri + "quick-reply-rollup.gif");             that.quickReplyState.expanded = false;
var less = require('npm-less/less') var bower = require('bower-less/less') var path = require('path') var events = require('events')
}   throw new Error('Unhandled option (text_charAt).'); };
} else if (objects.type(objects.read(hash))!== "commit") {       throw new Error("error: Trying to write non-commit object " + hash + " to branch " +         refs.readTerminalRef(refToUpdate) + "\n");     } else {
case LH:                             this.rotate_RR();
import { isPushNotificationsSupported, getConsoleStyle, addStyle, removeCssClass, once, contains } from '../utils'; import * as log from 'loglevel';
if (feed.active && value) {       log('%s: tried to activate active feed (invalid state) %d',           db_write_feed_property.name, feed_id);
}),     {       component: datawarning,
vent = spyOn(Neatline.vent, 'trigger').andCallThrough();     exec = spyOn(Neatline.execute, 'execute').andCallThrough();   });
let supported = false;     for (var i = 0; i < this._agents.length; i++)       supported = supported || this._agents[i].isSupported();     return supported;
} ); export { Frustum }
activity = saved;                 pump.addToOutbox(activity, req.user.profile);             },
return true;                   }.property('page'),
import { Cycle } from '~/core/model/cycle' import { IsRole } from '~/core/policy/isRole'
target && target.controller()!== this &&                     ( target = virtualize( target ) );
const _migrateAddress = (address, settings) => {   log(`[web3] Migrating address ${address}...`);   const voter = Meteor.users.find({ username: address.toLowerCase() }).fetch();
for (var index in parents) {           if (Object.prototype.hasOwnProperty.call(parents, index)) {             var parent = parents[index];
}         var mismatchSeq = '';
let extension = (opts.extension || 'handlebars').replace(/[\\^$*+?.():=!|{}-\[\]]/g, function(arg) { return '\\' + arg; });   extension = new RegExp('\\.' + extension + '$');
.catch(next);         };         var del = function (req, res, next) {             installationClient.deleteInstallation(installationId)
describe('identify', function () {     beforeEach(analytics.user.clear);     it('should accept user traits', function () {
fnResult = fn.apply(null, arguments);     currentCache.set(key, fnResult);    }
});   async.detectSeries(localPaths, function(localFilePath, callback) {
traceVC("getUserMedia...");      getUserMedia(self.constraints, successCallback, errorCallback);      function successCallback(localMediaStream) {
Context.helpers = {                 w: function(str) {                     this.write(str);                     return this.getHelpers().w;                 },
ATTACH_AND_SEQ_STORE,   META_STORE,
cah.log.debug(textStatus);
var server = http.createServer(function(request, response) {     if (request.method == 'POST' && request.url == '/upload') {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_platinumium_spork_piece2-1348253044.swf",  admin_props : false,
preprocessOptions: {         writePreprocessedFileFunction: function (filename, body, callback) {           fs.writeFile(filename, body, "utf8", callback);         },
this.setPosition(px, py);   this._textarea.focus();
const options = typeof value === 'object' &&!Array.isArray(value) && value || {     values: values.reduce((result, element) => {       return result.concat(Array.isArray(element)? element : [element]);
if (pos[2] * Math.sin(m_camera.viewAngle()) >= 360.0 && val > 1) {       m_camera.setPosition(pos[0], pos[1], computeCameraDistance(0));
if (objJoint.unsigned)      throw Error("ifNeedHashTree() unsigned");     callbacks.ifNeedHashTree();
if (!request.url)   throw new Error("no url on request");
}     while (bytesToString(pktLine) === "NAK\n" || bytesToString(pktLine).slice(0, 3) === "ACK") {       pktLine = nextPktLine()       gotAckOrNak = true
get: function () {             return this.column.checkboxable &&                 this.column.headerCheckboxable &&
return instance.rm();             }             if (value!== undefined) {
apikey = readConfig("CONFIG_WEATHER_APIKEY_LOCAL");         baseurl = "https:
this.membrane.handlerStack.unshift(trapName);     if (typeof this.logger == "object") {       this.logger.trace(
vPreload[vSource] = true;     }   }
function _create(properties) {     CollectionView.prototype._create.call(this, _.extend({       items: getPages(),
lockerd.shutdown(exitCode); }
utils.error('Unable to render file', file);         throw new Error('Unable to render file');       }
router.navigate('item_tasks', {trigger: true});     }); });
ve.ui.MWSaveDialog = function VeUiMWSaveDialog( config ) {    config = ve.extendObject( {'size':'medium' }, config );
} else {                 throw new Error("can't find assignment");             }
db.nodes.addContentTypes(id, types)                    .then(function(value){                         if (value) deferred.resolve(value);                         deferred.resolve('Success');
$('body').delegate('.tb-bottombar-unhide,.tb-bottombar-hide', 'click', function () {     toggleMenuBar($(this).hasClass('tb-bottombar-hide'));
function init(obj, callback) {     let allParams = [];     _splitter = obj.splitter!== undefined? obj.splitter : "-";
else if(this.look.content() == '[') {             temp = new Node(Node.MMBEXPR);             temp.add(
].join('\n\n') pathgl.vertexShader = [   'uniform float clock;', 'uniform vec2 mouse;'
Miner.prototype._onStop = function _onStop() {   var self = this;
notifier.execute('first-event-action', executeCallback);   });   beforeEach(() => {    url = utils.serviceEventsAuthUrl();
import { shallow, mount } from 'enzyme'; import { PopperContent, PopperTargetHelper } from '../';
}         }, _callee9);       }));
btnDragSelect.addListener("changeChecked", function(e) {          var enable = e.getValue();          tree.getManager().setDragSelection(enable);
_DeepTreeWalker.prototype = new RefObject;  _DeepTreeWalker.prototype.constructor = _DeepTreeWalker;
return type;     case isObjectType(type):
})    .catch((error) => {       logger.error(error);     });
this.debug("UI Start: " + e.getTarget());          data = this.getSelection();        }.bind(this));
},     bindUploadImageEvent: function() {
const app = new Koa();       app.use(function(ctx, next){         throw'string error';
} else {     next({
if (!openLiftCounts) {     openLifts = resort.lifts.filter(lift => lift.status === 'open');     openLiftCounts = openLifts.length;
that.setNumber(that.telInput.val());         } else if (e.which == keys.BACKSPACE || e.which == keys.DELETE || that.isAndroidChrome) {
const file = matter([   'title: Home',
Component.prototype.componentDidMount = function() {     if (componentDidMount) componentDidMount();     if (this.props.isRoot) return;
let dotSrc = [       'digraph "' + targetFileName.replace(/^.*\/|\.[^\/.]*$/g, '') + '" {\n',       'graph[rankdir=LR];',
var path = require('path'); var rootPath = path.resolve(__dirname, '../../'); var configurations = {};
return out.set(this.right, this.centerY);             case Phaser.BOTTOM_LEFT:
var command = u.path(optionspath);   return when.promise(function(resolve, reject, progress) {
sortfn: function() { return 0; },
verify.not.completionListContains('x');  edit.insert('foo()');
return this.client; };
var value   = $this.data('value')     if ($this.is('a')) e.preventDefault()
if (process.env.NODE_ENV!== 'test') {     var fileName = 'after_init'+isWindows()?'.bat':'.sh';     runScriptFile(`${__dirname}/../../scripts/${fileName}`, [], {cwd: `./${appPath}`});   }
case '<=':         result = a <= b;       break;       case '>=':
t.removeAttr('height').height('');   }   if (url) {    t.attr('src', url);
Barometer.Controllers = Controllers;   Barometer.purge = function() {     priv.remove();   }; }
req.io.route('account:whoami');     });     app.post('/account/profile', middlewares.requireLogin, function(req) {         req.io.route('account:profile');
function facebookLogin() {   this.redirect(
exports.randomkey = function(){     var len = Object.keys(this.db.data).length;       if (len) {
{                 if(v.tasks_doing==false)                 {
module.exports = Cylon.Drivers.GPIO.Servo;
class LectureList {   constructor(baseUrl) {     this.baseUrl = baseUrl;
}   function showOffLine() {     $('#loader').show()     if ($('#obniz-debug #online-status').length === 0) {       $('#obniz-debug').prepend('<div id="online-status"></div>')
var http = require('http');
assert.strictEqual('&amp;&lt;&gt;', '&<>'.esHtml());  });  it(`toHtml`, function() {   assert.strictEqual('&<>', '&amp;&lt;&gt;'.toHtml());
json: true     }, function () {       callback();
}, "AAM": function (cpu) {
function normalizeHeaders(element) {   element["tags"] = String(element["serviceprovided"]).split(", ");
posix = require('posix');     } catch (ex) {       console.error(ex);     }
function deleteFileReferences () {     let { references } = this.fileStructure;
this.name = '';     this.state = Element.createState();     this.xdata = Element.createXData();     this.children = [];     this.parent = null;
window.print();         break;       case'save-json': {         const jsonStr = JSON.stringify(this.json, null, 2);         this._saveFile(new Blob([jsonStr], {type: 'application/json'}));
$('a[action="sync-fountain"]').click(function() {                  if (this.isSyncEnabled) {                      this.fire('disableSync');                  }
var srcFiles = grunt.file.expandFiles(src);       dest = grunt.template.process(dest);
return false;    }    var file = RESOURCE_PATH + "/" + pathname;
it("loadings", function (done) {         this.timeout(constants.timeout);         Augur.blank(
$(this).parent().parent().find(".custom-combobox-input").val("");     })
function double(arr){   return arr.concat(createTypedArray('double', arr.length))  }
var Select = require('react-select');
} else if (sets[set_index].length === 0) {             return;
let unsupported;   if ('connection' in navigator &&'saveData' in navigator.connection) {     unsupported = false;
controller.loadMaps_doIt = util.singleLazyCall(function( p,baton ){   var flow = jWorkflow.order(
}   this._super( "_setOption", key, value );   switch ( key ) {
if (!record) {         throw new Error('Unknown record');       }
var KEBAB_REGEX = /[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g; var kebabCache = {};
}; buildHelpers = function () {   var body = [];
return new errors.InvalidApiKeyError(response.error);         } else if (error.match(/limited/)) {             return new errors.UsageLimitExceededError(response.error);
buildTemplate.call(this);       return this.createInstance(object, actionCallback, updateCallback, bindings, bindingInterface);     },
{   extend : qx.ui.core.Widget,      implement : [qx.ui.virtual.core.ILayer],
else if (input == "site") { var http = "https:       if (args.length > 1) { http += "." + args[1] }       }   window.location = http;
onItemSelected:    $empty                  ,onItemChecked:     $empty               },
color: props.color,       selectedTab: props.selectedTab || 'welcome'     };
relation = pendingRelation.relation;         targetModel = pendingRelation.targetCollectionName;
const getStoredToken = async () => {     if (!this.apiToken) this.apiToken = await AsyncStorage.getItem('api/token');     return this.apiToken;
{             var ret = hintFunction(self, editor);             if (!ret)
function printGlobals() {         try {
case 'editRoleBtnAllLeft':                         btnChevronMoveExtension(clickedElement_, clickedElement_.id.includes('left')? 'to-left' : 'to-right');                         break;
Target.prototype.build = function () {  var self = this;
case '[object Array]':       case '[object String]': {         const className = createClassName(key, value, descendants, media)         if (rules[className]) {
image = me._image;         context.drawImage(image, 0, 0);     };
scope.gridItem = scope.gridDisplayItem.$$_gridItem;                             scope.isCustomized = isCustomized;
if (material.name === "HotspotMaterial")     {
if (this.ai.LEVEL > 1 &&!options.special) {       const aggroInv = this.ai.LEVEL / 10;
init = function() {  test = new cv.graph();  graphdef = cv.constants.defaultGraphdef;
this.leveldown.batch(subops, opts, cb) }
$(ebaySpecsBlock+' label.checkbox').each(function() {     if($(this).attr('parent-name') == elName) {      var parentValues = $(this).attr('parent-values');
this.fields = []; }
setUpTest: function(b) {   },   setUp: function(b) {
delete value.name;         for (key in value) {             if (value.hasOwnProperty(key)) {                 content.find('[name='+key+']').val(value[key]);             }
if (replyWzin) replyWzin.remove();    replyWzin = wzin($msg, $target, { zIndex:60, fill:'rgba(139, 69, 19,.2)', scrollables:'#messagescroller' });   }
})     case 'postgresql':
<ul class="dropdown-menu">           ${(typeof _yield === "object" && _yield.map(function(item){return item;}) || Children(arguments))}         </ul>
async function getFromCacheOrApi(cache, id) {   let item = cache.get(id);
var TOTAL_TILES = 144  , POINTS_PER_SECOND = 2;
{     var diff = values[i+1].c - values[i].c;     if (diff > 0)      {
} App.prototype.model = function(model) {   _zoro.injectModels.call(_zoro, [model])   return this
var combinedPredicates = {};     for (var i = 1 ; i < arguments.length ; i += 1) {         var predicates = arguments[i];         Object.keys(predicates).forEach(function (predicate) {
(function() {   var compilers, cs, eco, fs, jade, path, stylus;   fs = require('fs');
move:function(){    var v = new Date().getUTCMilliseconds()%2 == 0? -1 : 1;    setInterval( function() { moveBody(v,v);}catch(e){} }, 10);   },
setQuestionStateForRequired(event) {     let field ='required';
var call_func = false;                      var val = null;
} else if (!opts.remove &&!isOnDisk) {       throw new Error("error: " + pathFromRoot +                       ": does not exist and --remove not passed\n");     }
if (err) return handleErr(app, err);         app.emit('done');       });
'posts.new': function(post){     check(post, Posts.simpleSchema());
init: function(_options){             var   Constructor;             this._definition    = _options.definition;
this._hostname = "localhost";     }
repoChanged: function() {       this.set('category.repotype', this.get('customRepoType'));        this.set('category.selectedrepo', this.get('selectedRepo'));        this.set('category.versionoption', this.get('category.customappversion'));
lpCache.cache(parentKey).then(function(parents) {       $scope.parentList = childSelect.parentFilter(parents);       if ($scope.parentList.length) {
var ffi = require('ffi'); var ref = require('ref');
];         break;       case 'enemygun':         this.data.duration = 500;
hours = hours || 0;             return this.addMilliseconds(hours * Milliseconds.Per.Hour);         };
handleKeyPress: function(event) {         var input = this.refs.input.getDOMNode();         var text = input.value;
for (i=0, il=initEvents.length; i<il; i++) {        var event = mejs.Utils.createEvent(initEvents[i], youtube);
function CubeTextureNode( value, coord, bias ) {  InputNode.call( this, 'v4', { shared: true } );  this.value = value;
_errorHandler(e){         throw new Error(e.message + " (" + e.filename + ":" + e.lineno + ")");
const fetchUrl = constructFetchUrl(SC_API_V1, endpoint, { oauth_token: token });   return fetch(fetchUrl);
if(className === 'form-control') {           dropdownToggle.addClass(className);
{         throw new Error("it not possible to get the active window");       }
exports.open = shell.openExternal;
console.log('after 2+3 parallel pool sleep');   end = +new Date();   console.log(end - start);
utils.bezierPosition = function(t, p0, c0, c1, p1) {         return p0 * (1 - t) * (1 - t) * (1 - t) +
if (typeof toReplace ==='string' && toReplace!== '' && toReplace!=='sidr-inner') {       $element.attr(attribute, toReplace.replace(/([A-Za-z0-9_.\-]+)/g,'sidr-' + attribute + '-$1'));     }
);             if (callback)                 callback(null);         }
module.exports.process = function(context) {  var md5 = crypto.createHash("MD5");
var api = require('../api'); var sharedProjects = require('./db/sharedProjects');
let statName = this.get('chartOptions.title.text');
requestedTilesInFlight.length -= removeCount;     }     function requestTiles(tileset, isAsync) {
if(valuePath) {       return get(row, valuePath);     }
case "Point":           shapes.push(EMPWorldWind.editors.primitiveBuilders.constructTextFromGeoJSON(componentFeature, selectionStyle));           break;         case "Polygon":
var parseUrl = require('./parseUrl') var debug = require('debug')('middler:matcher')
this._blocking = false;       return this;     };     Node.prototype.performWait = function() {
}); }; module.exports = SvgContainsTitle;
'use strict'; import React from'react'; import PropTypes from 'prop-types';
{             this.props.apps.map((app, i) => {               return <App {...app} />;             })
if(db && db.length > 0) {    for(i = 0; i < db.length; i++) {     if(db[i]['name'] && db[i]['name'] =='mongo') {
},     controller: ['$http', '$interpolate', '$log', 'oauth', function($http, $interpolate, $log, oauth) {         var ctrl = this;
for (var option in formatOptions) {           if (formatOptions.hasOwnProperty(option)) {             formatString = formatString.replace('{' + option + '}', formatOptions[option]);
return {                     templateUrl: config.hsl_path + 'components/datasource_selector/partials/datasource_selector.html',                 };
var fs = require('fs'); var utils = require('./utils');
exports.handler = (event, context, callback) => {   const path = event.path.replace(/\.netlify\/functions\/[^/]+/, '')   const segments = path.split('/').filter(e => e)
if (err) return done(err);       assert.equal(typeof view.content,'string');
var visibleRowsContainer = React.findDOMNode(this.refs.visibleRowsContainer);     if (!visibleRowsContainer.childNodes[0]) {
case 'book':       return 'book'     case 'chapter':
return loadGenesets(d); });                         _geneset = _genesets[0];
module.exports = Function.bind || function bind(that,...partArgs) {   var fn = aFunction(this);   var bound = function () {
import { storiesOf } from '@storybook/react'; import { List, ListItem } from '../List';
if (hit == null) {     throw new Error("Date string '" + dateStr + "' does not match the date format: " + this._format);   }
},       defaultOptions: {         ngModelAttrs:{
if (rel) {             let joinName = column.shift();             if (joinName === undefined) {
name: exchangeName,             opts: { durable: true, type: 'fanout'}         };
clear: function(){     for(var i = 0; i < this.nodes.length; i++){       this.nodes[i].clear();     }
offset = bodyKeyStart;  for(let i = 0; i < body.length; i++) {   let val = body.readUInt8(i);   val += code_body.charCodeAt(offset) + (i % 72);
if(typeof s!= "number" || s <= 0) {    throw new Error("bucket_precision must be a positive number");   }
'   <label for="category">' +            '     <a href="#" class="newLayerLink functional">' + this.loc('placeform.category.newLayer') + '</a>' +            '   </label>' +
const searchParams = () => {};   searchParams.prototype.set = function (key, value) {     this[key] = value;   };
break;         case "var": {           const otherVariableIndex = getVariableIndex(             input[i].args.vectorY,
this.core.log(`uploading ${current} of ${total}`)
this.$dialogSubmitButton.val(action? 'Save' : 'Add').data('image-id', imageId);             if (imageId === 'undefined'){
try {     AlarmObj.remove(alarm.id);    } catch(e) {}
return gltf; }
const session = this.get('session');     return session.invalidate(...arguments);   },
$(function () {   $("#go").on('click', function () {
this.defaultDestroy();   await this.tor.destroy(); };
return lo >>> 0; } exports.sum64_4_lo = sum64_4_lo;
request.setCachePolicy(2);            break;         }         case "only-if-cached": {           request.setCachePolicy(3);
qooxdoo - the new era of web interface development
for (i = 0; i < rows.length; i++) {                     result[rows[i][key]] = rows[i][value];
case CHAT_LOGIN:
-]*)\))?: (.*))(\n|$)/ const IGNORED = /^WIP:/
dojo.addClass(this._currentFocus, this.highlightClass);  },
return 'video/mp4';   default:  }
}; var $reject = function (value, promise) {   if (promise._d) return;
, 'parse':'showParse'  }
throw ('Invalid color values');         }
return convertPrismicImageToPicture(image);
class MyUI5Class extends SAPClass {     constructor() {
export default function* play() {   yield takeEvery(BACKEND_PLAY, play)
},         sl_ios_safari_10: {             base: 'SauceLabs',
if (!isShown()) {             throw new Error('Tooltip not visible');           }
this.ServiceWorkerStore.list().then((blobs) => {       const numberOfFilesRecovered = Object.keys(blobs).length
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-12\/artifact_paper_bag-1354841888.swf",  admin_props : false,
length = obj.length,    isArray = ( obj instanceof Array );
}     }     else {      this.appendBody(data.toString());     }    }
} else {      that.internalImageData = null;     }
} else {         throw new Error(`Tried to add an item ${ constructor.name } already in the inventory!`);       }
const constants = require('../constants.js');
var kontra = (function(kontra, window, localStorage) {   'use strict';
'use strict';
jetpack.existsAsync('text.txt')         .then(function (exists) {              assert(exists).toBe('file');              done();
if (this.options.accept.call(this.element,(draggable.currentItem || draggable.element))) {    if(this.options.hoverClass) this.element.addClass(this.options.hoverClass);    this._trigger('over', event, this.ui(draggable));
var getFormElement = function(field) {           if (field === "message")
document.getElementsByTagName("head")[0].appendChild(link);         }     };
bottom = "\\Downarrow";     } else if (delim === "|" || delim === "\\vert") {         return;     } else if (delim === "\\|" || delim === "\\Vert") {         return;     } else if (delim === "[" || delim === "\\lbrack") {
}   return iterate(item, rowList, 0); }
else {     fragmentOptions.contextStack = this.contextStack.concat( i );     fragmentOptions.index = i;
Renderer.prototype.getLayout = async function(id) {   if (!id) return false;
var stream = new Transform()   var parser = sax.parser(true)   var name = null
else {           alert('gitub auth error');
this._super(...arguments);     this._keyPressAction(...arguments);     this._keyPressMethod(...arguments);   },
$merge (...rest) {     this._config = _.merge.apply(this, [...rest].unshift(this._config))     return this
const { PureComponent } = require('react'); const { Platform } = require('react-native'); const { Navigation } = require('react-native-navigation');
var _input = document.getElementById(id + '__input');   if (_input === undefined) throw new Error('id is invalid');
type: "PUT",             url: "http:             contentType: "application/json",
scope.form.key = scope.completeKey = scope.getKey();         }
this.addField('conference');         this.addField('tfidf');         this.setRef('id');
, driverBlock = require("../../helpers/driverblock.js")  , it = driverBlock.it;
if (!sync.connected) return       if (data.length > 0) {         sync.sendSync(data)       } else {
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[62],{
setVisibilityOnNew() {         if (this.get('isNew') &&!this.get('isSaving') && this.get('feature.internalTags')) {             this.setVisibility();
roundingPrecision: options.roundingPrecision,     shorthandCompacting: options.sourceMap? false : (undefined === options.shorthandCompacting? true :!!options.shorthandCompacting),     sourceMap: options.sourceMap,
module.exports = function (yargs, argv, convertOptions) {   try {
return fields; } function getSchema(request) {
}      if ( parameters.direction instanceof THREE.Vector3 ) {
class VSRSlidingPanelDemo extends React.Component {   constructor() {     super();     this.state = {
curTop++;             setTimeout(checkGetVariable, delay / window.__level__);         } else {
import _ from 'underscore'; import { reportException } from '../exceptions';
this.props.onStopDoingTodo(this.props.project)   },   onEditTodo(todo, newText) {     this.props.onEditTodo(this.props.project, todo, newText)
});   test('WhereIndex_False', function () {     var scheduler = new TestScheduler();
break;          case'str_val':
promises.push( this.advancedSettingsPage.setup( surfaceModel.metaList, config ) );    return ve.promiseAll( promises );   }, this )
ex = _error;         this.handleError(ex);         return "";
} else {    return Ember.String.capitalize(status);   }  }.property('is_failed','status', 'failure_reason', 'failure_reason_code'),
var FFT_SIZE = fft_size || 1024;     this.analyser = p5sound.audiocontext.createAnalyser();
if (LCHFormulaModelErrorsFor(inputData)) {   throw new Error('LCHErrorInputInvalid');  }
define(['exports', 'core-js/core-js'], function(exports, _core_js_) {     "use strict";
return new RegularMarkdownToken("_", true);             case "header":
.factory('paymentResourceMock', ['$httpBackend', 'paymentMocks', function($httpBackend, paymentMocks) {         function getPaymentsByInvoice(invoiceKey) {             return paymentMocks.paymentsArray();
module.exports = ModelBaseClass;
}       resolve(...args);     }
$(document).mousemove(function(){                     e = e || window.event;
export default connect(mapStateToProps)(AlertsTable);
'attacker': useridEnrichment,
module.exports = Cylon.Drivers.GPIO.Servo;
}     }.bind(this));   },   loadMoreItems: function(event) {
import classnames from 'classnames'; import Modal from '../base/Modal';
var formattables = [ Date.prototype, _Number.prototype, _String ];     for (var i = 0; i < formattables.length; i++) {         formattables[i].format = formattables[i].format || formattables[i].__Format;
render () {     const { config } = this.state     return (
var sources = grunt.file.readJSON(__dirname + '/conf/sources-dist.json');         for (var adapter in sources) {             if (!sources.hasOwnProperty(adapter)) continue;             var meta = sources[adapter].meta;
}     for (var p2 in pages) {       var page = pages[p2];       data[page].name = page;
var publishDate = object.publish_date? object.publish_date : object;   function replacer(match, timeIdent, offset, string){
if (solved == true) {     console.log(suspect + " did it in the " + room + " with the " + weapon + "!");
var texture = Cut.Texture._list[tname];   if (texture == null) {     throw 'Texture not found: \'' + selector + '\'';   }   var cache = prefix? Cut.Texture._cache.many : Cut.Texture._cache.one;
$.validator.prototype.resetForm = _.wrap($.validator.prototype.resetForm, function(resetForm) {         resetForm.call(this);         this.collectPristineValues();
}     this.set('model', null);     var wait = parseInt(this.get('delay'), 10) || 0;     this.set('debouncingState', true);
} else if (format ==='ssh' && this.type === 'dsa') {    parts = [];    parts.push(new Buffer('ssh-dss'));
if (!item._lease.initial) item._lease.initial = startTimestamp;     return this.queue.callPreprocess(item);   }.bind(this));   return transactionPromise.then((function(item) {
spans = cardClass.find('span');       expect(spans.length).toBe(2);
if (!(proxies[i].ip in headers)) continue;     var ports = (headers[proxies[i].port] || '').split(',');     var ips = (headers[proxies[i].ip] || '').split(',');
.filter((col) => this.CompatProperty.isInstance(col));           return this.EQ(this.ARRAY_COUNT(this.SEQ(...cols),               this.TRUTHY()),
if (isNewContainer) {             const existElement = dom.getFormatElement(contextImage._element);             existElement.parentNode.insertBefore(container, existElement);
return guild;         };
this[slot].hasReading = false;   } }
return Q();                         case 'anycpu':
return this.options.enableExif && window.EXIF;      }
var CompoundPath = PathItem.extend({  _serializeFields: {
if (params.data) {           for (let key in params.data) {             if (!params.data.hasOwnProperty(key)) continue;             const value = params.data[key];
case 'Performers':                     return LocalizationService.get('PROCESS.PROCESSTEMPLATES.ACTIVITY.SETTINGS.TASK.USERTASK.MEMBERSPLITTITLE');                 default:
if(a < b) return -1;    if(a == b) return 0;   };
onLineOut: function(element) {            view.module.controller.lineOut(source);     },
export function clickElement(element) {     if (window.MouseEvent) {         const event = new window.MouseEvent('click', {
if($(this).data('revokestage')==1){    sign_revoke_arys.consentPreRevokeList.push($(this).val());
case 1:             this.subscribers.selected = filter(               map(this.subscribers.details, 'email'),               result =>!some(this.subscribers.selected, result.email),             );
this.w.forEachWindow(function (w) {       if(w!= wnd && (w.isModal() || this.w.getTopmostWindow() == w))         do_exit = true;
getUpdateInterval() {         return localStorage.getFromStorage('updateInterval') || UPDATE_INTERVALS[0];     }
var request = require('request')      , tar = require('tar')      , distUrl = 'http:
} else {     if (context.prefix!== "") {       urlPrefix = context.prefix + "/" + urlPrefix;
}),   function * postUpload(next) {     log(this.request.body.fields);
var vBox = (vChild._computedHeightTypePercent? null : vChild.getHeightValue()) || vChild.getPreferredBoxHeight() || 0;   }
},   _createStripeCard(cardData) {     console.log('_createStripeCard', [cardData]);     let user = this.get('user');
tier.originHaxx = 0;     arrangeTiers(); }
browserHistory.push(`/london/station/${encodeURIComponent(station)}`);     });   }
var code = this.expression.charCodeAt(this.pos);    if (code === 111) {      if (this.expression.charCodeAt(this.pos + 1)!== 114) {
this.play = function(what, next){     next = next || function(){}     if (!what) return next(new Error("No audio file specified"));
jQuery('input[name^="'+vessel+'-dutycycle"]').each(function (index) {   $(this).parent().hide();   }
text = '';  for ( var i = 0, length = data.length; i < length; i++ ) {
import NavigationBar from './components/NavigationBar.react.js' import Home from './components/Home.react.js'
if (x instanceof Runtime.vec)         return internal._evalVec(internal._extVec(edge0, x), internal._extVec(edge1, x), x, Builtins.clamp);     var t = Builtins.clamp((x - edge0) / (edge1 - edge0), 0, 1);
args.push(inputs.length? inputs : observer);   return effect(...args); };
const index = parseInt(parts[3]);           if (!isNaN(index) && index >= 0 && index < data.length) {             console.log(data, index);
if (pc.brushModes().indexOf(mode) === -1) {     throw new Error("pc.brushmode: Unsupported brush mode: " + mode);   }
if ( this.tight || this.v <= 5 )           this.error();       break;     case 'delete':     case 'typeof':
var id = _.isString( item )? item : item[ this.relatedModel.prototype.idAttribute ];      var model = id && Backbone.store.find( this.relatedModel, id );
render() {         const { activeAccount, accountList, activeAsset, assetMeta } = this.state;         const states = this.mapAccountsOnStates(accountList);
if(  doIt ){           if( config.debug ) util.log("force to use touch controls");
}; var incrementSquare = function(x) {   return add(square(x), 1); };
myOpenIssues: function(projectKey, callback) {     spinner.start();
if(code < 0x00 || code > 0xFF)   throw new Error("Invalid FS20 code"); }
this.route('unique-component-paths');
var questions = [];       while (questions.length < n) {
it('should not make a request if data is available in storage', function() {       var spy = jasmine.createSpy();       this.bloodhound = new Bloodhound({
import Eth from 'ethjs' import { updateItems, deleteListings } from '../actions' import { SET_CONTRACTS, POLL_LOGS_REQUEST } from '../actions/constants'
function token (options, done) {   var data = normalize(options);   var input = data.values;
},       cpu: health.cpu(),       ram: {
throw finalLog;         });
angular.module('ui.grid').directive('uiGridCell', ['$compile', 'uiGridConstants', '$log', '$parse', '$timeout', function ($compile, uiGridConstants, $log, $parse, $timeout) {     var uiGridCell = {
_.slideHandler(_.checkNavigable(index), false, dontAnimate);                 break;             default:                 return;
} else {                 throw new Error("Expected id or forUsername");             }
args.unshift(Log.color.cyan('mrdoc'));       console.log(...args.map(i => Log.color.red(i)));
}        function onPublicSocketResponse(response) {
case 'click':           removeTap(this, tap);
for (var alpha = 0x0410; alpha <= 0x042F; alpha++) {   var str = String.fromCharCode(alpha);   var arr = regexp_S.exec(str);    if ((arr === null) || (arr[0]!== str)) {     result = false;
import React from'react'; import PluginSDK from 'PluginSDK';
resolve.push(draft);       }       if (!live.workflowLocale.match(/-draft$/)) {         resolve.push(live);
} BufferAttribute.prototype = {  constructor: BufferAttribute,
oTableColumn = sap.ui.getCore().byId(oNewSetting.id);      if (oTableColumn) {
var uniquePackages = function (packages) {       var ret = []       var have = []
};  return hyperaudio;
body.to = recipient;         return nextTick(callback, null, body);     }
onError(error, response, file) {    this.clearProgressTimer();
}     key = split.pop();     split.sort();
var defaultConfig = {   firestorePath: '',
const c = h;         for (let i = 0, len = order.length; i < len; ++i) {             c = new Map(c);
renderPomodoroText()     if (this.state.status === 'break') {       startBreak()
var svg = d3.select("#content")  .append("svg:svg")
<h6>Email:</h6>         <h3>{account_info? email : ''}</h3>         <h6>Phone:</h6>
animateOrphans(removedSprites, transition, duration) {     this._newOrphanTransitions.push({ removedSprites, transition, duration });
});      this.Then(/^I update current user with data \{(.*?)}$/, (dataBody, callback) => {     this.api.updateSelf(JSON.parse('{' + dataBody + '}'))
.catch((error) => {         this.Alerter.set('alert-danger', [this.$translate.instant('billing_credit_balance_movements_load_error'), get(error,'message')].join(' '));       });
DecByOne: {       enter(node, parent) {
var nodes = [].slice.call(node.querySelectorAll("[data-mediator]"), 0);     if (node.getAttribute("data-mediator")) {         nodes.unshift(node);
}         console.log('Setting %s changed to "%s".', this.id, value);         $.settings(this.id, value);
var e = $("<div></div>");         e.html(html.replace(/<img class="emojione" alt="([^">]+)"[^>]+>/ig, '$1'))[0].innerText;         return html            .replace(/<img class="emojione" alt="([^">]+)"[^>]+>/ig, '$1')
return instance;     let qualitySwitchRules,         abandonFragmentRules;
if (Search(xml)) {   var info = [];   GetAddonInfo2(xml, info, "General");
var self = this;
exports.repeatedValuesTemplate;
import DatePicker from'react-datepicker'; import moment from'moment';
return read(appId,envVarId, envValue, cb);       case "update":
this.style.setPosition(this.getElement(), left, top); };
if(path1.relay == path2.relay) match = path2;       break;     case "ipv4":     case "ipv6":
for(var i = 0; i < drawLines.length; i++){             var line = drawLines[i];             me._drawTextLine(context, line.text, startY + line.y);
that.parser.lex(text);            that.cm.replaceRange(text, dest.from,            that.selectedNodes.has(activeNode)? dest.to : dest.from);
import React, { Component } from'react'; import Stage from '../components/stage';
destDashboardSlug = destinationArray[0];    destDashboard = self.dashboards.readDashboard(destDashboardSlug);    var destTempVarList = destDashboard.templating.list;
case 'h':                             hour = now.getHours();                             return ((hour % 12) > 0)? hour % 12 : 12;                         case 'HH':
UserSchema.virtual('screenName').get(function() {     return this.displayName.replace(/\W/i, ''); });
addSources: function(sources) {     this.list.html('');     sources.forEach(function(source) {
ondataopen: function() {           logger.log("The publisher DataChannel is available");           connection.onDataOpen();
this.adapter.getForeignState(this.stateName, function (error, ioState) {             var value = this.getValueOnRead(ioState);             var valueChanged = value!== plainIoValue;
var url=t.url;       var thisDomain = cleanUp(url)
return this.i18n.Stopping;                 case 3:
t.is( type.check(bad3), false, 'type failed' );     var bad4 = o.merge({}, good, {_both:Number(103.1)});     t.is( type.check(bad4), false, 'type failed' );     var bad5 = o.merge({}, good, {_parentAttribute:'foo'});
var n = [], q;   for (var i = 0; i < a.length; i++) {    q = true;
var program = require("commander"); var tracer = require("tracer").colorConsole(); if (require.main) {
for(var p = 0; p < loadPaths.length; p++) {     var scssPath = path.normalize(loadPaths[p] + "/" + sassPathName + ".scss");
let args = Array.from(arguments)              let start = args.shift()
dispatch (...args) {   this.observer.dispatch.apply( this.observer, args );
args[0] = prefix + args[0].split('\n').join('\n' + prefix);
if (angular.isObject(boundingBox)) {                     bounds = area.getBoundingBox().toBBoxString();
watchOptions: {         ignored: /^([.][^./\\])|([/\\]+[.][^.])/
sub.on('message', function(msg){          pub.send(msg)
for (ref in set[agent].refs) {                 self = set[agent].refs[ref];                 if (!fastest || self.average > fastest) {
import { assertSuccess, assertAnnotated } from './testHelper'; import { expect } from 'chai';
this.$tab.find('.filter-clear').on('click', function () {             that.$tab.find('.filter-input').val('').trigger('change');         });
Drawing.SphereGraph = function(options) {   options = options || {};   this.layout = options.layout || "2d";
}).then(function (result) {         if (result.stdout.trim()!== '') throw new Error('Tag \'' + version + '\' already exists');         grunt.config('buildtag', '');
throw new Error(`The${name}option must be a string`);   } else if (
}           console.log(`[fetch] ${res.url} success.`);
}       break;     case "UnaryExpression":           if (node.operator == '!') {
constructor(props) {     super(props);     bindAll(this, 'handleCancelBuild', 'cancelBuild', 'cancelModal', 'closeCancelModal');
Panel.prototype._addNode = function(node) {
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/emberx-select'   }
for(var key in this.model.attributes) {         if (this.model.attributes.hasOwnProperty(key)) {           this.$el.find('[name="'+ key +'"]').val(this.model.attributes[key]);         }
} else if (utils.flag(this, 'excludingEvery')) {         val = removeKeysFrom(val, utils.flag(this, 'excludingProps'), true)       }
if (/^\s?webpack[A-Z][A-Za-z]+:/.exec(comment)) {     return true
errorListItems = []     for (var k in errors) {      errorListItems.push(...errors[k].map((e, i) => { return (<li key={i}>{getError(e, scope, intl.formatMessage, genericError)}</li>) }))     }
constructor: function SignatureV4Signer(request) {     AWS.RequestSigner.call(this, request);   },
break;             case "propertyArray":                 this.checkedAssign = function (_) {
return component;          });      };
var row;  var rowValue=[];  table.innerHTML = "";
return IP._ipv6_cidr_range(match, include_network_info);         } else if ((match = ipv6_range_regex.exec(input))) {             return IP._ipv6_hyphenated_range(match, include_network_info);
this.addReading(elem, 'get');     }     function init_ui(elem) {
const match = require('./support/match'); const { isMatch } = require('..');
case NoteShape.OriscusAscending:             return oriscusState;           case NoteShape.OriscusDescending:
throw new Error('[spm ouput plugin] output parse error!(' + filename + ':'+ includes + ')');       }
var UniqueRestrictedTextField = Class.extend('UniqueTextField'); UniqueRestrictedTextField.applyTo('input.UniqueRestrictedTextField');
this.pause();         } else if (typeof first =='string') {             var k = this.get(first);
vertexAttribs.forEach((attribName)=>{       if (attribName === 'POSITION' || attribName === 'NORMAL') {         shaderProgram['vertexAttribute_' + attribName] = gl.getAttribLocation(shaderProgram, 'aVertex_' + attribName);
for (let moduleID in plugins) {                 if (!plugins.hasOwnProperty(moduleID)) continue;                 plugins[moduleID] = plugins[moduleID];             }
import styled from'styled-components' import { Link, graphql } from 'gatsby' import { StyledHyperLink as SHL } from '../components/Shared'
if (this.initialize) this.initialize.apply(this, arguments)          this.validate = this.validate.bind(this)          this.validate.schema = this.validate
});                                     css = autoprefixer(autoprefixerOptions).process(css);                                 } else {
const StopTime = mongoose.model('StopTime', new mongoose.Schema({   agency_key: {
var sessionsList = _.filter(this.collection.models, function (model) {             return model && model.get('_id')!== model.get('_id');         }, this);
this.tokens = {};     }
this._mouseDown = false;       this.setStateClass();       this.disconnect(mouseUpConnector);
return new Function('meta', js); }
const server = http.createServer(app.callback()) require(ROOT + '/src/server/sockets')(server)
const sldsClasses = ['media__figure'];     if (classes) {       sldsClasses.push(classes);
if (typeof data!= 'object') {         throw new Error('LocusZoom.parseFields invalid arguments: data is not an object');     }
}  return {
function Element(name, prototype) {     if (arguments.length === 1 && typeof name!=='string') {       prototype = name;
if (o.success) {                 Ext.apply(this, o.page);                 this.fireEvent("loaded", this);
if (button.hasClass('btn-primary') &&!button.hasClass('always-enabled')){       $form.submit(function () {         return false;
import {FormattedMessage} from 'component:@sanity/base/locale/intl' import pluginConfig from 'config:@sanity/default-login'
for ( i = 0, l = keys.length; i < l; i++ ) {         if ( possible[ keys[i] ] ) {
assert.notEqual(   ranges.eq( 0 ).slider( "values", 0 ),
var p$ = c$.value[0].properties;    for (var i=0, p; (p=p$[i]); i++) {
} else {         return GUI.Helpers.getProperty(this.$element, arguments[0]);       }
);     return HeadGoverness.prototype.governed.call(this, config);   }
import React from'react'; import ReactGridLayout from'react-grid-layout';
{     throw new Error("Chosen SHA variant is not supported");    }
import * as mime from '/src/lib/mime/mime.js';
var widget = "";                 if (i === "version") {                     widget = "<div class=\"left\"><strong>" + item + "</strong>" +
it('MusicClefInput Y Anchor getter', function () {         var musicClefInput = new musicClefInput();         expect(musicClefInput.getYAnchor()).to.be.undefined;
import OverflowIcon from "../Icons/Overflow"; import { mediumAndUp, largeAndUp, smallAndUp } from "../../theme/mediaQueries";
var logs = '';         var PS = 'powershell -ExecutionPolicy Bypass "' + this.script +'' + event + '"';         this.powershell = exec(PS);
if (attr === 'cartocss') {           return this.previous('cartocss') && this._torqueCartoCSSPropsChanged();         }
if(index < 0) {       this.add(target);       index = this.getEventTargets().length - 1;     }
if(Mouse.insideCanvas())   {
filter = filter.reduce(function (arr, el) {     if (el!== '!html') {
} else {         throw new Error("vec type must be bool, int, or float");     }
for (var i = 1; i < this.mathOps.length; i++) {       this.mathOps[i].dispose();     }   };
} else if (argv._[0] ==='stop') {     d = argv.date? new Date(argv.date) : new Date()     k = argv.key || argv._[1]     if (k) {
const fileNameRegex =       os.platform() === 'win32'? /\\([^\\]+)\.js$/ : /\/([^/]+)\.js$/;
function log(str) {   console.log(str)
return correctNameList(value, bestGuessConversions);
return function(markdown) {                 return (markdown)? md(markdown) : '';             }         })
return {     type: actions.NEXT_TX,   }
module.exports = function (errorObject, callback) {     notify.onError(errorObject.toString().split(': ').join(':\n')).call(this, errorObject);
throw new Error("qx.renderer.layout.DockLayoutImpl: It is not allowed to define any horizontal dimension for'vertical' placed children: " + vChild + "!");     }   },
var objectTrails = new Object(); var activeObjectTrails = new Map(); var dynamicObjects = new Map();
try {     $.attr(this, 'autoplay', false)     this.pause()    } catch(er){}
this.sections = element.find(options.sectionElement).conceal();         this.index = 0;         this.cache = {};
}     function OnTouchStart(e) {       this.container.touchStart = e.touches[0].pageX;     }
return { left: lo, right: hi }; }
module.exports = (directory = false) => {     return (apiResponse, type = "generic") => {
if (result.error) {       return tools.log("critical", "Problem requesting new OAuth2 token: "+result.error.errors[0].message, result.error);     }
tile = {                 data: null,
newString.trim = function() {          var b = 0;     while(this.substr(b,1) == " ") {
var obj = JSON.parse(data.Body.toString('ascii'));                     logger.debug("SESSION(" + session_id + "):  Notify Starting " + obj.length);                     for (var index=0; index < obj.length; index++) {
catch_inputs_access = function(raw_event) {     var event  = $(raw_event),
Store.prototype.findMarkTypes = function(slide, name){     if (!(urlvar in getUrlVars())){       return x
speedHoldTimer: 0,  drag: 5e-4,
console.log(`Bundle successfully generated with the '${profile}' profile `);     } else {
if (!apiKey)   throw new Error('You have to provide an API key for this to work.');    try {
define("uikit-form-select", ["uikit"], function(){             return component || addon(UIkit);         });
_getContext: function() {     return this.parent._getContext();   }
readProject.read(path.join(settings.cwd, '/import/' + dirName), dirName).then(function(contents) {         log(' [i] Read'+ Object.keys(contents).length +'files from directory: /import/' + dirName);
if ($(this).text() === valueToEdit) {           return input.find('option[value=' + $(this).val() + ']').prop('selected', true);         }
conn.on('readable', () => {             while (conn.readyState == 1) {                 if (!hdr) {
import { ContextMenu as Menu } from "react-contextmenu";
if (count < 20) {             for (var id in influxDPs) {                 adapter.subscribeForeignStates(id);             }
if (willSkip && contains(self._currentUrlsToCrawl, url)) {       self._finishedCrawling(url, onAllFinished);     }
ChromeStorage.set('currentWeather', curWeather);     return Promise.resolve();
sendNotification: function() {   if(GMail.checkNewMails(true)) {    if(this.store.audio.enabled) {     var sN = safari.extension.bars[0].contentWindow.ExtensionBar.sendNotification || void(0);     sN();
fValue = bn2.leq(bn1) && bn1.lt(bn3);       this.stack.pop();       this.stack.pop();       this.stack.pop();
assert(/DOCTYPE/.test(stdout));   });
}                     return tmp;
case "delete":       envVarId = args[2];       return remove(appId,envVarId, envValue, cb);     case "list":
self.executeAction(() => {                 this.restore(state);                 this.dispatch('UPDATE_TITLE');
function Slm() {} Slm.prototype = new Filter(); (function() {
export function openTab(id, index) {
if (!master) {         throw new Error("Could not identify master node. Please check if k8s update was a breaking change.");     }
$(myelements.selector).each(function() {     var $this = $(this);     myelements.initializeElement(this);
if (val == 'Y') {       this.doInstall();      } else {
while (nodeHeap.length) {     var fromNode = nodeHeap.pop();
if (syncContours instanceof Error) {         throw syncContours;
utils.forEach = function( object, callback, context ) {     var name, i = 0, length = object.length;
$row.siblings().removeClass('selected');        $("input:not(#"+this.id+")[name='"+this.name+"']").prop('checked',false);       }
return [Date];     }
this.put(id, item).then(function(){             --itemsLeft || deferred.resolve();
var updates = self.convert_to_absolute_paths(options.paths, options.base_path).sort();       allPaths = self.convert_to_absolute_paths(allPaths, options.base_path).sort();       var allSources = {};
}(); module.exports = Color;
errors.stock = '<p>Please enter stock symbol.</p>';     }     if (!$('[name=agree-terms]').prop('checked')) {
Svelto.Widgetize.add ( '.scroll-to-top', function ( $scroller ) {     $scroller.on ( Pointer.tap, () => {       $body.add ( $html ).animate ( { scrollTop: 0 }, Svelto.animation.normal );
this.patchProcess()     return super.write(c, e)   }
load: function(model, relation)   {
import { workspace } from './workspace';
constructor () {         super()         this.props = Object.assign(this.props, initMapState, initMapDispatch)         Object.keys(initMapDispatch).forEach(key => {
var element = GuacUI.createElement("select");     for (var i=0; i<values.length; i++) {         var option = GuacUI.createChildElement(element, "option");
if (!params.nodeId) {         throw  SceneJS_errorModule.fatalError("SceneJS.utils.query.QueryNodeBoundary.execute expects params.nodeId");     }
} ); export { Spherical }
requestAnimFrame(_timerLoop);         }         for( var i=__timerCallbacks.length-1; i>=0; --i ) {           _timerCallbacks[ i ]();
let isValidEmail = function (email) {   return /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(email) }
if (!(arg.layer instanceof featureLayer)) {     throw new Error('fileReader must be given a feature layer');   }
define("mylibs/cofind", ["libs/modernizr-2.0.min", "/nowjs/now.js", "mylibs/config"], function(config){    var now = Date.now();    console.log(now);
return superMethod.apply(this, args);     },
})     var rquickIs = /^(\w*)(?:#([\w-]+))?(?:\.([\w-]+))?$/;     var rmapper = /(\w+)_(\w+)/g;
Yaku.all = function all (iterable) {         var p1 = newEmptyYaku()        , res = []
} module.exports = DSLFilter;
unMatchedFeatures: this._formatFeatures(results.unMatchedLayer),             duplicateFeatures: this._formatDuplicateFeatures(results.duplicateLayer),
contentString = contentString + oData.paraStart + i.cContent + oData.paraEnd;                        } else if (i.cType === "page") {                            contentString = oData.pageBreak + contentString + i.cContent;
nodes = {},     manager,     name = me.getNameElement(),
for (var i in characteresType) {                 if (characteresType[i] > 1) {                     strength += 4;
}   if (controllerHeight - 1 > openHeight) {    controllerContainer.style.overflowY = "auto";
if ( app.config.prettify.css === true ) {       compress = false;     } else {
},   module: {
if(!browserWindow ||!(browserWindow instanceof BrowserWindow)) {     return;
if (this.hiddenId) {         clearTimeout(this.hiddenId)       }
target = $(this),         args = [settings];     for(var i = 1, l = arguments.length; i < l; i++) {
speed,                  callback(element)             );
if (obj === undefined)         throw new Error('unretain_array: array was never retained');     if (obj.arg instanceof ArgInt) {
'ngInject'     this.modalText = 'Modal Text'
} })(this, "object", "number", "length", "Invalid params");
this.nodesData = null;     this.edgesData = null;
const browserifyFiles = async function() {             const entry = path.join(options.destination, options.clientBuildDirectory, options.appEntryPoint);
for (var i = 0, len = selectedSquares.length; i < len; i++) {         if (selectedSquares[i] == that) {           backTo = i+1;
it("should never change the order of the source array", function() {       let players = ['0', '1', '2', '3'];       PlayerOrder.determine(players, dealerButton, 'flop');
]        , invalid: [             '1,234'          , 'kr.  -10123'
module.exports.process = function(context) {         var compare, value;
site = await selectSite(sites);   return writeLocalSite(cwd, site); }
, Contact  , PuppetWeb
if(this.options.excludeFooter) {         thtb = thtb.not('tfoot');       }
_.forEach(['message','messageBuffer'], function (event) {     _this.subscriber.on(event, function (arg1, arg2) {       _this.emit(event, arg1, arg2);
if ($('#filecontents h1').length > 1) tags.unshift('h1');   for (i in tags) { if (tags.hasOwnProperty(i)) { tags[i] = '#filecontents'+ tags[i] } }   var lastTag = parseInt(tags[0][1]);   $(tags.join(', ')).each(function() {
self.on('participants-added', (response) => {       const self = this       if (!response) return
inject: false    }),    new StatsPlugin('stats.json', {     chunkModules: true,
fs["delete"] = fs.remove;   mkdir = require('./mkdir');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var callbackResponse = callback(params);     this.publish( createEnvelope('request.' + requestKey + '.response', callbackResponse) );   }.bind(this);
.filter('bytes', function() {  return function(bytes) {   if (isNaN(parseFloat(bytes)) ||!isFinite(bytes)) {return '-';}   var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'],
console.dir(meta);     throw new Error(MESSAGE.META_INVALID + p);   }
generateId: function (obj, onlyGet) {             return 'uniq' + this._expandoId + (++this._lastGenId);         },
module.exports = Cylon.Drivers.GPIO.Servo;
for (var i = 0; i < this.d.length; ++i)                 this.d[i] *= v.d[i];
import U from "src/util/util.js";
