if(fs.existsSync(path)) {     throw new Error('The file "' + path + '" already exists!');   } Expected an object to be thrown.
this.formTitle = '修改字典'         detail = this.selRow.detail.split(',');         details = []         detail.forEach(function(val,index){           var arr = val.split(':') The array literal notation [] is preferable.
var response = {      cookies: req.cookies,      host: req.headers.host,     cache: qs.parse(req.headers['cache-control']) || {} ',' should be placed last.
var _super = this.$super,                     _self = this.$self,                     ret; Unexpected 'this'.
ret[inputtypes] = (function(props) {         for ( var i = 0,len=props.length;i<len;i++ ) {             f.setAttribute('type', props[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var that = this;         this._properties = attrs || {}; Avoid arguments.callee.
}    var name = $(this).val(),      filter = controls.search.filter;
self = this,      start = function() {       var CodeMirror = this.CodeMirror,        ta   = $(textarea), Unexpected 'this'.
var ring_desc_start = ring_start + 4;         var flags = this.memory.read16(ring_start), Unexpected 'this'.
StringPrototype.escape = function() {     return _.escape(this) } StringPrototype is read only, properties should not be added.
}; }(this)); Unexpected 'this'.
if (!gl) {         throw new Error("WebGL: Failed to create a WebGL context!");     } Expected an object to be thrown.
var concat = require('concat-stream') var context = require('../context') module.exports = load ',' should be placed last.
evt.preventDefault();                             self._trigger('selected', null, item);                             modal.close(); Unexpected 'this'.
var baseDir = config.assetsDir + 'img';     src = this.buildGulpSrc(src, baseDir, '** Unexpected 'this'.
{                     constructor: FindSearch,                     pageName:'search'                 } ',' should be placed last.
this._streamBindings = undefined;     this._super(...arguments);   }, Use the spread operator instead of '.apply()'.
for (var k in result.response.headers) {                                         if (result.response.headers.hasOwnProperty(k)) {                                             name: k, The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
targetElement.setAttribute('id', container.getAttribute('id'));     }     for(key in container.style) {       targetElement.style[key] = container.style[key]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}(window));
"Position cursor after last char and hit backspace", function() {         this.editor.selection.set({           start: [0, 4], Unexpected 'this'.
if (input.eventType!= 1) {    throw new Error("Parser must be on START_ELEMENT to read next text.");   } Expected an object to be thrown.
var section = null;         var cursorPos = this.editor.cursorManager.getCursorPosition();
describe("create an h5 and group ", function () {          let file; Missing space after *.
var buffer = context.createBuffer(1, 44100, context.sampleRate)       var upsampled = utils.upsample(array, 44100) ',' should be placed last.
}       }, _callee);     })); Unexpected 'this'.
}             handler(self.collectEventData(element, type, ev));         }; Unexpected 'this'.
a = query.split(/\s+and\s+/);            for (_i = 0, _len = a.length; _i < _len; _i++) {             s = a[_i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
async function _setup (accounts){   mockToken = await MockToken.new(); Unexpected 'this'.
var $export = require('./_export'); var $task = require('./_task'); $export($export.G + $export.B, { ',' should be placed last.
helpers.each(values,function(dataPoint,index){         var color = that.colorManager.getColor(dataPoint);         datasetObject.bars.push(new this.BoxClass({ Unexpected 'this'.
method: 'POST'         }).done((resp) => {             this.set(resp); Unexpected 'this'.
if (source.warns)         warns.push(...source.warns); Use the spread operator instead of '.apply()'.
.reply(500);       this.customDomains.verify(this.data).catch(function(err) {         expect(err).to.exist; Unexpected 'this'.
Validator.prototype.validate=function(grp, args){     var isGroup =!(!grp ||!grp.length);     var inputs  = isGroup? this._inputsForGroups(grp) : Object.keys(this._inputs); ',' should be placed last.
define(Array, 'compact', function() {     var results = []; Array prototype is read only, properties should not be added.
}(window || global));
Promise.all(promises).then(function () {                     var canvas = document.createElement("canvas"); Use the spread operator instead of '.apply()'.
return globalFunctionTrampoline[globalFunctionName](...arguments)       } else { Unexpected 'this'.
if ( isFunction ||!( l <= 1 || typeof value!== "string" || jQuery.support.checkClone ||!rchecked.test( value ) ) ) {    return this.each(function() {     var self = $( this );     if ( isFunction ) { Unexpected 'this'.
return {       contentType : HoneyProxy.getContentTypeFromHeaders(resp.headers)      } Use the rest parameters instead of 'arguments'.
spyOn(this.addon, 'getDOMImage').and.returnValue(stubbedImage);         this.$el.addEventListener('input', function () {             inputTriggerCount++; Unexpected 'this'.
memo = (function(f) {         var value;         return (function(x) {             if ((value === undefined))(value = f(x));             return value; Use the spread operator instead of '.apply()'.
if (sourceName) {         this.collection.add(val);         memo[name] = val.id;       } else { Unexpected 'this'.
for (let p = 0; p < polygons.length; p++) {         let polygon = polygons[p][0]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
values = this.uniqueValues;     }     this.uiFilteredValues = {};     for (var i = 0; i < values.length; i++) { The object literal notation {} is preferrable.
function PrivateKey(version, buf, compressed) {   PrivateKey.super(version, buf, compressed);   if (compressed!== undefined) Use the rest parameters instead of 'arguments'.
var server = require('./server') var request = require('../index') var tape = require('tape') var s = server.createServer() ',' should be placed last.
'upper',     function(s) {       return (String(s)).toUpperCase();     } Do not use String as a constructor.
function fill (a, b, c) {       return setter(Array.prototype.fill.call(this, a, b, c))     } Unexpected 'this'.
return function() {               return __slot_1.self_sig = arguments[0];             }; Use the rest parameters instead of 'arguments'.
var focused  = dates.eq(date,  this.state.focusedDate,  'year')          , selected = dates.eq(date, this.props.value,  'year');
}     }, _callee6);   })); Unexpected 'this'.
return this._config; }; Use the spread operator instead of '.apply()'.
, 'collection'    , 'connections/server'    , 'connections/repl_set_servers'    , 'connection'    , 'cursor' ',' should be placed last.
exports.testCases = [      'specs/util-path/test.html' ',' should be placed last.
bespin.subscribe("file:saved", dojo.hitch(this, function(e) {             this.fetchFileUpdate(e.filename);         })); Unexpected 'this'.
TNTools.register('fontChange', function(event) {   var font = $(this).val();   proof.empty(); Unexpected 'this'.
}         return invoke(fn, parameters);     } Use the spread operator instead of '.apply()'.
cache: false,             data: $this.serializeArray(),             type: 'PUT', Unexpected 'this'.
s += "var " + __rt + "=require('streamline/lib/callbacks/runtime').runtime(__filename)";   Object.keys(rt).forEach(function(key) {    var k = _safeName(options.precious, key); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (this.__isDrag) return;         if (!this.__scrollOntoEdge()) evt.preventDefault();         updateRecords(evt); Unexpected 'this'.
var request = require('request')  , qs = require('querystring'); module.exports = function routes(app){ ',' should be placed last.
function native_BoolImplementation_EQ(other) {   return typeof other == 'boolean' && typeof this == 'boolean' && other!= null; } Unexpected 'this'.
case KEY_ENTER:             return onEnter(...args);         case KEY_TAB: Use the spread operator instead of '.apply()'.
else {                 throw new me.Error("no level loader defined");             }             return true; Expected an object to be thrown.
var Advisor = function() {  this.pointcut = null;  this.advice = null; Unexpected 'this'.
{ from:"/edit ',' should be placed last.
this.checkStates();     this.collection.reset(selectors); Unexpected 'this'.
var Atom = I.inherit(function Atom() {     AbstractMutable.call(this);     if (arguments.length) this._emitValue(arguments[0]); Unexpected 'this'.
return _ret = (_temp = (_this = __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default()(this, (_ref = Test.__proto__ || Object.getPrototypeOf(Test)).call.apply(_ref, [this].concat(args))), _this), _this.state = {       disabled: false, Use the spread operator instead of '.apply()'.
, join = require('./shieldbattery/join') var shieldbatteryRoot = path.dirname(path.resolve(process.argv[0])) var socket = io.connect('https: ',' should be placed last.
componentDidUpdate(prevProps, prevState) {     if (this.state.editing &&!prevState.editing) { ',' should be placed last.
return cb(err);            fs.write(info.fd, msg); Unexpected 'this'.
}       return this.fromBuffer(buf,...rest)     } Use the spread operator instead of '.apply()'.
const argument = [...arguments];     this.imageURL = ``;     this.options = {}; Use the rest parameters instead of 'arguments'.
} else {         throw new Error(data);       } Expected an object to be thrown.
storeErrors(filterDuplicates(idCounts), this);   this.complete = true;
if (Array.isArray(this._renderProperties)) {   for (var i = 0; i < this._renderProperties.length; i++) {    render(this._renderProperties[i], this._encodings, this._options); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
, end = { p : verb.last( knots ), l : totalLen }  , mid = {}; ',' should be placed last.
if (layers.hasOwnProperty(id)) {       throw new Error('invalid or duplicate layer id:'+ id);     } Expected an object to be thrown.
render: (text, record) => (       <Button color="primary" size="sm" onClick={() => record.hendleDeleteCrud(record.id)}>         Delete Unexpected 'this'.
var map = self.get("map");
"Integer": new Integer(),   "Boolean": new Boolean()  }; Do not use Boolean as a constructor.
everyHour = 5 || minute * 60; function updateScript(script) { Use the rest parameters instead of 'arguments'.
Pipeline.prototype.index = function() {     return this.add('', 'Index', arguments);   }; Use the rest parameters instead of 'arguments'.
(subAsParent, schemaFromAllOf) => {           collapseSchemas(             subAsParent, Unexpected 'this'.
var request = require('../index') var http = require('http') var tape = require('tape') var methodsSeen = { ',' should be placed last.
for (var j=0; j<wires.length; j++) {                         var node = flows.get(wires[j]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
function(language){  return this.toTypedExpression(language).s; }
if (response) {           for (i in response.structure) {             if (response.structure.hasOwnProperty(i)) {               nest.structure = i;               nest.presence  = response.structure[i].away === false? 'on' : 'off';
exchange () {     throw new Error('exchange Not Yet Implemented', 'AbstractOverlay.js');   } Expected an object to be thrown.
describe('2.8 connection request queue (basic functionality)', function(){     function getBlockingSql(secondsToBlock) { Unexpected 'this'.
module.exports.log = function () {   console.log(...arguments); }; Use the spread operator instead of '.apply()'.
if (confProps.scales!= null) {                 confProps.resolutions = [];                 for(var i = 0; i < confProps.scales.length; i++) { The array literal notation [] is preferable.
, doc = xmlbuilder.create()        , child = doc.begin('plist', XMLHDR, XMLDTD).att('version', '1.0'); ',' should be placed last.
, inherits  = require('util').inherits  , xtend     = require('xtend') ',' should be placed last.
} else {             if (newListener!== 'newListener') {                 if (events[arguments[0]]) { Use the rest parameters instead of 'arguments'.
this.toggleBottomMenubar();         }, Use the rest parameters instead of 'arguments'.
typeof getter =='string'? getter : getter && getter[name] || name,          firstArg); Use the rest parameters instead of 'arguments'.
}     this._items.sort(function (a, b) {return mcmp(key(a), key(b));}); } list.PY$insert = Function(function(index, x) { Unexpected 'this'.
return {     type: actions.UNLOCK_IN_PROGRESS,   } Unexpected 'this'.
this.fire( YS_COMPLETE );       }.bind( this ); Unexpected 'this'.
}   }).catch((error) => { Unexpected 'this'.
'use strict'; var deferred = require('../../lib/deferred'); module.exports = { ',' should be placed last.
accepts: ['js', 'css'], should be placed last.
bus.emit('file-add', {         source: that.id,         name: file.name, Unexpected 'this'.
csv_row.push(friend.name);     for (i = 0; i < 3; i++){       this.addColumn_(csv_row, friend.email[i]);     } Unexpected 'this'.
if (!this.get('selectedRepo')) { return; }         this.set('category.customapprepo', this.get('selectedRepo'));          if (!this.get('category.customappname')) { return; } Unexpected 'this'.
}         this.set('memberCount', this.store.peekAll('member').length);
function log(...aArgs) {  utils.log('autoHide',...aArgs); } Use the spread operator instead of '.apply()'.
constr = function () {                 var obj = this;
doneArgs = [...args ]       return Use the rest parameters instead of 'arguments'.
module.exports = function() {  return new Palette(); } Use the rest parameters instead of 'arguments'.
done();       });     }); Unexpected 'this'.
if(Array.isArray(encoded)){     for(var i = 0; i < encoded.length; i++){      nextLevel(encoded[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (finalConfiguration.zoomable) {                 zoom(d3.select(this), dimensions, scales, finalConfiguration, data, draw);             } Unexpected 'this'.
temp = replace     replace = []     for (i = 0; i < search.length; i += 1) { The array literal notation [] is preferable.
function hoverTruncate(grid) {     var $grid = $(grid);     if ($grid.hasClass('hovercard')) { Unexpected 'this'.
this.push(file);   cb();  },
this.send(from, 'Hi'+ from + ', nice to meet you!');     }
var guid = $(this).attr('data-table-guid');     $.support.cors = true; Unexpected 'this'.
favMapView.render();      this.$('.js-favMapTitle').removeClass('is-hidden');     } }); Unexpected 'this'.
var RequestObject = Ember.Object.extend({     init: function RequestObject() {       this._super.apply(this, arguments); Use the spread operator instead of '.apply()'.
try {         return expressionCompile(expression).apply(instance, args);       } catch (e) { Use the rest parameters instead of 'arguments'.
action = function(varName) {                 storedVars[varName] = accessorFunction();             }; Unexpected 'this'.
const arg = combinator.args[i]                     const argument = arg.optional? args[i] || null : args[i]                     switch (arg.type) { Use the rest parameters instead of 'arguments'.
var i, len = this.masksProperties? this.masksProperties.length : 0;     this.viewData = createSizedArray(len);     this.solidPath = ''; Use the spread operator instead of '.apply()'.
})(   this.Blotter, this._, this.THREE, this.Detector, this.EventEmitter ); Unexpected 'this'.
});   this.ipcClient.on('error', function (error) { The function binding is unnecessary.
return key_promise.then(function(key) {       config = this.getSignConfig(key);       return Jose.crypto.subtle.verify(config.id, key, signature, Utils.arrayFromString(aad + "." + payload)).then(function(res) { Unexpected 'this'.
type: Array,             default: () => []         }, The array literal notation [] is preferable.
const checksums = JSON.parse(new Buffer(process.env.ASSETS_CHECKSUMS, 'base64').toString('ascii'));     Object.keys(checksums.assets).forEach((srcPath) => {       const checksum = checksums.assets[srcPath]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
function e(e) {             var i = t.call(this) || this;
default:         throw new Error('invalid matrix mode'+ mode);     } Expected an object to be thrown.
promise = Q.resolve();             that._logger.warn('not-installed', name, {                 name: name Unexpected 'this'.
describe("copier", function() {   it("should send from Emitter to Collector via copier", async function() {     let result = []; Unexpected space before *.
const results = []   content = String(content).replace(/\/\*.+?\*\/|\/\/.*(?=[\n\r])/g, '')   while ((match = exports.CSS_IMPORT_REG.exec(content))) {     results.push(match[2]) Do not use String as a constructor.
} else {       for (key in styles.computed) {         computedStyles[key] = styles.computed[key](styles); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.anim(                 lastElem,                 elem, Unexpected 'this'.
var typeName = this._getTypeNameForMessage(payload)           , cacheItem = new CacheItem() ',' should be placed last.
items = this.filteredItems.map((item) => {       return <option value={item.id} selected={item.id == this.curValue}>{item.text}</option>     })
it('add block', function() {     let editor = this.setEditor('<p>0123</p>');     editor.formatAt(4, 1, 'align', 'center'); Unexpected 'this'.
}else{    for(var arg in this.options){     if(this.options.hasOwnProperty(arg)){      this.payload += '&' + arg + '=' + this.options[arg];     }
var touch = e.changedTouches[i]             var slot = slotted[touch.identifier]             if (slot === void 0) { ',' should be placed last.
{  var a = typeof(arguments[i+1])=="string"?  arguments[i+1].charCodeAt(0) : arguments[i+1];  if(a!=header[i]) return false; Use the rest parameters instead of 'arguments'.
var args = Array.prototype.slice.call(arguments, 0);                     this.trigger(...args);                 } Use the spread operator instead of '.apply()'.
};     this.__doreq("DESTROY-EXISTS",getoptions,null,function(result) {       self.logger.debug("Returned rest api info: " + JSON.stringify(result.doc));
showPageLoadingMsg: function( theme, msgText, textonly ) {    this.loaderWidget.loader('show', theme, msgText, textonly );   }, Use the spread operator instead of '.apply()'.
var c = w({ first: f('value') });       var result = c.build(this.grammar).fragment;       expect(result).to.eql('first = value'); Unexpected 'this'.
var status = new app.Model.StatusUpdateModel();     status.set("attachmentIds", []);     _.each($(e.target).serializeArray(), function(data) { The array literal notation [] is preferable.
cwd: './src/',                 files: [ 'core ',' should be placed last.
, sourceExtract = require ('./sourceExtract')  , gruntUtil = require ('./gruntUtil'); ',' should be placed last.
var findIn = require('../examples/find-in'); describe('integration', function() {   var db, modules; Unexpected 'this'.
if (rc!= 0) {         console.log("can not call subscribe command");   return -1;     } Expected an object to be thrown.
});         this.$el.trigger('change');         this.render(); Unexpected 'this'.
} else {         console.log(`Winner: ${this.filter('fastest').map('name')}`);       }
{             value = [];             for(var i=0; i<count;i+=2) The array literal notation [] is preferable.
html += getFileHTML(path,val)             })             html += "</ul>" The function binding is unnecessary.
}).catch(function(ex) {                 return that.alert(ex.toString(), 'danger');             }); Unexpected 'this'.
return indent + "[object " + (obj.tagName || "Node") +"]";             var arr = [],type = $.type(obj),self = arguments.callee,next = indent +  "\t";             switch (type) { Avoid arguments.callee.
return (dispatch) => {     dispatch(actions.showLoadingIndication())     _accountManager.clearSeedWordCache((err, account) => { Unexpected 'this'.
inherit: SVG.Element ',' should be placed last.
this.isMounted = false     delete this.root._tag   } } Unexpected 'this'.
, end = null                    , _this = e.currentTarget                    , $cbs = $table.find('tbody td:first-child [type=checkbox]')                     , $checked; ',' should be placed last.
function getBalances(request, response, next) {   var options = { Unexpected 'this'.
lang.mixin(this.config, this.commonConfig, this.orgConfig, this.appConfig, this.customUrlConfig, this.urlConfig);
return { vm: this, metaInfo, tags } }
provider: '',       traits: this.getSourceTraits(),    }),
if (!goog.array.remove(this.topComments_, comment)) {     throw Error('Comment not present in workspace\'s list of top-most comments.');   } Expected an object to be thrown.
define(Array, 'partitionBy', function(fn) {     var partitions = {}; Array prototype is read only, properties should not be added.
function newFile(req, res, next) {     var that = this, params = req.params,         themeHome = getViewsHome(req.app), themeId = params.id, Unexpected 'this'.
}; const getSiteConfig = async function(source, destination) {     let siteConfig = {}; Missing space after *.
this.element = element;  this.store = [];  this.store[0] = new this.coords(-1,-1); Unexpected 'this'.
if( descriptor.resource.getRegistered(namespace)!== model ) {         throw new Error('namespace [' + namespace + '] has already been registered, autoRegister failed.');       } Expected an object to be thrown.
function _merge (getKeys, a, b) {     return reduce([a, b], function (result, source) {         forEach(getKeys(source), function (key) { Use the spread operator instead of '.apply()'.
if (!extensions.instancedArrays) {         throw new Error("WebGL: No instanced rendering support!");     } Expected an object to be thrown.
const result = [];     for (var idx in listValues) {       if (listValues.hasOwnProperty(idx)) {         result.push(this.valueType.getValue(listValues[idx]));       }
describe('#compile_solidity', function() {     var expectedObject = {}; Unexpected 'this'.
const getCollectionLoader = function(collection) {         return async function(filePath) {             const extension = path.extname(filePath); Missing space after *.
this.get('player').setVolume(this.get('volume'));   },
{    throw new Error("insufficient read permissions on path");   } Expected an object to be thrown.
function checkToEnd(pos) {       if (pos.y <= this.maxScrollY + threshold) {         this.trigger('pullingUp'); Unexpected 'this'.
options: options ',' should be placed last.
propCallback({             wavesurfer: wavesurfer           }); Use the rest parameters instead of 'arguments'.
class UsersStore extends GetSetBaseStore {   constructor(...args) {     super(...args); Use the rest parameters instead of 'arguments'.
const key = [name, pipeline_name || '', +remote].join(':')   if (!this.asset_cache.has(key)) this.asset_cache.set(key, this._findAsset(name, pipeline_name, remote))   return yield this.asset_cache.get(key) })
module.exports = () => {   return async (ctx, next) => {     try { Missing space after *.
var parsed = {};         for (var key in includeObj) {             if (includeObj.hasOwnProperty(key)) {                 parsed[key] = this._parseIncludeArgs(includeObj[key]);             }
if (_.contains([ "istate", "ostate", "state", "meta", "model", "connection" ], what)) {             _apply_persist("on", [ what, connection ]);         } else { Use the rest parameters instead of 'arguments'.
}             if (this.type.toLowerCase() == "checkbox") { Unexpected 'this'.
var ByteCode = new Array(); var ArrayType = {}; ByteCode.codes = { The object literal notation {} is preferrable.
if (proxyDetails.method && proxy[proxyDetails.method]) {             return proxy[proxyDetails.method](...proxyDetails.args);           } else { Use the spread operator instead of '.apply()'.
return function (socket, nextstage) {     socket.emit(event,...args);   } Use the spread operator instead of '.apply()'.
default:         throw new Error('illegal char:'+ c);     } Expected an object to be thrown.
function getPersonalHolidays(data) {   var personalHolidays = [];   for(var i = 0; i < data.response.absences.length; i++) { The array literal notation [] is preferable.
router.get('/connect', passport.authenticate('google', { scope:     [ 'https: router.get('/google/callback', passport.authenticate('google', ',' should be placed last.
{          for(var key in modal_parameters.events){           if(modal_parameters.events.hasOwnProperty(key)){             $(this).on(modal_parameters.events[key], function(event){                   if(modal_parameters.on_event){ The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
trackException(error, fatal = false) {     GoogleAnalyticsBridge.trackException(this.id, error, fatal);   } Use the rest parameters instead of 'arguments'.
var tmpl = $('#job-template').html()   var from = 0   var to = 15; ',' should be placed last.
case 114:              for (var idx = 0; idx < content.length; idx++) {                 records.push(processResult(content[idx], results.subcontents)); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
json = _a.sent();                         return [2, json? utils_1.assetFromJSON(json) : null];                 } Unexpected 'this'.
HTMLMediaElement.prototype.play = function() {       let p = originalPlay.call(this,...arguments);       if (p) { Use the rest parameters instead of 'arguments'.
} else if ("0".split(void 0, 0).length) {     StringPrototype.split = function split(separator, limit) {         if (separator === void 0 && limit === 0) { return []; } String prototype is read only, properties should not be added.
const missedPrerequisites = this.checkPrerequisites(player);       missedPrerequisites.forEach(prereq => { Unexpected 'this'.
if (!json.txs) {         throw new Error('Could not fetch transactions from API')       } Expected an object to be thrown.
var icon_dis;     for (var j in res['RelatedTopics'][i]['Topics']){         if (j > 3) {             break;
TW.TabManager.initTabs = function (tabs) {   for (var i = 0; i < tabs.length; i++) {     TW.TabManager.addTab(tabs[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
const b = inst(this.body.infer())    const ps = new AST.TypeConstructor('Product', [])    for (const r of this.args) { The array literal notation [] is preferable.
, fs = require("graceful-fs") rebuild.usage = "npm rebuild [<name>[@<version>] [name[@<version>]...]]" ',' should be placed last.
console.log("CHAN_GET: " + url + " " + res.statusCode);                         stream_cb(that);                 }); Unexpected 'this'.
var repoName= url.substring(url.lastIndexOf("/")+1,url.lastIndexOf(".git"));                              $("#"+id+".response").append("Cloning into '"+repoName+"'... <br/>"); Unexpected 'this'.
initElements(nodes);     return first;   }; Use the rest parameters instead of 'arguments'.
, async = require('async')  , isMac = process.platform === 'darwin'; ',' should be placed last.
) {                             that.markers[i].keep = true;                             doAdd = false; Unexpected 'this'.
this.blog.photo(this.options.blogName, postOptions, function(err, result) {   that that._logResult(err, result, that.options.blogName);  }); Unexpected 'this'.
} else {         throw new Error('illegal version:'+ version);       } Expected an object to be thrown.
$.ElementList = function () {  function $ElementList(nodes) {   this.src = Array.from(nodes);  } Use the spread operator instead of '.apply()'.
'sessionInvalidationFailed'   ]).forEach(function(event) {     session.on(event, function(error) {       router.send(event, error);     }); Use the rest parameters instead of 'arguments'.
var scale = this.container_div.width() / (this.view.high - this.view.low);         if (include_labels) this.zi_slots = {};         var dummy_canvas = $("<canvas></canvas>").get(0).getContext("2d"); The object literal notation {} is preferrable.
function execSync(command, options) {   var opts = normalizeExecArgs(command, options, null);   var inheritStderr =!opts.options.stdio; Use the spread operator instead of '.apply()'.
if (!$(this).parent().hasClass('dragging')) {                              } else { Unexpected 'this'.
, Db      = require('../../')  , StringType = Db.String; module.exports = function () { ',' should be placed last.
if (requestModel.security) {       for (var i = 0; i < requestModel.security.length; i++) {         var securityOption = requestModel.security[i];         var auth = AuthManager.getAuth(securityOption); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
setTimeout(function () {      var oAppSettings = this._oCore.getConfiguration(),       oThemeSelect = this._oCore.byId("ThemeSelect"), Unexpected 'this'.
this.inherited("setAttribute", arguments);   if (key=="value"){    this._renderStars(this.value); Use the rest parameters instead of 'arguments'.
var fn = strings[this.fn];         return fn? fn(...newArgs) : this.fn + '(' + this.args.join(', ') + ')';     } Use the spread operator instead of '.apply()'.
var calendar = [];             for (var i = 0; i < 6; i++) { The array literal notation [] is preferable.
addon.port.on('socket-disconnected', function(response) {     disconnectingSockets[response.socketId].call();   });
if (duration < 100) {       throw new Error('Duration should be greater than 100 milliseconds or it won\'t really be noticeable');     } Expected an object to be thrown.
Object.keys(this.core.plugins).forEach((pluginType) => {         const plugins = this.core.plugins[pluginType] The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
clear: function(property) {             return function(fields) {                 return this.__clearPropertyValue([property].concat(_.isString(fields)? fields.split('.') : fields || []));             }; Use the rest parameters instead of 'arguments'.
_cmdFilter: function(){    return this._filter(...arguments[arguments.length - 1]);   }, Use the rest parameters instead of 'arguments'.
var datas = new Object();     var test_names = []; The object literal notation {} is preferrable.
that.options.autoplay = true;             if (!_built) that.load();         } Unexpected 'this'.
const data = jsonfile.readFileSync(this.filepath);   return data; }
var bigInsert = '';      for (var i = 0; i < config.widgetSets.length; i++) {          var file; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
checkLogin(id, skey) {         let param = { id, skey }; Missing space after *.
var cometURL = String(document.location).replace(/\/jquery-examples\/.*$/, '') + '/cometd';       cometd.init({ Do not use String as a constructor.
}     var categorizr = {       categorize: function () {           var args = [].slice.call(arguments, 0) ',' should be placed last.
options.errorThrown = errorThrown;       if (error) error.apply(this, rest);     }; Use the rest parameters instead of 'arguments'.
, len = socks.length    , sock = socks[this.n++ % len]; ',' should be placed last.
function handleEnter(event){         if (!this._down) return;         this._eventInput.off('mousemove', handleMove.bind(this)); Unexpected 'this'.
step: function(ignoreTime){ ',' should be placed last.
function _onEnd(){         this._dirtyLock--;         if (this._dirty && this._dirtyLock == 0) { Unexpected 'this'.
callback();       })      .catch(function (error) { Unexpected 'this'.
function moveNestedTags(child, i) {   Object.keys(child.tags).forEach(function(tagName) {     var tag = child.tags[tagName] The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
module.exports = methods;   } else if (root) {     for (var key in methods) {       if (methods.hasOwnProperty(key)) {         root[key] = methods[key];       }
get Model() {         throw new Error("ModelHandler.Model must be overriden!");     }, Expected an object to be thrown.
this.toggleSelection = function (id, type, changeHead) {
var maxHeight = 0;  for(let i = 0; i < encodings.length; i++){    let options = merge(options, encodings[i].options); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
return self._call(context, arguments);    };   }, The function binding is unnecessary.
return newModels;     }, []));     this.$namespace.publish('_.reset', oldModels); The function binding is unnecessary.
setTimeout(function() {       if (this.windowSession.currentRecordingTabId[testCaseId] === activeInfo.tabId)         return; Unexpected 'this'.
var core = require('../../modules/_core'); var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify }); module.exports = function stringify(it) { ',' should be placed last.
} else {     throw new Error('no view found for arguments'+ _args);   } Use the rest parameters instead of 'arguments'.
function getPlayerByName(name) {     for (var i = 0; i < discovery.players.length; i++) {         var player = discovery.players[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}             return arguments[index].call(this, args);         }; Use the rest parameters instead of 'arguments'.
var modul8  = require('../../')  , fs      = require('fs'); modul8('main.coffee') ',' should be placed last.
this.onComplete(             async function() {                 if (mustCompile) { Missing space after *.
'use strict';
hook('onClick');    var url = getUrl(button);    var fullurl = 'u=' + encodeURIComponent(url); Unexpected 'this'.
var transform = function(chunk, enc, callback) {     callback(null, template(chunk));   }; Unexpected 'this'.
var simpleBrain = function(user){     Brain.call(this, user); };
}             throw new Error("unknown JPEG marker " + fileMarker.toString(16));         } Expected an object to be thrown.
var key ='secret12'      , pt = '☭'      , ct = twoFish.encrypt(key, pt)      , cpt = twoFish.decrypt(key, ct); ',' should be placed last.
.done(function() {    var data = form.serialize(); Unexpected 'this'.
{     if (typeof(e) === 'undefined' && this.timeoutTimer === null)      return false;
TextLayout.prototype = new RefObject;  TextLayout.prototype.constructor = TextLayout; The object literal notation {} is preferrable.
$(AVG_REPLICATE_VALS_BOTTOM_MENU).click(() => {         grnState.nodeColoring.averageBottomDataset =!$(this).prop("checked");         updateApp(grnState); Unexpected 'this'.
that do not match any member of "cols".`,       code: function(...args) {         const cols = this.getColIdxs_(args);         return this.DOT(this.GridRow.DATA, this.ArrayExtract.create({ Use the rest parameters instead of 'arguments'.
var self = this;   args = _.toArray(arguments);   callback = extractCallback(args);   args[0] = Mongo.Collection._rewriteSelector(args[0]); Use the rest parameters instead of 'arguments'.
if (typeof (key) === 'object') {                 for (var name in key) {                     if (key.hasOwnProperty(name)) {                         this.setVisual(name, key[name]);                     }
function SaveCommand() {   SaveCommand.super.apply(this, { name:'save' }); } Use the rest parameters instead of 'arguments'.
it('edits textbox', function() {       cy.get('@TextboxEl').within(() => {         cy.get('.widget-menu-regular').click({ force: true }).within(() => { Unexpected 'this'.
var Concur = require('Concur') var object = require('isomorph/object') var validators = require('validators') ',' should be placed last.
constructor(){         super();         super.addMixedIn('Heritable'); Use the rest parameters instead of 'arguments'.
} else {     return context.fn(that);   } Unexpected 'this'.
case "domain":         loadSiteNotes(true);         break; Unexpected 'this'.
init: function() {     this.A = [];     this.A[1] = 0.6399175073;     this.A[2] = -0.1358797613; The array literal notation [] is preferable.
var generatorCoffee = path.join(self.generators, generator + '.coffee')           var generatorJs = path.join(self.generators, generator + '.js')           var generatorPath; ',' should be placed last.
pauseRecording(self.valueWillMutate,self);           if(write &&!self.write)throw new Error("This observable can't be set.");           self.value = value; Expected an object to be thrown.
}  deny(...args) {   return this.model.deny.apply(this.model, args);  } Use the rest parameters instead of 'arguments'.
this.options = options; }, {
this.closing = false;   this.loaded = false;   await this.fire('close'); };
this.append(ws`    ${this.declVars(`__WRAP_CACHE__ = __RESULT__, __WRAP_TMP__ = [], __WRAP_POS__ = 0`)}    __RESULT__ = ${this.getReturnDecl()}; Unexpected 'this'.
var options = this.options? this.options(defaults) : _.extend(defaults, this.data.options);
root["javel"] = factory(); })(window, function() { return  (function(modules) { Unexpected 'this'.
gutil.log(gutil.colors.red('Running gulp is', cliPackage.version));     gutil.log(gutil.colors.red('Local gulp (installed in gulpfile dir) is', cliPackage.version));   } Unexpected 'this'.
if (val === 'y' || val === 'yes') {       for (var i = 0; i < newer.data.length; i++) {         debug('pushing', newer.data[i]) The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
expect(emailValueAfter).toEqual(null);       const passwordValueAfter = this.component.loginForm.get('password').value;       expect(passwordValueAfter).toEqual(null); Unexpected 'this'.
try {         this._stackdriver.report(...arguments);       } catch(err) {         logger.error('Error while reporting error:'+ err);       } Use the rest parameters instead of 'arguments'.
inputSignal = true;     }; The function binding is unnecessary.
if (err) {       return this.emit('error', err);     } Unexpected 'this'.
this.columns.splice(this.columns.indexOf(cardDom.data('column')), 1);             this.mapDom.remove(cardDom); Unexpected 'this'.
send: function(connectionId, reportId, data, callback) {                  if (connectionId ==='mockConnection') { Use the rest parameters instead of 'arguments'.
Renderer.prototype.render = async function(template, locals, options) {   var o = this.options; Unexpected space before *.
if (!ArrayPrototype.map) {   ArrayPrototype.map = function(callback, thisArg) {     var mapped = []; Array prototype is read only, properties should not be added.
module.exports = function zipWith() {   var args = argsToArray(arguments).slice(1) Use the rest parameters instead of 'arguments'.
, getPrototypeOf = Object.getPrototypeOf  , proto = Proto.prototype; ',' should be placed last.
if (window.DEBUG) {    console.log(...[].splice.call(arguments, 0));   } Use the spread operator instead of '.apply()'.
function L(...args) { if (BarNote.DEBUG) Vex.L('Vex.Flow.BarNote', args); } export class BarNote extends Note { Use the rest parameters instead of 'arguments'.
for (var key in file[testType]) {             if (!file[testType].hasOwnProperty(key)) continue;             factory(file[testType][key].name, file[testType][key], file.scope); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (testNull === null) {       throw new Error('No match in string')     } Expected an object to be thrown.
catch (e) {     alert("Exception removing service " + serviceName + " : " + e);    }   } Avoid arguments.callee.
};  for (var p in thisClass) {   if (thisClass.hasOwnProperty(p)) {    Employee.prototype[p] = thisClass[p];   }
, Iterator   = require('./iterator')  , getMessage = require('../utils/get-sub-error-message') ',' should be placed last.
user: require('lsk-user/uapp').default(...arguments),     offer: require('~/modules/offer/uapp').default(...arguments)   }; Use the rest parameters instead of 'arguments'.
var Cookie = tough.Cookie; var CookieJar = tough.CookieJar; exports.parse = function (str) { ',' should be placed last.
if (evt.authorized) {                                 var status = '<a>' + this.config.i18n.general.switchAccount + '</a>';                                 this._twitterStatusNode.innerHTML = status; Unexpected 'this'.
if (this.key_!== b.key_) {       throw new Error('Failed to sync VNode: keys does not match (old:'+ this.key_ + ', new:'+ b.key_ + ')');     }     if (this.type_!== b.type_) { Expected an object to be thrown.
, Packager = require('package-jsonld')  , previewTabularData = require('preview-tabular-data').preview; ',' should be placed last.
return [function split(separator, limit) {     var O = defined(this);     var fn = separator == undefined? undefined : separator[SPLIT];     return fn!== undefined? fn.call(separator, O, limit) : $split.call(String(O), separator, limit); ',' should be placed last.
gulp.task('compress', () => {   let { version } = require('../app/manifest.json')   const { name } = require('../package.json')   return gulp.src('dist*') ',' should be placed last.
type = type || 'closest';   for (var idx1 = 0; idx1 < a.length; idx1++){     var color1 = a[idx1]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
, stream = fs.createReadStream(filename) , xml = new XmlStream(stream); , count = 0; ',' should be placed last.
else       this.gotoFrame(frame);   },   gotoAndStop: function (frame, scene) {     this.stop(); Unexpected 'this'.
this.registerAppComponent = registerAppComponent;
enyo.forEach(this.enyoIndexer.getFunctionList(pattern), function(name) {     suggestions.push(name);    }, this); Unexpected 'this'.
var researching;  var imagePathsArray = []; var imagePositionInArray; The array literal notation [] is preferable.
const orgError = console.error;   console.error = function(...args) {     errors.push(args);     orgError.apply(console, args);   }; Use the rest parameters instead of 'arguments'.
if (value) {       for (i in value) {         if (value.hasOwnProperty(i)) {           change    = 'neutral';           arrow     = 'arrows-h';
return this.verify(function verified(err) {     if (err) return fn(err);     var current = this.pid; Unexpected 'this'.
var newRow = {}       for (var col in row) {         if (!row.hasOwnProperty(col)) continue;         var datatype = this.props.queryResult.meta[col].datatype The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var sax = require('sax'),   ignored = require('./ignored.js') ',' should be placed last.
if (old.length === neo.length) {                 if (old!== neo && old.length > 0) {                     arguments.callee.call(that, 'clear', pos, el)                 } Avoid arguments.callee.
this.Alert = function Alert(){      logger.info( colors.green('[OKAY] '+ this.fmt.apply(null,arguments)) );  } Unexpected 'this'.
beforeEach(function () {         diffHelper.addMatchers(imagediff.jasmine);         canvas = $('<canvas width="' + width + '" height="' + height + '"></canvas>'); Unexpected 'this'.
} else if (options) {           for (var i in options) {             if (options.hasOwnProperty(i)) {               data.options[i] = options[i];             }
install: function () {         const injectJsFilesToIndex = () => {             this.log('\n' + chalk.bold.green('Running `gulp inject` to add JavaScript to index.html\n'));             this.spawnCommand('gulp', ['inject:app']); Unexpected 'this'.
if (!regl.hasExtension('ANGLE_instanced_arrays')) {       throw new Error('regl-error2d requires `ANGLE_instanced_arrays` extension enabled');     } Expected an object to be thrown.
} else {     return eachObj(obj);   } Use the rest parameters instead of 'arguments'.
} export async function reset__rpc() {   log(`${logPrefix}|reset__rpc`) Missing space after *.
var PROJECT_ID = Session.get('projectId');     var portarray = [];     var delarray = [];     var hostid = undefined; The array literal notation [] is preferable.
this._parentPicker && this._parentPicker._updateColumnHeights();        return FontWidget.prototype._doLayout.apply(this);   }, Use the rest parameters instead of 'arguments'.
thingsChanged: function() {          if ( this.get('application.currentRouteName') ==='splash') Unexpected 'this'.
Target.prototype.yield = function yield$() {     return this.then().yield(...arguments)   }   Target.prototype.ensure = function ensure() { Use the spread operator instead of '.apply()'.
;    for (key in this.tables) {   if (this.tables.hasOwnProperty(key)) {    needs++;    if (key == tbl.name) this.tables[key].done = true;
_.each(this.getReverseRelations(), function(relation) {    relation.addRelated(this.instance, opts);   }.bind(this));  }, Unexpected 'this'.
this.on('end', function() {       that._removeFromPool();     }); Unexpected 'this'.
function e() {             var e = t.call(this) || this;
if(err){                 throw new Error('Error sending Keen data:'+ err);             } Expected an object to be thrown.
if (response.status!== 200) {                 throw new PouchPluginError({ message: 'Query failed.' });               } Expected an object to be thrown.
maskToken.matches = maskToken.matches.reverse();                 for (var i = 0; i < maskToken.matches.length; i++) {                     var match = maskToken.matches[i];                     var intMatch = parseInt(match); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
});      return this.on(name, once, context);     },     writable: true, Unexpected 'this'.
}); NativeArray = NativeArray.without(...ignore); Use the spread operator instead of '.apply()'.
export default class AuthenticatedUserAccountDropdown extends UserAccountDropdown {   constructor(...args) {     super(...args); Use the rest parameters instead of 'arguments'.
var traits = this.traits();             for (var i = 0, l = traits.length; i < l; i++) {                 traits[i].setFromArgs( obj, args, ignores ); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
catch(e) {         setTimeout(checkGetVariable, 0);         return; Avoid arguments.callee.
class TuyaCloudRequestError extends Error {   constructor(options) {     super(options);   } 'this' is not allowed before'super()'.
callMethod = function( methodName, args ) {                                   console.log('calling ', methodName, this[ PHP.VM.Class.METHOD_PROTOTYPE + methodName ], args);
res = [];                  for (var b in obj) {                      if (obj.hasOwnProperty(b)) {                          res.push(copyCleanModel(obj[b]));                      }
throw new Error('Unrecognized initial character in unidiff line')           } Expected an object to be thrown.
}).call(this);
async run() {     throw new WatsonsError(`Need to implement ${this.constructor.name} async run() function`);   } Expected an object to be thrown.
this._commands = {};   this._lastCharCodeForEvent = {}; };
this.route('map', {   path: '/',
default:       throw new Error('Unsupported value');   } Expected an object to be thrown.
hasPendingChanges: false         }, () => {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) Unexpected 'this'.
if (!this._parentWindow) {       this.parentWindow = exports.windowAugmentation(dom, {url: url});     } Unexpected 'this'.
var that = this;             _.each(this.parents, function(v, i) {                 result[that.fields[i]] = v.evaluate();             }); Unexpected 'this'.
reflect(this).slotAt('_model').beCreator();     this.applyStyle(this.defaultStyle);
var slices = 24;   var wfs = [];   for (var i = 0; i < radii.length; i++) { The array literal notation [] is preferable.
var ltx     = require('ltx')  , helper  = require('../helper') ',' should be placed last.
origIt('should handle wd errors asynchronously', function(done) {     driver.run(function*() {       try { Missing space after *.
var s = _getActiveSelection();         $(this).addClass("couzteauSpellCheck"); Unexpected 'this'.
$("#redeem").keypress(function(e) {     if((e.keyCode? e.keyCode : e.which)!== 13) return;     var data = {passcode: $(this).val()}; Unexpected 'this'.
io.register_write(port, this, function(out_byte)     {         write_data(out_byte);     }, function(out_word) Unexpected 'this'.
return function () {              compound.apply(that, arguments);          }; Use the rest parameters instead of 'arguments'.
anInstance(that, $ArrayBuffer, ARRAY_BUFFER);   var numberLength = +length;   var byteLength = toLength(numberLength);   if (numberLength!= byteLength) throw RangeError(WRONG_LENGTH); ',' should be placed last.
_validateReset(keyPath, options) {     if (typeof keyPath ==='string' || typeof keyPath === 'object') {       options = typeof keyPath === 'object'? arguments[0] : options;
} else if (this.readyState === 3) {                         span.imp().info('XMLHttpRequest loading (readyState=3)');                     } else if (this.readyState === 4) { Unexpected 'this'.
var key = '';         for (var name in defaultParams) {             if (!defaultParams.hasOwnProperty(name)) continue;             var chunk = parameters[name].toString(); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
{    for(var i = 0; i < object._missing_components.length; ++i)    { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}),       takeEvery(self.types.events[event].get.SUCCESS, function* ({         meta, Missing space after *.
if (!this.requireMinimumVersion(this.apiVersion, minimumVersion)) {       throw new Error("this method requires at least @{minimumVersion)");     } Expected an object to be thrown.
this.state.set(this.state.value().join(''));                  status.emit('complete', 'concat', 'concatenated'+ stateItemCount +'item(s).');              } Unexpected 'this'.
return $.grep(this._pages, $.proxy(function(page, index) {    return current === this._core.maximum()    ? index === this._pages.length - 1     : page.start <= current && page.end >= current;   }, this)).pop();
})(EndGate || (EndGate = {}));
constructor: function GroupingModel(...args) {             GroupingModel.__super__.constructor.apply(this, args);         } Use the rest parameters instead of 'arguments'.
var Backbone = require('backbone'); ',' should be placed last.
function UiFactory() {   this._background = null;   this._foreground = null; Unexpected 'this'.
res = [];     thisp = arguments[1];     for (var i = 0; i < len; i++) { Use the rest parameters instead of 'arguments'.
var Element = function(board, element, options) {    this.element = element;    this.options = options; Unexpected 'this'.
$(this).blur();
arguments[0].forEach(function(item, i) {    self[i] = item;   });   this.length = arguments[0].length;
t.ok(is.number(-Infinity), 'negative infinity is number');   t.ok(is.number(Object(42)), 'object number is number');   t.notOk(is.number(), 'undefined is not number'); Do not use Number as a constructor.
var utils = require('../utils')  , nodes = require('../nodes'); ',' should be placed last.
, cmdItems      , taskArr      , taskName      , taskArgs      , preempt; ',' should be placed last.
for (i = 0; i < this.regexpProps.length; i++) {       property = this.regexpProps[i] The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.$().data('DateTimePicker').destroy();   } });
this.assets = [];   var addressToPath = {}; Unexpected 'this'.
async function extractApkInfoWithApkanalyzer (localApk) {   const apkAnalyzer = await getApkanalyzerForOs(this);   const args = ['-h','manifest', 'print', localApk]; Unexpected 'this'.
TileRequestHandler.prototype['GET'] = requestBatcher(function(server, req, callback) {  var done = _.once(callback); Unexpected 'this'.
var f = require('util').format  , Query = require('../connection/commands').Query; ',' should be placed last.
this.bind('change', function(e) {     var $selector = $(this);     this.find('option').each(function() {      var $form = $('#'+$(this).val()); Unexpected 'this'.
port.send('deprecation:watch');     this._super(...arguments);   }, Use the spread operator instead of '.apply()'.
this.height = "";   this.androidWorkaroud = true;
});             for (var l=0;l<removedLinks.length;l++) {                 RED.nodes.removeLink(removedLinks[l]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
return {     sourcesByFile: sourcesByFile   }; ',' should be placed last.
if (this._input.value.length > 0) {             L$1.DomUtil.removeClass(this._close, 'leaflet-pelias-hidden'); Unexpected 'this'.
this.clearArgs = function() {         self.argArray[_POST] = [];         self.argArray[_GET]  = [];     } The array literal notation [] is preferable.
})(this);
gen.fs.write(gen.destinationPath('extension.js'), 'foo');      })     .on('end', done); The function binding is unnecessary.
const asyncWrapper = function (f) {     return function (...args) {       return f.apply(this, args).catch((e) => {         recorder.saveFirstAsyncError(e); Use the rest parameters instead of 'arguments'.
var self = this   Tensor.apply(self, arguments) } Use the rest parameters instead of 'arguments'.
, graveyard = []  , enemyCounter = 0 should be placed last.
_.each(state, function(value, key) {                 that.key_value_lock = [key, value];                 try { Unexpected 'this'.
$(".admin section").click(function (event) {         var elementId = $(this).attr("id");         var sectionId = ExtractSectionId($(this)); Unexpected 'this'.
function ondata (b) { Unexpected 'this'.
if (!internals.diff.fullcolumns )             internals.diff.fullcolumns = [];         var oKeys = Object.keys( db[ 0 ] ); The array literal notation [] is preferable.
{    throw new Error("QR Error: Error getVersionForNumber");   } Expected an object to be thrown.
};      for(i = 0; i < tokens.length; i++) {       yield parseToken(tokens[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if ($(this).hasLabel()) {        $this.children(".classlabelbadge").remove();       } Unexpected 'this'.
var toObject = require('./_to-object'); var $getPrototypeOf = require('./_object-gpo'); ',' should be placed last.
throw new Error("invalid call: atomic expression");       }, Expected an object to be thrown.
this.startIoTjs = function(process) { Unexpected 'this'.
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.radians);     return x / Math.PI * 180; Avoid arguments.callee.
}, function (reason) {                             throw new Error(file + ': Error loading data from.stl file:'+ reason);                         } Expected an object to be thrown.
this.target = attachToOpts.element || document.body;   this.target.classList.add('shepherd-enabled','shepherd-target');
if (typeof val!== "number")                 throw new Error("texture_table requires numeric values");             elements.push(val); Expected an object to be thrown.
Object.values = function(object, skipFunction)  { Object prototype is read only, properties should not be added.
let names = className.split(/\s+/);       names.forEach((name) => {         if (icons[name] == null) return; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (memoryRegion >= this.REGION_ROM0) {   throw new Error("Bad access");  } Expected an object to be thrown.
pzprv3.includeFile("tests/for_test.js");    return false;   } Avoid arguments.callee.
if (input.length!= this.size)         throw new Error("INPUT size and LAYER size must be the same to activate!"); Expected an object to be thrown.
this.targetElement.keyDown(key);           this.targetElement.keyPress(key);           this.targetElement.keyUp(key);         };
initXhr: function(xhrobj) {             var self = this, factor = arguments.length > 1? 90 : 98;             if (xhrobj.upload) { Use the rest parameters instead of 'arguments'.
default:         throw new Error('Unsupported data type.');     } Expected an object to be thrown.
Canvace.MultiSet.prototype.fastAdd = function () {  this.count += arguments.length; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var fs = require('fs')  , async = require('async'); ',' should be placed last.
return function() {     var value0 = style.getPropertyValue(name),         value1 = value(this); Unexpected 'this'.
let clickedEl = event.target;
}   }   var items = [];   items[0] = [];   items[0]['a'] = out; The array literal notation [] is preferable.
return this._instantiateModel(dasherize(type), attrs);   }   create(type, attrs) {     var collection = this._collectionForType(type); Unexpected 'this'.
rebuild: function (rebuild) { ',' should be placed last.
this.aParams = [];    this.vids = []; Unexpected 'this'.
var modelsChange = false;   for (var modelId in modelsMap) {     if (!modelsMap.hasOwnProperty(modelId)) continue;     modelsChange = The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for ( var i = 0; i < this.propertyBindingsArray.length; i++ ) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var express = require('express')  , everyauth = require('everyauth') ',' should be placed last.
this.inline = new InlineCompiler(this.options);   this.inline.out = this.out; } Unexpected 'this'.
this.url = url; Use the rest parameters instead of 'arguments'.
e.preventDefault();     if(!Meteor.user()) throw new Error('You must be logged in.'); Expected an object to be thrown.
else {                 throw new Error('buildfunc: unsupported refarg type:'+ func.name);             }             out.push('}'); Expected an object to be thrown.
if (_.isUndefined(t2))             throw new Error("t2 multiplication with undefined type?");         var type_list = [ Expected an object to be thrown.
} else {    this.keys = args;    this.defaultValues = {}; Use the rest parameters instead of 'arguments'.
purge: function() {     var d = new Date();     var now = d.getTime() + (d.getTimezoneOffset() * 60 * 1000); ',' should be placed last.
[    "cloudHost"   , "streamHost" ',' should be placed last.
}]);     this.layerView.trigger('mouseover', new $.Event('e'), [0, 0], [0, 0], {       test1: 'test1', Unexpected 'this'.
subnode.updateChildTransforms();   }      for(var c = 0; c < this.components.length; c++) {    this.components[c].onUpdateTransform(absolute); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
const mod = require(src);     if (args && args.constructor === Array) return mod(...args);     return mod(); Use the spread operator instead of '.apply()'.
getAllListenerInfo () {     return [].concat(...this.getHandlers().map(handler => handler.__events__))   } Use the spread operator instead of '.apply()'.
}             $.when(...contentLoadedPromises).done(function() {                 this._hideLoading(); Use the spread operator instead of '.apply()'.
}             self.modal.show(context.content, { attachment: context.attachmentToFocus });         });     }; Unexpected 'this'.
size: props.size,                   direction: dir                 }); Unexpected 'this'.
script.onload = script.onreadystatechange = function() {       if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {         done = true Unexpected 'this'.
}                 ilios.pm.schoolDepartmentTreeModel = [];                 for (var key in parsedObject) { The array literal notation [] is preferable.
var keys = [];     for (var item_key in obj) {       keys.push(item_key);     } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (arguments.length==2) {              if (r) throw new Error(path+" is Read only.");              if (text==null) delete ls[path]; Expected an object to be thrown.
scene.args.unshift(playNextScene)         sequence.push(scene)
co(function* () {  const res = yield fetch('http: Missing space after *.
if (prev_output.is_stable === 0)            throw new Error("prev is not stable");           if (prev_output.is_serial === 1 && prev_output.sequence!== 'good') Expected an object to be thrown.
import U from "src/util/util.js";
var ll = par.getElementsByTagName('li'); if (!ll.length) return '';  for (var i = 0; i < ll.length; i++) {   var range = ll[i].getAttribute('data-range'); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.append($=> str);  }
var grafs = text.split(/\n{2,}/g);  var grafsOut = []; The array literal notation [] is preferable.
if (!Pokedex._(self.species + "?")) {   throw new Error("There exists no Pokémon in the Pokédex object with the species name \"" + self.species + "\".");  } Expected an object to be thrown.
Object.keys( extenders ).forEach( function( i ) {     for( var key in extenders[ i ] ) {      if( extenders[ i ].hasOwnProperty( key ) ) {       result[ key ] = extenders[ i ][ key ]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var cs = this.current.fillColorSpace;       var rgbColor = Util.makeCssRgb.apply(null, cs.getRgb(arguments));       this.ctx.fillStyle = rgbColor; Use the rest parameters instead of 'arguments'.
if (options.fn) {         return withHelper(this.author, options);     } Unexpected 'this'.
if (qq.FileUploader.prototype._leaving_document_out(e)) {                         for (i=0; i < dropzones.length; i++){ dropzones[i].style.display = 'none'; }             } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var onMouseMove = run.bind(this, (event) => {         if (plotter) { Unexpected 'this'.
this.retCallback(data);              this.retCallback = null; Unexpected 'this'.
if (VIE.prototype.Attribute) {  throw new Error("ERROR: VIE.Attribute is already defined. Please check your installation!"); } Expected an object to be thrown.
if (err) { return callback(err) }       NGN.BUS.emit(event, arg)     } Use the spread operator instead of '.apply()'.
const model = modelParam;   const currentWSMathRecognizer = this; Unexpected 'this'.
var url = require('url'); var path = require('path'); module.exports = function(version) { ',' should be placed last.
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "STS", Array.slice(arguments));   }, Use the rest parameters instead of 'arguments'.
__extends(StickRightLocationDirective, AbstractLocationDirective);         function StickRightLocationDirective(...args) {             AbstractLocationDirective.apply(this, args);         } Use the rest parameters instead of 'arguments'.
target.findAll = function (match) {             let result = [];             for (let index = 0; index < this.length; index++) {                 const element = this[index]; Array prototype is read only, properties should not be added.
for (var idattrs in dattrs) {    if (!dattrs.hasOwnProperty(idattrs)) continue;    var cmd = dattrs[idattrs] The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (NoSqlProviderUtils.isCompoundKeyPath(index.keyPath)) {                                     throw new Error('Can\'t use multiEntry and compound keys');                                 } Expected an object to be thrown.
node.set(request);      node.getChildren().forEach(function (child) {        this._setTreeNodes(child, request);       }, this); Unexpected 'this'.
var samplers;   for (var i=0; i<batches.length; i++) {    var batch = batches[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
'use strict'; var http = require('http'); var parse = require('url').parse; ',' should be placed last.
return config;     });   }); }; The function binding is unnecessary.
const keys = key.split(',');             _.each(keys, k => {                 this.keyListener.simple_combo(k, value.bind(this));             }); Unexpected 'this'.
this._fastBootCookiesCache = fastBootCookies;     return this._filterCachedFastBootCookies(fastBootCookies);   },   read(name, options = {}) { Unexpected 'this'.
while ( jsonml.length ) {     content.push( convert_tree_to_html( jsonml.shift() ) );   } Avoid arguments.callee.
var that = this;  $(this.oTextHandle)  .attr({ name: 'dummy_' + Math.floor(Math.random() * 1000000), autocomplete: 'off' })  .bind(is_opera || is_ie? 'keypress keydown' : 'keydown', function (oEvent) { return that.handleKey(oEvent); }) Unexpected 'this'.
if ( value === undefined ) {   throw new ve.Error( 'Undefined attribute:'+ key );  } Expected an object to be thrown.
}         callback(...args);     } Use the rest parameters instead of 'arguments'.
_setEditorSize: function( width, height ) {
if (endContainer.nodeType!== Node.TEXT_NODE) {                 throw new Error('Could not found endContainer, highlighting would be unstable');             } Expected an object to be thrown.
return (cache[markup] = fn);     };     S = function(markup, o) {         this.fn = make(markup, o); Unexpected 'this'.
, SessionStateStore = require('./state/session')  , setup = require('./setup'); ',' should be placed last.
this.instanceId = null;         this.unit = null;     }
}     return func(...args);   }; Use the spread operator instead of '.apply()'.
var Intercom = function() {      var a,b, toto; Use the rest parameters instead of 'arguments'.
var jsDAV_iQuota = module.exports = function() {     this.REGBASE = this.REGBASE | jsDAV.__IQUOTA__; Unexpected 'this'.
}         }         var result = TransitManager.prototype.transit.apply(this, arguments);         if(result) { Use the rest parameters instead of 'arguments'.
var prefixes = OpenLayers.Style.SYMBOLIZER_PREFIXES;         for (var i=0; i<rules.length; i++) {             for (var s=0; s<prefixes.length; s++) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for (attribute in tests) {             if ({}.hasOwnProperty.call(tests, attribute)) {                 phonetics = doubleMetaphone(attribute);
req.user = user;       passport.authenticate(strategyName, _onPassportAuth)(req, res);     })(req, res); Unexpected 'this'.
this.total  += t.total;       t.parent     = this.uid; Unexpected 'this'.
var storage = localStorage, i, key, new_value, func, all = bgSettings.defaults    , strArr = bgSettings.NonJSON;   func = function(val) { ',' should be placed last.
minValue(query=null) {         if (!this.__backend.connected) throw new Error('JungleDB is not connected');         return this._currentState.minValue(query); Expected an object to be thrown.
}   }   this._super( "_setOption", key, value );  }, Use the rest parameters instead of 'arguments'.
RANDO.TileContainer.prototype._computeUvs = function () {         var tiles = this._tiles; Unexpected 'this'.
module.controller('DatePickerCtrl', ['$scope', '$mdDialog', 'currentDate', '$mdMedia', function($scope, $mdDialog, currentDate, $mdMedia) {     var self = this;
var s = require('../index'),     assert = require('chai').assert;
if (!base) {         throw new Error("Please provide a base namespace!");     } Expected an object to be thrown.
, sql = ''      , tableName = this._tableizeModelName(query.model.modelName);      , includes = this._getIncludes(query)      , selects = this._getSelectCols(query, tableName, includes); ',' should be placed last.
var frequencies = [];         var context = new window.OfflineAudioContext(1, buffer.length, buffer.sampleRate); The array literal notation [] is preferable.
expandIsoform(selectedIsoform);               }             } Unexpected 'this'.
var mockContext = {   report: function(obj) {    collectedReport.push(obj);   } Use the rest parameters instead of 'arguments'.
var TableClass = function() {          this.cols_ = that.columns_.getKeys().map(function(colName) {       this[colName] = new lf.schema.BaseColumn( Unexpected 'this'.
{     throw new Error("unkown Message Type: '" + message.type + "'");   } Expected an object to be thrown.
this.source_ = source;
function get(concept) {             return $http.get('/openmrs/ws/rest/v1/concept/' + concept, { Unexpected 'this'.
var tar = require('tar')              , zlib = require('zlib'); ',' should be placed last.
value = arguments[0]         notifySubscribers(...args)       } Use the spread operator instead of '.apply()'.
_hideCriteria: function () {             DateFilter.__super__._hideCriteria.apply(this);         }, Use the rest parameters instead of 'arguments'.
value: function(callback) {           var sum = 0.0;
var express = require('express')  , routes = require('./routes')  , user = require('./routes/user')  , http = require('http') ',' should be placed last.
if ( xhr === self.xhr ) {       response( data );      } Unexpected 'this'.
console.log("\nBot Express\n");
const config = {     formComponent: 'vueForm', Unexpected 'this'.
return (this.patternFocused[patternId])   }   setPatternFocused (patternId, focused) {     this.patternFocused[patternId] = focused Unexpected 'this'.
var Utils = Class({  $singleton: true,
$('#help-summary h3').each(function(){    if ((h2hash===hash && $(this).is(':visible')) || $(this).attr('h2hash')!==h2hash) {     $(this).slideUp();    } else { Unexpected 'this'.
if (result0!== null) {           result0 = (function(offset, plist) { return node("node_directive", "DAT", node("node_value", "val_paramlist", plist)); })(pos0, result0[3]);         }         if (result0 === null) { Unexpected 'this'.
each(['delete', 'has', 'get','set'], function (key) {     var proto = $WeakMap.prototype;     var method = proto[key];     redefine(proto, key, function (a, b) { ',' should be placed last.
constructor(args) {         super(args);         this._totalHeightGap = 50;         this._parent = _.get(args, "parent"); 'this' is not allowed before'super()'.
var attrValueHash = exports.attrValueHash;     for (var key in attrValueHash) {         if (attrValueHash.hasOwnProperty(key)) {             var value  = attrValueHash[key]             var _value = this.escape(value) ',' should be placed last.
});             mockResponse = new MockResponse();             mockModel = MockModel.get('items', {                 fetch: function() { Unexpected 'this'.
, binomial = require('binomial')  , labor = require('labor'); } ',' should be placed last.
data.oldParams = item.Params;      var params = handleParamsInCommand(func, data, start? messages["startApplication"] : messages["stopApplication"]); Avoid arguments.callee.
for (var index = 0; index < array[i].length; index++) {           var value = array[i][index] + ""; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
sheet = sheet || NOVAE.CurrentSheet;     letter = arguments[0].match(NOVAE.REGEX.numbers).join("");     number = arguments[0].match(NOVAE.REGEX.letters).join("");     NOVAE.Cells.Used.registerCell(letter + number, sheet); Use the rest parameters instead of 'arguments'.
let bar = [];  bar.push(...foo, 99); } Use the spread operator instead of '.apply()'.
if (missingOptions.length) {     throw new Error('The following options are required:'+ missingOptions.join(', '));   } Expected an object to be thrown.
this.shapes = {};
'use strict'; var $export = require('./_export'); var $at = require('./_string-at')(false); $export($export.P, 'String', { ',' should be placed last.
event.preventDefault();       target.moveFocusDown();       break; Unexpected 'this'.
obj.getCenterPt= function () {         var {pt1,pt2}= this;         var x= (pt1.x + pt2.x)/2; Unexpected 'this'.
if (edit_mode){         $(this).autofit({'min_height': MIN_HEIGHT});         return; Unexpected 'this'.
each(data.handlers, function(handlerSpec, eventName) {       this._bindHandler($el[0], data._owner, eventName, handlerSpec);     }.bind(this));     return $el; Unexpected 'this'.
if(name in this._widgets){    return this._formWidgetValue(this._widgets[name], value);    } Use the spread operator instead of '.apply()'.
} catch( error ) {       setTimeout( removeSWFInIE, 0 );       return; Avoid arguments.callee.
if ( typeof textureDimensions[ file ] == "undefined" ) {    throw new Error( "No dimensions set for texture \"" + file + "\"" );   } Expected an object to be thrown.
if (!converted) {     throw new Error("Unsupported language code '" + langCode + "'.");   } Expected an object to be thrown.
this.get(wsRoute,...wrappedMiddlewares); Use the spread operator instead of '.apply()'.
.replace(/<OTHER_SELECTIONS>/g, otherConstraints.join(' '))                .replace(/<SELECTIONS>/g, this.buildSelections(otherConstraints)); Unexpected 'this'.
this.stopTrackingProgress();       this.trigger('progress');      }
if (!subDef.inactive && _postal.configuration.resolver.compare(subDef.topic, envelope.topic)) {             subDef.callback(envelope.data, envelope);         } Unexpected 'this'.
var lines = o.value.split("\n");    var indices = [];    var sl = 0; The array literal notation [] is preferable.
if (!options) {             throw new Error('A date or time stamp must be provided.');         } Expected an object to be thrown.
{          throw new Error("Long_Task no longer runnable");      } Expected an object to be thrown.
ArrayPrototype.list = function () {         var l = Nil Array prototype is read only, properties should not be added.
if (!file) {         file = yield r.table(fileTable).get(fileId)
this.sandbox.emit('husky.select.terms-of-payment.revert');                         }.bind(this)                     });                 }.bind(this));             } Unexpected 'this'.
var dwords = [];        var len = message.length; The array literal notation [] is preferable.
if (this.validURL()) {     return!!this.indexOf(':   } Unexpected 'this'.
return logDb(new settingDb());         else throw new Error("db nams is not valid");     }, Expected an object to be thrown.
if (typeof ctx[key] === 'function') {       Vue.prototype[`$${key}`] = (...args) => ctx[key](...args);       Vue.directive(key, historyRedirect(ctx, key)); Use the spread operator instead of '.apply()'.
if (!fileStats.isFile()) {   throw new Error("Not a file: '"+inFile+"': ");  } Expected an object to be thrown.
function promiseify(fn) {   return function (...args) {     return new Promise((resolve, reject) => { Use the rest parameters instead of 'arguments'.
var cwd = path.resolve(npm.dir, p)   var s = npm.config.get("shell")   fs.stat(cwd, function (er, s) { ',' should be placed last.
labelNodesDidChange: function() {           this.notifyPropertyChange('labelNodes');         }.observes('*model.labels'), Unexpected 'this'.
requires: {         topology:'single',         mongodb: ">=2.6.0"     } ',' should be placed last.
if (format === undefined) {     throw new Error('idate() expects at least 1 parameter, 0 given')   } Expected an object to be thrown.
const   cache = require('gulp-cache')  , del = require('del') ',' should be placed last.
return Q.all([     exec.apply(null, args.sharepath),     exec.apply(null, args.root),   ]);
for (var i in defaultAspectRatios) {             if (defaultAspectRatios.hasOwnProperty(i)) {                 $aspectRatioToolbar.find('.btn-group').append(render(defaultAspectRatios[i]));             }
, hotplate = require('hotplate') should be placed last.
var feedback = Jasper(function() {       throw new Error('up');     }); Expected an object to be thrown.
var adUnit, error, createAd;         if (!this._frame.contentWindow) {             error = 'the iframe is not anymore in the DOM tree'; Unexpected 'this'.
if ('string' === typeof view) {                 return this.renderFromFile(view,...args);             } Use the spread operator instead of '.apply()'.
function PublicKeyInput() {   Input.apply(this, {name: 'publicKey'}); } Use the rest parameters instead of 'arguments'.
if(fontSize.search('em') > 0) {       fontSize = $(this).toPx({scope : this.quail.html});     } Unexpected 'this'.
function batchImages(descriptor) {    for (var i in descriptor.frames) {     if (descriptor.frames.hasOwnProperty(i)) {      (function (id, progress) {       if (id in imageset) {
return "mat";             throw new Error("internal error: not pod, vec or mat");         } Expected an object to be thrown.
this.isTopPage = (this.pageName === 'endpoints');
export async function exploreCave (store, action) {   const {caveId} = action.payload Unexpected space before *.
if (fragment.match(pathRegexp)) {           throw new Error("Recursive fragment usage detected on " + path + ".")         } Expected an object to be thrown.
this.emit('event', packet.items);       this.emit(...packet.items);       break; Use the spread operator instead of '.apply()'.
}     return app.getAsyncHelper('include').apply(this, arguments);   }); Unexpected 'this'.
enyo.forEach(this.enyoIndexer.getFunctionList(pattern), function(name) {     suggestions.push(name);    }, this); Unexpected 'this'.
var key ='secret12'      , pt = '☢€  ☂ ڴ!'      , ct = twoFish.encrypt(key, pt)      , cpt = twoFish.decrypt(key, ct); ',' should be placed last.
, '/login' : controllers.auth.reverse  , '/logout' : controllers.auth.basic  } ',' should be placed last.
throw new Error('Rev A boards are not yet supported.');         case 'B1': Expected an object to be thrown.
var __call__ = function() { args = arguments.___insert(0, klass) return create_object.apply(undefined, args); Use the rest parameters instead of 'arguments'.
var MAX_ATTEMPTS = 10              , toBeCached = {}; ',' should be placed last.
var i, len = value1.length;         var arr = createSizedArray( len );         for(i=0;i<len;i+=1){ Use the spread operator instead of '.apply()'.
this.createVideoNode = function (url) {
pinpointApp.factory('ServerMapFilterVo', [  function () {     return function () {         var self = this;
if ($this.hasClass('dwwb')) {                     if (testTouch(e)) { Unexpected 'this'.
if (!$(this).hasClass('isPrime')) {                                          } Unexpected 'this'.
var ctx = this;   if (typeof gen === 'function') gen = gen.call(ctx); Unexpected 'this'.
if (g === null) {             throw new Error('Error creating WebGL context.');         } Expected an object to be thrown.
function askForAdminPassword() {     if (this.regenerate || this.composeApplicationType ==='monolith') return;     var done = this.async(); Unexpected 'this'.
const dynamic = {};         for (const field in renders) {             if (renders.hasOwnProperty(field)) {                 const target = `children.${code}.${field}`;                 dynamic[target] = renders[field];
constructor(target, prop, value, meta) {     super(target);     this.prop = prop; 'this' is not allowed before'super()'.
function update(dev, par) {
.attr('type', 'radio')                            .addClass(that.model)                            .val(item) Unexpected 'this'.
const   shell = require('gulp-shell'); ',' should be placed last.
default:             throw new Error('Expected string, function, or undefined.');     } Expected an object to be thrown.
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "STS", Array.slice(arguments));   }, Use the rest parameters instead of 'arguments'.
expect(this.player1.amber).toBe(3);                 this.player1.clickCard(this.punch);                 expect(this.player1).toHavePrompt('Choose a card to play, discard or use');             }); Unexpected 'this'.
unsubscribe(sid, optMax) {     return this.nc.unsubscribe(sid, optMax)   } Use the spread operator instead of '.apply()'.
var statuses   = require("statuses"); var buffer     = (function () {}()).Buffer || respond; module.exports = respond; Unexpected 'this'.
_.each(this.views, function(v) {              this.listenTo(v, 'viewportHeightChanged', this.__handleViewportHeightChanged);
constructor(image) {     super(`Not found '${image}' docker image`);   } 'this' is not allowed before'super()'.
var i = 0;       for (var r = 0; r < data.length; r++) {         var item = data[r];         textToInsert[i++] = "<tr>"; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
BengineConfig.extensibles.xcode = new function Xcode() {  this.type = "xcode";  this.name = "code"; Unexpected 'this'.
else {     throw new Error('[sprintf] huh?');    }    _fmt = _fmt.substring(match[0].length); Expected an object to be thrown.
if (this._transformContent)    this.applyMatrix(true); Use the rest parameters instead of 'arguments'.
const GlobalObject = (this || 0).self || (typeof self!== "undefined")? self : global;
default:       throw new Error(`Only support reference child(), parent(), val() and exists() now, ${obj.property.name} found`);   } Expected an object to be thrown.
this.currentAuth = currentAuth;    this.charPlayer = null;
if (typeof func === 'function') {                 return func(...evalList(flags, scope, locator, this.args, part));             } Use the spread operator instead of '.apply()'.
val = "",     arr = [];    if (sel.eq(0).val() == "id") { val = "id_"; } The array literal notation [] is preferable.
var Q =  driverBlock.Q  , path = require('path') ',' should be placed last.
, Db      = require('../../')  , Proto   = require('../../lib/_proto')  , BooleanType = Db.Boolean, StringType = Db.String ',' should be placed last.
this.tagSelectView = new App.TagSelectView({             allTags: this.allTags         })         this.tagListView = new App.TagListView({ ',' should be placed last.
if (!m_width ||!m_height) {       throw new Error('Map layer has size 0');     } Expected an object to be thrown.
console.trace? console.trace()           : console.error(...arguments);     }) Use the spread operator instead of '.apply()'.
constructor(tag, url, path, xhrSettings, context) {         super();         var assetConfig = {             tag: tag, 'this' is not allowed before'super()'.
let o = chalk.yellow('[out]')   console.log = function(...args) {     out.push(args) Use the rest parameters instead of 'arguments'.
this.updateLinkArray = function (essenceId, entityId, attArr) {         return co(function* () { Unexpected 'this'.
},   initRoles() {     this.set('roleArray', (this.get('primaryResource.projectRoleTemplateIds') || []).map(r => {       return { Unexpected 'this'.
var spriteY = this.y;                     if (this.sprite) {                         this.sprite.setPosition(spriteX, spriteY);                     }                     if (this.spriteNombre) { Unexpected 'this'.
if (event.keyCode === 13) {                 var _val = Util.escapeHtml(this.value);                 window.location.pathname = "/" + _val;             } Unexpected 'this'.
, nameRe = /^[a-zA-Z][0-9a-zA-Z]*$/  , rel, setReverse, validate; setReverse = function (rel, index) { ',' should be placed last.
return;   }); }; The function binding is unnecessary.
}; function printError(...args) {   console.error('INVALID COMMIT MSG:'+ util.format(...args)); } Use the rest parameters instead of 'arguments'.
'Complex': function (s) {       throw new Error('Cannot convert Complex number to Node')     } Expected an object to be thrown.
function replace (word, rule) {     return word.replace(rule[0], function (match) {       var result = interpolate(rule[1], arguments); Use the rest parameters instead of 'arguments'.
else                 throw new Error("i > 0 in pod element");         } Expected an object to be thrown.
var parse = function(dimension, elementType) {         var array = [];         if (dimension.length > 1) { The array literal notation [] is preferable.
},   _resizeMap: function _resizeMap() {     var map = this._getMap();     map.resize(); Unexpected 'this'.
retNode = node.left;     } else if (comparison < 0) {       retNode = node.right; Unexpected 'this'.
var _operationTypes = {         'and': true ',' should be placed last.
});         instance.$service.invoke(instance, Class, slice.call(arguments, 1, arguments.length)); Use the spread operator instead of '.apply()'.
lrSnippet            , mountFolder(connect, '.tmp')             ] ',' should be placed last.
this.parseResults = function(dataobj, facetMap) {       var resultobj = {};       resultobj["records"] = [];       resultobj["start"] = ""; The array literal notation [] is preferable.
if (!that.isDisabled() &&!$parent.hasClass('disabled')) {           var $options = that.$element.find('option'), Unexpected 'this'.
if(typeof arguments[0] === "object") {   for(var key in obj) {    that[key] = obj[key]; Use the rest parameters instead of 'arguments'.
test.equal(reason, undefined, 'Neither USB device was found');       }); The function binding is unnecessary.
it("should have one child of type group ", function () {              const group=file.openGroup('pmcservices'); Missing space after *.
app.config = config.init(_config)   app.use(route.get('/connect/:provider/:override?', function *(provider, override) {     if (override == 'callback') return yield callback     this.session.grant = { Missing space after *.
if (this.position + numBytes > this.byteArray.length) {       throw new Error('dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread');     } Expected an object to be thrown.
{    throw new Error("System.ArgumentException");   } Expected an object to be thrown.
Scope.prototype.$emit = function() {                          return origEmit.apply(this, arguments); Use the rest parameters instead of 'arguments'.
}             throw new Error(str + ", line " + line + " (tokens: '" + tok + "')\n" + JSON.stringify(tokens.slice(0, 5), null, 4));         }; Expected an object to be thrown.
};     this.setHost = function (host) {         host = host || null;     }; Use the rest parameters instead of 'arguments'.
this.parentItem.fetch();         });     });     return this; Unexpected 'this'.
if (!((address_!= null) && address_)) {               throw new Error("Missing address input parameter.");             } Expected an object to be thrown.
this.send(from, 'Hi'+ from + ', nice to meet you!'); };
function off() {   config.off(...arguments); } Use the spread operator instead of '.apply()'.
me.callParent();    } Use the rest parameters instead of 'arguments'.
getFiles: function( data ) {         var configData = data;         var files; ',' should be placed last.
constructor(system, depend) {     super(system);     this.depend = depend; 'this' is not allowed before'super()'.
constructor (YoutubePlayerSettings, YoutubeSearch, YoutubeVideoInfo, PlaylistEditorSettings) {    super();    Object.assign(this,...arguments); Use the rest parameters instead of 'arguments'.
this.view.$('.js-collapse').click();       expect(this.model.toggleCollapsed.calls.count()).toBe(0);     }); Unexpected 'this'.
let topologyContextProps =         { availableDisks: this.props.availableDisks        , handleTopoRequest: this.handleTopoRequest ',' should be placed last.
var fs = require('fs') var path = require('path') var util = require('util') ',' should be placed last.
if (Node.LEADER === data.state && Node.FOLLOWER!== this.state) {       this.change({ state: Node.FOLLOWER });     }
if (response.status!= 200) {     throw new Error('Failed loading data from'+ response.url);   } Expected an object to be thrown.
this._eventInput.on('clean', function(){             if (this._dirty && this._dirtyLock == 0) {                 this._dirty = false; Unexpected 'this'.
this.menuItemDiv.click (function (event) {   var myThis = this;   if (myThis.isOpen) { Unexpected 'this'.
data.eachItemGraphicEl(function (el, idx) {                 el.z = that.z;                 var itemModel = data.getItemModel(idx); Unexpected 'this'.
const referer = req.get("Referer") || "http:  , showImage = true  , debugMode = false;  let url, childArgs, phantomProcess;  if (utils.isRefererValid(referer)) { ',' should be placed last.
, Collection = require('./collection')  , uuid = require('../util/uuid')  , crypto = require('crypto') ',' should be placed last.
(function () {     var opts = options(process.argv); Unexpected space before *.
atEnd: function () {       if (this.situation.loops === true) { ',' should be placed last.
var toString = Object.prototype.toString  , id = toString.call(/a/); module.exports = function (x) { ',' should be placed last.
this.set('mouseUpListener', () => {             Ember.$( 'body' ).removeClass('resizing' ) Unexpected 'this'.
function getFixturePath(...args) {         let filepath = path.join(fixtureDir,...args);
utils.each(this.proxyLabelMethods, function(method) {         labels[method] = method;       }, this);
$('.prime-live-iframe')[0].contentWindow.CKEDITOR.inline(this);      $iframe.trigger('focus');     }); Unexpected 'this'.
const hashmap = {};   Object.keys(this.items).forEach((key) => {     hashmap[key] = fn(_this.items[key]);   });   The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
Sequelize.prototype.log = function() {   var args = Utils.sliceArgs(arguments)    , last = Utils._.last(args); ',' should be placed last.
(function (require) {  var __NEJS_THIS__ = this; Unexpected 'this'.
{                 var document = that.documents[i]; Unexpected 'this'.
it('superscript exclusitivity', function() {       let editor = this.setEditor('<p><sup>0123</sup></p>');       editor.formatAt(1, 2,'script','sub'); Unexpected 'this'.
result = this.multiply(result, m.flat);         this.matrixCache_[m] = result.slice();          m.addListener(this.matrixChange);       }
Float64Array.prototype.__defineProperty__("toJSON", Float64Array.prototype, "toJSON", function () {     var json = '['; Float64Array prototype is read only, properties should not be added.
"database",     async function(siteConfig, builtInPlugins) {         if (process.env.NODE_ENV === "production") { Missing space after *.
debuglog("search complete");             if (!self.isMounted() ||!self.state.searching || self.searchId!= localSearchId) {                 console.error("Discarding stale search results"); Unexpected 'this'.
if (typeof JpegImage === 'undefined') {     throw new Error('No JPEG Baseline decoder loaded');   } Expected an object to be thrown.
saveAuth: function(type, token, data) {       this.getApp().logger.debug('Save user auth', this._id, type, token); Missing space after *.
let data = []; Unexpected 'this'.
, XMLDom = require("xmldom")  , helpers = require('../../helpers.js'); var warnDeprecated = helpers.logDeprecationWarning; ',' should be placed last.
var args = _normalizeArguments.apply(this, arguments);    args.mode = 'toggle';    return this.effect.call(this, args);   } Use the spread operator instead of '.apply()'.
};     me.callParent();     me.down('#id').setReadOnly(false); Use the rest parameters instead of 'arguments'.
var proc = spawn('REG', args, {         cwd: undefined, ',' should be placed last.
export default function() {     save.call(this); Unexpected 'this'.
throw  "aObj: " + aObj.toString() + " is not an IAnaforaObj";  }
this.primitives = [ "print_string", "print_number"];     this.labels = {};     this.instructionIndex = 0; The object literal notation {} is preferrable.
let recommendedCounters = null;   if (props.recommendedCounters) {     recommendedCounters = ( Unexpected 'this'.
callback.apply(undefined, arguments);         }); Use the rest parameters instead of 'arguments'.
], function(c) {    c.addRemoveClass("hover");   }); Unexpected 'this'.
{  var info = ""; Do not use String as a constructor.
}             this.trigger('g:deleted');         }).fail((err) => {             this.trigger('g:error', err); Unexpected 'this'.
}, function (next) {     this.push(footer);     next(); Unexpected 'this'.
var Tile = function(tileCoord, state, opt_options) {   EventTarget.call(this);   var options = opt_options? opt_options : {}; Unexpected 'this'.
function () {  return this.myAttributes;  };
if (!content ||!content.serialize || typeof (content.serialize)!== 'function') {     throw new Error('Content.serialize requires non-null Content instance as first argument')   } else { Expected an object to be thrown.
var process = this.process,         msgChannel = null, Unexpected 'this'.
} else {   window.ga = function(...args) {     console.log([].slice.call(args));   }; Use the rest parameters instead of 'arguments'.
if (t.EQUALITY_BINARY_OPERATORS.indexOf(node.operator) >= 0 &&               right.isPure()) {               let left = node.left; Unexpected 'this'.
,    vec2 = require('../math/vec2'),    shallowClone = require('../utils/Utils').shallowClone; module.exports = Heightfield; ',' should be placed last.
extensions.concat(excluded),             async function(filePath, ev, match) {                 if (!options.excludedWatchPatterns.some(regex => regex.test(filePath))) { Missing space after *.
project.config.templateNames = this.getTemplateNames()   project.allTemplateNames = this.getAllTemplateNames()
ctx.compile_type!== Shade.FRAGMENT_PROGRAM_COMPILE) {                 throw new Error("gl_FragColor and gl_FragData assignment"                        + " only allowed on fragment shaders"); Expected an object to be thrown.
var tmp = require('tmp') var capture = require('./lib/capture_exec').capture ',' should be placed last.
}(this)); Unexpected 'this'.
debug: () => {                 console.log(...arguments);             } Use the spread operator instead of '.apply()'.
String.prototype.__defineProperty__("toUrl", function () {         var url; String prototype is read only, properties should not be added.
var validUrl var malformedUrl var invalidUrl var server = http.createServer(function (req, res) { ',' should be placed last.
}   Context.prototype.user = function(username, password) {     return Meteor.user(username, password);   } Use the spread operator instead of '.apply()'.
if (op.test(parent.content[i].type)) {             throw new Error('Template theme variables are not permitted in operations:\n>>> '+Node.toString(parent));           } Expected an object to be thrown.
kb.holds(subject, UI.ns.wf('tracker'))) {       tracker = kb.any(subject, WF('tracker'))       if (!tracker) throw 'This issue'+ subject + 'has no tracker' Expected an object to be thrown.
if (err) {                 nodeUtil.p2jinfo("fieldInfo XML Error: " + JSON.stringify(err));                 this.ptiParser = null; Unexpected 'this'.
el.remove();                             onReady.callOnContentReady(this.el, {newRender: false});                         }).defer(5000, this, [el]);                     }
paths.push(pkg.name);   const parentDir = path.join(...paths);   const tarballFile = path.join(parentDir, `${pkg.version}-${pkg.dist.shasum}.tgz`); Use the spread operator instead of '.apply()'.
for (var attr in self.defaultSettings) {         if (self.defaultSettings.hasOwnProperty(attr)) {             self.settings[attr] = self.defaultSettings[attr];         }
let items = [defaultItem].concat(this.props.services);     return items.map(service => {       var selectedHtml = this.getItemHtml(service);       var dropdownHtml = (<a>{selectedHtml}</a>); Unexpected 'this'.
let search = event.target.value.trim().toLowerCase();         $(".admin-element-item").hide().filter((i) => {             return $(this).html().trim().toLowerCase().indexOf(search)!== -1;         }).show(); Unexpected 'this'.
self._gen_table = function( table ) {         var t = [];         if( table instanceof Array ) { The array literal notation [] is preferable.
Handlebars.registerHelper('truncate', function(options) {         var value = options.fn(that);         if(value.length > 255) { Unexpected 'this'.
describe("Validators",() => {     beforeEach(() => {         const wrapper = document.createElement("div"); Unexpected 'this'.
_transitionInsertElement() {     if (this.get('shouldTransition')) {       this.transitionDomNode(this.get('element'), 'enter', this.didTransitionIn);     } Unexpected 'this'.
if (!checkValue(value)) {     throw new Error('Not a valid boolean value, can\'t initialize.');   } Expected an object to be thrown.
var authHeader = req.headers.authorization.split(' ')     var format = authHeader[0]     var tokenId = authHeader[1] ',' should be placed last.
console.log("binding "+path);     s.app[verb || 'all'](path, callbacks); Unexpected 'this'.
, "src/lib/keen-domready.js"          , "src/async.js"         ], ',' should be placed last.
if (!semver.satisfies(pkg.version, that.options.gitbook)) {             throw new Error("GitBook version doesn't satisfy version required by the book: "+that.options.gitbook);         } Expected an object to be thrown.
}   arguments.callee.instance = this;
return fn( elem,...args ) ) Use the spread operator instead of '.apply()'.
callback(err);                              });                          } The function binding is unnecessary.
if(typeof options.name!=='string') {      ko.logError('Components must be provided a name (namespace).');    } Expected an object to be thrown.
val = val.replace(/[, ]/ig, '/').replace(/\/\    for (var m = 0; m < w2utils.settings.fullmonths.length; m++) {     var t = w2utils.settings.fullmonths[m]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
exception = _error;               throw new Error("onNamespaceRemoved failure: " + exception);             } Expected an object to be thrown.
makeNestedResource(this, 'invoices', 'invoice');             makeNestedResource(this, 'logs', 'log');         }).expect('this'.
type ='select';                 }                 if ( $node.prop( 'nodeName' ).toUpperCase() === 'TEXTAREA' ) {                     type = 'textarea'; Unexpected 'this'.
it('should respect noValidate', () => {     var change = sinon.spy()      , inst = tsp( ',' should be placed last.
httpServer.listen(0, function(er) {     assert.ifError(er); Unexpected 'this'.
console.log("Error in projects:", error);          });            models.flavors.bind("error", function(model, error) {              console.log("Error in flavors:", error); Unexpected 'this'.
callback(null, json.objectIds)   }) } The function binding is unnecessary.
message: 'What do you want to call your view?',      default: answers.slugifiedName     }, { Unexpected 'this'.
this.getDomEvent().returnValue = false;         this.base(arguments, vValue);       }.bind(this));
export const changeNumCols = (numCols) => (dispatch) => {     if (!numCols || numCols < 0) throw new Error(`Invalid number of cols:${numCols}`);     for (let i = 0; i < numCols; i++) { Expected an object to be thrown.
if (key!== 1 &&!this.findTouch_(touchList, key - 2)) {         d.push(this.touchToPointer_(value.out));       } Unexpected 'this'.
var browsers = getBrowser().browsers;             for (var i = 0; i < browsers.length; i++)             { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.dialog('Insert Drop Zone', null, dialog_drop);   var node = select(container, toggle)[0];   if (node) { Unexpected 'this'.
} function AbortSignalPolyfill () {   this.onaborted = null   this._abortSignal = {aborted: false} Unexpected 'this'.
it('prevents the second launch of app', function (done) {       this.timeout(120000)       const appPath = path.join(__dirname, 'fixtures', 'api','singleton-old')       const first = ChildProcess.spawn(remote.process.execPath, [appPath])
foreign_ids: ids        .map(function(id) {           return this.collection + ':' + id;         })
while (innerWrap.firstChild) innerWrap = innerWrap.firstChild             innerWrap.appendChild(node)           } Unexpected 'this'.
if (notToReject-- === 0) {           deferred.reject(rejected);         } Use the spread operator instead of '.apply()'.
this.items = [];                 } The array literal notation [] is preferable.
}).call(this);
var $export = require('./$.export'); var buffer  = require('./$.buffer'); ',' should be placed last.
close(...args) {     this.server.close(...args)   } Use the spread operator instead of '.apply()'.
if(optFieldDefs) {       for (var name in optFieldDefs.fields) {         if(optFieldDefs.fields.hasOwnProperty(name)) {           var defs = optFieldDefs.fields[name];           var {result, keysToDelete} = parseFieldDef(x, name, defs);
var _Itag=function(args){   this._base=args.base; Unexpected 'this'.
function defaultSetter(name, value) {   this._nativeSet(name, value);   if (this['$prop_' + name].nocache) {     this._triggerChangeEvent(name, value); Unexpected 'this'.
requires: {         mongodb: ">=2.6.0"      , topology: "replicaset"     } ',' should be placed last.
},   willInsertElement: function () {     this.set('participants', this.get('proposal.possibleDelegates'));   }, Unexpected 'this'.
options_clone.comm = comm;             return that.new_model(options_clone).then(function(model) { Unexpected 'this'.
this.cencKeyIds.push(...keyIds);     this.systemIds.push(systemId); Use the spread operator instead of '.apply()'.
}     var type = nonpol[0];     switch ( type ) { Unexpected 'this'.
if (routeInfo.route.indexOf(':') >= 0) {                 throw new Error('default route must not have params:'+ routeInfo.route);             } Expected an object to be thrown.
fn.call(cursor.context || this, {                         sender: this, Unexpected 'this'.
})(this); Unexpected 'this'.
var name = element.tagName.toLowerCase();                 if (BuildHelpers.doesStringLookLikeDependency(name)) {                     dependenciesList.push(name); Unexpected 'this'.
setWaypoints: function(latLngs, cb) {     var callbackCount = 0;     var firstErr; ',' should be placed last.
var plugin_cli = shell.exec(cmd, {silent:true});                     if (plugin_cli.code > 0) throw new Error('An error occured during plugin installation for'+ platform + '.'+ plugin_cli.output);                 }); Expected an object to be thrown.
function _injectSprintfProcessor() {     var values = []; The array literal notation [] is preferable.
module.exports = function (context ) {   var deps = [];
function maker(e, s) {     return function (...args) {       return func.apply(e[s], e, args)     } Use the rest parameters instead of 'arguments'.
if (_.config.selection) {     for (var idx = 0; idx < _.message.length; idx++) {      var item = _.message[idx], iType = typeof item, The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
it('dialog element should be focused', function() {                 this.dialog.focusContent(); Unexpected 'this'.
for (i in this._lngCoords) {             if (this._lngCoords.hasOwnProperty(i)) {                 lines.push(this._verticalLine(this._lngCoords[i], this.options.zoneStyle));             }
'use strict';
WMTSRequestEncoding.KVP;
'use strict';
}     else {       var method = require(filepath);       Object.defineProperty(Object, methodName, {         value: function () { Object prototype is read only, properties should not be added.
self.label = "General Plugin"; }(hatohol)); Unexpected 'this'.
async function loadValue (ctx, { network, dataIdentifier }) {   await this.load(ctx, { where: {     networkId: network.id, Unexpected 'this'.
this.redirect('hacker', user);     }   }   this.next(); } Unexpected 'this'.
return api.getSite({ siteId }).then(async siteData => {       const accessToken = await this.authenticate();       const arr = addons.map(({ addonName, addonDidInstall }) => { Unexpected 'this'.
if (inElements) {     for (var index = 0; index < inElements.length; index++) {      var elemObject = $(inElements[ index ]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
$this.one('animateClosedStart', function(e) {         e.stopPropagation(); Unexpected 'this'.
var handler = dispatchHandlers[action]   if (handler) handler(...args)   else console.error('Missing dispatch handler:'+ action) Use the spread operator instead of '.apply()'.
setHasClickThrough: function(status) {       const groups = this.layers.slice().filter(layer => layer.class() == MSLayerGroup) Use the rest parameters instead of 'arguments'.
if (fold.start.row < this.startRow || fold.endRow > this.endRow) {                 throw new Error("Can't add a fold to this FoldLine as it has no connection");             } Expected an object to be thrown.
var isHardDisabled = isButtonDisabled($(this)) || isButtonDisabledVision($(this));
var express = require('express'); var router  = express.Router(); ',' should be placed last.
}   applyFilter(...args) {     return this.applyModifier(...args);   } Use the rest parameters instead of 'arguments'.
case'starred_at':             return values.push(this.STARRED_AT);           default: Unexpected 'this'.
var result = [];      for (var row in table.getRows()) {       if (!table.getRows().hasOwnProperty(row)) continue;       row = table.getRows()[row]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
module.exports = avconv; var   Stream = require('stream'); ',' should be placed last.
do {     parent = parent? parent[i] = [] : this._root = [];     if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm; Unexpected 'this'.
default:                 throw new Error("Unsupported uniform format for setting. May be a todo."); Expected an object to be thrown.
const printStyle = $(`<link rel="stylesheet" href="${this.app.browser.runtime.getURL('build/css/print.css')}" media="print">`) class Observer {
accepts: ['js', 'css'], should be placed last.
, 'test pipe': function () {     var ex = jake.createExec('ls', function () {}) Unexpected 'this'.
function getHandleNearImagePoint(element, data, coords) {         for (var handle in data.handles) {             if (!data.handles.hasOwnProperty(handle)) continue;             var handleCanvas = cornerstone.pixelToCanvas(element, data.handles[handle]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.setXhr();  this.setWatcher(); } Unexpected 'this'.
exports.del = function(test, opts, callback) {   opts.method = 'DELETE'   return exports.request(test, opts, callback) } Use the rest parameters instead of 'arguments'.
Rye.define('DOMEvents', function(){
if (e.type === 'change' && tag!== 'SELECT') {             var type = this.type.toLowerCase(); Unexpected 'this'.
var tasks = {}; options.map(function(t) { tasks[t] = 0 });
var o = {};  oForEach(that, function (value, key) {   if (callback.call(scope, value, key)) { Unexpected 'this'.
define(Array,'slice', function (begin, end) { Array prototype is read only, properties should not be added.
if(name === 'emit')       return emitter._emit(...args) Use the spread operator instead of '.apply()'.
return this > lower && this < upper;    }  , character = function(num) { return String.fromCharCode(num); }  , parse = function(key) { ',' should be placed last.
for (var j = 0; j < columns.length; j++)   { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (Error.captureStackTrace) {       Error.captureStackTrace(this, err)     } Avoid err.
this.result = [    { Unexpected 'this'.
string = ["I, [" + (new Date().toISOString()) + "]  INFO -- :"],       data = string.concat(args.slice());   return console.log(...data); }; Use the spread operator instead of '.apply()'.
this.expression._walk(visitor);             AST_BlockStatement.prototype._walk.call(this, visitor);         }; Unexpected 'this'.
Crisp.Router.route('/forms/:id', function() {     Crisp.View.get('NavbarMain').highlightItem('/forms/', this.id);
this.container = $(options.context || 'body').addClass(vendor + 'canvas');
if(shouldFail[method]) {     throw new Error("You should not call anymethod on this object"); Expected an object to be thrown.
'use strict' const coreConstants = require(rootPrefix + '/config/core_constants')  , QueryDBKlass = require(rootPrefix + '/app/models/queryDb')  , ModelBaseKlass = require(rootPrefix + '/app/models/base') ',' should be placed last.
exception = _error;       throw new Error("clone: " + exception);     } Expected an object to be thrown.
'use strict'; var Db = require('../../')  , ObjectType = Db.Object, BooleanType = Db.Boolean; module.exports = function (a) { ',' should be placed last.
} catch (ex) {           throw new Error('try to remove non-existing shortcut');         } Expected an object to be thrown.
articleSchema.pre('findOne', function(next) {
current_state(data);           });         } The function binding is unnecessary.
if (isMaster) {       const rs = this._db[cmd].apply(this._db, args);       if (cb) process.nextTick(() => { cb(rs); }); Use the spread operator instead of '.apply()'.
esriRequest({               url: portalUrlUtils.getUpdateItemUrl(this.portalUrl, this.username, itemId, folder),               handleAs: 'json', Unexpected 'this'.
var pairs = s.split("&");       for (var pi in pairs) {         if (pairs.hasOwnProperty(pi)) {           var kvsegs = pairs[pi].split("=");           var key = decodeURIComponent(kvsegs[0]), val = decodeURIComponent(kvsegs[1]);
Minionette.CollectionView = Minionette.View.extend({     constructor: function(options) {         options = options || {};         Minionette.View.apply(this, arguments); Use the rest parameters instead of 'arguments'.
this.aski18n(this, this.currentQuestion++, this.totalQuestions); }
try {     var template = require(viewsDir + '/' + viewPath + '.hbs');     var html = template(data);     callback(null, html); ',' should be placed last.
};   AbstractQuery.prototype.isBulkUpdateQuery = function() {     return this.options.type === QueryTypes.BULKUPDATE;   }; Unexpected 'this'.
function formatArgs(args) {   var useColors = this.useColors; Use the rest parameters instead of 'arguments'.
if(this.options.callTip)    tip = this.options.callTip.apply(this, [arguments]);    else Use the rest parameters instead of 'arguments'.
return Math.floor(Math.random() * (max - min + 1)) + min;     },     topUpRooms: function () { Bad line breaking before and after ','.
const redirHandler = (payload) => {             this.metrics.tick('request.redir');             return { Unexpected 'this'.
}   var _ = (deps && deps.underscore)? deps.underscore : global._;   var tweenable = (deps && deps.Tweenable)? deps.Tweenable : global.Tweenable;   var defaultConfig = { ',' should be placed last.
const install = plugin.install || plugin;   const ret = install(target, options);   installed.set(plugin, ret); Unexpected 'this'.
}   return processPlugins(plugins, a[0], a[1]); }; Use the rest parameters instead of 'arguments'.
for (var i = 0; i < objects.length; i++) {       for (var j in objects[i]) {         if (objects[i].hasOwnProperty(j)) {           target[j] = objects[i][j];         }
} else {           callback();         } Unexpected 'this'.
});                     eventer.trigger(target, e);                     return e.result; Unexpected 'this'.
if ( $container.length === 0 ) {             throw new Error("Container not found for PaletteSelector: " + spec.selector);         } Expected an object to be thrown.
this.center = new Vector2();         this.rings = [];         this.isBridged = false; The array literal notation [] is preferable.
function _tidyEmpersand(str, hasFirst, hasLast) {     if (str) { Use the rest parameters instead of 'arguments'.
if (!this.layers[this.meta.last_layer].boundary){
}     return this.outerHeight(includeMargin) - this.height();   }
function createElementCtor(ctor, base) {   function F(...args) {     Element.apply(this, args);     if (ctor) { Use the rest parameters instead of 'arguments'.
if (checkForProperty) {    throw new Error("You can't both check for the existence of a property and set it at the same time.");   } else { Expected an object to be thrown.
if (definition.events) {                 for (event in definition.events) {                     if (definition.events.hasOwnProperty(event)) {                         this.addEventListener(event, createTrigger(definition.events[event]));                     }
if (this.messageToPeers) {             _.onAfter (log.impl, 'defaultWriteBackend', this.$ (function (params) {                 this.messageToPeers ({ what: 'log', params: params }, this.isDeveloper) })) } }, Unexpected 'this'.
if(position === "left" || position === "right") {                     container.css({top:($this.height()/2) - (height/2) + "px"});                 } else { Unexpected 'this'.
constructor: function PageableCollection(...args) {             PageableCollection.__super__.constructor.apply(this, args);         }, Use the rest parameters instead of 'arguments'.
var list = document.querySelectorAll('div.bf');     for (var i = 0; i < list.length; i++) {         console.log(list[i].innerText); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.set(options.updatedAt, now);    }    if (options.updatedBy && this._req_user) {     this.set(options.updatedBy, this._req_user._id); Unexpected 'this'.
}   logDebug (...args) {     this.log.debug(`[${this.socketId}] TcpSocket`,...args);   } Use the rest parameters instead of 'arguments'.
console.log(node);                      throw new Error(node+" is not array. cannot join fmt:"+fmt);                  } Expected an object to be thrown.
var params = {};       for (var i in this.pathParameterNames) {         if(this.pathParameterNames.hasOwnProperty(i)) {           var name = this.pathParameterNames[i];           params[name] = decodeURIComponent(matcher[parseInt(i, 10) + 1]);
avoidableParams[5] = avoidFords;                 var truckParams = [];                 var truck_length = permaInfo[preferences.value_lengthIdx]; The array literal notation [] is preferable.
if (i < 0 || i > 7) {       throw new Error("Invalid signature type");     } Expected an object to be thrown.
Bridge.init(); }); Unexpected 'this'.
_.each(fieldsValues, function(setValue, fieldName) {     self.setOne(doc, fieldName, setValue, options);   }); }; Unexpected 'this'.
if (observer.addedComponent) {     for (var i = 0; i < entity._components.length; i++) {      observer.addedComponent(entity, entity._components[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (clip(d.geometry.coordinates) && dsoDisplay(d.properties, cfg.dsos.limit)) {           var pt = projection(d.geometry.coordinates),               type = d.properties.type; Unexpected 'this'.
fn.apply( this, arguments );   this._format();   if ( previous!== this.options.value ) { Unexpected 'this'.
JSii.prototype.queryParser = function(query) {     var res = [];        var currChar; The array literal notation [] is preferable.
},         initContainer: function(...args) {             original.apply(this, _.rest(args)); Use the rest parameters instead of 'arguments'.
tasks: {    * a(f) {     t.equal(f, fly1, 'pass fly instance to tasks'); Unexpected space before *.
exception = _error;       throw new Error("ResolveNamespaceDescriptor failure: " + exception);     } Expected an object to be thrown.
}     flags = flags || {};     const previousValue = this.dataValue; Use the spread operator instead of '.apply()'.
var vec3 = module.exports Unexpected 'this'.
return true; };
this._selection = rawSelection.reduce(function (prev, curr) {             prev[curr] = true;             return prev;         }, {});     }; The function binding is unnecessary.
req.app = res.app = origApp;         return next(err);       }); Use the rest parameters instead of 'arguments'.
var max = 0;     for (connectorId in this.edges) {         if (this.edges.hasOwnProperty(connectorId)) {             var connector = IdToConnector(connectorId);             if (connector.name === name) {
it("blank", function (done) {         this.timeout(constants.timeout);         Augur.blank( Unexpected 'this'.
export async function http__error(ctx, next) {   try { Unexpected space before *.
var ptSlater =  Clazz.newIntArray (nFuncs, 0);  var atoms = this.ac;  for (var i = 0, pt = 0; i < tokens.length; ) { Unexpected 'this'.
function e() {                  var e = t.call(this) || this;                  return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._layer.addChild(e._img3), e._img2 = new PIXI.Sprite, e._layer.addChild(e._img2), e._img1 = new PIXI.Sprite, e._layer.addChild(e._img1), e._basePos1 = new PIXI.Point, e._basePos2 = new PIXI.Point, e._basePos3 = new PIXI.Point, e._tweens = [], e              } Unexpected 'this'.
},     onContentChange: function(optionIndex, e) {         var options = this.props.options.slice();         var option = _.clone(options[optionIndex]); Unexpected 'this'.
}     if ( ++steps > that.options.executionLimit ) throw new Error('Execution Limit Reached');    } Expected an object to be thrown.
} function UPlot(opts, data) {  var self = this;  var series  = setDefaults(opts.series, xSeriesOpts, ySeriesOpts); Unexpected 'this'.
, debug     = require('debug')('koa-better-ratelimit')  , copy      = require('copy-to'); ',' should be placed last.
this.bindSourceData(this.boundSource);     } Unexpected 'this'.
class Rectangle extends _RectangleBase$(T) {       constructor(left, top, width, height) {         super(left, top); 'this' is not allowed before'super()'.
prepareSVG(svg, options, encodings);  for(let i = 0; i < encodings.length; i++){   var encodingOptions = merge(options, encodings[i].options); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var logger;     var driver = model.load( module, { Unexpected 'this'.
document.body.onmousemove = function(e) {   var halfHeight = canvas.height/2;   var halfWidth = canvas.width/2 ',' should be placed last.
if (this._sPrettyPrintDelayedCallID) {        DelayedCall.remove(this._sPrettyPrintDelayedCallID);       } Unexpected 'this'.
constructor(target, selector, args, undo, meta) {     super(target);     this.selector = selector; 'this' is not allowed before'super()'.
, crypto = require('crypto')  , net = require('net')  , sasl = require('./sasl')  , fs = require('fs') ',' should be placed last.
let column_ = columns_[i];             if (!(column_ instanceof nlobjSearchColumn)) throw new Error('SSS_TYPE_ARG_REQD'); Expected an object to be thrown.
var exec = require('child_process').exec  , os = require('os') ',' should be placed last.
'use strict';
_classCallCheck(this, _ArrayCollectionStrategy);           _CollectionStrategy.call(this);           this.observerLocator = observerLocator;         } Use the rest parameters instead of 'arguments'.
this._createTree();             } else if (this.options.type === 'dialog' && Boolean(this.options.autoOpen).valueOf() === true) {                 this.open(); Do not use Boolean as a constructor.
if (oldMax!== newMax) {       this.element._flatpickr.set('maxDate', newMax);     } Unexpected 'this'.
var sockjs = require('sockjs') var path  = require('path') var fs = require('fs') ',' should be placed last.
this.extendForeignObject(obj_array._id, obj, function (err) {     if (err) { Unexpected 'this'.
var assert = require('assert') var tag_version = require('../../lib/utils').tag_version require('../../lib/logger').setup([]) ',' should be placed last.
mapLayer: new cwt.ScreenLayer(this.TILE_ANIM_STEP, this.TILE_ANIM_TIME),
this.set('module', () => {       Reflect.apply(window.ga, this, arguments);     });
var str = 'div.' + variables.get.typeOfBranch() + 'Branch:visible';                 var temp = [];                 $.each($(str).get(), function(i, item) { The array literal notation [] is preferable.
var express = require('express')  , app = express.createServer(); var i18n = require('../index')  , i18nMongoSync = require('../backends/mongoDb/index'); ',' should be placed last.
if (typeof number!== 'number') {       throw new Error('Float32Encoder.encode(): Argument received is not a number.');     } Expected an object to be thrown.
class UnitHealthStore extends GetSetBaseStore {   constructor(...args) {     super(...args); Use the rest parameters instead of 'arguments'.
}     } Unexpected 'this'.
proceed.apply(this, args);             if (tooltip.events && tooltip.events.show) { Unexpected 'this'.
if (!(o.jiff === share.jiff)) {         throw new Error('shares do not belong to the same instance (/)');       } Expected an object to be thrown.
self[name + 'MarkReady'] = function(data) {                     if (!data) throw new Error("No object passed to " + name + "MarkReady");                     if (deferreds[name]) { Expected an object to be thrown.
let queue = this._updateByIdQueue[_id]    this._updateByIdQueue[_id] = null ',' should be placed last.
var bind = function(f ) {     return Function.prototype.bind.apply(f, [undefined].concat(args)); }; Use the rest parameters instead of 'arguments'.
const CardListExample = () => {   const cards = [...new Array(10)].map((_, i) => (     <Card key={i} className="md-cell md-cell--2 md-cell--4-tablet"> Use the spread operator instead of '.apply()'.
return args[ this.lastToggle++ ].apply( this, arguments ) || false;   }).bind( this ); Unexpected 'this'.
var categories = this.model.get('data');         expect(categories.length).toEqual(1);         expect(categories[0].name).toEqual('Barcelona');
if (!object_ended) {                     throw new Twig.Error("Expected end of object.");                 } Expected an object to be thrown.
, cache = require('../lib/cache/object')  , Job = require('../lib/Job'); ',' should be placed last.
} else {      return fileClient.fetchChildren(launchConfDir.ChildrenLocation).then(function(children) { Avoid arguments.callee.
if (!((objectModelDeclaration_!= null) && objectModelDeclaration_)) {           throw new Error("Missing object model delcaration input parameter!");         } Expected an object to be thrown.
var Backbone = require("backbone")  , Template = require("./template") ',' should be placed last.
}     Collection.prototype.smartChanged = function(index, id, fields) {       var data = this[id].data;       _.each(fields, function(val, key) { Unexpected 'this'.
this.route('list-items');     this.route('selected-element'); Unexpected 'this'.
console.log('testbody1');   process.nextTick(function() {     throw new Error('Too bad');   }); Expected an object to be thrown.
}                 base.update_cb($this,val);             } Unexpected 'this'.
unsafeWindow.localStorage.clear();   for (var key in savedLocalStorage) {    if (!savedLocalStorage.hasOwnProperty(key)) {continue;}    unsafeWindow.localStorage[key] = savedLocalStorage[key]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
renderObj.filename=tempFilePath;                 html=ejs.render(temp, style);               }else{ Use the rest parameters instead of 'arguments'.
layer.methods = {};         var methods = rules[rule];         for (var method in methods) {             options = methods[method]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
rethinkdb.Connection.prototype.iter = function(exprOrOpts, opt_callback, opt_doneCallback) {     argCheck_(exprOrOpts, 1); Use the rest parameters instead of 'arguments'.
var particleShader = [   'uniform sampler2D texture;', 'uniform vec2 resolution;' ',' should be placed last.
'value': dataArray[i],        'meta': Chartist.serialize(this.data.series[i].meta)       }, Chartist.xmlNs.uri); Unexpected 'this'.
io.set('transports', [                         'websocket',                         'flashsocket',                         'htmlfile' ',' should be placed last.
Permutation.forEachPermutation = function ( array, callback ) {          recursiveForEachPermutation( array, [], callback );      }; The array literal notation [] is preferable.
propertyName: propertyName,                                     type: 'css-background-image'                                 }; Unexpected 'this'.
typeof define === 'function' && define.amd? define(factory) :  factory(); }(function () { 'use strict';  const items = [{}, {}, {}]; Unexpected 'this'.
workflow: Ember.computed('submission.provider.reviewsWorkflow', function () {         return WORKFLOW[submission.provider.reviewsWorkflow].toLowerCase()];     }), Unexpected 'this'.
if (e.target.tagName!= "g") {         target.clearSelection(brush1);       } Unexpected 'this'.
yate.AST.prototype.error = function(s) {     console.log('ERROR:'+ s + '\n' + yate.parser._where(this.where));     throw new Error('ERROR:'+ s); }; Expected an object to be thrown.
function Command(json) {         var self = this;         self.objStatus        = ko.observable('ready'); Unexpected 'this'.
clearInterval(pollingInterval);     }, defaultInterval); }); Unexpected 'this'.
var json = self.elementToJSON()     json.data = this.getData()     return json Unexpected 'this'.
var Schema = mongoose.Schema; var ObjectId = Schema.ObjectId; var User = new Schema({  displayName: ObjectId, ',' should be placed last.
valueClick: action(function () {     if (this.get('isEmberObject')) {       this.get('mixin').send('digDeeper', this.get('model')); Unexpected 'this'.
if ($(this).prop('checked')) {                 portal.chat.setSetting('offline', true, true); Unexpected 'this'.
if($(this).attr('disabled', true)){        return $(this); Unexpected 'this'.
Router._createDeferredRoutes = function () {     for (var n = 0; n < this._i18n.deferredRoutes.length; n++) {         var defRoute = this._i18n.deferredRoutes[n]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
fg.controller('fgEditController', function ($scope, fgUtils) {   var self = this; Unexpected 'this'.
this.addCss('navbar '.concat(prefix).concat('-')             .concat(this.position).concat(' navbar-')             .concat(this.theme).concat(' bg-')             .concat(this.theme).concat(' navbar-expand-lg'));
function extend(target, modules) {   for (var _i = 0, modules_1 = modules; _i < modules_1.length; _i++) {     var module = modules_1[_i];     switch (typeof module) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
collision: 'flipfit'         };     var win = $(window); ',' should be placed last.
.on("mousedown", '[data-ax5grid-column-resizer]', function (e) {                 var colIndex = self.getAttribute("data-ax5grid-column-resizer");                 self.xvar.mousePosition = GRID.util.getMousePosition(e); Unexpected 'this'.
}).call(this);
this.showMessage("error", "Error while deleting script.");                                 }                             }, this)                         }); Unexpected 'this'.
if (window.console && console[methods[zl]]) {                     Function.prototype.apply.call(console[methods[zl]], console, result.format(logArgs, lvl, event));                 } Use the spread operator instead of '.apply()'.
try {     yield packages(this.metric).upload(pkg)     this.body = yield packages(this.metric).get(pkg.name)   } catch (err) { Unexpected 'this'.
exports.show = function() {   this.body = 'Hero'+ this.req.user.login; Unexpected space before *.
setTimeout(function() {         this.useToolbox();     }.bind(this);     this.nextArticle(0, false, this.sectionTags_.length); Unexpected 'this'.
var lazy = lazy_require({   Client: [ 'azk/agent/client' ], Unexpected 'this'.
info.connection().on('connection', socket => {     let _setupMethodHandlers = setupMethodHandlers.bind(that, info, socket); Unexpected 'this'.
Initializer.prototype.run = function(cb, thisArg) {   var phases = this._phases    , idx = 0; ',' should be placed last.
var Convex = require(__dirname + '/src/shapes/Convex') var vec2 = require(__dirname + '/src/math/vec2') ',' should be placed last.
}   return this.render(template, options) }
}       saveInstance(options);       break; Use the rest parameters instead of 'arguments'.
} else {       var listners = getListeners(this, type, true);       if (listners) { Unexpected 'this'.
var util = require('util'); ',' should be placed last.
update: function (block) {              this.clear() ',' should be placed last.
return Globalize[   runtimeKey( "messageFormatter", this._locale, args )  ]; Use the rest parameters instead of 'arguments'.
}     for (var i = 0; i < listOrderedTickers.length; i++) {       var tickerId = listOrderedTickers[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
default:         throw Error('Unexpected tag:'+ cp_info.tag);     } Expected an object to be thrown.
each(arguments[0], function(value, name) {           this.setAttribute(name, value);         }.bind(this));       } Unexpected 'this'.
ACCESSIBLE_GLOBALS.customSidebarButtons : [];
writeUint64(value) {         if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');         this._view.setFloat64(this._writePos, value); Expected an object to be thrown.
var merge_options = require('./lib/helpers/merge-options'); Array prototype is read only, properties should not be added.
this.on(C.EVENT_TYPE.LIGHT_STRUCTURE_CHANGED, function () {             this.updateLightParameters();             this.shaderFactory.setLightStructureDirty(); Unexpected 'this'.
if (xhrObject()) {     return sendXhr('DELETE', config.url, config.params, config.api_key, callback);   } Unexpected 'this'.
if (is.defined(width)) {     if (is.integer(width)) {       this.options.width = width; Unexpected 'this'.
writecb(er);   }); }; The function binding is unnecessary.
if(!await cfg.fileExists(modName)) {             throw new Error(`${cfg.getBase()} not found in ${cfg.getDir(modName)}`);         } Expected an object to be thrown.
this.requestTransaction(function () {         if (op.id[0] === 0xFFFFFF) { Unexpected space before *.
$scope.newReservation = true;     $scope.user = {};    } The object literal notation {} is preferrable.
var res = '';         for (var i = 0; i < data.length; i++) {             var s = data[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
jj = ((j*4) & modulus);    if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);    if(!sectors[addr]) break; Expected an object to be thrown.
exports.remove = function remove(_path) {   _unset(this.config, replacePath(_path)) Unexpected 'this'.
$(this).attr('checked', true);                 return false; Unexpected 'this'.
}   get (collectionName, docId, field,...args) {     let [collectionName, docId, field] = parseArguments(args)     return this.collectionSet.get(collectionName, docId, field) Use the rest parameters instead of 'arguments'.
if (opt_init && opt_init.responseType == 'document') {       return fetchPolyfill(input, opt_init);     } Use the spread operator instead of '.apply()'.
app.render = function(name, options, fn){   var opts = {}    , cache = this.cache ',' should be placed last.
function Scribble_canvas(tag) {   this.tagcanvasDiv = tag;    this.colorseg = Math.floor(Math.random()*14); Unexpected 'this'.
var count = this.publish(...arguments); Use the rest parameters instead of 'arguments'.
function RuleDecl() {   throw new Error('RuleDecl cannot be instantiated -- it\'s abstract'); } Expected an object to be thrown.
elements.each(function(i) {             var pos = $(this).offset(); Unexpected 'this'.
if(newValue!== lastValue) {           setMeta(this, lastValueKey, newValue);           this.notifyPropertyChange(key); Unexpected 'this'.
var aArgs = Array.prototype.slice.call(arguments, 1),           fBound = function () { Use the rest parameters instead of 'arguments'.
if (options.inject && Array.isArray(options.inject)) {       injects.push(...options.inject);     } else if (options.inject) { Use the spread operator instead of '.apply()'.
this.headers.sort(cmp(function(h){                 return self.order.indexOf(h);             }));             for(var i = 0; i < this.data.length; i++) {                 var row = new JsonRow({ The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
_uploadTask: task(function * (blob, url, resolve, reject) {     try { Unexpected space before *.
var template = this.normalize(loaded, options);               extend(this.cache[plural], template); Use the spread operator instead of '.apply()'.
, force = _ref[2]    , cb = _ref[3]; ',' should be placed last.
, pool = require('./collabjs.pool.mysql').pool  , passwordHash = require('password-hash'); ',' should be placed last.
}).call(this, typeof window!== 'undefined'? window : typeof global!== 'undefined'? global : typeof self!== 'undefined'? self : {});
this.newick = data;       MetadataService.getMetadata(this.metadataurl);     }); Unexpected 'this'.
fs.appendFile = function(path, data, options, callback) {   callback = maybeCallback([path, data, options]);   options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' }); Use the rest parameters instead of 'arguments'.
Screen.prototype.exec = function(file, args, options, callback) {   var ps = this.spawn(file, args, options);   ps.on('error', function(err) { ',' should be placed last.
this.webCompile(inPath, outPath, function (result) {         _this2.fsWrite(inPath, outPath, result, callback);       });     } Use the spread operator instead of '.apply()'.
}).call(this);
'</div>' +         this.view.toHTML() + '</div>' +         '<div id=' + this.on('click', this.clear) +'style="text-align:right;width:100%;float:right;margin-bottom:20px;" class="searchTitle"><font size=-1><u>Clear</u></font></div>';     }, 'this'.
var self = this;     Eventable.call(self);
if ( bool =!!elem.canPlayType ) {                 bool      = Boolean(bool);                 bool.ogg  = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,''); Do not use Boolean as a constructor.
unmountChildren: function(renderedChildren) {     for (var name in renderedChildren) {       if (renderedChildren.hasOwnProperty(name)) {         var renderedChild = renderedChildren[name];         ReactReconciler.unmountComponent(renderedChild);
this.listenTo(this.model, 'change:bits', function(wire, bits) {             this.$el.toggleClass('bus', bits > 1);         }.bind(this));     }, Unexpected 'this'.
notIn(refValues, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValues = this._normalizeValues(refValues, valueInfo);             return!_.includes(normalizedRefValues, value); Unexpected 'this'.
this._fragment.d(detach!== false);   this._fragment = null; Unexpected 'this'.
var TObject = require( 'PHET_IO/types/TObject' );   var TVector2 = function( vector2, phetioID ) {     TObject.call( this, vector2, phetioID );     assert && assert( vector2 instanceof phet.dot.Vector2 ); Unexpected 'this'.
if (typeof type ==='string') type = Shade.Types[type];     if (_.isUndefined(type)) throw new Error("attribute requires valid type");     var bound_buffer; Expected an object to be thrown.
before(() => {     jsdom = require('jsdom-global')('<html><body><div id="root"></div></body></html>');      sandbox.spy(React, 'createClass'); Unexpected 'this'.
const srckey = keys[0] const dstkey = toresolve[keys[0]]   delete toresolve[srckey] ',' should be placed last.
this.target = target;     this.selector = selector; 'this' is not allowed before'super()'.
var Line = Base.extend({
function callbackHandler(promise) {         set(_this, 'promise', promise);         promise.then( Unexpected 'this'.
function * bench () {   var timeN = 0 Missing space after *.
var eslint = require('eslint') , eslintConf = require('eslint/lib/config') ',' should be placed last.
});                          $('[data-jpn="'+id+'"] > div.acf-repeater').slideUp('fast',function(){$(this).addClass('.-empty');});                          setTimeout(function(){ jpn_acf_tabs(id, false, parent); }, 550); Unexpected 'this'.
const DEFAULT_EXTENSIONS = {   js: ['js', 'json'],   css: ['css'],   html: ['html'] ',' should be placed last.
return Promise.try(function () {     return self._doWorkFn(job.data);   })    .bind(this) Unexpected 'this'.
const PIPELINE_HEADER = `${V3_HEADER}.pipelines` function pipelineCoupling (client, app) {   return client.get(`/apps/${app}/pipeline-couplings`) Unexpected space before *.
function log(data) {       instance.private$.logger(that, data)       instance.emit('log', data) Unexpected 'this'.
Evme.$('.rightbutton', el)[0].addEventListener('click',       function onClick(e) {         e.stopPropagation(); Unexpected 'this'.
me.store.load();   } Use the rest parameters instead of 'arguments'.
var target = path.join(process.cwd(), exercise.boilerplateOut[boilerplateName])   var done   = after(2, callback) ',' should be placed last.
const id = workerTimers.setInterval(() => {                 throw new Error('this should never be called');             }, 100); Expected an object to be thrown.
} else {       return this.delta.do(...fcdArgs);      }     }; Use the spread operator instead of '.apply()'.
function onOffline() {   debug("MQTT client offline"); } Unexpected 'this'.
, stack = err.stack || message      , index = stack.indexOf(message) + message.length;
var widget = this.field.widget   var id = object.get(widget.attrs, 'id', this.autoId())   if (id) { ',' should be placed last.
}     callback(null, hash, value)   } Unexpected 'this'.
if (!jQuery.isArray(attrs)) {         attrs = [ attrs ];     }     for (var a = 0; a < attrs.length; a++) {         this.add(attrs[a].id, attrs[a].range); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (!exp1.type.is_struct())                 throw new Error("internal error, was expecting a struct here");             var s = {}; Expected an object to be thrown.
userChoice, totalVotes = 0;             for (var c = 0; c < poll.choices.length; c++) {                 var choice = poll.choices[c]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
{         super.constructor();
var testPositions = getTests(pos, ndxIntlzr, tstPs), testPos;                 for (var ndx in testPositions) {                      if (!testPositions.hasOwnProperty(ndx)) continue;                      testPos = testPositions[ndx]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (data.feed.entry.length > 0) {     $('<li/>').addClass('loadMore').text('Load more').click(function() {                     Search.searchPlaylists('', true); Unexpected 'this'.
checkImmutableMutable(function(immutable, mutable) {       var methodArgs = arguments;       assert.isTrue(TestUtils.returnsImmutable(methodName, immutable, mutable, methodArgs)); Use the rest parameters instead of 'arguments'.
};     window.addEventListener('storage', this._notify, false);   },   willDestroy() { Unexpected 'this'.
Sequelize.prototype.normalizeDataType = function(Type) {   var type = typeof Type === 'function'? new Type() : Type;   var dialectTypes = this.dialect.DataTypes || {}; ',' should be placed last.
else {         throw new Error("couldn't match NAK");       }     }; Expected an object to be thrown.
class Session extends EventEmitter {   constructor(opts) {     super()     this.authenticated = false     this.server = opts.server 'this' is not allowed before'super()'.
beforeEach(function() {         scheduler = [ Unexpected 'this'.
if (guestWindow!= null) {     event.returnValue = guestWindow[method](...args)   } else { Use the spread operator instead of '.apply()'.
function mixinProperties(obj, proto) {  for (var prop in proto) {   if (proto.hasOwnProperty(prop)) {    obj[prop] = proto[prop];   }
socket.end();         throw new Error('websocket key is missing');     } Expected an object to be thrown.
this.installDir = getPath(process.env.USERPROFILE, `Documents/Qlik/Sense/Extensions/${this.PKG_NAME}`);   this.hicomvcDir = getPath(process.env.HICOMVC_DIR || '../hicomvc');
var type = data[from].type   var obj = data[to] = data[from];   obj.type = type; ',' should be placed last.
}     subscribe(this.branch, this.id, options, cb)     return   }) Unexpected 'this'.
}     test.done(Object.keys(testCases).length); });
if (choice === "yes") {        var store = this.getStore();        Ext.Ajax.request({ Unexpected 'this'.
if (arguments.length === 1) {     return EventTarget; Use the rest parameters instead of 'arguments'.
passport.loadStrategies = function () {   var strategies = sails.config.passport; ',' should be placed last.
for (var key in values) {       if (values.hasOwnProperty(key)) {         this.addAttribute(key, values[key])       }
text: "selected" }).on("change:selection", function(slider, selection) {   this.set("text", selection? "selected" : "deselected"); }).appendTo(page); Unexpected 'this'.
var list = [];  for (var type in cache) {   list = list.concat(cache[type]);  } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
t.is(isEmpty([]), true)   t.is(isEmpty({[Symbol.iterator]: function () {}}), true)   t.is(isEmpty([0]), false) Unexpected space before *.
};   this.add = function(...args) {     queue.append(...args);   }; Use the rest parameters instead of 'arguments'.
,   prevTag = null  ,   chunk = null  ,   hasAttributes = false  ,   item = null  ,   withinItem = false ',' should be placed last.
hasChildShapes: function() {    for(var key in this.childShapes)     return true; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.css  = '';     this.width  = null;     this.height  = null;     this.onShow  = null; Unexpected 'this'.
if (semActs) {      for (var lang in semActs) {               if (semActs.hasOwnProperty(lang)) {                 pieces.push("\n"+indent+"   %"); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
throw new System.IO.EndOfStreamException();   }); Unexpected 'this'.
vec = arguments[0];             if (!vec.type.equals(Shade.Types.vec3))                 throw new Error("create with 1 parameter requires a vec3");         } else if (arguments.length === 3) { Expected an object to be thrown.
} else {           ddManager[method](...args);         } Use the spread operator instead of '.apply()'.
for( var i = 0; i < subs.length; i++ )   { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
default:             throw new Error("Can't serialize object of type " + st.object.termType +'into XML')         } Expected an object to be thrown.
function addListener( {matches, onEvent} ) {     listenters.push(onEvent); }
this.rect.y += delta.y;         this.viewer.updateOverlay(this.element, fixRect(this.rect));     }
(spec.axes = spec.axes || []);     spec.axes.push(...axis.defs(['row'], encoding, layout, stats));   } else { Use the spread operator instead of '.apply()'.
function group(arr, size) {   var groups = []; Array prototype is read only, properties should not be added.
function square(coord) {    return board.square(...coord);   } Use the spread operator instead of '.apply()'.
"es": "ajustes",          "pl": "ustawienia"      } }; ',' should be placed last.
{         var cons = arguments.callee.cons;         var newTag = new cons(); Avoid arguments.callee.
}   this.log.http(method, remote.href || "/")   var done = requestDone.call(this, method, where, cb)
}         text.style("padding",padding)       } Unexpected 'this'.
for (let i = start; i < len; i++) {             this._drawLayerCanvasImage(images[i]);         } Use the spread operator instead of '.apply()'.
if (!ethUtil.isValidAddress(target)) {     throw new Error('Please provide a valid Ethereum address as the target.');   } Expected an object to be thrown.
},   onSearchInput: function(query) {     this.setState({searchQuery: query});     this.refs.pluginList.resetSelection(); Unexpected 'this'.
$.ElementList = function () {  function $ElementList(nodes) {   this.src = Array.from(nodes);  } Unexpected 'this'.
var soundState = this._getSoundState(util.target);     for (var i=0; i<soundState.effects.length; i++) {         soundState.effects[i] = 0; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
function saveAllFiles() {         for (key in sessions) {             if (sessions.hasOwnProperty(key)) {                 saveFile(key);             }
if (~nativeTypes.indexOf(id))       throw new Error('"' + id + '" is a reserved type name');     customTypes[id] = 1; Expected an object to be thrown.
module.exports = f(function () {  throw this; });
objectScale.x = scale.x * this.autofitScale_;       objectScale.y = scale.y * this.autofitScale_;       objectScale.z = scale.z * this.autofitScale_; Unexpected 'this'.
var componentConstructor = function() {     }; Use the rest parameters instead of 'arguments'.
exports.TouchHandler = TouchHandler; })(); Unexpected 'this'.
imgObj = this.makeImgObj(dataURL, function(){     self.frameData[self.state.count](this);     self.rotations.push(0); Unexpected 'this'.
this.extMethod = function(to,from){         var keys = Object.keys(from);
helpers.mockPrompt(this.app, {   'requirejs': true;
}   insertWithRelatedAndFetch(...args) {     return this.insertGraphAndFetch(...args);   } Use the spread operator instead of '.apply()'.
let branch = this.get('modelMeta').branch;     return branch == null || branch === defaultBranch;   }), Unexpected 'this'.
case 'pagedown':             if (!isMac && this.get( 'isExpanding' ) && this.get( 'parent' ) ) {                 var scrollView = this.getParent( NS.ScrollView ); Unexpected 'this'.
if (getProfile) {      this.setProfile(getProfile, false);     }
} else {         throw new Error('Invalid format specified. Please use "rectangle", "polygon", or "point"');       } Expected an object to be thrown.
mouseMoveHandle = function() {       var focus = mousePosition(d3.event);       focus[0] -= currentTranslation[0]; Unexpected 'this'.
, _ = require('lodash')  , tingodb = require('tingodb')(); module.exports = { ',' should be placed last.
var self = this          , config = this.app.config;         exp.configure(function(){ ',' should be placed last.
var inputsComponent = $("#less input")     var inputsPlugin = $("#plugins input")     var inputsVariables = $("#less-variables input") ',' should be placed last.
module.exports = function(series, thunk){    yield eachLimit(series, 1, thunk);  };
if (err) return this.run('kill -9 %s', this.pid, function again(err, output) {       if (err) return fn(err); Unexpected 'this'.
scene.remove(gridSelections[gridName].dot);   }   scriptsToRun = {};   for (var markedPointName in markedPoints){ The object literal notation {} is preferrable.
if (Object(data)!== data) {             return replaceComment.call(this, data)         } Use the rest parameters instead of 'arguments'.
var listenerSourceCode = this.__getNodeText(observeBlock);    if(listenerSourceCode == null)      throw new Error("Encountered empty <script> element");    component.addEventHandler(eventName, listenerSourceCode); Expected an object to be thrown.
show() {       this.$el.attr('aria-hidden', false).show();     },
$('body').addClass('menu-active');         $('#'+this.id).parent('.dropdown').find('.dropdown-content').show();     }
var expected = [[0,0],[1,0],[1,1],[1,2],[2,2]];   for(var i = 0; i < expected.length; i++){    same([path.nodes[i].getX(), path.nodes[i].getY()], expected[i], "initial: path node " + i + " is as expected"); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
init: function() {     this._super(...arguments);     var childViews = get(this, 'childViews'); Use the spread operator instead of '.apply()'.
if (templ_rows.length!== 1)         throw Error("template not found");        var arrAddressDefinitionTemplate = JSON.parse(templ_rows[0].definition_template); Expected an object to be thrown.
'use strict'; var Joi = require('joi'); module.exports = function (schema) { ',' should be placed last.
},     *changeNavbar({         payload Missing space after *.
if (typeof methods === 'object') {             for (var i in methods) {                 if (methods.hasOwnProperty(i)) {                     Child.prototype[i] = methods[i];                 }
define({ Unexpected 'this'.
, `report-to ${ reports.join ` ` }` should be placed last.
showingChangedHandler: function () {    return function () {     sup.apply(this, arguments); Use the rest parameters instead of 'arguments'.
dojo.connect(this.gitPassphrase, "onfocus", null, dojo.hitch(this, function(){    this.isPrivateKey.checked = true;    }) );
, SELECTOR_EDITABLE_BODY = 'body[contenteditable=true]'    , SELECTOR_INPUT = 'div[contenteditable=true],textarea,input'    , SELECTOR_GMAIL_EDIT = 'div.aoI' ',' should be placed last.
if ($(this).prop("checked")) {                         node[keypart] = 1 ;                     } else { Unexpected 'this'.
} else {        named_transformation = $.grep(base_transformations, function() { return this!= null; }).join(".");        base_transformations = []; Unexpected 'this'.
for(var i = 0, len = joints_source.length; i < len; ++i)     { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (arguments.length == 0 || this.dimensions() == this.dimensions()) {             switch (this.dimensions()) { Use the rest parameters instead of 'arguments'.
drawer.setLayout(this.createRightDrawerLayout());             drawer.getGroupForEntry = function(entry) {                 return this.getGroupForRightDrawerEntry(entry);             }.bind(this); Unexpected 'this'.
self.drag(e);         });       } Unexpected 'this'.
topologyOptions: topologyOptions ',' should be placed last.
result = results     } else if (this.options.hasJoin === true && queryResultHasJoin.call(this, results)) {       result = prepareJoinData.call(this, results)
return function(refShorthandDefaultPos){    var start = this.start ;    var rhs,r = base.call(this); Unexpected 'this'.
this.vertical = {     left: data.target.offset.left, Unexpected 'this'.
const YearRange = function(options) {     this.options = options; Unexpected 'this'.
this.actions = {       ProjectCreate:                   null,       StageCreate:                    null, Missing space after *.
return Lua; })(this,  ENVIRONMENT_IS_NODE? global : this, Unexpected 'this'.
this.value   = value;     this.message = `Invalid value: ${value} in option ${option}`;   }
Compiler.prototype.page = function find(page, assets) {   var css = page.dependencies['.css'] || []    , js = page.dependencies['.js'] || [];
this.dataRequest('edge','store', { edgeIds: edgeIds }),                 this.dataRequest('ontology', 'concepts')             ]).done(function(results) { Unexpected 'this'.
this.time = time;    }    for(var layer in this.layers){     if(this.layers.hasOwnProperty(layer)){      this.layers[layer].trigger(eventId, event);     }
if (!isValue ||!this._settingFromInput ) {             TextView.parent.propertyNeedsRedraw.call( this, value );         } Use the rest parameters instead of 'arguments'.
for (s in meshdata) {     if (meshdata.hasOwnProperty(s)) {         mdat = meshdata[s]         var m = new BABYLON.Mesh( 'terr'+matID, self._scene )
.then(function(diffs) {         return _.map(diffs, that._normalizeDiff);     }); Unexpected 'this'.
if (configuration.renderOn!== null &&!angular.isString(configuration.renderOn)) {         throw new Error('renderOn must be a string')       }       if (configuration.renderOn!== null && configuration.renderOn.length < 1) { Expected an object to be thrown.
]);     me.callParent(); Use the rest parameters instead of 'arguments'.
util.forEachOwnProperties(this, function(value, key) {         instance[key] = null;     }); }; Unexpected 'this'.
headers = headerTransforms.forRequest(ctx, this);     return { Unexpected 'this'.
{   var self = this;
value: function buildAsyncTree() {       var tree = arguments.length > 1 && arguments[1]!== undefined? arguments[1] : this.parsedCommands[0]; Use the rest parameters instead of 'arguments'.
if (cbFunc[0] === this.$name) {
el.addEventListener(val[0], function() {             that.method(val[1]);           }); Unexpected 'this'.
var expect = require("expect.js")  , fs = require("fs") ',' should be placed last.
typeof pFromEnter!== 'boolean'){
info: colorConsole.info,     warn () {       colorConsole.warn(...arguments)       dailyfile.warn(...arguments)     }, Use the rest parameters instead of 'arguments'.
fs.stat(file, function(err, stat) {         if (stat && stat.isDirectory()) {           walkDir(file, function(err, dt) {             for(var a = 0; a < dt.length; a++) {               var filename = path.parse(a).name; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
items: []      , cache: {}      , timer: null ',' should be placed last.
if ( hasNoArguments ) {           listener(...args );         } Use the rest parameters instead of 'arguments'.
const promise = Promise.resolve(definition(rootSuiteBrowser));
, knexMocker = require('../../../testUtils/mockKnex')  , Model = objection.Model; ',' should be placed last.
} else {    this.unicorn_show_error(true);   } Unexpected 'this'.
*edges() {       for (let u in vertices) { if (vertices.hasOwnProperty(u)) { Missing space after *.
function e() {                  var e = t.call(this) || this;                  return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._layer.addChild(e._img3), e._img2 = new PIXI.Sprite, e._layer.addChild(e._img2), e._img1 = new PIXI.Sprite, e._layer.addChild(e._img1), e._basePos1 = new PIXI.Point, e._basePos2 = new PIXI.Point, e._basePos3 = new PIXI.Point, e._tweens = [], e              } Use the rest parameters instead of 'arguments'.
assert.equal(curr, prev + 1);       var lastStrategy = this.completer.strategies[this.completer.strategies.length - 1];       assert.strictEqual(lastStrategy, strategy); Unexpected 'this'.
pageInstance.open(endpoint, settings, function (status) {         console.log('attempting to POST: ', settings.data.substring(0, 50),'to ',endpoint);         if (status!=='success') { Unexpected 'this'.
return URLs.find({userId: this.userId}, {         limit: limit,         sort: {timeModified: -1, timeCreated: -1},     }); ',' should be placed last.
console.error(err);         throw new Error("Error on keyspace creation. Aborting unit tests.");     } Expected an object to be thrown.
, _mapReduceQuery  , _bucketizeModelName; ',' should be placed last.
error() {     this.logger.error(...arguments);   } Use the rest parameters instead of 'arguments'.
if (this!== expectedThis) {         $ERROR("'this' must be global object");     } Unexpected 'this'.
var series   var sum = 0   var min = Number.MAX_VALUE ',' should be placed last.
this.state.configfetched = true;             propertiesFromBackend.forEach(property => {               this.state.plugin.properties[property] = this.state.plugin.properties[property] || '';             }); Unexpected 'this'.
var self = this;
return foo(10,'sss',1);  } runTestCase(testcase); Unexpected 'this'.
this.debug = function() {     this.log('debug',...arguments)   }; Use the rest parameters instead of 'arguments'.
var named = require('node-named') var EventEmitter = require('events').EventEmitter var Logger = require('./logger') ',' should be placed last.
if (result!= null) {           for (let i = 0; i < result.length; i++) {             result[i] = result[i].toLowerCase() The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
} })(this, typeof CSSwhat === "undefined"? require("CSSwhat") : CSSwhat); Unexpected 'this'.
var copy = {};    for (var cmd in this.list) {     if (this.list.hasOwnProperty(cmd)) {      copy[cmd] = this.list[cmd];     }
console.warn('[swan instance mismatch]', this.data.compId, vms);         callback(); Unexpected 'this'.
if (this.version!== 2 && this.version!== 3) {         throw new Error("SenchaJSBuilder: Unsupported version: " + this.version);     } Expected an object to be thrown.
shouldDisableOrderButton: computed('isUnverified', 'hasTicketsInOrder', function() {     return this.get('isUnverified') ||!hasTicketsInOrder;   }), Unexpected 'this'.
}         return _this.editing(false);       })     }, this); Unexpected 'this'.
constructor(tracer) {         super();         this._tracer = tracer;         this._uuid = this._generateUUID(); 'this' is not allowed before'super()'.
etag (...args) {  return this.hash( args.join( "-" ) ); } Use the rest parameters instead of 'arguments'.
var self = this;       image.addEventListener('load', function() {         if (self.image == this) {           self.setImage(this); Unexpected 'this'.
for (var x = 0; x < labelledByIds.length; x++) {                 var labelledByElement = element.ownerDocument.querySelector('#' + labelledByIds[x]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
;; var mochaSeleniumWebdriverHelper = require('selenium-webdriver/testing');
for (var secuirtyOption in $scope.requestModel.security) {       if (!$scope.requestModel.security.hasOwnProperty(secuirtyOption)) continue;       var auth = AuthManager.getAuth(secuirtyOption); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
return function(event) {       return __method.apply(object, [event || window.event]).concat(args));     } Use the rest parameters instead of 'arguments'.
mediaTypes: [     'audio/mp3','audio/ogg','audio/oga','audio/wav','audio/mpeg', 'audio/mp4',     'video/mp4','video/webm','video/ogg',     ] ',' should be placed last.
poolTable.setBombNumber(game.bombNumber);      });      goog.events.listen(game, eightball.Game.EventType.BOMBTICK, function (e) { Unexpected 'this'.
this.regionsetViewer = null;         this.embeddedTools = [];     }.bind(this), { Unexpected 'this'.
script.propagateEvents( this.isPropagatingEvents() );                 } Unexpected 'this'.
() => {         view.observer.start(); Unexpected 'this'.
} else if (mode == MODE_GEN.TEXT) {                     var output = ''; Do not use String as a constructor.
add: function (target, offset) {     var args = this.target(target, offset);     args.objects = exports.prepareOutput(objects);     this.invoke('view.add', args); Use the rest parameters instead of 'arguments'.
var actual = (films[seriesName] && films[seriesName].length) || 0;   test.assertEquals(parseFloat(numberOfFilms), actual, 0);  }); Unexpected 'this'.
availableActions: function() {          let l = this.get('links')||{}; Unexpected 'this'.
for (var id in this._variables) {         if (this._variables.hasOwnProperty(id)) {           var variable = this._variables[id];
var filename = this.builder? fromFileURL(address) : address;   var outname = this.builder? fromFileURL(outAddress) : outAddress;   return System['import']('lesscss', module.id) Unexpected 'this'.
buildRawList(...args) {     if (args.length < 2) { Use the rest parameters instead of 'arguments'.
function UnboundModel() {     } Use the rest parameters instead of 'arguments'.
}else{                                  len = this.v.length; Unexpected 'this'.
'Must have ENV global set to detect CLIENT/SERVER.');   var storeNames = args.slice(0);   var result = {}; Use the rest parameters instead of 'arguments'.
};         if (text) throb.appendChild(this.createTextNode(text));         throbber.appendChild(throb); Unexpected 'this'.
'facetItems': [],        'selectedItems': {},        }; The object literal notation {} is preferrable.
if (j$.util.isUndefined(obj[methodName])) {         throw new Error(methodName + '() method does not exist');       } Expected an object to be thrown.
receiver[p] = {};                     _deepExtend(receiver[p], val);                 } else if (valType === '[object Array]') { Avoid arguments.callee.
function Int64(lo, hi) {         Uint64.call(this, lo, hi);     }     function numToDigits(num) { Use the rest parameters instead of 'arguments'.
this.activeIp = Monitor.activeIp;   this.process.send('' + this.id + '|' + args.join('|'));  } Use the rest parameters instead of 'arguments'.
return [value];       }) : Chartist.normalizeDataArray(Chartist.getDataArray(this.data, options.reverseData), this.data.labels.length)     }; Unexpected 'this'.
return cb();             })            .catch(function (err) { Unexpected 'this'.
constructor({target, property, values}) {         super(target, property, values);         this.dropDownLabel = Icon.makeLabel("chevron-circle-down", { 'this' is not allowed before'super()'.
isInstance : function(value) {   throw new Error('Abstract method [isInstance].');  },  CLASS_NAME : 'Jsonix.Schema.XSD.AnyType' Expected an object to be thrown.
_results = [];       for (cls in name.split(' ')) {         if (!name.split(' ').hasOwnProperty(cls)) continue;         _results.push(el.classList.add(cls)); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var util = require('util')  , SenderReceiver = require('./sender-receiver')   ; ',' should be placed last.
if (is.object(value)) {     for (var opt in value) {       if ({}.hasOwnProperty.call(value, opt)) {         value[opt] = replaceProjectIdToken(value[opt], projectId);       }
module.exports = function () {   var self = this   self.move('forward') Unexpected 'this'.
var ret = {};   Object.keys(data).forEach(function(section) {     var sections = section.split(':'); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}         return $this;       } Unexpected 'this'.
function AnimationUtilApply(anim, opt_target) {  if (anim.children && anim.children.length!== undefined) { Avoid arguments.callee.
function replaceImages(options = {}) {   const res = id => this.resolve(id)   function transformer(tree) { Unexpected 'this'.
callback = (callback!= null)? callback : defaultCallback;      $.fn.embedly.embedArray = []; The array literal notation [] is preferable.
} else {                 throw new Error("only file to file supports");             } Expected an object to be thrown.
', cm, data);
} else {         this.set('teamId', null);       }
} else {       templateParse(this, null, null, null, fetchFrag, 'update')     }
var axis = this[dimension];       var size2 = axis.rangeBand() / this.groupsOf;       var gutter2 = size2 * 0.1;       return size2 - gutter2;     }; Unexpected 'this'.
}       };       this.resetFilter(); The function binding is unnecessary.
},   updateParams() {     const type = get(this, 'type');     const out = {}; Unexpected 'this'.
var Graph = function() {     this.nodes = {};     this.edges = []; The object literal notation {} is preferrable.
if (title.length > 20) {       throw new Error('Title cannot be longer 20 characters.');     } Expected an object to be thrown.
StringPrototype.underscore = function() {     return underscore(this); StringPrototype is read only, properties should not be added.
if (_isFrozen) {         freeze();       }     } Unexpected 'this'.
noCoverTrig: true,         width: this.UIBootstrap? this.menuWidth * 2 : this.menuWidth,         trigHeight: this.UIBootstrap? this.selectedHeight + 4 : this.selectedHeight, Unexpected 'this'.
exports.getIds = function (callback, scope) {     this.exec('ids', null, callback, scope); }; Use the spread operator instead of '.apply()'.
if (lines.length > 0) {    for (var i = 0; i < lines.length; i++) {     lines[i] = "<" + (tag.match(/^a\s?/i)? replaceSlug(tag, lines[i]) : tag.match(/^option\s?/i)? replaceValue(tag, lines[i]) : tag) + ">" + lines[i].trim() + "</" + close + ">"; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
function e() {             var e = t.call(this) || this;             return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._layer.addChild(e._img3), e._img2 = new PIXI.Sprite, e._layer.addChild(e._img2), e._img1 = new PIXI.Sprite, e._layer.addChild(e._img1), e._basePos1 = new PIXI.Point, e._basePos2 = new PIXI.Point, e._basePos3 = new PIXI.Point, e._tweens = [], e         } Unexpected 'this'.
function() {         this.stateTransition_(lf.proc.TransactionState_.ACQUIRED_SCOPE);       }.bind(this)); }; Unexpected 'this'.
function initiateTableFilter(data, filterDiv, tableDiv) {   $('.clear').on("click", function() {      $(this.id + ".noMatches").css("visibility", "hidden") Unexpected 'this'.
} else {                     $input.val('');                 } Unexpected 'this'.
}     }   });   return routes The function binding is unnecessary.
function Class( args ) {         if ( this instanceof Class ) { Avoid arguments.callee.
if (configuration.modelType!== null &&!angular.isString(configuration.modelType)) {         throw new Error('modelType must be a string')       }       if (configuration.modelType!== null && configuration.modelType.length < 1) { Expected an object to be thrown.
var $export = require('./_export'); var sign = require('./_math-sign'); ',' should be placed last.
var source = container._source   var deps = this.dependencies   var args = [] ',' should be placed last.
} else {     newMessages[messageId] = function(...args) {      return `${messageText(...args)} (${ruleName})`;     }; Use the rest parameters instead of 'arguments'.
var verificationFields = [];  var verificationFieldLength = 0; The array literal notation [] is preferable.
var b = npm.bin var PATH = osenv.path() ',' should be placed last.
} Transaction.prototype.get = function (key, cb) {   var self = this   if (key == null) throw new Error('A key must be given as an argument') Unexpected 'this'.
if(typeof name === "object"){    for(var x in name){     if(name.hasOwnProperty(x)){      this.set(x, name[x]);     }
if (a || b) {       return opts.inverse(this)     } Unexpected 'this'.
});     _.extend(targetUnit.guide[dimension], _.omit(guide_dim,...properties)); } Use the spread operator instead of '.apply()'.
, 'docs-server.js'            , 'components.js' ',' should be placed last.
var realLoader = moduleModule._load;   moduleModule._load = function (...args) {     var inv = new RequireInvocation(args[0], args[1].filename);     var parent = currentInvocation; Use the rest parameters instead of 'arguments'.
items.forEach(function(item) {       this.upsert(item);     }.bind(this));   }
me.editableCondition = me.editableCondition || NX.Conditions.isPermitted('nexus:capabilities:update');     me.callParent();   }, Use the rest parameters instead of 'arguments'.
triggerEvent(handler, this.context, this.arguments);     return true; Unexpected 'this'.
},                             on: {                                 success: function() {                                     this.showMessage("success", "Script saved"); Unexpected 'this'.
console.log(arguments.callee);     throw new Error("Callback was already called.");
var mod = require('./tasks/' + file), name;         for (name in mod) {             if (mod.hasOwnProperty(name)) {                 exports[name] = mod[name];             }
}   }  }  for(var i=0;i<this.nodes.length;i++) {   this.nodes[i].RIGHT = this.nodes[i].LEFT = this.nodes[i].UP = this.nodes[i].DOWN=0; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for (const key in this.map_) {       list.push(...this.map_[key]);     } Use the spread operator instead of '.apply()'.
} function setAttribute ( value ) {  this.element.node.setAttribute( this.name, safeToStringValue( value ) ); } Unexpected 'this'.
}.bind(this);     var handleGameMsg_ = function(msg) { The function binding is unnecessary.
var canvas = element.find('canvas')[0]         var g = canvas.getContext('2d')         function vendorBackingStorePixelRatio(g) { ',' should be placed last.
}             self.componentManager.register(axis.name, Axis, axisParams);         });     }, Unexpected 'this'.
const createTree = function(adapter, items, parent) {   this.items = items.reduce((res, item) => {     const next = parent Unexpected 'this'.
if ((e.type==='change' && this.lazy)) {     this.curValue = e.target.value; Unexpected 'this'.
} else if(serializer!== false){    return typeof serializer === "function"? serializer.call(map, val, attr): oldSingleSerialize.call(map, attr, val);   } Use the rest parameters instead of 'arguments'.
var qs = require('./')  , times = 100000; ',' should be placed last.
for( var i in self._equipments_columns ){   if( self._equipments_columns.hasOwnProperty(i) ){    switch( self._equipments_columns[i][1] ){     case'': The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (selector.match(Prime.Utils.spaceRegex)) {       throw new Error("ancestor selector must not contain a space");     } Expected an object to be thrown.
irc: {     raw: function(...args) {      testableNetwork.lastCommand = args.join(" ");     }, Use the rest parameters instead of 'arguments'.
if (_.isUndefined(map[ctor])) {                         throw new Error("opts.buffer must be either Uint8Array or Float32Array");                     } Expected an object to be thrown.
self.openConnections[this.id] = this;     }
let errors = parseShaderErrors(message);         throw new Error(`${type, message, errors });     } Expected an object to be thrown.
module.exports = {     key: key  , populate: populate ',' should be placed last.
}    }    this._mLoadedSections[sNodeId] = aLoadedSections;   }
let { clusterTemplate: { defaultRevisionId = '' } } = this;     return this.id!== defaultRevisionId;   }), Unexpected 'this'.
if (!/^<(([0-9A-F][0-9A-F])*)>$/i.test(src))    throw new Error('eval: not a hex string literal'); Expected an object to be thrown.
ajax_success: function(response){                 console.log('ajax_success'); ',' should be placed last.
applyCtx: function (changes) {             return this.applyBase(...arguments);         }, Use the spread operator instead of '.apply()'.
if (typeof method === "string") { method = target[method]; }     if (!method) { throw new SC.Error("You must pass a method to removeObserver()"); } Expected an object to be thrown.
init() {             this._super(...arguments);             this.formatter = this.container.lookup(`ember-intl@formatter:format-${formatType}`); Use the spread operator instead of '.apply()'.
for (var i in body) {                 if (typeof(body[i])!=='string') {                     throw new Error("An interface definition must be a string, defining the property type.");                 }
this.removeWaypoint(e.marker, function() {            }); Use the rest parameters instead of 'arguments'.
t.deepEqual(original,register, 'deepEqual case: '+description);         for (var index=0;index<register.length;index++) {             var item = register[index]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var args = [].slice.call(arguments);   if (this.emit(...args)) {     return true; Use the spread operator instead of '.apply()'.
val[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8? 2 : biff}); break;   default: throw new Error("Bad SerAr: " + val[0]);   } Expected an object to be thrown.
var vec2 = require('../math/vec2') var Nearphase = require('./Nearphase') var Shape = require('./../shapes/Shape') module.exports = Nearphase; ',' should be placed last.
this.label = null;     this.place = null; 'this' is not allowed before'super()'.
mouseenter: function () {             this.mousedover = true ',' should be placed last.
constructor(node, edges){     super(node,edges) 'this' is not allowed before'super()'.
case AST_INCLUDE:    throw new Error('TODO program_gen' + stmt.type);   case AST_NAMESPACE: { Expected an object to be thrown.
var first = false;       for (var i = 0; i < fields.length; i++) {         if (!first) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
$('a[data-remote],input[data-remote]').live('click.rails', function(e) {   $(this).callRemote();   e.preventDefault(); Unexpected 'this'.
}     super.add(item)     return this.__watchItem(item) Use the rest parameters instead of 'arguments'.
}) &&       p.every(function(i) {         return t.checkConnectionDetails(x[i], y[i]);       }); Unexpected 'this'.
return this; }; Use the spread operator instead of '.apply()'.
sails.express.app[verb || 'all'](path, targetFn);    return; Unexpected 'this'.
if(arguments.callee(node, name) == "none") {                 ret = "0px"; Avoid arguments.callee.
var txn = {         getBinary: sinon.stub().returns(new Buffer([])),         abort: sinon.stub() The array literal notation [] is preferable.
} else {         throw new Error('The length of an unsigned integer constant value must be 4!');       } Expected an object to be thrown.
async deleteIndex(indexName) {         if (this._db.connected) throw new Error('Cannot delete index while connected');         this._indicesToDelete.push(indexName); Expected an object to be thrown.
callback(null, groups);              });          }        }, The function binding is unnecessary.
player.videoaddress=[];    for(var no in videosrc){     if(videosrc.hasOwnProperty(no)){      player.videoaddress.push({res:no,url:videosrc[no]});     }
case PARTIAL: return new DomPartial( options, this.docFrag );    default: throw new Error('WTF? not sure what happened here...');   } Expected an object to be thrown.
rs1imm = rs1imm.split("(")[1];             this.rs1 = parseInt(rs1imm.replace( /^\D+/g, ""));         } else { Unexpected 'this'.
el._boundEvents[type].push(listener);     el.addEventListener(type, listener, useCapture);   } Use the spread operator instead of '.apply()'.
switchClonesSrc: observer('virtualSrc', function () {     scheduleOnce('afterRender', this, '_switchClonesSrc');   }).on('ready'), Unexpected 'this'.
for(let index = 0; index < filters_keys.length; index++) {                     let key = filters_keys[index];                     filters.push([key, this.$route.query[key]].join('=')); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
Builder.prototype.initTargets = function (targets) {  function init (tgts, parent) {   var instances = [];  var instance; ',' should be placed last.
, newShare      : React.PropTypes.bool  , updateDataset : React.PropTypes.object ',' should be placed last.
this.organizationUsers.bind('loading', function() {       this._activatePane('loading');     }, this); Unexpected 'this'.
var titles = this.selection.slice(0);  for (var i = 0; i < titles.length; i++) { titles[i] = "'"+titles[i].getTitle()+"'"; }  var result = confirm(_("confirmtable")+" "+titles.join(", ")+"?"); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
})(this);
module.exports = {   putCloudWatchEvents, }; Unexpected 'this'.
}     if (call) this.app.logger.debug(`generate ${call.constructor.name} from factory.`)     return call Unexpected 'this'.
let ids = context.request.ids;   let relatedField = context.request.relatedField;   let relatedType = this.schemas[type][relatedField];   let options = { Unexpected 'this'.
}     }     if (this.type!== 'button' && this.type!== 'cancel' && this.type!=='submit' && this.name && this.name!== '') {       iterator(this, i); Unexpected 'this'.
beforeEach(() => {       mixin = make_mixin(default_mixin_spec());     });
];     me.callParent();     me.down('#proxyFieldSet').add(1, {xtype: 'nx-coreui-repository-docker-proxy-facet'}); Use the rest parameters instead of 'arguments'.
if (typeof hook!= 'function') {             throw new Error('Unable to register event hook, invalid hook function passed');         }         this.event_hooks[event].push(hook); Expected an object to be thrown.
}     return this._super(...arguments);   }, Use the spread operator instead of '.apply()'.
goog.asserts.assert(body);         this.activeDialog_ = new wtf.app.ui.HealthDialog(             db, Unexpected 'this'.
music = game.add.audio('boden');     music.onDecoded.add(hasDecoded);     music.play(); Unexpected 'this'.
$(this.element).addClass(this.get('orientation'));  }); Unexpected 'this'.
if (!parentNode) {     throw new Error('Reference node has no parent.');   } Expected an object to be thrown.
newLabel = ( typeof newLabel!== 'undefined' && newLabel.length > 0 )? newLabel : curLabel;                         $el.text( newLabel );                     } ); Unexpected 'this'.
module.exports = function(Cam) {  const linerase = require('./utils').linerase  , url = require('url'); ',' should be placed last.
function Wave_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid; Unexpected 'this'.
var parseUrl = require('./parseUrl')  , pathRegExp = require('../').pathRegExp ',' should be placed last.
export function randomCouchString(length = 10) {
this._client.on('listening', function() {         modbus.openFlag = true;     }); Unexpected 'this'.
} catch (err) {     error(err)   } Unexpected 'this'.
reference: function (attr) {       return SVG.get(this.attr(attr)) ',' should be placed last.
this.actions.applyCSSVars(changes.cssVars.newValue)   }   if (changes.panels &&!this.state.windowFocused) {     this.actions.updatePanels(changes.panels.newValue) Unexpected 'this'.
if (!ZRINIT_FLAG[fl]) {         throw new Error("Invalid ZRINIT flag: " + fl);     } Expected an object to be thrown.
case 'oauth':       return rem.promptOauth(args[0], args[1]);     case 'cookies': Use the spread operator instead of '.apply()'.
var assetsDirContents = fs.readdirSync(assetPath);   Object.keys(realContents).forEach(function(id){     var item = realContents[id]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
} else if (this.highDefinition === "unavailable") {           this.highDefinition = "available"           changed = true         } Unexpected 'this'.
});             });         } The function binding is unnecessary.
list.removeClass('hidden').each(function() {           $(this).find('i').contents().unwrap();         }.bind(this));
this.clearLoadingSpinner();                 this.$('.main-results-content.results').append(this.handleError(i18n['app.feature.search'], xhr));             }
async function createComment(postId) {   postId = new ObjectID(postId); Missing space after *.
renameColumnQuery(tableName, attrBefore, attributes) {     let query = "EXEC sp_rename '<%= tableName %>.<%= before %>', '<%= after %>', 'COLUMN';"      , newName = Object.keys(attributes)[0]; ',' should be placed last.
}).call(this);
return {     user: store.user.single.user,     newUser: store.user.single.newUser   };
console.warn('OSjs::Core::WindowManager::removeWindow()', 'Got', w);       throw new Error('removeWindow() expects a "Window" class');     } Expected an object to be thrown.
if (method) {     return method.apply(target, [].slice.call(arguments));   }   else { Use the rest parameters instead of 'arguments'.
checkIfSufficientBuffer = function () {             var timeToEnd = getTimeToEnd.call(this);             if ((bufferLevel < minBufferTime) && ((minBufferTime < timeToEnd) || (minBufferTime >= timeToEnd &&!isBufferingCompleted))) { Unexpected 'this'.
_log = function() {     return console.log(...makeArray(arguments));   }; Use the spread operator instead of '.apply()'.
var log = console.log;     sinon.stub(console, 'log', function(...args) {       return log.apply(log, args);     }); Use the rest parameters instead of 'arguments'.
};  this.exec = function(...args) {   const command = Object.keys(args).map(key => args[key]).join(" ");   const filename = controller.getUUID(); Use the rest parameters instead of 'arguments'.
} else {             throw new Error("internal error on Shade.Optimizer.replace_with_notone");         } Expected an object to be thrown.
} else {         throw new Error("Cannot join a closed paths with another");       } Expected an object to be thrown.
case "align":                     return ax5.ui.layout_instance.align(this, arguments[1], arguments[2]);
this.passthrough('http:   this.get('/api/auth/session', function() { Unexpected 'this'.
exception = _error;         throw new Error("StoreDetails failure: " + exception);       } Expected an object to be thrown.
if (res.length >= cnt) {         return retcb(...[null].concat(res));       } else { Use the spread operator instead of '.apply()'.
debug( 'Current value: %d.', this._yNumTicks );  oldVal = this._yNumTicks; Unexpected 'this'.
crypto.getRandomValues(array);     return new Buffer(String.fromCharCode(...array), 'binary');   }; Use the spread operator instead of '.apply()'.
common.googleOrderNumber , common.shipItems , true , function (err, xml) {   console.log(xml);  } Use the rest parameters instead of 'arguments'.
if (!this.isConsistent(transactions)) {             throw new Error('Given set of transactions violates rules for combined transactions');         } Expected an object to be thrown.
it('should display/hide the loader while loading', function () {     this.visView.addOverlay({       type: 'loader' Unexpected 'this'.
replaceSelection : function(items) {       this.setSelection(items); Avoid arguments.callee.
function JsonNewsletter() {  var self = this;  self.body.language = self.language || ''; Unexpected 'this'.
off(name, handler) {   this.__super(...arguments); Use the spread operator instead of '.apply()'.
if (builtInCommand) {     builtInCommand(...process.argv.slice(3));   } else { Use the spread operator instead of '.apply()'.
describe('high compression', function() {                     it('should succeed', function(done) { Unexpected 'this'.
args[0] = files.convertToOSPath(args[0]);   return fs.unwatchFile(...args); }; Use the spread operator instead of '.apply()'.
return new H.map.DomIcon(icon, this._getEvents());     }
var node = $(node).parent(function() {     if( this.__ff__ ) return this;   }, true)[0];
} else {      Monogatari.run (doAction, false);     } Unexpected 'this'.
,'   v_fill = unpack_color(fill);','   dim = vec4(x, y, r, -r);','   v_stroke = replace_stroke;' ',' should be placed last.
Extensions.unregister = function (name,...args) {   var groups = this.$groups(); Use the rest parameters instead of 'arguments'.
app.use(route.post('/connect/:provider/:override?', function *(provider, override) {     this.session.grant = { Unexpected space before *.
parsePath: function (data) {     function parse() {       var parsed = extend({}, parsePath(this.path), data);       if (typeof parsed.ext === 'undefined') { Unexpected 'this'.
Device.prototype.toString = function toString() {   var output = this.family;   var version = this.toVersion(); ',' should be placed last.
for (var i in files) {         filePath = path.resolve(dirPath, files[i]),             output   = fs.readFileSync(filePath).toString(); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var $container = $("#irs-" + this.pluginCount),                     $body = $("body"), Unexpected 'this'.
var proxy = httpProxy.createProxyServer({})    , domainEnv = core.config.get('publicDomain');   return function(req, res, next) { ',' should be placed last.
, path = require('path')  , paperboy = require('paperboy')  , WEBROOT = path.join(path.dirname(__filename), '../static')  , h = {accept:'application/json', 'content-type':'application/json'}; ',' should be placed last.
{           script_obj.source_data = String(script_obj.script_data);           script_obj.line_arr = []; Do not use String as a constructor.
this.message = tmp.message;     return this.method = options.method; };
addToScene() {     this.objects.forEach((obj) => {       this.scene.add(obj);     }); Unexpected 'this'.
else                                 throw new Error("Save is Not Atomic");                         },function(){ Expected an object to be thrown.
async function findOCSP(certificate, issuerCertificate)    { Missing space after *.
} else {       var xhr = io.util.request();       var self = this; ',' should be placed last.
[States.NOT_STARTED, 'Not Started'], [States.COMPLETED,   'Completed'] ] ',' should be placed last.
var objectProviderFn = function objectProviderFn(type, ids, paths, inScope, changes, onSuccess, onFailure) {  throw new Error("Object provider has not been implemented.  Call ExoWeb.Mapper.setObjectProvider(fn);"); }; Expected an object to be thrown.
it('Get configuration from server', function(done){   curl('http:    expect(json).to.have.property('engine'); Unexpected 'this'.
, attrList = ['pos', 'color', 'fugue']   init() ',' should be placed last.
"use strict"; var _extends = function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(target, key)) { target[key] = source[key]; } } } return target; }; var z = _extends({}, x); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
else                         throw this.type.repr() + " is an atomic type, got this: " + i;                 } else if (this.type.is_vec()) { Expected an object to be thrown.
}).call(this);
"use strict"; var request = require('request') var uglify = require('uglify-js') var child = require('./lib/child') ',' should be placed last.
, bindMethods    = require('../../Object/bind-methods').call  , pad2           = require('../../Number/pad').call(2).call  , pad3           = require('../../Number/pad').call(3).call  , format         = require('../../String/format') ',' should be placed last.
this._inputStack.push([this.xmlNode.documentElement, this,'result']);     this._initializeObjects = [];     this._ids = [];     var self = this; The array literal notation [] is preferable.
if (!template || typeof template!== 'object') {         throw new Error('ListFacade "template" must be an object.')       }       if (!template || typeof template.key!== 'function') { Expected an object to be thrown.
this._stream.end();   }); Unexpected 'this'.
exception = _error;             throw new Error("getAddressFromPathId failure: " + exception);           } Expected an object to be thrown.
module.exports = PointToPointConstraint; var Constraint = require('./Constraint'); var ContactEquation = require('../equations/ContactEquation'); ',' should be placed last.
function() {                 if (this.checkCurrentUrl()) {                     this.maximize(); Unexpected 'this'.
for (var index = 0; index < entries.length; index++) {           var entry = self.config.processEntry(entries[index], data); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
$(".hook-list").on("change", '.hook-icon-set', function() {     viewTheme($(this).attr("id")); }); Unexpected 'this'.
var error = function (message, options) {         var tmp = Error.call(this, message, options);         tmp.name = this.name = 'EvaluationError'; Unexpected 'this'.
if (!((address_!= null) && address_)) {               throw new Error("Missing address input parameter.");             }             observerState = _this.openObserverState(observerId_); Expected an object to be thrown.
if (typeof inputData!=='string') {   throw new Error('LCHErrorInputInvalid');  } Expected an object to be thrown.
this._adUnit[method].apply(this._adUnit, args);   timeoutId = setTimeout(() => {     timeoutId = null; Use the spread operator instead of '.apply()'.
for (let t = 0; t < this.renderable_tiles.length; t++) {             let tile = this.renderable_tiles[t]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
{         for (var i = 0; i < this._uiSourceCodes.length; i++) {             var uiSourceCode = this._uiSourceCodes[i];             if (uiSourceCode.originURL() === originURL) The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var desired_format    , method_name    , length = arguments.length    , callback =  createCallback(method_name, length)    ,err ',' should be placed last.
, playInBackground : false  , nsfw : false    }; ',' should be placed last.
var instance = this;    var args = slice.call(arguments, 0), index = args.length - 1; Use the rest parameters instead of 'arguments'.
if (file.state() ==='resolved') {           results.push(file.done(function (...args) {             return Reflect.apply(cb, file,...args)           })) Use the rest parameters instead of 'arguments'.
, sequelizeErrors = require('../../errors.js')  , parserStore = require('../parserStore')('mssql'); ',' should be placed last.
edit(options) {         return this.guild.shard.client.editGuildMember.apply(this.guild.shard.client, this.guild.id, this.id, options);     } Use the rest parameters instead of 'arguments'.
this._runOrStore(function() {       fn.apply(context, [this.getErrors()]);     }); Unexpected 'this'.
var i, _results;     Stagger.__super__.createTween.call(this, options);     i = this.transits.length; Use the rest parameters instead of 'arguments'.
});     this.Super('init');    } Use the rest parameters instead of 'arguments'.
var Connection = require('./connection') var events = require('events') var crypto = require('crypto') ',' should be placed last.
module.exports = suspend.callback(function * (gridModel, columns, viewColumns, exporter) {   assertValidViewColumns(columns, viewColumns); Unexpected space before *.
if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw new Error("Not a directory : "+path);          if (media==MM_RAM) { Expected an object to be thrown.
beforeEach(function() {       this.templateHelpersSpy = spy(this.itemView, 'templateHelpers');       this.modelInstance.validationError = 'foo';       this.itemView.templateHelpers(); Unexpected 'this'.
get: function(size) {     for (var i in this.queries) {       if (this.queries.hasOwnProperty(i)) {         var query = this.queries[i];         if (size === query.name) return query.value;
var promise = $.when(..._toConsumableArray($.map(constraints, function (constraint) {           return _this10._validateConstraint(value, constraint); Use the spread operator instead of '.apply()'.
});     };     this.getEncountersOfPatient = function(patientUuid) {         return $http.get(Bahmni.Common.Constants.encounterUrl, { Unexpected 'this'.
throw 'Invalid range, cannot remove from'+ range.start +'to'+ range.end;  }
})   describe('undefined', function (){ Unexpected 'this'.
var _this6 = this;       if (typeof io!== "undefined") { Use the rest parameters instead of 'arguments'.
if (/^data-balloon/.test(this.attributes[attr].name)) {                         $purchase_button.removeAttr(this.attributes[attr].name);                      } else { Unexpected 'this'.
commit.parentsDiffTrees(function(error, parentsDiffTrees) {         if (error) {           callback(error);         } else {           callback(null, parentsDiffTrees);
var data = arguments[0];    if(typeof data ==='string'){     this.data = data; Use the rest parameters instead of 'arguments'.
var feed = __dirname + '/feeds/nondefaultnamespace.atom'    , meta = {} ',' should be placed last.
return (typeof value === 'number') && ('NaN' == String(value));             }, Do not use String as a constructor.
var promises = [];    for (var i in ips) {     if (ips.hasOwnProperty(i)) {      promises.push(get_req(req, ips[i].host));     }
$(this).addClass("active").siblings().removeClass("active");      }); Unexpected 'this'.
style: { opacity: 1 },         onAnimationEnd: handleAnimationEnd,       }, { Unexpected 'this'.
if (data.collectStatus === 200) {                  let dataSoureTmp = [];                  let status = data.lisentersGroupkeyStatus; The array literal notation [] is preferable.
} else {                          reject(this); Unexpected 'this'.
var type = null;        for (var typeEntry in types) {         if (!types.hasOwnProperty(typeEntry)) continue;         var typeNames = types[typeEntry]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
console.info('app.App::startup', arguments); Avoid arguments.callee.
}             for(i = edges.length - 1; i >= 0; i--) {                 var p = objs[edges[i][0]]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
module.service('QueryBuilderSrv', function(ZabbixCache, Utils, Config) {     this.build = function (groupFilter, hostFilter, appFilter, itemFilter) { Unexpected 'this'.
return function () {       var info = data(this, opts.id);       var isNative = this.attachedCallback; Unexpected 'this'.
var loopback = require('../../lib/loopback')  , path = require('path') ',' should be placed last.
return Widget.prototype._doLayout.apply(this);   }, Use the rest parameters instead of 'arguments'.
var mongoose = require('mongoose') var Article = mongoose.model('Article') ',' should be placed last.
if (this._stateStack.length > 0) {             throw new Error('Cannot close database while transactions are active');         } Expected an object to be thrown.
var qs = require('qs') var querystring = require('querystring') function Querystring (request) { ',' should be placed last.
gaze('lib Unexpected 'this'.
svg: function (svg) {       var well, len ',' should be placed last.
var startTime = new Date().getTime(),                     renderFrame = (function () {                         if (!this.inAnimation) { return; }                         var frameTime = new Date().getTime() - startTime, Unexpected 'this'.
function e() {             var e = t.call(this) || this;
}     this.doc = new jsPDF('portrait', 'pt', 'letter');     this.docWidth = 612; Unexpected 'this'.
this.dates = (this.dates || []).concat(res);   var text = wo.w; Unexpected 'this'.
function mouseOver() {                 clearHoverMenu()                 document.getElementById(gitlab_variables.menuBtnId).className = "is-over is-showing-fly-out" Unexpected 'this'.
if (hexCode.length > 2)             result += replaceIndexer(0);         return result; Unexpected 'this'.
, util = require('util')  , Query = require('./query.js') ',' should be placed last.
if (!objJoint.unsigned)      throw Error("ifOkUnsigned() signed");     callbacks.ifOkUnsigned(); Expected an object to be thrown.
async function fn() {   for await ([ _ ] of [iterable]) { Unexpected space before *.
return this._run(command, function (err, data) {          then && then(err,!err && that._parsePull(data));       }); Unexpected 'this'.
this.addItems = function(newItemDicts) {         for (i = 0; i < newItemDicts.length; i++) {             tiid = newItemDicts[i]["_id"] The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}   insertWithRelated(...args) {     return this.insertGraph(...args);   } Use the spread operator instead of '.apply()'.
});             p.find('.fieldset-delete-button').on('click', function(){                 if(xmltools.confirm_delete($(this))){ Unexpected 'this'.
constructor(model) {   super(model);   this.shortcutOff = null; Use the rest parameters instead of 'arguments'.
this.bus = Gibberish.Bus();    this.sounds.kick.sampler.send(this.bus, this.amp); Unexpected 'this'.
this.addToBuffer = function (motionAxisName) {         if (buffer[motionAxisName]) { Unexpected 'this'.
type:'string',         set: function(data) {           return this.l = `${data.l} bar`         } Unexpected 'this'.
static: true,     args: args,     returnType: KMeansModel Use the rest parameters instead of 'arguments'.
if (S[i] === '+') {         stack.push(addition());       } else if (S[i] === '*') { Use the spread operator instead of '.apply()'.
$("#settings_overlay_container.sidebar").on("click", "li[data-section]", function () {         var $settings_overlay_container = $("#settings_overlay_container"); Unexpected 'this'.
];         for (i = 0; i < points.length; i++) {           p = points[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
{         this.notify("event/broker-stopped", this);         this.unsubscribe(this._request_id); Unexpected 'this'.
id = this._elId || this.id;     htmlBufferPush(buf,'id="' + id + '"' + '>'); Unexpected 'this'.
this.socket.on('wait_for_phase_two', function(data) {         that.set_status('Player accepted, waiting for match');     }); }; Unexpected 'this'.
$(this).click(function(e) {           $(this).openModal(options);           e.preventDefault(); Unexpected 'this'.
compose: function(containerBlock) {
Clazz.overrideMethod (c$, "getBfactor",   function () {  return Float.isNaN (this.atom.bfactor) && this.atom.anisoBorU!= null? this.atom.anisoBorU[7] * 100 : this.atom.bfactor;  });
emit: function() {         var args = utils.arg2arr(arguments), sett = args.pop();
Logger.prototype.clear = function () {   for (var i = 0; i < this.transports.length; i++) {     var name = this.transports[i];     this.remove({ name: name }); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
it('can return the result of the executed script', function(done) {       var listener = function() { Unexpected 'this'.
}).call(this);
throw new Error("No writes are allowed after close.");         this._chunks = this._chunks.concat(strings);         if (this._tempFile &&!this._isWriting) Use the spread operator instead of '.apply()'.
var acc = init;     for(var p in obj) {         if(obj.hasOwnProperty(p)) {             acc = xf.step(acc, [p, obj[p]]);             if(transducers.isReduced(acc)) {
setTimeout(function() {     Completers.filter(...args);   }, 210); Use the spread operator instead of '.apply()'.
this._client.on('close', function(had_error) {         that.openFlag = false;     }); Unexpected 'this'.
Circle = new Class(Drawable, {  initialize : function(){      this.super('initialize'); Use the rest parameters instead of 'arguments'.
function invoke(vararg) {       var params = [domainAndMethod].concat(Array.prototype.slice.call(arguments));       Protocol.InspectorBackend._AgentPrototype.prototype._invoke.apply(this, params);     }
, starReplace = ""  , compTrimExpression = new RegExp("((<|>)?=|<|>)\\s*("                                     +semver+"|"+xRangePlain+")", "g")  , compTrimReplace = "$1$3" ',' should be placed last.
$w('minWidth maxWidth minHeight maxHeight').each(function(dimension) {       this[dimension] = this.options[dimension] || this.findDim(dimension);     }.bind(this));
, formatParam = typeof opts =='string'? opts : opts.format      , negotiated = this.responder.negotiate(formatParam)      , format      , contentType ',' should be placed last.
if (req.method === 'GET')     return body;   data = await this.readBody(req, 'utf8', opt);   if (!data) Unexpected 'this'.
value: function(callback) {           var sum = 0.0;
var utils = require('../utils') var func = require('./function') ',' should be placed last.
var sw = w * options.density             var sh = h * options.density             var f ',' should be placed last.
);   const maxOutputWireCount = Math.max(...[0].concat(outputWireCounts));   const outputGateWidth = (2 + Math.max(7, maxOutputWireCount)); Use the spread operator instead of '.apply()'.
},   refresh: function () {     this.mountStyle()   } } Unexpected 'this'.
const data = this.items(this.context)           if (data && data.then && isFunction(data.then)) { Unexpected 'this'.
if ($.isFunction(this.options.content)) {                     content = this.options.content.call(this.$element[0], type, data);                 } else { Use the rest parameters instead of 'arguments'.
if (!InternalStorage[name] ) {       throw new Error('Invalid InternalStorage API call name');     } Expected an object to be thrown.
activeClass: 'active',   ariaExpanded: computed('isExpanded', 'treeNodeHasChildren', function() {     return this.get('treeNodeHasChildren') || null;   }), Unexpected 'this'.
this.schemaLocation = options.schemaLocation?     options.schemaLocation : GML_SCHEMA_LOCATION; Unexpected 'this'.
const docs = this.meta.docsWith(msg.actor.id);                     const clocks = this.clocks.getMultiple(docs);                     DocumentBroadcast.broadcastMetadata(metadata, clocks, [msg.peer]); Unexpected 'this'.
Runner_MySQL.prototype._stream = Promise.method(function(sql, stream, options) {   return new Promise(function(resolver, rejecter) { Unexpected 'this'.
db.get(docId, {rev: rev}, function(err, doc){ Unexpected 'this'.
if(input.toLowerCase() == 'clear'){             $(".input").remove(); Unexpected 'this'.
describe('.delete', () => {     let fixture = require('./fixture')()      , evt1 = fixture.event1 ',' should be placed last.
key: 'init',     value: function init(services) {       var options = arguments.length > 1 && arguments[1]!== undefined? arguments[1] : {};
let callID = navigationID;         defaultUrl(Delegate(this, function () { Unexpected 'this'.
})(this, _, d3.data);
return function() {               var err = arguments[0];               return sig = arguments[1];             }; Use the rest parameters instead of 'arguments'.
this.send(action, player.slot,...rest);  } Use the rest parameters instead of 'arguments'.
if (image == null){                 throw new Error('Assigned value on Sprite.image is undefined or null. Please double-check image path, and check if the image you want to use is preload before use.');             } Expected an object to be thrown.
this.translationPath = function(segmentId)  { Unexpected 'this'.
function hideQuestions(all) {         var temp = [];         temp = (all && all == 1)? variables.get.shownQuestions() : variables.questionsToHide; The array literal notation [] is preferable.
if (this.meta.hasMethod(attribute.setterName))                          this[attribute.setterName].call(this, setValue)                     else Unexpected 'this'.
function calculate_bb(graphs){     for (var i = 0; i < graphs.length; i++){         var graph = graphs[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
let props = {...this.props};       for (let name in this.observed) {         if (this.observed.hasOwnProperty(name)) {           props[name] = this.observed[name].data;         }
if (nodes === null) {       throw new Error('TTS: nodes is empty. make call epub.getTextAndImageNodes().');     } Expected an object to be thrown.
return this.run('ps -p %s -o args=', this.pid, function ran(err) {     fn(undef,!err);   }); Unexpected 'this'.
, uid = require('uid2')  , DEFAULT_TTL = 1209600
var args = Array.prototype.slice.call(arguments);                    this.setState('progress', true);       this.emit.apply(this, args); Use the spread operator instead of '.apply()'.
mtEvtDiscriminator.getEvtInst = function (subsys, cmdName) {     return ArgObj.factory(subsys, cmdName); }; Use the rest parameters instead of 'arguments'.
var toData = os.getData(dir, to);     for (var key in fromData) {       if (fromData.hasOwnProperty(key)) {         data[fromData[key]] = toData[key];       }
var db = require('./db')  , Context = require('./context');
this.azureInstanceTypeService = _azureInstanceTypeService_;
, isNode     = classof(process) == 'process'  , P          = global[PROMISE]; ',' should be placed last.
if (toResolve === 0) {       deferred.resolve(resolved, rejected);     } else { Use the spread operator instead of '.apply()'.
throw(new Error({value: this.chr, message: this.chr +'is not a valid chromosome for'+ species.db + '!'}));    } Expected an object to be thrown.
weak32: function (data, prev, start, end) {         var a = 0          , b = 0 Use the rest parameters instead of 'arguments'.
},             insertCell (...args) {                 var cell = nativeMethods.insertCell.apply(this, args);                 sandbox.nodeSandbox.overrideDomMethods(cell); Use the rest parameters instead of 'arguments'.
var NormalizeNormalAndEyeVector = function ( fnormal, fpos ) {         Node.apply( this );         this._normal = fnormal; Use the rest parameters instead of 'arguments'.
Pattern.prototype.apply = function (input, day) {          for (var prop in Pattern.PROPS) {              if (!Pattern.PROPS.hasOwnProperty(prop)) continue;              var rule = this.rules[prop]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (!this.asset_cache.has(key)) this.asset_cache.set(key, this._findAsset(name, pipeline_name, remote))   return this.asset_cache.get(key) }) Unexpected 'this'.
if (typeof parent!== 'function' ) {         throw new Error('Parent must be a callable constructor');     } Expected an object to be thrown.
photos = data.photos? data.photos.photo : data.photoset.photo,                 len = Math.min( that.options.max, photos.length ),                 photo, Unexpected 'this'.
if(locale == 'zh_CN'){         this.locale = JSON.parse(fs.readFileSync('./language/'+locale+'.json'));       }else{ Unexpected 'this'.
, dirscan = require('./dirscan')  , out = require('./output'); ',' should be placed last.
var ms;         if ($.isFunction(opts.mask) && (opts.mask = opts.mask(opts)), $.isArray(opts.mask)) {             if (opts.mask.length > 1) { Unexpected 'this'.
Backbone.Subset.extend = Backbone.Collection.extend; })(); Unexpected 'this'.
locales: [], should be placed last.
TextCandidate.prototype.__proto__ = new RefObject(); The object literal notation {} is preferrable.
if (!((componentDescriptor_!= null) && componentDescriptor_)) {                   throw new Error("Internal error: componentDescriptor_ should be defined.");                 } Expected an object to be thrown.
function setLanguage(oLanguage) {         $.extend(true, $.fn.dataTable.defaults, { Unexpected 'this'.
})(this.exports = {}); Unexpected 'this'.
if(!self.oldVal[ searchName ] || self.oldVal[ searchName ]!== searchTerm ) {            } Unexpected 'this'.
constructor: function EntityFieldModel(...args) {             EntityFieldModel.__super__.constructor.apply(this, args);         }, Use the rest parameters instead of 'arguments'.
var bias = []; The array literal notation [] is preferable.
equalsbar$:'Property %s is not equal to "bar", man... At %s.',             exactlyone$: function(a,b) {               return'my custom error msg for values '+a+' at location '+b             } Use the rest parameters instead of 'arguments'.
}     };     this.loadDefault = function() {         _this.update(defaultImage, true);     };
if (anonDefine)           throw new Error("Multiple defines for anonymous module");         anonDefine = define; Expected an object to be thrown.
failure: function ( xhr ) {         this._failConnection();     },
class TaskTable extends React.Component {   constructor(...args) {     super(...args); Use the rest parameters instead of 'arguments'.
var req = new XMLHttpRequest(),                 isSuccessful = false;             req.open("HEAD", request.url, true); Unexpected 'this'.
const { EmbeddedDocument } = require('marpat'); const { interceptRequest } = require('./utilities'); const instance = axios.create(this.configuration).interceptors.request.use(interceptRequest); Unexpected 'this'.
this.hideResults().search();             window.setTimeout(function () {                 this.$('.g-search-mode-choose').popover('hide');             }.bind(this), 250);         }, Unexpected 'this'.
var setProperty = require('../connection/utils').setProperty  , getProperty = require('../connection/utils').getProperty; ',' should be placed last.
}; Document.prototype.update = function() {     return this.write(this.buffer); }; Document.prototype.load = function() { Unexpected 'this'.
}             throw new Error('The module has not been loaded yet');         }, Expected an object to be thrown.
constructor(config) {         super(config);         this.config = config;         this.config.guide = _.defaults( 'this' is not allowed before'super()'.
var toString = Object.prototype.toString  , id = toString.call(/a/); module.exports = function (x) { ',' should be placed last.
if (err) {         throw new Error("Error "+err+" not expected");     } Expected an object to be thrown.
if (target[key] && isObject(target[key]) && isObject(add[key])) {       target[key].merge(add[key]);   } else { Unexpected 'this'.
add(key, options) {          this._states[key] = options Use the rest parameters instead of 'arguments'.
}     for ( i = 0, l = props.length; i < l; i++ ) {       prop = props[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (!is_feed(feed)) {     log('%s: bad object type %d %o', db_write_feed_property.name, feed_id,         feed); Unexpected 'this'.
{             that._reportProfileProgress(event.data.profile, event.data.done, event.data.total);         } Unexpected 'this'.
return part.render(this.partContainer.group());     }))      .then(() => {         this.spaceVertically(elements, { The function binding is unnecessary.
else      throw new error.NoValueFoundForNon-optional replacement '" + key, expression: string, data: data };    } Expected an object to be thrown.
i = this.shapes[i];    var newShape = {};    for(var j in i){ The object literal notation {} is preferrable.
constructor: function TransitionCollection(...args) {             TransitionCollection.__super__.constructor.apply(this, args);         } Use the rest parameters instead of 'arguments'.
this.autoend()   return Test.prototype.tearDown.apply(this, arguments) }
self.addFlags(uids, 'Deleted', function(e) {           ccb(e, reentryCount + 1, deletedUIDs);         }); Unexpected 'this'.
if (_.isArray(type)) {             type.forEach((name) => { this.on(...[name].concat(args)) });         } else { Use the rest parameters instead of 'arguments'.
var Data = function (connector, SensorStore, logT) {     var me = this;     var logger = logT || {}; Unexpected 'this'.
map: this.map,       layer: this.layer Unexpected 'this'.
label = <label    class={'col-form-label VF-Field__label control-label'+ this.getForm().labelClass}    for={this.name}> Unexpected 'this'.
this.appversions = addDefaults({}, k8sEnum.Kind.APPVERSION);   this.basePath =  k8sConfig.getBasePath();
debug( 'New value: %s.', this._xMax.toString() );  this.emit( CHANGE_EVENT ); } Unexpected 'this'.
} else {     rest = utils.flatten(args.slice(1));   } Use the spread operator instead of '.apply()'.
opts = arguments[2] || (!Kind && attrs == kind && arguments[1]) || {};    _.mixin(opts, {store: this}); Use the rest parameters instead of 'arguments'.
var trackWidth = this.pane.el.width() - this.pane.padding * 2      , pos = ev.pageX - this.startPageX      , barWidth = this.el.width()      , innerEl = this.pane.inner.get(0) ',' should be placed last.
done();     });   }); Unexpected 'this'.
if (x) {             $(this).find(".glyphicon-triangle-right").removeClass("glyphicon-triangle-right").addClass("glyphicon-triangle-bottom");         } else { Unexpected 'this'.
, core       = require('./$.core')  , hide       = require('./$.hide')  , isFunction = require('./$.is-function')  , global     = require('./$.global'); function ctx(fn, that){ ',' should be placed last.
var util = require('./util'); var _ = require('underscore'); ',' should be placed last.
if(this.debug){     console.log("\n\r###### SHEET "+sheetCount+" XML #####\n\r"); Unexpected 'this'.
module.exports = function Plugin () {   this.apply = function (compiler) { Use the rest parameters instead of 'arguments'.
, wkx = require('wkx')  , path = require('path'); ',' should be placed last.
if (!pattern.hasOwnProperty(key)) {                 throw new Error('unknow option:'+ key);             } Expected an object to be thrown.
if ( this.hasOwnProperty('lookupCache_') ) {     cache = this.lookupCache_;
};       to = {         x: parseFloat(endX),         y: parseFloat(endY)       }; ',' should be placed last.
function sort (arrayLike, sorters) {     var criteria = _makeCriteria(sorters);     var len = _toArrayLength(arrayLike.length); Use the rest parameters instead of 'arguments'.
var elm = $(this);         $.get($(this).attr('href'),  function(data) {             elm.closest('.un-us-item').find('.form-inline').html(data).show();
if (arguments.length <= 1) {             return Year.parseText(text);         } else { Use the rest parameters instead of 'arguments'.
var log = logger.createLogger('reaper');   var timer ',' should be placed last.
},     execute: function (op) {       return this.deleteOperation(op.target, op.length || 1)     } Unexpected space before *.
.attr("font-family","Helvetica")      .each(function(dd){utils.wordWrap(t,this,width-(padding*2),width,false);})     y_offset += text.node().getBBox().height Unexpected 'this'.
output = command.split('=>')[1];    var ouptupCache = this.getBlockOutput(dir);    params = ouptupCache[name]; Unexpected 'this'.
var $, children, each, find, next, parent, prev, siblings, soupselect, _;   _ = require("underscore"); Use the rest parameters instead of 'arguments'.
var getter = this.getEval(fors, expression); Use the spread operator instead of '.apply()'.
GEPPETTO.Console.executeCommand(actionStr);                                 eval(this.props.metadata.action);                             } Unexpected 'this'.
l.curve = function(_) {     return arguments.length? c(curveRadial(_)) : c()._curve;   };
if (newVersion) {         return that._getCacheNameForVersion(newVersion)          .then(caches.open.bind(caches)) Unexpected 'this'.
var shown = 0;                 for (var i = 0; i < options.items.length; i++) {                     var item = options.items[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
const codeList = [];     for (let concept in conceptList) {       if (conceptList.hasOwnProperty(concept)) {         codeList.push(conceptList[concept]['$'])       }
'zoomend': this._endZoomAnim       })     }) Unexpected 'this'.
var buffer = []   var timer ',' should be placed last.
lib.TestManager.TestRun.prototype.ALL_TESTS = lib.f.createEnum('<all-tests>'); Do not use String as a constructor.
const fns =     args.reverse()   const head = Use the rest parameters instead of 'arguments'.
if (!adapterNpmName) {     throw new Error("The adapter's npm name is required when running init.");   } } Expected an object to be thrown.
if (payload.email === 'error@user.com') {             throw new Error('user error')           } Expected an object to be thrown.
let key, notification;     for (key in this._notifications) {       if (this._notifications.hasOwnProperty(key)) {         notification = this._notifications[key]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
})     const Heartbeat = function () {       this.isAlive = true     } Unexpected 'this'.
if (linkHref === href) {           this.set('navService.selectedIndex', index);         }       } Unexpected 'this'.
debug( 'Current value: %s.', this._aValue );
,common.merchantOrderNumber , function (err, xml) {   console.log(xml);  } Use the rest parameters instead of 'arguments'.
notebook_star_count_exists = function(notebook_id) {         return this.model_.notebook_star_count_exists(notebook_id);     }.bind(this);
obj[prop] = 0;              }          }); The function binding is unnecessary.
injectConfigFilePath: function(filePath, configPath) {     this.inject(filePath, '__CONFIG_FILE__', configPath);   }, Unexpected 'this'.
this.mockOpts = opts;                     this.method = 'generateInline';                 }             }); Unexpected 'this'.
module.exports = (function () {   function Pipeline() {     GremlinObject.apply(this, arguments)   } Use the rest parameters instead of 'arguments'.
girder.wrap(imagespace.views.SearchView,'render', function (render) {         render.call(this);         this.$('.pull-right').append(girder.templates.startIqrSession({             currentIqrSession: imagespace.smqtk.iqr.currentIqrSession Unexpected 'this'.
});       onChange = function() {         this.removeClass(this.refs.button, 'btn-success submit-success');         this.removeClass(this.refs.button, 'btn-danger submit-fail'); Unexpected 'this'.
if (_.isUndefined(value)) {                 throw new Error("parameter " + key + " has not been set.");             } Expected an object to be thrown.
var process = function(err, trades) {     var price = that.calculateAveragePrice(trades);     callback(price); Unexpected 'this'.
Redirect.prototype.redirectTo = function (response) {   var self = this;   var request = self.request ',' should be placed last.
this.handleMultiMinusButtonTap = e => {     this.multiData.splice(e.item.idx, 1);     this.change(this.multiData);
let channel = message[CHANNEL]      , headers = message[HEADERS]; ',' should be placed last.
if (!settings.url) {       throw new Error("Qajax: settings.url is required");     } Expected an object to be thrown.
initialize: function(args) {   if (!args.graph) {    throw new Error("Rickshaw.Graph.DragZoom needs a reference to a graph");   } Expected an object to be thrown.
var entities = [];   for (var i = 0; i < this._entities.length; i++) {    var entity = this._entities[i];    if (entity.transformComponent) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}         }).done((resp) => {             this.render();             this.$('#g-google-analytics-tracking-id').val( Unexpected 'this'.
this.pages[data.link] = cygnus.parseHTML(data.html)   }
var canSendMMS = getCanSendMaxMessageSize(arguments[0], isFirefox);
{         that.widgets["statuspane.systeminfo"].setContent(that.tr("Running tests..."));         that.toolbar.setEnabled(false); Unexpected 'this'.
util.forEach(range, function(date) {         self._addHlData(datetime.format(date, 'YYYY-MM-DD'), cssClass);     }); }; Unexpected 'this'.
projectionProvided: function() {     return mapConfig.sources.find( s => s.projection );   }.property('mapConfig'), Unexpected 'this'.
collection : function(){ return this._cmd('collection',Array.prototype.slice.call(arguments,0)); },         close : function(){ return this._cmd('close', Array.prototype.slice.call(arguments,0)); }, Use the rest parameters instead of 'arguments'.
var Shape = require('../shapes/Shape') var Broadphase = require('../collision/Broadphase') module.exports = SAPBroadphase; ',' should be placed last.
$(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));    if (Math.abs(delta.x) < Math.abs(delta.y)) { Unexpected 'this'.
}   throw new Error('illegal error correct level:'+ level); }; Expected an object to be thrown.
input.addEventListener("blur", function() {                      focus(this);                    }, false); Unexpected 'this'.
}.bind(this, event);         this._eventInput.off('mousemove');         this._eventInput.off('mouseup');         document.addEventListener('mousemove', this.boundMove); Unexpected 'this'.
var scenarioManager = new ScenarioManager(url.format(config.servers.elasticsearch));     scenarioManager.setTimeout(120000); Unexpected 'this'.
if (!((objectModelDeclaration_.jsonTag!= null) && objectModelDeclaration_.jsonTag)) {           throw new Error("Missing required root namespace property 'jsonTag'.");         }         this.model.jsonTag = objectModelDeclaration_.jsonTag; Expected an object to be thrown.
}     this._applyColumns(columns);     this._applyValues(values);     return this; Use the spread operator instead of '.apply()'.
if (btn == 'yes') {          Ext.each(this.getSelectionModel().getSelections(), function(rec){      this.store.remove(rec);
adaptor.applyStyling = function ($box, $slides, settings) {       var imgSrc = slideImageURL($slides.eq(settings.bsfaceindex || 0))        , $frag = $() ',' should be placed last.
$.each(asyncWebshims.cfg, function(i, cfg){     webshims.setOptions(cfg);    }); Use the spread operator instead of '.apply()'.
function() {                 this.maximize();                 this.setActiveItem(); Unexpected 'this'.
this.contexts = [];    for( i in contexts ) { if( contexts.hasOwnProperty( i ) ) { this.contexts.push( contexts[i].substr( 1 ) ); } }    line = line.replace( TodoTxt._context_replace_re,'' ); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
_("%s sequence [%s] was ignored."),         "DECSCL", Array.slice(arguments));     } Avoid arguments.callee.
this.name = ast[1].join('/');     this.constants = {};      };
dispatch(this.unlockMetamask())       dispatch(this.showAccountDetail(accounts[0].address))       dispatch(this.hideLoadingIndication()) Unexpected 'this'.
file.removeWithoutTrash=function () {                  if (!file.exists() &&!file.isTrashed()) throw new Error( path+": No such file.");                  lcs(path, null); Expected an object to be thrown.
var Errors = require('./errors')  , fs = require('fs') ',' should be placed last.
});       return Promise.all(promises);     }, Use the spread operator instead of '.apply()'.
function proxyArrayMethod(method) {       return function(callback) {         return [][method].apply( Use the rest parameters instead of 'arguments'.
default:    throw new Error("unknown type="+(typeof value)+" of "+value);  } Expected an object to be thrown.
if (remote === undefined) {       throw new Error("unsupported");     } else if (!(remote in config.read().remote)) { Expected an object to be thrown.
const idProp = this.idProp,       service = this,       cacheService = this.cacheService, Unexpected 'this'.
var xmpp = require('../index') var c2s = null var debug = require('debug')('server-and-client') var Client = require('node-xmpp-client') ',' should be placed last.
if (self.debug)                 console.log(name, args);             var newStateObject = self.currentStateMap.toJS(); Use the spread operator instead of '.apply()'.
if (this.output.length!== 2) {      throw new Error('Output must have 2 dimensions on graphical mode');     } Expected an object to be thrown.
var width = dim.w- 2*(me.w + be.w + pe.w);                widget.resize({t:0,l:0,w: width}); Unexpected 'this'.
function image_status(status) {  private_msg(this.client, [common.IMAGE_STATUS, status]); }
try {               createdItem = processSingleItem(...args.concat(item));             } catch (e) { Use the spread operator instead of '.apply()'.
var modulevalue = 0;             var moduleDependencies = [];             $.each($('input[dependencies=' + $(this).attr('module') + ']:checked'), function () { The array literal notation [] is preferable.
$(this.element).removeClass("horizontal vertical");   $(this.element).addClass(this.get('orientation'));  }.bind(this));
if (max_alt_rows.length!== 1)           throw Error("not a single max alt level");          var max_alt_level = max_alt_rows[0].max_alt_level; Expected an object to be thrown.
if(cdsStart > exonEnds)  {   return smallBox( (exonStarts - (Math.min(..._.pluck(data, 'txStart')))), (exonEnds - exonStarts - (5 / multiplyingFactor)), multiplyingFactor, strand, label);  } Use the spread operator instead of '.apply()'.
this.debug.log("Waiting for more " + type + " buffer before starting playback.");                 this.notify(this.notifier.ENAME_BUFFER_LEVEL_STATE_CHANGED, false);             } else { Unexpected 'this'.
that.updateHairlineInfo();     that.updateHairlineStyles();     that.attachHairlinesToChart_(); Unexpected 'this'.
constructor(project, url) {     super(project, url);     this.url_ = url; 'this' is not allowed before'super()'.
Vue.filter('transChoice', function(id, number, parameters, domain, locale) {         return this.$transChoice(id, number, parameters, domain, locale);     }); Unexpected 'this'.
shell.config.silent =!config.isVerbose;       cb(0, shell[program](...programArgs));     } else { Use the spread operator instead of '.apply()'.
app.listen(8000); function promiseFromStreams(streams) {     return Q.all(streams.map(function(stream) {         return Q.promise(function(resolve, reject) {             stream.on("error", reject); Use the rest parameters instead of 'arguments'.
var util = require( 'util' )  , glob = require( 'glob' )  , async = require( 'async' ) ',' should be placed last.
if (width <= 0 || height <= 0 || width > 65535 || height > 65535)     throw new Error("Width/Height invalid.");   function check_palette_and_num_colors(palette) { Expected an object to be thrown.
$('a.option', doc).click(function(event) {                     var de = jQuery.Event('drop'); Unexpected 'this'.
if (this._template && isThemeVar && isRefContext) {         if (parent.type === NodeType.ARGUMENTS) {           throw new Error('Template theme variables are not permitted as arguments:\n>>> '+Node.toString(parent));         } Expected an object to be thrown.
\n\n'].join('\n');   var modRewrite = require('connect-modrewrite');   module.exports = function doGrunt(grunt) { ',' should be placed last.
return spawn(...kill); }; Use the spread operator instead of '.apply()'.
didTransition() {     this._super(...arguments);     if (config.gaCode) { Use the spread operator instead of '.apply()'.
if (info.p[0]!== 'c') {      throw new Error("How did we end up with paths other than 'c' and 'a'?");     } Expected an object to be thrown.
ended.should.equal(false)     await increaseTime(moment.duration(1, 'week'))     ended = await this.crowdsale.hasEnded() Unexpected 'this'.
var node = this;         this.debug('initialize node');
resolve();       }, this);     }.bind(this); Unexpected 'this'.
});   pool.connect(...options.auth); } Use the spread operator instead of '.apply()'.
if (token.tagName === 'html') {          tc._insertElement(token);          tc.insertionMode = BEFORE_HEAD_MODE; Unexpected 'this'.
else if (Array.isArray(value)) {         obj[key] = value.map(replaceRecordIds);       }       else { Unexpected 'this'.
this.log.debug('Error: %s', err.name)     this.log.debug('Error cause: %s', err.cause.name)     this.log.debug('Error cause message: %s', err.cause.message)   })
var params = isName? arguments[1] : null;     var newFlash = isName? arguments[2] : arguments[1];     logger.log('Changing state to {0}', pathQueryOrName || '""'); Use the rest parameters instead of 'arguments'.
if (_.isArray(t[k])) {    t[k] = _.without(..._.union([t[k]],v));   } else throw new Error("Cannot apply $pull/$pullAll modifier to non-array"); Use the spread operator instead of '.apply()'.
}   return function(...args) {     return g.call(null, f.apply(null, args))   } Use the spread operator instead of '.apply()'.
var Ol_control_Graticule = function(options) { var self = this;  if (!options) options = {}; Unexpected 'this'.
, f = require('util').format  , assign = require('./utils').assign; ',' should be placed last.
$scope.userWalls[isEditing].showLoading = true;                 for (i = 0; i < $scope.newWallOptions.length; i++) {                     $scope.userWalls[isEditing][k] = $scope.newWallOptions[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
utils.isFunction = function( obj ) {     return toString.call(obj) === "[object Function]"; Unexpected 'this'.
}).call(this);
for(var conceptUri in parentData) {     var exactMatchFound;     currentNode = createConceptObject(conceptUri, parentData[conceptUri]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
done();       });     }); The function binding is unnecessary.
ojster.example.templates.Tools.SomeTool = function(opt_data, opt_ctx, opt_writer) {  ojster.Template.call(this, opt_data, opt_ctx, opt_writer); }; Use the rest parameters instead of 'arguments'.
var Constructor = function(elementFilter, indicatorFilter, spec) {       var self = this;
}; })(); Unexpected 'this'.
, Readable = require('stream').Readable || require('readable-stream').Readable  , Define = require('./metadata'); ',' should be placed last.
key.empty();  var keys = []; The array literal notation [] is preferable.
if (!(requirement in require_.modules)) {                 throw new Error('dependency not loaded:'+ requirement + '.');             } Expected an object to be thrown.
var OPACITY = 1;   var $map = this.$('#' + this.mapId);
method.apply(container, arguments);                 });             }, this); Unexpected 'this'.
this.dev = null;   this.gnubbyInstance = ++Gnubby.gnubbyId_;   this.cid = Gnubby.BROADCAST_CID;   this.rxframes = [];   this.synccnt = 0; Unexpected 'this'.
if ( isFresh && Application.isDeveloperMode ) {     this._logger.fine ( new String ( "Import \"" + name + "\":\n\n" + result ));    } Do not use String as a constructor.
swalPromiseResolve(resolveValue || {})   globalState.deferDisposalTimer = setTimeout(disposeSwal, DISPOSE_SWAL_TIMEOUT) }
.attr('title', layer.get("title") || layer.get("name"))    .click(function(e){ layer.prev().click(); })    .attr('unselectable', 'on') Unexpected 'this'.
return this.autorun(() => {   const data = Template.currentData(); Unexpected 'this'.
}     tx.timestamp = parseInt(tx.blockNumber, 16);     if (!payload.mutable) { Unexpected 'this'.
newProps[e.target.name] = e.target.checked;         this.props.onChange(newProps);     },
} }).call(undefined); Unexpected 'this'.
if (byteArray === undefined) {     throw new Error('dicomParser.parseDicom: missing required parameter \'byteArray\'');   } Expected an object to be thrown.
class TaskDetail extends mixin(TabsMixin, StoreMixin) {   constructor(...args) {     super(...args);     this.tabs_tabs = {}; Use the rest parameters instead of 'arguments'.
}.bind(this));   };   return KeyboardHandler; Unexpected 'this'.
if (typeof (err) ==='string') {       formattedMessage = callFormatter(arguments);       err = props = undefined; Use the spread operator instead of '.apply()'.
Handler.call( this, fileName );  this.setCRS( null ); Unexpected 'this'.
console.error("Error uploading selfie", err);       });     } Unexpected 'this'.
GeneratorFunction.prototype.goThen = function (onFulfilled, onRejected) {     return this.goWith(arguments).then(onFulfilled, onRejected);   };
else {                 throw new Error('i18next is not loaded');             }         }; Expected an object to be thrown.
return Promise.reject(error);             });     }, The function binding is unnecessary.
function Matrix (...args) {       Element.apply(this, args) Use the rest parameters instead of 'args'.
if (err) throw err     for (var x in results) {       if (!results.hasOwnProperty(x)) continue;       const guildRss = results[x]       const guildId = guildRss.id The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
run(options) {     this._super(...arguments); Use the spread operator instead of '.apply()'.
{             this.query = query; Unexpected 'this'.
var _ = require('underscore') var Mongoose = require('mongoose') function mongooseRest (schema, options) { ',' should be placed last.
if ($div.length === 0) {       throw new Error('DIV StringMeasurement does\'nt exist');     } Expected an object to be thrown.
, Store = require('../store')  , assert = require('assert'); ',' should be placed last.
MultiLevelMenuUtil.getTargetRouteIndex = function (router, targetModuleId) {             for (var routeIndex = 0; routeIndex < router.navigation.length; routeIndex++) {                 var route = router.navigation[routeIndex]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}       });       if (!hasVisibleNodes && this.parentNode.$node) { The function binding is unnecessary.
this.FEATURE_COLLECTION_PARSERS = {};   this.FEATURE_COLLECTION_PARSERS[_ol_format_GMLBase_.GMLNS] = {     'featureMember': _ol_xml_.makeReplacer( Unexpected 'this'.
var ss = {}   this.ss.iterate(this, null, null, function (n) {     var user = n.id[0] Unexpected space before *.
const fn = async function({a1, a2, a3}) {  this.return = a1; }; Unexpected 'this'.
path ='' + path;   return Router.prototype.dispatch.apply(this, arguments); }; Use the rest parameters instead of 'arguments'.
var nodeListToArray = function nodeListToArray(nodeList) {   return _toConsumableArray(document.querySelectorAll(nodeList)); }; Use the spread operator instead of '.apply()'.
Ember.tryInvoke(this, name, args);     this._super(...arguments);   }, Use the spread operator instead of '.apply()'.
}         return self.explore(...args);     } Use the spread operator instead of '.apply()'.
function get(target, propertyKey ) {   var desc, proto;   if (anObject(target) === receiver) return target[propertyKey]; ',' should be placed last.
if (message instanceof String) {   _.eachKey(this._patternMessageSubscribers,     function(patternSubscribers, pattern) { Unexpected 'this'.
jQuery('input[name^="'+vessel+'-"]').each(function (index) {   $(this).parent().show();   } Unexpected 'this'.
if (obj === undefined)         throw new Error('retain_array: array is not an argument');     for (ix=0;!(retained_arrays[ix] === undefined); ix++) { }; Expected an object to be thrown.
self._model.addChild(leftTypeStructDef);         }); Unexpected 'this'.
onVMouseMove: function(event) {         if (this.props.floating) {             event.preventDefault(); Unexpected 'this'.
var backListener = function() {this.view.fireEvent('android:back', null);};
beforeEach(function() {         state = new RoomState(roomId); Unexpected 'this'.
if(arguments.length === 1) {       return this.validator.validate(rest)     } Use the rest parameters instead of 'arguments'.
, eslintConf = require('eslint/lib/config') , extend = require('lodash/object/extend') ',' should be placed last.
var child = new (forever.Monitor)(script, childConfig);   child.on('exit', function (err) {    if (err) console.log(err);   }); Use the rest parameters instead of 'arguments'.
function valueNull() {         delete that.value;       } Unexpected 'this'.
this.width = width         this.roomObjects = []         this.updatableObjects = []         this.backgroundTiles = new Array(height).fill().map(x => new Array(width)) The array literal notation [] is preferable.
pickNarrativesBySet(narrative_set) {         let narratives_in_sets = {}         for (var i = 0; i < narrative_set.length; i++) { The object literal notation {} is preferrable.
var scalingFactor = Math.min(worldSize.x / myWidth, worldSize.y / myHeight);     var desiredPosition = myBounds.topLeft().subPt(worldSize.subPt(this.owner.worldPoint(pt(myWidth, myHeight))).scaleBy(0.5));
this.form = this.app.form;     this.record = this.app.record;     processAlertMessage(this); Unexpected 'this'.
try{             this.removeListener("connect",connect); Avoid arguments.callee.
let options;     let args = Utils.sliceArgs(arguments);     const last = _.last(args); Use the rest parameters instead of 'arguments'.
, app = express()    , bootstrappedEnv; ',' should be placed last.
this.iv = iv;         asm.init_state.call( asm, iv, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
'use strict' var request = require('../index') var tape = require('tape') ',' should be placed last.
if (!SPARK) {         throw new Error("Soy templates must be initialized to SPARK-namespace before loading spark-bootstrap.js");     } Expected an object to be thrown.
const loaderUtils = require('loader-utils'); module.exports = function (input) {   const { text } = loaderUtils.getOptions(this);   return input + text; Unexpected 'this'.
var gun = Gun({   peers: 'http:    }); ',' should be placed last.
extractCSS = function( arrayOfStyles, styleObj){     var i, val, out, len = arrayOfStyles.length, css = [];     for( var i = 0; i < len; i++){ The array literal notation [] is preferable.
function handleInputs(widget, config) {         var inputs_container = widget.append('div');         inputs_container.classed({'chart-inputs': true}); Use the rest parameters instead of 'arguments'.
function () {  return this.getProteinStructure ();  };
constructor(tempVarTransformer, protoName, thisName, internalName) {     super();     this.tempVarTransformer_ = tempVarTransformer;     this.protoName_ = protoName; 'this' is not allowed before'super()'.
...props,             title: ast.title,             alt: ast.alt, Unexpected 'this'.
{         for (var i = 0; i < events.length; i++)             this._profiler.dispatchEventToListeners(WebInspector.PowerProfiler.EventTypes.PowerEventRecorded, events[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var target = this._parentNode,         node = arguments[arg],         ret = _super.call(this, el, id); Use the rest parameters instead of 'arguments'.
var path = "notes/" + filename;         return this._createPromise(Noted.dropbox.readFile, arguments);       }.bind(this)); Use the rest parameters instead of 'arguments'.
it('ordering', function() {       let editor = this.setEditor('<p>012</p><p>456</p>');       editor.formatAt(0, 2, 'bold', true); Unexpected 'this'.
, multi     = 5     , elements  = Object.keys(map) ',' should be placed last.
var _ = require('lodash'); var Bluebird = require('bluebird'); var Adapter = require('./base'); var sqlite3 = require('sqlite3');
this.props = props;         this._vdom = createElement(h(this.tagName));         this._boundRender = () => { 'this' is not allowed before'super()'.
}             throw new me.Entity.Error("Shape (" + index + ") not defined");         }, Expected an object to be thrown.
catch (e) {  }    } runTestCase(testcase); Unexpected 'this'.
}         throw new Error('you need to provide either an URL or CSV data.');     } Expected an object to be thrown.
let fullSelector = buildSelector(this, context, selector, options);           context.assertElementExists(fullSelector, options); Unexpected 'this'.
var findAutoIncrementField = function() {     var fields = this.QueryGenerator.findAutoIncrementField(this)     this.autoIncrementField = null Unexpected 'this'.
params.imageClass         = arguments[0].imageClass || defaultParams.imageClass;         params.callback           = arguments[1] || null;
Notification.prototype.bind = function(){     var behaviour = this; Use the rest parameters instead of 'arguments'.
rendrExpressApp.use(function(req, res, next) {     var session = req.session; ',' should be placed last.
it('should validate for string', function () {     this.validator.validate('1', {'type': ['number','string']}).should.be.empty;   }); Unexpected 'this'.
{         var commands = ["log", "debug", "info", "warn", "error", "assert", "dir",
const done = this.async();     this.prompt({ Unexpected 'this'.
var matches = [];   this.replace(regexp, function(...args) {     var arr = ([]).slice.call(args, 0); String prototype is read only, properties should not be added.
function() {      $(this).text(gettext("Show")).closest("fieldset").addClass("collapsed");     return false;    }
function publish (topic, data) {   postbox.notifySubscribers(data);   return this; Unexpected 'this'.
} else {             return MonthDay.ofNumberNumber(monthOrNumber);         } Use the rest parameters instead of 'arguments'.
}     throw new Error('Unable to determine scrollTop of the window');   } Expected an object to be thrown.
var tile = prenderer.getTile(null, plevel, pface, px, py, "neighbour of " + name);                     tile.onDestroy.add(tileDestroyedCallback, this);                 }); Unexpected 'this'.
else if (targ0 === 'object') {       return adt.record(function (r, field) {         for (var name in fields) if (fields.hasOwnProperty(name)) field(name, fields[name]);       }); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var shortName = basename(framework, SUFFIX)   var frameworkPath = join(framework, shortName)   var lib = core.dlopen(frameworkPath) ',' should be placed last.
, groupBy: {}         } ',' should be placed last.
, StringDecoder = require('string_decoder').StringDecoder
class NodeDetailPage extends mixin(TabsMixin, StoreMixin) {   constructor(...args) {     super(...args); Use the rest parameters instead of 'arguments'.
this.upgradeResults = function(files){       for(var name in files){ if(files.hasOwnProperty(name)) { files[name].results = angular.copy(this.baseResults); }       this.results  = files; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
});     if (_.isUndefined(obj.data)) throw new Error("data is a required field");     if (_.isUndefined(obj.data)) throw new Error("columns is a required field");     function table() { Expected an object to be thrown.
, sequelize = new Sequelize(config.database, config.username, config.password, {logging: false})  , User = sequelize.define('User', { name: Sequelize.STRING, bio: Sequelize.TEXT }) ',' should be placed last.
if (info.p.length > 1) {     throw new Error("How did we end up with more than two paths?");    }    if (info.p.length) { Expected an object to be thrown.
this._isDefined = fcn;  debug( 'New Value: %s.', oldVal, this._isDefined );  this.emit( CHANGE_EVENT ); } Unexpected 'this'.
if (!newSurface) {     throw new Error('Couldn\'t clear and hide the drag surface: missing new surface.');   } Expected an object to be thrown.
"use strict";     var CONTENT_TYPE = 'application/json';     this.STATUS_CODES = { Unexpected 'this'.
{                 $this.hide();             } Unexpected 'this'.
this._viewFolder = ''   this.controller = 'base'   beforeFilters = []
};      that._write_nodes_helper( node, on_nodes_written );  } Unexpected 'this'.
Object.keys(params.headers).forEach((headerName) => {         const headerValue = params.headers[headerName]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for (var i = 0; i < Report.visualizationTypes.length; i++)      { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
uki.each(['width', 'height','minX','maxX','minY','maxY', 'left', 'top'], function(index, attr) {         proto[attr] = function(value) {             return uki.attr(this.rect(), attr, value);         }; Use the spread operator instead of '.apply()'.
} else {         throw new Error("a public key string is required");     } Expected an object to be thrown.
, MongoError = require('mongodb-core').MongoError  , Readable = require('stream').Readable || require('readable-stream').Readable  , Define = require('./metadata'); ',' should be placed last.
var parents = this.parents || [];       for (var i = 0; i < parents.length; i++) {         parents[i]().call(this); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
options.classNames.series,         (this.data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i))       ].join(' '));
if (inside[name]) {    this.strongSpace = struct.parent.strong;   } Unexpected 'this'.
target.value = text.slice(0, startLine) + text.slice(startLine + preTab, selStart) +                         sel.replace(new RegExp('\n' + tab, 'g'), function () { Unexpected 'this'.
if(document.getElementsByTagName("pre")[0]){ Unexpected 'this'.
url : '/ke/cluster/zk/cmd/ajax?cmd=' + command + '&type=delete',     success : function(data) {      if (data!== null) {       term.echo(String(data.result));      } Do not use String as a constructor.
, spinner_tpl = '<span class="glyphicon glyphicon-refresh decoy-el-spinner">'  , icon_size = 20 ',' should be placed last.
if (validateClient) {                      jq(this).valid();                      dependsOnCheck(this, []);                  } Unexpected 'this'.
function hotFix1493(map) {     var fixedArray = []       ; ',' should be placed last.
gulp.task('publish', async () => {   Object.keys(process.env).forEach((key) => {     console.log(`${key}: ${process.env[key]}`); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if ( jQuery.isFunction( html ) ) {    return this.each(function() {     jQuery(this).wrapAll( html() );    }); Use the rest parameters instead of 'arguments'.
}     this.engine.sendAsync(action + this.browserActionSuffix, data);   } Use the spread operator instead of '.apply()'.
this.info = function() {     this.log('info',...arguments)   }; Use the rest parameters instead of 'arguments'.
export default function(d) {   if (isNaN(x = +this._x.call(null, d))) return this;
, ImageData = canvas.ImageData  , PixelArray = canvas.CanvasPixelArray; var colors = require('./colors'); ',' should be placed last.
for (var i = 0; i < modelAtomCount; ++i) {  this.rd ();  var tokens = this.getTokens (); Unexpected 'this'.
this._eventHandlers = {};     get(this, 'leafletEvents').forEach(function(eventName) {       if(typeof this[eventName] === 'function') { Unexpected 'this'.
}).call(this);
})).start(tmp.morph)     })    }; The function binding is unnecessary.
{         for (var i=0; i<this.tabs.length; i++)         {             var tab = this.tabs[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
constructor() {     super(); Use the rest parameters instead of 'arguments'.
console.log('init_attr start');            _base.init_attr.call(that,elem);                    elem.initData('glue',''); Unexpected 'this'.
new function(){var a=20;this}
this.supported = [];
gte(refValue, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValue = this._normalizeValue(refValue, valueInfo);             return (value >= normalizedRefValue); Unexpected 'this'.
const mergeReducers = (baseReducer,...reducers) => {   combineReducers(...reducers);   return (state, action) => Use the spread operator instead of '.apply()'.
var Visitor = require('./')  , nodes = require('../nodes'); ',' should be placed last.
"use strict"   var ws = require('websocket-server')    , spawn = require('child_process').spawn ',' should be placed last.
GooglePlusPanelView.prototype.LABEL_LOGGED_IN = 0; GooglePlusPanelView.prototype.LABEL_NOT_LOGGED_IN = 1;
var options = this.documentDetailOptions.apply(this, arguments);                 this.documentDetail(options);             }.bind(this); Unexpected 'this'.
if (argv.length > 3) {         var theUser = encodeURIComponent(argv[3])         var uri = "/-/by-user/"+theUser+"|"+un         console.error(uri) ',' should be placed last.
if(tOfVal === 'object' && val.length){         var absArr = createSizedArray(val.length);         var i, len = val.length; Use the spread operator instead of '.apply()'.
toastr.success(TAPi18n.__('Room_password_changed_successfully')); Unexpected 'this'.
if (typeof this.renderSelf == 'function') {       this.renderSelf();     }; Use the rest parameters instead of 'arguments'.
for(var i in categories)          if(categories.hasOwnProperty(i))             feed.push({ category: [{ _attr: { term: categories[i] } }] }); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
show = function () {     var cal = $('#' + $(this).data('pickmeupId'));     if (!cal.is(':visible')) { Unexpected 'this'.
if (countDown < 1) {       window.clearInterval(timer)       fetch(expireSessionUrl, { method: 'POST' }) Unexpected 'this'.
this.build();    this.$tempTopics.empty();   } );  } Unexpected 'this'.
else {   ExoWeb.Batch.resume(batch);   callback(thisPtr, true, typesJson);  } Unexpected 'this'.
link: function (scope, elem, attr) {                } Use the rest parameters instead of 'arguments'.
var startTs = this.since;     var parsedTrades = [];
if (!this.definitions) {     throw new Error('Definitions not parsed yet');   } Expected an object to be thrown.
var TodoViewModel;   TodoViewModel = function(model) { Use the rest parameters instead of 'arguments'.
this.anchor.set(0.5, 0.5);   this.areaHeight = this.HEXA_HEIGHT; Unexpected 'this'.
Size.prototype = new RefObject;  Size.prototype.constructor = Size; The object literal notation {} is preferrable.
if (showEditConnectionForm) {       deleteButton = <button type="delete" className="btn btn-default" onClick={deleteMethod}>Delete</button>     } Unexpected 'this'.
var Db = require('../../')  , Proto = require('../../lib/_proto');
try {       let outputFileName = this.options.output || 'bundle.js';       asset = compilation.assets[outputFileName] || Object.values(compilation.assets)[0]; Unexpected 'this'.
if (2 === Object.keys(room.members).length) {                     for (var i in room.members) {                         if (!room.members.hasOwnProperty(i)) continue;                         var member = room.members[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
{   if (this.opt.sItemListContainerId)    this.oItemList = $('#' + this.opt.sItemListContainerId)[0]; Unexpected 'this'.
}   if (!dirty) return;   this._state = assign(assign({}, oldState), newState); Unexpected 'this'.
if (!options ||!options.template) throw new Error('Reef.js: You did not provide a template for this component.'); Expected an object to be thrown.
if(this.ready())   K.map.initMap(K.profile.getOpts('map'), function() {    this.enableBBox();
value: function(func) {         return new neume.SynthDef(context, func).apply(null, args);       }, Use the spread operator instead of '.apply()'.
});       this.once( 'complete', function() {         console.log( 'generateKey job complete' ); Unexpected 'this'.
return function* auth(next) {     yield *this.session;     this.user = {}; Unexpected 'this'.
callback(new Error('Creating profile without roles succeeded. Expected to throw.'));       })      .catch(function () {         callback(); Unexpected 'this'.
func(event, this, pt);       }     };     if (actions.mouseover && The function binding is unnecessary.
if (ssf && Error.captureStackTrace) {     Error.captureStackTrace(this, ssf); Avoid arguments.callee.
, d = { configurable: true, enumerable: false, writable: true }  , colId = id + 'l_'; module.exports = function (e1, e2) { ',' should be placed last.
{    throw new Error("QR Error: Error BitMatrixParser");   } Expected an object to be thrown.
edit.off("show").on("show", function() {             var root = $(this);             root.append(settings_html); Unexpected 'this'.
opacity: function(el, i, val) {       if (i < el.childNodes.length) el.childNodes[i].style.opacity = val; ',' should be placed last.
for (var i in sidebar){     if (sidebar.hasOwnProperty(i)){       for (var j in sidebar[i]){         list[sidebar[i][j]] = j;
}     end(...args) {       this.client.end.apply(this.client, args);     } Use the spread operator instead of '.apply()'.
for (var p = 0; p < panels.length; p++) {     object.panels[p] = $.extend(true, {}, w2layout.prototype.panel, panels[p]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
args.unshift(log.color.cyan('mrdoc'));       console.log(..._.map(arguments, args)); Use the rest parameters instead of 'arguments'.
{     return;    } Use the rest parameters instead of 'arguments'.
if (this.keyForAttribute) {       typeClass.eachAttribute((key) => {         payloadKey = this.keyForAttribute(key, 'deserialize');         if (key === payloadKey) { return; } Unexpected 'this'.
if (padded) {       this.formatTokenFunctions[padded[0]] = function(...args) {         return zeroFill(func.apply(this, args), padded[1], padded[2]);       }; Use the rest parameters instead of 'arguments'.
} else {                          _liA.push('<a tabindex="-1" class="opt '+optionClass+'">'+$(this).text()+'</a>');                     } Unexpected 'this'.
else                         throw new Error("float is an atomic type");                 } if (this.type.is_vec()) { Expected an object to be thrown.
exports.trimZeros = function (num) {     var str = String(num || '0');     if (str.indexOf('.') == -1) {         return str; Do not use String as a constructor.
var item_elt = $(this.htmlForListItem(path, {                 name: this._name(path),                 offset: offset, value: value, raw: value Use the spread operator instead of '.apply()'.
return PromiseArray.create({       promise     }); Use the rest parameters instead of 'arguments'.
_initializeXAxis(xAxisType = 'linear', config) {     let x = null,       xAxis = null; ',' should be placed last.
'click.add': 'onTextEntered'        , 'click.explore': 'onExplore'     }, ',' should be placed last.
TemplateMethods.bind = function(data, view) {   var modelStack = [ data ]   var viewStack = [ view || null ]   this.traverse(function(name, type, element) { ',' should be placed last.
if (messages instanceof RegExp) {                  return this._registerSubscriber(subscribersHash, messages, subscriber); Unexpected 'this'.
mutationName => {       arr[mutationName] = function (...args) {         Array.prototype[mutationName].apply(this, args);         arr.__litElms__.map( Use the rest parameters instead of 'arguments'.
grunt.log.write(error.stderr + '\n');       throw new Error('Failed to run \'' + cmd + '\'');     }); Expected an object to be thrown.
export const now = (...args) => new Now(...args); export const opacity = (...args) => new Opacity(...args); Do not use Number as a constructor.
if (app == undefined || app == null) {         throw new Error("Missing the required parameter 'app' when calling appsAppGet");       } Expected an object to be thrown.
var focusIdx = this.state.focused        , value    = this.props.value; ',' should be placed last.
if(this.speed.z < 0)    {     destPos = world.body[i].geometry.position.z + world.body[i].getGeometry().size.z;     this.geometry.position.z=destPos;    } Unexpected 'this'.
curAst.dir = curDir;       curAst.alias =         this.alias && `${this.alias}${replaceAlias(dir, this.dir)}/${file}`;       curAst.file = camelize(replaceVue(fileLowerCase)); Unexpected 'this'.
} function get_wlfra_result(query) {  var url = 'http: Unexpected space before *.
var session = require('connect').session; exports = module.exports = session; ',' should be placed last.
context: {               buttonText: 'Retry?',               errorCode: 'PIN_RESET_TIMEOUT' Unexpected 'this'.
if (eventName!== 'dispose') {                         this.trigger(eventName,...args);                     } Unexpected 'this'.
this.getDrives = memoizeImmutableListReference(() => {     return Store.getState().toJS().availableDrives;
if (magic!== Message.MAGIC) throw new Error('Malformed magic'); Expected an object to be thrown.
if (is_parent) {             ancestor_tree_ids.push(item.attr("id"));             ancestor_indeces.push(send_tree.length); Unexpected 'this'.
exception = _error;             throw new Error("removeComponent failure: " + exception);           } Expected an object to be thrown.
}));                 }));             }, Unexpected 'this'.
};       this.setEnabledTrack = function() {         var that = this; Unexpected 'this'.
var buckets = {};   for(var i = 0; i < this.length; i++) {     if(!(this[i] in buckets)) { Array prototype is read only, properties should not be added.
if(descriptorText.charAt(0) === '('){   args = [];   return parseParameters(descriptorText.substr(1), args); The array literal notation [] is preferable.
$(window).resize(function () {     var timerID = "timerLayout_"+this.id;     if (window[timerID]) clearTimeout(window[timerID]); Unexpected 'this'.
}   trigger(...args) {     this._array.forEach(widget => widget.trigger(...args));     return this; Use the rest parameters instead of 'arguments'.
root.console.groupCollapsed("[" + self.logname + "] " + obj.constructor.name + "." + prop + "()", [].slice.call(arguments));           value = fn.call(this, arguments);         } Unexpected 'this'.
nodeCache.refresh(this.$root.generator)   updateSlugs(this)
if(merge) {     Object.assign(target, ret);     ret[_merged] = true; Unexpected 'this'.
function one_data_to_one_msg(messageType, done) {       var test = tests.makeParser[messageType].data;       var expected = tests.makeParser[messageType].msg; ',' should be placed last.
setupController() {     this._super(...arguments);     this.controllerFor('repo').activate('index'); Use the spread operator instead of '.apply()'.
module.exports = async function recordIterator (warcStream) {   const recordStream = warcStream.pipe(new WARCStreamTransform()) Unexpected space before *.
} else {              var spec = firstArg;             this.protocol = spec.protocol || "http"; Use the rest parameters instead of 'arguments'.
$(this).removeClass('active');             });           $(this)            .find('> div').each( function() {               $(this).removeAttr('style').css( 'display', _cache_div[i] ); Unexpected 'this'.
debug('reading response\'s body')   var buffers = []   var bufferLength = 0   var strings = [] ',' should be placed last.
var jobs = [];     for (var i=0; i<data.job.length; i++) {         count++; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for(var i=0, l=effects.length; i<l; i++)       { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
typeof define === 'function' && define.amd? define(['jquery'], factory) :  factory(global.jQuery); }(function ($) { 'use strict';  $ = $ && $.hasOwnProperty('default')? $['default'] : $; Unexpected 'this'.
var next     this._rightLeafKey = null;
if (err) {    throw new Error(`error opening file: ${err}`);   } Expected an object to be thrown.
close: function() {       if (this._ss) {         this._ss.close(); Unexpected 'this'.
if (utils.flag(this, 'excluding')) {         val = removeKeysFrom(val, utils.flag(this, 'excludingProps'))       } else if (utils.flag(this, 'excludingEvery')) { Unexpected 'this'.
removeSync: () => {                     throw new Error('Fake Error');                 } Expected an object to be thrown.
};     })(this));   });   Then(/^(?:the )?"([^"]*)" should (?:have|contain) the placeholder text "([^"]*)"$/, function(el, text) {     this.el = this.currentPage[this.transform.stringToVariableName(el)]; Unexpected 'this'.
, fs = require('fs')  , path = require('path')  , jake = require('../lib/jake')
if (position + 4 > byteArray.length) {       throw new Error('bigEndianByteArrayParser.readUint32: attempt to read past end of buffer');     } Expected an object to be thrown.
function(config, cb) {     var steps = [];     _.each(config.steps, function(elm) { The array literal notation [] is preferable.
var noValue = fieldLength < 0       var step = 0       var field = buf.slice(pos, pos + (noValue? lineLength : fieldLength)); ',' should be placed last.
that.model.on("msg:custom", function() {             that.custom_message(that);         }) Use the rest parameters instead of 'arguments'.
}     case 'list_start': {       const type = this.token.ordered? 'ol' : 'ul';       const body = ''; ',' should be placed last.
targets: null,         processesToList: [],         processesToAdd: [],         targetSelected: 'ANY', The array literal notation [] is preferable.
}   range(...args) {     return this.addOperation(new RangeOperation('range'), args);   } Use the rest parameters instead of 'arguments'.
startup: function(){    if(this.labels.length < this.count){     this._parentInit(false, this.orientation); Unexpected 'this'.
constructor (options) {   super();   var store = this;   var changeEventPending = false; 'this' is not allowed before'super()'.
Quadratic.name = 'Quadratic'; Quadratic.moveBodies = function(epochTime, deltaT){  this.computeDeltaT(deltaT);  let i; Unexpected 'this'.
System.register = __curRegister;   } })(typeof window!== 'undefined'? window : typeof global!== 'undefined'? global : typeof self!== 'undefined'? self : typeof global!== 'undefined'? global : typeof self!== 'undefined'? self : typeof global!== 'undefined'? global : typeof self!== 'undefined'? self : typeof global!== 'undefined'? global : this); Unexpected 'this'.
this.__proto__ = new Widget(ctx,props);      this.ctx = ctx;    this.size = (typeof props.size!= "undefined")? props.size : 12; Use the rest parameters instead of 'arguments'.
if (!(err.constructor.name == type) ||!(err.message == msg)) {         throw new Error("Error message "+err+" doesn't match "+msg);     } Expected an object to be thrown.
beforeEach(function () {     $.on(this.subject.input, "awesomplete-select", function(evt) { evt.preventDefault() });    }); Unexpected 'this'.
$(this)            .removeClass('height-auto')            .removeClass('focus-inform') unexpected 'this'.
td.addClass('permission');   var tags = entry.children().filter(function(){return tagName==tagName});   tags.each(function() { Unexpected 'this'.
this.create_block_id = create_block_id;   this.game_ios = []; The array literal notation [] is preferable.
s.bind('clickNode', function(evt) {         setCurrentTreePosition(evt, true)     }).bind('rightClickNode', function(evt) { Use the spread operator instead of '.apply()'.
}; })(this, document, ion = ion || {});
request.setHTTPMethod(options.method || 'GET')     for (let i = 0; i < options.headers.length; i++) {       request.setValue_forHTTPHeaderField(options.headers[i], i) The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
function merge() {   var streams = copyArray(arguments);   var outputStream = new Stream();
this._lastStartingIndex = startingIndex;     this._lastEndingIndex   = this._lastEndingIndex + delta;   },
this.scope = $rootScope.$new();         this.scope.client = {};         this.AlertService = $injector.get('AlertService'); Unexpected 'this'.
this.gotoFrame(frame);   },   gotoAndStop: function (frame, scene) {     this.stop();     if (isNaN(frame)) Unexpected 'this'.
computeAudio: computeAudioFactory.computeAudio, Bad line breaking before and after ','.
}  return this.state.scale.range[1] / 2; };
} else {         return this.all(params).success(function(records) {           return _this.model.refresh(records);         });       } Unexpected 'this'.
, fs = require('fs')  , coffee = require('coffee-script'); ',' should be placed last.
triggerEvent = function() {              } Use the spread operator instead of '.apply()'.
event.preventDefault();         this.props.onMouseDown(this, event);     } });
if (this.parentProp && this.parent) {     bubbleEvent(this.parent, this.parentProp, args);   }} }; Unexpected 'this'.
$(".following-config-method-buttons.public-following").click( function() {         closeModal($(this));
$(".pathFolderChooserKo").each(function(){     var self = $(this);     if (!self.siblings().hasClass('fileChooserBtn')) {       self.after(getFileBrowseButton(self, true));     }
return this.each(function() {
const str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';   return Array(...Array(n)).map(() => str.charAt(Math.floor(Math.random() * str.length))).join(''); };
content += maybeSourceMap(entry, content)   const exported = {}   if (Module.wrap === moduleWrapESM) { The object literal notation {} is preferrable.
ugen.name = '' + ugen.basename + ugen.uid;   ugen.boundCallback = function (...args) {     for (var _len = args.length, _key = 0; _key < _len; _key++) {       args[_key] = args[_key];     } Use the rest parameters instead of 'arguments'.
export default zora()  .test('should traverse a tree (going deep first)', t => {     const tree = { Unexpected space before *.
for(let item in data){                 if(!data.hasOwnProperty(item)) continue;                 instances.push( The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var nCols = this.__spCols.getValue();             for (i = 0; i < nCols; ++i) {                 cols.push(String(i + 1));             } Do not use String as a constructor.
d3_selectionPrototype.html = function(value) {   return arguments.length < 1? this.node().innerHTML       : (this.each(typeof value === "function" Unexpected 'this'.
constructor(context) {   super(context); Use the rest parameters instead of 'arguments'.
}  function Monster(id, type, lvl, mX, mY, dir) {   this.id = id;   this.type = type; Unexpected 'this'.
removeDelay: 3600,       async process(from, to, runid) {         const extendDeadline = _.throttle(() => this.setDeadline(120000), 10000);         const statuses       = N.models.core.ImageSizeCache.statuses; Unexpected 'this'.
writable: false,         value: sourceContext       } Use the rest parameters instead of 'arguments'.
class PodContainerTerminationTable extends React.Component {   constructor(...args) {     super(...args); Use the rest parameters instead of 'arguments'.
var nou = this.nounique   var all = nou? [] : {}   for (var i = 0, l = this.matches.length; i < l; i ++) { ',' should be placed last.
queryArgs = {};     Object.keys(data).forEach((key) => {       const value = data[key];       if (key === 'body') { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
, stackFrame = this._frames[info.id]      , j      this._addSample(info, ts); ',' should be placed last.
.reduce((a,b) => a.concat(b)),             async function(filePath) {                 const extension = path.extname(filePath); Missing space after *.
if ( error ) {       throw new Error('Error getting authorization code:'+ error[1]);     } Expected an object to be thrown.
var list = [];     if (meta.object instanceof Array) {         for (var i = 0; i < meta.object.length; i++)             list.push(construct({object: meta.object[i], parent: meta.parent, context: meta.context })); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
module.exports = function (sandbox) {   var N     = sandbox.N;   var timer = stopwatch(); ',' should be placed last.
if (connection.from.size!= this.size)         throw new Error("GATER layer and CONNECTION.FROM layer must be the same size in order to gate!"); Expected an object to be thrown.
this.ELEMENT = function(nodeName) {       var element = document.createElement(nodeName) Use the rest parameters instead of 'arguments'.
var count;       count = this.collection_observable.collection().completedCount();       if (count) { Unexpected 'this'.
__extends(ApolloError, _super);     function ApolloError(name, config, message) {         var _this = _super.call(this, (message) || '') || this;         _this._showLocations = false; Use the rest parameters instead of 'arguments'.
return compute.sequence(         func.createConstructor('Number', 1, number_ref.NumberPrototype, number_ref.Number.setValue(Number)), Do not use Number as a constructor.
for (var i=0; i<touchArray.length; i++) {                     var touch = touchArray[i], The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var setValueByPath = function(ob, path, value, visitorCallback){             if(! path.match(/^\                 throw new Error('diff path is not valid');             } Expected an object to be thrown.
if (err) throw err;             that.loadTemplateFromUrl(buffer);         }); Unexpected 'this'.
routeLayer: 'default',     afterModel: function (model) {       if (!transition ||!transition.promise) { return; } Use the rest parameters instead of 'arguments'.
parentIndex: instanceIndex,                         values: [],                         key: getKeyName(instanceStructure.instance, key), The array literal notation [] is preferable.
"use strict";     return (this.title? this.title + '.': '') + (this.first_name? this.first_name +'' : '')              + (this.middle_name? this.middle_name +'' : ''); }
default:         throw new Error('serialize: Content-type'+ contentType(+' not supported.'))     } Expected an object to be thrown.
this.set("selectionIndex", 0);       page.apply(require("./" + this.get("items")[selectionIndex] + ".json"));     }
).map(function(sel) {   return "_.matches('" + sel + "')";  }).join("||")) ',' should be placed last.
UserForm.prototype.jumpToStep = function(stepNumber, direction){     const targetStep = this.steps[stepNumber];     let isValid = false; Unexpected 'this'.
var defaultConfig = {   firestorePath: '',
var newOnFailure = function(xhr) {             command.showHint('Save failed:'+ xhr.responseText);             if (util.isFunction(onFailure)) { Unexpected 'this'.
$(this).addClass('al_element_selected');                     LoadLanguageAttributes($(this).attr('ref'));                 };
Date.prototype.__defineProperty__("toISOLocalString", function() { Date prototype is read only, properties should not be added.
let file;         before(function(done) {           file = new hdf5.File('./h5ds.h5', globs.Access.ACC_TRUNC); Missing space after *.
} else {                         uiFunctions.completeAction($this, action);                     } Unexpected 'this'.
it('test.openNewWindow() W3C WebDriver with specified type=window', function() {     return Globals.protocolTestWebdriver({       assertion: function(opts) { Unexpected 'this'.
return this.inherited(arguments);                     } Use the rest parameters instead of 'arguments'.
if (!user)         throw new Error('no user')       else Expected an object to be thrown.
if(!isNamespace(namespace) ) {     throw new Error('Invalid namespace provided for broadcastAs() observable.');   } Expected an object to be thrown.
if (!region) {     throw new Error('You must specify a region');   } Expected an object to be thrown.
}     return result.H.prototype.h.apply(result.H.prototype, newParams);   }; Use the spread operator instead of '.apply()'.
var moduleDefinitions = {};     var libraryInvocations = findLibraryInvocations(entryNode);     for (var moduleName in libraryInvocations) { Unexpected 'this'.
for (var a = 0; a < inherited.length; a++) {             var attrs = inherited[a].list(); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
delete this.map["" + x + "_" + y];    for(var i = 0; i < this.nodes.length; i++){     var node = this.nodes[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
obj.method  = methodname;     if (arguments.length) {       obj.params  = Array.prototype.slice.call(arguments, 1); Use the rest parameters instead of 'arguments'.
if (DEBUG_COLLISION) {             this.one('enterframe', e => {                 this.attackCollision.addChildTo(this.parentScene.playerLayer);                 this.attackCollision.alpha = 0.3; Unexpected 'this'.
if (declaration.lvalue.isPattern()) {         desugaredDeclarations.push(...this.desugarVariableDeclaration_(declaration));       } else { Use the spread operator instead of '.apply()'.
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "STS", Array.slice(arguments));   }, Avoid arguments.callee.
default:                     return true;             }; Use the rest parameters instead of 'arguments'.
}         }, false);       }; The function binding is unnecessary.
})(this);
var item = this[i];    if(condition.call(this, property, value)){     filtered.push(item); Use the rest parameters instead of 'arguments'.
case '/remove':     remove(context);     break;   } Unexpected 'this'.
function commandBlock(name) {     if(effectNode(this._sel.getRangeAt(0).startContainer, true).indexOf(name)!== -1) {       if(name === 'blockquote') return document.execCommand('outdent', false, null); Unexpected 'this'.
$.when(...promises).done(function () { Use the spread operator instead of '.apply()'.
if (!utils.isAddress(address)) {         throw new Error(`Invalid address given: "${address}"`);     } Expected an object to be thrown.
}).call(this);
exports.notifyExecuted = notifyExecuted;        function getNewPrefix(optons) {          return SF.compose("New", options.prefix);      } Unexpected 'this'.
}     return this.finishNode(this.startNodeAt(importPos), "Import");   }
this.tickInfos = null;  this.mad = 0;  Clazz.instantialize (this, arguments);
emit: function(...args) {     this.listeners.slice(0).forEach((listener) => {       listener[0].apply(listener[1], args); Use the rest parameters instead of 'arguments'.
function CountDown(element, options) {         this.element = $(element);         this.options = $.extend({}, defaults, options); Unexpected 'this'.
value: function resolve() {             var _invoke2;
app.handle = function(req, res, out) {   var stack = this.stack    , removed = '' ',' should be placed last.
raise.call(this, "error", message);   } Unexpected 'this'.
assert.equal(opts.path, '/session/1352110219202/source');         client.transport.runProtocolAction = runAction;       }, Unexpected 'this'.
}                 prom.then(function (ok) { Unexpected 'this'.
window.test.com_test_basic = undefined;   },   handleArgs: function(args) {    window.test.com_test_basic.eventArgs = args; Use the rest parameters instead of 'arguments'.
error: function(message, originalError) {   var err = '' ',' should be placed last.
this.handleQrCodeButtonPat = () => {     this.update();     this.opts.onqrcode(this.opts.key, this.opts.url, this.opts.memo); Unexpected 'this'.
var proc = this, term = proc.getTerminal(); Webos.require('/usr/lib/broadway/broadway-3.10.js', function () {  if (Webos.broadway) { Unexpected 'this'.
this.prevAABB = new platformer.classes.aABB();
var async = require('async');  var FeedParser = require('feedparser'); ',' should be placed last.
function pullNode(prop, Label) {   var part = sortPropLabel(prop),     prop = _.get(part, '0.0'), Use the rest parameters instead of 'arguments'.
var devices = client.sessionStore.getEndToEndDevicesForUser(userId);             for (var deviceId in devices) {                 if (!devices.hasOwnProperty(deviceId)) continue;                 var keys = devices[deviceId]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
template: Handlebars.compile(tpl),
vg.config.isNode = typeof exports!== 'undefined' && this.exports!== exports;
Function.prototype.simplify=function (){     return this; }; String.prototype.simplify=function (){ Function prototype is read only, properties should not be added.
lt(refValue, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValue = this._normalizeValue(refValue, valueInfo);             return (value < normalizedRefValue); Unexpected 'this'.
super(source);         core.defineProperty(this, Symbol.iterator, function* MissingSpaceIterator() {             let index = 0; Missing space after *.
var bitMask = 1;     var query = new Array(length).fill(0);     var memberCount = 0; Use the spread operator instead of '.apply()'.
case DIFF_INSERT:      if (this.offset >= startOffset) {       this.offset += diffOffset;
SDBObjectStoreInTransaction.prototype.get = function(keys) {   var records = []; Use the rest parameters instead of 'arguments'.
var cache = this._cache    , json = this.json    , sort = json.sort ',' should be placed last.
{     throw new Error("Cannot set HMAC key after calling update");    } Expected an object to be thrown.
args.unshift(command);             return this.widgetFunction(...args);         }, Use the spread operator instead of '.apply()'.
var combineHeaders = function combineHeaders(params) {         return Object.keys(params).map(function (key) { Use the rest parameters instead of 'arguments'.
this.vbo_vertexCacheKey;   this.vbo_indexCacheKey;   this.indices_count = 0;  }; Unexpected 'this'.
openRequest.onsuccess = function (event) {         this.db = event.target.result;         if(this.db.objectStoreNames.contains(this.storeName)){ Unexpected 'this'.
this.debug.log("Do seek: " + time);             this.notify(this.notifier.ENAME_SET_CURRENT_TIME, time);             this.videoModel.setCurrentTime(time); Unexpected 'this'.
if (!(address_ && address_)) {               throw new Error("Missing address input parameter.");             } Expected an object to be thrown.
, create           = require('es5-ext/lib/Object/prototype/plain-create')  , merge            = require('es5-ext/lib/Object/prototype/merge')  , nextTick         = require('clock/lib/next-tick') ',' should be placed last.
if (!this.isChild) {       for (var alias in this.context.aliases) {         if (this.context.aliases.hasOwnProperty(alias)) {           this.source[1] = this.source[1] + ','+ alias + '=' + this.context.aliases[alias];         }
, DB = process.env.db || 'http:
function soundsMiddleware(soundsData) {   if ( typeof soundsData!== 'object' )     throw new PouchPluginError({       name:'missingSoundData', Expected an object to be thrown.
describe("when running multiple steps", function(){     var async = new AsyncSpec(this);     var stepsRun;
} else {                     throw new Twig.Error("Unable to parse '" + expression + "' at template position" + exp_offset);                 } Expected an object to be thrown.
if (v <= 0) {                 OpenLayers.Animation.stop(this.timerId);                 this.timerId = null; Unexpected 'this'.
</div>`;     this.addEventListener("click", () => {       const dot = this.children[0];       if (this.classList.contains("disabled") === false) { Unexpected 'this'.
if (definition.events) {                 for (event in definition.events) {                     if (definition.events.hasOwnProperty(event)) {                         this.addEventListener(event, broadcast(definition.events[event]));                     }
if (!process.env.LISTEN_FDS || process.env.LISTEN_FDS!== 1) {             throw new Error('No or too many file descriptors received.');         } Expected an object to be thrown.
{         modelName: "DragDropManager", Unexpected 'this'.
$lux.apiUrls[url] = resp.data;                 return resp.data;             }); Use the spread operator instead of '.apply()'.
doRegister: function( message ){   var nick = message.args[0]; Use the rest parameters instead of 'arguments'.
const flatten = arrays => [].concat(...arrays) Use the spread operator instead of '.apply()'.
return valueBelow(val, s.lookback[s.options.displacement][key1], s.lookback[s.options.displacement][key2])   else throw new Error('belowKumo, s.lookback.length < s.options.displacement') } Expected an object to be thrown.
, powerwalk = require('powerwalk')    , content = path.resolve(haiku.options.src, haiku.options['content-dir']) ',' should be placed last.
if (statics) {     for (var i in statics) {       if (statics.hasOwnProperty(i)) {         Object.defineProperty(cls, i, Object.getOwnPropertyDescriptor(statics, i));       }
function _isText(elt) {                 if (elt &&  elt.innerText && (String(elt.innerText).trim)) {                     return true; Do not use String as a constructor.
leaf.keys.forEach((key) => {       const subLeaf = branch.leaves[key] The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
function Store() {   this.data = new Map(); } Unexpected 'this'.
{    throw new Error("Unexpected error in SHA-2 implementation");   } Expected an object to be thrown.
var tableBody = $("#pendingJobListDataTableBody");     for (var i = 0; i < list.length; i++) {         var tr = $("<tr></tr>"); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
listen: function () {             this.$element ',' should be placed last.
var DefaultApplicationWindow = function(name, opts, app) {     Window.call(this, name, opts, app); Use the rest parameters instead of 'arguments'.
pollsterOptionsObserver: function () {     this.set('pollster.options', {       appID: this.get('applicationId'), Unexpected 'this'.
this.Init$_PropertyValueProvider(obj, propPrecedence, _ProviderFlags.ProvidesLocalValue);      this._ht = [];  } The array literal notation [] is preferable.
function syncToAsync (fn) {   return function (...args) {     var cb = args.pop() Use the rest parameters instead of 'arguments'.
name={name}           onClick={this.onClick.bind(this, firstTrack)} />       </div>
for (var i = 0; i < files.length; ++i)         { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}).call(this);
if (logged_in &&!remoteId) {         buttons.push({ Unexpected 'this'.
tab.focus();       });       return menu; The function binding is unnecessary.
var async = require('async')  , crypto = require('crypto')  , validity = require('validity') ',' should be placed last.
constructor( props ) {         super(props);         this.store = Flux.getStore('application'); 'this' is not allowed before'super()'.
}, () => {       throw new Error('screenshot failure');     }); Expected an object to be thrown.
, http = require('http')  , mongoose = require('mongoose'); ',' should be placed last.
constructor(domain) {     super()     this.nonce = generateNonce()     this.nonceCount = 0 'this' is not allowed before'super()'.
const withFirstElem = [firstElem];     withFirstElem.push(...elem);     powerSet.push(withFirstElem); Use the spread operator instead of '.apply()'.
this.checkPort();   var program = this.program,       server = this.server; Unexpected 'this'.
});     for(i in country){         if(country.hasOwnProperty(i)){             $("#country_select").append('<option value="'+i+'">'+i+'</option>');         }
const headers = {};     for (let headerKey in responseHeaders) {         if (responseHeaders.hasOwnProperty(headerKey)) {             headers[headerKey.toLowerCase()] = _.clone(responseHeaders[headerKey]);         }
function eachConstantReference(obj, constants, callback) {         Object.keys(obj).forEach(function(key) {             var val = obj[key]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
.exec(function (err) {
this.content = { post: { body_html: '', body: '' } };
var a=[];    for(i=0; i<this.childNodes.length; i++){     c=this.childNodes[i];     if(c.nodeType==nodeTypes.ELEMENT){ Unexpected 'this'.
this.setAttribute('clip-path', 'url(#' + entity.id + '-clippath)');                     setPattern.call(that, entity);                 } Unexpected 'this'.
if (!data || typeof data!= 'object') {         throw new Error(`Invalid config data in ${filename}`);     } Expected an object to be thrown.
union(...iters) {     if (iters.length === 0) { Use the rest parameters instead of 'arguments'.
open.push(noDash)           this.trigger("model", noDash, el)         } else { Unexpected 'this'.
var frame, a, link, script, i, href, src;   frame = [].concat.apply([], document.getElementsByTagName('iframe')), document.getElementsByTagName('frame'));   for(i = 0; i < frame.length; ++i) { Use the spread operator instead of '.apply()'.
node._scene = null;    for(var i = 0; i < node.children.length; i++)     change_scene( node.children[i] ); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
showSuccess('登录成功');                              }, Use the rest parameters instead of 'arguments'.
function restoreBookmarkWindow(tabWindow,cb) {   Unexpected 'this'.
export default function () {   batch(morpher, 1) }
if (file.state() ==='rejected') {           results.push(file.fail(function (error) {             return cb(file, error)           })) Use the rest parameters instead of 'arguments'.
default:             throw SceneJS_errorModule.fatalError("SceneJS.bind - this event type not supported: '" + name + "'");     } Expected an object to be thrown.
function (position) {                 t.m_map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));             }, Unexpected 'this'.
});       this.app.run([], function() {
this.text = false;      this.save((("" + (this.prepareOutput(command, true)) + '=' + this.prepareOutput(command, true))) + ";"));      return; Unexpected 'this'.
this.store = Flux.getStore('application');         this.data = {             apps: this.store.getApplications()         }; 'this' is not allowed before'super()'.
console.info('VFS::copy()', src, dest);     if (!(src instanceof OFile) ) { throw new Error('Expects a src file-object'); }     if (!(dest instanceof OFile) ) { throw new Error('Expects a dest file-object'); } Expected an object to be thrown.
Input.prototype.__defineGetter__('address', function() {   return this.data.scriptAddress; }); Unexpected 'this'.
},   resetRenderRange: function(...args) {     this.trigger('resetRenderRange',...args);   }, Use the spread operator instead of '.apply()'.
}; ClientRequest.prototype.abort = function(callback) {   this.proxy.end(callback); }; Use the rest parameters instead of 'arguments'.
});     element.find('*').each(function() {       var bindName = self.jQuery(this).attr('ng:bind');       if (bindName) { Unexpected 'this'.
if (!password) {      throw new Error('Password Required')     } Expected an object to be thrown.
this.emit('ops');             }), this.settings.monitor.interval);
return TurnBasedGame.nextTurn.apply(this, arguments); Unexpected 'this'.
if (queueitem.hasOwnProperty(disallowedKeys[i])) {      throw new Error("Merge queue cannot include any " + disallowedKeys.join(', '));     } Expected an object to be thrown.
if(!jsClient) { var jsClient = {}; } The object literal notation {} is preferrable.
var ADB = require('./adb.js') var Device = require('../device.js') var mkdirp = require('mkdirp') ',' should be placed last.
module.exports.log = function () {   console.log(...arguments); }; Use the rest parameters instead of 'arguments'.
, SocketServer = require('./socket_server') should be placed last.
var GradientStop = Base.extend({
if (obj!== null)     throw new Error("assertNull failed: obj!== null"); } Expected an object to be thrown.
var divs = document.getElementsByTagName('div');           for (var i = 0; i < divs.length; i++){             var div = divs[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
const fullSelector = buildSelector(this, selector, options);           context.assertElementExists(fullSelector, options); Unexpected 'this'.
try {                 streamData = stanzas.parse(wrap(data), stanzas.Stream);             } catch (e) { Unexpected 'this'.
groupTableBy: function() {     if ( this.get('group') === NAMESPACE ) {       return 'namespaceId'; Unexpected 'this'.
} else {             throw new Error("JS implementation of BSDF does not support compression (" + compression + ')');         } Expected an object to be thrown.
if (rhs.end<=start) {         rhs = subParse(this,st.start).parseExprSubscripts() ;         n.operator = 'await' ; Unexpected 'this'.
var odd = (this.width & 1);   var shapes = [];   var stroke = {color: this.color, width: 1}; The array literal notation [] is preferable.
}).call(this);
for (var i = 0; i < innerPoints.length; i++) {     points.push(innerPoints[i]);    } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for(var i = 0, l = this.properties.length; i < l; ++i)   { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
constructor(value = 0, nonce = 0) {         if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');         if (!NumberUtils.isUint32(nonce)) throw new Error('Malformed nonce'); Expected an object to be thrown.
var innerTrapped = mapped[key].innerTrapped;         affected = affected.concat(innerTrapped.affected);       } Use the spread operator instead of '.apply()'.
$(AVG_REPLICATE_VALS_TOP_MENU).click(() => {         grnState.nodeColoring.averageTopDataset =!$(this).prop("checked");         updateApp(grnState); Unexpected 'this'.
log.error('Check that "hue.user" provided in the configuration is correct')         throw new Error('Invalid User')       } Expected an object to be thrown.
hideOverlay();    $(this).fadeOut('fast', function () {$(this).trigger('windowFastClose')});   }
.invoke(mkdir, screenShotFilePath)            .then(() => {                 this._page.clipRect = {                     left: 0, Unexpected 'this'.
this.server.on('all-test-results', this.onAllTestResults.bind(this))             this.server.on('server-start', this.onServerStart.bind(this))         }.bind(this))             }, Unexpected 'this'.
};       testContext.testProvider.evaluateCodeLens(codeLens, null);     }, Unexpected 'this'.
posts.find()      .where(function (expr) {         expr.eq('id', 2);       }) Unexpected 'this'.
init() {     this._super(...arguments);     if (!Ember.testing) { Use the spread operator instead of '.apply()'.
fullDiscussion.find(".forum-post.subject").on(MM.clickType, function(e) {                         fullDiscussion.find(".content").toggle();                     }); Unexpected 'this'.
else {                     this.entityCollection.removeClass('hide');                     var clusters = this.entityCollection.groupBy('cluster'); Unexpected 'this'.
*dfs(first) {     yield* this.graphSearch(first, Stack);   } Missing space after *.
, userEvent = crowi.event('user')   var userSchema = new mongoose.Schema({ ',' should be placed last.
return expect(this.lastResponse.body, message).to.be.like(json); }
patchXMLHttpRequest(function(event, task) {       patchSubscription(event, task)     }) Unexpected 'this'.
export default function max(...values) {   return Math.max(...toArray(values)); } Use the spread operator instead of '.apply()'.
var maxDepth = depth;   children.forEach(function(child) {     var d = this.calcDepthRecursive(child, depth + 1);     maxDepth = Math.max(d, maxDepth); Unexpected 'this'.
var DomainDaoSupport = function() {  this.tableConfig = null;  this.sqlTemplate = null; Unexpected 'this'.
function nick_alt (data) {   var alts = this.nickname_alts, nick;   if (this.welcomed) { Unexpected 'this'.
encodeLegacyData([from, serviceName, '', '', from].concat(                args)))])].join('');     } else { Use the rest parameters instead of 'arguments'.
var vizName1 = 'Visualization'+ testSubName;
if (frame.type === 'HEADERS' || frame.type === 'PUSH_PROMISE') {     var buffer = concat(this.compress(frame.headers));     var cursor = 0;     do { ',' should be placed last.
Ratchet.convertGadgetTag(this);                              }); Unexpected 'this'.
message = "";         for (i = 0; i < rows.length; i++){             key = rows[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var networkingEngine = this.playerInterface_.networkingEngine;   var isCanceled = (function() {     return!this.playerInterface_;   }).bind(this);   return networkingEngine.request(requestType, request, isCanceled)      .then(function(response) { Unexpected 'this'.
mejs.Utils.typeChecks.push(function(url) {  url = url.toLowerCase();  if (url.indexOf('soundcloud.com') > -1) { Do not use String as a constructor.
b = a.filter(greaterThan69).filter(evenDistanceFrom65);         var changes = [];         b.subscribe(function (x) { changes.push.apply(changes, x) }, null, "arrayChange");         expect(b()).toEqual([71, 73, 75]); Use the spread operator instead of '.apply()'.
debug( 'New Value: %d.', this._height );  this.emit( CHANGE_EVENT ); } Unexpected 'this'.
, tail = ''      , res; ',' should be placed last.
}                     }).on(this.touchStart, function () {                         isTouchingTopLevelMenu = true; Unexpected 'this'.
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.cos);     return Math.cos(x); Avoid arguments.callee.
it('removes textbox from menu', function() {       cy.get('@TextboxEl').within(() => {         cy.get('.widget-menu-regular').click({ force: true }).within(() => { Unexpected 'this'.
'use strict' var qs = require('qs') var querystring = require('querystring') function Querystring (request) { ',' should be placed last.
}(this));
block.stop();           vm.errors = this.ncUtils.responseErrorFormatter(error);         };
try {     send.call(this, action);    } Use the rest parameters instead of 'arguments'.
{{BODY}}   return Module; })(); Unexpected 'this'.
var mute =!this.isMuted();         this.setMute(mute);     } Use the rest parameters instead of 'arguments'.
if (token!== archetypeDescriptor.jsonTag) {                   throw new Error("Expected component name of '" + token + "' but instead found '" + archetypeDescriptor.jsonTag + "'.");                 } Expected an object to be thrown.
EditorCell.prototype.toggleComment = function () {   this.editor.execCommand('toggleComment'); }; Unexpected 'this'.
for (var field in that.spec) {                 if (that.spec.hasOwnProperty(field)) {                     var el = $(that.spec[field].selector);                     el.change(function () {
﻿define(function() {  return function(){   this.info = function(msg) {    if (console) { Unexpected 'this'.
this.requestStream.on('response', function(res) {   that.response = res  }) Unexpected 'this'.
, Variable = require("./variable")  , QueryMask = require("./query-mask")  , variablesMask = require("./variable-mask")  , objectMask = require("./object-mask")  , maskUpdater ',' should be placed last.
'<span style="font-size:14px;color:#555;">(' +                     element.data('blueimp-fileupload')._formatBitrate(data.bitrate) +                     ')</span>').removeClass('hide'); Unexpected 'this'.
default:                 console.log("Unknown Viz Type" + this.type);                 break;         } Expected an object to be thrown.
let timeout;     return (...args) => {       const context = this;       const later = function() { Unexpected 'this'.
if(err) {                 callback(err);                 return; Unexpected 'this'.
lineData.eachItemGraphicEl(function (el, idx) {             el.updateLayout(lineData, this._fromData, this._toData, idx);         }.bind(this));
};    }(window, window.VisSenseUtils)); ;(function(window, Math, VisSenseUtils, undefined) { Unexpected 'this'.
var ee2 = new EventEmitter2()  , ee3 = new EventEmitter3(); var ee1 = new EventEmitter1(); ee1.setMaxListeners(Infinity); ',' should be placed last.
show_info(d);                     set_focus(d);                 }else{ Unexpected 'this'.
throw() {     throw createError(...arguments);   }, Use the spread operator instead of '.apply()'.
ajaxStart(function() {       $(this).css('display', 'block');     }). Unexpected 'this'.
function toggleDir() {   var tr = $(this).parents("tr");   var folderid = tr.get(0).id;
};         this.addItem = function (name, value) {             var node = $("<div />").addClass("field"); Unexpected 'this'.
this.timeout(10000);   let app, tmpLogFileName, tmpConfig, tmpConfigFile;
var reloadDirty = this.get('reloadDirty');    forEach.call(Ember.get(payload,'meta.deletedRecords') || [], function(record) {     this.deleteRecordFromStore(record.type, record.id);    }.bind(this));    delete payload.meta; Unexpected 'this'.
if (timer) timer = clearTimeout(timer);                  for (handler in loadHandlers) { if (loadHandlers.hasOwnProperty(handler)) { loadHandlers[handler]() }              } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (is.defined(height)) {     if (is.integer(height) && is.inRange(height, 1, this.constructor.maximum.height)) {       this.options.height = height;
check.call(this, request, response);   response.writeHead(200, {});
.catch(function (error) {       that.setState({         message: error.message, Unexpected 'this'.
}   if (!selector) throw Errors.UNKNOWN_BLOCK_TYPE   return [selector].concat(args) Expected an object to be thrown.
if ((typeof exports === 'object' || typeof exports === 'function') && exports!== global) {     for (var p in exports) {       if (exports.hasOwnProperty(p))         defineOrCopyProperty(moduleObj, exports, p);   } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var s = require('../index')    , assert = require('chai').assert; describe('rest', function () { ',' should be placed last.
it('includes watchOptions if provided', function () {         this.config.isTextTerminal = false         this.compilerApi.watch.yields(null, this.statsApi)
},         (...args) => {           this.recordsRemoved(...args);         } Use the rest parameters instead of 'arguments'.
storage = GridFsStorage({          url: setting.mongoUrl,          file: function* () {            yield { Missing space after *.
tools.loadModuleAndReplace(options, 'column_view'),                 $.when(...options.columns.map(function(column) {                     return tools.loadModuleAndReplace(column.transition, 'class'); Use the spread operator instead of '.apply()'.
{   if (! arguments[ i ] || typeof arguments[ i ]!== 'object' || Array.isArray( arguments[ i ] ) ) { continue ; }   this.stackInto( arguments[ i ], stacked ) ;
if (typeof 'event'!='string' ||!Array.isArray(this.event_hooks[event])) {             throw new Error('LocusZoom attempted to throw an invalid event:'+ event.toString());         } Expected an object to be thrown.
simpleMedia.on("setup", function() {  console.log(this); });
var prototype = extend? (extend[0].$$initCtor? new extend[0].$$initCtor() : new extend[0]()) : {};                 fn.prototype = prototype; The object literal notation {} is preferrable.
if (onDelete == 'DELETE') {       this.collection.remove(           {path: {'$regex': '^' + this.path + pathSeparatorRegex}}, next);     }     else { Unexpected 'this'.
var SomeOtherTool = require('./tools').SomeOtherTool; var Person = function() {  Base.call(this); }; Use the rest parameters instead of 'arguments'.
if(!callback) {   throw new Error("ERROR in function hashMods NO CALLBACK")  } Expected an object to be thrown.
var INDEX = [];   it('should get tar file, not db directory', function(done) { Unexpected 'this'.
, runSyncAsync = ['S', 'S', 'S', 'S']  , runAsync = ['S', 'S', 'S', 'S'] should be placed last.
disabled: false,   isDisabled: Ember.computed('disabled', 'loading', 'value', function() {     if (this.get('disabled') || this.get('loading') || this.get('value')) {       return true; Unexpected 'this'.
rethinkdb.let = function(var_args) {     var bindings = arguments;     var body = arguments[arguments.length - 1]; Use the rest parameters instead of 'arguments'.
this.keptSprites.forEach(move); Unexpected 'this'.
if (!t.type.equals(Shade.Types.vec3)) {             throw new Error("expected vec3, got " + t.type.repr() + "instead");         } Expected an object to be thrown.
function write() {   return this.fuse(new FileWrite(opts)); } Use the spread operator instead of '.apply()'.
};     return arguments.callee(f, a, c, cl, eps/2, left, fa, fc, fcl) + arguments.callee(f, c, b, cr, eps/2, right, fc, fb, fcr);    }; Avoid arguments.callee.
function RelatedModel() { } Use the rest parameters instead of 'arguments'.
export function config() {     this.passthrough('/write-coverage'); Unexpected 'this'.
if (results) {                 var resultsObj = {};                 var numResultsObj = {};                 results.getResults(resultsObj, numResultsObj); The object literal notation {} is preferrable.
for (var j = 0; j < styleOptions.length; j++) {    var style = L.extend({}, L.Path.prototype.options, styleOptions[j]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
'<dt class="optgroup-div">'+$(this).parent().attr('label')+'</dt>'+                                 '<a tabindex="-1" class="opt '+optionClass+'">'+$(this).text()+'</a>'                                 ); Unexpected 'this'.
callback(...args);     } Use the spread operator instead of '.apply()'.
}             for (prop in a) {                 if (a.hasOwnProperty(prop)) {                     aLength += 1;
if (runtime.conf.hintAlign === "right") {                 left = pos.left - bof.left + width;             } else if (runtime.conf.hintAlign === "left") { Unexpected 'this'.
files.forEach(function(file) {    this.push(file);   }.bind(this));
}, base);     },   udpSocket() {         return module.exports.wrap(dgram.createSocket('udp4')); ',' should be placed last.
let weatherdata = this.convertYahooToWeather(data);
self.getName = function() { Unexpected 'this'.
}     })    ,     hash    ; Bad line breaking before and after ','.
let val, prop;                 for (prop in xyPlotData) {                     if (xyPlotData.hasOwnProperty(prop)) {                         val = xyPlotData[prop];                         if (isString(val) && isFinite(val)) { xyPlotData[prop] = Number(val);
}         else if(typeof arg =='string' && ((args.length - i ) % 2 || args[i + 1] instanceof  Array))
getStateForSession: function(session) {     var storedJSON = localStorage[LOCALSTORAGE_PREFIX + session]     var storedState = storedJSON? JSON.parse(storedJSON) : {} ',' should be placed last.
Ember.changeProperties(function() {    var relationship = this.getHasOneRelationship(relationshipName, false);    if (relationship) { Unexpected 'this'.
if (!this.opened.isResolved() ) {    this.opened.resolve(); Unexpected 'this'.
.each(function (props){           select(this).call(componentLocal, props);         }); Unexpected 'this'.
proto = date.prototype; function utcDate(str) {   this._ = new date(str); } Unexpected 'this'.
isWriteOnce() {         return this.get('props').write_once;     },
}, this));   exec('xcrun -find instruments', function (error, stdout) {     this.instrumentsPath = stdout.trim();     logger.info("instruments is: " + this.instrumentsPath); Unexpected 'this'.
if (this.adb) {       this.adb.uninstallApp(function() {         this.adb = null; Unexpected 'this'.
}         let job = await service.createJob(...tasks);         return job; Use the spread operator instead of '.apply()'.
} else if ( arguments.length > 1 ) {     buffers = Array.prototype.slice.call( arguments );   } else { Use the spread operator instead of '.apply()'.
var newclass = React.createClass(patchedspec);   return newclass; Unexpected 'this'.
, settings = config.readConfig(path.join(__dirname, 'config.yaml'))  , pkg = require(path.join(__dirname, 'package'))  , appName = pkg.name  , appVersion = pkg.version ',' should be placed last.
return Ember.computed(function(key, value) {     var changes = get(this, 'unsavedData'),         data = get(this,'savedData'),         key = options.key || key;
function term() {      return this.chainl1( factor, conjunction); }
this.sandbox.dom.append(this.$el, $element);             this.listView = this.sandbox.sulu.getUserSetting(constants.listViewStorageKey) || 'thumbnailSmall';
}                 this._super(key, value);                 switch (option) { Use the rest parameters instead of 'arguments'.
for (let i = 0; i < pathsAtDepth.length; i++) {                 const path = pathsAtDepth[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
formatic.form.method('updateView', function (props) {     _.each(this.attached, function (info) {       formatic.updateComponent(info.component, props);
if (angular.isUndefined(slot)) {               throw new Error('Slot'+ id +'has not been defined. Define it using DoubleClickProvider.defineSlot().');             } Expected an object to be thrown.
var _temp, _this, _ret;         _classCallCheck(this, WithHandlers);         for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) { Unexpected 'this'.
const app = new Koa();     app.use(function(ctx){       ctx.body = ctx.href; Missing space after *.
node.type = 'Literal';     node.value = name; Unexpected 'this'.
setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {       var color = Util.makeCssRgb(r, g, b);       this.ctx.fillStyle = color; Use the rest parameters instead of 'arguments'.
if (method ==='reload') {       $(this).children(options.items).off('dragstart.h5s dragend.h5s selectstart.h5s dragover.h5s dragenter.h5s drop.h5s');       $(this).off('dragover.h5s dragenter.h5s drop.h5s'); Unexpected 'this'.
}; Edward.prototype.emit = function(...args) {     this._Emitter.emit(...args);     return this; Use the rest parameters instead of 'arguments'.
if(this._isDerived()) {       throw new QtyError("Can only compute the best prefix for non-derived units, like kg, s, N, and so forth!");     } Expected an object to be thrown.
var Datastore = require('nedb'), dbLayers = new Datastore({ filename: 'layers.db', autoload: true }); dbLayers.persistence.setAutocompactionInterval(300 * 1000); ',' should be placed last.
tasks: {    * a() {     val = 5; Unexpected space before *.
const WMTSCapabilities = function() {   XML.call(this); Unexpected 'this'.
var rom = exports.rom = function() {     var objects = {};     this.loaded = false;     this.romData = []; Unexpected 'this'.
if (data.length!== entry.size)             throw new Error('Invalid size');         if (canVerifyCrc(entry)) { Expected an object to be thrown.
function disjunction() {      return OPTREES[this.match(/^OR/i).toUpperCase()]; Unexpected 'this'.
close: function() {       if (this._con) {         this._con.unsubscribe(); Unexpected 'this'.
}).call(this);
} }(this));
var path = this.path          , credentials = ctx.req.body;         debug('trying to login as %s', credentials.username); ',' should be placed last.
function defineAssociationAccessors(sourceModel, assocType, targetModel, alias, association) {   var accessors = this[assocType];   var singular = inflect.singularize(alias) Unexpected 'this'.
it('supports setting the app details', function () {       const iconPath = path.join(fixtures, 'assets', 'icon.ico') Unexpected 'this'.
stop: function() {       var el = this.el; ',' should be placed last.
return regex.test(value);      },        color: function(field, value, params) {        },        comma: function(field, value, params) {        },
var text = '';         Object.keys(object).forEach(function(attr) {             text += '<tr><td>' + attr + '</td><td>'; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
email: function(field, value) { ',' should be placed last.
blur: function (e) {             this.focused = false ',' should be placed last.
super(source);         core.defineProperty(this, Symbol.iterator, function* MissingSpaceIterator() {             let index = 0; Missing space after *.
function Sql3 () {     this.client = require('sqlite3');     this.connection = null; Unexpected 'this'.
fn(null, JSON.parse(data.toString()));               if (that.debug) {                 var totalTime = (new Date().getTime()) - startTime; Unexpected 'this'.
} else {         throw new Error('attempted to set uniform "' + name + '" to invalid value'+ value);       } Expected an object to be thrown.
for (var i = 0; i < nodes.length; i++){         var node = nodes[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for(var anim in this.animations){   if(this.animations.hasOwnProperty(anim)){    output = this.animations[anim].serialize(output); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}   for (var field in tasks) Unexpected 'this'.
d3_geo_transform.prototype = {   point: function() { var s = this.stream; s.point(x, y); },   sphere: function() { this.stream.sphere(); }, Use the spread operator instead of '.apply()'.
if (type === 'error') {       throw new Error('Unhandled error event:'+ JSON.stringify(args));     } Use the rest parameters instead of 'arguments'.
}         if (!keep) {             this.axes = []; }
it('should return an error if spspResponse is invalid', async function () {       nock('https: Unexpected space before *.
each:function(callback) {   var me = this;
this.moduleId = moduleId;         this.$location = $location;
case 'prepend': {    return fn + val;   }   case'replace': { Unexpected 'this'.
var edits = generateInfoObject(commandDivElem, "UndoRedoCommand");  edits["commandId"] = commandDivElem.attr("id"); The object literal notation {} is preferrable.
Driver.prototype.start = function(callback) {   return Driver.__super__.start.call(this, callback); }; Use the rest parameters instead of 'arguments'.
run: function (code, env, cb) {       if (typeof env!== 'object' ||!env) { env = O; } Use the rest parameters instead of 'arguments'.
module.exports = () => {   return function logger(...args) {     console.log(...args);   }; Use the rest parameters instead of 'arguments'.
var React = require('react') var Activities = require('./activities') var Hub = React.createClass({ ',' should be placed last.
var _isStopped = function(){     if(this._audioDoc && this._audioDoc._playerStatusDeps){         this._audioDoc._playerStatusDeps.changed();     } Unexpected 'this'.
function() {           return name in this.instance_? this.instance_[name] : prop.defaultValue;         }); Unexpected 'this'.
{   return bigBox( (exonStarts - (Math.min(..._.pluck(data, 'txStart')))), (exonEnds - exonStarts), multiplyingFactor, strand);  } Use the spread operator instead of '.apply()'.
args.push(function() {           self.loaded.push(name);           cb();         }); Unexpected 'this'.
function L(...args) { if (Accidental.DEBUG) Vex.L('Vex.Flow.Accidental', args); } Use the rest parameters instead of 'args'.
try {       return f.apply(context, args)     } catch (e) { Use the rest parameters instead of 'arguments'.
*keys() {     yield* this;   };
, setupPrettier   = require("./setup-prettier")    , setupRepository = require("./setup-repository"); ',' should be placed last.
var options = cliutil.lastArg(arguments)     var fork = require('child_process').fork ',' should be placed last.
debug( 'New Value: %s.', this._aValue );  this.emit( CHANGE_EVENT ); } Unexpected 'this'.
var addedObjects, i, len, part;     this._super(...arguments);     if (addedCount) { Use the spread operator instead of '.apply()'.
var distribute = function(activity, callback) {     Unexpected 'this'.
each: function(callback){     for(var i = 0; i < this.length; i++){       callback(i, this[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
static async delete(id) {         try { Missing space after *.
function createTheme(req, res, next) {     var that = this, params = req.params,         app = req.app, Unexpected 'this'.
if(userData['groups'] && _.size(userData.groups) > 0) {         for(let i = 0; i < userData.groups.length; i++) {          var grp = userData.groups[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var dom = toDom(this.template.fn(model));         this.template.applySelectors(this, dom);         return dom; Unexpected 'this'.
constructor() {     super();     this.type = 'begin'; Use the rest parameters instead of 'arguments'.
if ((!e ||!e.target)         || Array.from(this.activators).some(i => i.contains(e.target))         || closeConditional Use the spread operator instead of '.apply()'.
this.get_current_color_map = function() {
var tc = require('./timecode'); var cap = require('./util').cap; ',' should be placed last.
}; exports.objSplice = function(obj, length, args) {  var splice = A.splice;  obj.length = length; Use the rest parameters instead of 'arguments'.
menus.html(render({email: this.currentUser.email}));       menus.find('.signout-btn').click(signout);
{  this.entryRef = function()  { Unexpected 'this'.
var sys = require('sys') var error = require('./error') ',' should be placed last.
describe('corp-semantic-release', function () {
this.errors = errors;          this.ExclusivePopup(title);      } Unexpected 'this'.
if (tree && tree.length){             textarea.focus(function(){                 var id = $(this).attr('id').replace(/:/g, '\\:'); Unexpected 'this'.
} else {       return meta.lastValue;     } Unexpected 'this'.
it('should deploy all contracts', async function() {         await clevis("test","deploy")         assert(result==0,"deploy ERRORS") Unexpected 'this'.
this._tree.getManager().addEventListener("changeSelection", this._onTreeSelectionChange, this);   this.add(this._tree);
var searchAndHighlight = function(token){             if(token.type === 'identifier'){ Unexpected 'this'.
default:           throw new Error("Invalid message");       } Expected an object to be thrown.
obj.baseURL = this.baseURL;         return asJson? util.prettyPrint(obj) : obj;     },
const step = parms.plainModulus / parms.polyDegree   encrypted = Crypt.encrypt({value: Array(...Array(parms.polyDegree)).map(       (x, i) =>  { Use the spread operator instead of '.apply()'.
this.consoleInfo(this.level +'status');   this.consoleConfig(this[this.level].config); } Unexpected 'this'.
var self = this;      args = Array.prototype.slice.call(arguments, 0);   callback = args.pop();      this._applicationClosed = args.length? args.shift() : false; Use the rest parameters instead of 'arguments'.
const widgetOptions = this.createMetricWidgetsLayout(entry) || [];     widgetOptions.forEach((options) => {       if (this.hasValidOptions(options)) {         const widget = new MetricWidget(options); Unexpected 'this'.
if(gesture.handler) {             gesture.handler.call(gesture, this.inst, inputData);         } Use the spread operator instead of '.apply()'.
});      }(typeof window!= 'undefined' && window.webNotification)); Unexpected 'this'.
if (err.code === 0) {     throw new Error('Account not found');    } Expected an object to be thrown.
$('body, html').animate(                 { scrollTop: calcHeightFunc($(document.getElementById(anchor)), $this)) },                 speed, Unexpected 'this'.
for (var id in data) {             if (data.hasOwnProperty(id)) {                 var singleData = data[id];                 var insertData = [];
trigger: function(name) {     this[name](...arguments);     this._super(...arguments); Use the spread operator instead of '.apply()'.
ai = function(){ pp.addChild.apply(pp,arguments);},    ap = function(){ pp.addSeparator.apply(pp,arguments);}   var pid = ui.puzzle.pid; Use the rest parameters instead of 'arguments'.
if(r360.config.logging) var start   = new Date().getTime();         var polygonList = [];         _.each(polygonsJson, function(source){ The array literal notation [] is preferable.
}     for(let i = 0; i < handler['allow'].length; i++) {      const ret = yield user.isAllowed(handler['allow'][i]);      if(ret) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
flexo.make_readonly(bender.Node, "root", function () {     if (!this.parent) {       return this;     } Unexpected 'this'.
describe('84. fetchClobAsString1.js', function() {   var connection = null; Unexpected 'this'.
componentWillEnter: function(done) {     var node  = this.getDOMNode()      , width = $.width(node) ',' should be placed last.
setTimeout(function() {                                 deferred.resolve( result );                             }, 1 ); Use the spread operator instead of '.apply()'.
} else {                             throw new Error('Dynamically creating toggle-content is not supported right now.'+                             'Return an HTMLElement instance');                         } Expected an object to be thrown.
});   it('new RTCPeerConnection(' + printJSON(tc1Constraints) + ','+ printJSON(tc10Constraints) + ')', function () {     this.timeout(testItemTimeout);     var peer = new RTCPeerConnection(tc1Constraints, tc10Constraints); Unexpected 'this'.
var getLoggerForConfig = function(name, group){  var config   = common.config[group],   colorize = getColorize(name) ',' should be placed last.
const reIgnore = /^[._]/ const forbiddenErr = new Error('forbidden') module.exports = (base, default_price, invoice_ttl, files_attr) => { ',' should be placed last.
languages.forEach(function(language) {             if (!configOptions.skipClient) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var rgb = captures[1]        , len = rgb.length        , single = len >= 3 && len <= 4        , r = parseInt(single? rgb[0] + rgb[0] : rgb.substr(0, 2), 16) ',' should be placed last.
return value;             },             function (reason) { Unexpected 'this'.
var mongoose = require('mongoose'); var Schema = mongoose.Schema; ',' should be placed last.
, attempt: this    })   , this) ',' should be placed last.
networkTypeStore.pullNetworkType(this.props.match.params.networkTypeId)            .then(() => {                 this.setState({loading: false, error: false});             }) Unexpected 'this'.
var path = require( 'path' )  , dbModules = [ 'orm', 'odm' ]; ',' should be placed last.
im.displayImage();      JS9.Separate.activeImage(im);     }); Unexpected 'this'.
let o = {     deref:    deref,     path:     path, Unexpected 'this'.
function getHostAccount() {   return co(function* getHostAccount() {     const iam = new AWS.IAM();     let accountId = yield iam.getUser({}).promise() Missing space after *.
var _ready = [];   var ready = function(lambda) { The array literal notation [] is preferable.
obj.bind('focusin.price_format', function()     { Unexpected 'this'.
transport.getLatestBlock(processNewBlock);   }; The function binding is unnecessary.
jQuery(this).appendTo(lastColumn);           lastColumn.SortableAddItem(jQuery(this));          })
new this.Calculations(this, function (price) {         if (JSON.stringify(price) === JSON.stringify(this.price)) return resolve(price);         this.price = price;
dismissClass: computed('notification.dismiss', function() {     if (!this.get('notification.dismiss')) return this.get('styles.c-notification--in');     return false;
if (visId) {       const username = mapCard.data('visOwnerName');       const mapCardPreview = new MapCardPreview({ Unexpected 'this'.
if (!projectRoot) {         throw new Error('Current working directory is not a Cordova-based project.');     } Expected an object to be thrown.
this._matchEmojiString(textContent.substring(minIndex), data, reg, type);   }
LayoutInformation.prototype = new RefObject;  LayoutInformation.prototype.constructor = new LayoutInformation; The object literal notation {} is preferrable.
return callback('invalid user name:'+ user, user, [], JSON.parse(JSON.stringify(defaultAcl.acl)));     }
for (var i = 0; i < dirs.length; i++) {         scanSums[dirs[i]] = [];         scanIndexes[dirs[i]] = [];     } The array literal notation [] is preferable.
Unexpected 'this'.
debug.call(this, 'Node#sync', arguments);       Backbone.sync.call(this, arguments); Use the rest parameters instead of 'arguments'.
for (var item = 0; item < actionItems.length; item++) {                             var item_handler = function(handler){ The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
return this.each(function() {    try {     this[ jQuery.propFix[ name ] || name ] = undefined;     delete this[ jQuery.propFix[ name ] || name ]; Unexpected 'this'.
, reportLocation: {       filePath: ''      , lineNumber: 0     } ',' should be placed last.
});       svc.createClient({server: server});     }); Unexpected 'this'.
const os = require('os') const fs = require('fs') const lib_version = require('../package.json').version; ',' should be placed last.
});       canSubmit = valid && (!exists || input === that.attr("placeholder"));       entry[canSubmit? "removeClass" : "addClass"]("invalid"); Unexpected 'this'.
}         let style = this.parseFeature(feature, draw, context); Use the rest parameters instead of 'arguments'.
return Nevow.Athena.Widget.get(nodes[0]); }; Use the spread operator instead of '.apply()'.
this.cids = [];                            Plugin.sc.init.call( this, config );                            this.getPlugged().getIndex = this.getIndex.bind( this ); Use the rest parameters instead of 'arguments'.
}   var items = [];   items[0] = [];   items[0]['a'] = out; The array literal notation [] is preferable.
function getConstructorInstanceWithArgs (Constructor, constructorArgs) {   return new Constructor(constructorArgs) } Use the rest parameters instead of 'arguments'.
var calls = [];             fieldNames.forEach(function (fieldName, i) {                 calls.push(this.loadField(fieldName, forceRefresh));             }.bind(this));
}       for (var ci  = 0; ci < self.chains.length; ci++) {         var chain = self.chains[ci]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
, url       = require('url')  , Fiber     = require('fibers/future') ',' should be placed last.
if(typeof config.autorun === "undefined" || config.autorun!== false) {    this.utils.addListener(w, "load", this.page_loaded);   }
value: function validate() {             if (!this.apiKey) throw new Error('apiKey is required');         } Expected an object to be thrown.
if (plain == undefined || plain == null) {         throw new Error("Missing the required parameter 'plain' when calling postSetPassword");       } Expected an object to be thrown.
if (secondArg) {     sails.log.debug('The second argument to `res.ok()` is deprecated.'); Use the rest parameters instead of 'arguments'.
ncode = bits(4) + 4;         if(nlen > MAXLCODES || ndist > MAXDCODES) throw Errors.INVALID_DISTANCE;         for(var index = 0; index < ncode; index++) lengths[order[index]] = bits(3); Expected an object to be thrown.
if (!ko.isObservable(selection)) {                 throw new Error('The selection binding should be bound to either an `observableArray` or a object containing a `data` `observableArray`.');             } Expected an object to be thrown.
if (thrower) {             Object.defineProperty(method, "thrower", { Unexpected 'this'.
if (angular.isDefined(params.next) && angular.isFunction(params.next)) {                     params.next();                 }             }; The function binding is unnecessary.
function iterList(l, f) {     for (var i = 0; i < l.length; i++) f(l[i]);   }   function toLetter(ch) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
})(this);
super([]);         core.defineProperty(this, Symbol.iterator, function*() { yield* []; });     } Missing space after *.
var $parent = getParent($this);         if ($parent.hasClass('open')) { Unexpected 'this'.
var subs = {"#": 1, "?": 1, "/": 0};       for (var c in subs) {         if (!subs.hasOwnProperty(c)) continue;         var ndx = subs[c]? url.indexOf(c) : url.lastIndexOf(c); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
canvasAddCountries.call(this);                 }                 if (!this._.drag && this._._.options.showLakes) {                     canvasAddLakes.call(this); Unexpected 'this'.
if (nextByte!== bytes[i]) {           throw new Error("adler32 checksum didn't match");         } Expected an object to be thrown.
if ( element.type === undefined ) {   throw new ve.Error( 'Invalid element error, can not set attributes on non-element data' );  } Expected an object to be thrown.
else {       formattedMessage = callFormatter(args);     } Use the rest parameters instead of 'arguments'.
message.id = id;   this.redirect('/'); } module.exports.home = home;
construct: { ',' should be placed last.
}             self.input += '<option value="' + value + '"'+ attrs + '>' + name + '</option>';           });         } Unexpected 'this'.
return this.collection[name]; }; Use the spread operator instead of '.apply()'.
case 'photo':   return <Photos {... this.props} />;
console.log(list);       for(var f = 0; f < list.length; f++) {         var id = list[f].id; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
digit: function(field, value) {       var regex = /^\d+$/;       return regex.test(value); ',' should be placed last.
d = c.getItem(d);                                 if (!n(d)) throw new Error("Storage mechanism: Invalid value was encountered");                                 return d Expected an object to be thrown.
module.exports.generateSql = () => {   return String("I want to run!!") } Do not use String as a constructor.
var desc;  return Object.defineProperties(this,   Object.getOwnPropertyNames(b).reduce(function (o, key) { Unexpected 'this'.
, bl           = require('bl') should be placed last.
default:         throw new Error("Protocol not supported.");     } Expected an object to be thrown.
set (keyPath, value, options = {}) {     let [keyPath, value, options = {}] = [keyPath, value, options = {}]
type        : DataTypes.STRING          , allowNull   : false
var that = this;   this.shuffle = function() { that.seq.shuffle(); };  this.reset = function() { that.seq.reset(); }; Unexpected 'this'.
if (!this.window) io = require('../../node_modules/socket.io/node_modules/socket.io-client'); exports.setup = function(Tests){
d3_transitionPrototype.text = function(value) {   return this.tween("text", function(d, i) {     this.textContent = typeof value === "function" Unexpected 'this'.
}   *[Symbol.iterator]() {yield this.keep; yield this.reject}   iters() {return [this.keep, this.reject]} Missing space after *.
progress: function(easeIt){       return easeIt? this.situation.ease(this.pos) : this.pos ',' should be placed last.
var optionToSelect = null;     for (var opt = 0; opt < element.options.length; opt++){       var el = element.options[opt]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
$('#lighthouseKeepLogin').on('click', function() {   chrome.storage.sync.set({ Unexpected 'this'.
var cells = IPython.notebook.get_cells();         for (var i=0; i < cells.length; i++) {             add_lan_selector(cells[i], cells[i].metadata.kernel); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
})(this); Unexpected 'this'.
size: {                     width: [],                     height: []                 }, The array literal notation [] is preferable.
}();   this.BLOTTER = BLOTTER; }();
}                         emitter.emit(...eventData);                     }; Use the spread operator instead of '.apply()'.
, ContentsIdDao = require('../../../../lib/extension/contents/contentsIdDao')     , ImageUtils = require('../../../../lib/tiles/imageUtils') ',' should be placed last.
}                 ds.rowCb = function (item) {                     var model = self._toModel(item, true);                     if (recip) { Unexpected 'this'.
var record;     result.fetch_obj( function( obj ) {       record = self.populate_record( obj ); Unexpected 'this'.
function entityRemove(args, cb) {     args.command.cmd ='remove'; Unexpected 'this'.
throw new Error(__('Invalid iOS developer certificate'));     }    }), The function binding is unnecessary.
var buf = Buffer([ 0x03, 0x01, 0x20, 0xff, 0x00 ])     var array = Struct.types.array ',' should be placed last.
this.testInt = function () {     var byTor;
for (var i = queue.length - 1; i >= 0; i--)       { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (!this._inChangeGroup) {             throw new Error("TextView._replaceCharacters() called without a change " +                             "group");         } Expected an object to be thrown.
}).call(this);
addOpenMetadata(this.messages[1], 1);       addOpenMetadata(this.messages[2], 1);       const icon = find(makeIcon(this.thread), "open-tracking-icon");       expect(icon.children.length).toEqual(1); Unexpected 'this'.
} else {     throw new Error("Unsupported DataType: " + attribute.type);    } Expected an object to be thrown.
error: function() {       window.opera.postError(["[E!]", arguments);    }, Use the rest parameters instead of 'arguments'.
if (oldKey) {      throw new Error("Illegal Keystroke '"+specString+"': contains more than one regular key");     } Expected an object to be thrown.
if(eventListeners[eventName]) {    for(i in eventListeners[eventName]) {     yield eventListeners[eventName][i](params); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
let variables = ''       Object.keys(config.ctx).forEach((key) => {         let variable The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
a () {         yield block() Missing space after *.
} else {                     DateEditorView.__super__.onGenericEscapeKeydown.call(this, e);                 } Use the rest parameters instead of 'arguments'.
this._allModules = {};   this._modulesToReset = {};
var subRecords = [];                 for (var idx = 0; idx < subcontents.length; idx++) {                     var subRecord = processResult(subcontents[idx]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.__mwcDeps[i].dep.depend();         this[this.__mwcDeps[i].cb].call(this,this.__mwcDeps[i].arg);         this.__mwcDeps = _.clone(this.__mwcDeps); Use the spread operator instead of '.apply()'.
if (hasSetPage) {       return this.get('content').setPage(p);     }
},   _validateRow: function (row, cb) {     var record = this._getRecord(row);     this.props.model.isValidRecord(record, function (err, validErrors) { Unexpected 'this'.
var mv_swap = function() {         this.game.swap(this.x, this.y);     };
.value();                     $scope.navItems.push(...requestNavItems);                     $scope.navItems.push({ Use the spread operator instead of '.apply()'.
} const mapDispatchToProps = () => {} export default connect(mapStateToProps, mapDispatchToProps)(ReactChoropleth) The object literal notation {} is preferrable.
function xor() {     var index = -1,         length = arguments.length; Use the rest parameters instead of 'arguments'.
}   this.cb = cb;
} else {             showNotification("Error: status=" + status);             errorCallback("FAILED"); Unexpected 'this'.
var pg = require("pg@0.2.7"); var EventEmitter = require('events').EventEmitter; ',' should be placed last.
Backbone.Form.editors.Base.prototype._setOptions.call(this, opts);      this.initialize.apply(this, arguments);     this.value = this.model.get(this.options.keyAttr); Use the rest parameters instead of 'arguments'.
if (str.length <= (i + 1)) {         throw new Error('High surrogate without following low surrogate')       } Expected an object to be thrown.
Object.keys(config).forEach(function (prop) {       that[prop] = config[prop];     }); Unexpected 'this'.
var TObject = require( 'PHET_IO/types/TObject' );   var TBounds3 = function( bounds3, phetioID ) {     TObject.call( this, bounds3, phetioID );     assert && assert( bounds3 instanceof phet.dot.Bounds3 ); Unexpected 'this'.
var marked = [];    for(var key in this._shapes)     marked.push(this._shapes[key]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var $export = require('./_export'); var $values = require('./_object-to-array')(false); ',' should be placed last.
rhs.async = true ;        st.pos = rhs.end ;        this.next(); Unexpected 'this'.
var exec = require('child_process').exec  , path = require('path') ',' should be placed last.
var actualAction, actualChangeListenerFunctionContext, expectedChangeListenerFunctionContext;   var expectedError, logger, factory = this.factory; Unexpected 'this'.
before(function (done) {             this.formage = require('../');             var mongoose = this.mongoose = require("mongoose"); Unexpected 'this'.
if (this.auto_wait) {      if (node.window && node.window.document) {       node.emit('WAITING...'); Unexpected 'this'.
'use strict'; var Utils = require('./utils'); ',' should be placed last.
var DocumentManager     = require("DocumentManager")    ,   EditorUtils         = require("EditorUtils") ',' should be placed last.
return _write.call(this, type, data, reqId);         } Use the rest parameters instead of 'arguments'.
soundManager.play("cuehit");    }); Unexpected 'this'.
return download.start(this.options).then(() => {       expect(this.exit).to.be.calledWith(1)     })
if (!item ||!item.id ) {       throw new Error('url() expects a File ref with Id');     } Expected an object to be thrown.
enableAppIdLink: function() {     return!!(this.get('tezApp'));   }.property('applicationId'),   childDisplayViews: [ Unexpected 'this'.
if (err) {       callback(err);     } else { Unexpected 'this'.
options = options || {};
JSHC.addToplevelNamespace(mod.ast);         } Unexpected 'this'.
if (componentGlyph.points) {                     var transformedPoints = transformPoints(componentGlyph.points, component.dx, component.dy);                     glyph.points.push(...transformedPoints);                 } Use the spread operator instead of '.apply()'.
}     throw new Error('illegal char:'+ c);   } Expected an object to be thrown.
if (!/^\s+/.test(buf) || (buf.length > 3 &&!/^\s+at /.test(buf))) {       w += buf;       buf = ''; Unexpected 'this'.
var Backbone = require('backbone-nowjs')  , http = require('http');
} NaiveBroadphase.prototype = new Object(Broadphase.prototype); The object literal notation {} is preferrable.
}];     for (var id in clientStrings) {         if (clientStrings.hasOwnProperty(id)) {             var cs = clientStrings[id];             if (cs.r.test(nAgt)) {
tempDiv.innerHTML = tmpl   processEvent(tempDiv)   return tempDiv.childNodes[0] Unexpected 'this'.
} else {             throw new Error("Internal error: Builtin '" + name + "' has no evaluator?!");         } Expected an object to be thrown.
var concat = Array.prototype.concat,         values = concat.apply(this, arguments);
const result = [];           Object.keys(data).forEach((key) => {             const item = data[key];             item.key = key; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var BreakpointGutter = function () {         this.cm = null;         this.cd = null; Unexpected 'this'.
}     const ret = this.opts.val || {};     ret['category'] = item.value; Unexpected 'this'.
}   return this; };
result.push('(' + component.value + ')');         for (var ii = 0; ii < component.children.length; ii++) {           result.push(flattenComponent(component.children[ii])); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
constructor(location, binding, initializer) {     super(location);     this.binding = binding;     this.initializer = initializer; 'this' is not allowed before'super()'.
expect(log.event, nameErrorMessage).to.be.equal(name);   Object.keys(params).forEach((key) => {     const expected = params[key]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for(conn in this.connections){         conn = this.connections[conn];         var tojson = conn.toJSON(); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
, levels = require('./levels'), DEFAULT_CATEGORY = '[default]', ALL_CATEGORIES = '[all]' ',' should be placed last.
$.data(that, 'plugin_' + pluginName)[options]();             } Unexpected 'this'.
declutterMarkers: function(opts) {   throw new Error('Mapstraction.declutterMarkers is not currently supported by provider'+ this.api);  }, Expected an object to be thrown.
setTimeout(function() {    this.fireEvent("media", this);    this.informTable("Resize"); Unexpected 'this'.
startMeasure("run");             this.set('data', []);             that.set("selected", undefined); Unexpected 'this'.
if (r!== null) {             for (var i = 0; i < r.length; i++) {                 var uniform = r[i].match(/uniform\s+\w+\s+(\w+)/)[1]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for(j = 0; j < this.dropDots.length; j++){     item = this.dropDots[j]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
} else {         message.say(`New code successfully pulled!\nPlease restart all shards.`)       } Unexpected 'this'.
handler: function (v) {                      self.fireEvent(BI.AnalysisOperatorTitle.EVENT_SAVE, v)                  } Use the rest parameters instead of 'arguments'.
if (!share.jiff.helpers.array_equals(share.holders, o.holders)) {         throw new Error('shares must be held by the same parties (|)');       } Expected an object to be thrown.
for(i = 0; i < MFT.AppModel.interactionChoises[ChoisesVal].choiceSet.length; i++){                         button = MFT.Button.create({ The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
function top(k, offset, renderSpec, callbacks) {           var query = writeQuery(_binParams, true, _orderExpression); Unexpected 'this'.
var renderer = this.renderer            , view = renderer.view; ',' should be placed last.
const outer = this;     const ns = new Set(function* () {       yield* ano.entries; Missing space after *.
var cb = this.async();   this.log('\n----'+ 'Client'.red.underline +'----\n'); Unexpected 'this'.
case's': case 'd': case 'b': case 'n': break;     default: throw new Error('unrecognized type'+ val.t);    } Expected an object to be thrown.
inverse: function () {       return new SVG.Matrix(this.native().inverse()) ',' should be placed last.
try {              S3.JSONRequest[selField.attr('id')].abort();          } catch(err) {}; Unexpected 'this'.
function setDisplayLength(iDisplayLength) {         $.extend($.fn.dataTable.defaults, { Unexpected 'this'.
it("get a notification message", async function() {       await VerifyNotificationDisplayed(this.driver, AUTHENTICATION_TOTP_FAILED);     });
if (message.type == "prepare") {                 this.node.receivePrepare(message.port, message.address, message.proposalId)             } else if (message.type == "accept") { Unexpected 'this'.
function insertXPath(parent, child) {   let prefix = this.config.platform === 'iOS'? 'XCUIElementType' : '';   checkPathIndex(parent, child);   let currentIndex = child.pathInParent; Unexpected 'this'.
} runTestCase(testcase); Unexpected 'this'.
, fs = require('fs')  , underscore = require('underscore'); var Pool = require('./pool'); ',' should be placed last.
renderNodes: function($container, nodes, type) {    for (var index = 0; index < nodes.length; index++) {     var node = nodes[index]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (!(type in this.schemas)) {       this.schemas[type] = Parser.call(null, schema, property);     } else { Use the spread operator instead of '.apply()'.
}).call(this);
) {         const retVal = formio.hooks.on[name].apply(formio.hooks.on, args);         return (retVal!== undefined)?!!retVal : true;       } Use the rest parameters instead of 'arguments'.
Template.Fall_Semester.onRendered(function fallSemesterOnRendered() {      if (this.data) { Unexpected 'this'.
describe('91. fetchBlobAsBuffer4.js', function() {   var connection = null; Unexpected 'this'.
var file = JSIL.Host.getFile(filename);       return JSIL.StringFromCharCode(file);     } Use the spread operator instead of '.apply()'.
FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);  if(NumSets === 1 && Offset0!== blob.l) throw new Error("Length mismatch");  else if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); } Expected an object to be thrown.
vertices.position.forEach((elem, index, array) => {       Object.keys(vertices).forEach((attribName) => {         var element = vertices[attribName][index]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (console.log.apply) {         console.log(...arguments);       } else { Use the spread operator instead of '.apply()'.
});         $this.parent().find('.remove-recipient').show(200);     }); Unexpected 'this'.
if (this.output.length!== 2) {     throw new Error('Output must have 2 dimensions on graphical mode');    } Expected an object to be thrown.
var atomic_fill       = $this.css('fill'),       atomic_hexvalue   = atomicRgb2Hex( atomic_fill ), Unexpected 'this'.
const createMenu = require('simple-terminal-menu') const chalk = require('chalk') ',' should be placed last.
'use strict'; var extend = require('xtend'); var idCount = 0; var _ = ',' should be placed last.
, fs = require('fs') should be placed last.
}       this.set('optionsDates', newOptionsDates);     }
trigger(...args) {         var count = this._liveResources.length; Use the rest parameters instead of 'arguments'.
constructor() {         this.map = {};     } The object literal notation {} is preferrable.
export function log(...argv) {     console.log(...argv); } Unexpected 'this'.
if (!_this.tokenVector.length) {               throw new Error("Invalid address contains no address tokens.");             } Expected an object to be thrown.
init() {     this._super();     this._nextPaintFrame = null; Use the rest parameters instead of 'arguments'.
case this.ERROR:                     _logger.error(...args);                     break; Use the spread operator instead of '.apply()'.
if (body == undefined || body == null) {         throw new Error("Missing the required parameter 'body' when calling createUser");       } Expected an object to be thrown.
results.forEach(function(result) {         var error = result.error;         var attribute = result.attribute; ',' should be placed last.
},   render: function () {     if (this.currentIndex === null) { Unexpected 'this'.
for ( var i = 0; i < 50; ++i ) {         controller = this.TaskController.create({}, this.Y);         this.taskControllers_[controller.task.id] = controller; Unexpected 'this'.
}).call(this);
return;     }     var body = (this.get('doc.body') || '').toString();     if (this.get('doc.body')!== session.getValue()) {       this.get('session').setValue(body); Unexpected 'this'.
const _checkAction = $(this);
, minifyify = require('../lib/minifyify') require('./config/envoy') ',' should be placed last.
function txn_oncomplete(entry_id, callback, event) {   log('%s: marked entry as read', db_mark_entry_read.name, entry_id);   this.channel.postMessage({type: 'entry-marked-read', id: entry_id}); Unexpected 'this'.
.on("mousemove", function(d, i){                 var mousex = d3.mouse(this);                 mousex = mousex[0] + 15; Unexpected 'this'.
}   for (var i = 0; i < toCut.length; i++) {     var tabIdToCut = toCut[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (!this._trigger( "load", undefined, triggerData ) ) {      return;
method == 'load'? load.apply(this, slice.call(arguments, 1)) :                 localize.apply(this, method == 'custom'? [settings.custom].concat(slice.call(arguments, 1)) : arguments));     }; Use the rest parameters instead of 'arguments'.
send(subject, msg, optReply, optCallback) {     return this.nc.publish(subject, msg, optReply, optCallback)   } Use the spread operator instead of '.apply()'.
}).call(this);
(exports.setrange = function(client, key, offset, str){   var obj = this.lookup(string(key))    , offset = +string(offset); ',' should be placed last.
case JSON3.stringify(Number()) === "0":           case JSON3.stringify(String()) == '""': Do not use Number as a constructor.
widgetOk = widget.querySelector('.pf-widget-ok'),       widgetReco = widget.querySelector('.pf-content-unit'); Unexpected 'this'.
}         childNodes.forEach(function (childNode) {             this.appendChild(childNode);         }, this); Unexpected 'this'.
store.PURCHASE_EXPIRED = 6778003; })(); Unexpected 'this'.
var osm = this.getAttribute('data-id'),                 layer = this.getAttribute('data-layer'); Unexpected 'this'.
expect(popularity).to.be('1');       });     }); Unexpected 'this'.
if (this.right) {     if (this.right.parent!== this) { throw new Error('Parent pointer broken for key'+ this.key); }     this.right.checkInternalPointers(); Expected an object to be thrown.
}, this)     this.on('context.updated', (context) => {       this._context = context     }, this) Unexpected 'this'.
function($log, $state, productList) {       $log.debug('ProductListController >> this=%O, productList=%O',         this, productList);
base.externals.push(...Object.keys(options.libs || {})); Use the spread operator instead of '.apply()'.
}       throw new Error("toStringJS on an unknown type: " + val);     } Expected an object to be thrown.
}).call(this);
try {      self._bind.push(new EpoxyBinding($element, bindings, context, handlers, this));     } catch( error ) {
if(Ext.Array.contains(assignment_ids, parseInt(assignment_id))) {                 sumScaledPoints += that._calculateScaledPoints(group.points);             }; Unexpected 'this'.
return Utils._.template(sql)({         triggerName: triggerName,         tableName: tableName       });     }, ',' should be placed last.
this.Roles.save({ id: 'bulk' }, { roles: this.roles }, function (data) {                 this.$notify(this.$trans('Roles reordered.'));             }, function (data) { Unexpected 'this'.
(function( jQuery ) {
, rimraf    = require('rimraf') var dbidx = 0 ',' should be placed last.
self.final.aliasTo = self.aliasTo;                 for (var i = 0; i < ALIAS_PROPS.length; i++) {                     var key = ALIAS_PROPS[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
{         RemoteModule.removeListener(this);     }, Use the rest parameters instead of 'arguments'.
this.router.listener.add(requestObject, connection);   this.funnel.execute(requestObject) Unexpected 'this'.
this.on('streamStart', function () { 'this' is not allowed before'super()'.
value(emitter);  if (type!== undefined) {   data = emitter.hasOwnProperty('__ee__') && emitter.__ee__; Use the rest parameters instead of 'arguments'.
var self          = this      , updatedAtAttr = this._timestampAttributes.updatedAt      , createdAtAttr = this._timestampAttributes.createdAt      , errors        = [] ',' should be placed last.
test: function(configuration, test) {     var ObjectID = configuration.require.ObjectID;     var Long = configuration.require.Long; ',' should be placed last.
this.completeAction(action);    }, function () {
defineInstanceSimilar(sugarNumber, 'abs,pow,sin,asin,cos,acos,tan,atan,exp,pow,sqrt', function(methods, name) {     methods[name] = function mathAlias(...args) {       return math[name].apply(null, args);     } Use the rest parameters instead of 'arguments'.
var cluster = this.vbr.clusterSectorStart
res.writeHead(200, {     'Content-Length': body.length   });   res.end(body); } ',' should be placed last.
function seq (t) {       var fn; Use the rest parameters instead of 'arguments'.
clearTimeout(id);       writeHead.call(res, statusCode, reasonPhrase);     }     next(); Use the rest parameters instead of 'arguments'.
} else {             throw new Error('Unknown compression method:'+ entry.method);         } Expected an object to be thrown.
this.registerNamespaceFriendlyPrefix = registerNamespaceFriendlyPrefix;   this.$get = function() { Unexpected 'this'.
reset() {     this.extraVariables_ = {};   } The object literal notation {} is preferrable.
if($(this).is(':checked')) {          BIMSurfer.showType($(this).val(), project);         } else { Unexpected 'this'.
} export async function load__data__csv__worker(ctx) {   info(`${logPrefix}|load__data__csv|Promise|setTimeout`) Missing space after *.
var num_gaps = 0, ref_count = 0, total_gap_days = 0, total_work_days = 0;       new_e.forEach( function(point) { ',' should be placed last.
it("should return true when a PrimitiveClass is given", () => {       expect(isPrimitiveOrPrimitiveClass(String())).to.eq(true);     }); Do not use String as a constructor.
} else {     this.path_ = path;   } Use the rest parameters instead of 'arguments'.
} else {                     mockFunc = sendError.bind(that, mock.error, filePath);                 } Unexpected 'this'.
$popup.toggle();      $popup.toggleClass('active');       e.preventDefault(); Unexpected 'this'.
ownerType:'mixin',          getValue() {              let html = _getHtml(this);              return html.value; Unexpected 'this'.
, /(\s(\\\}|[^\}])+)?/                                   ].map((exp) => exp.source).join(""), "g"); ',' should be placed last.
this.write = function (session, callback) {     var secret = geddy.config.secret      , data = JSON.stringify(session.data) ',' should be placed last.
function ($log, productDetail, productVersions, Notifications) {       $log.debug('ProductDetailController >> this=%O, productDetail=%O,'+                      'productVersions=%O', this, productDetail, productVersions);       var that = this; Unexpected 'this'.
, async.apply(commonUtilities.prepareDb, benchDb), function (cb) { d.loadDatabase(cb); }, async.apply(commonUtilities.insertDocs, d, n, profiler) ',' should be placed last.
var destination = {};  for (var property in source)   if ({}.hasOwnProperty.call(source, property))    destination[property] = source[property];  return destination; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
export default function(args) {   var v = variance.apply(this, args);   return v? Math.sqrt(v) : v; Unexpected 'this'.
getClassName: function() {       return "R.debug.ConsoleRef";    }
}).catch( function(error) {         that.showErrorMessage("Error loading data. " +error);         console.error(error); Unexpected 'this'.
this.table = table;         var name; Unexpected 'this'.
function compileModes() {     for (var i = 0; i < LANGUAGES.length; i++) {       var language = LANGUAGES[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
} function LenyaLinkTree(doc, treeElement) {     this.doc = doc;     this.treeElement = treeElement; Unexpected 'this'.
if (!this.container) {             throw new Error('Toggleable container with id "' + ContainerId + '" not found');         } Expected an object to be thrown.
this.sessionId = sessionId;   for (prop in properties) {     if ({}.hasOwnProperty.call(properties, prop)) {       this[prop] = properties[prop];     }
[ targets.show, targets.hide, targets.tooltip, targets.container, targets.content, targets.window ],      target!== FALSE     ) Unexpected 'this'.
server.decorate('server','setupViews', function (path, engines) {     this.views({       path: path,       isCached: config.get('optimize.viewCaching'),       engines: _.assign({ jade: require('jade') }, engines || {}) Unexpected 'this'.
var c, parts, part, p, fullName;    for ( var name in list ) {     if ( list.hasOwnProperty(name) ) {      c = list[name];      if ( c.type =='script' ) {
ref: function (x, y) {       return this.attr('refX', x).attr('refY', y) ',' should be placed last.
CommonViewFunction.saveTermToAsset({                             termName: this.modal.$el.find('.taxonomyTree li.active a').data('name').split("`").join(""),                             guid: this.guid Unexpected 'this'.
{       throw new Error("QR Error: ReedSolomonException Bad error location");      } Expected an object to be thrown.
this.updateFastColorPickMenu();     this.setUiColor(hexToRgb(this.favoriteColors[0].color));   } else { Unexpected 'this'.
dfa.accept = -1;  dfa.nfa_set = [];  dfa.done = false; The array literal notation [] is preferable.
{   this.config = Object.assign(    {scale: 1.15, duration: 75, revertOnDispose: true},    {scale: 1.15, duration: 75, revertOnDispose: true},    {scale: 1.15, duration: 75, revertOnDispose: true}, 'this' is not allowed before'super()'.
var index;      for (i in data) {          if (data[i].ts < 946681200000) data[i].ts *= 1000; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
try {       this.closing = true;       await closeStream(this.stream);     } finally { Unexpected 'this'.
for (var dep in scope.dependencies) {                         if (scope.dependencies.hasOwnProperty(dep)) {                             dep_name = dep;                             dep_src = scope.dependencies[dep];
if (Meteor.users.find().count() === 0) {         console.info('no users in database!  adding some default users', LogLevel.Info, this);         var userId = null; Unexpected 'this'.
default:         throw new Error("Invalid argument for node-brackets module initialization.");     } Expected an object to be thrown.
function getGridFragment(callback) {     if (!this.world ||!this.gridSize) {         callback(false); Unexpected 'this'.
}; Dword.prototype.emit = function(...args) {     this._Emitter.emit(...args);     return this; Use the spread operator instead of '.apply()'.
this.getKeyValueView("From", "from_date", "date"),    this.getKeyValueView("To", "to_date", "date"),    this.getEditableKeyValueView("Payment method", "payment_method", "change-funding-source-btn")   ];
if (_byte == undefined || _byte == null) {         throw new Error("Missing the required parameter '_byte' when calling testEndpointParameters");       } Expected an object to be thrown.
$('#channels a.server').live('click', function(event){      self.focusOnServer($(this));          });
})(this);
position: 'absolute',               top: `${cropTop}px`,               transform: [ Unexpected 'this'.
const logger = require('./logger') function separateEnvModule (...args) {   const { server, client,...env } = this.nuxt.options.env Unexpected 'this'.
editIntegration(integrationID) {         return this.shard.client.editGuildIntegration.apply(this.shard.client, this.id, integrationID);     } Use the rest parameters instead of 'arguments'.
function toRegex(...args) {   const str = fill(...args);   return new RegExp('^(' + str + ')$'); Use the rest parameters instead of 'arguments'.
vector: function (x, y) {                            throw new Error("internal error, can't evaluate matrix/vector");                       }, Expected an object to be thrown.
errorCount+=ec;       console.log("found "+errorCount+" errors in child "+child.id);     }else{ Unexpected 'this'.
}   table.render(); Unexpected 'this'.
_.each(this.getReverseRelations(), function(relation) {    relation.addRelated(this.instance, options);   }.bind(this));
test.done();         }; The function binding is unnecessary.
.bind('keydown', function( event ) {     var index;     if ( self.options.disabled ) { Unexpected 'this'.
onBroadcast (callback) {     throw new Error('onBroadcast Not Yet Implemented', 'AbstractOverlay.js');   } Expected an object to be thrown.
args.push(raw);                     self.emit(...args);                 } else { Use the spread operator instead of '.apply()'.
var store = this       this.requestTransaction(function () {         var exeNow = store.listenersByIdExecuteNow Unexpected space before *.
if(!this.queryModel.get('queryText') || isEmpty(fieldNames)) {                     this.model.set('processing', false); Unexpected 'this'.
var util = require('util') var path = require('path') var hotplate = require('hotplate') ',' should be placed last.
Base.call(this, {});             this.initialize(...arguments);         }, Use the rest parameters instead of 'arguments'.
var result = {};             for (var key in obj) {                 if (obj.hasOwnProperty(key)) {                     result[key] = deepWalk(obj[key]);                 }
module.exports = ModelBaseClass;
this.events.addEventType("tileloaded");         this.grid = [];     }, The array literal notation [] is preferable.
this.$from.animationComplete($.proxy(function() {      this.doneOut( screenHeight, reverseClass, none );     }, this));
static createError (name) {     return SuperError.subclass(name)   } Use the rest parameters instead of 'arguments'.
{      options.current.extraParams = eval('(' + id + ')');     } Unexpected 'this'.
this.sections.each(function(section){    if (section.position == 'footer') this.hasFooter = true;    if (section.position == 'headertool') this.options.hasHeaderTool = true;   }.bind(this));
})(this);
if (this.active) {             for(var i in this.handlers) {                 if (this.handlers.hasOwnProperty(i)) {                     this.handlers[i].deactivate();                 }
answer.error = err;             that.eventEmitter.emit("error",asked,answer);         }); Unexpected 'this'.
};   Neatline.commands.setHandler(this.ID+':display', display); }
let last;     for (let i = 0; i < keys.length; i++) {       last = get(keys[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
, Component = require('node-xmpp-component') require('node-xmpp-core').ltx ',' should be placed last.
CrawlGraph.prototype.getAllCrawlers = function () {         var c = [];         for(var key in this.allCrawlers) {             if(!this.allCrawlers.hasOwnProperty(key)) continue;             c.push(this.allCrawlers[key]); The array literal notation [] is preferable.
groups = [];            user['groups'].forEach(function(g){             var gr = yield userManager.getGroup(g); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}     }, _callee5);   })); Unexpected 'this'.
.get('/log/(*)', logAPI.get) const app = Toa(function *() {   var path = this.path Unexpected space before *.
if (!doc.exists) {             throw new Error('Document does not exist!');           } Expected an object to be thrown.
pulse.Metric = function (name, aggregate, rate, groupBy) {  this.tags = {};  this.name = name; The object literal notation {} is preferrable.
it('should clear suggestions', function() {       this.source.andReturn(mockResults);       this.dataset.update('woah'); Unexpected 'this'.
$('#actions input').each(function(i){       if ($(this).is(':checked')) {         actions[i] = $(this).val(); Unexpected 'this'.
}     }, { engine: engineMock });     this.tooltipManager.start(this.layerView); Unexpected 'this'.
var sendOpts = config.app.env === 'production'? {root: 'client', maxage: config.app.cacheTime} : {root: 'client'};   app.use(async function (next) { Unexpected space before *.
this.editMode = false;     this.toolbarButtons = ngWigToolbar.getToolbarButtons(this.buttons);     $attrs.$observe('disabled', function (isDisabled) { Unexpected 'this'.
})     var test = thisFuncs.printf instanceof Function     expect(test).to.be(true)   }) ',' should be placed last.
throw new Error("Illegal state: unexpected event type [" + et + "].");   } Expected an object to be thrown.
} else {           for (param in userAccounts) {             if (userAccounts.hasOwnProperty(param)) {               hasAccount = true;               if (param in svcOptions) {
var match = cache.search(type,+shard,+id);             if (match) result.push(...match);         } Use the spread operator instead of '.apply()'.
removeKeys: function(keys) {     _.each(keys, (key) => {       if (this.get(key)) {         this.get(key).remove(); Unexpected 'this'.
.bind( "blur.button", function() {     focusView.removeClass( focusClass );    }); Unexpected 'this'.
}     text = text + $this.text();     text = text.toLowerCase(); Unexpected 'this'.
function FlowLayoutController(...args) {         BaseLayoutController.apply(this, args); Use the rest parameters instead of 'arguments'.
, $ = require('jquery')  , moment = require('moment'); module.exports = AdminEventEditFormFeedController; ',' should be placed last.
Object.prototype.indexOf = function(key) {     if(!(key in this)) { return 0; } else { return -1; }   };   String.prototype.  should    = nativeShould; Object prototype is read only, properties should not be added.
return gameGroup.addPlayer(player);   }; The function binding is unnecessary.
this.favoriteColors = JSON.parse(colors);     this.updateFastColorPickMenu();     this.setUiColor(rgbaToHex(this.favoriteColors[0].color));   } else { Unexpected 'this'.
} else {     throw new Error('Unable to create route instance: routeClass or viewClass must be defined')   } Expected an object to be thrown.
.on('change.dirty', function () {           var input = $(this),             field = input.closest('.field'), Unexpected 'this'.
selectionUpdated() {     const selection = this.get('_selection');     if(isNone(selection)) { Unexpected 'this'.
, filesize = require('filesize')  , docker = require('../lib/docker.js').docker  , exec = require('child_process').exec ',' should be placed last.
requestToSave = function(request, cb){       var snapshot, ref$, cs;       if (request.is('application/json')) { Unexpected 'this'.
change: function () {     this.set('value', this.$('option:selected').val());   },   initSelected: function () { Unexpected 'this'.
if (MaxSendRate <= 1 && process.env.NODE_ENV === "production") {                 throw new Error('You are currently in Sandbox Mode. Please contact Amazon to get this lifted.');             } Expected an object to be thrown.
this._maxLength = 4;  this.shapes = createSizedArray(this._maxLength); }; Use the spread operator instead of '.apply()'.
function updateSampleKeys(featureList) {     const samples = new Set(this.sampleKeys);     for (let feature of featureList) { Unexpected 'this'.
History.pushQueue({ Use the rest parameters instead of 'arguments'.
} else {         return false;       } Unexpected 'this'.
for (var i = 0; i < srcOutputLoc.length; i++) {         var srcOutputDir = path.resolve(apiOutputDir, srcOutputLoc[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var tmpl = $('#job-template').html()   var from = activePage * perPage   var to = (activePage + 1) * perPage; ',' should be placed last.
updateRepresentations = function(adaptation) {             var reps,                 manifest = manifestModel.getValue(); Unexpected 'this'.
var chunks = getChunks(wordpos, nextcur);       for (var j = 0; j < chunks.length; j++) {         ret.push([word].concat(chunks[j])); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.classList.remove(...ALL_COLOR_CLASSES); Use the spread operator instead of '.apply()'.
this._Width = 0.0;      this._Length = 0;  };
}       return this.base(type, listener, self, capture);     } Use the rest parameters instead of 'arguments'.
var feed = __dirname + '/feeds/complexNamespaceFeed.xml'    , meta = {} ',' should be placed last.
}, promise );     } ) The function binding is unnecessary.
}; Connection.prototype.onclose = function (close) {     EventLogActions.add_event("WebSocket Connection closed.");     console.debug("onclose", close); }; Use the rest parameters instead of 'arguments'.
} catch ( e ) {       throw new Error( 'Cannot setImageData() invalid or no mime' ); Expected an object to be thrown.
this.nextId_ = 1;
class LogView extends React.Component {   constructor(...args) {     super(...args); Use the rest parameters instead of 'arguments'.
vtext.update = function (textValue) {  this.el.textContent = String(textValue); } Use the rest parameters instead of 'arguments'.
insert_text = "{{ " + val + " }}";   tinyMCE.activeEditor.execCommand('mceInsertContent', false, insert_text);   $(this).val(""); };
, Lexer = require ('./lexer')  , splitCharRef = require ('./entities.js').splitCharRef ',' should be placed last.
}).call(this);
alert(err.message)         dispatch(actions.txError(err))         return console.error(err.message) Unexpected 'this'.
for ( var i = 0, l = d.length; i < l; i++ ) {     old["padding" + d[i]] = 0; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
['menuTool', 'picture', 'Basic tool' ],    [ 'disabledMenuTool', 'picture', 'Basic tool disabled', setDisabled ]   ], Unexpected 'this'.
else if (type.call(currentRoute) === STRING) {    var oldRoute = currentRoute;
{ from:"/socket.io ',' should be placed last.
, MediaRow = require('../../../../lib/extension/relatedTables/mediaRow')     , RelatedTablesUtils = require('./relatedTablesUtils') ',' should be placed last.
constructor: function() {             this.processes = [];             this.targets = [];         }, The array literal notation [] is preferable.
const svgSpinner = ({ size }) => {   switch (size) {     case 'large': Unexpected 'this'.
} })(this); Unexpected 'this'.
var ERR_CYCLE = 2; var CSnmpError = function(aMessage, aCode) {   this.message_ = aMessage;   this.code_ = aCode || ERR_OTHER; Unexpected 'this'.
LQ._invokeListeners(eventName, arguments);                                              } else { Use the rest parameters instead of 'arguments'.
var http = require('http')  , res = http.ServerResponse.prototype  , HTTPSServer = express.HTTPSServer  , HTTPServer = express.HTTPServer  , fs = require('fs'); ',' should be placed last.
oldActiveControllers = Array.from(activeControllers.keys());   newActiveControllers = []; The array literal notation [] is preferable.
this.plugin.sendTransfer = (transfer) => {           this.plugin.emit('outgoing_cancel', transfer, {name: 'Foo'})           return Promise.resolve(null)         }
var argsLen = arguments.length;     var selector = arguments[argsLen - 1];     var args = new Array(argsLen);     while (++argsIdx < argsLen) { Use the rest parameters instead of 'arguments'.
Agent.prototype.toString = function toString() {   var agent = this.toAgent();   var os = this.os!== 'Other'? this.os : false; ',' should be placed last.
var lines = this.code.split("\n");   for(var i = 0; i < lines.length; ++i)    lines[i] = lines[i].split(" The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
it('stops event propagation', function (done) {   const naja = this.mockNaja();   new this.RedirectHandler(naja); Unexpected 'this'.
for(var key in copy){         if(!copy.hasOwnProperty(key)) continue;         var item = copy[key]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
_schemas: {},   registerSchema: function(name, schema) {     if(this._schemas[name]) {       throw new Error(`Schema with name "${name}" already exists.`); Unexpected 'this'.
setToolbar: function(){    this.inherited("setToolbar");    var forRef = this.button; Use the rest parameters instead of 'arguments'.
it("should store data", () => {             this.propertyMetadata.schema.exclusiveMaximum.should.eq(10);         });     }); Unexpected 'this'.
this.data = args;
, webui_https_certificate: null           , webui_listen: [] ',' should be placed last.
tr.setZoomAround(interpolate(startZoom, zoom, k), around);             this.animationLoop.set(300);              this.fire('move').fire('zoom'); Unexpected 'this'.
if(resource = bind.getChild("resource", 'urn:ietf:params:xml:ns:xmpp-bind')) {                     self.fullJid = resource.getText();                 } Unexpected 'this'.
for (i = keys.length - 1; i >= 0; i--) {                 id = keys[i];                 model = this.editCollection.get(id); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (parent_rows.some(function(parent_row){ return!parent_row.ball; }))       throw new Error("some parents have no balls");      if (parent_rows.length > 0) Expected an object to be thrown.
if (!(tx instanceof Transaction)) {             throw new Error('Can only inherit transactions');         } Expected an object to be thrown.
async function waitForDomains (context, heroku) {   function someNull (domains) { Unexpected space before *.
it('can handle MACSTRING in Central European encoding', function() {         var encoding = String('x-mac-ce');         var data = '42 65 74 F5 74 92 70 75 73'; Do not use String as a constructor.
if (!stat.isFile()) {                 throw(new Error("Source file not found: "+files[i]));             } Expected an object to be thrown.
queue.forEach(function(func) {       if (func) func(err);     });     self.commit(); Unexpected 'this'.
table.push(header)   table.push(...rows)   return table.toString() Use the spread operator instead of '.apply()'.
})(enyo); Unexpected 'this'.
}      var objectSize = size(object.getBounds());     function scale(size, value) { Unexpected 'this'.
it('should allow arguments to be passed on initialization', function(done) {    suspend(function* (foo) {     assert.strictEqual(foo, 'bar'); Missing space after *.
return handle(trackingInfo, options,...toDecorate);   }; Use the spread operator instead of '.apply()'.
$("button[value='Lodge Request']").html("Lodge Request").attr("class", "button").css("font-weight", "bold").on('click', function() {    var requestBody = {};    var time = Date.now(); The object literal notation {} is preferrable.
window.sim = sim; function createCube(device) {   const geometry = new THREE.BoxGeometry(10, 10, 50); Use the rest parameters instead of 'arguments'.
once() {     var now = Date.now();
} var debugFlag = argv['debug'] == true; Unexpected 'this'.
} function Controller ($state) {     let vm = this;     vm.dismiss = dismiss.bind(vm, $state); Unexpected 'this'.
var http = require('http') var request = require('../index') var tape = require('tape') ',' should be placed last.
} catch(e) {                     throw new Error("Unable to run getValueSync because allowSync was set back to false by when get method executed synchronously within a selector function.");                 } Expected an object to be thrown.
(function(){    if ( document.readyState!= "loaded" && document.readyState!= "complete" ) {     setTimeout(checkDomLoadedWK, 0 );     return; Avoid arguments.callee.
map: function map() {     return this.interpolate(...arguments);   } Use the spread operator instead of '.apply()'.
function Runic(lines = [],templater = null) {
const workshopper = require('../') const path = require('path') workshopper({ ',' should be placed last.
}).call(this);
var data = jwtutil.decode(req.query.jwt, options.secret)       var redir = urlutil.removeParam(req.url, 'jwt')       if (data) { ',' should be placed last.
var proxyquire =  require('proxyquireify')(require)  , stats      =  require('./fixtures/stats') ',' should be placed last.
DAO.prototype.equalsOneOf = function(others) {     var result = false;     others.forEach(function(other) { result = result || self.equals(other) }) ',' should be placed last.
'stream error',         args,         new Date().toDateString() Use the rest parameters instead of 'arguments'.
.val();      var projects = [];      $('input:checkbox[name="project"]:checked').each(function() { The array literal notation [] is preferable.
var ROOT = __dirname + '/dump';   describe('init', function() { Unexpected 'this'.
for (var i = 0, len = args.length; i < len; i++) {       for (var k in args[i]) {         if (args[i].hasOwnProperty(k)) {           dest[k] = args[i][k];         }
if (data) {   if (typeof data[method] === 'function')    data[method].apply(this, args); Use the rest parameters instead of 'arguments'.
var virtualList = ctrls[1];
this.AlertService = $injector.get('AlertService');     this.HostHistoryService = $injector.get('HostHistoryService');
var config = byPath[file]         var transformed = config? wrap(content, config) : content; ',' should be placed last.
if (fallbackChain) {         this.freeze(fallbackChain);       }
push: function() {    this.line.push(...arguments);   }, Use the rest parameters instead of 'arguments'.
let fnString = fn.toString();     fnString = `(${fnString}).apply(window, ` +                            JSON.stringify(args) + ')';     this.sendToWindow(windowID, 'execute', { Use the rest parameters instead of 'arguments'.
case 'LINK':       return resolve(elm, 'href');     case 'OBJECT': Unexpected 'this'.
if (typeof options!== 'object') {             throw new Error('AV.realtime need a argument at least.');         } Expected an object to be thrown.
var matrix = renderer.getZoomMatrix(scale, origin);         renderer.transform(matrix);         Z.DomUtil.preventDefault(event); Use the spread operator instead of '.apply()'.
, viewportH = makeViewportGetter('height', 'innerHeight', 'clientHeight')      , xports = {}; ',' should be placed last.
case 'ReferenceError':                 $consoler.warn(e.message + __$expression__)                 break Use the rest parameters instead of 'arguments'.
clearInterval(interval);   update(options[selectedIndex]); } Unexpected 'this'.
calculateATR(rawData.D, period);  var brickSize = function (d) { return d["atr" + period]}  var renkoData = [];  var index = 0, prevBrickClose = rawData.D[index].open, prevBrickOpen = rawData.D[index].open; The array literal notation [] is preferable.
var http = require('http') var request = require('../index') var tape = require('tape') var port1 ',' should be placed last.
Vue.filter('date', function(date, format) {         return this.$date(date, evalExp(format));     }); Unexpected 'this'.
}         callback && callback(this);     }); Unexpected 'this'.
this.__scheme = null;     return Process.prototype.destroy.call(this, options);   }; Use the rest parameters instead of 'arguments'.
return function (_x6) {                     return _ref4.apply(this, arguments);                 }; Unexpected 'this'.
var id = (+new Date());         div.innerHTML = this.elements[index].value;         div.setAttribute('data-textarea', id); Unexpected 'this'.
, request = require('supertest') should be placed last.
if (!modelIsAlreadyInDataTable) {                 var model = {};                 model.id = parsedObject.offering_id; The object literal notation {} is preferrable.
clone: function () {       return new SVG.Matrix(this) ',' should be placed last.
function materialize_String(obj, args) {    return args && String(args[0]);   } Do not use String as a constructor.
return (function fn(node_data,node_descriptor){     var type = typeof node_data;     if(node_data instanceof Array) { ',' should be placed last.
const tab = "  ";      Object.keys(libs).forEach((dep) => {     const { props, ident } = libs[dep]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var idx_selected = _.filter(indices, function(index) {             var elem = that.model.mark_data[index];                 return (elem[0] >= min && elem[0] <= max); Unexpected 'this'.
if (this.blocks!== null) {             for (let blockIndex in this.blocks) {                 if (this.blocks.hasOwnProperty(blockIndex)) {                     this.blocks[blockIndex].destroy()                 }
, debug = require('debug')('collection')  , Script = require('../../script'); ',' should be placed last.
const startTime = Date.now();       promiseFunc(...args)      .then(returnValue => { Unexpected 'this'.
}       throw new Error(`Unsupported logic operation: ${obj.operator}`); Expected an object to be thrown.
let readyTimeOut = null; var pageLoaded = true; Recorder.addEventHandler("checkPageLoaded", "readystatechange", function() {   let self = this;   if (window.document.readyState === "loading") { Unexpected 'this'.
}, this);                 this.__workspaceMB.setMenu(menu);
scheduleAfterRender: function () {         Ember.run.scheduleOnce('afterRender', this, this.afterRenderEvent);     }.on('didInsertElement'),
showError: function() {         var $error = $(this.refs.error.getDOMNode());         if (!$error.is(":visible")) { Unexpected 'this'.
}).call(this);
function echoSingle(a) {                 return a;             } Use the rest parameters instead of 'arguments'.
chunkTemplate.plugin("render", function(modules, chunk) {    var jsonpFunction = this.outputOptions.jsonpFunction || Template.toIdentifier("webpackJsonp");    var source = new ConcatSource(); Unexpected 'this'.
} else {     throw new Error('A container must be provided.');    } Expected an object to be thrown.
uploadcare.jQuery(uploadcare).on('log.uploadcare', function(e, args){         console.log(args);     }); Use the spread operator instead of '.apply()'.
target instanceof State ||                     ( target = target? origin.query( target ) : this.root() );                 if (!target || Unexpected 'this'.
executeFromRest.call(kuzzle, params, request, response);     });     api.post('/:collection', function (request, response) { The function binding is unnecessary.
this.loadInitalAnalyses = function () {       var analyses = self.seedAnalyses(state.tokens);
, DocumentObjectId = mongoose.Types.ObjectId  , MongooseArray = mongoose.Types.Array; ',' should be placed last.
export default curry3(function mergeWith(cb, result) {   var rightIndex = 2;   while (rightIndex < arguments.length) {     result = _merge(result, arguments[rightIndex++], cb);   } Use the rest parameters instead of 'arguments'.
import { filter, map, distinctUntilChanged } from 'rxjs/operators';
constructor: function ColumnModel(...args) {             ColumnModel.__super__.constructor.apply(this, args);         } Use the rest parameters instead of 'arguments'.
this.screwunit = function(params) {         params = params? params : {};
util.log('Get Topic List for: '+this.id);     clients[this.id].socket.emit('topic', 'xxx:yyy');     getSomeTopics(clients[this.id].socket); };
var me = this;             this.inherited(arguments, [id]).then(function (item) {                 if (Array.isArray(item)) { Use the rest parameters instead of 'arguments'.
const ValidatingCreateMixin = Mixin.create({   create(...args) {     const instance = this._super.apply(this, args); Use the spread operator instead of '.apply()'.
await this.crowdsale.sendTransaction({value: ether(1), from: investor, gasPrice: 0});     await increaseTime(moment.duration(1.1, 'week')); Unexpected 'this'.
if (isPlainObj(key)) {             for (var k in key) {                if (key.hasOwnProperty(k)) {                     this.set(k, key[k]);                 }
'use strict';
if (t.merged) {     throw new Error('!!!!')   } Expected an object to be thrown.
function updateLocation(view, destination, skipPush) {         if (typeof destination.length!== "number") throw new Error("Destination needs to be string or array"); Expected an object to be thrown.
var htmlReason = $reasonContent.find('.reason-content');                 htmlReason.find('select, input, textarea').each(function () { Unexpected 'this'.
['ii'].forEach(function(sig) {          tables[sig] = zeros(t.nextIndex);        }); Unexpected 'this'.
describe("concat", function() {   it("should concat 2 ports", async function() {     let result = []; Unexpected space before *.
if(map) {    for(var key in map.properties) {     if(map.properties.hasOwnProperty(key)) {      var prop = map.properties[key],       propName = (prop.map)? prop.map : 'p-' + key,
if (this.options == null) {             this.options = {};         } The object literal notation {} is preferrable.
}  , is_safari = /Version\/[\d.]+.*Safari/.test(navigator.userAgent)  , req_fs = view.requestFileSystem || view.mozRequestFileSystem  , throw_outside = function(ex) { ',' should be placed last.
this.connect = connect;     function connect(options) { Unexpected 'this'.
$(this).closest('.accordion-child').next('.accordion-child').find('input:visible:first').focus();       }
}, this);     p.centroid.x = this._roundNumber(p.centroid.x, 2);     p.centroid.y = this._roundNumber(p.centroid.y, 2); Unexpected 'this'.
if (__indexOf.call(invalidDirs, dir) >= 0) {       throw new Error("Load path not found for " + filename);     }     id = filename.replace("" + dir + sep, ''); Expected an object to be thrown.
this.markers = null;
ProxyClass.prototype[prop] = function() {         return promisifyCursorRequest(this[targetProp][prop](...arguments));       }; Use the spread operator instead of '.apply()'.
}   trigger(...args) {     this._array.forEach(widget => widget.trigger(...args));     return this; Use the spread operator instead of '.apply()'.
ret = [];             for(key in val){                 if(val.hasOwnProperty(key)) {                     ret.push( val[key] );                 }
'weekday' : $(this).index() + self.options.startIn,         'weekdayname' : self.options.weeks[($(this).index() == 6? 0 : $(this).index() + self.options.startIn)],         'data' : data;
function checkOneFile(i, callback) { Unexpected 'this'.
if(opts.noRecord) {           throw new Error('RECORDING_DISABLED');         } else { Expected an object to be thrown.
const createJsFileIfNotExist = co.wrap(function *(opts, playground) {   return yield createAssetFileIfNotExist(opts, playground, 'js', co.wrap(function (ext) {     return 'console.log(\'Hello\')'; Missing space after *.
, serveStatic = require('serve-static')  , send = require('connect-send-json') ',' should be placed last.
, MaxKey = require('./max_key').MaxKey  , DBRef = require('./db_ref').DBRef  , Binary = require('./binary').Binary; ',' should be placed last.
process = null;                 callback();             }); Unexpected 'this'.
if (includes(methods, 'chain')) {           throw new Error('Chaining syntax is not yet supported');         } Expected an object to be thrown.
} else {     throw new Error("Parent node of dropdown menu not found");    } Expected an object to be thrown.
for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {     tail = re.slice(pl.reStart + pl.open.length)     this.debug('setting tail', re, pl) Unexpected 'this'.
})    .catch(this.base._handleError.bind(this.base, req, res, rdrUrl)); };
className: className,           disableTouchRipple: true,           disableFocusRipple: true, ',' should be placed last.
thisZoo                        .children('.zoo-img') Unexpected 'this'.
let customMixins = {};   if (this.context && this.context.mixins) {     customMixins = this.context.mixins; Unexpected 'this'.
return function (name, oldValue, newValue) {       var info = data(this);       var attributeToPropertyMap = info.attributeToPropertyMap || {}; Unexpected 'this'.
this._prepareOn(name, handler, context);     Events.on.apply(this, [name, handler, context]);     return this; Use the rest parameters instead of 'arguments'.
if (cb) {                         cb(err, arg1, arg2, arg3);                     }                 }); Use the rest parameters instead of 'arguments'.
enabled: true,         email: '',         displayname: this.socialUserInfo.screen_name, Unexpected 'this'.
$(this).removeClass('on');   $(this).siblings(".current-menu-item").css("background-color","#f00").children().css("color","#fff"); };
export const downloadImage = (url) => dispatch => {     if (!url) throw new Error("Cannot have null url");     dispatch({ Expected an object to be thrown.
var prefix = '# Do not edit. File was generated by node-gyp\'s "configure" step'     var json = JSON.stringify(config, boolsToString, 2)     log.verbose('build/' + configFilename, 'writing out config file: %s', configPath) ',' should be placed last.
var self = this;     Sandbox.call(self, options);     self.loadListeners = []; Use the rest parameters instead of 'arguments'.
} else {             throw Error('Sketch File Not Found:'+ file);         } Expected an object to be thrown.
var self = this;         this.backend.stub            .post('/') Unexpected 'this'.
if(err){                 callback(err);             } Unexpected 'this'.
if (input.view && input.view.$input) {             this.$inputList.append( input.view.$input );           }
if (tapable.hooks) {     const hook = tapable.hooks[name];     return hook.call(...args);   } Use the spread operator instead of '.apply()'.
for (var i = 1; i < arguments.length - 2; i++) {               if(isUndefined(value)) {                 match[i] = Undefined;               } Use the rest parameters instead of 'arguments'.
if (errors) {                 for (var i = 0; i < errors.length; i++) {                     toastr.warning(errors[i], "Não foi possível prosseguir devido a um erro.");                 } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
batch = paths.slice(complete, complete + concurrency);     files.push(...batch.map(read));     complete += concurrency; Use the spread operator instead of '.apply()'.
if ( $container.length === 0 ) {             throw new Error( "No container for ProductMap: " + containerId );         } Expected an object to be thrown.
_setView: _.debounce(function () {     if (this.map.hasChanged('zoom') || this.map.hasChanged('center')) {       this._leafletMap.flyTo(this.map.get('center'), this.map.get('zoom') || 0); Unexpected 'this'.
onValueChange: this.setValue,           onPanelChange: this.handlePanelChange         }) ',' should be placed last.
it.each(_.range(0, dispatches), "dispatch %s", ['element'], function (element, next) {             this.timeout(constants.timeout);             Augur.dispatch({ Unexpected 'this'.
function ZscElement(nm, abi, adr) {     this.name = nm;     this.parameNos = 0; Unexpected 'this'.
, logErrorFile = path.join(logDir, appName + '-errors.json')  , logLevel = settings.logs.level || 'debug'  , port = settings.server.port || 8000; ',' should be placed last.
function MeasureArea(format, gettextCatalog, options = ({})) {   ngeoInteractionMeasure.call(this,  (options));   if (options.continueMsg!== undefined) { Unexpected 'this'.
default:         throw new Error("Unknown brush predicate " + __.brushPredicate);       } Expected an object to be thrown.
document.body.style.cursor = 'pointer';   this.getLayer().draw();  }
var size = this.headerLength.map(function(length){                 return _outputSize.call(this, length);             }.bind(this));             var layoutNode = new LayoutNode({size : size});
var log = logger.createLogger('storage:s3')   var app = express()   var server = http.createServer(app) ',' should be placed last.
, cloneDeep = require('./util/clone')  , has = require('./util/has'); ',' should be placed last.
}; }).call(undefined); Unexpected 'this'.
if (arguments.length!= param_length) {                 throw new Error("expected " + param_length + " arguments, got "                     + arguments.length + " instead.");             } Expected an object to be thrown.
return compute.sequence(         func.createConstructor('String', 1, string_ref.StringPrototype, string_ref.String.setValue(String)), Do not use String as a constructor.
var samplers = {};     for(var i = 0, l = this.properties.length; i < l; ++i)   { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.metadataRaw = metadataRaw;    this.streamMetadataRaw = streamMetadataRaw;    this.linkMetadataRaw = linkMetadataRaw;    this.partition = partition;
function ParticleEmitter() {                     this.particlesPool = [];                     this.activeParticles = [];                     this.container = new createjs.Container(); The array literal notation [] is preferable.
for (device in state) {                 if (state.hasOwnProperty(device)) {                     SB.spec.updateTemplate(state[device]);                 }
);    return invoke(fn, params);   }; Use the spread operator instead of '.apply()'.
if (position + 8 > byteArray.length) {       throw new Error('bigEndianByteArrayParser.readDouble: attempt to read past end of buffer');     } Expected an object to be thrown.
, changed   = require('gulp-changed'), lesshint  = require('gulp-lesshint') ',' should be placed last.
return (   this.ua.satisfies(...arguments) &&   this.ua.family in baseLineVersions && Use the spread operator instead of '.apply()'.
fill_table(datasets, ["date_created"], table);             table.children("tbody").find("tr").on("click", function () { select ($(this)); });
args = args || [];         if (!hop.call(args, 'length') || args.length > 4) {             throw new Error('invalid `sx.parent` call, should receive arguments as array'); Use the rest parameters instead of 'arguments'.
expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty({foo: 1})).toBe(false);       const array = [];       array.push('1'); The array literal notation [] is preferable.
var matcha = require('matcha') var Seed = require('../lib/seed') ',' should be placed last.
: parentSize;                 },                 [object, this.size] The function binding is unnecessary.
this.doc = document;
console.error('An error occurred compiling the shaders:'+ gl.getShaderInfoLog(vertShader));     throw new Error('Error compiling vertex shader');    } Expected an object to be thrown.
if (!prototypeOfArray.indexOf) {     prototypeOfArray.indexOf = function indexOf(sought  ) {         if (this === void 0 || this === null) Array prototype is read only, properties should not be added.
var test = require('../../../test')   require.async('./a', function(a) { Unexpected 'this'.
jQuery.readyList.push( function() { return fn(jQuery); } );
var human = require('pretty-hrtime') var env = require('env-variable') var Stream = require('stream') ',' should be placed last.
if (argument) {         for (var key in argument) {           if (argument.hasOwnProperty(key)) {             newOptions[key] = argument[key];           }
Blockly.FieldDropdown.validateOptions_ = function(options) {   if (!goog.isArray(options)) {     throw Error('FieldDropdown options must be an array.');   } Expected an object to be thrown.
input.addEventListener("blur", function() {                      focus(this); Unexpected 'this'.
var keys = [],             bindings = Bindings(this);         for (var k in bindings) {             if (bindings.hasOwnProperty(k)) {                 this.unbind(k);             }
try {         return [null, util.immutable(eval('with($scope){(%s)}'.replace('%s', arguments[1]))];     } catch (e) { Use the rest parameters instead of 'arguments'.
} })(); Unexpected 'this'.
.then(metadata => {           Object.keys(metadata).forEach(key => {             this.props.owner().addMetadata(key, metadata[key]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}).item(0).data('index');         }         if (!index ||!this.tabs[index]) {             index = 0;         } Unexpected 'this'.
, { carrier : 'UPS', trackingNumber : '123453423453' } , function (err, xml) {   console.log(xml);  } Use the rest parameters instead of 'arguments'.
var reThis = /\bthis\b/; Unexpected 'this'.
'use strict' var request = require('../index') var tape = require('tape') var local = 'http: ',' should be placed last.
var fs        = require('fs')  , sylvester = require('sylvester'); ',' should be placed last.
{             $link.dblclick(function()             { Unexpected 'this'.
describe('the "___" should be displayed', function() {
});       openRequest.onsuccess = function (event) { this.log('Success handler for open request called.');         this.db = event.target.result; Unexpected 'this'.
var correct = loadable instanceof this.vie.Loadable;         if (!correct) {throw new Error("Invalid Loadable passed");} Expected an object to be thrown.
return first(function() {         if (classList.contains(name)) return this.classList.contains(name);         re.lastIndex = 0; Unexpected 'this'.
});       return Falcon.__binding__original_component__['init'].apply(this, [name].concat(args));     } Use the rest parameters instead of 'arguments'.
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "STS", Array.slice(arguments));   }, Use the rest parameters instead of 'arguments'.
function TCP(){   this.name = NAME;   this.bytes = 20; Unexpected 'this'.
var self = this,    args = arguments.length === 1? [] : _argToArr(arguments);   _later(function () { Use the rest parameters instead of 'arguments'.
Template.apply(this, arguments);   Composer.call(this,'verb'); } Use the rest parameters instead of 'arguments'.
if(!window.SyntaxHighlighter){var SyntaxHighlighter=function(){var a={defaults:{"class-name":"","first-line":1,highlight:null,"smart-tabs":true,"tab-size":4,ruler:false,gutter:true,toolbar:true,collapse:false,"auto-links":true,light:false,"wrap-lines":true},config:{clipboardSwf:null,toolbarItemWidth:16,toolbarItemHeight:16,bloggerMode:false,stripBrs:false,tagName:"pre",strings:{expandSource:"expand source",viewSource:"view source",copyToClipboard:"copy to clipboard",copyToClipboardConfirmation:"The code is in your clipboard now",print:"print",help:"?",alert:"SyntaxHighlighter\n\n",noBrush:"Can't find brush for: ",brushNotHtmlScript:"Brush wasn't configured for html-script option: ",aboutDialog:'<!DOCTYPE html PUBLIC "-
} }(this, function(ApiClient) {   'use strict'; Unexpected 'this'.
default:                     return '$'+Numbas.jme.display.texify({tok:this.value()})+'$';     } Unexpected 'this'.
this.setPointsLengths = [];
if(select_map){         for(var i = 0; i < data.length; i++){           var r = {}; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
valid(value) {       return value!== null && value!== undefined && String(value).length > 0;     }, Do not use String as a constructor.
if (!((callbackInterface!= null) && callbackInterface)) {                 throw new Error("Internal error: unable to resolve observer ID to obtain callback interface.");               } Expected an object to be thrown.
}         console.log(...args);     } Use the spread operator instead of '.apply()'.
NIN.THREENode = THREENode; })(this);
class MesosLogStore extends BaseStore {   constructor(...args) {     super(...args);     this.logs = {}; Use the rest parameters instead of 'arguments'.
constructor(width, height, world) {     super.constructor(width, height);'super' is not allowed before'super()'.
dispatcher.trigger(dispatcher.CLEAR_TODOS);     };   } The function binding is unnecessary.
}).call(this);
} else if (trigger.attr('href')) {                     that.route = trigger.attr('href');                 } Unexpected 'this'.
'sessionInvalidationFailed'   ]).forEach(function(event) {     session.on(event, function(error) {       router.send(event, error);     }); Use the rest parameters instead of 'arguments'.
var model = params.db.models.AccountScheduleCalendar;   model.find({ account: this.account }).sort('from').exec(function(err, acEntries) {    if(err) { Unexpected 'this'.
} else {       throw new Error("wat?!")     } Expected an object to be thrown.
url,         args: _larouxHelpersJs2['default'].toArray(arguments),         aborted: false Use the rest parameters instead of 'arguments'.
var pkg = require('./package.json')    , webpack = require('webpack') ',' should be placed last.
onKeyError(this._ss)       );     }), Unexpected 'this'.
this.model.reportCohortDefinitionId.subscribe(function (d) {     if (this.cohortCaption) {      this.cohortCaption(pageModel.cohortDefinitions() Unexpected 'this'.
onSortChange: function() {             Garnish.requestAnimationFrame(function() {                 this.trigger('sortChange');                 this.settings.onSortChange(); Unexpected 'this'.
NOVAE.evaluateFormula = function(formula, index) {     var interpret = ENGEL.interpretTokens(formula.tokens.slice(0)); Use the rest parameters instead of 'arguments'.
var model = require('../../index')  , mongo  , operation = require('../../query/operation') ',' should be placed last.
var args = Constructor.setup.apply(Constructor, [_super_class].concat(args) ); Use the spread operator instead of '.apply()'.
{         var matched = [],             i = 0; The array literal notation [] is preferable.
ResourceDeployer.prototype._updateStack = function() {   var _this = this; Unexpected 'this'.
done(false);         config.callback(err);         return self.emit('error', err);       }
} else {                 videoElement.addEventListener("loadedmetadata", doSetKeys);             } Unexpected 'this'.
, d         = require('es5-ext/lib/Object/descriptor')  , contains  = require('es5-ext/lib/String/prototype/contains') ',' should be placed last.
if (doAction!= 'null' && doAction!= '') { Unexpected 'this'.
this._fireQueuedEvents();      throw new Error('Mapstraction.getPixelRatio is not currently supported by provider'+ this.api);   }, Expected an object to be thrown.
realm.write(function() {             that.list = realm.create('TodoList', ['List', []]);           }); Unexpected 'this'.
var qty = newVal;             var cost = parseFloat($(this).attr('data-cost'));                          if(qty > 0){ Unexpected 'this'.
function meta_objs() {  const {classes} = this;  class MetaObjManager extends CatManager { Unexpected 'this'.
module.exports = version var semver = require("semver")  , path = require("path") ',' should be placed last.
, feature = require(BASE_PATH + 'feature')   , filter = require(BASE_PATH + 'ansi')   , logging = require(BASE_PATH + 'logging') ',' should be placed last.
if (iemobile || iphone) {                                     var that = this;                                     return setTimeout(function() { Unexpected 'this'.
case 5:  return t[m](a[0], a[1], a[2], a[3], a[4]);     default: return t[m](...a);   } Use the spread operator instead of '.apply()'.
Y.fire("gameJoined", {                             gameId: this.getTargetGame().get("id")                         }); Unexpected 'this'.
}       postMessage(this, 'getHeight');     };
if (! condition.name ||! condition.operator ||! condition.value ) {    throw new ve.Error('missing required parameter to build a condition' )   } Expected an object to be thrown.
, promise = new Promise(this.collection, operation)      , original_cb = args[args.length - 1]; ',' should be placed last.
if (filter === 'false') {                      isShow = that.$grid.find('.instance-adapter[data-instance-id="' + that.list[i] + '"]').find('instance-led').hasClass('led-green')? 'hide' :'show';                  } Unexpected 'this'.
namespaceMoveContext(newContext, removeFromOld) {         throw new Error(`Method namespaceMoveContext() is deprecated.`);     }, Use the spread operator instead of '.apply()'.
this.hightDirty = false;     this.lockedResources = []; } The array literal notation [] is preferable.
class ABSTRACT {   static toString(...args) {     const instance = new this();     return instance.toString(...args);   } Use the spread operator instead of '.apply()'.
, url = require('url') , mime = require('mime') ',' should be placed last.
var gamelogs = [];  for(var i = 0; i < logs.length; i++) {   var log = logs[i];   gamelogs.push({ The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.description = description || "";             this.required = [];             this.enum = null;             this.type = type || ""; The array literal notation [] is preferable.
var aEditors = [];     for (var i=0; i<aEditorIds.length; i++)         aEditors.push(tinymce.get(aEditorIds[i])); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (conf.bLight &&!lightProps)   throw new Error("no parent props for light"); Expected an object to be thrown.
if (this.depth2)   this._link2 = linkDataSource('_link1', this.ds2, this.ds1, subscriptionPath, this.pathTranslation2, this.pathTranslation1, this.dataTranslation2, this.dataValidation2);  this.isOn = true; Unexpected 'this'.
var setup = require("../../common/setup-base")  , desired = require("./desired"); describe("apidemos - push & pull file -", function () { ',' should be placed last.
var rowIds = $(this).sortable('toArray');     var newIdSequence = []; The array literal notation [] is preferable.
})().caught(noop);         return onUnhandledFail(testFunction);     }); Avoid arguments.callee.
for (var key in compiledPartials) {         if (compiledPartials.hasOwnProperty(key)) {           hb.registerPartial(key, compiledPartials[key]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var fail = function fail(location, msg) {    var err = new Error(msg);    err.name = 'AssertError'; Use the rest parameters instead of 'arguments'.
}    this.own(this.binder.create(this, this, "beforeEnd"));    forEach.call(this.querySelectorAll("[data-attach-point]"), function (elem) { Unexpected 'this'.
this.data = {};   this.parsePropCount = 0;   this.PDFJS.on("pdfjs_parseDataReady", _onPDFJSParseDataReady); Unexpected 'this'.
me._proxy = proxy   ; [ "error"    , "close" ',' should be placed last.
}       for (var i = 0; i < request.result.length; i++) {         var contactToRender = request.result[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
module.exports = function type (filepath, isRoot, rootType, fileExtensions) {  var mixed = intersection(fileExtensions.js, fileExtensions.html)  , isMixed = ~mixed.indexOf(ext); ',' should be placed last.
if (this.axisMeshes) {             _.each(this.axisMeshes, function removeAxisMesh(mesh) {                 this.scene.remove(mesh);             }.bind(this));         } Unexpected 'this'.
}),   _directUpload(blob, url) {     debug(`ActiveStorage: _directUpload ${blob} to url ${url}`) Unexpected space before *.
} else {                 throw new Error(`data type with code: ${$stateParams.code} not found`);             } Expected an object to be thrown.
appendChild: function() {     throw new Error("You can't use appendChild outside of the rendering process");   }, Expected an object to be thrown.
decimal: function(field, value, params) {       var regex = /^\-?[0-9]*\.?[0-9]+$/;       return regex.test(value); ',' should be placed last.
var bookCheckBoxes = document.querySelectorAll(".bookCheckout");             for (var checkIndex = 0; checkIndex < bookCheckBoxes.length; checkIndex++) {                 bookCheckBoxes[checkIndex].onclick = toggleCheckout; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
it('testElementIdClear invalid element ID', function () {     return Globals.protocolTest({       commandName: 'elementIdClear', Unexpected 'this'.
log(...args) {     return console.log(...args);   }, Use the spread operator instead of '.apply()'.
Template.sidebarItem.onCreated(function() {    }); Unexpected 'this'.
, parse = require('url').parse  , utils = require('./utils'); ',' should be placed last.
if ( abs(p) < abs(pLast) ) converging = true;       if ( i > terms ) throw Error( 'Not converging after'+ terms +'terms' ); Expected an object to be thrown.
return (dispatch) => {     dispatch(actions.showLoadingIndication())     _accountManager.recoverFromSeed(password, seed, (err, metamaskState) => { Unexpected 'this'.
function insert(key, value, Node) {   let root = this.root; Unexpected 'this'.
.on('focus', function() {     Unexpected 'this'.
} else {     this.listeners[type].push(fn)   }
if (options.events) {         for (var e in options.events) {           var keys = e.match(/\S+/g); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var slice = Array.prototype.slice
takeSnapshot: function(name, control) {     var snapshot = binding.heap.takeSnapshot(name, control);     snapshot.__proto__ = Snapshot.prototype; Use the rest parameters instead of 'arguments'.
} else {       throw new Error('未获取到图表实例元素');     } Expected an object to be thrown.
before(function () {     Globals.protocolBefore();   }); Unexpected 'this'.
if(notif == null || notif == undefined) {                 notif = {};             } The object literal notation {} is preferrable.
var output = [];           for(i = 0; i < funcHandlers.length; i++) {             output[i] = funcHandlers[i](fqn, value); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
});         for (var _i4 = 0; _i4 < holes.length; _i4++) {             pathHelper.displaceColinearEdges(outerShape.path, holes[_i4].path); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var trackPlugins = paella.editor.pluginManager.trackPlugins;   for (var i=0; i<trackPlugins.length; ++i) {    var plugin = trackPlugins[i];    var label = plugin.getTrackName(); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
, setGitRev = gruntHelpers.setGitRev  , getGitRev = require('./lib/helpers').getGitRev; ',' should be placed last.
{   for(var i = 0, l = this.properties.length; i < l; ++i)   { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
describe('94.binding_procedureBindInout.js', function() {   var connection = null; Unexpected 'this'.
if (inst) {         throw new Error('player has already joined'+ inst.gameID);       } Expected an object to be thrown.
afterEach(stopTracking);   it('should send events on outbound link clicks', function() {     var hitData = browser        .execute(utilities.stopLinkClickEvents) Unexpected space before *.
return this._head!= null? this._head : String ( "" );  } Do not use String as a constructor.
export default async function handleError(ctx, next) {   try { Unexpected space before *.
var tmpTranslate = [1, 0, 0, 1, -topLeft[0], -topLeft[1]];       graphics.transform(tmpTranslate);       this.clipBbox(graphics, bbox, x0, y0, x1, y1); Use the spread operator instead of '.apply()'.
this.label.refresh(display)   }   getMarkerBBox () {     return this.markerSvg.node().getBBox() Unexpected 'this'.
nextItemIndex = this.indexOf(this.findWhere({ active: true })) + 1;                     if (nextItemIndex <= 0) throw new Error("Failed to find nextItemIndex");                 } Expected an object to be thrown.
var adminRole = {};       for (var roleName in access.roles) {         if (access.roles.hasOwnProperty(roleName)) {           var role = access.roles[roleName];           if (role.default) {
constructor(value) {     return isIterable(value)? value : Seq(value);   } Use the spread operator instead of '.apply()'.
this.mywords = this.getMnemonic();   };
}).call(this);
function resolve() {
}     function setOptions(options){         if (typeof this.bind == "function") { Use the rest parameters instead of 'arguments'.
var _ = require('lodash') var program = require('commander') ',' should be placed last.
var id;         assert("context is already connected", this.client.connected);         id = this.client.subscribe(destination, function(frame) {           var envelope; Unexpected 'this'.
init() {     let self = this;     chrome.devtools.network.onNavigated.addListener(function() { Unexpected 'this'.
if (!fs.existsSync(path.join(project, 'AndroidManifest.xml'))) {         throw new Error('The provided path "' + project + '" is not an Android project.');     } Expected an object to be thrown.
function ICMPV6() {   this.name = NAME;   this.bytes = 4; Unexpected 'this'.
}     unbind(element, "blur", focus);    }); Avoid focus.
this.metabolites = utils.clone(model_data.metabolites);  add_bigg_id_attribute(this.reactions);  separate_compartments(this.metabolites); Unexpected 'this'.
console.log("Dash channel opened.");                 broadcast.call(that, {                    event: "ready" Unexpected 'this'.
scrollTo(( eases[index] * targetY * dirY) + offsetY);       }
var utils = require('../../utils') var Cookie = require('./cookie') ',' should be placed last.
},   file: function(filename) {     return Package._getByPath(resolve(filename));   }, Use the rest parameters instead of 'arguments'.
if (typeof program.project!=='string') {     this.consoleWarn('You didn\'t mention any particular name, please configure --project <your_project_name> in your command');     return;
forEach(children, function (child) {                   set(child, foreignKey, definition.idAttribute)                 }) Unexpected 'this'.
})(this); Unexpected 'this'.
global.Array.prototype.diff = function (a) {   return this.filter(function (i) {     return a.indexOf(i) < 0;   }); Array prototype is read only, properties should not be added.
}       this.animate(new Follow(this.insertedSprites[0], { source: move }));     } else {
var limit = function (...args) {                 limitRange = args.slice(0, 2);                 if (limitRange.length === 1) { Use the rest parameters instead of 'arguments'.
});         it("should be node::Buffer io for double rank data", function(done) {             const buffer=Buffer.alloc(6*8, "binary"); Missing space after *.
,fs = require('fs'),local = {  siteName: 'jadepress' ',' should be placed last.
_VisualTreeWalker.prototype = new RefObject;  _VisualTreeWalker.prototype.constructor = _VisualTreeWalker; The object literal notation {} is preferrable.
}                 that.emit(that.v[1] < 15? "selectable.init" : "init");             }, 10); Unexpected 'this'.
hmac = this._digest(this.secret, ct.ct, this.hashing, this.encodeas)     if (hmac!= ct.hmac) {       throw new Error('Encrypted session was tampered with!')     } Expected an object to be thrown.
this.classList.remove(...ALL_VARIANT_CLASSES); Use the spread operator instead of '.apply()'.
var model = observer[0]       var eventMap = observer[1]       for (var event in eventMap){ ',' should be placed last.
var pathParams = {};   for(var key in pathParamData.properties) {     if(!pathParamData.properties.hasOwnProperty(key)) continue;     var prop = pathParamData.properties[key]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
"use strict"; var React = require("react");
};      }(jQuery, window, window.document)); Unexpected 'this'.
} else {     throw new Error("Unknown shader type")   } Expected an object to be thrown.
toSort.sort(sorter);     for(var j = 0; j < toSort.length; j++)      result += attrC14nText(toSort[j]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var responsePipe = preFlow.ele('Response');   for (var i = 0; i < api['x-a127-services'].length; i++) {     var serviceItem = api['x-a127-services'][i];     if (serviceItem.provider === 'x-cors') { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}).call(this);
return typeof name ==='string'       ? name === 'length'? this.length          : typeof proto[name] === 'undefined'? null : proto[name]       : typeof name!== 'number'? null Unexpected 'this'.
$.AdminLTE = {}; The object literal notation {} is preferrable.
constructor: function DashboardItemsCollection(...args) {             DashboardItemsCollection.__super__.constructor.apply(this, args);         } Use the rest parameters instead of 'arguments'.
var cursor = namespace.listeners;     while (cursor!== null) { Use the rest parameters instead of 'arguments'.
p.foo = function (arg1, arg2) {      throw new Error(arg1 +'' + arg2);     }; Expected an object to be thrown.
deactivate: function () {             Util.deprecatedMethod(this, 'deactivate', 'destroy', arguments, 'v5.0.0');         }, Use the rest parameters instead of 'arguments'.
} else {       $parent.data('minute', Number($parent.data('minute')) + 1)     } Do not use Number as a constructor.
else {     for(var wfStep in newAPIs[route].workflow) {      if(newAPIs[route].workflow.hasOwnProperty(wfStep)) {       var hash1 = objecthash(oldAPIs[route].workflow[wfStep]);       var hash2 = objecthash(newAPIs[route].workflow[wfStep]);
lowerRight = {x: undefined, y: undefined};    for(i in this._shapes) {     if(!YAHOO.lang.hasOwnProperty(this._shapes, i)) continue;          var bounds = this._shapes[i].getAbsBounds(); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
EventEmitter.prototype.emit = function(event){     var callbacks = this.callbacks[event]      , len; ',' should be placed last.
options.www.users = {     "abcd": "1234" } ',' should be placed last.
$('#fullyBooked').modal('show')     $('#fullyBooked').on('hidden.bs.modal', () => {       this.props.onClose()     }) Unexpected 'this'.
called = false;         fn(...args);       }, timeoutDuration); Unexpected 'this'.
levelClass: computed('block.meta.level', function() {          return this.get('styles')[`${this.get('levelClassPrefix')}-${this.getWithDefault('block.meta.level', 1)}`];   }),
get: d(function (key) {   var index = eIndexOf.call(this.__mapKeysData__, key);   if (index === -1) return; Unexpected 'this'.
var delete_user = {};     var b_view = getBackgroundView();     for (var i = 0; i < userList.length; i++) {         var user = userList[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.initialize = function () {     if (options.disableDragAndDrop) {
db.collectionNames(function(err, names) {           var colItems = [];           res.write('<tr><td class="desc">collection</td><td class="content"><ul id="collection">'); The array literal notation [] is preferable.
try {     await func(...funcArgs);   } catch (err) { Use the spread operator instead of '.apply()'.
let $this = this;         this.$el   = $(element).data(name, this);         this.$opts = $.extend(true, {}, this.props, options);         Object.keys(this.props).forEach(prop => { Unexpected 'this'.
} else {         throw new Error('Unable to fire event.  Neither createEventObject nor createEvent methods are available');       } Expected an object to be thrown.
return next();             }), this.a);           }.bind(this), The function binding is unnecessary.
function cutOff()  {   this.steps['fa0c']++;   this.writeTo( Unexpected 'this'.
socket.destroy();         return;       } Unexpected 'this'.
if (!blob) {   throw new Error('Could not generate blob');  } Expected an object to be thrown.
debug() {     return console.debug(...arguments);   }, Use the spread operator instead of '.apply()'.
return callback.call( this, ret.length?                         '<ul>' + ret.join('' ) + '</ul>' : '' );
t.ok(is.empty(''), 'empty string is empty');   t.ok(is.empty(Object('')), 'empty String object is empty');   t.ok(is.empty([]), 'empty array is empty'); Do not use String as a constructor.
var INDEX_OF_LAST_IMPORT_STATEMENT = -1; var arrayOfBroweseableClasses = []; var PROTOCOL; The array literal notation [] is preferable.
"use strict"; var wd = require("yiewd"); var desiredCaps = { ',' should be placed last.
returnData.fields.push(...temp.fields);         returnData.virtuals.splice(...[i, 0].concat(temp.virtuals)); Use the spread operator instead of '.apply()'.
var spawn = require("child_process").spawn,   jn = require("path").join,   u = require("url") ',' should be placed last.
else if (arguments.length === 2) return s_3x3(arguments);     throw new Error("invalid size for scale"); }; Expected an object to be thrown.
var MessageSource = require('./message_source') , _ = require('mol-proto') ',' should be placed last.
alert("Could not initialise WebGL, sorry :-(");         throw new Error("failed initalization");     } Expected an object to be thrown.
hemera.on('serverPreResponse', function (ctx) {     let meta = { Unexpected 'this'.
if (body == undefined || body == null) {         throw new Error("Missing the required parameter 'body' when calling placeOrder");       } Expected an object to be thrown.
return new Promise((resolve) => {       this.spawner.spawn(this.command).then(data => {         resolve(data);       }); Unexpected 'this'.
}, function(error) {         this.serverError = true;         this.serverMessage = "Failed to get status from crawler server.";       })
defineSupportCode(function ({Given, When, Then}) {   When(/^I list "([^"]*)" data collections(?: in index "([^"]*)")?$/, function (type, index, callback) {     this.api.listCollections(index, type) Unexpected 'this'.
disabled: false,       isDisabled: computed('disabled', 'loading', function() {         if (this.get('disabled') || this.get('loading')) {           return true; Unexpected 'this'.
var LinuxTaskBuilder = (function (_super) {     __extends(LinuxTaskBuilder, _super);     function LinuxTaskBuilder(taskBuilder) {         _super.call(this);         this.taskBuilder = taskBuilder;     } Use the rest parameters instead of 'arguments'.
maxConns: Infinity,     maxGates: Infinity   };
module.exports = function () {  this.setHours(0, 0, 0, 0);  return this; Unexpected 'this'.
var podsItems = pods.items;       var nodeDic = []; The array literal notation [] is preferable.
otp.widgets.Widget.prototype.initialize.apply(this, arguments);         this.$().addClass('otp-stopTimesWidget');
this.toggle.$link.on( 'click', function () {   if ( this.toggle.open ) {    this.toggle.$link.text( this.toggle.showMsg ); Unexpected 'this'.
if(!this.key) {                 throw new Error('You must set a key for your field type ('+ this.declaredClass +'), something like "text" or "bool" or "email".');             } Expected an object to be thrown.
async abort(tx) {         if (!this.__backend.connected) throw new Error('JungleDB is not connected'); Expected an object to be thrown.
var shared = require('./_shared')('keys'); var uid = require('./_uid'); module.exports = function (key) { ',' should be placed last.
for(let server in servers) {         let parsedUrl = parseUrl(server) The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
const handleHeight = 1; function log(...params) {     console.log(...params); } Use the spread operator instead of '.apply()'.
htmlScript.node.setAttribute('id', 'oneBootstrapper');                 assetGraph.inlineRelation(htmlScript);             } else { Unexpected 'this'.
function getTopInfluencers(jobIds, earliestMs, latestMs, maxFieldNames, maxFieldValues) {     return $q((resolve, reject) => { Unexpected 'this'.
if (nativeTypes.indexOf(a[i]) < 0 && customTypes[a[i]] === undefined) {           throw new Error('Invalid type');           return false; Expected an object to be thrown.
{         this.base(...arguments);       } Use the rest parameters instead of 'arguments'.
prepareViewsModelsFields() {         for(let path in this.views) {             if(!this.views.hasOwnProperty(path)) continue;             let view = this.views[path]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (!SET ||!SET.length)  throw new Error("Table Update MUST have 'SET'");             if (!WHERE ||!WHERE.length) throw new Error("Table Update MUST have 'WHERE'"); Expected an object to be thrown.
for (prop in arguments[i]) {       if (own(arguments[i], prop)) {         result[prop] = arguments[i][prop];       }     } Use the rest parameters instead of 'arguments'.
})       return math.index(...dimensions)     } Use the spread operator instead of '.apply()'.
, listeners = {}                 , targets = {}; ',' should be placed last.
if (canceled()) {       throw new Error();      } Expected an object to be thrown.
var LineString = function(coordinates, opt_layout) {   _ol_geom_SimpleGeometry_.call(this); Unexpected 'this'.
editNickname(nickname) {         return this.shard.client.editNickname.apply(this.shard.client, this.id, nickname);     } Use the rest parameters instead of 'arguments'.
t.end() }) ',' should be placed last.
}       if (this.y.$scale!== 'ordinal' || this.x.$scale === 'ordinal') {         return'middle';       } else { Unexpected 'this'.
set: function(value){     disabledReadonly.set._polyfilled.input.call(this, value);     var stepcontrols = $.data(this,'step-controls');     if(stepcontrols){ Use the rest parameters instead of 'arguments'.
this.doAsBinary(function() {     SIN.super_.prototype.validate.apply(this);     if (this.data.length!= 22) throw new Error('invalid data length'); Unexpected 'this'.
if (null == relX) { relX = e.layerX; }             callback(relX);         }, false); Unexpected 'this'.
let ael=(E,V)=>(E.length?E:[E]).map(e=>Object.keys(V).map(v=>(e.addEventListener(v,V[v]),e))[0]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
define(["knockout", "jquery", "text!components/datasource/add.html", "ajaxutil", "waitingmodal", "jstorage", "validator"], function (ko, $, template, ajaxUtil, waitingModal) {     function ViewModel(params) {         var self = this; Unexpected 'this'.
}         o[this.name] = this.value;       } else { Unexpected 'this'.
default:     throw new Error("Unknown SHA variant");    } Expected an object to be thrown.
var jgeXml = require('./jgeXml.js');
this.projection      = new Projection();        this.providerWMTS    = new WMTS_Provider();        this.ellipsoid       = new Ellipsoid(6378137, 6378137, 6356752.3142451793); Unexpected 'this'.
if(cschema.type == "collection" || cschema.type == "sequence") {         for(var i = 0; i < cobj.length; i++) {             var o = cobj[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
constructor(server, name) {     super();     this.server = server;     this.name = name; 'this' is not allowed before'super()'.
var fs = require('fs')  , path = require('path') ',' should be placed last.
el: document.getElementById('view'),         sharer: function (args) {             console.log('share', args);         } Use the rest parameters instead of 'arguments'.
this.Logger = new function(){         var methodArr = ["error", "warn", "info"]; Unexpected 'this'.
options = $.extend({}, this.button_options, b);             button = new ButtonIndicator(options);
snake.crash();         }); The function binding is unnecessary.
this._nativeType = Date;  this._underscoreMethods = ['format'];  this.typeDescription = 'date and time'; Unexpected 'this'.
This.lines[This.lineNum].staff[This.staffNum] = { voices: [ ]};    if (params.name) this.lines[This.lineNum].staff[This.staffNum].title = params.name;    createVoice(params); Unexpected 'this'.
constructor() {   } 'this' is not allowed before'super()'.
for (var i = 0; i < arguments.length; i++) {     if (arguments[i] instanceof Array) {       this.sharedModel_.dataSets.push({ Use the rest parameters instead of 'arguments'.
this.updateSelected = this.updateSelected.bind(this);   } 'this' is not allowed before'super()'.
this._initSources();     this._recordObservers = {};     this._recordListeners = {};     this._recordKeyChanged = this.bindSafely(this._recordKeyChanged);
var hiddenviews = []; The array literal notation [] is preferable.
var Set_up_redis = function (done) {     this.backup = {};     this.plugin = new Plugin('rcpt_to.routes'); Unexpected 'this'.
default:             throw Error("Unsupported opcode '" + opcode + "'");         }; Expected an object to be thrown.
has: function(property) {             return function(fields) {                 return this.__hasPropertyValue([property].concat(_.isString(fields)? fields.split('.') : fields || []));             } Use the spread operator instead of '.apply()'.
this.onLoginPromise = stores.loginAnon.put(data).then(             ds.UIMsg('ok', that.loginForm, that.loginButton ), Unexpected 'this'.
peerReviewSrvc.loading = true;                     peerReviewSrvc.groups = [];                     peerReviewSrvc.details = {};                     $.ajax({ The object literal notation {} is preferrable.
var func = function(s,e) Use the rest parameters instead of 'arguments'.
var sbMocks = require('./mocks/servicebuscreation')  , should = require('should'); ',' should be placed last.
doc.links.forEach(function(link) {       if (!byFullId[link]) throw new Error('Not existing link "' + link + '" in'+ doc.section + '/' + doc.id);     }); Expected an object to be thrown.
_.forEach(this._astNode.properties, function (property) {             childNodes.push(property.value);         }, this); Unexpected 'this'.
yield this.af.syncAsync();     return Math.sqrt(yield this.af.sumAsync(sq)) / sq.elements(); };
if (arguments.callee._singletonInstance) {         return arguments.callee._singletonInstance;     } Avoid arguments.callee.
geometry = this.cacheGeometry[cooWMTS.zoom][cooWMTS.row];     } else {         if (this.cacheGeometry[cooWMTS.zoom] === undefined) {             this.cacheGeometry[cooWMTS.zoom] = []; The array literal notation [] is preferable.
this.nowViewingUpdate.addEventListener(function(){           ReactDOM.render(<SidePanel events={this.nowViewingUpdate} terria={terria} />, nav);         }.bind(this));
return this.ajax('getVsoProjectWorkItemQueries', project.name).done(function (data) {                 project.queries = data.value;             });         }, The function binding is unnecessary.
function createModel(...args) {   var model = new DataFlowNode(...args);   model = errors.customInterfaceErrorMessageInInject(model, Use the rest parameters instead of 'arguments'.
nodeca.filters.before('', {weight: 50}, function base_assets(params, callback) {   var locale    = this.session.locale,       theme     = this.session.theme, Unexpected 'this'.
if (!this.id ||!this.network) {             throw new Error('Can\'t fetchContent() without this.id and this.network');         } Expected an object to be thrown.
if (testNull === null) {         throw new Error('No match in string')       } Expected an object to be thrown.
}     throw new Error(`Can't Find Training to Verify it contains errors. The grid should, but does not, contain a row with this data in it: FirstInput: ${firstInput} -- LastInput: ${lastInput} -- LastResponse: ${lastResponse}`)   }) Expected an object to be thrown.
app.use(function() {   'use strict'; Missing space after *.
typeof define === 'function' && define.amd? define(factory) :  factory(); }(function () { 'use strict';  function foo() { return true; } Unexpected 'this'.
for (var i = 0; i < args.length - 1; i++) {       logArgs.push(args[i]);     }     self.constructor.emit('debug', logArgs);
if (obj!== Ember && 'function' === typeof obj.sendEvent) {     obj.sendEvent(eventName, params);   } Use the rest parameters instead of 'arguments'.
for (const key in entities) {             if (entities.hasOwnProperty(key)) {                 const entity = entities[key]                 if (entity[idKey] == lookupId) {
dom.prependElem(cont, this.element);       }     }
return this   }, Use the rest parameters instead of 'arguments'.
fs.readFileSync = function(f, enc) {  if(!fs[f]) throw new Error("File not found: " + f);  fs[f].length; Expected an object to be thrown.
.each(vm.seats, function(seat){     html.render(this)    .tr()     .td().input(seat.name).$().$()
getFullURL(...fragments) {     fragments = fragments.map((fragment) => encodeURIComponent(fragment));     return urljoin(this.serviceUrl,...fragments); Use the rest parameters instead of 'arguments'.
var globalCache = {  'true': {}, Unexpected 'this'.
throw new Error("Unknown "+objName+" `"+name+"`");   this.emit(objName+"change", name, value, obj[name]);   obj[name] = value; Unexpected 'this'.
parent.children().each(function(index) {       if (!disabled_or_hidden($(this)) &&          area($(this))>max_area) { Unexpected 'this'.
var feed = __dirname + '/feeds/nondefaultnamespace-baseline.atom'    , meta = {} ',' should be placed last.
};            delegate.setNgModel = function ( ) {       ngModel = arguments[0];      }; Use the rest parameters instead of 'arguments'.
default:             throw new Error('Unrecognized command "' + command + '". Use either `add`, `remove`, or `list`.');     } Expected an object to be thrown.
return utils.validFields(model, field)   })   var keys =  utils.keysFromObject(fields)   var vals =  buildMultiInsert(fields, keys, outValues); ',' should be placed last.
var $element = $(this)       var className = 'alert-message'       $element = $element.hasClass(className)? $element : $element.parent() ',' should be placed last.
} catch (e) {                } Use the rest parameters instead of 'arguments'.
wasRequiredBy: function() {         return Global.subNamespaces(true).select(function(m) {             return m.privateRequirements && m.privateRequirements.indexOf(this) > -1;         }, this);
leave() {         return this.client.deleteChannel.call(this.client, this.id);     } Use the spread operator instead of '.apply()'.
{     throw new Error("Cannot call getHash after setting HMAC key");    } Expected an object to be thrown.
if (document.addEventListener) {         document.addEventListener('DOMContentLoaded', function factorial() {           window.sweetAlertInitialize(); Avoid arguments.callee.
var $parseFloat = require('./_global').parseFloat; var $trim = require('./_string-trim').trim; ',' should be placed last.
});   Group.prototype.setProperty = function (sName, oValue) {    Element.prototype.setProperty.call(this, sName, oValue, true);    var oPage = this.getParent(); Use the rest parameters instead of 'arguments'.
var markup_list = exports._initialization_markup;     for (var i = 0; i < markup_list.length; i++) {         var m = markup_list[i];         if (m.value instanceof Function) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
typeof define === 'function' && define.amd? define(factory) :  factory(); }(function () { 'use strict';  function foo() { return 'foo'; } Unexpected 'this'.
import U from "src/util/util.js";
run(options) {     this._super(...arguments);     let prepare = new Prepare({ Use the spread operator instead of '.apply()'.
if (this.callsRemaining <= 0) {         callback(...args);       } Use the spread operator instead of '.apply()'.
this.folderExists = false;     this.installables = {};     $scope.checkboxModel = {}; The object literal notation {} is preferrable.
var matched = false;       for (op_init in is_op_init) {         if (match_here(op_init)) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}, function (res) {             var result = ""; Unexpected 'this'.
let param = { code, encrypt_data };         return this._sendRequest(constants.INTERFACE_LOGIN, param);     },
if (! this.hideOwnActions ) {         this.toolbarActions_ = this.wrapToolbarActions(this, this.model_.actions);         this.addDestructor(this.removeToolbarActions.bind(this));       } Unexpected 'this'.
clearRenderData() {     this.patternRenderData = {} Unexpected 'this'.
, _slice  = Array.prototype.slice     exports.get = function (index) { ',' should be placed last.
if (!this.db) {       throw new Error('DB has not been started yet');     } Expected an object to be thrown.
, attempt: { options: options }      })     ) ',' should be placed last.
log("Failed XML HTTP request", e);             if (typeof callback === 'function') { callback(true, params, e.responseText); }         }
this.webview.addEventListener("MSWebViewDOMContentLoaded", () => {         this.webview.invokeScriptAsync("eval", `             addEventListener("keydown", e => { Unexpected 'this'.
c.on('invalidPage', (e) => {         this.sendAction('invalidPageAction',e);       }.bind(this));
zucht_und_ordnung(false);         var form = modal_content.parents('form');         form.attr('action', form.attr('action')+window.location.hash); Unexpected 'this'.
, regexStr = '^'        , regexStrEnd = '';     var patternsStarted = false; ',' should be placed last.
var oMode = oModes.oModesByName[oResponse.sMode];                      this._oToolbar.setMode(oMode); Unexpected 'this'.
return function(...args) {       let done = args.pop(); Use the rest parameters instead of 'arguments'.
}       widget._super(name, value);     }, Use the rest parameters instead of 'arguments'.
var generateModel = function (swagger, schema, modelName, currentGenerated) {             var model = '', Unexpected 'this'.
, defineObservable = require('../utils/define-set-observable')  , defFilterByKey   = require('../utils/define-filter-by-key') ',' should be placed last.
} else {                 callback(...args);             } Use the spread operator instead of '.apply()'.
var zoe = {};
for (var groupTouple_i = 0; groupTouple_i < modalityGroups.length; groupTouple_i++) {             var groupSet = modalityGroups[groupTouple_i][0]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
let successful = document.execCommand(actionAttr);             if (!successful) throw new Error('Invalid "data-action" attribute');             this.dispatchEvent(actionAttr, selectedText, currentTrigger); Expected an object to be thrown.
} else {             throw new Error('Invalid date:'+ modelValue);           } Expected an object to be thrown.
} else if (/\s/.test(content[0])) {       throw new Error('Illegal whitespace character');     } else if (indent === stack[stack.length - 1]) { Expected an object to be thrown.
top: $("#editor-top-bar").height() + 'px',                     left: ($(this).offset().left - 35) + 'px'                 });
}     this.spinnerArgs = merge(opts, configArgs);   }.bind(this));
module.exports.googleLogin = function *googleLogin() {   this.redirect( Missing space after *.
}; stdlib.map = async function(ctx, val, iter){     if(!types.isFunction(iter)){ Missing space after *.
return __awaiter(this, void 0, void 0, function* () {             const filter = this.getParamsFilter(params);             return this.service.create(entity, query, { filter });         }); Unexpected 'this'.
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SUB", Array.slice(arguments));   }, Avoid arguments.callee.
ConsistentException.prototype = {};  function ConsistentException(message) { The object literal notation {} is preferrable.
const view = (() => {           switch (this.interaction.reason) {             case 'consent_prompt': Unexpected 'this'.
)  , callAllMethods = (a = [], b, c) => a.map(e => e(b, c))  , ObjectAssign = Object.assign ',' should be placed last.
this.checkInternalPointers();   if (this.parent) { throw new Error("The root shouldn't have a parent"); } }; Expected an object to be thrown.
var config = this.configFor(name),           opts = {typeKey: relationship.typeKey, embedded: config.embedded};       if (relationship.kind === 'hasMany') { Unexpected 'this'.
input = cell.input ||    (cell.input = put(cell, "input[type=" + column.editor + "].dgrid-input", {     name: column.field || this.id + "-selection",     tabIndex: isNaN(column.tabIndex)? -1 : column.tabIndex Unexpected 'this'.
parser.end(() => {       resolve(function*() {         for (const rule of rules) { Missing space after *.
this.sendExtensionRequest( ({       action: constants.Actions.LIST_KEYS, Unexpected 'this'.
function onMessageReceived(topic, payload) {   debug("Message received on", topic); Unexpected 'this'.
function getUserInfoMethod() {     return persistencePathMethod(conf.get('authUserInfoRoute')); } Unexpected 'this'.
});     this.resource('voucherRedeemDone', {path: '/giftcards/redeem/done'});     this.resource('signup'); Unexpected 'this'.
}         fields = new Object();         fields.api_key = this.options.APIKey; Use the rest parameters instead of 'arguments'.
if (data && data.length) {                     for (var k = 0, len = data.length; k < len; k++) {                         self._AddPos(data[k][0]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
return function (req, res, next) {    return resource.execute(req.mort, function (err, data) {     if (err) { Unexpected 'this'.
c$ = Clazz.decorateAsClass (function () {  this.isAngstroms = false; Unexpected 'this'.
++currentScreen;             display();             return this;         }; Unexpected 'this'.
for (var p1 = 0; p1 < this.panels.length; p1++) { obj.refresh(this.panels[p1].type); }             } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
$(".close").click(function(e){         this.input.val( "" );     }) Unexpected 'this'.
SamplesPerGr: 576,     BytesPerFrame: that.SamplesPerGr * 2 * 4,     SamplingFrequency44100: 0, Unexpected 'this'.
var data = [];         for (var timestamp in dataTotals) {             if (!dataTotals.hasOwnProperty(timestamp)) continue;             data.push({date: timestamp, value: dataTotals[timestamp]}); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
History.pushQueue({ Use the rest parameters instead of 'arguments'.
registry_1.commands.set("typescript:go-to-declaration", deps => {     return async (e) => {         if (!utils_1.commandForTypeScript(e)) { Unexpected 'this'.
this.dispose() }
, sep = require('path').sep  , signature = require('cookie-signature');
this.whenorderedby = null; } Unexpected 'this'.
this.token = await HealthCashMock.new()     this.drs = await HealthDRS.new()     await this.drs.setHealthCashToken(this.token.address)   })
}       services['ecmascript-debugger'].setConfiguration(...config_arr);       _is_initial_settings_set = true; Use the spread operator instead of '.apply()'.
var Cookie = require('express-session').Cookie  , debug = require('debug')('connect:cookieSession') ',' should be placed last.
programGpaMax: programGpaMax,                          currentlyRegistered: currentlyRegistered == null? null : Boolean(currentlyRegistered).toString(),             earlyAlertResponseLate: earlyAlertResponseLate, Do not use Boolean as a constructor.
var self = this;   var safe = self.schema.options.safe;   var done = function(err) { ',' should be placed last.
init() {     this.store.on('sessionDataUpdated', (content) => {       let { authenticator: authenticatorFactory } = (content.authenticated || {}); Unexpected 'this'.
{   return this.coefficients;  }});  this.getCoefficient=function( degree) Unexpected 'this'.
if (!result) {         throw new Error('Failed to load the default user role!');       } Expected an object to be thrown.
var endOfLine = require('os').EOL  , exports = module.exports; ',' should be placed last.
var histogram = {}, tmp_arr = [];     var key, i, code, strl = 0; The object literal notation {} is preferrable.
if (isStepTouched(stepName))       throw new Error("Expected step \"" + stepName + "\" to have been skipped.");   } Expected an object to be thrown.
fakeObj = function () {             FakeRequest.call( this );         }; Unexpected 'this'.
super(source);         core.defineProperty(this, Symbol.iterator, function* MissingSpaceIterator() {             let index = 0; Missing space after *.
var path = require('path')  , webpack = require('webpack') ',' should be placed last.
const args = [this.request, this.response, this._lazyBody.content].concat(this._lazyBody.args)       nodeRes[method](...args)     } Use the spread operator instead of '.apply()'.
function WikiPath(path){  this.full = nomalizePath(decodeURIComponent(path));  var index = this.full.lastIndexOf("/"); Unexpected 'this'.
if(args[1] === 0 || args[2] && typeof args[2] === "number"){    params.Z = args[2];  }    if(args[1] === 0 || args[3] && typeof args[3] === "number"){ Unexpected 'this'.
var r = 0;         for (var i = 0; i < this.d.length; ++i)             r += this.d[i] * v.d[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
addToken: async function (currency) {     const hasToken = await this.rootChain.hasToken(currency)     if (!hasToken) { Unexpected 'this'.
if (byteStream === undefined) {     throw new Error('dicomParser.readSequenceItemsImplicit: missing required parameter \'byteStream\'');   } Expected an object to be thrown.
test.equal(self.setupLocal.callCount, 0);         this.tessel = new TesselSimulator();
for ( var i in document.styleSheets ) {             if ( document.styleSheets.hasOwnProperty( i ) ) {                 sheet = document.styleSheets[ i ];                 if ( sheet.media.mediaText === 'print' ) {
for (var i = 0, l = this.length; i < l; ++i) {         if (this[i] in u) {             continue;
})   appDealer.on('message', function(channel, id, cmd, msg) {     devDealer.send(msg)   }) Use the rest parameters instead of 'arguments'.
this.settings = {};   this.options = {};   this.store = new Store();   this.parts = {}; Unexpected 'this'.
const licenseTextMapping = {};       const licenseTexts = [];       const dependencies = [];       Object.keys(packages).forEach(key => { The array literal notation [] is preferable.
, binomial = window.binomial  , labor = window.labor; } ',' should be placed last.
this.totalPages = 0;     this.textFilter = null;
if(! has_remote )         return this.updateWallet(private_key).then(()=> this.remote_status = "Not Modified")
this.transformed = true;   this.typesData = [];   for (var i=0, l=pokemon.typesData.length; i<l; i++) { The array literal notation [] is preferable.
var data = query.chart_data('flot')       for (var i = 0; i < data.length; i++) {         var series = data[i] The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
renderer.dragStartX = xCursor - this.offsetLeft;       renderer.dragStartY = yCursor - this.offsetTop;       zoomContainer.style.transition = "none"; Unexpected 'this'.
var child = p._handler;    parent.chain(child, parent.receiver, onFulfilled, onRejected, arg);    return p; Use the rest parameters instead of 'arguments'.
, callback = _.isFunction(data.callback)? data.callback : function() {}      , exitCode = data.exitCode || 0      , exitCodes = exitCode.length? exitCode : [exitCode]      , command ',' should be placed last.
componentNameElt.text($(this).val());             component.meta.name = $(this).val(); Unexpected 'this'.
if (Handlebars.sections && Handlebars.sections[section]) { Unexpected 'this'.
installResources.call(router, PageApp, primaryRoute, isGlobal);
if (!evt) {   throw new Error("Event " + eventName + " not found");  } Expected an object to be thrown.
var height = Number(theImage.attr("height"));                 var theRectangle = theImage.parentNode.select("rect.outline");                 var theHandle = d3.select(this); Unexpected 'this'.
});       for (var ii = 0; ii < desc.components.children.length; ii++) {         var results = flattenComponentForDescription(desc.components.children[ii]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (attrs.isDuplex) {         component.bind('onchange', (function() {           return attrs.call(this.component);         }), 'before'); Unexpected 'this'.
});     }     this.map.setView(center,14);   }, Unexpected 'this'.
String.prototype.times = timesFunction; Number.prototype.times = timesFunction; String prototype is read only, properties should not be added.
HTML5.debug("inserting " +  name);    return element; Avoid arguments.callee.
for (s = 1; s < arguments.length; ++s) {   source = Object(arguments[s]);   props = keys(source);   for (i = 0; i < props.length; ++i) { Use the rest parameters instead of 'arguments'.
}   let that = first(...firstArgs);   let lastArgs = Helper.mapObject(components, function(name, component) { Use the spread operator instead of '.apply()'.
for (var url in subscriptions) {                 if (!subscriptions.hasOwnProperty(url)) continue;                 lgtv.subscribe(url, function (err, res) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
function mixinProperties(obj, proto) {  for (var prop in proto) {   if (proto.hasOwnProperty(prop)) {    obj[prop] = proto[prop];   }
return function () {     return func.apply(ctx, args.concat([].slice.call(arguments)));    }; Unexpected 'this'.
});       if (resp.status!== 200) throw new Error('HTTP status'+ resp.status);     } catch (error) { Expected an object to be thrown.
};    fields['set' + Base.capitalize(component)] = function(value) {     var color = this.convert(colorType); Unexpected 'this'.
function getData() {   return clone(this.data); Object prototype is read only, properties should not be added.
} else {    throw new Error('ERROR: CoapPacket.serialize [Nibble value larger that 526345 is not supported]');   } Expected an object to be thrown.
, helper     = require('../helper')  , should     = require('should')  , chatState  = require('../../index').utils['xep-0085']  , correction = require('../../index').utils['xep-0308'] ',' should be placed last.
setInterval(function(){         for (var i in self.moduls) {             if (self.moduls.hasOwnProperty(i)) {                 self.moduls[i].execIntervals();             }
var getExports = require('../core/getExports') module.exports = function (context) { ',' should be placed last.
for (tag in tags) {             if (tags.hasOwnProperty(tag)) {                 attribute = tags[tag];                 urls[tag] = [].map.call(document.querySelectorAll(tag), function(item) { return item.getAttribute(attribute);
this.positioner = new Positioner(this.window)     this.window.on('blur', () => {       this.opts.alwaysOnTop? this.emitBlur() : this.hideWindow()     }) Unexpected 'this'.
if (typeof interval == "undefined") {        var el = $j(this); Unexpected 'this'.
if(!this.options.skipLoad) {              var loader = new DmakLoader(this.options.uri);              loader.load(text, function(strokes) { Unexpected 'this'.
function * runClockSaga () {   yield take(actionTypes.START_CLOCK) Unexpected space before *.
var compile = jsonMask.compile  , filter = jsonMask.filter ',' should be placed last.
it('push replication', function () {     var username = 'push_repl_test'; Unexpected 'this'.
function e() {             var e = t.call(this) || this;
get_my_star_count_by_friend: function(user) {         return this.model_.get_my_star_count_by_friend(user);     }, Unexpected 'this'.
timeout = setTimeout(function(){           return cs.ui.notify(this.responseText, 'warning', 5); Unexpected 'this'.
jQuery.fn[func_name] = function() {    var args = arguments,     res, hasHookup; Use the rest parameters instead of 'arguments'.
if (x === this) {                     throw new Error("internal error: would have gone into an infinite loop here.");                 } Expected an object to be thrown.
Handlebars.registerHelper("url", function() {     return "http: });
delete params.production;             _this.params = params;         } Unexpected 'this'.
}     this.length = _arr.length } Use the spread operator instead of '.apply()'.
function Queue(){   var self = this;   if (this instanceof queue === false) { Unexpected 'this'.
console.log("before");                 throw new Error("FOO"); Expected an object to be thrown.
var elementRemoveEventListener = ElementProto.removeEventListener? function(eventName, listener, useCapture) {     return this.removeEventListener(eventName, listener, useCapture);   } : function(eventName, listener) { Use the spread operator instead of '.apply()'.
if (templates.length < 1) {     throw new Error(`No "${filetypes}" templates found in \`${globalConfig.build.templates.source}\`. If the path is correct, please check your \`build.templates.filetypes\` config setting.`)   } Expected an object to be thrown.
}       this._appendUndo(action);     } Use the spread operator instead of '.apply()'.
});             it('does not add a request', function(done) {                 expect(this.messageParser.requests).to.have.length(0);                 done();
var response = Thorax.View.prototype.render.call(this, output || this[templateAttributeName] || layoutTemplate);       ensureLayoutViewsTargetElement.call(this);       return response; Unexpected 'this'.
var StoreWatchMixin = function(storeNames) {   return { Use the rest parameters instead of 'arguments'.
, distribution = {}    , N = sandbox.getN(); ',' should be placed last.
if (typeof cb!= "function") {       var self = this.get(cb)       self.fetch.apply(self, arguments) Use the rest parameters instead of 'arguments'.
function slotOwnUpdate(changes, isFromOuter) {     if (me.nameBind && nodeEvalExpr(me, me.nameBind.expr)!== me.name) { Unexpected 'this'.
e.preventDefault();    moveLayer($(this).closest('li').data("layer"), self.map_.getLayers(), +1);   }  function moveLayerDown(e) Unexpected 'this'.
test('clearFeedback', function () {     this.$group.removeClass('error');     this.$group.find('.frm-feedback').html('foo');     this.formGroup.clearFeedback(); Unexpected 'this'.
export async function queueCaveUninstall (store, action) {   const {caveId} = action.payload Unexpected space before *.
if (constring == null || constring.trim() === '')         throw new Error('constring must not be null or empty');     if (contype == null || contype.trim() === '') Expected an object to be thrown.
if ($.inArray(id, items)!== -1) {                     $this.show();                 } Unexpected 'this'.
ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);     return window.Parsley[method](...arguments);   }; Use the spread operator instead of '.apply()'.
var self = this      , fileWatcher = self.fileWatcher;     config = self.config;     config.read(function(){ ',' should be placed last.
List.sc.init.call( this, config );          }, Use the rest parameters instead of 'arguments'.
domId=self.$domId,                      f=xui.Event.$eventhandler,                      i,l,j,k,o,key,id,t,v; Unexpected 'this'.
if( event.propertyName === ( changeType[ this.type ] || "value") ){             $.event._dispatch( $._data( this, "publisher" ), type, event ); Unexpected 'this'.
_setOption: function( key, value ) {   this._super( "_setOption", key, value );   if ( key === "source" ) { Use the rest parameters instead of 'arguments'.
template: function(){             var icon = this.get('component._icons.loadingRows'),                 colspan = this.get('component._colspan'); Unexpected 'this'.
return function(test) {         shared.setupTest(test)         exports.tcp.apply(this, [test, opts, callback]) Unexpected 'this'.
})( this );
this.y += dy     }),     setName: action(function(newName) {         this.name = newName     }) }) Unexpected 'this'.
self.selectItem(item);             $activeItem.addClass('pat-active');             if(self.options.maximumSelectionSize > 0){ Unexpected 'this'.
var options = {}   var callback ',' should be placed last.
qq.attach(document, 'drop', function(e){           for (i=0; i < dropzones.length; i++){ dropzones[i].style.display = 'none'; }           e.preventDefault(); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
willDestroy() {     this._super(); Use the rest parameters instead of 'arguments'.
});       openRequest.onupgradeneeded = function( event){         this.db = event.target.result;         if(this.db.objectStoreNames.contains(this.storeName)){ Unexpected 'this'.
}     return originalMiddleware(next);   }; Unexpected 'this'.
} catch (error) {       this.setState({ error });     }
exercise.addSetup(function (mode, callback) {    console.log ("this"); Unexpected 'this'.
disabled: function () {       return this.get("processing") ||!this.get("isValid");   }.property("processing","isValid"), Unexpected 'this'.
else             result = fallback.apply(descriptor, args);         resolved = resolved || identity; Use the rest parameters instead of 'arguments'.
function ClientSnake(index, location, direction, size, speed, local) {     Snake.call(this, index, location, direction, size, speed, local);     this.crashed = false; Use the rest parameters instead of 'arguments'.
}     this.clearHouse()     this.emit('end') Unexpected 'this'.
constructor() {     super(); 'this' is not allowed before'super()'.
var kotti = {     dom_changed_handlers: [] }; The array literal notation [] is preferable.
for (var i = 3; i < arguments.length; ++i)          url += "&" + encodeURIComponent(arguments[i]).replace(/-/,"%2D");    } Use the rest parameters instead of 'arguments'.
this.createFile = function() {}; Unexpected 'this'.
load(dumpBasePath, snapshotStoreFolder, config) {     console.log(config);   }, Use the rest parameters instead of 'arguments'.
typeof define === 'function' && define.amd? define(['https:  factory(global.external)); }(function (external) { 'use strict';  external = external && external.hasOwnProperty('default')? external['default'] : external; Unexpected 'this'.
if (parent_rows.some(function(parent_row){ return!parent_row.ball; }))           throw new Error("some parents have no balls");          if (parent_rows.length > 0) Expected an object to be thrown.
}       else if ( input.toLowerCase() == 'xml file'  ) {         obj_form.dataset = '\ Unexpected 'this'.
var data = this.getSection(syntax), matchedItem = null;    find(['snippets', 'abbreviations'], function(sectionName) {     var data = this.getSection(syntax, sectionName);     if (data) { Unexpected 'this'.
, containerPosition             , trackedBodyOffset            , deviceScale; ',' should be placed last.
this.setTimeout();     return this._super(...arguments);   }, Use the spread operator instead of '.apply()'.
return _s.slugify(val);    }   }, { The function binding is unnecessary.
case SocketConnectionState.DISCONNECTED:                 this.DUID = undefined;                 this.socketConnection = undefined; Unexpected 'this'.
return new CancelablePromise(function onCreate(resolve, reject) {     promise.catch(...args).then(resolve, reject);   }, this._onCancel); Use the spread operator instead of '.apply()'.
typeof define === 'function' && define.amd? define(['../foo'], factory) :  factory(global.foo); }(function (foo) { 'use strict';  foo = foo && foo.hasOwnProperty('default')? foo['default'] : foo; Unexpected 'this'.
var data = [];         for (var i = 0; i < embeddedItems.length; i++) {             var item = {                 "url": embeddedItems[i].path + ".members.json",                 "method": "POST", The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
ok = pack.packOne(fixedBoth[j].width, fixedBoth[j].height);             if (!ok) throw new Error('out of space');         } Expected an object to be thrown.
var header;   for (var i = 0; i < headers.length; i++) {     header = headers[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
return filterPrefix(validUrns, 'thirdeye:metric:').reduce((agg, urn) => {         agg[urn] = that._makeMetricLabel(urn);         return agg; Unexpected 'this'.
yield this.get(taskPath).perform(...args);
if(!path) {       throw new Error('no route with name:'+ to)     } Expected an object to be thrown.
this.show = function() {         $list.focus();
$mdDialog.hide("saved!");                     }.bind(this), function() {
if (streamObj.mediatype === mediatype){     for (var connection in rtc.producedPeerConnections) {      if (rc.producedPeerConnections.hasOwnProperty(connection)) {       rtc.producedPeerConnections[connection][mediatype].addStream(streamObj.mediastream);      }
});     target.addEventListener(propertyName.slice(2), function(...args) {       wrapper.dispatchEvent(...args);     }); Use the rest parameters instead of 'arguments'.
heightBytes[i] = 'height'.charCodeAt(i);     }     for (i = 0; i < 'videocodecid'.length; i++) {       videocodecidBytes[i] = 'videocodecid'.charCodeAt(i); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}; }(this)); Plume.menu = (function() { Unexpected 'this'.
$dialogButton.click(function() {                 var popupView = that.getPopupView(this);                 if (popupView.isShowed) { Unexpected 'this'.
};                                  var val = this.value.replace(/</g, '&lt;')                                    .replace(/>/g, '&gt;') Unexpected 'this'.
var Polling = require('./polling'); var Transport = require('../transport'); ',' should be placed last.
for(var h in jsondata.headers) {    if(jsondata.headers.hasOwnProperty(h)) {     var heading = jsondata.headers[h];     ret += textdelim + heading + textdelim +  delim;
'use strict'; var exports = module.exports; var path = require('path'); ',' should be placed last.
}             this.queue(src);         }
var jetzt  = window.jetzt    , H      = jetzt.helpers;   function on (event, cb) { ',' should be placed last.
$scope.isOpenSearch =!$scope.isOpenSearch;     };     $scope.isOpenSearch = false; The function binding is unnecessary.
if (!((ONMD_!= null) && ONMD_)) {               throw new Error("Missing object model layout object input parameter! If you specified the namespace declaration via object reference, check the validity of the reference.");             } Expected an object to be thrown.
}   var opts = this.defaults(options);   this.src(config.src, opts)    .pipe(this.dest(config.dest, opts)) Use the rest parameters instead of 'arguments'.
{                 label.removeClass('active');             } Unexpected 'this'.
let alreadyOpenedMenu = new Menu(status.opened);       alreadyOpenedMenu.close(() => {         this.open(callback);       }); Unexpected 'this'.
function modelFinder (params) {   for (var key in params) { if (!params.hasOwnProperty(key)) continue; } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
{    throw new Error("Invalid b64Pad formatting option");   } Expected an object to be thrown.
for (i = 0; i < this.documents.length; i++)             { Unexpected 'this'.
} else {     child  = parent;     parent = Object;     props  = args;   } Use the rest parameters instead of 'arguments'.
spyOn(parentCtrl,'registerAutocomplete').and.returnValue(tagsInput);         var options = jQuery.makeArray(arguments).join(' ');         var element = angular.element('<auto-complete source="loadItems($query)"'+ options + '></auto-complete>'); Use the rest parameters instead of 'arguments'.
cb(er)     })   } The function binding is unnecessary.
setTime: function (n) {     if (isNaN(n)) { throw new Error('Units must be a number.'); }     var dt = new Date(0); Expected an object to be thrown.
throw new Error("SignalR: jQuery not found. Please ensure jQuery is referenced before the SignalR.js file.");     } Expected an object to be thrown.
console.log('Starting error finding process...');     for (let count = 0; count < openPRs.length; count++) {       let { number, labels, head: { sha: ref } } = openPRs[count]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (typeof args[0] ==='string') args[0] = `react-i18next:: ${args[0]}`;       console.warn(...args);     } Use the spread operator instead of '.apply()'.
) {   var Example = function (name, contents) {     this.name = name || 'Example';     var defaultContents = ('\ Unexpected 'this'.
$scope.$on('$destroy', function () {       for (var i = 0; i < $scope.currentModals.length; i++) {         var modal = $scope.currentModals[i];         modal.remove(); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.logger.debug(         '\n{{magenta'+ e.req.method + '}}',         node_url.parse(e.req.safe_url).pathname, Unexpected 'this'.
assert(Number.isInteger(this.deactivationThreshold));   if(feed.errorCount > this.deactivationThreshold) {     console.debug('Error count exceeded threshold, deactivating feed', feed.id, Feed.peekURL(feed));
var result22 = result23!== null          ? (function($1, $2) {  return $1.length!= 1? new PEG.Grammar.Sequence($1) : $2[0];  }).call(this, result23)           : null; Use the rest parameters instead of 'arguments'.
'use strict' var jsonSafeStringify = require('json-stringify-safe')  , crypto = require('crypto') ',' should be placed last.
});         return datas_1;     } Unexpected 'this'.
let args = []      args.forEach((argu) => { Use the rest parameters instead of 'arguments'.
personalizationColors: function() {     const palette = this.themeColors().palette;     const brand = this.themeColors().brand; Unexpected 'this'.
export function setConfig (...args) {   return config.set(...args); } Use the spread operator instead of '.apply()'.
}       this.selectedIdx = this.selectedIdx.sort();       this.$refs.searchField.focus() Unexpected 'this'.
if (!body) {         throw new Error('Expected function body.');     } Expected an object to be thrown.
},     nodeTraverse: function (...args ) {         Node.prototype.traverse.apply( this, args );     }, Use the rest parameters instead of 'arguments'.
if (base) {     for (var p in base) {      if (base.hasOwnProperty(p)) {       blank[p] = base[p];      }
this.globalData.transformCanvas = this.transformCanvas;
String[P].date = Number[P].date = function(format) {   var m String prototype is read only, properties should not be added.
});         it("Size of dataset '0' should be 186 ", function(done) {             groupGeometries.getDatasetType('0').should.equal(HLType.HL_TYPE_LITE); Missing space after *.
}       this._setupPlayerAttributeBindingObservation(player, property, attrName);     }   }, Unexpected 'this'.
function cancelDelete() {         this.modal.dismiss();     }
this.evaluate();                                 }, this));                             } Unexpected 'this'.
if (settings.slides.length) {      $this.rsfSlideshow('addSlides', settings.slides);      settings.slides = Array(); Unexpected 'this'.
var CmElement = function(options) {     this.prop = options.prop || "color";     this.prettyName = options.prettyName; Unexpected 'this'.
size: 'S',           ui: this.ui         } Unexpected 'this'.
unformatted = data.get( address );    formatted = anglebars._format( unformatted, model.formatters );    this.update( formatted ); Unexpected 'this'.
array.forEach(files, function(f, i){    var fieldName = this.name+"s[]";    var fileName  = f.fileName; Unexpected 'this'.
}   this.prevTime = this.timingFunction();  }.bind(this);
constructor() {     super();     this.state = { result: null };     this._callback = this._callback.bind(this); 'this' is not allowed before'super()'.
start = 0;     }     for (let i = start, l = this.length; i < l; i++) {       reduced = func(reduced, this.get(i), i, this);
var log = logger.createLogger('auth-ldap')   var app = express()   var server = Promise.promisifyAll(http.createServer(app)) ',' should be placed last.
}     insert(...records) {         let returnResult = records!== undefined? records[1] : true;         return __awaiter(this, void 0, void 0, function* () { Use the rest parameters instead of 'arguments'.
this.DATABASE = {}; function Weaver() {
{           datatable[$row.attr('groupid')]=obj;         } Unexpected 'this'.
delete model[from + ':' + this.valueAttr];           }); Unexpected 'this'.
this.debug("Socket data being routed for '" + data.event + "' event");         this.eventRouter[data.event].bind(this)(data, conn);       } Unexpected 'this'.
this.initialize = function() {
let r = [];    for(let i in map){     if(map.hasOwnProperty(i)){      r.push(map[i]);     }
var activityProxyGetter = function () {   if (this.currentState == this.state.opened) {    return this.window._internalActivity; Unexpected 'this'.
, getPrototypeOf           = Object.getPrototypeOf  , f                        = require('../Function/functionalize'); ',' should be placed last.
if (existingValue) {         for (var prop in value) {           if (value.hasOwnProperty(prop)) {             existingValue[prop] = value[prop];           }
var util = require('util') var Mechanism = require('./Mechanism') function Anonymous () {} ',' should be placed last.
, 'test exec stderr events': function () {     var ex = jake.createExec('echo "foo" 1>&2', function () {}); Unexpected 'this'.
}      this._highlight({row: e.visualIndex});     },
}         return new this.constructor(hexes)     } Unexpected 'this'.
_.camera.add(_.light);         that._.camera = _.camera; Unexpected 'this'.
Gate.prototype.beforeAny = function(fn) {     this.beforeAnyRequest = fn; }; Unexpected 'this'.
$('.title a').each(function () {     var href = $(this).attr('href');     if (checked){
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "STS", Array.slice(arguments));   }, Avoid arguments.callee.
__extends(DependencyObjectCollection, _super);          function DependencyObjectCollection(model) {              _super.call(this);              this.model = model;            } Use the rest parameters instead of 'arguments'.
if (!((this.objectModelDeclaration!= null) && this.objectModelDeclaration)) {           throw new Error("Failed to deep copy (clone) source object model declaration.");         } Expected an object to be thrown.
goog.exportSymbol('WebGLEarth.prototype.getCenter', function() {   var pos = this.camera.getPos();   return [goog.math.toDegrees(pos[0]), goog.math.toDegrees(pos[1])]; Unexpected 'this'.
hasFiles() {     for (const ignored in this.compiling) return true;          return false;   } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if(get(this,'renderSrc')) {       actualImg.setupActualImg();     } else { Unexpected 'this'.
exception = _error;             throw new Error("openNamespace failure: " + exception);           } Expected an object to be thrown.
, fs        = require( 'fs' )  , binPath   = path.join( __dirname, '..', '..', '..', 'bin' )  , assetPath = path.join( __dirname, '..', '..', 'assets' ); ',' should be placed last.
temperature.on("data", function() {             self.emit("data", this.celsius);         }); Unexpected 'this'.
return [].concat(...ret).join('');         }; Use the spread operator instead of '.apply()'.
constructor(location, interfaces) {     super(location);     this.interfaces = interfaces;   }
data = _.extend({}, {validateOnChange: true}, data);             var self= this;             var parsedData = this.parseAction(data); ',' should be placed last.
module.exports = function (ctx, name, getter) {   var _get = Object.getOwnPropertyDescriptor(ctx, name)    , _super = function () {}; ',' should be placed last.
const IgniterConsole = {   warn(...args) {     console.warn(...args);   }, Use the rest parameters instead of 'arguments'.
QUnit.test( "afterEach must be called after test ended", function( assert ) {  var testContext = this;  var done = assert.async();  assert.expect( 1 ); Unexpected 'this'.
var params = "";       for (var name in event) {         if (event.hasOwnProperty(name)) {           var value = event[name];           if (typeof value!== 'undefined') {
, MySQLQueryInterface = require('./dialects/mysql/query-interface')  , Transaction = require('./transaction')  , Promise = require('./promise'); ',' should be placed last.
class UnitHealthDropdown extends React.PureComponent {   constructor(...args) {     super(...args);     this.state = { dropdownItems: this.getDropdownItems() }; Use the rest parameters instead of 'arguments'.
}).call(this);
extend() {     var target = arguments[0]     var objs = [].slice.call(arguments, 1) Use the rest parameters instead of 'arguments'.
it("instance injection in mediator with inject property", function () {   var f = function(){this.args = arguments};         f.inject = ['instance']; Use the rest parameters instead of 'arguments'.
export default function (nextState, transition) {   this.store.dispatch(checkToken()) Unexpected 'this'.
var app = require('../../examples/auth/app')  , request = require('../support/http'); require('should'); ',' should be placed last.
function(){                 $this.find('i').remove();             } Unexpected 'this'.
if (confirm('Are you sure you want to delete the entire list?')) {      this.base.del(...t);     } else { Unexpected 'this'.
}); function createLogger(options) {   if ( options === void 0 ) options = {}; Use the rest parameters instead of 'arguments'.
mUIUtils.getUserText(domId+"EditBox", refNode, false, defaultName,       function(name) {      if (name) { Unexpected 'this'.
if (i < this.$timeouts.length) {       setTimeout(function() {         this.$cycleTouchName(fontName, i + 1);       }.bind(this), this.$timeouts[i] - (i > 0? this.$timeouts[i - 1] : 0));
var g_fButtonPressedOnAnyGamepadEver = false; var g_gamepadVisualizers = []; function runAnimation() { The array literal notation [] is preferable.
var globalMatch = haystack.match(globalRegex);    var matchArray = [];    for (var i in globalMatch) { The array literal notation [] is preferable.
const arr = []   Object.keys(editors).forEach((uuid) => {     arr.push(editors[uuid]) The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (koFileEx.scheme!= "file") {         throw new Error("'"+file+"' does not have a local dir name");     } Expected an object to be thrown.
WhatsAppAPI.Wap.sendConversationSeen(data.jid, t, data.unreadCount, false).then(function(e)   { Unexpected 'this'.
}             original.call(this);         }); Use the rest parameters instead of 'arguments'.
function _log() {   console.log(...[].concat([`[${moment().format('DD/MM/YYYY HH:mm:ss')}] =>`], Array.from(arguments) || [])) } Use the spread operator instead of '.apply()'.
(...args) =>     fns.reduceRight((acc, fn) => [fn(...acc)], args)[0];
return function getGlobals() {    return _ref8.apply(this, arguments);   }; Unexpected 'this'.
function OverlayBlock(el, overlay, points) {         OverlayBlock.__super__.call(this, el, overlay, points);         this.jsPlumbOverlayInstance = overlay; Use the rest parameters instead of 'arguments'.
if (exp!== undefined) {         return expressionCompile(exp).apply(instance, args);       } else { Use the rest parameters instead of 'arguments'.
case 'http:       Object.assign(vocab, module.exports.DRAFT_04_HYPER);       break;   } Unexpected 'this'.
that._defineDimentions();     $this     .removeClass('animating') Unexpected 'this'.
, pg  , generator = require('../../../lib/generators/sql')  , model = require('../../index') ',' should be placed last.
key:'renderEnum',     value: function renderEnum(definition, depth) {       var _definition$config = definition.config; Use the rest parameters instead of 'arguments'.
init: function() {     this._super(...arguments);     if (!this.$) { Use the spread operator instead of '.apply()'.
} else {              for (var p = 0; p < icon_paths.length; p++) {                 var iconPath = path.join(icon_paths[p],req.params.icon); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
import ExtractTextPlugin from 'extract-text-webpack-plugin' export function extractStyles (ext) {   return!this.dev &&!!this.options.build.extractCSS && this.options.build.extractCSS[ext]!== false }
this._encoder.on('error', function(err) {     this.rpcCode = nurpc.rpcCode('INTERNAL');     onFinish(err);   }) Unexpected 'this'.
console.log('runner run cb', arguments);   var done = assert.async();   process.exit(stats.failCount > 0? 1 : 0); Use the rest parameters instead of 'arguments'.
if ('string' == typeof msg) msg = new Buffer(msg);   var len = msg.length;   var buf = new Buffer(len + 4); ',' should be placed last.
for (var i = 0; i < templates.length; i++) {       this.$markAsBound(templates[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var expect = require('chai').expect  , husk = require('../..'); describe('husk:', function() { ',' should be placed last.
console.log('IMAP server closed');                     }); Unexpected 'this'.
, Log = require('./log')  , Q = require('q');
} else {         throw new Error("unexpected context: name='" + context.name + "' type=" + context.type);     } Expected an object to be thrown.
Events.prototype.one = function(ev, callback) {     return this.bind(ev, function handler() {       this.unbind(ev, handler);       return callback.apply(this, arguments);     }.bind(this));
if (this._oOpenPopoverDeferred) {    setTimeout(function () {     this._oOpenPopoverDeferred.resolve();     this._oOpenPopoverDeferred = undefined; Unexpected 'this'.
var v=new Number(RegExp.$1);     var donotnotify=false;
if (allowedCallbacks.indexOf(name) === -1) {           throw new Error("ATRACKT ERROR: `setCallback` - `" + name + "` is not a valid callback.  Only callbacks allowed are: " + (allowedCallbacks.join(', ')));         } Expected an object to be thrown.
$.each(this.columns, function (i, column) {             that.columns[i].visible = visible;         }); Unexpected 'this'.
if (! field ||! field.name ) {    throw new Error("A field must have a name")   } Expected an object to be thrown.
function unroute() {     return unbindRoute.apply(this, arguments); }
this.dirnames.push(this.locale);     }     this.dirnames = this.dirnames.concat(srcDirnames);     if (this.document &&!this.index) { Use the spread operator instead of '.apply()'.
this.params = validator(options, 'params') || {};         this.urlParams = validator(options, 'urlParams') || {};         this.method = validator(options,'method') || 'get';         this.config = validator(options, 'config') || {}; 'this' is not allowed before'super()'.
function humanSort( array ) {    return array.sort( function( a, b ) {       var x, cmp1, cmp2;       var aa = a.split(/(\d+)/); Array prototype is read only, properties should not be added.
if (this.previous) {                 var result = this.previous.allConnections;                 result = result.concat(this.includedConnections);                 return result; Use the spread operator instead of '.apply()'.
, shared = require('./shared')  , util = require('util');
for(var j = 0; j < this[relation.name].length; j++){               if(this[relation.name][j]){                 (function(relation, subrecord){ Unexpected 'this'.
return this.fetch(offset).done(function (results) {             var result = results[this.type];             if (result && result.length > 0) {                 this._hasNextPage = true; Unexpected 'this'.
return function () {       _super.call(this);       var have = function (selector) { Unexpected 'this'.
JAK.LightBox.Anchorage.Fixed.prototype.$constructor = function(owner) {  this.$super(owner); Avoid arguments.callee.
return this.flatMap_(         makeSpawner(f),          { Use the rest parameters instead of 'arguments'.
return'school' + schoolCount.toString();     };     this.generateLanguageProperty = function(languageCount) {         return 'language' + languageCount.toString();
module.exports.createPost = function *createPost() { Missing space after *.
this.layer = new Backbone.Model();     this.model = new FormulaDataviewModel({ Unexpected 'this'.
}         }, _callee);       })); Unexpected 'this'.
})(this);
, max_iob: maxiob_data.max_iob || 0     }; ',' should be placed last.
var $export = require('./_export'); var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&'); ',' should be placed last.
if(properties.getter) {      value = typecast(this, properties.getter, value, properties);    } Unexpected 'this'.
this.creative = creative;         this.variation = variation;         super();         this.vastUtil = new VASTUtil(); 'this' is not allowed before'super()'.
this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height);     this.radius = globeModel.get('globeRadius'); };
return emit.apply(this, args) } Use the spread operator instead of '.apply()'.
}     throw new Error("internal error: no is_mul_identity value on input to replace_with_notone"); }; Expected an object to be thrown.
delete that.models[this.id];             that._initModel(that.id);         }); Unexpected 'this'.
triggerOutput(...args) {    Node.triggerOutput(...args);   } Use the rest parameters instead of 'arguments'.
}   function safeDigest(array) {    return Helpers.safeDigest(array);   } Use the spread operator instead of '.apply()'.
'use strict'; var pagelet = require('registry-status-pagelet'); var nodejitsu = require('nodejitsu-app'); ',' should be placed last.
if (this.mouseUpTime < opts.pressDuration) {                             progress("disable", $this);                         } else { Unexpected 'this'.
sensor.scale([ 0, 100 ]).on("read", function() {     console.log( this.normalized, this.constrained, this.scaled );   });
module.exports = ModelBaseClass;
function Presenter (props) {   BaseComponent.apply(this, arguments) Use the rest parameters instead of 'arguments'.
var vm = this;         vm.canBePromoted = canBePromoted;
'filter':function() {      for (var row in table.getRows()) {       if (!table.getRows().hasOwnProperty(row)) continue;       row = table.getRows()[row]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
$(this.backControl).set('html', value);                 }             }, true); Unexpected 'this'.
let dictionary = Object.keys(self.contracts);         for (className in self.contracts) {           if (self.contracts.hasOwnProperty(className)) {             contract = self.contracts[className]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
else {                     var ary_vs = [];                     data[key].forEach( function( v ) { The array literal notation [] is preferable.
e_2 = _c.sent();                             if (this.options.propagateError) {                                 _arr = []; Unexpected 'this'.
attributes += "=";      if(this.quote_attr_values || v.length == 0) {       quote_attr = true; Unexpected 'this'.
, KEYCODE_SPACEBAR = 32  , TIME_CLEAR_BUFFER_TIMEOUT = 750
{ Bad line breaking before and after ','.
clearTimeout(this.timeoutID);     this.timeoutID = setTimeout(...args);   }, Use the spread operator instead of '.apply()'.
acceptsCharsets(...args) {     return this.accept.charsets(...args);   }, Use the rest parameters instead of 'arguments'.
copiedItems.forEach(function(name){       Router[itemName] = ReactRouter[itemName]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
expect(spied).to.have.been.called();              await wcutils.delay(100); Unexpected 'this'.
vars: {       loginState : false, ',' should be placed last.
newValue = this[head].setIn(tail, value);     } else {
mejs.Utils.typeChecks.push(function(url) {         url = url.toLowerCase();         if (url.indexOf('vimeo') > -1) { Do not use String as a constructor.
:'mb.core.printclient.btn.deactivate';                     self.element.val(Mapbender.trans(buttonText));                     self._getTemplateSize(); Unexpected 'this'.
number.charAt(number.length - 1) == 'e') {           throw new Error('Lexer found invalid exponential value "' + text + '"');         } else { Expected an object to be thrown.
self.rerenderGraphs(data);       }; The function binding is unnecessary.
var r1 = oldRotation < 0? 360 + oldRotation % 360 : oldRotation % 360   var r2 = newRotation < 0? 360 + newRotation % 360 : newRotation % 360 ',' should be placed last.
function calcError(outputs, target) {       return target[this.thread.x] - outputs[this.thread.x];     }
var qs = require('qs') var settings = {} ',' should be placed last.
return error('Error loading exercise text:', err.message || err)     }.bind(this))   } } The function binding is unnecessary.
Snakeskin.addDirective(  'with', Unexpected 'this'.
}          return this._originalOnDisconnect[methodName].apply(this._originalOnDisconnect, args);   }; Use the spread operator instead of '.apply()'.
return this.getParent().sendAndReceive.apply(this.getParent(), arguments);   } Use the rest parameters instead of 'arguments'.
this,       args     ).then(function(contentAndState) { Use the rest parameters instead of 'arguments'.
morph: function (matrix) { ',' should be placed last.
describe('133. longrawProcedureBind_inout.js', function() {   var connection = null; Unexpected 'this'.
constructor() {     super();     this.type = 'prime'; Use the rest parameters instead of 'arguments'.
BTCStateProvider.prototype.getBlock = async function(network, blockId){   if (typeof blockId!=='string' ||!this.chain ||!network){     throw 'Missing required param'; Unexpected 'this'.
return!model? 'Set model or data.' : properties;       }, this.model$, this.properties$));     }, The function binding is unnecessary.
return {                'string': String.fromCodePoint(...out),                 'length': offset - start Use the spread operator instead of '.apply()'.
}   var modelPath = EmberHandlebars.get(this, 'formForModelPath', options);   options.hash.modelPath = modelPath; Unexpected 'this'.
this.height = false;   this.render = true;   this.points.origin = new Point(0, 0);   for (let k in hooklib) this[k] = hooklib[k]; Unexpected 'this'.
if (this.mainHandle) middleware.push(toThunkableFn(this.mainHandle))   middleware.push(function (done) { this.seq(this.onPreEnd)(done) })
};       RemoteStorage.Unauthorized = function(...args) { Error.apply(this, args); };       RemoteStorage.Unauthorized.prototype = Object.create(Error.prototype); Use the rest parameters instead of 'arguments'.
const originalMeteorDebug = Meteor._debug; Meteor._debug = function(...args) {  notify(...args);  return originalMeteorDebug(...args); }; Use the rest parameters instead of 'arguments'.
} else {                 throw new Error("unexpected context: name='" + context.name + "' type=" + context.type);             } Expected an object to be thrown.
verifyForm: function (button) {                 button = $(button), ',' should be placed last.
} else {         throw new Error('unsuported typed array: ${uncompressedData}');       } Expected an object to be thrown.
console.log('NOTIFY: %s@%s', key || id, id);       original.call(this);     }; Unexpected 'this'.
this.bind("enterframe", function() {     var changed = false; Unexpected 'this'.
PooledWorker.prototype.exec = function(command, options, callback) {     this.onExec(command, options, callback); }; Use the spread operator instead of '.apply()'.
callback && callback.apply(this, args);         this.trigger(context, 'route', name, args);         this.trigger.apply(this, ['route:' + name].concat(args)); Unexpected 'this'.
if (!gl)             throw new Error("failed context creation");         if ("interactor" in opts) { Expected an object to be thrown.
var debug = function() {    }; Use the rest parameters instead of 'arguments'.
.each(function() { ++n; })                .each("end.all", function() { if (!--n) callback(); });         }); Unexpected 'this'.
d3_selectionPrototype.each = function(callback) {   for (var j = -1, m = this.length; ++j < m;) {     for (var group = this[j], i = -1, n = group.length; ++i < n;) { Unexpected 'this'.
if (!this._unsubscribeFns) this._unsubscribeFns = []     this._unsubscribeFns.push(Bacon.onValues(...arguments))   }, Use the spread operator instead of '.apply()'.
];    for (var i = 0, len = this._editorTextPlusPlacements.length ; i < len ; i++)     on(this._editorTextPlusPlacements[i], "click", this.onEditorTextPlusPlacementClick); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
exports.Bucket = function(capacity) {     this._store = [];     this._capacity = capacity; The array literal notation [] is preferable.
constructor(rootPattern, referencer, callback) {         super(rootPattern);         this.referencer = referencer; 'this' is not allowed before'super()'.
var async = require('async') var should = require('should') module.exports = function(idProperty, getEngine) { ',' should be placed last.
function log(level) {   if (log.level >= level) {     console.log(...arguments);   } Use the spread operator instead of '.apply()'.
stub(Backbone.Radio, 'log');       this.channel.command('some:event', 'argOne', 'argTwo');     }
});     this.route('reroute-guid', {path: 'preprints Unexpected 'this'.
return function () {                 throw new Error("Roles cant be instantiated")             } Expected an object to be thrown.
}     return Promise.resolve(args);   } Use the spread operator instead of '.apply()'.
callback.apply(this, arguments);     }, thisPtr);    }
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.fract);     return Math.floor(x); Avoid arguments.callee.
Date.getTimespan = function(param) {     if (!param) Date prototype is read only, properties should not be added.
}       $this.parent().css({         "overflow": "hidden" Unexpected 'this'.
css: function(property, value) {     if (!this._checkElement(args[0])) { Use the rest parameters instead of 'arguments'.
} else {       path = path.fmt(...otherArgs);     } Use the spread operator instead of '.apply()'.
open_file(this, files, path, flags, check_result);         deferred.promise.then( Unexpected 'this'.
$scope.selectNode = this.selectNode;         $scope.selectedNode = this.selectedNode;
var what, a = arguments, L = a.length, ax;     while (L) {       what = a[--L]; Unexpected 'this'.
class Test extends phrase.Phrase {       constructor() {         super()         this.setState('test')       }       describe() { 'this' is not allowed before'super()'.
this.data = data!= null? data : {};     } Unexpected 'this'.
} export async function favicon_refresh_feeds({ rconn }) {   const feeds = await get_feeds(rconn, 'active');   const promises = []; Unexpected 'this'.
var log = logger.createLogger('storage:plugins:apk')   var app = express()   var server = http.createServer(app) ',' should be placed last.
, 'test same prereq twice': function () {     h.exec('../bin/cli.js foo:asdf', function (out) { Unexpected 'this'.
messages: {}    } ',' should be placed last.
data: this.get('defaultDataStructure'),   options: UNDEF, Unexpected 'this'.
socket.on('data', this.emit.bind(this, 'data'));  socket.on('close', this.emit.bind(this, 'close'));  this.emit('connection', socket); Unexpected 'this'.
.complete(function(){       unexpected_element.css({ 'opacity': 1 });     }); Unexpected 'this'.
var type = event.type || event,    ontype = 'on' + type; Use the rest parameters instead of 'arguments'.
ComponentFacet.prototype.init.apply(this, arguments);     var self = this; ',' should be placed last.
toJSON: function(...args) {    var jsonObj = Backbone.Model.prototype.toJSON.apply(this, args);    var children = this._nodes.toJSON(); Use the rest parameters instead of 'arguments'.
this.size = { radius:6, infoX:3, infoZ:3 }      this.state = 'new player'      this.color = 'rgba(240,240,240,1.0)' Unexpected 'this'.
callback.apply(this, arguments);     });    } Use the rest parameters instead of 'arguments'.
case 'LT':     return function(keyA, keyB) { return keyA < keyB[0] }   case 'GE': Use the rest parameters instead of 'arguments'.
RegExp.prototype.exec = function (str) {      var match = real.exec.call(this, str),          name, i, r2, m;      if (match) { RegExp prototype is read only, properties should not be added.
if (instructor.instructor_group_id!= null) {                         model = {};                         model.isGroup = true; The object literal notation {} is preferrable.
this.formTag(params, function () {           arguments.callee.buf = buf;           if (block) self.fieldsFor(resource, params, block);
if(!object.isValid()) {       throw new Error("Could not convert to date", expression: match, key : key, data : data);      }     } Expected an object to be thrown.
}),                     error: function () {                         this.layerJSON[url] = {};                         deferred.resolve(this.layerJSON[url]);                     }.bind(this),
$scope.$watch(angular.bind(this, function() {     return this.lang;   }), function(newVal) {     this.measureStartMsg = measureStartMsgs[newVal]; Unexpected 'this'.
_TextLayoutRun.prototype = new RefObject;  _TextLayoutRun.prototype.constructor = _TextLayoutRun; The object literal notation {} is preferrable.
if (state!== OPENED) {     throw new Error('Already closed');     } Expected an object to be thrown.
self.tag = function () {         self._apply_command(model.Model.prototype.tag, KEY_TAG);         _persist_command(model.Model.prototype.tag, arguments, KEY_TAG); Use the rest parameters instead of 'arguments'.
for (const pkg of packages) {       const packagePath = path.resolve(path.join(...[__dirname, '..', 'node_modules'].concat(pkg.package.name.split('/'))));       if (fs.existsSync(packagePath)) { Use the spread operator instead of '.apply()'.
}     this.config.cols = colList;     let filtered = data; Unexpected 'this'.
if ( failed.length ) {     throw new Error( '[CKEDITOR.resourceManager.load] Resource name "' + urlsNames[ failed[ 0 ] ].join( ',' ) +      '" was not found at "' + failed[ 0 ] + '".' );    } Expected an object to be thrown.
return {         sizeArr      : [ "s", "m", "l" ]        , widgets      : { ',' should be placed last.
, mkKey = require("../support/models").mkKey
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.sign);     return x >= 0? x : -x; Avoid arguments.callee.
,'src/core/pagelet.js'            ,'src/core/demolet.js'             ] ',' should be placed last.
SettingsWindow.prototype.removePanelItem = function(iter) {     this.panelItems.splice(iter.index, 1);     this.refreshPanelItems(); Use the spread operator instead of '.apply()'.
auth[fn].call(that, id, projectname, type, rights)                 .then(mainDeferred.resolve) Unexpected 'this'.
if (!exp.type.equals(result.type)) {         throw new Error("Shade.constant internal error: type was not preserved");     } Expected an object to be thrown.
var lazy = lazy_require({   meta : ['azk'], Unexpected 'this'.
const AudioPlayer = () => (   <JPlayer className="jp-default">     <Gui> Unexpected 'this'.
throw new Error(" I dont know how change this corpus' public/private setting");     } Expected an object to be thrown.
if (!Hash.isHash(hash)) throw new Error('Malformed hash'); Expected an object to be thrown.
} else {       const protocol = strategies[key].protocol;       const callback = strategies[key].callback; ',' should be placed last.
}                         releases = this._releases = result;                         versions = releases.filter(function (target) { Unexpected 'this'.
return {     type: actions.BACK_TO_ACCOUNT_DETAIL,     value: address, Unexpected 'this'.
name:'string',   check: function(value) {     return _.isString(value);   }, Use the rest parameters instead of 'arguments'.
localStats = new LocalStats(stream, 100, this,         eventEmitter);
try {   let caller = sugoCaller({ Unexpected space before *.
, GeometryColumnsDao = require('../../../../lib/features/columns/geometryColumnsDao')     , path = require('path') ',' should be placed last.
constructor() {     super();     this.type = 'array'; Use the rest parameters instead of 'arguments'.
else {      for (var index in this.idAttributes) {        if (!this.idAttributes.hasOwnProperty(index)) continue;        attr = utils.findAttr(node, this.idAttributes[index], null); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
delete self.container.dataset.dragging;              callback(); Unexpected 'this'.
if ($(this).text().toLowerCase() === curText.toLowerCase() ||!$(this).text().length) {                         $this.html('<em style="color: gray;">' + curText + '</em>');                     } Unexpected 'this'.
var _write = function(data, position) {  this.requires.fs.write(this.fd, data, 0, data.length, position, this.onWrite); };
name: 'date',   check: function(value) {     return _.isDate(value);   }, Use the rest parameters instead of 'arguments'.
function Dialog(selector, options) {   var _this = this;   this.elements = (0, _utils.getElements)(selector); Unexpected 'this'.
}.bind(this);
if (!await fs.exists(this.settingsPath)) {    throw new Error(`Couldn't write settings file: ${this.settingsPath}`);   } Expected an object to be thrown.
}   visit(tree._root, depth);   return this; Unexpected 'this'.
var size = {width: 960, height: 500} var projection = d3.geo.albersUsa().scale(1070) var path = d3.geo.path().projection(projection) ',' should be placed last.
'use strict'; var detective = require('detective')  , readdirp = require('readdirp');
module.exports = function (obj) {   var self = this   if (!obj ||!_.isPlainObject(obj)) { Unexpected 'this'.
if(results instanceof Array){     for(var i = 0; i < results.length; i++){      this._processResults(results[i]);     } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var middleware = _initialize(passport)   return function* passportMissingSpace(next) { Missing space after *.
} catch (err) {    throw new Error(`Cannot include file at path ${file}, non-existent or can't be read.`);   } Expected an object to be thrown.
var dataAttribute = rotateAttr? 'data-rotate' : 'data-sequence';                 $this.attr(dataAttribute, result[1]);                 if (!result[1]) { Unexpected 'this'.
extractParams(...args) {             return extractParams.apply(this, args);         } Use the rest parameters instead of 'arguments'.
} catch (error) {     throw new Error('Error creating WebGL context');   } Expected an object to be thrown.
this.compile = function () {     var src      , fn      , opts = this.opts ',' should be placed last.
else if(this.isTemperature() &&!other.isUnitless()) {         throw new QtyError("Cannot divide with temperatures");       } Expected an object to be thrown.
"use strict"; var layouts = require('../layouts');
, helpers    = require('./helpers') var toCode     = helpers.toCode ',' should be placed last.
$ops.each(function() {          data[$(this).data('opt')] = $(this).data('value'); Unexpected 'this'.
console.log(' '+ color.magenta('[' + section + ']'));     Object.keys(data[section]).forEach(function(key) {       var value = data[section][key]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var SystemJSLoader = function SystemJSLoader() {   }; Use the rest parameters instead of 'arguments'.
this.selectPath = selectPath;    this.getPathRating = getPathRating;
else if (category == 'tv') {     for (let key in data) { if (data.hasOwnProperty(key)) { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
module.exports = {   Test   : require ('test') } ',' should be placed last.
var result = exports.logWrapper('scrollHistoryModel', {}, 'orange', function () {             exports.util.apply($rootScope.$emit, $rootScope, arguments);         }); Use the spread operator instead of '.apply()'.
this._prevTime = undefined;         this._down = false;         this._move = false;     }
var toReturn = [];    for (var i = 0, len = elements.length; i < len; i++) {      toReturn.push(addElementToInternalArray(elements[i])); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if( err.name && err.name == 'ValidationError' ){     for( let error in err.errors ){       req.flash( 'flash-error', err.errors[ error ].message ); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
const version = buf.readUint16();         if (!BlockHeader.SUPPORTED_VERSIONS.includes(version)) throw new Error('Block version unsupported');         const prevHash = Hash.unserialize(buf); Expected an object to be thrown.
top: function() {         return 0;     }, Do not use Number as a constructor.
$scope.$on('$destroy', () => {       this.pageSliderPopover.remove()       this.gifPopover.remove() Unexpected 'this'.
function arrayIntersectOrSubtract(arr1, args, subtract) {   var result = [], o = {};   forEach(arr2, function(el) { Use the spread operator instead of '.apply()'.
if (statusCode < 100 || statusCode > 599) {     throw new Error('invalid HTTP code');   } Expected an object to be thrown.
, nativeTypes = require('../types/nativeTypes.js') require('../types/typePlaceholder.js') ',' should be placed last.
, less = require('gulp-less')  , assign = require('lodash/object/assign');
btn.addEventListener('click', function() { f.track('trackLink', this.href, 'link'); });  btnc.appendChild(btn);
for (var i = 0; i < shifts.length; i++) {       var shift = shifts[i] The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
global.get_nickname = function(uid){ Missing space after *.
if (this._unique) {                     throw new Error(`Uniqueness constraint violated for key ${key} on path ${this._keyPath}`);                 } Expected an object to be thrown.
export default async function register({ releaseAddress, network, txParams = {} }) {   if(!releaseAddress) throw new Error('You must provide a release address')   const kernel = await KernelProvider.fromKernelNetworkFile(network, txParams) Expected an object to be thrown.
var route = false      , path = req.url;     for (var i in this.routes) { ',' should be placed last.
function SVGSpriteStandalone(spriter, config, data) {  SVGSpriteBase.apply(this, [spriter, config, data]); } Use the rest parameters instead of 'arguments'.
Object.prototype.isType = function (t) { return t.name === Object.getPrototypeOf(this).constructor.name };         Object.prototype.typeName = function () { return Object.getPrototypeOf(this).constructor.name; }; Object prototype is read only, properties should not be added.
{         this.base(arguments, type, listener, useCapture);       } Avoid arguments.callee.
if (!opts.clearDepth.type.equals(Shade.Types.float_t))             throw new Error("clearDepth must be float");         clearDepth = opts.clearDepth.constant_value(); Expected an object to be thrown.
$controls.each(function() {         var eventType = $(this).data('disable-event');         if (!eventType) {
handle = aspect.after(field, 'complete', lang.hitch(field, function() {                 var list = this.owner, Unexpected 'this'.
this._req.socket.write(req, "ascii");   this._req.socket.write("\r\n\r\n", "ascii");   this._req.socket.flush(); Unexpected 'this'.
}                     decorator.call(this);                 } Use the rest parameters instead of 'arguments'.
function unique() { var array = Array.prototype.concat.apply(Array.prototype, arguments); var result = []; for (var i = 0; i < array.length; i++) { if (result.indexOf(array[i]) === -1) { result.push(array[i]); } } } return result; }
var key = [];     for (var i = 0, l = values.length; i < l; ++i)      { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.logger.error('Trying to initialize a ConnectionRouteManager3 without a canvas...');             throw new Error('ConnectionRouteManager3 can not be created');         } Expected an object to be thrown.
topRange(...args) {     const [startDate, endDate, timeGranularity, direction, startingAt, limit, callback] = args;
return 'parsley-' + this.group;            }, Do not use String as a constructor.
if (this._isCanceled) {       throw new Error('Failed to cancel InvalidatorSubscription: subscription cannot be canceled twice');     } Expected an object to be thrown.
function MongooseArray (values, path, doc) {   var arr = [];   arr.push(...values);   arr.__proto__ = MongooseArray.prototype; Use the spread operator instead of '.apply()'.
inherit(Merge, _AbstractPool, extend({_name:'merge'}, MergeLike)); Kefir.merge = function(obss) {   return new Merge(obss); } Use the rest parameters instead of 'arguments'.
var soda = require('soda'),                 browser = soda.createSauceClient({                     url: 'http:                     host: obj.sel_host,                     browser: obj.sel_browser                 }), ',' should be placed last.
var rec = new RecordType(this.ctor)   var failed = false   recs.push({ self: this, filteredType: rec }) ',' should be placed last.
return this.wait(this.send(msg)).then(function () {         return msg.oids; Unexpected 'this'.
for (var i = 0; i < predef.nametypes.length; i++) {             var nametype = predef.nametypes[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.triggerEvent('destroy', this);   }   code(html) {     var isActivated = this.invoke('codeview.isActivated'); Unexpected 'this'.
}(this, this.ch)); Unexpected 'this'.
if (headerOverrides) {                 for (key in headerOverrides) {                     if (headerOverrides.hasOwnProperty(key)) {                         headers[key] = headerOverrides[key];                     }
this.connect = function(...args) {       return getConnectMixin(...[this].concat(args));     }; Use the spread operator instead of '.apply()'.
} else if (typeof opt === 'object') {     for (var key in opt) { if (!opt.hasOwnProperty(key)) { continue; } The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
} else {             throw new Error('Uses require, but no AMD loader is present');           } Expected an object to be thrown.
var info = {};         for (var i = 0, l = namespace_names.length; i < l; ++i)         { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var isObject = require('./_is-object'); var meta = require('./_meta').onFreeze; ',' should be placed last.
constructor: function CommentCollection(...args) {             CommentCollection.__super__.constructor.apply(this, args);         }, Use the rest parameters instead of 'arguments'.
it("should read fields in Table", function(done) {             const groupTarget=file.openGroup('pmc/refinement', CreationOrder.H5P_CRT_ORDER_TRACKED| CreationOrder.H5P_CRT_ORDER_TRACKED); Missing space after *.
function property(name, asserter) {       utils.addProperty(Assertion.prototype, name, function (...args) {         return asserter.apply(this, args);       }); Unexpected 'this'.
, mikealRequest = require('request')  , superagent = require('superagent'); var globalCount; ',' should be placed last.
$('.star a').bind('ajax:success', function() {     $(this).toggleClass('glyphicon-star-empty').toggleClass('glyphicon-star');   }); Unexpected 'this'.
this.unbind();             if(!collection) throw new Error('collection must be defined');             if(!parentEl) throw new Error('parentEl must be defined');             this._collection = collection; Expected an object to be thrown.
if(!user)             throw new Error("need user");         if(!gistname) Expected an object to be thrown.
}   splice (...args) {     for (let i = 2, l = args.length; i < l; i++) {       if (!(args[i] instanceof Node)) throw nodeError     } Use the rest parameters instead of 'arguments'.
, self = this    , candidates = this.getCandidates(query)    , numRemoved = 0 ',' should be placed last.
if (tagName === 'INPUT') {    if ((type === 'checkbox' || type === 'radio') &&!jQuery(this).attr('checked')) {     return;
var self     = this     var accessor = Utils._.camelize('set_' + this.options.as) ',' should be placed last.
this._addObserverIfNotSpying();     const listeners = get(this, 'viewportListeners'); Unexpected 'this'.
var variables = {}; Object prototype is read only, properties should not be added.
onProcessPaste () {     } Use the rest parameters instead of 'arguments'.
class A {constructor() { this.levels = 1; }}     class B {       constructor() {         this.levels++;       }
GIFWriter.prototype.createCT = function(frame) {   var uniq    , ltable ',' should be placed last.
var Extension = require('./extension'); var ExtensionDao = require('./extension').ExtensionDao; ',' should be placed last.
this.type = type;  this.urlPrefix = '/cms/chunk/' + type + '/'; Unexpected 'this'.
var bucketGraphDate = new Date(startTime + (dayMillis * i));                 for (series in resultData){                     if (resultData.hasOwnProperty(series)) {                         resultData[series].data.push({date: bucketGraphDate, value: 0});                     }
render: function() {             ParametricResultsView.prototype.render.apply(this);             this.$content.html(this.tableTemplate()); Use the rest parameters instead of 'arguments'.
, gameObject                , gameObjectBodyCount            , i, j            , body            , container; ',' should be placed last.
return class TransitionAwareRouter extends RouterClass {     render(...args) {       return <PageContainer>{super.render(...args)}</PageContainer>;     } Use the rest parameters instead of 'arguments'.
class ServicePodConnectionEndpointList extends React.Component {   constructor(...args) {     super(...args); Use the rest parameters instead of 'arguments'.
return this.store_.put(page.serialize());     }.bind(this));   }, this); Unexpected 'this'.
}       $this.hide();     }); Unexpected 'this'.
module.exports.lowerKeys = function (obj) {     var out = {}, key;     for (key in obj) {         if (!obj.hasOwnProperty(key)) continue;         out[key.toLowerCase()] = obj[key]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
init: function() {             this._super();             Mobile.SalesLogix.History.List.superclass.init.apply(this, arguments); Use the rest parameters instead of 'arguments'.
describe("stability @skip-ci", function () {       let runs = 10;       let text = 'Delhi is New @@@ BREAKFAST-FOOD-0001'; ',' should be placed last.
} else {     this.append(`return ${val};`);    } Unexpected 'this'.
return function (scene, config) {         var _components = [],             _layer = 1, Unexpected 'this'.
}   this.signal = signal;   var windowedSignal = utilities.applyWindow(this.signal, this.windowingFunction);
callback = event.data.callback,                     panel = event.data.panel,                     hasShadow = panel.hasClass(classes.active), Unexpected 'this'.
case JSON3.stringify(Number()) === "0":           case JSON3.stringify(String()) == '""': Do not use String as a constructor.
if (!callback) return;     callback(e.message);   }); Unexpected 'this'.
it(NUM_RETRY, "should load", function(done) {       var pageLoad = true;       if(url) { Unexpected 'this'.
if (typeof source!== 'function') {     throw new Error("SlideViewer second argument should be a generator function!");    } Expected an object to be thrown.
if (typeof source === 'undefined') {    throw new Error('Missing source parameter');   } Expected an object to be thrown.
if (value.groups) {           for (i in value.groups) {             if (value.groups.hasOwnProperty(i)) {               tempMarkup      = tempMarkup + templateGroup;               subDeviceMarkup = '';
beforeEach(function() {       stub(this.controller, 'bindEntityEvents');       this.controller.channel = Backbone.Radio.channel('foo');     });
getAddOverlayData = function() {             var accountDef = this.sandbox.data.deferred(),                 contactDef = this.sandbox.data.deferred(),                 data = []; Unexpected 'this'.
var concat_node_distro_files = [ 'src/typeParser.js','src/JsDocMaker.js' ',' should be placed last.
var diff     = jsdiff.createPatch(info.outputPath, result.output.toString(), result.input);   var diffPath = path.join(this.tmpDifferenceDir, 'currentDiff.diff');
emit(...args) {     this.get('socket').emit(...args);   }, Use the spread operator instead of '.apply()'.
each(seed.nodes, function(nodeData) {       this.create(nodeData);     }.bind(this));
(function (me){ var wnr = { Unexpected 'this'.
var specProps = SchemaOrg["types"][id]["specific_properties"];         for (var p in specProps) {             if (!specProps.hasOwnProperty(p)) continue;             var pId = specProps[p]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
if (!stream ||!host)              throw new Error('new Pipe(host,stream[,opts])'); Expected an object to be thrown.
if (subscription == null) {         console.log("can not create subscription");         return -1;     } Expected an object to be thrown.
format: function (msg, args) {         for (var i=0; i<args.length; ++i)             msg=msg.replace('{}',args[i]); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
test.get('scope').forEach(function (scope) {       var candidates = DOM.scry(selector, scope);       if (candidates.length === 1) { Unexpected 'this'.
if (!conf.bLight)   throw new Error("light but updateLinkProofsOfPrivateChain");  if (!onFailure) Expected an object to be thrown.
var self = this;   this.app.on( 'new_session', function( session ) {     self._create_user_identity( session );   } ); Use the spread operator instead of '.apply()'.
, hyperquest = require('hyperquest')  , defaults   = {method: 'POST', headers: {'content-type': 'application/json'}} ',' should be placed last.
paths = pathHelper.simplifyPaths(paths);         for (let i = 0; i < paths.length; i++) {             const path = paths[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var Boom         = require('boom')  , Class        = require('../class') ',' should be placed last.
handlers.forEach(function (handler) {                     handler(...args);                 }); Use the spread operator instead of '.apply()'.
var mixin = require('utils-merge')  , escapeHtml = require('escape-html') ',' should be placed last.
return (this.hasTagsInContent(node) && this.isBlock(node))      || node.children.some(function(child) {      return this.isBlock(child);     }, this); Unexpected 'this'.
sel.options.length = 0;     var opt = document.createElement("option");                 var ore = [];                 for(var oKey in this.ore) {                     if(!YAHOO.lang.hasOwnProperty(this.ore, oKey)) continue;                     ore.push(oKey); The array literal notation [] is preferable.
if (!style) {     throw Error('Trying to set block style before Blockly.setStyle() has been called');   } Expected an object to be thrown.
})(enyo); Unexpected 'this'.
onDragStop: function() {             Garnish.requestAnimationFrame(function() {                 this.trigger('dragStop');                 this.settings.onDragStop(); Unexpected 'this'.
setupController(controller) {     this._super(...arguments); Use the spread operator instead of '.apply()'.
placeholder="new@user.com"               error={tooltip}             /> Unexpected 'this'.
var MenuItem = function(domNode) {   this.domNode = domNode;   this.submenu = null; Unexpected 'this'.
if (!expanded_set.length) return '';       return char.call(this, randSelect.call(this, expanded_set), this.ignoreCase);
function LocationRatingChickController() {         var vm = this;         vm.$onInit = function() { Unexpected 'this'.
const args = new Array(arguments.length);     for (let i = 0; i < arguments.length; i++) {         args[i] = arguments[i]; Use the rest parameters instead of 'arguments'.
var Formula = function () {     this.init(); }; Unexpected 'this'.
renderFilter() {     let model = this.props.model      , filters = model.filters || [] ',' should be placed last.
var providers = [];   for(var i = 0, len = services.length; i < len; ++i)   { The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
const wrapCBMiddleware = function wrapCBMiddleware(handler, action) {   if (this.options.circuitBreaker) {    return function circuitBreakerMiddleware(ctx) { Unexpected 'this'.
_forwardEvents: function(view, prefixer) {         this.listenTo(view, 'all', function(args) {             var prefix = _.result(this, prefixer); Use the rest parameters instead of 'arguments'.
let arr = document.getElementsByClassName('dot')         for (let i = 0; i < arr.length; i++) {             arr[i].style.background = '#8492A6' The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.set('boundResize', this.triggerResize.bind(this));     Ember.run.next(this,'onResize');   }.on('init'), Unexpected 'this'.
$toinsert.find( "table" ).addClass("table table-condensed table-nonfluid");     n = $toinsert.find( "table" ).length;     console.log ("beautified "+n+" tables in output..."); Use the rest parameters instead of 'arguments'.
var requestPromise = PromiseController.create({         promise: this.get('model').save().catch(function(modelErrors) {           if (modelErrors.length > 0) {             this.set('errors', this.get('model.errors')); Unexpected 'this'.
if (!response.is_response(resp)) {           throw new Error("Error: node.js http adapter did not receive a proper response map")         } Expected an object to be thrown.
, replaceDateHeader = require('./replace-date-header')  , getHttpResponseData = require('./parse-http-response'); ',' should be placed last.
el.removeEventListener("touchend", registerCoordinates);     })   }; The function binding is unnecessary.
function _encapsulateTwoParam (context, cb) {     if (func.length === 0 || func.length === 1) {       func(this)       process.nextTick(cb) Unexpected 'this'.
if (this.maintainCollections) {       this.collections = {};     }
loaders: [             {test: /\.css$/, loader: "style!css"}            , {test: /\.scss$/, loader: "style!css!sass"} ',' should be placed last.
withoutConversion(() => {       for (let key in props) {         if ({}.hasOwnProperty.call(props, key))           defineReactive(vm, key, getPropValue(data, key))       }     }) The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
internals.addMethod(['most'], function (value) {     return this.assert(this._ref <= value, 'be at most'+ value); });
deferred.resolve(remoteContent)     })     this.getRemoteContent(hash) The function binding is unnecessary.
this.on(configFile.events.end, function () {    fs.rename(path.join(this.destinationRoot(), '.yo-rc.json'), path.join(this.destinationRoot(),'setup.json'), function (err) {     if (err) _this.log('ERROR:'+ err); Unexpected 'this'.
function get() {     return this._paddingBottom; }
, path = require('path')  , vm = require('vm'); try { ',' should be placed last.
class NodeHealthStore extends GetSetBaseStore {   constructor(...args) {     super(...args); Use the rest parameters instead of 'arguments'.
{   grunt.fail.warn (icsprintf('yellow',arguments)); }; Use the spread operator instead of '.apply()'.
function L(...args) { if (Ornament.DEBUG) Vex.L('Vex.Flow.Ornament', args); } Use the rest parameters instead of 'args'.
},         disable: function(...args) {             return this.applyWidgetFunction('enable', args);         }, Use the rest parameters instead of 'arguments'.
ugenInterface[key.substr(1)] = fn(function() {           var args = slice.call(arguments, 0, arguments.length - 1);           var instance = ctor.apply(new Klass(name), args); Use the rest parameters instead of 'arguments'.
Error.call(this);     Error.captureStackTrace(this, GitError);     var typeKey = _.first(_.where(_.keys(defs), function(defKey) { Avoid arguments.callee.
var request = require('request') var should = require('should') var qs = require('qs') var express = require('express') ',' should be placed last.
var PlatformStream = require('stream') var Stream = require('readable-stream') var isStream = require('isstream') ',' should be placed last.
if (e.keyCode === KEYS.SHIFT) {                 doc.data('expandmode', false);             } Unexpected 'this'.
var lease = $(this).parents('tr').attr('ip');         if (lease === "undefined"){           lease = $(this).parents('tr').attr('mac');         } Unexpected 'this'.
this.model = (model_!= null) && model_ || (function() {           throw new Error("Missing object model input parameter.");         })(); Expected an object to be thrown.
if (!filename) {       throw new Error("Cannot find module: " + request + ". Have you run `npm install.`?");     } Expected an object to be thrown.
(function() { Tabs.__working = false; }).bind(this).delay(duration);     }
var output = config.path.output;       var key    = this.__handler_id; Unexpected 'this'.
item.GitUrl = gitUrl;      exports.getDefaultSshOptions(serviceRegistry, item).then(function func(options) {       var gitConfigPreference = new GitConfigPreference(serviceRegistry); Avoid arguments.callee.
if (!input) {           throw new Error('Input does not exist:'+ name);         } Expected an object to be thrown.
this._element = window;   this._element.qx_ClientWindow = this;
Promise.all(this.evaluator.evaluate(this.w, context));       expect(github.issues.removeAssigneesFromIssue).toHaveBeenCalledWith({ Unexpected 'this'.
ctx.fillStyle = options.lineColor;  for(let b = 0; b < binary.length; b++){   var x = b * options.width + encoding.barcodePadding; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
, configPath    , version   checkPython() ',' should be placed last.
this.on('popoverInitialize', function() {                 var self = this, Unexpected 'this'.
function conjunction() {      return OPTREES[this.match(/^AND/i).toUpperCase()]; Unexpected 'this'.
this.g = new dagre.Digraph();  for (var i=0;i<this.graph.nodes.length;i++) {   var node = this.graph.nodes[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
, currentDoc: null   } ',' should be placed last.
var onDelayTrigger = window.setTimeout( function() {                 that._sendQueriesBatch(as, params, callback, classToDerive);             }, delay); Unexpected 'this'.
saveOnUpdate() {     if (Tracker.isAutoSaveEnabled(this) || Tracker.isIsDirtyEnabled(this)) {       this.saveChanges(); Unexpected 'this'.
if (this.state.dashboardIsOpen) Actions.openDashboard(this.state.panelIndex)   const panel = this.state.panels[this.state.panelIndex]
.service('global_functions', function() {     this.showTimestamp = function(timestamp) {
}     with(...args) {       return args.reduce((c, m) => m(c), this.superclass);     } Use the rest parameters instead of 'arguments'.
ListBase.prototype.onItemSelectedChange.apply(this, arguments);   this.updateSelectAllCheckbox();  }; Unexpected 'this'.
keyup: function (e) {             switch(e.keyCode) { ',' should be placed last.
precedence : 0,     method : this._applyBinary(Tone.Divide)    }, Unexpected 'this'.
for(var k in apiCalls) {       if(apiCalls.hasOwnProperty(k)) {         var spec = apiCalls[k].split(' ');         for (var i = 0; i < spec.length; i++) {
for (j in that.markers.groupOptions[group]) {         if (that.markers.groupOptions[group].hasOwnProperty(j)) {           marker[j] = that.markers.groupOptions[group][j];         }
function setStateImpl(state, cb) {     if (isFn(cb)) { Unexpected 'this'.
}     function notifyOnbind(data) { if (this.__onbind) this.__onbind(data); }     function notifyOnboundedUpdate(data) { if (this.__onboundedupdate) this.__onboundedupdate(data); }
hasParams(...args) {             return hasParams.apply(this, args);         }, Use the rest parameters instead of 'arguments'.
$(this).val( value ); }
};     WhileStatement.prototype.getCondition = function(){         return this._condition;     };
var pruned = [];  for (var d in grouped) {      if (grouped.hasOwnProperty(d)) {   pruned.push({ command: grouped[d], description: d });      }
var cbCount = connections.length, cbIndex = 0;   for (var i = 0; i < connections.length; i++) {    var url = connections[i].url.replace('memcached: The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
} catch (e) {     throw new Error(filePath +'' + filename +'load failure!');   } Expected an object to be thrown.
var callback = sinon.spy();     this.srp.identify = callback;     this.srp.register();     this.expectRequest('register/salt/', "I=user");     this.respondJSON({salt: "5d3055e0acd3ddcfc15"}); Unexpected 'this'.
, y       = [ 0, 0, 0 ]    , runs    = [ new Run([NEGATIVE_INFINITY, NEGATIVE_INFINITY, NEGATIVE_INFINITY], -1) ]; ',' should be placed last.
this.logger.debug('Found Eureka Server @ ', results);         callback(results);       }); Use the spread operator instead of '.apply()'.
this;   function Swipe(container, options) { Unexpected 'this'.
setTimeout(key, fn, waitTime) {         if (this._timeouts[key]) throw new Error('Duplicate timeout for key'+ key);         this._timeouts[key] = setTimeout(fn, waitTime); Expected an object to be thrown.
if (head!= 'BSDF') {         throw new Error("This does not look like BSDF encoded data: " + head);     } Expected an object to be thrown.
if(!this.published) {    throw new Error("This blog post is not published");   } Expected an object to be thrown.
var Component = Base.extend(Callback, {  _events: [ 'onChange', 'onClick' ], Unexpected 'this'.
var ByteCode = new Array(); var ArrayType = {}; ByteCode.codes = { The array literal notation [] is preferable.
} else {       this.file_.data = this.file_.data.substring(0, this.file_.size);     } Unexpected 'this'.
this.file = opts.file   this.query = require(entity.app.path + '/' + this.file)  } 'this' is not allowed before'super()'.
return this._config; }; Use the spread operator instead of '.apply()'.
function scrap(from, to, dates, persistData) {         var driver = startBrowser(that.browser);         for (let targetDate of dates) { Unexpected 'this'.
var validUrl var malformedUrl var invalidUrl ',' should be placed last.
e.target.removeEventListener(e.type, handler);           return callback(e); Avoid handler.
try {         return Ext.Element.prototpye.origContains.apply(this, [arguments]);     } catch(e) { Use the rest parameters instead of 'arguments'.
this.physics.add.collider(player, bottomLayer)   this.physics.add.collider(player, middleLayer)   this.physics.add.collider(player, topLayer) Unexpected 'this'.
this.model = ((model_!= null) && model_) || (function() {           throw new Error("Internal error missing model input parameter.");         })(); Expected an object to be thrown.
}).call(this);
}); Ember.TEMPLATES["articles/create"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) { this.compilerInfo = [4,'>= 1.0.0']; helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {}; Unexpected 'this'.
if (!darkener ||!navigationContainer) {             throw new Error('Could not find needed elements (Darkener and/or NavigationId)');         } Expected an object to be thrown.
var onMutated = bind(this, '_onItemSetMutated')    this._itemSetSubs = this.server.subscribeToItemSetMutations(request.id, onMutated)   })
if( gradientColor!= null && percents!= null ) {         gradient = [];         for( var i = 0; i < gradientColor.length; i++ ) { The array literal notation [] is preferable.
const nestedVariable = getFirstQuotedString(this.test.title).split('.');  const value = nestedVariable.reduce(   (currentObject, nextKey) => currentObject[nextKey], Unexpected 'this'.
(item.dataSource.entities.values || []).forEach(function(entity) {                             var hash = entityHash(entity);                             var feature = Feature.fromEntity(entity); Unexpected 'this'.
return function jsonErrorHandler(next) {     let status; Unexpected space before *.
this.getFeatureType = function(layer) {       var featureType = layer.get('metadata').name; Unexpected 'this'.
this.contract.reserveTicket.sendTransaction(ticketId, txHash, powNonce, objParam, function (err, res) {         if (err) { Unexpected 'this'.
var Collection = require('../src/collection').Collection        , ChangeType = require('../src/changes').ChangeType;     beforeEach(function () { ',' should be placed last.
, "main/contentIO"  , "dijit/MenuBarItem" ], function( ',' should be placed last.
var ret = [];       for(var i = 0; i < currentLists.length; i++) {         ret.push(new ListsTweetsTimeline(this.template.id + '_' + i, this.tweetManager, this.template, currentLists[i], i)); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
var results = flattenComponentForCaption(cap.components.children[ii]);         for (var jj = 0; jj < results.length; jj++) {           var result = results[jj]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
isData: true,   model: this.model,   __path: function(){return '';}, Unexpected 'this'.
async abort(tx) {         throw new Error('Unsupported operation');     } Expected an object to be thrown.
speed: 'fast',           display: true         }, Unexpected 'this'.
if (properties) {     for(var name in properties){      if (!properties.hasOwnProperty(name)) continue;      var value = properties[name]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
flexo.then(this.deserialize(child), append);     }, this).then(funcify(elem));   } Unexpected 'this'.
var util = require('util')  , concat = require('concat-stream'); ',' should be placed last.
.bind( "mouseleave", function() {                                 $(this).fadeOut( "fast" )                             }); Unexpected 'this'.
var model = Model.compile('_mapreduce_' + res.collection.collectionName,           Model.mapReduce.schema, res.collection.collectionName, _this.db); Unexpected 'this'.
{  var info = []; The array literal notation [] is preferable.
if (partialRightArgs) {         args = composeArgsRight(partialRightArgs, partialRightHolders, args);       }       if (isCurry && length < arity) {         bitmask |= PARTIAL_FLAG;
updateFavoriteTeams($(this).attr("data-team"), 'add', false); Unexpected 'this'.
let args = [parentProto, params].concat(dependants.slice(parentProto.cNumDependants));         return S$.t(...args);     } Use the spread operator instead of '.apply()'.
animationEvents.forEach(function(evt) {         evt.removeEventListener(this.listener, false);       }.bind(this)); Unexpected 'this'.
if (obj.property.type!== 'Identifier') {     throw new Error('Property should be Identifiers');   } Expected an object to be thrown.
function onChange(model) {   if (this.contains(model) && this._collection.indexOf(model)!== modelInsertIndex(model)) {     this._collection.remove(model); Unexpected 'this'.
import U from "src/util/util.js";
var flatData = { data: [].concat(...results) };                         flatData.data.forEach(function (data) { Use the spread operator instead of '.apply()'.
}         throw new Error("type mismatch on sub: unexpected types  '"                    + t1.repr() + "' and '" + t2.repr() + "'."); Expected an object to be thrown.
if (that.loops[key] === undefined) {      throw new Error("animation loop not found");     } Expected an object to be thrown.
var password = arguments.length <= 1 || arguments[1] === undefined? "pass1234" : arguments[1];    var callback = arguments[2];    var self = this; Use the rest parameters instead of 'arguments'.
}       if ($link.attr('href') === '#map-panel') {         if (!_this.isOldIe) { Unexpected 'this'.
{             StringPrototype.isNullOrEmpty = function ()             {                 return (this == null || this === "");             }; StringPrototype is read only, properties should not be added.
if (elems.length!== 0) {       for (let i = 0; i < elems.length; i++) {         elems[i].style.cssText = "display: none;" The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
angular.module('umbraco.services').factory('archetypeService', function () {          function executeFunctionByName(functionName, context, args) {         var args = Array.prototype.slice.call(arguments).splice(2); Use the rest parameters instead of 'arguments'.
makeElectorTries(arguments[0].url, {reset: true, priority: 0});         tryElector(url);       } else { Use the rest parameters instead of 'arguments'.
}         this.tableTab.setActiveLayer(layerView); Unexpected 'this'.
</div>         <div className="dib right fr" onClick={this.toggleMenu}>           <img Unexpected 'this'.
constructor(args) {         super(args);         this.setName(_.get(args, 'name', ''));         this.addServiceDefinitions(_.get(args,'serviceDefinitions', [])); 'this' is not allowed before'super()'.
if (this.profile._id) {             user = Meteor.users.findOne({ _id: this.profile._id });           } else { Do not use String as a constructor.
}  checkAssertions(obj, this); }); Unexpected 'this'.
if ( Number.isInteger(b.re) && b.re <= 0 && b.im === 0 )       throw Error( 'Hypergeometric function pole' ); Expected an object to be thrown.
if (this.data.replyMode) { Unexpected 'this'.
var dashboards = result.data;                                         for (var d = 0; d < dashboards.length; d++) {                                             allowedDashboardIds.push(dashboards[d].id.id); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
}                     for (var i = 0; i < config.datasources.length; i++) {                         var datasource = config.datasources[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for (var key in dataKeys) {    if (dataKeys.hasOwnProperty(key)) {     sumRows.forEach(function (total) {      if (dataKeys[key] === total) {
throw new ArgumentNullException(TARGET);         return target instanceof PromiseBase? target : new PromiseWrapper(target);     } Unexpected 'this'.
,sequencer:null  ,timer:null ',' should be placed last.
, concatStream = require('concat-stream')  , extend       = require('./util').extend ',' should be placed last.
debug( 'Current value: %s.', this._xAxisOrient );  oldVal = this._xAxisOrient;
Context.prototype.run = function() {   Object.keys(this.schema).forEach(function(key) {     var rules = this.schema[key]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
onStart (...fns) {     if (fns.length === 0) { Use the rest parameters instead of 'arguments'.
Meteor.publish('user', function() {   check(arguments, Match.OneOf({}, null, undefined));   return Meteor.users.find( Use the rest parameters instead of 'arguments'.
}       login_list.sort(function(a,b){ return b.name.length - a.name.length });     }); Unexpected 'this'.
defaulter.set('jsonifyCompilerStats', function (stats) {       return stats.toJson(this.statsToJsonOptions)     }) Unexpected 'this'.
dc.multiGroupMixin = function (_chart) {     _chart._groups   = [];     _chart._groupGap = 5; The array literal notation [] is preferable.
format: function format() {             var args = Array.prototype.shift.call(arguments);             return Array.prototype.shift.call(args).replace(/%s/g, function () { Use the rest parameters instead of 'arguments'.
let types = join(map(validators, "validators.0.name"), ", ");     throw new WatsonsError(`Value at key path '${formatKeyPath(keyPath)}' \ should be one of type [${types}].`);   } Expected an object to be thrown.
const { writeFileSync } = require('fs') function robotsModule (moduleOptions) {   const options = getOptions(moduleOptions) Unexpected 'this'.
for (let n = 0; n < clustersToOpen.length; n++) {         this.openCluster(clustersToOpen[n], {}, false ); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.destroy = function () {     this._destroy();
});                 if (matchedPhoneNumber && matchedPhoneNumber.phoneNumber!== this.dialInNumber) {                   this.updateDialInNumber(matchedPhoneNumber.phoneNumber); Unexpected 'this'.
parentInstance.fire(...args );  }); Use the spread operator instead of '.apply()'.
, self = this    , options = {};
it('client.url() new', function() {     return Globals.protocolTest({       assertion: function(opts) { Unexpected 'this'.
b.prototype.elementInActiveFormattingElements = function(name) {  var els = this.activeFormattingElements;  for(var i = els.length - 1; i >= 0; i--) {   if(els[i] == HTML5.Marker) break; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
debug( 'New value: %s.', this._title );  this.emit( CHANGE_EVENT ); } Unexpected 'this'.
var game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', { preload: preload, create: create, update: update, render: render }); function preload() { Unexpected 'this'.
var CliResize = require("cli-resize")  , OArgv = require("oargv")   ; ',' should be placed last.
chatMethods: function() {    return get( this, "settings.content.constructor.chat_methods" ).filter(function( method ) {     return!method.disabled; Unexpected 'this'.
this.isNull = false;                 for (var key in this.attributes) {                     if (this.attributes.hasOwnProperty(key)) {                         this.attributes[key].update(plainValue[key], setOldValue, this.bubble);                     }
return callback.apply( this, [ e ].concat( e._args ) );   }
{       name: 'Coffeescript', ',' should be placed last.
})(Issues = exports.Issues || (exports.Issues = {}));
import { remove_items } from "./index";
refreshMetrics();   setInterval(refreshMetrics, conf.small_interval * 1000); } Unexpected 'this'.
exception = _error;                 throw new Error("Error executing error handler function callback: " + exception);               } Expected an object to be thrown.
RouteController.prototype.init = function (options) {   RouteController.__super__.init.call(this, options);   this._computation = null; Use the rest parameters instead of 'arguments'.
var attributes = {}            , foreignIdentifier = association.foreignIdentifier;           var sourceKeys = Object.keys(association.source.primaryKeys); ',' should be placed last.
app.simulation.run(false)         var link = app.data.links[$link.data('id')]         link.disabled =!link.disabled; Unexpected 'this'.
Connection.prototype.setCredentials = function(username, password) {   this.credentials = {};   this.credentials.username = username; The object literal notation {} is preferrable.
constructor(props) {         super(props);         this.stores = { 'this' is not allowed before'super()'.
});     var json = {};     json.params = list;     console.log("json: " + JSON.stringify(json)); The object literal notation {} is preferrable.
this.extraVariables_ = {};   } The object literal notation {} is preferrable.
if (player.paused) {        playButton.addClass('playing');        player.play(); Unexpected 'this'.
function mousewheel() {     if (!translate0) translate0 = location(d3.pointer(d3.event));     scaleTo(Math.pow(2, d3_behavior_zoomDelta() *.002) * scale); Unexpected 'this'.
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SUB", Array.slice(arguments));   }, Avoid arguments.callee.
paths = pathHelper.simplifyPaths(paths);         for (var i = 0; i < paths.length; i++) {             var path = paths[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
for (var i in options) {                 if (options.hasOwnProperty(i)) {                     $currentEl.find('[data-key="' + i + '"]').html(options[i]);                 }
this      .box0('126:0', side - ( 2 + (i * 2) ), 1, side - ( 2 + ( i * 2) ))      .fwd() Unexpected 'this'.
, Marionette = require('marionette')    , RecordsTableRowView = require('views/records/records_table_row_view'); ',' should be placed last.
,   'color': '#FFEB3B'                 } ',' should be placed last.
var n = 15         var c = 1         var ids = [] ',' should be placed last.
function StringBuilder(value)  {      this.strings = [];      this.append(value); The array literal notation [] is preferable.
throw new Error('User canceled authorization');       } Expected an object to be thrown.
this.useRefTransfMatrix_loc;   this.useTexture_loc;   this.invertNormals_loc;  }; Unexpected 'this'.
var combinedTableAttributes = {}       var sourceKeyType = this.source.rawAttributes[this.source.primaryKeyAttribute].type       var targetKeyType = this.target.rawAttributes[this.target.primaryKeyAttribute].type ',' should be placed last.
$.ajax({      url: $link.attr('href'),      context: document.body, Unexpected 'this'.
this.trigger('sortChange');                 this.settings.onSortChange();             }.bind(this));         }, Unexpected 'this'.
$(editor).bind('kmlLoaded', function(event, original_event, kmlObject){                         callback(this, this.el, kmlObject)                     }); Unexpected 'this'.
}                         });                         angular.copy(leafletBoundsHelpers.createBoundsFromArray([ Unexpected 'this'.
Handlebars.registerHelper('each', function(path, options) {   options.hash.contentBinding = Binding.from('*'+path, this);   options.hash.preserveContext = true; Unexpected 'this'.
} else if (p[0] === '!') {      throw new Error("didn't handle special property " + p);     } else if (p === "prototype") { Expected an object to be thrown.
opt_step = 1;   }   else if(args.length === 3 && args[2] === 0) {     throw new RangeError("opt_step can't be 0"); Use the rest parameters instead of 'arguments'.
}).call(this);
click: Y.bind(function() {                             var libraries = this.scripts? this.scripts.get('val') : {};                             this.currentScriptName = prompt('Enter a name:'); Unexpected 'this'.
_RenderContext.ToArray = function (args) {      var arr = [];      for (var i in args) The array literal notation [] is preferable.
bw.displayIngameMessage('it\'s much more sophisticated!', 60000)   var chatStream = bw.chatHandler.grabExclusiveStream()   var remote = repl.start({ input: chatStream, output: chatStream, terminal: false })   chatStream.setMessageTimeout(60000) ',' should be placed last.
blogObserver: observer('blog.isResetRequested', function() {         const blog = this.get('blog');
events.forEach((event) => {       emitter.addListener(event, (...args) => {         args.unshift(event); Use the rest parameters instead of 'arguments'.
} else {             return yield* UserBase.prototype.save.call(this, context);         } Use the rest parameters instead of 'arguments'.
render() {         let popupClass = ''         if (this.state.values.length > 1) { ',' should be placed last.
formatic.form.component = function (field, props) {     field = field || this.run(this.root, this.data);     var view = views[field.type]; Unexpected 'this'.
var sum = 0.0;       for (var i = 0; i < scores.length; i++) {         sum += scores[i]; The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
element.remove();   } Unexpected 'this'.
this.instance.listen();         Handsontable.editors.TextEditor.prototype.focus.apply(this, [text]);     }; Use the rest parameters instead of 'arguments'.
var stepHandler = function () {             util.batch.apply(util, [beforeHandlers].concat(handlerArgs)); Use the spread operator instead of '.apply()'.
, GeoPackage = require('../../lib/geoPackage')     , FeatureColumn = require('../../lib/features/user/featureColumn') ',' should be placed last.
var clean = [];       for (var i = 0; i < cResults.length; i++) { The array literal notation [] is preferable.
base: 'SauceLabs'  , browserName:'safari' }; ',' should be placed last.
rpcHandler.unregisterActiveLoader(loaderId);         done(...args);       }); Use the spread operator instead of '.apply()'.
options = _.extend({reindex: true}, options || {});         if (options.reindex) {           this.shadowCollection.reset(collection.models);         }       };
, types = require ('./lib/types')  , sourceExtract = require ('./lib/sourceExtract'); ',' should be placed last.
multiply: function (matrix) {       return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native())) ',' should be placed last.
}   newmoov = concat(...newmoov);   newmoov.set(itobe4(newmoov.length), 0); Use the spread operator instead of '.apply()'.
if (!this.options.prefix) {    throw new Error('Prefix missing for formset.');   } Expected an object to be thrown.
,     function _putIntegrationRequest(arn, callback) {
if (!userConfigExists) {     throw new Error('Must contain md-seed-config.js at the project root. run `md-seed init` to create the config file.')   } Expected an object to be thrown.
var ps=method.head.params? method.head.params.params : null;         if (ps &&!ps.forEach) throw new Error(method+" is not array");         if (ps) res=res.concat(ps); Expected an object to be thrown.
render: function(){     var timeListID = this._id('_time_listbox')      , timeOptID  = this._id('_time_option')      , dateListID = this._id('_cal') ',' should be placed last.
if (pathId_ == null) {               throw new Error("Missing path input parameter.");             } Expected an object to be thrown.
this.actionsMatching = [];     };
,'reduceRight'      ,'sort'     ] ',' should be placed last.
exception = _error;             throw new Error("openObserverNamespaceState failure: " + exception);           } Expected an object to be thrown.
console.error(dist);       throw new Error('Enumerate can only be used with distributions that have finite support.');     } Expected an object to be thrown.
var opts = _.extend({}, assemble.options, options);              var root = path.resolve(opts.root || assemble.get('root')); Unexpected 'this'.
var sign = isRequire? 1 : -1;   _.each(_.flatten(args), function (f) {     if (f instanceof Logic.NotFormula) { Use the rest parameters instead of 'arguments'.
$('.confirm-button').on('click', function(event) {   var $this = $(this);   var isThoughAjax = $this.data('ajax'); Unexpected 'this'.
var col = {};     col.title =  'Mode';     col.readOnly = true; The object literal notation {} is preferrable.
commandMenu.style.fontWeight = 'normal';     commandMenu.style.border = '1px solid #dedede';     commandMenu.style.backgroundColor = '#efefef'; Unexpected 'this'.
return xhr(); Use the rest parameters instead of 'arguments'.
var morphs = new Array(morph_ixs.length);     for (var i = 0, l = morph_ixs.length; i < l; i++) {       morphs[i] = dom.createMorphAt(dom.childAt(fragment, [morph_ixs[i]]), 0); The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.
this.init = function()         { Unexpected 'this'.
function normalize(schema, options) {     options = pick(...[options].concat([         'component', Use the spread operator instead of '.apply()'.
const props = { visible, setVisible, togglePopover };   const inner = this.props.children(props);   if (isFragment(inner)) { Unexpected 'this'.
, RE_JS_COMMENT_LINES = /^\s*(?:\/\/|#).+$/gm , RE_CSS_COMMENT_LINES = /((?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/))$/gm , RE_JSON = /\.json$/; ',' should be placed last.
if (this.syncBody) {       dom(this.$.body).observeNodes(function() {         if (!this.__lock) {           this.__lock =!0; Unexpected 'this'.
var env = {};       var progress = Helpers.newPullProgress(that); Unexpected 'this'.
Blockly.Variables.createVariableButtonHandler(this.workspace_, function(text) {         var variable = this.workspace_.getVariable(text, selectedValueType);         that.setValue(variable.getId()); Unexpected 'this'.
, '')  const script = new vm.Script(stringScript, options)  script.runInNewContext(sandbox)  return sandbox.module.exports Do not use String as a constructor.
this.unlinkDataSource(this.ds1, '_link2', this.pathTranslation2);  this.unlinkDataSource(this.ds2, '_link1', this.pathTranslation1);  this.isOn = false; Unexpected 'this'.
(function() {   var SimditorMarkdown,     __hasProp = {}.hasOwnProperty, Use the rest parameters instead of 'arguments'.
if (x === 0) {                 throw new EvalError("Divide by Zero. Value:<" + x + ">.");             } Expected an object to be thrown.
var lazy = lazy_require({   VM: ['azk/agent/vm'], Unexpected 'this'.
var contexts = context? Array.prototype.slice.call(arguments, 1) : [],         currentState = get(this, 'currentState') || this;
router[method].should.be.type('function');         router[method]('/', function () {});       }); Unexpected space before *.
id: id,                             component: that.component,                             time: typeof time!= 'undefined'? time : new Date().getTime() Unexpected 'this'.
{         throw new Error("The only and except options can't be used together.");     } Expected an object to be thrown.
var row = $(this).closest("table").find("tr").index(this);     switchEditShareMemo(row);     return false; Unexpected 'this'.
$(document).bind('activateControls.templateItems', function(e, opt) {     var groupableItems = [];     $('a[rel=remove]').itemRemove({ The array literal notation [] is preferable.
seriesGroups[i].attr({        'series-name': that.data.series[i].name       }, Chartist.xmlNs.uri); Unexpected 'this'.
console.warn(discarded +'\u5DF2\u7ECF\u88AB\u5E9F\u5F03\uFF0C\u8BF7\u4F7F\u7528' + hook);                 return fn2.call(instance, e);             } Use the rest parameters instead of 'arguments'.
function handleInjectedCss(style, css) {   watch(css.watch, file => {     const notification = ui.notification('Injecting', file)     log.debug('Injecting style', css.path) ',' should be placed last.
response = taskResponse;                   }                   ); The function binding is unnecessary.
TCPSocket.listen = TCPSocket.prototype.resume = TCPSocket.prototype.suspend = TCPSocket.prototype.upgradeToSecure = function() {         throw new Error('API not supported');     }; Expected an object to be thrown.
this.inst.animateTo(destPos, 0);
if (!opts.clearDepth.is_constant())             throw new Error("clearDepth must be constant expression");         if (!opts.clearDepth.type.equals(Shade.Types.float_t)) Expected an object to be thrown.
this._destroyed = false;             this.actor.connect('destroy', this._onDestroy);
, thumb_width: 90    , li_width: 90    , li_margin: 10 ',' should be placed last.
.textinput();  if ( $this.jqmData( "inset" ) ) {   wrapper.addClass( "ui-listview-filter-inset" ); Unexpected 'this'.
},   resetLoaders: function() {     this.loaders = {};   }, Unexpected 'this'.
ve.init.mw.ViewPageTarget.prototype.tearDownToolbar = function () {  this.toolbar.$bar.slideUp( 'fast', function () {   this.toolbar.destroy();   this.toolbar = null; Unexpected 'this'.
tman.it('post /api/echo', function * () {     yield request.post('/api/echo') Missing space after *.
function e() {             var e = t.call(this) || this;             return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._layer.addChild(e._img3), e._img2 = new PIXI.Sprite, e._layer.addChild(e._img2), e._img1 = new PIXI.Sprite, e._layer.addChild(e._img1), e._basePos1 = new PIXI.Point, e._basePos2 = new PIXI.Point, e._basePos3 = new PIXI.Point, e._tweens = [], e         } Use the rest parameters instead of 'arguments'.
if (err) { callback(err); return; }           Array.prototype.slice.call(arguments, 1).forEach(function (markdown) {             articles[i].markdown = markdown; Use the rest parameters instead of 'arguments'.
.submit(function() {               var cmd = this.command.value;               $.get('./__debugger__', {cmd: cmd, frame: frameID}, function(data) { Unexpected 'this'.
if (inst === compileComponent(node, vm, scope)) {                     into = false Expected a conditional expression and instead saw an assignment.
expression = self.interpolateExpressionVariables(expression, options.scopedVars);                 query.expression = query.expression.concat(expression); Redeclaring variable.
constructor() {         super();         this.isTop = true;       } Unexpected'super()' because'super' is not a constructor.
data = ['foo', 'false'];         validate(data).should.equal(false); Unexpected comma in middle of array.
} var length = f.length; f.length = function(){}; Undefined variable.
var self = this;     var server = new mongo.Server(options.host, options.port, options.options);
} catch (error) {     console.error(error); } Don't use throw an error instead.
if (currentSelected) {     currentSelected.classList.remove('selected-' + this.type); Redundant double negation.
return 'unavailable';     case "AVAILABLE": {       animate($('.state'), 'fade-in');       return 'available'; Unreachable code.
};       token = increment(); Unexpected 'debugger' statement.
configure: function (options) {    return this; Unexpected 'debugger' statement.
(function ($, window, document) {     'use strict'; Unused variable.
if (!this.configData.waitToReceiveRimaList){      WhoAmIService.getAll(function(whoAmIsFromServer){ Unexpected constant condition.
exports.getTestDir = function () {     var testRE = /\/[^/]+\.test\.js($|\?.*)/;     if (typeof document!== 'undefined' && document && document.getElementsByTagName) { Unnecessary escape character.
if (numTotal > numPassed + numFailed) {    message = (numTotal - (numPassed + numFailed)) + " of " + numTotal + " tests skipped";    console.log(message); Redeclaring variable.
case 'https:':     throw new Error("SSL is not implemented.");     break; Unreachable code.
if (req.user.companyId!= app.companyId) {           respond(res, 403);           return;         } Unreachable code.
export const sendPayment = ({ publicKey, secretKey, sequence, destinationId, amount }) => {   let sourceKeys = StellarSdk.Keypair.fromSecret(secretKey) Unexpected 'debugger' statement.
return Cluster.resolveContainers(config, cluster, function(err, list) {     self.table.setContainers(list); Unreachable code.
return VisitorOption.Remove;                 } Unreachable code.
function abortReq() {       xhr.abort(); Move function declaration to function body root.
function init(params) {             var fixFlag = [];             if (params) { Unused variable.
})();  ast_declaration = (function() { Redeclaring variable.
} else {               setTimeout(function() {                 fireDOMContentLoaded(); Undefined variable.
} else {             new Vue({                 el: '#js-role', Undefined variable.
case'major':       return true;     case'minor': Unreachable code.
process.exit(1);             } Unreachable code.
return function(ctx, k) {          var r = statement(ctx);
ui.puzzle.setCanvas(pzprv3.getEL('divques'), 'canvas');  ui.puzzle.setKeyEvents(); Undefined variable.
function onMouseDown( tracker, event ) {         var delegate = THIS[ tracker.hash ],             propagate; Redeclaring variable.
$(document).ready(function() {   var tabId = '';
} else if (lyr.type == 'ESRI Clustered Feature Layer' && esriPluginInstalled) {         layerOptions = extend(options, layerParams);         if (layerOptions.createMarker) { Undefined variable.
import Class from './Class' export class Action {   constructor(args) {     const [store, stores, allStores] = [args.store, args.stores, []]; Expected to call'super()'.
const path = '/v1/ssoconfig'; const ZERO = 0; const ONE = 1; Unused variable.
it('should merge properties', function(done){     app1.use(function(ctx, next){       assert.equal(ctx.response.msg, 'hello'); This generator function does not have 'yield'.
Subscript,         InlineMath, Duplicate key 'Subscript'.
this.id = `${this.constructor.name}${ID--}` } 'app' is assigned to itself.
function userIsServerAdmin(msg, config) {   let permission = msg.member.permission.json; Unexpected 'debugger' statement.
} export function logEvent(eventName) { Unnecessary semicolon.
console.error(error);     }); Don't use process.exit(); throw an error instead.
addSignature: function (req, cb) {      library.schema.validate(req.body, schema.addSignature, function (err) {    if (err) { UnreachableCode.
throw new Error('The canvas element parent selector is required when calling `toCanvas`');         } Unreachable code.
if (isNaN(this._bias)){         throw new Error(this._error, this.Derivative(), this._learnRate);     } Don't use process.exit(); throw an error instead.
} else {   Unexpected 'debugger' statement.
build = function(opts) {   if (opts.debug) { Unused variable.
if (typeof rows === "undefined") rows = self._rows;         var item;         if (data!== null) { Redeclaring variable.
TouchPoint = {     isSafari:!!navigator.userAgent.match(/Version\/[\d.]+.*Safari/),     clickTap: ('ontouchstart' in window? 'touchstart' : 'click'), Unnecessary escape character.
}                      db.remove(id, doc._rev, function (err, response) { Unexpected console statement.
const { Key, browser, ElementArrayFinder, ElementFinder, WebElement, by, element, $, $$, promise } = require('protractor'); const { code: htmlDnd } = require('html-dnd'); Unused variable.
return config_values; } function decodeConfigValue(proto_config_value) { Unnecessary semicolon.
if (pos && pos.left) {         lef = pos.left;         this.$('.geocoding-pane-content-wrapper') Unused variable.
getURLOfRemote(remote).then(function (remoteURL) {         var regexParseProjectName = new RegExp(".+[:/](.+\/.+)\.git");         var gitlabHost = URL.parse(gitlabURL).host; Unnecessary escape character.
feed.add('msg', 'hello there!', function (err) {       if(err) throw err;
settings:"$settings",    params:"$params",    view:"$params_view",    id:"$_id" Duplicate key 'params'.
if(input.toLowerCase() == "ls") {       Cli.ls(input, id);     } Undefined variable.
args[1] = this.locationMap[program.__uuid][location.__uuid];        } Empty block statement.
fontSize: 28,     background: `linear-gradient(22.5deg, rgba(103, 58, 183,.75), ${colors.deepPurple500})`, Duplicate key 'color'.
for (var i = 0; i < stack.length; i++) {      line = stack[i]      if (re) { Redeclaring variable.
var done    = function() {};     if (!success) success = function() {};
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
a(1,2,3,4)
textOverflow: 'ellipsis',     fontWeight: 'inherit'   }, Duplicate key 'fontSize'.
model = require('./../model/ContainerListXmlModel'); class ListContainers {     constructor() {     } Expected to call'super()'.
if (!currentEscape && el === '"' &&!lang) {        el = '"';       } Unnecessary escape character.
var self = this;       var success = function() {         self._log(resultSet); Redeclaring variable.
const MOZ_HACK_REGEXP = /^moz([A-Z])/; const PREFIX_REGEXP = /^((?:x|data)[:-_])/i; var tbEventDirectives = {}; Unnecessary escape character.
} else {      trueValue = can.compute(true)     } Redeclaring variable.
$(e.element).find("tr").not(this.settings.exclude).each(function (i,o) {      e.tableRows += "<tr>" + $(o).html() + "</tr>"; Unexpected 'debugger' statement.
break;       default:         return false;     } Unreachable code.
} exports.getCanActivateHook = getCanActivateHook; Unnecessary semicolon.
}     const { path, relative_path, raw_content, content } = datafile;     const [directory,...rest] = params.splat || [""];     const filename = getFilenameFromPath(path); Unused variable.
for (var key in views) {         if (views.hasOwnProperty(key)) {             var view = views[key];             var surfaces = map.getSurfaces();
$scope.checked = true; } Unnecessary semicolon.
for (var i = 0, l = options.length; i < l; i++) {   if (options[i].hasOwnProperty("load") && options[i].load.hasOwnProperty("js") && (scriptData = options[i].load.js) && options[i].isEnabled) {    for (var j = 0, e = scriptData.length; j < e; j++) { Expected a conditional expression and instead saw an assignment.
const     target = document.querySelector Unreachable code.
html = html.replace(/([\w-]+)=["'](\{[^\}]+\})["']/g, function(full, name, expr) {       if (BOOL_ATTR.indexOf(name.toLowerCase()) >= 0) name = '__' + name Unnecessary escape character.
insert++;       } Unnecessary semicolon.
if (!oembetter.inDomain('infogr.am', parsed.hostname)) {       return setImmediate(callback);     }     var matches = url.match(/infogr\.am\/([^?]+)/);     if (!matches) { Unnecessary escape character.
"hierarchy.html":[7,2], "index.html":[0] }; Duplicate key 'index.html'.
case 0:           return 'granted';         case 1: Unreachable code.
var Util = require('T/util'); var Q = require('T/ext/q'); Unused variable.
/>);             case 'user': Unreachable code.
var self = this         var checkDelete = function (d) {           if (d.length == null) { Move function declaration to function body root.
testNode.childNodes[0].focus();         utils.triggerEvent(testNode.childNodes[0], "focusin");         expect(model.myVal).toEqual(true); Undefined variable.
if (false) {             $log.error(err);           } Unexpected constant condition.
var _ = require("canal-js-utils/misc"); var { Subject, Observable } = require("canal-js-utils/rx"); Unused variable.
export default class ComponentDragSource extends DragSource {   constructor(type, spec, props, getComponentRef) {     super();     invariant(isString(type), 'Expected type to be a string.'); Expected to call'super()'.
}     var import0, import1, styles_Fbnte, RenderType_Fbnte, FbnteNgFactory;     return { Unused variable.
import Ding from 'dings';  import { apiSync } from 'utils' Unused variable.
initialize: function (args) {       $.extend(self, args);     };
} var XmlParser = (function () { Unnecessary semicolon.
this._map.addControl(this.drawControls[key]);         }         for(key in this.modifyControls) {             this._map.addControl(this.modifyControls[key]); Redeclaring variable.
return buildParams('', a).join('&').replace(/%20/g, '+'); } Unnecessary semicolon.
return data   }   async getDestinationsType(local, type) {     const find = {       local, Duplicate name 'getDestinationsType'.
var jscriptVersion;
this.listeners.handleClick = e => {       const sizeRatio = Math.pow(this.camera.getState().ratio, 0.5);       const quadNodes = getQuadNodes(e.x, e.y); Unreachable code.
return font => {         if (!fonts[font.id]) { Unexpected 'debugger' statement.
{ buf += " " + escHtml(pname) + '=""'; }      else if (val!= null) Empty block statement.
Promise.all(promises).then(function(results) {         for(var i = 0; i < array_size; i++) { Unexpected console statement.
const getTextBlockRegExp = () => /\\text\{([^}]*)\}/g;
return ((_.isTypeOf (Error, what)? (what && what.stack) : what) || '').hash },  printError: function (e) { var stackEntries = CallStack.fromError (e)   return [ Undefined variable.
if (options.contentType ==='multipart\/form-data') {           xhr.setRequestHeader('Content-Type', `multipart\/form-data; boundary=${boundary}`);         } else { Unnecessary escape character.
onNewRecordClick: (creds, apiName) => {       dispatch(actions.fetchCreateDefaults(creds, apiName))     },     onCloneClick: (creds, id) => {       dispatch(actions.fetchCloneDefaults(creds, id))     },     onDeleteClick: (creds, id) => { Duplicate key 'onCloneClick'.
var request = require('supertest'); var should = require('chai').should(); Read-only global'require' should not be modified.
if ( context ) {    ret = seed?     { expr: parts.pop(), set: makeArray(seed) } : Redeclaring variable.
return promise;  } Unnecessary semicolon.
settings.headers['Content-Length'] = options.params.length;     } Unnecessary semicolon.
fs = require('fs'); var fileCache = {}; var tagsCache; Unused variable.
expect(appcache).to.have.property('off');     expect(appcache).to.have.property('abortUpdate');   }); Undefined variable.
for (var i = 0, j = tokens.length; i < j; i++) {       var t = tokens[i]; Unexpected 'debugger' statement.
return 'http:   }   if (navigator.platform.match(/^Win/i)) {     return 'http: Redundant double negation.
this.search = new SearchBox(this);   this.search.element.style.backgroundColor = Editor.theme.barColor;   this.search.setOnChange(function() Unnecessary semicolon.
import { BaseCriteria } from './BaseCriteria'; export class MaxTargetPerOrganCriteria extends BaseCriteria { Unused variable.
var ret = new Promise(INTERNAL);     ret._propagateFrom(this, PROPAGATE_TRACE);     ret._follow(this); Undefined variable.
if (proxy && url.isType(PROXY_TYPE)) {       proxy.web(req, res, { Unexpected console statement.
<td>{currencySign + numeral(amount).format('0,0.00')}</td>       <td><IoIosCloseCircleOutline color="red" size={18} style={{ cursor: 'pointer' }} onClick={() => alert(123)} /></td>     </tr> Undefined variable.
actionObjects.push(currentAction);       } Unnecessary semicolon.
debug.drawEarth =!debug.drawEarth; hit = true; break; Unreachable code.
throw new Error(_const.pluginInitFnMissing);    } Unnecessary semicolon.
this.init();     }     LineMappings.prototype = Object.create(SourceMappings.prototype); Unnecessary semicolon.
case "200403.11":                 $p.com.alert($p.locale.exception, "warning");                 return false;             case "200403.13": Unreachable code.
var path = path.pathname.substring(1);     var requestPaths = [path];
if (match) {         this.set('secure', ((match[1]||'').toLowerCase() ==='s')); Expected a conditional expression and instead saw an assignment.
}     if (deleteInstance!== false) s = null; Undefined variable.
var $el = this.$el;     var title             = sanitize.html(this.options.title);     var description       = sanitize.html(this.options.description);     var clean_description = this._stripHTML(this.options.description); Undefined variable.
}, timeout);   } Unnecessary semicolon.
exports.name = '\\/roll'; exports.hidden = false; Unnecessary escape character.
let currentUserId; Tracker.autorun(()=> {   if (currentUserId) {       roomStream.stop(currentUserId); Redundant double negation.
var startThumbDrag = function() {                         mousePrevX = event.pageX || event.clientX;                         savedVal = selValue; Undefined variable.
import configIos from './config-ios'; appConfig.beta = true; Undefined variable.
process.exit(1);   } Unreachable code.
this.combYZmax = commonMax(y, z);
var i, j; Read-only global 'console' should not be modified.
const matches = /^\${([^"]*)}/.exec(location);   return matches    ? process.env[matches[1]] + location.replace(matches[0], '') Redundant double negation.
'As of': 'As of',     'Received': 'Received',     'Saved': 'Saved',     'For this search': 'For this search', Duplicate key 'Received'.
}, {       requires:['base','node','../../../pub/utils/global','../../../pub/utils/svgelement','../../../pub/views/infos/infos','../../../pub/models/eventtype','../../../pub/views/line/core','../../../pub/views/layouts/style1/main'       ] Unexpected comma in middle of array.
const appliedClassName = className || 'hovering';     const includeClones =!excludeClones;     const includeChildren = restriction!== 'directParentsOnly'; Redundant double negation.
$scope.saveCalendar = function() {             $scope.calendar.ingaSave($scope.back);      }; Unreachable code.
},             presenterType: "VerticalTablePresenter",             modelViewName: "project_statistics",         }, Duplicate key 'presenterType'.
}; goog.module.ModuleLoader.prototype.codePostfix_ = null; Undefined variable.
return this.finishNode(node, "FunctionTypeAnnotation");       }       break;     case tt.parenL:       this.next(); Expected a 'break' statement before 'case'.
loader.fire('provide', mod);  } Unnecessary semicolon.
(function constructor(args) {
class Text extends TelegramMessage {   constructor(text) {     super();     if (!text || typeof text!=='string') Expected to call'super()'.
QUnit.test("Pips: Count, stepped", function (assert) {     var slider = test_slider({ Undefined variable.
}     context.trackVariablesChange(prop, vars, valueGenerator);   } Unnecessary semicolon.
let el = this.returnFocus || this.return_focus || document.activeElement || null;
function setAttr(node, name, val, asProp) {  var el = node.el; Unused variable.
var minPassLength;     var emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; Unnecessary escape character.
getID(instance) {     return this.findIdBySlug(instance);   } Redundant double negation.
throw new Error('Song constructor called with invalid backend:'+ song.backendName);         } Unreachable code.
appliedFilters = this.getUpdatedAppliedFilters(payload, appliedFilters);            }); Unexpected console statement.
let full_accounts = {}          for( let account in next_props.full_accounts )             full_accounts[account] = ChainStore.getAccount( next_props.full_accounts[account], this.update, true ) Redeclaring variable.
return this._wrop("add", [obj], function (e) {                 if (obj.hasOwnProperty(e)) obj[e] = req.result;             }); Undefined variable.
import React, { Component } from'react' import SectionLayout from '../../SectionLayout' Unused variable.
if(this.target) {     if(newMedia) {       this.killPopcorn(); Unexpected constant condition.
setProperties(o, p);           } while ((p = gPO(p)))           return o; Expected a conditional expression and instead saw an assignment.
return state;   } }; Unnecessary semicolon.
token: "0x000000000000000000000000000000000000000e",     },     assertions: (err, accountTransferHistory) => {       expect(err).to.be.false;       expect(accountTransferHistory).to.equal([]);     },   }); Undefined variable.
import Box from'reakit/Box'; import Table from'reakit/Table';
} var Notebook = Class.extend(Notebook, File, "ddr:Notebook"); module.exports.Notebook = Notebook; 'Notebook' is a function.
},             resample: function(oldMatrix) {                 var newMatrix = []; Redeclaring variable.
list.children.forEach(c => { Unexpected 'debugger' statement.
if (opt.options.list) {     org.kvms.get({}, function(e){     }); Unused variable.
return memberName in actual;             }             return false; Empty block statement.
var ast = new AST(); Redeclaring variable.
import { ArgumentException } from "./ArgumentException"; const NAME = 'ArgumentNullException'; Unused variable.
getVideoMaxBitrate() {     this.warn("getVideoMaxBitrate is deprecated. Use getMaxVideoBitrate instead");     return this.getMaxVideoBitrate();
setTimeout(function() {     error = customError = listener = null;    }, 10);   }; Unreachable code.
return weekNum; } function isLeapYear(year) { Unnecessary semicolon.
var node = window.contextVars.node;             var pageMeta = _get(window, 'contextVars.analyticsMeta.pageMeta', {});              return { Redeclaring variable.
let match = /<!--StartFragment-->(.*)<!--EndFragment-->/.exec(html)       if (match) { Unnecessary escape character.
x2: 0,      x3: 0     }, Duplicate key 'x2'.
context.log(err);        throw err;     });
var routeStripper = /^[#/]/; Unnecessary escape character.
this.input = doc.getElementById("wmd-input" + postfix);      } Unnecessary semicolon.
this._load_sequence();   function cache_transaction(transaction) {     transaction = TransactionManager.normalize_transaction(transaction);     var sequence = transaction.tx_json.Sequence; Redeclaring variable.
getAlgorithmByOID,   getCrypto, Unused variable.
return value +'' + arg;             default: Unreachable code.
let allImg = true;             for (let file of files) {                 if (file.type.indexOf('image/')!== 0) { Expected a conditional expression and instead saw an assignment.
var Sleeping = require('../core/Sleeping'); var Render = require('../render/Render'); Unused variable.
return ((Math.abs(value) < 10)? "0" : "") + Math.abs(value); } describe('FeatureInfoSection', function() { Unnecessary semicolon.
this.current = this.items[n];       this.render(); Unexpected console statement.
}); EG.Model.reopen({
var tip = $("#Tip");     editor.autocomplete({
this.oDate = this.createDate(Date, aArgs);    this.sCalendarType = CalendarType.Buddhist;   } Undefined variable.
ve.ce.Surface.prototype.onCutCopy = function( e ) {  var _this = this, Unexpected console statement.
ok(true, 'before play deferred invoked');         setTimeout(function() { js.stop(); }, 3000);     }).callAfter(function(completed) { Undefined variable.
_afterFocus : function (_, element) {    element = Aria.$window.document.getElementsByTagName("input")[0];    var active = Aria.$window.document.activeElement; Redeclaring variable.
break;                     case 'debug':                         console.log('debug');                         break; Unexpected console statement.
idleQueue._iC.delete(promise); } Unnecessary semicolon.
beforeEach(ngMock.module('kibana'));       beforeEach(ngMock.inject(function (Private) {         metricAggs = Private(require('ui/agg_types/index')).byType.metrics; Undefined variable.
var named =!!program.named var dir = path.resolve(process.cwd(), program.args[0]) || process.cwd()  var pkg = path.resolve(dir, 'package.json') var recursive =!!program.recursive Redeclaring variable.
try { let a =!define && (window.linkifyElement = linkifyElement); } catch (e) {} Empty block statement.
}); describe('atomic using redis (callback)', function () {   beforeEach(function (done) { Undefined variable.
} = node;          if (isTryTo(id)) Unexpected 'debugger' statement.
function change(previous) {         var difference = Difference(previous, history.graph());         dispatch.change(difference); Undefined variable.
});   return wikidataapi.getEntityPropertyClaims(resultEntities,language).then(function(responses2){ Unreachable code.
var expect = require('chai').expect;    var tree = require("../tree-surgeon.js"); Unused variable.
case 2:                  for (let t2 = 0; t2 < maxWidth; t2++) {                   row[offsetT + t2] ^= symbolRow[t2]; Redeclaring variable.
uksort($data, function (key1, key2){ return (key1 === key2? 0 : (key1 > key2? 1 : -1)); })          var expected = {a: 'orange', b: 'banana', c: 'apple', d: 'lemon'} Undefined variable.
} else {                 mark = {                                 "type": "line", Redeclaring variable.
if (color.length === 4) {         return '#' + r(color.charAt(1)) + r(color.charAt(2)) + r(color.charAt(3)); Move function declaration to function body root.
.replace(/([^/])(\/(?!\*|\/)(\\\/|.)+?\/[gim]{0,3})/g, function(match, $1, $2){                 primatives[primIndex] = $2; Unnecessary escape character.
}   } while (node === node.parentElement); Expected a conditional expression and instead saw an assignment.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/door_key_8-1334258086.swf",  admin_props : false, Unnecessary escape character.
mc = PrimeFaces.util.MessageContext,             locale = PrimeFaces.locales[PrimeFaces.settings.locale]; Undefined variable.
}   defer(done); }; Undefined variable.
delete cache_[ _key.toString() ];        debug('String [%s] removed from cached unique strings', _key);     } Unexpected console statement.
var npId1 const NUMBER_PROTOCOLS = 4 Unused variable.
var projectRoot = ProjectManager.getProjectRoot(),             filesToOpen = [], Unreachable code.
};     return fetch(config.apiUrl + '/users/' + user.id, requestOptions).then(handleResponse); };
lastIndex = i;         return; Unexpected 'debugger' statement.
}catch(e){             return false; Unexpected console statement.
this.socket.onerror = function (ev) {                 self.onErrorHandler(ev); Unexpected console statement.
test: /\.svg$/,         loader: 'happypack/loader?id=happy-svg',         include: [resolve('src/assets/icons'), resolve('src/assets/images')] Duplicate key 'loader'.
var nodeBuffer = [];                   for (i = 0, li = replay.nodeBuffer.length; i < li; i++) {                 tile = replay.nodeBuffer[i];                 nodeBuffer.push(tile); Redeclaring variable.
while ((ch = stream.next())) {    if (ch == '"' || ch == "'") { Expected a conditional expression and instead saw an assignment.
if (args[0].match(/node[.exe]*$/)) {     args = _.drop(args, 2); Unnecessary escape character.
const REGEX_SPACE_S_FILTER = /([(,|])[\s]+/g; const REGEX_PROP_FILTER = /\.([a-zA-Z_$#][^\s.\/,[\]()'"|#]*)/g; const REGEX_ARRPROP_FILTER = /([^\s([,])(\[)/g; Unnecessary escape character.
item.updateConnectedEnds = function (vertex0,vertex1) {   let updated = [0,0]; Unexpected 'debugger' statement.
var a = 0;      data = data.splice(0, 25);      for (k = data.length; k < 25; k++) {       data.unshift(0); Redeclaring variable.
this.syncPoint = 0;   } Unnecessary semicolon.
if ( expect === false )           {             hide();           } 'window.location.href' is assigned to itself.
value: 'SNAPPY',                         description: 'Snappy'                     }, Undefined variable.
if ((cap = this.rules.html.exec(src))) {       src = src.substring(cap[0].length); Expected a conditional expression and instead saw an assignment.
import {applyMiddleware, combineReducers, compose} from "redux"; import promiseMiddleware from "redux-promise-middleware"; Unused variable.
fs.readFile(generatedFile, function (err, data) {       var expected = fs.readFileSync(expectedFile); Unexpected 'debugger' statement.
}); }; module.exports = ObjectLinkToMultimediaHasTextTranscript; Unnecessary semicolon.
_value = parseInt(_value, 10);                 if (isNaN(_value)) {                     _value = null; Use the isNaN function to compare with NaN.
getConfig:getConfig,             setDataCSV:setDataCSV,             on:on, Duplicate key'setDataCSV'.
return "Parse tree: " + parseTree.toString(type);    case "dependencies": Unreachable code.
templateElem.spread[name] = true;     return; Unexpected 'debugger' statement.
CardTitle,   CardBody, Unused variable.
Debugger.prototype.addProvider = function (type, obj) {   this.debugger.addProvider(type, obj) Unexpected 'debugger' statement.
return this;     } Unnecessary semicolon.
&& this.authorizer.isPermittedAll(permissions);  }; }
idx = list.length;     }     if(!list[ idx ] ){ Unnecessary semicolon.
view : function (ctrl) {         return m('.fb-project-organizer#projectOrganizer', ctrl.tb); Unexpected 'debugger' statement.
if (!unallowedCharacters) {     unallowedCharacters = /[/@\s+%:.]/;   } Unnecessary escape character.
sFormatted  = sFormatted.replace( this.Regex.BlocksOpener, '\n$&' ) ;  sFormatted  = sFormatted.replace( this.Regex.BlocksCloser, '$&\n' ) ; Unnecessary semicolon.
+', dampingLaw: '+this.dampingLaw.toStringShort()       +', gravityLaw: '+this.gravityLaw.toStringShort()       + NewtonsCradleApp.superClass_.toString.call(this); }; Unnecessary semicolon.
this.orig_prefset = null;     if (usesDeck) { Unexpected 'debugger' statement.
var node = nodeView.node;   var typeDescr = node.constructor.description;
steal('can/model',function(){
if ($$logging.get('screenshots').enabled) {             var filename = $$logging.get('screenshots').filename.replace('{date}', moment().format('YYYYMMDDhhmmss')); Unexpected constant condition.
if (nodes.filter('table').length > 0) {         rows = nodes.filter('table').find('tr');         var pos = exports.selectedPos();
console.log(contract.tally); Unexpected 'debugger' statement.
class Polling extends EventEmitter {   constructor (options) {     super()     this._options = options Expected to call'super()'.
this.availableZoomsForFetch = [];             for (i = 0, len = (arrBefore.length + arrAfter.length); i < len; i++) {                 if ((i % 2 && arrBefore.length > 0) || arrAfter.length == 0) Redeclaring variable.
wipController.$inject = ['$scope'];         function wipController($scope, $rootScope) { Unreachable code.
});   for (field in ev) {     if (!ev.hasOwnProperty(field)) continue;     evtJSON[field] = serializeEventVal(queueIndex, ev[field]) Undefined variable.
return deferred.promise; } module.exports = { Unnecessary semicolon.
'Decrediton', 'rpc.cert');     } Redeclaring variable.
blockGroup.blocks.push(block);             });             blockGroups.forEach(function (blockGroup) { Unnecessary semicolon.
function storeCurrentJSBuffer() {         if (CodeEditorIntegration.setDirty) { Unexpected console statement.
function init(){   heroContentFade(); } Unnecessary semicolon.
var _modules = this.modules;       for (var module in _modules) {         if (_modules.hasOwnProperty(module)) { Read-only global'module' should not be modified.
for (var j = 0; j < Sk.builtin.range(start, l,-1).v.length; j++) {             a.setitem(p, a.getitem(p-1)); Undefined variable.
this.keyboard.terminal.scrollPageUp();   return keyActions.CANCEL; }; Undefined variable.
var innerResponse = normalizeRequest(request_);         if (innerRequest.error) {             errors.push(innerRequest.error);             break; Undefined variable.
]).then(function(data){       var result = data[0].rows       var pkeys = data[1].rows.map(function(r){         return r.attname Undefined variable.
bodyParams = request.data;   if(bodyParams.length!==0) { Redeclaring variable.
require('./methods/out')(Terms); require('./methods/replace')(Terms); require('./methods/split')(Terms); require('./methods/transform')(Terms); require('./methods/lump')(Terms); module.exports = Terms; 'Terms' is a class.
});   if (existingDatabase) return; 'config.name' is assigned to itself.
return!(countryCode === "GB" &&!ukPostcode.fromString(postcode).isComplete());   } Unnecessary semicolon.
view.getUint8(2)!=70||   view.getUint8(3)!=3){   return null;  } Unreachable code.
var deferred = $q.defer();         chrome.runtime.sendMessage({action: 'copy', params: [value]}, function () {             deferred.resolve();
corsPreflightReferrer("Referrer policy: unsafe-url", corsUrl, "unsafe-url", "myreferrer", new URL("myreferrer", location).toString()); done();
componentDidMount() {         this.updateOnOrDirty(this.props.projectStudios, this.props.myStudios);     } Unexpected 'debugger' statement.
log.debug('正在检查更新...');     pkgJson('feflow-cli', 'latest', registry).then(json => {       const version = pkg.version;
import { Wrapper } from './styled';
} } var InstToProfile = true; Unnecessary semicolon.
} else {       let searchEngine = require('./searchT.js')       searchEngine.latest(function (data) { Redeclaring variable.
Port.prototype.isEqualTo = function(port) {     if (!(port instanceof Port)) {         return false; Unexpected negating the left operand of 'instanceof' operator.
tyrant.putcat('key1', '+Second Value');   tyrant.get('key1').addCallback(function(value) {sys.puts('Result : '+value);}).addErrback(function(error) {sys.puts('Error : '+error);}); } Undefined variable.
var is_file = output.indexOf(".js", Math.max(0, output.length - 3)) > 0;   if (is_file) {     stream = stream.pipe(newer({ dest: osPath.join(DEST, output) })); Empty block statement.
var visitNode = function(path) {         if (path in deps.written) { Move function declaration to function body root.
_setSessionVariable: function( variable, value ) {             this.cookies[variable] = value;         },
(function(x) {     Empty block statement.
if (typeof window.define === 'undefined') window.define = Famono.define; Invalid typeof comparison value.
$listpeopleinnodePeopleContainer.html($.TemplateRenderer(listpeopleinnodePeopleTemplate, results));         }else{             $listpeopleinnodePeopleContainer.html($.TemplateRenderer(listpeopleinnodePeopleTemplate, results));         } Empty block statement.
import StatusBar from './status-bar' import HubSidebar from './hub-sidebar'
describe("Numeric Analysis", function () {     var fft = fidola.numeric.fft,         ifft = fidola.numeric.ifft, Undefined variable.
for (;;) {     hillclimb({ Unexpected constant condition.
var spec = this._getHTMLSpec();       if (!(view.getName() in spec)) {         throw new Error("invalid tag"); Unexpected negating the left operand of 'in' operator.
var respond = function(req, res) {     _sender.produce({topic: req.$inf.respondTo.topic, partition: req.$inf.respondTo.partition}, JSON.stringify({response: res, $inf: {type:'response'}}), function(err) { Unexpected 'debugger' statement.
case MediaPlayer.rules.BaseRulesCollection.prototype.ABANDON_FRAGMENT_RULES:                     return Q.when(adandonFragmentRules);                 default:
let openExternal = (url) => {   var shell = window.require('electron').shell; Unexpected console statement.
if(goog.isString(route))         route = new RegExp('^' + goog.string.regExpEscape(route).replace(/:\w+/g, '(\w+)').replace(/\*\w+/g, '(.*?)') + '$');     this.routes_.push({route: route, callback: fn});
log('\n' + consts.MODULE_INFO);   log(data.msg + '\n');   return;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/wavy_gravy-1334214775.swf",  admin_props : false, Unnecessary escape character.
}       break;     case'mount':       entity = nearestEntity("object"); Expected a 'break' statement before 'case'.
let expiresAt = JSON.parse(localStorage.getItem('expires_at'));       return new Date().getTime() < expiresAt;     };
app.use(function(ctx, next){ This generator function does not have 'yield'.
const MP_REGEX = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!{8,}$/g const RESPONSES = { Unnecessary escape character.
app.controller('EditController', function(Session, $state, $interval, $scope, $http) {     $rootScope.$emit('titleChange', "Edit")     var f = function() { Undefined variable.
domClass.add(next[0], type);                 next[0].offsetWidth; 'next[0].offsetWidth' is assigned to itself.
var getCanvasByIndex = function(index) {       return self.canvasObjects[viewerState.canvases[index]['@id'];     }; Undefined variable.
})                                               .catch(softThrow);                                       break;
this.setState(Object.assign({}, this.state, {       innerWidth: window.innerWidth     })) Duplicate key 'innerWidth'.
builder.scale({maxWidthPercent: maxWidth, unit: unit});   } } Empty block statement.
if (!data.length) {           err = new Error('The list is empty.')           callback(err) Redeclaring variable.
if(typeof since === 'function' && since.modelName) {     since = -1;     targetModel = since; Invalid typeof comparison value.
import Story from '@lskjs/dev/Story'; const action = name  => (...args)=> console.log('[' + name + ']',...args) Unused variable.
res.loadAssets(() => {     const game = new Game();
ME: `${API}/users/@me`,  ME_CHANNELS: `${API}/users/@me/channels`,  ME_SERVER: (serverID) => `${Endpoints.ME}/guilds/${serverID}`, Duplicate key 'ME'.
fs.ensureDirSync(root + "/static"); process.exit(); throw an error instead.
j = i;                 } 'j' is assigned to itself.
}         while (count > 0) {             visited.push(el); Unexpected constant condition.
generateRelations.track((data) => {                 result.addNetwork(data.nodes, data.edges, {groups: data.groups}); Unexpected 'debugger' statement.
keyPressHandler(ev);  } else if ( ev.name === "KeyRelease" ) {   context.keyRelease(ev.name);  } Empty block statement.
import { createStore } from'redux' import defaultStorageAdapter from'resolve-storage-lite' import defaultBusAdapter from'resolve-bus-memory' Unused variable.
onXHRDone: function(xhr) {        doneBuffering = true; Unexpected console statement.
if (templateResult instanceof goog.soy.data.SanitizedContent) {     var ContentKind = goog.soy.data.SanitizedContentKind; 'templateResult' is assigned to itself.
else {                                         } Empty block statement.
_createCookieFromData(data) {     var target = SDK.targetManager.targets(SDK.Target.Capability.Network)[0];     var cookie = new Cookie(target, data.name, data.value, null);     cookie.addAttribute('domain', data.domain); Undefined variable.
},   'Click on choose layout': function(client) {     var PO = client.page.chooseLayout(); Duplicate key 'Click on choose layout'.
var stateManager;   if (this.objects.hasOwnProperty(id)) {    if (callback) {     callback(false); Unreachable code.
c = new MathLib.Complex(2, 5),    d = new MathLib.Complex(3, 6), Redeclaring variable.
if(time_format === '24'){     times = options.times || ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"]; Unexpected constant condition.
var loadSubModules = function (parentModuleInfo, subModulesDescArray, cb, customModules) {         var subModulesDescArrayLength = subModulesDescArray.length; Redeclaring variable.
])  })(jsPDF, typeof self!== "undefined" && self || typeof global!== "undefined" && global || typeof window!== "undefined" && window || (Function ("return this"))()); Undefined variable.
import React from'react' import {blueA400, grey500, grey600, blueA100, white } from'material-ui/styles/colors'
if( typeof callbackFunction === 'function' ){             callbackFunction( url );          } Undefined variable.
import ButtonIcon from 'ui/components/buttons/flavors/icon/index.react'; import { prefix as pf } from 'app_modules/ui/util/component';
"it throws an ImmutabilityError when you try to call its shift() method": {     predicate: function(array, args, shiftArg) {
Explorer.currentHighlight.style.backgroundColor = 'rgba(0,0,0,0)';         break;       default:       } Expected a 'break' statement before 'default'.
click = false;     } Unnecessary semicolon.
return [       mwcMixin, mwcRouter, AppState     ];
if (typeof console === "undefined") { console = { log: print }; } console.log (typeof __undefined__); Read-only global 'console' should not be modified.
}                     const maxReturned =                         Number(this.nodeConfig.output_results_count) || 1; Unexpected lexical declaration in case block.
import ChartsContainer from '../../../components/charts-container'; import Fills from '../../fills/components/fills'; Unused variable.
specStarted: function(result) {   },   specDone: function(result) { Unexpected console statement.
this.out.unlinkSync(outputRelative); Unexpected 'debugger' statement.
import React from'react' import PropTypes from 'prop-types' Unused variable.
var input = ".test1 { background: url(\"test1.jpeg\"); }" +         ".test2 { background-image: url('test2.png'); }";     var output = ".test1 { background: url(\"test1.jpeg\"); }" + Unnecessary escape character.
shortcuts.forEach(shortcutUrl)     Mousetrap.bind('shift+w', openApp); Unexpected 'debugger' statement.
while (test) {         if (test.cycles) { Expected a conditional expression and instead saw an assignment.
}     window.location.assign(`${protocol}   }; Undefined variable.
} catch (err) {       return msg.say(`**${user.username}**, you failed to catch a pokemon :cry:`); Unexpected console statement.
var LoaderModule = (function() {   var modules = ['game', 'cookiedata', 'controls'];
}       x = depth*horizontalSpacing;       y = ySum/block._outConnections.length;     } Redeclaring variable.
return result + "</div>";       }, Unreachable code.
const c = h;         for (let i = 0, len = order.length; i < len; ++i)             c = hamt.remove(keys[order[i]], c); 'i' is constant.
const ele = (arr, i) => arr[i % arr.length]; const frame = i => ele(styles, i)(ele(spinners[ele(keys, i % step === 0? index++ : index)].frames, i)); Unnecessary semicolon.
setTimeout(function(){             casper.evaluate(function(){                 localStorage.clear();             });         }, 3000); Undefined variable.
handleUrl(url.href, reply);   } }; Unnecessary semicolon.
import React from'react' Unused variable.
console.info.restore();             console.log.restore();         }); Unexpected console statement.
} else {      return _.assign(data, file.data)     } Redeclaring variable.
export const earnExp = (exp) => {  exp('type:' is defined but never used.
return result;   } Unnecessary semicolon.
}          i = m_opCache.length - 1;          while (i >= 0) { Redeclaring variable.
var data = {};     $.each(schema.pages, function(i, page) { Unexpected 'debugger' statement.
viewOpenRoomScreenAnimation() {     return new Promise((resolve, reject) => {       this.communication.chooseClosestServer().then(() => { Unused variable.
config.pkg = loadJSON('package.json', {cwd: config.cwd});   if(config.pkg.ngfactory) {     log('Using ng-factory config from %s', chalk.magenta(tildifyCwd('package.json', {cwd: config.cwd}))); Unexpected constant condition.
throw Error('Did you pass in an Element?'); } Unnecessary semicolon.
} else {         if (traverse === document ||           (shadowRootAvailable && (traverse instanceof ShadowRoot)) ||           (parent && parent.__redom_mounted) Undefined variable.
patterns: [                         {                             match: /var version = '[.0-9]*';/g,                             replacement: "var version = '" + iopackage.common.version + "';" Unnecessary escape character.
});   });   version = "v6"; Undefined variable.
function getTextSizeForWidth(text, font, width, minFontPx, maxFontPx) {         var s = font.replace("?", maxFontPx); Unexpected 'debugger' statement.
function process(context) {  return { message : this.fail }; Unexpected 'debugger' statement.
const users = rhf.getValues({ nest: true }).users;   const hasDuplicate = ({ lastname }, index) => { Unexpected 'debugger' statement.
case FV_WORD_UPDATE_ERROR:       case DISMISS_ERROR: Duplicate case label.
this.lastHash = hash;       localStorage.setItem('bkp.next.piskel', this.piskelController.serialize());       localStorage.setItem('bkp.next.info', JSON.stringify(info));     } Undefined variable.
case "developer":       return "icon-file";     case "code":       return "icon-code"; Duplicate case label.
handleMessage(uid, obj) {     var message = obj.body.toLocaleLowerCase();     var command = message.split(" ")[0];     if (this.cmdPrefix) command = command.replace(this.cmdPrefix, ""); Undefined variable.
server.listen(options.port, function(err){                  if(err){ return callback(err); } Redundant double negation.
}; pagespeed.LocalStorageCache.prototype.getData = pagespeed.LocalStorageCache.prototype.getData; pagespeed.LocalStorageCache.prototype.replaceLastScript = function(a) { 'pagespeed.LocalStorageCache.prototype.getData' is assigned to itself.
} catch (e) {         this.setErrorMessage(e.message);       } Unreachable code.
FilterActions.saveSession();       }catch(e){}     }); Unnecessary semicolon.
throw "Unrecognized mnemonic language"  } Unreachable code.
</FormField>           } />
exports.default = Person;
cell = start && domUtils.findParentByTagName(start, ["td", "th"], true);              if (cell) {                  return -1; Redundant double negation.
})(jQuery, document);
}  authz.addUserRoles(owner._id, ['owner'], room._id);  if (type === 'c') { Undefined variable.
$(function(){   var width = 1280;   var height = 720;   var doc = $(document); Undefined variable.
var processOptions = (function(config) {   var options = extractOptions(config); Redeclaring variable.
arr = new Uint32Array(arrayBuffer, offset, length);          break;      case 'FLOAT':          arr = new Float32Array(arrayBuffer, offset, length); Expected a 'break' statement before 'case'.
id: 'containers.AgentPage.create_agent.use_postFormat',     defaultMessage: 'Response Definition',   },   usePostformat:{     id: 'containers.AgentPage.create_agent.use_postFormat', Duplicate key 'usePostformat'.
}    } else if (msg.event === "testDone") {     results[msg.data.module].push(msg.data);    } else if (msg.event === "done") { Empty block statement.
return this.length;   } Unnecessary semicolon.
</TouchableHighlight>     );   } Unreachable code.
const vscode_1 = require('vscode');    global.LEXEM_BUILD = /[^\s,!\\?\*\/:\[\]\(\)\"\'\`\-\+\<\>\;\=]/;    global.LEXEM_SPELL = /[\s,!\\?\*\/:\[\]\(\)\"\'\`\-\+\<\>\;\=]/;    String.prototype.replaceAt = function (index, character) { Unnecessary escape character.
if (isRoutePresent) {     console.log("control: route is present.");     routePresent = true;     ui.setRouteIsPresent(true); Unexpected console statement.
case ActionTypes.SIGNOUT_RES:         if(action.data!== null){           UserStore.emit(ActionTypes.SIGNOUT_RES); Redeclaring variable.
(err, resp) => {           notifications.snapshotCreated(resp.body)           res.send(resp.body) Unexpected console statement.
that.hover(hoverHeight, position);     } Unnecessary semicolon.
node.position(pos);                         }                     }); Empty block statement.
Babel.prototype._generateDepGraph = function() {   var residentImports = this._cache.keys().map(byImportName); Unexpected 'debugger' statement.
collision = true                   self.postMessage('{"command": "entity-user collision", "data":{"position":[' +obj.position[0] + ',' + obj.position[1] + ',' + obj.position[2] + '] }}')                 }               }
return stream; } Unnecessary semicolon.
var model = this.model = {};         var add = function(name, edgeModel, extensions) {           if (edgeModel) { Move function declaration to function body root.
return prev;   }, []); } function join (args, quote) { Unnecessary semicolon.
numbro.version = VERSION; Unexpected 'debugger' statement.
break;     case Array.isArray(type) && type[0] === 'any':       if (isMethod) { Invalid typeof comparison value.
return "ironscript.runPackage("+JSON.stringify(ps)+");"; } Unreachable code.
var argc = ns['argc'] = arguments.length         if (fixedArgs) {           argc = appendArg(fixedArgs)         } else { Empty block statement.
constructor() {     super();     this.poolActivity = {}; Expected to call'super()'.
function modelHasAttributeOrRelationshipNamedType(modelClass) {   return ( Unexpected 'debugger' statement.
var isHost = require('./isHost'); if (isHost.method(window, 'getSelection')) {   module.exports = getSelectionRaw;
let key   while ((key = keys.shift())) {     yield [key, object[key]] Expected a conditional expression and instead saw an assignment.
test('word tables are converted to html tables', function() {         var docxPath = path.join(__dirname, "test-data/tables.docx");         return mammoth.convertToHtml({path: docxPath}).then(function(result) { Unreachable code.
if (!this._alwaysOnTopWindow ||!this._alwaysOnTopWindow.document) {             return undefined;         } Expected to return a value in getter '_alwaysOnTopWindowVideo'.
var intg = (num >> 14), frac = ((num & 0x3fff)/(0x3fff+1));    return (intg>0)? (intg+frac) : (intg-frac);   }, Unreachable code.
host : req.protocol +'            index : index,             type :  parts[2] || '', Undefined variable.
acc_x += 3;         Flow.renderGlyph(this.context, acc_x, acc_y,                              this.render_options.font_scale, this.paren_left.code); Undefined variable.
setTimeout(function () {         for (var i = _doneWorkers.length; i--;) { Unexpected console statement.
if (/^['"](?:[a-zA-Z][a-zA-Z\d\-]+)['"]$/.test(value))         return key + '=' + value.substring(1, value.length - 1) + ']';
const updateSelection = function() {     selection.style.left = selectionArea.x + 'px'; Move function declaration to function body root.
ia = aindex[ka]; Redeclaring variable.
html += "<h3>Variables</h3>";   objs = this.getByType(o$, "global");   for (i=0; o=objs[i]; i++) {    html += this.presentComment(o.comment); Redeclaring variable.
throw new TestFailureError(errorMessage || 'Condition expected to be true');         }     }, Unnecessary semicolon.
var amount = this.amount.v;     if(amount!== 0){         return true;     } Empty block statement.
return LAST_FM_SECRET && LAST_FM_KEY && this.session_key;   } Unnecessary semicolon.
beforeEach(function() {       $ = adapter.name === 'jquery'? jQuery : Zepto       Waypoint.Adapter = adapter.Adapter;
function Axis (plot) {     this.showTicks = true; Redeclaring variable.
$(panel).on('mouseenter.trace3d.trace3d_igv_panel', (event) => {             event.stopPropagation();
rows: rows   },   hideMap: (state, actions) => ({     showLeaflet: false Unused variable.
export default class KnotInput extends Morph {   get input() { return this.get('#input'); } Expected to return a value in getter 'listSelector'.
if (navigator.mozGetUserMedia) {       callback(null, 'firefox', { Redundant double negation.
trace( "Bug? already seen request" ); Unexpected 'debugger' statement.
});     $(document).on("click.button.uikit", "[data-uk-button]", function() {         var ele = $(this); Undefined variable.
import React from'react' import { useI18n } from 'core/i18n/i18nContext'
;                 ;     })(M.eM || (M.eM = {})); Unnecessary semicolon.
var testReadLongPtrAsync = async(function *(declaration) {             const readLongPtr = lib.interface.readLongPtr;             assert(_.isFunction(readLongPtr)); Unreachable code.
}catch(e){           log.error(e); Unexpected 'debugger' statement.
connections = JSON.parse(localStorage.connections);       } catch (e) {true}       connections = $.isArray(connections)? connections : [{}]; Unnecessary semicolon.
return function() {    Mog.POST('/api/cmd/' + cmd);   }; Undefined variable.
$fileInput.duOption('limit', autostartOn? false : 5);              if (autostartOn) {                  $fileInput.duOption('limit', autostartOn);              } else { Empty block statement.
{                 if(account.txs && blockstrap_functions.array_length(account.txs) > 0) Unexpected console statement.
throw new Error("LUA_TCCL not implemeted yet");         case CT.LUA_TLCF: Unreachable code.
}   if (hasTransformer) { Unexpected 'debugger' statement.
'use strict';     var ContactModel = JSON.parse(ContactModel).data;     var App = React.createClass({ Redeclaring variable.
if (false) {       function utcnow() {         now = new Date();         return now.toISOString(); Move function declaration to function body root.
var f = features[i];     if (f[3]) {       Unexpected 'debugger' statement.
} const statistics = async (req, res) => {   try { Unused variable.
}],                 options: {                     replacements: [{                         pattern: /\"version\":\s\"[0-9\.a-z].*",/gi,                         replacement: '"version": "' + grunt.option('newver') + '",' Unnecessary escape character.
options = options || {};             if (!loader ||!(jqLoader instanceof $) || jqLoader.attr('data-skip-enhance') == 'true') {                 return; Unexpected negating the left operand of 'instanceof' operator.
display.input.focus()     doc.history.lastSelOrigin = null Undefined variable.
this.name = name || `Extension#${this.id}`;   this.name_key = name_key || this.name.replace(/[^A-Z0-9_-]/g, '').toLowerCase();   if ( /^[0-9]/.test(this.name_key) ) Unnecessary escape character.
if (mutationDataType === "SV") { Unexpected 'debugger' statement.
import: 'import',     sourcecodes:'sourcecodes', Duplicate key 'included'.
let match = null;   while ((match = regex.exec(string))) {     matches.push(match); Expected a conditional expression and instead saw an assignment.
var opts = {}; opts.el = document.createElement('div'); opts.el.textContent = "loading"; Unnecessary semicolon.
module.exports.process = function(context) {  if(context.options.emit) context.options.emit(this.emit, this.channel); Unexpected 'debugger' statement.
if (typeof value === 'number') {   return formatNumber(fn, value);  }  if (typeof value === 'bigint') {   return formatBigInt(fn, value); Invalid typeof comparison value.
var $transitions = $injector.get('$transitions');         $transitions.onStart({}, verifyState);       } else { Unnecessary semicolon.
if (variant.enabled) {           var first = variant.capabilities.table[0].join("|"); Unexpected console statement.
{expected:expected, actual:actual});     }     expose(assert_greater_than, "assert_greater_than"); Unnecessary semicolon.
auth.login(user, function(data) {
var length = items.length   console.error('\n%sed %d dependenc' + (1 == length? 'y' : 'ies'), command, length) }
geometryWireframeButton.addEventListener('click',     () => {       const selectedGeometryIndex = store.geometriesUI.selectedGeometryIndex; Unused variable.
if (options.debug) {       data.debug = steal.toJSON(deepExtendWithoutBody(currentData)); Unexpected constant condition.
'Technical Analysis: HT_DCPERIOD': 'data',   '1. Information': 'information', Duplicate key 'Technical Analysis: HT_DCPERIOD'.
var bignumber = 31363200000;   assertDoesNotThrow(assertEquals(m[p](Math.round(bignumber/864E5)/7)+1, 52)); };
}           catch (err) {             logger.error('Empty block statement.
})       linkingModel = mongoose.model('user_group', linkingModelSchema) Redeclaring variable.
module.exports = function (hookArgs) {     const pluginRoot = path.join(__dirname, "..", ".."); Unexpected 'debugger' statement.
export function extent([array, accessor], options) {   if (accessor) {     array = array.map((d) => get(d, accessor)); Redundant double negation.
throw new Error("[captcha_bypass]: attempted sec1DecodePoint with incorrect tag: " + p);     } Unreachable code.
let list = [];
shell         = require('shelljs'),     platforms     = require('../platforms'), Redeclaring variable.
var originalTimeout;     beforeEach(() => {         originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL; Undefined variable.
}     else if (!this.$helperText) { Redundant double negation.
var JSSourceFilefromCode,         textDepRegExp = /["'](text)\!([^"']+)["']/g,         relativeDefRegExp = /(require\s*\.\s*def|define)\s*(\s*['"]([^'"]+)['"]/g,         cssImportRegExp = /\@import\s+(url\()?\s*([^);]+)\s*(\))?([\w, ]*)(;)?/g, Unnecessary escape character.
module.exports = function (input, out) {};
}       setStyleFunction(def, vectorStyleId, vectorStyles, layer, state, day)     } Empty block statement.
if (rootElem.className.search(new RegExp('\\b' + klass + '\\b')) >= 0) {       return Rx.Observable.fromEvent(rootElem, eventName); Unexpected console statement.
rows.push(row);  let rowLength = 5; Unused variable.
this.paste = function() {     var doc = this.__document.startSimulation();     var sel = new Selection(doc, this.selection); Unreachable code.
module.exports.process = function(context) {  var err, actual, expected; Unexpected 'debugger' statement.
return new Promise(function (resolve, reject) {             var xhr = new XMLHttpRequest();             function responseURL() { Undefined variable.
console.log('   -sp --sourceFilePrefix <path to sourcefile> The relative path to the original source file for use in the coverage results.');                     break; Don't use process.exit(); throw an error instead.
};   var playerNameHandler = new PlayerNameHandler(g_client, $("name"));   ExampleUI.setupStandardControllerUI(g_client, globals); Redeclaring variable.
import React, { Component, PropTypes } from'react';
}else if(length > 0){                 output = TM.renderTplById('timelineTemplate',renderData);                 $$('#ourView').find('.time-line-content').prepend(output); Redeclaring variable.
self.toggleProperty('submitting');                      console.log('submitting');                  }); Unexpected console statement.
constructor(src, size, topLeft) {
for(i;i<len;i+=1){         path = createNS('path');         groupPath.appendChild(path); Undefined variable.
return [ loop, mid ]             } else { Unreachable code.
function positionMenu(el, opts) {       if (opts.isRemoved) return; Unexpected 'debugger' statement.
function opmlGetOutlineObjects(doc) {   const elements = opmlGetOutlineElements(doc);   const objects = [];
})         break       default:         console.log(`No special handling of topic=${topic}`) Expected a 'break' statement before 'default'.
var xRadius = (1 / x) * (this.drawingArea / 2);        x = this.drawCenterX + (this.drawingArea / 2);         var y = this.drawCenterY - xRadius; Redeclaring variable.
diffPrimitive(context, expected, actual);       break;     case 'function':       try { Expected a 'break' statement before 'case'.
{         var colorTop = this.getInnerColorTop();         var colorBottom = this.getInnerColorBottom();         var colorLeft = this.getInnerColorLeft(); Redeclaring variable.
console.log('Failed'.red +'to fetch challenges from API!'+ error)     }) Don't use process.exit(); throw an error instead.
let config = require('./config') const c = new Yuuko(config) Unexpected console statement.
return route('get', path); } Unnecessary semicolon.
if (this.options.showLoading) {                     this.element.removeClass(this.options.loadingClass);                 } Undefined variable.
let context = this.forward(stream)     if (stream.eol()) { this.forward(null) }     for (; context; context = context.prev) Unexpected console statement.
.addClass('btn waves-light waves-effect')                 .text('close')   var parentBtn = $('<a/>')                  .addClass('btn waves-light waves-effect')
console.log('Unmatched:', errorType, errorDescription, errorRe);     }; Unnecessary semicolon.
var match = semver.maxSatisfying(versions[key], peg); Unexpected 'debugger' statement.
export class DependencyGraph {   get inner() { return this._inner }   constructor(code) { Expected to return a value in getter 'inner'.
for (var i = 0, b; (b = this.$.ballpit.children[i]); i++) {    if (b.bounds.t + b.bounds.w > this.$.rectangle.bounds.t) { Expected a conditional expression and instead saw an assignment.
return this.tile;    case("left"): Unreachable code.
var space2View = space2.write(document);
logger.error(error)       } Don't use process.exit(); throw an error instead.
topic : function( post ) {             return post.count(); Unexpected 'debugger' statement.
var node = visited[i];   var inputs = node.parents.map(function(p) {    var i = that.ins.indexOf(p);    if (i!== -1) Redeclaring variable.
if (this.getVertical()) {     this._$OwnerDomRef.unbind(Device.browser.firefox? "DOMMouseScroll" : "mousewheel", this.onmousewheel);    } Redundant double negation.
path: path.resolve(__dirname, 'dist'),       filename: "iframeHashManager.js",       library: "iframeHashManager", Duplicate key 'filename'.
var ds = {}   this.ds.iterate(this, null, null, function (n) {     var user = n.id[0] This generator function does not have 'yield'.
var Xml = require('./Xml'); class Xslt extends Xml {} Object.assign(Xslt.prototype, { Unnecessary semicolon.
require('./methods/tag')(Text); require('./methods/termFns')(Text); require('./methods/normalize'); 'Text' is a class.
function extractWords(text) {       var tokens = text.toLowerCase().split(/[,.\`\'#\s]+/mg);       tokens.forEach(function(key){ Unnecessary escape character.
result = TinCan.StatementRef.fromJSON(JSON.stringify(raw));             ok(result instanceof TinCan.StatementRef, "returns TinCan.StatementRef"); Redeclaring variable.
var table = false;  var code = false;  for (var i = 0; i < lines.length; i++) { Redeclaring variable.
return permutes;   } Unnecessary semicolon.
console.log(student, attempts, chosenAttempt);                     } catch (error) { return; }                 } Empty block statement.
onFileChange(input) {       const filename = get(this.file), 'name', '');       const ext = last(filename.split('.'));       const validFormat = filename === ext || /gz|sql|txt/i.test(ext); Undefined variable.
saveImagesData: function () {             var imageData = Object.keys(this.imagesData).reduce(function (accumulator, id) { Unexpected 'debugger' statement.
import React from'react'; Unused variable.
var x = start.x - (this.getWidth() / 2) + 10;   if (this.vert_justification == Vex.Flow.Annotation.VerticalJustify.BOTTOM) {     var y = this.note.stave.getYForBottomText(this.text_line); Expected a conditional expression and instead saw an assignment.
console.error('Configuration parameter `%s` is required.', param);     } Don't use throw an error instead.
return registry.editorComponents; } Unnecessary semicolon.
var self = this,       options = opts || {},       stream = new Stream, Redeclaring variable.
execute_query = query;     if (!("sort" in options || "sort" in query_capabilities)) {      if ("skip" in options && "skip" in query_capabilities) Unexpected negating the left operand of 'in' operator.
}     this.dispatchEventToListeners(OverlayModelEvents.ExitedInspectMode);   } Undefined variable.
}else{                             scale Unexpected 'debugger' statement.
BASE_PORT = 9000;         MATCH_SERVER_PORT = 8081;     } else if (enums.APP_PRODUCTION_MODE === env) {
else                 event   = event;
delete taxonomy.GENUS;                     }                     if(!vm.hasRankedTaxa){ Unnecessary semicolon.
var socket = io(); var app = angular.module("app", ["firebase"]);
k = k || _.bind(editor.notebook_loaded, editor, null);             var k2 = function(notebook) {
describe('async-validate:', function() {   function Component(){}   var descriptor = { Unnecessary semicolon.
const _ = require('lodash'); Unused variable.
export function removeFields(str) {  return str.replace(/\$\{\d+(:[^\}]+)?\}/g, ''); }
case "os_free_memory":    cunit = "";    for (var i = 0; i < datas.osFreeMems.length; i++) { Redeclaring variable.
AWS.CloudWatch.Client_20100801 = inherit(AWS.Service, {});
if (data.reachable) {                 self.model.set({password: hex_sha512(self.model.get('password'))});                 self.model.save(); Undefined variable.
qx.Clazz.define("qx.ui.treevirtual.SimpleTreeDataCellRenderer", {
return localforage.setItem(key, value)   } catch (err) { Unreachable code.
angular.module('Fablab')  .directive('userPaymentHistory', [ '$rootScope', function ($rootScope) {  return { Undefined variable.
currentSelection.barIndex--;         while(relevantInstrument.bars[currentSelection.barIndex].items.length == 0){          if(currentSelection.barIndex == 0){ Unexpected constant condition.
throw err       }) Unreachable code.
};     var untrackSymbols = function(symbol) {         symbol.forEach(untrackSymbols);     }; Undefined variable.
import {ViewEncapsulation} from './metadata/view'; import {TypeDecorator, makeParamDecorator, makePropDecorator} from './util/decorators'; Unused variable.
var expected     ; Unexpected 'debugger' statement.
import ReactDOM from'react-dom'; import InfiniteCarousel from './components/InfiniteCarousel.js'; Unused variable.
pluginManagerBase.initialize(null, null, null);             pluginManagerBase.executePlugin('MinimalWorkingExample', managerConfiguration, function () { Unused variable.
})); }; PolygonProgram = Webvs.defineClass(PolygonProgram, Webvs.ShaderProgram, {     draw: function(color, points, mode) { 'PolygonProgram' is a function.
while ((match = search_regex.exec(input))) {             if (remove_regex && remove_regex.test(match[0])) Redundant double negation.
function(node, event) {       if (Cards._suppressClick) { Unexpected console statement.
attachAttributeToNodes(domNode.children[i], key, value);     } }
function roomToJSON(userjid, room, meetingsPath) {   var jsonroom = room.exportJSON(userjid) Unused variable.
var item = document.getElementById(dlLink.id + '-link');       if (item) {         var img = document.createElement('img'); Redundant double negation.
export default { Unused variable.
$(window).on('action:topic.loading', function (e) {             addListener($(elements.BUTTON));         });
var m = jobName.match(/^((.*)::)?([a-zA-Z0-9-_]+)$/);       return { name: m[3], namespace: m[2]||null }; Unexpected 'debugger' statement.
quotify :'red',        prompt :!tasks.length     }); Redundant Boolean call.
maxSteps: 10,   getTime: performance.now.bind(performance),   ticker: window.requestAnimationFrame.bind(window), }); Undefined variable.
}             return false;         }; Unreachable code.
-ol.Projection.EPSG_3857_HALF_SIZE, ol.Projection.EPSG_3857_HALF_SIZE);   var tileSize = new ol.Size(256, 256);   goog.base(this, resolutions, extent, origin, tileSize);
.appendField( "LCD print" )                .appendField( new Blockly.FieldImage( __dirname +                     'quote0.png', 12, 12 ) )                .appendField( new Blockly.FieldTextInput( '' ), 'TEXT' ) Undefined variable.
gc.fillText(val, x + halignOffset, y + valignOffset);             }             if (isColumnHovered && isRowHovered) { Empty block statement.
const $comment_body = $entry.querySelector('[itemprop="text"]');
0, 0, this.singleWidth, this.singleHeight );           }          canvas.restore(); Empty block statement.
lastTable: function () {     if (this.page!== this.totalPages) {       this.totalPages = Math.ceil(this.totalAmount / this.size); Empty block statement.
text = svg.append('text')            .attr('class', 'title') Unused variable.
if ((state.activity === 'playing') && (state.history.lastVisited[kind] === index)) {         return false; Unexpected 'debugger' statement.
options.method = 'DELETE';     return execute(url, options);   } Undefined variable.
return console.log(err);     } Unnecessary semicolon.
let transitionHookWasCalled = false   history.block(() => {     transitionHookWasCalled = true Unused variable.
});     draw.on('drawend', Redeclaring variable.
import './SingleProfile.css'; import {getDate} from '../../../../../common/common'; import sqlFormatter from "sql-formatter"; Unused variable.
var lounge = require('../../lib'); var uuid = require('uuid'); Unused variable.
console.groupEnd("drawWidget.buildLinkFunc:"+type);             console.timeEnd("drawWidget.buildLinkFunc");         };
import ObjectComponent from './ObjectComponent'; import {attachMouseListenersDocumentExtended} from '../util/listener-utils'; Unused variable.
return process.exit(0);   } catch (err) { throw new Error('Don\'t use process.exit() throw an error instead.
if (filter.outFields) {           response.fields = [];
init: function() {              var w           = screen.width,                  h           = screen.height;                this.supported  = parseFloat(_mediaInfoStyle.height) === 1; Undefined variable.
try {     return require.resolve(path.resolve(name));   } catch (err) {} } Empty block statement.
name,       }       break;     case 'DOCKERHUB':       required = { Expected a 'break' statement before 'case'.
if ('ABCD'.indexOf(cmd) >= 0) {         tracks_to_submit = side(cmd);     } else {
var $element = $('a[href^="' + page + '"]', $elements);      var $group = $('a[rel="' + $element.attr('rel') + '"]', $groups); Redeclaring variable.
.filter((version) => {         if (filter) {           return version.local_title.toLowerCase().indexOf(filter.toLowerCase()) > -1 || Redundant double negation.
function closeChatRoom() {   $("#chat").hide(); Unexpected console statement.
import React from'react'; import { Upload, Button } from 'choerodon-ui'; Unused variable.
OutTransfer.prototype.calculateFee = function (transaction, sender) {  return (transaction.freezedAmount * constants.fees.send)/100; Unused variable.
if (!e.altKey) {                  var gs = this.layerManager.gridSize; Redeclaring variable.
Object.keys(map).forEach(k => {       const v = map[k]; Unused variable.
import { TimesIcon } from '@patternfly/react-icons'; import { t } from '@lingui/macro'; Unused variable.
onLoad: function (options) {     noLogin: true,   }, 'noLogin:' is defined but never used.
ctx.fsEach(async function(file) {                     if (!/demos/.test(file.path)) {                         file.extname = '.html'; Empty block statement.
url             : 'api/user_preferences/' + Galaxy.user.id + '/permissions',                     submit_icon     : 'Save permissions'                 }, Duplicate key'submit_icon'.
switch(action.type) {     case SAVE_BOOK_DATA:       return state   } Expected a 'break' statement before 'default'.
var _regex = /^(\s*\*\s*).*$/;           editor = atom.workspace.getActiveTextEditor();           var cursor_position = editor.getCursorBufferPosition(); Redeclaring variable.
} catch (e) {         log.info('Parse Failed Codeforces\n' + e.message);       } Unexpected console statement.
"use strict";     if ("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch) {         $("html").addClass("uk-touch");
};     case TYPE.MARKET_DATA_LOADED: Unreachable code.
try {                      body = JSON.parse(body);                      if (body.profile_image_url_https) { Redeclaring variable.
});   } if (i == n) {     return L.icon({ Expected a conditional expression and instead saw an assignment.
if(error.dataPath.charAt(0) == '.') {         error.dataPath = error.dataPath.replace(/[.\[]/gi, '/')         error.dataPath = error.dataPath.replace(/[\]]/gi, '') Unnecessary escape character.
'use strict' const db = require('./db') Unused variable.
var item;   while ((item = this.getActive())) {    item.classList.remove('active'); Redundant double negation.
}           }           else if(xyMapOffset.x <= 0) {             for (var i = 0; i < mapLayers.length; i++) {               mapLayers[i].move("left", distance); Undefined variable.
document.addEventListener( "DOMContentLoaded", completed, false );
'use strict';
if (angular.isDefined(window.ipcRenderer)) {       window.ipcRenderer.on(IPC_JIRA_CB_EVENT, () => { Undefined variable.
} ); export { InstancedBufferGeometry } Unnecessary semicolon.
startId = conditionStartId;       tmpId = conditionStartId;       if (conditionMachine) { Redeclaring variable.
scope.mixer = new THREE.AnimationMixer( scope ); 'scope.mixer' is assigned to itself.
for (var j=0; j<complexList.length; j++) {         complexList[j] = id;        } Undefined variable.
jhipsterFunc.replaceContent(this.javaDir + 'domain/AbstractAuditingEntity.java', '\s*@JsonIgnore', '', true);       } Empty block statement.
config.parent = '.' + name;         drawChart(parsed_rows, config); Unexpected console statement.
while (iCell--) {     if ((cell = clippedCell = cells[iCell])) {       halfedges = cell.halfedges; Expected a conditional expression and instead saw an assignment.
}                     var props = [], visitedProps = [], accessors = {};                     Properties.allOwnPropertiesOrFunctions(value, filter).each(function(prop) { Unexpected 'debugger' statement.
$("#" + id_engageContent).css("max-width", "");         for (var i = 0; i < videoDisplaySizeTimesCheck; ++i) {             if ($(window).height() < ($("." + id_videojs_wrapperClass).position().top + $("." + id_videojs_wrapperClass).height())) { Undefined variable.
layer = new maptalks.VectorLayer('canvas');         map.addLayer(layer);
.attr('height', size);      if (background) {    group Redundant Boolean call.
var nextContext = void 0,         nextProps = nextVnode.props, Unused variable.
var path = require('path'); exports = module.exports; Unused variable.
import { combineReducers } from'redux'; import { List, Map } from 'immutable'; Unused variable.
label: 'Job ID',                 ngClick: "showJob(jobhost.job)",                 columnShow: 'host_id!== null', Unnecessary escape character.
throw new Error(`Unsupport config file extension. File path: ${filePath}`);   } Unreachable code.
$scope.config.versionString = data;   }, function () { Unexpected console statement.
var layer_path = "http: var firebase_url = 'https: Unused variable.
import { Tab, Tabs, TabList, TabPanel } from'react-tabs';
}                     ingoose._db.createObjectStore(name, schemas[name]); Unexpected console statement.
DefaultEventQueue.prototype.queuePath = function () {         return "ex-" + this._config.apiKey.slice(0, 8) + "-q";     };     return DefaultEventQueue; Redundant double negation.
...prevState,         errorMsg: action.payload,       }; Duplicate key 'errorMsg'.
if ( (matches = line.match( /(PREFIX) (\S+): <([^>]+)>/ ))!== null ) {     if ( ENTITY_TYPES[ matches[ 3 ] ] ) { Expected a conditional expression and instead saw an assignment.
var _sanitize = require('../sanitiser/_sanitize'),     sanitizers = { Unused variable.
const isNumber = (num) => {     return typeof num === 'number' &&!isNaN(num) } Use the isNaN function to compare with NaN.
module.exports = {   createPinCode (userId, pincode) {     return new Promise((resolve, reject) => {       User.findOneAndUpdate( Unused variable.
}                     Object.freeze(this); Empty block statement.
}         case 'phone': Unreachable code.
var sequenceLengthPreInsert = tree.get('$sequenceLength'); Unexpected 'debugger' statement.
return instance;     let system,         adapter, Unreachable code.
if (options.userSideValidation === true) {    if (o.encryption_applied) throw new Error(_('Encrypted items cannot be modified'));   } Redundant double negation.
var result = []   for (i = 0; i < pgs.length; i++) {     pg = pgs[i]     var npg = [] Redeclaring variable.
map.paths[id] = path;                     map.bounds = mapHelper.createBounds(path.latlngs); Unexpected 'debugger' statement.
name = node.name;    newTypeObj = env.lookupTypeObj(name, node.extras.target); Unexpected 'debugger' statement.
console.log("re-render component");             resultSet = nodeComparator.getChanges(); Unexpected console statement.
};     case TYPE.BINANCE_24: Unreachable code.
Object.defineProperty(Phaser.TileSprite.prototype, "frame", { Undefined variable.
var orig = element.style.getComputed(element, "overflow"); Undefined variable.
fnBlock.push(') {\n');         for (i = 0; i < path.loopIndex; ++i)             fnBlock.push('var l', i,'= 0;\n'); Redeclaring variable.
import React, { PropTypes, Component } from'react'; import { Card, CardActions, CardMedia, CardTitle, CardText } from'material-ui/Card';
describe('#118 ', (report, done) => {   let cache = null;
else {             swap = line.charAt(column-1) + line.charAt(column-2);             range = new Range(cursor.row, column-2, cursor.row, column);         }         this.session.replace(range, swap); Redeclaring variable.
var self = this; Unexpected 'debugger' statement.
.on('error', (err) => {       if (typeof seleniumServer!== 'undefined') seleniumServer.kill()       throw err Don't use process.exit(); throw an error instead.
'use strict'; var $workflow = require('./workflow.js'); var $metamodel = require('./metamodel.js'); Unused variable.
__dirname = '.'; }
} else if (username) {   var url = buildUrl(network, username) Redeclaring variable.
import { getUser } from '../Actions/UserActions';
if (n > 2) {        for (r = 3; r <= 2*n - 2; r += 1) { Redeclaring variable.
var dx = (t2[5][0] - t[5][0]);             var dy = (t2[5][1] - t[5][1]);             var d2 = Math.sqrt(dx * dx + dy * dy);
window.customElements.define('accordion-view', AccordionViewElement); const agent = getAgent(window.navigator.userAgent); Undefined variable.
citeHref: {},                     alignment: {}                 } Duplicate key 'visible'.
if (this.target!== null)         {
const json = this.model.get('_loaded_map_json')       builder.load_map(json? JSON.parse(json) : null) Unexpected console statement.
headers = {},     reg = /^(.*?)\:\s*([\s\S]*?)$/gm,     match, header, key; Unnecessary escape character.
component.enableDateInterval(component, true);       } Unnecessary semicolon.
!~-(((r, undefined) => { Unused variable.
}   ZeroClipboard._client.setCurrent(elementWrapper(target)); };
end = "نَ";             endDiac = "ْ";           } Redeclaring variable.
super(props);     }     render() { Unnecessary semicolon.
else if ( child ) {    if ( section.n === SECTION_UNLESS ) { Expected a conditional expression and instead saw an assignment.
});   }).controller('cfScaleDownClusterStageCtrl', function($scope, accountService, stageConstants) {     var ctrl = this; Unused variable.
require('./ServiceBase'); SuperMap.REST.ChartFeatureInfoSpecsService = SuperMap.Class(SuperMap.ServiceBase, { Undefined variable.
if(status === "backbutton") {   evt.fireEvent(document,"backbutton");   return "true"; Undefined variable.
return 'thesis'; Unreachable code.
case DOMEvents.KEYPRESS:     charCode = e.which? e.which : e.keyCode;     if (charCode >= 32) { Redeclaring variable.
console.debug(`[@] fetchFavicon: Downloading ${iconPath}`);             download(`https: Unexpected console statement.
const Order = () => (     <Layout> Unexpected empty object pattern.
var PowerChart = (function () {     'use strict';
for (let selectionParent = editor._variable.selectionNode;!/sun\-editor\-id\-editorArea/i.test(selectionParent.className); selectionParent = selectionParent.parentNode) {                 if (selectionParent.nodeType!== 1) continue; Unnecessary escape character.
ParticleExplorerTool = function() {     var that = {};
withProps, } from'recompose'; Unused variable.
length = 1         throw new Error("dtrnd")       } Unexpected 'debugger' statement.
this.previousValues = _.tail(this.previousValues);                 };
function moveOn(e) {   if (e.width) Unexpected console statement.
case 'Float':         return `${value}`;       case 'Boolean': Unreachable code.
function $ext(dest, src, dont_overwrite) {    src = src || {};    var key; Redeclaring variable.
const result = [];       const numSubs = template.length - 1;       for (let segnum = 0; segnum <= numSubs; segnum++) { Undefined variable.
DEBUG_MODE =!!val; } Unnecessary semicolon.
imageLoaders[scheme] = imageLoader;     } Unnecessary semicolon.
complete: function() {         console.log('done', show?'showing' : 'hiding');         done && done();
r.lastIndexOf('/') + 1, r.lastIndexOf('.')                         ).replace(/[-+._]+/g,'')                     ).toLowerCase() Unnecessary escape character.
} else {      source.code = source.code.replace(new RegExp('(\\s?)/\/!' + tag + '-start((.|\r?\n)*?)\/\/!' + tag + '-end', 'gim'), empty);     }
console.log('Error :', err);         } Empty block statement.
isDate(obj) {         return obj instanceof Date? true : typeof obj === 'object'? this.objectToString(obj).match(/date/i)!== null : false;     } Invalid typeof comparison value.
const onload = (event, element) => {   if (loadedItems.length) {     loadedItems.push(element.href);   } Undefined variable.
{         return 0;     } Unreachable code.
return callback(err);     } Unreachable code.
name: "This is an example test",   tags: [process.env.TRAVIS_NODE_VERSION, 'CI'],   'tunnel-identifier': process.env.TRAVIS_JOB_NUMBER,    } Duplicate key 'tags'.
});     return;     default: Unreachable code.
var closestDate = closestTo(currentDate, closestAvailableDates);     if (closestDate) { Unexpected 'debugger' statement.
return this.file;  });  Clazz.defineMethod (c$, "autoSelectOnLoad",   function () { Undefined variable.
this.LOOSE_SLASHES_REGEXP = new RegExp('^\/|\/$','g'); Unnecessary escape character.
let { x, y, circle } = wrapper;  strokeWeight(1);  noFill(); Undefined variable.
var yPos = i * hM + y;                         for (x = 0; x < wM; x++) {                             xPos = j * wM + x;                             var xyPos = (yPos * wDst2 + xPos) * 4; Redeclaring variable.
Ti._5.presetUserDefinedElements(this, args); };
type="button">               {intl.str('show-goal-button') : Unexpected constant condition.
throw new Error(`[vuepress] Syntax highlight for language "${lang}" is not supported.`)     } Unreachable code.
List.prototype.equals = function (that, equals) {     equals = equals || this.contentEquals || Object.equals;     if (this === that) { Redeclaring variable.
var solutions = [];     for (i=0, l=states.length; i<l; i++) {       if (states[i].handlers) { solutions.push(states[i]); } Redeclaring variable.
function renderNotFound (state) {   return html` Unused variable.
vAll[i].setZIndex(vIndex++);   } } Unnecessary semicolon.
codegen.createMacroDirectory = require('./macroDirectory').createMacroDirectory;   codegen.typeof = require('../../../lib/typeof').typeof; Undefined variable.
module.exports = Aria.classDefinition({         $classpath : "aria.storage.LocalStorage", Undefined variable.
label: 'Rename',               action: function (obj) {                 tree.edit(obj);               } Unused variable.
actions: {     viewAllBuilds() {       return this.get('routing').transitionTo('builds'); Unused variable.
var api_complete = false,             current_range, Unused variable.
for (i = 0; (r = references[i]); i++) {       var element = r.element; Redundant double negation.
this.emit('drag', this);     } Unexpected console statement.
_.each(IB.FullColourDescriptionMap, function(colour) {         var gcolour = _.findWhere(colour.literals, {'id': 'define'}).value;         IB.ColourMap[gcolour] = new IB.Colour(gcolour, colour.html, colour.name);     });
import appSettings from 'common/appSettings'; import { clearDecorations } from 'editor/decorations'; Unused variable.
obj.account = ['*'];                 } else {                     arr = [];                     if (tObj.accountscreate) arr.push('create'); Redeclaring variable.
.on('exit', function () {         if (!argv['no-quit']) process.exit(0)       }) Don't use process.exit(); throw an error instead.
context.log(err);        throw err;     });
for (y = 0; y < height - gap; y += gap) {     for (x = 0; x < width - gap; x += gap) {
clone.worldTransform.copy(this.worldTransform);             clone.dirtyWorld = this.dirtyWorld;         }, 'clone.dirtyWorld' is assigned to itself.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-11\/vegmageddon-1353118122.swf",  admin_props : false, Unnecessary escape character.
$("button").on('click', function() {    selectOption($(this).prop('name'), getVisibleDilemma());   });
import FooterWrapper from '../../styles/layout/FooterStyles';
log.error('Reporter "%s" does not exist!');   process.exit(1); } Don't use process.exit(); throw an error instead.
const HOST_RE = /^(\[[0-9a-f:]+\]|(?:\d{1,3}\.){3}\d{1,3}|[a-z][a-z0-9\-.]+)(?::([a-z][a-z0-9\-.]+))?(?::(\d+))?$/i function parseHostString (hostString) { Unnecessary escape character.
onMouseDown: function (evt) {         if (evt.isLeftMouseButtonDown()) { Unexpected 'debugger' statement.
return _this3.row(field, key, size);             } Unreachable code.
options = {};     }     if (typeof options.mood!== "undefined") { Unnecessary semicolon.
Sprite.prototype.render = function (target, prepend) {   target = target || null;   var prepend = typeof prepend === 'boolean'? prepend : true; Redeclaring variable.
this.model.friends                .remove(this.model, { Undefined variable.
export const store = new Store({   state: { Undefined variable.
throw new Error(           'Module "' + name + '" required an unknown identifier "' + id + '".' +           'Available dependencies:'+ JSON.stringify(mod.deps, null, 2) Undefined variable.
/\bMSIE 6\./.test(navigator.userAgent);   var _pr_isIE6 = function () { return isIE6; };   return isIE6; '_pr_isIE6' is a function.
form.append("design", new Blob([design], {type: 'application/octet-stream'}, "mydesign.glm"));       if (zip!= null){         form.append("design_imsld",zip); Unexpected constant condition.
}                 }                 return call.apply(this, arguments); Unnecessary semicolon.
var l = 2; for (var i = 0; i <= 2; i++) { Undefined variable.
var k=-1;   for(i=0;i<=kn.length;i++){     if(kn[i]<=t && t<kn[i+1]){ Redeclaring variable.
calculateFee (trs, sender) {     library.base.block.calculateFee();   }
}   } else { Unreachable code.
warnValidStyle = function(name, value) {     if (name.indexOf('-') > -1) { Unused variable.
this.onDraw(function () {         ctx.decorator = this.showHiddenCols._decorators[0]; Unexpected 'debugger' statement.
default:         throw new Error('unknown pull_type method');     } Unreachable code.
console.log("Completed export and written as CSV to \"" + config.exportfile + ".csv\".");                                              }); Don't use process.exit(); throw an error instead.
text = text.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");       return (value.search( new RegExp(text) )!== -1);     }, Unnecessary escape character.
percentageFromCfi(cfi){   var pg = this.pageFromCfi(cfi);
function fauxChange(annotation) {               props.onChange(Object.assign({}, props.annotation, { value: currentComboAnnotations }));             }             let { annotation } = props; Move function declaration to function body root.
} else {       value = "You must ACCEPT the HIT before you can submit the results.";       inputElement = <input type="submit" id="submitButton" value={value} disabled />;     } Redeclaring variable.
return state - 1;         }         case RESET_COUNTER: { Unreachable code.
defaultMessage: 'entries',   },   categorySelect: {     id: 'app.containers.SayingsPage.component.SayingDataForm.categorySelect', Duplicate key 'categorySelect'.
if (selectedStyle && this.selectItemContains(item)) {             if (selectedStyle.shadowBlur!= null && selectedStyle.shadowColor == null) { Unexpected 'debugger' statement.
class UserStore extends Store {     constructor(flux) {         super();         this.state = { Expected to call'super()'.
return 2;    case 'd2': Unreachable code.
if (typeof(o.filters)!= 'object') {           try { Unexpected constant condition.
};     case TYPE.SET_THRESHOLD: Unreachable code.
getDefault(index) {      if (typeof index == 'undefined') {        return this.scope.default Invalid typeof comparison value.
.get('/')      .reply(200, { success: true });       var client = new RetryRestClient(restClientSpy); Unnecessary semicolon.
for (let type of [`half`, `float`]) {             print(`native ${type} Sample(TextureDepth2D<${type}>, sampler, float2 location);`); Redeclaring variable.
this.summaryWhiteList.forEach(function(property) {                 if (metacardDefinitions.metacardTypes[property]) {                     propertyArray.push({ Redundant Boolean call.
var Log = require('../../src/lib/log'); var TracerLogger = require('../../src/lib/loggers/tracer'); var now = new Date('2013-03-01T00:00:00Z'); Unused variable.
switch (state.chargingState) {     case 'Charging': {       const timeToFull = toHoursAndMinutes(state.timeToFullCharge)       return [`Charging at ${state.chargerPower} kW, complete in ${timeToFull}. ${range}`] Unexpected lexical declaration in case block.
modelCtrl.$render = function() {     input[0].checked = (modelCtrl.$viewValue == value); Unexpected console statement.
selectable: true,      label: $scope.leftArrow,      selectable: true,      set: function () { Duplicate key'selectable'.
Date = function(str){     var d = str === undefined? new Date() : new nativeDate(str); Read-only global 'Date' should not be modified.
switch (e) {       case 'ecma3':           e = '--ecma3'           break 'e' is constant.
define(function(require, exports, module) {     var Transform = require('./Transform'); Unused variable.
function noop() {} function escapeXml(str) { Unnecessary semicolon.
element.rotation = angle;        } Unnecessary semicolon.
$('body').html(data.body);     $('#loading-bg').css({'opacity': 0.75}).show();     $('title').html(data.title);
function NextNights(props) {     var opacities = props.nights.map((_, index) => {return {opacity: 0.5 * ((10-index)/10) + 0.5};});     return ( Unused variable.
function findDoc(ts, doc, name) {     for (var k = 0; k < ts.docs.length; k++) {       var cur = ts.docs[k];       if (cur.doc == doc) return cur; Redeclaring variable.
$interval(function () {                     saveAnswers($scope, true);                 }, 15000); Unexpected constant condition.
'recurring': 'Recurring eq true',             'timeless': 'Timeless eq true'         },         hashTagQueries: {             'alarm': 'Alarm eq true', Duplicate key 'hashTagQueries'.
var TableNode = require(__dirname + '/node/table'); var JoinNode = require(__dirname + '/node/join'); Unused variable.
return "P" + pIndex++; } Unnecessary semicolon.
var overlap = results[ind].response.overlapV     var correction = self.correct(delta, overlap) Redeclaring variable.
function ($scope) {                             $scope.isToggled = false; Unexpected 'debugger' statement.
throw new Error( 'Invalid resource to report.' );  } Unreachable code.
else if (ch == "%") {       stream.eatWhile(/[^,^\s^(^)]/);       state.beforeParams = true; Unnecessary escape character.
init(animation) {   }
if (disabled) {           disabled = true;         } else { Empty block statement.
]   for (i = 0; i < singular_indicators.length; i++) {     if (str.match(singular_indicators[i])) { Redeclaring variable.
while(match = this.regexpUnescape.exec(str)) {       let value = this.handleFormat(match[1].trim());       str = str.replace(match[0], value); Expected a conditional expression and instead saw an assignment.
export class AnyExcept extends Quantifier {     constructor(tokenTypes) {         super();         this.tokenTypes = tokenTypes; Expected to call'super()'.
window.jTool === window.$ && delete window.$; export default jTool; Undefined variable.
link: function postLink(scope, element, attrs, controllers) {       var ngModelCtrl = controllers[0]; Unused variable.
modelChangeTgt = new ModelChangeStructure({                 affected:     node2.nodeId, Redeclaring variable.
if (styleSheetsProcessed == styleSheetsToProcess) {                                                               } Empty block statement.
if( this._propagateEvents &&!this.isPropagatingFrom( emitter, event ) ) {                 var propagate = _.once( function() {                     if(!propagate._hasPropagated && _this._propagateEvents ) { Undefined variable.
function model() {     }     model.prototype = $.extend(true, {}, Default, { Unnecessary semicolon.
loader: 'file?name=${options.dir}[name].html!markdown-loader',                 test: /\.md$/             }` Unnecessary escape character.
} function ensureLoggedOut() {     exec(buildCommand("logout"), { silent: true }); };
throw new Error(err);       } Don't use process.exit(); throw an error instead.
this.sendToDaemon(func, args, cb); } Unnecessary semicolon.
} catch (e) {     remote.app.quit(); Undefined variable.
var img = this._createElement("img");                         img.onerror = function() {}; Move function declaration to function body root.
beforeEach(() => {     (mocks = {       $t: jest.fn(), Unnecessary semicolon.
if (!schemaVersion) {     console.info('Migrating local { key, rank } to { value, rank }...')     let promises = [] Unexpected console statement.
console.error(e)          throw e Don't use process.exit(); throw an error instead.
this.elem.find('.levelup'), this.elem.find('.levelup--number'));   this.pauseOverlay = new app.shared.PauseOverlay(this.elem.find('.pauseOverlay'));   this.tutorial = new app.Tutorial(this.elem); Undefined variable.
configService.registryConfig(config);   } Unnecessary semicolon.
CRUD = require('./../util/crud'),     crud = new CRUD('user'),     verify = require('./verify'); Undefined variable.
_function: while (_again) {     _again = false;     var n = _x2; Unexpected constant condition.
_.each(allBranches, function(obj, name) { branchNames.push(name); });
UI.createButton = function(buttonDescr)  { Undefined variable.
[{              'mapId': self.map.__pgmId,               'instance': self.__pgmId + '-tileoverlay',               'args': [ Duplicate key'mapId'.
var elms = document.querySelectorAll('.audit-results *');   for (var x = 0; x < elms.length; x++) {     elm = elms[x];     elm.removeAttribute('data-style-using'); Redeclaring variable.
}     loadPlayerApi() { Unnecessary semicolon.
app.use(bodyParser.urlencoded({ extended: false }))   const apiSetups = filterApiSetups(modules)   return reduce( Unused variable.
var md5 = "${MD5}"   if (typeof document === 'object') {     var appendStyle = function() {       var style = document.getElementById(md5 + '-style') Move function declaration to function body root.
test("Work with a single delegated property", function() {   ok(!dog.get('type')); Unexpected 'debugger' statement.
var React = require('react'); var cx = require('classnames'); Unused variable.
var delayedSpecWalker = require( './delayedSpecWalker' ); var coerceIntoSpec = require( '../utils/coerceIntoSpec' ); Redeclaring variable.
var regex = new RegExp(pattern);                         files = files.filter(function(file) {                             return file.name.match(regex); Redeclaring variable.
return spaceship(v.localeCompare(w), 0);     case 'array': {       let vLen = v.length;       let wLen = w.length; Unexpected lexical declaration in case block.
console.error('error:', error.message);     }); Don't use process.exit(); throw an error instead.
isMultiple = this.isMultiple,     indices;
} catch(ee) {       console.log(ee); Unexpected 'debugger' statement.
} else {       focusIndex = nextFocusIndex; Undefined variable.
import recording from '../../recording'; import feature from '../../utils/feature'; Unused variable.
console.error('Only Bash, Zsh, and Fish shells are supported :(')   return } Don't use process.exit(); throw an error instead.
appendSequenceItem: function(node) {         var $oid_node = $(node).closest('.deformSeq');         var $proto_node = $oid_node.find('.deformProto').first(); Redeclaring variable.
for (var key in obj2) {         if (obj2.hasOwnProperty(key)) obj[key] = obj[key];       }
} else {    $nextmessageset = $('#messages.user-messages').first();    if ( Redeclaring variable.
export const licenses = (configuration, http) => {   const {get, put} = http;   const fn = licenseId => { Unused variable.
const renderKey = ccOption.renderKey;   if (!renderKey) renderKey = ccOption.renderKey = ccUniqueKey;   const ccUkeys = safeGetArrayFromObject(renderKey_ccUkeys_, renderKey);'renderKey' is constant.
return false;     }     Binding.create = function (bindingDef, targetScope, attrKey, context) { Unnecessary semicolon.
element.append(toolbar);             } Redeclaring variable.
restrict: 'A',       link: function() {         var element = attrs.parentElement;         element.on('click', function(event) {           event.selectionModelIgnore = true; Unused variable.
case 'video':     var i, n, src, type;
collection = args.OldValue;              count = collection.GetCount();              for (i = 0; i < count; i++) {                  this._ElementRemoved(collection.GetValueAt(i)); Redeclaring variable.
})        .catch(console.error);     }, Unexpected console statement.
var DATE_PATTERN = /^(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)$/i;   var adapters = []; Redeclaring variable.
, Paginator , Remote  ;
var Logger = require('js-logger'); Logger.useDefaults(); Logger.setLevel(Logger.INFO); Undefined variable.
let data = response.data;       if(data.hasOwnProperty('wallets')) { Unexpected console statement.
var validations = checkVisibility? fieldOptions.validations : fieldOptions;     var serverSide =!!window;     for (var i = 0; i < validations.length; i++) { Redundant double negation.
}; } KwsMedia.prototype.__proto__   = EventEmitter.prototype; Unnecessary semicolon.
const {   StrictMode, Unused variable.
if (!this.editWindow) Ext4.Error.raise('editWindow config is required');         if (!(this.editWindow instanceof Ext4.window.Window)) Ext4.Error.raise('editWindow config needs to be a Ext.window.Window'); Unexpected negating the left operand of 'instanceof' operator.
if (!(error instanceof Error)) {         body = error; Unexpected negating the left operand of 'instanceof' operator.
data.user.permissions = [];             }             if(data.user.hotkeys == {empty: "hotkey"}){               data.user.hotkeys = []; Expected a conditional expression and instead saw an assignment.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-01\/1294354086-7937.swf",  admin_props : false, Unnecessary escape character.
sort: 'Sırala',     sortTitle: '${type}\'ın alt alanlarını sırala',     sortTitleShort: 'İçerikleri sırala', Duplicate key'sortTitle'.
&& html.toString()    .replace(/ about="[^"]+"(?=[/> ])|<meta property="mw:TimeUuid"[^>]+>/g, ''); } Unnecessary escape character.
this.eventEmitter.removeListener(type, listener);     } Unnecessary semicolon.
expect(received1[0].widget).to.equal(this.widgets.customEvents);                  require('raptor-pubsub').channel('customEvents-' + this.id).emit('emitTestEvent2'); Unexpected 'debugger' statement.
Date.getTimezoneAbbreviation = function (offset, dst) {      var n = (dst || false)? Date.CultureInfo.abbreviatedTimeZoneDST : Date.CultureInfo.abbreviatedTimeZoneStandard;      for (var p in n) {           if (n[p] === offset) { Undefined variable.
_rerenderCb() {     if (this._renderRequestId) { Unused variable.
define(function (require) {  var restartPlayback = function () {
}) {             const allDirty = rootGetters['entities/allDirty'](); Unexpected 'debugger' statement.
case 37:              state = 'l' ;             break;             case 39: Unreachable code.
var breakLoop;         for (i = l; i--;) {             if (breakLoop === null) break; Redeclaring variable.
return E24;         case 48 : Unreachable code.
var logger;     var driver = model.load( module, { Redeclaring variable.
throw self.constructor.name + " requires record to pushRecordDetailsView"    } Unreachable code.
sliderWidth = parseInt(style.getPropertyValue('width'), 10);
.catch((e) => {         console.log('If this error states "No updates are to be performed.\", it is not really an error', e);       }); Unnecessary escape character.
test();       schema = { anyOf: [ schema ] };       test(1, '#/anyOf/0'); Redeclaring variable.
var name;                 name = self.target.canonicalName(variables.scope); Unexpected 'debugger' statement.
debug('%s Table Created',table);       if (typeof(createView)!='undefined') {         client.query(createView,function(err){ Invalid typeof comparison value.
var children = my_notebooks.concat(user_nodes).sort(compare_nodes);         children = as_folder_hierarchy(children); Unexpected 'debugger' statement.
import BigNumber from 'bignumber.js'; const { MKR, DAI } = Maker; Unused variable.
DockUtils.flush = function () {         if ( DockUtils.root instanceof FireDock ) {             this.root._finalizeMinMaxRecursively(); Undefined variable.
var str = "";             for(var i = this.params.length - 1; i > -1; i--)             { The update clause in this loop moves the variable in the wrong direction.
it('should clean out unsubscribed subscribers', function (done) {     var subject = new Subject(); Unexpected 'debugger' statement.
var subscript = script.subscript(s, lastSep); Redeclaring variable.
return how.autoplay!= false? play() : play;  function play () { Unreachable code.
canvas.getContext("2d").putImageData(img2, 0, 0);  }
this.initialLoginAndLoad();   } Undefined variable.
Ext.define('devilry_subjectadmin.model.Subject', {     extend: 'Ext.data.Model', Duplicate key 'extend'.
console.log('Added image tile layer to world'); }); Unnecessary semicolon.
try {         await browser.storage.sync.set({rules});         return rules;
function writeOutput(result, cb) {       if (!options.output) { Unexpected 'debugger' statement.
console.log('you can find namuwiki database on [[나무위키:데이터베이스 덤프]] document') main() Unexpected console statement.
var hookAfter;  var hookFind;    describe('pluckQuery', () => { Unused variable.
return true; } Unnecessary semicolon.
let hostName = null;     if (!vipPortError) {       hostName = ( Redundant Boolean call.
return translate({bool: true}, 'es')      .then(e => {        expect(e).to.beDefined();        expect(e).to.equal({bool: true});       }); Undefined variable.
while (modulePath.indexOf('/./') > -1) {    modulePath = modulePath.replace(/\/[.][/]/g, '/');   } Unnecessary escape character.
setValue: function(options){             var hours, i, item, l, minutes, period, recur, startDate, temp;             if(options.startDateTime){ Unused variable.
var SC = 1 + 0.045 * a_Cp;   var SH = S_H = 1 + 0.015 * a_Cp * T;   var RT = -2 * RC * sin(radians(2 * d_ro));
} catch (err) {         throw new Error(`[show_sha] could not fetch refspec for ${repo_path}`, err)     } Don't use process.exit(); throw an error instead.
$('a').attr('title').should.eql('Google link');     cheerio.load(link('Click here to Google http:     $('a').attr('href').should.eql('http: Redeclaring variable.
var EventEmitter = require('events').EventEmitter; var path = require('path'); Unused variable.
});       if (movement.left) {         this._applyTransform3d(element, movement); Redundant double negation.
var defcols = {};   if(this.from) {    this.from.forEach(function(fr){ Unreachable code.
var Map = require('immutable').Map var Store = require('../src/store') Unused variable.
var setScales = function(chart, type){ Unexpected 'debugger' statement.
var self = this;       var login = $("#application").find(".assignees.is-flying")        .data("assignee");
metricsAtlas = this.context.measureText(atlasLabel[ctr]);                 if (metricsAtlas.width > atlasLabelWidth) { Redeclaring variable.
}     $('html, body').animate({scrollTop: $(document).height()},'slow');     var tokens = $('#tokens button');
var Mouse = require('./model/Mouse'); var Mice = require('./model/Mice'); Unused variable.
+ unicode.packages.Nd         + unicode.packages.Pc + "\\$_]|\s])+", "g"     );
var groupKey = item.u+":"+item.v;             if (cellGroupsMap.hasOwnProperty(groupKey)) { Redeclaring variable.
}             case 'S': Unreachable code.
term.bold.red('\nHint: did you remember to install FFmpeg with x264 support?\n')     return   }) Don't use process.exit(); throw an error instead.
it("move should be 1 ", function () {              const stemGroup=file.createGroup('pmc/Trajectories'); This generator function does not have 'yield'.
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[62],{
}                                     }).catch(chalk.red(console.log));                                 })); Unnecessary semicolon.
import Normalizer from './route-recognizer/normalizer'; var normalizeRoute = Normalizer.normalizeRoute; var normalizePath = Normalizer.normalizePath; Unused variable.
return changeConnectionState(state, action.payload.connectionUri, won.WON.Closed);         case actionTypes.messages.connectMessageReceived:             return changeConnectionState(state, action.payload.connectionUri, won.WON.Closed);         case actionTypes.messages.openMessageReceived: Duplicate case label.
throw e && e.stack? e.stack : e;     } Unreachable code.
exports.download = function(req, res) {   var headers = {     "Content-Type": "application/force-download", Undefined variable.
assert(sum(sum(one, two), three) === sum(sum(two, three), seven)); } catch (e) {     console.log(e.message); } Empty block statement.
}; const DAY_MILLISECONDS = api.common.duration('1d'); Undefined variable.
var first = false;    var loop = function(data) {     if (first) { Move function declaration to function body root.
},   willDestroy: function() {     var key = this.get('keyForId'); Duplicate key 'willDestroy'.
if (regs[r].signals.any_one) {       result.push(terms[r]);       continue; Undefined variable.
, colors = require('colors')  , tb = require('timebucket')
for (var i = 0, n = info.length; i < n; i++)           if (info[i] instanceof Array)             unpack(obj[i], info[i]); Invalid typeof comparison value.
var isStatic = false,    handler;   if (typeof Handler === 'function') { Unused variable.
});     it('getFoWObjectArray works with subcontainers', () => {       const fogOfWarModule = Object.assign({}, fogOfWarMod); Undefined variable.
getPerm = function(perm){    if (!isNaN(parseInt(perm, 8))) {     var mode_array = perm.split(''); Use the isNaN function to compare with NaN.
throw "GetUserToEnterExistingPasswordWithCB called but self.passwordEntryTaskMode not.None"    } Unreachable code.
if (typeof process!== 'undefined' && process.env.STREAM_URL &&!apiKey) {     parts = /https:\/\/(\w+)\:(\w+)\@([\w-]*).*\?app_id=(\d+)/.exec(       process.env.STREAM_URL Unnecessary escape character.
className={className}>         {children? children : (           <span> Redundant double negation.
ShaderProgram.prototype.link = function() {   if (!this.vertexCompiled_) { Undefined variable.
self.locked = _.get(featureOptions, 'locked', false);     self.dateStart = _.get(featureOptions, 'dateStart', null); Undefined variable.
isObject: function(obj) {   return!Ember.isNone(obj) && Ember.typeOf(obj) === 'object' && obj.constructor === Object;  }, Undefined variable.
} else {         last_trade = s.my_prev_trades[0]       } Redeclaring variable.
errorout(event, instance) {
app.all('/services/vector-tiles/dataset', flow.define(function(req, res) {   this.args = {}; Unexpected 'debugger' statement.
value: newValue    }, null,!notAsNotification);   });
for(i = 0; i < cleanedPacketArray.length; i++) {   var origin = cleanedPacketArray[i].origin; Redeclaring variable.
debugflag.should.equal(options.debug);       options = {         debug: undefined Redeclaring variable.
], function(Controller,formatter, VerticalLayout, HorizontalLayout, Text, Input, Dialog, Button, Icon) {  "use strict"; Unused variable.
goog.net.XhrIo.prototype.getResponseText; goog.net.XhrIo.prototype['send'] = goog.net.XhrIo.prototype.send; 'goog.net.XhrIo.prototype.getResponseText' is assigned to itself.
var SIGNALING_SERVER = 'https: Redeclaring variable.
module.exports = function make(redirect, _) {   var newrecord = component.slice(); Unused variable.
var took = end - start;                 if (taken >= threshold) {                   AlertService.warn('Loading cluster information is taking'+ Unexpected constant condition.
if (count)                 result.push(['count', count? count : null])         }, Undefined variable.
function execute(id, payload) {     const protocol_re = /https?:\/\ This generator function does not have 'yield'.
};         }         bindingPath = tsBinding.path.parentPath; Unnecessary semicolon.
case 'boolean':           return value === true || value === false;         default: Unreachable code.
};     requestHandler(req, {});   };
}(jQuery, d3, AMBROSE));
if(abs(this.changeDelta)>1){     this.$fastTextDelta = 0;
else if (ruleType === "COMPOUNDRULE") {     numEntries = parseInt(definitionParts[1], 10); Redeclaring variable.
this.proxy.listen(this.proxy_port, block); } Unnecessary semicolon.
import Ember from 'ember';
import React, { Container } from'react'; Unused variable.
Process.prototype.startEventLoop = function() {         runtime.control._frame = 0; Unexpected 'debugger' statement.
import { Form, Input, Checkbox } from '~/components/Form'; Unused variable.
while (wrongWord) {                         index = text.indexOf(word, currentCursor + 1); Unexpected 'debugger' statement.
var force;    return function( delta ){ Unused variable.
return sendNewPostToServerSuccess(state, action);         case actionTypes.SEND_NEW_POST_TO_SERVER_FAIL:             return sendNewPostToServerFail(state, action); Duplicate case label.
while (dfsList.length > 1) {       node = dfsList.pop();       node.parent.total += node.total; Redeclaring variable.
{             var result = self.loadModule(dep); Unexpected 'debugger' statement.
} else {                 $('#keyboard.key-CTRL').removeClass('active');             }
parse: function (response) {                 return response.data; Duplicate key 'parse'.
}     $.extend( hx, { KeyMap : KeyMap });
constraints.min = Number(this.minimum);      if (!isNaN(parseInt(this.maximum)))    constraints.max = Number(this.maximum); Use the isNaN function to compare with NaN.
}   get permalink() {     if (this.key) { Expected getter 'permalink' to always return a value.
} else if (this._calculateMoveDirection() === -1 && this._checkRangeBarMoveRange()) {       for (var i = 0; i < this.index.length; i++) {        this.index[i] -= this.defaults.step; Undefined variable.
if (!runtime.local &&!runtime.environment) {             this.error('invalid runtime specification'.red);             this.valid = false; Unexpected console statement.
window.viewModel = viewModel;     $("body").loadTemplates({       bannerTemplate: "templates/banner.html",       footerTemplate: "templates/footer.html",       guideTemplate: "templates/guide.html" Undefined variable.
import { PropTypes } from'react'; import React, { Component } from'react'; Unused variable.
var e, el, m, ml, fm, fml, element, material,   v1x, v1y, v2x, v2y, v3x, v3y, v4x, v4y,   size;   if ( this.autoClear ) { Unused variable.
email: /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/,   url: /^https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})(([\/\w\.-]*)?)(\?[-_+=~\.;&%\w]*)?(\#[-_/\!\w]*)?( *)?$/i,   hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i, Unnecessary escape character.
if (container === window) {     fold = window.pageYOffset;    } else { Undefined variable.
return '[' + typeTransformer(matches[1]) + ']';     case 'list': Unreachable code.
return "ns="+ this.namespace +";i="+this.value;         case NodeIdType.STRING: Unreachable code.
import { Permissions } from './permissions.js'; import { LoggedInMixin } from'meteor/meteor-gazelle:method-mixins';
var testDocDefinitions;   beforeEach(function() { Unused variable.
success: function(data){          if(data.status==="success"){ Unexpected console statement.
if (d3.select(params.root+'.demo_group').empty()){
var input = "while echo 1 && do blah; done";     parse(input) Unexpected 'debugger' statement.
return _deployApp(c);     } Unreachable code.
var tokens;  if ("Molecule".equalsIgnoreCase (localName)) { Undefined variable.
});                         bind_noify_click_event();                     }                     else {                         bind_noify_click_event();                     }                 }, Empty block statement.
if(options.parameters){       href += '?'; Redundant double negation.
onload: {a: handlers.EventAttributeHandler},      onprogress: {a: handlers.EventAttributeHandler},onload: {a: handlers.EventAttributeHandler},      complete: {p: properties.AssetComplete}, Duplicate key 'onload'.
ngShow: ngShowDirective,             ngStyle: ngStyleDirective, Undefined variable.
template.route(/\.md/, function (params, next) {   return params; }); Unreachable code.
if (hashSrc) {       key = 'href' Expected a conditional expression and instead saw an assignment.
if (err) {                 log.error('Failed to delete news', err);             } Unexpected console statement.
}             } catch (e) {                 throw e;             } Empty block statement.
exports.buildFlags = function(env, flags) {     flags.context = env.contexts[0];     return flags; Unnecessary semicolon.
;(async () => {  browser = await puppeteer.createBrowser({ args: ['--no-sandbox', '--disable-setuid-sandbox'] }) Unnecessary semicolon.
normalize(bbox, 0, bbox, 12);                 d1 = dot(normal, bbox, 12); Redeclaring variable.
case 3:             case "end":               return _context.stop();           } Expected a 'break' statement before 'case'.
function loadFile() { Unexpected 'debugger' statement.
bgCtx = bgCanvas.getContext('2d'); holdCtx = holdCanvas.getContext('2d'); Unused variable.
scrollFunc() {       dispatch(loadMoreCharts()); Unexpected console statement.
const innerScale = (vWidth - padding * 2) / vWidth   return ( Unused variable.
}                         return true;                     default:                         return true;                 } Expected a 'break' statement before 'default'.
}     return ( Unexpected console statement.
project: {       this.fs.copy( 'project:' is defined but never used.
if (settings.showHome!== false) pageArray.unshift(settings.homeTitle);   thisURL = crumbURL = (win.location.href.indexOf(bcpie.globals.primaryDomain) > -1)? bcpie.globals.primaryDomain : bcpie.globals.secureDomain;
];      if(false) {          result += generateIfKindCheck(child, tokenKinds, indent); Unexpected constant condition.
select.el.querySelector("li[data-tid='" + tid + "']");     if (task) {       result += task.getAttribute('title') + '. '; Redundant double negation.
if (process.env.TRAVIS || process.env.K8S_DASHBOARD_CONTAINER) {     https.get({host: credentialHost}, function(res) { Unreachable code.
pubads.addEventListener('slotRenderEnded', function(event) {         if (event.isEmpty) { Undefined variable.
function dfu() { } dfu.findCompatibleDFU = function() { Unnecessary semicolon.
E2E4LoadButton.prototype.loadData = function () {                     this.ngListService.normalizedService.reloadData(); Unexpected 'debugger' statement.
error.should.have.property('code', 'INVALID_TYPE');           error.should.have.property('message', 'Expected type \"string\" but found type \"integer\"');           error.should.have.property('path', ['swagger' ]); Unnecessary escape character.
})     } else {       yield put({ type: 'empty_block' })     } Empty block statement.
get: function () {         return this.data.sleepSpeedLimit; Expected to return a value in method 'get'.
var cookieValue = goog.net.cookies.get(eightball.SoundEffectManager.s_CookieSoundOn, eightball.SoundEffectManager.s_CookieOnOffEnum.ON) == eightball.SoundEffectManager.s_CookieOnOffEnum.ON;   this.m_isSoundOn = cookieValue;
}             return {x: 0, y: 0}         } Unreachable code.
import attr from 'ember-data/attr'; import {gravatarImage} from '../utils/urls'; Unused variable.
initVal(_data, _hTmp, _comp) { }     flush() { } Unnecessary semicolon.
delete params[c.key];             } else if (!params[c.key]) {                 return false; Redundant double negation.
await add.execute(argv);    break;   case "build": Unreachable code.
assert(sum(one, two, three) === seven); } catch (e) {     console.log(e.message); } Empty block statement.
{                 trueNodeBox = FBL.getAncestorByClass(nodeBox, "nodeBox");                 CSS.setClass(trueNodeBox,'search-selection'); Undefined variable.
Account.create({name : 'Account'+ i, email : 'account' +i + '@gmail.com', age : i}); } Unnecessary semicolon.
App.moduleMap({"home":"home.js"}, ''); })();
vChild._computedHeightTypeNull? vChild._resetRuntimeHeight() : vChild._applyRuntimeHeight(vChild.getHeightValue());     }   } }
subscribe("show_options", function(){   $("#volume_options").style.display = "block";
$scope.trainings_under_this_process = getNoOfTrainingJobs(data);         $scope.available_models = getAvailableModels(data); Unexpected 'debugger' statement.
expect(body._id).toBeDefined();             server.expectSuccess(body);
];         if (pickResult) { Empty block statement.
var __executed = /a[a-z]{2,4}/.exec(new Object("abcdefghi")); var __expected = ["abcde"]; __expected.index=0; Undefined variable.
if (options.backdrop) {           if ( $destroy ) options.backdrop.remove();           else              $animate.leave(options.backdrop); Redundant double negation.
this.name = "TransitionAborted"; } export { Transition, transitionByIntent }; Unnecessary semicolon.
return fromClassForDoc(ampdoc, 'action', ActionService); } Unnecessary semicolon.
} inherit(geo.contourFeature, geo.feature); Undefined variable.
return function(value) {     console.log('value: ', value) Unexpected 'debugger' statement.
this.status = 400; } Unnecessary semicolon.
export function* getAgentDocument(payload) {   const agent = yield select(makeSelectAgent()); Unexpected 'debugger' statement.
tagInsertMap.sort(function(a, b) {     if (a[0] > b[0]) { return 1; }     if (a[0] < b[0]) { return -1; }     return 0; Unnecessary semicolon.
module.exports = (server) => {   return { Unused variable.
{                 "name": "京东中间页",                 "src": "^http:                 "dst": "http: Unnecessary escape character.
var status = response.status;                 var details = response.data;                 if (status == 200) { Redeclaring variable.
default:           basis.dev.warn('Unknown config property `' + key + '` for app, value:', value);       } Unnecessary semicolon.
import React from'react'; import { connect } from'react-redux'; Unused variable.
if (argv.bbox && typeof argv.bbox ==='string') {         argv.bbox = argv.bbox.split(",").map(Number);     } Invalid typeof comparison value.
endOffset = denormalizeOffset(endOffset, $scope.textContent);   while ((node = it.nextNode())) {     let tc = node.textContent; Expected a conditional expression and instead saw an assignment.
hasLegends = util.array(this._mark.def.legends).length > 0,       i, ilen, j, jlen, group, legend;   bounds.mark(this._mark, null, group &&!hasLegends); Redeclaring variable.
throw new Error("An url is required for loading media");       }else{ Unreachable code.
constructor() { super('yml'); }   invoke( rez, themeMarkup, cssInfo ) {     return YAML.stringify(JSON.parse( rez.stringify() ), Infinity, 2); Unused variable.
else e.vectorContext.drawGeometry(geom);   } catch(e) {  }   if (imgs) imgs.setScale(sc); Empty block statement.
return;     var tile_ = this.extraInfo_.tile_;         if (tile_) { Unreachable code.
case 'isPaused': {         return!this.isPlaying;       }       case 'completeLoopCicles': { Unreachable code.
if (err) {       debug("Connection Error");       debug(err);       pgdone(); Unexpected console statement.
indexLayer: function (layer) {         if (!this.options.indexing)             return; Redundant double negation.
if ($this.hasClass('tb-notes-activated')) {             $this.addClass('tb-notes-activated'); Empty block statement.
var from = diffs[i].from;      var tree = this.root; Redeclaring variable.
return (function() { Unreachable code.
function deleteDonor() {         $.ajax({             beforeSend: util.csrf,             url: "/api/donor", Undefined variable.
$scope.delete = function (customServiceSelected) {
function rebatchCommands(primitive, context) {         if (!primitive._batchDirty) {             return false; Unreachable code.
Array.prototype.push.apply( target, array ); }
import DisableModal from './DisableModal.vue' import Styleguide from '@human-connection/styleguide' Unused variable.
selectedRows[0] = e.target.dataset.rowid;       }       for (var key in dataIndices) {         if (!dataIndices.hasOwnProperty(key)) continue;         this.jsonData[selectedRows[0]][key] = dataIndices[key]; Redeclaring variable.
isEmpty() {    return (this.liveBuffersOpaque == null || this.liveBuffersOpaque.length == 0) &&      (this.liveBuffersTransparent == null || this.liveBuffersTransparent.length == 0) && Unreachable code.
} } JUnitReporter.prototype.TPL_PATH = path.join(__dirname, 'tpl', 'junit_report.tpl'); Unnecessary semicolon.
function Config() {     let boxParser;     function setConfig(config) { Unreachable code.
box = {                 width: opts.width;
componentWillMount() {         fetch( 'System.getenv("DATABASE_URL")' )            .then( results => { return results.json(); } )
var query = $location.search().q || '';         var facet_query = new RegExp(facet_id + ':' + facet_value + '"', 'i');         if (query.match(facet_query)) { Unnecessary escape character.
return div.innerHTML; } Unnecessary semicolon.
__handleResizeInternal: function () {                 setTimeout(function () { Unexpected 'debugger' statement.
constructor(key, value) {     super(`Validation failed for ${key}: ${value}`);   } Unexpected duplicate'super()'.
if (file.attempts < max_validate_attempts) {
prev,     ini = pos = style(panels[0].getParent(), 'padding' + (this.up? 'Top' : 'Left')),     i, Undefined variable.
fetchUrl: url,         requestHeaders: headers     } = getters.inputData;
function setURLProtocol (err) {       if (err) throw err;       console.log(protocolKey); Undefined variable.
console.error(e);   } Don't use throw an error instead.
initTypeProto(Sequence, 'ceylon.language::Sequence', $init$Sequential(),             $init$Container());     } Undefined variable.
return text            .replace(/(^|[^!])\!{2}($|[^!])/, '$1!$2');     } Unnecessary escape character.
this.setContext(gl); } WebGLFastSpriteBatch.prototype.constructor = WebGLFastSpriteBatch; Unnecessary semicolon.
}  return Util.makeEmptyArtistTrack(); }; Undefined variable.
var Container_Gridster = React.createClass({  displayName : 'Gridster',
for (let i in tags) {         if ({}.hasOwnProperty.call(tags, i)) {             let tag = tags[i];             doc[tag.title] = tag;
return this.varstmt();       case '{': Unreachable code.
dofRadius: 1,   dofDepth: 6.76,   ssaoIntensity: 5, Duplicate key 'dofDepth'.
var hasValueHelper = require('../utils/hasValue.js') var transformPathToArray = require('./../utils/transformPathToArray.js') Unused variable.
return parts.join('\n');     }     _getCanonicalizedAmzHeaders(headers){ Unnecessary semicolon.
Transport.prototype.poorConsensus = function () {  if (__private.broadcaster.consensus === undefined) {   return false; Unreachable code.
const viewUrl = Versioning.lastLoaded.view.url;             const reg = /\/([^/]+)\/view\.json/;             const m = reg.exec(viewUrl); Unnecessary escape character.
throw new Error('Do not drop the production database!!!!!'); } Unreachable code.
cancel: function() {      if (this.content) { Unexpected 'debugger' statement.
else if(type === 2) {                     days = this.$element.find('.month-days').select('selectedItem').value;                     pos = this.$element.find('.month-day-pos').select('selectedItem').value; Redeclaring variable.
return;   }   this._iconThemes = null; Unnecessary semicolon.
} else {         localStorage.removeItem('config.default_app_id');         app_id = domain_app_ids[getCurrentBinaryDomain()] || 1;     } Undefined variable.
defaults_,       data_, Unused variable.
return folders.concat(relReqStr.split('/')).join('/'); } Unnecessary semicolon.
load(absUrl, function(svgString) {               inject(img, svgString, absUrl, options); Unexpected console statement.
import Z from '@effectful/generators'; function a_1() {   return Z.pure(2); }
ry = data[i++];                     startAngle = d[i++];                     endAngle = d[i++] + startAngle; Undefined variable.
if (/\.feature$/.test(fileName)) {                          editor.getSession().setMode("ace/mode/gherkin"); Redeclaring variable.
const files = coverage[0].files   return files.map(file => { Unexpected console statement.
throw Error('CodeFlask expects an object containing options as second parameter')     } Unreachable code.
module.exports = function(socket, rf433mhz, db){    var clients = [];
var main = modules.main;        (main.default || main)(data.request); Unexpected 'debugger' statement.
throw new Error("Value for " + data.val + " is bigger than " + data.max);   } Unreachable code.
if(!_.isE())    return _.register(new iChart[_.is3D()?'Coordinate3D':'Coordinate2D'](_.get('coordinate'), _));   }  } Unnecessary semicolon.
self.request.open('GET', self.url, true);       self.request.overrideMimeType('text/plain; charset=x-user-defined');       self.request.withCredentials = true; Unnecessary escape character.
process.addListener("exit", function () {   assert.equal(completed, 2); Empty block statement.
_.each(files, (path) => {     const name = path.replace(/[a-z0-9/_.]*themes\     list.push(name) Unnecessary escape character.
if (n === p.left) {       g.left = p.right;       if (g.left === p.right) { p.right.parent = g; }       p.right = g; Expected a conditional expression and instead saw an assignment.
$scope.workflows = data;         }); Unexpected 'debugger' statement.
var toHexString = function(byteArray) {             return Array.prototype.map.call(byteArray, function(byte) { Move function declaration to function body root.
console.log(new Date(date) +'Created pings for check "' + check.name + '"');           }         }, Unnecessary semicolon.
stringify:   this.stringify,     label:       this.label   }) + '\n'; Duplicate key 'logstash'.
reportError("An error occurred!", e);   process.exit(1); }; Don't use process.exit(); throw an error instead.
minZoom: 0,         maxZoom: 19,         maxResolution: 40075016.68557849 / 512 Duplicate key'maxZoom'.
wrappedItem = wrap(list[i]);       if (!deep && (root = getTreeScope(wrappedItem).root)) {         if (root instanceof scope.wrappers.ShadowRoot) { Expected a conditional expression and instead saw an assignment.
setTimeout(function() {    expect(track.ended).to.equal(true);    done();   }, 1500);  }); Unreachable code.
layers: [baseMap.tileMap.prop_tilemap],     target: element     }; Undefined variable.
devConfig.devServer = {}; } Unnecessary semicolon.
obj = new AX('ShockwaveFlash.ShockwaveFlash');        } catch(e) {         log.error(e);        } Empty block statement.
const CrowdsaleDAO = artifacts.require("./DAO/CrowdsaleDAO.sol"); const DAOx = artifacts.require("./DAOx.sol"); Unused variable.
JSONEditor.ContextMenu.prototype._isChildOf = function (child, parent) {     var e = child.parentNode;
};                 Scanner.prototype._next = function () { Unnecessary semicolon.
} if (prod || true) { Unexpected constant condition.
Meteor.call("deleteItem", this._id);             toastr.success("Delete Item", "Item deleted"); Undefined variable.
return content    .replace(/\sdata-reactid="\S+\"/g, ''); };
System.register(['./generated-chunk.js', './generated-chunk2.js'], function () {  'use strict'; Unused variable.
const remainingStack = stackProcessed.slice(level + 1)     return remainingStack.reduce((val, proto)=> proto.lift(val), val)
var mongoose            = require('mongoose'); var historySchema = mongoose.Schema({ Unused variable.
var cancelMove = function(){             Ember.$(ui.sender).sortable("cancel"); Unexpected 'debugger' statement.
}       break;     case'mouseup':       stage._mouseEvents.push('mouseup'); Expected a 'break' statement before 'case'.
throw "INVALID_STATE_ERR: send flag is true";     }     headers[header] = value; Unreachable code.
Aerospike.prototype.exists = function exists (key, policy, cb) {   this._currentClient.exists(key, policy, function existsCb (er) {     if (er.code!== 0) { Unused variable.
if (!isEdge &&!isIOS && clipboardData ) {
const result = await luis(config, serviceManifest, args, requestBody); } Unexpected 'debugger' statement.
if (err) {   throw err;  } Don't use throw an error instead.
throw 'Store must be a subclass of Settings.Store';   }   if (this.__stores__[name]) {     throw 'Duplicate store name:'+ name; Redundant double negation.
FILE_TEXT_SETTINGS: 'file_text_settings',   FILE_TEXT: 'file_text' }; Duplicate key 'FILE_TEXT'.
const COLON_OR_SLASH = /[:\/]/g const CONVERT_MAP = {":": "/", "/": ":"}
var CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin; var HtmlWebpackPlugin = require('html-webpack-plugin'); Unused variable.
} for(var x in Date.prototype.getUTCSeconds) {   if(x === "length") {     $ERROR('#2: The Date.prototype.getUTCSeconds.length has the attribute DontEnum'); Undefined variable.
modified_state.f[dest] = { t: 'c', c: modified_state.c[src].pop() };         } else if (my_move.t ==='s2s') {             modified_state.c[dest].push(modified_state.c[src].pop()); Unexpected constant condition.
$('rg-modal.overlay').click()     $('rg-modal.modal').length.should.equal(0)     tag.opts.visible.should.be.false     spyOnClose.should.not.have.been.called Undefined variable.
.promise()).Responses[tableName]
exists = false;   try { Redeclaring variable.
else {             for (i=0; i < points.length - 1; i++) {                 if (x >= points[i][0] && x < points[i+1][0]) { Redeclaring variable.
(function($, window) {  'use strict'; Unnecessary semicolon.
});   it('provides \'modifier\' attribute', () => {     const select = element.querySelector('select'); Undefined variable.
(function(oipfCapabilities) {         var window = oipf.channelList = {};         oipf.channelList._list = [];         oipf.channelList._list.push({             'id': '0', Undefined variable.
describe('#hasThumbnail', function() {     it('element has a thumbnail', function () {
var line = this.blockToCode(block);     if (line) { Undefined variable.
description: "Reload specific commands",   usage: "reload <command>",   param: "", Unnecessary escape character.
if (this.graph == null) {         this.setupGraph(t); Unexpected console statement.
const mapcontainer = document.getElementById('map-container');     const width = mapcontainer.offsetWidth;     let latlngLabelPrecision; Undefined variable.
} else if (err) {           console.log('balUtilPaths.scandir: readdir has failed on:', options.path); Unexpected 'debugger' statement.
'pre-course': [],     'post-special': [],
import TmSessionImportSuccess from "common/TmSessionImportSuccess" jest.mock(`scripts/google-analytics.js`, () => () => {})
return `https: } Unnecessary semicolon.
this.fireEvent('store');   if(this.storePrevented) {     return; Redundant double negation.
var privateDict = [];     for (i = 0; i < priv.size; i++) {       privateDict.push(aStream.getByte()); Redeclaring variable.
for (var i = 1; i < querySegments.length; i++) {           var urlComponent = decodeURIComponent(querySegments[i]);           var itemsType = null; Redeclaring variable.
remove: function(entity, refresh, depth, doneCallback, failCallback) {     throw new Error("Remove is not yet implemented.");   }
{                 if (obj.feature instanceof Array)                 { Invalid typeof comparison value.
}                                  resolve({stringOut: stringOutValue}); Unexpected console statement.
if (node.nodeType == 3) {    var tempNodeVal = node.nodeValue.toLowerCase();   var tempWordVal = word.toLowerCase();   if (tempNodeVal.indexOf(tempWordVal)!= -1) { Undefined variable.
dojo.provide("dojox.widget.Toaster");
return TD.Direction.up;         case '>': Unreachable code.
asyncLoader.addCallback(new paella.DictionaryCallback(this.initParams.dictionaryUrl));   asyncLoader.load(function() { Undefined variable.
loadedLocales : null,   app: service(),
chartModel.noDataMessage = cowc.CHART_LOADING_MESSAGE;         } else if (error) { 'chartModel['noDataMessage'] is assigned to itself.
TrainingCustomSlideNode.save(spec_node, onSaveFinished);                     break;                 case "BranchNode":                     spec_node.node = new_trainingtreenode; Expected a 'break' statement before 'case'.
logger = require('morgan'),     service = require('./service'), Redeclaring variable.
toWireType: function(destructors, o) {             if (null === o) {                 return 0; Unreachable code.
for (i = 0, _len = Math.min(limit, sorted_corrections.length); i < _len; i++) {     if (!self.hasFlag(sorted_corrections[i][0], "NOSUGGEST")) { Redeclaring variable.
assertEventListNotEmpty = (list, passedMessage, defaultMessage) => {   const assertionMessage = createAssertionMessage(passedAssertionMessage, defaultMessage);   if (!Array.isArray(list) || list.length === 0) { Undefined variable.
update.activeTracks[i].artists = [];       for (j = 0; j < this.activeTracks[i].artists.length; j++) {        update.activeTracks[i].artists[j] = { Redeclaring variable.
element.remove();         $timeout(done || noop, 0, false);       },
function isInteger(value) {     return /^[-?\d+$/.test(value); } Unnecessary escape character.
var Observable = Rx.Observable,     TestScheduler = Rx.TestScheduler,     SerialDisposable = Rx.SerialDisposable, Unused variable.
it("should assert true", function(done) {     var example = Example.deployed_address;     assert.isTrue(true); Undefined variable.
console.log(e);     data = {error: true};   } Redeclaring variable.
class BaseDirectorService extends BaseService {   constructor(plan) {     super();     this.plan = plan; Expected to call'super()'.
vjs.VolumeMenuButton.prototype.createEl = function(){   return Button.prototype.createEl.call(this, 'div', {     className: 'vjs-volume-menu-button vjs-menu-button vjs-control', Undefined variable.
Dom(function () {                  if (!Dom.body.contains(result)) {                      Dom.body.append(result);                  }              }); Undefined variable.
var nbVerts = verts.length;                     for ( j = 0; j < nbVerts; ++j )                         vertices.push( verts[ j ] ); Redeclaring variable.
this._header = null;   } Unnecessary semicolon.
throw new Error("Value for " + data.val + " is smaller than " + data.min);   } Unreachable code.
if (process.env.FORCE_SSL) {     app.use(enforceHttps({ Don't use process.exit(); throw an error instead.
buffer[i] = 0xff;   }   for (let i = 0; i < num_macs; ++i) {     mac_buffer.copy(buffer, (i + 1) * num_mac_octets, 0, mac_buffer.length) Redeclaring variable.
col = frm.append("div").attr("class", "col"); Redeclaring variable.
}); } util.inherits(UserStream, EventEmitter); Unnecessary semicolon.
},         link: function(scope) {             scope.pages = []; Unused variable.
},         resolve: (_source, { role }) => {             const result = getUsers(); Unexpected empty object pattern.
import React from'react' import {Helmet} from'react-helmet' Unused variable.
function handleChangePassword(req, options = {}, strategy) {  logger.debug("handleChangePassword");
var pid = receivers[i];           a = a_shares[pid];           b = b_shares[pid];           c = c_shares[pid]; Redeclaring variable.
commentText += text;     }); Unexpected 'debugger' statement.
import SparklinesSpots from './SparklinesSpots'; import DataProcessor from './DataProcessor'; Unused variable.
const path   = require('path'); const env   = process.env; Unused variable.
var street = getStreet()
$scope.riskTypeDictionaryDatas = JSON.parse($scope.data.riskTypeDictionaryDatas);  }, function (error) {   console.log($scope.riskTypeDictionaryDatas);  }); Unused variable.
import React from'react'
</div>         );         break;       default:         throw new Error('Should not reach here'); Expected a 'break' statement before 'default'.
if (err!= null) { cb(err); return; }           if (email) {             self.saveAccount(email, cb); Redundant double negation.
if (this.mxOpts.custom) {         dnsRecords = dnsRecords.concat(map(           this.mxOpts.custom.filter(custom => custom && custom.target!== ''), Undefined variable.
return new PodioErrors.PodioBadRequestError(response.body, response.status, request.url);       case 401: Unreachable code.
debug('%o', results)   if (results.every(result => result.success)) return process.exit(0) throw an error instead.
function getdata(data) {             if (about[data.key.split(":")[0]].symbolToName) {                 let requestOptions ='',url = ''; Redundant double negation.
if (typeof config.facetsCustomizer === 'function') {         var add = function(property, label) {           derivedFacets.push({value: property, label: label? label : localize(property)}); Move function declaration to function body root.
zi = new Array(n-1)     var a = 1.0, b = 0.0, k1, k2, k3     for(i=0; i<n-1; ++i) { Redeclaring variable.
} } startwebsocket_manualFiles(); Unnecessary semicolon.
const CodeBlockRequired = new RegExp('(</code-block>)', 'g');       if (CodeBlockRequired.test(parseHTML)) { Unnecessary escape character.
expect(Kefir.zip([a, b, c])).to.emit([[1, 0, 3], [4, 2, 5], [6, 9, 8], '<end>'], () => {       send(a, [1]) Undefined variable.
deleteAll: function(args) {           opalModel.$delete_all(__hash2(args));         };
}         break       case 'config':         log.debug('rendering config screen from unlock screen.') Expected a 'break' statement before 'case'.
return;     }     for (let i = 0; i < this._tabRects.length; i++) { Unnecessary semicolon.
return undefined;  for(n in TiddlyWiki.standardFieldAccess) {   if(n == "tiddler") Redeclaring variable.
test( 'Sampler', function () {             var keys = [];
export const convertToGrayscale = pixels => {
}); } var server = buildServer().listen(port); Unnecessary semicolon.
case RECEIVE_QUERY:            case CLEAR_QUERY:            default: Expected a 'break' statement before 'case'.
return polygons; } Unnecessary semicolon.
function dockerBuild(done) {   dockerRun(done);   spawn('docker', ['build', '-t', 'executor', '.'], spawnOption)  .on('exit', (code) => { Unreachable code.
import { map } from '@ctx-core/array/lib.js' export function _ARR__name_param__pg(ARR__param) {  return (
import won from "../won-es6.js"; import { connect2Redux } from "../won-utils.js"; Unused variable.
currentVersion = _.omitBy(currentVersion, function (i) {           return i!= null && typeof i === 'object' &&!(i instanceof Date);         }); Invalid typeof comparison value.
notifyChanges(this);     }     function notifyChanges(state) { Unnecessary semicolon.
if (err) return submit.show()       window.location.href = "/world.html#" + hoodie.account.username + '/' + worldName Unreachable code.
var Promise = Ember.RSVP.Promise; var HasOneProxy = Ember.ObjectProxy.extend(LinkProxyMixin); Undefined variable.
else {     { _id: req.params.id }    }
const arrayify = require('array-back') const collectAll = require('collect-all') const ExplainStream = require('./explain-stream') Unused variable.
return url;     }     function getStyleString(styleObj) { Unnecessary semicolon.
} from'redux-immutable'  import { fromJS } from 'immutable' Unused variable.
tree.traverse_and_compute(_.noop, "pre-order", root_node, function(n) {     if (!tree.is_leafnode(n)) {       var bs = _.isString(n.bootstrap_values)        ? +n.bootstrap_values Undefined variable.
cms.fillPath = function(data, path) {  path = ensureArray(path); Unused variable.
} else {     primary = {region: primary[0], table: primary[1]}; } Redeclaring variable.
case "json":                   php_script = require('services/getLatestRevision.php');                   d3.json(php_script + "?vis_id=" + elem.file, setupTimelineVisualization);                   break; Unexpected lexical declaration in case block.
case "radial":      dx = pt.x - fill.cx, dy = pt.y - fill.cy;      o = Math.sqrt(dx * dx + dy * dy) / fill.r;      break; Redeclaring variable.
it('should update selected (first) row', function () {             runTest(scrollSettings, Unexpected 'debugger' statement.
var cldbid = response.client_database_id;                     cl.send("servergroupaddclient", {sgid: wantedrankid, cldbid: cldbid}, function (err) {                         if (typeof err!== "undefined") { Unused variable.
CLI_ANDROID_SDKMANAGER,     getAppVersion, Unused variable.
this.timeStamp = Date.now(); } Unnecessary semicolon.
Template.sidebarItem.onCreated(function() {    }); Unexpected console statement.
expect(shallowToJson(actual)).toMatchSnapshot(); }; Undefined variable.
printBarcode: function(data, type, settings){     settings = settings || {}; Redeclaring variable.
HTML_ATTRIBUTE: /(^|\s)([\w-:]+)(\s*=\s*("([^"]+)"|'([^']+)'|(\S+)))?/ig,         CSS_SELECTOR: /([-_\.#:\w]+(?:\s+)?[{,>])/g     }, Unnecessary escape character.
for (key in form) {       if (!form.hasOwnProperty(key)) continue;       if (form[key] === true || form[key] === false) { Undefined variable.
assert.fail("Should have thrown an error");    } catch(err) { }   }); Empty block statement.
return list(appId,envValue, cb);       case "unset": Unreachable code.
function updateDependents(itsPath, alwaysRemove) {     return function(_doc) {       if (!doc) return next(null) Undefined variable.
}     if ( vars.dev.value ) print.timeEnd("focus labels")   } Undefined variable.
var filters = require('../src/filters') var data = require('./data') Unused variable.
}   function draw (offset) { Unreachable code.
parts[2] = text;                                  subtitleArray[videoid - 1].push(parts); Unexpected console statement.
filter (predicate) {     return this.prioritized.filter(predicate) Unexpected console statement.
}     } Unnecessary semicolon.
},   empty: function () {    var empty = true; Duplicate key 'empty'.
]},    {kind: Item, components: [     {kind: Image, src: {      'hd' : 'http: Undefined variable.
that.screenName = that.screenName || that.username       that.id = uuid.v4() 'that.username' is assigned to itself.
description: inKindDescription || "",     paymentMethod: "" Duplicate key 'oaeType'.
return;             return new Promise((resolve) => {                 var xhr = new XMLHttpRequest(); Unreachable code.
itemCodes.length - EXPECTED_SUFFIX.length) {       throw Error('Invalid search query url fragment for'+                       itemsType + ':'+ urlComponent);     } Unreachable code.
})     if (d.length) {       if (d[0].password == userItem.password) {         const now = new Date() Redundant double negation.
import React, { Component } from'react'; import { Components, registerComponent } from'meteor/vulcan:core'; Unused variable.
render() {     const { id, name, type, creator, description, address, image } = this.props;     return ( Unused variable.
return (this.bookmarks)? this.$q.when(this.bookmarks) : this.$http.get(this.URLS.FETCH).then(this.cacheBookmarks.bind(this));   }
static get refreshToken() { return'refreshToken'; };     static get authenticatePlugin() { return 'authenticatePlugin'; }; Duplicate name 'createPluginToken'.
render (texture, width, height) {     let gl = this.gl; Unexpected 'debugger' statement.
logs.push(<li key={i}>{this.state.logs[i]}</li>);         }         return ( Unnecessary semicolon.
}         var bboxdims = model.GetBody(0).GetBoundingBox(); Unexpected console statement.
copyTo: function(dest) {         dest[x] = this.x;         dest[y] = this.y;         return dest;
function exists(changes, version) {   const escaped_version = version.replace(/([.-])/g, '\\$1');   const regexp = new RegExp(`\r?\n## ${escaped_version}\r?\n`); Unnecessary escape character.
for(i=0, l=pattern.length; i<l; i++) {             pattern[i].latLng = map.layerPointToLatLng(pattern[i].pt); Redeclaring variable.
for (let name in translate.keys) {       if (translate.keys.hasOwnProperty(name)) {         opts.keys[name] = opts.keys[name];       }
removeSub: function (name, subName, options) {       if (typeof name!== "string" || name === "") {         return ""; Invalid typeof comparison value.
item.opacity = parseFloat(value, 10);    break;   case 'visibility':    item.visibility = (value == 'visible')? true : false; Expected a 'break' statement before 'case'.
t++;     createTiddlyText(place,config.messages.sizeTemplates[t].template.format([Math.round(v/config.messages.sizeTemplates[t].unit)]));    } Undefined variable.
const bar = function (options, serie, coordinateSystem) {   if (isObject(options.grid)) {     createGridBlock(options.grid, serie, coordinateSystem);   } else if (Array.isArray(options.grid)) { Empty block statement.
});         break;       case 'batchGetRow':         request = new protos.BatchGetRowRequest({ Expected a 'break' statement before 'case'.
.setValue(selector, input)    .waitForInputText(selector, input);   }); };
else {cb ();}                 }, function () {process.exit (0);});             } throw an error instead.
focusChanged: function(event) {       this.hasFocus = $(event.currentTarget); Unexpected 'debugger' statement.
throw new Error('We need an icc to continue with this operation');   } Unreachable code.
for (var i=0, tx; (tx=this._queue[i]); i++) {     if (~tx.submittedIDs.indexOf(id)) { Expected a conditional expression and instead saw an assignment.
for (;;) {             len = seqs.length; Unexpected constant condition.
'publishToEBSD-caption': '',   'namespacePostfix-caption': 'Постфикс пространства имен',   'attributes-caption': 'Возможные значения', Duplicate key 'namespacePostfix-caption'.
function outputToFile(m) {    var args = toArray(arguments);
img.src = _resizeCanvas.toDataURL("image/png"); } Unnecessary semicolon.
onChange (_, changes) {        }   onAttributesChange (_, changes) {   }   onCursorActivity () { Unused variable.
new CSSModalGallery(window.jQuery); new CSSModalHtml5video(window.jQuery); new CSSModalMaxwidth(window.jQuery); new CSSModalResize(window.jQuery); Undefined variable.
extension: defaultFiles,     content: /(['|"]?password['|"]??[:|=]?['|"].*['|"])/,     caption: 'Potential password in file', Unnecessary escape character.
for(var i = 0 ; i < len ; i++ ) {     item = this.$.items.createComponent(      { kind: "TamTam.Item", name: collection.content[i] }, Redeclaring variable.
for ( var i = 0, l = storages.length; i < l; i++ ) {             if ( jar[ storages[ i ] ] && storages[ i ] ].length > 0 ) {                 storage = storages[ i ]; Undefined variable.
if(relationship.kind === 'belongsTo') { Unexpected 'debugger' statement.
this.stopwatch.stop();   } } Unnecessary semicolon.
key: 2                     }, [api_text("Manually Imported Template")])];                 } Unnecessary escape character.
}   if (!App.isPlugin){    function handleResize(){ Move function declaration to function body root.
i; const REG_APO = /\'/g; const REG_COLUMN = /^(!{1,}|\s)*/; const REG_COLUMN_CAST = /\[|\]/g; Unnecessary escape character.
function toStlString (CSG) {   var result ='solid csg.js\n' Unused variable.
angular.module('umbraco.resources').factory('treeResource', treeResource);
bot.on('message', function (event) {    switch (event.message.type) {   case 'text': Unreachable code.
fromObjects: function(objects, options, callback) {       options = (options!== undefined? options : {});       var config = {}; Redeclaring variable.
if (numStr.indexOf('e')!== -1) {     formatedText = numStr;   } else { Redeclaring variable.
.then( function(result)   {    done( new Error("this should not have been called") );   })
return _items; } Unnecessary semicolon.
const childArgNames = Object.create(argNames)         childArgNames['end'] = true Redeclaring variable.
item = ctrl.tagging.fct!== undefined? ctrl.tagging.fct(ctrl.search) : ctrl.search;               if (! angular.equals( ctrl.items[0], item ) ) {                 return; 'item' is assigned to itself.
export default ({ list, wholeState, onEditTunnel, onSaveTunnel }) => (   <main className="window"> Unused variable.
case 'j':     case 'h': Duplicate case label.
populate: function(model){         this.options = BI.extend(this.options, model);     };
}     var toggleClass = function (node, className, shouldHaveClass) { '$.bindingAdapter["css"]' is assigned to itself.
xhr.onreadystatechange = function() {             if (this.readyState === 4 && /^[2]/.test(this.status)) {                 emptyBlockStatement.
if (target && target.endsWith('/')) {               target = target.replace(/\/$/, '');             }
return movieApi.discoverMovie(genre.value)      .then(carouselle => message.reply([carouselle]) Unreachable code.
status = data.status;     queue = data.queue;
CommandManager          = require("CommandManager"),         PerfUtils               = require("PerfUtils"); Redeclaring variable.
getPreParcels : function(kvp_uid, cb) {         kvp_uid = this.uuid;         var kvp_uidFilter = new OpenLayers.Filter.Comparison({ Redeclaring variable.
SDK.ServiceWorkerContextNamer = class {
$scope.setUnitChoice = function () {             if ($scope.namespace === 'AWS/AutoScaling') {                 $scope.unitField.val('Count'); Expected a conditional expression and instead saw an assignment.
buffer += '(';     for (ii = 0; ii < args.length; ++ii) {      skipTo(args[ii].range[0]); Redeclaring variable.
var storageKey = getLocalStoragePrefixByType(type) + objectId;             Util.localforage.getItem(mapStorageKey).then(function() {                 if( Undefined variable.
function showPlan(container, planXml, options) {     options = setDefaults(options, {         jsTooltips: true Redeclaring variable.
refreshBackdrop = function() {       if (backdrop!= null) {         backdrop.remove(); Unexpected 'debugger' statement.
return new Engine(opts); } Unnecessary semicolon.
var calls = 0;       process.send = function() {         calls ++; Unused variable.
}                 return raw;             case 'Array': Unreachable code.
const roomValue = '';   Object.keys(rooms).forEach(room => {    roomValue += room.name +'Location:'+ room.location + '\n'; 'room' is constant.
if(logger.isInfo()) logger.info(f('[%s] updating replicaset state %s', id, JSON.stringify(replState)));
const { changeShort, getShort } = require('../utils/db')  const os = require('os')
if (values[0][0] instanceof Array) {                 for (var i = 0; i < values.length; i++) { Invalid typeof comparison value.
return;             } Unreachable code.
var cpb_cnt_minus1;      for (i = 0; i <= sps_max_sub_layers_minus1; i++) {       fixed_pic_rate_within_cvs_flag = 1; Redeclaring variable.
const p = plan();     p.test('should not run', (t) => {       t.fail(); This generator function does not have 'yield'.
return'el <'+ numPrefix + val + numSuffix +'';                 case '<=': Unreachable code.
var line = 0;   for (var i = 0, j = 0, record; (record = records[i]); ++i) {     if (record.type) { Expected a conditional expression and instead saw an assignment.
var mod = phase;     if (mod.request) { Redeclaring variable.
setTimeout(function() {               chimera.render(filename);               callback(null, document.cookie);
var module = angular.module('pnc.util', [    'pnc.util.confirmClick',
console.log(annotationIds);
videoSelectorCommon: {     check: "Kontrollér",     notFound: "Video ikke fundet", Unnecessary escape character.
import { HTTP_PROVIDERS } from '@angular/http'; import './app.module'; Unused variable.
idRegex = new RegExp('(\'|")' + oldID + '(-label)?(\'|")', 'g'); Unnecessary escape character.
var new_child_keys = [];         for(ii = 0; ii < this._childKeys.length; ii++) {           key = this._childKeys[ii];           if (this._rawChildren[key]!== undefined) { Redeclaring variable.
for (i = 0; i < items.length; i++) {    delete sessinos[0].data[items[i]];   } Undefined variable.
emotify: function(text) {    var resourcesDir = this.getOptions().resources,      i;    for(i = this.emoticons.length-1; i >= 0; i--) { Undefined variable.
let url = req.query.url  url = normalizeUrl(url) 'url' is constant.
var i = 0;   while(file) {     i++; Expected a conditional expression and instead saw an assignment.
doneSaving() {     var projectId = get(this,'scope.currentProject.id'); Unexpected 'debugger' statement.
});         if(CursorPositionChangedEvent.superclass)             CursorPositionChangedEvent.superclass.constructor.apply(this, arguments);         delegate.setPublished(this); Undefined variable.
var ch;   while ((ch = stream.next())) {    if (ch === quote) Expected a conditional expression and instead saw an assignment.
changeTemplateDropdownHandler: function() {             if (!!this.template &&!!this.sandbox) {                 this.sandbox.emit('sulu.header.toolbar.item.change', 'template', this.template); Redundant double negation.
var slack;   try {     slack = require('slack');
} else {           return $location.path("/admin/gallery('" + entity.GalleryId + "')"); Unexpected 'debugger' statement.
detailedBox = m.component(c.AdminTransaction,  {contribution: contribution()[0]});     var view = detailedBox.view(ctrl, {contribution: contribution});     $output = mq(view); Undefined variable.
var events = [];                     for (var i = 0; i < result.length; i++) { Unexpected 'debugger' statement.
children: [],       transform: [         { Unexpected comma in middle of array.
throw new Error("Invalid deviceId format.");     }     return { Unnecessary semicolon.
const config = require('../config.json');
UI.showLoginPopup = function(callback) {     console.log('password is required');
socket.on('end', () => {         session.stop(); Unexpected console statement.
if (Alpaca.isUri(this.options.dataSource)) {      $.ajax({ Redeclaring variable.
$accountTable.empty();             var accountList = [];             for (var account in user.accounts) { Unused variable.
/^\d+$/.test(text) ||             /^[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-./:;<=>?@[\]^_`{|}~]+$/.test(text)         ) return false;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/gol_sign-1319744539.swf",  admin_props : false, Unnecessary escape character.
return lighten(0.36, hex);     case "HL": Unreachable code.
if (wantedStates.length === 0) {             return Promise.reject(null);         } Undefined variable.
if (!alreadyRefreshed && catalogRefreshStrategy.beforeCommand) {       messages = buildmessage.capture({title: 'Updating package catalog'}, function () {         catalogRefreshStrategy.beforeCommand(); Redeclaring variable.
this._userData = null;   } Unnecessary semicolon.
var isHome = true   let p = new Promise((resolve) => {     if(templatePath!== null && filePath!== null) { Unused variable.
function before (node,  descend) {             if (node instanceof AST_ObjectProperty && node.key == 'body' && findOnServer(walker.parent())) {                 var emptyFunction = node.clone(); Move function declaration to function body root.
}  case 'boolean': Unreachable code.
if (options && options.noSubscription) {     if (options.requiresBaseUri) {       return new FactoryMethod(credentials, baseUri, factoryMethodOptions); Unreachable code.
const SecurityException = goog.require('tink.exception.SecurityException'); Undefined variable.
this.props.html,       this.props.showImages? defaultTagPolicy : tagPolicyNoImages     ); Unexpected constant condition.
station.entry = result;                     angular.forEach(result.properties.timeseries, function(timeseries) {                         timeseries.selected = selectFirst ||!preselectFirstTimeseries; Unused variable.
} else if (!doc) {    console.log(JSON.stringify(schema, null, '\t'));   } Don't use process.exit(); throw an error instead.
test('PointerMap.delete', function() {     var p = new PointerMap();     p.set(1, true); Undefined variable.
throw "FOO";             }); Unreachable code.
} } scout.TableSelectionHandler.prototype.onMouseOver = function(event) {   var $row = $(event.currentTarget),     row = $row.data('row'); Undefined variable.
Fixture.prototype = {  method: function () {   this.val++; Unused variable.
stopPlayer(player, session, callback);                 break;             case "AMAZON.CancelIntent":                 return;             case "AMAZON.LoopOffIntent": Duplicate case label.
return render? ret : false; } Unnecessary semicolon.
if (use_xy) {         return false; Unexpected 'debugger' statement.
var isWin                               = /^win/.test(process.platform); var stmtInsertRowFullTextSearch                               = null; Unused variable.
return type;   } Unreachable code.
() => logger.notice(`Ready for requests on port ${port}.`),     () => process.exit(1)    ); throw an error instead.
try {             deferred = Q.defer();
var componentName = getTestableComponentName(fileString, 'controller');         this.fs.copyTpl( Unexpected 'debugger' statement.
var ConnectorFacade = function (env) {         var translationConnector;         translationConnector = new TranslationConnector(env); Unused variable.
}       }       return false; Unnecessary semicolon.
{       if (document.getElementsByClassName('widget-login-qr-imgWrapper widget-login-qr-loading') [0]!== null) Empty block statement.
else if(step.branchIndents < prevStep.branchIndents) {                                  diff = prevStep.branchIndents - step.branchIndents;                 for(i = 0; i < diff; i++) {                     this.popLocalStack(); Redeclaring variable.
}(this.laroux)); (function (laroux) {     'use strict'; Unnecessary semicolon.
selector = document.createElement(name);      }      if (selector.tagName.toLowerCase() === "script") {       selector.async = false;      } Unnecessary semicolon.
var Paper = require( "graphic/paper" ),         Color = require( "graphic/color" ), Unused variable.
])     },     onFocus () {       this.isFocused = true Unused variable.
console.log('shutting down');     console.log(process.exit());    };
let language = {};   const languageTags = Object.keys(translationGetters);   if (forceLocale && languageTags.includes(forceLocale)) {     language = { languageTag: forceLocale, isRTL: forceLocale === 'ar' }; Undefined variable.
NR._Event = {     on: function(type, fn){         if(isString(type) && isFunction(fn)){             var storage = getEventStorageByType(this, type); Undefined variable.
badKey: /^\d|^\W|[^a-zA-Z\d\-_\+=\(\)\*\&\^\%\$\#\!\~\`\{\}"\'\:\;\?\, ]+|^toString$/, Unnecessary escape character.
}     process.exitCode = 1; }; Unreachable code.
beforeEach(() => {         synthesizer.and.callFake((req, opts, cb) => {           cb(null, { audioContent: testData.response }) Unexpected empty object pattern.
this.resetData();       const page = await this.initData(); Unexpected 'debugger' statement.
YAHOO.inputEx.registerType('object', YAHOO.inputEx.ObjectField);
import Logo from 'Components/header/logo'; import styles from './auth-layout.styl'; Unused variable.
});      }      else if(data.configure =='register'){       registerBlock(data.block);      }     } Empty block statement.
o = new f();      if(!('__proto__' in o)){    o.__proto__ = proto; Unexpected negating the left operand of 'in' operator.
this.sound.currentTime = time;             }             return this; Empty block statement.
}       return _.filter(_cloneDeep(images), filter);     };
function funcMousemove() {       tooltipContainer Unexpected 'debugger' statement.
},         setTimeout: function(callback, ms) {             if (callback && ms) { Duplicate key'setTimeout'.
});   });   return next(); } Unreachable code.
if(me.isMaster) {         if(me.isChild) {           block.addChild(me.child);         } else { Empty block statement.
return attributes; } Unnecessary semicolon.
const moment = require('moment'); const MongoAdapter = require('../modules/MongoAdapter');
var img = document.querySelectorAll('[src="/y/character/inc.png"]');       for (i = 0; i < img.length; i++) {         var temp = img[i].getAttribute('onmouseover').match(/Upgrade Cost: (\d+) Chaos Tokens?[ ]+Stock: (\d+)/); Redeclaring variable.
export function removeProp($target, name) {   if (isCustomProp(name)) { Empty block statement.
this.addObserver(`spreadOptions.source.object.${sourceProperty}`, function () {       const spreadableHash = this.get(`spreadOptions.source.object.${sourceProperty}`) Unexpected 'debugger' statement.
case Serializer.TYPES.CLASSINSTANCE: {                 if (netSchemeProp.classId == null){                     console.error(`received CLASSINSTANCE but no classId!`) Unexpected constant condition.
onBuildStop: function( reason ) {    transition( "interrupted" ); Unexpected console statement.
var title, _widget, isWidget, _element, isWidget;         for (var widgetName in targets) { if (!targets.hasOwnProperty(widgetName)) continue; Redeclaring variable.
items.splice(index, 1);           c = datasource.removeAtIndex(index);           var newIndex = items.indexOf(firstDown); Undefined variable.
return [ 'bef1' + args[0] ];     });     caja.adviseFunctionBefore(advisedBeforeM, function(f, self, args) {       return [ 'bef2' + args[0] ]; Undefined variable.
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
const template = `<${elem.attribs.is}>`;  return await renderTemplate(template, params, renderData); };
this.validateNotEmpty('reason','reasonError', 'A description of the issue');       if (this.state.emailError!= '' || this.state.reasonError!= '') {         this.saveState({});       } Empty block statement.
var __moduleName = context_1 && context_1.id;     var models_1, mapDateFormatByFieldType;     return { Unused variable.
console.log('Logged In!')   }) Don't use process.exit(); throw an error instead.
case NUMBER:       {         let value = this.value;         if (value.charCodeAt(0) === 48) { Unexpected lexical declaration in case block.
var expect = require("chai").expect; var _ = require("lodash"); Unused variable.
urlRoot: "testModel",     wampRead: function () {       return this.toJSON(); Unused variable.
data.user.activityHistory = [];                   }                   if(data.user.permissions == {empty:"permission"}){                     data.user.permissions = []; Expected a conditional expression and instead saw an assignment.
if (hasHalo) {              gl.uniform1f(program.u_is_halo, 1); Unexpected constant condition.
}      }      return this.durationSentence(duration)      break Unreachable code.
define("json_api_adapter",    ["exports"], Unnecessary semicolon.
return () => Promise.reject(             new NylasError(`IMAPBox::${name} - Can't operate on a mailbox that is no longer open on the current IMAPConnection.`)           )
intent: makeSelectIntent(),   scenario: makeSelectScenario(),   intentData: makeSelectIntentData(), Duplicate key 'intent'.
return;     }     mapData = data[mapName]; Unnecessary semicolon.
t._timer = window.setInterval(function() { Undefined variable.
notFound.title = 'Error';       notFound.message = props.message? props.message : 'An error occured. Please try again later.';     }; Redundant double negation.
getMenu: function () {                         var locale = Aisel.getLocale();                         var url = Aisel.settings.api + '/' + locale + '/navigation/menu.json'; Undefined variable.
load().then(loaded => {   wasmTapestry = loaded.wasmTapestry; Unexpected 'debugger' statement.
}   console.log('SIGNATURE>', util.inspect(this.signature()));   this.stats.sources++; Unexpected console statement.
rimraf(config.outdir, function() {   console.log(colors.warn (config.unzip +'' + args.join(' ')));   execFile (config.unzip, args, (rc, out, err) => { Unexpected console statement.
browser.keys(ENTER_KEY);         expect(browser.hasFocus(TIME_PICKER_INPUT)).toBe(true);              });
return links; } Unnecessary semicolon.
assert.equal(assert._expr(assert._capt(str, 'arguments/0'), {   content: 'assert.equal(str, anotherStr)', Undefined variable.
onHit: function(evt) {     var hitEl = evt.detail.el, used = false, hitElIndex, mEvt,         peekTarget, useTarget, gestureRejected;     if (!hitEl) { return; } Unused variable.
component: 'badges',   url: 'https: Duplicate key 'component'.
(self.f = f);     if ((!(((c instanceof Chain) || (c instanceof Thunk)) || (c instanceof Done)))) {}; }); Unexpected 'debugger' statement.
if (!module.factory) {     return load_module(module, function () { Undefined variable.
console.warn('Compatibility error', 'Lighthouse requires node 5+ or 4 with --harmony');   throw new Error('Compatibility error'); } Don't use process.exit(); throw an error instead.
this.catalog.prop('Pages', this.pages.toReference())   this._compute() Unexpected 'debugger' statement.
g;   var rArray = /Array\.<(.+)\>/g; Unnecessary escape character.
export default class UserCallbackScenario extends Scenario {     constructor(config) {         config.registerBeforeSendCallback((report, error) => { Expected to call'super()'.
const Exchange = require ('./base/Exchange') const { ExchangeError } = require ('./base/errors') Unused variable.
return build(422, config.MSG_HONEYPOT || 'You shall not pass')     case 'no-admin-email': Unreachable code.
this.storage = {};             if (typeof config!== 'undefined') {                 Object.keys(function (property) {                     this[property] = config[property]; Invalid typeof comparison value.
continue;     } Unnecessary semicolon.
$("#SearchIndexFolderId").attr('disabled', "disabled");     disabledColor = $("#SearchIndexFolderId").css('color');     $("#SearchIndexFolderId").css('color', '#CCC');    }, Undefined variable.
store.dispatch({type: 'HOLOCHAIN_WEBSOCKET_CONNECTED', payload: url})  }) 'call' is assigned to itself.
function updateNextState() {       const rect = coverEl.getBoundingClientRect(); Move function declaration to function body root.
iconName === 'wstone') {       currentPlayer = widget.controller.getCurrentPlayer();       if (widget.controller.canAddStone(pt, currentPlayer)) { Redeclaring variable.
traverse(sample1, function (key, val, path, parentKey, parentVal, level, isRoot, isLeaf, isCircular) {             if (parentKey && parentKey === 'departments') { Unexpected 'debugger' statement.
_onTick: function() {     Fn.call(this._fn, [this._bindedSend]);   };
};                 var objectStore = transaction.objectStore(this.objectStoreName); Redeclaring variable.
import React, { Component } from'react'; import { Field, reduxForm } from'redux-form'; Unused variable.
stage._children[0] = loader._content; Unexpected 'debugger' statement.
resizing(){       this.set("message", "adjusting..."); Unexpected 'debugger' statement.
{   if (!(this instanceof Buffer)) return new Buffer ();   MemoryObject.apply(this); Unexpected negating the left operand of 'instanceof' operator.
return connection;       } Unnecessary semicolon.
handleNewShellFrame );  }  } Empty block statement.
if(that.is_open){                              } Unexpected console statement.
return this.notes;             }
var response = {}   }   if (! ('body' in response)) {    response.body = {} Unexpected negating the left operand of 'in' operator.
fileReadStream = checkoutFS.createReadStream(entry.path, range)   var newFileDataStream = fileReadStream.createReadStream(entry.path, range)   var dataStream = fileReadStream UnreachableCode.
this.options = options; } util.inherits(Server, events.EventEmitter); Unnecessary semicolon.
case "200403.18":                 $p.com.alert($p.locale.exception, "warning");                 return false;             case "200404": Unreachable code.
if (basis.NODE_ENV || true)      tokenMap = require('./htmlentity.json');
onClick={e => {                 onHeartFavoriteHandler(e, speakerRec); Unexpected 'debugger' statement.
config.clean.vendor = {  src: [out_build+'/vendor', out_build+'/vendor-resources'], options: { force:true } };
vjs.MediaFaker.prototype.supportsFullScreen = function(){ return false; }; vjs.MediaFaker.prototype.features = {}; Undefined variable.
}     else {       return cond.items;     } Empty block statement.
return Point(types.m, prev.x + dx, prev.y + dy) } export function M(x, y) {   return Point(types.M, x, y) Unused variable.
options.props = options.props || {};      options.props.className = [options.props.className, options.className, parsedTagString.className].filter(className => className).join(' '); 'options.acceptProps' is assigned to itself.
} else if (isVComponent(lastInput)) {         } else if (isVFragment(nextInput)) { Unexpected 'debugger' statement.
.catch(() => {       logger.warn('Stashed changes conflicted with hook auto-fixes! Restoring from conflicts...')       return gitPopWithConflicts(options).then(() => cleanup(options)) Unexpected console statement.
window.debug = log.debug; browser.runtime.onInstalled.addListener(log.onInstalledListener); Undefined variable.
$translate(['ERROR_IN_RESPONSE']).then(function (translations) {      alert(translations.ERROR_IN_RESPONSE);     }); Undefined variable.
) {             return; Unexpected console statement.
onGotUserInfo (event) {     const { backPath } = this.data Unexpected console statement.
if (partsArray.length > 0) {             curPart = partsArray.shift()             var hash = Crypto.createHash('md5') Redeclaring variable.
this.children.forEach(function (n) {         if (!(n instanceof Control)) {             throw 'Container: n is not an instance of Control.'; Unexpected negating the left operand of 'instanceof' operator.
unsubscribe.push($rootScope.$on('updateLabels', () => {         $scope.$applyAsync(() => { Unused variable.
if (decoratorArgs.length >= 2) type = decoratorArgs[1];   if (type === "class") memoized = createCache(target); Unexpected console statement.
tmpObject3d.updateMatrix()   var modelViewMatrix = new Matrix4()   modelViewMatrix.copy(tmpObject3d.matrix)   foundControls.notifyFoundModelViewMatrix(modelViewMatrix) Undefined variable.
checkMatchForDialects: function(dialect, value, expectations) {     if (expectations[dialect]) {       expect(value).to.match(expectations[dialect]); Redundant double negation.
case'middleware':       key2 = props.name;       middlewaresSpecs = stashedSpecs.middlewares[key2] = {};       middlewaresSpecs.path = props.path; Unexpected lexical declaration in case block.
}                 this.fetch({ Unnecessary semicolon.
for (var n in baseProperty) {                         cloned = clone(baseProperty[n], true);                         if (baseProperty.hasOwnProperty(n)) { Redeclaring variable.
this.updateRenderTargetMipmap = updateRenderTargetMipmap; } export { WebGLTextures }; Unnecessary semicolon.
stuck_out_tongue: /(^|\s)(:-?p)(?=$|\s)/gi,      rage: /(^|\s)(:-?[[@])(?=$|\s)/g,      slightly_frowning_face: /(^|\s)(:-?\()(?=$|\s)/g, Unnecessary escape character.
const info = UI.getItemData(item.id); Unexpected 'debugger' statement.
_digitalData.page.categoryId = (counter + 2);         if (counter === 3) {           done(); Unexpected constant condition.
const PARAMS_END_PATTERN = '[/?_\-]|$'; Unnecessary escape character.
ev.stopPropagation();  } Unnecessary semicolon.
const skills = props.skills     return ( Unexpected console statement.
return fallbackURL; } Unnecessary semicolon.
Resp_STK_OK: Resp_STK_OK,   Resp_STK_NOSYNC: 0x15,   OK_RESPONSE: new Buffer([Resp_STK_INSYNC, Resp_STK_OK]) Duplicate key 'Resp_STK_NOSYNC'.
import * as wkx from 'wkx'
function sendMessage(message, callback) {             if (typeof chrome!== 'undefined') {                 chrome.runtime.sendMessage(CONST.extensionId, message, callback); Undefined variable.
debug('CLIENT use net.createConnection', options);       conn = net.createConnection(options);     } Redeclaring variable.
TreeHashIndex.prototype.get = function(node) {         if (!(this.propname in node)) {             node[this.propname] = this.treehash.process(node); Unexpected negating the left operand of 'in' operator.
ret.name = formattedFrom!== null? formattedFrom[1] : address;   ret.email = formattedFrom!== null? address.substring(formattedFrom[0].length).trim().replace(/[<>]/g, '') : '';   return ret; Unnecessary escape character.
(function(window, undefined) {     'use strict'; Unnecessary semicolon.
const FeaturesPanel = () => (   <div className={styles.featuresPanel}> Unexpected empty object pattern.
index++;             } Unnecessary semicolon.
.controller('AppView', function($scope, $routeParams, $filter, usersplaces, question) {     $scope.part = $routeParams.part;
} else if (format == 1) {     for (i = 1; i < count + 1; i++) {       var first = aStream.getByte(); Redeclaring variable.
JSM.ImportFileList.prototype.GetInputList = function (index) {
var tbname=input_name.substring(0,input_name.length-3);    if(input.attr("fr")!="") tbname=input.attr("fr");    var td=input.parent(); Unnecessary semicolon.
}, "J.api.JmolRendererInterface");  Clazz.defineMethod (c$, "plotCircleCenteredClipped",   function (xCenter, yCenter, zCenter, diameter) { Undefined variable.
_.each(['disabled','readonly', 'checked','required', 'autofocus'], function (booleanProp) {     if (!(booleanProp in hash)) {       return; Unexpected negating the left operand of 'in' operator.
sarg[i] = "args["+i+"]";     }     call = "oScope._applyTemp_(" + sarg.join(qx.constant.Core.COMMA) + ");"; Unnecessary semicolon.
this.config = config;             }             this.lastInsertId = 0; Unnecessary semicolon.
uploadUrl: 'https:              uploadHeaders: {'X-Test-Header': 'vue-file-agent'}, Duplicate key 'uploadUrl'.
clearInterval(this.timer)   var seconds = ((new Date() - this.startTime)/1000).toFixed(2)   var winner = this.result == 'won'   var emoji = winner? '😎': '😵'   document.querySelector('.wrapper').classList.add(this.result) Redeclaring variable.
}   else return source && source[opts.fieldASTs[0].name.value]   if (resolve) return resolve(source, args, context, opts) }
return E192;     } Unreachable code.
}     const code = parseInt(error.code, 10)!== NaN? parseInt(error.code, 10) : 500; Use the isNaN function to compare with NaN.
var name = i.name;   return R.div({ Unexpected 'debugger' statement.
this.dispatch({             to: envelope.from, Unreachable code.
case TMS.TM_CONCAT:                 ldebug.luaG_concaterror(L, p1, p2);                 break;             case TMS.TM_BAND: case TMS.TM_BOR: case TMS.TM_BXOR:             case TMS.TM_SHL: case TMS.TM_SHR: case TMS.TM_BNOT: { Expected a 'break' statement before 'case'.
return str; } Unnecessary semicolon.
if (/^(video|movie)/i.test(type)) type = 'video';    else if (/^(audio|music)/i.test(type)) type = 'audio';    else if (/^(image|photo)/i.test(type)) type = 'image';    else type = null; Unexpected constant condition.
if (bottomLabel) {             domutil.removeClass(timeElement, config.classname('time-guide-bottom')); Redundant double negation.
} else {       contentBody.push(<Request content={this.props.content.request} key={0}/>); Unexpected console statement.
if (!err) {               var split = stdout.split(/,/); Unnecessary escape character.
let label = getWrapper().find('.user-stats__label').at(3);       expect(label.shallow().text()).toBe('Following');     });
} else {                         val = clone? jsonQ.clone(value) : value;                     } Redeclaring variable.
}       default: Unreachable code.
\${1:\${numbers}} \${2:\${items|Foo,Bar,Baz|}}   \${3|\$1|} \${2}   \${4|\$1|} \${2}   \${5|\$1|} \${2} Unnecessary escape character.
milkBoxStatus++;         addMilk(); Unexpected console statement.
let t1 = performance.now();  outputDebug("1", "css", (t1-t0), (t1 - gt0)); }; Unnecessary semicolon.
var regexReg = /^([^\(\n\r\u2028\u2029]*)(\(.+\))$/   var parameterReg = /^(.*)(:\w+\b)(.*)$/   var escapeReg = /[.*+?^${}()|[\]\\]/g Unnecessary escape character.
if (code!== 0) {                 err = new Error('Child process exited on signal:'+ signal) Unexpected 'debugger' statement.
}   else if ( match = str.match(/(\d+):([^/]+)?(\/.*)?$/) )   { Expected a conditional expression and instead saw an assignment.
domAttr.get = function(node, name, value){ Undefined variable.
.src(tests.performance)        .pipe(mocha(mochaSettings))        .once('end', function() {             process.exit();         }); Don't use process.exit(); throw an error instead.
var rename = require("gulp-rename"); var uglify = require('gulp-uglify'); Redeclaring variable.
case 'JSXText':         text = handleWhiteSpace(astNode.value);         if (text!== '') { Redeclaring variable.
.done(function(){     $.boom.log('Scripts loaded into iFrame'); Undefined variable.
if (lookAt) {           threeObject.lookAt(lookAt); Redundant double negation.
goog.require('myphysicslab.sims.common.AbstractApp'); goog.require('myphysicslab.sims.common.CommonControls'); goog.require('myphysicslab.sims.pendulum.PendulumSim'); Undefined variable.
}     ).find( "div" ).show(); }; Unnecessary semicolon.
str = [this.__tableHead];       for (var i=0; i<this.__logs.length; i++) {
sendSync: function (message, callback, context) {      throw new Error('SendSync not implemented');     },     receive: function (message, callback, context) {      throw new Error('Receive not implemented');     },     remove: function (id) { Unused variable.
dataView.syncGridCellCssStyles(grid, 'currentSong_playing');             count = commify( parseInt(data.length) );             $('.medialibrary.count').text(count); Redeclaring variable.
} (function() { Unnecessary semicolon.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-06\/seed_silvertongue-1308763743.swf",  admin_props : false, Unnecessary escape character.
},   "statistics":{    "title":"Statistics", Duplicate key'statistics'.
for (var k = n >= 0? Math.min(n, len - 1) : len - Math.abs(n); k >= 0; k--) {                 if (k in t && t[k] === searchElement) {                     return k;
var path = require('path'); var PROTRACTOR_CMD = 'node_modules/protractor/bin/protractor'; Unused variable.
resultHandler(JSON.parse(apiResult));                 } catch (e) {                     resultHandler(e);                 }             } Empty block statement.
if(config.passwordReset.tokens){     var utils = require('../utils'); Unexpected console statement.
tagName: 'table',   headerComponent: computed('childComponents.@each._isHeader', function() {     return this.get('childComponents').findBy('_isHeader'); Unexpected 'debugger' statement.
for (let i = 0; i < TRAIN_STEPS; i++) {     const cost = dl.optimizer.minimize(() => {       const batch = data.nextTrainBatch(BATCH_SIZE); Undefined variable.
if ( chunk[ index + 1 ] === 0x0a ) { bytes ++ ; }      break ;     case 0x0d :      this.moveTo( 1, undefined ) ;      break ;     case 0x1b : Duplicate case label.
global.evalLib.runEvalPyret(newRT, src, options, function (result) {         console.log('done.'); Unexpected 'debugger' statement.
config = {             type: AssetsType.json, Redeclaring variable.
window.console.log("location findAll serializer data", ret);     return this._super(store, primaryModelClass, ret, id)   } Undefined variable.
}).then(function () {
{ "namespaceqpp_1_1internal.html":[1,0,0,2], "namespaceqpp_1_1literals.html":[1,0,0,3], Duplicate key 'namespaceqpp_1_1internal.html'.
utils.initRegion(region="cn-north-1"); var app_key = "*************"; Undefined variable.
promise = manips[manip].call(vars);   if (typeof promise!== "undefined") { Unexpected console statement.
$scope.messages.validateError = 'Data format is not valid for source type'+ $scope.sourceTypeList[$scope.inputs.sourceFormat].name;      } else if (data.status === 'unsupported') {       $scope.validateStatus = ''; Unexpected constant condition.
});         }         var errorPrefix = "Error in " + JS_HANDLE + ".viewDocument(): "; Unnecessary semicolon.
done();             });     }); Unnecessary semicolon.
default :      throw("Whatchoo talkin' bout Willis?");    } Unreachable code.
if (stickyElement.positionType === 'fixed') {           if (stickyElement.useTransform) { Empty block statement.
drawQuesBorders : function(){   this.vinc('border_question', 'crispEdges');   this.getBorderColor = this.getQuesBorderColor; Unused variable.
var tn;             this.schema[elt.ns].simple[elt.name] = elt Unused variable.
import {StyleSheet, ScrollView, View, Text, TouchableOpacity, Alert} from'react-native'; import {analytics, styles, colors, airloy, api, L, toast} from '../../app'; Unused variable.
}             var cb = function() {                 if (value!== void 0) { Move function declaration to function body root.
} Vault.prototype.decryptKey = function(encryptedStr, callback) {   deriveKeyFromPassword(function(error ) {     if (error) { Undefined variable.
if (!vis) return;           var notify = createNotifier({             location: vis.type +'visualization'           });
} const mergedRegex = /<li class="pull-request">\((?:.+?)(\d+)<\/a>\)\<\/li>/; function findPull(res) { Unnecessary escape character.
ControlKit.NodeEventType = {     MOUSE_DOWN   :'mousedown',
var $divStructure = $(".structure hide").clone().removeClass("hide"),                         $prevHiddenInputCreator = $form.filter(".Hidden-Inputs-Creator").html(),
RTLConfFile = common.rtl_conf_file_path + '/RTL.conf';   let exists = fs.existsSync(RTLConfFile); Unexpected console statement.
import { ArtistType } from "./artist" import { ArtworkType } from "./artwork" Unused variable.
nsHash = val;         break;       case 'byKey':         byKeyHash = ABBREVS.byKey + SEP + JSON.stringify(val); Expected a 'break' statement before 'case'.
console.log('(local)UPDATEFOLDER', title)     await browser.bookmarks.update(bookmark.id, {       title: bookmark.title     }) Undefined variable.
keys.push(matches[i].substr(1));     }     var groups = {}; Unnecessary semicolon.
expect.addSnapshotSerializer(createEmotionSerializer(emotion)); Undefined variable.
else                         return!_this.options.inlineText? data[i] : match + data[i];                 }),                 resolve(_this.output) Unreachable code.
"widget": id                 }, function (data) {                     note(data.message, data.type, 10000);                 }); Unused variable.
return prepareWidget('form', config); } Unnecessary semicolon.
break;       }     } Unreachable code.
this.forward = 0; } Unnecessary semicolon.
if (typeof config.log ==='string' && config.log!== '') { Invalid typeof comparison value.
static [config.actionPrefix + "-model"](node, val) {          this._update("model", node, val) Unexpected 'debugger' statement.
$unbind: function(){ Unused variable.
import React, { PropTypes } from'react'; import AuthForm from '../../auth/components/auth-form'; Unused variable.
Separator,   Spacer } from "../lib/components/Layout";
if (err) return console.log(err);             }); Unexpected console statement.
}         while (obj == obj.offsetParent);         return [curleft, curtop]; Expected a conditional expression and instead saw an assignment.
$(function ($, _, Backbone) {   "use strict";
entry: [path.resolve(__dirname, '../src/index.js')],   output: { Duplicate key 'entry'.
var Machine = require("../../../../lib/sentient/machine"); describe("Integration: 'and'", function () { Unused variable.
import { singularize } from "ember-inflector/system";
var re = new RegExp('({#)([\s\S]*)(#})');         var matches = re.exec(text); Unnecessary escape character.
} else {             process.stdout.write(`Pulling '${metadata.name}' from Google Drive...`);         } Unnecessary escape character.
it('should log when pageCloseTimeoutMillis gets exceeded', async () => {         const sources = [ Undefined variable.
const json = require('rollup-plugin-json'); const path = require('path'); Unused variable.
var pool = pools[poolName] = genericPool.Pool({     name: poolName, Redeclaring variable.
module.exports = function mergeSort(A, p, r) {   if (p >= r) {     emptyBlockStatement.
snippet.forEachArray(rawSeriesData, function(datum) {             var result = { Undefined variable.
define(['lodash', 'log', '../ballerina/ast/node'], function (_, log) { Unused variable.
var output = ['document.write (\''];     targetStylesheet = target_stylesheet; 'targetStylesheet' is assigned to itself.
}     case 'function': Unreachable code.
super(props);
, win = window    , store = 'bkwld-tram-js' Unused variable.
jsFile = fsExt.list(build, /\.js$/).forEach(function(moduleName) {     that.queue.push(moduleName); Unused variable.
exports = module.exports = function() { Unused variable.
isSync = false             return ret           }
var ABC = A.B.C;     function pong(x) { Unnecessary semicolon.
} else if (this.match === ';') {   } else if (isWhiteSpace(this.match) || isLineTerminator(this.match)) { Unnecessary semicolon.
return res; } Unnecessary semicolon.
for ( var i = 0; i < actors.length; ++i) {       actor = actors[i];       if (actor.visible() === true) { Redeclaring variable.
}       return state.render.push(` ${k}=${value[k]}`) Unexpected 'debugger' statement.
if (go2 && _window.location.hash.indexOf('access_token')!== -1) {     go2._handleMessage( Undefined variable.
} else if (!timerSpec.hasOwnProperty('interval')) {       throw new Error('Timer interval specification required');     } else if (typeof timerSpec['interval']!== 'number' || Unexpected console statement.
return __awaiter(this, void 0, void 0, function () {             var a, filename, extname, new_file_path, basename, crc32code;             return __generator(this, function (_a) {                 a = { Redeclaring variable.
dataStr = dataStr.replace( new RegExp( '<!--' + REPEAT_COMMENT_PREFIX + '/[^>]+-->', 'g' ), '' ); Unnecessary escape character.
rulerProcessor(argv, mergedPlaces); } Don't use process.exit(); throw an error instead.
import { defaults, isFunction, isEmpty, merge, partial, property, omit } from "lodash";
loadMuiscSongLrc({ commit }, song_id) {     eventBus.requestLrc() Unused variable.
return Array.isArray(value)? value : [value]; } module.exports = Configuration; Unnecessary semicolon.
_handleLogoutSuccess: function(data, status, jqXHR) {     CurrentUserActions.logout(); Unexpected console statement.
samples.push(v);     }     if (samples[samples.length - 1]!== violin.max) { Unnecessary semicolon.
if (next) {         if (next.items) {           return next.items.head; Redundant double negation.
}             hoshi = utils.createElement("div", { class: "hoshi" });             if (hoshiY == 0) { Redeclaring variable.
const html = wrapper.instance().document.documentElement;       expect(html.className).toMatch('carbon-dialog-full-screen--open');       wrapper.setProps({ open: false }); Undefined variable.
function printHelp() {   for (var command in chatCommands) {     if (chatCommands.hasOwnProperty(command)) {       addSystemLine('-' + command + ':'+ chatCommands[command].description); Undefined variable.
return x + 1; } Unnecessary semicolon.
me.parallel.queue = {};
break;                     }
sofia.plugins = []; var App = function() { Undefined variable.
let spyService;     function Target() {}     beforeEach(() => { Unnecessary semicolon.
var scenario = scenarios[ruleMatches[0].ind];           if(current && scenario.src == current.src) {             var compiled; Empty block statement.
updateQuery: (previousResult, {subscriptionData}) => {           const returnResult = Immutable.Map(previousResult); Unexpected 'debugger' statement.
class Package extends EventChannel {     constructor(args) {         super();         this.setName(_.get(args, 'name', '')); Expected to call'super()'.
return this; } Unnecessary semicolon.
return false;     }     var item = forceSingleItem(items);     return item.ServiceId && item.Name && item.status; Unreachable code.
_environment = _config.environment; _secret_key = _config[_environment].app.secret_key;
} else if (this.format == "session") {         jsonToRender.helpText = true; Redeclaring variable.
};     if (typeof offset == 'number') {       args.offset = offset;     }     return args; Invalid typeof comparison value.
const publicKeyBuffer = new Buffer(signature.publicKey, "hex")     for (let i = 0; i < publicKeyBuffer.length; i++) {       bb.writeByte(publicKeyBuffer[i]) 'i' is constant.
type:"t",                  value:Sudoku.textures[gameBoardCell.getValue()]              };
, assert = require('assert')  , model = require('../lib'); Redeclaring variable.
var Database = require('better-sqlite3');   try { 'filePath' is assigned to itself.
const swDefault = new ScrollWatch({   watch: '.feature-list__item', Redeclaring variable.
'hqwebapp/js/initial_page_data', ], function($, alertUser) {     var alertUser = alertUser.alert_user; Redeclaring variable.
throw 'unmatched request action:'+ request.action;   } Unreachable code.
let id = annotation.provenance.analysis.execution_id;     let type = annotation.geometry.type; Unused variable.
if (!aTopic) {              throw new Error('Not specfied any topic.');          } Unreachable code.
if (value.roles === "יו\"ר ועדת הפירושים") { Unexpected console statement.
'use strict'; require = require('module')._load('./AgentLoader'); var MediaFrameMulticaster = require('../mediaFrameMulticaster/build/Release/mediaFrameMulticaster'); Read-only global'require' should not be modified.
var pollers = require('./pollers'); var hooks = require('./hooks'); Redeclaring variable.
throw new Error("only arrays with rank 1 or 2 supported")
value = Number(value);   return typeof value === 'number' && isFinite(value) && value % 1!== 0;  }, Unnecessary semicolon.
function InputNumberGtrOrEqualToZero(props) {   return <div><InputNumber {...props} min={0} /></div>; } Unreachable code.
try {     azure.createBlobService().blobService.deleteBlob(this.get(paths.container), this.get(paths.filename), function(error) {      if(!error){}     })    } catch(e) {} Empty block statement.
var group_id = -1;                 for (k = 0; k < bundle_data_sv.group.length; k++) {                    if (d3.select(this).classed(bundle_data_sv.group[k].name) == true) {                        group_id = k; Undefined variable.
}       ReactUpdates.ReactReconcileTransaction.perform(         this.updateChildren, Redeclaring variable.
} class KeyValueRecord {   constructor(key) {     this._key = key; Expected to call'super()'.
for (i = 0; i < validDelays.length; i++) {   assert.doesNotThrow(function() { Redeclaring variable.
var mode = args.mode;         if (window.File && window.FileReader && item.kind === 'folder' && item.data.provider && item.data.permissions && item.data.permissions.edit) { Unexpected 'debugger' statement.
for (i = 0; i < numFaces; i++) {         var vindex = i * (3 * 3); Redeclaring variable.
if ('visible' in props) {         if (props.visible) {           this.showWindow(); Redundant double negation.
return createStore(reducers, initalState); }
var copy = new Tensor(this.dims);     return copy.copy(this); }; Unreachable code.
const data = []   const workspaceElement = atom.workspace   document.body.appendChild(workspaceElement) Undefined variable.
if (!this.noTrigger) {                 $(this.frameEl.contentWindow).trigger("longPressStart", this.currentTouch);             } Undefined variable.
const SRC_DIR = constants.SRC_DIR; const SUCCESS_MESSAGE = 'TSLint: Everything is OK'; Unexpected console statement.
imageBuffer = fs.readFileSync(file + fileExt);             }         }; Unnecessary semicolon.
if(m) {           fs.writeFileSync(appMainPath, getPlaceholderContent(Number(m[1])));         } else { Undefined variable.
map.fitBounds(bounds);
}     $("#progress.dialog.message").html(message);     $("#progress.dialog.history").append("<div>" + message + "</div>");
return data; } Unnecessary semicolon.
}else if( stype === "ses" ){             for( i = 0; i < n; ++i ){                 if( ( vpBits[ i ] & ISBOUND ) && ( vpBits[ i ] & ISDONE ) ){ Redeclaring variable.
import { Link } from 'gatsby'; import styles from './header.module.css'; Unused variable.
import { Grid, Row, Col } from'react-flexbox-grid/lib/index'; import log from 'loglevel'; Unused variable.
runOrdered: function(list, consumer, consumerCallback) { Unused variable.
}                 const pipeline = agent.settings[CONFIG_SETTINGS_DOMAIN_PIPELINE]; Unnecessary semicolon.
'information as possible.')   return 1 } Don't use process.exit(); throw an error instead.
}   render(props, {name, imageTab, imageSelected}) {     let imageTabContent Unexpected empty object pattern.
} else if (wm.localeString) {     djConfig.locale = wm.localeString;  } Unnecessary escape character.
send();       }, function() { Unused variable.
return Object.assign({}, state, { labelling });     case 'SET_TOOL_CONTEXT_MENU_DATA': {       const contextMenu = Object.assign({}, state.contextMenu); Unexpected lexical declaration in case block.
if (pathParts[1] == "model") {     event = ['model', pathParts[0]];    } else if (pathParts[1] == "aggregate") { Unexpected comma in middle of array.
var p = ary[i];             p.X = p.X + diffT;             p.Y = p.Y - diffT;             newAry.push(p); 'p.X' is assigned to itself.
import Menu from "../Menu" import MobileFooter from "./MobileFooter" Unused variable.
callback.value = null;           callbacks = callbacksByType[otherType];           i = callbacks.indexOf(callback);           callbacksByType[otherType] = callbacks.slice(0, i).concat(callbacks.slice(i + 1)); Redeclaring variable.
import { View } from 'backbone'; import Unused variable.
tyval.array.extend(function empty () {     this.validators.push(function empty () {       check = check && variable.length === 0     }) Read-only global 'check' should not be modified.
var stringToArray = function (x) {  if (typeof x === "string") {   return [x]; Invalid typeof comparison value.
console.log('------', shape.Shape.Option);
exports.GameConnectInPayload = function(name) {  this.getPayload = function() { Redeclaring variable.
mongoose.Query.prototype.skip = function (skip) {    return this;'skip' is assigned to itself.
summary = $filter('wrapTextWithEllipsis')(           summary, _RULE_SUMMARY_WRAP_CHARACTER_COUNT);       };       summary = $filter('wrapTextWithEllipsis')(           summary, _RULE_SUMMARY_WRAP_CHARACTER_COUNT);       };
.action(partial(ary(remove, 2), config)); } Unnecessary semicolon.
}; module.exports = utils; Unexpected 'debugger' statement.
return this.readRaw(start * this.buffer.sampleRate, length * this.buffer.sampleRate) } Unreachable code.
export function base64ToArrayBuffer(dataUrl) {     const base64 = dataUrl.replace(/^data:([^;]+)\;base64,/gmi, ''),         binary = atob(base64), Unnecessary escape character.
const { httpCodeList, currentSeries } = props;  return httpCodeList && httpCodeList.length? ( Unexpected 'debugger' statement.
return;             }             if (this._container) { Unexpected 'debugger' statement.
}());         var deRegDialog = [null, new DeReg(), new DeReg()];         var deRegObject = [null, new DeReg(), new DeReg()]; Unexpected comma in middle of array.
var regexp = new RegExp("/");                             sceneViewerUrl = sceneViewerUrl.replace(regexp,"");                             if(sceneViewerUrl.indexOf("share") > -1){ Redeclaring variable.
document.body.appendChild(dummy);    if (dummy.getBoundingClientRect().width!== window.innerWidth - 100) {     (function(calcs) { Unexpected constant condition.
category: "Fun",   description: "( ͡° ͜ʖ ͡°) u-ugh!\n*d stands for delete*",   usage: "lennyd", Unnecessary escape character.
loadBalancer.availabilityZones[loadBalancer.region] = loadBalancer.regionZones;       if (loadBalancer.securityGroups) {         loadBalancer.securityGroups.push(loadBalancer.securityGroup);       } Empty block statement.
var index = findClosestChunk( i, j, k, this._chunksToAdd )     var loc = this._chunksToAdd.splice(index,1)[0]     addNewChunk( this, loc[0], loc[1], loc[2] )   }
if($this.data(renderPosDataName)){                     $this.removeData(renderPosDataName); Unexpected constant condition.
cml.extPlatformPlugin[type] = platformPlugin;
import Channel, { ChannelType } from '../../utils/Channel';
_concat_base_removals,       _concat_moves; Redeclaring variable.
remakeInfo : function(cidlist){   var longColor = (this.owner.flags.irowake? this.getLongColor(cidlist) : ""); Redundant double negation.
if (newProps && newProps instanceof Object) {       for (var key in newProps) {         if (!newProps.hasOwnProperty(key)) continue;         if (this.props[key] && this.props[key]!== newProps[key]) { Redeclaring variable.
case 'length':      duration = this.durationTime(this.props.data)      break       case 'date': Unreachable code.
};                 if ((d = glyf2svg(glyf, ttf))) {                     g.d = 'd="'+ d +'"'; Expected a conditional expression and instead saw an assignment.
try {       if (require.cache[relativeTemplate]) {         delete require.cache[relativeTemplate]; Redundant double negation.
if (state!== undefined) {                  logger[level]('state at'+ msg, JSON.stringify(state, replacer, 2)); Unexpected constant condition.
throw Error("expecting one argument, got: " + pr(x) + ", " + spr(other));     }     return ["get", [ Empty block statement.
case 'test':     spawn.sync(       'node', Unexpected lexical declaration in case block.
if (t.domNode.textTracks) {      for (i = t.domNode.textTracks.length - 1; i >= 0; i--) {      t.domNode.textTracks[i].mode = "hidden"; Redeclaring variable.
window.location.assign("/#/");     if (typeof ga!== 'undefined') {       ga('send', 'pageview'); Redundant double negation.
connect (id) {         if (this._scratchLinkSocket) { Duplicate name 'connect'.
import * as React from'react' import Text from './text' Unused variable.
if(oc.status){     return oc; Redundant double negation.
console.log('>>>', POINTS);       switch ( point.phase ) { Unexpected console statement.
} else {             i = 0;             var maxi = pruned.length-1; Redeclaring variable.
if (_gitPath) { return _gitPath; }         _gitPath = Preferences.get("gitIsInSystemPath"? "git" : Preferences.get("gitPath"));         return _gitPath;
exports.getBPMNProcess = function(processId, bpmnFilePath, persistencyPath, done) {      done = done || function() {}; Unused variable.
html += "<dd>";         let this_count = lines[i].match(/^(:+)/)[1].length;         html += wiky.process_normal(lines[i].substring(this_count)); Unnecessary escape character.
var i,k;   if(Y.isArray(errors)) {    for(i = 0 ; i < errors.length ; i++) { Undefined variable.
var extent = ol.proj.transformExtent([-126, 24, -66, 50], 'EPSG:4326', 'EPSG:3857'); var startDate = threeHoursAgo();
fill: function (opts) {         return casper.sendKeys(opts.selector, opts.text, {reset: true});     },
return state; } Unnecessary semicolon.
var processCase = function () {       if (temp!== null) { Move function declaration to function body root.
process.on('disconnect', function() {   process.exit(0); }); throw an error instead.
$this.colorpicker({                 align:"left", Undefined variable.
var target = replace? elem.parentNode : elem         var scanTemplate = function(text) {             if (loaded) { Move function declaration to function body root.
return forwardHandlerRegistry[name]; } Unnecessary semicolon.
this.gl.enableVertexAttribArray(this.vertexPositionAttribute);       this.textureCoordAttribute = this.program.getAttributeLocation("aTextureCoord");       this.gl.enableVertexAttribArray(this.textureCoordAttribute); Unnecessary semicolon.
{             d = t * this.length - lastKey.time;             value[0] = firstKey.value[0] + d * firstKey.left[0]; Redeclaring variable.
this.compile(options.callback); } Unnecessary semicolon.
conversion = [0.299, 0.587, 0.114];          } else if (type == 'BT709') {             conversion = [0.2126, 0.7152, 0.0722]; Unexpected constant condition.
return `${diff}s` };
if(ctx.resolve('username')) {     out += ctx.resolve('username')   } else {     out += ''   } Empty block statement.
render(){   return ( Unexpected console statement.
}); }; module.exports = TableUsesAbbreviationForHeader; Unnecessary semicolon.
return true;      if(result=="<P>Content B</P>"){       return true; Unreachable code.
this.listenTo(this.model, "change:field", this.add_field);         }         this.listenTo(this.model, "change:field_kind", this.add_field); Unnecessary semicolon.
if (typeof ver === 'number' || (typeof ver ==='string' && ver.length > 0)) {                 throw new Error('version number missing!'); Empty block statement.
writeType: 'input',         validation: /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&         value: '' Unnecessary escape character.
if (el) {         el.parentNode.removeChild(el); Unexpected 'debugger' statement.
var Keypair = require('./keypair'); var BufferWriter = require('./bufferwriter'); Unused variable.
import { shallow } from 'enzyme'; import { Container } from'reactstrap'; Unnecessary semicolon.
newSlide.description = req.body.description       }       if (req.body.duration) {         newSlide.duration = req.body.duration Empty block statement.
var _CACHE_TABLES = {}; var nextTick = typeof setImmediate!== 'undefined'? setImmediate : process.nextTick; Client.prototype._action = function (method, tableName, obj, useCache, retry, callback) { Invalid typeof comparison value.
chartPreview.data.setAssignDataFields(assignDataPanel.getAssignDataFields());     } Empty block statement.
{recentOpenings.map(opening => {           var item = utils.processItem(opening.item) Unexpected console statement.
} else {       sigVerified = true;     } Redeclaring variable.
}  var esc = querystring.escape; Unexpected 'debugger' statement.
while (obj == obj.offsetParent) {     obj = obj.offsetParent; Expected a conditional expression and instead saw an assignment.
return padNumber(offset / 60, 2) + padNumber(Math.abs(offset % 60), 2); } Unnecessary semicolon.
ruleSpecs = handlers[h].rule_specs;         for (i = 0; i < ruleSpecs.length; i++) {           adjMatrix[stateIds[state]][stateIds[ruleSpecs[i].dest]] = 1;         }
});     return Promise.all(_runOutTasks);   }   _clear() { Unnecessary semicolon.
Object.create = function (obj) {         function F() {}         F.prototype = obj; Unnecessary semicolon.
consolidate('rules','media', 'last', rule, context, i, cache);   } Unnecessary semicolon.
import React from'react' import { Grid } from 'rgx' import ConnectedInstanceCard from '../containers/ConnectedInstanceCard' Unused variable.
if (infos) {             coords = ( Expected a conditional expression and instead saw an assignment.
var multiplex = Neuro.createShard({     getShardForModel: function(model) { Undefined variable.
}             return false; Empty block statement.
return "Green";                 case "failed": Unreachable code.
} async function loadModels( materials ) {   const loader = createAsyncLoader( new GLTFLoader() ); Unused variable.
if (!window.isNormal () ||!window.isMain () ) return;   const name = window.app ().name ();   if (!/Terminal/.test ( name ) || false ) return; Unused variable.
expected: `.user{color:red'';}`  },  'noop tail V2': {   sample: `color:red""`, Duplicate key 'noop tail V'.
module.exports = function (Component, options) {   options = options || {}; Redeclaring variable.
try {         await orango.disconnect() Unexpected 'debugger' statement.
resize25: '25% 크기',         mirrorHorizontal: '좌우 반전', Duplicate key'remove'.
var handlers = this.handlers;     if (! ( channel in handlers ) )       handlers[channel] = {}; Unexpected negating the left operand of 'in' operator.
return hexToUint8     } catch(err){ Unreachable code.
var client = new tracker.Client({trackerToken:token});                  client.project(projectId).fileAttachment(attachmentId).download(path, function(error ) {                      if (error) { Undefined variable.
const Provider = new this.Provider(url);     url = Provider.normalizeURL(url); Unexpected 'debugger' statement.
});         htmleditor.addPlugin('relativeimages', /src=["'](.+?)["']/gim, function(marker) {             var replacement = marker.found[0]; Unnecessary escape character.
this.ns(ns);    } Unnecessary semicolon.
.expect(404)                    .end(function(err) {                         done(err); Unused variable.
}       xsRaSt = scope.ssffds.getSampleRateAndStartTimeOfTrack(dD.dots[i].xSsffTrack);       ysRaSt = scope.ssffds.getSampleRateAndStartTimeOfTrack(dD.dots[i].ySsffTrack); Redeclaring variable.
} function create_fragment(ctx) {  var div; Unused variable.
keyForAttribute(attr, method) {     return this._super(attr, method); Unused variable.
while ((result = r.exec(value))) {                 if (prefix === undefined || result[1].length < prefix.length) Expected a conditional expression and instead saw an assignment.
const { CommandStructures, SwitchbladeEmbed, Constants } = require('../../') const { Command, CommandParameters, MemberParameter, CommandRequirements } = CommandStructures Unused variable.
var id = $scope.element.id;         var poll = $scope.element.poll;
reader.onload = function __onload_handler__(event){
"@semantic-release/gitlab",                   {                       assets: [{ path: "dist Duplicate key 'assets'.
proto['itemAt'] = proto.itemAt;   proto['items'] = proto.items; 'proto.colors' is assigned to itself.
patterns: [                         {                             match: /var version = *'[.0-9]*';/g,                             replacement: "var version = '" + version + "';" Unnecessary escape character.
import { setChildren } from './setchildren'; import { isString, isFunction, isNode, getParentElRecursive } from './util';
}else{      slave[this.outputMessage] = val; Undefined variable.
}          if (resolvedSource.match(/^\/\     var options = $.extend({}, this.options, { Redundant double negation.
}             done(conn); Unnecessary semicolon.
var gutil = require('gulp-util'); Unused variable.
if (edgesTokenIndex === -1)             return;           const bracketIndex = this._json.indexOf('[', edgesTokenIndex);           if (bracketIndex === -1) Redeclaring variable.
parseTableMore (keyword) {       if (/^[ \t]$/.test(this.char)) {         return null       } else if (this.char === ']') { Empty block statement.
function Date_ (y, m, d, h, mn, s, ms) {     var len, result; Move function declaration to function body root.
case 'cond':           fn = cond[token.name.substr(1)];           if (fn) { Unexpected lexical declaration in case block.
it('node-recycler', function(result, cx) { Undefined variable.
},   clone: function(buffer){    return new this.constructor(this.current.getExpression(), this.max.getExpression());   } Unused variable.
this.workspace.on('change', this.save, this);   }   ScriptEditor.prototype.save = function() { Unnecessary semicolon.
while ( parent === node.parentNode ) { Expected a conditional expression and instead saw an assignment.
var content = contents[i];                 var service = new OnLineData(me.mDatasUrl, content);                 services.push(service); Undefined variable.
__docRef    = window.document,     __isArray   = Array.isArray,
else if( typeof where == 'object' ) {                 ws = [];                 for( var key in where ) Redeclaring variable.
var assert = require('assert'); var fs = require('fs'); Unused variable.
}else if(_isNodeList(object) || _isHTMLCollection(object)){   returned=_each_array(_toArray(object),funct);  }else{ Redeclaring variable.
DummyAnalyser.super.constructor.call(this); }; DummyAnalyser = Webvs.defineClass(DummyAnalyser, Webvs.AnalyserAdapter, {     isPlaying: function() { 'DummyAnalyser' is a function.
dataTemp.push(curr); } FUNCTION_TABLE.push(0, 0); var fileCounter = 0; Undefined variable.
if (!userInfo) {       wx.navigateTo({         url: "/pages/authorize/index"       })     } else { Undefined variable.
const diffRender = function (olds, news) {          if (!olds || olds.length!== news.length) {         return news; Unreachable code.
return new Promise(function (resolve, reject) {     console.log('Loading script', url);     const script = document$1.createElement('script');     script.type = 'text/javascript'; Unexpected console statement.
app.use(function(err, req, res, next) {     if (err.type == "GITHUB_RESOLUTION_ERROR") {         res.redirect('/login?error=github_email_is_private'); Expected a conditional expression and instead saw an assignment.
"@requiredField": "This field is required",         "@textAutoWidth.Wrap": "Wrap",         "@textAutoWidth.Grow": "Grow", Duplicate key '@textAutoWidth.Fit'.
await logError('Main', 'Unhandled Rejection', err)     }) Don't use process.exit(); throw an error instead.
const reportName = yearlyReport? `${year} Yearly Platform Report` : `${year}/${month + 1} Monthly Platform Report`;   const dateFormat = yearlyReport? 'YYYY' : 'YYYYMM';   console.log('startDate', startDate, 'endDate', endDate); Unused variable.
Zlib){          CloudCommander.Gzip=true;      }
PreviewDocument = connect(mapStateToProps, {})(PreviewDocument); 'PreviewDocument' is a class.
}           break;       case actions.on_todo_edited:           return { Unreachable code.
var searchService = Promise.promisifyAll(require('./search')); Unused variable.
for (__prop in __func.prototype){     if (__prop === 'constructor')         __constructor_was__enumed = true; Expected a conditional expression and instead saw an assignment.
var auth_token = this.auth.getToken();   if (auth_token) { Redeclaring variable.
if (options.schema && body.schema && body.schema.type && body.schema.type === 'object') {             common.schemaToArray(body.schema,1,parameters,false); Unexpected console statement.
return out.set(this.centerX, this.centerY);             case Phaser.MIDDLE_RIGHT: Unreachable code.
this.on('afterrender', function() {     this._onSet(); Unexpected 'debugger' statement.
XSS.PIXELSIZE = 4; $(window).on('load', function() {     XSS.doc = $(document.body);
'waypointDown': function(component) {     }, Unexpected 'debugger' statement.
console.log();     } Don't use throw an error instead.
case 'ANNOTATION':                   error("Annotation stache tag must occur inside an HTML start tag");                   break;                 default:                   error("Unexpected tag type: " + tag.type); Expected a 'break' statement before 'default'.
break;      case "version":              return version;      default: Duplicate case label.
if (info && info.type === 'enum') {                         onChange = function(e) {                             delete varEdits[varDef.key]; Move function declaration to function body root.
var split_string = "  ";         db.adminCommand({split:collection, Redeclaring variable.
dwr.engine._sendData(batch);   if (batch.rpcType == dwr.engine.XMLHttpRequest) { Expected a conditional expression and instead saw an assignment.
if (result[i].error) {         log.error('TimeSeries', result[i].error);        } else { Unexpected console statement.
{    canvas.requestPointerLock = canvas.mozRequestPointerLock || canvas.requestPointerLock || canvas.webkitRequestPointerLock;    canvas.requestPointerLock(); Undefined variable.
}).on('/', () => {         const targetTagString = 'dmc-empty';         riot.mount('dmc-page', targetTagString); Unexpected 'debugger' statement.
return;   } Unnecessary semicolon.
module.exports = jsonSchemaTable; var log = console.log;
throw new Error( '无待签到贴吧' );  } Unreachable code.
toRender = {               parcelId: response.get("parcel_id"), Redeclaring variable.
} else if (argv._[0] === 'edit') {     stamp = argv._[1]     key = getKey(stamp)     prop = argv._[2] Redeclaring variable.
lastStarted = Date.now();   var nodeMajor = parseInt((process.versions.node.split('.') || [null,null])[1] || 0)   if (nodeMajor >= 8) { Unexpected comma in middle of array.
case types.TOGGLE_COMPACT_CODE:       return { Duplicate case label.
entity = this.allEntities[i];        if(entity.alwaysOn || entity.checkCollision){         entity.checkCollision = false; Unexpected constant condition.
canCall(action) {         return this.instance;[action];     } Unreachable code.
for (i = 0; i < length; i++) {             keyOrId = track[i]              proxy = retain[keyOrId] Redeclaring variable.
init () {     if (this._initializationStatus!== 0)       return console.warn(`The \`init\` method should only be called once.`); Redundant double negation.
const {dispatch} = window const DEFAULT_STICKYFOR = 3*1000
for (j=start; j<=end; j++) {      frame++;
switch (action.type) {       case PUT_DRAG_INDICATOR: {         const {isPlaceAfter, itemInfo} = action Unexpected lexical declaration in case block.
return result;             }         }, Empty block statement.
renderInput: function(props) {       props.type = props.type || 'text'; Unexpected 'debugger' statement.
export default class EventsExample extends React.Component {   constructor() {     super();     this.state = { Expected to call'super()'.
node.events.ng.on( IN + say + 'STAGE', function (msg) {             var stageObj; Unexpected 'debugger' statement.
var j,i; outer: for (j = 0; j < 5; j = j + 1) { Read-only global 'console' should not be modified.
debugger;         if (JSHINT(code, CONFIG.LINT_SETTINGS)) {             runButton.setIconCls('icon-loading'); Unreachable code.
const searchCallback = (found, err) => {             --searchCount; Move function declaration to function body root.
if (failed) {     var ratio = count / totalCount; Unexpected constant condition.
buildDir: './builds',                     winIco: './public/images/icon.ico' Duplicate key 'name'.
getMovienfo(showId.trim(),"pm");                         }                     } Unnecessary semicolon.
, multi     = 5     , elements  = Object.keys(map)
function done() { Move function declaration to function body root.
it("should be variable string info", function() {             const group   = file.openGroup('scada'); This generator function does not have 'yield'.
let ext = dom.src.includes("webp")? ".webp" : path.extname(parsedUrl.pathname);             if (!ext) ext = ".png"; Unexpected 'debugger' statement.
});           } catch (err) {             throw new Error('Invalid Config file, incorrect JSON format:'+ err.message, err);                        }
feather.logger.error("Error getting markdown doc: " + res.statusCode);           cb(null, {doc: url + ": " + res.statusCode}); Unexpected 'debugger' statement.
if (!(layer instanceof geo.layer)) {     console.warn("Invalid layer"); Unexpected negating the left operand of 'instanceof' operator.
if (jqXHR.status == 200 && jqXHR.responseText.match(/^<\?xml/)!= null) {           var xml = jqXHR.responseText;           this.success(xml); Undefined variable.
var enc = _child_process2["default"].spawn(_this3.getCommand(), options);    hookEncodingProcess(resolve, reject, enc);   };
}     var getShaderProgram = function ( vs, ps, defines ) { Redeclaring variable.
return bbox; } Unnecessary semicolon.
fetch('/foo', { method: 'POST' }).catch(() => {       expect(shouldRefreshTokenSpy.mock.calls).toEqual([['I am reason']]);     }) Undefined variable.
return false;   else if (value === null)     return Boolean(expectedType.__IsReferenceType__); Invalid typeof comparison value.
function remit (options) {
throw new Error('Invalid m3u8 file: not "#EXTM3U"');       } Unreachable code.
var pattern = tmplRule.replaceParam(),     patternP = /[^\s|]+([\s]?\|[\s]?[^\s\(\)]+(\([^\(\)]+\))?(\.[^\s.]+)?){0,}/g,     matchArr, matchArrP, ret, prop, i = 0; Unnecessary escape character.
import Resource from './resource'; import { attr } from 'ember-jsonapi-resources/models/resource'; Unused variable.
}         }         return results; Unnecessary semicolon.
'already exists in DB.');             return;         } Don't use process.exit(); throw an error instead.
cache.swapCache();   document.location.reload(); }); 'document.location' is assigned to itself.
'use strict'; var assert = require('assert'); Unused variable.
if (L.Browser.mobileWebkit) {     L.DomUtil.remove(root);    }
}, function(response) {                         console.log('Error retrieving experiment statistics for'+ experiment.id);
const mongoose = require("mongoose"); const EMAIL_REGEX = /^([a-zA-Z0-9_\-.]+)@([a-zA-Z0-9_\-.]+)\.([a-zA-Z]{2,5})$/; Unnecessary escape character.
.then((responses) => {     const [aspect, sample] = responses;     if (!aspect) {       handleUpsertError(constants.objectType.subject, isBulk); Unused variable.
for (key in nodes) {       if (Object.prototype.hasOwnProperty.call(nodes, key)) {         node = nodes[key]; Unexpected constant condition.
'react/addons': 'React',        'react-motion': 'TransitionSpring'     }, Duplicate key'react-motion'.
function delTask (taskId) {}
callback = jasmine.createSpy('callback'),           inputEvent = new Event('input');       expect(handler).toBeDefined(); Undefined variable.
'-o-transform': "scale("+ $scope.config.style.scale +")",                         '-moz-transform': "scale("+ $scope.config.style.scale + ")", Duplicate key '-o-transform'.
if (!result.success) {       return callback(new Error('Error sending ESRI json ', result[0].error));     }
case Syntax.FunctionDeclaration:           name = node.declaration.id.name;           utils.move(node.declaration.range[0], state); Redeclaring variable.
objectApp.status = 'crashed';               } Unexpected console statement.
console.error('not logged in')   process.exit(100) } throw an error instead.
var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;     target = target || new Vec3(); Undefined variable.
var bottom = positionData;         for (i = 0; i < children.length; i++) {             if (children[i].type === "kern") { Redeclaring variable.
} else {     this._cfgData = _.assign(this._cfgData, key, value);   } Redeclaring variable.
_renumber: function () {             var re = new RegExp('^([^\\\[]+\\\[[^\\\]]+\\\]\\\[)([#|\d]+)(\\\].*)$', 'gi'); Unnecessary escape character.
const result = visit(bag, response, context.operation, operationSchema, context);   const data = { Unexpected 'debugger' statement.
var args = {'josh': 'hello'};     var opts = {mock: true}; Redeclaring variable.
return "hsl(" + hue + ", 52%, 91%)";   } Unnecessary semicolon.
const _ = require('underscore') const DropdownView = require('../dropdown.view') Unused variable.
output.error("Unhandled command '" + process.argv[2] + "'");         return; Don't use process.exit(); throw an error instead.
print += "\n\n";                 log(print);                 print = ""; Unexpected console statement.
var _this = this;         this.getProcess = function () { throw new Error('getProcess is abstract'); };         this.currentListeners = {}; Unreachable code.
const OPTIONS = {...state}       let {minify,...rest} = command == SET_PROJECT_TYPE        ? getProjecTypeOptions(payload)
var theme = t.next(this.opt.areas? "area" : "line", [this.opt, run], true),      s = run.group, rsegments = [], startindexes = [], rseg = null, lpoly,      ht = this._hScaler.scaler.getTransformerFromModel(this._hScaler), Redeclaring variable.
return getRGB(color); } Unnecessary semicolon.
history.listen( ({pathname,search}) => {         var query = queryString.parse(location.search)
}   case SET_ROLE : {     const commenters = state.get('commenters');     const idx = commenters.findIndex(el => el.id === action.id); Unexpected lexical declaration in case block.
if (logging) console.log('checking user-can');
employee.name = employee.name.first +'' + employee.name.last;                     return employee; 'employee.isEmployee' is assigned to itself.
element.autocomplete().autocomplete( "option", "appendTo", "#autocomplete-wrap1" );  assert.equal( element.autocomplete( "widget" ).parent()[ 0 ],   $( "#autocomplete-wrap1" )[ 0 ], "modified after init" ); Undefined variable.
$(".scroller-up").live("click", function () {         var scrollerContentHolderHeight = $(this).siblings().find(".scrollerContentHolder").css('height');
static async replaceResourceExternalToInternalLinks(body) {   const reString = pregQuote(Resource.baseRelativeDirectoryPath() + '/') + '[a-zA-Z0-9.]+';   const re = new RegExp(reString, 'gi'); Unnecessary escape character.
el.setAttribute('crossorigin', 'anonymous');       el.addEventListener('canplaythrough', () => this.onLoad());       el.addEventListener('error', () => this.onError());
if (!def) return;  const events = def.events[name];  if (events) { Unnecessary semicolon.
$scope.isIE9 = isIe9();             }]); Unexpected 'debugger' statement.
var mBook = this.model.book;         var data = {}; Unused variable.
reportIfForbidden(argument.name, argument);         } else if (argType === 'Literal' && /^[a-z][^.]*$/.test(argument.value)) {           reportIfForbidden(argument.value, argument); Unnecessary escape character.
} else {   var redis = require('redis').createClient(); }
var tagRe = /\A^((?:[\w\u00c0-\uFFFF-]|\\.)+)\Z/g;   SelectorSet.prototype.indexes.push({ Unnecessary escape character.
renderDateError: function(){     const {fields: {fullName, month, day, year}} = this.props;     if (!year.error) { return null; }
};                 DataGrid = __decorate([                     core_1.Component({ 'DataGrid' is a function.
} else {    selected = this.state.fieldValue;   } Redeclaring variable.
describe('Enroll phone number', function () {       itp('has a list of countries in alphabetical order', function () {
list.sort();     for(i = 0, name; name = list[i]; i++) {         filepath = path.join(dirpath, name); Expected a conditional expression and instead saw an assignment.
describe('.serializeColorSpace(plugin)', function () {     var rgb, unnamed, broken, BaseSpace; Redeclaring variable.
var x = b * options.width + encoding.barcodePadding;   if (binary[b] === "1") {    ctx.fillRect(x, yFrom, options.width, options.height); Empty block statement.
if (lighting > 255) lighting = 255;     r = lighting, g = lighting, b = lighting;     lighting = b + (g << 8) + (r << 16); Redeclaring variable.
import css from'styled-jsx/css' import { color, font, radius, space } from '_utils/branding' import { timeWidth } from 'itinerary/style' Unused variable.
}         if (response.status === tab_status.WHITELISTED) {             document.getElementById('kp-remove-from-whitelist').style.display = 'none'; Undefined variable.
return res.redirect(locals.topic.url + '#comment-id-' + newReply.id);
case Type.Parameter:       result = this.inferenceExpression(node.init);     break;     case Type.ReturnStatement: Unreachable code.
var source = sourceDocument.documentElement.innerHTML;   for (var index = 0; index < dictionaryWrappers.length; index ++) { Unexpected console statement.
this.clicked = function(){    var bl = this.parent;    var fg = this.find("flowgraph"); Unexpected console statement.
return res.status(internalError.status).send(createResponseError(internalError)); } Unnecessary semicolon.
function DashboardCtrl ($cookies, $cookieStore, initData) {     $cookies.push(initData);     $cookieStore.add(initData);   }
var form = Promise.promisifyAll(new formidable.IncomingForm())           var progressListener = function(received, expected) {             if (expected) { Move function declaration to function body root.
normalizeArrayResponse(store, primaryModelClass, payload) {     let documentHash = { Unused variable.
res.send(400,err.toString());             }         }, Unnecessary semicolon.
this._iFactorPage = Math.floor(iScrollBarSize * 0.8);    } else if (Device.browser.webkit) {     this._iFactor = stepSize; Redundant double negation.
}).catch(() => {                     exitError('Please check your internet connection');                 }); Don't use process.exit(); throw an error instead.
expect(fixedClasses).toMatchInlineSnapshot(`"imageClass gbi-fwatluf"`)   }) Undefined variable.
nextJob.delay(new Date(result.phases[0].deadline)) Unexpected 'debugger' statement.
y,   xFormat, Unused variable.
this._childExpressions = childExpressions;   this.isUpdating = false; Unnecessary semicolon.
this.title = m.prop('');   }
c.d = -10;           (a).b          =          c.d          ++; })(); 'c' is a function.
Server.on('error', function (error) {                     Util.log(error, '\nCould not use https port:'+ lSSLPort);                     redirectServer.close(); Undefined variable.
SignatureEngine.prototype.unbox = function(msg, cb, opts) {       var eng, esc, literals, msg, payload, ___iced_passed_deferral, __iced_deferrals; Redeclaring variable.
constructor () {} } Expected to call'super()'.
})  .use(function *(next) {     yield next;   }); This generator function does not have 'yield'.
$connectionStatus.popover('destroy');                             initializeConnectionStatus(transport);                             popoverTimer = null; Undefined variable.
if (token === 'null') {       return false Unexpected console statement.
var offset = 0;    for (i = 0; i < parts.length; ++i) {     buf.writeUInt32BE(parts[i].length, offset); Redeclaring variable.
console.log(Detective)                      Detective[attrName](node, attrVal) Unexpected 'debugger' statement.
shindig.container.ContainerRender.WIDTH = 'width';
}; const StayScrolledDemo = () => (   <Messages style={style} /> Unexpected empty object pattern.
logLevel:'error'  , runners: 1 Duplicate key 'logLevel'.
function assert(b, err) { if(!b) { debugger; } } Unexpected 'debugger' statement.
KVREG = /\s*"?([^\s"]*)"?\s*"([^"]*)"/;     var rl = readline.createInterface({ Unexpected 'debugger' statement.
that.addTrailers = function(trailers) {     for( var header in trailers ) {       proxy.putTrailer(header, trailers[header]); Undefined variable.
promise.resolve();       }       var continueCallback = params.continueCallback; Unnecessary semicolon.
function (wss, params, scope) {     return new Promise(function (resolve) { Unused variable.
this.time = 0;     }; } Robot.prototype.geom = { Unnecessary semicolon.
return state   } Expected a 'break' statement before 'default'.
if (0) logger.writeConsole = function writeConsole(level, module, args) {
break;             case 5:                 return'status';             default: Unreachable code.
const node = this.node;     const nodes = node.nodes; Unreachable code.
, searchLimit: 10  , language: /^ro_/.test(process.env.LC_NAME)? "ro" : "en" }; Duplicate key'searchLimit'.
function concat(chunks, total) {   if (chunks[0] instanceof Buffer) {    var result = new Buffer(total); Unexpected constant condition.
};     if ((model = this.get(property))) {       if (model.then) { Expected a conditional expression and instead saw an assignment.
getUnreadCount({subId}, done, fail) {     if (apiStatus.getUnreadCount!= 200) { Unused variable.
temp += "    _ +='   $TPLS = nodetpl._tpls[\"\'+ PATH +\'\"];\\n';\n";       temp += "    _ +='   $DATA = nodetpl._data[\"\'+ dguid +\'\"];\\n';\n";       temp += "    _ +='   try{\\n';\n"; Unnecessary escape character.
return L.CRS.EPSG3857;       case "EPSG:3395": Unreachable code.
return content;     }     sax.ondoctype = function(doctype) { Unnecessary semicolon.
},           (code, responseText) => {             this._showAutocomplete(JSON.parse(responseText), target, val) Unused variable.
}         entry.hw.hwModule.setZero();     };
if (!isNaN(x) &&!isNaN(y)) {           var geometry = new Point(x, y); Use the isNaN function to compare with NaN.
const TagRow = ({data}) => {   let tags   if (data.markdownRemark.fields.tagSlugs) { Unused variable.
}                  if (typeof source === 'object') {             return source.toString(); Invalid typeof comparison value.
onClick: function(event){     $this = $(this); Unexpected console statement.
}     return compute.just(x); Unexpected 'debugger' statement.
return a.priority - b.priority;         } Unnecessary semicolon.
link: '<a href="/" class="cc-link">{children}</a>',         close: '<span class="cc-close">&#x274c;</span>', Duplicate key 'link'.
this.contentDiv = $('<div class="igv-ideogram-content-div"></div>');         $(this.div).append(this.contentDiv[0]);
if (err) {       console.error('Error remove session' + err);       return workflow.emit('exception', err);     } Unreachable code.
(function () {   'use strict'; Unnecessary semicolon.
.replace(/</g, "&lt;")            .replace(/>/g, "&gt;")            .replace(/"/g, "&quot;")            .replace(/'/g, "&apos;");     } Unnecessary escape character.
import ShareEmail from './ShareEmail' import ShareImage from './ShareImage' Unused variable.
var result = $tw.utils.deepCopy(object),t;  for(t in extendedProperties) {   if(object[t]!== undefined) { Redeclaring variable.
require('./match')(Terms); require('./match/not')(Terms); require('./methods/tag')(Terms); require('./methods/loops')(Terms); 'Terms' is a class.
catch (e) {                 var err2 = new Error(e);                 err2.status = 400;                 next(err2);             } Redeclaring variable.
itemClick() {         FSBL.Clients.SearchClient.invokeItemAction(this.props.app, this.props.app.actions[0]); Unexpected console statement.
default: {       throw new Error(`Unknown instruction ${instruction.id}.`);     }   } Unreachable code.
controller.action_registerCommands = function( name ){     assert( util.isFunction( model[name] ) );
if (target.nodeName == 'BUTTON') {             preventDefault(event);         } Undefined variable.
logger.info(error);       } Don't use throw an error instead.
});      } else if ((m = stream.match(/^\{([0-9]+)(:.+?)?\}/, false))) { Expected a conditional expression and instead saw an assignment.
proto._calculateChildrenDependHeight = function(vModifiedWidget, vHint) {   throw new Error("Auto Height is not supported by QxFlowLayout"); };
function Event( type, props ) {         if (!(this instanceof Event) ) {             return new Event( type, props ); Unexpected negating the left operand of 'instanceof' operator.
successModal: function() {              global.modalView.modalData.title = 'Success!'; Unexpected 'debugger' statement.
if ($scope.account.notificationEmail.length > 0) {             return!tools.validEmail($scope.account.notificationEmail);         } Redundant double negation.
if (input.placeholder && 'placeholder' in document.createElement('input')) return input;   if (input.value === '' || input.value == input.getAttribute('placeholder')) { Redeclaring variable.
return false; } Unnecessary semicolon.
}, {     id: "_m2",     name: "Deimos" Duplicate key 'id'.
url: '',   regex: /^.*(?:(?:youtu\.be\/)|(?:youtube\.com)\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&?]*)/ };
},     function (group, opts) {
"License-Online-Resource" : "http:           },           "Part" : "Proj4JS", Duplicate key 'License'.
this.$el.html(ProgressTemplates(this.options.bars))     }, Unexpected 'debugger' statement.
openLoc: function(){       var basisjsTools = typeof basisjsToolsFileSync!= 'undefined'? basisjsToolsFileSync : null;       if (basisjsTools && typeof basisjsTools.openFile == 'function') Undefined variable.
}   clear () {     cache = {}   }
{     return players * 10 - 10; Unexpected console statement.
L.esri.basemapLayer = function(key, options){   return new L.esri.BasemapLayer(key, options); };
return width;     }     function getTextRect(text, textFont, textAlign, textBaseline) { Unnecessary semicolon.
return <Icon.Hot shrink={0.75} />                             case Badges.OLD: Unreachable code.
static extractExtension(url) {     url = Url.urlWithoutHash(url);     const indexOfQuestionMark = url.indexOf('?'); Undefined variable.
if (currentRow[3] === committedSketch){             var checkerOuter = currentRow[2]; Unexpected console statement.
} = actionHelpers; export default actionHelpers;
export function isExplictCommand(name) {   return name &&!/^-/.test(name) } Unnecessary escape character.
class Wrapper extends Component {    constructor(props){       super(props);       this.state = { Unused variable.
});     }else if(stage.status==3){      if(!stage.timeout){ Unexpected constant condition.
return;     } Unreachable code.
if (rules && rules.length) {        for (i = 0, length = rules.length; i < length; i++) {         ruleStyleSheet = rules[i].styleSheet; Redeclaring variable.
import $ from 'jquery' import cuid from 'cuid' Unused variable.
const collections = await this.getAllCollections();     for (const collection of collections) { Unexpected console statement.
function focus_search() {     $("#search").width("504px");
transclude(function (clone) {                         element.append(clone); Unexpected console statement.
compatibility: 'all',          none: 'none',       }, Duplicate key 'compatibility'.
alert('Thank you for contacting me! Message was sent succesfully, will get back to you soon!');     }, Undefined variable.
.join(true,'T');     test('parses single row description',function() { Unexpected console statement.
getFirstVisibleChild : function() {       return this.getVisibleChildren().getFirst() || null;     }, Undefined variable.
ol_TileRange.prototype.containsTileRange = function(tileRange) {   return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && Undefined variable.
exports.init = function() {  this.on("appinit1", function() {     }); Unexpected console statement.
if (Device.system.phone) {     return this.getAggregation(sAggregationName, null, true); Undefined variable.
describe('repeatEvery', function() {     var job = new Job();     it('sets the repeat interval', function() { Unnecessary semicolon.
);     if (this.hwModule.monitorTemplate) {         this.hwMonitor = new Entry.HWMonitor(this.hwModule); Unreachable code.
);       for (var i = 0; i < clientETags.length; i++) { Redeclaring variable.
if(err) {             sage.log(err) Unexpected console statement.
set: function (val) {       FileWriteStream = val     },     enumerable: true, 'WriteStream' is a function.
no.events._hid_key =  no.events._hid_key ;
} catch (err) {       return console.error(err)     }
this.allocateQuantity = _scope(quantity, this.available);   }   if (!avoidSlider) { Unnecessary semicolon.
if(VALID_HOOKS.indexOf(event) === -1) {     console.error('addHook: Unknown event type:'+ event +'- ignoring');     return; Unexpected 'debugger' statement.
{      var requestList = [];      var requestMap = {};      var selectedRequestId = null;      var lastModifiedRequestId = null; Undefined variable.
let i = isTail? this.items.length - 1 : 0;   while ((item = this.items[i])) {    idx = this._getColIdx(item); Expected a conditional expression and instead saw an assignment.
var output = [];     targetStylesheet = target_stylesheet; 'targetStylesheet' is assigned to itself.
const includes = transpileModules.map(module => (new RegExp(`${module}(?!.*node_modules)`)));   const excludes = [new RegExp(`node_modules(?!/(${transpileModules.join('|')})(?!.*node_modules))`];
this.dumpStatistics();         return;     } Don't use process.exit(); throw an error instead.
var self = this,                 $el = self.$element;             var $navTab = self._getNavTab(navTab), Unused variable.
resultGeneratedData = generatedData;             return invokeSandbox('saveSandboxGenerated', generatedData); Unexpected console statement.
if (this.showCursor) {                 index = (this.cursorIndex + samplesIndex) % samples;                 str = 'LODs:' + values[index][0];                 lods = values[index][1]; Redeclaring variable.
create.execute();  }    conn.addEventListener(air.SQLEvent.OPEN, initListener); Unreachable code.
console.log(test1_2({})) function test1_3(c) {var a = ((a = (c = c).a) === void 0? 3 : a), b = ((b = c.b) === void 0? a + 1 : b), c = ((c = c.c) === void 0? b + a + 1 : c);  { 'c' is assigned to itself.
}     } else {             dom = updateVnode(lastVnode, nextVnode, context, mountQueue); Unexpected constant condition.
controller.read(processData);  } Unnecessary semicolon.
process.exitCode = 1;   process.exit(); } throw an error instead.
type: "2fv"         },         uTextureSize2: {             type: "2fv" Duplicate key 'uTextureSize'.
avatar: {         type: string       },       date: { Undefined variable.
var array1 = message.toString().split(': ');             var array2 = array1[1].split('/'); Redeclaring variable.
$.Model.belongsTo = function(type, name){   var cap = $.String.capitalize(name), 'name' is assigned to itself.
if(_screen) {        APP.Detail[APP.currentStack].add(_screen); Unexpected console statement.
date = new Date(date.replace(/(\d)-(\d)/g, "$1/$2") );    else if (/^(\d?\d):(\d\d)(\s[\A\?P?]\M)?/.test(date)){      matches = date.match(/(\d?\d):(\d\d)(\s[\A\?P?]\M)?/);     date = new Date(); Unnecessary escape character.
describe('autoStyling', () => {     it('adds \'material\' modifiers and effects on Android', () => { Undefined variable.
env.property = env.property || ''     var match = env.property.match(/^([pP]?([0-9]+))?([/,][pP]?([0-9]+))?/)     if (match) { Unnecessary escape character.
} } GreaterThanExpression.sign = $lex.GreaterThan; Unnecessary semicolon.
}     res.status(200).json(data)   }
import DelayRender from '../DelayRender'; import { Consumer } from '../AxisContext'; Unused variable.
scheme.forEach(function(definition){           if (definition.calculate) { Redeclaring variable.
var posterImage;   posterImage = new PosterImage(this.mockPlayer); Undefined variable.
disabled: boolean('disabled', false),       length: number('length', 25) Duplicate key 'disabled'.
this.storage[fileName] = str;                     return Promise.as(str.length);                 }, Undefined variable.
const mapStateToProps = (x) => {   return { user,posts }; }; Unreachable code.
import referencesChecks from './references'; Unused variable.
if ($scope.RUBY_ENGINE['$==']("opal")) {       $scope.EMPTY_BLOCK_STATEMENT = true;     } Empty block statement.
if (_htOption.logoImage!== undefined) {             var logoScale = _htOption.logoScale; Unexpected constant condition.
Amount.prototype.to_human = function (opts) {   opts = opts || {};   if (!this.is_valid()) return ''; Redeclaring variable.
if (5 === 5)  console.log ("hello world"); Read-only global 'console' should not be modified.
iElement.on('click', function(){                 if (shortList) {                     scope.showList = true; Unexpected constant condition.
import { connect } from'react-redux'; import { login, setBalance, resetPrice } from '../actions/index.js';
diff =  (diff);     var originalLines = this.splitToLines(original); 'diff' is assigned to itself.
var self = this,             $el = $(e.target),             shapeType = $el.data('shape-type'),             map = App.getLeafletMap(), Unused variable.
{                 body.blocked.up = true; Unexpected console statement.
var get = Ember.get; var forEach = Ember.EnumerableUtils.forEach; Unused variable.
this.processing = false;       C.router.applicationController.view.get('dropzone').resetUpload();       this.sendFile();     };
prop.input.positions += "["+position.join(",")+"]";     e.preventDefault(); Unexpected console statement.
if ((err && err.status == '404') || value == null)           value = [];         req.original_images = value; Redeclaring variable.
var trigger = true;         requestTestRunner(References().simpleReference0, queue). Unexpected 'debugger' statement.
res.send(404, 'SensorID invalid!');     }   } else { Unnecessary semicolon.
console.log("CRITICAL ERROR: FAILED TO START");         } else { Don't use process.exit(); throw an error instead.
get ident() {     var captures; Expected getter 'ident' to always return a value.
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
var config = JSON.parse(config)   var intlData = config.intlData Redeclaring variable.
for (i = 0; i < n; i++) {         j = reverseBits(i, levels);         if (j > i) { Redeclaring variable.
it("should be constructable.", function() {         expect(new RequestQueue({}, immediate)); Unexpected 'debugger' statement.
redirect(model) {     let context = this.modelFor('organization'); Unreachable code.
async function testRun() {       Object.keys(runs).forEach(key => {         runAction(key, runs[key], counter1++, counter2++, result => { Move function declaration to function body root.
for (var i = 0; i < res.length; i++) {                     if (res[i].name.match(new RegExp(adapter.config.kreis + '\.xml$'))) {                         files.push(res[i].name); Unnecessary escape character.
import ProgressBar from 'progress'; import https from 'https'; Unused variable.
Object.keys(tests).forEach(function(test) {   var re = new RegExp('^' + test + '.*\\.json$');   files.forEach(function(f) { Unnecessary escape character.
curtop += obj.offsetTop;             } while (obj == obj.offsetParent);             return [curleft,curtop]; Expected a conditional expression and instead saw an assignment.
const storageManager = require('./../StorageManager'); class GetContainerProperties {     constructor() {     } Expected to call'super()'.
import React from "react-native"; import Modal from "./modal"; Unused variable.
const {resolve, dirname} = require('path') const {read, write} = require('flipfile') const JSONChain = require('json-chain') Unused variable.
notify: function() {   } }); Unexpected 'debugger' statement.
const Notification = ({   active = true, Unused variable.
logFileChanges: false,   notify: false  });
"rotate(" + this.angleDeg + ")";   } Unreachable code.
exports.Controller_.prototype.preparePopover_ = function() { Undefined variable.
$(selector + " [data-index='" + index + "'].wv-palettes-max")                .html(max);             var title = legend.title || "&nbsp;"; Undefined variable.
list: []
, headers: {           Authorization: 'basic '+btoa(owncloud.username+':'+owncloud.password)         };
" " + xAxisRotation + " " + largeArcFlag +          " " + sweepFlag + " " + pointsAbs[2] + " " +         pointsAbs[3] + " ");   }, Undefined variable.
setTimeout(function() {       editor.windowManager.confirm(message, function(state) { Undefined variable.
_.extend(Assemble.prototype, Task.prototype);
this._emberDebugWorker.destroy();     } Unnecessary semicolon.
import { connect } from'react-redux' import ViewContainer from './ViewContainer.jsx' Unused variable.
return newState;         case (TablesCntlr.TABLE_NEW)  : {             const {tbl_id, tableMeta, request} = action.payload;             if (has(state, tbl_id)) { Unused variable.
} else if (edge instanceof CircularEdge) {     if (Util.DEBUG) {       UtilityCollision.edgeEdgeCollisionTests++; Undefined variable.
var solution = r.solution;      for(var i=0; i<cell.length; ++i) { Unexpected console statement.
if (address!== undefined) {             let key = /^\s+(\w*):\s+\|/gm.exec(stream.string);             key = key? key[1] : ''; Unnecessary escape character.
var title, _widget, isWidget, _element, isWidget;         for (var widgetName in targets) { if (!targets.hasOwnProperty(widgetName)) continue; Unused variable.
else             DOMDebuggerAgent.removeDOMBreakpoint(node.id, type);         this._saveBreakpoints();
} function endDraggingVertex(state) {   var catalog = state.catalog; Unused variable.
strategy = '+';         break;       case'minus':         strategy = '-'; Expected a 'break' statement before 'case'.
},     componentDidUpdate: function() {         this.maybeUnprocess(); Unused variable.
if (data) {           var username = data.layers[1].options.user_name; Unexpected 'debugger' statement.
steal('can/util/string',function() { Unused variable.
export const flagRejectEvent = (event, message, mode, user) => {       let _mode = mode == 'flag'? 'flagged' :'rejected'; Unexpected 'debugger' statement.
_getCacheParam: function (method) {     var detectedBrowser = browserDetect();     var name = detectedBrowser && detectedBrowser.name && detectedBrowser.name.toUpperCase().trim(); Unreachable code.
} } function insertContent(parent,child,prepend,sibling){ Unnecessary semicolon.
} else if ((data.event!== undefined) && (data.event == "patternLab.annotationPanel")) {        var i, els, item; Redeclaring variable.
var manager = this.managers[peer];       if (!manager) {         manager = new ConnectionManager(this.id, peer, this._socket, options); Redundant double negation.
}     let request = this._auditingEnabled?       this._builder.update().item(item).atVersion(expectedVersion).buildRequest() : Redundant double negation.
this.menuText.anchor.setTo(0.5,0.5);         this.startkey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);     },
this.keypressSound.load();                 this.keypressSound.play().catch(err => console.log(err));             } Unnecessary semicolon.
var singleAttrIdentifier = /([^\s"'<>/=]+)/,     singleAttrAssign = /=/, Unnecessary escape character.
this.forceLayout = layoutEngine;                 this.forceLayout.force.on("tick", function (d) { Redeclaring variable.
const cache =        await render(req, res, { title: name, description });       return; Unused variable.
if (typeof node.name ==='string') return node.name   if (t.isJSXMemberExpression(node)) {     return `${getTag(node.object)}.${node.property.name}`   } Undefined variable.
return qx.renderer.border.BorderCache._data[propValue];   } Unnecessary semicolon.
embedModulesIn: function(doc, relativeModuleURLs, progressBar, thenDo) {         var self = this, Unexpected 'debugger' statement.
if (solved === true) {     console.log(suspect + " did it in the " + room + " with the " + weapon + "!"); Expected a conditional expression and instead saw an assignment.
path: "/tutorials/blaze/creating-an-app",     contentTemplate: 'blaze-step01'   }, Undefined variable.
template: Handlebars.compile(user_profileTemplate),         render : function() { Duplicate key 'usertemplate'.
});         it("async", function (done) {             Augur.hashReport(ballot, salt, function (r) {                 test(r); done(); Undefined variable.
if(response.ok){           res.json(response.body); Unexpected console statement.
Ember.Select = Ember.View.extend({   tagName:'select',
export class KeyboardInput extends mixin( null, EmitterMixin ) {     constructor( { element = document.body } ) {         super( );
} else {     args = minimist(argv);     command = this._findIndexCommand(); Redeclaring variable.
app.controller('loginController', function($scope, $http, $state, webchatService) {      $scope.formMode = "login";
];     } else if ((m = s_rgbaRE.exec(s))) {       c = [ Expected a conditional expression and instead saw an assignment.
var reshape = this._impeach() || this._exile() || this._expand()             if (reshape) {                 this.ponged = false Unexpected constant condition.
module.exports.isContainerRunning = function (pod, container) {   return module.exports.containerState(pod, container) === 'running'; };
ChainDB.prototype._pruneCoinQueue = function _pruneQueue(block, batch, callback) {   var iter = this.db.iterator({     gte: 'u/q/' + pad32(block.height), Unreachable code.
it('isSubscribable should return false for null', function () {         expect(isSubscribable(null)).toEqual(false);     }); Undefined variable.
onError : function(responseData, uuid) {     app.u.throwMessage(responseData);     } Undefined variable.
return number * fabric.DPI / 2.54;         case 'in': Unreachable code.
finalMeasurements.splice(match, 1);     }   } Unnecessary semicolon.
'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());         } Unreachable code.
else {     this.instance = new core.CanvasRenderer(this.props.width, this.props.height, settings);   } }; Undefined variable.
var Web3 = require("web3"); Redeclaring variable.
function isArray (ar) {     return Object.prototype.toString.call(ar) == '[object Array]';   } Unnecessary semicolon.
if (expected!== actual) {     Results.insert({n: next_result++, type: "assert", Unexpected 'debugger' statement.
var petApi = sample.pet;     req = petApi.findPetsByStatus({status: undefined}, {responseContentType: 'application/json'}); Unused variable.
input.userInterface = new function(convert) { Unused variable.
if (1===1) {             return Promise.resolve();         }             return this.props.vm.saveProjectSb3() Unexpected constant condition.
case 4:       day = "Thursday";       break;     case 5: Redeclaring variable.
value = this.matchString_(text, pos, DateTimeSymbols.QUARTERS);     if (value < 0) { Undefined variable.
this._childManager.subscribe(publicationKey, this.swapChild.bind(this));             node = this._dispatch.getNode();             node.removeAllChildren(); Redeclaring variable.
if (wc.hostWebContents) {       const parentWindow = BrowserWindow.fromWebContents(wc.hostWebContents) Redundant double negation.
trustedDomains: window.location.host? [ window.location.host ] : [],     cacheBust: /MSIE/.test(navigator.userAgent) || /Trident\/[\d](?=[^\?]+).*rv:([0-9.].)/.test(navigator.userAgent)? true : false,     forceHandCursor: false, Undefined variable.
this.app.removeActivities([msg.activity]);       break;     default:       logger.error('receive error signal: %j', msg); Expected a 'break' statement before 'default'.
}     } Undefined variable.
}         commandList = commmandList.next();      } Undefined variable.
function _helperRemapAsyncToGenerator() {   var data = _interopRequireDefault(require("@babel/helper-remap-async-to-generator"));   _helperRemapAsyncToGenerator = function _helperRemapAsyncToGenerator() {     return data; '_helperRemapAsyncToGenerator' is a function.
for (x = 0; x < iRowspan - 1; x++) {       if (oLabel) { Redeclaring variable.
return injectZeros(data, this.data, orderBucketsBySum);     }
}    break   case "say":    if (message.member.roles.some(r => ["Staff", "Développeur"].includes(r.name))) { Expected a 'break' statement before 'case'.
return static_url('images/icon-calc.svg');             case DG.TextView: Unreachable code.
enyo.dispatch(e);   (function (enyo) {     enyo.pool.releaseObject(e);   })(enyo);  }, Undefined variable.
return header; } function decodeChannelHeader(header_bytes) { Unnecessary semicolon.
console.log(e);         var err = new Error('Uglification failed.');         if (e.message) { Redeclaring variable.
PlaceholderComponent(quail, test, Case, options); }; module.exports = ImgAltNotPlaceHolder; Unnecessary semicolon.
return arcgisGeometryType; } export function warn () { Unnecessary semicolon.
return p.isPlatform('ios', 'iphone|ipad|ipod');   },   versionParser(p) { Unreachable code.
var p = this.props;      const advancedParamsArrow =!!p.showAdvancedMarketParams? '▲' : '▼' Unexpected console statement.
case 9:return 10         case 10:return 11 Unreachable code.
app.get('/api/inventory/storerooms/:id', function(req, res) {         models.Storeroom.findOne({_id: req.params.id}, function(err, storeroom) {             if (err) return next(err);             res.json(200, storeroom); Undefined variable.
themeEngine.getTemplate(req, res, function(err, template) { Unreachable code.
.replace( /\s+-\S+/g, "" )                .replace( /([(\[\{\\\^\$\|\)\?\*\.\+])/g, "\\$1" )                 .trim().replace(/\s+/g,'|'), Unnecessary escape character.
var clickEvent = 'click';     if (!('classList' in userbar)) {         return;     } Unexpected negating the left operand of 'in' operator.
var upper = this.model.interpolate(bounds[1]/n).toPrecision(2);         bounds[0] && this.model.set('lower', lower); Unexpected console statement.
this.addEndSpacers();   } Unexpected 'debugger' statement.
const {HashNode} = nodes; const {SHORTNODE, FULLNODE} = nodes.types; Unused variable.
$("#wait1").css("display", "none");      showStatsData(response);    }   }); Duplicate key 'dataType'.
set,     delay, Undefined variable.
require('./bootstrap'); import Components from './Components/index'; new Vue({ Unused variable.
}     return false; Empty block statement.
function(err, componentsInfo){       if(err){ return callback(err); }       server = http.createServer(self.app); Redundant double negation.
var escapeRegExp = function (str) {     return str.replace(/[[\]{}()*+?^$|]/g, "\\$&"); }; Unnecessary escape character.
import React from'react'; import ReactDOM from'react-dom'; Unused variable.
options = options || {};   options.create = options.create || {};   'options.create' is assigned to itself.
it('MathParameter user resources getter', function () {         var mathParameter = new MyScript.MathParameter();         expect(mathParameter.getUserResources()).to.be.empty; Undefined variable.
function view_find_localization(content, index) {     index = content.indexOf('@(', index);     if (index === -1) Redeclaring variable.
const patternIsString = typeof findPattern ==='string'     if (!(findPattern instanceof RegExp) &&!patternIsString) {       return false Unexpected negating the left operand of 'instanceof' operator.
logger.info('no changes to report');     }     notifications.wikiChanges(changes, function (err, stringifiedOptions) { Don't use process.exit(); throw an error instead.
} else {         utils.removeClass(renderer.grid[intersection.y][intersection.x], "dead");       } Undefined variable.
reason = evt.reason;     } Empty block statement.
return result.replace(opts.replacement+"$",'');  } Unnecessary semicolon.
const error = super.parseError(str);     if(!error) { return error; }     if (error.name === 'JavascriptError') { Unnecessary semicolon.
_buttonTxt = "Finish Quiz";             }             var _button = '<button id="nextQuestion" type="submit" class="btn btn-default">' + _buttonTxt + '</button>'; Unnecessary semicolon.
"self": { "href": "/" },   },   "_links": {     "orders": { Duplicate key '_links'.
cur = cur[field]           }           })         }) Empty block statement.
console.error('Invalid option:'+ v);                         throw new TypeError('Invalid option:'+ v);                     } Unreachable code.
case 'rotate':       cosValue = Math.cos(value)       sinValue = Math.sin(value) Unexpected lexical declaration in case block.
}         minWidth = Math.max(minWidth, this.getColumnMinWidth(col));         maxWidth = this.getColumnMaxWidth(col);         if (this.getColumnWidth(col)!== null) { Redeclaring variable.
if(isClient) {       var a = replicate(function (err) {         rpc._emit('fallback:replicate') Unused variable.
handleMessage: function(msg){     handlers = messageListeners[msg['command']]; Unexpected console statement.
throw new Error(parser, "Unknown state: " + parser.state)     } Unreachable code.
this.set('message.visible', false);       if (removeAfter) {         Ember.run.later(this, remove, removeAfter); Expected a conditional expression and instead saw an assignment.
return this;   } }; Unnecessary semicolon.
for (var opts in service.options) {       if (!service.options.hasOwnProperty(opts)) continue;       _req[opts](service.options[opts]); Redeclaring variable.
var actual = new Date(1449662400000).toString();             var re = /^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d\d(?: |$)/;             expect(re.test(actual)).toBe(true, actual); Unnecessary escape character.
return Class.schema.emit(event);     if (!event.stopped) {       return astro.eventManager.emit(event); Unreachable code.
function UnnecessaryEscapeCharacter () {     return '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'    , '');   } Unnecessary escape character.
if (!args.is_final &&!!n.witness_script) {       pairs.push({ Redundant double negation.
if (Ext.Msg) {             Ext.Msg.alert(trlVps('Error'), trlVps("An error has occured")); Unexpected 'debugger' statement.
console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );    return object[ value ];   } Undefined variable.
return error? (         <section> Unexpected constant condition.
if (hours.id == 9) {                             matches = /([0-9]+\:[0-9]{2})\s*([AP]M).*([0-9]+\:[0-9]{2})\s*([AP]M)/.exec(hours.hours);                             if (matches) { Unnecessary escape character.
case 6:return 24         case 7:return 22 Unreachable code.
sequelize: Joi.object().type(Sequelize).required(),     sync: Joi.boolean().default(false), Duplicate key'sequelize'.
var props = inst._currentElement.props;     if (__DEV__ && props!== null) {       warnIfValueIsNull(props);     } Undefined variable.
jisp.emit("failure", err, task);       if (jisp.listeners("failure").length) undefined;       message = err.stack || err.toString(); Empty block statement.
toString() {     let str = this.name || this.constructor.name || this.constructor.prototype.name     if (this.message) str += ':'+ this.message     if (this.cause) str += '; caused by'+ this.cause.toString()'str' is constant.
const targets = [mainTarget];     let rules = [...initialRules];     while (targets.length) {       const currentTarget = targets[targets.length - 1]; Unexpected constant condition.
if (!! options &&!! options.cycleDetector) {         assert(_.isObject(options.cycleDetector)); Redundant double negation.
setTimeout(function() {                     set_and_verify_json_sparse(this.test, suffix, [{ Unexpected 'debugger' statement.
Array.prototype.push.call(newArgs, callbacks);          if(document.body){ Unexpected console statement.
horizon(httpServer, {     auto_create_collection: true, Unused variable.
(function (w, $) {     if (!$) return; Unnecessary semicolon.
}    }    var referenceObj = framesArray.shift(); Unnecessary semicolon.
rep('(load-file "' + process.argv[2] + '")');      return;  } Don't use process.exit(); throw an error instead.
if(data.user.dataLists == ["1"]){                     data.user.dataLists = []; Expected a conditional expression and instead saw an assignment.
await test.execute(argv);    break;   case "start": Don't use process.exit(); throw an error instead.
beforeEach(() => {       testProps.columns[sortableColIdx].sortable = true; Unexpected 'debugger' statement.
var result;   var start = this.pos; Unused variable.
emitStack = [],   emitStackLevel = 0; Unnecessary semicolon.
var _ = require('underscore'); var GeoJSON = require('geojson'); Unnecessary semicolon.
return _nextReplyId++; } Unnecessary semicolon.
var that = this;  if(!trigger.groups[toId]) {   trigger.groups[toId] = {};  }
var dockerVersion = spawnSync('docker', ['--version'], {     env: process.env, Undefined variable.
}     mesh = new Mesh(geometry, material);     mesh.castShadow = true; Undefined variable.
object = object || {};     if(baseUrl) object = appendLinks.call(_this, object);     var str = production?       JSON.stringify(object, null, null) : Redundant double negation.
var output = eval(reassembleTest(chaiTestFromJSON, data));         } Unexpected 'debugger' statement.
githubs = JSON.parse(githubs);       } catch (err) {         logger.error(err);       } Empty block statement.
export function success(message, title = "Success") {   if (lastMsg!== message) {     toast.success(message, title); Empty block statement.
this.children = node.children;       for (var i = this.childNodes.length; i--;) {         this.childNodes[i].parentNode = this; Redeclaring variable.
if (op = $(/^[<=>]/)) {                         if ((b = $(this.addition))) {                             return new(tree.Condition)(op, a, b, index); Expected a conditional expression and instead saw an assignment.
const t = document.querySelector('#pageTemplate');
var response = cache.get(url);       var promise;
}                      const getMembers = members.filter(isGetMember); Undefined variable.
(function (xml_digester) { Unnecessary semicolon.
import React, { Component } from'react' import { Grommet } from 'grommet' import { injectGlobal } from'styled-components' Unused variable.
return <CmsContainerItem configuration={configuration} />;       default: Unreachable code.
this.props.onUpdate({ valid: isFormValid, partialUpdate: changes })     } Empty block statement.
function generate( params, precision ){   var CmdGenerator = function(params){ Unused variable.
EG.Model.reopen({
}; }]); linuxDash.directive('cpuIntensiveProcesses',['server', function() {     return { Undefined variable.
while ((prop_value = cssStrings[i++])) {     prop_value = prop_value.split(':'); Expected a conditional expression and instead saw an assignment.
var fieldName = 'f_' + field.id,             input = inputData[fieldName] || ""; Redeclaring variable.
})(); (function() {     M.inherit = function(ChildClass, ParentClass) { Unnecessary semicolon.
break;         case 'formData': return;
var resourceRef = sync.dataRef? sync.dataRef.child('resource') : null;   if(sync.isMine &&!this.refLock && resourceRef)    resourceRef.set(this.data.res); Unexpected console statement.
setSubs: function (name, value, options) {       if (typeof name!== "string" || name === "") {         return ""; Invalid typeof comparison value.
rollup_commonjs({      extensions: [ '.js', '.es6', '.es', '.jsx', '.ts', '.tsx' ]     }), Unexpected comma in middle of array.
import * as serviceWorker from "./serviceWorker";
return config;   }   if (config[command] == null) {     abort(ERRORS.NO_PROPERTY(command));   } Invalid typeof comparison value.
summary.characterData = projection.getCharacterDataChanged();     }     return summary; Unnecessary semicolon.
if (window ==='successWindow') {    this.$.successWindow.setAttribute('style', 'display:block;'); Unexpected 'debugger' statement.
submit : _element("<input>", { "type" : "reset" }),
} else {       var fbLoginUiCb = function(func) {         UI.del('fblogin');         if (!func) {           return; Move function declaration to function body root.
return /iPad|iPhone|iPod/.test(navigator.platform); } Unnecessary semicolon.
if (level == 0) {                 xml += currentIndent + '</' + n + '>';               } Undefined variable.
import { removeFromArray } from '../../utils/array'; import { defineProperty } from '../../utils/object';
marker.update(previous && previous.element);   if (previous && window.initialData.scrollPreviewWithEditorSelection) {    let scrollTo = 0; Undefined variable.
const temp = input.parentElement;     input = temp.firstElementChild; 'input.outerHTML' is assigned to itself.
for(i = children.length-1; i >= 0; i--){     children[i]._testInputs(ctx, inputs); Redeclaring variable.
function addResponsiveClass(str) {   return str.replace(/<img/g, '<img class="img-responsive"'); } Unnecessary escape character.
performSearch: ({ updateResults, fuse }) => (_, query) => {       let results Unexpected console statement.
ipAddress: function(ipAddress) {     var match = ipAddress.match(/\)\)\)([0-9.]+)$/);     if (!match) return null; Unnecessary escape character.
if(err) { return handleError(err); }       roles = getArguments(arguments);       populateGlobalRoles(roles); Redeclaring variable.
}       if (typeof o === 'object') {         var s = JSON.stringify(o); Invalid typeof comparison value.
try {   this.db = Ti.Database.open(this.name);  } catch (ex) {
this._props.name = value;    this._emit('setName', value);    return true; Undefined variable.
if (selection) {             onSelectText(selection);           } else {
}     var directRenderTextLayerFn = textRenderer.directRenderTextLayerFn(morph);     var nMeasured = 0;     morphWidth = morphWidth - paddingLeft - paddingRight; Redeclaring variable.
this.PropertyPathWalker.Update(source);          } else if (this.Binding.RelativeSource && this.Binding.RelativeSource.Mode === RelativeSourceMode.Self) {              this.PropertyPathWalker.Update(this.Target); Undefined variable.
} const publish = async (post) => {     console.log(post)   } Unused variable.
django.jQuery(function($) {  django.cascade.TextLinkPlugin = ring.create(eval(django.cascade.ring_plugin_bases.TextLinkPlugin), {}); Unexpected 'debugger' statement.
case's':                 return s + "es";             case 'h': Unreachable code.
if (oldState) {                 const upgradedState = ['_g']; Unexpected console statement.
d3plus.visualization.line.shapes       = [ "line" ];
export function saveUserOnRegistration(auth, identity) {  _controllers.controller.storage.users.get(identity.user_id, function (err, user) {   var isnew = user? false : true; Unreachable code.
"d9/dec/a00090.html#a9c0d57cd72c091f63895944959e98330":[10,0,2,1,2,0], "da/d01/a00153.html":[10,0,2,0], "da/d24/a00068.html":[10,0,3,0,0], Duplicate key 'da/d01/a00153.html'.
this.chunk = null;   var length = this.offset - start;   if (headerState[this.state]) { Redeclaring variable.
var currentNode = new Potree.PointCloudOctreeGeometryNode(name, pco, boundingBox);     currentNode.level = level;
}); }; module.exports = LanguageDirectionPunctuation; Unnecessary semicolon.
if (Ember.FEATURES.isEnabled('propertyBraceExpansion')) {         var itemPropertyKeyPattern = match[2],             addItemPropertyKey = function (itemPropertyKey) {               cp.itemPropertyKey(dependentArrayKey, itemPropertyKey); Undefined variable.
}else{             log_start(options.themeUrl);             diffLocalAssets(conf, state).then(function() { Unexpected console statement.
{token : "string", regex : "'",     next  : "start"},             {defaultToken : "string"}         ], Unnecessary escape character.
case 'divider':               component = <Divider key={`menu-${index}`} />               break Unreachable code.
return React.createElement(props.inline?'span' : 'div', { className: props.className }, items); } Group.propTypes = { Unnecessary semicolon.
hex6: function() {     var captures; Expected getter 'hex6' to always return a value.
}             }             for ( i = 0, l = this.types.length; i < l; i++ ) {                 this.order[ this.types[ i ] ] = storages; Redeclaring variable.
import { startCase } from "lodash"; import FeatureProperties from "./FeatureProperties"; Unused variable.
}     const projectName = projectName? projectName.textContent.trim() : '';     const link = togglbutton.createTimerLink({       className: 'phabricator', Redundant double negation.
return $.ajax({             url: base_url() + url,             type: "PUT", Undefined variable.
it('should have the property next (base name: "next")', () => {
var r2 = obj.rectangles[1];   while((from = todo.pop())) {    vertices[from].neighList.forEach(function(obj) { Expected a conditional expression and instead saw an assignment.
callback(null, msg);   }   this.slave.once('disconnect', onclose); Unnecessary semicolon.
});  }  function fullResizeVideo() { Move function declaration to program root.
exports.prototype.setHeight = function(height) {   this.element_.height(height); Undefined variable.
ev = both? eventName : 'all';             if (list) {                 for (i = 0, l = list.length; i < l; i++) { Expected a conditional expression and instead saw an assignment.
comment = getDoc(node);       if (comment) { Redeclaring variable.
var fs = require('fs') var through = require('through2') Unused variable.
});             return normalizedHighlights;         }, Unreachable code.
clipboardy.writeSync(emoji);   process.exit();  } Don't use process.exit(); throw an error instead.
params.FilterDesc = args.optarg;                                         break;                                                  case "l":                 params.FilterLib  = args.optarg; Expected a 'break' statement before 'case'.
]);     _templateObject_bd41acb0dea811e8bb74b182b64af7a1 = function() {       return data;
import Mosaic from '../../src/index'; import { ARRAY_DELETE_PLACEHOLDER } from '../../src/util'; Unused variable.
return this.i18n.Normal;                 case 2: Unreachable code.
exports.run = function (grunt) {     var replaceContent = function (content, sha1) {         content = content.replace('%extVersion%', grunt.config('pkg.extVersion')); Unreachable code.
require(['gv', 'config','models/Books','models/State', 'layouts/Layout', 'routers/Router'],      function(gv, config, Books) {
.then((response) => {         if (response.status === 401) { Unexpected 'debugger' statement.
import theme from 'nivoTheme' import { totalCount, getColor } from '../../../constants' import ChartLabel from 'core/components/ChartLabel' Unused variable.
if (textfield) {       goog.dom.classlist.add(textfield);     } Undefined variable.
var testMulAsync = async(function *(declaration) {             assert(lib._funcs);             assert(lib._funcs.mul); Unreachable code.
TransportMetricsPlugin.prototype.unbind = function () {     $A.uninstallOverride("ClientService.send", this.sendOverride); Unused variable.
if ( typeof THREE.OrbitControls === 'function' ) this.controls = new THREE.OrbitControls( this.camera, this.container );
this.element.appendChild(img);     } Unnecessary semicolon.
}))             );         }         componentDidMount() { Unnecessary semicolon.
it('Should filter out bad values', () => {       const nodes = findById([testID, 'NotFound', null, '', 99, 'Duplicate', ':bad-id']);       expect(nodes) Unexpected comma in middle of array.
it('2. Basic Usage: collection observable with ko.computed', () => {     kb.statistics = new kb.Statistics(); Unexpected 'debugger' statement.
.then(items => items.reverse())        .then(items => items.filter(item =>!document.getElementById(item.guid))))        .then(items => items.map(item => applyTemplate(itemTemplate.cloneNode(true), item))) Redundant double negation.
item.addParents = function (person) {   if (person.inFamily) { Unexpected 'debugger' statement.
for (var metric in this.metrics) {       if (this.metrics.hasOwnProperty(metric)) {         var name = this.metrics[metric].target + '-' + this.metrics[metric].source Empty block statement.
}     this.zoom_container.go_to(new_zoom, new_pos); Unexpected 'debugger' statement.
if (addon.plan.name.match(/hobby/)!= null) {       cli.exit(1,'redis:maintenance is not available for hobby-dev instances')     } Don't use process.exit(); throw an error instead.
Object.defineProperty(baseObj, property, {get: getter, configurable: true});   }   var setter = baseObjProperty && baseObjProperty.set; Unnecessary semicolon.
function makeImage(src) {             return new Promise(function(resolve) { Unexpected 'debugger' statement.
function Consumer() {}     Consumer.prototype.consume = function (ip) { Unnecessary semicolon.
angular.module('axisJSApp')  .service('pdfOutput', function pdfOutput(GenericOutput, chartProvider) {     var pdf = angular.copy(GenericOutput); Unused variable.
}             } catch (err) {                 logger.error(err.message);             } Empty block statement.
if($scoreWrapperEle = $('.bubble-wrapper')[0])   document.body.appendChild($scoreWrapperEle)
: str.replace(/\\/g, '/') } if (process.platform === 'win32') { Unnecessary semicolon.
case 'boolean' :             return json;       default: Unreachable code.
var wrap = require('./lib/wrap'); var coffee = require('coffee-script'); Unused variable.
done();   } Unnecessary semicolon.
const i = type ==='ssa'? 2 : 1             for (; i < 9; i++) {               subtitle[ASS_KEYS[i]] = values[i] 'i' is constant.
log.info('CornerstoneToolsMeasurementModified');   const measurement = collection.find( Unexpected 'debugger' statement.
if (!item.next) {         } else { Unexpected 'debugger' statement.
} ); export { Skeleton } Unnecessary semicolon.
if (this.get('model')) {     var models = [this.get('model')];     for (var i = 0; i < types.length; i ++) { Undefined variable.
pathname_prefix: "",       action_name_black_list: ["super", "init", /^\_[^_]+/],      app_tag_on: true, Unnecessary escape character.
],       "output": "Boolean",       "category": Blockly.Categories.data, Undefined variable.
require('./grouped_builds_view.css') const PipeLineBuild =  React.createClass({ Unused variable.
let resp = QRespondent.findOne( {_id:Session.get("rid"+instance.qnrid())} );         $(".qq-val").each(function(idx, elem) { Unexpected console statement.
var parts = /^(.+\/)*(([^/]+)\.[^/.]*|[^/.]+)$/.exec(process.env.GEOJS_TEST_CASE);     if (parts) { Unnecessary escape character.
if (!af.os.ios ||!this.requiresNativeTap) this.allowDocumentScroll_ = false;
process.exit(1);     } Unreachable code.
step.args.find('A').value = 4;   data = step.pack();   expect(data).to.deep.equal({id: step.id, key: 'foo', cells: {A: 4, B: 2, C: 3}}); Redeclaring variable.
return originalValue;       case 'object': Unreachable code.
i = 0xFF;         while (i < this.raw.byteLength) {             var n = this.readRegister(this.DivIrqReg); Unexpected constant condition.
if (callback) {     var next = function(er, ret) {       if (ret) Move function declaration to function body root.
computed,   get, Unused variable.
page.onConsoleMessage = function(msg) {
const mqtt = require('mqtt') opt.broker = opt.broker opt.subbroker = opt.subbroker || opt.broker 'opt.broker' is assigned to itself.
const Plugin = require('../plugin'); class Router extends Plugin { Unused variable.
return cb(); } Unnecessary semicolon.
if(err) { return handleError(res, err); }       return res.json(attendance);     }); Unnecessary semicolon.
}    }    console.log("total rooms: ",this.map.roomsToExit.length); Unnecessary semicolon.
};     return DigitalOcean; Unnecessary semicolon.
return false;       case 'Object': Unreachable code.
console.log('got session');                             if (!session) return;
const targetName = target.name; Unexpected 'debugger' statement.
if (fs.existsSync(unixSocketFile)) {     return requestEmulator(unixSocketFile, options); Unexpected console statement.
}     return new CommandStack(); }); Unnecessary semicolon.
forEach(appsList, function (app, key) {     appListData.push({ Unexpected 'debugger' statement.
else return logs(args[0], cb);     }     case "stop":  { Unnecessary semicolon.
};     MainPage = __decorate([         core_1.Component({ 'MainPage' is a function.
setDevicesDiscoveryConfig(discoverUsbDevices, portForwardingEnabled, portForwardingConfig) {     this.config.portForwardingEnabled = portForwardingEnabled;     this.config.portForwardingConfig = portForwardingConfig;   } Unused variable.
return function defFunc(ajv) {     if (ajv.RULES.keywords[keyword])       return console.warn('Keyword', keyword, 'is already defined');     defFunc.definition = { Unexpected console statement.
const instance = this;  window.Apps.getWsListener().unregisterListener(AppEvents.APP_STATUS_CHANGE, instance.onStatusChanged);  window.Apps.getWsListener().unregisterListener(AppEvents.APP_SETTING_UPDATED, instance.onSettingUpdated); };
};       } else if (!paymentCurData) {         const timeoutHours = orderState === 'DISPUTED'? Empty block statement.
thesauris.save(data)      .then(() => {         return thesauris.get(); Unused variable.
startEndMarkers.push(marker);         } Unnecessary semicolon.
function doAddressSearch() {   console.log('Address search:'+ address);   var address = $("search_input").value;
goog.require('Zlib.Deflate'); goog.scope(function() { Undefined variable.
output: {     filename: 'bundle.min.js'   }, Duplicate key 'filename'.
this.pixelType = WEBGL_PIXEL_TYPE.FLOAT;         this.magFilter = WEBGL_TEXTURE_FILTER.NEAREST;         this.minFilter = WEBGL_TEXTURE_FILTER.NEAREST;         this.generateMipmaps = false; Undefined variable.
} else {                         return "'" + value.replace(/'/g, "''") + "'";                     }                 case 'number': Unreachable code.
} function last(arr) { Unnecessary semicolon.
}); ;(function(window, document, $){  "use strict"; Unnecessary semicolon.
);                 height = (model.getHeight() - prefs.rect.height);                 var middleRect = d3Ref.draw.centeredBasicRect( new DiagramCore.Models.Point({'x': center.x(), 'y':  center.y()+100}), 150, height, 0, 0); Redeclaring variable.
if (!firstLang) {             return gettext('[unknown]');         } Unnecessary semicolon.
this.name = 'MongooseError'; } Unnecessary semicolon.
return 'web'   }   static get scheme () {     return'session'   } Expected to return a value in static getter'scheme'.
function use (names, fn) {   if (type(names) ==='string') { Unexpected 'debugger' statement.
for (index = 0xF0; index <= 0xF7; index++) {   var count++;   var hex = decimalToHexString(index);   try { Undefined variable.
Compiler.prototype.visitRulesetList = Compiler.prototype.visitRulesetList 'Compiler.prototype.visitRulesetList' is assigned to itself.
if(isStream(items)) {             iterateOn(iterations, items, scope, section.alias, Unexpected 'debugger' statement.
return new oid(); } Unnecessary semicolon.
if(this.addproperty_checkboxes) {       for(i in this.addproperty_checkboxes) {         if(!this.addproperty_checkboxes.hasOwnProperty(i)) continue; Redeclaring variable.
return 'Q';     case 'chancesleet' : Unreachable code.
import { LatLngIdTravelMode, LatLngId } from './../types';
return!!value;             case 'habool': {                 const haBoolean =                     this.nodeConfig.server.nodeConfig.ha_boolean === undefined Unexpected lexical declaration in case block.
html += "<h3>Functions</h3>";    for (i=0; i<objs.length; i++) {     o=objs[i];     if (o.group) { Expected a conditional expression and instead saw an assignment.
getSiteType: function() {         if($('#jplayer').length && /^chat\./.test(location.hostname)) {             return 'chat';
darkMode: window.Canvas.user.darkMode,     locale: window.Canvas.user.locale,     admin: window.Canvas.user.admin }; Undefined variable.
function distribution(obj){         var o = normalizedObj(obj)         return function(){ Undefined variable.
return false; Unreachable code.
case'read':                 $log.debug('read message list'); Unexpected console statement.
if (!result.valid || polymorphicValidationErrors.length > 0) {                 error = new VError('Error validating request body');                 error.name = 'ValidationError'; Redeclaring variable.
if (data) {       delete data._id; 'data.id' is assigned to itself.
.reduce((sortedLabels, labelName) => {       sortedLabels[labelName] = obj[labelName];       return sortedLabels;
return rule.test(val);    case '[object Array]': Unreachable code.
throw new Error('Logger.cli() was removed in winston@3.0.0');   console.warn('Use a custom winston.format() instead.'); Unreachable code.
} catch (e) {     const newEvent = {...event }     let pathname = new URL(event.request.url).pathname Unused variable.
} else if (tag.type === "return" || tag.type === "returns") { Unexpected 'debugger' statement.
}             viewGL = coordSys.viewGL; Redeclaring variable.
function menuClose() {    if (web.exists(document.querySelector('.mnp.mnp-display'))) {     web.classRemove(document.querySelector('.mnp.mnp-display'),'mnp-display'); Move function declaration to function body root.
if (unrenderers[i]($content, message)) break;   }  } Unnecessary semicolon.
checkQuit();   });  } Unnecessary semicolon.
return field     })   } catch (err) {     this.emit('log', {       source: 'types',       level: 'error', Unreachable code.
render: function () {     var accountLinks; Unexpected console statement.
}             if (show) {               childScope = $scope.$new(); Redundant double negation.
}else{     this.slave.apply(this, obj[key]); Undefined variable.
return null; } Unnecessary semicolon.
script     );     if (typeof module === 'undefined' && module.exports) {         module.exports = createApp;     }     if (typeof window === 'undefined') {         this.app = createApp(); Unreachable code.
thisMonth = this.value.getMonth();     var monthLength = this.getMonthLength(thisYear, thisMonth);     var dates = this.$.dates.getControls();
if(editor.isMathEditorVisible() && e.type === 'focus') editor.closeMathEditor()         }).on('paste', e => { Undefined variable.
};     VerifyButton = __decorate([         react_redux_1.connect(null, function (dispatch) { 'VerifyButton' is a function.
Graph.webglInputEvents = function (webglGraphics) {     if (webglGraphics.webglInputEvents) { Undefined variable.
import MoviesCardList from "../components/MoviesCardList"; import ReviewsList from "../components/ReviewsList"; Unused variable.
if (this.v <= 5) this.errorReservedID();       break;     default:       pendingExprHead = this.id(); Expected a 'break' statement before 'default'.
ReactDOM.render(<Positioner />, mountNode);
if(!plug.util.env.mongo) {         log('Starting MongoDB'); Redundant double negation.
var sublocality_area = [];       geocoderResult.address_components.forEach(function(addrComp) { Unused variable.
else if (A.FormValidator.isCheckable(target)) {                             label = ancestor.previous('.' + label); Redeclaring variable.
console.log('PDC:');   console.log(wnt.PDC);    console.log('UserName:'); Unexpected console statement.
}   if (niantic_params.CURRENT_VERSION === undefined || Object.keys(niantic_params.botguard_method_group_flag).length == 0) {     dialog({ Undefined variable.
$advancedPreview.css("background-color",color);           methods.updateLightnessStyles($lightnessSpectrum,hue,currentSaturation);           $hueSpectrum.attr("style",methods.updateHueStyles(saturation,currentLightness));
this.forward(req, res, function(r) {     r.on('error', function(err) {       self.emit('error', err);       res.end(); Undefined variable.
}); }); describe('GET /api/peers', function () {  it('using invalid ip should fail', function (done) {   var ip = 'invalid'; Undefined variable.
constructor() {         this.wordPattern = /[\w\-\.:<>\*][\w\d\.\\/\-\?<>\*!]+/;         this.indentationRules = { Unnecessary escape character.
import { BackendService } from './services/backend.service'; import 'rxjs/add/operator/toPromise'; Unused variable.
if (nodejs) {      require('./cluster'); Redeclaring variable.
export function* getRecords() {   const currentModel = yield select(makeSelectCurrentModelName()); Unexpected console statement.
onTick: () => {    log('Cron job completed')   }, Unexpected console statement.
handleTlsConnection (socket, hostname) {     console.log('new Tls connection', hostname);
}                 for (i = 0; i < this.assetManager.indices.length; i++) {                     if (this.assetManager.indices[i]) { Redeclaring variable.
parser.addHandler("season", /([0-9]{1,2})x[0-9]{1,2}/, { type: "integer" });     parser.addHandler("season", /(?:Saison|Season)[. _-]?([0-9]{1,2})/i, { type: "integer" }); Unnecessary escape character.
x[0].id = path + '/' + i;             if ((t = props[ppre])) {                 if ((isPseudo && freezeID === t.freezeID) || Expected a conditional expression and instead saw an assignment.
lazy: true,                 useFactory: (config, bootstrap, types, resolvers, args, guards) => {                     config = yield config; Unused variable.
const firstDigit = requestDetails.statusCode.toString()[0];             if (firstDigit!== "2" && firstDigit!== "3") { Unexpected 'debugger' statement.
return true       } else if (comparison < 0) { Unreachable code.
}   global.ng.common.locales['ar-il'] = [     'ar-IL', Undefined variable.
}).then(function (key) {   if (key._key)    t.pass('CryptoSuite_ECDSA_AES function tests: verify generateKey ephemeral=true return object'); Redundant double negation.
const URL = req.body.url     appstore.fetchAppInfo(URL)      .then(info => appModel.add(info))
function _addChar(ch, pos){       pos = pos || _chars.length;       var id = _.uniqueId('char-') Redeclaring variable.
};  _ImplicitStylePropertyValueProvider.Instance.RecomputePropertyValue = function (propd, providerFlags) {      if ((providerFlags & _ProviderFlags.RecomputesOnClear) === 0)          return; Undefined variable.
return tokens;   } Unnecessary semicolon.
return a += b;     } Unreachable code.
var transactionsbypayeeRef = {};         var transactionsRef = {};         var thisHouseId = myCache.get('thisHouseId'); Unused variable.
var h;    while((h = this._notifyConnections.pop())){ h.remove(); } Expected a conditional expression and instead saw an assignment.
}   file = path.resolve(process.cwd(), file);   if (!~file.indexOf(': Redeclaring variable.
loadWidget: function(index) {
var mcos = 1.0 - cost; v0 = mcos*xy; v1 = mcos*xz; v2 = mcos*yz; return this.multMatrix([cost+mcos*x2, v0+zs, v1-ys, 0, v0-zs, cost+mcos*y2, v2+xs, 0, v1+ys, Redeclaring variable.
showPoster(source);     } else if (ext ==='mp4', 'ogg', 'ogv', 'webm') {      playVideo(source);
function basicGithubId(text) {   return text.replace(/ /g,'-').replace(/[\/?:\[\]`.,()*"';{}+]/g,''); }
for (index1 in parents) {           if (Object.prototype.hasOwnProperty.call(parents, index1)) {             var k1 = parents[index1]; Unexpected constant condition.
options.id = layer.id;       esriLayer = new CartoLayer(layer); Unexpected 'debugger' statement.
columnClass: 'col-lg-3 col-md3 col-sm-2',                 linkTo: "\{\{ '/#/inventories/' + group.inventory \}\}"                 }, Unnecessary escape character.
switch (action.type) {     case 'MEALS_REPLACE': {       let meals = []; Unexpected lexical declaration in case block.
} else {           Log.info("Docs successfully built.");         } Unexpected console statement.
tabWidth: 2,       wrapColumn: 80, Duplicate key 'trailingComma'.
$('#deletingAlert').addClass('in');                         result = $.ajax({                             type: 'DELETE', Redeclaring variable.
let state = arrayStates._START_;   while (this.index < this.tokenList.length) {    let token = this.tokenList[this.index]; Unexpected constant condition.
loadItems: function() {   var hash = {};   hash.type = 'GET'; Undefined variable.
try {               var value2 = Slim.lookup(source, path, target);               target.innerText = target.innerText.split(expression).join(value2 || '');             } catch (err) {}           }; Empty block statement.
var assembleDefaultLayout = function(assemble, next) {       grunt.log.writeln('Assembling'  +'default layout'.cyan); Unexpected 'debugger' statement.
seenNonDefaultActions.push(action);       if (actionConflicts[actionHash(action)]) {         actionConflicts[actionHash(action)].forEach(function (actionConflict) { Redundant double negation.
if(this.constructor.prototype==c.prototype && (ct=this.postscript)){ct.apply(this, args)}   }, Unnecessary semicolon.
var config; Unused variable.
}     } catch(e) {       return false;     } finally { Empty block statement.
console.log ("Error posting to instances, instance data json string no passed in or corrupt");         return     } Don't use process.exit(); throw an error instead.
},  'no semi-colons': {   options: { Duplicate key 'no semi-colons'.
var result = null;     models.forEach(function(model) { Unexpected 'debugger' statement.
whileplaying: function() {                     eqBarValues = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
if (args) {       if (typeof args.name!= "undefined") {         continue;       } Empty block statement.
allParams = [];     _splitter = obj.splitter!== undefined? obj.splitter : "-"; '_unwind' is constant.
var superError = 'error critical';    if (!this.get('termsAndConditions')) { Unreachable code.
tDescription = this.getPath('model.attributeDescription.attribute.description') + '—' +             String.loc( 'DG.LegendView.attributeTooltip');         if( tDescription!== this._labelNode.get('description')) { Undefined variable.
name: `npc${i}`,         labelText: n.replace(/(\}|\{|\:|\.|\(|\)|\-|=|\[|\])/g, ""),         appendTo: this.npcSettingsWindow, Unnecessary escape character.
console.log('error!', res);                     }); Unexpected 'debugger' statement.
return keysNotTranslatedPerLocale; } Unnecessary semicolon.
if ( typeof( id ) == 'object' )     { Invalid typeof comparison value.
throw "self.record undefined in start observing"   } Unreachable code.
export function clearAutocomplete () {   if (autocompleteResults) {     autocompleteCurrentValue = null Unreachable code.
let gatewayStatus = availableGateways[selectedGateway];     inputCoinType =!!gatewayStatus &&!!gatewayStatus.assetWithdrawlAlias         ? gatewayStatus.assetWithdrawlAlias[inputCoinType.toLowerCase()] || inputCoinType.toLowerCase() Redundant double negation.
var QueueEmpty = exports.QueueEmpty = function() {     this.name = "QueueEmpty"; Undefined variable.
var isReadonly = angular.isDefined(attr.readonly);     var isRequired = angular.isDefined(attr.required);     var mdNoAsterisk = angular.isDefined(attr.mdNoAsterisk); Undefined variable.
url: contextPath + "/loadLinksConfig",             data: {activeClassifier: lastActiveClassifier},             success: function () {                 if (tomlEditor!= null) { Unused variable.
case 'oneToManyMorph':           case'manyToManyMorph': {             const transformToArrayID = (array) => {               if(_.isArray(array)) { Unexpected lexical declaration in case block.
}                   if(data.user.mostRecentIds == {corpusid:null}){                     data.user.mostRecentIds = {}; Expected a conditional expression and instead saw an assignment.
var me = this;         me.flow = new ThemeFlow();         me.offset = new ThemeOffset();         me.style = new ThemeGraduatedSymbolStyle();         if (options) { Undefined variable.
$(window).on('resize.ADE',callback);   } Unnecessary semicolon.
Unexpected constant condition.
return (x)['+'](this);         throw new Error('Unknown Type for Rational +');     } Unreachable code.
return process;    case "relay": Unreachable code.
return "?" + query.join('&'); } Unnecessary semicolon.
import Plain from "slate-plain-serializer"; import { Value } from "slate"; Unused variable.
this.setState({circuitType5: null});                                         break;                                     default:                                         break;                                 } Expected a 'break' statement before 'default'.
fs.unlinkSync(actualFile);     } catch (err){} Unnecessary semicolon.
case "Lbracket":             if (this.lookahead(0) === "Number" || this.lookahead(0) === "Colon") { Redeclaring variable.
return callback(null,'Done - Xml Process');           }
return gulp.src(config.path.resources)             .pipe(gulp.dest(path.join(config.path.build,'res'))); });
: table[field].equals(context.request.urlTokenized[index - 1])           case "null": Unreachable code.
ol.WEBGL_EXTENSIONS;
import MarkdownSerializer from'slate-mdast-serializer' import { Block } from'slate' import React from'react' import shortId from'shortid' Unused variable.
var g = ('undefined' === typeof window? global : window) || {}   _crypto = ( Empty block statement.
if (e.url === component) {                              flexo.notify(this, "@loaded", { instance: this Undefined variable.
vNext = vItems[vItems.length-1];   } Unnecessary semicolon.
return HoneyProxy.search("filter-"+($el.data("filterclass").split(" ").join(" filter-")),$el.val(),$el.data("negate"),ids);  }
const URL_REGEXP = /(url\s*\(\s*['"]?\s*)([^'"\)]+)(\s*['"]?\s*\))/g; const HTTP_PROTOCOL_REGEXP = /^https?:\/\ function processStyleDeclaration(decl, opts) { Unnecessary escape character.
this._dataView.get('contentView').set('calculatedWidth', left);   }
}             for (i = startIndex; i <= endIndex; i++) {                 var item = childNodes[i]; Redeclaring variable.
forEach(tmp, function(value) {           if (!value.match(/^max[^-]/)) {             style.push(value); Unnecessary escape character.
.then(() => {      fail('Should not have been able to join a room uninvited');     }).catch(e => { Undefined variable.
process.exit(-1);     } Don't use process.exit(); throw an error instead.
type: 'array',           of: [ Duplicate key 'title'.
throw new Error('Should not execute unrelated afterEach');     }); Unreachable code.
this.update = function(node, template) {     node = this.get(node);     var oldName = node.name; Redeclaring variable.
const fs = require('fs-extra') const pacote = require('pacote') Unused variable.
var _ = require('underscore'); var React = require('react'); Unused variable.
const monthsNumInc = text.toString().match(/:MM_[-,+]?[0-9]{1,2}(?!_)\b/ig);     if (monthsNumInc) { Unnecessary escape character.
var type_text, credit_text, au_text;       if (credit > 0) {             type_text = "(" + (credit+au) + ")"; Unexpected constant condition.
return model.getDocs(currentWord)         case 'definition': Unreachable code.
location_arrow: 'location-arrow',  long_arrow_down: 'long-arrow-down', Duplicate key 'lock'.
escapeRegExCharacters(value) {     return value.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');   }, Unnecessary escape character.
Observable.prototype[symbol('observable')] = Observable.prototype.toESObservable; Undefined variable.
if (!ws ||!ws.length) {       return undefined;     } Expected to return a value in getter 'lastActive'.
results:[pathToCode],            env,            arc,            stats:[stats] Undefined variable.
var workers = self.workers;     if(config.workerCount!== self.workerCount) { Unused variable.
state.assignable = false;                         strings = [state.tokenValue];                         result = new runtime_1.TaggedTemplateExpression(strings, strings, result); Unexpected lexical declaration in case block.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-08\/mental_feeling-1312586254.swf",  admin_props : false, Unnecessary escape character.
return "mat3";                     case Kinds.MATRIX4:                         return "mat4"; Duplicate case label.
console.log(chalk.white(prefix), sep, msg)   process.exit(0) }
var StringBuilder = traceur.util.StringBuilder;   var Keywords = traceur.syntax.Keywords; Redeclaring variable.
result.errors.push(`Error: invalid data to convert to search format`);             return;         } Undefined variable.
describe('bundling', () => {   it('should work', () => { Undefined variable.
charSet: null,     allowTransparency: null Duplicate key 'autoPlay'.
Swiped.prototype.move = function() {         if ((this.dir > 0 && (this.delta < 0 || this.left === 0)) || (this.dir < 0 && (this.delta > 0 || this.right === 0))) { Unexpected console statement.
wait: function(data, callback){         waitAsync.setTimeout(function(){ callback(null); }, timeout);     }, Undefined variable.
rawCase.status = { 'name': rawCase.status };             rawCase.group = { 'number': rawCase.folder_number }; 'rawCase.product' is assigned to itself.
export const getRidOf = str => {   if (/\{[^}]+\}/.test(str)) {     return { Unnecessary escape character.
var childPositionsValid = true;   for (i = 0; i < this.children.length; ++i) {    if (!this.children[i].positionValid(this.children[i].getCurrentSpace())) { Redeclaring variable.
const renderer = TestUtils.createRenderer(); describe('ObjectName', () => { Unused variable.
if (!(file instanceof File)) {    this.setState({ Unexpected negating the left operand of 'instanceof' operator.
case 'de':       return formatNumber(this, '.');     } Unreachable code.
renderPlaylists() {     this.setState({ currentRoute: "channels" });
this.websocket.send(`${commandStr}${utc}`)   } Unexpected 'debugger' statement.
.replace(namedParam, function(match, optional) {                      return optional? match : '([^/?]+)';                    }) Unnecessary escape character.
var _documents = state.documents.get(targetName);           var _nextState = state; Unexpected 'debugger' statement.
};     case TYPE.BINANCE_CANDLESTICK: Unreachable code.
<AppIcon />; const codeIcon = Unnecessary semicolon.
while (++idx < len) {         ch = str[idx];         substr += ch; Redeclaring variable.
if(val.indexOf('rgb') > -1) {    var matched = false;
$scope.removeSubscription = function() {             userSubscriptionRef.$remove().then(function() {                 NotificationService.success('Removed', 'User Subscription')
gpii.processReporter.live.get = function (request, processReporter, solutionsRegistryDataSource) {     var runningSolutions = []; Unexpected 'debugger' statement.
_.each(tagName, function(tag) {       components.tagIsComponent(tag, isComponent);     }); Undefined variable.
}                 }                 return postData.call(self, batchExt, { tx: self.txArray }); Unnecessary semicolon.
const value = xs => isEmpty(xs)? `[]` : `${head(xs)}:${value(tail(xs))}`;     return `[${typeof this === `[string]`? fromListToString(this) : value(this)}]`;   } Invalid typeof comparison value.
self.annotate = function(req, action, objects) {     var matches = action.match(/^(\w+)\-([\w-]+)$/);     var property; Unnecessary escape character.
'(' + baseUrls.join('|') + ')' +     /[:\/]([^/]+\/[^/]+?|[0-9]+)$/.source   ); Unnecessary escape character.
updateResources(){         let tmpSwagger = this.state.swagger; Unexpected 'debugger' statement.
}, undefined)   if (!menu)     renderNonTty(shop, menuOptions) Undefined variable.
case GeochronoUnit.EPOCH:             dates = GeochronoLabeller.epoches; break;         case GeochronoUnit.PERIOD: Undefined variable.
options: {                 startkey: [startOfWeek, null, null],                 endkey: [endOfWeek, endOfWeek, 'appointment_'+maxValue] Unexpected comma in middle of array.
this.handleOrientationChange();     } Unnecessary semicolon.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-01\/1294353899-4428.swf",  admin_props : false, Unnecessary escape character.
statements.forEach(function(propertyId) {     angular.forEach(properties.getRelatedProperties(propertyId.substring(1)), function(relPropScore, relPropId) { Undefined variable.
draftPoint_attr,   draftPoint_clone, Duplicate key 'draftPoint_attr'.
self.remove = function (model, e) {             if (confirm(gettext("Are you sure you want to remove this conditional message?"))) { Unexpected 'debugger' statement.
document.getElementById("router").setAttribute("route", route); }
router.get('/', async (ctx, next) => {     ctx.body = { message: 'Hi there.', ctx: ctx.request.ip } }) Unexpected console statement.
var test = document.createElement('div');     var fragment = Polymer.parseAndBindHTML('<input value="{{bar}}" />', test);     test.appendChild(fragment); Undefined variable.
this.inherited = true;   } Unnecessary semicolon.
return (isNaN(n)? (confVal === "true") : (n!== 0));   } else if(typeof confVal === "boolean") { Unreachable code.
import { storiesOf } from "@storybook/vue"; import { withKnobs } from "@storybook/addon-knobs"; import notes from "./README.md"; Unused variable.
error : function(data){        Notification.error("Error while Searching.");       } Undefined variable.
}; export const traverseEach = (navKey, state, resultFn, path, object, pathIndex, returnFn, context, mutationMarker) => { Unused variable.
augur.api = new contracts.Tx(process.env.ETHEREUM_NETWORK_ID || constants.DEFAULT_NETWORK_ID); augur.bindContractAPI(); 'augur.api.functions' is assigned to itself.
createDat: {     desc: (param, pages, opts = {}) => {       if (opts.title) return `create a new Dat archive, "${opts.title}"` Duplicate key 'desc'.
var indexO = 0; for (indexB1 = 0x00; indexB1 <= 0x7F; indexB1++) {   var hexB1 = decimalToHexString(indexB1); Undefined variable.
var status = navigator.onLine? true : false;     if (status) { Unexpected 'debugger' statement.
return originalValue;     case 'object': Unreachable code.
}         case 1: Unreachable code.
Ti.Android.currentActivity.startActivity(intent);  };  var createOptionsMenu = function(evt) {   var menu = evt.menu, Move function declaration to program root.
$("#saved-questionnaire-code").val(responseJson.form_code);             var has_newly_added_question = questionnaireViewModel.has_newly_added_question();
if (node.start!== pragmaParent.body [0].start) {     let error = {      node: node, Redeclaring variable.
binding,   bindings,   selectBinding; Unused variable.
})(this); Undefined variable.
if (external.isEmptyString(path)) {                 node.id = external.id();                 path = "#" + node.id;             } Unnecessary semicolon.
for (let i = 0; i < response.bids.length; i++) { Redeclaring variable.
import { assert } from 'chai'; import * as InkModel from '../../../../src/model/InkModel'; Unused variable.
} catch (e) {       parsed = params[param];     } Redeclaring variable.
class CliApp {   constructor (options) {     const Commands = require('cli-commands')     this.commands = new Commands()
it('finds correct orfs in reverse direction in slightly more complex sequence', function() {   var orfs = getOrfsFromSequence({ Unexpected 'debugger' statement.
|| font.bold)? "bold " : "normal ";         css += font.pixelSize!== undefined            ? font.pixelSize + "px " Undefined variable.
Rendition.prototype.moveTo = function(offset){  this.scrollBy(offset.left, offset.top); Undefined variable.
if( CHAR.LINE_FEED === src.charCodeAt(c)) c++;       break;     case CHAR.LINE_FEED:     case 0x2028: Expected a 'break' statement before 'case'.
this._readStream.on("error", function(err) {     that.emit("error", err); Unexpected console statement.
gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); Unexpected 'debugger' statement.
path = url.parse(req.url).path,     schema = req.client.pair? 'https' : 'http',     dest = schema + ': Redundant Boolean call.
validation: {         regexString: '^/',         message: i18n.translate('kbn.advancedSettings.defaultRoute.defaultRouteValidationMessage', { Unnecessary escape character.
} else {        err = tools.formattedError('Redirect loop detected after %d requests.', reqId);        err.code = res.statusCode; Redeclaring variable.
const bodyParser = require('body-parser'); Unused variable.
themedLayer.setVisible(!themedLayer.getVisible()); } Unnecessary semicolon.
var reader = fd_slicer.createFromBuffer(buffer);   options = {autoClose: false};   fromRandomAccessReader(reader, buffer.length, options, callback); Redeclaring variable.
Link.pattern = /(?:\<([^\>]+)\>)((\s*;\s*([a-z\*]+)=(("[^"]+")|('[^']+')|([^,;]+)))*)(\s*,\s*|$)/gi Unnecessary escape character.
if (error) {           if (onError && onError.length) { Undefined variable.
await writeData     balances = balances.toNumber() Unexpected 'debugger' statement.
activityCollection: { name:'sys_activitys' },       logCollection: { name:'sys_logs' } Duplicate key 'logCollection'.
ctx.shapeNode = XHTMLNS.create(this.tagName);         if (this.extentOverride) {             ctx.shapeNode.setX(this.extentOverride.x, this.extentOverride.y);         } Empty block statement.
if (isEntity(viewModel)) {     function resolveInstanceNow (promisesToWaitFor) {       if (_.isUndefined(promisesToWaitFor)) {         finishResolution();         return Promise.resolve(); Move function declaration to function body root.
$rootScope.autoLogInInterval=setInterval(tokenRefresh, 1800000);          }  }); Unnecessary semicolon.
compSvg.setAttribute('height',this.data.h);         g = document.createElementNS(svgNS,'g');         compSvg.appendChild(g); Undefined variable.
this.TTCR = (this.TTCR + delta) & 0xFFFFFFFF;     DebugMessage((this.TTMR & 0xFFFFFFF) - (this.TTCR & 0xFFFFFFF)); };
bible.APOCRYPHAL_BIBLE = bible.OT_BOOKS.concat(bible.AP_BOOKS, bible.NT_BOOKS); bible.APOCRYPHAL_BIBLE_USFM = bible.OT_BOOKS_USFM.concat(bible.AP_BOOKS_USFM, bible.NT_BOOKS_USFM); Undefined variable.
return this.store.find('criterion').then((criteria) => {       return Ember.RSVP.hash({ Unexpected 'debugger' statement.
if (event.type === "m.room.tombstone" && this._roomUpgradeHandler) {         if (this.opts.RoomUpgradeHandler.consumeEvent) {             return Promise.resolve(); Unreachable code.
var bottomRow = new UIRow();  var bottom = new UICheckbox( parameters.bottom ).onChange( update );  bottomRow.add( new UIText( 'Bottom' ).setWidth( '90px' ) ); Undefined variable.
}       if (this.element.tagName === "FORM") {         _ref2 = this.element.querySelectorAll("input, textarea, select, button"); Unexpected constant condition.
import "babel/polyfill"; import once from "once"; Unused variable.
.catch(onError); export const apiFetchSelected = id => Unexpected console statement.
var self = this;         console.log(queryObject);
Transport.prototype.poorConsensus = function (consensus) {  consensus = consensus || modules.peers.getConsensus();  if (consensus === undefined) {   return false; Redeclaring variable.
const dockerfilePath = 'Dockerfile.ui'    dockerfile = `    FROM nginx Undefined variable.
}     return Error("assets are apparently broken")       resources.push({       type: 'asset', Unreachable code.
elemToPut.put(params, headers).then(function(serverElem) {                   var newArray = copy(__this);                   newArray[idx] = serverElem; Undefined variable.
return choiceConditional;         case 'Wait': Unreachable code.
var waiting = 1;     var finish = function() {       if (--waiting === 0) self.destroy();     };     this._opposite.once('end', finish); Move function declaration to function body root.
module.exports = goo; } if (typeof window === 'undefined') {     window.goo = goo; Redundant double negation.
if (slippage > so.max_slippage_pct) {                     err = new Error('\nslippage protection')                     err.desc ='refusing to sell at'+ fc(price) + ', slippage of'+ pct(slippage / 100) Redeclaring variable.
case "blackberry": validateBBParams(type); break;       default: return;      }     log.info("Uploading resource : path : " + filepath + ", destination : " + destination + ", config : " + config + ", type : " + type); Unnecessary semicolon.
import { ShaderCache } from './shader_cache.js'; import { WebGl } from './webgl.js'; Unused variable.
return w; } Unnecessary semicolon.
return [lnn.path.guard, lnn.path.middle, lnn.path.exit] }
var ln = readline.line; Redeclaring variable.
PublicKeyRing.fromObj = function(data) {   preconditions.checkArgument(typeof data!== 'object');   var opts = PublicKeyRing.trim(data); Invalid typeof comparison value.
si.key = ki;     }     for (i = 0, oz = order(sz); i < n; ++i) {       sz[oz[i]].index = i; Redeclaring variable.
$scope.tokenActivity = transactions; Unexpected 'debugger' statement.
include: /source/,                     exclude: /(node_modules|source-todo)/,                     use: { loader: 'ts-loader' } Unnecessary escape character.
grunt.registerTask('test', 'Runs test in node', function() {         require('./test/runner').node();     }); Unused variable.
const config = require('config'); const app = express(); Unused variable.
uniforms: UniformsUtils.merge( [    UniformsLib[ 'common' ],    UniformsLib[ 'aomap' ],    UniformsLib[ 'fog' ] Undefined variable.
useCssTransition        ? h(ReactCSSTransitionGroup, { Redundant double negation.
$(node).on( ev[0], VMhooks.bindEventListener(it, ev[1]));         } else if(vmKey === "show") {           VMhooks.showBlock(node);         } else if(vmKey === "for") { Empty block statement.
_resizeContainers() {    this.$.titleContainer.style.width = 'auto';    const titleContainerWidth = this.$.titleContainer.getBoundingClientRect().width; Unreachable code.
return 0.4;    }   } Unnecessary semicolon.
assert.fail();             } catch (error) {                 assert.fail();             } Empty block statement.
return (this.categories)? this.$q.when(this.categories) : this.$http.get(this.URLS.FETCH).then(this.cacheCategories.bind(this));   }
var renderToString = require('preact-render-to-string').render var nanoraf = require('nanoraf') Redeclaring variable.
var temp = {};   while ( (line = message.match(/^.*$/m)[0]) ) {    message = message.substring( line.length ); Expected a conditional expression and instead saw an assignment.
if (branchSymbols.length > 0) {          var _branchSymbols = branchSymbols; Unnecessary semicolon.
goog.require('ol.render.Event'); goog.require('ol.render.canvas'); Undefined variable.
throw "invalid shape " + type;       } Unreachable code.
throw new Meteor.Error(500, err.message);         }         let proto; Undefined variable.
.setView(center, 14); var hash = L.hash(map); var route = { Redeclaring variable.
(function() {   var Mustache, defaultContent, fs, showdown, template;   fs = require('fs'); Unused variable.
var document = window.document,          $ = window.jQuery, Unused variable.
return false;         case this.OPERATORS.dateOperatorMonths: Unreachable code.
Vue.filter('formatDate', function(value, format) {     if (!format) { Unexpected 'debugger' statement.
this.el = el;     this.context = document;
if (gap > 0 && first)       for (i = 0; i < first.length; ++i)         if (first[i].to == null) Redeclaring variable.
if (!err) {     var now = new Date();     now = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0, 0);     for (var i in files) { Redeclaring variable.
var file = files[i];                    $upload.upload({ Unexpected 'debugger' statement.
$("#github").removeClass('hidden');     }else if (value == 'asn'){         $("#github").addClass('hidden'); Unexpected constant condition.
html +='   <tr>';         for(var c in row) {           if(row.hasOwnProperty(c)) {             var v = row[c].value;             if(getTableContentFormat(v)!== 'html') { Redeclaring variable.
extension: 'xlsx'       })     case 'application/vnd.google-apps.presentation': Unreachable code.
var [ min, mean, max, rps ] = await runner(u)
inspect = function() { return "" + x + y + z + z1; };
describe('debug', function () {   const log = debug('test')     it('passes a basic sanity check', function () { Undefined variable.
})(); var M; Unnecessary semicolon.
try {       fs.writeFileSync(filename, JSON.stringify(appSettings, null,' '), { flag: 'wx' });     } catch(err) { return; }     if (--count === 0) resolve(); Empty block statement.
}   }   onMouseUp() {     this.m_mousePressed = false; Unused variable.
callback(0, absPathToFile, parentFolder);         } else if(typeof err.code === 'ENOENT') { Invalid typeof comparison value.
var target = $tags.get();    var configObj = app.ext.partner_addthis.vars.addthis_config;    var sharingObj = app.ext.partner_addthis.u.buildSharingObj(infoObj); Undefined variable.
} else if ($location.$$path.split("/")[2]) {                     list = $location.$$path.split("/")[1];                     id = $location.$$path.split("/")[2];                     $rootScope.listBeingEdited = list; Redeclaring variable.
textTyped += key;     fontSizes.push(newFontSize);   } Undefined variable.
var rupsign = request.post(   { url: 'https: Redeclaring variable.
case 'getCode':             blockTag = params.blockTag;             if (utils.isHexString(blockTag)) { blockTag = utils.hexStripZeros(blockTag); }             return this.send('eth_getCode', [params.address, blockTag]); Redeclaring variable.
var configXmlPath = path.join(appDirectory, 'config.xml');         fs.readFile(configXmlPath, { encoding: 'utf8' }, function (err, data) { Unused variable.
else             range = new Range(                 rows.first-1, this.session.getLine(rows.first-1).length, Redeclaring variable.
import { h, Component } from 'preact'; import './Home.css'; export default class Home extends Component { Unused variable.
function () {       self.connecting = false; Unexpected console statement.
group.optimize = true;     }     if (group.helpers!== false) {       group.helpers = true; Unexpected constant condition.
for(var prop in triggers) {       if(!triggers.hasOwnProperty(prop)) continue; Undefined variable.
has_notebook_info: function(gistname) {             return this.model_.has_notebook_info(gistname);        }, Unreachable code.
app.use((err, req, res, next) => {       res.status(500).send(err)     }) Unreachable code.
try {             if(meta.cfg.type) { Unexpected 'debugger' statement.
}   return newCursor Unexpected console statement.
onSuccess: (result => {   }), Unexpected console statement.
constructPackage(strucDiffPerType) {     if(!strucDiffPerType) {       return Promise.resolve();     } Redundant double negation.
return ast; } function makeAnyPropTypeAST() { Unnecessary semicolon.
var index = fs.readFileSync(indexPath, 'utf8');           index = index.replace('<meta name="rollbar"/>', rollbarSnippet);           fs.writeFileSync(indexPath, index); Redeclaring variable.
Polymer({   _template: `     <style> Undefined variable.
});     case REQUEST_PALETTE_SUCCESS: {       const isLoading = update(state.isLoading, { $unset: [action.id] });       return lodashAssign({}, state, { Unexpected lexical declaration in case block.
(async () => {   const locale = window.navigator.language.split('-')[0];   const defaultPrivacyDoc = 'PRIVACY.md'; Undefined variable.
}     for (attr in settings) {       if (! settings.hasOwnProperty(attr)) { Redeclaring variable.
this.maximizeControl();         }     }, Unnecessary semicolon.
maxHeight: 0      };     default: Unreachable code.
if(err) return defer.reject(err);         d = d.replace(/{{cmd}}/g, path.basename(name)).replace(/^#!.*?\n/, ''); Unnecessary escape character.
if(ui.puzzle.flags.irowake){    ac('irowake','disp', '線の色分け','Color coding'); Redundant double negation.
case org.xml3d.debug.WARNING:     console.warn(msg);     break;    case org.xml3d.debug.ERROR: Unexpected console statement.
listHover() {         if (this.props.visible)             return; Unexpected constant condition.
if (!String(job.reportedBy).includes(String(user._id))) {         keyboard[0].push({ Unexpected constant condition.
var length = block_info.position + block_info.length;         var der_certificate = buffer.slice(cursor,cursor+length);         certificate_chain.push(der_certificate);
const path4 = action.payload.path;       const type = action.payload.subtitle;       console.log('check path', path4, 'key', key4); Unexpected lexical declaration in case block.
try {           Unexpected 'debugger' statement.
var pricingMethod;   if (source === "hi/lo") {    pricingMethod = d => ({ high: d.high, low: d.low }); Expected a conditional expression and instead saw an assignment.
newConnectionMode = MediaBrowser.ConnectionMode.Manual;         }         if (MediaBrowser.ServerInfo.getServerAddress(currentServerInfo, newConnectionMode)) {             return newConnectionMode;
if (process.env.FORCE_SSL) {     app.use(enforceHttps({       trustProtoHeader: true Unreachable code.
for (let i = 0; i < contractBallot.length; i++) {       if (contractBallot[i].rank) { Redeclaring variable.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_chicken_brick_piece4-1348197925.swf",  admin_props : false, Unnecessary escape character.
app.use(function(ctx){         ctx.body = { foo: 'bar' }; This generator function does not have 'yield'.
}  } catch (err) { return queries.join("&"); }     return queries.join("&"); Empty block statement.
render() {     let completed = +this.props.completed;     if (completed === NaN || completed < 0) { completed = 0 };     if (completed > 100) {completed = 100}; 'completed' is constant.
var numberItems = count;         if (count === 0) {          $('.no-results').show();         } Unexpected constant condition.
(function() { var define, requireModule, require; (function() { Unused variable.
{         propKey = qx.renderer.color.Color.RGBCSS_START + propValue.join(qx.constant.Core.COMMA);         propKeyAsStyle = true; Undefined variable.
return new Iterator(function () {             while (count > 0) {                 if (elements === null) { Unexpected constant condition.
var v, show = true;                     for (v in s)                         if (s[v].show) { Redeclaring variable.
return getClientUrl() + '/api/data/v' + version + '/'; } Unnecessary semicolon.
import { remote } from "electron";
if (PORT!= 3000 || process.env.JOYENT) {     Server.set('env', 'production'); Unexpected constant condition.
var year_or_cat = year_or_cat || '2010';         precision = precision || 2;         var val = parseFloat(this.sf1val(sf1_json,field,year_or_cat)) Redeclaring variable.
$.bootstrapGrowl = function(message, options) {     options = $.extend({}, $.bootstrapGrowl.default_options, options);     var $alert = $('<div>'); Redeclaring variable.
this.playerProxy_ = {};   for (let k in (this.localPlayer_)) {     Object.defineProperty(this.playerProxy_, k, { Redeclaring variable.
if(property in HTMLElement.prototype) {      var arr = [], newNodes = new Set(); Unexpected 'debugger' statement.
return compareStats('size', first, second, firstName, secondName) * descending;     case 4: Unreachable code.
if( 1 ){   domReady(handleDomReady);
sizeCls = constants.largeClass;           }           classes.push(sizeCls); Unnecessary semicolon.
if (that.pullUpToRefresh) {    loading = that.pullUpEl.className.match('loading');    if (loading &&!that.contentReady) { Redeclaring variable.
function isDigit (character) {     return isInRange(character, '0', '9'); Unexpected console statement.
window.eon = window.eon || {}; window.PUBNUB = PUBNUB; window.eon.c = { Undefined variable.
Throttle.setCollection = function(input) {     if (typeof input === "string" || input === null) { Invalid typeof comparison value.
var dirty = oldValue!=x;           if(dirty){ Unexpected 'debugger' statement.
var db = new Dexie('testdb'); Unexpected 'debugger' statement.
removeFromArray(child, "composes", fn);     } Unnecessary semicolon.
if ( typeof window.CustomEvent!== "function" ) {  var CustomEvent = function(event, params) {   params = params || {bubbles: false, cancelable: false, detail: undefined}; Move function declaration to program root.
} else {       throw new State.DefinitionError(); Unexpected 'debugger' statement.
if (this.getVertical()) {    if (Device.browser.firefox) {     this._iFactor = stepSize;    } else if (Device.browser.webkit) {     this._iFactor = stepSize; Redundant double negation.
if(!!base) return base;     return base;   } Undefined variable.
processCss,   append = [], Unused variable.
p["estimateSize"] = p.estimateSize; p["lookup"] = p.lookup; 'p.createPromise' is assigned to itself.
Paginator.prototype.paginate = function (output, active, pageSize) {   pageSize = pageSize || 7;   var lines = output.split('\n'); Redeclaring variable.
} console.log("\n3.) Conersations being submitted to: ", conversations, "\n");       }).then(() => { Unreachable code.
self.cookies = function(name, value) {     var cookieLength, cookieArray, cookie, i, keyValue, index;
},   addTextsForExport: function( $svg,  ) {    var margins = App.ChartModel.get( "margins" ); Unused variable.
return request;     } Unnecessary semicolon.
constructor(type, location) {     this.type = type;     this.location = location; Unreachable code.
} else {      items = allBlock.removeClass('fw-filter');     } Unnecessary semicolon.
import React, { PropTypes } from'react'; import HelpSidebarItem from './helpSidebarItem'; Unused variable.
Repl.prototype.deliverContent = function(content){   try { Undefined variable.
if (landCoverTotal === 0) {                 alertView = new modalViews.AlertView({                     model: new modalModels.AlertModel({ Redeclaring variable.
throw new Error('Empty Object has been passed');     }     if (!this.input.replyId) {         throw new Error('Attribute replyId is missing'); Redundant double negation.
if (typeof browser === "undefined") {     browser = self.chrome; } Redeclaring variable.
var cheerio = require('cheerio'); var registerHelper = function () { Undefined variable.
if (!this._application) {    throw new Error('Could not find ZombieBox applicaion');   } Don't use process.exit(); throw an error instead.
_.forEach(docs, function(doc) {       console.log('Processed doc', doc.id);     });
SharedKey = require('../azure2/utils/sharedkey');
const result = renderComponent();     expect(findByClass(result, 'pui-toggle')).toBeDefined();   }); Undefined variable.
showProgress: function (message) {             this.console.log(message.progress);         } Unexpected console statement.
}   }   if (enableInteractions) {     rtn.enableInteractions() Redundant double negation.
(function () {     var mediaElement = window.document.body.children[0]; Unexpected 'debugger' statement.
Header = require('./../containers/header'),  Dropzone = require('react-dropzone'),  Link = require('react-router').Link;
var resp = mldb.query("select '" + str + "' as res"); assertEqual(resp[0].columns[0][1], str); Undefined variable.
var updated = false;   var i, j, input, output, coin, unspent, index, orphan;   var key, orphans, some; Unused variable.
core.getClassList().forEach(function (c) {       if (!_global[c]) return;       _global.__defineGetter__(c, function () { Redundant double negation.
this.base(arguments);       this.slideBar = new qx.ui.container.SlideBar();       this.slideBar.set({         width: 300 Undefined variable.
import EditableTable from './stories/EditableTable.js' Unused variable.
} else {           e.attr(ns, attr.localName, attr.value);         }
return filename.replace(/[/],\./g, "_").trim(); Unnecessary escape character.
elements.append(e).append($('<br/>'));             }             header = false; Unnecessary semicolon.
throw "Got message back from worker after timeout"    } Unreachable code.
for (let j = i + 1; j <= end; j++) {                 let nested_count = lines[j].match(/^(\*+|#+):? /)[1].length;                 if (nested_count <= this_count) { Unnecessary escape character.
for (i = 0; i < rows.length; i++) {             row = rows[i];             if (row.parentKey == node.key) { Redeclaring variable.
fontFamily: 'Verdana',          labelOutlineColor: '#dddddd', Duplicate key 'fontSize'.
clearTimeout(timeout);     this.setState({ Unexpected console statement.
var page = req.params[1];          if (typeHandler.cache[page]) { Unexpected 'debugger' statement.
login: function(userIdEmail, password, rememberMe) {         var signIn =  { Unexpected console statement.
this.close = function(callback){     if(server){       server.close(callback); Redundant double negation.
important: function() {     var captures; Expected getter 'important' to always return a value.
function _init() {     _getInterpreterSettings();   } } Unnecessary semicolon.
get: function (key, cb) {             if(typeof(key)!='string') {               cb('argument "key" should be a string'); Unexpected constant condition.
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
var token = AuthStorage.get();                 if(token) {                     return;                 } Empty block statement.
originalReadyFunction.call(this);          readyFunction.call(this); Unexpected console statement.
switch (type) {         case 'add': {           const { pathname, data, isMarkdown } = change           commit('ADD_FILE', change) Unexpected lexical declaration in case block.
$('.repeater-template [name]').each(function () {         var $this = $(this);         $this.attr('data-name', $this.attr('name')); Undefined variable.
this.toggle.$link.on( 'click', function () {   if ( this.toggle.open ) { Undefined variable.
for (var i = 0; i < inputByLine.length; i += 1) {     SpotifySearchFactory.search(inputByLine[i], function(response) { Unexpected console statement.
if(da[i] < 1){ da[i] = 1; }       }       for(i = 1; i < da.length; i += 2){        da[i] += s.width; Redeclaring variable.
if (scrolledPox > previousScrolledPx) direction = 'down';     else if (scrolledPox < previousScrolledPx) direction = 'up';     previousScrolledPx = scrolledPx;
var groupIndex = $.inArray(currentPipeline.groupName, groupNames);                     if (groupIndex > -1) { Unexpected 'debugger' statement.
import d3 from "d3"; import { shallowEqual, identity, last, isDefined, isNotDefined } from "./utils";
$ERROR('#Й'); } var \u041A = 1; if (К!== 1) {   $ERROR('#К'); Undefined variable.
}     var points =  numeric.identity(dim);     points.unshift(points0); Undefined variable.
grunt.log.writeln('File'+ chalk.cyan(file.dest) +'created.');       if (options.includedemo) {         $resultSvg.attr('style', 'width:0;height:0;visibility:hidden;'); Redundant double negation.
_leaveStringState();             } else { Empty block statement.
for(i=0; i < this.length; i++) {         fn(this[i], arg1, arg2); Redeclaring variable.
var results = {}   for (let i = 0; i < NUM_SERVERS; i++) {     let worker = cluster.fork()     workers[worker.id] = worker Redeclaring variable.
UI.Mockup.loadImages();         }     } Unnecessary semicolon.
constructor(props) {   super(props);   this.state = {}; Expected to call'super()'.
}( window.jQuery ) Undefined variable.
<p>            Collection {(`${collectionName} ${collectionVersion}`)} has been deleted.           </p>
callback(tokenData.token, tokenData.account);     } Unnecessary semicolon.
} else {      alert ('Only "Curve" type plots are implemented.');     } Undefined variable.
case keyCodes.down:     case keyCodes.up: {       const isArrowUp = event.keyCode === keyCodes.up;       const isArrowDown = event.keyCode === keyCodes.down; Unexpected lexical declaration in case block.
log.error('The method'+ argv.method +'is not available');    process.exit(0);    }
var frontEntity = this.getEntityAt(position);         if (frontEntity!== undefined) {
function validAddress(address) {             return address.length === 42                 && validator.isHexadecimal(address.substr(2))                 && address.substr(0, 2) === '0x' Move function declaration to function body root.
console.log('-------');
: this.toValue());   return!this.isMultiple()? value : (value[0] || ''); Unexpected console statement.
--self.current_connections;     self.trigger('connectionFreed');     if(coords.length) { Undefined variable.
var util = require('util'); var fs = require('fs'); Unused variable.
const docFromServer = await transport(mutationString, variables);
} else {       sqPop(RED_SWEEP_QUEUE, RED_SWEEP_INDEX, redActive--, idx)     } Redeclaring variable.
if (v) {                 c = current.toLowerCase().replace(/-([a-z])/g, function (a, b) {                     return b.toUpperCase(); Unnecessary escape character.
case 'toolkit' :                 return this.processPackage();             case 'code' : Unreachable code.
return L.CRS.EPSG4326;       default: Unreachable code.
node: node   }); }; Unnecessary semicolon.
Mergeatron.prototype = new events.EventEmitter(); var mergeatron = new Mergeatron(db); config.plugin_dirs.forEach(function(dir) { Undefined variable.
}         node = types.expressionStatement(           types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value)         ); Unexpected lexical declaration in case block.
return this.filterBy (orders,'status', 'closed');     } Unreachable code.
var PocketToken = artifacts.require('./PocketToken.sol') var PocketRegistry = artifacts.require('./PocketRegistry.sol') Undefined variable.
import Frame from '../../components/Frame'
export async function organization(parentValue, { name, description = '' }, { auth }) {   if(auth.user && auth.user.id) { Unexpected empty object pattern.
var msie = ua.indexOf("Trident") + window.navigator.userAgent.indexOf("Edge")!= -2;                     if (msie) { Unexpected 'debugger' statement.
return path.replace(/\\/g,'/').replace(/\/[^\/]*$/, ''); };
var bbox = layer.get("BoundingBox");                     if (bbox.length) {                         extent = ol.proj.transformExtent(bbox, 'EPSG:4326', map.getView().getProjection()); Redundant double negation.
break;         case 'SET_TRACK_OBJ': {             const tgt2 = scene.actors[args[0].value];             if (tgt2) { Unexpected lexical declaration in case block.
});     div.appendChild(dom_helper.elt("br"));    }); Undefined variable.
if (1/key === -Infinity) {     key = 0; Do not use the '===' operator to compare against -0.
function vertex ( scope, x, y, z ) {   scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );  };
else {      newFile = createFile(section[4], concat(section[5], cssReg, EOL + EOL), true);            if (options.rev == true)      { Redeclaring variable.
var self = this;       var _hook = function(rules) {         rules.forEach(function (rule) { Move function declaration to function body root.
if ((index = cache.indexOf(value)!== -1)) { Expected a conditional expression and instead saw an assignment.
this.context = new AudioContext();     this.context.onstatechange = function() {};     this.gainNode = this.context.createGain(); Unexpected console statement.
platforms_template += "<li><a href='/"+ platforms[i] +"'>"+ platforms[i] +"</a></li>\n";         } Unnecessary semicolon.
? `nab/t/chat:whatever+comments:all+all/new@${tabulator}.`     : `nab/t/chat:whatever/new@${tabulator}.`,   count: 0 })); Duplicate key 'count'.
function Hello_World() { Read-only global 'console' should not be modified.
queue[i].removeNode();         }for (var i = Things.length - 1; i >= 0; i--) {          Things[i];         }  }, Redeclaring variable.
sum += array[i].trueRange;  }  return sum; Unnecessary semicolon.
(function (DataBinding) {     ; Unnecessary semicolon.
handlers.focus = (view) => {   if (!view.focused) { Unused variable.
const nextPath = nextState.location.pathname     if (!isLoggedIn) {       replaceState({nextPathname: nextPath}, '/login') Unreachable code.
const EthereumForkArbiter = artifacts.require("EthereumForkArbiter"); Undefined variable.
return "pending";  } Unnecessary semicolon.
}     } while (oCurrentControl === oCurrentControl.getParent()); Expected a conditional expression and instead saw an assignment.
hintString = [];     var remainder = 0;     while (true) {       remainder = number % base; Unexpected constant condition.
}     return promisify(fs.writeFile)(this.path, yaml.safeDump(obj), 'utf8') Unexpected console statement.
goog.require('og.planetSegment'); og.control.MousePosition = function (options) {
return true;       if(isAdmin(userId) || (docs[0]._id && docs[0]._id==userId) || fields=='notifications'){           return true; Unreachable code.
return;           } Unreachable code.
if (mediaRecorder) {                 mediaRecorder.stop(); Redundant double negation.
traverse(ast, {pre: setupReferences}); ast.$scope.print(); traverse(ast, {pre: detectLoopClosuresPre, post: detectLoopClosuresPost}); Don't use process.exit(); throw an error instead.
_fixPanel: function() {   if (!!this.options.positionFixed && $.support.positionFixed ) {    this.element.addClass( this.options.classes.panelFixed ); Redundant double negation.
if (description && description.length > config.descriptionLength) {             description = description.slice(0, config.descriptionLength) + '…';           }
setGeometry(geometry) { } Unnecessary semicolon.
export function getTimeGridSlotEls(timeDuration) {   timeDuration = moment.duration(timeDuration)   var date = $.fullCalendar.moment.utc('2016-01-01').time(timeDuration) Redeclaring variable.
});   it('with properties', (done) => {     const vm = new Vue({ Undefined variable.
dispatch({         type: data.id          ? 'accountUser/update' Redundant double negation.
import { Switch, Route, withRouter } from'react-router-dom' import { CSSTransition } from'react-transition-group' Unused variable.
this.tree = undefined;   $http.get('data/tree.json').then(function(resp) {     this.tree = resp.data; Undefined variable.
projector.append(root).then(() => {  console.log('Attached!'); });
, events = require('../util/events') Unused variable.
test('renders RouterContainer', async () => {   const callbacks = mockCallbacks();
} else {         if(message.message === 'MAX_TIME') {             const {feed} = message; Unexpected constant condition.
Ext.example.msg('Button Click', 'You clicked the {0} button and entered the text "{1}".', btn, text);     } });
var code = reqStatus.cert? 200 : 202;       castHttp.returnJson(res, code, assignStatus(reqStatus)); Unexpected console statement.
return r;     } else if (isarr && ii<o.size) {       r=ElementImpl$impl(ii);       ii++;       return r; Redeclaring variable.
if(thisModel.refreshWidget) { Unexpected 'debugger' statement.
include_user_filter(settings); }); Unnecessary semicolon.
function createNestedViews( node, parent, nextNode, depth, data, prevNode, index, context ) {  var tokens, tmplName, parentElViews, get, from, view, existing, parentNode,   currentView = parent, Unused variable.
function checkEcc(type) {   if (subtle === undefined ||!subtle.generateKey ||!subtle.sign ||!subtle.verify ||!subtle.exportKey) {     if (subtle!== undefined) {       debug('subtle crypto not supported'); Unexpected constant condition.
var _class = "";     for (field in document) {         value = document[field];         type = this.type_of(value); Undefined variable.
var start_time = Date.now();                 set_and_verify_json_sparse(this.test, suffix, [{ Unexpected 'debugger' statement.
module.exports = {     production: function( err, req, res ) {         var body = { Unused variable.
const llex     = require('./llex.js'); const lobject  = require('./lobject.js'); Unused variable.
compare: function (actual, selector) {             return { pass: $(actual).find(selector).length } Unexpected 'debugger' statement.
test: function test() {             this.dSetting[0].id = Math.random(); Unexpected 'debugger' statement.
if (str === '\u0003') {         return process.exit(0);       } Don't use process.exit(); throw an error instead.
}, function() {             N.shutdown();         }); Don't use process.exit(); throw an error instead.
var mod = require("../") Empty block statement.
moduleDefaults.forEach( function (module) {             if (Plotly[module]) Plotly[module].supplyDefaults(layoutIn, layoutOut, fullData);         }); Redundant double negation.
list.forEach(a => {       if(a.get('type')) {         return; Redundant double negation.
{     uploaderEvents: function() { Undefined variable.
}   }   var execPlugin = require(options.value); Empty block statement.
QuestionnaireStore.emitChange();   return _errors.length > 0; Unexpected 'debugger' statement.
let res = yield rp(reqData); }); Unexpected 'debugger' statement.
this.track = function (entity) {             _.each( Unexpected 'debugger' statement.
React.useEffect(() => {     async () => {       try { Unnecessary semicolon.
return;   } Unnecessary semicolon.
case '{':             node.add(this.objltr());           break;           default: Unreachable code.
} PDF.prototype.write = function(line) {   line = Array.prototype.slice.call(arguments).map(function(arg) {     return typeof arg === 'number'? toFixed(arg, this.doc.style.precision) : arg Redeclaring variable.
function onImageLoad() {   this.classList.add('img-loaded'); Unexpected 'debugger' statement.
};                         modal.append(Dialogue[dialogue].text.charAt(counter));                         $.sounds.fx.bip.play(); Undefined variable.
function getStyleByLayout(styles) {   const testRes = isInPreset(styles,'showArrows');   debugger Unexpected 'debugger' statement.
this.$canopy.find('span').html(this.getThreshold());       if (! this.$canopy.is('visible')) {this.$canopy.fadeIn();}     }, Unnecessary semicolon.
var _ = require('underscore'); var BBPromise = require('bluebird'); var ItemSerializer = require('../item/itemSerializer'); Unnecessary semicolon.
.transition()      .duration(uv.config.effects.duration)      .delay(idx * uv.config.effects.duration)      .attr('height', function (d,i) { return -(axes.ver.scale(-csum[i]) - axes.ver.scale(-csum[i]-d.value)); }) Undefined variable.
return null       }     } Unnecessary semicolon.
console.log(likers.length);     });     console.log("\nProcess done!\n".green); Unreachable code.
"meta": { "shares": ["getResp"] },   "global": function* (ctx) {     ctx.scope.set("getResp", yield ctx.KRLClosure(ctx, function* (ctx) {       return ctx.modules.get(ctx, "ent", "get_resp"); This generator function does not have 'yield'.
var previousRange;     var selectionChangeHandler = function() {       var element        = document.activeElement; Move function declaration to function body root.
} catch (err) {     fs.unlinkSync(tmpfile)     throw err Empty block statement.
var movesWhitespace = document && (function() {   var testEl = document.createElement('div');
function CatalogLoad() {     return ( Unexpected empty object pattern.
base, digits = [];     if (/[-+]/.test(value[0])) {       value = value.slice(1); Unnecessary escape character.
var HmacSha256Sign = require('./hmacsha256sign'),   HeaderConstants = require('./constants').HeaderConstants,   azureApi = require('../utils/azureApi'); Read-only global 'URL' should not be modified.
package_json.binary.package_name.indexOf('{node_napi_label}') === -1 &&   package_json.binary.package_name.indexOf('{node_abi_napi}{napi_build_version}') === -1; } Unnecessary semicolon.
default:           result = undefined;       }
import Chat from '../chat'; Unused variable.
if (fn) {             fn.call(null); Unexpected 'debugger' statement.
org.email=  [body.email];     }     if(body.postalCode){ Unnecessary semicolon.
self.express.put(self.expressPath, self.handleRequest('DELETE')); } module.exports.AutoUri = AutoUri;
function assembleCssText(tooltipModel) {         var cssText = []; 'tooltipModel' is assigned to itself.
if (!localesDir) {   throw new Error('*** Locales folder not found for'+ initialDir +'***');  }  if (!providers[localesDir]) { Don't use process.exit(); throw an error instead.
class FindBar extends React.Component {   constructor() {     super();     this.compiledCommands = {}; Expected to call'super()'.
'exportedVariables': {},    'styleTuples': [['color', 'var(--primary)']]   }, { Duplicate key 'exportedVariables'.
if (data === /iP[ao]d|iPhone/.exec(os)) {           name || (name = 'Safari'); Expected a conditional expression and instead saw an assignment.
angular.module('code.projects', ['ui.router'])  .controller('projectsController', function ($scope, $state, $http, Projects, chatFactory, $timeout) { Unused variable.
model : DataList,         classname : "DataList",         template: Handlebars.compile(data_listTemplate), Duplicate key 'classname'.
import { hasScope } from "webiny-api-security"; import gql from "graphql-tag"; Unused variable.
if (false)     if (true) UnexpectedConstantCondition.
var create_websocket_connection = function() {         if (!("WebSocket" in window)) {             alert("Boo Hoo WebSocket is not available on this browser"); Unexpected negating the left operand of 'in' operator.
var target = isArray? [] : {}         for (i = 0; el = array[i++]; ) {             if (isArray) { Expected a conditional expression and instead saw an assignment.
return function(input) {    return $("<div>").text(input).html();     };
this[i].innerHTML = "";       }       return this; Unnecessary semicolon.
var count = 1;         instructions.forEach(function(instruction) {             output.push("<tr>"); Undefined variable.
if (!block) throw new Error('Block not found')     if (req.query.transactions) {       const transactions = await app.sdb.findAll('Transaction', { Redundant double negation.
} break;             case StretchMode.TILE: {                 statement = StretchMode.FILL;                 break; Empty block statement.
} catch (e) {     throw new Error('error in storage: '+ e.toString());   };
let data = null,         dataIndex, Unreachable code.
});   }   let rows = tbodies.selectAll('tr').data(d => d.values ); Unnecessary semicolon.
})  .test('shallow equality test on object', t => {     const nested = {foo: 'bar'}; This generator function does not have 'yield'.
})(M || (M = {}));     }) Unnecessary semicolon.
function parseRevisionInfo(rev) {   if (!/^\d+\-./.test(rev)) {     return createError(INVALID_REV);
}         if (this.options['z-index']) tp['z-index'] = this.options['z-index'] Unexpected 'debugger' statement.
copyArray( axis, resAxis, 0, 3, 3 );         for( i = 2; i < n - 2; ++i ){             v1.fromArray( axis, 3 * ( i - 2 ) ); Redeclaring variable.
});       default: Unreachable code.
return newObj;     }     function merge (target, source) { Unnecessary semicolon.
flow = XIBLE.getFlowById(message.flowId);               if (flow) { Unexpected lexical declaration in case block.
function lint(input, options, webpack, callback) {   var format = /[^.]*$/.exec(webpack.resource.split('/').pop(); Unnecessary escape character.
} catch (err) {     if (!ensurePkg) { ensurePkg = require('./ensure-package.js') }     opts.log.level = opts.loglevel Unreachable code.
var constRelId = getConstraintRelId(constraintsNode,name);              if(constRelId){                  constraintsNode.removeConstraint(constRelId);              } Empty block statement.
function publish () {} Unnecessary semicolon.
xit('async - should get a frontend view with name "test_view_async"',     browserTest((done) => { Undefined variable.
var hasPressed = this.hasState(qx.ui.form.Button.STATE_PRESSED);   var hasAbandoned = this.hasState(qx.ui.form.Button.STATE_ABANDONED);
console.log("[VoteStore.js:18] ----- onAddWitness ----->");     }     onAddBudgetItem(account_name, budget_item) {         console.log("[VoteStore.js:22] ----- onAddBudgetItem ----->"); Unused variable.
}  postdata = "username="+$.trim($("#addUsername").val())+"&name="+$.trim($("#addName").val())+"&phone="+ $.trim($("#addPhone").val())+"&pwd="+ $.trim($("#addPwd").val());  ajax( Undefined variable.
doJumpPage () {     if (this.inputPage === this.currentPage - 1) { Undefined variable.
tr.innerHTML = '<td>' + room.roomName + '</td>' +             '<td><button class="join" id="' + room.roomToken + '">Join Room</button></td>';         roomsList.insertBefore(tr, roomsList.firstChild);
self.ElementCellSet.forEach(function (cell) {                             cell.setIndexIncome(false); Redeclaring variable.
callback:function (ele,destroy) {              setTimeout(function() { Unexpected console statement.
return this.retstmt();       case 'with': Unreachable code.
zoom: 10,       markers: [],       center: {         latitude: 40.72052634, Duplicate key 'center'.
if (unexpected) { Unexpected constant condition.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/upgrade_card_reshuffle-1334013016.swf",  admin_props : false, Unnecessary escape character.
if ( isClient ) {    Object.defineProperties( document.createElement( 'div' ), { test: { value: 0 } });   } Undefined variable.
return OP_toString.call(obj) === '[object Function]'; } Unnecessary semicolon.
const { breadCrumbStyling, breadCrumbsWrapper } = classes;   return ( Unexpected 'debugger' statement.
([  (function(module, __webpack_exports__, __webpack_require__) { Unexpected comma in middle of array.
set : function(set){    set = parseInt(set) || 1000;    if(set!==priority){ Redeclaring variable.
if (plate.totalTime > 720 * 60 * 1000) {              plate.minimumTS = 10000; Unreachable code.
debug.dateFilters = [     { Undefined variable.
el.getFirst().style.display = 'none';     if(e.event.dataTransfer) $A(e.event.dataTransfer.files).each(function (f) { try { uploadManager.upload(options).load(f) } catch(e) {} })    } Empty block statement.
const cache = get('types.defs', context.cache)   const typeDef = getProp(root, cache)   if (typeDef) { Undefined variable.
attributes = Ember.merge(attributes, attrs);    Router.reopen({ Undefined variable.
console.log('Error:'+ err);     } Don't use throw an error instead.
ctx.putImageData(imgData, params.x, params.y);    }    } Empty block statement.
createJavascriptStyleSheet(file, directory);       }     });     updateDocs(files); Unnecessary semicolon.
$.each(this.bubbles, (index, elem) => { Unexpected 'debugger' statement.
bottom: Number(config.windowBottom),                          top: Number(config.windowTop),
log(chalk.red(`Could not locate.showroom folder in ${parentDir}`));     throw new Error(`Could not locate.showroom folder in ${parentDir}`);   } Don't use process.exit(); throw an error instead.
}).filter(each => isDefined(each)); } export function getCurrentCharts(chartConfig, mouseXY) { Unnecessary semicolon.
var g = g_axis.append('g').attr('transform', 'translate(' + (width - margin) + ',0)');
light.position.set(3.8, 2, 0.5);             const helper = new RectAreaLightHelper(light, 0x8e8e25);             const expected = new Object3D().copy(helper);             expected.updateMatrixWorld(); Undefined variable.
designedMinValue: 0,             designedMaxValue: 255,             designedMinStep: 1, Duplicate key 'designedMaxValue'.
}              var pushToBinding = this.getPath().append(this.target.binding, gaffa.relativePath + gaffa.pathSeparator + toObject.length);              gaffa.model.set(pushToBinding, fromObj, this);                      } Undefined variable.
c.d = -10;           a().b          =          c.d          ++; })(); 'c' is a function.
var matches;     while ((matches = regClassInterface.exec(content))) {         var result = parsePair(content, matches.index + matches[0].length, '{', '}', 1); Expected a conditional expression and instead saw an assignment.
tags = sys_tags.concat(tags);   }  }else{ Unnecessary semicolon.
function use_localserver() {  var localserver = localStorage.localserver;  if (localserver === "true") { return true; } else { return false; } Unreachable code.
i   })
for(let k = 0; k < coords.length; k++) {             const nextIndex = k + 1 >= coords.length? 0 : k + 1; 'k' is constant.
var path = require('path'); var version = require('./package.json').version;
return data.newValue!= data.oldValue; } function createInternalData(sourceMessage, message, data) { Unnecessary semicolon.
return new mongo.BSONPure.ObjectID(id)     } catch(err) {       return null     } Empty block statement.
import Breadcrumb from '../../components/layout/breadcrumb'; class Header extends React.Component { Unused variable.
});       };       socketConnection.sendChat = function (chatParams) {         ws.send(chatParams);       }; 'http:' is defined but never used.
return {...state, likedTracks: action.newfavs };     case "USER_UPDATE_START":       return {...state }; Duplicate case label.
import {     View, Text, StatusBar, InteractionManager, TouchableOpacity } from'react-native';
for(var iterator = 0; iterator < ins.length; iterator++){       ins[ iterator ].setPosition(cardinalPortPosition('E', 0.5));     }
shadowOffset:{  width: 0,  height: -5,  },     paddingBottom: Platform.OS == 'ios'? 3 : 0 Duplicate key 'elevation'.
break       case 'NEWLINE': {         let target = startBlock.type ==='span'? parent : startBlock         stateFragments.forEach(block => { Unexpected lexical declaration in case block.
.then(response => response.json())      .then(json => dispatch(userMarkedAsAttended(event, user)))      .then(() => dispatch(stopLoading())); Unused variable.
console.log(processID + "@inputs> Opening stream with apikey: " + streams['streams'][x]['apikey'] + " on port: " + streams['streams'][x]['apikey']);    messenger.streams[streams['streams'][x]['apikey']] = streams['streams'][x];
}     this._active = true;   } Unnecessary semicolon.
return;   }   this._appearances = null; Unnecessary semicolon.
}         } catch (err) {}       } Unnecessary semicolon.
} else {     proto = Object.getPrototypeOf(value)   } Redeclaring variable.
inputEvent = module.get.changeEvent(type)               $(this) Empty block statement.
it('should correctly resolve a property route with foreach ruleset', function () {         var rulesetBuilder = new Treacherous.RulesetBuilder();         var elementRuleset = rulesetBuilder.create()
overflowX:'scroll',             fontSize: 11,           }};
SoundHandler.prototype._prepare = function (config) {   defaults(config, {    loop: false, Undefined variable.
Color.fromHsl = function(hsl) {     if (hsl.indexOf('hsl(')!== 0) return null;     var result = Color.HSL_RE.exec(hsl); Unreachable code.
goog.require('cwc.utils.Events'); goog.require('cwc.protocol.bluetooth.lowEnergy.supportedDevices'); Undefined variable.
self.set('ready', true);  }
_Directory.prototype.getDir = function (cb) {     $.post('/list-d', { Unused variable.
} else {       this._finalize(null, COMPLETION_CANCEL); Unexpected 'debugger' statement.
setMute: function (args) {         args.splice(args.indexOf('--strict'), 1); Duplicate key'setMute'.
var spawnValidator = require('gardr-validator'); var getTmpDir = require('../tmpDir.js');
if (options.browsers) {         var autoprefixer = loadAndInstantiateAutoprefixer(options.browsers, 'The \'browsers\' option requires the autoprefixer module to be available. Please install it in the containing project.'); Redeclaring variable.
txt +='-->'    }   } Unnecessary semicolon.
var round;   var options = {};   options.normalizeWhitespace = options.normalizeWhitespace || false; Redeclaring variable.
res.header('Access-Control-Allow-Origin', req.headers.origin);   res.header('Access-Control-Allow-Headers', 'X-Requested-With'); Unexpected console statement.
child = child.parentElement;                 }                 return false; Unnecessary semicolon.
parse: function (response) {             return response; Duplicate key 'parse'.
if (replays) { Redeclaring variable.
return null;     } else if (duration) {       return duration; Expected a conditional expression and instead saw an assignment.
.replace(path.resolve(this.options.outDir),'')                    .replace(/^[/\\]/,'');   var levels = relativeOut === ''? 0 : relativeOut.split(path.sep).length;   var relDir = repeating('../', levels); Unnecessary escape character.
try {   for(var key in data) {    this._cache[key] = data[key]; Undefined variable.
return new Service(options); } module.exports = init; Unnecessary semicolon.
return nonce + cntstr;   } } Unnecessary semicolon.
var http = require('http') var remoteDB = require('./lib/remoteDB.js') Unused variable.
customLaunchers: batch,     reporters: process.env.CI      ? ['dots','saucelabs'] Duplicate key'reporters'.
var myNewChart = new Chart(ctx).Pie(data, {                         responsive: true                     });
c = ol_proj_transform (f.geometry.coordinates, 'EPSG:4326', this.getMap().getView().getProjection());  } catch(e) {  }  this.dispatchEvent({ type:"select", search:f, coordinate: c }); Unnecessary semicolon.
} else if (options) {             $.data(grid[0],'mvc-grid').set(options);         } Undefined variable.
var i, child, length = data.children.length;         children = entity.getChildren(); Redeclaring variable.
console.log("All tests done");         lockerd.shutdown();     }); Don't use process.exit(); throw an error instead.
".html":[11,0,9], ".html":[11,0,10], ".html":[11,0,2,5], Duplicate key '.html'.
describe('vertexVisibility(f)', () => {     it('sets vertexVisibility and returns self', () => {       const renderer = new Renderer(), Undefined variable.
today: function () {      window["DP_jQuery_" + dpuuid].datepicker._gotoToday(this.id);     },     selectDay: function () { Undefined variable.
allowed_attributes.each(function(attribute) {             if ((value = child.readAttribute(attribute)))               new_child.writeAttribute(attribute, value); Expected a conditional expression and instead saw an assignment.
var LOG_SAGAS_STYLE = "font-weight: bold"; var globalScope = navigator.product === "ReactNative"? global : IS_BROWSER? window : null; function time() { Undefined variable.
dispatch(errorActions.rejectPromiseWithLocalError(message))     }   }) Unexpected console statement.
}       return stationB.biggestChunk - stationA.biggestChunk;     } else {
import _ from 'lodash'; import uiModules from 'ui/modules'; Unused variable.
return function equalToSetMatcher(value )  {     let isEqual; Unexpected 'debugger' statement.
this.setOver(value);     };     Handle.prototype.draw = function (ctx) { Unnecessary semicolon.
} } Set.prototype.add = function (member) { Unnecessary semicolon.
log.remove(log.transports.Console);     log.add(log.transports.Console, {         colorize: true     });
var HeroesInfoParameters = React.createClass({   render: function() { Empty block statement.
return RangeKey; } Unnecessary semicolon.
message: this.errMessages.email,       regexp: /^[\w\-]{1,}([\w\-\-+.]{1,1}[\w\-]{1,}){0,}[@][\w\-]{1,}([.]([\w\-]{1,})){1,3}$/     }, options); Unnecessary escape character.
google.maps.event.addListener(marker, 'click', function () {         if (openedInfoWindow!= null) openedInfoWindow.close(); Unexpected console statement.
} else {               scaledX = x / fontSizeScale;               scaledY = 0;             } Redeclaring variable.
case '3DES':                 decryptedOutput = this.encryptTDES(key, data, true);                 break;             case 'AES': Unreachable code.
return 'id';   } empty block statement.
return x;     } Unnecessary semicolon.
document.addEventListener('DOMContentLoaded', function() {   const queryInfo = {
if (dt.indexOf("chronological") > -1 || (schema.unpack && data[0].length > 2)) {       _.each(data[0], function(cell,i){         if (i > 0 && labelSet[i-1]) { Undefined variable.
EsriLeaflet.Tasks.query = function(params){   return new EsriLeaflet.Tasks.Query(params); };
}     OH(KxA(solve[o](i0v,questionA()))); Undefined variable.
},             'api': { Duplicate key'version'.
{      id: Escape.html(instance.get(ID)),      label: Escape.html(instance.get(LABEL)),      name: Escape.html(instance.get(NAME)),      value: Escape.html(instance.get(PREDEFINED_VALUE)), Undefined variable.
this.templates[file] = swig.compileFile(file, {autoescape:!1});             else if (_fs.isdir(file)) {                 this.templates[file] = swig.compileFile(file, {autoescape:!1});             } Empty block statement.
import * as TYPE from 'actions/actiontypes'
set: function( values ) {             FormData.visitInputs( this.options.inputs, function( input, name, prefix ) {                 input.value = values[ name ]!== undefined? values[ name ] : input.value; Unused variable.
for (i in data) {     if (Array.isArray(data[i])) {      item[i] = data[i]; Undefined variable.
function createElement(html) {     let div = html.createElement('div'); Move function declaration to program root.
deps: ['app.module']                         },                         'common.dependencies': {                             deps: ['app.module'] Duplicate key 'common.dependencies'.
var byteLengthForComponentType = require('./byteLengthForComponentType'); var numberOfComponentsForType = require('./numberOfComponentsForType'); Unused variable.
var yMax = -1024;     for (j = 0; record = records[j]; ++j) {       if (record.type) { Expected a conditional expression and instead saw an assignment.
import Divider from'material-ui/lib/divider'; import {SentimentBarChart} from './SentimentBarChart';
if (key === 'file' || 'attachment' || 'attachment_content_type') return 'INVALID_TYPE'   if (key === 'face_detection') { Unexpected constant condition.
if (true === success) {             this.config.$modal.on('shown.bs.modal', function (e) { Undefined variable.
,"$1");if(i[l]||g.search("<"+e+">")>-1)continue;f=c[l];h=-1;if(!/^<\ Unnecessary escape character.
else {                             $item = this.getItemToTheRight(anchor);                         }                     } Redeclaring variable.
attributes.forEach(function(attr) {             if ((matches = attr.match(/Attr ID="(.*)" Type=".*" Value="(.*)"/))) {               state[matches[1]] = matches[2]; Expected a conditional expression and instead saw an assignment.
};   this._request(getContainerOpts, function (err, body) { Unnecessary semicolon.
var params = paramsList(params);   rule.processRules(rule, params);   rule.removeSelf(); Redeclaring variable.
case SET_STATE:     var global = JSON.parse(action.payload).global; Unexpected 'debugger' statement.
test: /\.js$/,         include: /src\js/,         use: { Unnecessary escape character.
case '3DES':                     decryptedOutput = this.encryptTDES(key, data, true);                     break;                 case 'AES': Unreachable code.
},   setClipboardData: {     options: { Duplicate key'setClipboardData'.
if(seen) {                 id = object.identity();                 obj = seen[id];                 if(obj) {                     return { Expected a conditional expression and instead saw an assignment.
return drone;   } Unnecessary semicolon.
include : [demobrowser.MDemoApplication],   members : Duplicate key 'include'.
{         url = sourceURLMatch[2]; Redeclaring variable.
module.exports = () => React.createClass({     handleChange: function (event) {         this.props.model.setValue(this.props.fieldDescription.field, event.target.value);     }, Undefined variable.
} } DasTier.prototype.initSources = function() { Unnecessary semicolon.
return async hook => {     patchMenu = patchMenu.bind(hook.app)     if(!hook.result) { return hook } 'patchMenu' is a function.
if(args.toString() === '[object BluetoothServiceHandler]') {     this._obj = args;    } Empty block statement.
this._activeTextCache = {};  } Unnecessary semicolon.
[new RegExp(/<!\[if!supportLists\]>(((?!<!).)*)<!\[endif]\>/gi), '$1']         ] Unnecessary escape character.
var GLCubeMap = function (gl) {     SamplerConfig.call(this);     this.setDefaults(); Undefined variable.
if(parameters){           _.each(parameters, function(value, parameter){ Redundant double negation.
return E48;         case 96 : Unreachable code.
};         rcloud.get_completions = function(text, pos) {             return rcloud_ocaps.get_completionsAsync(text, pos) Unused variable.
rail.on('plugin-response', function(call, options, response) {     console.log('redirect::plugin-response', response);   }); Unused variable.
var direction = this.targetRubik.getDirection(sub, this.normalize);           var elements = this.targetRubik.getBoxs(this.intersect, direction);
import {utils} from './utils'; import {config} from './config'; Unused variable.
throw Error("A password field is strictly required!");         if (this._fields.password.type!== "password")             throw Error("The type of password field should be password!"); Invalid typeof comparison value.
var classRe = /\A\.((?:[\w\u00c0-\uFFFF-]|\\.)+)\Z/g;   SelectorSet.prototype.indexes.push({ Unnecessary escape character.
case 'cmd_showUnsavedChanges':         var view = ko.views.manager.currentView;         var changes = view.koDoc.getUnsavedChanges(); Undefined variable.
instance._syncHitArea: function(children) {     var instance = this; Duplicate key '_syncHitArea'.
responseTemplateName = "paragraphResponsePreview"             }             if (this.selectedPromptType == "multipleChoice") {                 responseTemplateName = "multipleChoiceResponsePreview" Expected a conditional expression and instead saw an assignment.
var page = new boomPage($el.data('page-id')),    $el = $(el); Redeclaring variable.
module.exports = function(query, skip, maxSkip) {    skip =  _.min([config.get('maxSkip'), maxSkip, skip]);    if(skip < 0) { Redeclaring variable.
this.impl.addEventListener("suspend", () => {       this.error |= NetworkError;     }); Undefined variable.
} function socketPath(channelName, readerUuid) { Unnecessary semicolon.
app.get('/', function(request, response) {   filed(path.join(htmldir, 'index.html')).pipe(response); });
if (address!= null && address.length > 0 && address.startsWith('t'),('R')) {
],         content = [];     function cleanCollection(col, callback){ Redeclaring variable.
(function() {   var accessToken, addGroupItemToStroage, groupItems, removeGroupItemFromStorage;
import { withAsyncComponents } from "react-async-component" import AppContainer from "../app/AppContainer" Unused variable.
function addEntriesToTestSoup(entries,cb) {     sfSmartstore.upsertSoupEntries(SAMPLE_SOUP_NAME,entries,                                            function(items) { Undefined variable.
chrome.alarms.onAlarm.addListener(function(alarm){     if(alarm.name === "scheduleRequest"){       courseService.updateData(); Expected a conditional expression and instead saw an assignment.
g;       ngModel.$parsers.push(function() { Unnecessary escape character.
targetCtx = targetCtx || ctx;   if (targetX == null) { targetX = x; }   if (targetY == null) { targetY = y; }   try { Expected a conditional expression and instead saw an assignment.
} else {             selector = '[data-' + this.filters[j] + '="' + filter + '"]';           } Redeclaring variable.
case 0x0: case 0x1:             case 0x2: case 0x3: {                 let bank = 0;                 if (this._mode == 1) bank = this._hbank << 5; Unexpected lexical declaration in case block.
const swiper = vnode.context[instanceName]       if (swiper) {         swiper.destroy && swiper.destroy() Redundant double negation.
this.specialCbs[specialCb] = null;     } Empty block statement.
async openBrowser (browserId, pageUrl, configString, allowMultipleWindows) {         const parsedPageUrl = parseUrl(pageUrl); Unexpected 'debugger' statement.
import {MOD_SYM} from '../lib/constants'; import {REQUEST_SWF} from './modals/RequestSwitcherModal'; Unused variable.
return -1;   var bLength2 = [data[9], data[8], data[7], data[6], data[5], data[4], data[3], data[2]];   return converBytesToInt64(bLength2, 0, isLE);  } Redeclaring variable.
fsDestinationPath = fsDestination;         bm_sourceHelper.reset();         bm_textShapeHelper.reset();         bm_layerElement.reset(); Undefined variable.
sc.app.password = null;    sc.app.prefs = new scPrefs(default_preferences);   } Undefined variable.
action = item;       index = that.actions.indexOf(action);       if (index!== -1) { Undefined variable.
case FV_BOOK_ENTRY_CREATE_ERROR:         return Object.assign({}, state, { isFetching: false, isError: true, error: action.error, pathOrId: action.pathOrId });       break; Unreachable code.
localStorage.removeItem('focusMode');         localStorage.removeItem('mode');         _.each(_.keys(localStorage), function(key) {             if(key.match(/file\.\S+\.editorSelectRange/)) {                 localStorage.removeItem(key); Undefined variable.
mappings.retrieveAutocompleteInfoFromServer(); } Unnecessary semicolon.
function fetchEvents (accessToken, callback) {     var url = "https:     url += "&access_token=" + accessToken; Move function declaration to program root.
export function changeNightMode(value, flag=true) {     if(flag){         state.nightMode =!state.nightMode;     } Empty block statement.
var zs = [];     for (i = 0, len = endpoints.z.length; i < len; i++) {         var point = endpoints.z[i]; Redeclaring variable.
function _interopRequireDefault(obj) { return obj && obj.__esModule? obj : { default: obj }; } var floatt = /^(?:[-+])?(?:[0-9]+)?(?:\.[0-9]*)?(?:[eE][+\-]?(?:[0-9]+))?$/; function isFloat(str, options) { Unnecessary escape character.
var jm = SCHEDULER.jm; Unused variable.
const accessor = gltf.accessors[accessorKey];                 return new ElementBufferView({ Unexpected 'debugger' statement.
catch(e){     pathToPartial = `${defaultPartials}/${file}.html`   }   if (fileUtils.isFile(pathToPartial)) { Redeclaring variable.
}       ++i;       result.push(item); 'i' is constant.
first = sequence[0] || sequence;       if(first.charAt && first.charAt(0) == "@"){ Redeclaring variable.
function init ( options ) {         options = kity.Utils.extend( {}, RES_CONF, options );         if (!/^(https?:)?\/\ Redeclaring variable.
if (!(parent instanceof LocusZoom.Panel)){         throw "Unable to create legend, parent must be a locuszoom panel"; Unexpected negating the left operand of 'instanceof' operator.
return this.i18n.Unknown;                 case 1: Unreachable code.
$('#TransactionTable').empty();   for(i = 0; i < ledger.transactions.length; i++) {     var tx = ledger.transactions[i], Redeclaring variable.
import TransactionShow from './tx/show';
return callback(err);     }     if (!IsThere(path)) {         return callback(new Error("The provided path doesn't exist."));
;   var _storageCookie = window.localStorage? (document.scriptCookie ||'scripts') : null;   var _scripts = {}; Redundant double negation.
if (nestedContent[option.value]) {           return ( Redundant double negation.
var redis = require("redis");       var client = redis.createClient(data.redis.port, data.redis.server);         self.attachList(0,true); Undefined variable.
if( isArray ) {     options.subType = type.length? type : null     type = 'Array' Redundant double negation.
key_inputcircle : function(ca){   var cell = tc.getTCC();
return function ($scope, $element, $attrs, $document) {   if ($element[0].localName!== 'form') { Unused variable.
if(data[currentDropCell['row']-1]['type']=='folder'){         dropDestination = data[currentDropCell['row']-1]['path'];     }
writable: false,             value: function () {                 throw new Error("Not implemented.");             }, Unused variable.
break             }           case Tag.AssignmentExpression:             if (i.value.eff) { Expected a 'break' statement before 'case'.
this.regex.grantType = new RegExp('^(' + this.grants.join('|') + ')$', 'i'); } Unnecessary semicolon.
}; if (prod) {   delete module.exports.compilers.babel.sourcesMap; Unexpected constant condition.
import "ng-redux";  import needMapModule from "./need-map.js"; Unused variable.
});                 var result = [];                 var unsigned_headers = [], Unnecessary semicolon.
if( gid!= self.currentGearId ){      window.location.hash = KC3StrategyTabs.pageParams[0]+"-"+gid;
var pageActivated = localStorage.getItem('tvViewer_active') == 'true'; if (!pageActivated) {
if (node && node.lookupPrefix) {                         prefix = node.lookupPrefix(namespaceURI);                         if (prefix) { Redeclaring variable.
onClose() {     this.onCancel() Unexpected 'debugger' statement.
_lookupRoute : function(hash) {       if (!this._cache[hash]) { Unused variable.
import jsdom from "jsdom-global"; import { validateNode } from "../libs/validators"; Unused variable.
if(typeof elm.defaultView!== 'undefined') { elm = elm.defaultView; } Invalid typeof comparison value.
var editor = ace.edit('aceEditor');
if (yAxis) {       var ans = api.getSplits(max);       max = ans.max; Undefined variable.
return this.emptstmt();       case 'if': Unreachable code.
this.start(); } sysu.inherits(Feedback, events.EventEmitter); Unnecessary semicolon.
for (;;) {    exitLoop++; Unexpected constant condition.
import { setActiveCommunity } from './actions/communities'; import { asyncComponent } from './helpers/utils'; import LoadingIndicator from './shared/loading/global'; Unused variable.
if(steps & Warp.TO_LINE)   {     return true;   } Empty block statement.
constructor(eventType, userCallback = null) {         super();         thiseventType = eventType; Expected to call'super()'.
} else {                 console.error(err);             } Don't use process.exit(); throw an error instead.
it( 'all client have received all events', function( done ){         expect( callbackA.calls.length ).toBe( 3 ); Undefined variable.
return this.remoteAsyncCall_.bind(this, targetName, property);     }     if (this.propertyGetterMethods.indexOf(property) >= 0) {       return this.propertyGetter_.bind(this, targetName, property); Undefined variable.
} else if(this.props.mxEvent) {             name = this.props.mxEvent.getContent().body;         } else { Undefined variable.
else if (!policy) {   throw Error('Empty block statement.
this._pane = null;   } Unnecessary semicolon.
ReactDOM.render(     (false)?       (function () { Unexpected constant condition.
if ((is_ie &&!is_ie4) || is_webkit || is_ff)  addLoadEvent(smf_codeBoxFix);
});  it(`log`, function() {   assert.strictEqual(1, $.log(1, 2)); This generator function does not have 'yield'.
} catch (e) {         throw new Error(e);     } Don't use process.exit(); throw an error instead.
async function CounterAct(dispatcher) {   for await (const message of dispatcher) { This generator function does not have 'yield'.
it('Expect request method to be get', function () {                 http.getWithRetry('', function() { }, 2);                 expect(requests[0].method).to.be.equal('GET'); Unused variable.
error(`Error encountered while traversing directory: ${relative(run.dir)}`);     } Don't use process.exit(); throw an error instead.
result.status.should.equal(401)     text = await result.text()     text.should.equal(nullIdText) Redeclaring variable.
self.model.type = self.selectedResource.id;             self.service.save(self.model).then(successCallback, errorCallback);'self.service.commandUrl' is assigned to itself.
import 'jest-styled-components' import { InputField } from '..' Unused variable.
has_info : this.has_info,  asset_swf : "\/c2.glitch.bz\/items\/2011-10\/proto_rock-1319818709.swf",  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/proto_rock-1319818709.swf",  admin_props : true, Unnecessary escape character.
`);   process.exit(0); } else if (argv.version || argv.v || argv._.indexOf('version') > -1) { throw new Error(`Don't use process.exit(); throw an error instead.
CC.inputUp= data.distance / 50; }); joystick.on('end', function () {  CC.inputLeft=0; Unused variable.
initialize: function () {     }, Unexpected console statement.
} ComputedProperty.prototype = new Descriptor(); 'ComputedProperty' is a function.
return model.bind('change', function(model_) {             return view.updateView(model_, map);           }); Unexpected 'debugger' statement.
case "count":             if (_.isObject(aggregate.val)) { Redeclaring variable.
resize: render,   }; }
var start = Date.now(); Unreachable code.
elm.isolateScope().enqueueFileAddition(mockObject);         expect(elm.isolateScope().startRendering).toHaveBeenCalled();     }); Undefined variable.
me = this,    next, length; Redeclaring variable.
this.destroyed = function(data, opt, cb) {                 if (!data) return; Unused variable.
var s = Array(sizes[ix] - c.length + 1).join(' ');             if (align[ix] === 'r') {                 s = s.split(' ');             }             if (align[ix] === 'r.') {                 s = s.split(' ');             } Empty block statement.
success: function (resp) {                         me.progressSpinner.stop(); Unexpected 'debugger' statement.
return false;   } Unreachable code.
} ); export { Quaternion } Unnecessary semicolon.
import React from'react'; import { Grid } from '@material-ui/core'; Unused variable.
for (var i = 0; i < observers.length; i++) {         var observer = observers[i];
}, params);   var resultsUri = Utils.applyUriFilters(baseUri, searchParams);   return SearchModelArray.newArrayLoadedFromUri(resultsUri, resultsType); Undefined variable.
ko.punches.enableAll(); Redeclaring variable.
_this.openDBs[_this.dbname] = DB_STATE_OPEN;                 }                 if (success) {                     success(_this); Redundant double negation.
reactprops.headersOnly = {};     var DuPivot =  (function (_super) { Unused variable.
return client.connect(mock_uri)        .then(function() {           return client.createReceiver(queue, function() {});         }) Unused variable.
});         } else { Empty block statement.
}     break;    case editor.config.getKey( 'controls/translate' ):      editor.signals.transformModeChanged.dispatch( 'translate' ); Expected a 'break' statement before 'case'.
assert.strictEqual('xxx','xxx   '.trim());  });  it(`toLow`, function() {   assert.strictEqual('abc1', 'ABC1'.toLow()); This generator function does not have 'yield'.
case "ArrowFunctionExpression":         parts = [];         if (n.async) Redeclaring variable.
return E96;         case 192 : Unreachable code.
get: function() {                 return undefined;             } Undefined variable.
} catch (err) {           this.logger_.logFailure(loggerTitle, failureMessageStart + '.', err); Unexpected 'debugger' statement.
return contact; } Unnecessary semicolon.
for (var b = 0; b < baseIds.length; b++) {             baseId = baseIds[b];             baseIdMappings[baseId.toString()].indexOf(Number(relatedId)).should.not.equal(-1);           } Redeclaring variable.
run: async(message, bot, send) => {         let conf = message.guild.get("Filter", "filters");         if (Object.keys(filters).length > MAXFILTERS) return message.fail("Max filter limit reached:", MAXFILTERS);         let f = message.args[0]; Undefined variable.
stats.hasErrors() && stats.toJson().errors.forEach(e => logger.error(e));   } throw an error instead.
}    break;    case 27: Unreachable code.
} async function decline(context) {} async function pendingMemberships(context, params) { Unexpected empty object pattern.
$(function() {  paging.current = 1;  $(document).on('click', '#assets-container.asset-add-btn', function(event) { Undefined variable.
module.exports = class SchwiftyModel extends Model {     static get joiSchema() {} Expected to return a value in static getter 'joiSchema'.
}   if (raw) return raw;   if (_.isNumber(value)) return value; Expected a conditional expression and instead saw an assignment.
withConsoleApi: false; }
request.open('POST', url, true);   if(!(data instanceof FormData)){     request.setRequestHeader("Content-Type", "application/json"); Unexpected negating the left operand of 'instanceof' operator.
}     expires = "";     document.cookie = name + "=" + value + expires + "; path=/"; Redeclaring variable.
export function RestangularFactory(config) {   let configObj = { Unexpected 'debugger' statement.
try {     result = await upload(({ lengthComputable, loaded, total }) => {       if (lengthComputable) { Unreachable code.
import { Platform, Alert, ActionSheetIOS } from'react-native' export const isIOS = Platform.OS === 'ios' Unused variable.
}); }; module.exports = ImgAltIsDifferent; Unnecessary semicolon.
.action(amount =>     wallet.sendRLC(cli.network, amount, cli.to).catch(handleError('wallet'))); throw an error instead.
if (process.env.RLV_ENV && process.env.RLV_ENV === 'browser') {     ScrollComponent = require("./scrollcomponent/web/ScrollComponent").default; Unexpected constant condition.
return functionName +  "(" + argStr + ")";       } Unnecessary semicolon.
exports.default = _default; window.Undernet = Undernet || {}; Undefined variable.
getAppropriateNode(babelASTNode) {       return <generic-ast-node></generic-ast-node>;     if (babelASTNode && babelASTNode.type === 'Identifier') {       return <ast-node-identifier></ast-node-identifier>; Unreachable code.
return <ChannelsList channels={activeChannels} updateSelectedChannels={updateSelectedChannels} selectedChannelIds={selectedChannelIds} />         case 3: Unreachable code.
var _ActiveCallsPanel = _interopRequireDefault(require("../../components/ActiveCallsPanel"));
console.log(err)         if (!err){             return;         }; Empty block statement.
}         else if ( match ) {           if ( handler.doctype ) Expected a conditional expression and instead saw an assignment.
this.version = {'str': version};       if (!checkVersion.test(version)) {         throw 'Invalid Elasticsearch version[' + version + ']'; Empty block statement.
if (!changeDelegate) {    return;   } Unnecessary semicolon.
getArgMixed(name) {   if (!this.args[name]) {    throw new Error("Missing argument" + name);   } Unreachable code.
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
const backend = new Webiny.App('Core.Backend'); backend.beforeRender(() => { Undefined variable.
var file = path.join(__dirname, catalogfile);         log('Loading data from %s', file);         var readcatalog = JSON.parse(fs.readFileSync(file)); Unexpected console statement.
".html":[6,0,1,0], "BadStateHandlers_8h_source.html":[7,0,1,0,0,3,1,0,0], Duplicate key '.html'.
},       icon: {         type: String,         value: ""       };
self.imageObjects [i] = new Image();    self.imageObjects[i].src = self.fileName.replace('{i}', i);    self.imageObjects[i].onload = function() { Undefined variable.
var images = [];         for (q = 0; q < count; q++) {           transformArgs = argsArray[j + (q << 2) + 1];           var maskParams = argsArray[j + (q << 2) + 2][0]; Redeclaring variable.
.doError(() => data.$el.remove()))     ).onValue(k => $editor.trigger('input'), 0) }
_listenForClick() {     document.body.classList.remove(Selectors.KEYBOARD_CLASS); Unused variable.
return true;     } Unnecessary semicolon.
script: '({uid: document.querySelector(\'head\').innerHTML.match(/\\$CONFIG\\[\'uid\']=\'(\\d+)\'/)[1]})',             verification: (params) => params.uid,         }],         '.': [{             title: '微博博主', Duplicate key '.'.
} else {    } Unexpected 'debugger' statement.
initialize: function(options) {         this.model = (options && options.model) || new Backbone.Model(options); Undefined variable.
parentDiv.appendChild(popoverDiv);             'popoverDiv' is assigned to itself.
var apiOptIn = ((localStorage && localStorage['use_api']) ||                     localStorage.indexOf('use_api') >= 0);     console.log(apiOptIn); Undefined variable.
key = speakeasy.hex_to_ascii(key);   } else if (encoding == 'base32') {     key = speakeasy.hex_to_ascii(key);   } Empty block statement.
} else {        xfactor = 45.48385;        xoffset = 264.2620;        x = (lon * xfactor) + xoffset; Redeclaring variable.
var unit ='m';    if (App.unitSystem === 'english') { Empty block statement.
if (this.session.userId) throw new httpErrors.ConflictError('Session already active')   let { username, password, remember } = this.request.body   remember =!!remember   if (!username ||!password) {'remember' is constant.
function SelectSortBy(props) {  const {   } = props;   let selected; Unexpected empty object pattern.
}; }( OpenSeadragon )); '$.Strings' is assigned to itself.
LogicNodeWASD2.prototype.onSystemStopped = function() {    document.removeEventListener('keydown', this.eventListenerDown); Unused variable.
for(prop in proto){      v = n.getAttributeNode(prop);      v = v && v.nodeValue; Redeclaring variable.
particlePositions[i * 3] = xBounds / 2;     else if (particlePositions[i * 3] > xBounds / 2)       particlePositions[i * 3] = -xBounds / 2; 'particleData.velocity.x' is assigned to itself.
wink.addClass(btnNode, "w_button w_radius pp_popup_btn pp_popup_alert w_bg_light");     btnNodeValue = _('alertOk', this);     if (wink.isSet(opt.btn)) Undefined variable.
node.add(this.classexpr());             break;           case 'this':           case 'null': Expected a 'break' statement before 'case'.
_resizeStreetWidth()   _updateStreetName()   _createDomFromData()   _segmentsChanged()
} function _parseWhitespace(line) {   var regex = /^([\s]*)/;   var match = regex.exec(line); Redeclaring variable.
async getProvider (providerName) {         const parsedProviderName = parseProviderName(providerName); Unexpected 'debugger' statement.
let isFlying = x => {       return token.get("status_fluffy-wing")     }; Unused variable.
} catch (e) {           if (e instanceof Test262Error) throw e;         } Unnecessary semicolon.
resFolderName = "ldpi";     break;    case "m":     resFolderName = "mdpi"; Expected a 'break' statement before 'case'.
var version = scriptText.match(/jquery:\s*"([^"]+)/);    if (version) { Redeclaring variable.
const removedEvtUuid = state.findIndex((evt) => evt.uuid === action.payload);       newState = Array.of(...state); Unexpected lexical declaration in case block.
disableRow: function(rowKey) {             this.core.disableRow(rowKey);         },
describe("interruptKernel", () => {   test("sends a SIGINT and clears the kernel", () => {     const originalState = { Undefined variable.
var n1 = 0;     r = readonly(r.pipe(through.obj(write, end)));     return r; Redeclaring variable.
{    $: MeowConsole.info("Meow.Sys: Loading javaScript module "+file)        this.compContext.loadJS( file+".js" ) '$:' is defined but never used.
var nValue;         if (sValue){ Unexpected 'debugger' statement.
prepareString,   queryOne } from '../database/grakn'; Unused variable.
for (var i = 0; i < BasicTypesObjectSchema.properties.length; i++) {       prop = BasicTypesObjectSchema.properties[i];       if (prop.type == Realm.Types.FLOAT) { Undefined variable.
class ConfigServers extends EventEmitter {   constructor(binary, nodes, options) {     super();     options = options || {}; Expected to call'super()'.
var material = glBoostContext.createClassicMaterial(); material.shaderClass = MyCustomShader; Undefined variable.
var I = require('../valid') var u = require('../util') Unused variable.
case 'KNodeCreated':         node = new NodeWithPort(message);         node.addTo(graph); Unexpected lexical declaration in case block.
"volapük": "vo",   "walloon": "wa", Duplicate key 'welsh'.
let uv = vals.map(function(coord){return parseFloat(coord) || 0});         let tuv = exports.transformUV(uv, transforms.uvTransforms); Unexpected 'debugger' statement.
if (finished) {             capturedDoc.close(); Unexpected 'debugger' statement.
import gutil from 'gulp-util'; import path from 'path'; Unused variable.
var chalk = require('chalk'); var yosay = require('yosay'); module.exports = yeoman.Base.extend({ Unused variable.
constructor (name, estimatedDuration) {         super();         this._name = name; Expected to call'super()'.
return await getProductAlerts(keyword, lastUpdatedAt)     case RELATED_BRANDS: Unreachable code.
console.log(formResult);    } Unnecessary semicolon.
if (!this.editor) {             this.editor = CodeMirror($('.well', this.el)[0], _.extend(Genghis.defaults.codeMirror, {                 lineNumbers: false, Undefined variable.
};     case TYPE.BITTREX_CANDLESTICK: Unreachable code.
scope.$on('$destroy', function () {                     chart.detach(); Unexpected 'debugger' statement.
ApplicationManager.prototype.addLanguageToMenu = function(ln) {     if(this.addedLanguages.indexOf(ln) == -1){ Unexpected constant condition.
export function setZoom(transform) {  if (!isNaN(event.transform.k) &&!isNaN(event.transform.x) &&!isNaN(event.transform.y)) {   return { Undefined variable.
}  }  getTransaction(hash) {   if (!Validator.isTransactionHash(hash)) { Duplicate name 'getTransaction'.
this.source = null;
return { getIn, includes, assignIn, reduce, concat, find, join, sum, append, setIn, pick, includes, findIndex, includesValue, has, reverse, last, head, compact }; } Duplicate key 'includes'.
case 'TopicNotFoundError':     case 'DynamoItemNotFoundError': return 404;     case 'DynamoConcurrencyError': return 409; Unreachable code.
}     return Object.assign({}, state, { isLoading: true });     default: Unreachable code.
const NS_PER_SEC = 1e9; Unexpected empty object pattern.
context.fillText(item.str, x + item.delta, req.y);       x += context.measureText(item.str).width + delta;     });
var consts = require('../../constants');
while((chc=ch[++i]) && i<vIndex) {         chc.addToLayoutChanges();       } Undefined variable.
for (key in obj) {         if (obj.hasOwnProperty(key)) {             rorm.push(key);         }
function showSearchbar(triggerInput) {  searchbar.hidden = false; Undefined variable.
Meteor.call('post_approve', selectedPostId);         }else if($('#submitted_date').exists()){
const debugAggregate = async (model, pipeline) => {   for (let i=1; i<pipeline.length; i++) {     const p = pipeline.slice(0, i); 'i' is constant.
var states = this.states    for(let key in states) this._states[key] = states[key] Undefined variable.
const defs = document.createElementNS('http:       const marker = svg.createElement('marker', {         id:'arrowHead', Undefined variable.
return this.value(type)     } Unreachable code.
if (metaData.value && metaData.value.binary && typeof metaData.value.binary === 'object' && metaData.value.binary!= null) { Invalid typeof comparison value.
const R_NUMBER_COMPONENT = /(\d|\-|\.)/; const R_FORMAT_CHUNKS = /([^\-0-9\.]+)/g; const R_UNFORMATTED_VALUES = /[0-9.\-]+/g; const R_RGB = (() => { Unnecessary escape character.
this._id = 'dummy'; }; exports.FileStorage = FileStorage;
return { type: actionTypes.SET_STARTING_AGE, age };   },   setStartingAge(savings) {     return { type: actionTypes.SET_STARTING_SAVINGS, savings }; Duplicate key'setStartingAge'.
for (;;) {   i = ( i + inc + len ) % len; Unexpected constant condition.
return {     default: map(['blue', 'green', 'orange','red'], function(color) {       return { Undefined variable.
import { useState, useEffect } from'react' import Head from '~/components/layout/head' Unused variable.
cmd.stdout.on('data', function (data) {             bot.say("data:" + data, input.message.room);             console.log('stdout:'+ data);         }); Unexpected console statement.
beforeEach(inject(function (Private) {         $state = {filters:[]}; Undefined variable.
break;                 case 'publish':                                      break; Duplicate case label.
export const initialFairPrices = (formState) => {  if (!formState.initialFairPrices || formState.type!== formState.initialFairPrices.type) {   return { Redundant double negation.
exprEqual(       function() {         eff(1);         eff(2); Undefined variable.
else if (process.platform == 'win32') {        dirs.push('C:\\Windows\\Fonts');     } Unnecessary escape character.
throw name + " class does not exist. Use method \"create\" for build the structure of this class";  } Unreachable code.
describe('Gandalf()', function() {   it('should be possible to call nextStep from last step', function(done) {
) {     vError = this._getTextResources().getText("MSG_INCORRECT_APP_VERSION_ERROR");     FlexUtils.log.error(vError); Redeclaring variable.
if (handler) {     return route.handler(...handlerArgs);   } Unnecessary semicolon.
KadiraData._traceDefinitions = {}; KadiraData.mongoCluster = undefined; Undefined variable.
cop.proceed(target, highlighterRules);         if (this.specialHighlighting == "none") return this.hideError();         try { Expected a conditional expression and instead saw an assignment.
, feature = require(BASE_PATH + 'feature')  , gh = require(BASE_PATH + 'github') Unused variable.
module.directive('diff', ['$stateParams', '$HUB', '$RPC',     function($stateParams, $HUB, $RPC) {         return { Unused variable.
for(var n in dos) {         if(dos.hasOwnProperty(n)) {             var f =  dos[n];             box.on(n, function() { Redeclaring variable.
import { mount } from 'enzyme'; import { DropdownItem } from'reactstrap'; Unnecessary semicolon.
const path = require('path'); const events = require('events'); Unused variable.
return uin.reverse();   }; Unreachable code.
<View style={{padding: 10, backgroundColor: '#fcfcfc'}}>           <Text style={{color: 'black', color: 18}}>             选择您感兴趣的3-5个类别 Duplicate key 'color'.
const utils = require('./utils'); const lint = require('../app/lib/lint'); Unused variable.
: Array(3).join(processedOpts.quote);     processedOpts.defaultValue = processedOpts.defaultValue || [];     processedOpts.header = processedOpts.header!== false; 'processedOpts.defaultValue' is assigned to itself.
vPreviousParentFolder.addToTreeQueue();       }     } Unnecessary semicolon.
try {         return yield cb => fs.mkdir(folder, cb);     } catch (error) {         if (error.code!== 'EEXIST') { Unreachable code.
const run = () => {   runs = settings.runs - 1   lighthouse Undefined variable.
async function reserveToCacheTree(aHint) {   if (gInitializing ||!configs.useCachedTree)     return; Undefined variable.
define('Mobile/SalesLogix/Views/TextEdit', ['Sage/Platform/Mobile/Edit'], function() {
},   meridiem(hour, minute) {     if (hour < 12) { Unused variable.
function() {         var middleware = swagger(env.router());         expect(middleware).to.be.an.instanceOf(swagger.Middleware);       } Undefined variable.
return this.led(token.type, {type: "Identity"});           case "Lbrace": Unreachable code.
class AMQPClient extends MessagingClient {     constructor(config, name, channel) {        super(config, name, channel);         this.config = config; Expected to call'super()'.
if (bench) {       options.onStart.call(benches, new Event('start'), bench); Expected a conditional expression and instead saw an assignment.
ol_webgl.COMPILE_STATUS = 0x8B81; Undefined variable.
function parseBase64Image(imageString) {   var matches = imageString.match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);   var resource = {}; Unnecessary escape character.
})      .catch(err => {         console.log(err);       });
_regex: {     default: /^([a-zA-Z0-9_\.\-])+@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/   }, Unnecessary escape character.
import React, { Component } from'react'; import { Form, Button, Alert } from 'antd'; import { connect } from'react-redux'; Unused variable.
filterGreaterThan,   filterLessThan, } Duplicate key 'filterGreaterThan'.
import Login from 'containers/login'; import { getSetupStatus } from 'helpers/user'; import styles from './styles'; Unused variable.
var box = new qx.ui.layout.VBox();       container = (new qx.ui.container.Composite(box)).set({height : 300, decorator: "black", backgroundColor: "yellow"});       box.setSpacing(5); Redeclaring variable.
case PARTICIPANT_JOINED:         id = participant.id             || (participant.local && LOCAL_PARTICIPANT_DEFAULT_ID); Unexpected lexical declaration in case block.
} lists.distanceUnits = ['m', 'km', 'yd','mi']; lists.geocodingContainers = { Undefined variable.
if (!(this instanceof $.imgAreaSelect)) {             options.onSelectChange(img, getSelection()); Unexpected negating the left operand of 'instanceof' operator.
for( x = canvasWidth-1; x >= 0; x-- ) {             off = ( y * canvasWidth + x ) * 4;             if( pixels[ off ]!== r || pixels[ off + 1 ]!== g || Redeclaring variable.
if ((! "opacity" in _docElt.style) && "filters" in _docElt) {              styleHandlers.opacity = { Unexpected negating the left operand of 'in' operator.
handleBulkDelete(event, items) {     this.props.actions.confirmDeletion.confirm(items);     return this.props.onDelete(items.map(item => item.id))      .then((resultItems) => { Unreachable code.
};     },     invalidData: function(n) {       return n + 1; Unused variable.
if ( clampToLine ) {     t = Math.clamp( t, 0, 1 );    } Undefined variable.
Math.floor(Math.random() * 128).toString(10) + ')';         };         break; Unreachable code.
let tagName = _this.$cursorElm.tagName.toLowerCase()     _log.error('$cursorElm:'+ tagName) Unexpected console statement.
var AuthenticationContext = require('adal-node').AuthenticationContext;
bodyFontFamily: ['Open Sans','serif'],   bodyWeight: '400',   headerFontFamily: ['Open Sans','serif'], Duplicate key 'bodyFontFamily'.
GM_DocHandler.prototype.onProgressChange =  function(webProgress, request, stateFlags, aStatus) {   GM_log("> GM_DocHandler.onProgressChange");
case types.Symbol:       symDesc = getSymbolDescription(obj);       if (symDesc) { Unexpected lexical declaration in case block.
console.log(err);             }             else {                 this.root.appendChild(err);             }         }; Empty block statement.
webhookHandler(req, res, (err) => {       res.statusCode = 404; Unexpected console statement.
_values: function _values() {     return!this.props.multiple? this.state.dataItems : this.props.value;   } Redundant double negation.
impliedauth: function (storageApi, redirectUri) {       var redirectUri =  String(document.location); Redeclaring variable.
}     var eventDataView = Alloy.createController('surveys/surveyRow', {model: model}).getView(); Unexpected console statement.
var body = html + renderer_helper.getJavaScript(payload);   var html = renderer_helper.getHTML(body, header, css, javascript);   return html; Redeclaring variable.
_RotateNormal(normal){         let originalNormal = normal.clone(); Unreachable code.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-04\/trophy_egghunt-1302028751.swf",  admin_props : false, Unnecessary escape character.
(function () {     if (!('Element' in global) || Element.prototype.matches) {       return Unexpected negating the left operand of 'in' operator.
case types.ACTIVE_TYPE_CHANGE:             multipleChoiceModifiers = state.activeMultipleChoiceModifiers;             if (action.value.resetModifiers === true) { Unexpected lexical declaration in case block.
data = data[field.split('.')[k]];                }
bluebird = require('bluebird'),   references = require('../references'),   responses = require('../responses'), Unused variable.
members = extend({}, members);   members._events = extend({}, registerWidget._defaultEvents, members._events || {});   if (members._properties!== true) { Undefined variable.
if (!this.mrf.multi &&!value) {       this.refs.input.setState({ searchText: '' }); Unexpected console statement.
instance.on('finish', function () {     fs.readFile(generatedFile, function (err, data) { Unexpected 'debugger' statement.
b = parseInt(m[3], 16);         } else if ((m = input.match(/rgba?\((\d{1,3}(?:\.\d+)?),\s?(\d{1,3}(?:\.\d+)?),\s?(\d{1,3}(?:\.\d+)?)(?:,\s?(\d(?:\.\d+)?))?\)/i))) { Redundant double negation.
<div className="instructions">                     {$i18n("Select all that apply.")}                 </div>} Undefined variable.
AUDIO_VIDEO: { i_id: (0x01 << 1) | (0x01 << 2), s_name: "audio/video" },     MSRP: { i_id: ((0x01 << 3) | (0x01 << 4)) | ((0x01 << 1) | (0x01 << 2)) | (0x01 << 5), s_name: "all" } }; Duplicate key 'MSRP'.
if(state.transitions.has(eventName)) {     return transitionTo(service, event, state.transitions.get(eventName)) || machine; Unexpected 'debugger' statement.
stageView.borderRight();     this.canvas.add(stageView.borderRight).calcOffset();   };
wrapper = function(event){Unexpected 'debugger' statement.
module.exports = function xmlwriter_write_attribute (xmlwriter, name, value)  { Unused variable.
case 'EADDRINUSE':             console.error('EADDRINUSE,'+ bind +'is already in use')             break;         default: Unreachable code.
return <ast-node-identifier></ast-node-identifier>;     } Empty block statement.
}));    var code_color = d3.scaleOrdinal().domain(value_set).range(d3.range(0,value_set.size))    d3.selectAll(".base_circle").style("fill",function(d){ Redeclaring variable.
}); var render = function render(html, container) { Unused variable.
);   }   return { Unnecessary semicolon.
})     if (syncVertices instanceof Error) {       throw syncVertices; Invalid typeof comparison value.
popupBody[0].style.height =  newHeight + 'px';           } Unnecessary semicolon.
var cacheKey = sourceProto.$toolCacheKey    if(hasOwnProperty.call(fnCache, cacheKey)){     var cache = fnCache[cacheKey+methodName] Unexpected constant condition.
hermite.date.hebrew.numerals.parseYearHebrewLetters  = function( year){ Undefined variable.
variantPosition  = isVariantValid( variantPosition );      if(variantPosition) {     runValidTest(); Redundant double negation.
zipCallback();  } Unnecessary semicolon.
singleRun: true,     customLaunchers: { Duplicate key'singleRun'.
pp.views.Error = Backbone.View.extend({     template: _.template($('#template-error').text()), Undefined variable.
if (model.constructor === Reversal) {    var title = (parentModel.constructor === Reversal)? 'Other reversal' : 'Reversal';    return { Redeclaring variable.
{  this.projectionMatrix.makeOrthographic(-this.size.x, this.size.x, this.size.y, -this.size.y, near, far); };
setConfigParams(chrome.runtime.getManifest()); } else if (typeof $!== 'undefined' && $.get) {     $.get(window.location.pathname +'manifest.json', setConfigParams, 'json'); } Undefined variable.
], callback);           function insert(callback) { UnreachableCode.
case SELECT_DATE:       case COMPARE_CHANGE_STATE: {         const state = store.getState();         const selectedDateStr = state.compare.isCompareA?'selected' :'selectedB'; Unexpected lexical declaration in case block.
import StyledScreen from './StyledScreen'; import ModalScreen from './ModalScreen'; import SideMenu from './SideMenu'; Unused variable.
while (true) {       var next = walk.nextSibling; Unexpected 'debugger' statement.
if (criteria.name) {     criteria.$text = { $search: criteria.name };   } Undefined variable.
}, "~N");  Clazz.overrideMethod (c$, "renderMesh",   function (mesh) { Undefined variable.
constructor(target, selector, args, undo, meta) {     super(target);     this.selector = selector; Expected to call'super()'.
format: "polys",             sql: Duplicate key 'geocolumn'.
remove: function(token){       var className = this.element.className;       var newClassName = className.replace(tokenRegExp(token), ''); Unnecessary semicolon.
return 'V';     case 'nt_chancetstorms' : Unreachable code.
Util        = main.util,         APIURL      = '/api/v1', Unused variable.
this.sock.on('end', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () { Don't use process.exit(); throw an error instead.
var length = end-start;  for (i = 0; i < length; i++) {   subBuffer[i] = writeByte(byteData.slice(i*8, (i+1)*8)); Redeclaring variable.
return ret;     } Unreachable code.
async start() {     while (this.itemReader.next()) {       const item = await this.itemReader.next(); Unexpected constant condition.
icon.bind('click', function (event) {                 event.preventDefault(); Unexpected 'debugger' statement.
const header = props => <div className="anchor"><a name={`${props.children.replace(/[-]/g, ``).toLowerCase()}`}></a><h2 className="" {...props} /></div> const components = { Unnecessary escape character.
try {    } catch (err) {           throw err;    } Empty block statement.
Ember.Validations.Errors = Ember.Validations.Base.extend({   unknownProperty: function(property) { Undefined variable.
offset = rowStretchOffsets[row]? rowStretchOffsets[row].offset : 0;         rowHeights[row] = prefHeights[row].height + offset; Unexpected 'debugger' statement.
unit.fuel -= lastFuel;       if (unit.fuel >= 0);     } Undefined variable.
Slick.prototype.resize = function() {         if ($(window).width()!== _.windowWidth) {             clearTimeout(_.windowDelay); Undefined variable.
}  ,"statistics":{    "title":"통계" Duplicate key'statistics'.
} else {     tryCatch = this;   } Redeclaring variable.
adjustOtherProportions(remove) {     const before = this.axisBefore, after = this.axisAfter, Unexpected 'debugger' statement.
var attributeList = ['headers', 'aria-controls', 'aria-describedby', 'aria-flowto', 'aria-labelledby', 'aria-owns'];       attributeList.forEach(function (item) {         var attr = $element.attr(item); Unused variable.
layout: "images",         selected: function (res, response) {             var file = first(res);             $input.val(base_path + file.url.to_filesystem_public_url()); Undefined variable.
if (o.maskType == 'Password') {                  new MUI.Require({js: ['PassShark.js'], Expected a conditional expression and instead saw an assignment.
url: ('Home/?handler=Filter' : '/Home/Filter'),             data: data
this.render();    this.listenTo(App.ChartVariablesCollection, "add remove change reset", this.onVariablesCollectionChange.bind(this));    this.listenTo(App.ChartModel, "change", this.onChartModelChange.bind(this)); Undefined variable.
}),   visibleErrors: computed('shouldShowErrors', 'errors.[]', function(){     return this.get('shouldShowErrors')? this.get('errors') : [];   }), Redundant double negation.
return;   map.addKmlOverlay({ Unreachable code.
if (this.url!== undefined) {             $.get(this.url, function(data) {                 that.element.html(data); Undefined variable.
if (target.type === 'folder') {       const sideConfig = {} Unexpected 'debugger' statement.
for (i = 1; i < services.length; i++) {         if (services[0].uuid.length!== services[i].uuid.length) { Redeclaring variable.
var str = str.toString(), len = str.length;         for(i = 0; i < len; i++){ Redeclaring variable.
adaptor.applyStyling = function ($box, $slides, settings) {       var imgSrc = slideImageURL($slides.eq(settings.bsfaceindex || 0))        , $frag = $() Undefined variable.
}).data("ui-autocomplete")._renderItem = function (ul, item) {     return $("<li></li>")      .data("item.autocomplete", item)      .append(`<a>${item.dom}</a>`) Undefined variable.
render() {     const { sourceId, fetchStatus, fetchData, total, counts, health } = this.props;     let content = fetchStatus;
var jsbin = exports.jsbin = /jsbin.com\/[a-zA-Z0-9_]+\/[0-9_]+/i; var jsfiddle = exports.jsfiddle = /jsfiddle.net\/[a-zA-Z0-9_]+\/[a-zA-Z0-9_/]+/i; var plunker = exports.plunker = /plnkr.co\/edit\/[a-zA-Z0-9?=]+/i; Unnecessary escape character.
this.init();     }     ChoroMappings.prototype = Object.create(SourceMappings.prototype); Unnecessary semicolon.
{     if (device &&!(device instanceof Ci.IWebCLDevice))     { Unexpected negating the left operand of 'instanceof' operator.
tag_input.keypress(function(event){     var keyCode = event.keyCode || event.which;     if (keyCode == BACKSPACE) { Undefined variable.
var qr = LQ._query;        if (qr.hasOwnProperty(method)) {         if (qr.hasOwnProperty(method)) { Empty block statement.
var navSubItemName = pattern.patternName.replace(/-/g,'');
checkLayout: function (e) {             var scrollContainerRect, scrollLeft;
} else {                  conditions = options.conditions || [""];                 if(Object.prototype.toString.call(options.conditions) === '[object Array]') { Undefined variable.
if (!ondemand) {     logger.info(`${GREEN_OPEN}thetool> node process finished, tool output:`);     await tool.after(); Unexpected console statement.
styleProp = styleProp.replace(/-(\w)/g, function(str, letter) {       return letter.toUpperCase(); Unnecessary escape character.
}     return mergedState; Unexpected 'debugger' statement.
file.contents.toString(),           enforce? '})();' : '})(window, window.angular);'       ].join('\n')); Redundant double negation.
return "null";             case "[object Object]": Unreachable code.
var json = parser.parse(contents).sml; Unexpected 'debugger' statement.
const node = doc.createElement( 'div' );             if( area.hidden ) { Undefined variable.
yql = 'SELECT * FROM twitter.search WHERE'+ where.field +'='+ where.value +'AND q="' + (request.timeline) + '";';     responseHandler = this.tweetHander;    } Redeclaring variable.
if (oView instanceof View) {    var sOwner = Component.getOwnerIdFor(oView),     oComponent = sap.ui.component(sOwner);
import Entity from "./Entity"; import validate from "../utils/validate"; Unused variable.
}     id = self.apos.launder.id(id);     if (Array.isArray(locales)) { Redeclaring variable.
} else {     debuglog = function() {}; } Redeclaring variable.
function validateEmail(cadena) {     return validatePattern(cadena,'/[\w-\.]{3,}@([\w-]{2,}\.)*([\w-]{2,}\.)[\w-]{2,4}/'); } function validatePass(cadena) { Unnecessary escape character.
function init() {     requestData(100, function(data) { Unused variable.
var items = [];                     for (var index = 0; index < data.length; index++) { Unexpected 'debugger' statement.
var AudioCell = Backgrid.StringCell.extend({   className: 'audio-cell', Unused variable.
offset = offset || 0;   var endian = bigEndian? 'BE' : 'LE';   var method = buffer['readUInt' + bits + endian]; Redundant double negation.
var creep = Game.creeps[this.data.creep]     if(creep.spawning) {       return Redundant double negation.
try {         b = Class({ 'extends': b }, {             num: 'not a number' Redeclaring variable.
switch(dtype){     case "ship": return this.ship(jp_name);     default: return this.generic(jp_name);    } Unreachable code.
ISeries.prototype.genres = function($) {   throw new Error('Not implemented.'); }; Unreachable code.
regionImageryProvider = new WebMapServiceImageryProvider({             url: catalogItemUrl(catalogItem),             layers: regionDetail.regionProvider.layerName, Undefined variable.
import classNames from 'classnames' import niceTime from'src/util/nice-time' Unused variable.
title: '500 - Erreur',         message:           "Une erreur s'est produite. Veuillez rafraichir la page.",         solutions: [ Unnecessary escape character.
handler = createHandler(promise, value, onRejected);     } 'handler' is a function.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/missing.swf",  admin_props : true, Unnecessary escape character.
render(ctx) {     const drawFeaturePathToContext = geoPath()      .projection(this._project) Unreachable code.
},  cleanAllFavorites: function() {      if(!K.Admin.isMe()) return null;
try {         const mediator = new BufferGeometry();         const expected = mediator.copy(new RingBufferGeometry()).toJSON();         expect(mediator.copy(vm.$refs.g.inst).toJSON()).to.deep.equal(expected);         done(); Undefined variable.
Entry.BlockMenuScroller = function(board) {     this.board = board;     this.board.changeEvent.attach(this, this.resizeScrollBar); Unreachable code.
qx.OO.addProperty( {
function(res){                 console.log("Got response: " + res.statusCode);             });
}               }               Modules.client.displayModal(                 true, Unnecessary semicolon.
let prevValue = initialValue;   for (;;) {     const { done, value } = iterator.next(); Unexpected constant condition.
.then((htmlRes) => {    resolve(htmlRes); Unexpected console statement.
case 'app':       app = stashedSpecs.app;       app.name = props.name; Unexpected lexical declaration in case block.
toPID : function(name){   if(!this.info[name].ja){ return name;}   for(var pid in this.info){ Redundant double negation.
});   })  .config(function ($ionicConfigProvider) {     $ionicConfigProvider.html5Mode(true);   })  .config(function ($stateProvider, $urlRouterProvider, $translateProvider) { Unused variable.
return this.withstmt();       case'switch': Unreachable code.
console.log('Validating SHA "' + sha + '"');     if (! isContributor(githubUser, contribs)) {         githubClient.rejectPR(head.sha,             githubUser +'has not signed the Numenta Contributor License',             'http: Undefined variable.
chrome.storage.local.get(null, function(items) {         if(items["m_quotes"] == null) { Undefined variable.
} else {                     this.object.Shape[specialOption[object.type][item.attr]][item.attr] = item.source + item.incre;                 } Undefined variable.
this.height = height || 100;     this.resolution = resolution || CONST.RESOLUTION;     this.scaleMode = scaleMode || CONST.SCALE_MODES.DEFAULT; Unnecessary semicolon.
const pdfW = pdf.internal.pageSize.width;         const pdfH = pdf.internal.pageSize.height;
function getPeerConnection(id, room) {   if (PeerConnectionStore[id]) {     return PeerConnectionStore[id]; Redundant double negation.
query.limit(1).sort({timestamp:-1}).toArray(function(err, res){        out(err, res); Unexpected console statement.
var byGroup = typeof byGroup!== 'undefined'? byGroup : false;          var stack = d3.layout.stack().offset(stackOffset);
},         zh_cn: {             reload: '重新加載', Duplicate key 'zh_cn'.
batch = batch.crop(100, 150);                                 break;                             case 1:                                 batch = batch.scale(1.1, 0.66); Duplicate case label.
var appState = ncms.Application.APP_STATE;                          var req = new sm.io.Request(ncms.Application.ACT.getRestUrl("pages.check.rights", Undefined variable.
else {   var render = {};   var win = function () {     return window; Move function declaration to program root.
try {             outbox = require('./outbox');         } catch(e) { Redeclaring variable.
case "Notice":       color = "blue-inverse";       break;     case "Warning": Unreachable code.
for(var idx = 0; idx < this.Parsers.length; idx++) {      var parser = this.Parsers[idx]; Redeclaring variable.
console.log('Ignoring input as is null')     return resolve(uid)   }
this.orient = o[0];   this.normal = gfx3d.vector.normalize(o);  }, Undefined variable.
var TestClick = register("test-events", [HTMLElement, Widget], { Read-only global 'global' should not be modified.
var dynamicTyping = _config.dynamicTyping || false;         if (typeof dynamicTyping == 'function') { Unexpected 'debugger' statement.
} catch (err) {     t.regex(err.toString(), /TypeError: Expected string but assigned 42 of type number to property "name" on author/)     t.is(err.joiError.isJoi, true) Unnecessary escape character.
} else if (matches[5]) {      match_func = matches[5].trim();     }  else if (matches[7]) { Redeclaring variable.
case DCS_CHANNEL_5_OFF:       case DCS_CHANNEL_6_OFF: {         const channel = sampleId - DCS_CHANNEL_0_OFF;         this._callbackChannelOff(channel); Unexpected lexical declaration in case block.
const glowGeometry = new CylinderGeometry(       outerRadiusSize,       outerRadiusSize,       rescaleNumber(0.00008), Unreachable code.
} catch (err) {             log.error(err); Unexpected 'debugger' statement.
MapService.getVersions(req.param('mapId')).then((versions) => {             res.json(versions);         }).catch((error) => {             sails.log.error("Error getting versions");             res.badRequest(); Unused variable.
for (var t in tokens) {   if (tokens.hasOwnProperty(t)) {    tokens[t].regexp = expandPatternToRegExp(tokens[t].pattern, expansion);    tokens[t].count = 0;
var info = [];     var fix_commits = _.filter(commits, function (c) { Unexpected console statement.
expect(e.loaded).toEqual(jasmine.any(Number));       expect(e.total).toEqual(jasmine.any(Number));       xhr.getReadyState().then(function(readyState) { Unnecessary semicolon.
editActivity: function () {             app.mobileApp.navigate('#components/activitiesView/addEdit.html?id=' + this.currentActivity.Id); Undefined variable.
if (!/^\w+:\/\                     url = 'http: Unnecessary escape character.
for (         var i = 0;         if (elements[i]) {           tags.push(elements[i++].getAttribute('aria-label')) Redeclaring variable.
if (embed) {       return embed.metadata; Unexpected 'debugger' statement.
var wifiscanner = require('node-simplerwifiscanner'); var log = require('../log').logger('wifi'); Empty block statement.
console.log(h_triple);  }, Unexpected 'debugger' statement.
const encode = function(imgData, quality) {   if (typeof quality === 'undefined') quality = 100; Undefined variable.
timeout = this.options.timeout;             }             var key = this.key || name; Unnecessary semicolon.
var callback = sinon.spy();         var disposable = queue.get([], [['one', 'two']], callback); Unexpected 'debugger' statement.
import JassEnum from './enum'; export default class JassAttackType extends JassEnum {} Unnecessary semicolon.
console.log('verifying:'+ token);   that.storage.verifySubscriber(token, callback); Unexpected console statement.
exports.precompile = function(){   return "Version: " + Handlebars.VERSION + " - 'Some random text here'"; };
if (exist) {         return _yapi2.default.commons.log('runtime/init.lock文件已存在，请确认您是否已安装。如果需要重新安装，请删掉runtime/init.lock文件');     } Unreachable code.
* run(context) {     const testArgs = this.formatTestArgs(context);     console.log('%j', testArgs); This generator function does not have 'yield'.
{       try {         const check = checkInvoicePayable({ Unreachable code.
function _replaceMinus(str) {   return str.replace(/-/g, '\\-'); }
, '$1');     site = new Site({
value = JSON.parse(value);                     }                     catch (err) {                         logger.error(err);                     }                 } Empty block statement.
} else {      return path + ".undefined";     }
} finally {       if (_didIteratorError30) {         throw _iteratorError30;       } Unsafe usage of ThrowStatement.
setTimeout(() => {     if (token) {       cb({ Redundant double negation.
for (var i = 0; i < ips.length; i++) {             if ((match = IP.IPv4_REGEX.exec(ips[i]))) {                 ip = IP._str_to_ipv4(match[1]) >>> 0; Redundant double negation.
load('test/mjsunit/mjsunit.js'); load('test/mjsunit/wasm/wasm-module-builder.js'); Undefined variable.
const mappedTree = constructTree(mappedLabel, mappedChildren);       pathMap.set(stringify(path), mappedTree); Unexpected 'debugger' statement.
$.getJSON('/js/publicsettings.json', '', function(data) {         log.push('Data successfully retrieved from publicsettings.json'); Unexpected 'debugger' statement.
publicPath: "/assets/",     filename: "main.js"   }, Duplicate key 'publicPath'.
class User extends Entity {  constructor (...options) {   super()   } Expected to call'super()'.
var _ActiveCallsPanel = _interopRequireDefault(require("../../components/ActiveCallsPanel"));
function openChangelogPage() {   chrome.tabs.create({
if ( typeof NetIP!== 'function' ) {    NetIP = function()  { Move function declaration to program root.
editable: false,       layout: FormLayout.ResponsiveGridLayout      }); Undefined variable.
function shortFormatDateHTML(date) {   return moment(date).format("dd M/D[<wbr />]@h:mm"); } Unreachable code.
if(joint) { Expected a conditional expression and instead saw an assignment.
minify: {       exclude: [".min."]     } Unnecessary escape character.
this.texture = null; } Unnecessary semicolon.
if (err == false) {     fatalError('Specification file is not valid:'+ JSON.stringify(validator.getLastErrors()));   } else { Don't use process.exit(); throw an error instead.
var material = new GLBoost.ClassicMaterial();   material.shader = new MyCustomShader(GLBoost.CURRENT_CANVAS_ID);   var texture = new GLBoost.Texture('resources/iceball.png'); Undefined variable.
it('renders a input with type radiobutton and a value of 1', () => {       let radiobutton = TestUtils.scryRenderedDOMComponentsWithTag(instance, 'input')[0]; Unexpected 'debugger' statement.
logAddMorph: function (morph, optMorphBefore) {         var goesToUnloggable =!this.isLoggable &&!this.isHand Unexpected 'debugger' statement.
function evalFunc(func, args) {   if (!(func in EVAL_FUNCTIONS)) {     throw "Unexpected function in eval " + JSON.stringify(func); Unexpected negating the left operand of 'in' operator.
const { connections } = options;   if (!Array.isArray(connections) || connection.length === 0) {     throw new Error("The `connections` option array needs to be provided with at least one connection.");
const response = await Promise.race([this.interface.waitKey(), this.requestHalt])
document.removeEventListener('mousemove', handleMouseMove);            } Undefined variable.
_.each(group.polygons, function(polygon) {       var line = geometry.decodePath(         polygon.points Undefined variable.
import { warn } from 'core/util/debug' import { topmost } from 'ui/frame' import { android } from 'application' Unused variable.
}  ,"statistics":{    "title":"Statistici" Duplicate key'statistics'.
} else {       socket.log("Access to user search denied. "+socket.logviewer_token);      } Unexpected console statement.
static isSignedIn() {         return!!AuthStore.getToken();     } } Unreachable code.
let replacedPlaceHolder = false;    for (;;) {     const idx = findIndex(params); Unexpected constant condition.
it('returns icon list', function(done) {             initNodes({ Unexpected 'debugger' statement.
client.authDriver(new Dropbox.AuthDriver.Popup({                      receiverUrl: "html/dropbox-oauth-receiver.html",                      rememberUser: true Undefined variable.
throw err;         }, Unreachable code.
return this._parseVecterParam(type, param);             }             return false; Unreachable code.
Redeclaring variable.
} catch (err) {             console.warn(`effect not implemented: ${channel.cmd.toString(16).padStart(2, '0')}/${channel.data.toString(16).padStart(2, '0')}`); Unexpected 'debugger' statement.
client.eth.call({ to: bridge, data: call }, (err, nSigs) => {     if (err) { cb(err); } Unexpected console statement.
function positiveRange(a, b, inc, fn, isLetter) {   var arr = [];   a -= inc; Redeclaring variable.
curKeyId = (mod? "c" : "") + code;       if (sel.inverted && movementKeys.hasOwnProperty(id)) {         var range = selRange(input);
console.logRed('Error: '+ e);  throw an error instead.
action.log(shapeshifter.chalk.red(error.message));       }); Don't use throw an error instead.
Unnecessary escape character.
for (var i = 0; i < this._implementNames.length; ++i) {    var baseClass = this._implementNames[i].getValue();    var success = true; Redeclaring variable.
var matchIndex = 0;       while ((match = regex.exec(text))) {         matches.push(this.prepareMatch(match, matchIndex)); Expected a conditional expression and instead saw an assignment.
let output = path.join(outputDir, basename)   console.log('Converting'+ basename + '...')   const bundler = browserify(es6File) Unexpected console statement.
var b2 = Class({ 'implements': [i1, i2] }, {         num: 1, Redeclaring variable.
for(var i = 0; i < connectionCount; i++) {         reauthenticate(self, connections[i], function() {           connectionCount = connectionCount - 1; Unused variable.
setTopBarText: true,     switchTab: true,     startPullDownRefresh: true, Duplicate key'switchTab'.
const handleHideTxs = (state) => {   const txs = Set( Unexpected empty object pattern.
var iconSearch = $('.icon-search');   $('#search').hover(function() {    $(iconSearch).toggleClass('search-highlight');   });
grunt.file.expandFiles({cwd: base}, '*').join(', ') + '.\'');   process.exit(12); } throw an error instead.
}     this.beatLoader.generateBeat({ Unexpected 'debugger' statement.
var fontFamily = this.fontFamily;             return content.replace( /\\([a-zA-Z,{}]+)\\/g, function ( match, input ) { Unexpected 'debugger' statement.
browserName = /edge\/(\d+)/i.exec(userAgent); Unexpected 'debugger' statement.
$('.conTitle').html(contitle)                 $('nav .mainbav').eq(arr[0]).children('a').next().show(); Unused variable.
var searchRes  ,scrapePtrn = /\[\[([^:]+)\:\:([0-9]+)\]\]/gi  ,resultHTML = markdown.toHTML( raw )
const groupList = this.userRelatedGroups.map((group) => {       return (         <Button onClick={this.onClickGrantGroup(group)} bsClass="btn btn-sm btn-primary">{group.name}</Button>       )     }); Unreachable code.
for (i = 0; i < 255; i += 1) {     LOG_TABLE[EXP_TABLE[i]] = i; Redeclaring variable.
export async function organizationByUser({ auth }) {   if(auth.user && auth.user.id) { Unexpected empty object pattern.
case 'names':       for (p = 0; p < value.length; p++) {         format += value[p].replace('/', ''); Redeclaring variable.
$('.nav-tabs').stickyTabs(); }); Undefined variable.
api.getConfiguration().then(function (response) {             $scope.configuration = response.name; Unexpected 'debugger' statement.
switch (action.type) {       case GET_CURRENT_USER_SUCCESS: {         let newLoginValue = isNewLoginValue         isNewLoginValue = false Unexpected lexical declaration in case block.
_.merge(o, matter(o.content, options));     next(null, o); 'o.content' is assigned to itself.
return makeModuleMap(moduleName, relModuleMap).fullName in defined;             },             specified: function (moduleName, relModuleMap) {                 return makeModuleMap(moduleName, relModuleMap).fullName in specified; Duplicate key'specified'.
const fs = require('fs'); const $ = jQuery = require('./../bower_components/jquery/dist/jquery.js'); require('./../bower_components/jquery-csv/src/jquery.csv.js'); Undefined variable.
{                         if (err.code=='notfound')                           p.trigger.updatedsinceread(); Unexpected constant condition.
return!!getLanguageByCode(code); } Unnecessary semicolon.
url: "ws:         url: "/fs-moni/live/events",
this.close();             osmEdit.createNode()            .then(function (nodeId) { Unreachable code.
pattern: '(m|f){2}c',     rel: 'parent sibling'   }, Unnecessary escape character.
$scope.templatesByStatus = $scope.templates[status];             if (typeof $scope.templatesByStatus === 'undefined' ||                 ($scope.templatesByStatus && $scope.templatesByStatus.length === 0)) { Invalid typeof comparison value.
familyTokens = parsed.family.toLowerCase().split(' ')     parsed.variations.forEach(function(v){         res.push(familyTokens.concat(v).join('-')) Unused variable.
import TextLoop from'react-text-loop'; import Section from '../components/Section'; Unused variable.
var rows2 = [];           for (j = 0; j < series.length; j++) {             rows2.push([]); Redeclaring variable.
module.exports = Cylon.Drivers.I2C.Mpl115A2;
setDirty: function() {         wm.job(this.getRuntimeId() + "_hasChanged", 500, dojo.hitch(this, function() { Unexpected 'debugger' statement.
.catch(function (err) {         context.done(err);     }); Unreachable code.
left: 0,             'z-index': '1000' Duplicate key 'display'.
import { storiesOf } from '@storybook/react-native'; import { Button, View, Text } from'react-native'; import App from '.'; Unused variable.
, Event = require('../models/event')    , access = require('../access'); Redeclaring variable.
UNDO_REDO_STATE_STATUS,  Commands,  MappingSide, Duplicate key 'UNDO_REDO_STATE_STATUS'.
return n;  }, "java.io.InputStream");  Clazz.defineMethod (c$, "readTrailer",    function () {  return true; Undefined variable.
source = source.replace(/\/\/11\.url\.cn\/now\/([^"'\)\`]+)(["'\`)])/g,'Unnecessary escape character.
grammar = [   Rule('A', [NT('A'), NT('A')]), Redeclaring variable.
return i;   }   function deltaHue(h1, h0) { Unnecessary semicolon.
function noop(){} let Link = props => ( Unnecessary semicolon.
R._engine.setSize = function (width, height) {             this.width = width || this.width; Unexpected 'debugger' statement.
.toString('utf8')        .should.match(/ref: refs\/heads\/testBranch/); Unnecessary escape character.
import { connect } from'react-redux' import { withNavigation } from'react-navigation' Unused variable.
} else {             console.log(readNodeVersionForOlder(rmmvPath)); Unexpected console statement.
where: {     name: tagName    };
return '&#'   })   txt = txt.replace(/ﬂ°/g, function () {     return '&' Unnecessary escape character.
return {type: "Pipe", children: [left, right]};           case "Or": Unreachable code.
parse: function (response) {         response.forEach(function (item) {             var start = new Date( Unused variable.
} }(function (Backbone, _) {   Backbone.Attributes = _.extend({}, Backbone.Events);   var modelMethods = ['get','set', 'unset', 'clear', 'has', 'changed', 'hasChanged', 'changedAttributes', 'previous', 'previousAttributes']; Undefined variable.
setDimensionGroupById : function (id, group, widget, model) {          this._refreshPreview(widget, model);          return model.setDimensionGroupById(id, group);      }, Unreachable code.
that.setData({           viewHeight: res.windowHeight - 40 - (that.answerKey? 44 : 0)         }); Redundant double negation.
c.y = c.y || scaleLinear().range([c.height, 0])   c.xAxis = c.xAxis || d3.axisBottom().scale(c.x)   c.yAxis = c.yAxis || d3.axisLeft().scale(c.y)   c.drawAxis = function(){ Undefined variable.
options.yaw = options.yaw || 0;     options.clickable = options.clickable || false;     options.class ='marker'; 'options.clickable' is assigned to itself.
const self = this;     console.log(`Starting to encrypt event for ${self._roomId}`);
|| typeof value == 'boolean'       || value == null       || value == undefined Invalid typeof comparison value.
});     if (NODE_TYPE[doc.nodeType] === 'Document' && doc.childNodes.length > 1) {       throw new SyntaxError('Empty block statement.
destPoint : {},       destMarker : this.props.destMarker,       routePrirority : this.props.routePrirority, Duplicate key 'destPoint'.
}  return ES5internalSlots['[[DefaultValue]]'](input, preferredType); }; Unreachable code.
} else {         rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)). Redeclaring variable.
return x;   } Unnecessary semicolon.
}       repository = JSON.parse(localStorage.getItem("TemplateRepository")) || { Templates: {} }; Unused variable.
showDropDown(!navHandler.classList.contains('on'))   })   document.body.addEventListener('click', () => {     showDropDown(false) Unused variable.
crypto.randomBytes(8, function(err, bytes_slow_buf) {       if (err) { return cb(err); }       unsigned_int = Buffer(bytes_slow_buf).readUInt32LE(0); Undefined variable.
} else if (tagName === '@member') {           let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value, true, true, false);           name = paramName; Unused variable.
return 'K';     case 'nt_hazy' : Unreachable code.
console.log("finished touch");       if (a == 0)          stifle(e); Unexpected constant condition.
} else {    try { source = eval('(' + TheTextBox.innerHTML + ')'); } catch (e) { return erra (e); }   }   if (Object.prototype.toString.call(source)!== '[object Object]') { Unnecessary semicolon.
throw 'Provide remote URL to log errors remotely';     } else if(remoteSettings.additionalParams && typeof remoteSettings.additionalParams!== 'object') { Unreachable code.
toStandardMinutes() {    return (days * 24 + hours) * 60 + minutes;   }   plus({days, hours, minutes}) { Undefined variable.
date.setMinutes(date.getMinutes() + part);    }    if (! isNaN(part = Number(to.hours)) ) {     date.setHours(date.getHours() + part); Expected a conditional expression and instead saw an assignment.
}       break     case 'PANEL_CREATE': {       const { payload } = action Duplicate case label.
:!!args.matchesFiles;   this.matchesDirectories = args.matchesDirectories   ? false Redundant double negation.
timeEntries.push(this._createTimeEntry(geojson[i]));       } Unnecessary semicolon.
}         tmp = new Uint8Array(bytes.length + leadingZeros);         for (i = 0; i < bytes.length; i++) {             tmp[i + leadingZeros] = bytes[bytes.length - 1 - i]; Redeclaring variable.
findAll: function (callback) {       var sql = `       select
to: data.path.clone().stringify(),                                 easing: Chartist.Svg.Easing.easeOutQuint                             };
form = {                       type: "object", Redeclaring variable.
return value;   } Unnecessary semicolon.
data = getLocale(key);       console.log('getset value: ', data);     } else {
i++;   } Unnecessary semicolon.
}       self.lr.resume(); Unexpected 'debugger' statement.
import React from'react'; import {mount} from 'enzyme'; import Baobab from 'baobab'; Unused variable.
obj.changeStream = true;             } catch (ex) {                 logger.error(ex);             } Empty block statement.
class Sock extends EventEmitter {   constructor(ws) {     super()     this.ws = ws Expected to call'super()'.
parser.setAttribute("href", url);         parser.href = String(parser.href);         var isCrossDomain = parser.host!== location.host; 'parser.href' is assigned to itself.
deactivate(map)       expect(map).to.emit([{current: 0}])     }) Undefined variable.
settings.family = [settings.family];                 }                 for (i = 0; i < settings.family.length; ++i) {                     this.family.push(settings.family[i]); Redeclaring variable.
} else {                         var checkTagOrTerm2 = Utils.checkTagOrTerm(object.typeName);                         if (!checkTagOrTerm2.term) {                             tagTermList.push(object);                         } Redeclaring variable.
for (i=0, len=handlers.length; i<len; i++) {           handlerObj = handlers[i]; Redeclaring variable.
const parts = (phone.name || '').split(/\./);         set(phone, 'displayName', `${_.capitalize(_.first(parts))} ${parts.slice(1).map(p => (p || '').toUpperCase()).join(' ')}`);       }); Undefined variable.
} else if (match && match[1]) {                 target = doc.getElementById(match[1]);             } Redeclaring variable.
result = true;           iterate(function(child) {             if (node === child) {
"global": function* (ctx) {     ctx.scope.set("eci", yield ctx.KRLClosure(ctx, function* (ctx) {       return yield ctx.modules.get(ctx, "meta", "eci");     })); This generator function does not have 'yield'.
if (!code &&!t._ok && (!only || name === only)) {                     exit(1);                 }             }); Don't use process.exit(); throw an error instead.
this._resultNameCacheCount = 0;     }     WsWorkunits.prototype = Object.create(Comms.prototype); Unnecessary semicolon.
coordinates.forEach(function(line){         str += getLineString(line);       }); Undefined variable.
return parsedDom.getElementsByTagNameNS(xml.parserErrorNS, PARSER_ERROR_TAG).length > 0;     } catch (e) {       return false;     } Empty block statement.
var menuOpts = [];             var createMenuOpt = function(x,y,opt) {                 opt.el = menu.append("div") Move function declaration to function body root.
multisigFees: 'Multisig Fees',      issuer: 'Issuer' Duplicate key 'issuer'.
const router = require('express').Router() const { User, Challenge } = require('../db/models')
type: 'GET_SEARCH_RESULTS',     promise: fetch(`${apiURL}/articles?q=${keyword}&_limit=${limit}`)   };
console.log('Received'+ articles.length +'unique articles for "' + company + '" from Discovery');     data = {       company : company, Redeclaring variable.
import theme from './components/themeConfig/themeConfig';
var entityNameRegex = /https:\/\/duckduckgo.com\/([a-zA-Z0-9\)(_%]+)$/         if (entityNameRegex.test(item.FirstURL)) { Unnecessary escape character.
d = (d<1000)? d.toFixed(0)+' m' : (d/1000).toFixed(2)+' km';     t = f.get('durationT')/60;     console.log(f.get('duration'),t) Redeclaring variable.
if(options.isDropdown) html = '<ul style="display: none;" class="shareMenu">' + "\n";    else html = '<ul class="shareMenu">' + "\n"; Redeclaring variable.
function parseUserProvidedColor(c) {   let testElement = document.createElement('div'); Unexpected 'debugger' statement.
l = 0.5 * add;     if (l === 0) { Redeclaring variable.
Content.create = function(contentJson) {         for (var i in Content._contentTypes) {             if (Content._contentTypes[i].canParse(contentJson)) {           return new Content._contentTypes[i](contentJson); Undefined variable.
define(function (require) {     'use strict'; Unused variable.
exports.showKitten = function showKitten(result) {   var title = result.titleHtml.replace(new RegExp('<\/?\w[^>]*>', 'g'), '');   var snippet = result.snippetHtml.replace(new RegExp('<\/?\w[^>]*>', 'g'), ''); Unnecessary escape character.
createTest : function (config) {         var test = new Fiesta.model.TestCase(Ext.apply(config || {}, { Unexpected 'debugger' statement.
export class  SCDomElement { Unused variable.
}     throw new Error(chalk.red(`> Config file does not exist at ${tildify(configPath)}`))   } Don't use process.exit(); throw an error instead.
Polymer.cs.behaviors.csNavTabs = [     Polymer.cs.behaviors['this'], {       hostAttributes: { Undefined variable.
} );    var Sub = AFrame.Class( Super ); Undefined variable.
System.register(["aurelia-framework", "aurelia-i18n", "../services/index", "dompurify", "jquery"], function (exports_1) {     "use strict"; Undefined variable.
label: 'Change value',           action: function(args) {             var name = args.data.jsonObj.name; Unexpected 'debugger' statement.
if(rule.href){              var parentStyleSheet = this.sheet;        var childSheet = rule.styleSheet || rule; Redeclaring variable.
var MockHolding = artifacts.require('MockHolding');  var MockApproval = artifacts.require('MockApproval'); Unused variable.
} } var Modul_colorwheel = function () { Unnecessary semicolon.
})(OSjs.Helpers.DefaultApplication, OSjs.Helpers.DefaultApplicationWindow, OSjs.Core.Application, OSjs.Core.Window, OSjs.Utils, OSjs.API, OSjs.VFS, OSjs.GUI);
placementKeys = ['nw', 'n', 'ne', 'e','se','s','sw', 'w'],    placement, rotation, steps; Redeclaring variable.
shaka.extern.Error = function() {}; Undefined variable.
window.fbAsyncInit = function() {     var parent = Atomate.auth;     FB.init({ Unreachable code.
var testAutomation = function( options ) {  options = options || {};  var subProcesses = []; Redeclaring variable.
export default zora()  .test('compose table factory', (t) => {     const data = []; This generator function does not have 'yield'.
const { ERROR_MESSAGE } = rule; const ruleTester = new RuleTester({ Unexpected 'debugger' statement.
if (analysis) {         const color = rgbToHex( Redundant double negation.
self.state.loadQueue = self.state.loadQueue.concat(cellIndices);         }       } Unnecessary semicolon.
},   messageView: {
map.add_layer(layer);                         console.log(map.toXML()); Unexpected 'debugger' statement.
import sinon from'sinon' import chunkify from '../index' Unused variable.
let {range} = editor;         let matches = text.match(/(^|[^*])\*([^*].*?)\*$/);         if (matches) { Unnecessary escape character.
logUpdate(`\n${pos} Maybe \n\n${pre} ${dim('Broken link')} or\n${pre} ${dim('Media shared by private profile')}\n`);  end(1); }; Don't use process.exit(); throw an error instead.
export default function Login(props) {   const prevPath = props.history.pathname;   const baseRedirectUrl = `${window.location.protocol} Unexpected 'debugger' statement.
r.on('raw', function (rect) {    !initialized && handleConnection(rect.width, rect.height); Unexpected console statement.
if (!(path.extname(file) in fileTypes)) return false; Unexpected negating the left operand of 'in' operator.
} else {                     regex = "<.*(?!<\/option>)\>";                 } Unnecessary escape character.
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
} finally {     if (_didIteratorError) {       throw _iteratorError;     } Unsafe usage of ThrowStatement.
result = CSSLint.verify(value);         this.sender.emit("csslint", result.messages.map(function(msg) { Undefined variable.
var h;   while((h = this._notifyConnections.pop())){ h.remove(); } Expected a conditional expression and instead saw an assignment.
const app = new Koa(); app.use(function (ctx) {   ctx.body = 'Hello Pandora.js'; This generator function does not have 'yield'.
'Background color'        : 'لون الخلفية',  'Indent'                  : 'مسافة بادئة',   'Outdent'                 : 'مسافة خاتمة',   'Format'                  : 'النتسيق', Duplicate key 'Indent'.
function Test262Error(message) {   this.message = message || ""; } function assert(mustBeTrue, message) {     if (mustBeTrue === true) { Undefined variable.
_modifyIconHeight : function(propValue, propOldValue)     { Unused variable.
this.upstreamListeners[type] = upstreamListener;             for (i = 0; i < this.upstream.length; i++) {                 this.upstream[i].on(type, upstreamListener); Redeclaring variable.
case "FunctionExpression":             return new astExpression.FunctionExpression(node.loc, transform(node.id), transform(node.params), transform(node.body)); Unexpected 'debugger' statement.
var consoleNode, msie,     NOOP              = 'noop', Unused variable.
var parts = this.getParts_();   for (i = 0; part = parts[i]; i++) { Expected a conditional expression and instead saw an assignment.
import * as aN from './authentication';
return Session.get(stringId).profile.country.name +'' + Modules.client.searchJSON(geoJSON.country, Session.get(stringId).profile.country.name)[0].emoji;       } Unreachable code.
Git.readFile('alle/europaweite-veranstaltungen-' + year + '.md', 'HEAD', function (err, contents) {       callback(null, err? {} : eventsToObject(contents, year));     }); Redundant double negation.
math.unary = function unary() {   if (arguments.length!= 1) { Undefined variable.
exports.exception = function (exception) {   console.log(exception.getStack()); };
}   }   processItem(this.currentItem); Unnecessary semicolon.
return x === null? NaN : +x; } Unnecessary semicolon.
var regex = /%%|%(\d+\$)?([\-+\'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuidfegEG])/g;     var a = arguments, i = 0, format = a[i++]; Unnecessary escape character.
results = request.doSearch(); Redeclaring variable.
export class TargetWithNoDropResult extends DropTarget {   constructor() {     super();     this.didCallDrop = false; Expected to call'super()'.
_clearLoadingState: function(overlayMask) {         this._state.overlayMask = overlayMask;     }, Unused variable.
const currentRunning = String(event.target)      .replace(/(.*)\ x/, (match, p1) => `*${p1}* x`)     debug.log(currentRunning)
case 'createForeign':                                       return createForeign(db, action['table'], action).catch(softThrow);                                       break; Unreachable code.
return await Promise.all(promises)      .catch(e => { Don't use process.exit(); throw an error instead.
proxy, port, files, startPath: '/', logPrefix:'snuggsiツ' } Duplicate key 'files'.
update: function(value) {         var options = { Unexpected console statement.
}                 var oldWorkFlow = this.currentModel.get('workflow')._id; Unnecessary semicolon.
initializeSignalHandlers() {     new SignalHandlerSingleton().addReceiver(       `${this.props.signalNameSpace}.FocusOnSelectableItem.${this.props.itemKey}`, Undefined variable.
var constants = require("../../../src/constants"); var Augur = require("../../../src"); Unused variable.
default:                         break;                 } Expected a 'break' statement before 'default'.
if (!context.flags.seconds) {       cli.exit(1, 'Please specify a valid timeout value.');     } Don't use process.exit(); throw an error instead.
mainStory.error(`Invalid version for ${chalk.bold(pkgName)}: ${chalk.bold(version)}`);     } Don't use throw an error instead.
let prev = getValue(this, name)         if (value!== undefined) return this         setValue(this, name, value) Undefined variable.
timer = setTimeout(function() {         if (!serialPortFound) {           return;         } Empty block statement.
await store.dispatch(getInsights());     }     return { isServer, user, url }; Unnecessary semicolon.
it("Asynch", function(done) {     var toRun = function() {       var namespaceToUse = namespace || RUNTIME.namespace; Undefined variable.
var charset = parser.parseCharsets(3, 2, new CFFStrings(), true);       expect(charset.charset).to.equal(['.notdef', 8, 9]); Redeclaring variable.
try {       viewValue = input.toString().trim();     } catch (e) { Redeclaring variable.
}     fonts = labelData.fonts;     var labelFiles = new Array(fonts.length); Redeclaring variable.
i++;  } });
export class Singleton extends Registration {   constructor(keyOrRegisterInChild, registerInChild=false){     super();     if(typeof keyOrRegisterInChild === 'boolean'){ Expected to call'super()'.
jade.page_args = function () {     var page_args = window.location.search.match(/\w+=[\w|%|:]+/g);     var result = {}; Unnecessary escape character.
if(matches){          suffix = matches[1] Unexpected console statement.
} } CacheTL.prototype.get = function (key) { Unnecessary semicolon.
return false;             }             return (value + "").length == this.field.length;         }, Unnecessary semicolon.
document.write('<script type="text/javascript" src="scripts/prototype.js"><\/script>');
}     set(contextName, contextDefinitions, extend=false) {         const enabled = this.enabled; Unused variable.
current = ComputedStyle.borderMap[current];                 } Empty block statement.
g, '').replace('#', ''));             };
progress(null, "Fetching repositories...");         CONFIG._github.repos.getFromUser({             user: user Undefined variable.
console.log("registered new listener");
bar = "hello"; world = "world"; 'bar' is constant.
(function () { Unnecessary semicolon.
$analyticsProvider.api.trackGoal = function(goalID, revenue) {                     if (typeof _paq === 'undefined') {                         _paq.push(['trackGoal', goalID, revenue || 0]); Undefined variable.
let nangle = normalize_angle(angle - rot1 + rot2);         return new Face(npos.x, npos.y, rad, nangle);     }
for (var symbol of Object.getOwnPropertySymbols (attribs)) {                  let descrip = Object.getOwnPropertyDescriptor (attribs, symbol);                  Object.defineProperty (cls, symbol, descrip); Redeclaring variable.
ret.image = 'android'       if (rep = ret.ua.match(/(Android|Adr)[ |\/]([.0-9]+)/i)) {         ret.version = rep[2] Expected a conditional expression and instead saw an assignment.
var angle = Math.acos(vector.dotProduct(vectorToReferencePoint) / (vector.r() * vectorToReferencePoint.r()));       return angle; Unexpected 'debugger' statement.
return!((typeof v === 'undefined')    || (v === null) Invalid typeof comparison value.
this.moveStep = function(id, prev_id) {       var dataToBeSend = {'prev_id': prev_id}, Unexpected console statement.
pivot: 0.5,                         texture: {type: lng.textures.StaticTexture, options: {}}                     } Undefined variable.
if (isList(as) === false) { return error.listError(as, catMaybes); }   if (isMaybe(head(as)) === false) { return error.typeError(m, catMaybes); }   const p = x => isJust(x); Undefined variable.
var tests = []; for (var file in window.__karma__.files) { Unexpected 'debugger' statement.
var hasPath = vendorPaths[name],         isIgnored = (typeof vendorPaths[name] === 'boolean' && vendorPaths[name]);     var hasExternal = vendorComplete[name];     return!isIgnored &&!hasPath &&!hasExternal; Undefined variable.
if (res.status > 300) {             console.error('Error getting Auth0 users'+ res.status);             reject(err);           } else { Undefined variable.
this.saveAndEncryptUserToLocalStorage(function(){         if(typeof callback == "function"){           callback();         } Undefined variable.
return true;             case 'date':                 return '2015-0'+(idx+1)+'-'+(idx+14); Unreachable code.
strokeColor() {         const color = colorAsArray(this.root.getElementById('strokecolor-option').value).slice();         color[3] = parseInt(this.root.getElementById('strokeopacity-option').value) / 100; Unnecessary semicolon.
return {x: d.x, y: newY, color: pow.toString()};   }; }
return 2 * p;       }; Unnecessary semicolon.
},   propTypes: {     filter: "Enable a filter for the menu. When this is enabled each menu item requires a name prop.", Duplicate key 'propTypes'.
var __executed = /\bot/.test("pilot\nsoviet robot\topenoffice"); Undefined variable.
if(!localStorage['tutorial-shown']) {  GAME.tutorial = new Tutorial(spawnPos) Unexpected constant condition.
scope.deleting = true;      scope.deleteClicked = true; Unexpected 'debugger' statement.
}             return contextData; Unexpected 'debugger' statement.
if (dojo.byId("debugbar_position").innerHTML!= "") {             frame = 0;         } Redeclaring variable.
var ostatus=require('ostatus'); Unused variable.
var WrapText = function (text, getTextWidth, wrapMode, wrapWidth, offset) {     var retLines = WRAP_RESULT; Unexpected 'debugger' statement.
require = require("esm")(module) let assert = require('assert'); Read-only global'require' should not be modified.
FbxSkin.prototype.connectObject = function(obj) { Undefined variable.
console.log(e)     } Undefined variable.
this.offset = styleJson["line-offset"];             this.opacity = styleJson["line-opacity"] | 1;             this.width = styleJson["line-width"]; Unnecessary semicolon.
var addr;                                var chars;
if (!authToken) {     throw new Error('Cannot find NOW_TOKEN environment variable')   } Don't use process.exit(); throw an error instead.
import { ipcRenderer } from 'electron';
if (outdated) {       module.hot(function(err, outdatedModules) {         assert(!err, 'Should not happen');         process.exit(1); Unused variable.
const basePath = file.split(/[/\\]/);     basePath[basePath.length - 1] = ""; Unnecessary escape character.
createFlagSeries(highchart);     for (var i = 0; i < chartData.flags.length; i++) { Unexpected console statement.
const a = prop()       expect(a.takeWhile()).to.flowErrors(a)     }) Undefined variable.
console.log(Config)             token = jwt.sign({ Unexpected console statement.
if (result!== true) {         if (result!== undefined) {           arangoHelper.arangoError("Collection error: " + result); Empty block statement.
} customElements.define('project-loader', ProjectLoader); Unnecessary semicolon.
areaid = this.id[cell2.id];    if(this.owner.flags.irowake){ cell.color = cell2.color;}   } Redundant double negation.
return format;         } Unnecessary semicolon.
if (line.indexOf('author')!== -1) {         if ((info.author = parseAuthor(line.replace('author ', ''))) {             return true; Expected a conditional expression and instead saw an assignment.
get R() {     return this._R;   }
}      shareholders.push(newShareholder);  }     } Unnecessary semicolon.
traverse = decor!== false;         }         if (traverse === false) {           return;         }       } Empty block statement.
socket.on('listening', () => {             socket.send(whoIsCommand, 0, whoIsCommand.length, 4321, ip);         });
onError(req, res, 'Operation is temporarily unavailable');     database.BeginTransaction(err => {         if (err) return onError(req, res, err.message || 'Database transaction error'); UnreachableCode.
ListItemText,    CircularProgress, Unused variable.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/flaming_humbaba-1334193679.swf",  admin_props : false, Unnecessary escape character.
const yAxis = new THREE.Vector3( 1, 1, 1 ).normalize();
innerHeight].join(); } Unnecessary semicolon.
stopDrag(e) {
][parsed];   } else if (parsed) {     return String(parsed); Redundant double negation.
if (!matches) {           for (var idx = 0; idx < index.aliases.length; idx++) {             var alias = index.aliases[idx].toLowerCase()             matches = true; Redeclaring variable.
if (isExpressionType(parentNode)) {             return '"' + node.value + '"'; Unexpected 'debugger' statement.
if (callback) {             var callbackID = this._uniqueMethodIdentifier();             this._callbacks.add(callbackID, callback); Redeclaring variable.
query = query.replace(/([(){}[\].^$|?+*\\])/g, "\\$1");         return new RegExp(query, "gi"); Unnecessary escape character.
for (var jj = 0; jj < data.join.length; jj++) {       var join = data.join[jj];
return this.use(route, handler, arguments[2], arguments[3], method);       case 5: Unreachable code.
state.isTable = true     state.render.push( Unexpected 'debugger' statement.
oldSnapshot.push(this._currentSnapshot[i]);       } Unnecessary semicolon.
break;    case rfb.encodings.copyRect: Expected a 'break' statement before 'case'.
return () => {                 window.document.removeEventListener(SLIDER_EVENT.MOVE, onMouseMove);                 window.document.removeEventListener(SLIDER_EVENT.UP, onMouseUp);             } Undefined variable.
storage.getURL(id).then(function(url) {       if(!url) {         return;       } else { Empty block statement.
const rootNode = findDOMNode(wrapper).children[0];     expect(rootNode.id).toEqual('heart'); Undefined variable.
function getDyno (client, appID, dynoID) {   return client.request({ This generator function does not have 'yield'.
} else {                                 if (self.compileOnBuild && fieldData.CompiledField) { Undefined variable.
};                 break;             case 4:                 this.get = function (idx, out) { Expected a 'break' statement before 'case'.
return createIterable(() => {     for (;;) {       const { done, value } = iterator.next(); Unexpected constant condition.
Button,   Box, Unused variable.
broadcast(message, fromSelf){         var msgbuf;         fromSelf = fromSelf!== false? true : fromSelf; Unused variable.
arrayFromObject,     isArray, Unused variable.
} else {       capation = 'Complete'     }
let url = baseUrl + urlPath     return new Promise((resolve, reject) => { Unexpected console statement.
throw new SyntaxError('Trailing characters: "' + str + '"');     } Unreachable code.
if (changelogUrl) {                     console.log(`Opening ${strong(changelogUrl)}...`); Unexpected constant condition.
if (is_phylotree_active===false) {   console.log('[BUG] phylocanvas not initialised and we're trying to start up gubbins. Problems to follow...') Unexpected console statement.
polyfill = versionMatch && parseInt(versionMatch[2]) < 21;     } else if (userAgent.indexOf('Android') >= 0) { Undefined variable.
xmlHttp.setRequestHeader('X-Algolia-Application-Id', this.applicationID);             for (i = 0; i < extraHeaders.length; ++i) {                 xmlHttp.setRequestHeader(extraHeaders[i].key, extraHeaders[i].value);             } Undefined variable.
const {       isMascara,       noActiveNotices, Unused variable.
console.log("Wrote: " + fileName);   } Unnecessary semicolon.
if(executeUpdates) {                 TrainingTreeUtil.ExecuteUpdate.query({id: $scope.rootNode.id}).$promise.then(function() {                     $scope.getAndDisplayTree(); Undefined variable.
return field <= (value1.getTime()) || field >= (value2.getTime());         case this.OPERATORS.dateOperatorIsBlank: Unreachable code.
import {Parser} from 'expr-eval'; import {App} from 'website-examples/plot/app'; Unused variable.
if (req.query.private) {     scopes.push('repo'); Redundant double negation.
Posts.insert(data);   } Unexpected console statement.
vjs.CurrentTimeDisplay.prototype.createEl = function(){   var el = Component.prototype.createEl.call(this, 'div', {     className: 'vjs-current-time vjs-time-controls vjs-control' Undefined variable.
return cb(null); } Unnecessary semicolon.
import * as React from'react'; Unnecessary semicolon.
if (options.add) {                         add_to_sprint(options, finalCb);                     } else if (options.jql){                         jql_parser(options, finalCb);                     }else { Empty block statement.
.blur(function (e) {                     if (blurCausedByInputFieldSwitching) { Unexpected console statement.
return doWriteOp(project,'setBranchHash', branch, oldhash, newhash, callback);                 }                 if (writeOps.size()) {                     fsyncs.push({ Unreachable code.
const PIPELINE_HEADER = `${V3_HEADER}.pipelines` function pipelineCoupling (client, app) {   return client.get(`/apps/${app}/pipeline-couplings`) This generator function does not have 'yield'.
date.setMonth(date.getMonth() + part);    }    if (! isNaN(part = Number(to.year)) ) {     date.setFullYear(date.getFullYear() + part); Expected a conditional expression and instead saw an assignment.
console.log('Connection state changed to', conn.connectionState);   } Empty block statement.
import React, { Component } from'react'; import SearchFilterCollectionTag from './SearchFilterCollectionTag'; Unused variable.
undefined, undefined, function (data, p) {           if (p === 404) { Unexpected console statement.
if (this.stream) {       if (process.platform!== 'win32') {         this.stream.close(); Expected a conditional expression and instead saw an assignment.
if (!this.props.note) return;   if (this.props.note.encryption_applied) return; Redundant double negation.
subClient.on("message", (channel, message_str)=>{      console.log(`Received new message: ${message_str}`);
const urlParsed = require('url').parse(request.url);   if (process.platform === 'win32') { Unexpected console statement.
headers: {     accept: "application/json"    } Undefined variable.
var navCharacters = helper.e(".nav-characters");     for (var i = 0; i < array.length; i++) {       var characterAnchor =_render_navCharacters(array[i].input.name, i); Undefined variable.
layers[baseLayer].addTo(map);     if (baseLayer == 'Bing Satellite') contextLayer.addTo(map).bringToFront();     L.control.layers(layers).addTo(map); Unexpected constant condition.
if ( (msgHide = field && field.msgHide || opt.msgHide)) {                 msgHide.call(me, $msgbox, msgOpt.type); Expected a conditional expression and instead saw an assignment.
Console.prototype.editGetText = function() {         if (!(this instanceof Console)) return; Unexpected negating the left operand of 'instanceof' operator.
return newNode;   case document.TEXT_NODE: Unreachable code.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/bean_bean-1334602769.swf",  admin_props : false, Unnecessary escape character.
Translator.Locale = Locale; Translator.Namespace = Namespace; Translator.FilterList = FilterList;
pem.can = _.union(pem.can, pemList);     self.setPem (target.qNum, pem);     reply (sprintf('%s 的权限添加成功!', target.userNick));
var last = list.length - 1;   for(i = 0; i < last; i++){    var child = this._getChildNode(node, list[i]); Redeclaring variable.
for (var key in global) (function() {       return (context)[key] = (global)[key];     })(); Unnecessary semicolon.
label: this.startTimeText,                     renderer: this.startDateFormatText,                     exclude: this.isActivityTimeless Undefined variable.
}, "DAS": function (cpu) {             util.panic("Execute (DAS) :: unsupported"); Unexpected 'debugger' statement.
stores = require('stores'),       Router = require('react-router'),       ProviderResources = require('./ProviderResources.react'); Unused variable.
request.post(url, options, function (err, res, body) {     done(err, body)   }) Redeclaring variable.
}     this.queue.receive(this.obj, patches); Unexpected 'debugger' statement.
options = options || {};   options.defaultValue = (options.defaultValue? options.defaultValue : c.SUPPRESS);   options.dest = (options.dest || c.SUPPRESS); Redundant double negation.
}       return false;     }); Unreachable code.
import Layout from "../components/layout" const BlogIndex = ({ Unused variable.
ctrl.field = {};                          options.field.on("value", function(snap) { Unexpected console statement.
console.log(message.text());     } Don't use throw an error instead.
this.setInputsInline(true);     this.setTooltip(Blockly.Msg.MATH_NUMBER_TOOLTIP);   } Undefined variable.
flareMapSrc: '/img/sunflare.png',  init: function(size) {   this.root = new Object3D(); Unused variable.
return result;       } catch (err) {console.log(err)}     }     share.cmult = function (cst) { Unnecessary semicolon.
mongoose.connection.db.collection(collectionName, function(err, collection){       if (err) { return reject(err); } Unexpected 'debugger' statement.
title: "www.luehangs.site",         description: "Test 11", Duplicate key 'description'.
delete this[qx.OO.values[a[i]]];     } Unnecessary semicolon.
if (VERBOSE)       console.log("[iAdvize] post /conversations, ", req.body.idOperator);     if (!isValidSignature(req.header("X-iAdvize-Signature"), req.body)) { Unexpected console statement.
if (text) {     return text.substr(-1, 1).toLowerCase() ==='s'? text + '\'' : text + '\'s'; Unexpected 'debugger' statement.
if ((rid = RID.parse(ref)))       return rid; Expected a conditional expression and instead saw an assignment.
const reCMD = /^\/([0-9а-я\w\d_\-]+)/; Unnecessary escape character.
# A regular expression for date.   (?<year>\d{4})-    # year part of a date   (?<month>\d{2})-   # month part of a date   (?<day>\d{2})      # day part of a date Unnecessary escape character.
if (addr === 0xFF0F) return this._if = value;
import bind from "bind-decorator"; import { ErrorHandler, topology, grpc } from "orbs-common-library"; import StorageService from "./service"; Unused variable.
catch(err) {             result = {httpStatus: httpStatus.BAD_REQUEST, status: "failed", errorDetails: err}; Unexpected console statement.
return _Math.genPerpendicularVectorFrisvad( v );
Link, } from'react-router'; Unused variable.
.argv; if(argv.v) th.debug(console.log); if(argv.port == 42420) Unexpected console statement.
import React, { Component } from'react' import { TextInput, StyleSheet, View } from'react-native' import colors from '../config/colors' Unused variable.
},         customConfig = customConfig || {};         utils.extend(config, customConfig); Redeclaring variable.
throw new Error('This function should never be called!'); } Don't use throw an error instead.
case LIST_COMMENTS_RESPONSE:             comments = action.comments;             newList = concatList(comments,state.comments.list); Unexpected lexical declaration in case block.
}     },     _onWindowBlur : function() {       this._hideCalendar(); Unused variable.
if (message['nlpResponse']['result']['actionIncomplete'] == false) {     var alreadyAsked = false;     var alreadyAskedCount = 0;
for (var name in this.xhr.callbacks) {   if (this.xhr.callbacks.hasOwnProperty(name)) {    this[name] = function(name) { Undefined variable.
lookup['ta'][d.panchayat_code] = true;                     }                     else if (d.task_assign === null) {                         lookup['ta'][d.panchayat_code] = false; Unexpected constant condition.
type: "bi.style_table",              color: BICst.DEFAULT_CHART_SETTING.theme_color,              style: BI.StyleTable.STYLE1,              el: { Undefined variable.
switch (assertNode.localName) {   case 'all-of': {    const asserts = evaluateXPathToNodes('*', assertNode).map(createAsserter);    return (xpath, contextNode) => Unexpected lexical declaration in case block.
return matrix[b.length][a.length]; } Unnecessary semicolon.
fileTypes[dest][config][fileType].push(file);             }           }         }         var filesToUpload = []; Unnecessary semicolon.
extension: 'docx'       })     case 'application/vnd.google-apps.spreadsheet': Unreachable code.
cleanupDistStep         ], function(err) {             if(err) {                 grunt.fatal(err); Unused variable.
} else {                 } Unexpected 'debugger' statement.
const isOpen = this.get("isOpen");         const pageX = event.touches[0].pageX;         const rootNode = this.get("rootNode");
function I1DChart() {     }     I1DChart.prototype._palette = Palette.rainbow("default"); Unnecessary semicolon.
}             var _event = _ref6;             emitter.addListener( _event, reject_handler );         } Redeclaring variable.
case Actions.ResetState:   return initialAppState(reducer(undefined, { type: Actions.ReduxInit }), state);  case Actions.ToggleLoading:   return initialAppState(reducer(false, { type: Actions.ReduxInit }), state);  default: Duplicate case label.
box(reqdiff, pubkey, keys).then(boxed => {               connection.send(JSON.stringify({ Unexpected console statement.
$('img', oThumbs).each( function() {     var sName = parseInt(this.id.replace('image-',''), 10);     $('option[value='+ sName +']', oSelect).attr('selected','selected');    }); Undefined variable.
var DefaultConfig = (function () {     'use strict';
return value;     } Unreachable code.
/wireless/ig,         /(shop|store)/ig,         /[.,\/#!$%\^&\*;:{}=\-_`~()]/g,         /\s/g     ];
var target = e.relatedNode; Redeclaring variable.
}         showConfirmDialog(function() { Undefined variable.
return _ENCODE_HTML_RULES[c] || c; } Unnecessary semicolon.
var window = require(__dirname + "/../../lib/browser").windowAugmentation(dom); var document = window.document; var location = window.location; var navigator = window.navigator = { userAgent: "node-js" }; 'window.location' is assigned to itself.
var tiles = tileLayer.getTiles();             expect(tiles.anchor.toArray()).to.be.eql([1, -255]);             expect(tiles.anchor.zoom).to.be.eql(14);             done();
var opts = {'type':value,'animation':'explode','useLite':true};      if(value == 'lines'){    opts.animation ='slide'; Expected a conditional expression and instead saw an assignment.
.then((conversations) => { console.log("RES", conversations, "\n") throw Error("Stopping,")       let conversationIds = conversations.map((conversation) => {         return conversation.convid; Unreachable code.
class ToshihikoModel extends EventEmitter {     constructor(collectionName, toshihiko, schema, options) {         super();         this.ai = null; Expected to call'super()'.
function fib(n) {   if (n === 0 || n === 1) Read-only global 'console' should not be modified.
getTagsIndex: function(callback) {         callback = callback || jsGen.lib.tools.callbackFn;         that.find({}, { Redeclaring variable.
this.name = path.basename(this.name).replace(/^\.+/, '');     while (_existsSync(options.uploadDir + '/' + this.name)) {         if (!_existsSync(options.uploadDir + '/' + this.name)) continue;     } Empty block statement.
const compression = require('compression'); const bodyParser = require('body-parser'); Unused variable.
console.log('releasing slug...');     return app.releases().create({ Don't use process.exit(); throw an error instead.
break;     case TRANSACTIONS_DELETE_REQUEST: Unreachable code.
const h = ht.empty;         for (let i = 0, len = keys.length; i < len; ++i)             h = ht.set(i, keys[i], h); 'i' is constant.
for ( i=0, l=annotationStackFrom.length; i<l; i++ ) {         if ( annotationStackFrom[i]!= annotationStackTo[i] ) {     break; Unreachable code.
return molecules;         }         return {             molecules: molecules, Unreachable code.
export const userSetting = (menuItem, browserWindow) => {   createWindow(path.join(__static, 'preference.md')) }
export default ({mainStyle, address, balance, burnWallet, goBack, dollarDisplay}) => {   return ( Unused variable.
return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];     case DIRECTIONS[1]: Unreachable code.
this._nodes.set('header', value);   }   get content() {     return this._nodes.get('content');   } Expected to return a value in getter 'content'.
trigger: function(event) {         if (this.__listeners__[event]) { Unexpected 'debugger' statement.
parsers.push(wv.data.parse);         } Unnecessary semicolon.
fkeys = Object.keys(machbox.functions);  for (i in fkeys) { Unexpected console statement.
placement: 'bottom',                 placeholder: 'Enter email...', Duplicate key 'value'.
var adapted = adapter(fakeQunit); Unexpected 'debugger' statement.
var loaded = q.all(moduleLoads.map(function(ml) { return ml.promise; }));           allImports.then(function(astAndNames) { Unexpected console statement.
}       errors[fieldName] = fieldError;     } Undefined variable.
return THREE.AnimationUtils.lerp_string_immediate;      }     }   }  } Unnecessary semicolon.
return queue.await((err) => {       if (err) { return done(err); }
var DEFAULT_RPC = utilities.urlstring({     protocol: (NODE_JS)? "http" : window.location.protocol.slice(0, -1),     host: "127.0.0.1", Undefined variable.
return     } Unnecessary semicolon.
var self = this;         var ship, drot, drot;         ship = self.model.ship; Redeclaring variable.
let id = uid()  subscribers.push({ id, fn: fn })  return id
token : ["text", "string", "text", "constant", "text"],             regex : "(\\[)(" + escaped("]") + ")(\\])"         }, { Unnecessary escape character.
knox.createClient(this.options).putFile(file.path, path + filename, {   'Content-Type': filetype,
const openProModal = () => {     dispatch(openModal('UPGRADE_MODAL'));   }; Unexpected console statement.
behaviors: [],      onVisit: function(merchant, roomObj, target) {       if (target.race!== 'ogre') { Unused variable.
})       this.geometry.faces.push(new Face3(...indices)) Unreachable code.
return s.replace(/\/+$/, '').replace(/^\/+/, '/'); } Unnecessary semicolon.
p = path.normalize(p);         var arr = p.split(/[\\/]+/); Unnecessary escape character.
import { Footer } from "./Footer.jsx"; import { Loading } from "./Loading.jsx"; Unused variable.
import LayerManager from 'components/widgets/editor/helpers/LayerManager'; import { findTagInSelectorTree } from 'utils/explore/TreeUtil';
actual(function () {           assert.that(result, is.equalTo(65));           done();
].concat(node.body.body)))     }, Unreachable code.
});     this.editor.applyingChangeState = false;   };
eM.eF = eF;         var eC = (function () { Unnecessary semicolon.
}         return this._children.map((child, index) => child? this.prefix + index.toString(16) : undefined)            .filter(child =>!!child); Redundant double negation.
this.loadQueue = [];     this.onloaded(function() {       this.callback(this.getData()); Undefined variable.
let callback = this.callbacks[id];         if (callback) { Unexpected lexical declaration in case block.
componentWillReceiveProps(nextProps) {         this.updateOnOrDirty(nextProps.projectStudios, nextProps.myStudios);     } Unexpected 'debugger' statement.
var ModulesListingView = require('./ModulesListingView'); var _ = require('underscore'); Redeclaring variable.
var IOUtil = require('io/IOUtil');   var parsed = IOUtil.parseDelimited(data, opts);   return new LabelMapping({ name: opts.name || filename, mapping: parsed.data, defaultIndex: opts.defaultIndex, maxIndex: opts.maxIndex }); Undefined variable.
.then((volumes) => {           this.volumes = get(volumes, 'volumes');         }), Undefined variable.
point,         basis, Unused variable.
nextData = data;       return; 'data' is assigned to itself.
{  updateControls     self.obj.body.fixedRotation = self.fixedRotation.getValue(); Undefined variable.
export default function one(s, context) {     return new Init(s, context)[0] }
const textOrientation = item.text.orientation;     const stack = itemStack[textOrientation]; Unexpected 'debugger' statement.
var urls = _.difference(def.url.paths, aliases[name]);     urls = _.map(urls, function (url) {       var optionalVars = {}; Unused variable.
try {       var module = config[helperName].require        ? path.resolve(global.codecept_dir, config[helperName].require) Read-only global'module' should not be modified.
return matches; } functions.findRepeaterElement = wrapWithHelpers(findRepeaterElement, repeaterMatch); Unnecessary semicolon.
$rootScope.$on('$routeChangeError', function handleMiddlewareRedirects(event, current, previous, rejection) {
if (this[kState].closed)       return; Expected to return a value in getter'socket'.
var error = new Error('If you set the mode to "transit" you must also specify either a departure_time or an arrival_time');     if (typeof callback === 'function') {       return callback(error); Invalid typeof comparison value.
};             return json; Unexpected 'debugger' statement.
export const clickCounter = (state = 0, action) => {   if (action.type!== INIT_REDUX_OPERATIONS) return state; Unexpected 'debugger' statement.
if (!this.hasID(nodeID) || this.hasOwnID(nodeID)) {                                  this.nodesByID[ nodeID ] = node Unexpected 'debugger' statement.
var ModelGenerator = module.exports = function ModelGenerator(args, options) {     yeoman.generators.NamedBase.apply(this, arguments); Unused variable.
console.log(error);   } Don't use throw an error instead.
message = message  .replace(/&/g, "&amp;")  .replace(/"/g, '&quot;')  .replace(/'/g, "&apos;") Redeclaring variable.
it('should have a background gradient', () => {       expect(input.props.style.backgroundImage).toMatch(/^linear-gradient/)     })
onUnregister: Class.empty,   onUpdate: Class.empty, Duplicate key 'onStart'.
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[62],{
return handleUndefinedAndNull(file.license)     } else if (typeof file.license === 'object') {       return handleUndefinedAndNull(file.license.type) Invalid typeof comparison value.
this.X.gestureManager = this.GestureManager.create();       this.Y.registerModel(this.ActionButtonCView.xbind({ Unexpected 'debugger' statement.
{                     project.deleted = true;                 };
);       default: Unreachable code.
if (!zoneData) return null;   const co2ColorScale = getCo2Scale(colorBlindModeEnabled);   const co2Intensity = getProductionCo2Intensity(mode, zoneData);
var handleFocusChange = function() {     var _active = activeElements(); Move function declaration to program root.
case actions.CREATE:       binary = step.createBinary();       return state.concat([ {binary} ]); Unexpected lexical declaration in case block.
Git.prototype.submoduleUpdate = function (args, then) {       if (Array.isArray(args)) {         this._getLog('warn', 'Git#submoduleUpdate: args should be supplied as an array of individual arguments'); Invalid typeof comparison value.
adeModule.directive('adeUrl', ['ADE','$compile','$rootScope', '$filter', function(ADE, $compile,$rootScope,$filter) { Unnecessary escape character.
default: Unreachable code.
README.*`,   `**/react\-docsreact\-stylesreact\-integration Unnecessary escape character.
type: og.video.type,             rel: CONFIG.R.og,             height: og.video.height, Undefined variable.
var tile1 = new maptalks.TileLayer('tile1', {             urlTemplate : 'https:         }); Undefined variable.
success: loginState => {               var loginState = loginState.data; Redeclaring variable.
if (utils.cellMaps.location[graffitiId]!== undefined) {         return utils.cellMaps.location[graffitiId]; Unexpected 'debugger' statement.
} else {   Promise.each(Object.values(languages), language => language.build()).catch(handleError); } Don't use process.exit(); throw an error instead.
'save': ['ctrl+s'],     'play/pause': ['space'], Duplicate key'save'.
return injector.resolveDependencies();   }   function markAsApplyed( template ){ Unnecessary semicolon.
};     case `${ACTION_TYPES.CHECK_SERVICE_EXIST}_FULFILLED`: {       const serviceExists =!!action.payload;       return { Unexpected lexical declaration in case block.
console.error('Database error:', error.message);     } else { Don't use process.exit(); throw an error instead.
case 5:       (r = v), (g = p), (b = q)       break   } Unnecessary semicolon.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_glove_metal_finger_piece1-1348197973.swf",  admin_props : false, Unnecessary escape character.
if (!chain && create) {   chain = newChain(chainName);  }
}); }; module.exports = ScriptsDoNotFlicker; Unnecessary semicolon.
this.setSourceNodeId(vId);   } });
throw new Error("ellipse not yet supported");     }     clearRect() {         throw new Error("clearRect not yet supported");     }     clip() { Duplicate name 'clearRect'.
_allCompleted (tasks) {     for (let i = tasks.length - 1; i >= 0; i--) {       if (!tasks[i].available) { The update clause in this loop moves the variable in the wrong direction.
});     this.redirect('/resume', {sheetObject: finalObj, template: this.state.template}); Unexpected 'debugger' statement.
var path = this.processDataPath(dataPath);     if (path === undefined) {         return;     } Empty block statement.
hour = hhmmss[0] || 0;             minute = hhmmss[1] || 0;             second = hhmmss[2] || 0;             millisecond = hhmmss[3] || 0;         } Redeclaring variable.
CONSTANTS.Dir_Top             ]; Unnecessary semicolon.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2010-03\/1268344207-8296.swf",  admin_props : false, Unnecessary escape character.
var targetClass,unclassified; function $HLMethodClassifier(){return $globals.HLMethodClassifier||(typeof HLMethodClassifier=="undefined"?nil:HLMethodClassifier)}
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-12\/proto_shrine_alph-1323999218.swf",  admin_props : true, Unnecessary escape character.
MonitorChrome.disconnect(errback); } Unnecessary semicolon.
event.sub('location.refreshed', onLocationRefreshed);    $(window).on('resize load', adjustSize);   };
arrayIdent = scope.reserveParam();           }           init = []; Unnecessary semicolon.
Ext.example.msg('Button Click', 'You clicked the {0} button', btn);     } Unnecessary semicolon.
throw new Error("Should not execute this test");             });
this.api.registerHook = (name, handler) => {     assert(typeof name ==='string', `钩子名称必须为字符串类型`);     assert(typeof handler === 'function', `钩子处理函数必须为函数类型`); Invalid typeof comparison value.
.replace(/'/g, "\\'")            .replace(/\{([^}]+)\}/g, "' + (_.$1 || '') + '") + "'")       )(data);
it('works', function () {       const cdb = new loki('cloningEnabled');       const citems = db.addCollection('items', {         clone: true Unused variable.
return false;                 }             }             if (Date.now() > (cacheFileMtime + cacheTime * 1000)) { Unnecessary semicolon.
easeInBounce: function (x, t, b, c, d) {   return c - easing.easeOutBounce (x, d-t, 0, c, d) + b;  },  easeOutBounce: function (x, t, b, c, d) { Undefined variable.
download(options);       break;     case 'r':     case 'run': Expected a 'break' statement before 'case'.
});   if( /[\s<\>!@#\$%^&*,\.]+/g.test( config.db )){     throw new Error( 'Database name contains illegal characters' ); Unnecessary escape character.
var column_data = _cache[block_id];                     for (j = 0; j < limit; j++) {                         var value = values[j]; Redeclaring variable.
const path       = require('path'); const source     = require('vinyl-source-stream'); Unused variable.
$tab_t.width(1 / $tab_t.length * 100 + '%');    } Unnecessary semicolon.
jQuery.multimediaSupport = {};  var m  = jQuery.multimediaSupport,   vID = new Date().getTime(), Redeclaring variable.
$scope.elasticsearch_dblist = function(query) {       var words = query.split(" ");       var query = $scope.ejs.BoolQuery(query);       var terms = _.map(words, function(word) { Redeclaring variable.
getBinFromUrl(medias[nb].url, bind.filename, function (err) {    if (err) { return callback(err); }    $$.totalDuration += medias[nb].length; Undefined variable.
name: 'driver',                     fieldLabel: 'Driver',                     value: 'org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver', Undefined variable.
throw new error.UnsupportedTypeError('equal', x, y); }; Undefined variable.
isGreaterOrEqualThan,   isNonNegative, Unused variable.
debugger;     state.lastViewClassOrInstance = state.viewClassOrInstance; Unexpected 'debugger' statement.
while ( (m = rEscapes.exec(sLine))!== null ) { Expected a conditional expression and instead saw an assignment.
var stop = mobx.spy(c => events.push(c));    doStuff(); Unexpected 'debugger' statement.
element.getHierarchy().push(elements[i]);
return newState;  case 'SET_VEHICLES': {   const veh = Object.assign({}, newState.vehicles);   veh[action.route] = action.vehicles; Unexpected lexical declaration in case block.
if(!updated) {                         zeros = this._zeroGenerator(newLen);                         oldData[i].data = oldData[i].data.concat(zeros); Redeclaring variable.
let is_host_selector =          !!token.selector.startsWith(':host');         let psudo_rules =           token.styles.map(s => compose_rule(s, coords)); Unexpected lexical declaration in case block.
let options = {      'source': getArgumentString(this.props.currentCommand, constants.specialCommands[constants.WALLET_033X]), Unexpected lexical declaration in case block.
process.exit(1);         } Unreachable code.
for (var i = 0; i < this.app3d.meshes["field"].length; i++) {                 this.app3d.meshes["field"][i].name = name;             }         } else { Unnecessary semicolon.
drawGpx.enabled = function(_) {         if (!arguments.length) return iD.svg.Gpx.enabled;         iD.svg.Gpx.enabled = _;         dispatch.change(); Undefined variable.
filterChain.push(this.buildMethodFilter(proxy));         }         if (this.hasPathFilter(proxy)) {             filterChain.push(this.buildPathFilter(proxy));         }         return filterChain; Empty block statement.
marginBottom: '4px',               fontSize: 16, Duplicate key'marginBottom'.
if(typeof data === "object") {          data = querystring.stringify(data); Invalid typeof comparison value.
while (pts.length >= 4) {           x1 = bx            y1 = by            bx = parseFloat(pts.shift()) Redeclaring variable.
function filterNotILike(value, append) {         filterILike(value, append);         if (append) {           return;         } else { Empty block statement.
var bestRect = bestLogo.foregroundRect;   for (i = 1; candidate = bestCandidates[i]; ++i) {     rect = candidate.foregroundRect;     if (bestRect.top > rect.top || Redeclaring variable.
type: 'GET',                 url: url + '?tags=&search=' + ex_kit.in_cp1251(text) + '&type_search=groups&incldead=0&sorting=0&type_sort=desc',                 cache: false, Undefined variable.
case 'performance':       return performance(log, contentType);     default: Unreachable code.
}; } util.inherits(H2183CompassInput, SerialInput); Unnecessary semicolon.
if (process.env.ENV!== 'production') {     Error['stackTraceLimit'] = Infinity; Empty block statement.
}             else if (this[levelProp] && (!(this[levelProp] instanceof Array) && this[levelProp].implementsOrExtends('BaseEntity'))                 entity[levelProp] = this[levelProp]; Unexpected negating the left operand of 'instanceof' operator.
}   }   get isGizmoVisible() {     return this._gizmos[0].isVisible;   } Expected to return a value in getter 'isGizmoVisible'.
Image.static.toHtml = function(image) {   var $el = $('<img>') Unused variable.
console.log(`ExponentConstants.deviceYearClass: is unimplemented on web.`);         return null;
var cancel = new Element('input', {'type': 'button', 'class':'btn-primary', 'value': 'Cancel'}).setStyle('margin-right', "5px");     cancel.setStyle('margin-left', "5px"); Duplicate key 'class'.
for (var key in presences) {     if (presences.hasOwnProperty(key)) {       var message = presences[key];       var messageType = this._getMessageType(message.to);
}     MyInline = __decorate([ 'MyInline' is a function.
'inspector': ['three-inspector', {value: this.bind('selected')}],           'object': ['io-object', {value: this.bind('selected'), expanded: true}],           'app-ctrl': ['demo-app-ctrl', {value: this.bind('selected')}] Duplicate key 'object'.
switch (association.nature) {                 case'manyToMany': {                   const arrayOfIds = obj[association.alias].map(related => {                     return related[ref.primaryKey] || related; Unexpected lexical declaration in case block.
case 'ul':             return document.createElement('ul');         default: Undefined variable.
equal(table.getTitleBody().style.width, table.getBody().offsetWidth + 'px', 'The title style "width" is the initial value');   table.addRow( { Unexpected 'debugger' statement.
var Prism = {  util: { Undefined variable.
import { compose } from 'ramda'; import Avatar from '@material-ui/core/Avatar'; Unused variable.
app.use((req, res) => {         res.status(404).render("error", { Unused variable.
it("should be compiled and applied to file multiple times", function(done) {         try This generator function does not have 'yield'.
var GLBuilders = require('./gl/gl_builders.js'); var Style = require('./style.js'); Unused variable.
applyTheme: YES,
const entity = this.refs.form.getData();     if (entity._added) { Unexpected console statement.
return;             } Unnecessary semicolon.
} else {         var s = this.val.toString()
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-05\/npc_swoonerfly-1305238807.swf",  admin_props : true, Unnecessary escape character.
const restoredMapping = restoreMapping(this, cmd.storedMapping);      return super.addMappingItems(mapping, restoredMapping);
import JassEnum from './enum'; export default class JassEventId extends JassEnum {}
metrics.trackIncrement);  }; DetailedEventPainter.prototype.softPaint = function() { }; DetailedEventPainter.prototype._prepareForPainting = function() { Undefined variable.
case 128:    p = pref.replace(/"/g, '\\"');    v = Services.prefs.getBoolPref(pref).toString().replace(/"/g, '\\"');    result.push(`user_pref("${p}", ${v});`);    break; Redeclaring variable.
app.utils.setSettings();    } else if (targetName === 'author' || targetName === 'description') {      target.__registerEditor(editorOptions);    } else if (targetName === 'useTabs') {      target.__registerEditor(editorOptions);    } else if ($.inArray(targetName, editorOptions)!== -1) { Empty block statement.
ret = anchor.getAttribute('href', 4);        }       } Empty block statement.
if (typeof max === 'object') {     options = length;   }
};       if (opts) Unexpected 'debugger' statement.
return 'N';     case 'nt_rain' : Unreachable code.
it('should see paused file stream (no buffer)', function(done) {     husk(__filename)      .read({buffer: false}) Unused variable.
export function getSong(guild_id) {   return client.lindexAsync(`guild_${guild_id}`, 0) Unused variable.
}, props);   el = Component.prototype.createEl.call(this, type, props); Undefined variable.
azk.fail("agent already started");     } else { Don't use process.exit(); throw an error instead.
SceneGraph.prototype.Traverse = function() {};
inputEx.registerType("number", inputEx.NumberField, []); })();
constructor() {     super();     this.agentService = ContainerJS.Inject; Expected to call'super()'.
percentSpan.textContent = percentText;     ARIAUtils.markAsHidden(valueSpan);     const valueAccessibleText = this.tree._formatter.formatValueAccessibleText(value, this); Undefined variable.
if (stream.match(/[^_\*]+/)) {           return getTokens(); Unnecessary escape character.
if (exports._best) return exports._best;   for (var i=0, k; (k = exports.preferred[i]); i++){     var transport = exports[k]; Expected a conditional expression and instead saw an assignment.
require("./diffs/revision-diff.jsx"); var PropCheckBox = require("./components/prop-check-box.jsx"); Unused variable.
var orderedModels = order || toAdd;           for (i = 0, length = orderedModels.length; i < length; i++) {             this.models.push(orderedModels[i]); Redeclaring variable.
cdDojoService.find({dojoLeadId: dojoLead.id}, function (response) {               if (!_.isEmpty(response)) { Undefined variable.
return engine; } Unnecessary semicolon.
body,           icon: icon? icon: APP_ICON,           title, Redundant double negation.
session.source = 'foo this should not change';           return app.__internals__.cache.set(baseMessage.sender.id, session);         }) Unreachable code.
var parsedHostHeader = parseHostHeader(req.headers.host, 443);             req.originalUrl = req.url; Unexpected console statement.
import App from './Components/App'; Unused variable.
invert_point: function(pixel) {         var x_scale = this.scales.x;         var abs_diff = this.x_pixels.map(function(elem) { return Math.abs(elem - pixel); });
if (typeof(AjaxUpload)!= "undefined") {       var info = { Unexpected constant condition.
if (root.WeakMap) { Redundant double negation.
if (result.implicitResults &&!executeOpts.resultSet) {         const processImplicitResult = (ix) => {           const resultSet = result.implicitResults[ix]; Move function declaration to function body root.
facebook: "kleinsch",       phone: "1231231234", Duplicate key 'name'.
var date = new Date();                             mPebble.set_time(date.getTime() - date.getTimezoneOffset() * 60000);
return function(elem) {                 if (comparator(elem, value, 0)!== 0) return elem; Unexpected 'debugger' statement.
SpaceTime = require('./methods/query')(SpaceTime); SpaceTime = require('./methods/add')(SpaceTime); 'SpaceTime' is a class.
var result = response;                 for (var i = 0; i < result.length; i++) {                     if (result[i].serialNo.match(self.serialNo)) { Undefined variable.
}         case'm': Unreachable code.
{      answer = confirm(confirm_msg);     } Undefined variable.
if (event.type === 'DELETE') {     return { Unexpected 'debugger' statement.
context.container.$setManager(context.lifecycleManager);                         var result = context.container.$setDirty(); Unexpected 'debugger' statement.
}     }).then((xhr) => {       const out = machineTypes;       set(this,'machineTypes', out); Unused variable.
tt._while.updateContext = function() {   if (this.state.inForHeader) return;   this.state.context.push(types.kw_stat); Unreachable code.
var errors = require('./errors'); var Request = require('./request'); Unused variable.
treeWorker.postMessage(tmpArr);       pointHelper = new PointHelper(lore, 'TestGeometry','sphere', {         pointScale: 10 Undefined variable.
.map(toUnmountPromise)   console.log('unmount promises = ', unmountPromises);
this.prototype.loadPluginMacros = function(plugin) {     for (let macro in plugin.macros) {       if (Object.prototype.hasOwnProperty.call(plugin.macros, macro)) {         this.macro(macro, plugin.macros[macro]); Unreachable code.
while ((result = lines[lnIdx++])) {       if (result.indexOf(" Expected a conditional expression and instead saw an assignment.
return newMet;     });     PMethod.prototype.toString = function() {return 'fun... end'} Unreachable code.
if (__DEV__ && process.env.KEYBASE_LOCAL_DEBUG) {   config.allowStartupFailure = true Unexpected constant condition.
removeHexPrefix,         isAddress, Duplicate key 'createSimpleTx'.
}, function () {             callback.apply(this, arguments); Unexpected console statement.
if (sources.len) {       sources.ids.forEach(function( id) { Redundant double negation.
function renderOptVElementToString(optVElement, isRoot, context) { }
function parseTerm(term, messages) {
that.sn = new SceneNode({       frameID : message.header.frame_id, Undefined variable.
for(let i = 0; i < index; ++i) {       tabs.remove(copy[i].id);     } Undefined variable.
return '';       } Unreachable code.
this._sendMessage('tell');             }         }         this._channel.addEventListener('internal', isLeaderListener); Unnecessary semicolon.
options = {};     } else if (typeof options!== 'object' &&!(options instanceof HTMLElement)) { Unexpected negating the left operand of 'instanceof' operator.
onData: function(d) {      Series.zeroFill(d);      return d; Undefined variable.
}         const { question } = this.state; Unreachable code.
item.addNode  = function (layerNum,right) {   let lastLayer = layerNum === this.numLevels; Unexpected 'debugger' statement.
IfcSystemFurnitureElement: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},   IfcBuildingElementPart: {r: 1, g: 0.5, b: 0.5, a: 1.0}, Duplicate key 'IfcSpace'.
class FileBranch extends FileTreeLeafObject {   constructor(file, cjbranch) {     super();     this.file = file Expected to call'super()'.
goTo.marker("11");verify.referencesCountIs(7); Unexpected 'debugger' statement.
const slice = Array.prototype.slice; export class PropertyAccessor {     constructor(obj, propertyKey) { Unused variable.
case 'char': case 'nchar':         return Char(p)
return store.create(model, options);             case "update": Unreachable code.
configurable: false,             get: function() {                 return _createdAt; Unused variable.
this.useRefTransfMatrix_loc;   this.useTexture_loc;   this.invertNormals_loc;  }; Unnecessary semicolon.
return exists(this)? cloudinary.image(this.get(field.path), options) : '';   },   src: function() {    return src(this);   },   fit: function(width, height) { Duplicate key'src'.
var renameView = require("../views/renameView"); var contextView = require("../views/contextView"); Unused variable.
var put = function(name, value) {                 var symbol = newSymbol(name, value); Move function declaration to function body root.
return new paddle.TensorType(variable.type.lod_tensor.tensor);             default: Unreachable code.
var conf = require('ember-cli/tests/helpers/conf'); var Promise = require('ember-cli/lib/ext/promise'); Redeclaring variable.
};                   if(data.user.teams == ["1"]){                     data.user.teams = []; Expected a conditional expression and instead saw an assignment.
var async = require('async'); var colName = 'cicd'; Redeclaring variable.
}       function find(id) { Unnecessary semicolon.
if (!(mainId in cache)) {     def = cache[mainId] = core.createResourceDef(pathInfo.config, mainId, isPreload, parts.pluginId? pathInfo.path : undef);     def.url = core.checkToAddJsExt(pathInfo.url); Redundant double negation.
var async = require('async'); var bitcore = require('bitcore-lib');
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
const rmsie11 = /(trident)\/[\w.]+;.*rv:([\w.]+)/;  const redge = /(edge)[ /]([\w.]+)/;  const rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/; Unnecessary escape character.
const id = m[0];       tok = app.ids.get(id); Unexpected lexical declaration in case block.
this.transparent = true;         this.blending = BLEND_TYPE.ADD;         this.depthTest = true; Undefined variable.
IDBTransaction: window.IDBTransaction || window.webkitIDBTransaction,         IDBKeyRange: window.IDBKeyRange || window.webkitIDBKeyRange     } Duplicate key 'IDBTransaction'.
try {     var { stdout, stderr } = await execPromise('git', ['pull'], { cwd: localDir });     stderr = undefined; Redeclaring variable.
emptyMessage: React.PropTypes.string,   messages: React.PropTypes.arrayOf(React.PropTypes.string),   errors: React.PropTypes.arrayOf(React.PropTypes.string),   label: React.PropTypes.string, Duplicate key 'errors'.
if (sps_max_sub_layers_minus1 > 0) {    for (let i = sps_max_sub_layers_minus1; i < 8; i++) { Redeclaring variable.
case ACTION_TYPES.FETCH_RECORDS_SUCCESS:             recordType = action.payload.recordType; Unexpected lexical declaration in case block.
var newNode = kNode;     if(typeof newNode === 'undefined' || newNode === null){      newNode = new knalledge.KNode(); Invalid typeof comparison value.
assert.throws(function() { Buffer.concat(null, null); }, TypeError);
], function (err) {     if (err) console.error(err);     return cb_();    });
module.exports = function() {  do { Unused variable.
console.log("finished_with_success");          assert(error_msg.length === 0); Undefined variable.
var appjs = require('./build/Release/appjs.node'); var Extend = require('util')._extend; Unused variable.
var child_styles = this._getChildStyles(style_tr, stream);     return Nehan.List.map(child_styles, function(child_style){       return new TableCellGenerator(child_style, this._createStream(child_style)); Undefined variable.
generalSettings: {             jspmConfigFile         }, Unused variable.
function isStatic (ext) {   var extentions = ['.yml', '.yaml', '.json']   return extensions.indexOf(ext) > -1 Unused variable.
}; GridBroadphase.prototype = new Broadphase(); GridBroadphase.prototype.constructor = GridBroadphase; Undefined variable.
model: 'Touch Pro2'     }, {       regEx: /HTC[_| ]Touch[_| ]Pro/i,       model: 'Touch Pro' Unnecessary escape character.
self.addEventListener('push', function(event) {   var notificationOptions = { Unexpected console statement.
operations = ['add','remove'];     }     else if (type ==='map') {       operations.push('map');     }     else if (type === 'counter') { Empty block statement.
return wrap(text, prefix, firstPrefix, '\\\\'); } Unnecessary semicolon.
this.createOrUpdateKeenSession();         var ctx = window.contextVars; Unexpected 'debugger' statement.
count: model.count,   get: model.get };
window.React = window.parent.React = React; const reactContainer = document.createElement('div'); Unnecessary semicolon.
if (!position) {       const bottom = height + this.element.getBoundingClientRect().bottom Undefined variable.
const watcher = yield fork(getGeneralSettingsWatcher);   const updateWatcher = yield fork(updateGeneralSettingsWatcher);
} else {           dataLayer.push({ event: 'vic-authenticated' });         } Undefined variable.
switch (false) {           case typeof o!== 'undefined':             enc._pushUndefined(); Invalid typeof comparison value.
container.appendChild(ul);       container.appendChild(div);       setTimeout(function(){ Undefined variable.
}; export { AttributeNode } Unnecessary semicolon.
boundedComponents = [],     disableRenderIndexKey = false;   };
SDK.TracingModel.Process = class extends NamedObject { Undefined variable.
var type = _.find(schema._tests, { name: 'integer' })? 'integer' : schema._type;         extension = {             type: type Redeclaring variable.
return true;   } Empty block statement.
}).bind(this));       } Unnecessary semicolon.
propTypes: {       models: React.PropTypes.instanceOf(Backbone.Collection).isRequired,
return parseFloat(win.getComputedStyle(animTarget).opacity); } Unnecessary semicolon.
start: function (options, callback) {         options = options || {}; Unexpected 'debugger' statement.
comment = parse_XLNullableWideString(data);  if(0 ) { Unexpected constant condition.
originalParamContext = pms.parameterContext; Unexpected 'debugger' statement.
window.a = { 'b': { 'c': new Klass } };     result = simplify(find.byKind(Klass));     expected = ['window.a.b.c -> (object)'];     deepEqual(result, expected, 'Klass instance'); Undefined variable.
} else {     api.sendMessage("hms.space fucked up. Blame @jordon wing.", message.threadID); Unexpected console statement.
this.serializeForm()     target.classList.add('loading') Unexpected console statement.
.progress(function(buff){             console.log(buff.toString());         }) Unexpected console statement.
return err;                             } else { Unreachable code.
return true;   }   if (this._frame) Unnecessary semicolon.
if (require.main === module) {     main().catch(console.error); } Unexpected console statement.
return false;             case Hammer.TOUCH_END: Unreachable code.
setTimeout(cycle, 500);  window.canNodeList = canNodeList;
var tr = function(x) {              var xs = numeric.div(x,that._DataAspectRatio), n=xs.length, u;             p = that._transform[0]([xs[0],xs[1],xs[2],0]);             return [p[0],p[1],p[2]]; Unused variable.
withMeta,     networkStatus, Unused variable.
render() {     const { loggedInUser, showWhatIsThis, toggleWhatIsThis } = this.props;      return ( Unused variable.
var bads = [];  for (var word in words) { Unexpected console statement.
const EventListing = ({ website, name, start, end, key }) => {   return ( Unexpected 'debugger' statement.
}                             } else if(flag === 'ink-fv-confirm'){                                 done();                             } Empty block statement.
this._rampLowPercentage = 0.02;     this.output = p5sound.audiocontext.createGain();     this.control = new TimelineSignal(); Unnecessary semicolon.
if (!Npm) {
'use strict'   console.log(`${GM_info.script.name} v${GM_info.script.version} by ${GM_info.script.author}`)
.replace('$date', date);             client.hgetall(key, function(err, hash) { Unexpected console statement.
}); var Issue = FOAM( { Unused variable.
else if (this.enum && this.editable.value) {       if (!this.dom.select) { Unexpected 'debugger' statement.
function redrawCharts () {         d3Selection.selectAll('.grouped-bar').remove();
addItemAt(item, index = this.items.length) {     var items = this.items;     index = Math.min(items.length, Math.max(0, index));     items.splice(index, 0, asItem(item)); Redeclaring variable.
adeModule.directive('adeEmail', ['ADE','$compile','$rootScope', '$filter', function(ADE,$compile,$rootScope,$filter) { Unnecessary escape character.
'Viewed Page': 'Viewed Product Detail',       'Viewed Product Detail': 'Clicked Product',     };     _eventManager.addCallback(['on', 'event', (event) => { Duplicate key 'Viewed Product Detail'.
parseInlineTableNext () {       if (this.char ==='' || this.char === '\t') {         return null       } else if (this.char === Parser.END || this.char === '#' || this.char === '\n' || this.char === '\r') { Empty block statement.
function playSong(_t, player) {   player.getMediaControl(player.mediaControl).playSongAtPosition($(_t).data('position')); } Unnecessary semicolon.
.ticks(this.ticks, this.tickLabel);     this.colors = scaleCategory1;     this.keyFunction = ((d) => d.x); Unnecessary semicolon.
}, this)         },         update_children: function(old_list) {             this.do_diff(old_list, Duplicate key 'update_children'.
scope.$watch('component.value', function (newValue, oldValue) {               if (scope.data[overrideId] === newValue) { Unused variable.
throw e;     } Unreachable code.
document.addEventListener('DOMContentLoaded', () => {   Promise Unexpected 'debugger' statement.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_mirror_with_scribbles_piece1-1348251336.swf",  admin_props : false, Unnecessary escape character.
else       return 0;   }, Unreachable code.
const hexToAccount = (prefix, account) => prefix + '0x' + account.substring(2).toUpperCase() const uuidToHex = (uuid) => '0x' + uuid.replace(/-/g, '') const conditionToHex = (condition) => '0x' + Buffer.from(condition, 'base64').toString('hex') Unnecessary escape character.
await display.append_javascript( execute, context.output_area, context ).then(                             ( r ) => console.debug( "Output appended.", r )                         );
} } export default PickingBehavior; Unnecessary semicolon.
var result = true;  for (var alpha = 0x0430; alpha <= 0x044F; alpha++) { Redeclaring variable.
if (regex.match(paramRegExp)) {           regex = regex.replace(paramRegExp, "([^/]*)$1");           params.push(param); Unnecessary escape character.
case 'graphql':       graphql = stashedSpecs.graphql = stashedSpecs.graphql || {};       graphql.path = graphql.path || '/graphql'; Unexpected lexical declaration in case block.
"Hamster.NOTE_E": 8,                 "Hamster.NOTE_F": 9,                 "Hamster.NOTE_F_SHARP": 10, Duplicate key 'Hamster.NOTE_F'.
var alasql = require('..');  }
});         groupNames.forEach(function(groupName) {             this.addTemplates(templates, panel, groupName, i); Unexpected 'debugger' statement.
export default function computeNormal(vertices) {   var v, vl, f, fl, face, vertices;
e = 'ecma4'           break       case 'ecma6':           e = 'ecma6'           break       case 'ecma7':           e = 'ecma7' 'e' is constant.
Object.keys(typesObj).forEach(v => {     targetObj[typesObj[v]] = function (config) { Unexpected 'debugger' statement.
}                     return queryString; Unexpected console statement.
if (!Object.assign) {     var assign = function (target, source) {       var n$ = Object.getOwnPropertyNames(source); Move function declaration to function body root.
value = value.replace(/([a-zA-Z0-9\-/]+)(?=\s*:)/g, '"$&"'); Unnecessary escape character.
default:      return mxn.Mapstraction.ROAD;    } Unreachable code.
}   if (isNumber(line)) {    ctx.strokeStyle= data.datasets[i].mathLineStrokeColor? data.datasets[i].mathLineStrokeColor : config.defaultStrokeColor; Undefined variable.
});         var $element = $('<span><div class="inner"></div></span>');
curren:"Währungssymbol",  yen:"Yen-Zeichen-Nyuan-Zeichen",  brvbar:"Unterbrochener Balken\nUnterbrochener vertikaler Balken", Unnecessary escape character.
for (j = 0; j < 4; j++) {                                 child = tile.children[j];                                 if (child) { Redeclaring variable.
scPos = pos;                 alignment.scLengthOnRef += c.len; Unexpected lexical declaration in case block.
webSocket.onopen = e => {       setWebsocket(webSocket);       console.log(e.data); Unexpected 'debugger' statement.
var name = new ContactName();     var j = 0, field; while(field = nameFields[j++]) {         if (moz[field[0]]) { Expected a conditional expression and instead saw an assignment.
try {evaLUAted = eval(args)}             catch(err) {evaLUAted = err.message; console.error(err.stack)}             let overall; Unnecessary semicolon.
cwc.soy.SelectScreen.style({ 'prefix': this.prefix }));     goog.style.installStyles(         cwc.soy.SelectScreenNormal.style({ 'prefix': this.prefix }));   } Undefined variable.
{ run: function() {       var what = this.what,           stream = new FakeStream(), Unused variable.
import { eventBeforeSend, eventBeforeReceive, eventSend, eventReceive } from '../shared.js'; Unused variable.
asyncTest( "#9532: Need a way in Menu to keep ui-state-active class on selected item for Selectmenu", function( assert ) {  assert.expect( 1 );  var element = $( "#menu1" ).menu(), Undefined variable.
if (this.showingMenu) {                         $.each(this.menu.$options, function(index, value) {                             if (!$option) { Undefined variable.
if(_undo_command_stack.length > 0) {     command = _undo_command_stack.pop();     _undo_commands[command.id].pop(); Redeclaring variable.
for (var i=0;i<data.length;i++){      $("<li class='imageItem'><a href='#'><span class='imageTitle'>"+data[i].title+"</span> <span class='imgURI'>"+data[i].uri+"</span><\/a></li>").appendTo(".az.inner.textImageList >.list");     }
var numWithoutValue = /(?:\s|^)(\.?\d+\.?\d*)(?![^(]*\)|\w|%|\.)/gi;   if (/^[^, ]*,/.test(value)) {     value = value.replace(/(?:,)(?![^(]*\))/g, ''); Unnecessary escape character.
this.renderList();             } else { Empty block statement.
if (_.has(args,'server_host_override')) {     secure: _.merge({}, opts, {       rejectUnauthorized: false'secure:' is defined but never used.
case UserConstants.FETCH_SUCCESS: {       const { user, unnamedUserMessage } = action       const users = [...state] Unexpected lexical declaration in case block.
var i = 0;     for (i=0; i<whiteNoteCount; i++) { Redeclaring variable.
orsRouteService.addHeightgraph = (geometry) => {             const heightgraph = orsObjectsFactory.createMapAction(-1, undefined, geometry, undefined, undefined); Unexpected console statement.
path = DocObject.getRelativeIdentifier(path);   var doc = new Document(path, className, 'document'); Redeclaring variable.
}     case 'SET_RATING': Unreachable code.
return lastIndex; } Quill.registerModule('undo-manager', UndoManager); Unnecessary semicolon.
this.setState({ showSubmitExpense:!this.state.showSubmitExpense });   } Unnecessary semicolon.
const url = config.url;     const encoding = typeof config.encoding!= "undefined"? config.encoding : "utf-8";     proj4.defs([ Invalid typeof comparison value.
throw e     } Unreachable code.
import LoginForm from './login-form'; import Modal from './modal.js';
import dat from 'dat-gui'
console.log("failed to insert match from scanApi");                 return;             } Don't use process.exit(); throw an error instead.
if (updated.label) {                 checkObjectType('label', data.label, null, Label);                 copy.label = data.label; Undefined variable.
token : "rparen",         regex : "}",         next:   "start" Unnecessary escape character.
if (!_.isString(value) &&!_.isNumber(value)) {                 value = JSON.stringify(value);             } Undefined variable.
.map(sourcePath => path.join(projectPath, sourcePath))              .filter(sourcePath => filePath!= sourcePath);           } Undefined variable.
}           return _results;         case 'Op': Unreachable code.
if (parts.length === 2) {     if ((match = parts[1].match(/^<([^>]*)>$/))) {       directObjectType = match[1]; Expected a conditional expression and instead saw an assignment.
function update_notebook(changes, gistname, more) {         function add_more_changes(gist) { Unexpected 'debugger' statement.
initStoreState = dva._store.getState()         }
});         } else if (status === 'Stopped') {           stopTimer(timer);         } else if (res.status === 'KILLED_BY_TIMER') { Empty block statement.
var newvalues = this.dialog.getValue();    this.datatable.updateRow( this.selectedRecord, newvalues );
async.each(addedRecords, function(record, next){     if (this.isMapping) {      var values = {}; Unreachable code.
var cachedContrailListModel = cachedData['dataObject']['listModel'],                 lastUpdateTime = cachedData['lastUpdateTime']; Redeclaring variable.
}       }       case OBJECT_TYPE_WATERMELON: {         const watermelon = this._cacheFood.get(object.uuid)         if (watermelon) { Unexpected lexical declaration in case block.
handleLoad: function(model)   { Duplicate key 'handleLoad'.
triangle = handle.append('path')      .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') Unused variable.
}) test('disables slider', async () => {   await page.setStep(1).setMin(0).setMax(100).setValue(50).wait Unused variable.
} catch(e) {    this.AddError(e.Message, e.useEndLineNumber);   } finally { Unreachable code.
action = args[0];         }         if (typeof args[1] == 'object') {             date = args[1]; Invalid typeof comparison value.
}; });; gantt.directive('ganttScrollManager', function() { Unnecessary semicolon.
if (layout instanceof VertexLayout) {         result += Math.round(vertexPosition.x) +'' + Math.round(vertexPosition.y);       } else if (layout instanceof PortLayout) { Undefined variable.
import {     concat, Unused variable.
let parts;       if ((parts = /^(a|an|n)(\.\.)?([1-9][0-9]*)?$/.exec(formatString))) {         let max = parseInt(parts[3]); Expected a conditional expression and instead saw an assignment.
var store = model.localStorage || model.collection.localStorage;   var resp, errorMessage;    try { Undefined variable.
define(function (require) {     'use strict'; Unused variable.
if (link) link.setAttribute('href', binURL) if (gistID.indexOf('/') > -1) gistId = gistId.split('/')[1] loadFromAPI(gistID) Undefined variable.
catch (e) {                     placeAfter = placeholderIndex < thisIndex;                 }                 if (placeAfter) { Redeclaring variable.
Meteor.startup(function() {  Session.setDefault("height", 900); });
import { register } from '..'; afterEach(resetPlugins); function registerTestPlugins() { Undefined variable.
export const setVisibilityFilter = text => {     return { Unexpected 'debugger' statement.
const loggerClass = require('artzlogger'); const logger            = new loggerClass({timeStamp: moment(new Date).format('hh:mm:ss:')}); exports.run = (client) => {     logger.info('May is ready to use'); Undefined variable.
postContextLineBegin=idx;      for (i=idx+1; i<body.length; i++) {       ch = body.charAt(i);       if (ch == '\n' || ch == '}' || ch == ';' || i == body.length-1) { Redeclaring variable.
}     }     return ''; Unnecessary semicolon.
var infof = {                 recipient: recipient, Redeclaring variable.
function (sandbox, controlsPlugin) {         this.sandbox = sandbox; Unexpected 'debugger' statement.
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol"? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj!== Symbol.prototype? "symbol" : typeof obj; };
timezones: moment.tz.names(),         upload_quota: attachments_ui.bytes_to_size(page_params.upload_quota),         total_uploads_size: attachments_ui.bytes_to_size(page_params.total_uploads_size),     }); Undefined variable.
fObj=fObj+"}";  var regexed = regexImports(fObj); 'fObj' is assigned to itself.
name: 'coverage',     value: Joi.string().regex(/^[0-9]+%$/),   }));
throw "getValueFromWidget: " + this._renderType + " not supported!";       } Unreachable code.
this.importDocument = function(documentEl) {     this.reset(); Unexpected 'debugger' statement.
} else {    initialText = '';   } Redeclaring variable.
console.log('WidgetName - postCreate');
class P extends React.Component {     constructor() {         super();         this.bind(); Expected to call'super()'.
angular.module(PKG.name + '.feature.hydrator')  .controller('AdaptersDetailLogController', function($scope, AdapterDetail, $timeout) {  hydrator:cdap-ui/app/features/hydrator/controllers/tabs/log-ctrl.js     $scope.loadingNext = true; 'hydrator:' is defined but never used.
super.componentWillReceiveProps(props);         this.data = _.clone(props.data);         this.prepareChildren(props.children);
Mongo.Instance = {}; var orig = Mongo.Collection;
var zt = require('../lib/zt/zt.js');  }    var NUMTESTS = 10000; Unnecessary semicolon.
part = bits.splice(0, 8).join("");         result.push(String.fromCharCode(parseInt(part, 2))); Unexpected console statement.
use: (params.use)? params.use.replace('gfw_','') : null,             useid: params.useid, Redundant double negation.
pull(options, stdout) {     options = options || {};     return async(this, function* (notify) { Redeclaring variable.
model.when('size', function (size) {       svg.attr('width', size.width) Unexpected console statement.
return this.success({name: '新增成功！', url: '/admin/channel/index'});       case 2: Unreachable code.
result = JSON.parse(result);                 if (result.code === 100000) {                     res.reply({ Expected a conditional expression and instead saw an assignment.
var i, ii,         index; Unused variable.
};       for (var p in props) {         if (props.hasOwnProperty(p)) {           iframe.setAttribute(p, props[p])         }
console.log(domain_name)   pubsub_client = new Faye.Client(pubsub_server_url+'/pubsubhub', { Undefined variable.
var width = 0;         for (var i = 0; i < colspan; ++i) {           var colWidth = px.pixelify(this.colWidth[colIndex + i]); Undefined variable.
getUserElementFieldSet();         } Unnecessary semicolon.
}                     return;                 case "string": Unreachable code.
"==": "moveTabToNewWindow",             "g<": "moveTabToPreviousWindow",             "g>": "moveTabToNextWindow",             "u": "undoCloseTab", Duplicate key 'g<'.
var ua = navigator.userAgent.toLowerCase(),    match = /(webkit)[ \/]([\w.]+)/.exec(ua) ||     /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||     /(msie) ([\w.]+)/.exec(ua) || Unnecessary escape character.
return update(state, {         items: { $push: [evtUuid] },       });
const { img, x, y, width, height, repeat } = this;          if (repeat ==='repeat-x') { Unused variable.
for (let i = 0; i < jobs / batch; i++) {    for (let job of yield queue.take(batch)) {}   } Empty block statement.
extent: [-13884991, 2870341, -7455066, 6338219],   source: new olSourceImageWMS({     url: 'http: Undefined variable.
function assert(b, err) { if(!b) { throw err; } } Unexpected 'debugger' statement.
FileParser,   cleanSlug, Unused variable.
}   }   async onIrcPing(ircUser, msg) {     this.ircd.write(ircUser.socket, 'irslackd', 'PONG', msg);   }   onIrcLine(ircUser, line) { Duplicate name 'onIrcPing'.
errors = require('../errors'),     i18n = require('../i18n'), Redeclaring variable.
var requireNativeComponent = require('requireNativeComponent'); Unused variable.
ol_color.fromNamed = function(color) {   var el = document.createElement('div'); Undefined variable.
ignoreHTTPSErrors: true,       headless:!!config.debugWindow     }, Redundant double negation.
'<oppia-text-input-html></oppia-text-input-html>'));     var callBack = function() {};     pps.init(callBack); Undefined variable.
layout = translate( match[ 1 ], layoutTranslations );    }    if ( ( match = new RegExp( '(' + layoutVersions.join( '|' ) + ')\\/(\\d+)' ).exec( ua ) ) ) {     layoutversion = parseInt( match[ 2 ], 10 ); Expected a conditional expression and instead saw an assignment.
this.isLocked = function (name) {         if (!name || typeof name!=='string') { Unexpected 'debugger' statement.
return create(appId, varName, devValue, liveValue, cb);       case "read": Unreachable code.
case "fake":             assert(ep.protocol === "fake", " Unsupported transport protocol"); Unexpected lexical declaration in case block.
} DashboardAssistant.prototype.setup = function() { Unnecessary semicolon.
statful.timer();         expect(util.addMetricToQueue.calls.count()).to.equal(0);     }); Undefined variable.
} else {                      if (typeof selector == 'object') { Invalid typeof comparison value.
getActiveDelegates: angular.noop,       getDelegateByUsername: angular.noop     } Duplicate key 'getActiveDelegates'.
var originalPosition;   var maxRange = token.replace(/[>+~]/g,'$1 ').length;   var position = { Unnecessary escape character.
import { Profile } from '../../components/profile'; import { ErrorMessage } from './style'; import { getEverything } from './queries'; Unused variable.
import FormControl from '@material-ui/core/FormControl'; import { withStyles, createMuiTheme } from '@material-ui/core/styles';
switch (action.type) {     case SET_DEBUG_FLAGS: {       const obj = Object.assign({}, state, action)       delete obj.type Unexpected lexical declaration in case block.
const policy = require('../protocol/policy'); const rules = require('../covenants/rules');
return false;         case this.OPERATORS.dateOperatorInTheLast: Unreachable code.
return someValue!== undefined && someValue!== null && someValue!== 'undefined' &&       (typeof (someValue) ==='string'? someValue.trim().length > 0 : true);   }, Invalid typeof comparison value.
return req; } Client.prototype.requestStream = function(serviceName, data, opts) { Unnecessary semicolon.
log().info('Updated all tenants');         });     }); Don't use process.exit(); throw an error instead.
if (rule.isApplicableAt(corpus, site)) {             that.rules[rule.key()] = rule;
})) function Func(a,b,c) {     this.name = 'yeyan1996' Unused variable.
for (var jj = 0; jj < data.split.length; jj++) {       split = data.split[jj]; Redeclaring variable.
$('a#file-upload').click(switchToImport);         $(document).on('query.build.execute', switchToEditor).on(qdb.MSG_QUERY_DATASET, function (e, m) {             divExportUrl.val(qdb.toExportUrl(m.query)); Undefined variable.
default:     throw "unhandled ControlCommand: " + evalCommand;    } Unreachable code.
canvasParent, renderer, canvas, scene, camera,             light1, light2, controls, compass,             render, animate, add3DObject, invalidate, Unused variable.
qualityChange(event) {     this.trigger(Clappr.Events.PLAYBACK_HIGHDEFINITIONUPDATE) Unexpected console statement.
$('#package').val($.base64.encode(params));                 evt.preventDefault();                 $('#false-aws-login-form').submit(); Unexpected 'debugger' statement.
msie: 1,         version: ua.match(/msie ([\d.]+);/i)[1]       }; Unnecessary escape character.
map: React.PropTypes.object,         fluid: React.PropTypes.bool Duplicate key'style'.
function PeriodicRender() {                     this.render(); Move function declaration to function body root.
process.on('unhandledRejection', (error, promise) => {     console.error('Unhandled promise rejection', {error, promise}); }); Don't use process.exit(); throw an error instead.
if (templateElementNameFromCustomElementName.hasOwnProperty(tag)) {                     element.appendChild(document.importNode(elements[templateElementNameFromCustomElementName[tag]].content, true));                 }
case actionTypes.other.DECLARE_COUNTER:                     action = new Action.Other.DeclareCounter(data.name);                     break;                 case actionTypes.other.DECLARE_VARIABLE: Unreachable code.
if( ( match = block.match( /^\$(\w+)\s*=\s*(.+)/ ) )!== null ) {           scope.setVar( match[1], this.parseExpressions( new Scanner( match[2] ), scope ) ); Expected a conditional expression and instead saw an assignment.
else {                          log('Node: %s was created.', path + '/ids/' + consumerId);                          cb(); Unexpected console statement.
return oResourceBundle.getText("invoiceStatusA");     case "B": Unreachable code.
import { Heading, Subheading } from '../shared/Typography'; import { button, colors, fonts } from '../../utils/styles';
isMove = true;             x = e.pageX;             y = e.pageY;             xel = x - currentPhoto.offsetLeft; Undefined variable.
log.error('Are you sure this is a Sails app?');   _terminateProcess(1);  }, Don't use process.exit(); throw an error instead.
var search = "";
}     match = '/<\/?[^('+notmatch+')]+>/gi';     alert(match); Unnecessary escape character.
case 'h':      hour = time.getHours() % 12;      if (hour!== 0 && hour < 10) {       hour = '0'+hour; Redeclaring variable.
if (typeof plugin.schema) {         log.info('Normalizing event using plugin schema', JSON.stringify(plugin.schema)); Unexpected constant condition.
},     clearValue: function(value) {         textarea.get(0).value = value; Duplicate key 'clearValue'.
const parentNode = node.parentNode;     diffArray(oldItems, newItems, () => 0).accept({ Unused variable.
params.tags_autocomplete = $scope.list_data.tags;                 event_track.tags = $scope.list_data.tags;             };
for(i = 0; i < _endKeyFrames.length; i++) {     kf = _endKeyFrames[i];     kf.frame = _maxKeyFrame - kf.offset; Redeclaring variable.
oldLambdaNames.forEach((name) => { Unexpected 'debugger' statement.
} else {       names = combinations(name), levels = [];       for (var i = 0, l = names.l; i < l; i++) { Redeclaring variable.
} else {                 result = true;           } Empty block statement.
}  this.renderBufferImmediate = function ( object, program, material ) {   object.state.initAttributes(); Unused variable.
pass = false;     }     this.assert(pass, "Expected all elements to match."); Unnecessary semicolon.
var path = require('path'),     nodeunit = require('nodeunit'),     mkdirp = require('mkdirp'), Unused variable.
}); var map = new ol.Map(document.getElementById('map'), {   center: new ol.Coordinate(0, 0), Undefined variable.
is_editable = true;     } else if (window.hasOwnProperty(is_admin) && is_admin) {
else if(noteCount > 3){     throw new Error("This bar is full already!");    } Unreachable code.
import * as Logo from 'components/logos' import React from'react' import { borders, colors } from 'theme' Unused variable.
setAutocommitQuery: function(value) {       return "SET autocommit = " + (value? 1 : 0) + ";"     }, Redundant double negation.
v = old[k];           if (!(k in val)) {             this.realRemove(k); Unexpected negating the left operand of 'in' operator.
case "weights":             clips = this._parseAnimationSampler(samplers[channelDef.sampler], false);             layers = []; Redeclaring variable.
for (var i = 0; i < gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS); i++) {       var name = gl.getActiveUniform(program, i).name;       program.uniforms[name] = gl.getUniformLocation(program, name);     } Undefined variable.
var server = app.listen(app.get('port'), function () {   console.log('App is running at port', app.get('port'));
var EMA = require('./EMA.js'); Unused variable.
consumerTag = ok.consumerTag;   });
const listingHash = yield call(getListingHash, listingID)         const args = [listingHash, convertedNumTokens, listingID, data]         yield call(sendTransactionSaga, registry, methodName, args) Unexpected lexical declaration in case block.
import ToastsActions from './ToastsActions'; import app from '../lib/app'; Unused variable.
var _getErr = function (s7err) {         if (Array.isArray(s7err)) return new Error('Errors:'+ s7err.join('; ')); Undefined variable.
var Rotate = function (tileXY, direction, originTileXY, out) {     if (out === undefined) { Unexpected 'debugger' statement.
, remove: function (e, direction) {       if (this.$input.is(document.activeElement) || this._disabled || this._readonly) return Unexpected console statement.
this.ptr-=3;  var t=this.dstk.get("$error");  if (t instanceof Function) t.call(this); else this.stk[this.ptr++]=t;  this.stk[this.ptr++]="command"; Redeclaring variable.
this._file = file;             }             this._children = correctInherit(SpecificChildren, children); Unnecessary semicolon.
if (!condition) {         throw new qx.dev.unit.AssertionError(comment, failMsg); Unexpected 'debugger' statement.
const conn = await db_open();   await activate_feed(conn, feed_id);   conn.close(); Undefined variable.
} } function expandInlineDirectives(directives, lines) { Unnecessary semicolon.
import { h, Component } from 'preact';
composite: composite,  value: value,  xml: xml, Duplicate key 'value'.
throw new SyntaxError('"' + str + '" contains no units');     } Unreachable code.
})     if (syncOaks instanceof Error) {       throw syncOaks; Invalid typeof comparison value.
var server; function start(host, outPort = 80) {  sessionMgr.init(); Unused variable.
}); Unexpected 'debugger' statement.
compileMode: "async",         assetPath: "app/assets/javascript",         module: { Duplicate key 'path'.
} else {             document.write( echo.arguments[i] );         }
log(FAILURE + EMPTY + overallFail + " Failures");                 break;             default:                 status = "pass"; Expected a 'break' statement before 'default'.
self.topIndex = topIndex;         } Unexpected console statement.
event.stopPropagation();                     start(event);                 };
throw new Error("For not all values in the array " + data.val + " is the property " + forChild.val + " of type " + types.join(' or ')); }; Unreachable code.
return false;         var touches = event.touches && event.touches.length? event.touches : [event];
const avatar = [].concat(avatars)[0];       if (avatar) {         this.setState({ Redundant double negation.
);     _templateObject_709cbe80e11a11e88dd52590c4efd568 = function() {       return data; '_templateObject_709cbe80e11a11e88dd52590c4efd568' is a function.
Dom.addClass(nLi,"embassyAction");      bbtn = document.createElement("button");      bbtn.setAttribute("type", "button"); Redeclaring variable.
return console.error('Topic cannot be undefined');   } Unreachable code.
var $reel = document.createElement( 'div' );     $reel.trigger('fractionChange', Number(ix));     equal( $reel.data('value'), it, 'Passed '+ix);   }); Undefined variable.
﻿function isNull(value) {     return typeof value === "undefined" || typeof value === "unknown" || value == null; } Invalid typeof comparison value.
noDeleteVar: function (str, o) {         var rx = /delete ([\w$_]+)(?!.*delete [\w$_]+)/; Unused variable.
if (msgType =='shortvideo') {             atts.push({ Unexpected constant condition.
dataRows.each(function (row) {                         row.$$('td').get(1).getText() Unused variable.
if (_res && _res.clearCookie) {     opt = path? { path: path } : undefined;     _res.clearCookie(name, opt); Redeclaring variable.
}     $(document).ready(function () {         var header = $("meta[name='_csrf_header']").attr("content");
}     return valid; }; Unnecessary semicolon.
"FS type":"",     "Get Information":"",     "Get Pool of resources":"",     "Graphics":"", Unnecessary escape character.
if (allowMultiple) {                 tempArray = cron[4].split(',');                 for (var i = 0; i < tempArray.length; i++) { tempArray[i] = +tempArray[i]; } Redeclaring variable.
import { Feature } from '@common-stack/server-core'; export default new Feature(authModule);
}   return instr.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');   }; Unnecessary escape character.
this._addSlot(propValue);           break;         }         default: {           console.warn(`${propKey} is unknown`); Expected a 'break' statement before 'default'.
_extend = oj.$.extend   function _isCapitalLetter(c){return!!(c.match(/[A-Z]/));}   function _has(obj, key){return ObjP.hasOwnProperty.call(obj, key)} Unnecessary semicolon.
actual = Buffer.concat([actual, chunk])       callback() Unexpected console statement.
if (overlap.y === 'inclusive') {       t.vertical = overlap.y     } 't.vertical' is assigned to itself.
else {       callback(qs.stringify({error: 'Grant: missing or misconfigured provider'}))     } Redeclaring variable.
if (textStatus ==='success') {                 self.remoteId = data; Unexpected console statement.
var scanline = slice.call(bytes, begin, end);       literals += '\x00' + fromCharCode.apply(null, scanline); Unexpected 'debugger' statement.
if (id === null) {     this.set('_id', value);     return value;    } else if (EG.String.startsWith(id, prefix) &&!EG.String.startsWith(value, prefix)) {     return value;    } else { Undefined variable.
var needsShy = document && (function() {   var testEl = document.createElement('div');
mChainCount[ i ] = modelChainCount;             for( j = 0; j < modelChainCount; ++j ){                 cModelIndex[ j + chainOffset ] = i; Redeclaring variable.
if (hasClass(self.element.classList, 'ui')) {                  const html = $document.find('html').eq(0); Unexpected constant condition.
try{         const _settings = JSON.parse(data);         if (_settings.rpcSettings.rpcHost === '' || Unexpected console statement.
return 'W';     case 'fog' : Unreachable code.
anychart.VisualBaseWithBounds.prototype['height'] = anychart.VisualBaseWithBounds.prototype.height;
let payload = tryParseJSON(payloadString)     if (payload) return payload Redundant double negation.
armBuild();                             return Q();                         case 'x86': Unreachable code.
const componentName = ReactComponent.displayName || ReactComponent.name ||     (/function ([^(]+)?\(/.exec(ReactComponent.toString()) || [])[1] || 'Component';
for (let i = 0; i < this._lookahead.length; i++) {       this.queue.push(this._lookahead[i]); 'i' is constant.
scaleVertically(size) {         return react_native_1.PixelRatio.roundToNearestPixel(size * verticalFactor);     },     scaleWithAverageRatio(size) { Unreachable code.
export default [   [     ['pagi', 'pagi', 'tengah hari', 'petang','malam'], u,     ['tengah malam', 'pagi', 'tengah hari', 'petang','malam'] Unexpected comma in middle of array.
'available for your system. Please install a supported C++ compiler and reinstall the module \'uws\'.');         return false;     } Don't use process.exit(); throw an error instead.
if (sDisplayShape === AvatarShape.Circle) {    sDefaultIconPath = Avatar.DEFAULT_CIRCLE_PLACEHOLDER; Undefined variable.
var isBrowser = typeof window == 'object'; var Ajv = require(isBrowser? 'ajv' : '../lib/ajv');
if (this.token === this.tok.T_LIST) {       var result = this.node("list");       var assign = null;       var isInner = this.innerList; Redeclaring variable.
$(document).unbind('click', clickHandler);                 } Unnecessary semicolon.
export class Transient extends Registration {   constructor(key){     super();     this.key = key; Expected to call'super()'.
case 7:             if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {               _context.next = 54;               break; Expected a 'break' statement before 'case'.
this.checkboxRender = (value, label) => {             const { columnHeight, lineHeight, columnBorderWidth, colAlign, col: { columnAttr = '', editor }, } = this.props;             let justifyContent = ''; Unused variable.
offset = step * offset;      for (i = 0; i < len; i += 1) {       L[i] = (step * i + offset).toFixed(dp); Redeclaring variable.
{                     if(isNull(data.error) && data.acknowledged === true)                     { Invalid typeof comparison value.
case 20:                         var customFlags = [];                         _context.next = 23;                         return prompt([{ Expected a 'break' statement before 'case'.
createPackage() {                     this.dialogList.state.dialogFormVisible = true; Unexpected 'debugger' statement.
document.forms[0].partialCountValue.value = "";    document.forms[0].partialCountPeriod.value = "";
)       default: Unreachable code.
data.toTime = toTime;         $("#chart").html('<div align="center">Loading...</div>');
return createStoreWithMiddleware(reducer, initialState) }
if (mutation.removedNodes) {         for (j = 0; j < mutation.removedNodes.length; j++) {           child = mutation.removedNodes[j];           if (child.nodeType === Node.ELEMENT_NODE) { Redeclaring variable.
}       break;     case 'api':       tag.visibility = parts.shift(); Expected a 'break' statement before 'case'.
return Index._displayFile(req, res, tempDir, `${name}.log`);   } Unnecessary semicolon.
var isHTML = text.search(/<[a-z/!]/i)!== -1;         if(isHTML) { Unnecessary escape character.
return DRAIN_TYPES.find(({ id }) => id === drainTargetType); } Unnecessary semicolon.
if (msieVersion == 10) {                 display = '-ms-' + flex + 'box';                 if (props.alignItems) { 'display:' is defined but never used.
case 4:            if (this.xhr.status == 200) {             this.replaceContent();           } else {             this.appendChild(this.xhr);           } Empty block statement.
import Routing, { Router, Switch } from "./../utilities/routing";
const REGEXP_PATH = /\ const REGEXP_ARG = /'/g; const REGEXP_ESCAPE = /\$\(.*?\)|'/g; Unnecessary escape character.
if (typeof t =='string' && /,/.test(t)) {     tp = t.split(",");     t = tp[0]; Redeclaring variable.
this.dom.firstChild.style.textShadow = "-1px -1px 0 " + newVal;             }         }); Unnecessary semicolon.
throw new Error('Unimplemented API: dojo.data.api.Read.hasAttribute');  }, Unreachable code.
},         set weight(value) {             this.weight = value;         },         get weight() { 'weight:' is defined but never used.
import { RouterComponent } from "./router"; const { SchemaForm } = schemaFormReact; let store = createStore(combineReducers({ Unused variable.
yy.Search.prototype.toJavaScript = function(context, tableid, defcols) {
console.log('ERROR: Failed to load translation table');         };
if (clear === true) canvas.width = canvas.width;    console.log("Drawing triangle:", triangle);   ctx.beginPath();
stopDisposableDaemons(daemons, function () {           process.exit();         }) Don't use process.exit(); throw an error instead.
}, function(error, response, body) {      expect(body).to.equal({success: true});      var data = cantrip.get("/foo/collection"); Undefined variable.
}       if (self._state.requests[0].command.indexOf('RENAME') > -1) { Unexpected 'debugger' statement.
var max = 0;             values = stats.graphsLODs;             for (i = 0; i < samples; i++) {                 max = values[i][0] > max? values[i][0] : max; Redeclaring variable.
var scripts = document.getElementsByTagName("script");     var rePkg = /dojo\.js([?.]|$)/i;     for(var i = 0; i < scripts.length; i++){ Unnecessary escape character.
const DatabaseManager = require('@adonisjs/lucid/src/Database/Manager') const { ioc } = require('@adonisjs/fold') Unused variable.
var logPushApi = '';
}           } catch(err) {             logger.error('Empty block statement.
});   } cv.render = function() { Unnecessary semicolon.
$ERROR('#s'); } var \u0074 = 1; if (t!== 1) {   $ERROR('#t'); Undefined variable.
XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;   module.exports = XMLHttpRequest; Undefined variable.
(userAgent.indexOf('Firefox/')!= -1 && userAgent.indexOf('Android')!= -1);        } catch(e) {}     return false; Unnecessary semicolon.
require('source-map-support').install();   } catch (_error) {     console.error(_error);   } Empty block statement.
{         if ( def!== null && typeof def!== 'undefined' )         { Invalid typeof comparison value.
'use strict'; var cortex = require('../'); var node_path = require('path'); Unused variable.
console.error(VERSION);                     return;                 case "-o": Unreachable code.
var tab = $.extend({}, tab, tab[r]);     if (id == null || typeof id == 'undefined') {      that.tabs.push(tab); Redeclaring variable.
throw new Error('TECHNICAL_EXCEPTION_HTML_STRUCTURE_MAY_HAVE_CHANGED')             default: Unreachable code.
elm.append(propsDiv);     var dataView = new Slick.Data.DataView({ inlineFilters: true });     dataView.beginUpdate();     dataView.setFilter(this.filter);     dataView.endUpdate(); Undefined variable.
vTree.addChildToTreeQueue(this);   } }; Unnecessary semicolon.
require('../../../components/scientificName/scientificName.directive.js'); angular.module('portal').controller('speciesKey2Ctrl', speciesKey2Ctrl); Unused variable.
function TelegrafFlow (opts) {   opts = Object.assign({     cancelCommands: ['/cancel'], Redeclaring variable.
+', equationY_: "'+this.equationY_+'"'       +'}'; }; Unnecessary semicolon.
if (getOwningFileObject()) {         addClass(primary_selector, "collapse");     } else {
{     $('#stdout').text(data.history); Unexpected console statement.
getComponentDefinition(uri, [ graphUri ]).then((res) => {         componentDefinition = res.object Unexpected console statement.
this.dirty = false;                 } Unexpected 'debugger' statement.
helper.nock().get("/v1/users/FakeUserId/applications").reply(200, items);       Application.list(function(err, list){ Unexpected 'debugger' statement.
import React from'react'; import { ThemeProvider } from '@material-ui/styles'; Unused variable.
if (!$iugo['store']['bind_to_dom'].namespacedTagIndex[namespace]) {      $iugo['store']['bind_to_dom'].namespacedTagIndex[namespace] = [];     }
var hiddenUIContext = create_context (hiddenUICanvas) ;   for(var kButton = 0 ; kButton < Nbutton ; kButton++) { Redeclaring variable.
} else {           substr = `<span class="token string">"<a class="token md-link" href="./#articles/${p.history[2].replace('.html', '')}">${p.metadata.title}</a>"</span>`         } Redeclaring variable.
if (!res._header) {           res.writeHead(statusCode); Redundant double negation.
while (foo -= bar) { Expected a conditional expression and instead saw an assignment.
});       return map; Unexpected 'debugger' statement.
citation += 'DOI: <a href="http:                 } else if (url) {                     citation += 'URL: <a href="' + url + '">' + url + '</a>. '; Expected a conditional expression and instead saw an assignment.
function checkURL(tabId, info, tab) {  var url = new RegExp( '^https?:  if ( url.test( tab.url ) ) { Unnecessary escape character.
list: function(sids, callback) {             sids = sids || []; Redeclaring variable.
"you'd like to deploy your app here.\n");     return 1;   } Don't use process.exit(); throw an error instead.
'use strict'; const models = require('./index');
var t    = require("../../types"); exports.Function = function (node, parent, file) {   if (!node.rest) return; Unused variable.
}   onDragEnter() {     const { onDragEnterCallback } = this.props; Unused variable.
value = JSON.stringify(value);     } catch (e) {       console.error(e);     } Empty block statement.
'use strict'; Unnecessary semicolon.
throw err;         }     }); Unnecessary semicolon.
var cordova = require('cordova'),     channel = require('cordova/channel');
event = new Event('close', {code: code || 1000, reason: reason || ''});     event.initEvent('close', false, false); Redeclaring variable.
return ["image"]; } var Modul_itunes_artwork = function () { Unnecessary semicolon.
if(uniqueCount == "none" || uniqueCount == "" || uniqueCount == null) { Unexpected console statement.
function() {    assert.deepEqual( container.children( ".ui-screen-hidden" ).length, 3, "Filtering controlgroup inputs and links by value" );    input.val( "" ).trigger( "change" ); Undefined variable.
for (i=0;i<optionGroup.length;i++) {      optionGroup[i].applyStyle("display","inline-block"); Redeclaring variable.
}     return vnode Unexpected console statement.
import DeviceCard from './card'; import styles from './styles.css'; Unused variable.
}     expr.ir(state, irs); Unexpected 'debugger' statement.
import { GET_LAUNCH } from "./cart-item" export { GET_LAUNCH } Unused variable.
enumerable: false,             get: function () {               return fieldFormats.defaultByType[field.type];             } Expected to return a value in method 'get'.
var Browsers = require("./browsers").Browsers;
_data = [];     _dataString = s.replace(/~|~/g,"\n");     var sd = _dataString.split("\n"); Unnecessary escape character.
}           return _results1;         case 'Code': Unreachable code.
while (~k) {       m = str.slice(k).match(END_TAGS)       if (m) {         k += m.index + m[0].length Expected a conditional expression and instead saw an assignment.
class FileDragSource extends DragSource {   constructor() {     super();     this.item = { Expected to call'super()'.
this._showMenu();     }   } Unnecessary semicolon.
(function (global, undefined, ctor) { Unnecessary semicolon.
_getLabelOptions: function(parsedParams) {   parsedParams = parsedParams[0];   var includeLabel =!parsedParams.label || ( parsedParams.label && parsedParams.label[0] == "yes" ); Redeclaring variable.
exports.Vinyl = Vinyl;
];     const fontBBox = aFontInfo.bbox;     for (let i = 0; i < fontBBox.length; i++)       topDictIndex = topDictIndex.concat(this.encodeNumber(fontBBox[i])); Redeclaring variable.
params = params || {};   var endpoint = applicationName + '/form/'+formName+'/record/add/'; Read-only global'module' should not be modified.
var webpack = require('webpack'); var webpack = require("webpack") Redeclaring variable.
var Transformer = require("./transformer"); var File        = require("./file"); Unused variable.
constructor() {   } '_timeouts:' is defined but never used.
},                 protected: {                     _loadGL() {                         Public(this).loadGL()                         Public(this).emit(Events.BEHAVIOR_GL_LOAD, Public(this)) Duplicate key 'protected'.
import Button from'react-native-button'; import {analytics, airloy, styles, colors, api, toast} from '../../app'; import util from '../../libs/Util'; Unused variable.
Blockchain.prototype.putBlockOnHold = function(block) {     if (!(block['hash'] in this.buffer)) {         this.buffer[block['hash']] = { Unexpected negating the left operand of 'in' operator.
_model_name: "TooltipModel",             _model_module: "bqplot", Duplicate key '_model_name'.
'use strict'; const CI = require('./ci.js'); Unused variable.
function hideFn(e){             hideHandle = setTimeout(function(){ Redeclaring variable.
if(typeof sourceMapStringOrOffset =='string') {       var [offset, length, id,..._rest] = sourceMapStringOrOffset.split(":"); Redeclaring variable.
},    es:{      months: [ Duplicate key 'es'.
continueProcessing = false;               break;             case 'x':             case 'compress': Expected a 'break' statement before 'case'.
(function() {
var type = Object.prototype.toString.call(subject).slice(8, -1)     switch (type) { Unexpected console statement.
var URL;
export default class Outlet extends Component {   constructor() {     super();   }   componentDidMount() { Expected to call'super()'.
head.insertBefore(el, head.firstChild); } Unnecessary semicolon.
handleClickToggle: function() {     TodoActions.toggleItem(this.model.id); Unexpected 'debugger' statement.
if (arrowStyle) {                 return maptalks.Util.isArray(arrowStyle)? arrowStyle : this.arrowStyles[arrowStyle];             } Undefined variable.
off =!$("dsos-names").checked ||!$("dsos-show").checked;             for (i=0; i< depends["dsos-names"].length; i++) { fldEnable(depends["dsos-names"][i], off); }       break; Redeclaring variable.
window.addEventListener('click', this, true);     window.addEventListener('keydown', this, true);   }, Undefined variable.
}          var self = this, o = this.options;          if(BI.isNotNull(configs.group_value)){ Unnecessary semicolon.
} function getWhitelistLogData(meta) {     if (!meta) { Unused variable.
var b = makeReactive(1);     var sum = makeReactive(function() { Unexpected 'debugger' statement.
that.origin = new Pose();     } else { Undefined variable.
} } Unnecessary semicolon.
}                         point = new OpenLayers.Geometry.Point(msg.data[lonMapping], msg.data[latMapping]);                         point.transform(coreMap.Map.SOURCE_PROJECTION, coreMap.Map.DESTINATION_PROJECTION); Redeclaring variable.
var tmp = /\%output\.(\S+)/.exec(cmd);   if (tmp && tmp.length) {     extensions[2] = tmp[1];     cmd = cmd.replace(/\%output\.\S+/, '%output'); Redeclaring variable.
if (m3u8.version >= 4)         for (attrname in extParserV4) { if (extParserV4.hasOwnProperty(attrname)) { extParser[attrname] = extParser[attrname]; } }       if (m3u8.version >= 5) 'extParser[attrname]' is assigned to itself.
$timeout(function () {                             if (e.date) {                                 $scope.$apply(function () { Redundant double negation.
function invertDatumTypes() {       for (key in TDatumType) {         if (!TDatumType.hasOwnProperty(key)) continue;         datumEnum[TDatumType[key]] = key; Undefined variable.
searchUsernames: { title: 'Search all usernames, used for admin/mod UI components to lookup users' },   removeInvite: { title: 'Remove an Invitation' } }; Duplicate key'removeInvite'.
kbnAngular(chrome, {});     });     it('should return breadcrumbs based on the url', () => { Unexpected 'debugger' statement.
for(var i = 0; i < L; i += 1) {       var Undefined variable.
var route = function route(req, res, next) {   var resHtml = ""   if(typeof req.query.token!== 'undefined' && req.query.token!== null) { Unused variable.
this.ESCAPED_CHARS_REGEXP = new RegExp('[\\.+*?^$[\](){}\/\'#]','g'); Unnecessary escape character.
action= {'newstate':'stay','prev_state':prev_state};   }   else if (msg =="disarm") {      action= {'newstate':'disarm','prev_state':prev_state}; Unexpected constant condition.
}else{         reject(new Error(`Config for ${id_config} not found in section ${section}`));       } Unreachable code.
async.auto(calls, (err, results) => {             console.log(':: bootstrap ::', err, results); Unexpected 'debugger' statement.
return;   } })(jQuery); Unnecessary semicolon.
function addAliasCommon(url) {         var input = $('#add-alias-input');         url = $.trim(input.val());         if (url!== '') { Redeclaring variable.
case actionTypes.other.SET_VARIABLE:                     action = new Action.Other.SetVariable(data.name, data.value);                     break;                 case actionTypes.other.SET_VARIABLE_BY_JSON_ATTRIBUTE: Unreachable code.
parseConnection = require('pg-connection-string').parse,     dico = require('./dico'), Unused variable.
if(typeof jszip === 'undefined') jszip = require('./jszip.js');     } Empty block statement.
if (err) {           callback(err);         } Don't use process.exit(); throw an error instead.
if(Settings.supportAdjust){      var _thList = _this.getOriginalThDOM(_table),     _td; Unreachable code.
return this.setMethod(value, (err, value) => {       if (err) throw err       this.log('Fake Set Callback Received: ', value) Undefined variable.
else {                                 currentStep.href ='mipilaw66baidu_informLawyer_failed'                                     + '?lawyerId=' + lawyerId + '&sessionId=' + sessionId Undefined variable.
return s    .replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, '\\$1') Unnecessary escape character.
menu.open = false;   } });
closest = null;     parentMesh.updateMatrixWorld();     this.allComponents.map( component => { Undefined variable.
case "a": damage = {elem: "fir", coeff: 14.8, total: true}; break;        case "c": damage = {elem: "phy", coeff: 10.4, total: true}; break;        default: damage = {elem: "psn", coeff: 10.4, total: true};        } Expected a 'break' statement before 'default'.
if ((conversationMd = this.chatConversationsCl.get(msg.sender))) {         conversationMd.set({ Expected a conditional expression and instead saw an assignment.
var failure_T = 'Could not Triangulate'
for (let i = 0; i < platformsDetectors.length; ++i) {             if (platformsDetectors[i].regexp.test(navigator.userAgent)) { Redeclaring variable.
switch (step) {             case'm.login.password': {                 const PasswordLogin = sdk.getComponent('login.PasswordLogin');                 return ( Unexpected lexical declaration in case block.
}     try { Redeclaring variable.
Meteor.publish("mapLayers.tags", function() {   this.unblock();
if(scope.model.config.customViewPath) {             view = scope.model.config.customViewPath;         } Undefined variable.
if (filter) {     const examplePath = filter.field!== '@' Redundant double negation.
nextToken = this._currentToken.slice(commentEnd + 3); Redeclaring variable.
addItem: function(startTime) {     startTime = startTime || this.timeline.time();     var item = this.getNextItem(); Redeclaring variable.
ol_geom.flatLinearRingIsClockwise =     function(flatCoordinates, offset, end, stride) { Undefined variable.
return rc? rc : ignoreReturnValue;     } Unnecessary semicolon.
} else {                 domStyle.removeClass(this.eventContainerNode, 'list-has-more');                 this.set('eventRemainingContent', ''); Undefined variable.
default:         uncompressedData = compressedData;     } Redeclaring variable.
import { Component } from'react' Unused variable.
return __awaiter(this, void 0, void 0, function () {         var outputDataSize, interval, api;         return __generator(this, function (_a) { Redeclaring variable.
fileHelper = require('./fileHelpers'),   os = require('os'), Undefined variable.
for (i = 0; i < j; i++) {         R = multiply(R, R) Redeclaring variable.
} else if (prop ==='ref') {         } else { Unexpected 'debugger' statement.
var projectionExtent = projection.getExtent();   var vectorSource = this.getLayer().getSource();   googAsserts.assertInstanceof(vectorSource, olSourceVector);   var transform = this.getTransform(frameState, 0); Undefined variable.
};     case types.CONNECT:       return { Duplicate case label.
}             case'm': Unreachable code.
var EG_Model = EG.CoreModel.extend(Ember.Evented, { Undefined variable.
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
R.assoc("counter", state.counter + 1, state)   ),   decrement: new Subject().map(state =>     R.assoc("counter", state.counter - 1, state) Undefined variable.
const CHAT_WINDOW_SELECTOR = '.chat.messages'; const URL_REGEX = new RegExp(/(http:\/\/|https:\/\/)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?& Unnecessary escape character.
import {Actions, ActionConst} from'react-native-router-flux' import styles from '../styles/styles'; Unused variable.
} else {             app.router.navigate(`task/${_.first(responses).taskId.id}`, {trigger: true});           }
it("should use direct xml file", function(done) {         try This generator function does not have 'yield'.
var item = function*(username) {         var user = yield* models.User.get({ username: username }, {}, db);         if (user) Undefined variable.
if (typeof attr[key] === 'function') {       arr = attr[key](values, 'attr', cntx, tag, key);       value = arr.join('');      } else { Redeclaring variable.
if (options.activeClass) {                     item.classList.add(options.activeClass);                 } Unnecessary semicolon.
return require(path);     } catch (err) {} Empty block statement.
return;         }         var errorPrefix = "Error in " + JS_HANDLE + ".getSupportInfo(): ";         try { Unreachable code.
this._line(ctx, from2d, to, this.axisColor);       msg = this.zValueLabel(z) +'';       this.drawAxisLabelZ(ctx, from3d, msg, 5); Redeclaring variable.
const tagsQueryString = aws.s3TagSetToQueryString(tags.TagSet);   return aws.promiseS3Upload({ Unexpected 'debugger' statement.
VariableManager.prototype.destroyVariable = function(variableName) {   if(this.variables[variableName]) {     delete this.variables[variableName]; Redundant double negation.
setRequest: function (requestId) {                 currentRequestId_1 = currentRequestId_1 || 0;                 perRequestPipeName_1 = namePrefix_1 + requestId; 'currentRequestId_1' is assigned to itself.
case "t6t":           replace_code = preset_mode_util("{t6t}", mode_str, origin_mode_str);           code = code.replace(/\{t6t\}/g, replace_code); Unnecessary escape character.
req = { url: url, method: method };       while ((fn = match(req, routes, i))) {         i = req._route_index + 1; Expected a conditional expression and instead saw an assignment.
}     for (key in tile.glueImageryCredits) {         value = tile.glueImageryCredits[key];         value2 = this.visibleCredits.imagery[key]; Redeclaring variable.
ext, dir,         path, fs, zlib, url, pipe, CloudFunc, diffPatch, querystring, time, Unused variable.
}                         newSelected = [];                         if(index < min) { Unexpected lexical declaration in case block.
_trigger: Proxy._widgetTrigger({       Selection: function(params) { Undefined variable.
active: false,
if (level == 'error') {         throw new Error(winston.config.syslog.levels[level]);     } Don't use process.exit(); throw an error instead.
'number': /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/,   'operator': /[\+\-\*\\\/:=\?&\|<>]/,   'punctuation': /[\{}[\]()]/,   'boolean': /\b(true|false)\b/, Unnecessary escape character.
changes.metric4 = action.metric;                     break;                 case 5:                     changes.metric5 = action.metric; Expected a 'break' statement before 'case'.
var node = this       while((node = node.parentNode)){         if(['svg','symbol', 'image', 'pattern','marker'].indexOf(node.nodeName) > -1) break         m = m.multiply(node.matrixify()) Expected a conditional expression and instead saw an assignment.
switch (opt) {             case "s":                 params.ServerName = args.optarg;                                         break;             case "f":                 params.FilterName = args.optarg; Expected a 'break' statement before 'case'.
return closure;   } Unnecessary semicolon.
var map = new Map();         var spy = sinon.spy();         var observer = map.observeMapChange(function (plus, minus, key, type) { Undefined variable.
if(sjs.use_canvas) {         for(var name in sjs.layers) {             var layer = sjs.layers[name]; Undefined variable.
console.log("   jobscount:", ins.JobsCount.data[0]);     var ranks = ins.Ranks.data[0].stdout.replace(/=>/g, ":").trim().split("\n");     var threatLevel = calculateThreatLevel(ranks); Undefined variable.
{           control = controls[id];           if (control instanceof qx.ui.core.Widget) {             control.replaceState(old, value);
hash = hash.replace(/^#/, ''),                          window.onhashchange = null;
return instance;     let rules;     let ruleMandatoryProperties; Unreachable code.
if (matches.length) {                 for (i = 0; i < matches.length; i++) {                     deps = runDepsRegExp.exec(match); Expected a conditional expression and instead saw an assignment.
archive.fileActStream = pda.watch(archive)   archive.fileActStream.on('data', ([event, data]) => {     if (event === 'changed') { Unused variable.
}, [page]);   const modal = component => {     setOpen(true); 'component' is assigned to itself.
var stream = new air.FileStream();  stream.open(newFile, air.FileMode.UPDATE); Undefined variable.
function LinkHeaderFactory($q, $extendReadOnly, $injector) {     return LinkHeader; Unused variable.
class SourceView extends EventChannel {     constructor(args) {         super();         this._options = args; Expected to call'super()'.
label: '附近',         screen: 'zqc.Bootstrap',         icon: iconImages['tabbar-nearby'],         navigatorStyle: DEFAULT_NAV_BAR_STYLE, Undefined variable.
return `${LTI_LAUNCH_URL}?action=${action}&objectId=${objectId}`;             case LMS.LEARNING_SUITE.id: Unreachable code.
case FETCH_ENTRIES:     if (action.error) { Unexpected console statement.
MapStore.emitChange();       break;     default: Expected a 'break' statement before 'default'.
} catch (e) {           } Unnecessary semicolon.
if (fragment instanceof Prismic.Fragments.Number) {                 return fragment.value;
import { withServicesKnob } from '@bbc/psammead-storybook-helpers'; import { RequestContextProvider } from '#contexts/RequestContext'; Unused variable.
return  (       getExistingServiceForWindow(window, 'url-replace')); };
(function() {  'use strict'; Unnecessary semicolon.
if (err) { return callback(err); }                 console.log(tmpFilePath);                 var stream = Fs.createReadStream(tmpFilePath).pipe(new PNG({ filterType: 4 })) Unexpected 'debugger' statement.
this.setSelectedElement(vParent);           }         } Unnecessary semicolon.
}     else if (event.ctrlKey || event.metaKey) ;     else if (event.shiftKey) { Empty block statement.
function animate(view, props, opts) {   return new Promise(function(resolve) { Unexpected 'debugger' statement.
var options = map.config();         Util.extend(options, {             'center' : map.getCenter(),             'zoom'   : this._getOverviewZoom(),            'scrollWheelZoom' : false, Undefined variable.
maxWidth = Math.max( upWidth, downWidth ),                 maxHeight = Math.max( upHeight, downHeight ), Redeclaring variable.
codeValue = record.data.code;         say(nameField);   nameField[0].setValue(nameValue); Undefined variable.
compiled_object[className].info.abiDefinition = JSON.parse(contract.interface);   }   return compiled_object; }; Undefined variable.
if (message.error) {       logger.error(message.error);       return event.sender.send('error'); Unexpected console statement.
switch(s) {         case's': f.interval = n * 1000; break;         case'm': f.interval = n * 1000 * 60; break;         case 'h': f.interval = n * 1000 * 60 * 60; break;         default:  f.interval = 2000;     } Expected a 'break' statement before 'case'.
H.waitUntil('document.body', function () {      location.pathname = p;     });
this.setNumberOfOutputChannels(0, 2);     }, Redeclaring variable.
_this._hasScrolled = false;         }).bind('touchmove.mapify', function () {             _this._hasScrolled = true; Unused variable.
return inputName; } Unnecessary semicolon.
import { Route, IndexRedirect, Link } from'react-router'; import { layoutConnector, rightBar } from '../../Common/Layout';
var oauthModule = require('./oauth'); var rest = require('../restler'); Unused variable.
_unifyUndoStack()   if (undoStack[undoPosition - 1] && (undoStack[undoPosition - 1].name!= street.name)) { Undefined variable.
if (this.isPaginated()) {             return get(data, 'data', data);         } Undefined variable.
this.events = []; } util.inherits(Response, message.Message); Unnecessary semicolon.
})(); (function(){ Unnecessary semicolon.
var node_parent_id = classNames[key].substring(9);                 tobj[1] = parseInt($("#"+node_parent_id).attr("class").match(/item-id-(\d+)/)[1], 10);             } Redeclaring variable.
console.log("sending", msg, "to", current_cid);     req = {"token": token, "args": {"cid": current_cid, "message": msg}};     d3.json("/api/v1/send-basic").post(JSON.stringify(req),                                        function(err, r) { Undefined variable.
});     } else if (view == "profile") {       view = "profile";     } else if (view == "follow") { Empty block statement.
&& t <= y1 && y2 <= b);   case 'intersect': Unreachable code.
var instance       mix = typeof mix === T_STRING? riot.mixin(mix) : mix;
const SVCConfigForm = reduxForm({     form: 'SVCConfig', 'SVCConfig' is a class.
this.select.modifier = 'RECORDSET';   var selectfn = this.select.compile(databaseid);      if(db.engineid && alasql.engines[db.engineid].intoTable) { Undefined variable.
var _ActiveCallsPanel = _interopRequireDefault(require("../../components/ActiveCallsPanel"));
if(!this.props.disabled) {       if (e.targetTouches.length == 1) {         const touch = e.targetTouches[0];         this._changeComponent(touch.pageX);
constructor: function(model, options) {       var defaults = _.result(this, 'defaults'); Unexpected 'debugger' statement.
{         this.getContentElement().setValue( Redeclaring variable.
var regex = /((\w|\s)+)\(([^)]+)/mg       var result, i;       while ((result = regex.exec(transform))) {         var split = result[3].split(/[,\s]+/) Expected a conditional expression and instead saw an assignment.
marginBottom: 20,     fontSize: 20   }, Duplicate key'marginBottom'.
} else {     root.addEventListener('polymer-ready', done);   } Undefined variable.
}         tok = this.nextToken();         if(tok && tok.type === lexer.TOKEN_BLOCK_END) { Redeclaring variable.
that.emit('frame_navigation_state', my.frames[from], state);       }); Unexpected console statement.
function showValue() {   console.info('Temperature: %s C', modelTemperature.data[modelTemperature.data.length-1].t);
}));     ctx.scope.set("getInfo", yield ctx.KRLClosure(ctx, function* (ctx) {       return { This generator function does not have 'yield'.
var channelNames = [];             for (i = 0; source!= null && i < source.channels.length; i++){                 channelNames[channelNames.length] = {name: source.name + source.channels[i].name, Redeclaring variable.
image: formData.hostImage,             command: formData.command.length? formData.command.split(' ') : [],             memory: parseInt(formData.memory), Redundant double negation.
model.data_coParser.addHandler( function( sheet ){
var chunk;         while ((chunk = this.read())) {           if (file.writable) file.write(chunk); Expected a conditional expression and instead saw an assignment.
newState.devices = [action.data].concat(newState.devices);         break;     case Constants.DEVICE_IMPORT_FAIL: Unreachable code.
var config = editor.config;     var rendererTypes = { Unused variable.
edit: {                 ngClick: "editCredential(credential.id)",                 icon: 'fa-edit', Unnecessary escape character.
import React from'react' import styled from'styled-components' Unused variable.
for ( i=96; i<=105; i++ ) {   keyCodes[i] = ''+(i-95); Redeclaring variable.
notification_span.setAttribute("class", "label label-danger");    msg_div.innerHTML = message;    break;   }   default: {    msg_div.setAttribute("class", "message-text"); Expected a 'break' statement before 'default'.
import _ from 'lodash'; import EntityUtils from './EntityUtils'; Unused variable.
oRenderLog.debug("Rerender Control '" + oControl.getId() + "'" + (uiArea? "" : " (using a temp. RenderManager)"));    RenderManager.preserveContent(oDomRef,  true,  false);    rm.render(oControl, oParentDomRef); Undefined variable.
function gammavariate(alpha, beta) {     var SG_MAGICCONST = 1.0 + Math.log(4.5);     var ainv = Math.sqrt(2.0 * alpha - 1.0); Undefined variable.
error(`Unable to read the test directory: ${chalk.underline(relative(dir))}`);   } Don't use throw an error instead.
return scope.$watch(attrs.odataPager, function(value) {       data = value;       if (data === null || data === void 0) return; Unexpected 'debugger' statement.
},   rowGetter: function (rowIndex) {     return row;   }, Undefined variable.
var result = this.properties[property].match(value.sequence.head, true); Unexpected 'debugger' statement.
if (!gaGlobalOptions.disableTooltip) {                 return; Redundant double negation.
broadcast.on('end', function () {     t.comment('Ending the broadcast stream'); Unused variable.
if(tab.name === 'configuration') {           return $scope.hasConfigurationIssues($scope.detailPaneConfig); Unexpected 'debugger' statement.
});      } else if (m = stream.match(/^\{([a-z_\-][\w\-]*)\}/)) { Expected a conditional expression and instead saw an assignment.
export default class ErrorPage extends React.Component {   constructor() {     super()     this.state = ErrorStore.getState() Expected to call'super()'.
break;     case Array.isArray(type))       if (isMethod) { Invalid typeof comparison value.
trigger(val, cb);     }   } Unnecessary semicolon.
for (let i = 0; i < items.length; ++i) {         let item = items[i];         console.info(name, item.duration,'ms');       }
var res = new this.constructor(this.__value__,false,this.__options__);         addedArrays.forEach(function(arr){ Unexpected 'debugger' statement.
leftPx += parseFloat($tab_t.eq(_i).outerWidth(true));      }      $(e).css({ Unnecessary semicolon.
}).call(this); Unnecessary semicolon.
} else if (data.func == "rename_node") {         log.warn("Tree - Before: rename_node, please-open = " + gPleaseOpen);         if (gPleaseOpen) { Unexpected console statement.
} function postAuth(next){    var extensionOptions = angoose.config()[EXTENSION]  ; Unused variable.
this.showMismatch( f, txt );       }    }; Unnecessary semicolon.
const _ = require('lodash'); const bluebirdPromise = require('bluebird').Promise; const fs = require('../utils/fs'); Read-only global 'Promise' should not be modified.
import drawParallelCoordinates from "./drawParallelCoordinates"; import styles from './parallelCoordinates.css'; Unused variable.
var parsedTemplate = jSmartParser.getParsed(template);       this.tree = parsedTemplate.tree;     }, Redeclaring variable.
process.exit(1);     }   }); Unnecessary semicolon.
import { TestBed } from '@angular/core/testing'; import { PreviousStepDirective } from './previous-step.directive'; Unused variable.
var cubeindex = 0;         for (i = 0; i < 8; ++i) { Redeclaring variable.
_onLoginButtonFacebookTap: function() {         this._showLoadMask();         document.location.href = this._buildFacebookUrl(Kort.util.Config.getOAuth().facebook);     }, Undefined variable.
var run_async = true;     if ( ds.test_mode ) { run_async = false; }     var results = false; Unnecessary semicolon.
ratesval = 2;   }   if(document.getElementById("star3").checked == true)   { Expected a conditional expression and instead saw an assignment.
enabled.map(filter => {       if (!(filter in this._modules)) { return; }       const fn = this._modules[filter].execute; Unexpected negating the left operand of 'in' operator.
iconSkin = "ico-ztree-md ";                         break;                     case "dup":                         iconSkin = "ico-ztree-md "; Duplicate case label.
_observable = new Observable(),
export default zora()  .test('search directive should be able to register listener', (t) => {     let counter = 0; This generator function does not have 'yield'.
return new Promise((resolve) => {       database.select('slug') Unused variable.
$('[data-toggle="tooltip"]').tooltip();     $("[data-job-go-live]").on('click', function() {         goLive(this); Unused variable.
else     play = this.trackName;    if (play!== this.play) { Redeclaring variable.
import { mapValues } from 'lodash'; import { getFromApi } from 'Shared/api'; import { useAPI } from 'State/api'; Unused variable.
}       }       for (key in options) {         record.options[key] = options[key] Redeclaring variable.
token = token.toString('hex');   } else if(!(token instanceof String)) {    return Promise.resolve(new Error('Token must be a hex-string or a Buffer')); Unexpected negating the left operand of 'instanceof' operator.
$('#AreaFieldsWrapper').html('<input type="hidden" name="fieldChildAreaSlug" value=""><input type="hidden" name="fieldAreaSlug" value=""><input type="hidden" name="fieldArea" value="">'); };
RunThreeWayTest(LargeUnsignedLiterals, function(module) {   assertEquals(2147483648, module.a());   assertEquals(2147483649, module.b()); Unreachable code.
sum = 100         let progress = 100 - counter.PlacedAllocs / counter.DesiredTotal * 100         let remaining = 100 - progress         if (progress > 100) { Unexpected lexical declaration in case block.
throw new Error("Value for " + data.val + " is not set");   } Unreachable code.
for(i = 0; i < this.population.length; i++){       this.population[i].score = null; Redeclaring variable.
var Parser = require('./src/parser') Unused variable.
finished = true;     }     node = nodes.get(node).parent; Unnecessary semicolon.
EntityInfoMode = connect(mapStateToProps, {})(EntityInfoMode); export default EntityInfoMode; 'EntityInfo' is a class.
const a = stream()       expect(a.scan(noop, 0)).to.activate(a)     }) Undefined variable.
var findFiles = require("./utils/find_files"); Redeclaring variable.
if (!('date' in props)) {       this.setState({ Empty block statement.
await attempt(async () => {     await addUsername({ name, id, secret })     res.json('ok') Unexpected console statement.
expect(legendDom.style.position).to.equal('absolute');     expect(legendDom.style.maxWidth).to.equal('500px'); Unexpected console statement.
_createControlElement: function () {             var me = this, Unexpected 'debugger' statement.
CalculationMatrix.prototype.extractAllBulkRecords = function (input) {     var calculationMatrixRecords = [];     var datapack = input.dataPackData; Unreachable code.
reset_selection: function() {             this.model.set("selected", null);             this.touch(); Duplicate key'reset_selection'.
this.format = Format.select(format); } Unnecessary semicolon.
return pitch2; }; TextPrinter.prototype.extractOctave = function(pitch) {     return Math.floor(pitch/7); Undefined variable.
var href = {         prop: $(this).prop("href"),         attr: $(this).attr("href")       }; Undefined variable.
var cell = column.cell || [formatters.identity];                             var content; Unused variable.
config.compression = pair[1] || 'best';         break;       case '-cl': case '--compress-list':         config.compress = pair[1].split(','); Expected a 'break' statement before 'case'.
const FakeTransaction = require('ethereumjs-tx/fake.js') const ethUtil = require('ethereumjs-util') Unused variable.
if(as(value)){       return value;     } Undefined variable.
date.setHours(date.getHours() + part);    }    if (! isNaN(part = Number(to.date)) ) {     date.setDate(date.getDate() + part); Expected a conditional expression and instead saw an assignment.
var assert = require('assert'); var request = require('supertest'); Redeclaring variable.
const _parseImageName = (image) => {     const match = image.match(/^(?:([^/]+)\/)?(?:([^/]+)\/)?([^@:\/]+)(?:[@:](.+))?$/);     if (!match) return null; Unnecessary escape character.
var se, temp, ops;  if (se = this.subexpressions) { Unexpected 'debugger' statement.
throw new Error('Subscription was unexpectedly fulfilled.');     }, (error) => { Unreachable code.
if (slSecuritySchemes.hasOwnProperty('apiKey')) {   var content = {}; Redeclaring variable.
if (o.type == "group") {                         for (var k = 0; k < o.options.length; k++) {                             var o = options[k];                             if (o["requires-reload"]) { Redeclaring variable.
var self = this;         var pids = common.copy(monitor.pid);         monitor.shutdown(function () { Unnecessary semicolon.
lineNumbers: true,             matchBrackets: true, Duplicate key 'lineNumbers'.
const IS_WINDOWS = require('os').platform().substring(0, 3).toLowerCase() === 'win'; const SKIP = (IS_WINDOWS? '.git\\/' : '/\\/\\.git\ const Path = require('path'); Unnecessary escape character.
mode: child.mode,      type: typeof child == "object"? "blob" : "tree",      sha: child.sha     }; Invalid typeof comparison value.
function setHandlers () {     Object.keys(EVENT_MAP).map(function (evt) {      var evtName = 'on' + evt[0].toUpperCase() + evt.substr(1);      vimeoHandlers[evt] = (that.eventHandlers[EVENT_MAP[evt]] || EVENT_MAP[evt]).bind(that, that); Move function declaration to function body root.
case "only":       case "first": Unexpected 'debugger' statement.
for (var i = 0; i < count; i++) {       newPoints.push({ Unexpected 'debugger' statement.
import React, { Component } from'react'; import { AppRegistry, StyleSheet } from'react-native'; import { Router, Scene } from'react-native-router-flux'; Unused variable.
if (arg.value.length == 1) {                                 var val = arg.value[0]; Unexpected constant condition.
imagemin        = require('gulp-imagemin'),   concat          = require('gulp-concat'), Unused variable.
Slack.prototype.setWebHook = function(url) {     this.webhookUrl = url;     return this;   }; Unreachable code.
const d = util.castDate(propertyValue).getTime();                 properties[name][i] = (d - min.getTime()) / (max.getTime() - min.getTime());                 break;             default:                 return propertyValue; Expected a 'break' statement before 'default'.
case 2:                     target = childNodes[0];                     if (target.nodeName === 'AU-M' || target.nodeName === '#comment') { Unexpected lexical declaration in case block.
if (keyboardEvent.altKey) {       modifiers |= KeyboardShortcut.Modifiers.Alt;     }     if (keyboardEvent.metaKey) { Undefined variable.
tweenObj = state.add.tween(floatingTextGroup).to({                 x: pointsX, Redeclaring variable.
o[id_key] = key;
function connecting(socket) {         ipc.of['embark'].on('connect',function() {           assert.done();         }); Move function declaration to function body root.
}         this.id = id;         this.children = $($(element).get(0).children[0]);
var pendingCallback;   while ((pendingCallback = this._pendingSubscribeCallbacks.shift())) {     pendingCallback(err); Expected a conditional expression and instead saw an assignment.
var contentEncoding = req.headers['content-encoding'];     options = options || {};     options.compiler = archive.compiler; Redeclaring variable.
this.setState({excludedProjectsCount: originalNumResults - nonCollectionResults.length});     console.log(`excludedProjectsCount: ${this.state.excludedProjectsCount}`);
};      var prepareChoices = function (choices){       if(!_.isArray(choices.data)){ Move function declaration to function body root.
{                     var uploadChannel = XPCOM.QI(channel, nsIUploadChannel);                     uploadChannel.setUploadStream(postData, "", -1); Undefined variable.
modelFiles.forEach((file) => {     let model = sequelize.import(path.join(__dirname, file)); Unexpected 'debugger' statement.
{      Editor.clipboard.set(JSON.stringify(self.asset.toJSON()), "text");     } Empty block statement.
console.log('> Build project done.'); }; Don't use process.exit(); throw an error instead.
return instance;     let fragmentsToScheduleRules;     let nextFragmentRules; Unreachable code.
createAllTypes () {       let all = '' Unexpected console statement.
return Boolean;       case "Date": Unreachable code.
for (var i = 0; i < cleanQuery.query[field].length; i++) {               var term = cleanQuery.query[field][i]; Unexpected 'debugger' statement.
return '\t'     case 'number': Unreachable code.
console.log('in a playlist')     const {html, originalRevision} = await fetchDoc(id, resourceType, req) Unexpected console statement.
var previous = value.slice(0, index) + text + value.slice(index);     var pass = model.pass({$original:'stringRemove'})._pass;     model.emit('change', segments, [value, previous, pass]); Redeclaring variable.
clearMeasurementTimepointData(measurement._id, measurementData.timepointId);     }
if ( type === 'error' &&!( 'error' in this.events ) ) {   throw new ve.Error( 'Missing error handler error.' );  }
var minor = parseInt(parsed.minor) || 0;             while (minor > 0) {                 var minorVersion = parsed.family +'' + major + '.' + minor; Unexpected constant condition.
if (Array.isArray(options.button)) {                 options.button = options.button.concat(options.container); Invalid typeof comparison value.
return url;     }      if(urlregexp[1])     {         return urlregexp[1];     } Unreachable code.
export function getTimeGridTop(time) {   time = moment.duration(time)   var slotEls = getTimeGridSlotEls(time) Redeclaring variable.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/cosmox-1334267072.swf",  admin_props : false, Unnecessary escape character.
it("scroll", function(){
case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw 'Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';         case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Unreachable code.
'<%= tmpDir %>/js/filters.js'     : ['<%= srcDir %>/js/filters*.js'],           '<%= tmpDir %>/js/modules.js'    : ['<%= srcDir %>/js/modules*.js'] Duplicate key '<%= tmpDir %>/js/modules.js'.
const errorTemplate = require("./errorTemplate"); const INTERPOLATE_RE = /{{(\w[\w.]*)}}/g; const BODY_MAIN_PLACEHOLDER = "{{[__bodyMain__]}}"; Unnecessary escape character.
return model.id? store.find(model, options) : store.findAll(options);             case "create": Unreachable code.
require('should'); const HttpTestUtils = require('./utils/http'); Unused variable.
isAvailable: function(){    return!![].forEach;    }, Unreachable code.
idprefix = prefix + "_",       createCallback = function() {         modalDialogHelper.createModalCreateDialog( Unused variable.
return self.computeUnspent(self.cache.unspent, cb);   } Unreachable code.
ProxyListener.prototype.on = function (callback) {     if (this.callbacks===null) { this.callbacks = []; }     this.callbacks.push(callback); Unnecessary semicolon.
if (attendees && attendees.length) {     attendees = _.filter(attendees, function (a) { return a.hasOwnProperty("gender") });     if (attendees.length) { Redeclaring variable.
} catch (error) {     hasSupport = false   } Unsafe usage of ReturnStatement.
};             reader.readAsText(fileObj);         }); Undefined variable.
'no-restricted-syntax': [OFF],     'no-restricted-globals': [OFF],     'no-alert': [OFF], Duplicate key 'no-restricted-globals'.
const generateFunctionCall = (node, parent) => {   const block = node.arguments.map(mapSyntax(parent)).reduce(mergeBlock, []); Unexpected 'debugger' statement.
$onInit () {         this.urls.docsUrl = this.ovhDocUrl.getDocUrl(this.LogsConstants.LOGS_DOCS_NAME); Unexpected 'debugger' statement.
var defaults = {}     options = $.extend(defaults, options)     ; Redeclaring variable.
} else {                 width = this.width;                 height = this.height;             } Redeclaring variable.
createLocalClone: function createLocalClone(dir) {         var clone = spawn('git', [ 'clone', util.getLocalClonePath(dir) ]);         clone.on('exit', function(code) { Undefined variable.
return "string";     case "number": Unreachable code.
$scope.projectName = $routeParams.project;     $scope.sourceURLPattern = /^((ftp|http|https|git):\/\/(\w+:{0,1}[^\s@]*@)|git@)?([^\s@]+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-/]))?$/;     ProjectsService Unnecessary escape character.
var caplet = require("../../../"); module.exports = caplet.createModelClass({ Unused variable.
trustedDomains: window.location.host? [ window.location.host ] : [],     cacheBust: /MSIE/.test(navigator.userAgent) || /Trident\/[\d](?=[^\?]+).*rv:([0-9.].)/.test(navigator.userAgent)? true : false,     forceHandCursor: false, Unnecessary escape character.
{         var innerElement = new qx.html.Element();
var getEmployee;         var parallelTasks; Unused variable.
}     var invalid = find(obj.geometries, function (geometry) {       return!isGeoJSON(geometry); Redeclaring variable.
typeDB = 'Device';                 break;             case 'Sensor':                 typeDB = 'SensingDevice'; Expected a 'break' statement before 'case'.
if (!(search instanceof RegExp) && match[0].length < search.length) {       tail = match[0]; Unexpected negating the left operand of 'instanceof' operator.
this.session_keys = clone(obj.session_keys) || [];    for (idx = 0; idx < this.session_keys.length; idx++)     this.session_keys[idx] = new AttrList(this.session_keys[idx]); Redeclaring variable.
var grandchild;                                  for(i=0, len=child.filters.length; i<len; ++i) {                                      grandchild = child.filters[i]; Redeclaring variable.
redisSub = require('../web/core/redisSub'),     orch = require('../orchestration/orchestration.api');     global = require('./global'); Read-only global 'global' should not be modified.
if (!name) return children;     if (!style) style = () => {};'style' is constant.
self[key] = other[key];     }   } Unnecessary semicolon.
return false;                         }                     }                 }else{ Unnecessary semicolon.
"class": "modal-input-xlarge",                 "default": "---",                 awPopOver: "<p>Enter variables using either JSON or YAML syntax. Use the radio button to toggle between the two.</p>" + Unnecessary escape character.
chunks[0] = require.tlns[chunks[0]] || chunks[0];     var path = chunks.join("/") + ".js"; Undefined variable.
if (!filepath.match(imageFileRegexp)) {    throw new Error("asset '" + spriteNames[i] + "' cannot be opened!");   } else { Undefined variable.
for(i = 0; i < entities.length; i++){ Empty block statement.
return mockResult(request, mock.value);         } Empty block statement.
if (!revisions.length || (revisions.length < 2 && revisions[0].debug_isJustTitleChange)) {     return yo` Unexpected constant condition.
this.options.geocoder.bind("geocodingError", function(e) {       var dlg = new GeocoderMessageDialog({         style: "polygon", Undefined variable.
message: 'New workspace name:',       validate: s => /^(\s*|\s*[\w-]+\s*)$/.test(s) || message,       filter: s => s.trim(), Unnecessary escape character.
try {     var useSourceURL = (function('   } catch(e) { } Empty block statement.
var bproto = HTMLTextAreaElement.prototype     function newSetter(value) {         if (!bproto) return     setters[this.tagName].call(this, value) Move function declaration to program root.
if (cluster.isWorker &&!exclusive) {       var onHandle = function onHandle(err, handle) {         if (err) {           var ex = exceptionWithHostPort(err, 'bind', ip, port);           self.emit('error', ex); Move function declaration to function body root.
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
.$on("initNodes", function(nodesStr) {         log("On initNodes.");         let nodes = CircularJSON.parse(nodesStr); Unexpected console statement.
return vtkImageMapper.SlicingMode.Z;     case 'L': Unreachable code.
this.lookahead(1) === "Rbracket") {               this.advance();               var right = this.parseProjectionRHS(this.bindingPower.Star);               return {type: "Projection", Redeclaring variable.
throw new Error('unSupported Layer Type');         } Unreachable code.
}             window.addEventListener('showAdvertising', handler); Unexpected 'debugger' statement.
dom.waitDomReady(document.body, function () {
var splittedDate = splitOldDate(oldLabDate);   oldLabDay = splittedDate.day;   oldLabHour = splittedDate.hour; Redeclaring variable.
&& event.state_key!== $scope.state.user_id  && "join" === event.membership) {                     var notification = new window.Notification( Unexpected 'debugger' statement.
contracts = '';             $.each(data.portfolio.contracts, function(ci, c) { Undefined variable.
selector._id && LocalCollection._selectorIsId(selector._id) &&      _.size(selector) === 1; };
RESET: {         any: [/^!reset$/],     }, Unnecessary escape character.
}   for(let i = 0; i < themesOrder.length; i++) {    var t = themesOrder[i]; Redeclaring variable.
while (newOrigin + offsetShift < 0) {     newRoot = new VNode(newRoot.array.length? [null, newRoot] : [], owner);     newLevel += SHIFT; Unexpected comma in middle of array.
look[2] = value[2];                     this._scheduleUpdate(0); Unnecessary semicolon.
} else {                 console.log("Ignore individual feature outside region. Feature score " + feature.score + ". Accumulated score " + score + ".");             }
getReposRelease: reposOwner => {         return `${host}repos/${reposOwner}/${reposName}/tags` Duplicate key 'getReposRelease'.
var optsf = {   mongoConfig : app.get('mongoConfig'), Redeclaring variable.
var ComponentWithRoute = function (_Component) {         babelHelpers.inherits(ComponentWithRoute, _Component);
$scope.rotationStyle = $renderKey.getKeyRotationStyles;   function renderKey(key) {
assert.strictEqual('ABC1', 'abc1'.toUp());  });  it(`format`, function() {   assert.strictEqual('abcdefg1', 'a{0}c{1}e{2}g{3}'.format('b', 'd', 'f', 1)); This generator function does not have 'yield'.
return this.state.activeIntervals.bars   }   get section () {     return this.state.activeIntervals.sections   } Expected to return a value in getter'section'.
console.log(errorThrown);         alert('gitub auth error'); Unexpected 'debugger' statement.
os.gadgetPrefs_ = new window['gadgets']['Prefs'](); } Unnecessary semicolon.
var sample = inputSamples[i],                     pts = sample.pts; Redeclaring variable.
import { last, groupBy, sortBy } from 'lodash'; import './qq.css'; Unused variable.
e.preventDefault();                 var txt = elem$.text();                 if(options().validate(txt)) { Redeclaring variable.
exports.signup = function(req, res) {
position = {     top: span.offsetTop + parseInt(computed.getPropertyValue('border-top-width')), Redeclaring variable.
if (test) {         return str.replace(new RegExp('.' + test + '$', 'ig'), '');     } Unnecessary escape character.
}     usage_log.push(log_event);   };
_this.dragZoomLayer.dragInteraction().mouseFilter(function (event) {                 return!event.altKey && event.button === 0;             }); Redundant Boolean call.
var fightCost = 10 * 3;                     maxLength = (maxLength - fightCost / movementCost) / 2;                     break;                 case this.CRITICAL_PATH_TYPE_CAMP_TO_PASSAGE: Expected a 'break' statement before 'case'.
longProgram += '1'; Unexpected 'debugger' statement.
pro.close = function() {  if(!this.closed) {   return; Redundant double negation.
this.min_line = 1000;         notes.forEach(function(note) {           this.min_line = Vex.Min(note.getKeyProps()[0].line, this.min_line); Redeclaring variable.
var jsonBody = body   if(err){    done(err)   }else if (res.statusCode === 200) { Empty block statement.
$.subscribed = function () { return subscribed; };   }(jQuery)); });
run: function(target, method ) {     var ret;     this.begin(); Unused variable.
if (handler && typeof handler === 'function') {             try { signal.disconnect(handler) } catch (e) { console.log(e) }         } Empty block statement.
this.columnsRHSIdx = {};     } Unnecessary semicolon.
cb(null, tpl);   }); } Unnecessary semicolon.
reject(`Error! ${err}`);       } else { Don't use process.exit(); throw an error instead.
console.log('Shutting down appium session...');   this.device.stop(function() { Unexpected console statement.
if (goog.isDef(options.hoverCallback)) {                 var origHoverCallback = options.hoverCallback;
startForm: function(sessionId){             var fetchingForm = FormplayerFrontend.request("getIncompleteForm", sessionId); Unexpected 'debugger' statement.
},   catchup: function()  { Unused variable.
run_spec(__dirname, ["flow"]); Undefined variable.
var total = 0;             var values = (this.graph == 'Polygons')? stats.graphsPolygons : stats.graphsBuild; Redeclaring variable.
case 51:             _iteratorNormalCompletion = true;             _context.next = 7;             break; Expected a 'break' statement before 'case'.
expect(cases).quailGetById('assert-1').to.have.quailStatus('passed');     expect(cases).quailGetById('assert-2').to.have.quailStatus('failed');   });
if ((args = helpers.getEndpointFromProcessArgs())) {   access_token = args.access_token; Expected a conditional expression and instead saw an assignment.
Kekule.LOCAL_RES = true; Kekule.Localization.setCurrModule("widget");
if (typeof timingDict.timingFunction ==='string') {     this.timingFunction = TimingFunction.createFromString(timingDict.timingFunction);   } else { Unreachable code.
},     },     assertions: (err, feeWindows) => {       expect(err).to.be.false;       expect(feeWindows).to.equal({});     },   }); Undefined variable.
}, function() {});  }  $scope.returnFromAddConnection = function(message) { Unnecessary semicolon.
payload = args[1];         } else { Redeclaring variable.
(value).forEach(function (item) {         str_ += item[0] + ':' + item[1] + ', '; Unexpected console statement.
const { getFavicon } = require("sdk/places/favicon"); const { promised } = require('sdk/core/promise'); const { Cu } = require('chrome'); Unused variable.
var ns = data.ResourceRecordSets.find(t=> t.Type === 'NS').ResourceRecords.map(x=> x.Value).join('\n')         callback() Unexpected console statement.
robot.emit('telegram:invoke','sendPhoto', { chat_id: res.message.from.id, photo: fs.createReadStream(outFilepath) }, function (err, response) {           if (err) { console.log(err); }         }); Undefined variable.
const { isVPlusDottedVersionAtLeastOne } = require('./helpers/validators'); const isBowerPrereleaseVersion = Joi.string().regex(/^v\d+(\.\d+)?(\.\d+)?(-?\w)+?$/); const t = new ServiceTester({ id: 'bower', title: 'Bower' }); Unnecessary escape character.
if (!this.element) {     this.element = new Dom().parseFromString( Unexpected console statement.
},     setContractsByAddress(result) {       if (result&&result.success) { Unexpected 'debugger' statement.
if (~modelSchema.required.indexOf(prop)) {                         options[prop] = defaultValue; Redundant double negation.
const MongoServer = require('mongodb').Server; Unused variable.
if ($('#ace-editor').length) {         queryEditor = new QueryEditor();     } Unused variable.
};         var draw_triangle = function (ctx, outer, width, height) {             ctx.beginPath(); Unused variable.
var message     if (!!(message = stanza.getChild('html', xhtmlIm.NS_XHTML_IM))) {         content = message.getChild('body', xhtmlIm.NS_XHTML) Expected a conditional expression and instead saw an assignment.
var x = require('x');
Runtime.runCLI(argv, [`Jest REPL v${VERSION}`]); } Unnecessary semicolon.
App.start();
var newChild = super_.insertBefore(newChild, refChild); Redeclaring variable.
app.on('tick', function() {     var width = app.engine.width     var height = app.engine.height     app.camera.right = width Undefined variable.
}   return [a,b]; Empty block statement.
location.reload();                         return true;                     default:                         return true;                 } Expected a 'break' statement before 'default'.
control.next(message.body);             break;           case STDIN:             stdin.next(message.body); Expected a 'break' statement before 'case'.
} exports.getStack = exports.getStack;
if (attrs.length!== 0) {
}                     return Object.assign({}, state, { isLoading: true });                 default: Unreachable code.
function onCleanupListeners() {   try { Unexpected console statement.
import { jsx, Styled } from 'theme-ui' import Button from '../Button' Unused variable.
function nl_langinfo (item) {
var mime = require('send').mime; var etag = require('etag'); Unused variable.
Map.propTypes = {   center: _infact.PropTypes.array, Unexpected constant condition.
llx = res[1][0][0];             lly = res[1][0][1];             urx = res[1][1][0];             ury = res[1][1][1]; Redeclaring variable.
} catch (err) {         errorHandler.errorHandle(`processContract ${address}`)(err);     } Don't use process.exit(); throw an error instead.
}         ApplicationCacheAgent.getManifestForFrame(frame.id, this._manifestForFrameLoaded);     }, Undefined variable.
if (!(/^\s*$/).test(sSplit[i])) {           regexes.push(new RegExp("(^|\\s|;)" + sSplit[i].replace(/\s/gi, '').replace(/([()])/gi, "\\$1").toLowerCase().replace(";", ";?"), "gi"));         } Unnecessary escape character.
} WebInspector.OverridesSupport.NetworkThroughputUnlimitedValue = -1; Undefined variable.
title: 'Edit Discord Activity',         setting       });       break; Undefined variable.
} else {         _console.warn('[l10n] could not find argument {{' + arg + '}}');         return str; Unexpected console statement.
sourceJs.onaudioprocess = function(e) {                     array = new Uint8Array(analyser.frequencyBinCount); Unexpected 'debugger' statement.
Object.assign(pc, function () {     var SAMPLE_COUNT = 15; Undefined variable.
logDatasetState(dataset) {       if (DEBUG) { console.log('dataset =', dataset); } Unexpected 'debugger' statement.
if ((cap = this.rules.strong.exec(src))) {       src = src.substring(cap[0].length); Expected a conditional expression and instead saw an assignment.
case 'github': {         const token = await localforage.getItem('gh-token')         const owner = userName || state.oauth.authenticatedUser.login Unexpected lexical declaration in case block.
logger.debug('claimModuleAccess', moduleName, mode);       if(! (moduleName in modules)) {         throw "Module not defined: " + moduleName; Unexpected negating the left operand of 'in' operator.
var app = getApp() const product = require('../../utils/product.js')
this.onDecoded.dispatch(this);         }         if (this.pendingPlayback && this.game.cache.isSoundReady(this.key)) Unnecessary semicolon.
for (var [key, value] of pages) {       if (value === "") {         pages.delete(key); Expected a conditional expression and instead saw an assignment.
}       return files(_callService, account_id, thread_id);     };
function (conf, state) {     var me = this; Unexpected 'debugger' statement.
if (e.venue.country === teamData.teams[0].country) {                                     Unexpected 'debugger' statement.
Commands            = require("command/Commands"),         NativeFileSystem    = require("file/NativeFileSystem").NativeFileSystem, Unused variable.
side : THREE.DoubleSide   }); Unnecessary semicolon.
} else {             $('#' + this.options.id + '_content_left_bottom').css('display', 'none');         } Undefined variable.
}   console.log(srcPos);   console.log("/\ /\ /\  srcPos / pos  \/ \/ \/");   console.log(pos);                   fillOptions.fillmode = trace.fill; Unnecessary escape character.
}); var testFiles2 = [ Unexpected comma in middle of array.
}                          if (userGroupIds.length > 0){ Unreachable code.
return this.block();       case ';': Unreachable code.
var Backbone = require('backbone'); var template = require('./dropdown.tpl'); Unused variable.
var checkpassword = function(c,data) {    if (data.substring(3,data.length-2) == config.serverpassword) { Move function declaration to function body root.
React.DOM.div(null,                  first(this.props.children)             ), Undefined variable.
xtype: 'fieldcontainer',                     fieldLabel: 'LogDelimiter',                     layout: 'hbox', Undefined variable.
state = {...state, cardOutput: [...state.cardOutput, payload.msg] };             break;         case CARD_CLEAR_OUTPUT_WINDOW:             state = {...state, cardOutput: [] }; Expected a 'break' statement before 'case'.
var value;          var options = this.__availableOptions;                 var Type = qx.lang.Type; Redeclaring variable.
focusedWorkspaceComponentList: [],    initialAlwaysOnTop: finsembleWindow.windowOptions.alwaysOnTop, Undefined variable.
}   styles = params.kmlStyles[params.placeMark.styleurl];   var style; Redeclaring variable.
if("syncMode" in kwArgs? kwArgs.syncMode : this.syncMode){     rpcConfig._sync = true;    }
var time_string = Eventbrite.prototype.utils.formatTime( start_date );       var html = ''; Redeclaring variable.
href   : "/content/" + ctrl.schema.key + "/" + data.key,                                     config : m.route Duplicate key 'href'.
import "./text.css"; import React from "react"; Unused variable.
Spectra.fn.prototype.equals = function(other) {     var color1 = this;     var color2 = other; Undefined variable.
}   while (searchAName) {     oldIndex = index; Unexpected constant condition.
var blocksProcess;  var blocks; Unused variable.
output: {     filename:'main.prod.js',   }, Undefined variable.
return destination;   } Unnecessary semicolon.
const {FunctionalError, FRUnexpectedError, FRInputError} = require('./errors') const {red, green, white, grey, yellow, magenta} = require('chalk') module.exports = function _init(FR) { Unused variable.
case'manuscript':       return 'unpublished'     case 'paper-conference': Unreachable code.
var oClone = sap.ui.core.Element.prototype.clone.apply(this, arguments);     for ( i = 0; i < aButtons.length; i++) {    oButton = aButtons[i];    oButton.attachPress(this._buttonSelected, this); Redeclaring variable.
setToken: function(token) {         _token = token; Unexpected console statement.
static addEvt(node, evtName, fn) {          node.addEventListener(evtName, fn, false) Unexpected 'debugger' statement.
let methodsArgs = arguments;     return format.replace(/[{\[](\d+)[\]}]/gi, function (value, index) {         let argsIndex = parseInt(index) + 1; Unnecessary escape character.
if (this.controlMode_ == "pannorama") {         pos_[9] *= factor_; Expected a conditional expression and instead saw an assignment.
} else if (where === "end") {         var T = String.prototype.replace.call(S, /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/g, ''); Expected a conditional expression and instead saw an assignment.
_this = this;         this.switchSound = SoundCache.getSound("https:     }; Undefined variable.
import { action } from '@storybook/addon-actions'; import { withKnobs } from '@storybook/addon-knobs'; import { withInfo } from '@storybook/addon-info'; Unused variable.
path = path.substr(1);     request.get("https: Unused variable.
const Util = G6.Util; document.body.appendChild(Util.createDOM(` <div> Undefined variable.
documentDrag : false,
_lastTrace = this;   console.log(this);  }
store = vmDetail.getStore(),              tokens, binding, highlight, store, root, targets, highlighted; Redeclaring variable.
}             break;         case DELETE_SUBREDDIT:             return state.filter(v => v.title!== action.subreddit); Expected a 'break' statement before 'case'.
$( "tbody button:contains(18)", element ).simulate( "mousedown" );   testHelper.equalsDate(    element.calendar( "valueAsDate" ), Undefined variable.
throw("incorrect value '"+newProperties[c.name]+"' of type "+DS.typeOf(newProperties[c.name])+" passed to column with type "+c.type);               }               c.data[rowIndex] = newProperties[c.name]; Unnecessary semicolon.
child = children[i];       if (JS.isFn(child) && element.nodeType === 1) {         child(new this.klass(element)); Undefined variable.
opts = $.extend({fade: false, gravity: 'n'}, opts || {});         var tip = null;         this.hover(function() { Unused variable.
Meteor.startup(function () {
this.console('debug', 'Moving style from', source, 'to', destination)     const sheets = this.settings.stylesheets Unexpected 'debugger' statement.
programMapTable,     parsePes = function(payload, pes) { Unused variable.
sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts', Duplicate key'sweatshirts'.
$scope.result.results = $scope.result.results.concat(res.data.results);     }); '$scope.result.next_url' is assigned to itself.
for (var i = 0, max = objectsWithBehaviors.length; i < max; i++) {   object3d = objectsWithBehaviors[i];   object3d.updateBehaviors(deltaTime);  } Undefined variable.
onload: function(responseText) {                 if (match = /cId=(\d+)/.exec(responseText)) { Undefined variable.
actionList.on('change_' + actionList('getUID'), function (data) {       self.handleComplete_(data.data); Invalid typeof comparison value.
});        message.reply("Audit exported to: "+url+filename);       setTimeout(function(){          fs.unlink(dir+filename, (err) => { Unreachable code.
doRequest (params) {     const callback = this.callback Unexpected 'debugger' statement.
console.error('Cannot open', filePath + ':', ex.code === 'ENOENT'? 'no such file' : ex.message)   } Don't use process.exit(); throw an error instead.
var MAX_DISTANCE = 5;     allowDensify = ( allowDensify === undefined )? true : allowDensify; Redeclaring variable.
const AngularTemplateCache = require('../ingredients/AngularTemplateCache'); const Uglify = require('../ingredients/Uglify'); Unused variable.
attempts:'relatedentities.TEZ_TASK_ATTEMPT_ID',   vertexID: 'primaryfilters.TEZ_VERTEX_ID.0',   dagID: 'primaryfilters.TEZ_DAG_ID.0', Duplicate key'vertexID'.
} else {         return this.base(arguments, vSource);       } Undefined variable.
xhr.get('/gdc/projects/'+ projectId +'/styleSettings').then(function(result) {             d.resolve(result.styleSettings.chartPalette.map(function(c) { Unexpected 'debugger' statement.
value.primaryKey = this.primaryKey;         this.docs = value;
am.report({evtName: 'open', 'value': 1});     if (!window.chrome) {
app.factory('rsyncMetaData', function () {     return { Undefined variable.
var ignore = token.ignore;     this.i = this.res.length; 'token.ignore' is assigned to itself.
profile['layers'] = layersJSON;         } else if (Util.isArrayHasData(options['layers'])) {             layers = options['layers']; Undefined variable.
var finalizeFns = [];     var completed = {};
for (var c = Multiplicand.length-1; c > (-1); c--) {             tp = (Multiplicand.charAt(c) * SingleDigitMultiplier) + parseInt(car);             if (tp < 10) { Redeclaring variable.
export default zora()  .test('should traverse a tree (going deep first)', t => {     const tree = { This generator function does not have 'yield'.
normalizer.contentDocument.write(markup);           normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;         } Redeclaring variable.
initSystemJs(config);     expect(config.files[0].pattern).toMatch(/[\/\\]typescript[\/\\].*?[\/\\]typescript\.js$/);     expect(config.files[1].pattern).toMatch(/[\/\\]es6-module-loader\.src\.js$/); Unnecessary escape character.
import Schemas from '../schemas' import { newLocalModel, updateLocalModel, removeLocalModel } from './locals' Unused variable.
if (err.cause && err.cause instanceof Error) return err.cause     if (notfound[err.code]) return Do not assign to the exception parameter.
escapeForRegExp(str) {     return str.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');   }, Unnecessary escape character.
post_error: function(msg, dest) {         if (typeof msg ==='string') Unexpected 'debugger' statement.
export class ChainRejAction extends Action{   constructor(mapper){ super(); this.mapper = mapper }   rejected(x){ return this.mapper(x) } Expected to call'super()'.
return merge.smart(...this.configs)   } Unreachable code.
import React from'react'; Unused variable.
var audioSprite = new Audio([   { src: 'assets/pong.mp3' }, Redeclaring variable.
if ((containerLeft + tooltipXPos) < 4) {                 adjustment = Math.abs(containerLeft + tooltipXPos) + 4;                 tooltipXPos += adjustment; Redeclaring variable.
function checkAuthorization() {     return true;   }   function getAvailableWikis(data) { Move function declaration to function body root.
list.push(i); } var err = new Error(); Unnecessary semicolon.
$('#preview').html('');    if (!$(document.body).hasClass('mobile')) $input.focus();   }
text = execute_python(this,text);             var text_and_math = mathjaxutils.remove_math(text);             text = text_and_math[0]; Undefined variable.
operator = '<=';       break;     case MSG_GT:       operator = '>'; Undefined variable.
str,   '\\d{3}-\d{2}-\d{4}',   config || null;
case "D": return slash;     } Undefined variable.
describe('Android', function(){     describe('#init', function(){
function initializeChartGroup(group) {         if (!group) 'group' is assigned to itself.
context.history().on('change.intro', null);             curtain.reveal('.tag-pane', t('intro.points.close'));         }
var path = require('path'); var morgan = require('morgan'); Redeclaring variable.
events = events.concat(['click','mouseover','mouseout']);    for (i=0, il=events.length; i<il; i++) {     (function(eventName) { Redeclaring variable.
import { EXPAND_COLLAPSE } from '../constants'; export default ( Unused variable.
deferred.reject();              }); Unnecessary semicolon.
import React, { Component } from'react' import UserLinks from './UserLinks' Unused variable.
let resized = tf.image.resizeBilinear(tensor, [256, 256]).toFloat()                  resized = tf.scalar(255.0).sub(resized)'resized' is constant.
const initMarkdownEditor = () => {     new SimpleMDE(); }; Unused variable.
this.set(`block.meta.checkboxes.${key}`,!oldContent);       this.get('onBlockMetaReplacedLocally')( Unexpected 'debugger' statement.
describe('Cylon.Adaptors.Pebble', function() {   var pebble = new Cylon.Adaptors.Pebble();   it("exposes a 'commands' function containing all adaptor commands", function() {
function isChoice(line) {   return /^[-*] (.+)$/.test(line); } Unnecessary escape character.
email: function(fieldValue) {      var emailReg = /^([a-zA-Z0-9_\.\-])+@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,10})+$/;      return emailReg.test(fieldValue); Unnecessary escape character.
throw new Error(message);   } Unreachable code.
} else if (v.band === "meta") {                 cts = [];                 for (var key in d) { Redeclaring variable.
var epf = new Set(e.profiles)         profileSet = new Set([...profielSet,...epf])       } Undefined variable.
lobby: 'Entrée',           staffRoom: 'Salle du personnel', Duplicate key 'openArea'.
} catch (e) {           if (e.code == 11) { this.errors.push(VideoJS.errorCodes.videoNotReady); }         } Expected a conditional expression and instead saw an assignment.
var _ = require('underscore'); module.exports = AdminEventEditFormFieldsController; Unused variable.
for( var ii = 0 ; ii < friends.length ; ii++ ){     actor = AllTrustActors[ friends[ ii ].id ];     if(!actor ){ Redeclaring variable.
function setStatus(message) {   document.getElementById("status").innerHTML = message; }
else       e = editor.validate();       if(e) errors[name] = e; Redeclaring variable.
if (android) {         const mainDirectory = getAndroidMainDir(platformDirectory); Unexpected 'debugger' statement.
this.pool.acquire(function(err, connection) {     if(err) {       throw err;     } Empty block statement.
if (field.required === true) { Undefined variable.
entry.baseType = 'object';             entry.dataType = typeMap(entry.baseType, false, {});             let contentType = Object.values(response.content)[0]; Unnecessary semicolon.
}           } else if ( noop ) {             throw '!'; Empty block statement.
test('user bind Int', function (testDone) {     var params = { Undefined variable.
build() {     let inputPath = this.inputPaths[0];     let outputPath = this.outputPath; Unused variable.
require('../../modules/es6.date.to-string') var $toString = Date.prototype.toString; module.exports = function toString(it){ Unused variable.
console.warn('This should not happen.')       }     } else { Unreachable code.
return false;   } Unreachable code.
if (functionCode == 5) {         address = requestBuffer.readUInt16BE(2);         state = requestBuffer.readUInt16BE(4); Redeclaring variable.
var origin = loc.protocol +'    for (var i = frames.length - 1; i >= 0; i--) {       try { The update clause in this loop moves the variable in the wrong direction.
function check_mtime(resource, mtime) {   mtime = fs._toUnixTimestamp(mtime);   var stats = stat_resource(resource); Redeclaring variable.
throw new uError('EMPTY_RESULTS', err);         case 5000: Unreachable code.
var time_array = str.match(/^(?:(\d+).+\s)?(\d+)[h:]\s?(\d+)[m:]?\s?(\d+)?[s]?(?:\.\d{1,3})?$/);             if (time_array) { Redeclaring variable.
this.toggle(x, y)         {
deps: ['d3']         },         'qe-utils': {             deps: ['jquery']         },         'ipv6': { Duplicate key 'qe-utils'.
}   } else if(type === 'ApexComponent') {     return { Unexpected constant condition.
dataNameArray = fastCopy($stateParams.listName).split('$');    if (dataNameArray.length < 3 || dataNameArray.length > 4) { Undefined variable.
return 0x12000001;     default: Unreachable code.
getter: function(node){          return node && node.firstChild? 'hasChildren' : '';        } Redundant double negation.
function onChangeBezier(e) {     this._ease.points = e.detail.points; }
match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;                 } Unreachable code.
return 'H';     case 'partlycloudy' :       return 'H'; Unreachable code.
console.log('Uncompressing', inputFile, 'to', outputFile, '...') decoder.on('end', function () {
REPL.on('close', () => process.exit(0)); REPL.on('SIGINT', () => {  console.log(); throw an error instead.
return doTransition(this, arguments);   },   intermediateTransitionTo: function(name,...args) {     return doTransition(this, name, true); Unused variable.
console.log('total: %d', total);   }); Don't use process.exit(); throw an error instead.
didConfirmSelection: (keyBinding) => {         this.hide() Unexpected 'debugger' statement.
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
var pos = parseInt(pos),   spineNodeIndex = spineNodeIndex + 1; Redeclaring variable.
var tie; for(t = 0; tie = schema.tie[schema.ties[t]]; t++) {     var name = ''; Expected a conditional expression and instead saw an assignment.
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
BlindsHTTPAccessory.prototype.httpRequest = function(url, methods, callback) {     if (!url) {         return;     } Empty block statement.
} else {                 console.log('[' + Signature + '][' + this.GUID + ']:: Next command does not support:'+ message.command);             }
import expect from 'expect.js';
fire();         }       }); Unnecessary semicolon.
console.log(JSON.stringify(result));     } Don't use throw an error instead.
return;     var filteredItemSelectionDialog = new WebInspector.FilteredItemSelectionDialog(new WebInspector.OpenScriptDialog(panel, presentationModel));     WebInspector.Dialog.show(relativeToElement, filteredItemSelectionDialog); Undefined variable.
while (query) {       var matches = query.match(/comments(=|:|<|>|<=|>=)([0-9]+)/); Unexpected constant condition.
return value;      case 'phonenumber_countrycode': Unreachable code.
ol.geom.MultiPoint.prototype.removePoint = function(point) {     ol.array.remove(this.points_, point); };
i = y * 10 + x;             a = board[i];             if ((a & 14)!= P4_PAWN) Redeclaring variable.
return Ember.RSVP.reject(data.error);       } else if (Ember.isEmpty(data.hits)) {         return Ember.RSVP.reject('No results.');       } else { Undefined variable.
throw Error("Not a JPEG file");     } Unreachable code.
while(1){     var i = this.contents.length - 1;     if(this.contents[i] instanceof dd._HtmlTextNode && this.contents[i].isEmpty()){ Undefined variable.
onDoubleClick: PropTypes.func,   editLaneTitle: PropTypes.bool,   t: PropTypes.func.isRequired Duplicate key 'editLaneTitle'.
import {State}      from'react-router'; import Spinner      from '../common/partials/spinner.component.jsx'; Unused variable.
case 12:                                 if (pwHashDoc) {                                     _context.next = 20;                                     break; Expected a 'break' statement before 'case'.
if ((s = this._serializeWhere(obj._where))) {             sb.indent = 0; Expected a conditional expression and instead saw an assignment.
.then(op => op.finish())      .then(() => process.exit(1), handleError);   }); Don't use process.exit(); throw an error instead.
const DUMMY_STATE = {}
dispatch({         type: data.id          ? 'accountAdmin/update' Redundant double negation.
}    if ((m = block.optionlist.exec(rst))) {     rst = rst.substring(m[0].length); Expected a conditional expression and instead saw an assignment.
if( ( deltaPx = _parsePx( delta ) ) ) {      return ( ref + axis.getRelVal( deltaPx ) ); Expected a conditional expression and instead saw an assignment.
app.crypto.Crypto = function() {  'use strict'; Undefined variable.
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/ember-cli-bootstrap-tokenfield/';   } Empty block statement.
var _ = require('underscore'); Unused variable.
"use strict";     var romanNumberals = { Unused variable.
view : function (ctrl) {         return m('.fb-breadcrumbs', m('ul', [ Unexpected 'debugger' statement.
export default class DatArchive {     constructor (url) {         super();         this.url = url;     } Unused variable.
run().catch(console.log.bind(console));
import invariant from 'invariant';
return false;         case this.OPERATORS.dateOperatorNotInTheLast: Unreachable code.
this.tree._init(entity.body); } module.exports = DERDecoder; Unnecessary semicolon.
};                     if (tType!== 'detail') {                         var setRowField = function() {                             $timeout(function () { Move function declaration to function body root.
res += '>';                 if ((content = json.content)) {                     if (Array.isArray(content)) { Expected a conditional expression and instead saw an assignment.
$(document).ready(function () {
}  var support = new Support();
document.documentElement.classList[action]("vimiumFindMode");     action === "add"? DomUtils.UI.addElement(this.styleIn) : this.styleIn.remove();   }, Unnecessary semicolon.
describe('flickr.photosets.getPhotos', function () {  it('requires "photo_id"', function () {   assert.throws(function () { Undefined variable.
}     case Actions.REQUEST_UPDATE_POST: Unreachable code.
var menuItems = [];     var labels = (player.qualityLevels) || {};     for(i = 0; i < player.qualityLevels().length; i++)     { Undefined variable.
import Cursor from './cursor' import ZxDialog from './dialog/index' Unused variable.
chrome.runtime.sendMessage({ type: 'icon', active: true })   })
var classSet = require('react/lib/cx'); Unused variable.
}}, function (err, result) {                 CONFIG.promptRunning = false;                 if (!result) { return Dialog.show(); } Undefined variable.
if (_this.disabled) {           jQuery('.qtip' + _this.windowId).qtip('hide');           return;         }         jQuery('#' + _this.osdViewerId).parents('.window').find('.qtip-viewer').hide(); Undefined variable.
}     results = results.sort(function (a, b) {       return b.hScore - a.hScore Redeclaring variable.
this.terminalPunctuation = "\.\!\?";   this.terminalQuotes = this.rightSingleQuote; Unnecessary escape character.
expect(_.isEqual(converted, {       string : "converted",
console.log('keyInfo', keyInfo)       dispatch(addWallet(wallet, keyInfo))
startPlugin : function(sandbox) {         this._sandbox = sandbox; Unexpected 'debugger' statement.
'use strict'; require = require('module')._load('./AgentLoader');
var LabView = lab.view.LabView; var NF = lab.util.Util.NF; var ODESim = lab.model.ODESim; Unused variable.
disabled: { ignore: 1 },  progress: { bindable: 1 } }); Duplicate key 'progress'.
});     case Actions.REQUEST_CREATE_POST: Unreachable code.
opts.is3pcc =!opts.remoteSdp;          var family = opts.family || 'ipv4' ; 'opts.dtls' is assigned to itself.
import React from'react'; import $ from "jquery"; Unused variable.
function Builder({ formData, updateFormData, showBuilder, toggleBuilder, editFormData, setFormData }) {   const { register, handleSubmit, errors = {}, watch } = useForm();   const [editIndex, setEditIndex] = useState(-1); Unreachable code.
const createdFile = filePath.replace(process.cwd(), '').replace(path.sep, '')     console.log(`${this.icon('success')} ${this.chalk.green('create')}  ${createdFile}`)
}   return resul;  } Unreachable code.
nLi.innerHTML = '<label>Time to Recycle:</label>';    span = nLi.appendChild(document.createElement("span"));    span.innerHTML = 0; Redeclaring variable.
picker = input.data('clockpicker');         assert.ok(picker, 'clockpicker is initialized');         input.focus();         assert.ok(picker.popover.hasClass(place), 'place at'+ place); Undefined variable.
if (err == null) {       ops.verifyLogin(req.cookies.email, req.cookies.sessionkey, function(user){ Unexpected console statement.
Object.defineProperty(Component.prototype, 'componentWillMount', {     writable: true,     value: function componentWillMount(...args) {       let state = State.getComponentState(name); Expected to return a value in method 'componentWillMount'.
throw 'ImageType should be string in SidebarTitleVo';              } Unreachable code.
DrawingBoard.Control.Navigation.prototype = {  saveHistory: function () {
if (node.isOnline()) {           resolve(node) Unexpected console statement.
var div = document.createElement( 'div' );             div.style.cssText = 'font-size: 1rem;';         return (/rem/).test(div.style.fontSize);     }, Unreachable code.
Program.prototype = Object.create (Base.prototype); addMixin (Program.prototype, OwnerMixin); Program.prototype.classDescription = CLASSNAME; Undefined variable.
"level": 15,      "short": "Shackleton, the Mayors famous canine",      "description": "", Duplicate key'short'.
this.radius_ = Math.min(parentBounds.width, parentBounds.height) / 2;   this.iRadius_ = anychart.utils.normalizeSize(this.innerRadius_, this.radius_);   if (this.iRadius_ == this.radius_) this.iRadius_--; Undefined variable.
}); Prism.languages.clike = { Unnecessary semicolon.
}).catch(function(err) {     res.status(500).send(err)    }) Unreachable code.
}                             $scope.$watch('columns', function() {                                 if ($scope.hasColumnsDefinitions === false || $scope.canSaveState === false) Unused variable.
$(function () {     if ('ontouchstart' in window) {       $(document).on("touchend", touchDrop); Redundant double negation.
import { storiesOf } from '@storybook/react'; import'semantic-ui-css/semantic.min.css';
logo: PropTypes.string.isRequired,     title: PropTypes.string.isRequired, Duplicate key 'contactType'.
"removeHandler", eventService.removeHandler,     "getEventDef", eventService.getEventDef, Undefined variable.
export default connect(mapStateToProps)(FacebookLoginButton) 'FacebookLoginButton' is a class.
options = { show: options };       }       if (options.show === 'toggle') {         options.show = toggleFallback; Expected a conditional expression and instead saw an assignment.
return deferred.promise;       }, Unreachable code.
this.video.onloadedmetadata = (e) => {           this.video.play(); Undefined variable.
const lastItem = state.last();       const item = fromJS({         id: state.size,         x: lastItem? lastItem.get('x') + 38 : 40, Unexpected lexical declaration in case block.
if ((match = explicituri.exec(this._input)) && (match.index === this._pos)) {       token.type = "explicituri"; Expected a conditional expression and instead saw an assignment.
admin = require('../../'); var dbURL ='mongodb: Unexpected 'debugger' statement.
}    }    fsCommon.invoke(url, otherParam, function(data) { Unexpected 'debugger' statement.
before(function() {     Neume = neume.exports(new window.AudioContext());   });
if (data) {       var perMsgType = [];       data.forEach(function (measurement) { Redeclaring variable.
return Cookiebar; })(); Undefined variable.
export function injectGlobal(...args) {   const thing = createStyles(...args)   const hash = hashString(styles) Unused variable.
case 'OperatorNode': {         const fn = node.fn.toString()         let args Unexpected lexical declaration in case block.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/race_ticket_lava_leap-1318447328.swf",  admin_props : false, Unnecessary escape character.
request.put(payload, function(err, response, body){                 if(err!= null){ error = err }                 try{ Unused variable.
let classnames = require('classnames') let Strings = require('../utils/strings') Unused variable.
main.render(function(el) {     assert.ok(el instanceof Element, "Contents is a DOM Node");     assert.equal($(el).find("ul li").length, 2, "Correct number of nested li's"); Undefined variable.
goog.provide('goog.graphics.ext.Path'); goog.require('goog.graphics.AffineTransform'); Undefined variable.
}                 return null;             case 13: Unreachable code.
created: function(){     injectScript(data.document); Unexpected 'debugger' statement.
return parsed; } Unnecessary semicolon.
static computeSha256(input) {         if (PlatformUtils.isNodeJs()) {             const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256)); Undefined variable.
function () {
console.log(key)       hubs[key].notify()       valCache = newVal Unexpected 'debugger' statement.
ThrowBallEvent.prototype.throwBall = function (event) {     var mouse = new THREE.Vector2(); Unexpected 'debugger' statement.
},     () => {       handleError(store, 'Error');     } Unused variable.
var tag = childelt.tagName;
this.data.length = 0;   } Unnecessary semicolon.
if ( properties ) {    for( let i = 0, l = properties.length; i < l; i++ ) { Expected a conditional expression and instead saw an assignment.
const semver = require('semver')     valid = semver.gte(require('process').version, '7.6.0') Unexpected 'debugger' statement.
if (rs.indexOf(jiff_instance.id) > -1 && ss.indexOf(jiff_instance.id) > -1) {     deferred = $.Deferred();     promise = deferred.promise();     promises = []; Redeclaring variable.
for (i = 0; i < pixLen; i++) {                             idx = i * 4;                             pixels[idx] += state.red * image[i] * alpha / alphaImgLen; Redeclaring variable.
renderSongCards () {     const { dispatch, genre } = this.props;     return ( Unused variable.
if ( geometry.type === 'LineString' ) {       this.params.geometry = Util.geojsonToArcGIS(geometry);       this.params.geometryType = Util.geojsonTypeToArcGIS(geometry.type);       return; Undefined variable.
import { ThemeProvider, makeStyles } from '@material-ui/styles';
const { decodeJWT, verifyJWT } = require('did-jwt') const Room = require('ipfs-pubsub-room') Unused variable.
__models.widgets.find(req.params.cid).then(function (widget) {         widget.render_setting(req, res, widget.widget_type, widget).then(function (re) {             res.send(re); Redeclaring variable.
var FunctionNode = require('nodes/FunctionNode');     return Node.Model.extend({ Unused variable.
} }; ExoWeb.eachProp = eachProp; function objectToArray(obj) { Undefined variable.
var action = function () {} var Promise = require('bluebird') var enduro_server = require(enduro.enduro_path + '/server') Unused variable.
export default [   [ Unexpected comma in middle of array.
}     } Don't use process.exit(); throw an error instead.
condition: function () {                 var a, op;                 if (a = $(this.addition)) {                     if (op = $(/^[<=>]/)) { Expected a conditional expression and instead saw an assignment.
import config from "../config/config"; import URLUtil from "../helpers/URLUtil"; Unused variable.
);         assert.approximately(           navbar.getBoundingClientRect().top, Undefined variable.
} else {             rot = CubeRotation.byCode[rotCode];             scaledCollideAABB = aabb.translate([-x, -y, -z]).rotate(rot.inverse).scale(scale);           } Redeclaring variable.
}   return identifier.replace(/[/|\\]/g, '_'); } Unnecessary escape character.
element.autocomplete();  assert.equal( element.autocomplete( "widget" ).parent()[ 0 ],   $( "#autocomplete-wrap2" )[ 0 ], "null, inside.ui-front" ); Undefined variable.
}         break       case 'balance':         return this.formatCurrency(this.data.totalReceived[this.currency] - this.data.totalSpent[this.currency], this.data.keyspace) Expected a 'break' statement before 'case'.
module.exports.setVariables = function(string, syntax, variables) {   var sorted = [], lines = [],     ast, changeVariable;   changeVariable = function(ast, key, value) { Unused variable.
constructor(token, options = {}) {
btnMultiSelect.addListener("changeChecked", function(e) {          var enable = e.getValue();          tree.getManager().setMultiSelection(enable);          if (!enable) { Unreachable code.
for ( i = 0; i < swap.length; i++ )      if ( swap[ i ]!= null ) Redeclaring variable.
socket.on('connect_error', err => {    if (err.message === 'xhr poll error') {     if (loggedXhrPollError) { Expected a conditional expression and instead saw an assignment.
throw error;     } } Unnecessary semicolon.
.catch(function(error){     $('.flash-messages').html(nunjucks.render("src/templates/error.html",{message:error}));    }); Undefined variable.
'Ember.ArrayProxy, but you passed %@', [typeof arrangedContent]),          Ember.isArray(arrangedContent) || arrangedContent.isDestroyed);
static iconForUISourceCode(uiSourceCode) {     var binding = Persistence.persistence.binding(uiSourceCode); Undefined variable.
import React from "react"; import MagicMove from "./magic-move"; Unused variable.
} export default InputRow = React.createFactory(InputRow); 'InputRow' is a class.
log.info('server.js: Starting server at:'+ port)         app.listen(port) Unexpected console statement.
} else {         startSide  = start - (item.getWidthLeft()  + 10) * factor;         endSide = end   + (item.getWidthRight() + 10) * factor;       } Redeclaring variable.
var set = function( text ) {   settings.element.title.text( text ); Undefined variable.
var deferred = $q.defer();             var post = ipfs.catJson(ipfsHash, function(err, ipfsData) { Unexpected console statement.
function RecipeBullet($timeout) {         return { Unused variable.
throw new Error('Unimplemented API: dojo.data.api.Identity.getIdentityAttributes');  }, Unreachable code.
Promise.resolve(this.run(argv0, argv, { stdin, stdout, stderr,... rest })).then(exitCode => {             process.exit(exitCode);         }, error => { Don't use process.exit(); throw an error instead.
while ((peek = context.reader.peek(++count))) {      if (!/[\w@]$/.test(peek)) { Expected a conditional expression and instead saw an assignment.
if (option.type === 'POST') {     if (FormData && sendData instanceof FormData) {       request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')       sendData = [] Empty block statement.
return Visibility.FULL;         distance = this.computeDistanceToTile(tile, frameState);         tile._distance = distance; Unreachable code.
var domutil = require('../../common/domutil'); var reqAnimFrame = require('../../common/reqAnimFrame'); Unused variable.
import { NavigationHandler } from 'navigation-react'; import getStateNavigator from './getStateNavigator'; Unused variable.
}),   new ts.Action({     name:    'export-csv',
import moment from'moment';
var tab = dtResult.tab;     this.setUp(tab, settings, resultDOM); Unexpected console statement.
function Sequence(tests, bail) {  if (!(this instanceof Sequence)) {   throw new TypeError('Class constructor Sequence cannot be invoked without \'new\''); Unexpected negating the left operand of 'instanceof' operator.
return 'unpublished';     case 'paper-conference': Unreachable code.
export default class DialogActivate extends Component {  constructor( props ) {   super(props);   console.log('props', this.props);   this.state = { Expected to call'super()'.
, validateList = require('./util/validateListInterface')  , filter   = require('./util/filter'); Unused variable.
onDrop: function (params) {                 this.dagrePosition(params.position);             } Unused variable.
Notification: true, Player: true, Settings: true, Unused variable.
if (typeof(text) === "string") {     return text.replace(sensitivePattern(client), "「ｒｅｄａｃｔｅｄ」").replace(/`/g, "`" + String.fromCharCode(8203)).replace(/@/g, "@" + String.fromCharCode(8203));   } else { Unnecessary semicolon.
module.exports = Aria.classDefinition({     $classpath : "aria.jsunit.SonarReport", Undefined variable.
if (isSecondTab) {             return false;         } Unreachable code.
})  .fail(function() { Unused variable.
var s;     while ((s = query.match(statement))) {       var s_name = s[1]; Expected a conditional expression and instead saw an assignment.
to: "Zu",         memo: "Memo", Duplicate key 'to'.
console.log(`Running chaincode for location(s): ${chaincodeLocations.join(', ')}`);     const copyAllChaincode = () => Promise.all(chaincodeLocations.map(location => copyChaincode(location))); Don't use process.exit(); throw an error instead.
case'size':     return dfrd.resolve({error : fm.res('error', 'cmdsupport')});    case'search': Unreachable code.
import React from'react'; import { string } from 'prop-types'; Unused variable.
it('should support string as handler', async () => {     const { builder, classifier } = setup();
emitter.emit('success', obj['count(*)'])       })     })     return emitter.run()   } Unreachable code.
if(err){           if(err === 'Unauthorized'){ Redundant double negation.
gutil.beep();     } throw an error instead.
return (str+'').replace(/([\\.+*?[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1"); };
orga() {     const orga = Organizations.findOne({ _id: FlowRouter.getParam('_id') }); Unexpected 'debugger' statement.
this.connection.close(callback);     } Unnecessary semicolon.
EventEmitter = require('events').EventEmitter,   WireResponse = require('./wire_response'); Unused variable.
if (precision) return r.substr(0, precision);                 return '%';             case '%':                 return '%'; Expected a 'break' statement before 'case'.
switch(element.type) {       case FIELD: {         const matchInField = checkField(element, line, column);         if(matchInField) return matchInField; Unexpected lexical declaration in case block.
let loader = new LoadersVolume(); Redeclaring variable.
getSiteType: function () {         if (CHAT) {             return 'chat'; Undefined variable.
var elt;     while((elt = this.next())) {       this[this.cache.length] = elt; Expected a conditional expression and instead saw an assignment.
import React        from'react'; import { activateSimulationStep } from '../../../../network/helpers/simulations'; Unused variable.
console.log(currentResult);     if(event.keyCode  == 70){ Unexpected 'debugger' statement.
.attr({                 cx: function () {                   var pivotNodeTranslate = that.getPivotNodeAlignedTranslationX(that.pathWrappers[d.pathIndex]); Unused variable.
logger.log(`No ${chalk.green("xclap.js")} found in ${x}`);   } else if (search) { Don't use process.exit(); throw an error instead.
}         return Promise.reject(error)     } Unreachable code.
me.define.args.normalize = function() { Undefined variable.
module.exports = function(expect, Helper) {  function foo() { Unused variable.
return files_data;
if(0) write_record(ba, "BrtWbProp", write_BrtWbProp());
expect(component.draw).toHaveBeenCalledWith(                         jasmine.any(Object) Undefined variable.
else {                     host.exception(new SklearnError("Unknown function '" + name + "'."), false); Unexpected 'debugger' statement.
return thisThing.execute(this._semantics, this);   } Unnecessary semicolon.
if (this.accept('{')) {       delim = '}'; Expected a conditional expression and instead saw an assignment.
const roptions = { Unexpected 'debugger' statement.
Action.runTask(this.context, errorTask);    } Undefined variable.
export async function organization(parentValue, { name, description = '' }, { auth }) {   if(auth.user && auth.user.id) { Unexpected empty object pattern.
this.init = function() {                                  that.attr('id', params.fieldDef["name"] + '--id_0'); Unexpected console statement.
module.exports = require('apps/drawapp').extend({  require,  onDraw:function(){ Duplicate key'require'.
throw new Error('Element must be in document');   } Unreachable code.
var queryHash = queries[index]       var method = Sequelize.Helper.Array.without(Sequelize.Helper.Hash.keys(queryHash), "params")[0]       var object = queryHash[method] Undefined variable.
}); }; module.exports = FormWithRequiredLabel; Unnecessary semicolon.
import Components from '../Components'; import TableOfContents from '../TableOfContents'; Unused variable.
import classSet from "classnames"; import { app, createComponent } from 'webiny-app'; import TabHeader from './TabHeader'; Unused variable.
if(g.isVml){     sourceDir = bidiEngine.checkContextual(text); Undefined variable.
looksLikeSelector: function() {     var i = 1; Expected getter 'looksLikeSelector' to always return a value.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-08\/subway_gate-1346109087.swf",  admin_props : true, Unnecessary escape character.
function pos () {   return { Empty block statement.
: table[field].gte(context.request.urlTokenized[index - 1])           case "explicit": Unreachable code.
Signature.prototype.baseString = function(method, url, params) {  querystring.escape = _encodeURI; Unexpected 'debugger' statement.
const characters = account.getCharacters();         const maxCharacters   = 3; Unexpected lexical declaration in case block.
var connUrl = {pathname: ''};           try { connUrl = new URL(conns[i].url); } catch (e) {}             var connPathname = connUrl.pathname.replace(/\/$/, ""); Empty block statement.
z += x[a];    if (z == 42)      delete x["c"] Expected a conditional expression and instead saw an assignment.
for (i = 0; i < quadLen - 1; i++) {             if (OverLap) { Redeclaring variable.
var FluxMixin = Fluxxor.FluxMixin(React); var Button = require('react-bootstrap/lib/Button'); Unused variable.
this.ul.classList.add("dropdown");  this.container.appendChild(this.ul); }; Undefined variable.
GenoverseUtils.prototype.getGenomeObject = function(genome, genomes) {
path += ')/'      this.query([path], session, cb, function() {});     }.bind(this)); Unexpected 'debugger' statement.
var arr = ["hello world"]; console.log (arr[0]); Read-only global 'console' should not be modified.
w.terminate(); }; Don't use process.exit(); throw an error instead.
var orderByCode = null;   for (var i = 0; i < 1; i++) {     var text_order = Unexpected constant condition.
window.addEventListener('load', function() {   if ('PaymentRequest' in window) { Unexpected constant condition.
if (!isAsync) {             return $.parseJSON(request.responseText);         } Redeclaring variable.
it("xpath without namespace declaration", function(done) {         try This generator function does not have 'yield'.
timer.stop();         console.log('total runtime:'+ timer.getTotal());     }     Unexpected console statement.
if ( document.getElementById( id ) ) {   Expr.find.ID = function(match, context, isXML){ Redundant double negation.
return source;  } Unnecessary semicolon.
data: function() {    var convData = getConverById(this.params.convId).fetch();
delete data[field];     });    }    return data; Unnecessary semicolon.
yBits = decCoefficientToBinaryString(bitNot(y))     for (i = 0; i < yBits.length; ++i) {       yBits[i] ^= 1 Redeclaring variable.
Flow.durationToTicks.durations = {   "1/2":  Flow.RESOLUTION * 2,   "1":    Flow.RESOLUTION / 1,   "2":    Flow.RESOLUTION / 2, Undefined variable.
default:       return "Unknown Platform";   } Unreachable code.
this.modal = new Backbone.BootstrapModal({         content: form, Undefined variable.
it('168.2 cannot customize the key value without metadata setting', async () => {     let conn, coll;     try { Undefined variable.
} else {         gProcessor.setJsCad(getSourceFromEditor(), 'example.jscad')       }
} ); export { OrthographicCamera } Unnecessary semicolon.
import styled from'styled-components' import { StyledH1, StyledP } from '../theme/globalStyle'
((isContentEditableSupported)? '' : '<input type="text" class="cursor" autocapitalize="off"/>') +           ((process.env.NODE_ENV === 'test')? '' : '' +              '<div class="context-menu">' + Unexpected constant condition.
var stores = function( storeName, hash ){     var definedStores, definedStore, target; Redeclaring variable.
for (key in source) {              if (source.hasOwnProperty(key)) {                  var formatName = this.getFormatName(key);                  if (typeof formatName!== 'undefined') { Redeclaring variable.
Source.prototype.delete = Source.prototype.delete;
const controller = function (Base) {         class DexBlock extends Base { Unused variable.
setupEvent();
config = readConfigFile(envVal);     } catch (err) {  } Empty block statement.
mapAndSave(model, source);   } Unnecessary semicolon.
_serializeValue: function (value) {   if (BetaJS.RMI.Skeleton.is_class_instance(value) && value.instance_of(BetaJS.RMI.Skeleton)) {    var registry = this; Undefined variable.
if (typeof WebSocket!= 'undefined' &&!('__initialize' in WebSocket)) {     return false;
var tpl = new TemplateFile(__dirname + Path.sep +                                ".."+ Path.sep + Redeclaring variable.
var init = function() {         renderContainer(template_data);
enyo.args.root = (enyo.args.root || tag.path); Unnecessary semicolon.
let right = r * scale * self.opW_;     if (scale < 0.2) {         context.strokeStyle = "#888888"; Empty block statement.
}      s.length = s.buffer.duration;      s.dispatchEvent(LEvent.COMPLETE);      return;
if (consume(ID, "octet")) return "octet";     } Unnecessary semicolon.
import React from'react' import { Msg } from './messages' Unused variable.
if (panInProgress && panEnabled && onPanEnd) {     var { dx, dy, panStartXScale, panOrigin } = panStart;
for (var i = 0; i < options.columns.length; i++) {             var column = options.columns[i];             if (column.filterable == "advanced") { Redeclaring variable.
if (this._transform)   modelViewMatrix = sglMulM4(modelViewMatrix, this._transform);  if (!this.dataAdapter) Undefined variable.
var payers = null;     before(function (done) { Unexpected 'debugger' statement.
var rawCreateElement = doc.createElement;   doc._createElement = function(tagName, callConstructor) { Undefined variable.
do(noOp, noOp, function() {             expect(lhs[__ref_index]).to.equal(0); Unexpected 'debugger' statement.
success: function(r) {                  this.grid.reload(); Unexpected 'debugger' statement.
case "Cone":                 div2.append(jQuery('<span \>',{ class:'input-group-addon',}).html('Length'));             break;             case label.
'clientY': offset - $(window).scrollTop(),         'pageX': offset, Undefined variable.
_sendMessage(destination, content, mentions){      var self = this;
constructor() {     super();     this.listenTo(this.model, 'change', this.render); Expected to call'super()'.
if (err && err.hasOwnProperty('responseText') && err.responseText!== undefined) {         alert(err.responseText);       }
'use strict'; const path = require('path'); Unused variable.
mockedCdn.putFileContent.yields(null, 'ok');         setInterval = sinon.stub();         initialise();
var EXPLICIT_CLASSIFICATION, TRAINING_DATA_CLASSIFICATION;     var acs, sof, oof, acrof, $stateName, state, state2,       registryService, stateClassifierMapping; Unused variable.
cy.url().should('include', '/login')       })
}     for(var ti in this.tails)         if(this.tails.hasOwnProperty(ti))             this.tails[ti].sort(); }; Redeclaring variable.
require('./sounds')(nodecg);  } catch (e) {   nodecg.log.error('Failed to load "sounds" lib:', e.stack);   throw new Error('Failed to load "sounds" lib:'+ e.stack);  } Don't use process.exit(); throw an error instead.
} if (!stringPrototype.repeat) { stringPrototype.repeat = function(count) {     if (count < 1) return ''; Undefined variable.
var model = deepClone(pagesConfig)           model.basic = model.basic || {}           model.cols = model.cols || []'model.cols' is assigned to itself.
import {   PushButton, Unused variable.
<AddContributionForm     onSubmit={x => console.log("REPLACE ME WITH SOMETHING REAL!")}     initialValues={{ Unexpected console statement.
try {       return _function.apply(_this, curryArgs.concat(slice.call(arguments, 0, arguments.length)));     } catch (e) {       if ((e = exceptionHandler(e))) throw e;     }   }; Do not assign to the exception parameter.
ezmlm.replyToList(id, callback);   }, function (err) {     handle(err);   });
var evt = new MouseEvent("onMouseUp", o.x, o.y, this, e, id, id==this._primaryPointerID);   if (this.onMouseUp) { this.onMouseUp(evt); }
} catch( ex ) {        alert('ERROR: UdpClient.onDataAvailable ['+ex+']\n\n(Make sure to use the correct CoAP version.)');    }
PageActions = require('./../app/PageActions'),   Loading = require('./../widgets/Loading'), Unused variable.
var appy = require('appy'); var async = require('async'); Unused variable.
}   }   return { time : time, price : zigzag }; Unnecessary semicolon.
for (var i in edit) {             if (i === '_read' || i === '_modified' || i === '_modifier' ||                      i === '_creator' || i === '_created' || '_commitId') {                 continue; Unexpected constant condition.
console.log("Didn't remove the device " + err);    });  }, Don't use process.exit(); throw an error instead.
if (adapter.config.everyCalOneColor) {                  result.suffix += '<span style=\"font-weight:normal;color:' + col + '\">';              } else { Unnecessary escape character.
} else {       nextButtons[buttonIndex].value = pressed        ? 1.0 Redundant Boolean call.
return deferred.promise; } Unreachable code.
ISense.prototype.setCompilationSettings = function (options) {                  var compOptions = new TypeScript.CompilationSettings();                  for(var i in options) { Unreachable code.
throw new Error(WarningTextEnum.INVALID_DATA);     }   } Unnecessary semicolon.
test( "Popup placement works correctly", function() {  var desired, result;
p.once( function( newVal, oldVal ) {       count++; Unexpected console statement.
var path = [];     while (node) { path.unshift(node); node = this.parentNode(node); }     return path;
if (result.error) {                     tangelo.log.warn("[tangelo.stream.run()] error: " + data.error + "; aborting stream run");                     return;                 } else if (result.finished) { Undefined variable.
const master_model_1 = require("../master/master.model"); ; ; class RoomsModel extends master_model_1.default { Unnecessary semicolon.
const hookPrefix ='redibox-hook'; const hookRegexMatch = new RegExp(`@?[a-zA-Z-_0-9]*?\/?${hookPrefix}-([A-Za-z0-9-_]*)`); const hookRegexReplace = new RegExp(`@?[a-zA-Z-_0-9.]*?\/?${hookPrefix}-`); Unnecessary escape character.
case'sideNavOpen': {           propValue? this.hig.showSideNav() : this.hig.hideSideNav();           break;         }         default: {           console.warn(`${propKey} is unknown`); Expected a 'break' statement before 'default'.
return locs;         }, Unreachable code.
if(this.distinctHost) {     this.listeningServer.listen(this.port, this.host); Redundant double negation.
if (areaType === REGION) {     } else if (areaType === DISTRICT) {       return     } else { Empty block statement.
import { connect } from'react-redux';
isArray = comb.isArray,     combDeepEqual = comb.deepEqual, Unused variable.
var urlParts = this.url.split("/");                     this.url = this.url.replace(/^\/apps\/[a-z0-9-]*\/?/,"/");                 };
} } GrowlerContentWrapper.displayName = "GrowlerContentWrapper"; Unnecessary semicolon.
if (userRoles.isModeratorOf(id)) {             UserRoles.removeAllRolesFor(id);             MeetingSeriesCollection.remove(id); Undefined variable.
}     continue;    }    if ((m=s.match(/^\s*(https?:\/\/[^\s<>"]+\/[^\s<>"]+)\.(bmp|png|webp|gif|jpg|jpeg|svg)\s*$/))) {           lout.push('<img src="'+m[1]+'.'+m[2]+'">'); Expected a conditional expression and instead saw an assignment.
msg = '메타마스크 로그인 안됨';   } else if (web3.version.network!== '1') {     msg = '메인넷 아님'; Undefined variable.
var index = 0, x, y, random;     for (x=0; x < imageData.width; ++x) {       for (y=0; y < imageData.height; ++y) {         random = Math.random() * 0.8; Redeclaring variable.
function date_timestamp_set(dt, timestamp) {
var intv;     if(dojo.isIE){      f.onreadystatechange = function(){ Undefined variable.
{     this.layers = dotgrid.history.prev();     dotgrid.draw();   };
}         for(let j = 0; j < pack.images.length; j++) {             let image = pack.images[j];             if (image.enabled && this.enabledImages.indexOf(image) == -1) { Redeclaring variable.
scope.meta.Class = scope.meta.Class;  scope.meta["Class"] = scope.meta.Class; 'scope.meta.Class' is assigned to itself.
onCheckUsername: function(event, input, form) {
{        indices = _indices;      } 'indices' is assigned to itself.
for (var key in labelsMap) {                                 if (labelsMap.hasOwnProperty(key)) {                                     var hasKeys = true;                                     text += key + " : <i>"+ labelsMap[key] + "</i>,\n "; Redeclaring variable.
att = await collection.get(this.att_id, { id: this.att_id });       } Undefined variable.
} else {       setMode(MODES.NEW_STREET)     } Read-only global'mode' should not be modified.
}        $switcher.on(app.touchSupport? 'tap' : 'click', function() {     return toggle(); Undefined variable.
const LandingPage = () => (   <div> Unexpected empty object pattern.
thisSeedBin = QRLLIB.mnemonic2bin(userBinSeed)     }     const XMSS_OBJECT = new Xmss(thisSeedBin, 10)     const thisAddress = XMSS_OBJECT.getAddress() Read-only global 'XMSS_OBJECT' should not be modified.
handleNavigate(newUrl, options) {     locationStore.actions.navigate(newUrl, options) Unexpected 'debugger' statement.
switch (activityType) {     case 'create_comment': {       const commentText = content.text;       const commentContent = JSON.parse(annotation.content); Unexpected lexical declaration in case block.
})(); function sayDelete() {  alert('Hey you just deleted something!'); Unused variable.
try {             var obj = JSON.parse(value); Redeclaring variable.
else if (_panes[name]) {                 _panes[name].loadData(val); Undefined variable.
this.applyNumberFormat(column, options);           break;         case 'DateFormat':           this.applyDateFormat(column, options); Expected a 'break' statement before 'case'.
RegExp.escape = function(s) {   return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'); }; Unnecessary escape character.
if(this.outputs)    { Redeclaring variable.
case'since':       sym = '>=';   } Redeclaring variable.
elem = elem instanceof Node? elem : this;     if (!(elem instanceof Node)) {       throw new Error('No node provided to diff renderer as either the first argument or the context.'); Unexpected negating the left operand of 'instanceof' operator.
if (str.length == 6) {                     y = str.substr(0, 4);                     var m = str.substr(4, 2); Redeclaring variable.
async function notify(aParams = {}) {   var id = await browser.notifications.create({ Unused variable.
if (!Array.isArray(value)) {           return false         } Read-only global 'errors' should not be modified.
if (nodejs) {   require('./metrics'); Redeclaring variable.
data.user.activityHistory = [];                   }                   if(data.user.permissions == {empty:"permission"}){                     data.user.permissions = []; Unexpected constant condition.
bottomshape: '置后',             align: '水平方向', Duplicate key 'downshape'.
default:         throw new Error("unknown type: " + type);     } Undefined variable.
const parseCodeFenceHeader = require('./parseCodeFenceHeader'); const { downloadExtensionIfNeeded } = require('./downloadExtension'); Unused variable.
if (myTop < containerScrollTop) this.props.setContainerScrollTop(myTop);     if (myBottom > containerScrollBottom) Redeclaring variable.
if (isPropStateSet === true) {           var pCcClassKeys = util.safeGetArrayFromObject(propModuleName_ccClassKeys_, module); Expected a conditional expression and instead saw an assignment.
this.newMetadata["textsize"] = this.newDataAsText.length;    }   } Unnecessary semicolon.
this.sandbox.on('husky.column-navigation.edit', function(item) {                 if (!!this.data.ids.indexOf(item.id)!== -1) {                     this.data.ids.push(item.id); Redundant double negation.
{   var rowheight = 25; 'width' is assigned to itself.
gameArea.stop();   console.log(currentLevel);   if (currentLevel == totalLevels) gameComplete();   else{ Expected a conditional expression and instead saw an assignment.
P0FClient.prototype.process_send_queue = function () {     if (this.send_queue.length === 0) { return; }     for (var i=0; i<this.send_queue.length; i++) { Unnecessary semicolon.
return basicForm(verb, eSound, vtype); Unreachable code.
var spacing = this.getSpacing();       var childLeft = childAlignOffset + (this.options[0].marginLeft || 0); Redeclaring variable.
import Footer from './Shared/Footer'; import InfoWeb from './Home/InfoWeb'; Unused variable.
return IconComponent.tick(color);       case "ercc only": Unreachable code.
loopFlow(view, proxy, generic);              try {                  let res = await instance.post('insurance/remove', data, config);                  return res.data;             } catch (exception) { Empty block statement.
if (this && (!('context' in this)) {         this.context = context; Unexpected negating the left operand of 'in' operator.
const idMatch = val.match(/^#([a-z-]+)/); Unnecessary escape character.
case 'Q' :        for(k=0, v=data.length; k<v; k+=4){         generatePoint(tn, pc, sn, data[k], data[k+1], lc+1, sx, sy); pc++; Redeclaring variable.
popupCard.target = target;     popupCard.position = _positionCard(sourceElement, target);     _renderPopup();
}));       },       "prelude": function* (ctx) {         ctx.scope.set("baz", yield ctx.callKRLstdlib("*", ctx.scope.get("foo"), ctx.scope.get("bar")));       },       "action_block": { This generator function does not have 'yield'.
prop = prop.substr(0, prop.length - loader.packages[pkgMatch].main.length - 1);         loader.packages[prop] = loader.packages[prop] || {};         loader.packages[prop].map = v;       } Redeclaring variable.
var air_name = 'air:'+name+'List';         if (!(obj[air_name] instanceof Array))             throw new uError('PARSING_AIR_WRONG_TYPE', obj[air_name]); Unexpected negating the left operand of 'instanceof' operator.
function GBAbstractPoint() {   Geom.apply(this, {}); } GBAbstractPoint.prototype = new LabeledGeom(); Unnecessary semicolon.
const idDroplet = params[1];     const api = new DigitalOceanApi({ Unexpected console statement.
if (document.readyState == 'complete' || document.readyState == 'interactive') {     callback.call(opt_scope);
for(var timer, sent=sc.dom.querySelector("send[id="+id+"]").sent;    timer=sent.pop(); timer.cancel());  }, Expected a conditional expression and instead saw an assignment.
var MASTHEAD_BG_CLASS_REGEX = /(\s|^)bg-[a-z-]+(\s|$)/;   var FILTERS_REGEX = /\.*[\?|&]filters=([^&]+)/; Unnecessary escape character.
this.startGameLoop(this.run);   }   if (parameters.debugMaterials) {    this._addDebugKeys(); Unexpected constant condition.
}           break;         case "selectandLockField":          if (!_.isEmpty( fld ) && (!_.isEmpty( val )) ) { Expected a 'break' statement before 'case'.
html: function(token, attrs, content) {    var parts;    var attribs = ''; Unused variable.
center: proj.startCenter,         rotation: proj.id === 'geographic' || proj.id === 'webmerc'? 0.0 : models.map.rotation,         zoom: proj.startZoom, Unexpected constant condition.
console.error(e);     }); Don't use throw an error instead.
this._numList = [];      }     Paginator.prototype = Object.create(HTMLWidget.prototype); Unnecessary semicolon.
function garg_ontick(data) {      switch (data.stack.castInfo.rune) { Unexpected 'debugger' statement.
render() {     if (this.props.workflowStatus === statusConstants.RUNNING) {       return ( Unexpected constant condition.
processor.emit = function() {             var event = arguments[0]; Unexpected 'debugger' statement.
console.log('Import: error ', _.omit(fileObj,'blob') );    throw new Meteor.Error(500, i18n('upload_error_imageNotValid') + K.Util.humanize.filesize(K.settings.public.import.maxFileSize) );   } Unreachable code.
mapping.generateElement(this.editor, start);     if (!editor.commit()) { 'editor.selection.range' is assigned to itself.
function _getColorsFromPaletteTypeTop(palette, numCategories, othersColor) {     var colors = _getSubPalettes(palette, numCategories);     return _avoidShowingInterpolation(numCategories, colors, othersColor); Undefined variable.
stop();     z.load({mockresult: "fail"}).using("mock").success(function(){         ok(false, "Should fail here, success shouldn't be called."); Unused variable.
is: "hax-blox-picker",   properties: { Undefined variable.
console.log('Uh oh:'+ err);   throw an error instead.
if (plugin.active) {                 json = plugin.fn(json, plugin.params);             } Undefined variable.
radius = Base.readNamed(arguments, 'radius');    return createEllipse(new Rectangle(center.subtract(radius),      new Size(radius * 2, radius * 2)), arguments);   }, Undefined variable.
this._p; } Unnecessary semicolon.
"darwin" : [         { name : 'fontmanager.category.system.folder.name', type :'system', directory : '/Library/Fonts'},         { name : 'Google Font', type : 'googlefont', directory: 'data/googlefont/main-font'}, Duplicate key 'type'.
bz.legacyIE = (bz.IE6||bz.IE7||bz.IE8);  bz.oldGecko = (bz.Gecko && UA.match(/rv\:(\d+\.\d+)/) && parseFloat(RegExp.$1)< 1.9);   var Gecko7orOlder = (bz.Gecko && UA.match(/rv\:(\d+\.\d+)/) && parseFloat(RegExp.$1)< 8.0); Unnecessary escape character.
readable.on('data', function (data) {     if (!(data instanceof Buffer)) {       data = new Buffer(data);     } Unexpected negating the left operand of 'instanceof' operator.
this.domain = scheme + ': } function Util() {} Unnecessary semicolon.
import React from'react'; import './App.scss'; Unused variable.
var Emitter = require('emitter-component'); var util = require('../util'); Unused variable.
case Syntax.VariableDeclaration:           name = node.declaration.declarations[0].id.name;           utils.append('var'+ name +'= module.exports.' + name +'= ', state); Redeclaring variable.
if ((menu.initialTop - currentTop) <= 30) {       menu[0].className = 'docs-side-menu menu-fixed'; Redeclaring variable.
'use strict'; var Database = require('../'); Unused variable.
this.root = { box: { center: center, halfDim: halfDim }, point: data[0] };             for (i = 1; i < data.length; ++i) {                 this.insert(this.root, data[i]); Redeclaring variable.
else {     lastValues = JSON.stringify(params.value).replace(/'/g, '&quote;')     inputSource += `<select ${attributes} class="${inputClass}" last-values='${lastValues}'>` Unnecessary escape character.
if (lastLayer) {     let topText = node.topText; Unexpected 'debugger' statement.
var trackers = storage.trackers;                 if (areaName === 'local') { Unused variable.
elem.rel ='stylesheet';         elem.type = 'text/css';         elem.href = url;         document.getElementsByTagName('head')[0].appendChild(elem);     }
init : function() {         this.setHelpUrl(Blockly.Msg.INFRARED_HELPURL);         this.setColourRGB([ 143, 164, 2 ]);         this.appendDummyInput().appendField(Blockly.Msg.SENSOR_INFRARED); Undefined variable.
const duartionRegexp = /([0-9]+ms)/g; const categoryRegexp = /(\[[\w\-_.:]+\])/g; const httpMethodRegexp = /(GET|POST|PUT|PATH|HEAD|DELETE) /g; Unnecessary escape character.
if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {                         extended[prop] = extend(true, extended[prop], obj[prop]);                     } else { Undefined variable.
import React from'react'; import { PropTypes } from 'prop-types'; Unused variable.
var distance = finalPosition.distanceToSquared(imagePosition);             console.log(index + '=' + distance);
this.childs = children.length? children : [this];         if (showProp) {             children = this.childs.filter(child => child.data.get(showProp)); Unreachable code.
} else {       console.log(`${context} key '${key}' not found in ${parentKey}`);       error = true; Unnecessary escape character.
if (excludes.length) {                 result._doc = mask.mask(result, excludes);             }             return result;
}                 }                 if (!matrixSide) { Unnecessary semicolon.
var sharedProjects = require('./db/sharedProjects'); module.exports = {}; Redeclaring variable.
}); Formsy.addValidationRule('isAlpha2', (values, value) => {   if (value!== null){ Unused variable.
r.base = null;   if (r) unmount(r);  } Expected a conditional expression and instead saw an assignment.
element.parentNode.MaterialTextfield.boundUpdateClassesHandler(); } Unnecessary semicolon.
process.on('exit', () => {     if (updateData) { Unused variable.
post('/chat', function(){   messages.push(param('message'))   this.halt(200)
obj = obj || { id: id, cls: "PFVArType2IEEEVArController" };                 super.submit (id, obj); Redeclaring variable.
import React from'react'; import { Navbar, Nav, NavItem, NavDropdown, MenuItem, Button, FormGroup } from'react-bootstrap'; import { Link, IndexLink } from'react-router'; Unused variable.
});       case 'Validation': Unreachable code.
var state = uri.getData(path);     if (!state) { Unexpected 'debugger' statement.
throw "Got unexpected control cell."         } Unreachable code.
},   'diagnoses.age_at_diagnosis': {     type: 'Diagnosis', Duplicate key 'diagnoses.age_at_diagnosis'.
var outPath = data.path.replace(/(\.js)?$/, '.css');       log.info('Writing CSS! file:'+ outPath + '\n');       var css = layerBuffer.join(''); Unexpected console statement.
if(err){    this.console.log(err);   }else{ Unexpected console statement.
core.item(qs.error, function(data) {         current._osm_object_type = current.object_type;
"actions": [{             "action": function* (ctx) {               return yield ctx.modules.get(ctx, "event", "send")(ctx, [{                   "eci": ctx.modules.get(ctx, "meta", "eci"), This generator function does not have 'yield'.
var height = 0;     for (index = 0; index += rowSize; index < indexOfElement) {       var value = obj.get(index); Expected a conditional expression and instead saw an assignment.
rows: rows     }   } } Unnecessary semicolon.
this._frameObject = null;   } Unnecessary semicolon.
const instance = mount(PageProposal, {       doBefore: () => {         store.commit(`setProposal`, {}) Unexpected empty object pattern.
handleFocusChange();   }   observeShadowFocus = function() {     document.addEventListener('focus', handleDocumentFocusEvent, true); Move function declaration to program root.
if (infos){             if (!infos[1]){ Expected a conditional expression and instead saw an assignment.
return compiler.rewrite(code,o); }; exports.rewrite = __root.rewrite; Unnecessary semicolon.
if (view.isView) { Unexpected 'debugger' statement.
app.use(noopServiceWorkerMiddleware());       spawn(findpath(), [paths.appPath], { stdio: 'ignore' })        .on('close', code => process.exit(code));     }, Don't use process.exit(); throw an error instead.
return this.i18n.Major;                 case 5: Unreachable code.
var formData = new FormData(_this.$form.get(0));         $.ajax({             url: window.location.href, Undefined variable.
return  n;                 } Unreachable code.
import React from'react'; import { createStructuredSelector } from'reselect'; import { connect } from'react-redux';
var contents = this.gobble_expression();     if((match = this.buffer.match(close_paren_regex))) {      this.buffer = this.buffer.substr(match[0].length); Expected a conditional expression and instead saw an assignment.
for (name in properties) {    value = getOwnProperty(properties, name);    if (name === 'implements' || value === undefined) continue; Redeclaring variable.
var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');
if (_activeRequests == 0) {       _callback(_config); Unexpected console statement.
throw new Error('stroked round lineJoin not implemented.. add arc/arcTo' );                         case'miter': Unreachable code.
const errStr = "Input to set emoji was not a known emoji."       fn(new Error(errStr))       return Unreachable code.
{     DockerManager.startOrchestra(DockerManager.defaultOrchestra, function ()     { Unused variable.
return field > (value1.getTime());         case this.OPERATORS.dateOperatorIsBetween: Unreachable code.
switch (format) {           case 'csv': {             const { send } = res;             res.send = (data) => { Unexpected lexical declaration in case block.
+ _volume._childrenInfo[1]._sliceNormal[2]*_ras[2]     + _volume._childrenInfo[1]._originD; Unnecessary semicolon.
static removeUrls(message, fn) {     return message.replace(/(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?/g, fn? fn : "");   }
function logUserRequest(message, conversationId) {  log(message, conversationId, conversationId, 'incoming'); }
loadedGroup = new LayerGroupCollection(null, item.name[defaultLanguage]);                     loadedGroup.id = item.id; Unexpected console statement.
$page.find('#main').append($footer); } Unnecessary semicolon.
if (schema.type === 'object') {     var instance = {}; Redeclaring variable.
throw new Error("Error referencing component '" + root.tag + "'. Components can only be used when within modules. See documentation for more information on t7.module().");             } Unreachable code.
frame.minSpeed = matchArray[2];         },         requestLocation : function(message, frame) {             gpsMessageOnlyParse(message, frame); Duplicate key'requestLocation'.
this.gl.glp().stateTracker.toggleBoolState(data);       } else if (data.type == "num") {         this.gl.glp().stateTracker.changeNumberState(data); Unexpected constant condition.
toLabel: ({ assert }) => `(is ${ assertToLabel( assert ) })`,   toGherkin: ({ target, params, assert }) => `Assert that element \`${ target }\`     is located ${ assertToLabel( assert ) }`, Unused variable.
}); var uploadFileName = "upload1.txt";
.replace(/\./g, '-')     .replace(/[(|)]/g, ''); Unnecessary escape character.
$('body').on('click', '[data-reload]', function(){    window.location.reload();   }); 'window.location.href' is assigned to itself.
if ((result = this.scanInjections(ruleStack, lineWithNewline, position, firstLine))) {       for (let injection of baseGrammar.injections.injections) { Expected a conditional expression and instead saw an assignment.
case 'incollection':       return 'chapter'     case 'conference': Unreachable code.
rm.write("<div  id=\"" + oControl.getId() + "_SB\" tabIndex=\"0\" role=\"separator\" title=\"" + oControl.getText("SPLITTER_MOVE") + "\"");   if (orientation == Orientation.Vertical) {    if (oControl.getSplitterBarVisible()) { Undefined variable.
if (this._promises) {       for (i = 0; i < this._promises.length; i += 1) {         data._chainPromise(this._promises[i]) Redeclaring variable.
return f32_scratchLoad()   } Unreachable code.
if (!window.ace)     window.ace = {}; Undefined variable.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/scrumptious_frittata-1334210155.swf",  admin_props : false, Unnecessary escape character.
setTimeout(() => doQueueNext(msg), 20000);         }
let json = utils.xmlToJson(xml)         let flatTileMatrix = null; Unexpected console statement.
var csv = require('../js/util/csv'); describe('csv utils', function() { Undefined variable.
if (ciTime) {             hoursAgo = (ciTime-bgTime)/(45*60*1000); Unexpected constant condition.
if (existsFiles.length>0) {                     mes="同じ名前のファイルが既に登録されています：\n";                     existsFiles.forEach(function(f){ Redeclaring variable.
switch (name) {       case 'date': {         console.log(evt);         const dateMoment = evt!= null? evt.format('YYYY-MM-DD') : null;         date = dateMoment? `@${dateMoment}` : null; Unexpected lexical declaration in case block.
} else {     homeDir = process.env.HOME;   } Redeclaring variable.
var r = require('rethinkdb') var mongoose = require('mongoose') Unused variable.
console.log("restarting!");          } else { Don't use process.exit(); throw an error instead.
var days = [];     for (var i = 1; i < 6; i++) {         var weekDay = moment().day(i).hours(0).minutes(0).seconds(0).milliseconds(0); Undefined variable.
exports.stringHexColor = stringHexColor;
if (activeSchedule) { Unexpected console statement.
return fs.copy(src, destination).then(() => {     logger.info(`Docs synced to ${config.blog.outputPath} folder`)   }) Unexpected console statement.
import TwiddleResolver from "ember-twiddle/lib/twiddle-resolver";
item.addPartnerRightAction = function (person) {   let node = person.nodeOf; Unexpected 'debugger' statement.
var path = basis.path;   var consts = require('basis.template.const'); Undefined variable.
html += "}));";     return html; Unexpected console statement.
} else if (leftNum < rightNum) {   this.prover.evaluate(GH.operatorUtil.create('<', [sexp.left(), sexp.right()]));   var result = this.prover.getLast(); Undefined variable.
var deps = this.diffDependencies[diff.id];                         deps.forEach(function(diffId) {                             self.trigger('markPublishDiffItem', { diffId: diffId, state: false }); Redeclaring variable.
function quasi(value) {     if (value.slice(value.length - 2)!= "${") return cont(); Unexpected 'debugger' statement.
import { Anchor, Box, Image } from 'grommet'
return await Promise.all(compilation.graph.map(file => {       const path = file.path === '/'? '' : file.path; Unexpected console statement.
this.btnHowToPlay = game.add.button(game.world.centerX, game.world.centerY - (position - 2*range),'ssButtons',      function(){
async eventSocket (Socket, data) { Unused variable.
tag = [tag];   }   if (typeof data === 'function') {     callback = data; Invalid typeof comparison value.
const a = send(prop(), [0])       expect(a.debounce(100)).to.emitInTime([[0, {current: 0}], [160, 3], [360, 4], [710, 8], [710, '<end>']], tick => {         send(a, [1]) Undefined variable.
});        Deferred.all(allInfoDeferreds).then(done, done); Move function declaration to function body root.
return str;   } Unnecessary semicolon.
Blockly.Blocks['communicate_ow_read'] = {     init: function() {         this.appendValueInput('VAR') Undefined variable.
result = err;     } Unsafe usage of ReturnStatement.
decompileFromAst,   codeGenerator };
exports.post = function(req, res, next) {   var obj = this.new(req.body); Unused variable.
} else {                         this.send_message_and_exit('NOTFOUND', 68);                      } Don't use process.exit(); throw an error instead.
var res = {};             for (var memo_id in memos) {               res[memo_id] = JSON.parse(memos[memo_id]); Undefined variable.
} else {             resolved[id] = factory;         }
if (scope.timeout) {                     $timeout.cancel(scope.timeout); Redundant double negation.
}; } function afterEachAllRewrite() { Unnecessary semicolon.
for(index =0 ;index<hosts.length;index ++){    var hh = hosts[index];
const masterPlan = plan();     p1.test('should not run this test', (t) => {       t.fail(); This generator function does not have 'yield'.
return;             }             if (!goog.object.containsKey(pred, w)) {               forward_fringe.push(w); Undefined variable.
}).slice(0, -1).join('\n')   } Unreachable code.
continue;                                     break; Unreachable code.
exec(function() {         if (typeof callback === "function") { Undefined variable.
cwt.storage.itemLoader = function (itemKey, itemReceiver, errorReceiver) {   localforage.getItem(itemKey, function (err) {     if (err == null) {       errorReceiver(err); Undefined variable.
log.debug('Starting to install app', app)     const appRegex = new RegExp(`^${vendorPattern}\.${namePattern}@${wildVersionPattern}$`)     if (!appRegex.test(app)) { Unnecessary escape character.
} else {     fromdata = Object.keys(alasql.databases[databaseid].objects).map(       function(key) {return alasql.databases[databaseid].objects[key]}      );     this.selectors.unshift({srchid:'CHILD'}); Redeclaring variable.
({ str, tracers } = str(body));     return { body: str, tracers: tracers };   };'str' is constant.
, match = regex.exec(string)   else     seperator = seperator || '---'      , pattern = '^(' Redeclaring variable.
webWorker._init();    if ( Validator.isValid( this.crossOrigin ) ) webWorker.setCrossOrigin( this.crossOrigin ); Redundant Boolean call.
default:       }         this.$ele.find('[data-notify="' + cmd + '"]').html(commands[cmd]); Unnecessary semicolon.
import * as Animatable from'react-native-animatable'; import { WoWsLoading } from '../component'; Unused variable.
var getUserPrefFunction = function(prefKey){         if(window.localStorage){             return localStorage[prefKey] || defaultPrefs[prefKey]; Undefined variable.
case 'break': return this.parseBreakStatement();     case 'catch': this.notId ()  ;     case 'class': return this.parseClass(CONTEXT.NONE );     case 'const': Expected a 'break' statement before 'case'.
lightningHost: 'localhost:10009',   cert: `/Users/${userInfo().username}/Library/Application/ Support/Lnd/tls.cert` };
propagateArrayChange: function(mode, element, modifiers) {         var affectedMorphs = this.entangledMorphs.without(this.updatingMorph); Unexpected 'debugger' statement.
var i = 1;  files.forEach(function(name) { Redeclaring variable.
}     var len = message.data10.length;     for (var i = 10; i < 27; i++) {         var version = versions[i][ec_level]; Redeclaring variable.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2009-12\/1261531551-3616.swf",  admin_props : false, Unnecessary escape character.
if (newId!== data.$id) {
.on('callUpdate', (call) => {         if (call.state === 'done') { Unexpected 'debugger' statement.
if(!(this instanceof Touche)) return new Touche(nodes);      if (!nodes) { Unexpected negating the left operand of 'instanceof' operator.
data: {category: category,                criterion: criterion}, Duplicate key 'criterion'.
gateway.connect(function() { Unused variable.
const points = this.selected.geometry.parameters.points;                  app.editor.execute(new SetGeometryCommand(this.selected, new THREE.LatheBufferGeometry( Unexpected 'debugger' statement.
this._setGeneratedUser = function(properties) {       var generatedId = this.localStorage.getObject(this.generatedIdKey);       var user = { id: generatedId, properties: properties }; Undefined variable.
tChildren.forEach( function( iChild, iIndex) {               iChild.adjust( { left: kPadding, top: tCurrTop, left: (kCellHeight - iChild.iconExtent.width) / 2 });               iChild.set('isVisible', true); Duplicate key 'left'.
getOBJ : function(){ return bd.getobj(this.pos.bx, this.pos.by);},  setOBJ : function(obj){
}; export { EllipseCurve } Unnecessary semicolon.
class App extends Component {   constructor() {     super();     this.state = { Expected to call'super()'.
} var robohydra = new RoboHydra();
return persistence.getDataForServer(serverId).then(data => {       let settingsReturnBlob = {}; Unexpected 'debugger' statement.
finish(null); } Unnecessary semicolon.
for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {           sourceMaterial = materials[mi];           buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi); Redeclaring variable.
it('Should set path to http:     expect(url({ jackal: { baseUrl: "http:     }) Undefined variable.
},   get: function() {     var collection = this;
const { _ } = require('lib/locale.js'); const { sprintf } = require('sprintf-js'); Unused variable.
});         var map = $('#' + this.router.options.target).data('mapbenderMbMap').map.olMap;         this.set({ Undefined variable.
description: $('.content_for_perma', elem).textContent,     projectName: ($(".project"))? ($(".project > title") || $(".project > header > h1 > a")).innerHTML : ""   });
}; export default register;
import DynamicInput from './DynamicInput'; import t from '../Utility/i18n'; Unused variable.
var resolvedUrl = null;
jQuery.sap.clearDelayedCall(this.oLoadEvent);   }   if(this.oFailedEvent){    jQuery.sap.clearDelayedCall(this.oFailedEvent); Redundant double negation.
console.log('A personal access token is needed to use the GitLab API\n' + url.grey);     let question = 'Enter personal access token: '.yellow;     while (!options.token) { Redeclaring variable.
Light.prototype._updateScaledIrradiance = function () { Undefined variable.
playerSpy(amount);   } Unexpected 'debugger' statement.
week: 'ddd D/M'         },         eventClick: function (calEvent, jsEvent, view, $timeout) {           $scope.setTimeSlot(calEvent.start)         },         eventMouseover: function (event, jsEvent, view) { Unused variable.
if (!(validOutPort > 0 && validOutPort <= 65535)) {    console.log(portInvalidMsg[1]);
require('bootstrap-sass/assets/javascripts/bootstrap.js') Undefined variable.
});       for (i = 1; i <= groups.length; i++) {         newVal = newVal.replace('$' + i, groups[i]); Redeclaring variable.
this.inChunkSize = rtmpBody.readUInt32BE();         log.debug('[rtmp handleRtmpMessage] Set In chunkSize:' + this.inChunkSize);         break; Unexpected console statement.
PlaceholderComponent(quail, test, Case, options); }; module.exports = ObjectMustHaveValidTitle; Unnecessary semicolon.
offset += 2;         cookie.address = buf.unpackString(addressLen, offset); Unexpected console statement.
}                  else { Empty block statement.
return str.split(/[-\.\s]+/) }
notifyLayerVisibilityChanged : function(layer) {         var scaleOk = layer.isVisible(); Unexpected 'debugger' statement.
if (!item) return '';   if (item.encryption_applied) return '🔑'+ _('Encrypted');   return item.title? item.title : _('Untitled');  } Redundant double negation.
headers["cache-control"] = "max-age=" + self._cache;         for (var aH = 0; aH < additionalHeaders.length; aH++) {             headers[aH] = additionalHeaders[aH] || headers[aH]; Redeclaring variable.
else if (text == freelanceMenuOptions.editBio) {   html += freelanceMenuOptions.editCategories;  } else if (text == freelanceMenuOptions.editCategories) { Empty block statement.
typeahead.on("typeahead:initialized", function(event, prefetchedData) {       run(function () {         self.$('input').focus(); Undefined variable.
this._show(context, widget);             },             detach: function (context, widget) {                 this._detach(context, widget);             }, Unused variable.
var alasql = require('..');  }
onkeyup   : () => {},     onkeyupduplicate   : () => {}, Duplicate key 'onkeyup'.
event.waitUntil(self.clients.claim.bind(self.clients)); } Unnecessary semicolon.
data = undefined;         if (args.hasOwnProperty('data') && args.data!== undefined) {             data = args.data;         } 'data' is assigned to itself.
app.use(function() {   this.redirect('/graphql'); This generator function does not have 'yield'.
import {remote} from 'electron'; document.querySelector('#coinmarketcapli').addEventListener('on', (e) => { Unused variable.
camelize: function(str, upper){       if (upper) { return lib.upperCamelize(str); }       return str.replace(/[-_]+(.)?/g, function(match, chr) { Unnecessary semicolon.
"use strict"; var EventEmitter = require("lib/events"); Undefined variable.
var BAUDRATES = [115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 1200, 600, 300, 200, 150, 134, 110, 75, 50]; var DATABITS  = [8, 7, 6, 5]; Unexpected comma in middle of array.
if (typeof arguments[0] === 'object') {             var target = arguments[0]; Unexpected 'debugger' statement.
userAgent: window.navigator.userAgent,                     language: window.navigator.language                 }), Undefined variable.
var orientation_ = map_.getPositionOrientation(pos_);         var inertia_ = 0.8;
onChange(ev) {     } Unexpected 'debugger' statement.
console.log('done');   return html; };
const UNCHANGED_WAIT = 1000; const ID_ALIAS = 'nonoonoono';
var clashingName1 = 'test'; var clashingName2 = () => {}; export default clashingName2; Undefined variable.
static ["text"](node, key, vm) {    Register.registDomListener4Hubs("text", node, key, vm) Unexpected 'debugger' statement.
append("<a>").text("Full Color Wheel"));           }           $listContainer.append($tabContainer); Unnecessary semicolon.
let ret = true               for (let i = 0; i < this.validators.length; i++) {                 const { name } = this.validators[i] The update clause in this loop moves the variable in the wrong direction.
value: function enableScroll() {       document.body.style.removeProperty('overflow');     };
it('must be prototype', function () {     newObj = buildLogger(originalObj, 'name', 'id', function () {     }); Unused variable.
const max = this.input.max.eval();         const tmin = min.getTime(); Unexpected 'debugger' statement.
}   log('messenger:'+processID+'@inputs> zmq_pattern:'+ zmq_pattern );         mq_sockets[c]['socket'] = mq.socket(zmq_pattern); Unexpected console statement.
import React from'react'; import { Button, Image, Menu, MenuItem, MenuList, Panel, PanelGrid, Popover, Tile, Token } from '../'; import { DocsText, DocsTile, Header, Import, Properties, Separator } from '../_playground'; Unused variable.
}   var optionsWrapper = document.getElementById('options')   for (var key in options) { Undefined variable.
for (let i = 0, cur = outerType; i < len; ++i) {       let type = types[i]       if (cur == "L" && type == "1") types[i] = "L" Redeclaring variable.
mc.get([counterMcKey, registerMcKey], function (err, data) {
var $story = $('#article-wrapper p')  $story.layoutMode() Undefined variable.
Store.prototype.del = function(packet, cb) {   packet = this._inflights[packet.messageId];   if (packet) { Redeclaring variable.
throw new Error();         }) Unreachable code.
EntityViews = connect(mapStateToProps)(EntityViews); EntityViews = injectIntl(EntityViews); EntityViews = withRouter(EntityViews); export default EntityViews; 'EntityViews' is a class.
var SignInManager = Streamus.backgroundPage.SignInManager;     var Settings = Streamus.backgroundPage.Settings;     var LinkUserIdView = Backbone.Marionette.ItemView.extend({ Undefined variable.
SQR.Matrix44 = function() {     var Float32Array = Array;     this.data = new Float32Array(16); Read-only global 'Float32Array' should not be modified.
options:{                 nav : _modules['carousel']['nav-buttons']['enabled'],                 callbacks: true, Undefined variable.
{ "group__opts_group.html#gae68fb615835364c0809555e8dc93f57e":[2,2,3,16], "group__stan_conn_group.html":[2,2,11], "group__stan_conn_mgt_group.html":[2,2,11,0], Duplicate key 'group__opts_group.html#gae68fb615835364c0809555e8dc93f57e'.
module.exports = function() {  for(let x = 0; x <= 10; ++x) { Unused variable.
return cutStr;   } Unreachable code.
exports.preCheckTemplateSyntaxForVue = function(source, type, options) {   let {lang} = options; Unexpected 'debugger' statement.
setFormData: (state, items) => {         state.getFormData[items.ref] = items.value Unexpected 'debugger' statement.
a = b;                      _startShape.style.x = a; Unnecessary semicolon.
{   if (!(this instanceof Event)) return new Event ();   Base.apply(this); Unexpected negating the left operand of 'instanceof' operator.
var mapper = [] ;    var model = new orion.textview.TextModel(fileText, "\r\n");
const normalizeArrayIndices = (path) => {      return path.replace(/\.\d+\./g, "\\.*\\.") } Unnecessary escape character.
$rootScope.$on("importComplete", function() {          alertify.success("Import has completed"); Unused variable.
this.opt = assign({}, defaults, option);     this.scrollAmount = -this.opt.offsetTop;     this.scrollOld = 0; Unnecessary semicolon.
view.dimensionFilter = tdimension;      parts = cubesviewer.model.getDimensionParts(tdimension);      var params = { Undefined variable.
el.parent = root;    x += point.x;    y += point.y;   });
if (currentBranch.votePeriod === (currentPeriod - 1)) {         percentComplete = ((currentBranch.currentPeriod - currentPeriod) * 100).toFixed(3);       } else { Redeclaring variable.
add: function(other) {   var dx = pos.x - this.x;   var dy = pos.y - this.y;   return Math.abs(Math.sqrt((dx * dx) + (dy * dy)));
ownsDocument = function(userId, doc) {   return doc && doc.userId === userId || Roles.userHasRole(userId, "admin"); Undefined variable.
exports.getRules = function( url, cb ){   var defaultCb = function( err ){    if( err ){ Unused variable.
export default function () { Unused variable.
if (!qxloader) {         this.__fireReady(); Undefined variable.
a1.value = 5;     expect(a1.type).toEqual(Enums.ValueType.Number);     var b1 = row1.getCell(2); Undefined variable.
unitHeight = 30,             unitWidth = width / maxCt,             axisThickness = 2, Undefined variable.
o.redirectUrl = browser.runtime.getURL('images/1x1-black.gif');         } Unnecessary semicolon.
proto.setCoords = setCoords;          Marker.prototype = proto; Unnecessary semicolon.
}   for(let y = prevHeight; y < this.height; ++y) {     let row = [];     for(let x = 0; x < this.width; ++x) {       row[x] = null; Redeclaring variable.
customDebugDraw.drawAxes(context);                 var centerX = 300;                 var centerY = 300;
var transaction = transactionData.transaction;  transactionObj.operations = transaction.operations;  transactionObj.lengthDifference = transaction.lengthDifference;  this.dmSurface.change( transactionObj, new ve.Range( 1, 1 ) ); 'transaction.operations' is assigned to itself.
}); }); Router.onBeforeAction(AccountsTemplates.ensureSignedIn, {   only: ['profileEdit', 'profileNew', 'jobEdit', 'jobNew'] Undefined variable.
winston.error('Database Error:'+ err.message);             throw new Error('Database Error:'+ err.message);         } Don't use process.exit(); throw an error instead.
case'ms_sqlitefilename':                 configuration.data.filename = environment[key];                 break;             case 'website_auth_signing_key':                 configuration.auth.secret = environment[key]; Expected a 'break' statement before 'case'.
import { connect } from'react-redux'; import { ActionGroup, Alert, Button } from '@patternfly/react-core'; Unused variable.
case 'last':           while ( (node = node.nextSibling) )  {             if ( node.nodeType === 1 ) return false; Expected a conditional expression and instead saw an assignment.
}  return dojo.declare("dojox.charting.action2d.MouseZoomAndPan", dojox.charting.action2d.ChartAction, { Undefined variable.
mapAndSave(model, pollingLocation);   } Unnecessary semicolon.
return Class.verifyUserToken(user, session.password);       } else if (isAdminScope(session.scope)) { Unreachable code.
}         return (             <div>Enjoy this HTML placeholder.</div>         );     } Unreachable code.
if (isNumber(k)) {           if (!isInteger(k) || k < 0) {             break;           } Empty block statement.
EffectCompositor.prototype.getSSAOTexture = function (renderer, scene, camera, frame) {     return this._ssaoPass.getTargetTexture();
import { PLANE_GEOM, BOX_GEOM } from './utils/geometry-factory'; import checkProperty from './utils/property-check'; Unused variable.
if ('function'!== typeof stepRule) {             throw new TypeError('Game.shouldStep: stepRule is not a function.'); Unexpected 'debugger' statement.
return 'application/octet-binary';
firstItemOffset = $firstItem.offset().top;     for (i = numItems; i > 1; i--) { Unexpected constant condition.
this.getstate = function(select) {   var sel = this.files(select),    cnt = sel.length, Redeclaring variable.
for(let i = 0; i < args.length; i++){      var arg = args[i] Redeclaring variable.
if (config.packages) {             for (i = 0; i < config.packages.length; i++) {                 config.packages[i].location = baseUrl + config.packages[i].location; Redeclaring variable.
}); $('#text').val(text); CKEDITOR.instances['editor'].on('change', function() { Undefined variable.
buf = BN(this.stack.length).toScriptNumBuffer();           this.stack.push(buf); Redeclaring variable.
kafka.on('message', function(message, commit) {             _options.bus.callback(JSON.parse(message.value)); Unexpected 'debugger' statement.
context.beginPath();         for (let x = 0; x < width; x++) {           var time = x / width * duration; Redeclaring variable.
senchaRows = this.get("sencha");                     if (senchaRows) { Unexpected 'debugger' statement.
function failStatic (basename,...args) {   it(`should refuse to load '${basename}'`, function () {     let failed = false; Unreachable code.
.fail( function() {                 alert( JSON.stringify( WPAuth0EmailVerification.e_msg ) );             } ); Undefined variable.
if (this.origin_soldier) {                      return true Unexpected console statement.
}    else sails.on('hook:controllers:bound:actions', bindCRUDRoutes);
} else {    tmp = a.pipelineSource();    code += a.transformSource(); Redeclaring variable.
}     mount(parent, child, current); Unexpected console statement.
UserAgent.prototype._onAcceptSuccess = function _onAcceptSuccess(ist, dialog) {   this.inviteServerTransactions.delete(ist); Unused variable.
html = html.replace(/@CLASSNAME/g, '');       break;     default:       break;   } Expected a 'break' statement before 'default'.
ascii,         encryptPrivateKey, Duplicate key 'format'.
return str.split('').reverse().join('').replace(/^\,/, ''); } Unnecessary escape character.
result = true;         if (isSuperscriptAtom(stream)) {'mathML' is assigned to itself.
var SPAN_CLASS = 'number-display';     var _chart = baseMixin({});     var _html = {one: '', some: '', none: ''}; Undefined variable.
positionBelow: [left2, top2],         length, Unused variable.
let results = _.transform(settings, (result, setting) => {         let merged = v.merge(setting, routeTableSettingsDefaults, mergeCustomizer);         let errors = v.validate({ Unused variable.
try {                     this.writeToCache(descriptor, config, mark);                 } catch(e2) {
var OPCUABaseServer = require("./base_server").OPCUABaseServer; var OPCUAClientBase = require("node-opcua-client").OPCUAClientBase; Redeclaring variable.
var name = this.ds[i+1] || this.ds[i];      this.graphs[instance].updateDataset(       name, instance Unexpected console statement.
import React from'react'; import PropTypes from 'prop-types'; Unused variable.
} , _patch_detail: function _patch_detail( bundle ){ Unused variable.
const logger = winston.createLogger({     level: process.env.NODE_PRODUTION? 'info' : 'debug',     format: winston.format.combine( Redundant double negation.
s.delete(next);         next += 1;         deliver(msg);       } else { 'next' is constant.
match = buffer.toString().trim().match(/#!(.+)/i);     if (match) { Unnecessary escape character.
.update('shouldRefetchData', v =>!v);     case SUBMIT_TEMP_GROUP_SUCCEEDED: {       const newGroup = state        .get('newGroup') Unexpected lexical declaration in case block.
exports.removeEmpty(value)   for (let i = 0;i < list.length;i++) {     if (list[i][key] === keyValue) { 'i' is constant.
else if ( c === "total" ) {           a = 1         } else {           var a = 0 Redeclaring variable.
var ppu = 16.0; Cut(function(root, container) {   Cut.Mouse(root, container, true); Unused variable.
case 0x44:      msg = this.parseD(buffer, length);     break;   case 0x45: Undefined variable.
externalClasses: ['wux-class'],     data: mergeOptionsToData(defaults), Duplicate key 'externalClasses'.
if (err) return cb(err)         this._loadArchive(this.props.archiveId, context, (err, archive) => { Unexpected 'debugger' statement.
let rstOutput = '';     if (config.rst) {       rstOutput += `${rstTitle}\n`;       rstOutput += `${'='.repeat(rstTitle.length)}\n\n`;       rstOutput += `.. code-block:: shell\n\n`; Undefined variable.
return false   }   if (Memory.spawnqueue.index[this.name][name]) {     return true Redundant double negation.
return config; } Unnecessary semicolon.
var flows = this.get('elements.Flow').content;    toSend = toReceive = flows.length;    if (!toSend) { Undefined variable.
act.setAttributes(activity);             this.__analyzerDB.activities.addEntry(act); Unexpected console statement.
self.hoodie.emit('warn', err.message);                 return callback(err);               } Don't use process.exit(); throw an error instead.
}   } Don't use process.exit(); throw an error instead.
import SocialButton from '../components/SocialButton'; const {...meta } = Expo.Constants.manifest; import { getCurrentYear, socialLinks, manifest } from '../lib/constants'; Undefined variable.
actions: {     goBack() {},     completed(hostConfig) { Unexpected 'debugger' statement.
q[_this.get('queryKey')] = query;       const queryObj = jQuery.extend(true, {}, q, _this.get('params'));
name:'ngAnimate',                       files:['bower_components/angular-animate/angular-animate.js']                     }),                     $ocLazyLoad.load(                     { Unreachable code.
import { storiesOf } from '@storybook/react';  import { Unused variable.
ol_layer_Geoportail.getCapabilities = function(gppKey) {   var capabilities = {}; Undefined variable.
http:     ret.priority = (raw_packet[offset] & 0xE0) >> 5;
'markdown': staticPath('js/markdown.js'),         'navbar-control': staticPath('js/navbarControl.js')     };
} else {    taskList.removeTask(task); Unexpected console statement.
const StaticTeamDescription = ({description}) => (   description? <p className="description read-only">{description}</p> : null ); Redundant double negation.
import React from'react'; import { Unused variable.
return axios.get(this.baseUrl);   } Unnecessary semicolon.
past(years, refDate) {   let date = refDate? new Date(Date.parse(refDate)) : new Date(); Unexpected 'debugger' statement.
drawValues(scope.vs, canvas, scope.config, col);             } Unexpected console statement.
case REQUEST_ALL_KNOWTATIONS:       onSuccess = knowtations => {         dispatch(receiveAllKnowtations(knowtations)); Unexpected lexical declaration in case block.
return this.use(route, handler, method); Unreachable code.
return this;   } };
module.exports['internal/streams/pipeline.js'] = [     errorsTwoLevel Unexpected comma in middle of array.
for (let i = 1; i < args.length; ++i) {     if ((obj = args[i])) {       for (let key in obj) { Expected a conditional expression and instead saw an assignment.
scientific:'modules/scientific/0-0-1/js',   shakemap:'modules/shakemap/0-0-1/js',   impact:'modules/impact/0-0-1/js',   scientific:'modules/scientific/0-0-1/js'  }, Duplicate key 'impact'.
req.flash(config.constant.flash.error, '注册功能已被停用，请联系管理员: gefangshuai@outlook.com');     var user = req.body;     if (!user.username ||!user.password) { Unreachable code.
function testcase() {   if(Number.isNaN(Math.hypot(NaN, 3))) {    return true; Use the isNaN function to compare with NaN.
log.start('building static site')     const build = require('./build')     build(opts) Unexpected lexical declaration in case block.
case exports.UNZIP:       status  = zlib_inflate.inflateInit2(         this.strm, Redeclaring variable.
}     return s; Unexpected 'debugger' statement.
var firstDayOfWeek = scheduler.get(FIRST_DAY_OF_WEEK);     var monthStartDate = instance._findCurrentMonthStart(); Redeclaring variable.
"use strict"; function Launcher() {} Unnecessary semicolon.
return this; } Unnecessary semicolon.
let devDependencies = config.devDependencies;         for (let key in addonConfig) { Unused variable.
var orion = {}; orion.options = Options; Undefined variable.
} else if (isVPlaceholder(input)) {   hydrateVPlaceholder(input, dom);  } else { Unexpected 'debugger' statement.
var waitForLoad = function(callback, constructor) {   if ((document.readyState === 'interactive' || document.readyState === 'complete') && document.activeElement) {     return callback.call(constructor);
this.creator.classList.remove('is-hidden');     window.addEventListener('scroll', this.creatorCallback);   }
},           punctuation: [/[[\]().,:`]|\->/],           operator: [ Unnecessary escape character.
var rePostInline = /^[-\s`'")\]}>/:.,;!?\\_]/;     var reExamples = /^\s+(>>>|In \[\d+\]:)\s/; Unnecessary escape character.
});     case CHANGE_SIDEBAR_TAB: {       const isActive = action.activeTab === 'events';       if (isActive === state.active) return state; Unexpected lexical declaration in case block.
try {     const branch1 = master.get(['deep','real']).create();   } catch (error) { Unused variable.
await knex.raw(`drop database "${target}"`);     return endProgram(0);   } catch (err) { Don't use process.exit(); throw an error instead.
if ( data.activated &&!ops.noAck ) {      messages.addMessage( ops.message ); Unnecessary semicolon.
if (date) {                             self.val(formatters.date.dateString(date)); Unexpected 'debugger' statement.
Seadragon.Drawer = function Drawer(seadragon) {     this.ensureArguments(arguments, 'Drawer');
parseFloat(m[1]) > parseFloat(m[2]))    {     Y.error('Empty block statement.
nodeName = nodeExpression.getOperator();             if (isBinaryExpression(nodeExpression)) {                 paramExpressions.push(nodeExpression.getLeftExpression()); Undefined variable.
else{       final = mw.color.hexToRgb(CSScolor);       final.alpha = 1 Redeclaring variable.
var data = [];       options = {         delimiter: config.delimiter, Redeclaring variable.
return "八";             case 9:                 return "九"; Unreachable code.
this.data.children = {}     }     if (this.data.children[label]) {       return true Redundant double negation.
define(['jquery', 'oroui/js/mediator', 'underscore', 'jquery-ui'], function($, mediator, _) {     'use strict';
var box = new qx.ui.layout.HBox();       container = (new qx.ui.container.Composite(box)).set({decorator: "black", backgroundColor: "yellow"});       box.setSpacing(5); Redeclaring variable.
console.error("Got a non-GET request to the redirect destination URL");         resp.end();         return;
ngClick: "deleteGroup(group.group_id",'\{\{ group.name \}\}')",                 awToolTip: 'Delete group', Unnecessary escape character.
gl.blendFunc( gl.SRC_ALPHA, gl.ONE ); var scene = new Scene(); var camera = new Camera(   { Undefined variable.
return accumulator;   } Unnecessary semicolon.
const contact = this.currentContact()     return (contact && contact.messages().fetch().length === 0)? assignment.campaign().initialScriptText() : '' Unexpected console statement.
sequence: DS.attr('number'),     tab_text: DS.attr('string'), Duplicate key'style'.
if (angular.isDefined(previousRangeDataPoints) && previousRangeDataPoints.length > 0) {                     prevRangeLine = d3.svg.line() Unexpected console statement.
(function() {     M.DialogView = M.View.extend({ Unused variable.
}   }); Don't use process.exit(); throw an error instead.
this.addEventListener('mousemove', this.parent.move3d.bind(this.parent, this, controlAxis));       break;     case ROS3D.INTERACTIVE_MARKER_MOVE_AXIS:       this.addEventListener('mousemove', this.parent.moveAxis.bind(this.parent, this, controlAxis)); Expected a 'break' statement before 'case'.
var TextMode = require("./text").Mode; var FtlHighlightRules = require("./ftl_highlight_rules").FtlHighlightRules; Unused variable.
}); }; module.exports = ListNotUsedForFormatting; Unnecessary semicolon.
DataAccessObject.prototype[i] = dataSource.constructor.DataAccessObject.prototype[i];         }     } Unnecessary semicolon.
import PropTypes from 'prop-types'
}       } else if (list[item] instanceof Node) {         nodes.push(list[item]);       };
})(jQuery); Undefined variable.
this.monitor_element = monitor_element;   monitor_element.setAttribute('id','submon');'monitor_element' is constant.
it('should call onSubmitFailure function with asyncErrors when the invalid form is submitted', done => {     const spy = env.sandbox.spy(); Undefined variable.
if (mergePolys instanceof Error) {     done(err); Invalid typeof comparison value.
productionSourceMap: app.buildSourcemaps === true? true : false,     duplicateSourceMap: false, Duplicate key 'productionSourceMap'.
},         drop: {             onMouseOver: (commit) => { Duplicate key 'drop'.
});     $scope.delBookmark = function(bookmarkId) {         var params = {             id: bookmarkId Unreachable code.
if (unexpected) { Unexpected constant condition.
}));          beforeEach(inject(($q, $rootScope, $compile, StateService, FolderService) => { Undefined variable.
var inner = core( head ) ;     while ( true ) {      switch (this. lttype) { Unexpected constant condition.
let exists = []   if (thisid) tags = tags.filter(_ => thisGroupMap[_.id].data.includes(thisid)) Unexpected 'debugger' statement.
for (var i=0; i < offers.length; i++) {     var rows = orderBookScreen.makeRows(offers[i]);
this.a_nextPos = gl.getAttribLocation(program, 'f'); Undefined variable.
valid = state.validate(this, params, transition);       transition.resume(valid);     } else { Undefined variable.
_Format.prototype.date = function (date) {   var dates = new Date(date)   return dates.getDate() + '/' + (dates.getMonth() + 1) + '/' + dates.getFullYear()  } Redeclaring variable.
export const packageNameRegex = /^reptar-/; Unnecessary escape character.
export async function organization(parentValue, { name, description = '' }, { auth }) {   if(auth.user && auth.user.id) { Unexpected empty object pattern.
openInBrowser(schemesHtmlPath, function(err) {       if (err) {         logger.error('Failed to open scheme.');       } else { Empty block statement.
matcherRegex : (function() {   var emailRegex = /[-;:&=\+\$,\w\.]+@/,      domainNameRegex = Autolinker.matcher.domainNameRegex, Unnecessary escape character.
for(var i = 0; i < slides.length; i++) {     var oldPosition = parseInt(getTransformValue(slides[i].style.transform));     var newPosition = oldPosition - 100; Redeclaring variable.
}                     if (! old) old = new pc['Vec' + len];                     for (i = 0; i < len; i++) {                         old.data[i] = value[i]; Redeclaring variable.
borderBottomStartRadius: true,   borderRadius: true, Duplicate key 'borderBottomWidth'.
.attr('class','member-entity-name')                        .text(function(d) { return util.displayName(d.member); }); Undefined variable.
import NowViewingItem from './NowViewingItem.jsx'; import ObserveModelMixin from './../ObserveModelMixin'; Unused variable.
export default async function testHasOneHelpers(test, orm) { }
let pos = 0;         tup.for (const i of tup) {           if (i.name!= null) continue; 'tup:' is defined but never used.
var unassignObj = getTagsToAddRemove("unassign", tags, origTags);       var collection ='service_templates/' + id + '/tags';       if (assignObj.resources.length > 0) { Unnecessary escape character.
var matchCount = 0;           for (var param in targetParams) {             if (param!= 'q' && params[param] && params[param] == targetParams[param]) { Undefined variable.
undo: 'Son değişikliği geri al (Ctrl+Z)',     validationCannotMove: 'Alt alan olarak taşınamıyor',     autoType: 'Alan tipi "otomatik".'+ Duplicate key 'validationCannotMove'.
'line-height': this.getMjAttribute('line-height'),       'text-align': this.getMjAttribute('align'), Duplicate key 'line-height'.
export default createComponent([ExportModal, ModalComponent], {     modules: ["Modal", "Copy", "CodeHighlight", "Loader", "Button"] });
return value;    } Unreachable code.
if (body.error) {                         botkit.debug('API ERROR', body.error);                         return cb && cb(body.error.message);                     } Undefined variable.
if (_aLeftChannel[pos] < -SPIKE_THRESH) {                         startSpikePos = pos; Unexpected console statement.
case'sc':           token = getAccessToken();           return transferSc(token, from, to, amount, memo);       } Unreachable code.
function ExperimentsService($resource) {     var ExperimentsService = {};     var res = $resource('experiments', null, { 'ExperimentsService' is a function.
function buildTree() {   var material = new THREE.MeshFaceMaterial([ Undefined variable.
injectCSS('res/features/main.css'); ensureDefaultsAreSet().then(applySettingsToDom); Unexpected 'debugger' statement.
$(iframeElement).on('load', function () {             updateLoadStatus(1);             console.log("iframe loaded"); Undefined variable.
tricksByUser: function() {     var blockUserTrick = $('.block-tricks-user');
return self.tab.vm.maPager.load();
const params = this.getParams(),       scene = physics      ? new Physijs.Scene( Unexpected constant condition.
import React from "react"; import PropTypes from "prop-types"; Unused variable.
var spaceLeft = false,     vAlign = null;    if(this.parser.source.substr(this.parser.pos).search(/^\^([^\^]|\^\^)/) === 0) { Redeclaring variable.
o = $.extend(this.options, this.element.data('options')),    input = this.element; Unused variable.
}       case Actions.ADD_PRODUCT_TO_LIST: {         let idArray = [...state.items];         idArray.indexOf(action.id) === -1? idArray.push(action.id) : console.log("Item is already in list"); Unexpected lexical declaration in case block.
return link; }; Unreachable code.
var cacheKeyLocale= context.locale? context.locale + "_" : '';    paymentProductSpecificInputs = paymentProductSpecificInputs || {};    promise = new Promise() Redeclaring variable.
decimalsRounded: 2       })     }; Duplicate key 'valueChange'.
}, function(err, n) {           if (err) { Unexpected console statement.
case'mssql':       return `[${identifier.replace(/[[\]']+/g, '')}]`; Unnecessary escape character.
console.log(`not ok - error during cluster.collapse: ${err}`);             return callback(err);         }); Unreachable code.
}                     for (i = 0, len = value.length; i < len; i++) {                         light = value[i]; Redeclaring variable.
this.info("Time to load api indexfile from server: " + (loadEnd.getTime() - loadStart.getTime()) + "ms");       }, this);       req.addListener("failed", function() {         alert("Couldn't load file: " + url); Unreachable code.
import { defineMessages, injectIntl } from'react-intl'; import Waypoint from'react-waypoint'; Unused variable.
record = registeredUIPreviewerTarget.contentStore.getRecord(             itemId.replace(/\.[^.]+$/, "")         ); Unnecessary escape character.
var searchPaths = this.searchPaths.filter(function(p) { return existsSync(p); });             chokidar.watch(searchPaths);             var _this = this; Redeclaring variable.
getItem: function(hash) {       if ( (item = this.attachedItems[hash]) ) { Undefined variable.
var verticalHeights;   $('.horizontal-context').fadeOut(100);
'use strict';
}     _This.$GetEvent = GetEvent;     _This.$EventSrc = function (event) { 'GetEvent' is a function.
it('> 1 amino acid long sequence', function() {   aaData = getAminoAcidDataForEachBaseOfDna('atgtaat', true); Unexpected 'debugger' statement.
define(['imp/renderModule/nodeShapeRelative'], function(nodeShapeRelative){
intake.create = function(options){     options = options || {};     var context = require("zeromq"); Redeclaring variable.
: table[field].lt(context.request.urlTokenized[index - 1])           case "explicit": Unreachable code.
return false;   }  } Unnecessary semicolon.
describe('.reset()', function() {     var store = new JsonApiDataStore(),         payload = { Undefined variable.
if (typeof line ==='string') {       var data = /^([^\(<]+)\s*(<([^>]*)>)?\s*(\((https?:\/\/[^\)]+)\))?/.exec(line)       line = { Unnecessary escape character.
$("#"+sourceId).on("select2:open", function () {                 var predefinedStructs = self._package.getStructDefinitions(); Unused variable.
chrome.storage.local.get(message.data, function(response) {       sendResponse(response); Unexpected 'debugger' statement.
function(error) {       $scope.setAlert(new ErrorAlert("Error while clearing index cache", error));      };
r = BigInteger.small[diff];   if (this._s < 0) { Redeclaring variable.
var vm = require('vm'); var nunjucks = require('nunjucks'); Unused variable.
__inline('./scroll'); Undefined variable.
break;         case TypeKind.COMPOSITE:             if (visitor.onCompositeType) { Duplicate case label.
if (id!== data[pkName]) {     const err = new Error(g.f('{{id}} property (%s)'+             'cannot be updated from %s to %s', pkName, id, data[pkName])); Redeclaring variable.
$("#github").removeClass('hidden');     }else if (value == 'asn'){         $("#github").addClass('hidden'); Expected a conditional expression and instead saw an assignment.
while (parent === parent.parent) {           nestedIncludes = [_.extend({}, child, { include: nestedIncludes })]; Expected a conditional expression and instead saw an assignment.
(function(module) {  'use strict';
reporters: ['progress', 'coverage'], Unexpected comma in middle of array.
document.getElementById("id_snippet").cols=40;          $('#id_snippet').val("#To avoid indentation errors use tabs for indentation for Python questions");       });    $('#id_type').bind('change',function(event){ Undefined variable.
return timestamp; } Unnecessary semicolon.
});     return formatted_data; }; Unexpected console statement.
angular.module('copayApp.directives')  .directive('incomingDataMenu', function($timeout, $rootScope, bitcore, $q) {     return { Unused variable.
var chance = require('chance')(),   PouchDB = require('pouchdb'), Unused variable.
return this.i18n.Suspended;                 case 4: Unreachable code.
viz.ui.button = setup_buttons (viz, viz.ui) ;      var playerConfig = { Undefined variable.
this.init( );   }   Selectpicker.prototype = { Unnecessary semicolon.
return res.type('application/json').status(200).send('{"state": "' + state + '", "key": "' + req.params.name + '"}');       }); Unreachable code.
entryOrderLength = entryOrder.length;                 for (i = 0; i < entryOrderLength; i++) {                     o.push(entryGroups[entryOrder[i].format(dateCompareString)].join('') + this.groupEndTemplate.apply(this)); Redeclaring variable.
pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));       }else{ Unreachable code.
cwt.CoSheet = my.Class({
}   state = stringReduce(state.keypath, reducer, initialState)   state = reducer(state, 'END', state.keypath.length, initialState.keypath) Redeclaring variable.
function _clickItem(scrollWheel, event) {
it('returns root dir from config', () => {   const { rootDir } = createCosmosConfig({ rootDir: '..' });   expect(rootDir).toBe(getCwdPath('..')); Undefined variable.
var relation = new Relation(left.header, left.data);     for( i=0; i < right.data.length; i++ ) {       relation.push( right.data[i] );     } Redeclaring variable.
}   }   return false; Empty block statement.
return fr.readAsArrayBuffer(packet.data); } Unnecessary semicolon.
};     const resetCrop = function resetCrop() {       imageRepresentationProxy.getCropFilter().reset();       croppingWidget.resetWidgetState();       resetCropHandlers.forEach((handler) => { Move function declaration to function body root.
Object.defineProperty(exports, "__esModule", { value: true }); Unnecessary semicolon.
case fragmentValueTypes.COMPONENT:     break;   } Unexpected 'debugger' statement.
'/cgi-bin/lookup-tunnel-dns', '/cgi-bin/rootca', '/cgi-bin/log/set']; var PLUGIN_PATH_RE = /^\/(whistle|plugin)\.([a-z\d_\-]+)(\/)?/; var STATIC_SRC_RE = /\.(?:ico|js|css|png)$/i; Unnecessary escape character.
success(function(){                         $scope.motechAlert('security.delete.user.saved','security.deleted');                         $scope.showUsersView=!$scope.editUserView; Undefined variable.
import path from 'path' Unused variable.
}   grid.disconnect();  };
var lines = text.split(splitRegExp),         line, remainWidth, isLaseLine, newLineMode;     for (i = 0, linesLen = lines.length; i < linesLen; i++) {         line = lines[i]; Redeclaring variable.
var keymap = top, valmap       for( var i = 0; i < keys.length; i++ ) { Unused variable.
function _pluginSyntaxAsyncGenerators() {   var data = _interopRequireDefault(require("@babel/plugin-syntax-async-generators"));   _pluginSyntaxAsyncGenerators = function _pluginSyntaxAsyncGenerators() {     return data; '_pluginSyntaxAsyncGenerators' is a function.
mouseUpHandler() {     this.mouseDown = false; Unused variable.
this.object = object;  this.domElement = ( domElement!== undefined )? domElement : document;
submitComment: (parent, text, tags) => Promise.resolve({ ok: true }),
}   return obj; };
var v = req.param('v');   if(!v ||!v.match(/201[0-9]\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}/))     return res.send(400,"Invalid video id");      var thumbnail = '/'+THUMBNAILS_DIR + v + '.jpg'; Unnecessary escape character.
import React from'react'; import { Unused variable.
server.close();   } throw an error instead.
get events() {} } Expected to return a value in getter 'events'.
HEADER_FORMAT = '\n',  CONSTRUCTOR_REGEXP = /(?:function)\s+(?:[A-Z][\$\w]*)\s*\([\$\w\s,]+\)/g,  ARGUMENTS_REGEXP = /\(\s*[\$\w]+\s*(?:,\s*[\$\w]+\s*)*\)/,  PARENTHESES_REGEXP = /\(|\)/g,  BRACKETS_REGEXP = /(?:^\[)|(?:\]$)/g; Unnecessary escape character.
var field_array = [];     var obj = kbn.flatten_json(obj._source)     for (var field in obj) {       field_array.push(field); Undefined variable.
} else {       seekTime = this.hoverPosition * this.duration     } Redeclaring variable.
} else {       for (var keys = _.keys(data), i = 0, res = [], l = limiter || keys.length; i < l; i++)         if (predicate(data[keys[i]], keys[i], data)) res.push(data[keys[i]]); Redeclaring variable.
args.schema = path.join(process.cwd(), args.schema); const validSchema = validateSchema(args.schema); 'args.destination' is assigned to itself.
return edge[+(edge.left === cell.site)];   } Unnecessary semicolon.
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/lemene-1334267482.swf",  admin_props : false, Unnecessary escape character.
ok(_.isFunction(layout.setView), "Has the setView function");      ok(_.isFunction(layout.getAllOptions), "Has the getAllOptions function"); }; Undefined variable.
var deferred = new scout.DeferredGlassPaneTarget();   var renderedHandler = function() { Undefined variable.
}             case'vec2': Unreachable code.
function HudObject () {} HudObject.stdWidth  = 40; Unnecessary semicolon.
const swagger = require('swagger-parser'); const _ = require('lodash'); Unused variable.
import { Link } from 'gatsby'; import PropTypes from 'prop-types'; Unused variable.
return result;   }   var regjsparser = { Unnecessary semicolon.
var names = Object.keys(tree);   for (var i = 0, l = names.length; i < l; i++) {     var name = names[i]; Undefined variable.
media.playtime = time     media.custom.currentTime = time   }
if (xhr.readyState === 4) { Expected a conditional expression and instead saw an assignment.
x1 = y1 = 0.0;   x2 = 1.0;   y2 = this.canvas.width / this.canvas.height; Undefined variable.
function AgenciesController ($log, agencies) {} })();
var failure_T = 'Could not Triangulate'
res.end();   }  }); Unnecessary semicolon.
vdom.val = el.textContent;           for(var i = 0; i < vdom.children.length; i++) {             vdom.children[i].outerHTML = el.outerHTML || '';           } Empty block statement.
cbus.server.searchPodcasts = function(searchTerm, callback) {      request({        url: "https: Undefined variable.
if (params.viz.resize) {
set(value) {       if (!Array.isArray(value)) value = [String(value), {}]; Unexpected 'debugger' statement.
return 'pending';       case 1: Unreachable code.
switch (action.type) {     case types.ADD_FRIEND: {       const len = state.friends.length? state.friends.length : 1;       const newId = (state.friends[len - 1] + 1) || 0; Unexpected lexical declaration in case block.
render(pageBody, pageData) {     const layoutTemplate = this.layouts[pageData.layout]; Unused variable.
return 'application/json';         case Resource.XHR_RESPONSE_TYPE.DEFAULT: Unreachable code.
}, function () {         }); Unexpected 'debugger' statement.
ecma: 6,                         toplevel: true                     }, Duplicate key 'toplevel'.
function showCashBalance(augur, address, callback) {   augur.api.Cash.balanceOf({ _owner: address }, function (err, cashBalance) { Unexpected console statement.
try {                         return new Blob([str], {                             type: 'application/octet-stream' Undefined variable.
return conn.connect(config); } module.exports = createClient; Unnecessary semicolon.
case "amortization":                         calculation_method = calculateAmortization;                     break; Redeclaring variable.
}).catch(done); } Unnecessary semicolon.
}       } else { Unreachable code.
innerTableDate:function () {             let self = this; Unexpected 'debugger' statement.
return false;         }         if (enhancement.dataPath === ".repository" && repo.repository === null) {           return false; Unreachable code.
DataGrid.DataGridWidget = class extends VBox {
export function merge(oldCookieString, newCookieString) {   const oldCookieJar = oldCookieString? parse(oldCookieString) : [];   const newCookieJar = newCookieString? parse(newCookieString) : []; Redundant double negation.
var toc = document.querySelector(".github-toc");     if (toc) { Undefined variable.
getBrowserName : function() {    return BrowserDetect.browser;   },
write(ctx, ctx.currentIndent);                     writeSVGNode(ctx, i);                     write(ctx, ctx.terminator); Redeclaring variable.
const versionFile = path.join(__dirname, '../src/version.js'); const newContent = `export default '${newVersion}';\n`; fs.writeFileSync(versionFile, newContent); Unnecessary escape character.
firstStep = false;    }    for(i = 0; i < obj.length; i++){     if(typeof obj[i] == 'function'){ Undefined variable.
db.rpush("log-" + this.room, this.cmdstr, __bind(function() {               return _this.io.sockets.emit('broadcast', _this);             }, this)); Undefined variable.
