if(fs.existsSync(path)) {     throw 'The file "' + path + '" already exists!';   }
this.formTitle = '修改字典'         var detail = this.selRow.detail.split(',');         var details = new Array()         detail.forEach(function(val,index){           var arr = val.split(':')
var response = {      cookies: req.cookies     , host: req.headers.host     , cache: qs.parse(req.headers['cache-control']) || {}
var _super = this.$super,                     _self = this.$self,                     ret;
ret[inputtypes] = (function(props) {         for ( var i in props ) {             f.setAttribute('type', props[i]);
var that = this;         this.__proto__.constructor = arguments.callee;         this._properties = attrs || {};
}    var name = $(this).val(),      filter = controls.search.filter;
self = this,      start = function() {       var CodeMirror = this.CodeMirror,        ta   = $(textarea),
var ring_desc_start = ring_start + 4;         var flags = this.memory.read16(ring_start),
String.prototype.escape = function() {     return _.escape(this) }
}; }(this, this.document));
if (!gl) {         throw "WebGL: Failed to create a WebGL context!";     }
var concat = require('concat-stream')   , context = require('../context') module.exports = load
evt.preventDefault();                             self._trigger('selected', null, $(this).data('file'));                             modal.close();
var baseDir = config.assetsDir + 'img';     src = this.buildGulpSrc(src, baseDir, '**
{                     constructor: FindSearch                     , pageName: 'search'                 }
this._streamBindings = undefined;     this._super.apply(this, arguments);   },
for (var k in result.response.headers) {                                         result.response.headerArray.push({                                             name: k,
targetElement.setAttribute('id', container.getAttribute('id'));     }     for(var key in container.style) {       targetElement.style[key] = container.style[key];
}.call(this,window));
"Position cursor after last char and hit backspace", function() {         this.document.select({           start: [0, 4],
if (input.eventType != 1) {    throw "Parser must be on START_ELEMENT to read next text.";   }
var section = null;         var cursorPos = this.editor.cursorManager.getCursorPosition();
describe("create an h5 and group ", function*() {          let file;
var buffer = context.createBuffer(1, 44100, context.sampleRate)         , upsampled = utils.upsample(array, 44100)
}       }, _callee, this);     }));
}             handler.call(this, self.collectEventData(element, type, ev));         };
a = query.split(/\s+and\s+/);            for (k in a) {             s = a[k];
async function _setup (accounts){   const oThis = this;   mockToken = await MockToken.new();
var $export = require('./_export')   , $task   = require('./_task'); $export($export.G + $export.B, {
helpers.each(values,function(dataPoint,index){         var color = this.colorManager.getColor(dataPoint);         datasetObject.bars.push(new this.BoxClass({
method: 'POST'         }).done(_.bind(function (resp) {             this.set(resp);
if (source.warns)         warns.push.apply(warns, source.warns);
.reply(500);       this.customDomains.verify({ id: this.data.id }, this.data).catch(function(err) {         expect(err).to.exist;
Validator.prototype.validate=function(grp, args){     var isGroup = !(!grp || !grp.length)       , inputs  = isGroup ? this._inputsForGroups(grp) : Object.keys(this._inputs);
Array.prototype.compact = function() {     var results = [];
}(window || global || this));
$.when.apply($, promises).then(function () {                     var canvas = document.createElement("canvas");
return globalFunctionTrampoline[globalFunctionName].apply(this, arguments)       } else {
if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {    return this.each(function() {     var self = jQuery( this );     if ( isFunction ) {
return {       contentType : HoneyProxy.getContentTypeFromHeaders(arguments[0].response.headers)      }
spyOn(this.addon, 'getDOMImage').and.returnValue(stubbedImage);         this.$el.on('input', function () {             inputTriggerCount++;
var value;         return (function() {             var args = arguments;             if ((value === undefined))(value = f.apply(undefined, args));             return value;
if (sourceName) {         this.collection.add(val);         memo[this._sourceIdAttrName(name)] = val.id;       } else {
for (let p in polygons) {         let polygon = polygons[p][0];
values = this.uniqueValues;     }     this.uiFilteredValues = new Object();     for (var i = 0; i < values.length; i++) {
function PrivateKey(version, buf, compressed) {   PrivateKey.super(this, arguments);   if (compressed !== undefined)
var server = require('./server')   , request = require('../index')   , tape = require('tape') var s = server.createServer()
'upper',     function(s) {       return (new String(s)).toUpperCase();     }
function fill (a, b, c) {       Array.prototype.fill.call(this, a, b, c)       setter(this)     }
return function() {               err = arguments[0];               return __slot_1.self_sig = arguments[1];             };
var focused  = dates.eq(date,  this.state.focusedDate,  'year')           , selected = dates.eq(date, this.props.value,  'year')           , id = this.props.id && this.props.id + '_selected_item';
}     }, _callee6, this);   }));
exports.promptForPermission = function () {     console.warn('Depreated: Please use `notification.badge.registerPermission` instead.');     this.registerPermission.apply(this, arguments); };
, 'collection'     , 'connections/server'     , 'connections/repl_set_servers'     , 'connection'     , 'cursor'
exports.testCases = [       'specs/util-events/test.html'     , 'specs/util-path/test.html'
bespin.subscribe("file:saved", dojo.hitch(this, function(e) {             this.fetchFileUpdate(e.filename, this.tree);         }));
TNTools.register('fontChange', function() {   var font = $(this).val();   proof.empty();
}         return fn.apply(null, parameters);     }
cache: false,             data: $(this).serializeArray(),             type: 'PUT',
s += "var " + __rt + "=require('streamline/lib/callbacks/runtime').runtime(__filename)";   for (var key in rt) {    var k = _safeName(options.precious, key);
if (this.__isDrag) return;         if (!this.__scrollOntoEdge()) evt.preventDefault();         updateRecords(evt);
var request = require('request')   , qs = require('querystring')   , async = require('async'); module.exports = function routes(app){
function native_BoolImplementation_EQ(other) {   return typeof other == 'boolean' && this == other; }
case KEY_ENTER:             return onEnter.apply(null, args);         case KEY_TAB:
else {                 throw "melonJS: no level loader defined";             }             return true;
var advisor = function() {  this.pointcut = null;  this.advice = null;
, { from:"/edit
this.checkStates();     this.collection.reset(validSelectors);
var Atom = infestines.inherit(function () {     AbstractMutable.call(this);     if (arguments.length) this._emitValue(arguments[0]);
return _ret = (_temp = (_this = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_possibleConstructorReturn___default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {       disabled: false,
, join = require('./shieldbattery/join')   , shieldbatteryRoot = path.dirname(path.resolve(process.argv[0])) var socket = io.connect('https:
, componentDidUpdate: function (prevProps, prevState) {     if (this.state.editing && !prevState.editing) {
return cb(err);       console.log('' + this);       fs.write(info.fd, msg);
}       let args = [buf].concat(rest)       return this.fromBuffer.apply(this, args)     }
const argument = [...arguments];     this.imageURL = ``;     this.options = {};
} else {         throw typeof data;       }
storeErrors(filterDuplicates(idCounts), this);   this.complete = true;
if (Array.isArray(this._renderProperties)) {   for (var i in this._renderProperties) {    render(this._renderProperties[i], this._encodings, this._options);
, end = { p : verb.last( knots ), l : totalLen }   , mid = {}   , tol = totalLen / 200;
if (layers.hasOwnProperty(id)) {       throw 'invalid or duplicate layer id: ' + id;     }
render: (text, record) => (       <Button color="primary" size="sm" onClick={() => this.hendleDeleteCrud(record.id)}>         Delete
var map = self.get("map"); console.log(arguments);
"Integer": new Integer(),   "Boolean": new Boolean()  };
everyHour = 5 || minute * 60; function noop() {console.log(arguments);} function updateScript(script) {
Pipeline.prototype.index = function() {     this.gremlin.queryIndex.apply(this.gremlin, arguments);     return this;   };
(subAsParent, schemaFromAllOf) => {                      (this.collapseSchemas || module.exports.collapseSchemas)(             subAsParent,
var request = require('../index')   , http = require('http')   , tape = require('tape') var methodsSeen = {
for (var j in wires) {                         var node = flows.get(wires[j]);
function(language){  return this.toTypedExpression(language).s; } Number.prototype.toStrings=function(){  return this.toString().replace(/e([\+\-])([\d\.]+)/,"\\cdot 10^{$2}");
if (response) {           for (i in response.structure) {             nest.structure = i;             nest.presence  = response.structure[i].away === false ? 'on' : 'off';             break;
exchange () {     throw('Not Yet Implemented');   }
describe('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {
module.exports.log = function () {   console.log.apply(console, arguments); };
if (confProps.scales != null) {                 confProps.resolutions = new Array();                 for(var i = 0; i < confProps.scales.length; i++) {
, doc = xmlbuilder.create()         , child = doc.begin('plist', XMLHDR, XMLDTD).att('version', '1.0')         , next, tag_type, i, prop;
, inherits  = require('util').inherits   , xtend     = require('xtend')
} else {             if (arguments[0] !== 'newListener') {                 if (events[arguments[0]]) {
this.toggleBottomMenubar();             MultiSelectCompositeView.prototype.onRender.apply(this, arguments);         },
typeof getter == 'string' ? getter : getter && getter[name] || name,          arguments[0]);
}     this._items.sort(function (a, b) {return mcmp(key(a), key(b));}); }); list.PY$insert = Function(function(index, x) {
return {     type: this.UNLOCK_IN_PROGRESS,   }
this.fire( YS_COMPLETE );       }, this );
}     return this.resolve(result);   }).catch((error) => {
'use strict'; var deferred = require('../../lib/deferred')   , promise  = require('../../lib/promise'); module.exports = {
, accepts: ['js', 'css']
bus.emit('file-add', {         source: this.id,         name: file.name,
csv_row.push(friend.name);     for (i = 0; i < 3; i++){       $(this).addColumn_(csv_row, friend.email[i]);     }
if (!this.get('selectedRepo')) { return; }         this.set('category.customapprepo', this.get('selectedRepo'));          if (!this.get('category.customappname')) { return; }
}         this.set('memberCount', this.store.peekAll('member').length);         this._lastFetchDate = newFetchDate;
function log(...aArgs) {  utils.log.apply(utils, ['autoHide'].concat(aArgs)); }
constr = function () {                 var obj = this;
doneArgs = [ ...arguments ]       return
module.exports = function() {  return new Palette(arguments); }
done();       }.bind(this));     });
if(Array.isArray(encoded)){     for(var i in encoded){      nextLevel(encoded[i]);
if (finalConfiguration.zoomable) {                 this.zoom = zoom(d3.select(this), dimensions, scales, finalConfiguration, data, draw);             }
temp = replace     replace = new Array()     for (i = 0; i < search.length; i += 1) {
function hoverTruncate(grid) {     var $grid = $(grid || this);     if ($grid.hasClass('hovercard')) {
this.push(file);   cb();  }, function (cb) {
this.send(from, 'Hi ' + from + ', nice to meet you!');       });
var guid = $(this).attr('data-table-guid');     jQuery.support.cors = true;
favMapView.render();      this.$('.js-favMapTitle').removeClass('is-hidden');     }, this);
var RequestObject = Ember.Object.extend({     init: function init() {       this._super.apply(this, arguments);
try {         return expressionCompile(expression).apply(instance, slice.call(arguments, 2, arguments.length));       } catch (e) {
action = function(varName) {                 storedVars[varName] = accessor.call(this);             };
const arg = combinator.args[i]                     const argument = arg.optional ? arguments[i] || null : arguments[i]                     switch (arg.type) {
var i, len = this.masksProperties ? this.masksProperties.length : 0;     this.viewData = Array.apply(null,{length:len});     this.solidPath = '';
})(   this.Blotter, this._, this.THREE, this.Detector, this.requestAnimationFrame, this.EventEmitter, this.GrowingPacker, this.setImmediate );
}.bind(this));   this.ipcClient.on('error', function (error) {
return key_promise.then(function(key) {       config = this.getSignConfig(getJwaNameForSignKey(key));       return Jose.crypto.subtle.verify(config.id, key, signature, Utils.arrayFromString(aad + "." + payload)).then(function(res) {
type: Array,             default: () => new Array         },
const checksums = JSON.parse(new Buffer(process.env.ASSETS_CHECKSUMS, 'base64').toString('ascii'));     for (let srcPath in checksums.assets) {       const checksum = checksums.assets[srcPath];
function e(e) {             var i = t.call(this) || this;             return i._onMouseOver = function () {                 i._update(!0)             }, i._onMouseOut = function () {
default:         throw 'invalid matrix mode ' + mode;     }
promise = Q.resolve();             this._logger.warn('not-installed', name, {                 name: name
describe("copier", function() {   it("should send from Emitter to Collector via copier", function *() {     let result = [];
const results = []   content = new String(content).replace(/\/\*.+?\*\/|\/\/.*(?=[\n\r])/g, '')   while (match = exports.CSS_IMPORT_REG.exec(content)) {     results.push(match[2])
} else {       for (var key in styles.computed) {         computedStyles[key] = styles.computed[key](styles);
this.anim(                 this.last.elem,                 elem,
var any = new any_pb.Any()           , typeName = this._getTypeNameForMessage(payload)            , cacheItem = new CacheItem()
items = this.filteredItems.map((item) => {       return <option value={item.id} selected={item.id == this.curValue}>{item.text}</option>     })
it('add block', function() {     this.setContainer('<p>0123</p>');     let editor = new Editor(this.container);     editor.formatAt(4, 1, 'align', 'center');
}else{    for(var arg in this.options){     this.payload += '&' + arg + '=' + this.options[arg];    }
var touch = e.changedTouches[i]               , slot = slotted[touch.identifier]             if (slot === void 0) {
{  var a = typeof(arguments[i+1])=="string" ?  arguments[i+1].charCodeAt(0) : arguments[i+1];  if(a!=header[i]) return false;
var args = Array.prototype.slice.call(arguments, 0);                     this.trigger.apply(this, args);                 }
};     var self = this;     this.__doreq("DESTROY-EXISTS",getoptions,null,function(result) {       self.logger.debug("Returned rest api info: " + JSON.stringify(result.doc));
showPageLoadingMsg: function( theme, msgText, textonly ) {    this.loading.show.apply(this.loading, arguments);   },
var c = w({ first: f('value') });       var result = c.build(this.grammar, this.expression, this.op).fragment;       expect(result).to.eql('first = value');
var status = new app.Model.StatusUpdateModel();     status.set("attachmentIds", new Array());     _.each($(e.target).serializeArray(), function(data) {
cwd: './src/',                 files: [ 'core
, sourceExtract = require ('./sourceExtract')   , gruntUtil = require ('./gruntUtil')   , util = require ('./util');
var findIn = require('../examples/find-in'); describe.only('integration', function() {   this.timeout(20000);    var db, modules;
if (rc != 0) {         throw "can not call subscribe command";     }
});         this.hasUploaded = false;         this.$el.trigger('change');         this.render();
} else {         console.log(`Winner: ${this.filter('fastest').map('name')}`);       }
{             value = new Array();             for(var i=0; i<count;i+=2)
html += getFileHTML(path,val)             }.bind(this))             html += "</ul>"
}).catch(function(ex) {                 return this.alert(ex.toString(), 'danger');             });
return indent + "[object " + (obj.tagName || "Node") +"]";             var arr = [],type = $.type(obj),self = arguments.callee,next = indent +  "\t";             switch (type) {
return (dispatch) => {     dispatch(this.showLoadingIndication())     _accountManager.clearSeedWordCache((err, account) => {
, inherit: SVG.Element
this.isMounted = false     delete this.root._tag   }) }
, end = null                     , _this = e.currentTarget                     , $_cbs = $table.find('tbody td:first-child [type=checkbox]')                      , $checked;
function getBalances(request, response, next) {   var self = this;   var options = {
lang.mixin(this.config, this.commonConfig, this.orgConfig, this.appConfig, this.customUrlConfig, this.urlConfig);
return { vm: this, metaInfo, tags } }
provider: '',       traits: this.getSourceTraits(),    }),
if (!goog.array.remove(this.topComments_, comment)) {     throw 'Comment not present in workspace\'s list of top-most comments.';   }
Array.prototype.partitionBy = function(fn) {     var partitions = {};
function newFile(req, res, next) {     var that = this, params = req.params, DBActions = that.getDBActionsLib(),         dbAction = DBActions.getInstance(req, THEME_SCHEMA),         themeHome = getViewsHome(req.app), themeId = params.id,
}; const getSiteConfig = function*(source, destination) {     let siteConfig = {};
this.element = element;  this.store = new Array();  this.store[0] = new this.coords(-1,-1);
if( descriptor.resource.getRegistered(namespace) !== model ) {         throw 'namespace [' + namespace + '] has already been registered, autoRegister failed.';       }
function _merge (getKeys) {     return reduce(_argsTail.apply(null, arguments), function (result, source) {         forEach(getKeys(source), function (key) {
if (!extensions.instancedArrays) {         throw "WebGL: No instanced rendering support!";     }
const result = [];     for (var idx in listValues) {       result.push(this.valueType.getValue(listValues[idx]));     }     return result;
describe('#compile_solidity', function() {     this.timeout(15000);     var expectedObject = {};
const getCollectionLoader = function(collection) {         return function*(filePath) {             const extension = path.extname(filePath);
this.get('player').setVolume(this.get('volume'));   }),
{    throw "insufficient read permissions on path";   }
function checkToEnd() {       if (this.y <= this.maxScrollY + threshold) {         this.trigger('pullingUp');
, options: options
propCallback({             wavesurfer: wavesurfer,             originalArgs: [...arguments]           });
class UsersStore extends GetSetBaseStore {   constructor() {     super(...arguments);
const key = [name, pipeline_name || '', +remote].join(':')   if (!this.asset_cache.has(key)) this.asset_cache.set(key, this._findAsset(name, pipeline_name, remote))   return yield this.asset_cache.get(key) })
module.exports = () => {   return function*(next) {     try {
var parsed = {};         for (var key in includeObj) {             parsed[key] = this._parseIncludeArgs(includeObj[key]);         }         return parsed;
if (_.contains([ "istate", "ostate", "state", "meta", "model", "connection" ], what)) {             _apply_persist("on", arguments);         } else {
}             if (this.type.toLowerCase() == "checkbox") {
var ByteCode = new Array(); var ArrayType = new Object(); ByteCode.codes = {
if (proxyDetails.method && proxy[proxyDetails.method]) {             return proxy[proxyDetails.method].apply(proxy, proxyDetails.args);           } else {
return function (socket, nextstage) {     socket.emit.apply(socket, [event].concat([].slice.call(arguments)));   }
default:         throw 'illegal char: ' + c;     }
function getPersonalHolidays(data) {   var personalHolidays = new Array();   for(var i = 0; i < data.response.absences.length; i++) {
router.get('/connect', passport.authenticate('google', { scope:     [ 'https:     , 'https: router.get('/google/callback', passport.authenticate('google',
{          for(var key in modal_parameters.events){           $(this).on(modal_parameters.events[key], function(event){                     if(modal_parameters.on_event){
trackException(error, fatal = false) {     GoogleAnalyticsBridge.trackException(this.id, ...arguments);   }
var tmpl = $('#job-template').html()     , from = 0     , to = 15;
case 114:              for (var idx in content) {                 records.push(processResult(content[idx], results.subcontents));
json = _a.sent();                         return [2 , json ? utils_1.assetFromJSON(json, this.hostUrl) : null];                 }
HTMLMediaElement.prototype.play = function() {       let p = originalPlay.apply(this, arguments);       if (p) {
} else if ("0".split(void 0, 0).length) {     String.prototype.split = function split(separator, limit) {         if (separator === void 0 && limit === 0) { return []; }
const missedPrerequisites = this.checkPrerequisites(player);       util.log("EMITTING WIELD ON CUSTOM WEAPON SCRIPT");       util.log(this);       missedPrerequisites.forEach(prereq => {
if (!json.txs) {         throw 'Could not fetch transactions from API'       }
var icon_dis;     for (var j in res['RelatedTopics'][i]['Topics']){         if (j + i > 3)              break;
TW.TabManager.initTabs = function (tabs) {   for (i in tabs) {     TW.TabManager.addTab(tabs[i]);
const b = inst(this.body.infer())    const ps = new AST.TypeConstructor('Product', new Array())    for (const r of this.args) {
, fs = require("graceful-fs")   , exec = require("./utils/exec.js") rebuild.usage = "npm rebuild [<name>[@<version>] [name[@<version>] ...]]"
console.log("CHAN_GET: " + url + " " + res.statusCode);                         stream_cb(this);                 });
var repoName= url.substring(url.lastIndexOf("/")+1,url.lastIndexOf(".git"));               var input = $(this).text().replace(/\s\s+/g,' ');               $("#"+id+".response").append("Cloning into '"+repoName+"'... <br/>");
initElements(nodes);     return arguments[0];   };
, async = require('async')   , isMac = process.platform === 'darwin'   , isWindows = process.platform === 'win32';
) {                             this.markers[i].keep = true;                             doAdd = false;
this.blog.photo(this.options.blogName, postOptions, function(err, result) {   this._logResult(err, result, that.options.blogName);  });
} else {         throw 'illegal version: ' + version;       }
$.ElementList = function () {  function $ElementList() {   this.src = Array.apply(null, arguments);  }
]).forEach(function(event) {     session.on(event, function() {       Array.prototype.unshift.call(arguments, event);       router.send.apply(router, arguments);     });
var scale = this.container_div.width() / (this.view.high - this.view.low);                  if (include_labels) this.zi_slots = new Object();         var dummy_canvas = $("<canvas></canvas>").get(0).getContext("2d");
function execSync(command ) {   var opts = normalizeExecArgs.apply(null, arguments);   var inheritStderr = !opts.options.stdio;
if (!$(this).parent().hasClass('dragging')) {                 $(this).parent().css({ width: '' });             } else {
, Db       = require('../../')   , keys = Object.keys   , Base = Db.Base, StringType = Db.String; module.exports = function () {
if (requestModel.security) {       for (var securityOption in requestModel.security) {         var auth = AuthManager.getAuth(securityOption);
jQuery.sap.delayedCall(0, this, function () {      var oAppSettings = this._oCore.getConfiguration(),       oThemeSelect = this._oCore.byId("ThemeSelect"),
this.inherited("setAttribute", arguments);   if (key=="value"){    this._renderStars(this.value);
var fn = strings[this.fn];         return fn ? fn.apply(null, newArgs) : this.fn + '(' + this.args.join(', ') + ')';     }
var calendar = Array();             for (var i = 0; i < 6; i++) {
addon.port.on('socket-disconnected', function(response) {     this.disconnectingSockets[response.socketId].call();   });
if (duration < 100) {       throw 'Duration should be greater than 100 milliseconds or it won\'t really be noticeable';     }
for (const pluginType in this.core.plugins) {         const plugins = this.core.plugins[pluginType]
clear: function(property) {             return function() {                 return this.__clearPropertyValue.apply(this, [property].concat(_.toArray(arguments)));             };
_cmdFilter: function(){    return this._filter.apply(this, arguments[arguments.length - 1]);   },
var datas = new Object();     var test_names = new Array();
that.options.autoplay = true;             if (!_built) this.load();         }
const data = jsonfile.readFileSync(this.filepath);   return data;
var bigInsert = '';      for (var w in config.widgetSets) {          var file;
checkLogin: co.wrap(function *(id, skey) {         let param = { id, skey };
var cometURL = new String(document.location).replace(/\/jquery-examples\/.*$/, '') + '/cometd';       cometd.init({
}     , categorizr = {         is: is       , categorize: function () {           var args = [].slice.call(arguments, 0)
options.errorThrown = errorThrown;       if (error) error.apply(this, arguments);     };
, len = socks.length     , sock = socks[this.n++ % len]     , codec = this.codec;
function handleEnter(event){         if (!this._down || !this._move) return;         this._eventInput.off('mousemove', handleMove.bind(this));
, step: function(ignoreTime){
function _onEnd(){         this._dirtyLock--;         if (this._dirty && this._dirtyLock == 0) {
callback();       }.bind(this))       .catch(function (error) {
function moveNestedTags(child, i) {   for (var tagName in child.tags) {     var tag = child.tags[tagName]
module.exports = methods;   } else if (root) {     for (var key in methods) {       root[key] = methods[key];     }
get Model() {         throw "ModelHandler.Model must be overriden!";     },
this.toggleSelection = function (id, type, changeHead) {
var maxHeight = 0;  for(var i in encodings){    let options = merge(options, encodings[i].options);
return self._call(context, arguments);    }.bind(context);   },
return newModels;     }.bind(this), []));     this.$namespace.publish('_.reset', oldModels);
setTimeout(function() {       if (this.windowSession.currentRecordingTabId[testCaseId] === activeInfo.tabId && this.windowSession.currentRecordingWindowId[testCaseId] === activeInfo.windowId)         return;
var core = require('../../modules/_core')   , $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify }); module.exports = function stringify(it) {
} else {     throw new Error('no view found for arguments ' + arguments);   }
function getPlayerByName(name) {     for (var i in discovery.players) {         var player = discovery.players[i];
}             return arguments[index].apply(this, args);         };
var modul8  = require('../../')   , fs      = require('fs')   , dir     = __dirname; modul8('main.coffee')
this.onComplete(             function*() {                 if (mustCompile) {
pgEnumAdd: function(tableName, attr, value, options) {     var enumName = this.pgEnumName(tableName, attr)       , sql = 'ALTER TYPE ' + enumName + ' ADD VALUE ';
hook('onClick');    var url = (this.hasAttribute('url') ? this.getAttribute('url') : '');    var fullurl = 'u=' + encodeURIComponent(url);
var transform = function(chunk, enc, callback) {     this.push(template(chunk));     callback();   };
var simpleBrain = function(user){     Brain.call(this, user); };
}             throw "unknown JPEG marker " + fileMarker.toString(16);         }
, pt = '☭'       , ct = twoF.encrypt(key, pt)       , cpt = twoF.decrypt(key, ct)       , ok = utils.areEqual(pt, cpt);
.done(function() {    var data = $(this).find('form').serialize();
{     if (typeof(e) === 'undefined' && this.timeoutTimer === null)      return false;
TextLayout.prototype = new Object;  TextLayout.prototype.constructor = TextLayout;
$(AVG_REPLICATE_VALS_BOTTOM_MENU).click(() => {         grnState.nodeColoring.averageBottomDataset = !$(this).prop("checked");         updateApp(grnState);
that do not match any member of "cols".`,       code: function() {         const cols = this.getColIdxs_(Array.from(arguments));         return this.DOT(this.GridRow.DATA, this.ArrayExtract.create({
var self = this;   var args = _.toArray(arguments);   var callback = extractCallback(args);   args[0] = Mongo.Collection._rewriteSelector(args[0]);
if (typeof (key) === 'object') {                 for (var name in key) {                     this.setVisual(name, key[name]);                 }                 return;
function SaveCommand() {   SaveCommand.super.apply(this, arguments); }
it('edits textbox', function() {       cy.wrap(this.$textboxEl).within(() => {         cy.get('.widget-menu-regular').click({ force: true }).within(() => {
var Concur = require('Concur')   , object = require('isomorph/object')   , validators = require('validators')
constructor(){         super(...arguments);         super.addMixedIn('Heritable');
} else {     return context.fn(this);   }
case "domain":                  loadSiteNotes(true, this.value);         break;
init: function() {     this.A = new Array();     this.A[1] = +0.6399175073;     this.A[2] = -0.1358797613;
var generatorCoffee = path.join(self.generators, generator + '.coffee')             , generatorJs = path.join(self.generators, generator + '.js')             , generatorPath;
pauseRecording(self.valueWillMutate,self);           if(write && !self.write)throw "This observable can't be set.";           self.value = value;
}  deny() {   return this.model.deny.apply(this.model, arguments);  }
this.options = options; }, {
this.closing = false;   this.loaded = false;   yield this.fire('close'); });
this.append(ws`    ${this.declVars(`__WRAP_CACHE__ = __RESULT__, __WRAP_TMP__ = [], __WRAP_POS__ = 0`)}    __RESULT__ = ${this.getReturnDecl()};
var options = this.options ? this.options(defaults) : _.extend(defaults, this.data.options);
root["javel"] = factory(); })(typeof self !== 'undefined' ? self : this, function() { return  (function(modules) {
gutil.log(gutil.colors.red('Running gulp is', cliPackage.version));     gutil.log(gutil.colors.red('Local gulp (installed in gulpfile dir) is', this.modulePackage.version));   }
if (val === 'y' || val === 'yes') {       for (var i in newer.data) {         debug('pushing', newer.data[i])
expect(emailValueAfter).toEqual(null);       const passwordValueAfter = this.component.getControl('password', this.component.loginForm).value;       expect(passwordValueAfter).toEqual(null);
try {         this._stackdriver.report(...arguments);       } catch(err) {         console.error('Error while reporting error: ' + err);       }
inputSignal = true;     }).bind(this);
if (err) {       this.emit('error', err);       return;     }
this.columns.splice(this.columns.indexOf(cardDom.data('column')), 1);             Planner.mapDom.remove(cardDom);
send: function(connectionId, reportId, data, callback) {         console.log('>>> send called with', arguments);         if (connectionId === 'mockConnection') {
Renderer.prototype.render = function *(template, locals, options) {   var o = this.options;
if (!Array.prototype.map) {   Array.prototype.map = function(callback, thisArg) {     var mapped = [];
module.exports = function zipWith() {   var cb = arguments[0]   var args = argsToArray(arguments).slice(1)
, getPrototypeOf = Object.getPrototypeOf   , proto = Proto.prototype   , relation, isValidNsRef;
if (window.DEBUG) {    console.log.apply(console, [].splice.call(arguments, 0));   }
function L() { if (BarNote.DEBUG) Vex.L('Vex.Flow.BarNote', arguments); } export class BarNote extends Note {
for (var key in file[testType]) {             factory(file[testType][key].name, file[testType][key], file.scope);
if (testNull === null) {       throw 'No match in string'     }
catch (e) {     alert(arguments.callee.name + "-> Method callback exception: " + e);    }   }
};  for (var p in thisClass) {   Employee.prototype[p] = thisClass[p];  }
, Iterator   = require('./iterator')   , getMessage = require('../utils/get-sub-error-message')
user: require('lsk-user/uapp').default(...arguments),     offer: require('~/modules/offer/uapp').default(...arguments),     posts: require('~/modules/posts/uapp').default(...arguments)   };
var Cookie = tough.Cookie   , CookieJar = tough.CookieJar exports.parse = function(str) {
if (evt.authorized) {                                 status = '<a>' + this.config.i18n.general.switchAccount + '</a>';                                 this._twitterStatusNode.innerHTML = status;
if (this.key_ !== b.key_) {       throw 'Failed to sync VNode: keys does not match (old: ' + this.key_ + ', new: ' + b.key_ + ')';     }     if (this.type_ !== b.type_) {
, Packager = require('package-jsonld')   , previewTabularData = require('preview-tabular-data').preview   , os = require('os')   , jsonldContextInfer = require('jsonld-context-infer');
return [function split(separator, limit) {     var O = defined(this)       , fn = separator == undefined ? undefined : separator[SPLIT];     return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
gulp.task('compress', () => {   let { version } = require('../app/manifest.json')     , { name } = require('../package.json')      return gulp.src('dist*')
type = type || 'closest';   for (var idx1 in a){     var color1 = a[idx1];
, stream = fs.createReadStream(filename)  , xml = new XmlStream(stream)  , count = 0;
else       this.gotoFrame(frame);   }),   gotoAndStop: describeMethod(function (frame, scene) {     this.stop();
this.registerAppComponent = registerAppComponent;
enyo.forEach(this.enyoIndexer.getFunctionList(pattern), function(name) {     name = name.substr(len);     this.suggestionsOnyx.push(name);    }, this);
var researching;  var imagePathsArray = new Array(); var imagePositionInArray;
const orgError = console.error;   console.error = function() {     errors.push(arguments);     orgError.apply(console, arguments);   };
if (value) {       for (i in value) {         change    = 'neutral';         arrow     = 'arrows-h';         direction = translate('NEUTRAL');
return this.verify(function verified(err) {     if (err) return fn.call(this, err);     var current = this.pid;
var newRow = {}       for (var col in row) {         var datatype = this.props.queryResult.meta[col].datatype
var inherits = require('inherits') ,   Stream = require('stream').Stream ,   sax = require('sax') ,   ignored = require('./ignored.js')
if (old.length === neo.length) {                 if (old != neo && old.length > 0) {                     arguments.callee.call(this, 'clear', pos, el)                 }
this.Alert = function Alert(){      console.log( colors.green('[OKAY] '+ this.fmt.apply(null,arguments)) );  }
beforeEach(function () {         this.addMatchers(imagediff.jasmine);         this.addMatchers(diffHelper.matcher);         canvas = $('<canvas width="' + width + '" height="' + height + '"></canvas>');
} else if (options) {           for (var i in options) {             data.options[i] = options[i];           }         }
install: function () {         const injectJsFilesToIndex = function () {             this.log('\n' + chalk.bold.green('Running `gulp inject` to add JavaScript to index.html\n'));             this.spawnCommand('gulp', ['inject:app']);
if (!regl.hasExtension('ANGLE_instanced_arrays')) {       throw 'regl-error2d requires `ANGLE_instanced_arrays` extension enabled';     }
} else {     return eachObj(...arguments);   }
} export function *reset__rpc() {   log(`${logPrefix}|reset__rpc`)
var PROJECT_ID = Session.get('projectId');     var portarray = new Array();     var delarray = new Array();     var hostid = undefined;
this._parentPicker && this._parentPicker._updateColumnHeights();        return FontWidget.prototype._doLayout.apply(this,arguments);   },
thingsChanged: function() {     console.log(this.get('application.currentRouteName'),this.get('model.hosts.length'),this.get('model.services.length'));     if ( this.get('application.currentRouteName') === 'splash')
Target.prototype.yield = function yield$() {     const then = this.then()     return then.yield.apply(then, arguments)   }   Target.prototype.ensure = function ensure() {
;    for (key in this.tables) {   needs++;   if (key == tbl.name) this.tables[key].done = true;
_.each(this.getReverseRelations(), function(relation) {    relation.addRelated(this.instance, opts);   }, this);  },
this.on('end', function() {       this._removeFromPool();     });
function e() {             var e = null !== t && t.apply(this, arguments) || this;             return e._onMouseOver = function () {                 e._canvas.scale.set(1.05)             }, e._onMouseOut = function () {
if(err){                 throw 'Error sending Keen data: ' + err;             }
if (response.status !== 200) {                 throw { message: 'Query failed.' };               }
maskToken.matches = maskToken.matches.reverse();                 for (var match in maskToken.matches) {                     var intMatch = parseInt(match);
});      return this.on(name, once, context);     }),     writable: true,
}); NativeArray = NativeArray.without.apply(NativeArray, ignore);
export default class AuthenticatedUserAccountDropdown extends UserAccountDropdown {   constructor() {     super(...arguments);
var traits = this.traits();             for (i in traits) {                 traits[i].setFromArgs( obj, args, ignores );
catch(e) {         setTimeout(arguments.callee, 0);         return;
class TuyaCloudRequestError extends Error {   constructor(options) {     this.code = options.code;     this.message = options.message;   }
callMethod = function( methodName, args ) {                          console.log('calling ', methodName, this[ PHP.VM.Class.METHOD_PROTOTYPE + methodName ], args);
res = [];                  for (var b in obj) {                      res.push(copyCleanModel(obj[b]));                  }
throw 'Unrecognized initial character in unidiff line'           }
}).call(this);
async run() {     throw `Need to implement ${this.constructor.name} async run() function`;   }
this._commands = {};   this._lastCharCodeForEvent = {}; });
this.route('map', {   path: '/',
default:       throw 'Unsupported value';   }
hasPendingChanges: false         }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path)
if (!this._parentWindow) {       this.parentWindow = exports.windowAugmentation(dom, {document: this, url: this.URL});     }
var that = this;             _.each(this.parents, function(v, i) {                 result[that.fields[i]] = v.constant_value();             });
reflect(this).slotAt('_model').beCreator();     this.applyStyle(this.defaultStyle);
var slices = 24;   var wfs = new Array();   for (var i = 0; i < radii.length; i++) {
var should  = require('should')   , Roster  = require('../../index').Roster   , ltx     = require('ltx')   , helper  = require('../helper')
it('should handle wd errors asynchronously', function(done) {     driver.run(function*() {       try {
var s = _getActiveSelection();         console.log("hello");         $(this).addClass("couzteauSpellCheck");
$("#redeem").keypress(function(e) {     if((e.keyCode ? e.keyCode : e.which) !== 13 || !$(this).val()) return;     var data = {passcode: $(this).val()};
io.register_write(port, this, function(out_byte)     {         write_data.call(this, out_byte);     }, function(out_word)
return function () {              compound.apply(this, arguments);          };
anInstance(that, $ArrayBuffer, ARRAY_BUFFER);   var numberLength = +length     , byteLength = toLength(numberLength);   if (numberLength != byteLength) throw RangeError(WRONG_LENGTH);
_validateReset(keyPath, options) {     if (typeof keyPath === 'string' || typeof keyPath === 'object') {       options = typeof keyPath === 'object' ? arguments[0] : options;
} else if (this.readyState === 3) {                         self._getXHRSpan(this).imp().info('XMLHttpRequest loading (readyState=3)');                     } else if (this.readyState === 4) {
var key = '';         for (var name in defaultParams) {             var chunk = parameters[name].toString();
{    for(var i in object._missing_components)    {
}),       takeEvery(self.types.events[event].get.SUCCESS, function*({         meta,
if (!this.requireMinimumVersion(this.apiVersion, minimumVersion)) {       throw "this method requires at least @{minimumVersion)";     }
this.state.set(this.state.value().join(''));                  this.emit('complete', 'concat', 'concatenated ' + stateItemCount + ' item(s).');              }
return $.grep(this._pages, $.proxy(function(page, index) {    return current === this._core.maximum() && !this._core.settings.loop     ? index === this._pages.length - 1     : page.start <= current && page.end >= current;   }, this)).pop();
})(EndGate || (EndGate = {})); Number.prototype._type = "Number"; String.prototype._type = "String"; Boolean.prototype._type = "Boolean"; Array.prototype._type = "Array";
constructor: function GroupingModel() {             GroupingModel.__super__.constructor.apply(this, arguments);         }
var Backbone = require('backbone')  , _ = require('underscore');
function uiFactory() {   this._background = null;   this._foreground = null;
var res = [];     var thisp = arguments[1];     for (var i = 0; i < len; i++) {
var element = function(board, element, options) {    this.element = element;    this.options = options;
$(this).blur();
arguments[0].forEach(function(item, i) {    this[i] = item;   });   this.length = arguments[0].length;
t.ok(is.number(-Infinity), 'negative infinity is number');   t.ok(is.number(new Number(42)), 'object number is number');   t.notOk(is.number(), 'undefined is not number');
var utils = require('../utils')   , nodes = require('../nodes')   , fs = require('fs');
, cmdItems       , taskArr       , taskName       , taskArgs       , preempt;
for (i in this.regexpProps) {       property = this.regexpProps[i]
this.$().data('DateTimePicker').destroy();   }) });
this.assets = [];   this.error = '';   var addressToPath = {};
async function extractApkInfoWithApkanalyzer (localApk) {   const apkAnalyzer = await getApkanalyzerForOs(this);   const args = ['-h', 'manifest', 'print', localApk];
TileRequestHandler.prototype['GET'] = requestBatcher(function(server, req, callback) {  var self = this;  var done = _.once(callback);
var f = require('util').format   , Query = require('../connection/commands').Query   , MongoError = require('../error');
this.bind('change', function(e) {     var $selector = $(this);     this.find('option').each(function() {      var $form = $('#'+$(this).val());
port.send('deprecation:watch');     this._super.apply(this, arguments);   },
this.height = "";   this.androidWorkaroud = true;
});             for (var l in removedLinks) {                 RED.nodes.removeLink(removedLinks[l]);
return {       originalPosition: originalPosition      , sourcesByFile: sourcesByFile   };
if (this._input.value.length > 0) {             L.DomUtil.removeClass(this._close, 'leaflet-pelias-hidden');
this.clearArgs = function() {         self.argArray[_POST] = new Array();         self.argArray[_GET]  = new Array();     }
})(this);
gen.fs.write(gen.destinationPath('extension.js'), 'foo');      }.bind(this))      .on('end', done);
const asyncWrapper = function (f) {     return function () {       return f.apply(this, arguments).catch((e) => {         recorder.saveFirstAsyncError(e);
var self = this     , arg = arguments[0] || {}   Tensor.call(self, arg) }
, graveyard = []   , enemyCounter = 0
_.each(state, function(value, key) {                 this.key_value_lock = [key, value];                 try {
$(".admin section").click(function (event) {         var elementId = $(this).attr("id");         var sectionId = ExtractSectionId($(this));
var self = this;   function ondata (b) {
if ( !internals.diff.fullcolumns )             internals.diff.fullcolumns = Array();         var oKeys = Object.keys( db[ 0 ] );
{    throw "Error getVersionForNumber";   }
};      for(var i in tokens) {       yield parseToken(tokens[i]);
if ($(this).hasLabel()) {        $(this).children(".classlabelbadge").remove();       }
var toObject = require('./_to-object')   , $getPrototypeOf = require('./_object-gpo');
throw "invalid call: atomic expression";       },
this.startIoTjs = function(process) { global.process = process;
if (x instanceof Runtime.vec)         return internal._evalVec(x, arguments.callee);     return x / Math.PI * 180;
}, function (reason) {                             throw file + ': Error loading data from .stl file: ' + reason;                         }
this.target = attachToOpts.element || document.body;   this.target.classList.add('shepherd-enabled', 'shepherd-target');   this.el.classList.add('shepherd-element');
if (typeof val !== "number")                 throw "texture_table requires numeric values";             elements.push(val);
Object.prototype.values = function(skipFunction)  {
let names = className.split(/\s+/);       for (let i in names) {         let name = names[i].slice('ql-'.length);         if (icons[name] == null) return;
if (memoryRegion >= this.REGION_ROM0) {   throw "Bad access";  }
pzprv3.includeFile("tests/for_test.js");    setTimeout(arguments.callee,10);    return false;   }
if (input.length != this.size)         throw "INPUT size and LAYER size must be the same to activate!";
this.targetElement.keyDown(key);           this.targetElement.keyPress(key);           this.targetElement.keyUp(key);         });
initXhr: function(xhrobj) {             var self = this, factor = arguments.length > 1 ? 90 : 98,                 addfact = arguments.length > 1 ? (self.uploadCount + 1) * 10/arguments[1] : 0;             if (xhrobj.upload) {
default:         throw 'Unsupported data type.';     }
Canvace.MultiSet.prototype.fastAdd = function () {  for (var i in arguments) {   this.elements[this.nextId++] = arguments[i];  }  this.count += arguments.length;
var fs = require('fs')   , async = require('async')   , webshot = require('../lib/webshot');
return function() {     var style = window(this).getComputedStyle(this, null),         value0 = style.getPropertyValue(name),         value1 = value(this);
let clickedEl = event.target;             console.log(this);
}   }   var items = new Array();   items[0] = new Array();   items[0]['a'] = out;
return this._instantiateModel(dasherize(type), attrs);   };   this.create = function(type, attrs) {     var collection = this._collectionForType(type);
, rebuild: function(rebuild) {
this.aParams = [];    this.aParamsMap = {};    this.vids = [];
var modelsChange = false;   for (var modelId in modelsMap) {     modelsChange =
for ( var name in this.propertyBindings ) {
var node_static = require('node-static')   , express = require('express')   , everyauth = require('everyauth')
this.inline = new InlineCompiler(this.options);   this.inline.out = this.out; };
this.url = arguments[0] ? arguments[0] : window.location;
e.preventDefault();     if(!Meteor.user()) throw 'You must be logged in.';
else {                 throw('buildfunc: unsupported refarg type: ' + func.name);             }             out.push('}');
if (_.isUndefined(t2))             throw "t2 multiplication with undefined type?";         var type_list = [
} else {    this.keys = Array.prototype.slice.call(arguments);    this.defaultValues = {};
purge: function() {     var d = new Date()       , now = d.getTime() + (d.getTimezoneOffset() * 60 * 1000);
[    "device"    , "cloudHost"    , "streamHost"
}]);     this.tooltipView.enable();     this.layerView.trigger('mouseover', new $.Event('e'), [0, 0], [0, 0], {       test1: 'test1',
subnode.updateChildTransforms();   }      for(c in this.components) {    this.components[c].onUpdateTransform(absolute);
const mod = require(src);     if (args && args.constructor === Array) return mod.apply(null, args);     return mod();
getAllListenerInfo () {     return [].concat.apply([], this.getHandlers().map(handler => handler.__events__))   }
}             $.when.apply($, contentLoadedPromises).done(_.bind(function() {                 this._hideLoading();
}             this.modal.show(context.content, { attachment: context.attachmentToFocus });         }, this));     };
size: props.size,                   direction: dir,                   element: this                 });
script.onload = script.onreadystatechange = () => {       if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {         done = true
}                 ilios.pm.schoolDepartmentTreeModel = new Array();                 for (var key in parsedObject) {
var keys = [];     for (var key in obj) {       keys.push(key);     }
if (arguments.length==2) {              if (r) throw path+" is Read only.";              if (text==null) delete ls[path];
scene.args.unshift(playNextScene.bind(this))         sequence.push(scene)
co(function *() {  const res = yield fetch('http:
if (prev_output.is_stable === 0)            throw "prev is not stable";           if (prev_output.is_serial === 1 && prev_output.sequence !== 'good')
Array.prototype.flatten = function() {     return [].concat.apply([], this); };
var ll = par.getElementsByTagName('li'); if (!ll.length) return '';  for (var i in ll) {   var range = ll[i].getAttribute('data-range');
this.append($=> str);  }
var grafs = text.split(/\n{2,}/g);  var grafsOut = new Array();
if (!Pokedex._(self.species + "?")) {   throw "There exists no Pokémon in the Pokédex object with the species name \"" + self.species + "\".";  }
Object.keys( extenders ).forEach( function( i ) {     for( var key in extenders[ i ] ) {      result[ key ] = extenders[ i ][ key ];
var cs = this.current.fillColorSpace;       var color = Util.makeCssRgb.apply(null, cs.getRgb(arguments));       this.ctx.fillStyle = color;
if (options.fn) {         return hbs.handlebars.helpers.with.call(this, this.author, options);     }
if (qq.FileUploader.prototype._leaving_document_out(e)) {                         for (var elem in dropzones){ dropzones[elem].style.display = 'none'; }             }
var onMouseMove = run.bind(this, (event) => {         if (plotter) {
this.retCallback(data);       console.log('set data: ' + this.retCallback + ' = ' + JSON.stringify(flowData));       this.retCallback = null;
if (VIE.prototype.Attribute) {  throw "ERROR: VIE.Attribute is already defined. Please check your installation!"; }
NGN.BUS.emit.apply(NGN.BUS, args)       }     }
const model = modelParam;   const currentWSMathRecognizer = this;
var url = require('url')   , path = require('path'); module.exports = function(version) {
coUtils.Debug.reportWarning(       "%s sequence [%s] was ignored.",       arguments.callee.name, Array.slice(arguments));   },
__extends(StickRightLocationDirective, AbstractLocationDirective);         function StickRightLocationDirective() {             AbstractLocationDirective.apply(this, arguments);         }
Array.prototype.findAll = function (match) {     let result = [];     for (let index = 0; index < this.length; index++) {         const element = this[index];
for (var idattrs in dattrs) {    var cmd = dattrs[idattrs]
if (NoSqlProviderUtils.isCompoundKeyPath(index.keyPath)) {                                     throw 'Can\'t use multiEntry and compound keys';                                 }
node.set(request);      array.forEach(node.getChildren(), function (child) {        this._setTreeNodes(child, request);       }, this);
var samplers;   for (var i in batches) {    var batch = batches[i];
'use strict'; var http = require('http')   , parse = require('url').parse;
return config;     }.bind(this));   }.bind(this)); };
const keys = key.split(',');             _.each(keys, function(k) {                 this.keyListener.simple_combo(k, value.bind(this));             }, this);
this._fastBootCookiesCache = fastBootCookies;     return this._filterCachedFastBootCookies(fastBootCookies);   }).volatile(),   read(name, options = {}) {
while ( jsonml.length ) {     content.push( arguments.callee( jsonml.shift() ) );   }
var that = this;  $(this.oTextHandle)   .attr({ name: 'dummy_' + Math.floor(Math.random() * 1000000), autocomplete: 'off' })   .bind(is_opera || is_ie ? 'keypress keydown' : 'keydown', function (oEvent) { return that.handleKey(oEvent); })
if ( value === undefined ) {   throw 'Undefined attribute: ' + key;  }
}         callback.apply(undefined, arguments);     }
_setEditorSize: function( width, height ) {      console.log("_setEditorSize",arguments);
if (endContainer.nodeType !== Node.TEXT_NODE) {                 throw 'Could not found endContainer, highlighting would be unstable';             }
return (cache[markup] = fn);     };     S = this.Simplate = function(markup, o) {         this.fn = make(markup, o);
, SessionStateStore = require('./state/session')   , setup = require('./setup')   , InternalOAuthError = require('./errors/internaloautherror');
TextInputUnit.prototype.__proto__ = new Object();
}     return func.apply(undefined, arguments);   };
var Intercom = function() {   console.log('instanciate', arguments);   var a,b, toto;
function jsDAV_iQuota() {     this.REGBASE = this.REGBASE | jsDAV.__IQUOTA__;
}         }         var result = cp.TransitManager.prototype.transit.apply(this, arguments);         if(result) {
var prefixes = OpenLayers.Style.SYMBOLIZER_PREFIXES;         for (var i in rules) {             for (var s=0; s<prefixes.length; s++) {
for (attribute in tests) {             phonetics = doubleMetaphone(attribute);                          assert(phonetics[0] === tests[attribute][0]);
req.user = user;       passport.authenticate(strategyName, _onPassportAuth.bind(this, req, res))(req, res);     })(req, res);
this.total  += t.total;       t.parent     = this.id;       t.parent_uid = this.uid;
var storage = localStorage, i, key, new_value, func, all = bgSettings.defaults     , strArr = bgSettings.NonJSON;   func = function(val) {
minValue(query=null) {         if (!this.__backend.connected) throw 'JungleDB is not connected';         return this._currentState.minValue(query);
}   }   $.Widget.prototype._setOption.apply( this, arguments );  },
function _computeUvs() {         var tiles = this._tiles;
module.controller('DatePickerCtrl', ['$scope', '$mdDialog', 'currentDate', '$mdMedia', function($scope, $mdDialog, currentDate, $mdMedia) {     var self = this;
var s = require('../index')     , assert = require('chai').assert; describe('request descriptor', function () {
if (!base) {         throw "Please provide a base namespace!";     }
, sql = ''       , tableName = this._tableizeModelName(query.model.modelName)       , includes = this._getIncludes(query)       , selects = this._getSelectCols(query, tableName, includes);
var frequencies = new Array();         var context = new window.OfflineAudioContext(1, buffer.length, buffer.sampleRate);
expandIsoform(selectedIsoform);                 sortDots(this.parentNode);               }             }
var mockContext = {   report: function() {    collectedReport.push(arguments);   }
var tableClass = function() {          this.cols_ = that.columns_.getKeys().map(function(colName) {       this[colName] = new lf.schema.BaseColumn(
{     throw "unkown Message Type: '" + message.type + "'";   }
this.source_ = source;
this.get = function (concept) {             return $http.get('/openmrs/ws/rest/v1/concept/' + concept, {
var tar = require('tar')               , zlib = require('zlib')               , request = require('request');
value = arguments[0]         notifySubscribers.apply(undefined, args)       }
_hideCriteria: function () {             DateFilter.__super__._hideCriteria.apply(this, arguments);         },
value: function(callback) {           return Collection.clone.apply(this, arguments);         },         writable: true,         enumerable: false
var express = require('express')   , routes = require('./routes')   , user = require('./routes/user')   , http = require('http')
if ( xhr === self.xhr ) {       response.apply( this, arguments );      }
console.log("\nBot Express\n");     this.options = options;
const root = (function(){ return this || (0,eval)('this'); }()); export const config = {     formComponent: 'vueForm',
return (this.patternFocused[patternId])   }   this.setPatternFocused = function (patternId, focused) {     this.patternFocused[patternId] = focused
var print = this["print"] ? this["print"] : ((console && console.log) ? console.log : alert);
$('#help-summary h3').each(function(){    if ($(this).prevAll('h2').first()[0]!==h2) {     $(this).slideUp();    } else {
if (result0 !== null) {           result0 = (function(offset, plist) { return node("node_directive", "DAT", node.apply(this, ["node_value", "val_paramlist"].concat(plist))); })(pos0, result0[3]);         }         if (result0 === null) {
each(['delete', 'has', 'get', 'set'], function (key) {     var proto = $WeakMap.prototype       , method = proto[key];     redefine(proto, key, function (a, b) {
constructor(args) {         this._totalHeightGap = 50;         this._parent = _.get(args, "parent");
for (var key in attrValueHash) {         var value  = attrValueHash[key]           , _value = this.escape(value)
});             this.mockResponse = new MockResponse();             mockModel = MockModel.get('items', {                 fetch: function() {
, binomial = require('binomial')   , labor = require('labor')   , _ = require('underscore'); }
data.oldParams = item.Params;      var func = arguments.callee;      var params = handleParamsInCommand(func, data, start? messages["startApplication"] : messages["stopApplication"]);
for (var index in array[i]) {           var value = array[i][index] + "";
sheet = sheet || NOVAE.CurrentSheet;     var letter = arguments[0].match(NOVAE.REGEX.numbers).join("");     var number = arguments[0].match(NOVAE.REGEX.letters).join("");     NOVAE.Cells.Used.registerCell(letter + number, sheet);
let bar = [];  bar.push.apply(bar, [].concat(foo, 99)); }
if (missingOptions.length) {     throw 'The following options are required: ' + missingOptions.join(', ');   }
this.shapes = {};
'use strict'; var $export = require('./_export')   , $at     = require('./_string-at')(false); $export($export.P, 'String', {
event.preventDefault();       this.moveFocusDown();       break;
obj.getCenterPt= () => {         var {pt1,pt2}= this;         var x= (pt1.x + pt2.x)/2;
if (edit_mode){         autofit($(this).get(0),MIN_HEIGHT);         return;
each(data.handlers, function(handlerSpec, eventName) {       this._bindHandler($el[0], data._owner, eventName, handlerSpec);     }, this);     return $el;
if(name in this._widgets){    return this._formWidgetValue.apply(this, arguments);    }
} catch( error ) {       setTimeout( arguments.callee, 0 );       return;
if ( typeof textureDimensions[ file ] == "undefined" ) {    throw "No dimensions set for texture \"" + file + "\"";   }
if (!converted) {     throw "Unsupported language code '" + langCode + "'.";   }
this.get.apply(this, [wsRoute].concat(wrappedMiddlewares));
.replace(/<OTHER_SELECTIONS>/g, otherConstraints.join(' '))                 .replace(/<SELECTIONS>/g, this.buildSelections(otherConstraints))                 .replace(/<PREF_LANG>/g, this.getPreferredLang());
this.stopTrackingProgress();       this.trigger('progress');      }
if (!subDef.inactive && _postal.configuration.resolver.compare(subDef.topic, envelope.topic)) {             subDef.callback.call(subDef.context || this, envelope.data, envelope);         }
var lines = o.value.split("\n");    var indices = new Array();    var sl = 0;
if (!options) {             throw 'A date or time stamp must be provided.';         }
{          throw "Long_Task no longer runnable";      }
Array.prototype.list = function () {         var l = Nil
if (!this.file) {         file = yield r.table(fileTable).get(fileId)
this.sandbox.emit('husky.select.terms-of-payment.revert');                         }.bind(this)                     }.bind(this));                 });             }
var dwords = new Array();        var len = message.length;
if (this.validURL()) {     return (!~this.indexOf(':   }
return logDb(new settingDb());         else throw "db nams is not valid";     },
if (typeof ctx[key] === 'function') {       Vue.prototype[`$${key}`] = (...args) => ctx[key].apply(ctx, args);       Vue.directive(key, historyRedirect(ctx, key));
if (!fileStats.isFile()) {   throw "Not a file: '"+inFile+"': ";  }
function promiseify(fn) {   return function () {     const args = [].slice.call(arguments, 0);     return new Promise((resolve, reject) => {
var editor = npm.config.get("editor")     , cwd = path.resolve(npm.dir, p)   fs.stat(cwd, function (er, s) {
labelNodesDidChange: function() {           this.notifyPropertyChange('labelNodes', this.get('labelNodes'));         }.observes('*model.labels'),
requires: {         topology: 'single'       , mongodb: ">=2.6.0"     }
if (format === undefined) {     throw 'idate() expects at least 1 parameter, 0 given'   }
const   gulp = require('gulp')   , cache = require('gulp-cache')   , del = require('del')
return Q.all([     exec.apply(null, args.sharepath),          exec.apply(null, args.root),   ]);
for (var i in defaultAspectRatios) {             $aspectRatioToolbar.find('.btn-group').append(render(defaultAspectRatios[i]));         }     };
, hotplate = require('hotplate')   , passport = require('passport')
var feedback = Jasper(function() {       throw 'up';     });
var adUnit, error, createAd;         if (!this._frame.contentWindow) {             error = 'the iframe is not anymore in the DOM tree';
if ('string' === typeof view) {                 return this.renderFromFile.apply(this, arguments);             }
function PublicKeyInput() {   Input.apply(this, arguments); }
if(fontSize.search('em') > 0) {       fontSize = $(this).toPx({scope : quail.html});     }
function batchImages(descriptor) {    for (var i in descriptor.frames) {     (function (id, progress) {      if (id in imageset) {       progress();
return "mat";             throw "internal error: not pod, vec or mat";         }
this.isTopPage = (this.pageName === 'endpoints');
export function * _exploreCave (action) {   const {caveId} = action.payload
if (fragment.match(pathRegexp)) {           throw "Recursive fragment usage detected on " + path + "."         }
this.emit('event', packet.items);       this.emit.apply(this, packet.items);       break;
}     var include = app.getAsyncHelper('include');     include.apply(this, arguments);   });
enyo.forEach(this.enyoIndexer.getFunctionList(pattern), function(name) {     name = name.substr(len);     this.suggestionsEnyo.push(name);    }, this);
, pt = '☢€  ☂ ڴ!'       , ct = twoF.encrypt(key, pt)       , cpt = twoF.decrypt(key, ct)       , ok = utils.areEqual(pt, cpt);
, '/login' : controllers.auth.reverse   , '/logout' : controllers.auth.basic  }
throw 'Rev A boards are not yet supported.';         case 'B1':
var __call__ = function() { args = Array.prototype.splice.apply(arguments, [0, 0, klass]); return create_object.apply(undefined, args);
var MAX_ATTEMPTS = 10               , toBeCached = {}               , serialized;
var i, len = value1.length;         var arr = Array.apply( null, { length: len } );         for(i=0;i<len;i+=1){
this.createVideoNode = function (url) {
pinpointApp.factory('ServerMapFilterVo', [  function () {     return function () {         var self = this;
if ($(this).hasClass('dwwb')) {                     if (testTouch(e)) {
if (!$(this).hasClass('isPrime')) {                     $(this).popover('hide');                     $(this).css({textDecoration: 'none'});                 }
var ctx = this;   if (typeof gen === 'function') gen = gen.call(this);
if (g === null) {             throw 'Error creating WebGL context.';         }
function askForAdminPassword() {     if (this.regenerate || this.composeApplicationType === 'monolith' || this.serviceDiscoveryType !== 'eureka') return;     var done = this.async();
const dynamic = {};         for (const field in renders) {             const target = `children.${code}.${field}`;             dynamic[target] = renders[field];         }
constructor(target, prop, value, meta) {     this.target = target;     this.prop = prop;
function update(dev,par) {         var base = this;
.attr('type', 'radio')                             .addClass(this.model)                             .val(item)
const   gulp = require('gulp')   , shell = require('gulp-shell') ;
default:             throw 'Expected string, function, or undefined.';     }
coUtils.Debug.reportWarning(       "%s sequence [%s] was ignored.",       arguments.callee.name, Array.slice(arguments));   },
expect(this.player1.amber).toBe(3);                 this.player1.clickCard(this.punch);                 expect(this.player1).toHavePrompt('Choose a card to play, discard or use');             });
unsubscribe() {     return this.nc.unsubscribe.apply(this.nc, arguments)   }
var statuses   = require("statuses"); var buffer     = (function () { return this }()).Buffer || respond; module.exports = respond;
_.each(this.views, function(v) {              this.listenTo(v, 'viewportHeightChanged', this.__handleViewportHeightChanged);              this.listenTo(v, 'positionChanged', this.__handlePositionChanged);
constructor(image) {     this.message = `Not found '${image}' docker image`;   }
var i = 0;       for (var key in data) {         var item = data[key];         textToInsert[i++] = "<tr>";
extensibles.xcode = new function xcode() {  this.type = "xcode";  this.name = "code";
else {     throw('[sprintf] huh?');    }    _fmt = _fmt.substring(match[0].length);
if (this._transformContent || arguments[1])    this.applyMatrix(true);
const GlobalObject = (this || 0).self || (typeof self !== "undefined") ? self : global;
default:       throw `Only support reference child(), parent(), val() \ and exists() now, ${obj.property.name} found`;   }
this.currentAuth = currentAuth;    this.charPlayer = null;
if (typeof func === 'function') {                 return func.apply(null, evalList(flags, scope, locator, this.args, part));             }
val = "",     arr = new Array();    if (sel.eq(0).val() == "id") { val = "id_"; }
var driverBlock = require("../../helpers/driverblock.js")   , Q =  driverBlock.Q   , path = require('path')
, Db      = require('../../')   , Proto   = require('../../lib/_proto')   , BooleanType = Db.Boolean, StringType = Db.String
this.tagSelectView = new App.TagSelectView({             tagSets: this.tagSets             , allTags: this.allTags         })         this.tagListView = new App.TagListView({
if (!m_width || !m_height) {       throw 'Map layer has size 0';     }
console.trace ? console.trace()           : console.error.apply(console, arguments);     })
constructor(tag, url, path, xhrSettings, context) {         this.context = audioContext;         var assetConfig = {             tag: tag,
let o = chalk.yellow('[out]')   console.log = function() {     let args = [].slice.call(arguments, 0)     out.push(args)
this.updateLinkArray = function (essenceId, entityId, attArr) {         return co(function* () {
},   initRoles: function () {     this.set('roleArray', (this.get('primaryResource.projectRoleTemplateIds') || []).map(r => {       return {
var spriteY = this.y;                     if (this.sprite) {                         this.sprite.setPosition(spriteX, spriteY);                     }                     if (this.spriteNombre) {
if (event.keyCode === 13) {                 var val = Util.escapeHtml(this.value);                 window.location.pathname = "/" + val;             }
, nameRe = /^[a-zA-Z][0-9a-zA-Z]*$/   , rel, setReverse, validate; setReverse = function (rel, index) {
return;   }.bind(this)); };
}; function printError() {   console.error('INVALID COMMIT MSG: ' + util.format.apply(null, arguments)); }
'Complex': function (s) {       throw 'Cannot convert Complex number to Node'     }
function replace (word, rule) {     return word.replace(rule[0], function (match, index) {       var result = interpolate(rule[1], arguments);
else                 throw "i > 0 in pod element";         }
var parse = function(dimension, elementType) {         var array = new Array();         if (dimension.length > 1) {
},   _resizeMap: debounce(function _resizeMap() {     var map = this._getMap();     map.resize();
retNode = node.left;     } else if (this.comparator_(node.value, value) < 0) {       retNode = node.right;
, _operationTypes = {         'and': true
});         instance.$service.apply(instance, concat([Class, instance], arguments, 1));
lrSnippet             , mountFolder(connect, '.tmp')             , mountFolder(connect, 'app')             ]
this.parseResults = function(dataobj, facetMap) {       var resultobj = new Object();       resultobj["records"] = new Array();       resultobj["start"] = "";
if (!that.isDisabled() && !$(this).parent().hasClass('disabled')) {           var $options = that.$element.find('option'),
if(typeof arguments[0] === "object") {   var obj = arguments[0];      for(key in obj) {    that[key] = obj[key];
test.equal(reason, undefined, 'Neither USB device was found');       }.bind(this));
it("should have one child of type group ", function*() {              const group=file.openGroup('pmcservices');
app.config = config.init(_config)   app.get('/connect/:provider/:override?', function *() {     if (this.params.override == 'callback') return yield callback     this.session.grant = {
if (this.position + numBytes > this.byteArray.length) {       throw 'dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread';     }
{    throw "System.ArgumentException";   }
Scope.prototype.$emit = function() {             logEvent('$emit', arguments);             return origEmit.apply(this, arguments);
}             throw str + ", line " + line + " (tokens: '" + tok + "')\n" + JSON.stringify(tokens.slice(0, 5), null, 4);         };
};     this.setHost = function () {         host = arguments[0];     };
this.parentItem.fetch();         }, this));     }, this));     return this;
if (!((address_ != null) && address_)) {               throw "Missing address input parameter.";             }
this.send(from, 'Hi ' + from + ', nice to meet you!'); });
function off() {   config['off'].apply(config, arguments); }
me.callParent(arguments);    }
getFiles: function( data ) {         var configData = data             , files;
constructor(system, depend) {     this.system = system;     this.depend = depend;
constructor (YoutubePlayerSettings, YoutubeSearch, YoutubeVideoInfo, PlaylistEditorSettings) {    Object.assign(this, ...arguments);
this.view.$('.js-collapse').click();       expect(this.model.toggleCollapsed.calls.count()).toBe(2);     });
let topologyContextProps =         { availableDisks: this.props.availableDisks         , handleReset: this.resetTopology         , handleTopoRequest: this.handleTopoRequest
var fs = require('fs')   , path = require('path')   , util = require('util')
if (Node.LEADER === data.state && Node.FOLLOWER !== this.state) {       this.change({ state: Node.FOLLOWER });     }
if (response.status != 200) {     throw 'Failed loading data from ' + response.url;   }
this._eventInput.on('clean', function(){             this._dirtyLock--;             if (this._dirty && this._dirtyLock == 0) {                 this._dirty = false;
this.menuItemDiv.click (function (event) {   myThis.isOpen = !this.isOpen;   if (myThis.isOpen) {
data.eachItemGraphicEl(function (el, idx) {                 el.z = this.z;                 var itemModel = data.getItemModel(idx);
, showImage = true   , debugMode = false   , test = "durp"   , url, childArgs, phantomProcess;  if (utils.isRefererValid(referer)) {
, Collection = require('./collection')   , db = require('../db')   , EventEmitter = require('events').EventEmitter   , uuid = require('../util/uuid')   , crypto = require('crypto')
co6.main(function *() {     var opts = options(process.argv);
, atEnd: function() {       if (this.situation.loops === true) {
var toString = Object.prototype.toString   , id = toString.call(new Error())   , exceptionRe = /^\[object [a-zA-z0-9]*(?:Exception|Error)\]$/; module.exports = function (x) {
this.set( 'mouseUpListener', Ember.run.bind( this, function() {             Ember.$( 'body' ).removeClass( 'resizing' )
function getFixturePath() {         const args = Array.prototype.slice.call(arguments);
utils.each(this.proxyLabelMethods, function(method) {         labels[method] = this[method];       }, this);
$('.prime-live-iframe')[0].contentWindow.CKEDITOR.inline(this);      $(this).trigger('focus');     });
const hashmap = {};   for(let key in this.items) {     hashmap[key] = fn(this.items[key]);   }
Sequelize.prototype.log = function() {   var args = Utils.sliceArgs(arguments)     , last = Utils._.last(args)     , options;
(function (require) {  var __NEJS_THIS__ = this; var __NEJS_THIS__ = this;
{                 var document = this.documents[i];
it('superscript exclusitivity', function() {       this.setContainer('<p><sup>0123</sup></p>');       let editor = new Editor(this.container);       editor.formatAt(1, 2, 'script', 'sub');
result = this.multiply(result, m.flat);         this.matrixCache_[m] = result.slice();          m.addListener(this.matrixChange);       }
Float64Array.prototype.toJSON = function () {     var json = '[';
"database",     function*(siteConfig, builtInPlugins) {         if (process.env.NODE_ENV === "production") {
debuglog("search complete");             if (!this.isMounted() || !self.state.searching || self.searchId != localSearchId) {                 console.error("Discarding stale search results");
if (typeof JpegImage === 'undefined') {     throw 'No JPEG Baseline decoder loaded';   }
saveAuth: function*(type, token, data) {       this.getApp().logger.debug('Save user auth', this._id, type, token);
console.log('\n', this.query);   let data = [];
, XMLDom = require("xmldom")   , helpers = require('../../helpers.js')   , warnDeprecated = helpers.logDeprecationWarning;
var args = _normalizeArguments.apply(this, arguments);    args[1].mode = 'toggle';    return this.effect.apply(this, args);   }
};     me.callParent(arguments);     me.down('#id').setReadOnly(false);
var args = name ? ['DELETE', this.path, '/f', '/v', name] : ['DELETE', this.path, '/f', '/ve']   ,   proc = spawn('REG', args, {         cwd: undefined,
export default function() {     save.call(this)         .then(setValue(this));
throw  "aObj: " + aObj.toString() + " is not an IAnaforaObj";  }
this.primitives = [ "print_string", "print_number"];     this.labels = new Object();     this.instructionIndex = 0;
let recommendedCounters = null;   if (props.recommendedCounters && !this.fullLineUp()) {     recommendedCounters = (
callback.apply(undefined, arguments);         }.bind(this));
], function(c) {    c.addRemoveClass("hover", !this.spotlightPagingControls);   }, this);
{  var info = new String();
}             this.trigger('g:deleted');         }, this)).fail(_.bind(function (err) {             this.trigger('g:error', err);
}, function (next) {     this.push('\n');     this.push(footer);     next();
var _ol_Tile_ = function(tileCoord, state, opt_options) {   EventTarget.call(this);   var options = opt_options ? opt_options : {};
function () {  return this.myAttributes;  });
if (!content || !content.serialize || typeof (content.serialize) !== 'function') {     throw 'Content.serialize requires non-null Content instance as first argument'   } else {
var process = this.process,         window = this.window,         msgChannel = null,
} else {   window.ga = function() {     console.log([].slice.call(arguments));   };
if (t.EQUALITY_BINARY_OPERATORS.indexOf(node.operator) >= 0 &&               this.get('right').isPure()) {               let left = node.left;
,    vec2 = require('../math/vec2') ,    shallowClone = require('../utils/Utils').shallowClone ,    Utils = require('../utils/Utils'); module.exports = Heightfield;
extensions.concat(excluded),             function*(filePath, ev, match) {                 if (!options.excludedWatchPatterns.some(regex => regex.test(filePath))) {
project.config.templateNames = project.config.templateNames || this.getTemplateNames()   project.allTemplateNames = this.getAllTemplateNames()
ctx.compile_type !== Shade.FRAGMENT_PROGRAM_COMPILE) {                 throw ("gl_FragColor and gl_FragData assignment"                        + " only allowed on fragment shaders");
var tmp = require('tmp')   , capture = require('./lib/capture_exec').capture
}.call(this));
debug: () => {                 console.log.apply(console, arguments);             }
String.prototype.toUrl = function () {         var url;
var validUrl   , malformedUrl   , invalidUrl var server = http.createServer(function (req, res) {
}   Context.prototype.user = function() {     return Meteor.user.apply(Meteor, arguments);   }
if (op.test(parent.content[i].type)) {             throw 'Template theme variables are not permitted in operations:\n>>> '+Node.toString(parent);           }
kb.holds(subject, UI.ns.wf('tracker'))) {       var tracker = kb.any(subject, WF('tracker'))       if (!tracker) throw 'This issue ' + subject + 'has no tracker'
if (err) {                 nodeUtil._logN.call(this, "fieldInfo XML Error: " + JSON.stringify(err));                 this.ptiParser = null;
el.remove();                             onReady.callOnContentReady(this.el, {newRender: false});                         }).defer(5000, this, [el]);                     }
paths.push(pkg.name);   const parentDir = path.join.apply(path, paths);   const tarballFile = path.join(parentDir, `${pkg.version}-${pkg.dist.shasum}.tgz`);
for (var attr in self.defaultSettings) {         self.settings[attr] = self.defaultSettings[attr];     }
let items = [defaultItem].concat(this.props.services);     return _.map(items, function (service) {       var selectedHtml = this.getItemHtml(service);       var dropdownHtml = (<a>{selectedHtml}</a>);
let search = event.target.value.trim().toLowerCase();         $(".admin-element-item").hide().filter(function () {             return $(this).html().trim().toLowerCase().indexOf(search) !== -1;         }).show();
self._gen_table = function( table ) {         var t = new Array;         if( table instanceof Array ) {
Handlebars.registerHelper('truncate', function(options) {         var value = options.fn(this);         if(value.length > 255) {
describe("Validators",() => {     beforeEach(function() {         this.jsdom = jsdom();         const wrapper = document.createElement("div");
_transitionInsertElement: Ember.on('didInsertElement', function () {     if (this.get('shouldTransition')) {       this.transitionDomNode(this.get('element'), 'enter', this.didTransitionIn);     }
if (!checkValue(value)) {     throw `Not a valid boolean value, can't initialize.`;   }
var authHeader = req.headers.authorization.split(' ')       , format = authHeader[0]       , tokenId = authHeader[1]
console.log("binding "+path);     this.app[verb || 'all'](path, callbacks);
, "src/lib/keen-domready.js"           , "src/async.js"           , "src/_outro.js"         ],
if (!semver.satisfies(pkg.version, that.options.gitbook)) {             throw "GitBook version doesn't satisfy version required by the book: "+that.options.gitbook;         }
}   arguments.callee.instance = this;
return fn.apply( null, [ elem ].concat( args ) )
callback(err);                              }.bind(this));                          }
if(typeof options.name !== 'string') {      throw 'Components must be provided a name (namespace).';    }
val = val.replace(/[, ]/ig, '/').replace(/\/\    for (var m in w2utils.settings.fullmonths) {     var t = w2utils.settings.fullmonths[m];
exception = _error;               throw "onNamespaceRemoved failure: " + exception;             }
makeNestedResource(this, 'invoices', 'invoice');             makeNestedResource(this, 'logs', 'log');             makeNestedResource(this, 'refunds', 'refund');         });
type = 'select';                 }                 if ( $( this ).prop( 'nodeName' ).toUpperCase() === 'TEXTAREA' ) {                     type = 'textarea';
it('should respect noValidate', () => {     var value, last       , change = sinon.spy()       , inst = tsp(
httpServer.listen(0, function(er) {     console.error(`test http server listening on ${this.address().port}`);     assert.ifError(er);
console.log("Error in projects:", error);          });            this.flavors.bind("error", function(model, error) {              console.log("Error in flavors:", error);
callback(null, json.objectIds)   }.bind(this)) }
message: 'What do you want to call your view?',      default: this.slugifiedName     }, {
this.getDomEvent().returnValue = false;         this.base(arguments, vValue);       },
export const changeNumCols = (numCols) => (dispatch) => {     if (!numCols || numCols < 0) throw `Invalid number of cols:${numCols}`;     for (let i = 0; i < numCols; i++) {
if (key !== 1 && !this.findTouch_(touchList, key - 2)) {         var p = value.out;         d.push(this.touchToPointer_(p));       }
var browsers = getBrowser().browsers;             for (var i in browsers)             {
this.dialog('Insert Drop Zone', null, dialog_drop);   var node = select(this.container(), toggle)[0];   var container = node ? $(node).parent()[0] : this.container();   if (node) {
} function $AbortSignal () {   this.onaborted = null   this._abortSignal = {aborted: false}
it('prevents the second launch of app', function (done) {       this.timeout(120000)       const appPath = path.join(__dirname, 'fixtures', 'api', 'singleton-old')              const first = ChildProcess.spawn(remote.process.execPath, [appPath])
foreign_ids: ids         .map(function(id) {           return this.collection + ':' + id;         })
while (innerWrap.firstChild) innerWrap = innerWrap.firstChild             innerWrap.appendChild(this)           }
if (notToReject-- === 0) {           deferred.reject.apply(deferred, rejected);         }
this.items = new Array();                 }
}).call(this);
var $export = require('./$.export')   , buffer  = require('./$.buffer');
close(...args) {     this.server.close.apply(this.server, args)   }
if(optFieldDefs) {       for (var name in optFieldDefs.fields) {         var defs = optFieldDefs.fields[name];         var {result, keysToDelete} = parseFieldDef(x, name, defs);         if (isProblem(result)) {
var _Itag=function(args){   this.loc="azcontentarea";   this._base=args.base;
function defaultSetter(name, value) {   this._nativeSet(name, value === undefined ? null : value);   if (this['$prop_' + name].nocache) {     this._triggerChangeEvent(name, value);
requires: {         mongodb: ">=2.6.0"       , topology: "replicaset"     }
},   willInsertElement: () => {     this.set('participants', this.get('proposal.possibleDelegates'));   },
options_clone.comm = comm;             return this.new_model(options_clone).then(function(model) {
this.cencKeyIds.push.apply(this.cencKeyIds, keyIds);     this.systemIds.push(systemId);
}     var type = nonpol[0];console.debug(type, this);     switch ( type ) {
if (routeInfo.route.indexOf(':') >= 0) {                 throw 'default route must not have params: ' + routeInfo.route;             }
fn.call(cursor.context || this, {                         sender: this,
})(this, this.muxjs);
var name = element.tagName.toLowerCase();                 if (BuildHelpers.doesStringLookLikeDependency.call(this, name)) {                     dependenciesList.push(name);
,setWaypoints: function(latLngs, cb) {     var i;     var callbackCount = 0;     var firstErr;
var plugin_cli = shell.exec(cmd, {silent:true});                     if (plugin_cli.code > 0) throw 'An error occured during plugin installation for ' + platform + '. ' + plugin_cli.output;                 });
function _injectSprintfProcessor() {          var values = new Array;
module.exports = function (context ) {   var deps = [];   var env  = arguments.length > 2 ? arguments[1] : false;
function maker(e, s) {     return function () {       return func.apply(e[s], e, arguments)     }
if (_.config.selection) {     for (var idx in _.message) {      var item = _.message[idx], iType = typeof item,
it('dialog element should be focused', function() {                 this.$input.hide();                 this.dialog.focusContent();
for (i in this._lngCoords) {             lines.push(this._verticalLine(this._lngCoords[i], this.options.zoneStyle));         }
, ServerManager = require('mongodb-topology-manager').Server       , Connection = require('../../../lib/connection/connection')       , ReplSet = configuration.require.ReplSet       , manager = configuration.manager;
WMTSRequestEncoding.KVP;     const requestEncoding = this.requestEncoding_;
.option('-s, --spec-version <version>', 'select the type of specification to retrieve: doc|aws|complete')     .action(function (resourcePath, httpMethod, options) {              let parameters = cliTools.processCliArgs(arguments, validators);
}     else {       var method = require(filepath);       Object.defineProperty(Object.prototype, methodName, {         value: function () {
self.label = "General Plugin"; }(this, "hatohol.hap_4"));
async function loadValue (ctx, { network, dataIdentifier }) {   const rec = await this.load(ctx, { where: {     networkId: network.id,
this.redirect('hacker', user);     }   }   this.next(); }
return api.getSite({ siteId }).then(async siteData => {       const accessToken = await this.authenticate();       const arr = addons.map(({ addonName, addonDidInstall }) => {
if (inElements) {     for (var index in inElements) {      var elemObject = $(inElements[ index ]);
$(this).one('animateClosedStart', function(e) {         e.stopPropagation();
var handler = dispatchHandlers[action]   if (handler) handler.apply(null, args)   else console.error('Missing dispatch handler: ' + action)
setHasClickThrough: function() {       let status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0       const groups = this.layers.slice().filter(layer => layer.class() == MSLayerGroup)
if (fold.start.row < this.startRow || fold.endRow > this.endRow) {                 throw "Can't add a fold to this FoldLine as it has no connection";             }
var isHardDisabled = isButtonDisabled($(this)) || isButtonDisabledVision($(this));                     var isResDisabled = isButtonDisabledResources($(this));
var express = require('express')   , router  = express.Router();
}   applyFilter() {     return this.applyModifier.apply(this, arguments);   }
case 'starred_at':             return values.push(starData[this.STARRED_AT]);           default:
var result = [];      for (var row in table.getRows()) {       row = table.getRows()[row];
module.exports = avconv; var   spawn  = require('child_process').spawn     , Stream = require('stream');
do {     parent = parent ? parent[i] = new Array(4) : this._root = new Array(4);     if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
default:                 throw "Unsupported uniform format for setting. May be a todo.";
const printStyle = $(`<link rel="stylesheet" href="${this.app.browser.runtime.getURL('build/css/print.css')}" media="print">`) class Observer {
, accepts: ['js', 'css']
this.testPipe = function () {     var ex = jake.createExec('ls', function () {})
function getHandleNearImagePoint(element, data, coords) {         for (var handle in data.handles) {             var handleCanvas = cornerstone.pixelToCanvas(element, data.handles[handle]);
this.setXhr();  this.setWatcher(); };
opts.data = arguments[2]   opts.method = 'POST'   return exports.request(test, url, opts, callback) }
function addEvent (element, event) {         var id = util.getUid(element)           , evt = events.parseEvent(event)           , eventType = (listeners[id] || (listeners[id] = {}))[evt.name]
if (e.type === 'change' && this.tagName !== 'SELECT') {             var type = this.type.toLowerCase();
var tasks = {}; options.map(function(t) { tasks[t] = 0 });     console.log('options', this.options());
var o = {};  oForEach(this, function (value, key) {   if (callback.call(scope, value, key)) {
Array.prototype.slice = function (begin, end) {
if(name === 'emit')       return emitter._emit.apply(emitter, args)
return this > lower && this < upper;    }   , character = function(num) { return String.fromCharCode(num); }   , parse = function(key) {
for (var j in columns)   {
if (Error.captureStackTrace) {       Error.captureStackTrace(this, arguments.callee)     }
this.list = [    {
string = ["I, [" + (new Date().toISOString()) + "]  INFO -- :"],       data = string.concat(args.slice());   return console.log.apply(console, data); };
this.expression._walk(visitor);             AST_BlockStatement.prototype._walk.call(this, visitor);         });
Crisp.Router.route('/forms/:id', function() {     Crisp.View.get('NavbarMain').highlightItem('/forms/', this.id);
this.container = $(options.context || 'body').addClass(vendor + 'canvas');
if(shouldFail[method]) {     throw "You should not call anymethod on this object";
const rootPrefix = '../..'   , coreConstants = require(rootPrefix + '/config/core_constants')   , QueryDBKlass = require(rootPrefix + '/app/models/queryDb')   , ModelBaseKlass = require(rootPrefix + '/app/models/base')
exception = _error;       throw "clone: " + exception;     }
var Db = require('../../')   , Base = Db.Base, ObjectType = Db.Object, BooleanType = Db.Boolean   , StringType = Db.String; module.exports = function (a) {
} catch (ex) {           throw ('try to remove non-existing shortcut');         }
articleSchema.pre('findOne', function(next) {   console.log(this)
current_state(data);           }.bind(this));         }
if (isMaster) {       var rs = this._db[cmd].apply(this._db, args);       if (cb) process.nextTick(() => { cb(rs); });
esriRequest({               url: portalUrlUtils.getUpdateItemUrl(this.portalUrl, this.username, itemId, folder),               handleAs: 'json',
var pairs = s.split("&");       for (var pi in pairs) {         var kvsegs = pairs[pi].split("=");         var key = decodeURIComponent(kvsegs[0]), val = decodeURIComponent(kvsegs[1]);         Arg._access(obj, key, val);
Minionette.CollectionView = Minionette.View.extend({     constructor: function(options) {         Minionette.View.apply(this, arguments);
this.aski18n(this, this.currentQuestion++, this.totalQuestions); }
try {     var template = require(viewsDir + '/' + viewPath + '.hbs')       , html = template(data)     ;     callback(null, html);
};   var isBulkUpdateQuery = function() {     return this.options.type === QueryTypes.BULKUPDATE;   };
function formatArgs() {   var args = arguments;   var useColors = this.useColors;
if(this.options.callTip)    tip = this.options.callTip.apply(this, arguments);    else
return Math.floor(Math.random() * (max - min + 1)) + min;     }     ,     topUpRooms: function () {
const redirHandler = function (payload) {             this.metrics.tick('request.redir');             return {
}   var _ = (deps && deps.underscore) ? deps.underscore : global._       ,Tweenable = (deps && deps.Tweenable) ? deps.Tweenable : global.Tweenable;   var defaultConfig = {
const install = plugin.install || plugin;   const ret = install(this, options);   installed.set(plugin, ret);
}   return processPlugins(plugins, arguments[0], arguments); };
for (var i = 0; i < objects.length; i++) {       for (var j in objects[i]) {         target[j] = objects[i][j];       }
} else {           callback.call(this);         }
});                     eventer.trigger(this, e);                     return e.result;
if ( $container.length === 0 ) {             throw "Container not found for PaletteSelector: " + spec.selector;         }
this.center = new Vector2();         this.rings = new Array();         this.isBridged = false;
function _tidyEmpersand(str, hasFirst, hasLast) { console.log(arguments)     if (str) {
if (!this.layers[this.meta.last_layer].boundary){
}     return this.outerHeight(includeMargin) - this.height();   };
function createElementCtor(ctor, base) {   function F() {     Element.apply(this, arguments);     if (ctor) {
if (checkForProperty) {    throw "You can't both check for the existence of a property and set it at the same time.";   } else {
if (definition.events) {                 for (var event in definition.events) {                     this.addEventListener(event, createTrigger(definition.events[event]));                 }             }
if (this.messageToPeers) {             _.onAfter (log.impl, 'defaultWriteBackend', this.$ (function (params) {                 this.messageToPeers ({ what: 'log', params: params }, this.isDeveloper) })) } },
if(position === "left" || position === "right") {                     container.css({top:($(this).height()/2) - (height/2) + "px"});                 } else {
constructor: function PageableCollection() {             PageableCollection.__super__.constructor.apply(this, arguments);         },
var list = document.querySelectorAll('div.bf');     for (var i in list) {         console.log(list[i].innerText);
this.set(options.updatedAt, now);    }    if (options.updatedBy && this._req_user && !this.get(options.updatedBy)) {     this.set(options.updatedBy, this._req_user._id);
}   logDebug () {     this.log.debug(`[${this.socketId}] TcpSocket`, ...arguments);   }
console.log(node);                      throw node+" is not array. cannot join fmt:"+fmt;                  }
var params = {};       for (var i in this.pathParameterNames) {         var name = this.pathParameterNames[i];         params[name] = decodeURIComponent(matcher[parseInt(i, 10) + 1]);       }
avoidableParams[5] = avoidFords;                 var truckParams = new Array();                 var truck_length = permaInfo[preferences.value_lengthIdx];
if (i < 0 || i > 7) {       throw "Invalid signature type";     }
Bridge.init(); })(this);
_.each(fieldsValues, function(setValue, fieldName) {     this.setOne(doc, fieldName, setValue, options);   }, this); };
if (observer.addedComponent) {     for ( var i in entity._components) {      observer.addedComponent(entity, entity._components[i]);
if (clip(d.geometry.coordinates) && dsoDisplay(d.properties, cfg.dsos.limit)) {           var node = d3.select(this),               pt = projection(d.geometry.coordinates),               type = d.properties.type;
fn.apply( this, arguments );   this._format();   this._aria();   if ( previous !== this.options.value ) {
JSii.prototype.queryParser = function(query) {     var res = new Array();        var currChar;
},         initContainer: function(original) {             original.apply(this, _.rest(arguments));
tasks: {    a: function * (f) {     t.equal(f, fly1, 'pass fly instance to tasks');
exception = _error;       throw "ResolveNamespaceDescriptor failure: " + exception;     }
}     flags = this.getFlags.apply(this, arguments);     const previousValue = this.dataValue;
var vec3 = this
exports.curry = function curry (context, func) {   var copy = Array.prototype.slice     , args = copy.call(arguments, 2);
this._selection = rawSelection.reduce(function (prev, curr) {             prev[curr] = true;             return prev;         }.bind(this), {});     };
req.app = res.app = origApp;         return next.apply(this, arguments);       });
var max = 0;     for (connectorId in this.edges) {         var connector = IdToConnector(connectorId);         if (connector.name == name) {             max = Math.max(parseInt(connector.index)+1, max);
it("blank", function (done) {         this.timeout(TIMEOUT);         Augur.blank(
export function *http__error(next) {   try {
var ptSlater =  Clazz.newIntArray (nFuncs, 0);  var atoms = this.atomSetCollection.getAtoms ();  for (var i = 0, pt = 0; i < tokens.length; ) {
function e() {                  return null !== t && t.apply(this, arguments) || this              }
}),     onContentChange: React.autoBind(function(optionIndex, e) {         var options = this.props.options.slice();         var option = _.clone(options[optionIndex]);
}     if ( ++steps > that.options.executionLimit ) throw 'Execution Limit Reached';    }
} function uPlot(opts, data) {  var self = this;  var series  = setDefaults(opts.series, xSeriesOpts, ySeriesOpts);
, debug     = require('debug')('koa-better-ratelimit')   , copy      = require('copy-to')   , ms        = require('ms');
this.bindSourceData(this.boundSource);         this.__reattach();     }
class Rectangle extends _RectangleBase$(T) {       constructor(left, top, width, height) {         this.left = left;         this.top = top;
prepareSVG(svg, options, encodings);  for(var i in encodings){   var encodingOptions = merge(options, encodings[i].options);
var logger;     var self = this;     var driver = model.load( module, {
document.body.onmousemove = function(e) {   var halfHeight = canvas.height/2     , halfWidth = canvas.width/2
if (this._sPrettyPrintDelayedCallID) {        jQuery.sap.clearDelayedCall(this._sPrettyPrintDelayedCallID);       }
constructor(target, selector, args, undo, meta) {     this.changes = [];     this.target = target;     this.selector = selector;
, crypto = require('crypto')   , net = require('net')   , sasl = require('./sasl')   , fs = require('fs')
let column_ = columns_[i];             if (!(column_ instanceof nlobjSearchColumn)) throw 'SSS_TYPE_ARG_REQD';
var tmp = require('tmp')   , exec = require('child_process').exec   , os = require('os')
changeColumnQuery: function(tableName, attributes) {     var query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;'       , sql = [];
function ArrayCollectionStrategy() {           _classCallCheck(this, ArrayCollectionStrategy);           _CollectionStrategy.apply(this, arguments);         }
this._createTree();             } else if (this.options.type === 'dialog' && new Boolean(this.options.autoOpen).valueOf() === true) {                 this.open();
if (oldMax !== newMax) {       run.scheduleOnce('afterRender', this, function() {         this.element._flatpickr.set('maxDate', newMax);       });     }
var sockjs = require('sockjs')   , path  = require('path')   , fs = require('fs')
this.extendForeignObject(obj_array._id, obj, function (err) {     if (err) {
var assert = require('assert')   , tag_version = require('../../lib/utils').tag_version require('../../lib/logger').setup([])
mapLayer: new cwt.ScreenLayer(this.TILE_ANIM_STEP, this.TILE_ANIM_TIME),
this.set('module', () => {       Reflect.apply(window.ga, this, arguments);     });
var str = 'div.' + variables.get.typeOfBranch() + 'Branch:visible';                 var temp = new Array();                 $.each($(str).get(), function(i, item) {
var express = require('express')   , app = express.createServer()   , i18n = require('../index')   , i18nMongoSync = require('../backends/mongoDb/index');
if (typeof number !== 'number') {       throw 'Float32Encoder.encode(): Argument received is not a number.';     }
class UnitHealthStore extends GetSetBaseStore {   constructor() {     super(...arguments);
}       this.plugin.end();     }
proceed.apply(this, Array.prototype.slice.call(arguments, 1));             if (tooltip.events && tooltip.events.show) {
if (!(o.jiff === share.jiff)) {         throw 'shares do not belong to the same instance (/)';       }
self[name + 'MarkReady'] = function(data) {                     if (!data) throw "No object passed to " + name + "MarkReady";                     if (deferreds[name]) {
let queue = this._updateByIdQueue[_id]     ,self = this    this._updateByIdQueue[_id] = null
var bind = function(f ) {     return Function.prototype.bind.apply(f,         [undefined].concat(slice.call(arguments, 1))); };
const CardListExample = () => {   const cards = Array.apply(null, new Array(10)).map((_, i) => (     <Card key={i} className="md-cell md-cell--2 md-cell--4-tablet">
return args[ this.lastToggle++ ].apply( this, arguments ) || false;   }));
var categories = this.model.get('data');         expect(categories.length).toEqual(1);         expect(categories[0].name).toEqual('Barcelona');
if (!object_ended) {                     throw "Expected end of object.";                 }
, cache = require('../lib/cache/object')   , Job = require('../lib/Job')   , pkg = JSON.parse(fs.readFileSync('./package.json'));
} else {      var func = arguments.callee.bind(this);      return fileClient.fetchChildren(launchConfDir.ChildrenLocation).then(function(children) {
if (!((objectModelDeclaration_ != null) && objectModelDeclaration_)) {           throw "Missing object model delcaration input parameter!";         }
var inflection = require("./inflection")   , Backbone = require("backbone")   , Template = require("./template")
}     var smartChanged = function(index, id, fields) {       var data = this[id].data;       _.each(fields, function(val, key) {
this.route('list-items');     this.route('empty-list');     this.route('selected-element');
console.log('testbody1');   process.nextTick(function() {     throw 'Too bad';   });
}                 base.update_cb($(this),val);             }
unsafeWindow.localStorage.clear();   for (var key in savedLocalStorage) {    unsafeWindow.localStorage[key] = savedLocalStorage[key];
renderObj.filename=tempFilePath;                 html=ejs.render(temp, arguments[0]);               }else{
layer.methods = {};         methods = rules[rule];         for (method in methods) {             options = methods[method];
rethinkdb.Connection.prototype.iter = function(exprOrOpts, opt_callback, opt_doneCallback) {     argCheck_(arguments, 1);
var particleShader = [ , 'precision mediump float;' , 'uniform sampler2D texture;' , 'uniform vec2 resolution;'
'value': dataArray[i],         'meta': Chartist.serialize(this.data.series[i].meta)       }, Chartist.xmlNs.uri);
io.set('transports', [                         'websocket'   , 'flashsocket'   , 'htmlfile'
Permutation.forEachPermutation = function ( array, callback ) {          recursiveForEachPermutation( array, new Array(), callback );      };
propertyName: propertyName,                                     type: 'css-background-image',                                     baseUrl: this.baseUrlForPointers                                 };
typeof define === 'function' && define.amd ? define(factory) :  (factory()); }(this, (function () { 'use strict';  const items = [{}, {}, {}];
workflow: Ember.computed('submission.provider.reviewsWorkflow', function () {         return WORKFLOW[this.get('submission.provider.reviewsWorkflow').toLowerCase()];     }),
if (e.target.tagName != "g") {         this.clearSelection(brush1);       }
yate.AST.prototype.error = function(s) {     require('util').puts(new Error().stack);     throw 'ERROR: ' + s + '\n' + yate.parser._where(this.where); };
function command(json) {         var self = this;         self.objStatus        = ko.observable('ready');
clearInterval(pollingInterval);     }, defaultInterval, this); });
var json = self.elementToJSON()     json.data = this.getData()     json.name = this.getName()     return json
var Schema = mongoose.Schema  , ObjectId = Schema.ObjectId; var User = new Schema({  displayName: ObjectId,
valueClick: action(function () {     if (this.get('isEmberObject') || this.get('isArray')) {       this.get('mixin').send('digDeeper', this.get('model'));
if ($(this).attr('checked') == 'checked') {                 portal.chat.setSetting('offline', true, true);
if($(this).attr('disabled', true)){    console.log($(this).attr("value"));    return $(this);
Router._createDeferredRoutes = function () {     for (var n in this._i18n.deferredRoutes) {         var defRoute = this._i18n.deferredRoutes[n];
fg.controller('fgEditController', function ($scope, fgUtils, $location) {   var self = this;
this.addCss('navbar '.concat(prefix).concat('-')              .concat(this.position).concat(' navbar-')              .concat(this.theme).concat(' bg-')              .concat(this.theme).concat(' navbar-expand-lg'));
function extend(target, modules) {   for (var key in modules) {     var module = modules[key];     switch (typeof module) {
collision: 'flipfit'         }         ,win = $(window);
.on("mousedown", '[data-ax5grid-column-resizer]', function (e) {                 var colIndex = this.getAttribute("data-ax5grid-column-resizer");                 self.xvar.mousePosition = GRID.util.getMousePosition(e);
}).call(this);
this.showMessage("error", "Error while deleting script.");                                 }, this)                             }                         });
if (window.console && console[methods[zl]]) {                     console[methods[zl]].apply(console, result.format(logArgs, lvl, event));                 }
try {     yield packages(this.metric).upload(pkg)     this.body = yield packages(this.metric).get(pkg.name)   } catch (err) {
exports.show = function *() {   this.body = 'Hero ' + this.req.user.login;
setTimeout(function() {         this.useToolbox();     }, this.animTime_).bind(this);     this.nextArticle(0, false, this.sectionTags_.length);
lazy_require(this, {   Client: [ 'azk/agent/client' ],
info.connection().on('connection', socket => {     let _setupMethodHandlers = setupMethodHandlers.bind(this, info, socket);
Initializer.prototype.run = function(cb, thisArg) {   var self = this     , phases = this._phases     , idx = 0;
var Convex = require('../src/shapes/Convex') ,   vec2 = require('../src/math/vec2')
}   return this.render(template, options); };
}       saveInstance(arguments[1]);       break;
} else {       listners = getListeners(this, type, true);       if (listners) {
var events = require('events')   , util = require('util')   , EventEmitter = events.EventEmitter;
, update: function(block) {              this.clear()
return Globalize[   runtimeKey( "messageFormatter", this._locale, [].slice.call( arguments, 0 ) )  ];
}     for (var i in listOrderedTickers) {       var tickerId = listOrderedTickers[i];
default:         throw 'Unexpected tag: ' + cp_info.tag;     }
each(arguments[0], function(value, name) {           this.setAttribute(name, value);         }, this);       }
ACCESSIBLE_GLOBALS.customSidebarButtons : [];       this.workspace = blocklyApp.workspace;
writeUint64(value) {         if (!NumberUtils.isUint64(value)) throw 'Malformed value';         this._view.setFloat64(this._writePos, value);
String.prototype.ucfirst = require('./lib/helpers/ucfirst'); Array.prototype.pushUnique = require('./lib/helpers/push-unique'); var merge_options = require('./lib/helpers/merge-options');
this.on(C.EVENT_TYPE.LIGHT_STRUCTURE_CHANGED, function () {             this.lightsNeedUpdate = true;             this.shaderFactory.setLightStructureDirty();
if (xhrObject()) {     return sendXhr.call(this, 'DELETE', url, params, callback);   }
if (is.defined(width)) {     if (is.integer(width) && is.inRange(width, 1, this.constructor.maximum.width)) {       this.options.width = width;
writecb(er);   }.bind(this)); };
if(!await cfg.fileExists(modName)) {             throw `${cfg.getBase()} not found in ${cfg.getDir(modName)}`;         }
this.requestTransaction(function * () {         if (op.id[0] === 0xFFFFFF) {
$scope.newReservation = true;     $scope.user = new Object();    }
var res = '';         for (var i in data) {             var s = data[i];
jj = ((j*4) & modulus);    if(ssz < 4 + jj) throw "FAT boundary crossed: " + j + " 4 "+ssz;    if(!sectors[addr]) break;
exports.remove = _path => {   _unset(this.config, replacePath(_path))
});         $('input[name=show_unread_counts_in_title]', $modal).each(function() {             if (NEWSBLUR.Preferences.show_unread_counts_in_title) {                 $(this).attr('checked', true);                 return false;
}   get () {     let [collectionName, docId, field] = parseArguments(arguments)     return this.collectionSet.get(collectionName, docId, field)
if (opt_init && opt_init.responseType == 'document') {       return fetchPolyfill.apply(null, arguments);     }
app.render = function(name, options, fn){   var self = this     , opts = {}     , cache = this.cache
function scribble_canvas(tag) {   this.tagcanvasDiv = tag;    this.colorseg = Math.floor(Math.random()*14);
var count = this.publish.apply(this, arguments);
function RuleDecl() {   throw 'RuleDecl cannot be instantiated -- it\'s abstract'; }
elements.each(function(i) {             var pos = $(this).offset(),                 z = getZIndex(this);
if(newValue !== lastValue) {           setMeta(this, lastValueKey, newValue);           this.notifyPropertyChange(key);
var aArgs = Array.prototype.slice.call(arguments, 1),           fToBind = this,           fNOP = function () {},           fBound = function () {
if (options.inject && Array.isArray(options.inject)) {       injects.push.apply(injects, options.inject);     } else if (options.inject) {
this.headers.sort(cmp(function(h){                 return self.order.indexOf(h);             }));             for(var i in this.data) {                 var row = new JsonRow({
_uploadTask: task(function * (blob, url, resolve, reject) {     try {
var template = this.normalize(loaded, options);     if (!this._usedRouter) this.use(this.router);     var type = this._router.route.apply(this._router, arguments);     extend(this.cache[plural], template);
, force = _ref[2]     , cb = _ref[3]     , _this = this;
, pool = require('./collabjs.pool.mysql').pool   , passwordHash = require('password-hash')   , crypto = require('crypto');
}).call(this, typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {});
this.newick = data;       MetadataService.getMetadata(this.metadataurl, this.template);     });
fs.appendFile = function(path, data, options, callback) {   callback = maybeCallback(arguments[arguments.length - 1]);   options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });
Screen.prototype.exec = function(file, args, options, callback) {   var callback = arguments[arguments.length - 1]     , ps = this.spawn(file, args, options);   ps.on('error', function(err) {
this.webCompile.apply(this, [inPath, outPath, function (result) {         _this2.fsWrite(inPath, outPath, result, callback);       }].concat(lintPaths));     }
}).call(this);
'</div>' +         this.view.toHTML() + '</div>' +         '<div id=' + this.on('click', this.clear) + ' style="text-align:right;width:100%;float:right;margin-bottom:20px;" class="searchTitle"><font size=-1><u>Clear</u></font></div>';     },
var self = this;     Eventable.call(self);
if ( bool = !!elem.canPlayType ) {                 bool      = new Boolean(bool);                 bool.ogg  = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,'');
unmountChildren: function(renderedChildren) {     for (var name in renderedChildren) {       var renderedChild = renderedChildren[name];       ReactReconciler.unmountComponent(renderedChild);     }
this.listenTo(this.model, 'change:bits', function(wire, bits) {             this.$el.toggleClass('bus', bits > 1);         });         this.prevModels = { source: null, target: null };     },
notIn(refValues, callback) {         return this._check(callback, function(value, valueInfo) {             const normalizedRefValues = this._normalizeValues(refValues, valueInfo);             return !_.includes(normalizedRefValues, value);
if (detach !== false) this._fragment.u();   this._fragment.d();   this._fragment = null;
var TObject = require( 'PHET_IO/types/TObject' );   var TVector2 = phetioInherit( TObject, 'TVector2', function( vector2, phetioID ) {     TObject.call( this, vector2, phetioID );     assert && assert( vector2 instanceof phet.dot.Vector2 );
if (typeof type === 'string') type = Shade.Types[type];     if (_.isUndefined(type)) throw "attribute requires valid type";     var bound_buffer;
before(() => {     this.jsdom = require('jsdom-global')('<html><body><div id="root"></div></body></html>');      sandbox.spy(React, 'createClass');
const srckey = keys[0]   , dstkey = toresolve[keys[0]];   delete toresolve[srckey];
this.target = target;     this.receiver = receiver;     this.selector = selector;
var Line = this.Line = Base.extend({
function callbackHandler(promise) {         this.set(_this, 'promise', promise);         promise.then(
thunk(function *() {   var timeN = 0
var jshint = require('jshint').JSHINT  , eslint = require('eslint')  , eslintConf = require('eslint/lib/config')
});                          $('[data-jpn="'+id+'"] > div.acf-repeater').slideUp('fast',function(){$(this).addClass('.-empty');});                          setTimeout(function(){ jpn_acf_tabs(id, false, parent); }, 550);
, DEFAULT_EXTENSIONS = {       js: ['js', 'json'],       css: ['css'],       html: ['html']
return Promise.try(function () {     return this._doWorkFn(job.data);   }, null, this)     .bind(this)
const PIPELINE_HEADER = `${V3_HEADER}.pipelines` function * pipelineCoupling (client, app) {   return client.get(`/apps/${app}/pipeline-couplings`)
function log(data) {       instance.private$.logger(this, data)       instance.emit('log', data)
Evme.$('.rightbutton', el)[0].addEventListener('click',       function onClick(e) {         this.removeEventListener('click', onClick);         e.stopPropagation();
me.store.load();     me.callParent(arguments);   }
var target = path.join(process.cwd(), exercise.boilerplateOut[boilerplateName])     , done   = after(2, callback)
const id = workerTimers.setInterval(() => {                 throw 'this should never be called';             }, 100);
} else {       return this.delta.do.apply(this.delta, fcdArgs);      }     };
function onOffline() {   sendLog(this, "MQTT client offline"); }
, stack = err.stack || message       , index = stack.indexOf(message) + message.length       , msg = stack.slice(0, index)
var widget = this.field.widget     , id = object.get(widget.attrs, 'id', this.autoId())   if (id) {
}     callback.apply(this, arguments)   }
if (!jQuery.isArray(attrs)) {         attrs = [ attrs ];     }     for (var a in attrs) {         this.add(attrs[a].id, attrs[a].range);
if (!exp1.type.is_struct())                 throw "internal error, was expecting a struct here";             var s = {};
userChoice, totalVotes = 0;             for (var c in poll.choices) {                 var choice = poll.choices[c];
{         super.constructor();
var testPositions = getTests(pos, ndxIntlzr, tstPs), testPos;                 for (var ndx in testPositions) {                      testPos = testPositions[ndx];
if (data.feed.entry.length > 0) {     $('<li/>').addClass('loadMore').text('Load more').click(function(event) {                     $(this).addClass('loading');                     Search.searchPlaylists('', true);
checkImmutableMutable(function(immutable, mutable) {       var methodArgs = Array.prototype.slice.call(arguments, 2);       assert.isTrue(TestUtils.returnsImmutable(methodName, immutable, mutable, methodArgs));
};     window.addEventListener('storage', this._notify, false);   }),   willDestroy() {
Sequelize.prototype.normalizeDataType = function(Type) {   var type = typeof Type === 'function' ? new Type() : Type     , dialectTypes = this.dialect.DataTypes || {};
else {         throw("couldn't match NAK");       }     };
class Session extends EventEmitter {   constructor(opts) {     this.authenticated = false     this.server = opts.server
beforeEach(function() {         utils.beforeEach(this);          clock = lolex.install();         scheduler = [
if (guestWindow != null) {     event.returnValue = guestWindow[method].apply(guestWindow, args)   } else {
function mixinProperties(obj, proto) {  for (var prop in proto) {   obj[prop] = proto[prop];  } }
socket.end();         throw 'websocket key is missing';     }
this.installDir = getPath(process.env.USERPROFILE, `Documents/Qlik/Sense/Extensions/${this.PKG_NAME}`);   this.hicomvcDir = getPath(process.env.HICOMVC_DIR || '../hicomvc');
var type = data[from].type     , obj = data[to] = data[from];     obj.type = type;
}     subscribe(this.branch, this.id, options, cb, listenerId)     return this   })
}     this.done(Object.keys(testCases).length); });
if (choice === "yes") {        var store = this.getViewModel().getStore("list");        Ext.Ajax.request({
if (arguments.length === 1 && Array.isArray(arguments[0])) {     return EventTarget;
passport.loadStrategies = function () {   var self       = this     , strategies = sails.config.passport;
for (var key in values) {       this.addAttribute(key, values[key])     }
text: "selected" }).on("change:selection", function() {   this.set("text", this.get("selection") ? "selected" : "deselected"); }).appendTo(page);
var list = [];  for (const type in cache) {   list = list.concat(cache[type]);  }
t.is(isEmpty([]), true)   t.is(isEmpty({[Symbol.iterator]: function * () {}}), true)   t.is(isEmpty([0]), false)
};   this.add = function() {     queue.append.apply(queue, arguments);   };
,   prevTag = null   ,   chunk = null   ,   hasAttributes = false   ,   item = null   ,   withinItem = false
hasChildShapes: function() {    for(key in this.childShapes)     return true;
this.css  = '';     this.width  = null     this.height  = null;     this.onShow  = null;
if (semActs) {      for (var lang in semActs) {               pieces.push("\n"+indent+"   %");
throw new System.IO.EndOfStreamException();     this.m_tempBuffer.length = bytesRead;     return this.m_tempBuffer;   });
vec = arguments[0];             if (!vec.type.equals(Shade.Types.vec3))                 throw "create with 1 parameter requires a vec3";         } else if (arguments.length === 3) {
} else {           ddManager[method].apply(ddManager, args);         }
for( var sub in subs )   {
default:             throw "Can't serialize object of type " + st.object.termType + ' into XML'         }
function addListener( {matches, onEvent} ) {     listenters.push(arguments[0]); }
this.rect.y += delta.y;         this.viewer.updateOverlay(this.element, fixRect(this.rect));     }
(spec.axes = spec.axes || []);     spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));   } else {
Array.prototype.group = function (size) {   var groups = [];
function square(coord) {    return board.square.apply(board, coord);   }
"es": "ajustes",          "pl": "ustawienia"      }, };
{         var tag = arguments.callee.tag;         var cons = arguments.callee.cons;         var newTag = new cons();
}   this.log.http(method, remote.href || "/")   var done = requestDone.call(this, method, where, cb)
}         d3.select(this).style("padding",padding)       }
for (let i = start; i < len; i++) {             this._drawLayerCanvasImage.apply(this, images[i]);         }
if (!ethUtil.isValidAddress(target)) {     throw 'Please provide a valid Ethereum address as the target.';   }
},   onSearchInput: React.autoBind(function(query) {     this.setState({searchQuery: query});     this.refs.pluginList.resetSelection();
$.ElementList = function () {  function $ElementList() {   this.src = Array.apply(null, arguments);  }
var soundState = this._getSoundState(util.target);     for (var effect in soundState.effects) {         soundState.effects[effect] = 0;
function saveAllFiles() {         for (key in sessions) {             saveFile(key);         }     }
if (~nativeTypes.indexOf(id))       throw '"' + id + '" is a reserved type name';     customTypes[id] = 1;
module.exports = f(function () {  throw this; });
objectScale.x = scale.x * this.autofitScale_;       objectScale.y = scale.y * this.autofitScale_;       objectScale.z = scale.z * this.autofitScale_;
var componentConstructor = function() {         Component.apply(this, arguments);     };
exports.TouchHandler = TouchHandler; })(this);
imgObj = this.makeImgObj(dataURL, function(){     self.frameData[this.state.count](this);     self.rotations.push(0);
this.extMethod = function(to,from){         var keys = Object.keys(from);
helpers.mockPrompt(this.app, {    'requirejs': true
}   insertWithRelatedAndFetch() {     return this.insertGraphAndFetch.apply(this, arguments);   }
let branch = this.get('modelMeta').branch;     return branch == null || branch === this.get('cardstackRouting.defaultBranch');   }),
case 'pagedown':             if ( !isMac && this.get( 'isExpanding' ) ) {                 var scrollView = this.getParent( NS.ScrollView );
if (getProfile) {      this.setProfile(getProfile, false);     }
} else {         throw 'Invalid format specified. Please use "rectangle", "polygon", or "point"';       }
mouseMoveHandle = function() {       var focus = d3.mouse(this);       focus[0] -= currentTranslation[0];
, _ = require('lodash')   , tingodb = require('tingodb')()   , uuid = require('../uuid'); module.exports = {
var self = this           , config = this.app.config           , exp = this.exp         exp.configure(function(){
var inputsComponent = $("#less input")       , inputsPlugin = $("#plugins input")       , inputsVariables = $("#less-variables input")
module.exports = function *(series, thunk){    yield eachLimit(series, 1, thunk);  };
if (err) return this.run('kill -9 %s', this.pid, function again(err, output) {       if (err) return fn.call(this, err);
scene.remove(gridSelections[gridName].dot);   }   scriptsToRun = new Object();   for (var markedPointName in markedPoints){
if (Object(data) !== data) {             return replaceComment.apply(this, arguments)         }
var listenerSourceCode = this.__getNodeText(observeBlock);    if(listenerSourceCode == null) throw "Encountered empty <script> element";    component.addEventHandler(eventName, listenerSourceCode);
show: () => {       this.$el.attr('aria-hidden', false).show();     },
$('body').addClass('menu-active');         $('#'+this.id).parent('.dropdown').find('.dropdown-content').show();     });
var expected = [[0,0],[1,0],[1,1],[1,2],[2,2]];   for(var i in expected){    same([path.nodes[i].getX(), path.nodes[i].getY()], expected[i], "initial: path node " + i + " is as expected");
init: function() {     this._super.apply(this, arguments);     var childViews = get(this, 'childViews');
if (templ_rows.length !== 1)         throw "template not found";        var arrAddressDefinitionTemplate = JSON.parse(templ_rows[0].definition_template);
'use strict'; var Joi = require('joi') , _ = require('lodash'); module.exports = function (schema) {
},     *changeNavbar({         payload
if (typeof methods === 'object') {             for (var i in methods) {                 Child.prototype[i] = methods[i];             }         }
var __i18nGlobal__ = this; define({
, `report-to ${ reports.join ` ` }`
showingChangedHandler: enyo.inherit(function (sup) {    return function () {     sup.apply(this, arguments);
dojo.connect(this.gitPassphrase, "onfocus", null, dojo.hitch(this, function(){    this.isPrivateKey.checked = true;    this.gitSavePrivateKey.disabled = false;    }) );
, SELECTOR_EDITABLE_BODY = 'body[contenteditable=true]'     , SELECTOR_INPUT = 'div[contenteditable=true],body[contenteditable=true],textarea,input'     , SELECTOR_GMAIL_EDIT = 'div.aoI'
if ($(this).prop("checked")) {                         node[keyparts[i]] = 1 ;                     } else {
} else {        named_transformation = $.grep(base_transformations, function() { return this != null && this != ""}).join(".");        base_transformations = [];
for(var i in joints_source)     {
if (arguments.length == 0 || arguments[0] == this.dimensions()) {             switch (this.dimensions()) {
drawer.setLayout(this.createRightDrawerLayout());             drawer.getGroupForEntry = lang.hitch(this, function(entry) {                 return this.getGroupForRightDrawerEntry(entry);             });
self.drag(e);         }.bind(this));       }
, topologyOptions: topologyOptions
result = results     } else if (this.options.hasJoin === true && queryResultHasJoin.call(this, results)) {       result = prepareJoinData.call(this, results)
return function(refShorthandDefaultPos){    var start = this.start ;    var rhs,r = base.apply(this,arguments);
this.top = this.bottom = {     left: data.target.offset.left,
const YearRange = (options) => {     this.options = options;
this.actions = {       ProjectCreate:                  function *() { yield 'hello' },       StageCreate:                    null,
return Lua; })(typeof module !== 'undefined' ? module.exports : this,  ENVIRONMENT_IS_NODE ? global : this,
this.value   = value;     this.message = `Invalid value: ${value} in option ${option}`;   }
Compiler.prototype.page = function find(page, assets) {   var css = page.dependencies['.css'] || []     , js = page.dependencies['.js'] || []     , compiler = this;
this.dataRequest('edge', 'store', { edgeIds: edgeIds }),                 this.dataRequest('ontology', 'concepts'),                 this.dataRequest('ontology', 'properties')             ]).done(function(results) {
this.time = time;    }    for(var layer in this.layers){     this.layers[layer].trigger(eventId, event);    }    if(eventId === 'tick'){
if ( !isValue || !this._settingFromInput ) {             TextView.parent.propertyNeedsRedraw.apply( this, arguments );         }
for (s in meshdata) {     mdat = meshdata[s]     var m = new BABYLON.Mesh( 'terr'+matID, self._scene )
.then(function(diffs) {         return _.map(diffs, this._normalizeDiff);     });
if (configuration.renderOn !== null && !angular.isString(configuration.renderOn)) {         throw ('renderOn must be a string');       }       if (configuration.renderOn !== null && configuration.renderOn.length < 1) {
]);     me.callParent(arguments);
util.forEachOwnProperties(this, function(value, key) {         this[key] = null;     }, this); };
var headers = headerTransforms.forRequest(ctx, this);     return {
{   el.on.apply(el, arraySlice.call(arguments, 2));   if(releaser)     releaser.push(([ el, el.off ]).concat(arraySlice.call(arguments, 2)));   return wrpFunc(arguments.callee, null, [ el, releaser ]);
value: function buildAsyncTree() {       var curIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;       var tree = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.parsedCommands[0];
if (cbFunc[0] === this.$name) {         const self = this;
el.addEventListener(val[0], function() {             this.method(val[1]);           });
var path = require("path")   , expect = require("expect.js")   , fs = require("fs")
typeof pFromEnter !== 'boolean'){                      var lParent = this;
info: colorConsole.info,     warn () {       colorConsole.warn.apply(null, arguments)       dailyfile.warn.apply(null, arguments)     },
fs.stat(file, function(err, stat) {         if (stat && stat.isDirectory()) {           walkDir(file, function(err, dt) {             for(var a in dt){               var filename = path.parse(a).name;
items: []       , cache: {}       , processing: false       , timer: null
if ( hasNoArguments ) {           listener( arguments );         }
const promise = Promise.resolve(definition(rootSuiteBrowser));     const testName = this.test.fullTitle();
, knexMocker = require('../../../testUtils/mockKnex')   , Model = objection.Model   , QueryBuilder = objection.QueryBuilder   , ManyToManyRelation = objection.ManyToManyRelation;
} else {    this.unicorn_show_error();   }
*edges() {       for (let u in vertices) {
function e() {                  return null !== t && t.apply(this, arguments) || this              }
assert.equal(curr, prev + 1);       var lastStrategy = this.completer.strategies[this.completer.strategies.length - 1];       assert.strictEqual(lastStrategy, strategy);
pageInstance.open(endpoint, settings, function (status) {         console.log('attempting to POST: ', settings.data.substring(0, 50), ' to ',endpoint,this.config);         if (status !== 'success') {
return URLs.find({userId: this.userId}, {         limit: limit         , sort: {timeModified: -1, timeCreated: -1}     });
console.error(err);         throw "Error on keyspace creation. Aborting unit tests.";     }
, _mapReduceQuery   , _bucketizeModelName   , _serializeForDataType;
error() {     if (typeof arguments[0] === 'string') arguments[0] = this.prefix + ' ' + arguments[0];     this.logger.error(arguments);   }
if (this !== expectedThis) {         $ERROR("'this' must be same as for function called without explicit this got " + this);     }
var series     , sum = 0     , min = Number.MAX_VALUE
this.state.configfetched = true;             propertiesFromBackend.forEach(function (property) {               this.state.plugin.properties[property] = this.state.plugin.properties[property] || '';             });
var self = this;     this.inheritedAsync( checkPermissionsGet, arguments, function( err, res ){       if( err ){         cb( err );       } else {
return foo(10,'sss',1);  } assertTrue(testcase.call(this));
this.debug = function() {     arguments[0] = t(arguments[0]);     logger.debug.apply(logger, arguments);   };
var named = require('node-named')   , EventEmitter = require('events').EventEmitter   , Logger = require('./logger')
if (result != null) {           for (let i in result) {             result[i] = result[i].toLowerCase()
} })(typeof window === "object" ? window : this, typeof CSSwhat === "undefined" ? require("CSSwhat") : CSSwhat);
var copy = {};    for (var cmd in this.list) {     copy[cmd] = this.list[cmd];    }    return copy;
console.warn('[swan instance mismatch]', this.data.compId, this, vms);         callback();
if (this.version !== 2 && this.version !== 3) {         throw "SenchaJSBuilder: Unsupported version: " + this.version;     }
shouldDisableOrderButton: computed('isUnverified', 'hasTicketsInOrder', function() {     return this.get('isUnverified') || !(this.get('hasTicketsInOrder'));   }),
}         return this.editing(false);       }, this))     }, this);
constructor(tracer) {         this._tracer = tracer;         this._uuid = this._generateUUID();
etag () {  return this.hash( array.cast( arguments ).join( "-" ) ); }
var self = this;       image.addEventListener('load', function() {         if (self.image == this) {           self.setImage(this);
for (x in labelledByIds) {                 var labelledByElement = element.ownerDocument.querySelector('#' + labelledByIds[x]);
;; return module.exports; }).call(this);
for (var secuirtyOption in $scope.requestModel.security) {       var auth = AuthManager.getAuth(secuirtyOption);
return function(event) {       return __method.apply(object, [(event || window.event)].concat(args).concat($A(arguments)));     }
mediaTypes: [     'audio/mp3','audio/ogg','audio/oga','audio/wav','audio/mpeg', 'audio/mp4'     ,'video/mp4','video/webm','video/ogg'     ]
poolTable.setBombNumber(game.bombNumber);      },    undefined, this);      goog.events.listen(game, eightball.Game.EventType.BOMBTICK, function (e) {
this.regionsetViewer = null;         this.embeddedTools = [];     }, {
script.propagateEvents( this.isPropagatingEvents() );                     script.maxRecursion = this.maxRecursion;                 }
() => {         dispatchEvent.bind(this, view.doc, 'DOMLocalized', langs);         view.observer.start();
} else if (mode == MODE_GEN.TEXT) {                     var output = new String();
add: function (target, offset) {     var args = this.target(target, offset);     args.objects = exports.prepareOutput(arguments[arguments.length - 1]);     this.invoke('view.add', args);
var actual = (films[seriesName] && films[seriesName].length) || 0;   this.assertEquals(parseFloat(numberOfFilms), actual, 0);  });
availableActions: function() {     var isActive = this.get('isActive')=== 'active'? true: false;     let l = this.get('links')||{};
for (var id in this._variables) {         var variable = this._variables[id];                  if (variable.type === undefined) {
var filename = this.builder ? fromFileURL(address) : address;   var outname = this.builder ? fromFileURL(outAddress) : outAddress;   return System['import']('lesscss', module.id)
buildRawList() {     var args = Array.prototype.slice.call(arguments);     if (args.length < 2) {
function UnboundModel() {       Model.apply(this, arguments);     }
}else{                 if(!this.lastValue){                 }                 len = this.v.length;
'Must have ENV global set to detect CLIENT/SERVER.');   var storeNames = Array.prototype.slice.call(arguments, 0);   var result = {};
};         if (text) throb.appendChild(this.createTextNode(text));         throbber.appendChild(throb);
'facetItems': [],         'selectedItems': new Object(),        };
if (j$.util.isUndefined(obj[methodName])) {         throw methodName + '() method does not exist';       }
receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Array]') {
function Int64(lo, hi) {         Uint64.apply(this, arguments);     }     function numToDigits(num) {
this.activeIp = Monitor.activeIp;   this.process.send('' + this.id + '|' + slice.call(arguments).join('|'));  }
return [value];       }) : Chartist.normalizeDataArray(Chartist.getDataArray(this.data, options.reverseData), this.data.labels.length)     };
return cb();             }.bind(this))             .catch(function (err) {
constructor({target, property, values}) {         this.values = values;         this.dropDownLabel = Icon.makeLabel("chevron-circle-down", {
isInstance : function(value) {   throw 'Abstract method [isInstance].';  },  CLASS_NAME : 'Jsonix.Schema.XSD.AnyType'
_results = [];       for (cls in name.split(' ')) {         _results.push(el.classList.add(cls));
var util = require('util')   , BufferedSender = require('./buffered-sender')   , Polling = require('./polling')   ;
if (is.object(value)) {     for (var opt in value) {       value[opt] = replaceProjectIdToken(value[opt], projectId);     }   }
var forward = function () {   var self = this   self.move('forward')
var ret = {};   for (var section in data) {     var sections = section.split(':');
}         return $(this);       }
function AnimationUtilApply(anim, opt_target) {  var me = arguments.callee;   if (anim.children && anim.children.length !== undefined) {
function replaceImages(options = {}) {   const res = id => this.resolve(id)   function transformer(tree) {
callback = (callback != null) ? callback : defaultCallback;      $.fn.embedly.embedArray = new Array();
} else {                 throw "only file to file supports";             }
', cm, data);
} else {         this.set('teamId', null);       }
} else {       templateParse(this, null, null, null, fetchFrag, 'update')     }
var axis = this[dimension];       var size = axis.rangeBand() / this.groupsOf;       var gutter = size * 0.1;       return size - gutter;     };
}       }.bind(this);       this.resetFilter();
},   sendUpdate: observer('type', 'availability', 'zoneAutomatic', function () {     const type = get(this, 'type');     const out = {};
var Graph = function() {     this.nodes = new Object();     this.edges = [];
if (title.length > 20) {       throw 'Title cannot be longer 20 characters.';     }
String.prototype.underscore = function() {     return underscore(this);
if (_isFrozen) {         freeze.call(this);       }     }
noCoverTrig: true,         width: this.UIBootstrap ? this.menuWidth * 2 : this.menuWidth,         trigHeight: this.UIBootstrap ? this.selectedHeight + 4 : this.selectedHeight,
exports.getIds = function () {     this.getAllIds.apply(this, arguments); };
if (lines.length > 0) {    for (var i in lines) {     lines[i] = "<" + (tag.match(/^a\s?/i) ? replaceSlug(tag, lines[i]) : tag.match(/^option\s?/i) ? replaceValue(tag, lines[i]) : tag) + ">" + lines[i].trim() + "</" + close + ">";
function e() {             return null !== t && t.apply(this, arguments) || this         }
function() {         this.stateTransition_(lf.proc.TransactionState_.ACQUIRED_SCOPE);       }, this)); };
function initiateTableFilter(data, filterDiv, tableDiv) {   $('.clear').on("click", function() {      console.log(this)     $(this.id + ".noMatches").css("visibility", "hidden")
} else {                     $(this).val('');                 }
}     }   }.bind(this));   return routes
function Class( args ) {         if ( this instanceof arguments.callee ) {
if (configuration.modelType !== null && !angular.isString(configuration.modelType)) {         throw ('modelType must be a string');       }       if (configuration.modelType !== null && configuration.modelType.length < 1) {
var $export = require('./_export')   , sign    = require('./_math-sign');
var source = container._source     , deps = this.dependencies     , args = []
} else {     newMessages[messageId] = function() {      return `${messageText(...arguments)} (${ruleName})`;     };
var verificationFields = new Array();  var verificationFieldLength = 0;
var b = npm.bin     , PATH = osenv.path()
}) Transaction.prototype.get = promisify(function (key, cb) {   var self = this   if (key == null) throw new Error('A key must be given as an argument')
if(typeof name === "object"){    for(var x in name){     this.set(x, name[x]);    }    return this;
if (a || b) {       return opts.fn(this)     }else{       return opts.inverse(this)     }
});     _.extend(targetUnit.guide[dimension], _.omit.apply(_, [guide_dim].concat[properties])); }
, 'docs-server.js'             , 'dom-initial.js'             , 'components.js'
var realLoader = moduleModule._load;   moduleModule._load = function () {     var inv = new RequireInvocation(arguments[0], arguments[1].filename);     var parent = currentInvocation;
items.forEach(function(item) {       this.upsert(item);     }.bind(this));   }
me.editableCondition = me.editableCondition || NX.Conditions.isPermitted('nexus:capabilities:update');     me.callParent(arguments);   },
triggerEvent(handler, this.context, this.arguments);     return this.arguments[0]._active;
},                             on: {                                 success: Y.bind(function() {                                     this.showMessage("success", "Script saved");
console.log(arguments.callee);     throw new Error("Callback was already called.");
var mod = require('./tasks/' + file), name;         for (name in mod) {             exports[name] = mod[name];         }     }
}   }  }  for(var i in this.nodes) {   this.nodes[i].RIGHT = this.nodes[i].LEFT = this.nodes[i].UP = this.nodes[i].DOWN=0;
for (const key in this.map_) {       list.push.apply(list, this.map_[key]);     }
} function setAttribute () {  this.element.node.setAttribute( this.name, safeToStringValue( this.value ) ); }
}.bind(this);     var handleSystemMsg_ = function(msg) {     }.bind(this);     var handleGameMsg_ = function(msg) {
var canvas = element.find('canvas')[0]           , g = canvas.getContext('2d')           , positioner = element.find('div')[0]         function vendorBackingStorePixelRatio(g) {
}             this.componentManager.register(axis.name, Axis, axisParams);         }, this);     },
const createTree = function(adapter, items, parent) {   this.items = items.reduce((res, item) => {     const next = parent
if ((e.type==='change' && this.lazy) || (e.type==='keyup' && !this.lazy)) {     this.curValue = e.target.value;
} else if(serializer !== false){    return typeof serializer === "function" ? serializer.call(map, val, attr): oldSingleSerialize.apply(this, arguments);   }
var old = require('querystring')   , qs = require('./')   , times = 100000;
for( var i in self._equipments_columns ){   switch( self._equipments_columns[i][1] ){    case ' ':
if (selector.match(Prime.Utils.spaceRegex)) {       throw "ancestor selector must not contain a space";     }
irc: {     raw: function() {      testableNetwork.lastCommand = Array.prototype.join.call(arguments, " ");     },
if (_.isUndefined(map[ctor])) {                         throw "opts.buffer must be either Uint8Array or Float32Array";                     }
self.openConnections[this.id] = this;     }
let errors = parseShaderErrors(message);         throw { type, message, errors };     }
module.exports = {     runGetTest: runGetTest   , runGetAllTest: runGetAllTest   , key: key   , populate: populate
}    }    this._mLoadedSections[sNodeId] = aLoadedSections;    }   }
let { clusterTemplate: { defaultRevisionId = '' } } = this;     return this.id !== defaultRevisionId && !get(this, 'clusterTemplate.isReadOnly');   }),
if (!/^<(([0-9A-F][0-9A-F])*)>$/i.test(src))    throw 'eval: not a hex string literal';
,ajax_success: function(response){                 console.log('ajax_success');
applyCtx: function (changes) {             return this.applyBase.apply(this, arguments);         },
if (typeof method === "string") { method = target[method]; }     if (!method) { throw "You must pass a method to removeObserver()"; }
init() {             this._super.apply(this, arguments);             this.formatter = this.container.lookup(`ember-intl@formatter:format-${formatType}`);
for (var i in body) {                 if (typeof(body[i]) !== 'string') {                     throw new Error("An interface definition must be a string, defining the property type.");                 }
this.removeWaypoint(e.marker, function() {       console.log(arguments);     });
t.deepEqual(original,register, 'deepEqual case: '+description);         for (var index in register) {             var item = register[index];
var args = [].slice.call(arguments);   if (this.emit.apply(this, args)) {     return true;
val[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8 ? 2 : biff}); break;   default: throw "Bad SerAr: " + val[0];   }
var vec2 = require('../math/vec2') ,   Nearphase = require('./Nearphase') ,   Shape = require('./../shapes/Shape') module.exports = Broadphase;
this.label = null;     this.place = null;     this.position = null;
, mouseenter: function (e) {             this.mousedover = true
constructor(node, edges){     this.getFrom = 1     this.goTo = 0     super(node,edges)
case AST_INCLUDE:    throw 'TODO program_gen' + stmt.type;   case AST_NAMESPACE: {
var first = false;       for (var i in fields) {         if (!first) {
$('a[data-remote],input[data-remote]').live('click.rails', function(e) {   $(this).callRemote();   e.preventDefault();
}     super.add(...arguments)     return this.__watchItem(item)
}) &&       p.every(function(i) {         return this.checkConnectionDetails(x[i], y[i]);       });
Promise.prototype.error = function () {   var args = util.args(arguments);   return this.emit.apply(this, ['err'].concat(args)); };
this.app[verb || 'all'](path, targetFn);    return;
if(arguments.callee(node, name) == "none") {                 ret = "0px";
var txn = {         getBinary: sinon.stub().returns(new Buffer(new Array())),         abort: sinon.stub()
} else {         throw "The length of an unsigned integer constant value must be 4!";       }
async deleteIndex(indexName) {         if (this._db.connected) throw 'Cannot delete index while connected';         this._indicesToDelete.push(indexName);
callback(null, groups);              }.bind(this));          }        },
player.videoaddress=[];    for(var no in videosrc){     player.videoaddress.push({res:no,url:videosrc[no]});    }    if(!player.videoaddress[0]){
case PARTIAL: return new DomPartial( options, this.docFrag );    default: throw 'WTF? not sure what happened here...';   }
rs1imm = rs1imm.split("(")[1];             this.rs1 = parseInt(rs1imm.replace( /^\D+/g, ""));         } else {
el._boundEvents[type].push(listener);     el.addEventListener.apply(el, arguments);   }
switchClonesSrc: observer('virtualSrc', function () {     Ember.run.scheduleOnce('afterRender', this, '_switchClonesSrc');   }).on('ready'),
for(let item in filters_keys) {                     let key = filters_keys[item];                     filters.push([key, this.$route.query[key]].join('='));
Builder.prototype.initTargets = function (targets) {  function init (tgts, parent) {   var instances = []    , instance;
, newShare      : React.PropTypes.bool   , updateDataset : React.PropTypes.object
this.organizationUsers.bind('loading', function() {       this._panes && this._panes.active('loading');     }, this);
var titles = this.selection.slice(0);  for (var i in titles) { titles[i] = "'"+titles[i].getTitle()+"'"; }  var result = confirm(_("confirmtable")+" "+titles.join(", ")+"?");
})(this);
module.exports = {   putCloudWatchEvents: persistentRequest.bind(this, putCloudWatchEvents), };
}     if (call) this.app.logger.debug(`${this}generate ${call.constructor.name} from factory.`)     return call
let ids = context.request.ids;   let relatedField = context.request.relatedField;   let relatedType = this.schemas[type]     [relatedField][keys.link];   let options = {
}     }     if (this.type !== 'button' && this.type !== 'cancel' && this.type !== 'submit' && this.name && this.name !== '') {       iterator(this, i);
beforeEach(() => {       this.mixin = make_mixin(default_mixin_spec());     });
];     me.callParent(arguments);     me.down('#proxyFieldSet').add(1, {xtype: 'nx-coreui-repository-docker-proxy-facet'});
if (typeof hook != 'function') {             throw('Unable to register event hook, invalid hook function passed');         }         this.event_hooks[event].push(hook);
}     return this._super.apply(this, arguments);   },
goog.asserts.assert(body);         this.activeDialog_ = new wtf.app.ui.HealthDialog(             db,
music = game.add.audio('boden');     music.onDecoded.add(hasDecoded, this);     music.play();
$(this.element).addClass(this.get('orientation'));  }, this);
if (!parentNode) {     throw 'Reference node has no parent.';   }
newLabel = ( typeof newLabel !== 'undefined' && newLabel.length > 0 ) ? newLabel : curLabel;                         $( this ).text( newLabel );                     } );
module.exports = function(Cam) {  const extend = require('util')._extend   , linerase = require('./utils').linerase   , url = require('url');
function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;
var matcher = require('../').matcher   , parseUrl = require('./parseUrl')   , pathRegExp = require('../').pathRegExp
export function randomCouchString() {     var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
this._client.on('listening', function() {         this.openFlag = true;     });
} catch (err) {     error.call(this, err)   }
, reference: function(attr) {       return SVG.get(this.attr(attr))
this.actions.applyCSSVars(changes.cssVars.newValue)   }   if (changes.panels && !this.state.windowFocused && !this.state.private) {     this.actions.updatePanels(changes.panels.newValue)
if (!ZRINIT_FLAG[fl]) {         throw("Invalid ZRINIT flag: " + fl);     }
case 'oauth':       return rem.promptOauth.apply(rem, args.slice(1));     case 'cookies':
var assetsDirContents = fs.readdirSync(assetPath);   for (var id in realContents) {     var item = realContents[id];
} else if (this.highDefinition === "unavailable") {           this.highDefinition = "available";           changed = true;         }
});             }.bind(generator));         }
list.removeClass('hidden').each(function() {           $(this).find('i').contents().unwrap();         });
this.clearLoadingSpinner();                 this.$('.main-results-content .results').append(this.handleError(i18n['app.feature.search'], xhr));             });
function *createComment(postId) {   postId = new ObjectID(postId);
renameColumnQuery(tableName, attrBefore, attributes) {     var query = "EXEC sp_rename '<%= tableName %>.<%= before %>', '<%= after %>', 'COLUMN';"       , newName = Object.keys(attributes)[0];
}).call(this);
return {     user: store.user.single.user     , newUser: store.user.single.newUser   }
console.warn('OSjs::Core::WindowManager::removeWindow()', 'Got', w);       throw ('removeWindow() expects a "Window" class');     }
if (method) {     return method.apply(target, [].slice.call(arguments).concat([this._cfg.name]));   }   else {
checkIfSufficientBuffer = function () {             var timeToEnd = getTimeToEnd.call(this);             if ((bufferLevel < minBufferTime) && ((minBufferTime < timeToEnd) || (minBufferTime >= timeToEnd && !isBufferingCompleted))) {
_log = function() {     return console.log.apply(console, makeArray(arguments));   };
var log = console.log;     sinon.stub(console, 'log', function() {       return log.apply(log, arguments);     });
};  this.exec = this.run = function() {   const command = Object.keys(arguments).map(key => arguments[key]).join(" ");   const filename = controller.getUUID();
} else {             throw "internal error on Shade.Optimizer.replace_with_notone";         }
} else {         throw "Cannot join a closed paths with another";       }
case "align":                     return ax5.ui.layout_instance.align(this, arguments[1], arguments[2]);                     break;
this.passthrough('http:   this.passthrough('https:   this.passthrough('https:   this.get('/api/auth/session', function() {
exception = _error;         throw "StoreDetails failure: " + exception;       }
if (res.length >= cnt) {         return retcb.apply(null, [null].concat(res));       } else {
debug( 'Current value: %d.', this._yNumTicks );  oldVal = this._yNumTicks;
crypto.getRandomValues(array);     return new Buffer(String.fromCharCode.apply(String, array), 'binary');   };
, common.shipItems  , true  , function () {   console.log(arguments);  }
if (!this.isConsistent(transactions)) {             throw 'Given set of transactions violates rules for combined transactions';         }
it('should display/hide the loader while loading', function () {     this.visView.addOverlay({       type: 'loader'
replaceSelection : function(items) {       qx.log.Logger.deprecatedMethodWarning(         arguments.callee,         "Use 'setSelection' instead!"       );       this.setSelection(items);
function json_newsletter() {  var self = this;  self.body.language = self.language || '';
off(name, handler) {   this.__super.apply(this, arguments);
if (builtInCommand) {     builtInCommand.apply(null, process.argv.slice(3));   } else {
describe('high compression', function() {                     this.timeout(4000);                      it('should succeed', function(done) {
args[0] = files.convertToOSPath(args[0]);   return fs.unwatchFile.apply(fs, args); };
return new H.map.DomIcon(icon, this._getEvents());     }
var node = $(node).parent(function() {     if( this.__ff__ ) return this;   }, true)[0];
} else {      Monogatari.run ($_(this).data ('do'), false);      Monogatari.global ('_CurrentChoice', null);     }
, '    v_fill = unpack_color(fill);' , '    dim = vec4(x, y, r, -r);' , '    v_stroke = replace_stroke;'
Extensions.unregister = function () {   var names = Array.isArray(arguments[0]) ? arguments[0] : arguments;   var groups = this.$groups();
app.post('/connect/:provider/:override?', function *() {     this.session.grant = {
parsePath: function (data) {     function parse() {       var parsed = extend({}, parsePath(this.path), data);       if (typeof parsed.ext === 'undefined') {
Device.prototype.toString = function toString() {   var output = this.family     , version = this.toVersion();
for (var i in files) {         var filePath = path.resolve(dirPath, files[i]),             output   = fs.readFileSync(filePath).toString();
var $container = $("#irs-" + this.pluginCount),                     $body = $(document.body),
var proxy = httpProxy.createProxyServer({})     , domainEnv = core.config.get('publicDomain')     ,publicIP = core.config.get('publicIP');;   return function(req, res, next) {
, path = require('path')   , paperboy = require('paperboy')   , WEBROOT = path.join(path.dirname(__filename), '../static')   , h = {accept:'application/json', 'content-type':'application/json'};
{           script_obj.source_data = new String(script_obj.script_data);           script_obj.line_arr = [];
this.message = tmp.message;     this.method = options.method;     return this; };
addToScene() {     this.objects.forEach(function(obj) {       this.scene.add(obj);     });
else                                 throw "Save is Not Atomic";                         },function(){
function *findOCSP(certificate, issuerCertificate)    {
} else {       var xhr = io.util.request()         , self = this;
[States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ]
var objectProviderFn = function objectProviderFn(type, ids, paths, inScope, changes, onSuccess, onFailure) {  throw "Object provider has not been implemented.  Call ExoWeb.Mapper.setObjectProvider(fn);"; };
it('Get configuration from server', function(done){   curl('http:    var json = JSON.parse(this.body);    expect(json).to.have.property('engine');
, attrList = ['pos', 'color', 'fugue']     , program = initProgram()   init()
"use strict"; var _extends = function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; var z = _extends({}, x);
else                         throw this.type.repr() + " is an atomic type, got this: " + i;                 } else if (this.type.is_vec()) {
}).call(this);
"use strict"; var request = require('request')   , uglify = require('uglify-js')   , child = require('./lib/child')
, bindMethods    = require('../../Object/bind-methods').call   , pad2           = require('../../Number/pad').call(2).call   , pad3           = require('../../Number/pad').call(3).call   , format         = require('../../String/format')
this._inputStack.push([this.xmlNode.documentElement, this, 'result']);     this._initializeObjects = new Array();     this._ids = new Array();     var self = this;
if (!template || typeof template !== 'object') {         throw 'ListFacade "template" must be an object.'       }       if (!template || typeof template.key !== 'function') {
});   this._stream.pause();   this.on('finish', function() {     this._stream.end();   });
exception = _error;             throw "getAddressFromPathId failure: " + exception;           }
module.exports = PointToPointConstraint; var Constraint = require('./Constraint') ,   ContactEquation = require('../equations/ContactEquation')
function() {                 if (!this.isRemoved && this.checkCurrentUrl()) {                     this.maximize();
for (var index in entries) {           var entry = self.config.processEntry(entries[index], data);
$(".hook-list").on("change", '.hook-icon-set', function() {     viewTheme($(this).attr("id"), $(this).val()); });
var error = function (message, options) {         var tmp = Error.apply(this, arguments);         tmp.name = this.name = 'EvaluationError';
if (!((address_ != null) && address_)) {               throw "Missing address input parameter.";             }             observerState = _this.openObserverState(observerId_);
if (typeof inputData !== 'string') {   throw 'LCHErrorInputInvalid';  }
this._adUnit[method].apply(this._adUnit, args);   timeoutId = setTimeout(function () {     timeoutId = null;
for (let t in this.renderable_tiles) {             let tile = this.renderable_tiles[t];
{         for (var path in this._uiSourceCodes) {             var uiSourceCode = this._uiSourceCodes[path];             if (uiSourceCode.originURL() === originURL)
var desired_format     , method_name     , length = arguments.length     , callback =  createCallback.apply(null, Array.prototype.slice.call(arguments) )     ,err
, playInBackground : false   , nsfw : false    };
var instance = this;    var slice = Array.prototype.slice;    var args = slice.call(arguments, 0), index = args.length - 1;
if (file.state() === 'resolved') {           results.push(file.done(function () {             return cb(file, ...arguments)           }))
, sequelizeErrors = require('../../errors.js')   , parserStore = require('../parserStore')('mssql')   , microtime = require('microtime');
edit() {         return this.guild.shard.client.editGuildMember.apply(this.guild.shard.client, [this.guild.id, this.id].concat(arguments));     }
this._runOrStore(function() {       fn.apply(context, [this.hasErrors()? this.getErrors() : null]);     });
var i, _results;     Stagger.__super__.createTween.apply(this, arguments);     i = this.transits.length;
});     this.Super('init', arguments);    }
var Connection = require('./connection')   , events = require('events')   , crypto = require('crypto')
module.exports = suspend.callback(function * (gridModel, columns, viewColumns, exporter, settings) {   assertValidViewColumns(columns, viewColumns);
if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {
beforeEach(function() {       this.templateHelpersSpy = this.sinon.spy(this.itemView, 'templateHelpers');       this.modelInstance.validationError = 'foo';       this.modelInstance.serverError = 'bar';       this.itemView.templateHelpers();
get: function(size) {     for (var i in this.queries) {       var query = this.queries[i];       if (size === query.name) return query.value;     }
var promise = $.when.apply($, _toConsumableArray($.map(constraints, function (constraint) {           return _this10._validateConstraint(value, constraint);
});     };          this.getEncountersOfPatient = function(patientUuid) {         return $http.get(Bahmni.Common.Constants.encounterUrl, {
throw 'Invalid range, cannot remove from ' + range.start + ' to ' + range.end;  }
})   this.timeout(50);   describe('undefined', function (){
var _this6 = this;       var identity = arguments.length <= 0 || arguments[0] === undefined ? this.props.identity || this.props.params.identity : arguments[0];       if (typeof io !== "undefined") {
if (/^data-balloon/.test(this.attributes[attr].name)) {                         $purchase_button.removeAttr(this.attributes[attr].name);                     } else {
commit.parentsDiffTrees(function(error, parentsDiffTrees) {         console.log(arguments);         process.exit();       });
var data = arguments[0];    if(_.isString(data)){     this.data = data;
var feedparser = new FeedParser({silent: true})     , feed = __dirname + '/feeds/nondefaultnamespace.atom'     , meta = {}
return (typeof value === 'number') && ('NaN' == new String(value));             },
var promises = [];    for (var i in ips) {     promises.push(get_req(req, ips[i].host));    }
$(this).addClass("active").siblings().removeClass("active");   window.location.hash = $(this).data("tag");  });
style: { opacity: 1 },         onAnimationEnd: handleAnimationEnd.bind(this, 'second'),       }, {
if (data.collectStatus === 200) {                  let dataSoureTmp = new Array();                  let status = data.lisentersGroupkeyStatus;
} else {             console.log("Reject version: "+mythis.host()+" "+this.status);             reject(this);
var type = null;        for (var typeEntry in types) {         var typeNames = types[typeEntry];
console.info(this.declaredClass + "::" + arguments.callee.nom, arguments);
}             for(var i in edges) {                 var p = objs[edges[i][0]];
module.service('QueryBuilderSrv', function(ZabbixCache, Utils) {     this.build = function (groupFilter, hostFilter, appFilter, itemFilter) {
return function () {       var info = (0, _data['default'])(this, opts.id);       var isNative = this.attachedCallback;
var PersistedModel = require('../../lib/loopback').PersistedModel   , loopback = require('../../lib/loopback')   , path = require('path')
return Widget.prototype._doLayout.apply(this,arguments);   },
var mongoose = require('mongoose')   , Article = mongoose.model('Article')
if (this._stateStack.length > 0) {             throw 'Cannot close database while transactions are active';         }
var qs = require('qs')   , querystring = require('querystring') function Querystring (request) {
gaze('lib
, svg: function(svg) {       var well, len
var startTime = new Date().getTime(),                     renderFrame = _.bind(function () {                         if (!this.inAnimation) { return; }                         var frameTime = new Date().getTime() - startTime,
function e() {             var e = t.call(this) || this;             return e._anim = function () {                 if (e._text1.length > 0) {                     var t = e._text1.charAt(0);
}     this.doc = new jsPDF('portrait', 'pt', 'letter');     this.docWidth = 612;
this.dates = (this.dates || []).concat(res);   this.dates.__proto__ = Object.create(Array.prototype);   var text = wo.w;
function mouseOver() {                 console.log('mouse over')                 console.log(this)                 document.getElementById(gitlab_variables.menuBtnId).className = "is-over is-showing-fly-out"
if (hexCode.length > 2)             result += this.replaceExpr('[0]');         return result;
, util = require('util')   , tick = utils.tick   , Query = require('./query.js')
if (!objJoint.unsigned)      throw "ifOkUnsigned() signed";     callbacks.ifOkUnsigned();
var iterCount = 0; async function * fn() {   for await ([ _ ] of [iterable]) {
return this._run(command, function (err, data) {          then && then(err, !err && this._parsePull(data));       });
this.addItems = function(newItemDicts) {         for (i in newItemDicts) {             tiid = newItemDicts[i]["_id"]
}   insertWithRelated() {     return this.insertGraph.apply(this, arguments);   }
});             $(this).find('.fieldset-delete-button').on('click', function(){                 if(xmltools.confirm_delete($(this))){
constructor(model) {   super(...arguments);   this.model = model;   this.shortcutOff = null;
this.bus = Gibberish.Bus();  console.log("AMP = ", this.amp);  this.sounds.kick.sampler.send(this.bus, this.amp);
this.addToBuffer = function (motionAxisName, value) {         if (buffer[motionAxisName]) {
type: 'string',         set: (data) => {           return this.l = `${data.l} bar`         }
static: true,     args: Utils.wrapArguments(arguments),     returnType: KMeansModel
if (S[i] === '+') {         stack.push(addition.apply(null, stack.splice(-2)));       } else if (S[i] === '*') {
$("#settings_overlay_container .sidebar").on("click", "li[data-section]", function () {         var $this = $(this);         var $settings_overlay_container = $("#settings_overlay_container");
];         for (i in points) {           p = points[i];
{         this.notify("event/broker-stopping", this);         this.notify("event/broker-stopped", this);         this.unsubscribe(this._request_id);
var id = this._elId || this.id;     htmlBufferPush(buf, ' id="' + id + '"' + '>');
this.socket.on('wait_for_phase_two', function(data) {         this.set_status('Player accepted, waiting for match');     }); };
$(this).click(function(e) {           $(this).openModal(options);           e.preventDefault();
compose: function(containerBlock) {     console.log(arguments.callee.caller.name);
Clazz.overrideMethod (c$, "getBfactor",   function () {  return Float.isNaN (this.atom.bfactor) && this.atom.anisoBorU != null ? this.atom.anisoBorU[7] * 100 : this.atom.bfactor;  });
emit: function() {         var sett = arguments[arguments.length - 1];
Logger.prototype.clear = function () {   for (var name in this.transports) {     this.remove({ name: name });
it('can return the result of the executed script', function(done) {       this.timeout(50000);       var listener = function() {
}).call(this);
throw new Error("No writes are allowed after close.");         this._chunks.push.apply(this._chunks, strings);         if (this._tempFile && !this._isWriting)
var acc = init;     for(var p in obj) {         acc = xf.step(acc, [p, obj[p]]);         if(transducers.isReduced(acc)) {             acc = acc.value;
setTimeout(function() {     Completers.filter.apply(Completers, args);   }, 210);
this._client.on('close', function(had_error) {         this.openFlag = false;     });
Circle = new Class(Drawable, {  initialize : function(args){      this.super('initialize', arguments);
function invoke(vararg) {       var params = [domainAndMethod].concat(Array.prototype.slice.call(arguments));       Protocol.InspectorBackend._AgentPrototype.prototype._invoke.apply(this, params);     }
, starReplace = ""   , compTrimExpression = new RegExp("((<|>)?=|<|>)\\s*("                                     +semver+"|"+xRangePlain+")", "g")   , compTrimReplace = "$1$3"
$w('minWidth maxWidth minHeight maxHeight').each(function(dimension) {       this[dimension] = this.options[dimension] || this.findDim(dimension);     }, this);
, formatParam = typeof opts == 'string' ? opts : opts.format       , negotiated = _negotiateContent.call(this, formatParam)       , format       , contentType
if (req.method === 'GET')     return body;   data = yield this.readBody(req, 'utf8', opt);   if (!data)
value: function(callback) {           return Collection.mode.apply(this, arguments);         },         writable: true,         enumerable: false
var utils = require('../utils')   , func = require('./function');
var sw = w * options.density               , sh = h * options.density               , f
);   const maxOutputWireCount = Math.max.apply(Math, [0].concat(outputWireCounts));   const outputGateWidth = (2 + Math.max(7, maxOutputWireCount));
},   refresh: debounce(100, function () {     this.mountStyle()   }) }
const data = this.items(this.context, this._providerSetLocal)           if (data && data.then && isFunction(data.then)) {
if ($.isFunction(this.options.content)) {                     content = this.options.content.apply(this.$element[0], arguments);                 } else {
if ( !InternalStorage[name] ) {       throw 'Invalid InternalStorage API call name';     }
activeClass: 'active',   ariaExpanded: computed('isExpanded', 'treeNodeHasChildren', function() {     return this.get('treeNodeHasChildren') ? this.get('isExpanded') + '' : null;   }).readOnly(),
this.schemaLocation = options.schemaLocation ?     options.schemaLocation : _ol_format_GML2_.schemaLocation_;
const docs = this.meta.docsWith(msg.actor.id);                     const clocks = yield this.clocks.getMultiple(docs);                     DocumentBroadcast.broadcastMetadata(metadata, clocks, [msg.peer]);
Runner_MySQL.prototype._stream = Promise.method(function(sql, stream, options) {   var runner = this;   return new Promise(function(resolver, rejecter) {
console.log(this.rev);           db.get(docId, {rev: rev}, function(err, doc){
if($(this).text().toLowerCase() == 'clear'){             $(".input").remove();
describe('.delete', () => {     let spy       , fixture = require('./fixture')()       , evt1 = fixture.event1
key: 'init',     value: function init(services) {       var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};       var coreOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
let callID = navigationID;         defaultUrl(Delegate(this, function (response) {
})(this, _, d3.data);
return function() {               err = arguments[0];               return sig = arguments[1];             };
this.send.apply(this, [action, player.slot].concat(slice.call(arguments, 2)));  }
if (image == null){                 throw ('Assigned value on Sprite.image is undefined or null. Please double-check image path, and check if the image you want to use is preload before use.');             }
this.translationPath = function(segmentId, translationId)  {
function hideQuestions(all) {         var temp = new Array();         temp = (all && all == 1) ? variables.get.shownQuestions() : variables.questionsToHide;
if (this.meta.hasMethod(attribute.setterName))                          this[attribute.setterName].call(this, setValue)                     else
function calculate_bb(graphs){     for (var i in graphs){         var graph = graphs[i];
let props = {...this.props};       for (let name in this.observed) {         props[name] = this.observed[name].data;       }       return <Component {...props} />;
if (nodes === null) {       throw 'TTS: nodes is empty. make call epub.getTextAndImageNodes().';     }
return this.run('ps -p %s -o args=', this.pid, function ran(err) {     fn.call(this, undefined, !err);   });
, uid = require('uid2')   , DEFAULT_TTL = 1209600    , DEFAULT_TOKEN_LEN = 64
var args = Array.prototype.slice.call(arguments);       args.unshift('progress');       this.emit.apply(this, args);
mtEvtDiscriminator.getEvtInst = function (subsys, cmdName) {     return ArgObj.factory(subsys, cmdName, arguments); };
var toData = os.getData(dir, to);     for (var key in fromData) {       data[fromData[key]] = toData[key];     }   }
var db = require('./db')   , Context = require('./context')   , escapeRegExp  = /[\-\[\]{}()+?.,\\\^$|#\s]/g
this.azureInstanceTypeService = _azureInstanceTypeService_;       this.$httpBackend = _$httpBackend_;
, isNode     = classof(process) == 'process'   , P          = global[PROMISE]   , Wrapper;
if (toResolve === 0) {       deferred.resolve.apply(deferred, resolved);     } else {
throw({value: this.chr, message: this.chr + ' is not a valid chromosome for ' + species.db + '!'});    }
weak32: function (data, prev, start, end) {         var args = [].slice.call(arguments)           , a = 0           , b = 0
},             insertCell () {                 var cell = nativeMethods.insertCell.apply(this, arguments);                 sandbox.nodeSandbox.overrideDomMethods(cell);
var NormalizeNormalAndEyeVector = function ( fnormal, fpos ) {         Node.apply( this, arguments );         this._normal = fnormal;
Pattern.prototype.apply = function (input, day) {          for (var prop in Pattern.PROPS) {              var rule = this.rules[prop];
if (!this.asset_cache.has(key)) this.asset_cache.set(key, this._findAsset(name, pipeline_name, remote))   return yield this.asset_cache.get(key) })
if (typeof parent !== 'function' ) {         throw 'Parent must be a callable constructor';     }
photos = data.photos ? data.photos.photo : data.photoset.photo,                 len = Math.min( this.options.max, photos.length ),                 photo,
if(locale == 'zh_CN'){         this.locale = JSON.parse(fs.readFileSync('./language/'+locale+'.json'));         this.log(this.locale)       }else{
, dirscan = require('./dirscan')   , out = require('./output')   , env = require('../env');
var ms;         if ($.isFunction(opts.mask) && (opts.mask = opts.mask.call(this, opts)), $.isArray(opts.mask)) {             if (opts.mask.length > 1) {
Backbone.Subset.extend = Backbone.Collection.extend; }).call(this);
, locales: []
TextCandidate.prototype.__proto__ = new Object();
if (!((componentDescriptor_ != null) && componentDescriptor_)) {                   throw "Internal error: componentDescriptor_ should be defined.";                 }
this.setLanguage = function (oLanguage) {         $.extend(true, $.fn.dataTable.defaults, {
})(this.exports = this.exports || this || {});
if( !self.oldVal[ searchName ] || self.oldVal[ searchName ] !== searchTerm ) {       $( this ).trigger( 'change' );      }
constructor: function EntityFieldModel() {             EntityFieldModel.__super__.constructor.apply(this, arguments);         },
var bias = new Array();
equalsbar$:'Property %s is not equal to "bar", man... At %s.',             exactlyone$: function() {               return 'my custom error msg for values '+arguments[0]+' at location '+arguments[1]             }
}     };     this.loadDefault = function() {         _this.update(defaultImage, true);     };
if (anonDefine)           throw "Multiple defines for anonymous module";         anonDefine = define;
failure: function ( xhr ) {         this._failConnection();     }.invokeInRunLoop(),
class TaskTable extends React.Component {   constructor() {     super(...arguments);
var req = new XMLHttpRequest(),                 isSuccessful = false,                 self = this;             req.open("HEAD", request.url, true);
const { EmbeddedDocument } = require('marpat'); const { interceptRequest, handleResponseError } = require('./utilities'); const instance = axios.create(this.configuration); instance.interceptors.request.use(interceptRequest);
this.hideResults().search();             window.setTimeout(_.bind(function () {                 this.$('.g-search-mode-choose').popover('hide');             }, this), 250);         },
var setProperty = require('../connection/utils').setProperty   , getProperty = require('../connection/utils').getProperty   , getSingleProperty = require('../connection/utils').getSingleProperty;
}; Document.prototype.update = _.debounce(function() {     return this.write(this.buffer); }, 1000); Document.prototype.load = function() {
}             throw 'The module has not been loaded yet';         },
constructor(config) {         this.config = config;         this.config.guide = _.defaults(
var toString = Object.prototype.toString   , id = toString.call(new Error())   , exceptionRe = /^\[object [a-zA-z0-9]*(?:Exception|Error)\]$/; module.exports = function (x) {
if (err) {         throw "Error "+err+" not expected"     }
if (target[key] && isObject(target[key]) && isObject(add[key])) {       this.mergeJSON(target[key], add[key]);   } else {
add(key, options) {     console.log(arguments)     this._states[key] = options
}     for ( i in props ) {       prop = props[i];
if (!is_feed(feed)) {     this.console.warn(         '%s: bad object type %d %o', db_write_feed_property.name, feed_id,         feed);
{             this._reportProfileProgress(event.data.profile, event.data.done, event.data.total);         }
return part.render(this.partContainer.group());     }).bind(this)))       .then((() => {         this.spaceVertically(elements, {
else      throw { message : "No value found for non-optional replacement '" + key, expression: string, data: data };    }
i = this.shapes[i];    var newShape = new Object()    for(var j in i){
constructor: function TransitionCollection() {             TransitionCollection.__super__.constructor.apply(this, arguments);         }
this.autoend()   return Test.prototype.tearDown.apply(this, arguments) }
self.addFlags(uids, 'Deleted', function(e) {           fnMe.call(this, e, reentryCount + 1, deletedUIDs);         });
if (_.isArray(type)) {             args = _.slice.call(arguments, 1);             type.forEach((name) => { this.on.apply(this, [name].concat(args)) });         } else {
var data = function (connector, SensorStore, logT) {     var me = this;     var logger = logT || {};
map: this.map,       vis: this.vis,       layer: this.layer
label = <label    class={'col-form-label VF-Field__label control-label ' + this.getForm().labelClass}    for={this.name}>
this.appversions = addDefaults({}, k8sEnum.Kind.APPVERSION);   this.basePath =  k8sConfig.getBasePath();
debug( 'New value: %s.', this._xMax.toString() );  this.emit( 'xMaxChanged', max, oldVal ); }
} else {     rest = [].concat.apply([], [].slice.call(arguments, 1));   }
opts = arguments[2] || (!Kind && attrs == kind && arguments[1]) || {};    enyo.mixin(opts, {store: this});
var trackWidth = this.pane.el.width() - this.pane.padding * 2       , pos = ev.pageX - this.startPageX       , barWidth = this.el.width()       , innerEl = this.pane.inner.get(0)
done();     }.bind(this));   });
if (x) {             $(this).find(".glyphicon-triangle-right").removeClass("glyphicon-triangle-right").addClass("glyphicon-triangle-bottom");         } else {
, isFunction = require('./$.is-function')   , global     = $.g   , core       = $.core; function ctx(fn, that){
var util = require('./util')   , _ = require('underscore');
if(this.debug){     console.log("\n\r###### SHEET "+sheetCount+" XML #####\n\r");
module.exports = function Plugin () {   var regExps = Array.from(arguments);   this.apply = function (compiler) {
, wkx = require('wkx')   , path = require('path')   , async = require('async');
if (!pattern.hasOwnProperty(key)) {                 throw 'unknow option: ' + key;             }
if ( this.hasOwnProperty('lookupCache_') ) {     cache = this.lookupCache_;
};       var to = {         x: parseFloat(endX)         , y: parseFloat(endY)       };
function sort (arrayLike) {     var criteria = _makeCriteria(_argsTail.apply(null, arguments));     var len = _toArrayLength(arrayLike.length);
var elm = $(this);         $.get($(this).attr('href'),  function(data) {             elm.closest('.un-us-item').find('.form-inline').html(data).show();
if (arguments.length <= 1) {             return Year.parseText(arguments[0]);         } else {
var log = logger.createLogger('reaper')     , timer
},     execute: function * (op) {       return yield * this.deleteOperation(op.target, op.length || 1)     }
.attr("font-family","Helvetica")       .each(function(dd){vizwhiz.utils.wordWrap(t,this,width-(padding*2),width,false);})     y_offset += text.node().getBBox().height
output = command.split('=>')[1];    var ouptupCache = this.getBlockOutput(String(this.name));    params = ouptupCache[name];
var $, children, each, find, next, parent, prev, siblings, soupselect, _;   var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };   _ = require("underscore");
var getter = this.getEval.apply(this, arguments);
GEPPETTO.Console.executeCommand(actionStr);                                 eval(this.props.metadata.action.replace(/\$entity\$/gi, path));                             }
l.curve = function(_) {     return arguments.length ? c(curveRadial(_, arguments)) : c()._curve;   };
if (newVersion) {         return this._getCacheNameForVersion(newVersion)           .then(caches.open.bind(caches))
var shown = 0;                 for (var i in options.items) {                     var item = options.items[i];
const codeList = [];     for (let concept in conceptList) {       codeList.push(conceptList[concept]['$'])     }
'zoomend': this._endZoomAnim       }, this)     })
var buffer = []     , timer
lib.TestManager.TestRun.prototype.ALL_TESTS = new String('<all-tests>');
const fns =     argsArray(arguments).reverse()   const head =
if (!adapterNpmName) {     throw "The adapter's npm name is required when running init.";   } }
if (payload.email === 'error@user.com') {             throw 'user error'           }
let key, notification;     for (key in this._notifications) {       notification = this._notifications[key];
})     const heartbeat = function () {       this.isAlive = true     }
if (linkHref === href) {           this.set('navService.selectedIndex', this.get('index'));         }       }
debug( 'Current value: %s.', this._aValue );  oldVal = this._aValue;
,common.merchantOrderNumber  , function () {   console.log(arguments);  }
notebook_star_count_exists = function(notebook_id) {         return this.model_.notebook_star_count_exists(notebook_id);     },
obj[prop] = 0;              }.bind(this)          });
injectConfigFilePath: (filePath, configPath) => {     this.inject(filePath, '__CONFIG_FILE__', configPath);   },
this.mockOpts = opts;                     this.method = 'generateInline';                 }.bind(this)             });
module.exports = (function () {   function Pipeline() {     GremlinObject.apply(this, arguments);   }
girder.wrap(imagespace.views.SearchView, 'render', function (render) {         render.call(this);         this.$('.pull-right').append(girder.templates.startIqrSession({             currentIqrSession: imagespace.smqtk.iqr.currentIqrSession
});       onChange = function(value, isValid) {         this.removeClass(this.refs.button, 'btn-success submit-success');         this.removeClass(this.refs.button, 'btn-danger submit-fail');
if (_.isUndefined(value)) {                 throw "parameter " + key + " has not been set.";             }
var process = function(err, trades) {     var price = this.calculateAveragePrice(trades);     callback(price);
Redirect.prototype.redirectTo = function (response) {   var self = this     , request = self.request
this.handleMultiMinusButtonTap = e => {     this.multiData.splice(e.item.idx, 1);     this.change(this.multiData);
let channel = message[CHANNEL]       , headers = message[HEADERS]       , data = message[DATA]       , error = message[ERROR];
if (!settings.url) {       throw "Qajax: settings.url is required";     }
initialize: function(args) {   if (!args.graph) {    throw "Rickshaw.Graph.DragZoom needs a reference to a graph";   }
var entities = [];   for (var key in this._entities) {    var entity = this._entities[key];    if (entity.transformComponent) {
}         }).done(_.bind(function (resp) {             this.render();             this.$('#g-google-analytics-tracking-id').val(
this.pages[data.link] = cygnus.parseHTML(data.html)   },
var canSendMMS = getCanSendMaxMessageSize(arguments[0], isFirefox);
{         that.widgets["statuspane.systeminfo"].setContent(this.tr("Running tests..."));         that.toolbar.setEnabled(false);
util.forEach(range, function(date) {         this._addHlData(datetime.format(date, 'YYYY-MM-DD'), cssClass);     }, this); };
projectionProvided: function() {     return this.get('mapConfig.sources').find( s => s.projection );   }.property('mapConfig'),
collection : function(){ return this._cmd('collection',Array.prototype.slice.call(arguments,0)); },         close : function(){ return this._cmd('close', Array.prototype.slice.call(arguments,0)); },
var Shape = require('../shapes/Shape') ,   Broadphase = require('../collision/Broadphase') module.exports = SAPBroadphase;
$(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));    $(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));    if (Math.abs(delta.x) < Math.abs(delta.y)) {
}   throw 'illegal error correct level: ' + level; };
input.addEventListener("blur", function() {           _store(this);           focus(this);           totalBlock.update();         }, false);
}.bind(this, event);         this._eventInput.off('mousemove', handleMove.bind(this));         this._eventInput.off('mouseup', handleEnd.bind(this));         document.addEventListener('mousemove', this.boundMove);
var scenarioManager = new ScenarioManager(url.format(config.servers.elasticsearch));     this.timeout = 120000;
if (!((objectModelDeclaration_.jsonTag != null) && objectModelDeclaration_.jsonTag)) {           throw "Missing required root namespace property 'jsonTag'.";         }         this.model.jsonTag = objectModelDeclaration_.jsonTag;
}     this.columns.apply(this, columns);     this.values.apply(this, values);     return this;
if (btn == 'yes') {          Ext.each(this.getSelectionModel().getSelections(), function(rec){      this.store.remove(rec);
adaptor.applyStyling = function ($box, $slides, settings) {       var $wrapper = $(document.createElement('div'))         , imgSrc = slideImageURL($slides.eq(settings.bsfaceindex || 0))         , $frag = $()
$.each(asyncWebshims.cfg, function(i, cfg){     webshims.setOptions.apply(webshims, cfg);    });
function() {                 if (!this.isRemoved && this.checkCurrentUrl()) {                     this.maximize();                 }                 this.setActiveItem();
this.contexts = [];    for( i in contexts ) { this.contexts.push( contexts[i].substr( 1 ) ); }    line = line.replace( TodoTxt._context_replace_re, ' ' );
_("%s sequence [%s] was ignored."),         arguments.callee.name, Array.slice(arguments));     }
this.name = ast[1].join('/');     this.constants = {};      });
dispatch(this.unlockMetamask())       dispatch(this.setSelectedAddress())       dispatch(this.updateMetamaskState(result))       dispatch(this.hideLoadingIndication())
file.removeWithoutTrash=function () {                  if (!file.exists() && !file.isTrashed()) throw path+": No such file.";                  lcs(path, null);
var async = require('async')   , Errors = require('./errors')   , fs = require('fs')
});       return $.when.apply($, promises);     },
function proxyArrayMethod(method) {       return function() {         var callback = arguments[0];         return [][method].apply(
default:    throw "unknown type="+(typeof value)+" of "+value;  }
if (remote === undefined) {       throw "unsupported";     } else if (!(remote in config.read().remote)) {
const idProp = this.idProp,       service = this,       cacheService = this.cacheService,
var xmpp = require('../index')   , c2s = null   , debug = require('debug')('server-and-client')   , Client = require('node-xmpp-client')
if (self.debug)                 console.log(name, arguments);             var args = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments));             var newStateObject = self.currentStateMap.toJS();
if (this.output.length !== 2) {      throw 'Output must have 2 dimensions on graphical mode';     }
var width = dim.w- 2*(me.w + be.w + pe.w);        console.log("   "+this.id+" e "+dim.w+" "+width);         widget.resize({t:0,l:0,w: width});
function image_status(status) {  private_msg(this.client, [common.IMAGE_STATUS, status]); }
try {               createdItem = processSingleItem.apply(undefined, args.concat(item));             } catch (e) {
var modulevalue = 0;             var moduleDependencies = new Array();             $.each($('input[dependencies=' + $(this).attr('module') + ']:checked'), function () {
$(this.element).removeClass("horizontal vertical");   $(this.element).addClass(this.get('orientation'));  }, this);
if (max_alt_rows.length !== 1)           throw "not a single max alt level";          var max_alt_level = max_alt_rows[0].max_alt_level;
if(cdsStart > exonEnds)  {   return smallBox( (exonStarts - (Math.min.apply(Math, _.pluck(data, 'txStart')))), (exonEnds - exonStarts - (5 / multiplyingFactor)), multiplyingFactor, strand, label);  }
this.debug.log("Waiting for more " + type + " buffer before starting playback.");                 this.notifier.notify(this.notifier.ENAME_BUFFER_LEVEL_STATE_CHANGED, this, false);             } else {
that.updateHairlineInfo();     this.updateHairlineStyles();     that.attachHairlinesToChart_();
constructor(project, url) {     this.project_ = project;     this.url_ = url;
Vue.filter('transChoice', function(id, number, parameters, domain, locale) {         return this.$transChoice(id, evalExp.call(this, number) || 0, evalExp.call(this, parameters), evalExp.call(this, domain), evalExp.call(this, locale));     });
shell.config.silent = !config.isVerbose;       cb(0, shell[program].apply(shell, programArgs));     } else {
app.listen(8000); function promiseFromStreams() {     return Q.all(Array.prototype.map.call(arguments, function(stream) {         return Q.promise(function(resolve, reject) {             stream.on("error", reject);
var util = require( 'util' )     , glob = require( 'glob' )     , async = require( 'async' )
if (width <= 0 || height <= 0 || width > 65535 || height > 65535)     throw "Width/Height invalid."   function check_palette_and_num_colors(palette) {
$('a.option', doc).click(function(event) {                     var href = this.href;                     var de = jQuery.Event('drop');
if (this._template && isThemeVar && isRefContext) {                  if (parent.type === NodeType.ARGUMENTS) {           throw 'Template theme variables are not permitted as arguments:\n>>> '+Node.toString(parent);         }
\n\n'].join('\n')     , modRewrite = require('connect-modrewrite');   module.exports = function doGrunt(grunt) {
return spawn.apply(null, kill); };
didTransition() {     this._super.apply(this, arguments);     if (config.gaCode) {
if (info.p[0] !== 'c') {      throw "How did we end up with paths other than 'c' and 'a'?";     }
ended.should.equal(false)     await advanceToBlock(this.endBlock + 1)     ended = await this.crowdsale.hasEnded()
var node = this;         this.debug('initialize node');
resolve();       }, this);     }, this);
});   pool.connect.apply(pool, options.auth); }
if (token.tagName === 'html') {          tc._insertElement(this._createElementForToken(token, false));          tc.insertionMode = BEFORE_HEAD_MODE;
else if (Array.isArray(value)) {         obj[key] = value.map(replaceRecordIds.bind(this, records));       }       else {
this.log.debug('Error: %s', err.name)     this.log.debug('Error cause: %s', err.cause.name)     this.log.debug('Error cause message: %s', err.cause.message)   })
var params = isName ? arguments[1] : null;     var newFlash = isName ? arguments[2] : arguments[1];     logger.log('Changing state to {0}', pathQueryOrName || '""');
if (_.isArray(t[k])) {    t[k] = _.without.apply(_,_.union([t[k]],v));   } else throw new Error("Cannot apply $pull/$pullAll modifier to non-array");
}   return function() {     return g.call(null, f.apply(null, argsArray(arguments)))   }
var ol_control_Graticule = function(options) { var self = this;  if (!options) options = {};
, f = require('util').format   , assign = require('./utils').assign   , shallowClone = require('./utils').shallowClone   , authenticate = require('./authenticate');
$scope.userWalls[isEditing].showLoading = true;                 for (k in $scope.newWallOptions) {                     $scope.userWalls[isEditing][k] = $scope.newWallOptions[k];
this.isFunction = function( obj ) {     return toString.call(obj) === "[object Function]";
}).call(this);
for(var conceptUri in parentData) {     var branchHelper,        exactMatchFound;     currentNode = createConceptObject(conceptUri, parentData[conceptUri]);
done();       }.bind(this));     });
ojster.example.templates.Tools.SomeTool = function() {  ojster.Template.apply(this, arguments); };
var constructor = function(elementFilter, indicatorFilter, spec) {       var self = this;
}; })(this);
, Readable = require('stream').Readable || require('readable-stream').Readable   , Define = require('./metadata')   , CoreCursor = require('./cursor')   , CoreReadPreference = require('mongodb-core').ReadPreference;
key.empty();  var keys = new Array();
if (!(requirement in require_.modules)) {                 throw 'dependency not loaded: ' + requirement + '.';             }
var OPACITY = 1;   var $map = this.$('#' + this.mapId);
method.apply(container, arguments);                 }, this);             }, this);
this.dev = null;   this.gnubbyInstance = ++usbGnubby.gnubbyId_;   this.cid = usbGnubby.BROADCAST_CID;   this.rxframes = [];   this.synccnt = 0;
if ( isFresh && Application.isDeveloperMode ) {     this._logger.fine ( new String ( "Import \"" + name + "\":\n\n" + result ));    }
swalPromiseResolve(resolveValue || {})   globalState.deferDisposalTimer = setTimeout(disposeSwal.bind(this), DISPOSE_SWAL_TIMEOUT) }
.attr('title', layer.get("title") || layer.get("name"))     .click(function(e){ $(this).prev().click(); })     .attr('unselectable', 'on')
return this.autorun(() => {   let filter;   const data = Template.currentData();
}     tx.timestamp = parseInt(this.getBlock(tx.blockNumber, false).timestamp, 16);     if (!payload.mutable) {
newProps[e.target.name] = e.target.checked;         this.props.onChange(newProps);     }),
} }).call(this);
if (byteArray === undefined) {     throw 'dicomParser.parseDicom: missing required parameter \'byteArray\'';   }
class TaskDetail extends mixin(TabsMixin, StoreMixin) {   constructor() {     super(...arguments);     this.tabs_tabs = {};
}.bind(this));   }.bind(this);   return KeyboardHandler;
if (typeof (err) === 'string') {       formattedMessage = formatter.apply(null, arguments);       err = props = undefined;
Handler.call( this, fileName );  this.groups      = [];  this.xSects      = [];  this.setCRS( null );
console.error("Error uploading selfie", err);       }.bind(this));     }
GeneratorFunction.prototype.goThen = function (onFulfilled, onRejected) {     return this.goWith(arguments).then(onFulfilled, onRejected);   };
else {                 throw 'i18next is not loaded';             }         };
return Promise.reject(error);             }.bind(this));     },
function Matrix () {       Element.apply(this, arguments)
if (err) throw err     for (var x in results) {       const guildRss = results[x]       const guildId = guildRss.id
run(options) {     this._super.apply(this, arguments);
{             this.query = this.cachedQueries[this.activeField.type] = query;
var _ = require('underscore')   , Mongoose = require('mongoose') function mongooseRest (schema, options) {
if ($div.length === 0) {       throw 'DIV StringMeasurement does\'nt exist';     }
, Store = require('../store')   , assert = require('assert')   , redis = require('redis');
MultiLevelMenuUtil.getTargetRouteIndex = function (router, targetModuleId) {             for (var routeIndex in router.navigation) {                 var route = router.navigation[routeIndex];
}       }.bind(this));       if (!hasVisibleNodes && this.parentNode.$node) {
this.FEATURE_COLLECTION_PARSERS = {};   this.FEATURE_COLLECTION_PARSERS[_ol_format_GMLBase_.GMLNS] = {     'featureMember': _ol_xml_.makeReplacer(
var ss = {}   yield * this.ss.iterate(this, null, null, function * (n) {     var user = n.id[0]
const fn = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };
path = ' ' + path;   return sugarskull.Router.prototype.dispatch.apply(this, arguments); };
var nodeListToArray = function nodeListToArray(nodeList) {   return Array.apply(null, document.querySelectorAll(nodeList)); };
Ember.tryInvoke(this, name, args);     this._super.apply(this, arguments);   },
}         return self.explore.apply(self,args);     }
function get(target, propertyKey ) {   var receiver = arguments.length < 3 ? target : arguments[2]     , desc, proto;   if (anObject(target) === receiver) return target[propertyKey];
if (message instanceof String) {   _.eachKey(this[subscribersProperty]._patternMessageSubscribers,     function(patternSubscribers, pattern) {
jQuery('input[name^="'+vessel+'-"]').each(function (index) {   $(this).parent().parent().parent().show();   }
if (obj === undefined)         throw('retain_array: array is not an argument');     for (ix=0; !(retained_arrays[ix] === undefined); ix++) { };
self._model.addChild(leftTypeStructDef);             self._model.accept(this);         });
onVMouseMove: React.autoBind(function(event) {         if (this.props.floating) {             event.preventDefault();
var backListener = function() {this.view.fireEvent('android:back', null);};
beforeEach(function() {         utils.beforeEach(this);          state = new RoomState(roomId);
if(arguments.length === 1) {       return this.validator.validate(arguments[1]);     }
, eslintConf = require('eslint/lib/config')  , extend = require('lodash/object/extend')
var child = new (forever.Monitor)(script, childConfig);   child.on('exit', function () {    console.log(arguments);    console.log(script + ' has exited after 3 restarts');   });
function valueNull() {         delete this.value;       }
this.width = width         this.roomObjects = new Array()         this.updatableObjects = new Array()         this.backgroundTiles = new Array(height).fill().map(x => new Array(width))
pickNarrativesBySet(narrative_set) {         let narratives_in_sets = new Object()         for (var i = 0; i < narrative_set.length; i++) {
var scalingFactor = Math.min(worldSize.x / myWidth, worldSize.y / myHeight);     var desiredPosition = myBounds.topLeft().subPt(worldSize.subPt(this.owner.worldPoint(pt(myWidth, myHeight))).scaleBy(0.5));
this.form = this.app.form;     this.record = this.app.record;     this.sendNotification = this.app.sendNotification;     processAlertMessage(this);
try{             this.removeListener("connect",arguments.callee);
let options;     let args = Utils.sliceArgs(arguments);     const last = _.last(args);
, app = express()     , moduleLoader     , bootstrappedEnv;
this.iv = iv;         asm.init_state.apply( asm, iv );     }
'use strict' var request = require('../index')   , tape = require('tape')
if (!SPARK) {         throw "Soy templates must be initialized to SPARK-namespace before loading spark-bootstrap.js";     }
const loaderUtils = require('loader-utils'); module.exports = (input) => {   const { text } = loaderUtils.getOptions(this);   return input + text;
var gun = Gun({   peers: 'http:  ,s3: require('../../test/shotgun')  });
extractCSS = function( arrayOfStyles, styleObj){     var i, val, out, len = arrayOfStyles.length, css = new Array();     for( var i = 0; i < len; i++){
function handleInputs(widget, config) {         console.log('handleInputs', arguments);         var inputs_container = widget.append('div');         inputs_container.classed({'chart-inputs': true});
function () {  return this.getProteinStructure ();  });
constructor(tempVarTransformer, protoName, thisName, internalName) {     this.tempVarTransformer_ = tempVarTransformer;     this.protoName_ = protoName;
...props,             title: this[ast.identifier].title,             alt: ast.alt,
{         for (var i in events)             this._profiler.dispatchEventToListeners(WebInspector.PowerProfiler.EventTypes.PowerEventRecorded, events[i]);
var target = this._parentNode,         node = arguments[arg],         ret = _super.apply(this, args);
var path = "notes/" + filename;         var promise = this._createPromise(Noted.dropbox.readFile, arguments)         promises.push(this._createPromiseRead(path));       }.bind(this));
it('ordering', function() {       this.setContainer('<p>012</p><p>456</p>');       let editor = new Editor(this.container);       editor.formatAt(0, 2, 'bold', true);
, multi     = 5      , elements  = Object.keys(map)
typeForDate: function() { return this._super.apply(this, arguments); },
this.props = props;         this._vdom = createElement(h(this.tagName));         document.body.appendChild(this._vdom);         this._boundRender = () => {
}             throw "melonJS (me.Entity): Shape (" + index + ") not defined";         },
catch (e) {  }    } assertTrue(testcase.call(this));
}         throw 'you need to provide either an URL or CSV data.';     }
let fullSelector = buildSelector(this, context, selector, options);           let container = options.testContainer || findClosestValue(this, 'testContainer');           context.assertElementExists(fullSelector, options);
var findAutoIncrementField = function() {     var self   = this       , fields = this.QueryGenerator.findAutoIncrementField(this)     this.autoIncrementField = null
params.imageClass         = arguments[0].imageClass || defaultParams.imageClass;         params.callback           = arguments[1] || null;
Notification.prototype.bind = function(){     Gaffa.Behaviour.prototype.bind.apply(this, arguments);     var behaviour = this;
rendrExpressApp.use(function(req, res, next) {     var app = req.rendrApp       , session = req.session;
it('should validate for string', function () {     this.validator.validate('1', {'type': ['number', 'string']}).should.be.true;     this.validator.errors.should.have.length(0);   });
{         this.notifyFirebug(arguments, "groupEnd");     };     this.groupCollapsed = function()
const done = this.async();     const insight = this.insight();     this.prompt({
String.prototype.matchAll = function(regexp) {   var matches = [];   this.replace(regexp, function() {     var arr = ([]).slice.call(arguments, 0);
function() {      $(this).text(gettext("Show"));     $(this).closest("fieldset").addClass("collapsed");     return false;    }
function publish (topic, data) {   postbox.notifySubscribers(data, this[privateDataSymbol].namespaceName + '.' + topic);   return this;
} else {             return MonthDay.ofNumberNumber.apply(this, arguments);         }
}     throw 'Unable to determine scrollTop of the window';   }
var tile = prenderer.getTile(null, plevel, pface, px, py, "neighbour of " + name);                     tile.onDestroy.add(this._onNeighborTileDestroyed, this);                 });
else if (targ0 === 'object') {       fields = arguments[0];       return adt.record(function (r, field) {         for (var name in fields) field(name, fields[name]);       });
var shortName = basename(framework, SUFFIX)     , frameworkPath = join(framework, shortName)     , lib = core.dlopen(frameworkPath)
, groupBy: {}         , itemIconTemplate: null         }
, StringDecoder = require('string_decoder').StringDecoder   , assert = require('assert')
class NodeDetailPage extends mixin(TabsMixin, StoreMixin) {   constructor() {     super(...arguments);
this.upgradeResults = function(files){       for(var name in files){ files[name].results = angular.copy(this.baseResults);}       this.results  = files;
});     if (_.isUndefined(obj.data)) throw "data is a required field";     if (_.isUndefined(obj.data)) throw "columns is a required field";     function table() {
, sequelize = new Sequelize(config.database, config.username, config.password, {logging: false})   , User = sequelize.define('User', { name: Sequelize.STRING, bio: Sequelize.TEXT })
if (info.p.length > 1) {     throw "How did we end up with more than two paths?";    }    if (info.p.length) {
this._isDefined = fcn;  debug( 'New Value: %s.', oldVal, this._isDefined );  this.emit( 'isDefinedChanged', fcn, oldVal ); }
if (!newSurface) {     throw 'Couldn\'t clear and hide the drag surface: missing new surface.';   }
"use strict";     var CONTENT_TYPE = 'application/json',         self = this;     this.STATUS_CODES = {
{                 $(this).hide();             }
this._viewFolder = ''   this.controller = 'base'   beforeFilters = []
};      this._write_nodes_helper( node, on_nodes_written );  }
for (let headerName in params.headers) {         const headerValue = params.headers[headerName];
for (var i in Report.visualizationTypes)      {
uki.each(['width', 'height', 'minX', 'maxX', 'minY', 'maxY', 'left', 'top'], function(index, attr) {         proto[attr] = function() {             var rect = this.rect();             return rect[attr].apply(rect, arguments);         };
} else {         throw "a public key string is required"     }
, MongoError = require('mongodb-core').MongoError   , Readable = require('stream').Readable || require('readable-stream').Readable   , Define = require('./metadata')   , CoreCursor = require('./cursor');
var parents = this.parents || [];       for (var i in parents) {         parents[i]().call(this);
options.classNames.series,         (this.data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i))       ].join(' '));
if (inside[name]) {    this.strong = null;    this.strongSpace = false;   }
this.value = text.slice(0, startLine) + text.slice(startLine + preTab, selStart) +                         sel.replace(new RegExp('\n' + tab, 'g'), function () {
if(/^\<pre.*\>(.*)\n?\<\/pre\>$/.test(this.data)){
url : '/ke/cluster/zk/cmd/ajax?cmd=' + command + '&type=delete',     success : function(datas) {      if (datas != null) {       term.echo(new String(datas.result));      }
, spinner_tpl = '<span class="glyphicon glyphicon-refresh decoy-el-spinner">'   , editor_width = 300    , icon_size = 20
if (validateClient) {                      jq(this).valid();                      dependsOnCheck(this, new Array());                  }
function hotFix1493(map) {     var fixedMap = map       , fixedArray = []       ;
gulp.task('publish', async () => {   for (const key in Object.keys(process.env)) {     console.log(`${key}: ${process.env[key]}`);
if ( jQuery.isFunction( html ) ) {    return this.each(function() {     jQuery(this).wrapAll( html.apply(this, arguments) );    });
}     this.engine.sendAsync.apply(this.engine, arguments);   }
this.info = function() {     arguments[0] = t(arguments[0]);     logger.info.apply(logger, arguments);   };
export default function(d) {   if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this;
, ImageData = canvas.ImageData   , PixelArray = canvas.CanvasPixelArray   , colors = require('./colors');
for (var i = 0; i < modelAtomCount; ++i) {  this.readLine ();  var tokens = this.getTokens ();
this._eventHandlers = {};     forEach(get(this, 'leafletEvents'), function(eventName) {       if(typeof this[eventName] === 'function') {
}).call(this);
})).start(tmp.morph)     }.bind(this))    };
{         for (var i in this.tabs)         {             var tab = this.tabs[i];
constructor() {     super(arguments);
console.log('init_attr start');            _base.init_attr.call(this,elem);                    elem.initData('glue', ' ');
new function(){var a=20;this}
this.supported = [];
gte(refValue, callback) {         return this._check(callback, function(value, valueInfo) {             const normalizedRefValue = this._normalizeValue(refValue, valueInfo);             return (value >= normalizedRefValue);
const mergeReducers = (baseReducer, ...reducers) => {   const combinedReducers = combineReducers.apply(null, reducers);   return (state, action) =>
var Visitor = require('./')   , nodes = require('../nodes')   , fs = require('fs');
"use strict"   var fs = require('fs')     , ws = require('websocket-server')     , spawn = require('child_process').spawn
GooglePlusPanelView.prototype.LABEL_LOGGED_IN = 0; GooglePlusPanelView.prototype.LABEL_NOT_LOGGED_IN = 1; GooglePlusPanelView.prototype.beforeShow = function gppv_beforeShow() {   PanelView.prototype.beforeShow.apply(this, arguments);
var options = this.documentDetailOptions.apply(this, arguments);                 this.documentDetail(options);             }, this);
if (argv.length > 3) {         var theUser = encodeURIComponent(argv[3])           , uri = "/-/by-user/"+theUser+"|"+un         console.error(uri)
if(tOfVal === 'object' && val.length){         var absArr = Array.apply(null,{length:val.length});         var i, len = val.length;
this.processing.set(false);      toastr.success(TAPi18n.__('Room_password_changed_successfully'));
if (typeof this.renderSelf == 'function') {       this.renderSelf.apply(this, arguments);     };
for(var i in categories)          feed.push({ category: [{ _attr: { term: categories[i] } }] });
show = function () {     var cal = $('#' + $(this).data('pickmeupId'));     if (!cal.is(':visible')) {
if (countDown < 1) {       window.clearInterval(this)       fetch(expireSessionUrl, { method: 'POST' })
this.build();    this.$tempTopics.empty();   }, this ), 0 );  }
else {   ExoWeb.Batch.resume(batch);   callback.call(thisPtr || this, true, typesJson);  }
link: function (scope, elem, attr) {         $log.log('link', arguments);       }
var startTs = this.since;     var parsedTrades = [];
if (!this.definitions) {     throw 'Definitions not parsed yet';   }
var TodoViewModel;   var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };   TodoViewModel = function(model) {
this.anchor.set(0.5, 0.5);   this.areaHeight = this.HEXA_HEIGHT = HEXA_HEIGHT;
Size.prototype = new Object;  Size.prototype.constructor = Size;
if (showEditConnectionForm) {       deleteButton = <button type="delete" className="btn btn-default" onClick={this.handleDelete}>Delete</button>     }
var Db    = require('../../')   , Proto = require('../../lib/_proto')   , Base = Db.Base, DateTime = Db.DateTime
try {       let outputFileName = this.options.output || 'bundle.js';       asset = compilation.assets[outputFileName] || Object.values(compilation.assets)[0];
if (2 === Object.keys(room.members).length) {                     for (var i in room.members) {                         var member = room.members[i];
{   if ('sItemListContainerId' in this.opt)    this.oItemList = $('#' + this.opt.sItemListContainerId)[0];
}   if (!dirty && !this._changed) return false;   this._state = assign(assign({}, oldState), newState);
if (!options || !options.template) throw 'Reef.js: You did not provide a template for this component.';
if(this.ready())   K.map.initMap(K.profile.getOpts('map'), function() {    this.enableBBox();
value: function(func) {         return new neume.SynthDef(context, func).apply(null, util.toArray(arguments).slice(1));       },
});       this.once( 'complete', function( error, message, data ) {         console.log( 'generateKey job complete' );
return function *auth(next) {     var session = yield *this.session;     this.user = {};
callback(new Error('Creating profile without roles succeeded. Expected to throw.'));       }.bind(this))       .catch(function (error) {         callback();
func(event, this, pt);       };     }.bind(this);     if (actions.mouseover &&
ssf = ssf || arguments.callee;   if (ssf && Error.captureStackTrace) {     Error.captureStackTrace(this, ssf);
, d = { configurable: true, enumerable: false, writable: true }   , colId = id + 'l_'; module.exports = function (e1, e2) {
{    throw "Error BitMatrixParser";   }
edit.off("show").on("show", function() {             var root = $(this);             root.append(settings_html);
, opacity: function (el, i, val) {       if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;
for (var i in sidebar){     for (var j in sidebar[i]){       list[sidebar[i][j]] = j;     }
}     end() {       this.client.end.apply(this.client, arguments);     }
for (var p in panels) {     object.panels[p] = $.extend(true, {}, w2layout.prototype.panel, panels[p]);
args.unshift(log.color.cyan('mrdoc'));       console.log.apply(console, _.map(arguments, args));
{     throw new Error(sprintf("open %s faild" , arguments[0] ));    }
if (this.keyForAttribute) {       typeClass.eachAttribute(function(key) {         payloadKey = this.keyForAttribute(key, 'deserialize');         if (key === payloadKey) { return; }
if (padded) {       this.formatTokenFunctions[padded[0]] = function() {         return zeroFill(func.apply(this, arguments), padded[1], padded[2]);       };
} else {                          _liA.push('<a tabindex="-1" class="opt '+ $(this).attr("class")+'">'+$(this).text()+'</a>');                     }
else                         throw "float is an atomic type";                 } if (this.type.is_vec()) {
exports.trimZeros = function (num) {     var str = new String(num || '0');     if (str.indexOf('.') == -1)         return str;
var item_elt = $(this.htmlForListItem(path, {                 name: this._name.apply(this, path),                 offset: offset, value: value, raw: value
return PromiseArray.create({       promise: getPromise.apply(this, arguments)     });
_initializeXAxis(xAxisType = 'linear', config) {     var x = null       , xAxis = null;
'click .add': 'onTextEntered'         , 'click .explore': 'onExplore'         , 'click .add-more a': 'onAddMore'     },
TemplateMethods.bind = function(data, view) {   var modelStack = [ data ]     , viewStack = [ view || null ]   this.traverse(function(name, type, element) {
if (messages instanceof RegExp) {         subscriptionAdded(this, messages, subscriber);         return this._registerSubscriber(subscribersHash, messages, subscriber);
mutationName => {       arr[mutationName] = function () {         Array.prototype[mutationName].apply(this, arguments);         arr.__litElms__.map(
grunt.log.write(error.stderr + '\n');       throw 'Failed to run \'' + cmd + '\'';     });
export const now = (...args) => new Now(...args); export const number = (...args) => new Number(...args); export const opacity = (...args) => new Opacity(...args);
if (app == undefined || app == null) {         throw "Missing the required parameter 'app' when calling appsAppGet";       }
var focusIdx = this.state.focused         , value    = this.props.value         , itemDisabled = Array.isArray(this.props.disabled)         , itemReadonly = Array.isArray(this.props.readOnly);
if(this.speed.z < 0)    {     destPos = this.world.body[i].geometry.position.z + this.world.body[i].getGeometry().size.z;     this.geometry.position.z=destPos;     this.position.z=destPos;    }
curAst.dir = curDir;       curAst.alias =         this.alias && `${this.alias}${replaceAlias(dir, this.dir)}/${file}`;       curAst.file = camelize(replaceVue(fileLowerCase));
} function *get_wlfra_result(query) {  var url = 'http:
var _session = require('connect').session   , debug = require('debug')('socket.io-bundle:session'); exports = module.exports = session;
context: {               buttonText: this.gettext('Retry?'),               errorCode: 'PIN_RESET_TIMEOUT'
if (eventName !== 'dispose') {                         this.trigger.apply(this, arguments);                     }
this.getDrives = memoizeImmutableListReference(() => {     return Store.getState().toJS().availableDrives;
if (magic !== Message.MAGIC) throw 'Malformed magic';
if (is_parent) {             ancestor_tree_ids.push($(this).attr("id"));             ancestor_indeces.push(send_tree.length);
exception = _error;             throw "removeComponent failure: " + exception;           }
}));                 }, this);             },
};       this.setEnabledTrack = function(type, enabled) {         var that = this;
Array.prototype.findRanges = function() {   var buckets = {};   for(var i = 0; i < this.length; i++) {     if(!(this[i] in buckets)) {
if(descriptorText.charAt(0) === '('){   args = new Array();   return parseParameters(descriptorText.substr(1), args);
$(window).resize(function () {     var timerID = "timerLayout_"+this.id;     if (window[timerID]) clearTimeout(window[timerID]);
}   trigger() {     this._array.forEach(widget => widget.trigger.apply(widget, arguments));     return this;
root.console.groupCollapsed("[" + self.logname + "] " + obj.constructor.name + "." + prop + "()", [].slice.call(arguments));           value = fn.apply(this, arguments);         }
nodeCache.refresh(this.$root.generator)   updateSlugs(this)
if(merge) {     Object.assign(this, ret);     ret[_merged] = true;
function one_data_to_one_msg(messageType, done) {       var test = tests.makeParser[messageType].data         , expected = tests.makeParser[messageType].msg;
setupController() {     this._super.apply(this, arguments);     this.controllerFor('repo').activate('index');
module.exports = async function * recordIterator (warcStream) {   const recordStream = warcStream.pipe(new WARCStreamTransform())
} else {              var spec = arguments[0];             this.protocol = spec.protocol || "http";
$(this).removeClass('active');             });           $(this)             .find('> div').each( function(i) {               $(this).removeAttr('style').css( 'display', _cache_div[i] );
debug('reading response\'s body')   var buffers = []     , bufferLength = 0     , strings = []
var jobs = [];     for (var i in data.job) {         count++;
for(var effect in this._effects)       {
typeof define === 'function' && define.amd ? define(['jquery'], factory) :  (factory(global.jQuery)); }(this, (function ($) { 'use strict';  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;
var next     this._rightLeafKey = null
if (err) {    throw `error opening file: ${err}`;   }
close: wrap(function() {       if (this._ss) {         this._ss.close();
if (utils.flag(this, 'excluding')) {         val = removeKeysFrom(val, utils.flag(this, 'excludingProps'))       } else if (utils.flag(this, 'excludingEvery')) {
removeSync: () => {                     throw 'Fake Error';                 }
};     })(this));   });   this.Then(/^(?:the )?"([^"]*)" should (?:have|contain) the placeholder text "([^"]*)"$/, function(el, text) {     this.el = this.currentPage[this.transform.stringToVariableName(el)];
, fs = require('fs')   , path = require('path')   , sys = require('sys')   , jake = require('../lib/jake')
if (position + 4 > byteArray.length) {       throw 'bigEndianByteArrayParser.readUint32: attempt to read past end of buffer';     }
function(config, cb) {     var steps = new Array();     _.each(config.steps, function(elm) {
var noValue = fieldLength < 0         , step = 0         , field = buf.slice(pos, pos + (noValue ? lineLength : fieldLength));
that.model.on("msg:custom", function() {             that.custom_message(arguments);         })
}     case 'list_start': {       var type = this.token.ordered ? 'ol' : 'ul'         , body = '';
targets: null,         processesToList: new Array(),         processesToAdd: new Array(),         targetSelected: 'ANY',
}   range() {     return this.addOperation(new RangeOperation('range'), arguments);   }
startup: register.after(function(){    if(this.labels.length < this.count){     this._parentInit(false, this.orientation);
constructor (options) {   var store = this;   var changeEventPending = false;
Quadratic.name = 'Quadratic'; Quadratic.moveBodies = (epochTime, deltaT) => {  this.computeDeltaT(deltaT);  let i;
System.register = __curRegister;   } })(typeof global !== 'undefined' ? global : this);
this.__proto__ = new Widget(ctx,props);      this.ctx = arguments[2];  this.size = (typeof props.size != "undefined") ? props.size : 12;
if (!(err.constructor.name == type) || !(err.message == msg)) {         throw "Error message "+err+" doesn't match "+msg;     }
beforeEach(function () {     this.events.select = function(evt) { evt.preventDefault() };     $.on(this.subject.input, "awesomplete-select", this.events.select);    });
$(this)             .css('max-height', $(this).attr('data-max-height'))             .removeClass('focus-inform');
td.addClass('permission');   var tags = entry.children().filter(function(){return this.tagName==tagName});   tags.each(function() {
this.create_block_id = create_block_id;   this.game_ios = new Array();
s.bind('clickNode', function(evt) {         setCurrentTreePosition.apply(null, getTreePos(evt).concat([true]))     }).bind('rightClickNode', function(evt) {
}; })(this, document, ion = this.ion || {});
request.setHTTPMethod(options.method || 'GET')     for (let i in options.headers) {       request.setValue_forHTTPHeaderField(options.headers[i], i)
function merge() {   var streams = copyArray(arguments);   var outputStream = create();
this._lastStartingIndex = startingIndex;     this._lastEndingIndex   = this._lastEndingIndex + delta;   }),
this.scope = $rootScope.$new();         this.scope.client = {}                  var $timeout = $injector.get('$timeout');         var $location = $injector.get('$location');         this.AlertService = $injector.get('AlertService');
this.gotoFrame(frame);   }),   gotoAndStop: describeMethod(function (frame, scene) {     this.stop();     if (isNaN(frame))
,   computeAudio: computeAudioFactory.computeAudio,
}  return this.state.scale.range()[1] / 2; }
} else {         return this.all(params).success(__bind(function(records) {           return this.model.refresh(records);         }, this));       }
, fs = require('fs')   , coffee = require('coffee-script')    , dir = fs.realpathSync();
triggerEvent = function() {         console.log.apply(console, arguments);     }
event.preventDefault();         this.props.onMouseDown(this, event);     }), });
if (this.parentProp && this.parent) {     bubbleEvent(this.parent, this.parentProp, Array.prototype.slice.call(arguments));   } };
$(".following-config-method-buttons .public-following").click( function() {         closeModal($(this));
$(".pathFolderChooserKo").each(function(){     var self = $(this);     if (!self.siblings().hasClass('fileChooserBtn')) {       self.after(getFileBrowseButton(self, true));     }
return this.each(function() {
const str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';   return Array.apply(null, Array(n)).map(() => str.charAt(Math.floor(Math.random() * str.length))).join(''); };
content += maybeSourceMap(entry, content)   const exported = new Object   if (Module.wrap === moduleWrapESM) {
ugen.name = '' + ugen.basename + ugen.uid;   ugen.boundCallback = function () {     for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {       args[_key] = arguments[_key];     }
export default zora()   .test('should traverse a tree (going deep first)', function * (t) {     const tree = {
for(let item in data){                 instances.push(
var nCols = this.__spCols.getValue();             for (var i = 0; i < nCols; ++i) {                 cols.push(new String(i + 1));             }
function d3_selection_html(value) {   return arguments.length < 1 ? this.node().innerHTML       : (this.each(typeof value === "function"
constructor(context) {   super(...arguments);
}  function monster(id, type, lvl, mX, mY, dir) {   this.id = id;   this.type = type;
removeDelay: 3600,       process: Promise.coroutine(function* (from, to, runid) {         const extendDeadline = _.throttle(() => this.setDeadline(120000), 10000);         const statuses       = N.models.core.ImageSizeCache.statuses;
writable: false,         value: function () { return sourceContext.apply(callsite, arguments) }       }
class PodContainerTerminationTable extends React.Component {   constructor() {     super(...arguments);
var nou = this.nounique   , all = nou ? [] : {}   for (var i = 0, l = this.matches.length; i < l; i ++) {
queryArgs = {};     for (const key in data) {       const value = data[key];       if (key === 'body') {
, stackFrame = this._frames[info.id]       , j      this._addSample(info, ts);
.reduce((a,b) => a.concat(b)),             function*(filePath) {                 const extension = path.extname(filePath);
if ( error ) {       throw 'Error getting authorization code: ' + error[1];     }
var list = [];     if (meta.object instanceof Array)         for (var i in meta.object)             list.push(construct({object: meta.object[i], parent: meta.parent, context: meta.context }));
module.exports = function (sandbox) {   var N     = sandbox.N     , timer = stopwatch();
if (connection.from.size != this.size)         throw "GATER layer and CONNECTION.FROM layer must be the same size in order to gate!";
this.ELEMENT = function() {       var nodeName = shift.call(arguments)       var element = document.createElement(nodeName)
var count;       count = this.collection_observable.collection().completedCount();       if (count) {
__extends(ApolloError, _super);     function ApolloError(name, config) {         var _this = _super.call(this, (arguments[2] && arguments[2].message) || '') || this;         _this._showLocations = false;
return compute.sequence(         func.createConstructor('Number', 1, number_ref.NumberPrototype, number_ref.Number.setValue(new Number())),
for (i in touchArray) {                     var touch = touchArray[i],
var setValueByPath = function(ob, path, value, visitorCallback){             if(! path.match(/^\                 throw 'diff path is not valid';             }
if (err) throw err;             this.loadTemplateFromUrl(buffer);         });
routeLayer: 'default',     afterModel: function (model, transition) {       this._super(...arguments);       if (!transition || !transition.promise) { return; }
parentIndex: instanceIndex,                         values: new Array(),                         key: getKeyName(instanceStructure.instance, key),
"use strict";     return (this.title ? this.title + '. ' : '') + (this.first_name ? this.first_name + ' ' : '')              + (this.middle_name ? this.middle_name + ' ' : '')              + (this.last_name ? this.last_name : '');
default:         throw 'serialize: Content-type ' + contentType(+' not supported.')     }
this.set("selectionIndex", 0);       page.apply(require("./" + this.get("items")[selectionIndex] + ".json"));     }
).map(function(sel) {   return "_.matches('" + sel + "')"  }).join("||"))
UserForm.prototype.jumpToStep = (stepNumber, direction) => {     const targetStep = this.steps[stepNumber];     let isValid = false;
return nanomerge.apply(void 0, arguments);
var newOnFailure = function(xhr) {             this.commandLine.showHint('Save failed: ' + xhr.responseText);             if (util.isFunction(onFailure)) {
$(this).addClass('al_element_selected');                     LoadLanguageAttributes($(this).attr('ref'));                 }
Date.prototype.toISOLocalString = function() {
let file;         before(function*() {           file = new hdf5.File('./h5ds.h5', globs.Access.ACC_TRUNC);
} else {                         uiFunctions.completeAction($(this), action);                     }
it('test .openNewWindow() W3C WebDriver with specified type=window', function() {     return Globals.protocolTestWebdriver.call(this, {       assertion: function(opts) {
this.mixin(options);                         }                         return this.inherited(arguments);                     }
if (!user)         throw 'no user'       else
if( !isNamespace(namespace) ) {     throw 'Invalid namespace provided for broadcastAs() observable.';   }
if (!region) {     throw ('You must specify a region');   }
}     return result.H.prototype.h.apply(result.H.prototype, newParams);   };
var moduleDefinitions = {};     var libraryInvocations = findLibraryInvocations.call(this, entrypointAST);     for (var moduleName in libraryInvocations) {
for (var a in inherited) {             var attrs = inherited[a].list();
delete this.map["" + x + "_" + y];    for(var i in this.nodes){     var node = this.nodes[i];
obj.method  = methodname;     obj.params  = Array.prototype.slice.call(arguments, 1);
if (DEBUG_COLLISION) {             this.one('displaycollision', function(e) {                 this.attackCollision.addChildTo(this.parentScene.playerLayer);                 this.attackCollision.alpha = 0.3;
if (declaration.lvalue.isPattern()) {         desugaredDeclarations.push.apply(desugaredDeclarations,             this.desugarVariableDeclaration_(declaration));       } else {
coUtils.Debug.reportWarning(       "%s sequence [%s] was ignored.",       arguments.callee.name, Array.slice(arguments));   },
default:                     return arguments[1];             };
}         }.bind(this), false);       };
})(this);
var item = this[i];    arguments[0] = evaluateProperty(item, property);    if(condition.apply(this, arguments)){     filtered.push(item);
case '/remove':     remove.call(this);     break;   }
function commandBlock(name) {     if(effectNode.call(this, this._sel.getRangeAt(0).startContainer, true).indexOf(name) !== -1) {       if(name === 'blockquote') return document.execCommand('outdent', false, null);
$.when.apply($, promises).done(function () {
if (!utils.isAddress(address)) {         throw `Invalid address given: "${address}"`;     }
}).call(this);
exports.notifyExecuted = notifyExecuted;        function getNewPrefix(optons) {          return SF.compose("New", this.options.prefix);      }
}     return this.finishNode(this.startNodeAt(importPos), "Import")   }
this.tickInfos = null;  this.mad = 0;  Clazz.instantialize (this, arguments);
emit: function() {     var args = arguments;     this.listeners.slice(0).forEach(function(listener) {       listener[0].apply(listener[1], args);
function countDown(element, options) {         this.element = $(element);         this.options = $.extend({}, defaults, options);
value: function resolve() {             var args = _larouxHelpersJs2['default'].toArray(arguments);             args.unshift('done');
app.handle = function(req, res, out) {   var writeHead = res.writeHead     , stack = this.stack     , removed = ''
raise.call(this, "error", message);   };
assert.equal(opts.path, '/session/1352110219202/source');         this.client.transport.runProtocolAction = runAction;       },
}                 const buttonType = this.module.getConfiguration('toggle');                 prom.then(function (ok) {
window.test.com_test_basic = undefined;   },   handleArgs: function() {    var args = Array.prototype.slice.call(arguments);    window.test.com_test_basic.eventArgs = args;
,error: function(message, originalError) {   var err = ''
this.handleQrCodeButtonPat = () => {     this.isMenuOpened = false;     this.update();     this.opts.onqrcode(this.opts.key, this.opts.url, this.opts.memo);
var proc = this, term = proc.getTerminal(); Webos.require('/usr/lib/broadway/broadway-3.10.js', function () {  if (Webos.broadway) {
this.prevAABB = new platformer.classes.aABB();   this.canCollide = true;
var async = require('async');  var actionEmitter = require('../action_emitter.js')  var FeedParser = require('feedparser')     , request = require('request');
function pullNode(prop, Label) {   var part = sortPropLabel(...arguments),     prop = _.get(part, '0.0'),
var devices = client.sessionStore.getEndToEndDevicesForUser(userId);             for (var deviceId in devices) {                 var keys = devices[deviceId];
google.maps.event.addListener(e.overlay.getPath(), 'insert_at', function () {         console.log(arguments);                }.bind(this));
vg.config.isNode = typeof exports !== 'undefined' && this.exports !== exports;
Function.prototype.simplify=function (){     return this; } String.prototype.simplify=function (){
lt(refValue, callback) {         return this._check(callback, function(value, valueInfo) {             const normalizedRefValue = this._normalizeValue(refValue, valueInfo);             return (value < normalizedRefValue);
super(source);         core.defineProperty(this, Symbol.iterator, function*() {             let index = 0;
var bitMask = 1;     var query = Array.apply(null, new Array(length)).map(Number.prototype.valueOf, 0);     var memberCount = 0;
case DIFF_INSERT:      if (this.offset >= startOffset) {       this.offset += diffOffset;
SDBObjectStoreInTransaction.prototype.get = function() {   var keys = toArray(arguments);   var records = [];
var cache = this._cache     , json = this.json     , sort = json.sort
{     throw "Cannot set HMAC key after calling update";    }
args.unshift(command);             return this.widgetFunction.apply(this, args);         },
var combineHeaders = function combineHeaders() {         var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};         return Object.keys(params).map(function (key) {
this.vbo_vertexCacheKey = undefined;   this.vbo_indexCacheKey = undefined;   this.indices_count = 0;  };
openRequest.onsuccess = hitch(this, function (event) {         this.db = event.target.result;         if(this.db.objectStoreNames.contains(this.storeName)){
this.debug.log("Do seek: " + time);             this.notifier.notify(this.notifier.ENAME_SET_CURRENT_TIME, this, time);             this.videoModel.setCurrentTime(time);
if (!(address_ && address_)) {               throw "Missing address input parameter.";             }
, create           = require('es5-ext/lib/Object/prototype/plain-create')   , merge            = require('es5-ext/lib/Object/prototype/merge')   , nextTick         = require('clock/lib/next-tick')
if (!this.isChild) {       for (var alias in this.context.aliases) {         this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];       }     }
, DB = process.env.db || 'http:   , RTT test('Couch is there', function(t) {
function soundsMiddleware(soundsData) {   if ( typeof soundsData !== 'object' )     throw {       name: 'missingSoundData',
describe("when running multiple steps", function(){     var async = new AsyncSpec(this);     var stepsRun;
} else {                     throw "Unable to parse '" + expression + "' at template position" + exp_offset;                 }
if (v <= 0) {                 clearInterval(this.timerId);                 this.timerId = null;
</div>`;     this.addEventListener("click", function() {       const dot = this.children[0];       if (this.classList.contains("disabled") === false) {
if (definition.events) {                 for (var event in definition.events) {                     this.addEventListener(event, broadcast(definition.events[event]));                 }             }
if (!process.env.LISTEN_FDS || process.env.LISTEN_FDS !== 1) {             throw('No or too many file descriptors received.');         }
{         idAttribute: this.cid,         modelName: "DragDropManager",
$lux.apiUrls[url] = resp.data;                 promise.resolve.apply(promise, arguments);             }, function() {                 promise.reject.apply(promise, arguments);             });
doRegister: function( message ){ console.log( 'doRegister', arguments );   var nick = message.args[0];
const flatten = arrays => [].concat.apply([], arrays)
return valueBelow(val, s.lookback[s.options.displacement][key1], s.lookback[s.options.displacement][key2])   else throw 'belowKumo, s.lookback.length < s.options.displacement' }
, powerwalk = require('powerwalk')     , content = path.resolve(haiku.options.src, haiku.options['content-dir'])
if (statics) {     for (var i in statics) {       Object.defineProperty(cls, i, Object.getOwnPropertyDescriptor(statics, i));     }
function _isText(elt) {                 if (elt &&  elt.innerText && (new String(elt.innerText).trim)) {                     return true;
for (const key in leaf.keys) {       const subLeaf = branch.leaves[key]
function store() {   this.data = new Map(); }
{    throw "Unexpected error in SHA-2 implementation";   }
var tableBody = $("#pendingJobListDataTableBody");     for (var p in list) {         var tr = $("<tr></tr>");
, listen: function () {             this.$element
var DefaultApplicationWindow = function(name, opts, app) {     Window.apply(this, arguments);
this.set('pollster.options', (rows && rows.length) ? {       appID: this.get('applicationId'),
this.Init$_PropertyValueProvider(obj, propPrecedence, _ProviderFlags.ProvidesLocalValue);      this._ht = new Array();  }
function syncToAsync (fn) {   return function () {     var args = sliced(arguments)     var cb = args.pop()
name={name}           onClick={this.onClick.bind(this, firstTrack)} />       </div>
for (var file in files)         {
}).call(this);
if (logged_in && !$(this).data('model').remoteId) {         buttons.push({
tab.focus();       }.bind(this));       return menu;
var async = require('async')   , bcrypt = require('bcrypt')   , crypto = require('crypto')   , validity = require('validity')
constructor( props ) {         this._boundRender = this.render.bind( this );         this.props = props;         this.store = Flux.getStore('application');
}, () => {       throw 'screenshot failure';     });
, http = require('http')   , mongoose = require('mongoose')   , io = require('socket.io');
constructor(domain) {     this.nonce = generateNonce()     this.nonceCount = 0
const withFirstElem = [firstElem];     withFirstElem.push.apply(withFirstElem, elem);     powerSet.push(withFirstElem);
this.checkPort();   var program = this.program,       server = this.server,       type = this.type;
});     for(i in country){         $("#country_select").append('<option value="'+i+'">'+i+'</option>');     }
const headers = {};     for (let headerKey in responseHeaders) {         headers[headerKey.toLowerCase()] = _.clone(responseHeaders[headerKey]);     }
function eachConstantReference(obj, constants, callback) {         for (var key in obj) {             var val = obj[key];
.exec(function (err) {     console.log('done!', arguments);
this.content = { post: { body_html: '', body: '' } };     this.editorPosition = 'editor-fixed-bottom';
var a=[];    for(var i=0; i<this.childNodes.length; i++){     var c=this.childNodes[i];     if(c.nodeType==nodeTypes.ELEMENT){
this.setAttribute('clip-path', 'url(#' + entity.id + '-clippath)');                     setPattern.call(this, entity);                 }
if (!data || typeof data != 'object') {         throw `Invalid config data in ${filename}`;     }
union() {     var iters = arguments;     if (iters.length === 0) {
open.push(noDash)           this.trigger("model", noDash, el, this.stack.join("."))         } else {
var frame, a, link, script, i, href, src;   frame = [].concat.apply([].concat.apply([], document.getElementsByTagName('iframe')), document.getElementsByTagName('frame'));   for(i = 0; i < frame.length; ++i) {
node._scene = null;    for(var i in node.children)     change_scene( node.children[i] );
showSuccess('登录成功');                 console.log('登录成功', arguments);             },
function restoreBookmarkWindow(tabWindow,cb) {   var self = this;
export default function () {   batch.call(this, morpher, 1) }
if (file.state() === 'rejected') {           results.push(file.fail(function () {             return cb(file, ...arguments)           }))
default:             throw "SceneJS.bind - this event type not supported: '" + name + "'";     }
function (position) {                 this.m_map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));             },
});       this.app.run([], function() {         assert.file(expected);         assert.fileContent(fileContentToTest);         done();
this.text = false;      this.save((("" + (this.prepareOutput(desc$0.key, true) + '=' + this.prepareOutput(desc$0.value, true))) + ";"));      return;
this.store = Flux.getStore('application');         this.data = {             apps: this.store.getApplications()         };
console.info('VFS::copy()', src, dest);     if ( !(src instanceof OFile) ) { throw 'Expects a src file-object'; }     if ( !(dest instanceof OFile) ) { throw 'Expects a dest file-object'; }
Input.prototype.__defineGetter__('address', function() {   return this.data.scriptAddress || this.addresses[0]; });
},   resetRenderRange: function() {     this.trigger.apply(this, ['resetRenderRange'].concat(Array.prototype.slice.call(arguments)));   },
}; ClientRequest.prototype.abort = function() {   this.proxy.end.apply(this.proxy, arguments); };
});     element.find('*').each(function(index) {       var bindName = self.jQuery(this).attr('ng:bind');       if (bindName) {
if (!password) {      throw 'Password Required'     }
this.emit('ops');             }), this.settings.monitor.interval);
var newFire = building.fire + fireSpread;             building.fire = Math.min(this.maxFire, newFire);         })         return TurnBasedGame.nextTurn.apply(this, arguments);
if (queueitem.hasOwnProperty(disallowedKeys[i])) {      throw "Merge queue cannot include any " + disallowedKeys.join(', ');     }
if(!jsClient) { var jsClient = new Object(); }
var ADB = require('./adb.js')   , Device = require('../device.js')   , mkdirp = require('mkdirp')
module.exports.log = function () {   console.log.apply(console, arguments); };
, SocketServer = require('./socket_server') , gzippo = require('gzippo')
var GradientStop = this.GradientStop = Base.extend({
if (obj !== null)     throw "assertNull failed: obj !== null"; }
var divs = document.getElementsByTagName('div');           for (i in divs){             var div = divs[i];
const fullSelector = buildSelector(this, selector, options);           const container =  options.testContainer || findClosestValue(this, 'testContainer');           context.assertElementExists(fullSelector, options);
try {                 streamData = stanza.parse(wrap(data), this.stanzas.Stream);             } catch (e) {
groupTableBy: function() {     if ( this.get('group') === NAMESPACE && !this.get('simpleMode') ) {       return 'namespaceId';
} else {             throw "JS implementation of BSDF does not support compression (" + compression + ')';         }
if (rhs.end<=start) {         rhs = subParse(this,this.start).parseExprSubscripts() ;         n.operator = 'await' ;
var odd = (this.width & 1);   var shapes = new Array();   var stroke = {color: this.color, width: 1};
}).call(this);
for (var index in innerPoints) {     points.push(innerPoints[index]);    }
for(var i in this.properties)   {
constructor(value = 0, nonce = 0) {         if (!NumberUtils.isUint64(value)) throw 'Malformed value';         if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';
var innerTrapped = mapped[key].innerTrapped;         affected.push.apply(affected, _toConsumableArray(innerTrapped.affected));       }
$(AVG_REPLICATE_VALS_TOP_MENU).click(() => {         grnState.nodeColoring.averageTopDataset = !$(this).prop("checked");         updateApp(grnState);
log.error('Check that "hue.user" provided in the configuration is correct')         throw 'Invalid User'       }
hideOverlay();    $(this).fadeOut('fast', function () {$(this).trigger('windowFastClose')});   });
.invoke(mkdir, screenShotFilePath)             .then(function () {                 this._page.clipRect = {                     left: 0,
this.server.on('all-test-results', this.onAllTestResults.bind(this))             this.server.on('server-start', this.onServerStart.bind(this))         })             },
};       this.testProvider.evaluateCodeLens(codeLens, null);     },
posts.find()       .where(function () {         this.expr().eq('id', 2);       })
init() {     this._super.apply(this, arguments);     if (!Ember.testing) {
fullDiscussion.find(".forum-post .subject").on(MM.clickType, function(e) {                         $(this).parent().find(".content").toggle();                     });
else {                     this.$list.removeClass('hide');                     var clusters = this.entityCollection.groupBy('cluster');
*dfs(first) {     yield* this._graphSearch(first, Stack);   }
, userEvent = crowi.event('user')     , userSchema;   userSchema = new mongoose.Schema({
return expect(this.lastResponse.body, message).to.be.like(json); }
patchXMLHttpRequest(function(event, task) {       patchSubscription.applyAll(this, [event, task])     })
export default function max(values) {   return Math.max.apply(Math, toArray(values)); }
var maxDepth = depth;   _.each(children, function(child) {     var d = this.calcDepthRecursive(child, depth + 1);     maxDepth = Math.max(d, maxDepth);
var domainDaoSupport = function() {  this.tableConfig = null;  this.sqlTemplate = null;
function nick_alt (data) {   var alts = this.nickname_alts, nick;   if (this.welcomed) {
encodeLegacyData([from, serviceName, '', '', from].concat(                Array.prototype.slice.call(arguments, 3)))])].join('');     } else {
var vizName1 = 'Visualization ' + testSubName;         this.timeout = 60000;
if (frame.type === 'HEADERS' || frame.type === 'PUSH_PROMISE') {     var buffer = concat(this.compress(frame.headers))       , cursor = 0;     do {
Ratchet.convertGadgetTag(this);                 Ratchet.logDebug("Converted gadget tag: " + $(this).html());             });
message = "";         for (i in rows){             key = rows[i];
var networkingEngine = this.playerInterface_.networkingEngine;   var isCanceled = function() {     return !this.playerInterface_;   };   return networkingEngine.request(requestType, request, isCanceled.bind(this))       .then(function(response) {
mejs.Utils.typeChecks.push(function(url) {  url = new String(url).toLowerCase();  if (url.indexOf('soundcloud.com') > -1) {
b = a.filter(greaterThan69).filter(evenDistanceFrom65);         var changes = [];;         b.subscribe(function (x) { changes.push.apply(changes, x) }, null, "arrayChange");         expect(b()).toEqual([71, 73, 75]);
debug( 'New Value: %d.', this._height );  this.emit( 'heightChanged', height, oldVal ); }
, tail = ''       , res       , found;
}                     }).on(this.touchStart, function () {                         isTouchingTopLevelMenu = true;
if (x instanceof Runtime.vec)         return internal._evalVec(x, arguments.callee);     return Math.cos(x);
it('removes textbox from menu', function() {       cy.wrap(this.$textboxEl).within(() => {         cy.get('.widget-menu-regular').click({ force: true }).within(() => {
'use strict' var qs = require('qs')   , querystring = require('querystring') function Querystring (request) {
}(this));
block.stop();           vm.errors = this.ncUtils.responseErrorFormatter(error);         });
try {     send.apply(this, arguments);    }
{{BODY}}   return Module; })({}, this.arguments);
var mute = !this.isMuted();         this.get("sound").toggleMute();         this.trigger.apply(this, ['toggleMute', this, mute].concat(arguments));     }
if (token !== archetypeDescriptor.jsonTag) {                   throw "Expected component name of '" + token + "' but instead found '" + archetypeDescriptor.jsonTag + "'.";                 }
EditorCell.prototype.toggleComment = ownerProtect(function () {   this.editor.execCommand('toggleComment'); });
for (var field in that.spec) {                 var el = $(that.spec[field].selector);                 el.change(function () {                     that.unsavedChanges = true;
﻿define([], function() {  return function(){   this.info = function(msg) {    if (console) {
this.requestStream.on('response', function(res) {   this.response = res  })
, Variable = require("./variable")   , queryMask   , variablesMask   , objectMask   , maskUpdater
'<span style="font-size:14px;color:#555;">(' +                     $(this).data('blueimp-fileupload')._formatBitrate(data.bitrate) +                     ')</span>').removeClass('hide');
default:                 throw "Unknown Viz Type" + item.type;                 break;         }
let timeout;     return function() {       const context = this, args = arguments;       const later = function() {
if(err) {                 callback.call(this, err);                 return;
lineData.eachItemGraphicEl(function (el, idx) {             el.updateLayout(lineData, this._fromData, this._toData, idx);         }, this);
};    }.call(this, this, this.VisSenseUtils)); ;(function(window, Math, VisSenseUtils, undefined) {
var ee2 = new EventEmitter2()   , ee3 = new EventEmitter3()   , ee1 = new EventEmitter1(); ee1.setMaxListeners(Infinity);
show_info(d);                     set_focus.call(this, d);                 }else{
throw() {     throw createError.apply(null, arguments);   },
ajaxStart(function() {       $(this).show();     }).
function toggleDir() {   var tr = $(this).parents("tr");   var folderid = tr.get(0).id;
};         this.addItem = function (name, value, tagname) {             var node = $("<div />").addClass("field");
this.timeout(10000);   this.retries(2);   let app, tmpLogFileName, tmpConfig, tmpConfigFile;
var reloadDirty = this.get('reloadDirty');    forEach.call(Ember.get(payload, 'meta.deletedRecords') || [], function(record) {     this.deleteRecordFromStore(record.type, record.id);    }, this);    delete payload.meta;
if (timer) timer = clearTimeout(timer);                  for (handler in loadHandlers) { loadHandlers[handler]() }              }
if (is.defined(height)) {     if (is.integer(height) && is.inRange(height, 1, this.constructor.maximum.height)) {       this.options.height = height;
check.call(this, request, response);   response.writeHead(200, {});
.catch(function (error) {       this.setState({         message: error.message,
}   if (!selector) throw "unknown block: " + this.info.hash   return [selector].concat(args)
if ((typeof exports === 'object' || typeof exports === 'function') && exports !== global) {     for (var p in exports)       defineOrCopyProperty(moduleObj, exports, p);   }
var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore'); describe('rest', function () {
it('includes watchOptions if provided', function () {         this.config.isTextTerminal = false         this.compilerApi.watch.yields(null, this.statsApi)
},         () => {           this.recordsRemoved(...arguments);         }
storage = GridFsStorage({          url: setting.mongoUrl(),          file: function*() {            yield {
tools.loadModuleAndReplace(options, 'column_view'),                 $.when.apply($, options.columns.map(function(column) {                     return tools.loadModuleAndReplace(column.transition, 'class');
{   if ( ! arguments[ i ] || typeof arguments[ i ] !== 'object' || Array.isArray( arguments[ i ] ) ) { continue ; }   this.stackInto( arguments[ i ] , stacked ) ;
if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {             throw('LocusZoom attempted to throw an invalid event: ' + event.toString());         }
simpleMedia.on("setup", function() {  console.log(this); });
var prototype = extend ? (extend[0].$$initCtor ? new extend[0].$$initCtor() : new extend[0]()) : new Object();                 fn.prototype = prototype;
if (onDelete == 'DELETE') {       this.collection.remove(           {path: {'$regex': '^' + this.path + pathSeparatorRegex}}, next);     }     else {
var SomeOtherTool = require('./tools').SomeOtherTool; var Person = function() {  Base.apply(this, arguments); };
if(!callback) {   throw "ERROR in function hashMods NO CALLBACK"  }
var INDEX = [];   this.timeout(5000);   it('should get tar file, not db directory', function(done) {
, runSync = [0,1,2,3,4]   , runAsync = []
disabled: false,   isDisabled: Em.computed('disabled', 'loading', function() {     if (this.get('disabled') || this.get('loading')) {       return true;
rethinkdb.let = function(var_args) {     var bindings = Array.prototype.slice.call(arguments, 0, arguments.length - 1);     var body = arguments[arguments.length - 1];
this.keptSprites.forEach(sprite => this.animate(new Move(sprite)));
if (!t.type.equals(Shade.Types.vec3)) {             throw "expected vec3, got " + t.type.repr() + "instead";         }
function write() {   return this.fuse(fs.createWriteStream.apply(fs, arguments)); }
};     return arguments.callee(f, a, c, cl, eps/2, left, fa, fc, fcl) + arguments.callee(f, c, b, cr, eps/2, right, fc, fb, fcr);    };
function RelatedModel() {   Model.apply(this, arguments); }
export function testConfig() {     this.passthrough('/write-coverage');
if (results) {                 var resultsObj = new Object();                 var numResultsObj = new Object();                 results.getResults(resultsObj, numResultsObj);
for (var j in styleOptions) {    var style = L.extend({}, L.Path.prototype.options, styleOptions[j]);
'<dt class="optgroup-div">'+$(this).parent().attr('label')+'</dt>'+                                 '<a tabindex="-1" class="opt '+ $(this).attr("class")+'">'+$(this).text()+'</a>'                                 );
callback.apply(null, arguments);     }
}             for (prop in a) {                 aLength += 1;                 if (!(prop in b)) {
if (runtime.conf.hintAlign === "right") {                 left = pos.left - bof.left + $(this).width();             } else if (runtime.conf.hintAlign === "left") {
files.forEach(_.bind(function(file) {    this.push(file);   }, this));
}, base);     }   , udpSocket: function() {         return module.exports.wrap(dgram.createSocket('udp4'));
let weatherdata = this.convertYahooToWeather(data);
var self = this;             self.getName = function() {
}     })     ,     hash, node    ;
let val, prop;                 for (prop in xyPlotData) {                     val = xyPlotData[prop];                     if (isString(val) && isFinite(val)) { xyPlotData[prop] = Number(val); }
}         arg=arguments[++i];       }       for( ;arguments[i] ; i+=2)       {
, getStateForSession: function(session) {     var storedJSON = localStorage[Constants.LOCALSTORAGE_PREFIX + session]     var storedState = storedJSON ? JSON.parse(storedJSON) : {}
Ember.changeProperties(function() {    var relationship = this.getHasOneRelationship(relationshipName, false);    if (relationship) {
if ( !this.opened.isResolved() && !this.opened.isRejected() ) {    this.opened.resolve();
.each(function (props){           select(this).call(componentLocal.get(this), props);         });
proto = date.prototype; function utcDate() {   this._ = new date(arguments.length > 1 ? date.UTC.apply(this, arguments) : arguments[0]); }
isWriteOnce: function() {         return this.get('props').write_once;     }.property('props'),
}, this));   exec('xcrun -find instruments', _.bind(function (error, stdout) {     this.instrumentsPath = stdout.trim();     logger.info("instruments is: " + this.instrumentsPath);
if (this.adb) {       this.adb.uninstallApp(_.bind(function() {         this.adb = null;
}         let job = await service.createJob.apply(service, tasks);         return job;
} else if ( arguments.length > 1 ) {     this._vo.push.apply( this._vo, Array.prototype.slice.call( arguments ));   } else {
var newclass = React.createClass.call(this, patchedspec);   return newclass;
, settings = config.readConfig(path.join(__dirname, 'config.yaml'))   , numCpus = require('os').cpus().length   , pkg = require(path.join(__dirname, 'package'))   , appName = pkg.name   , appVersion = pkg.version
return Ember.computed(function(key, value) {     var changes = get(this, 'unsavedData'),         data = get(this, 'savedData');     key = options.key || key;
function term() {   console.log('term', JSON.stringify(this));   return this.chainl1( factor, conjunction); }
this.sandbox.dom.append(this.$el, $element);             this.listView = this.sandbox.sulu.getUserSetting(constants.listViewStorageKey) || 'thumbnailSmall';
}                 $.Widget.prototype._setOption.apply(this, arguments);                 switch (option) {
for (const i in pathsAtDepth) {                 const path = pathsAtDepth[i];
formatic.form.method('updateView', function (props) {     _.each(this.attached, function (info) {       formatic.updateComponent(info.component, props);
if (angular.isUndefined(slot)) {               throw 'Slot ' + id + ' has not been defined. Define it using DoubleClickProvider.defineSlot().';             }
var _temp, _this, _ret;         _classCallCheck(this, _class2);         for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
const app = new Koa();     app.use(function *(ctx){       ctx.body = ctx.href;
node.type = 'Literal';     node.value = this.tree.get(url).name;
setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {       var color = Util.makeCssRgb(arguments);       this.ctx.fillStyle = color;
if (method === 'reload') {       $(this).children(options.items).off('dragstart.h5s dragend.h5s selectstart.h5s dragover.h5s dragenter.h5s drop.h5s');       $(this).off('dragover.h5s dragenter.h5s drop.h5s');
}; Edward.prototype.emit = function() {     this._Emitter.emit.apply(this._Emitter, arguments);     return this;
if(this._isDerived()) {       throw "Can only compute the best prefix for non-derived units, like kg, s, N, and so forth!";     }
var Datastore = require('nedb') , dbLayers = new Datastore({ filename: 'layers.db', autoload: true }) , dbSorted = new Datastore({ filename: 'sorted.db', autoload: true }); dbLayers.persistence.setAutocompactionInterval(300 * 1000);
tasks: {    a: function * () {     val = 5;
const _ol_format_WMTSCapabilities_ = function() {   XML.call(this);
var rom = exports.rom = function() {     var objects = {};     this.loaded = false;     this.romData = [];
if (data.length !== entry.size)             throw 'Invalid size';         if (canVerifyCrc(entry)) {
function disjunction() {   console.log('disjunction', JSON.stringify(this));   return OPTREES[this.match(/^OR/i).toUpperCase()];
close: wrap(function() {       if (this._con) {         this._con.unsubscribe();
}).call(this);
}; }(this));
var path = this.path           , credentials = ctx.req.body           , uc = this;         debug('trying to login as %s', credentials.username);
function defineAssociationAccessors(sourceModel, assocType, targetModel, alias, association) {   var accessors   = this[assocType]     , singular    = inflect.singularize(alias)
it('supports setting the app details', function () {       if (process.platform !== 'win32') return this.skip()       const iconPath = path.join(fixtures, 'assets', 'icon.ico')
, stop: function () {       var el = this.el;
return regex.test(value);      }        ,color: function(field, value, params) {        }
var text = '';         for (var attr in object) {             text += '<tr><td>' + attr + '</td><td>';
,email: function(field, value) {
, blur: function (e) {             this.focused = false
super(source);         core.defineProperty(this, Symbol.iterator, function*() {             let index = 0;
function sqliteClient () {     this.client = require('sqlite3');     this.connection = null;
fn(null, JSON.parse(data.toString()));               if (this.debug) {                 var totalTime = (new Date().getTime()) - startTime;
} else {         throw 'attempted to set uniform "' + name + '" to invalid value ' + value;       }
for (var i in nodes){         var node = nodes[i];
for(var anim in this.animations){   output = this.animations[anim].serialize(output);
}   var tasks = this.tasks;   for (var field in tasks)
d3_geo_transform.prototype = {   point: function() { var s = this.stream; s.point.apply(s, arguments); },   sphere: function() { this.stream.sphere(); },
if (type === 'error') {       throw new Error('Unhandled error event: '         + JSON.stringify(slice.call(arguments)));     }
}         if (!keep)             this.axes = new Array();
it('should return an error if spspResponse is invalid', function * () {       nock('https:
each:function(callback) {   var me = this         ,   cb = this.terseToVerboseCallback(callback)
this.moduleId = moduleId;         this.$location = $location;
case 'prepend': {    return action.fn(this) + val;   }   case 'replace': {
var edits = new Object();  edits["command"] = "UndoRedoCommand";  edits["commandId"] = commandDivElem.attr("id");
Driver.prototype.start = function(callback) {   return Driver.__super__.start.apply(this, arguments); };
run: function (code, env, cb) {       cb = arguments[arguments.length];       if (typeof arguments !== 'function') { cb = function (v) { console.log(v); }; }       if (typeof env !== 'object' || !env) { env = O; }
module.exports = () => {   return function logger() {     console.log.apply(console, arguments);   };
var React = require('react')  , Activities = require('./activities'); var Hub = React.createClass({
var _isStopped = function(){     if(this._audioDoc && this._audioDoc._playerStatusDeps && this._curStatus !== UniRecorder.PLAYER_STOPPED){         this._audioDoc._playerStatusDeps.changed();     }
function() {           return this.instance_ && name in this.instance_ ? this.instance_[name] : prop.defaultValue;         });
{   return bigBox( (exonStarts - (Math.min.apply(Math, _.pluck(data, 'txStart')))), (exonEnds - exonStarts), multiplyingFactor, strand);  }
args.push(function() {           self.loaded.push(name);           cb.apply(this, arguments);         });
function L() { if (Accidental.DEBUG) Vex.L('Vex.Flow.Accidental', arguments); }
try {       return f.apply(this, arguments)     } catch (e) {
*keys() {     yield* this;   }
, runProgram      = require("./run-program")     , setupPrettier   = require("./setup-prettier")     , setupRepository = require("./setup-repository")     , setupNpmLink    = require("./setup-npm-link");
var options = cliutil.lastArg(arguments)       , fork = require('child_process').fork
debug( 'New Value: %s.', this._aValue );  this.emit( 'aValueChanged', fcn, oldVal ); }
var addedObjects, i, len, part;     this._super.apply(this, arguments);     if (addedCount) {
var distribute = function(activity, callback) {     var bank = this.bank;
each: function(callback){     for(var i in this){       callback(i, this[i]);
Member.delete = function*(id) {     try {
function createTheme(req, res, next) {     var that = this, params = req.params, DBActions = that.getDBActionsLib(),         dbAction = DBActions.getInstance(req, THEME_SCHEMA),         app = req.app,
if(userData['groups'] && _.size(userData.groups) > 0) {         for(var i in userData.groups) {          var grp = userData.groups[i];
var dom = toDom(this.template.fn(model));         template.applySelectors(this, dom);         return dom;
constructor() {     super(arguments);     this.type = 'begin';
if ((!e || !e.target)         || Array.apply(null, this.activators).some(i => i.contains(e.target))         || closeConditional
this.get_current_color_map = function() {
var tc = require('./timecode')   , cap = require('./util').cap;
}; exports.objSplice = function(obj, length) {  var splice = A.splice, args = splice.call(arguments, 2);  obj.length = length;
menus.html(render({email: this.currentUser.email}));       menus.find('.signout-btn').click(signout);
{  this.entryRef = function(path)  {
var sys = require('sys')   , error = require('./error')
describe('corp-semantic-release', function () {   this.timeout(15000);
this.errors = errors;          this.ExclusivePopup(title, function() {return true;});      }
if (tree && tree.length){             $(this).find('textarea').focus(function(){                 var id = $(this).attr('id').replace(/:/g, '\\:');
} else {       return getMeta(this, lastValueKey);     }
it('should deploy all contracts', async function() {         this.timeout(6000000)         const result = await clevis("test","deploy")         assert(result==0,"deploy ERRORS")
this._tree.getManager().addEventListener("changeSelection", this._onTreeSelectionChange, this);   this.add(this._tree);
var searchAndHighlight = function(token){             console.log(this);             if(token.type === 'identifier'){
default:           console.log(data);           throw "Invalid message";       }
POST: function () {         return _.partial(this._http, 'POST').apply(this, arguments);     },
const step = parms.plainModulus / parms.polyDegree   encrypted = Crypt.encrypt({value: Array.apply(null, Array(parms.polyDegree)).map(       (x, i) =>  {
this.consoleInfo(this.level + ' status');   var levelConfig = this.getConfig(this[this.level].dir);   this.consoleConfig(levelConfig); }
var self = this;      var args = Array.prototype.slice.call(arguments, 0);   callback = args.pop();      this._applicationClosed = args.length ? args.shift() : false;
const widgetOptions = this.createMetricWidgetsLayout(entry) || [];     array.forEach(widgetOptions, function createAndPlaceWidget(options) {       if (this.hasValidOptions(options)) {         const widget = new MetricWidget(options);
if(gesture.handler) {             gesture.handler.apply(gesture, arguments);         }
});      }(this.webNotification || window.webNotification));
if (err.code === 0) {     throw 'Account not found';    }
$('body, html').animate(                 { scrollTop: calcHeightFunc($(document.getElementById(anchor)), $(this)) },                 speed,
for (var id in data) {             var singleData = data[id];             var insertData = [];
trigger: function(name) {     this[name].apply(this, [].slice.call(arguments, 1));     this._super.apply(this, arguments);
ai = function(){ pp.addChild.apply(pp,arguments);},    ap = function(){ pp.addSeparator.apply(pp,arguments);},    sl = function(){ pp.setLabel.apply(pp,arguments);};   var pid = ui.puzzle.pid;
if(r360.config.logging) var start   = new Date().getTime();         var polygonList = Array();         _.each(polygonsJson, function(source){
}     for(var i in handler['allow']) {      var ret = yield user.isAllowed(handler['allow'][i]);      if(ret) {
flexo.make_readonly(bender.Node, "root", function () {     if (!this.parent) {       return this;     }
describe('84. fetchClobAsString1.js', function() {   this.timeout(100000);   var connection = null;
componentWillEnter: function(done) {     var self  = this       , node  = this.getDOMNode()       , width = $.width(node)
setTimeout(function() {                                 deferred.resolve.apply( deferred, args );                             }, 1 );
} else {                             throw 'Dynamically creating toggle-content is not supported right now. ' +                             'Return an HTMLElement instance';                         }
});   it('new RTCPeerConnection(' + printJSON(tc1Constraints) + ', ' + printJSON(tc10Constraints) + ')', function () {     this.timeout(testItemTimeout);     var peer = new RTCPeerConnection(tc1Constraints, tc10Constraints);
var getLoggerForConfig = function(name, group){  var config   = common.config[group]  ,   colorize = getColorize(name)
const reIgnore = /^[._]/     , forbiddenErr = new Error('forbidden') module.exports = (base, default_price, invoice_ttl, files_attr) => {
for (var id in this.languages) {             var language = this.languages[id];             if (!configOptions.skipClient) {
var rgb = captures[1]         , len = rgb.length         , single = len >= 3 && len <= 4         , r = parseInt(single ? rgb[0] + rgb[0] : rgb.substr(0, 2), 16)
return value;             }.bind(this),             function (reason) {
var mongoose = require('mongoose')   , Schema = mongoose.Schema;
, attempt: this    , message: msg    }    , this)
networkTypeStore.pullNetworkType(this.props.match.params.networkTypeId)             .then(function () {                 this.setState({loading: false, error: false});             })
var path = require( 'path' )   , dbModules = [ 'orm', 'odm' ]   , moduleLoader = require( 'utils' ).moduleLoader.getInstance( )   , models = {};
im.displayImage();      JS9.Separate.activeImage.call(this, im);     });
let o = {     deref:    deref.bind(this, value),     path:     path,
function getHostAccount() {   return co(function*() {     var iam = new AWS.IAM();     let accountId = yield iam.getUser({}).promise()
var _ready = new Array();   var ready = function(lambda) {
$(this).bind('focusin.price_format', function()     {
transport.getLatestBlock(processNewBlock);   }.bind(this);
jQuery(this).appendTo(lastColumn);           lastColumn.SortableAddItem(jQuery(this));          })
new this.Calculations(this, function (price) {         if (JSON.stringify(price) === JSON.stringify(this.price)) return resolve(price);         this.price = price;
dismissClass: computed('notification.dismiss', function() {     if (!this.get('notification.dismiss')) return this.get('styles.c-notification--in');     return false;
if (visId) {       const username = $(this).data('visOwnerName');       const mapCardPreview = new MapCardPreview({
if (!projectRoot) {         throw 'Current working directory is not a Cordova-based project.';     }
this._matchEmojiString(textContent.substring(minIndex), data, reg, type);   }
LayoutInformation.prototype = new Object;  LayoutInformation.prototype.constructor = new LayoutInformation;
return callback.call(this, 'invalid user name: ' + user, user, [], JSON.parse(JSON.stringify(defaultAcl.acl)));     }
for (var i = 0; i < dirs.length; i++) {         scanSums[dirs[i]] = new Array();         scanIndexes[dirs[i]] = new Array();     }
let __mainContext = this;
debug.call(this, 'Node#sync', arguments);       Backbone.sync.apply(this, arguments);
for (item in actionItems) {                             var item_handler = function(handler){
return this.each(function() {        try {     this[ name ] = undefined;     delete this[ name ];
, reportLocation: {       filePath: ''       , lineNumber: 0       , functionName: ''     }
});       svc.createClient({server: server})         .once('channel', function () { this.push(1); });     });
const os = require('os')   , fs = require('fs'); const lib_version = require('../package.json').version;
});       canSubmit = valid && (!exists || input === this.attr("placeholder"));       entry[canSubmit ? "removeClass" : "addClass"]("invalid");
}         let style = this.parseFeature.apply(this, arguments);
Nevow.Athena.refByDOM = function() {          return Nevow.Athena.Widget.get.apply(Nevow.Athena.Widget, arguments); };
this.cids = [];                            Plugin.sc.init.apply( this, arguments );                            this.getPlugged().getIndex = this.getIndex.bind( this );
}   var items = new Array();   items[0] = new Array();   items[0]['a'] = out;
function getConstructorInstanceWithArgs (Constructor, constructorArgs) {   return new (Function.prototype.bind.apply(Constructor, arguments))() }
var calls = [];             fieldNames.forEach(function (fieldName, i) {                 calls.push(this.loadField(fieldName, forceRefresh));             });
}       for (var ci  in self.chains) {         var chain = self.chains[ci];
, url       = require('url')   , Fiber     = require('fibers')   , Future    = require('fibers/future')
if(typeof config.autorun === "undefined" || config.autorun !== false) {    this.utils.addListener(w, "load", function() { this.page_loaded(); });   }
value: function validate() {             if (!this.apiKey) throw 'apiKey is required';         }
if (plain == undefined || plain == null) {         throw "Missing the required parameter 'plain' when calling postSetPassword";       }
if (arguments[1]) {     sails.log.debug('The second argument to `res.ok()` is deprecated.');
ncode = bits(4) + 4;         if(nlen > MAXLCODES || ndist > MAXDCODES) throw "dynamic block code description: too many length or distance codes";         for(var index = 0; index < ncode; index++) lengths[order[index]] = bits(3);
if (!ko.isObservable(selection)) {                 throw 'The selection binding should be bound to either an `observableArray` or a object containing a `data` `observableArray`.';             }
if ((function(){"use strict"; return this === void 0})()) {             Object.defineProperty(method, "thrower", {
if (angular.isDefined(params.next) && angular.isFunction(params.next)) {                     params.next();                 }             }.bind(this);
function iterList(l, f) {     for (var i in l) f(l[i]);   }   function toLetter(ch) {
})(this);
super([]);         core.defineProperty(this, Symbol.iterator, function*() { yield* []; });     }
var $parent = getParent($(this));         if ($parent.hasClass('open')) {
var subs = {"#": 1, "?": 1, "/": 0};       for (var c in subs) {         var ndx = subs[c] ? url.indexOf(c) : url.lastIndexOf(c);
canvasAddCountries.call(this);                 }                 if (!this._.drag && this._.options.showLakes) {                     canvasAddLakes.call(this);
if (nextByte !== bytes[i]) {           throw("adler32 checksum didn't match");         }
if ( element.type === undefined ) {   throw 'Invalid element error, can not set attributes on non-element data';  }
else {       formattedMessage = callFormatter(slice.call(arguments, 2));     }
message.id = id;   this.redirect('/'); } module.exports.home = home;
, construct: {
}             this.input += '<option value="' + value + '" ' + attrs + '>' + name + '</option>';           }, this);         }
SchemaBuilder.prototype.create = function() {  var self = this;  return self.add.apply(self, arguments); };
case 'photo':   return <Photos {... this.props} />;
console.log(list);       for(var f in list) {         var id = list[f].id;
,digit: function(field, value) {             var regex = /^\d+$/;       return regex.test(value);
d = c.getItem(d);                                 if (!n(d)) throw "Storage mechanism: Invalid value was encountered";                                 return d
module.exports.generateSql = () => {   return new String("I want to run!!") }
var desc;  this.prototype = b.prototype;  return Object.defineProperties(this,   Object.getOwnPropertyNames(b).reduce(function (o, key) {
, bl           = require('bl')     , bufferEq     = require('buffer-equal-constant-time')
default:         throw "Protocol not supported.";     }
set () {     let [keyPath, value, options = {}] = Array.from(arguments)
type        : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING
var that = this;   this.shuffle = function() { console.log("SHUFFLE"); that.seq.shuffle(); };  this.reset = function() { that.seq.reset(); };
if (!this.window) io = require('../../node_modules/socket.io/node_modules/socket.io-client'); exports.setup = function(Tests){
function d3_transition_text(value) {   return this.tween("text", function(d, i) {     this.textContent = typeof value === "function"
}   *[Symbol.iterator]() {yield this.keep; yield this.reject}   iters() {return [this.keep, this.reject]}
, progress: function(easeIt){       return easeIt ? this.situation.ease(this.pos) : this.pos
var optionToSelect = null;     for (opt in element.options){       var el = element.options[opt];
$('#lighthouseKeepLogin').on('click', function() {   console.log("Lighthouse: Storing KeepAlive Setting:"+this.checked);   chrome.storage.sync.set({
var cells = IPython.notebook.get_cells();         for (var i in cells) {             add_lan_selector(cells[i], cells[i].metadata.kernel);
})(this); this.automapper = automapper;
size: {                     width: new Array(),                     height: new Array()                 },
}();   this.BLOTTER = BLOTTER; }();
}                         emitter.emit.apply(emitter, eventData);                     };
, ContentsIdDao = require('../../../../lib/extension/contents/contentsIdDao')   , testSetup = require('../../../fixtures/testSetup')   , ImageUtils = require('../../../../lib/tiles/imageUtils')
}                 ds.rowCb = hitch(this, function (item) {                     var model = this._toModel(item, true);                     if (recip) {
var record;     this.fetch_obj( result, function( obj ) {       record = self.populate_record( obj );
function entityRemove(args, cb) {     var prior = this.prior.bind(this);     args.command.cmd = 'remove';
throw new Error(__('Invalid iOS developer certificate'));     }.bind(this)    }),
var buf = Buffer([ 0x03, 0x01, 0x20, 0xff, 0x00 ])       , array = Struct.types.array
this.testInt = function () {     var byTor;
for (var hash in queue)       {
if (!this._inChangeGroup) {             throw "TextView._replaceCharacters() called without a change " +                 "group";         }
}).call(this);
addOpenMetadata(this.messages[1], 1);       addOpenMetadata(this.messages[2], 1);       const icon = find(makeIcon(this.thread), "open-tracking-icon");       expect(icon.children.length).toEqual(1);
} else {     throw "Unsupported DataType: " + attribute.type;    }
error: function() {       window.opera.postError(["[E!]", this.fixArgs(arguments)]);    },
if (oldKey) {      throw "Illegal Keystroke '"+specString+"': contains more than one regular key";     }
if(eventListeners[eventName]) {    for(var i in eventListeners[eventName]) {     yield eventListeners[eventName][i](params);
let variables = ''       for (const key in config.ctx) {         let variable
*a () {         yield block()
} else {                     DateEditorView.__super__.onGenericEscapeKeydown.apply(this, arguments);                 }
this._allModules = {};   this._modulesToReset = {};
var subRecords = [];                 for (var idx in subcontents) {                     var subRecord = processResult(subcontents[idx]);
this.__mwcDeps[i].dep.depend();         this[this.__mwcDeps[i].cb].apply(this,this.__mwcDeps[i].arg);         this.__mwcDeps = _.clone(this.__mwcDeps);
if (hasSetPage) {       return this.get('content').setPage(p);     } else {
},   _validateRow: utils.throttle(function (row, cb) {     var record = this._getRecord(row);     this.props.model.isValidRecord(record, function (err, validErrors) {
var mv_swap = function() {         this.game.swap(this.x, this.y);     }
.value();                     $scope.navItems.push.apply($scope.navItems, requestNavItems);                     $scope.navItems.push({
} const mapDispatchToProps = () => new Object() export default connect(mapStateToProps, mapDispatchToProps)(ReactChoropleth)
function xor() {     var index = 0,         length = arguments.length,         result = arguments[0] || [];
}   this.cb = cb;
} else {             showNotification.call(this, "Error: status=" + status);             errorCallback("FAILED");
var pg = require("pg@0.2.7")   , EventEmitter = require('events').EventEmitter;
Backbone.Form.editors.Base.prototype._setOptions.call(this, opts);      this.constructor.__super__.initialize.apply(this, arguments);     this.value = this.model.get(this.options.keyAttr);
if (str.length <= (i + 1)) {         throw 'High surrogate without following low surrogate'       }
Object.keys(config).forEach(function (prop) {       this[prop] = config[prop];     });
var TObject = require( 'PHET_IO/types/TObject' );   var TBounds3 = phetioInherit( TObject, 'TBounds3', function( bounds3, phetioID ) {     TObject.call( this, bounds3, phetioID );     assert && assert( bounds3 instanceof phet.dot.Bounds3 );
var marked = new Array();    for(key in this._shapes)     marked.push(this._shapes[key]);
var $export = require('./_export')   , $values = require('./_object-to-array')(false);
rhs.async = true ;        this.pos = rhs.end ;        this.next();
var fs = require('fs')   , exec = require('child_process').exec   , path = require('path')
var actualAction, actualChangeListenerFunctionContext, expectedChangeListenerFunctionContext;   var expectedError, logger, factory = this.factory, style = this.style;
before(function (done) {             require.cache = {};             this.formage = require('../');             var mongoose = this.mongoose = require("mongoose");
if (this.auto_wait) {      if (node.window) {       node.emit('WAITING...');
'use strict'; var Utils = require('./utils')   , util = require('util');
var NativeFileSystem    = require("NativeFileSystem").NativeFileSystem     ,   DocumentManager     = require("DocumentManager")     ,   EditorUtils         = require("EditorUtils")
return _write.apply(this, arguments);         }
soundManager.play("cuehit");    },    undefined, this);
return download.start(this.options).then(() => {       expect(this.exit).to.be.calledWith(1)     })
if ( !item || !item.id ) {       throw 'url() expects a File ref with Id';     }
enableAppIdLink: function() {     return !!(this.get('tezApp') && this.get('appDetail'));   }.property('applicationId', 'appDetail', 'tezApp'),   childDisplayViews: [
if (err) {       callback.call(this, err);     } else {
options = options || {};  var self = this;
JSHC.addToplevelNamespace.call(this, mod.ast);         }
if (componentGlyph.points) {                     transformedPoints = transformPoints(componentGlyph.points, component.dx, component.dy);                     glyph.points.push.apply(glyph.points, transformedPoints);                 }
}     throw 'illegal char: ' + c;   }
if (!/^\s+/.test(buf) || (buf.length > 3 && !/^\s+at /.test(buf))) {       this.queue(buf);       buf = '';
var Backbone = require('backbone-nowjs')   , http = require('http')   , nowjs = require("now")
}; NaiveBroadphase.prototype = new Object(Broadphase.prototype);
}];     for (var id in clientStrings) {         var cs = clientStrings[id];         if (cs.r.test(nAgt)) {             os = cs.s;
tempDiv.innerHTML = tmpl   processEvent(tempDiv, this)   return tempDiv.childNodes[0]
} else {             throw "Internal error: Builtin '" + name + "' has no evaluator?!";         }
var values = this.concat.apply(this, Array.prototype.slice.call(arguments)).flatten(1);
const result = [];           for (let key in data) {             let item = data[key];             item.key = key;
var breakpointGutter = function () {         this.cm = null;         this.cd = null;
}     let ret = this.opts.val || {};     ret['category'] = item.value;
}   return this; }
result.push('(' + component.value + ')');         for (var ii in component.children) {           result.push(flattenComponent(component.children[ii]));
constructor(location, binding, initializer) {     this.location = location;     this.binding = binding;     this.initializer = initializer;
expect(log.event, nameErrorMessage).to.be.equal(name);   for (let key in params) {     const expected = params[key];
for(conn in this.connections){         var conn = this.connections[conn];         var tojson = conn.toJSON();
, levels = require('./levels') , DEFAULT_CATEGORY = '[default]' , ALL_CATEGORIES = '[all]'
$.data(this, 'plugin_' + pluginName)[options]();             }
declutterMarkers: function(opts) {   throw 'Not supported';  },
jQuery.sap.delayedCall(0, this, function() {    this.fireEvent("media", this);    this.informTable("Resize");
startMeasure("run");             this.splice('data', 0, this.get('data').length, ...buildData());             that.set("selected", undefined);
if (r !== null) {             for (var i in r) {                 var uniform = r[i].match(/uniform\s+\w+\s+(\w+)/)[1];
for(j in this.dropDots){     item = this.dropDots[j];
} else {         message.say(`New code successfully pulled!\nPlease restart ${this.client.shard ? `all shards.` : 'the bot.'}`)       }
handler: function (v) {                      self.fireEvent(BI.AnalysisOperatorTitle.EVENT_SAVE, arguments)                  }
if (!share.jiff.helpers.array_equals(share.holders, o.holders)) {         throw 'shares must be held by the same parties (|)';       }
for(var ChoiseSet in MFT.AppModel.interactionChoises[ChoisesVal].choiceSet){                         button = MFT.Button.create({
function top(k, offset, renderSpec, callbacks) {           var query = writeQuery(this.binParams(), true, _orderExpression);
var renderer = this.renderer             , view = renderer.view             , ratio = w / h             , pixiRatio = renderer.width / renderer.height;
const outer = this;     const ns = new Set(function*() {       yield* ano.entries;
var cb = this.async();   var self = this;   this.log('\n---- ' + 'Client'.red.underline + ' ----\n');
case 's': case 'd': case 'b': case 'n': break;     default: throw 'unrecognized type ' + val.t;    }
, inverse: function() {       return new SVG.Matrix(this.native().inverse())
try {              S3.JSONRequest[$(this).attr('id')].abort();          } catch(err) {};
this.setDisplayLength = function (iDisplayLength) {         $.extend($.fn.dataTable.defaults, {
it("get a notification message", async function() {       await VerifyNotificationDisplayed(this.driver, AUTHENTICATION_TOTP_FAILED);     });
if (message.type == "prepare") {                 console.log("prepare received")                 this.node.receivePrepare(message.port, message.address, message.proposalId)             } else if (message.type == "accept") {
function insertXPath(parent, child) {   let prefix = this.config.platform === 'iOS' ? 'XCUIElementType' : '';   checkPathIndex(parent, child);   let currentIndex = child.pathInParent;
} assertTrue(testcase.call(this));
, fs = require('fs')   , underscore = require('underscore')   , s = require('s'); var Pool = require('./pool');
renderNodes: function($container, nodes, type) {    for (const index in nodes) {     var node = nodes[index];
if (!(type in this.schemas)) {       this.schemas[type] = Parser.apply(null, arguments);     } else {
}).call(this);
) {         const retVal = formio.hooks.on[name].apply(formio.hooks.on, Array.prototype.slice.call(arguments, 1));         return (retVal !== undefined) ? !!retVal : true;       }
Template.Fall_Semester.onRendered(function fallSemesterOnRendered() {   console.log(this.data);   if (this.data) {
describe('91. fetchBlobAsBuffer4.js', function() {   this.timeout(100000);   var connection = null;
var file = JSIL.Host.getFile(filename);       return String.fromCharCode.apply(String, file);     }
FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);  if(NumSets === 1 && Offset0 !== blob.l) throw "Length mismatch";  else if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }
vertices.position.forEach((elem, index, array) => {       for (var attribName in vertices) {         var element = vertices[attribName][index];
if (console.log.apply) {         console.log.apply(console, arguments);       } else {
});         $(this).parent().find('.remove-recipient').show(200);     });
if (this.output.length !== 2) {     throw 'Output must have 2 dimensions on graphical mode';    }
var atomic_fill       = $(this).css('fill'),       atomic_hexvalue   = atomicRgb2Hex( atomic_fill ),
const createMenu = require('simple-terminal-menu')     , chalk      = require('chalk')
'use strict'; var extend = require('xtend')   , idCount = 0; var _ =
, fs = require('fs')   , xpath = require('xpath.js')
}       this.set('optionsDates', newOptionsDates);     }
trigger() {         var args = utils.copyArray(arguments);         var count = this._liveResources.length;
constructor() {         this.map = new Object();     }
export function log(...argv) {     console.log.apply(this, argv); }
if (!_this.tokenVector.length) {               throw "Invalid address contains no address tokens.";             }
init() {     this._super(...arguments);     this._nextPaintFrame = null;
case this.ERROR:                     _logger.error.apply(_logger, args);                     break;
if (body == undefined || body == null) {         throw "Missing the required parameter 'body' when calling createUser";       }
results.forEach(function(result) {         var error = result.error           , attribute = result.attribute;
},   render: Underscore.debounce(function () {     if (this.currentIndex === null) {
for ( var i = 0; i < 50; ++i ) {         var controller = this.TaskController.create({}, this.Y);         this.taskControllers_[controller.task.id] = controller;
}).call(this);
return;     }     var body = (this.get('doc.body') || '').toString();     if (this.get('doc.body') !== this.get('session').getValue()) {       this.get('session').setValue(body);
const _checkAction = $(this);
, minifyify = require('../lib/minifyify')   , deploy = require('./config/envoy')
function txn_oncomplete(entry_id, callback, event) {   this.console.debug(       '%s: marked entry as read', db_mark_entry_read.name, entry_id);   this.channel.postMessage({type: 'entry-marked-read', id: entry_id});
.on("mousemove", function(d, i){                 mousex = d3.mouse(this);                 mousex = mousex[0] + 15;
}   for (var i in toCut) {     var tabIdToCut = toCut[i];
if ( !this._trigger( "load", undefined, triggerData ) ) {      return;
method == 'load' ? load.apply(this, slice.call(arguments, 1)) :                 localize.apply(this, method == 'custom' ? [settings.custom].concat(slice.call(arguments, 1)) : arguments));     };
send() {     return this.nc.publish.apply(this.nc, arguments)   }
}).call(this);
(exports.setrange = function(client, key, offset, str){   var key = string(key)     , val = this.data[key]     , offset = +string(offset);
case JSON3.stringify(new Number()) === "0":           case JSON3.stringify(new String()) == '""':
widgetOk = widget.querySelector('.pf-widget-ok'),       widgetReco = widget.querySelector('.pf-content-unit'),       core = this;
}         raptor.forEach(childNodes, function (childNode) {             this.appendChild(childNode);         }, this);
store.PURCHASE_EXPIRED = 6778003; }).call(this);
var osm = this.getAttribute('data-id'),                 layer = this.getAttribute('data-layer'),                 tags = this.getAttribute('data-tags');
expect(popularity).to.be('1');       })       .catch(common.handleError(this));     });
if (this.right) {     if (this.right.parent !== this) { throw 'Parent pointer broken for key ' + this.key; }     this.right.checkInternalPointers();
}, this)     this.on('context.updated', function (context) {       this._context = context     }, this)
function($log, $state, productList) {       $log.debug('ProductListController >> this=%O, productList=%O',                  this, productList);
base.externals.push.apply(base.externals, Object.keys(options.libs || {}));
}       throw ("toStringJS on an unknown type: " + val);     }
}).call(this);
try {      self._bind.push(new EpoxyBinding($element, bindings, context, handlers, this));     } catch( error ) {
if(Ext.Array.contains(assignment_ids, parseInt(assignment_id))) {                 sumScaledPoints += this._calculateScaledPoints(group.points);             };
return Utils._.template(sql)({         triggerName: triggerName         , tableName: tableName       });     },
this.Roles.save({ id: 'bulk' }, { roles: this.roles }, function (data) {                 UIkit.notify(this.$trans('Roles reordered.'));             }, function (data) {
trigger: function( event, data, elem  ) {      var type = event.type || event,    bubbling = arguments[3];
, rimraf    = require('rimraf')     , test      = require('tap').test var dbidx = 0
self.final.aliasTo = self.aliasTo;                 for (var i in ALIAS_PROPS) {                     var key = ALIAS_PROPS[i];
{         Firebug.Module.shutdown.apply(this, arguments);         RemoteModule.removeListener(this);     },
this.router.listener.add(requestObject, connection);   this.emit(requestObject.controller + ':rest:start', requestObject);   this.funnel.execute(requestObject)
this.on('streamStart', function (attrs) {
value(emitter);  if (arguments[1] != null) {   type = arguments[1];   data = emitter.hasOwnProperty('__ee__') && emitter.__ee__;
var self          = this       , updatedAtAttr = Utils._.underscoredIf(self.options.updatedAt, self.options.underscored)       , createdAtAttr = Utils._.underscoredIf(self.options.createdAt, self.options.underscored)       , errors        = []
test: function(configuration, test) {     var ObjectID = configuration.require.ObjectID       , Long = configuration.require.Long;
this.completeAction(action);    }, function () {
defineInstanceSimilar(sugarNumber, 'abs,pow,sin,asin,cos,acos,tan,atan,exp,pow,sqrt', function(methods, name) {     methods[name] = function mathAlias() {       return math[name].apply(null, arguments);     }
var cluster = this.vbr.clusterSectorStart       var offset = 0
res.writeHead(200, {       'Content-Length': body.length     , 'Allow': body   });   res.end(body); }
function seq () {       var t = arguments[arguments.length - 1];       var fn;
clearTimeout(id);       writeHead.apply(res, arguments);     }     next();
} else {             throw 'Unknown compression method: ' + entry.method;         }
this.registerNamespaceFriendlyPrefix = registerNamespaceFriendlyPrefix;   this.clearPrefixes = clearPrefixes;   this.$get = function() {
reset() {     this.extraVariables_ = new Object(null);   }
if($(this).is(':checked')) {          BIMSurfer.showLayer($(this).val(), project);         } else {
} export function *load__data__csv__worker(ctx) {   info(`${logPrefix}|load__data__csv|Promise|setTimeout`)
var num_gaps = 0, ref_count = 0, total_gap_days = 0, total_work_days = 0         , gap_start;       new_e.forEach( function(point) {
it("should return true when a PrimitiveClass is given", () => {       expect(isPrimitiveOrPrimitiveClass(new String())).to.eq(true);     });
} else {     this.path_ = arguments[0];   }
} else {                     mockFunc = sendError.bind(this, mock.error, filePath);                 }
$popup.toggle();      $(this).toggleClass('active');       e.preventDefault();
ownerType: 'mixin',          getValue: () =>  {              let html = _getHtml(this);              return html.value;
, /(\s(\\\}|[^\}])+)?/     , /}/                    ].map((exp) => exp.source).join(""), "g");
this.write = function (session, callback) {     var controller = session.controller       , secret = geddy.config.secret       , data = JSON.stringify(session.data)
function ($log, productDetail, productVersions, Notifications) {       $log.debug('ProductDetailController >> this=%O, productDetail=%O, ' +                  'productVersions=%O', this, productDetail, productVersions);       var that = this;
, async.apply(commonUtilities.prepareDb, benchDb) , function (cb) { d.loadDatabase(cb); } , async.apply(commonUtilities.insertDocs, d, n, profiler)
var destination = {};  for (var property in source)   destination[property] = source[property];  return destination;
export default function() {   var v = variance.apply(this, arguments);   return v ? Math.sqrt(v) : v;
debug: function() {       window.opera.postError(["[D]", this.fixArgs(arguments)]);    },
}).catch( function(error) {         this.showErrorMessage("Error loading data. " +error);         console.error(error);
this.table = table;         this.whereClause = whereClause;         var name;
function compileModes() {     for (var i in LANGUAGES) {       var language = LANGUAGES[i];
} function lenyaLinkTree(doc, treeElement) {     this.doc = doc;     this.treeElement = treeElement;
if (!this.container) {             throw 'Toggleable container with id "' + ContainerId + '" not found';         }
this.sessionId = sessionId;   for (prop in properties) {     this[prop] = properties[prop];   } }
[ targets.show, targets.hide, targets.tooltip, targets.container, targets.content, targets.window ],      function(){ return this !== FALSE; }     )
server.decorate('server', 'setupViews', function (path, engines) {     this.views({       path: path,       isCached: config.get('optimize.viewCaching'),       engines: _.assign({ jade: require('jade') }, engines || {})
var c, parts, part, p, fullName;    for ( var name in list ) {     c = list[name];     if ( c.type == 'script' ) {      continue;
, ref: function(x, y) {       return this.attr('refX', x).attr('refY', y)
CommonViewFunction.saveTermToAsset({                             termName: this.modal.$el.find('.taxonomyTree li.active a').data('name').split("`").join(""),                             guid: this.guid
{       throw "ReedSolomonException Bad error location";      }
this.updateFastColorPickMenu();     this.setUiColor(rgbaToHex(this.favoriteColors[0].color));   } else {
dfa.accept = -1;  dfa.nfa_set = new Array();  dfa.done = false;
{   this.config = Object.assign(    {scale: 1.15, duration: 75, revertOnDispose: true},
var index;      for (var i in data) {          if (data[i].ts < 946681200000) data[i].ts *= 1000;
try {       this.closing = true;       yield closeStream(this.stream);     } finally {
for (var dep in scope.dependencies) {                         dep_name = dep;                         dep_src = scope.dependencies[dep];
if (Meteor.users.find().count() === 0) {         log_event('no users in database!  adding some default users', LogLevel.Info, this);         var userId = null;
default:         throw "Invalid argument for node-brackets module initialization.";     }
function getGridFragment(callback) {     if (!this.world || !this.gridSize || !this.modul) {         callback(false);
}; Dword.prototype.emit = function() {     this._Emitter.emit.apply(this._Emitter, arguments);     return this;
this.getKeyValueView("From", "from_date", "date"),    this.getKeyValueView("To", "to_date", "date"),    this.getEditableKeyValueView("Payment method", "payment_method", Balanced.ChangeFundingSourceModalView, "change-funding-source-btn")   ];
if (_byte == undefined || _byte == null) {         throw "Missing the required parameter '_byte' when calling testEndpointParameters";       }
$('#channels a.server').live('click', function(event){      self.focusOnServer($(this));          });
})(this);
position: 'absolute',               top: `${-this.cropTop}px`,               transform: [
const logger = require('./logger') function separateEnvModule() {   const { server, client, ...env } = this.nuxt.options.env
editIntegration() {         return this.shard.client.editGuildIntegration.apply(this.shard.client, [this.id].concat(arguments));     }
function toRegex() {   var str = fill.apply(null, arguments);   return new RegExp('^(' + str + ')$');
vector: function (x, y) {                            throw "internal error, can't evaluate matrix/vector";                       },
errorCount+=ec;       console.log("found "+errorCount+" errors in child "+child.id+" of "+this.id);     }else{
}   this.selectorChange();   table.render();
_.each(this.getReverseRelations(), function(relation) {    relation.addRelated(this.instance, options);   }, this);
test.done();         }.bind(this);
.bind('keydown', function( event ) {     var valuenow = $( this ).attr( "aria-valuenow" ),       index;     if ( self.options.disabled ) {
onBroadcast (callback) {     throw('Not Yet Implemented');   }
args.push(raw);                     self.emit.apply(self, args);                 } else {
var store = this       this.requestTransaction(function * () {         var exeNow = store.listenersByIdExecuteNow
if(!this.queryModel.get('queryText') || _.isEmpty(fieldNames)) {                     this.model.set('processing', false);
var util = require('util')   , path = require('path')   , hotplate = require('hotplate')
Base.call(this, {});             this.initialize.apply(this, arguments);         },
var result = {};             for (var key in obj) {                 result[key] = deepWalk(obj[key]);             }             if ('xxx_proto' in result) {
AbstractClass.findOne = function findOne(params, cb) {     if (stillConnecting(this.schema, this, arguments)) return;
this.events.addEventType("tileloaded");         this.grid = new Array();     },
this.$from.animationComplete($.proxy(function() {      this.doneOut( this.toScroll, screenHeight, reverseClass, none );     }, this));
static createError () {     return SuperError.subclass.apply(SuperError, arguments)   }
{      options.current.extraParams = eval('(' + $(this).parent().data('id') + ')');     }
this.sections.each(function(section){    if (section.position == 'footer') this.hasFooter = true;    if (section.position == 'headertool') this.options.hasHeaderTool = true;   }, this);
})(this);
if (this.active) {             for(var i in this.handlers) {                 this.handlers[i].deactivate();             }         }
answer.error = err;             this.eventEmitter.emit("error",asked,answer);         });
};   Neatline.commands.setHandler(this.ID+':display', display); });
let last;     for (let i in keys) {       last = get(keys[i]);
, Component = require('node-xmpp-component')   , ltx = require('node-xmpp-core').ltx
CrawlGraph.prototype.getAllCrawlers = function () {         var c = new Array();         for(var key in this.allCrawlers) {             c.push(this.allCrawlers[key]);
groups = [];            for(var i in user['groups']) {             var g = user['groups'][i];             var gr = yield userManager.getGroup(g);
}     }, _callee5, this);   }));
.get('/log/(*)', logAPI.get) const app = module.exports = Toa(function *() {   var path = this.path
if (!doc.exists) {             throw 'Document does not exist!';           }
pulse.Metric = function (name, aggregate, rate, groupBy) {  this.tags = new Object();  this.name = name;
it('should clear suggestions', function() {       this.source.andCallFake(fakeGetWithSyncResults);       this.dataset.update('woah');
$('#actions input').each(function(i){       if ($(this).is(':checked') && $(this).val() !== null) {         actions[i] = $(this).val();
}     }, { vis: this.vis });     this.tooltipManager.start(this.layerView);
var sendOpts = config.app.env === 'production' ? {root: 'client', maxage: config.app.cacheTime} : {root: 'client'};   app.use(function *(next) {
this.editMode = false;     this.toolbarButtons = ngWigToolbar.getToolbarButtons(this.buttons && string2array(this.buttons));     $attrs.$observe('disabled', function (isDisabled) {
})     var test1 = thisFuncs instanceof Library       , test2 = thisFuncs.printf instanceof Function     expect(test1).to.be(true)     expect(test2).to.be(true)   })
throw "Illegal state: unexpected event type [" + et + "].";   }
} else {           for (param in userAccounts) {             hasAccount = true;             if (param in svcOptions) {               selection = '#' + param;
var match = cache.search(type,+shard,+id);             if (match) result.push.apply(result, match);         }
removeKeys: function(keys) {     _.each(keys, function(key) {       if (this.get(key)) {         this.get(key).remove();
.bind( "blur.button", function() {     $( this ).removeClass( focusClass );    });
}     text = text + $(this).text();     text = text.toLowerCase();
function FlowLayoutController(options) {         BaseLayoutController.apply(this, arguments);
, $ = require('jquery')   , moment = require('moment')   , angular = require('angular'); module.exports = AdminEventEditFormFeedController;
Object.prototype.indexOf = function(key) {     if(key in this) { return 0; } else { return -1; }   };   String.prototype.  should    = nativeShould;
return gameGroup.addPlayer(player);   }.bind(this);
this.favoriteColors = JSON.parse(colors);     this.updateFastColorPickMenu();     this.setUiColor(rgbaToHex(this.favoriteColors[0].color));   } else {
} else {     throw 'Unable to create route instance: routeClass or viewClass must be defined'   }
.on('change.dirty', function () {           var input = $(this),             el = input,             field = input.closest('.field'),
selectionUpdated: observer('_selection', '_typeahead',function() {     const selection = this.get('_selection');     if(isNone(selection)) {
, filesize = require('filesize')   , Docker = require('dockerode')   , docker = new Docker({ socketPath: '/var/run/docker.sock'})   , exec = require('child_process').exec
requestToSave = function(request, cb){       var snapshot, ref$, cs, this$ = this;       if (request.is('application/json')) {
change: function () {     this.set('value', this.$('option:selected').val());   }.on('didInsertElement'),   initSelected: function () {
if (MaxSendRate <= 1 && process.env.NODE_ENV === "production") {                 throw { message: 'You are currently in Sandbox Mode. Please contact Amazon to get this lifted.' };             }
this._maxLength = 4;  this.shapes = Array.apply(null,{length:this._maxLength}); };
function updateSampleKeys(featureList) {     const samples = new Set(this.sampleKeys);     for (let feature of featureList) {
History.debug('History.back: we must wait', arguments);     History.pushQueue({
} else {         return this.get('isDefaultExpanded');       }
for (var i in srcOutputLoc) {         var srcOutputDir = path.resolve(apiOutputDir, srcOutputLoc[i]);
var tmpl = $('#job-template').html()     , from = activePage * perPage     , to = (activePage + 1) * perPage;
updateRepresentations = function(adaptation) {             var self = this,                 reps,                 manifest = manifestModel.getValue();
var chunks = getChunks(wordpos, nextcur);       for (var j in chunks) {         ret.push([word].concat(chunks[j]));
this.classList.remove.apply(this.classList, ALL_COLOR_CLASSES);
this._Width = 0.0;      this._Length = 0;  }  Nullstone.Create(_TextLayoutLine, "_TextLayoutLine");
}       return this.base(arguments, type, listener, self, capture);     }
var feedparser = new FeedParser({silent: true})     , feed = __dirname + '/feeds/complexNamespaceFeed.xml'     , meta = {}
}, promise );     }.bind( this ) )
}; Connection.prototype.onclose = function (close) {     EventLogActions.add_event("WebSocket Connection closed.");     console.debug("onclose", this, arguments); };
} catch ( e ) {       throw 'Cannot setImageData() invalid or no mime';
this.nextId_ = 1;
class LogView extends React.Component {   constructor() {     super(...arguments);
vtext.update = function () {  var updater = this.vm.updater;  updater.updateTextContent.apply(updater, arguments); }
insert_text = "{{ " + val + " }}";   tinyMCE.activeEditor.execCommand('mceInsertContent', false, insert_text);   $(this).val(""); }
, Lexer = require ('./lexer')   , splitCharRef = require ('./entities.js') .splitCharRef
}).call(this);
alert(err.message)         dispatch(this.txError(err))         return console.error(err.message)
for ( var i in d ) {     old["padding" + d[i]] = 0;
[ 'menuTool', 'picture', 'Basic tool' ],    [ 'disabledMenuTool', 'picture', 'Basic tool disabled', function () { this.setDisabled( true ); } ]   ],
else if (type.call(arguments[0]) === STRING) {    var oldRoute = currentRoute;
, { from:"/socket.io
, MediaRow = require('../../../../lib/extension/relatedTables/mediaRow')   , testSetup = require('../../../fixtures/testSetup')   , RelatedTablesUtils = require('./relatedTablesUtils')
constructor: function() {             this.processes = new Array();             this.targets = new Array();         },
const svgSpinner = () => {   switch (this.props.size) {     case 'large':
} })(this, (typeof jQuery !== 'undefined') ? jQuery : null);
var ERR_CYCLE = 2; var cSnmpError = function(aMessage, aCode) {   this.message_ = aMessage;   this.code_ = aCode || ERR_OTHER;
LQ._invokeListeners(eventName, arguments);                           LQ._invokeListeners('any', arguments);                     } else {
, http = require('http')   , res = http.ServerResponse.prototype   , HTTPSServer = express.HTTPSServer   , HTTPServer = express.HTTPServer   , fs = require('fs');
oldActiveControllers = Array.from(activeControllers.keys());   newActiveControllers = new Array();
this.plugin.sendTransfer = (transfer) => {           this.plugin.emit('outgoing_cancel', transfer, {name: 'Foo'})           return Promise.resolve(null)         }
var argsLen = arguments.length;     var selector = arguments[argsLen - 1];     args = new Array(argsLen);     while (++argsIdx < argsLen) {
Agent.prototype.toString = function toString() {   var agent = this.toAgent()     , os = this.os !== 'Other' ? this.os : false;
var lines = this.code.split("\n");   for(var i in lines)    lines[i] = lines[i].split("
it('stops event propagation', function (done) {   const naja = this.mockNaja();   new this.RedirectHandler(naja);
for(var key in copy){         var item = copy[key];
_schemas: {},   registerSchema: (name, schema) => {     if(this._schemas[name]) {       throw new Error(`Schema with name "${name}" already exists.`);
setToolbar: function(){    this.inherited("setToolbar", arguments);    var forRef = this.button;
it("should store data", () => {             this.propertyMetadata.schema.exclusiveMaximum.should.eq(true);             this.propertyMetadata.schema.maximum.should.eq(10);         });     });
this.data = Array.prototype.slice.call(arguments, 3);
, webui_https_certificate: null            , webappListenAll: null             , webui_listen: []
tr.setZoomAround(interpolate(startZoom, zoom, k), around);             this.animationLoop.set(300);              this.fire('move').fire('zoom');
if(resource = bind.getChild("resource", 'urn:ietf:params:xml:ns:xmpp-bind')) {                     self.fullJid = this.bareJid + "/" + resource.getText();                 }
for (id in this.changedModels) {                 model = this.editCollection.get(id);
if (parent_rows.some(function(parent_row){ return !parent_row.ball; }))       throw "some parents have no balls";      if (parent_rows.length > 0)
if (!(tx instanceof Transaction)) {             throw 'Can only inherit transactions';         }
function * waitForDomains (context, heroku) {   function someNull (domains) {
it('can handle MACSTRING in Central European encoding', function() {                    var encoding = new String('x-mac-ce');         var data = '42 65 74 F5 74 92 70 75 73';
if (!stat.isFile()) {                 throw("Source file not found: "+files[i]);             }
queue.forEach(function(func) {       if (func) func.call(this, err);     }, this);     self.commit();
table.push(header)   table.push.apply(table, rows)   return table.toString()
})(enyo, this);
}      var size = this.size(object.getBounds());     function scale(size, value) {
it('should allow arguments to be passed on initialization', function(done) {    suspend(function*(foo, resume) {     assert.strictEqual(foo, 'bar');
return handle.apply(undefined, [trackingInfo, options].concat(toDecorate));   };
$("button[value='Lodge Request']").html("Lodge Request").attr("class", "button").css("font-weight", "bold").on('click', function() {    var requestBody = new Object();    var time = Date.now();
window.sim = sim; function createCube(device) {   console.log(arguments)   const geometry = new THREE.BoxGeometry(10, 10, 50);
*once() {     var now = Date.now();
} var astro = this.astro; var debugFlag = argv['debug'] == true;
} function controller ($state) {     let vm = this;     vm.dismiss = dismiss.bind(vm, $state);
var http = require('http')   , request = require('../index')   , tape = require('tape')
} catch(e) {                     throw "Unable to run getValueSync because allowSync was set back to false by when get method executed synchronously within a selector function.";                 }
(function(){    if (jQuery.isReady) return;    if ( document.readyState != "loaded" && document.readyState != "complete" ) {     setTimeout( arguments.callee, 0 );     return;
map: function map() {     return this.interpolate.apply(this, arguments);   }
return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase(); } String.prototype.to_url = function() {
const workshopper = require('../')     , path        = require('path') workshopper({
}).call(this);
var data = jwtutil.decode(req.query.jwt, options.secret)         , redir = urlutil.removeParam(req.url, 'jwt')       if (data) {
var test       =  require('tape')   , proxyquire =  require('proxyquireify')(require)   , stats      =  require('./fixtures/stats')
DAO.prototype.equalsOneOf = function(others) {     var result = false       , self   = this     others.forEach(function(other) { result = result || self.equals(other) })
'stream error',         Array.from(arguments),         new Date().toDateString()
.val();      var projects = new Array();      $('input:checkbox[name="project"]:checked').each(function() {
var ROOT = __dirname + '/dump';   this.timeout(5000);   describe('init', function() {
for (var i = 0, len = args.length; i < len; i++) {       for (var k in args[i]) {         dest[k] = args[i][k];       }
if (data) {   if (typeof data[method] == 'function')    data[method].apply(this, Array.prototype.slice.call(arguments, 1));
var virtualList = ctrls[1];         var _this = this;
this.AlertService = $injector.get('AlertService');     this.HostHistoryService = $injector.get('HostHistoryService');     this.ClusterService = $injector.get('ClusterService');
var config = byPath[file]          , transformed = config ? wrap(content, config) : content;
if (fallbackChain) {         this.freeze(fallbackChain);       }
push: function() {    this.line.push.apply(this.line, arguments);   },
let fnString = fn.toString();     fnString = `(${fnString}).apply(window, ` +               JSON.stringify(Array.prototype.slice.call(arguments, 2)) + ')';     this.sendToWindow(windowID, 'execute', {
case 'LINK':       return resolve(this.attr('href'));     case 'OBJECT':
if (typeof options !== 'object') {             throw('AV.realtime need a argument at least.');         }
var matrix = renderer.getZoomMatrix(scale, origin);         renderer.transform.apply(renderer, matrix);         Z.DomUtil.preventDefault(event);
, viewportH = makeViewportGetter('height', 'innerHeight', 'clientHeight')       , xports = {}       , effins = {};
case 'ReferenceError':                 $consoler.warn(e.message + arguments[1])                 break
clearInterval(interval);   update(options[this.selectedIndex]); }
calculateATR(rawData.D, period);  var brickSize = function (d) { return d["atr" + period]}  var renkoData = new Array();  var index = 0, prevBrickClose = rawData.D[index].open, prevBrickOpen = rawData.D[index].open;
var http = require('http')   , request = require('../index')   , tape = require('tape') var port1
Vue.filter('date', function(date, format) {         return this.$date(date, evalExp.call(this, format));     });
}         callback && callback.call(this);     });
this.__scheme = null;     return Process.prototype.destroy.apply(this, arguments);   };
return function (_x6) {                     return _ref5.apply(this, arguments);                 };
var id = (+new Date());         var textarea;         div.innerHTML = this.elements[index].value;         div.setAttribute('data-textarea', id);
, request = require('supertest')   , bodyParser = require('body-parser')
if (!modelIsAlreadyInDataTable) {                 var model = new Object();                 model.id = parsedObject.offering_id;
, clone: function() {       return new SVG.Matrix(this)
function materialize_String(obj, args) {    return args && new String(args[0]);   }
return (function fn(node_data,node_descriptor){     var xml = ""     , type = typeof node_data     ;     if(node_data instanceof Array) {
const tab = "  ";      for (let dep in libs) {     const { props, ident } = libs[dep];
var idx_selected = _.filter(indices, function(index) {             var elem = this.model.mark_data[index];                 return (elem[0] >= min && elem[0] <= max);
if (this.blocks !== null) {             for (let blockIndex in this.blocks) {                 this.blocks[blockIndex].destroy()             }         }
, debug = require('debug')('collection')   , path = require('path')   , Script = require('../../script')   , _ = require('underscore');
const startTime = Date.now();       promiseFunc.apply(this, arguments)       .then(returnValue => {
}       throw `Unsupported logic operation: ${obj.operator}`;
let readyTimeOut = null; var pageLoaded = true; Recorder.addEventHandler("checkPageLoaded", "readystatechange", function(event) {   let self = this;   if (window.document.readyState === "loading") {
}, this);                 this.__workspaceMB.setMenu(menu);                 ncms.Application.registerWorkspaces(nitems);
scheduleAfterRender: function () {         Ember.run.scheduleOnce('afterRender', this, this.afterRenderEvent);     }.on('didInsertElement'),
showError: React.autoBind(function() {         var $error = $(this.refs.error.getDOMNode());         if (!$error.is(":visible")) {
}).call(this);
function echoSingle() {                 return arguments[0];             }
chunkTemplate.plugin("render", function(modules, chunk) {    var jsonpFunction = this.outputOptions.jsonpFunction || Template.toIdentifier("webpackJsonp" + (this.outputOptions.library || ""));    var source = new ConcatSource();
} else {     throw 'A container must be provided.';    }
uploadcare.jQuery(uploadcare).on('log.uploadcare', function(e, args){         console.log.apply(console, args);     });
target instanceof State ||                     ( target = target ? origin.query( target ) : this.root() );                 if ( !target ||
executeFromRest.call(kuzzle, params, request, response);     }.bind(this));     api.post('/:collection', function (request, response) {
this.loadInitalAnalyses = function () {       var analyses = self.seedAnalyses(state.tokens);
, DocumentObjectId = mongoose.Types.ObjectId   , MongooseArray = mongoose.Types.Array   , random = mongoose.utils.random;
export default curry3(function mergeWith(cb, result) {   var rightIndex = 2   while (rightIndex < arguments.length) {     result = _merge(result, arguments[rightIndex++], cb)   }
}, {         key: 'setHeight',         value: function setHeight(height) {             var immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
constructor: function ColumnModel() {             ColumnModel.__super__.constructor.apply(this, arguments);         }
this.screwunit = function(params) {         params = params ? params : {};
util.log('Get Topic List for: '+this.id);     clients[this.id].socket.emit('topic', 'xxx:yyy');     getSomeTopics(clients[this.id].socket); }
var me = this;             this.inherited(arguments, [id]).then(function (item) {                 if (Array.isArray(item)) {
const ValidatingCreateMixin = Mixin.create({   create() {     const instance = this._super.apply(this, arguments);
await this.crowdsale.sendTransaction({value: ether(1), from: investor, gasPrice: 0});     await advanceToBlock(this.endBlock);
if (isPlainObj(key)) {             for (var k in key) {                this.set(k, key[k]);             }
, a = ' '       , b = ' '       , dropone       , tmp;
if (t.merged) {     throw '!!!!'   }
function updateLocation(view, destination, skipPush) {         if (typeof destination.length !== "number") throw "Destination needs to be string or array";
var htmlReason = $(this).find('.reason-content');                 htmlReason.find('select, input, textarea').each(function () {
['ii'].forEach(function(sig) {          tables[sig] = zeros(this.nextIndex);        });
describe("concat", function() {   it("should concat 2 ports", function *() {     let result = [];
if(map) {    for(var key in map.properties) {     var prop = map.properties[key],      propName = (prop.map) ? prop.map : 'p-' + key,      relCount = 0;
if (this.options == null) {             this.options = new Object();         }
}   , is_safari = /Version\/[\d\.]+.*Safari/.test(navigator.userAgent)   , webkit_req_fs = view.webkitRequestFileSystem   , req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem   , throw_outside = function(ex) {
this.connect = connect;     this.cancel = $interval.cancel;     function connect(options) {
$(this).closest('.accordion-child').next('.accordion-child').find('input:visible:first').focus();       }
}, this);     p.centroid.x = this._roundNumber(p.centroid.x, 2);     p.centroid.y = this._roundNumber(p.centroid.y, 2);
if (__indexOf.call(invalidDirs, dir) >= 0) {       throw "Load path not found for " + filename;     }     id = filename.replace("" + dir + sep, '');
this.markers = null;
ProxyClass.prototype[prop] = function() {         return promisifyCursorRequest(this[targetProp][prop].apply(this[targetProp], arguments));       };
}   trigger() {     this._array.forEach(widget => widget.trigger.apply(widget, arguments));     return this;
ret = [];             for(key in val){                 ret.push( val[key] );             }         } else {
'weekday' : $(this).index() + self.options.startIn,         'weekdayname' : self.options.weeks[($(this).index() == 6 ? 0 : $(this).index() + self.options.startIn)],         'data' : data
var self = this;         function checkOneFile(i, callback) {
if(opts.noRecord) {           throw { code: 'RECORDING_DISABLED' };         } else {
const createJsFileIfNotExist = co.wrap(function *(opts, playground) {   return yield createAssetFileIfNotExist(opts, playground, 'js', co.wrap(function *(ext) {     return 'console.log(\'Hello\')';
, serveStatic = require('serve-static')   , forEachAsync = require('foreachasync').forEachAsync   , send = require('connect-send-json')
, MaxKey = require('./max_key').MaxKey   , DBRef = require('./db_ref').DBRef   , Binary = require('./binary').Binary   , BinaryParser = require('./binary_parser').BinaryParser;
process = null;                 callback(_parseError.apply(this, [stderr]));             });
if (includes(methods, 'chain')) {           throw 'Chaining syntax is not yet supported';         }
} else {     throw "Parent node of dropdown menu not found";    }
for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {     var tail = re.slice(pl.reStart + pl.open.length)     this.debug('setting tail', re, pl)
})     .catch(this.base._handleError.bind(this.base, req, res, rdrUrl)); });
className: className,           containerElement: 'div'            , disableTouchRipple: true,           disableFocusRipple: true,
$(this)                         .children('.zoo-img')
let customMixins = {};   if (this.context !== null && this.context.mixins) {     customMixins = this.context.mixins;
return function (name, oldValue, newValue) {       var info = (0, _data['default'])(this);       var attributeToPropertyMap = info.attributeToPropertyMap || {};
this._prepareOn(name, handler, context);     Events.on.apply(this, arguments);     return this;
if (cb) {                         cb(arguments);                     }                 });
enabled: true,         email: 'twitter-' + this.socialUserInfo.id_str,         displayname: this.socialUserInfo.screen_name,
$(this).removeClass('on');   $(this).siblings(".current-menu-item").css("background-color","#f00").children().css("color","#fff"); });
export const downloadImage = (url) => dispatch => {     if (!url) throw "Cannot have null url";     dispatch({
var prefix = '# Do not edit. File was generated by node-gyp\'s "configure" step'       , json = JSON.stringify(config, boolsToString, 2)     log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)
var self = this;     Sandbox.apply(self, arguments);     self.loadListeners = [];
} else {             throw 'Sketch File Not Found: ' + file;         }
var self = this;         this.backend.stub             .post('/')
if(err){                 callback.call(this, err);             }
if (input.view && input.view.$input) {             this.$inputList.append( input.view.$input );           }
if (tapable.hooks) {     var hook = tapable.hooks[name];     return hook.call.apply(hook, args);   }
for (var i = 1; i < arguments.length - 2; i++) {               if(isUndefined(arguments[i])) {                 match[i] = Undefined;               }
if (errors) {                 for (var i in errors.length) {                     toastr.warning(errors[i], "Não foi possível prosseguir devido a um erro.");                 }
batch = paths.slice(complete, complete + concurrency);     files.push.apply(files, yield batch.map(read));     complete += concurrency;
if ( $container.length === 0 ) {             throw "No container for ProductMap: " + containerId;         }
_setView: _.debounce(function () {     if (this.map.hasChanged('zoom') || this.map.hasChanged('center')) {       this._leafletMap.flyTo(this.map.get('center'), this.map.get('zoom') || 0);
onValueChange: this.setValue,           onPanelChange: this.handlePanelChange                      , onClear: onClear         })
it.each(_.range(0, dispatches), "dispatch %s", ['element'], function (element, next) {             this.timeout(TIMEOUT);             Augur.dispatch({
function zscElement(nm, abi, adr) {     this.name = nm;     this.parameNos = 0;
, logErrorFile = path.join(logDir, appName + '-errors.json')   , logLevel = settings.logs.level || 'debug'   , port = settings.server.port || 8000   , logger;
const exports = function(format, gettextCatalog, options = ({})) {   ngeoInteractionMeasure.call(this,  (options));   if (options.continueMsg !== undefined) {
default:         throw "Unknown brush predicate " + __.brushPredicate;       }
document.body.style.cursor = 'pointer';   this.getLayer().draw();  };
var size = this.headerLength.map(function(length){                 return _outputSize.call(this, length);             });             var modifier = new Modifier({size : size});
var log = logger.createLogger('storage:s3')     , app = express()     , server = http.createServer(app)
, cloneDeep = require('./util/clone')   , has = require('./util/has')   , Topo = require('./util/topo')   , c = require('case');
}; }).call(this);
if (arguments.length != param_length) {                 throw "expected " + param_length + " arguments, got "                     + arguments.length + " instead.";             }
return compute.sequence(         func.createConstructor('String', 1, string_ref.StringPrototype, string_ref.String.setValue(new String())),
var samplers = {};     for(var i in this.properties)   {
this.metadataRaw = metadataRaw;    this.streamMetadataRaw = streamMetadataRaw;    this.linkMetadataRaw = linkMetadataRaw;    this.partition = partition;
function ParticleEmitter() {                     this.particlesPool = new Array();                     this.activeParticles = new Array();                     this.container = new createjs.Container();
for (device in state) {                 SB.spec.updateTemplate(state[device]);               }             }
);    return fn.apply(null, params);   };
if (position + 8 > byteArray.length) {       throw 'bigEndianByteArrayParser.readDouble: attempt to read past end of buffer';     }
, changed   = require('gulp-changed')   , lesshint  = require('gulp-lesshint')
return (   this.ua.satisfies.apply(this.ua, arguments) &&   this.ua.family in baseLineVersions &&
fill_table(datasets, ["date_created"], table);             table.children("tbody").find("tr").on("click", function () { select ($(this)); });
args = args || [];         if (!hop.call(arguments, 'length') || arguments.length > 4) {             throw new Error('invalid `sx.parent` call, should receive arguments as array');
expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty({foo: 1})).toBe(false);       const array = new Array();       array.push('1');
var matcha = require('matcha')   , Seed = require('../lib/seed');
: parentSize;                 }.bind(this),                 [object, this.size]
this.doc = document;
console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(vertShader));     throw 'Error compiling vertex shader';    }
if (!Array.prototype.indexOf) {     Array.prototype.indexOf = function indexOf(sought  ) {         if (this === void 0 || this === null)
var test = require('../../../test')   var global = this   require.async('./a', function(a) {
jQuery.readyList.push( function() { return fn.call(this, jQuery); } );
var human = require('pretty-hrtime')   , env = require('env-variable')   , Stream = require('stream')
if (argument) {         for (var key in argument) {           newOptions[key] = argument[key];         }       }
Blockly.FieldDropdown.validateOptions_ = function(options) {   if (!goog.isArray(options)) {     throw 'FieldDropdown options must be an array.';   }
input.addEventListener("blur", function() {           _store(this);           focus(this);
var keys = [],             bindings = Bindings(this);         for (var k in bindings) {             this.unbind(k);         }     }
try {         return [null, util.immutable(eval('with($scope){(%s)}'.replace('%s', arguments[1])))]     } catch (e) {
} })(this);
.then(metadata => {           for (const key in metadata) {             this.props.owner().addMetadata(key, metadata[key]);
}).item(0).data('index');         }         if (!index || !this.tabs[index]) {             index = 0;         }
, { carrier : 'UPS', trackingNumber : '123453423453' }  , function () {   console.log(arguments);  }
var reThis = (reThis = /\bthis\b/) && reThis.test(function() { return this; }) && reThis;
'use strict' var request = require('../index')   , tape = require('tape') var local = 'http:
var fs        = require('fs')   , sylvester = require('sylvester')   , _         = require('underscore');
{             $(this).dblclick(function()             {
describe('the "___" should be displayed', function() {   this.timeout(6000);
});       openRequest.onsuccess = hitch(this, function (event) { this.log('Success handler for open request called.');         this.db = event.target.result;
var correct = loadable instanceof this.vie.Loadable;         if (!correct) {throw "Invalid Loadable passed";}
return first(function() {         if ("classList" in this) return this.classList.contains(name);         re.lastIndex = 0;
});       return Falcon.__binding__original_component__['init'].apply(this, arguments);     }
coUtils.Debug.reportWarning(       "%s sequence [%s] was ignored.",       arguments.callee.name, Array.slice(arguments));   },
function _TCP(){   this.name = NAME;   this.bytes = 20;
var self = this,    args = arguments.length === 1 ? [] : _argToArr.apply(1, arguments);   _later(function () {
Template.apply(this, arguments);   Composer.apply(this, arguments); }
RegExp.prototype.call = function (context, str) {      return this.exec(str);  };
} }(this, function(ApiClient, CreateRequest) {   'use strict';
default:                     var val = this.value();      return '$'+Numbas.jme.display.texify({tok:this.value()})+'$';     }
this.setPointsLengths = new Array();
if(select_map){         for(var i in data){           var r = {};
valid(value) {       return value !== null && value !== undefined && new String(value).length > 0;     },
if (!((callbackInterface != null) && callbackInterface)) {                 throw "Internal error: unable to resolve observer ID to obtain callback interface.";               }
}         console.log.apply(console, args);     }
NIN.THREENode = THREENode; })(this.NIN);
class MesosLogStore extends BaseStore {   constructor() {     super(...arguments);     this.logs = {};
constructor(width, height, world, color = null) {     super.constructor(width, height);
dispatcher.trigger(dispatcher.CLEAR_TODOS);     }.bind(this);   }
}).call(this);
} else if (trigger.attr('href')) {                     this.route = trigger.attr('href');                 }
]).forEach(function(event) {     session.on(event, function() {       Array.prototype.unshift.call(arguments, event);       router.send.apply(router, arguments);     });
var model = params.db.models.AccountScheduleCalendar;   model.find({ account: this.account }).sort('from').exec(function(err, acEntries) {    for(var i=0; i < acEntries.length; i++) {
} else {       throw "wat?!"     }
url,         args: arguments,         aborted: false
var path = require('path')     , pkg = require('./package.json')     , webpack = require('webpack')
onKeyError(this._ss)       ).subscribe((evt) => this.trigger(evt.type, evt));     }),
this.model.reportCohortDefinitionId.subscribe(function (d) {     if (this.showSelectionArea) {      this.cohortCaption(pageModel.cohortDefinitions()
onSortChange: function() {             Garnish.requestAnimationFrame($.proxy(function() {                 this.trigger('sortChange');                 this.settings.onSortChange();
NOVAE.evaluateFormula = function(formula) {     var index = arguments[1] || void 0;     var interpret = ENGEL.interpretTokens(formula.tokens.slice(0));
var model = require('../../index')   , file = require('utilities').file   , driver = require('mongodb-wrapper')   , utils = require('utilities')   , operation = require('../../query/operation')
var args = Constructor.setup.apply(Constructor, [_super_class].concat(can.makeArray(arguments)) );
{         var matched = Array(),             i = 0;
ResourceDeployer.prototype._updateStack = Promise.method(function() {   var _this = this;
done(false);         config.callback(err);         return this.emit('error', err);       }
} else {                 videoElement.addEventListener("loadedmetadata", doSetKeys.bind(this));             }
, d         = require('es5-ext/lib/Object/descriptor')   , forEach   = require('es5-ext/lib/Object/for-each')   , isEmpty   = require('es5-ext/lib/Object/is-empty')   , contains  = require('es5-ext/lib/String/prototype/contains')
if ($_(this).data('do') != 'null' && $_(this).data('do') != '') {
this._fireQueuedEvents();    throw 'Not implemented';   },
realm.write(function() {             this.list = realm.create('TodoList', ['List', []]);           });
var qty = newVal;             var cost = parseFloat($(this).attr('data-cost'));             var rowid = $(this).attr('data-rowid');             if(qty > 0){
function meta_objs() {  const {classes} = this.constructor;  const {CatManager, InfoRegManager, CatObj} = this.constructor.classes;  class MetaObjManager extends CatManager {
module.exports = version var exec = require("child_process").execFile   , semver = require("semver")   , path = require("path")
, feature = require(BASE_PATH + 'feature')    , filter = require(BASE_PATH + 'ansi')    , gh = require(BASE_PATH + 'github')    , humane = require(BASE_PATH + 'humane')    , logging = require(BASE_PATH + 'logging')
if (iemobile || iphone) {                                     var that = this, args = arguments;                                     return setTimeout(function() {
case 5:  return t[m](a[0], a[1], a[2], a[3], a[4]);     default: return t[m].apply(t, a);   }
Y.fire("gameJoined", {                             gameId: this.getTargetGame().get("id"),                             game: this.getTargetGame()                         });
}       postMessage(this, 'getHeight');     });
if ( ! condition.name || ! condition.operator || ! condition.value ) {    throw 'missing required parameter to build a condition'   }
, promise = new Promise(this.collection, operation)       , original_cb = args[args.length - 1]       , has_fields;
if (filter === 'false') {                      isShow = this.$grid.find('.instance-adapter[data-instance-id="' + that.list[i] + '"]').find('instance-led').hasClass('led-green') ? 'hide' : 'show';                  }
namespaceMoveContext(newContext, removeFromOld) {         return Neatness.moveContext.apply(Neatness, arguments);     },
this.hightDirty = false;     this.lockedResources = new Array(); }
class ABSTRACT {   static toString() {     const instance = new this();     return instance.toString.apply(instance, arguments);   }
, url = require('url')  , path = require('path')  , mime = require('mime')
var gamelogs = [];  for(var filename in logs) {   var log = logs[filename];   gamelogs.push({
this.description = description || "";             this.required = new Array();             this.enum = null;             this.type = type || "";
var aEditors = [];     for (var i in aEditorIds)         aEditors.push(tinymce.get(aEditorIds[i]));
if (conf.bLight && !lightProps)   throw "no parent props for light";
if (this.depth2)   this._link2 = linkDataSource('_link1', this.ds2, this.ds1, subscriptionPath, this.pathTranslation2, this.pathTranslation1, this.dataTranslation2, this.dataValidation2);  this.isOn = true;
var setup = require("../../common/setup-base")   , desired = require("./desired")   , fs = require('fs'); describe("apidemos - push & pull file -", function () {
var rowIds = $(this).sortable('toArray');     var newIdSequence = new Array();
})().caught(noop);         return onUnhandledFail(isStrictModeSupported ? testFunction : arguments.callee);     });
for (var key in compiledPartials) {         hb.registerPartial(key, compiledPartials[key]);
var fail = function fail(location, msg) {    var err = new Error(arguments.length == 2 ? msg : arguments[0]);    err.name = 'AssertError';
}    this.own(this.binder.create(this, this, "beforeEnd"));    forEach.call(this.querySelectorAll("[data-attach-point]"), function (elem) {
this.data = {};   this.parsePropCount = 0;   this.PDFJS.on("pdfjs_parseDataReady", _onPDFJSParseDataReady.bind(this));
me._proxy = proxy   ; [ "ready"     , "error"     , "close"
}       for (var i in request.result) {         var contactToRender = request.result[i];
module.exports = function type (filepath, isRoot, rootType, fileExtensions) {  var ext = path.extname(filepath).slice(1)   , mixed = intersection(fileExtensions.js, fileExtensions.html)   , isMixed = ~mixed.indexOf(ext);
if (this.axisMeshes) {             _.each(this.axisMeshes, function removeAxisMesh(mesh) {                 this.scene.remove(mesh);             }, this);         }
}),   _directUpload: task(function * (blob, url) {     debug(`ActiveStorage: _directUpload ${blob} to url ${url}`)
} else {                 throw `data type with code: ${$stateParams.code} not found`;             }
appendChild: function() {     throw "You can't use appendChild outside of the rendering process";   },
,decimal: function(field, value, params) {             var regex = /^\-?[0-9]*\.?[0-9]+$/;       return regex.test(value);
var bookCheckBoxes = document.querySelectorAll(".bookCheckout");             for (var checkIndex in bookCheckBoxes) {                 bookCheckBoxes[checkIndex].onclick = toggleCheckout;
it('testElementIdClear invalid element ID', function () {     return Globals.protocolTest.call(this, {       commandName: 'elementIdClear',
log() {     return console.log.apply(console, arguments);   },
Template.sidebarItem.onCreated(function() {  console.log('sidebarItem', this.data); });
, parse = require('url').parse   , utils = require('./utils')   , assert = require('assert');
if ( abs(p) < abs(pLast) ) converging = true;       if ( i > terms ) throw 'Not converging after ' + terms + ' terms';
return (dispatch) => {          dispatch(this.showLoadingIndication())     _accountManager.recoverFromSeed(password, seed, (err, metamaskState) => {
function insert(key, value, Node) {   const comp = this.comp;   let root = this.root;
.on('focus', function() {     var $this = $(this);
} else {     this.listeners[type].push(fn)   }
if (options.events) {         for (e in options.events) {           var keys = e.match(/\S+/g);
var defer = typeof setImmediate === 'function'   ? setImmediate   : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }
takeSnapshot: function(name, control) {     var snapshot = binding.heap.takeSnapshot.apply(null, arguments);     snapshot.__proto__ = Snapshot.prototype;
} else {       throw '未获取到图表实例元素';     }
before(function () {     Globals.protocolBefore.call(this);   });
if(notif == null || notif == undefined) {                 notif = new Object;             }
var output = [];           for(var i in funcHandlers) {             output[i] = funcHandlers[i](fqn, value);
});         for (var _i4 in holes) {             pathHelper.displaceColinearEdges(outerShape.path, holes[_i4].path);
var trackPlugins = paella.editor.pluginManager.trackPlugins;   for (var i in trackPlugins) {    var plugin = trackPlugins[i];    var label = plugin.getTrackName();
, setGitRev = gruntHelpers.setGitRev   , getGitRev = require('./lib/helpers').getGitRev   , runTestsWithServer = gruntHelpers.runTestsWithServer;
{   for(var i in this.properties)   {
describe('94.binding_procedureBindInout.js', function() {   this.timeout(5000);   var connection = null;
if (inst) {         throw 'player has already joined ' + inst.gameID;       }
afterEach(stopTracking);   it('should send events on outbound link clicks', function *() {     var hitData = (yield browser         .execute(utilities.stopLinkClickEvents)
return this._head != null ? this._head : new String ( "" );  }
export default function *handleError(next) {   try {
var tmpTranslate = [1, 0, 0, 1, -topLeft[0], -topLeft[1]];       graphics.transform.apply(graphics, tmpTranslate);       this.clipBbox(graphics, bbox, x0, y0, x1, y1);
this.label.refresh(display)   }   this.getMarkerBBox = function () {     return this.markerSvg.node().getBBox()
nextItemIndex = this.indexOf(this.findWhere({ active: true })) + 1;                     if (nextItemIndex <= 0) throw "Failed to find nextItemIndex";                 }
var adminRole = {};       for (var roleName in access.roles) {         var role = access.roles[roleName];         if (role.default) {           anonRole = role;
constructor(value) {     return isIterable(value) ? value :       Seq.apply(undefined, arguments);   }
this.mywords = this.getMnemonic();   });
}).call(this);
function resolve() {             var ttf = this.ttf;
}     function setOptions(){         var options = this.options = $.Object.merge.apply(this.options || {}, arguments),key,match         if (typeof this.bind == "function") {
var _ = require('lodash')  , program = require('commander');
var id;         assert("context is already connected", this.client.connected);         id = this.client.subscribe(destination, __bind(function(frame) {           var envelope;
_handleReload: on('init', function() {     let self = this;     chrome.devtools.network.onNavigated.addListener(function() {
if (!fs.existsSync(path.join(project, 'AndroidManifest.xml'))) {         throw 'The provided path is not an Android project.';     }
function _ICMPV6() {   this.name = NAME;   this.bytes = 4;
}     unbind(element, "blur", arguments.callee);    });
this.metabolites = utils.clone(model_data.metabolites);  add_bigg_id_attribute(this.reactions);  separate_compartments(this.metabolites);
console.log("Dash channel opened.");                 broadcast.call(this, {                    event: "ready"
this._scrollTo(container, startX, ( eases[index] * targetY * dirY) + offsetY);       }
var utils = require('../../utils')   , Cookie = require('./cookie');
},   file: function() {     return Package._getByPath.apply(Package, arguments);   },
if (typeof program.project !== 'string') {     this.consoleWarn('You didn\'t mention any particular name, please add --project <your_project_name> in your command');     return;
forEach(children, function (child) {                   set(child, foreignKey, get(this, definition.idAttribute))                 })
})(this, this.muxjs);
Array.prototype.diff = function (a) {   return this.filter(function (i) {     return a.indexOf(i) < 0;   });
}       this.animate(new Follow(this.insertedSprites[0], { source: move }));     } else {
var limit = function () {                 limitRange = Array.prototype.slice.call(arguments, 0, 2);                 if (limitRange.length === 1) {
});         it("should be node::Buffer io for double rank data", function*() {             const buffer=Buffer.alloc(6*8, "binary");
,fs = require('fs') ,local = {  siteName: 'jadepress'
_VisualTreeWalker.prototype = new Object;  _VisualTreeWalker.prototype.constructor = _VisualTreeWalker;
}                 that.emit(this.v[1] < 15 ? "selectable.init" : "init");             }, 10);
hmac = this._digest(this.secret, ct.ct, this.hashing, this.encodeas)     if (hmac != ct.hmac) {       throw 'Encrypted session was tampered with!'     }
this.classList.remove.apply(this.classList, ALL_VARIANT_CLASSES);
var model = observer[0]         , eventMap = observer[1]       for (var event in eventMap){
var pathParams = {};   for(var key in pathParamData.properties) {     var prop = pathParamData.properties[key];
"use strict"; var React = require("react")  , d3 = require("d3");
};      }(jQuery, this, this.document));
} else {     throw "Unknown shader type"   }
toSort.sort(sorter);     for(var j in toSort)      result += attrC14nText(toSort[j]);
var responsePipe = preFlow.ele('Response');   for (var service in api['x-a127-services']) {     var serviceItem = api['x-a127-services'][service];     if (serviceItem.provider === 'x-cors') {
}).call(this);
return typeof name === 'string'        ? name === 'length' ? this.length          : typeof proto[name] === 'undefined' ? null : proto[name]       : typeof name !== 'number' ? null
$.AdminLTE = new Object();
constructor: function DashboardItemsCollection() {             DashboardItemsCollection.__super__.constructor.apply(this, arguments);         }
var cursor = namespace.listeners;     var args = Array.prototype.slice.call(arguments, 2);     while (cursor !== null) {
p.foo = function (arg1, arg2) {      throw arg1 + ' ' + arg2;     };
deactivate: function () {             Util.deprecatedMethod.call(this, 'deactivate', 'destroy', arguments, 'v5.0.0');         },
} else {       $parent.data('minute', new Number($parent.data('minute')) + 1)     }
else {     for(var wfStep in newAPIs[route].workflow) {      var hash1 = objecthash(oldAPIs[route].workflow[wfStep]);      var hash2 = objecthash(newAPIs[route].workflow[wfStep]);      if(hash1 !== hash2) {
lowerRight = {x: undefined, y: undefined};    for(i in this._shapes) {     var bounds = this._shapes[i].getAbsBounds();
EventEmitter.prototype.emit = function(event){     var args = Array.prototype.slice.call(arguments, 1)       , callbacks = this.callbacks[event]       , len;
options.www.users = {     "abcd": "1234"     , "efgh": "5678" }
$('#fullyBooked').modal('show')     $('#fullyBooked').on('hidden.bs.modal', function () {       this.props.onClose()     })
called = false;         fn.apply(this, args);       }, timeoutDuration);
levelClass: computed('block.meta.level', function() {          return this.get('styles')[`${this.get('levelClassPrefix')}-${this.getWithDefault('block.meta.level', 1)}`];   }),
get: d(function (key) {   var index = this.__mapKeysData__.eIndexOf(key);   if (index === -1) return;
var delete_user = {};     var b_view = getBackgroundView();     for (var i in userList) {         var user = userList[i];
this.initialize = function () {     if (options.disableDragAndDrop) {
db.collectionNames(function(err, names) {           var colItems = new Array();           res.write('<tr><td class="desc">collection</td><td class="content"><ul id="collection">');
try {     await func.apply(null, funcArgs);   } catch (err) {
let $this = this;         this.$el   = $(element).data(name, this);         this.$opts = $.extend(true, {}, this.props, options);         Object.keys(this.props).forEach(prop => {
} else {         throw 'Unable to fire event.  Neither createEventObject nor createEvent methods are available';       }
return next();             }.bind(this), this.a);           }.bind(this),
function cutOff()  {   this.steps['fa0c'] = (this.steps['fa0c'] || 0) + 1;   this.writeTo(
socket.destroy();         this.emit('error', new Error('invalid Sec-WebSocket-Extensions header'));         return this.finalize(true);       }
if (!blob) {   throw 'Could not generate blob';  }
debug() {     return console.debug.apply(console, arguments);   },
return callback.call( this, ret.length ?                         '<ul>' + ret.join( ' ' ) + '</ul>' : '' );
t.ok(is.empty(''), 'empty string is empty');   t.ok(is.empty(new String()), 'empty String object is empty');   t.ok(is.empty([]), 'empty array is empty');
var INDEX_OF_LAST_IMPORT_STATEMENT = -1; var arrayOfBroweseableClasses = new Array(); var PROTOCOL;
"use strict"; var wd = require("yiewd")   , o_O = require("monocle-js").o_O; var desiredCaps = {
returnData.fields.push.apply(returnData.fields, temp.fields);         returnData.virtuals.splice.apply(returnData.virtuals, [i, 0].concat(temp.virtuals));
var phantom = require("phantomjs") ,   spawn = require("child_process").spawn ,   jn = require("path").join ,   u = require("url")
else if (arguments.length === 2) return s_3x3(arguments);     throw "invalid size for scale"; };
var Mixin = require('../abstract/mixin')  , MessageSource = require('./message_source')  , MessageSourceWithAPI = require('./m_source')  , _ = require('mol-proto')
alert("Could not initialise WebGL, sorry :-(");         throw "failed initalization";     }
hemera.on('serverPreResponse', function () {     const ctx = this     let meta = {
if (body == undefined || body == null) {         throw "Missing the required parameter 'body' when calling placeOrder";       }
return new Promise((resolve) => {       this.spawner.spawn(this.command).then(function () {         resolve(this.data);       });
}, function(error) {         this.serverError = true;         this.serverMessage = "Failed to get status from crawler server.";       })
var apiSteps = function () {   this.When(/^I list "([^"]*)" data collections(?: in index "([^"]*)")?$/, function (type, index, callback) {     this.api.listCollections(index, type)
disabled: false,       isDisabled: Em.computed('disabled', 'loading', function() {         if (this.get('disabled') || this.get('loading')) {           return true;
var LinuxTaskBuilder = (function (_super) {     __extends(LinuxTaskBuilder, _super);     function LinuxTaskBuilder() {         _super.apply(this, arguments);     }
maxConns: Infinity,     maxGates: Infinity,     selectMutationMethod: this.selectMutationMethod   }
module.exports = f(function () {  this.setHours(0, 0, 0, 0);  return this;
var podsItems = pods.items;       var nodeDic = new Array();
otp.widgets.Widget.prototype.initialize.apply(this, arguments);         this.$().addClass('otp-stopTimesWidget');
this.toggle.$link.on( 'click', ve.bind( function () {   if ( this.toggle.open ) {    this.toggle.$link.text( this.toggle.showMsg );
if(!this.key) {                 throw 'You must set a key for your field type ( ' + this.declaredClass + ' ), something like "text" or "bool" or "email".';             }
async abort(tx) {         if (!this.__backend.connected) throw 'JungleDB is not connected';
var shared = require('./_shared')('keys')   , uid = require('./_uid'); module.exports = function (key) {
for(var server in servers) {         let parsedUrl = parseUrl(server)
const handleHeight = 1; function log(...params) {     console.log.apply(console, params); }
htmlScript.node.setAttribute('id', 'oneBootstrapper');                 assetGraph.inlineRelation(htmlScript, this);             } else {
this.getTopInfluencers = function (jobIds, earliestMs, latestMs, maxFieldNames, maxFieldValues) {     return $q((resolve, reject) => {
if (nativeTypes.indexOf(a[i]) < 0 && customTypes[a[i]] === undefined) {           throw 'Invalid type';           return false;
{         arguments.callee.base.apply(this, arguments);       }
prepareViewsModelsFields() {         for(let path in this.views) {             let view = this.views[path];
if (!SET || !SET.length)  throw "Table Update MUST have 'SET'";             if (!WHERE || !WHERE.length) throw "Table Update MUST have 'WHERE'";
for (prop in arguments[i]) {       if(own(arguments[i], prop)) {         result[prop] = arguments[i][prop];       }     }
})       return math.index.apply(math, dimensions)     }
, listeners = {}                  , targets = {}                    , inNotifyListeners = false;
if (canceled()) {       throw 0;      }
var _ol_geom_LineString_ = function(coordinates, opt_layout) {   _ol_geom_SimpleGeometry_.call(this);
editNickname() {         return this.shard.client.editNickname.apply(this.shard.client, [this.id].concat(arguments));     }
[ '   , '}}   , ' @   ].forEach(function (x) { t.ok(!mapFileComment(x), 'does not match ' + x) })   t.end() })
}       if (this.y.$scale !== 'ordinal' || this.x.$scale === 'ordinal') {         return 'middle';       } else {
set: function(value){     disabledReadonly.set._polyfilled.input.apply(this, arguments);     var stepcontrols = $.data(this, 'step-controls');     if(stepcontrols){
this.doAsBinary(function() {     SIN.super(this, 'validate', arguments);     if (this.data.length != 22) throw new Error('invalid data length');
if (null == relX) { relX = e.layerX; }             callback(relX / this.clientWidth);         }, false);
let ael=(E,V)=>([].forEach.call(E.length?E:[E],e=>{for(let v in V)e.addEventListener(v,V[v])}),E);
define(["knockout", "jquery", "text!components/datasource/add.html", "ajaxutil", "waitingmodal", "jstorage", "validator"], function (ko, $, template, ajaxUtil, waitingModal) {     function viewModel(params) {         var self = this;
}         o[this.name].push(this.value || '');       } else {
default:     throw "Unknown SHA variant";    }
var jgeXml = require('./jgeXml.js'); String.prototype.replaceAt = function(index, character) {     return this.substr(0, index) + character + this.substr(index+character.length); };
this.projection      = new Projection();        this.providerWMTS    = new WMTS_Provider();        this.renderer        = undefined;        this.ellipsoid       = new Ellipsoid(6378137, 6378137, 6356752.3142451793);
if(cschema.type == "collection" || cschema.type == "sequence") {         for(var i in cobj) {             var o = cobj[i];
constructor(server, name) {     this.server = server;     this.name = name;
var async = require('async')   , fs = require('fs')   , path = require('path')
el: document.getElementById('view'),         sharer: function () {             console.log('share', arguments);         }
this.Logger = new function(){         var _this = this,             methodArr = ["error", "warn", "info"];
options = $.extend({}, this.button_options, b);             button = new ButtonIndicator(options);
snake.crash();         }.bind(this));
this._nativeType = Date;  this._format = true;  this._update = true;  this.typeDescription = 'date and time';
This.lines[This.lineNum].staff[This.staffNum] = { voices: [ ]};    if (params.name) this.lines[This.lineNum].staff[This.staffNum].title = params.name;    createVoice(params);
constructor() {     this.initialize(...arguments);   }
for (var i = 0; i < arguments.length; i++) {     if (goog.isArrayLike(arguments[i])) {       this.sharedModel_.dataSets.push({
this.updateSelected = this.updateSelected.bind(this);     this.getDevices = this.getDevices.bind(this);   }
this._initSources();     this._recordObservers = {};     this._recordListeners = {};     this._recordKeyChanged = this.bindSafely(this._recordKeyChanged);
var hiddenviews = new Array();
var _set_up_redis = function (done) {     this.backup = {};     this.plugin = new Plugin('rcpt_to.routes');
default:             throw "Unsupported opcode '" + opcode + "'";         };
has: function(property) {             return function() {                 return this.__hasPropertyValue.apply(this, [property].concat(_.toArray(arguments)));             }
this.onLoginPromise = stores.loginAnon.put(data).then(             ds.UIMsg('ok', that.loginForm, that.loginButton, that.loginAlertBar ),
peerReviewSrvc.loading = true;                     peerReviewSrvc.groups = new Array();                     peerReviewSrvc.details = new Object();                     $.ajax({
console.log("deep.log : args : ",JSON.stringify(arguments))    var func = function(s,e)
var sbMocks = require('./mocks/servicebuscreation')   , should = require('should')   , sinon = require('sinon');
doc.links.forEach(function(link) {       if (!byFullId[link]) throw 'Not existing link "' + link + '" in ' + doc.section + '/' + doc.id;     });
_.forEach(this._astNode.properties, function (property) {             childNodes.push({node: property.value, loopVariables: this.loopVariables});         }, this);
yield this.af.syncAsync();     return Math.sqrt(yield this.af.sumAsync(sq)) / sq.elements(); });
if (arguments.callee._singletonInstance) {         return arguments.callee._singletonInstance;     }
geometry = this.cacheGeometry[cooWMTS.zoom][cooWMTS.row];     } else {         if (this.cacheGeometry[cooWMTS.zoom] === undefined)             this.cacheGeometry[cooWMTS.zoom] = new Array();
this.nowViewingUpdate.addEventListener(function(){           ReactDOM.render(<SidePanel events={this.nowViewingUpdate} terria={terria} />, nav);         });
return this.ajax('getVsoProjectWorkItemQueries', project.name).done(function (data) {                 project.queries = data.value;             }.bind(this));         },
function createModel() {   var model = DataFlowNode.apply({}, arguments);   model = errors.customInterfaceErrorMessageInInject(model,
nodeca.filters.before('', {weight: 50}, function base_assets(params, callback) {   var namespace = this.request.namespace,       locale    = this.session.locale,       theme     = this.session.theme,
if (!this.id || !this.network) {             throw 'Can\'t fetchContent() without this.id and this.network';         }
if (testNull === null) {         throw 'No match in string'       }
}     throw `Can't Find Training to Verify it contains errors. The grid should, but does not, contain a row with this data in it: FirstInput: ${firstInput} -- LastInput: ${lastInput} -- LastResponse: ${lastResponse}`   })
app.use(function*() {   'use strict';
typeof define === 'function' && define.amd ? define(factory) :  (factory()); }(this, (function () { 'use strict';  function foo() { return true; }
for (var i = 0; i < args.length - 1; i++) {         logArgs.push(args[i]);       }       log.apply(null, logArgs);
if (obj !== Ember && 'function' === typeof obj.sendEvent) {     obj.sendEvent.apply(obj, a_slice.call(arguments, 1));   }
for (const key in entities) {             const entity = entities[key]             if (entity[idKey] == lookupId) {                return entity
dom.prependElem(cont, this.element);       }     }
close () {     console.warn('Deprecation (10.0.0): Use action.resolve instead of action.close.')     return this.resolve.apply(this, arguments)   },
fs.readFileSync = function(f, enc) {  if(!fs[f]) throw "File not found: " + f;  fs[f].length;
.each(vm.seats, function(seat){     html.render(this)     .tr()      .td().input(seat.name).$().$()
getFullURL() {     const fragments = Array.from(arguments).map((fragment) => encodeURIComponent(fragment));     return urljoin(this.serviceUrl, ...fragments);
var __NEJS_THIS__ = this; var globalCache = {  'true': {},
throw new Error("Unknown "+objName+" `"+name+"`");   this.emit(objName+"change", this, name, value, obj[name]);   obj[name] = value;
parent.children().each(function(index) {       if (!disabled_or_hidden($(this)) &&          area($(this))>max_area) {
var feedparser = new FeedParser({silent: true})     , feed = __dirname + '/feeds/nondefaultnamespace-baseline.atom'     , meta = {}
};            delegate.setNgModel = function ( ) {       ngModel = arguments[0];      };
default:             throw 'Unrecognized command "' + command + '". Use either `add`, `remove`, or `list`.';     }
return utils.validFields(model, field)   })   var keys =  utils.keysFromObject(fields)     , vals =  buildMultiInsert(fields, keys, outValues);
var $element = $(this)         , className = 'alert-message'       $element = $element.hasClass(className) ? $element : $element.parent()
} catch (e) {         console.log("Not showing developer ", arguments);       }
wasRequiredBy: function() {         return Global.subNamespaces(true).select(function(m) {             return m.privateRequirements && m.privateRequirements.indexOf(this) > -1;         }, this);
leave() {         return this.client.deleteChannel.apply(this.client, this.id);     }
{     throw "Cannot call getHash after setting HMAC key";    }
if (document.addEventListener) {         document.addEventListener('DOMContentLoaded', function factorial() {           document.removeEventListener('DOMContentLoaded', arguments.callee, false);           window.sweetAlertInitialize();
var $parseFloat = require('./_global').parseFloat   , $trim = require('./_string-trim').trim;
});   Group.prototype.setProperty = function () {    Element.prototype.setProperty.apply(this, arguments);    var oPage = this.getParent();
var markup_list = exports._initialization_markup;     for (var key in exports._initialization_markup) {         var m = markup_list[key];         if (m.value instanceof Function) {
typeof define === 'function' && define.amd ? define(factory) :  (factory()); }(this, (function () { 'use strict';  function foo() { return 'foo'; }
Array.prototype.copyOf = function() {     return this.clone(); };
run(options) {     this._super.apply(this, arguments);     let prepare = new Prepare({
if (this.callsRemaining <= 0) {         callback.apply(null, args);       }
this.folderExists = false;     this.installables = new Object();     $scope.checkboxModel = new Object();
var matched = false;       for (var op_init in is_op_init) {         if (match_here(op_init)) {
}, function (res) {             var _this = this;                          var result = "";
let param = { code, encrypt_data };         return this._sendRequest(constants.INTERFACE_LOGIN, param);     }),
if ( ! this.hideOwnActions ) {         this.toolbarActions_ = this.wrapToolbarActions(this, this.model_.actions);         this.addDestructor(this.removeToolbarActions.bind(this));       }
this.clearRenderData = function () {     this.patternRenderData = {}
, _slice  = Array.prototype.slice       , _concat = Array.prototype.concat     exports.get = function (index) {
if (!this.db) {       throw 'DB has not been started yet';     }
, attempt: { options: options }      , message: 'no nodes'      }     )
log("Failed XML HTTP request", e);             if (typeof callback === 'function') { callback(true, params, this.responseText); }         }
this.webview.addEventListener("MSWebViewDOMContentLoaded", () => {         let asyncOp = this.webview.invokeScriptAsync("eval", `             addEventListener("keydown", e => {
c.on('invalidPage', (e) => {         this.sendAction('invalidPageAction',e);       });
zucht_und_ordnung(false);         var form = $(this).parents('form');         form.attr('action', form.attr('action')+window.location.hash);
, regexStr = '^'         , regexStrEnd = ''         , patternsStarted = false;
var oMode = oModes.oModesByName[oResponse.sMode];                      this._oEditor.setMode(oMode);                      this._oToolbar.setMode(oMode);
return function() {       let args = Array.prototype.slice.call(arguments, 0);       let done = args.pop();
}       $.Widget.prototype._setOption.apply(widget, arguments);     },
var generateModel = this.generateModel = function (swagger, schema, modelName, currentGenerated) {             var model = '',
, defineObservable = require('../utils/define-set-observable')   , defFilterByKey   = require('../utils/define-filter-by-key')
} else {                 callback.apply(null, arguments);             }
$z = $z || function() { return $z.main.apply(this, arguments); }
for (var groupTouple_i in modalityGroups) {             var groupSet = modalityGroups[groupTouple_i][0];
let successful = document.execCommand(actionAttr);             if (!successful) throw 'Invalid "data-action" attribute';             this.dispatchEvent(actionAttr, selectedText, currentTrigger);
} else {             throw 'Invalid date: ' + modelValue;           }
} else if (/\s/.test(content[0])) {       throw 'Illegal whitespace character';     } else if (indent === stack[stack.length - 1]) {
top: $("#editor-top-bar").height() + 'px',                     left: ($(this).offset().left - 35) + 'px'                 });
}     this.spinnerArgs = merge(opts, configArgs);   }),
function *googleLogin() {   this.redirect(
}; stdlib.map = function*(ctx, val, iter){     if(!types.isFunction(iter)){
return __awaiter(this, void 0, void 0, function* () {             return yield this.crudService.create(entity);         });
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored.",         arguments.callee.name, Array.slice(arguments)));   },
ConsistentException.prototype = new Object();  function ConsistentException(message) {
const view = (() => {           switch (this.interaction.reason) {             case 'consent_prompt':
)   , callAllMethods = (a = [], b, c) => a.map(e => e(b, c))                                                                                      , ObjectAssign = Object.assign
this.checkInternalPointers();   if (this.parent) { throw "The root shouldn't have a parent"; } };
var config = this.configFor(name),           opts = {typeKey: this.rootForType(relationship.type), embedded: config.embedded};       if (relationship.kind === 'hasMany') {
input = cell.input ||    (cell.input = put(cell, "input[type=" + column.editor + "].dgrid-input", {     name: column.field || this.id + "-selection",     tabIndex: isNaN(column.tabIndex) ? -1 : column.tabIndex
parser.end(() => {       resolve(function*() {         for (const rule of rules) {
this.executeRequest_( ({       action: constants.Actions.LIST_KEYS,
function onMessageReceived(topic, payload) {   sendLog(this, "Message received on", topic);
function getUserInfoMethod() {     return persistencePathMethod.call(this, this.options.authUserInfoRoute); }
});     this.resource('voucherRedeemDone', {path: '/giftcards/redeem/done'});     this.resource('taskList', {path: '/tasks'});     this.resource('signup');
}         fields = arguments[1] || new Object();         fields.api_key = this.options.APIKey;
if (data && data.length) {                     for (var k in data) {                         self._AddPos(data[k][0]);
return function (req, res, next) {    return this.resource.execute(req.mort, function (err, data) {     if (err) {
c$ = Clazz.decorateAsClass (function () {  this.atomCount = 0;  this.isAngstroms = false;
++currentScreen;             display.call(this);             return this;         };
for (var p1 in this.panels) { obj.refresh(this.panels[p1].type); }             }
$(".close").click(function(e){         this.input.val( "" );         this.element.val( "" );     })
SamplesPerGr: 576,     BytesPerFrame: this.SamplesPerGr * 2 * 4,     SamplingFrequency44100: 0,
var data = [];         for (var timestamp in dataTotals) {             data.push({date: timestamp, value: dataTotals[timestamp]});
History.debug('History.forward: we must wait', arguments);     History.pushQueue({
registry_1.commands.set("typescript:go-to-declaration", deps => {     return (e) => tslib_1.__awaiter(this, void 0, void 0, function* () {         if (!utils_1.commandForTypeScript(e)) {
this.dispose() }
, sep = require('path').sep   , signature = require('cookie-signature')   , nodeVersion = process.versions.node.split('.');
this.whenorderedby = null;     this.whenorderedbyjoin = null; }
this.token = await HealthCashMock.new()     this.drs = await HealthDRS.new()     await this.drs.setHealthCashToken(this.token.address)   })
}       services['ecmascript-debugger'].setConfiguration.apply(services['ecmascript-debugger'], config_arr);       _is_initial_settings_set = true;
var utils = require('./../utils')   , Cookie = require('express-session').Cookie   , debug = require('debug')('connect:cookieSession')
programGpaMax: programGpaMax,                          currentlyRegistered: currentlyRegistered == null ? null : new Boolean(currentlyRegistered).toString(),             earlyAlertResponseLate: earlyAlertResponseLate,
var self = this     , safe = self.schema.options.safe;   var done = function(err) {
_bindToStoreEvents: on('init', function() {     this.store.on('sessionDataUpdated', (content) => {       let { authenticator: authenticatorFactory } = (content.authenticated || {});
{   return this.coefficients;  });    this.getCoefficient=function( degree)
if (!result) {         throw 'Failed to load the default user role!';       }
var endOfLine = require('os').EOL   , exports = module.exports   , ngAddDep = require('ng-add-dep');
var histogram = new Object(), tmp_arr = new Array();     var key, i, code, strl = 0;
if (isStepTouched(stepName))       throw("Expected step \"" + stepName + "\" to have been skipped.");   }
fakeObj = function () {             FakeRequest.call( this, arguments, xhrName );         };
super(source);         core.defineProperty(this, Symbol.iterator, function*() {             let index = 0;
var _ = require('lodash')   , path = require('path')   , webpack = require('webpack')
const args = [this.request, this.response, this._lazyBody.content].concat(this._lazyBody.args)       nodeRes[method].apply(nodeRes, args)     }
function wikiPath(path){  this.full = nomalizePath(decodeURIComponent(path));  var index = this.full.lastIndexOf("/");
if(args[1] === 0 || args[2] && typeof args[2] === "number"){     log.debug("   z = " + args[2]); this.cmd_posz = params.Z = args[2];  }    if(args[1] === 0 || args[3] && typeof args[3] === "number"){
var r = 0;         for (var i in this.d)             r += this.d[i] * v.d[i];
addToken: async (currency) => {     const hasToken = await this.rootChain.hasToken(currency)     if (!hasToken) {
if (byteStream === undefined) {     throw 'dicomParser.readSequenceItemsImplicit: missing required parameter \'byteStream\'';   }
test.equal(self.setupLocal.callCount, 0);         this.tessel = new TesselSimulator();
for ( var i in document.styleSheets ) {             sheet = document.styleSheets[ i ];             if ( sheet.media.mediaText === 'print' ) {                 return sheet;
for (var i = 0, l = this.length; i < l; ++i) {         if (this[i] in u) {             continue;
})   appDealer.on('message', function(channel, id, cmd) {     devDealer.send([].slice.call(arguments))   })
this.settings = {};   this.options = {};   this.store = new store();   this.parts = {};
const licenseTextMapping = {};       const licenseTexts = Array();       const dependencies = Array();       Object.keys(packages).forEach(key => {
, binomial = window.binomial   , labor = window.labor   , _ = window.underscore; }
this.totalPages = 0;     this.textFilter = null;
if( ! has_remote )         return this.updateWallet(private_key).then(()=> this.remote_status = "Not Modified")
this.transformed = true;   this.typesData = new Array();   for (var i=0, l=pokemon.typesData.length; i<l; i++) {
var data = query.chart_data('flot')       for (var i in data) {         var series = data[i]
renderer.dragStartX = xCursor - this.offsetLeft;       renderer.dragStartY = yCursor - this.offsetTop;       zoomContainer.style.transition = "none";
var child = p._handler;    parent.chain(child, parent.receiver, onFulfilled, onRejected,      arguments.length > 2 ? arguments[2] : void 0);    return p;
, callback = _.isFunction(data.callback) ? data.callback : function() {}       , exitCode = data.exitCode || 0       , exitCodes = exitCode.length ? exitCode : [exitCode]       , command
componentNameElt.text($(this).val());                          $('<style>.main-table::after{content:"' + $(this).val() + '"}</style>').appendTo('head');             component.meta.name = $(this).val();
console.log(require('util').inspect(this, 10, null));       if (Handlebars.sections && Handlebars.sections[section]) {
this.current = installResources.call(router, PageApp, primaryRoute, isGlobal);
if (!evt) {   throw "Event " + eventName + " not found";  }
var height = Number(theImage.attr("height"));                 var theRectangle = d3.select(this.parentNode).select("rect.outline");                 var theHandle = d3.select(this);
});       for (var ii in desc.components.children) {         var results = flattenComponentForDescription(desc.components.children[ii]);
if (attrs.isDuplex) {         component.bind('onchange', (function(event) {           return attrs.call(this.component, this.value);         }), 'before');
});       this.map.setView(center,14);     });   },
String.prototype.times = timesFunction; Number.prototype.times = timesFunction;
HTML5.debug("inserting " +  name);  HTML5.debug(arguments.callee.caller);  return element;
for (s = 1; s < arguments.length; ++s) {   source = Object(arguments[s]);   props = keys(source);   for (i = 0; i < props.length; ++i) {
}   let that = first.apply(null, firstArgs);   let lastArgs = Helper.mapObject(components, function(name, component) {
for (var url in subscriptions) {                 lgtv.subscribe(url, function (err, res) {
function mixinProperties(obj, proto) {  for (var prop in proto) {   obj[prop] = proto[prop];  }  return obj;
return function () {     var args = provideInnerContext ? [this].concat([].slice.call(arguments)) : arguments;     return func.apply(ctx, args);    };
});       if (resp.status !== 200) throw 'HTTP status ' + resp.status;     } catch (error) {
};    this['set' + Base.capitalize(component)] = function(value) {     var color = this.convert(colorType);
Object.prototype.getData = function () {   return clone(this.data);
} else {    throw 'ERROR: CoapPacket.serialize [Nibble value larger that 526345 is not supported]';   }
, helper     = require('../helper')   , should     = require('should')   , chatState  = require('../../index').utils['xep-0085']   , correction = require('../../index').utils['xep-0308']
setInterval(function(){         for (var i in self.moduls) {             self.moduls[i].execIntervals();         }     }, 1000);
var getExports = require('../core/getExports')   , ignore = require('../ignore-module') module.exports = function (context) {
for (tag in tags) {             attribute = tags[tag];             urls[tag] = [].map.call(document.querySelectorAll(tag), function(item) { return item.getAttribute(attribute); });         }
this.positioner = new Positioner(this.window)     this.window.on('blur', function () {       this.opts.alwaysOnTop ? this.emitBlur() : this.hideWindow()     })
if (typeof interval == "undefined") {        this.stopObserving();        var el = $j(this);
if(!this.options.skipLoad) {              var loader = new dmakLoader(this.options.uri);              loader.load(text, function(strokes) {
function * runClockSaga () {   console.log('11=====>>>>>>>>>>>')   yield take(actionTypes.START_CLOCK)
var jsonMask = require('json-mask')   , compile = jsonMask.compile   , filter = jsonMask.filter
it('push replication', function () {     this.timeout(20000);     var username = 'push_repl_test';
function e() {             var e = t.call(this) || this;             return e._onClick = function () {                 e.onClick()             }, e._onMouseOver = function (t) {
get_my_star_count_by_friend = function(user) {         return this.model_.get_my_star_count_by_friend(user);     },
timeout = setTimeout(function(){           return cs.ui.notify(this.responseText             ? JSON.parse(this.responseText).error_description             : L.system_server_connection_error, 'warning', 5);
jQuery.fn[func_name] = function() {    var args = arguments,     res, hasHookup, secArgType = typeof arguments[1];
if (x === this) {                     throw "internal error: would have gone into an infinite loop here.";                 }
Handlebars.registerHelper("url", function() {     return "http: });
delete params.production;             this.params = params;         }
}     this.push.apply(this, arguments) }
function queue(){   var self = this;   if (this instanceof queue === false) {
console.log("before");                 throw "FOO";
var elementRemoveEventListener = ElementProto.removeEventListener ? function() {     return this.removeEventListener.apply(this, arguments)   } : function(eventName, listener) {
if (templates.length < 1) {     throw `No "${filetypes}" templates found in \`${globalConfig.build.templates.source}\`. If the path is correct, please check your \`build.templates.filetypes\` config setting.`   }
}       this._appendUndo.apply(this, arguments);     }
});             it('does not add a request', function(done) {                 expect(this.messageParser.requests).to.have.length(0);                 done();
var response = Thorax.View.prototype.render.call(this, output || this[templateAttributeName] || layoutTemplate);       ensureLayoutViewsTargetElement.call(this);       return response;
var StoreWatchMixin = function() {   var storeNames = Array.prototype.slice.call(arguments, 0);   return {
, distribution = {}     , N = sandbox.N;
if (typeof cb != "function") {       self = this.get(cb)       self.fetch.apply(self, arguments)
function slotOwnUpdate(changes, isFromOuter) {     var me = this;     if (me.nameBind && nodeEvalExpr(me, me.nameBind.expr) !== me.name) {
e.preventDefault();    moveLayer($(this).closest('li').data("layer"), self.map_.getLayers(), +1);   };  function moveLayerDown(e)
test('clearFeedback', function () {     this.$group.addClass('error');     this.$group.find('.frm-feedback').html('foo');     this.formGroup.clearFeedback();
export function * _queueCaveUninstall (action) {   const {caveId} = action.payload
if (constring == null || constring.trim() === '')         throw 'constring must not be null or empty';     if (contype == null || contype.trim() === '')
if ($.inArray(id, items) !== -1) {                     $(this).show();                 }
ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);     return window.Parsley[method].apply(window.Parsley, arguments);   };
var self = this       , fileWatcher = self.fileWatcher       , config = self.config     config.read(function(){
List.sc.init.apply( this, arguments );          },
domId=self.$domId,                      f=function(){return xui.Event(arguments[0],this,0,domId)},                      i,l,j,k,o,key,id,t,v;
if( event.propertyName === ( changeType[ this.type ] || "value") ){             $._data( this, "_just_changed", true );             $.event._dispatch( $._data( this, "publisher" ), type, event );
_setOption: function( key, value ) {   $.Widget.prototype._setOption.apply( this, arguments );   if ( key === "source" ) {
template: function(){             var icon = this.get('component._icons.loadingRows'),                 colspan = this.get('component._colspan');
return function(test) {         test._ntf = { meta: (typeof(this.meta) === 'object' ? this.meta : {}) }         exports.tcp.apply(this, [test, opts, callback])
})( this );
this.y += dy     }),     setName: action(function(newName) {         this.name = newName     }) })
self.selectItem(item);             $(this).addClass('pat-active');             if(self.options.maximumSelectionSize > 0){
var options = {}     , callback
qq.attach(document, 'drop', function(e){           for (var elem in dropzones){ dropzones[elem].style.display = 'none'; }           e.preventDefault();
willDestroy() {     this._super(...arguments);
});       openRequest.onupgradeneeded = hitch(this, function( event){         this.db = event.target.result;         if(this.db.objectStoreNames.contains(this.storeName)){
}     return originalMiddleware.call(this, next);   };
} catch (error) {       this.setState({ error });     }
exercise.addSetup(function (mode, callback) {    console.log ("this", this);
disabled: function () {       return this.get("processing") || !this.get("isValid") || this.get("isEmpty");   }.property("processing","isValid"),
else             result = fallback.apply(descriptor, arguments);         resolved = resolved || identity;
function ClientSnake(index, location, direction, size, speed, local) {     Snake.apply(this, arguments);     this.crashed = false;
}     this._unzip && (delete this._unzip)     this.emit('end')
constructor() {     this.x = 10;     this.derC = 3;     super();
var kotti = {     dom_changed_handlers: new Array() };
for (var i = 3; i < arguments.length; ++i)          url += "&" + arguments[i];    }
this.createFile = function(name, data, callback) {};
load(dumpBasePath, snapshotStoreFolder, config) {     console.log(arguments);   },
typeof define === 'function' && define.amd ? define(['https:  (factory(global.external)); }(this, (function (external) { 'use strict';  external = external && external.hasOwnProperty('default') ? external['default'] : external;
if (parent_rows.some(function(parent_row){ return !parent_row.ball; }))           throw "some parents have no balls";          if (parent_rows.length > 0)
}       else if ( $(this).val().toLowerCase() == 'xml file'  ) {         obj_form.dataset = '\
var data = this.getSection(syntax), matchedItem = null;    _.find(['snippets', 'abbreviations'], function(sectionName) {     var data = this.getSection(syntax, sectionName);     if (data) {
, containerPosition              , trackedBodyPosition             , trackedBodyOffset             , deviceScale;
this.setTimeout();     return this._super.apply(this, arguments);   },
return _s.slugify(val);    }.bind(this)   }, {
case SocketConnectionState.DISCONNECTED:                 console.log("DISCONNECTED");                 this.DUID = undefined;                 this.socketConnection = undefined;
return new CancelablePromise(function onCreate(resolve, reject) {     promise.catch.apply(promise, args).then(resolve, reject);   }, this._onCancel);
typeof define === 'function' && define.amd ? define(['../foo'], factory) :  (factory(global.foo)); }(this, (function (foo) { 'use strict';  foo = foo && foo.hasOwnProperty('default') ? foo['default'] : foo;
var data = [];         for (var embeddedItem in embeddedItems) {             var item = {                 "url": embeddedItems[embeddedItem].path + ".members.json",                 "method": "POST",
ok = pack.packOne(fixedBoth[j].width, fixedBoth[j].height);             if (!ok) throw 'out of space';         }
var header;   for (var prop in headers) {     header = headers[prop];
return filterPrefix(validUrns, 'thirdeye:metric:').reduce((agg, urn) => {         agg[urn] = this._makeMetricLabel(urn);         return agg;
yield this.get(taskPath).perform(...args);
if(!path) {       throw 'no route with name: ' + to     }
this.show = function() {         $list.focus();
$mdDialog.hide("saved!");                     }.bind(this), function() {                         debugger;
if (streamObj.mediatype === mediatype){     for (var connection in rtc.producedPeerConnections) {      rtc.producedPeerConnections[connection][mediatype].addStream(streamObj.mediastream);     }    }
});     target.addEventListener(propertyName.slice(2), function() {       wrapper.dispatchEvent.apply(wrapper, arguments);     });
heightBytes[i] = 'height'.charCodeAt(i);     }     for (i in 'videocodecid') {       videocodecidBytes[i] = 'videocodecid'.charCodeAt(i);
}; }(this, this.document)); Plume.menu = (function() {
$dialogButton.click(function() {                 var popupView = self.getPopupView(this);                 if (popupView.isShowed) {
};                                  var val = this.value.replace(/</g, '&lt;')                                     .replace(/>/g, '&gt;')
var Polling = require('./polling')   , Transport = require('../transport');
for(var h in jsondata.headers) {    var heading = jsondata.headers[h];    ret += textdelim + heading + textdelim +  delim;   }
'use strict'; var exports = module.exports   , path = require('path');
}             this.queue(src);         }
var jetzt  = window.jetzt     , H      = jetzt.helpers     , config = jetzt.config;   function on (event, cb) {
$scope.isOpenSearch = !$scope.isOpenSearch;     }.bind(this);          $scope.isOpenSearch = false;
if (!((ONMD_ != null) && ONMD_)) {               throw "Missing object model layout object input parameter! If you specified the namespace declaration via object reference, check the validity of the reference.";             }
}   console.log(arguments)   var opts = this.defaults(options);   this.src(config.src, opts)     .pipe(this.dest(config.dest, opts))
{                 $(this).parent().parent().find('label').removeClass('active');             }
let alreadyOpenedMenu = new Menu(status.opened);       alreadyOpenedMenu.close(function() {         this.open(callback);       });
function modelFinder (params) {   for (var key in params) {
{    throw "Invalid b64Pad formatting option";   }
for (var i = 0; i < this.documents.length; i++)             {
} else {     child  = parent;     parent = Object;     props  = Array.prototype.slice.call(arguments, 1);   }
spyOn(parentCtrl, 'registerAutocomplete').and.returnValue(tagsInput);         options = jQuery.makeArray(arguments).join(' ');         element = angular.element('<auto-complete source="loadItems($query)" ' + options + '></auto-complete>');
cb(er)     }.bind(this))   }
setTime: function (n) {     if (isNaN(n)) { throw('Units must be a number.'); }     var dt = new Date(0);
throw "SignalR: jQuery not found. Please ensure jQuery is referenced before the SignalR.js file.";     }
console.log('Starting error finding process...');     for (let count in openPRs) {       let { number, labels, head: { sha: ref } } = openPRs[count];
if (typeof args[0] === 'string') args[0] = `react-i18next:: ${args[0]}`;       console.warn.apply(console, args);     }
) {   var constr = function (name, contents) {     this.name = name || 'Example';     var defaultContents = ('\
$scope.$on('$destroy', function () {       for (var modal in $scope.currentModals) {         modal.remove();
this.logger.debug(         '\n{{magenta ' + e.req.method + '}}',         node_url.parse(e.req.safe_url).pathname,
assert(Number.isInteger(this.deactivationThreshold));   if(feed.errorCount > this.deactivationThreshold) {     console.debug('Error count exceeded threshold, deactivating feed', feed.id, Feed.peekURL(feed));
var result22 = result23 !== null           ? (function() {  return (arguments[0]).length != 1 ? new PEG.Grammar.Sequence((arguments[0])) : (arguments[0])[0];  }).call(this, result23)           : null;
'use strict' var extend = require('util')._extend   , jsonSafeStringify = require('json-stringify-safe')   , crypto = require('crypto')
});         return getData(this[0]);     }
let args = []      Array.prototype.push.apply(args, arguments)      args.forEach((argu) => {
personalizationColors: () => {     const palette = this.themeColors().palette;     const brand = this.themeColors().brand;
export function setConfig (...args) {   return config.set.apply(config, args); }
}       this.selectedIdx = this.selectedIdx.sort()       this.$refs.searchField.focus()
if (!body) {         throw 'Expected function body.';     }
},     nodeTraverse: function ( ) {         Node.prototype.traverse.apply( this, arguments );     },
if (base) {     for (var p in base) {      blank[p] = base[p];     }    }
this.globalData.transformCanvas = this.transformCanvas;     this.elements = Array.apply(null,{length:animData.layers.length});
String.prototype.date = Number.prototype.date = function(format) {   var m
});         it("Size of dataset '0' should be 186 ", function*() {             groupGeometries.getDatasetType('0').should.equal(HLType.HL_TYPE_LITE);
}       this._setupPlayerAttributeBindingObservation(player, property, attrName);     }, this);   },
function cancelDelete() {         this.modal.dismiss();     }
this.evaluate();                                 }, this), { priority: this.context.depth });                             }
if (settings.slides.length) {      $(this).rsfSlideshow('addSlides', settings.slides);      settings.slides = Array();
var cmElement = function(options) {     this.prop = options.prop || "color";     this.prettyName = options.prettyName;
size: 'S',           ui: this.ui,           theme: this.theme         }
unformatted = data.get( address );    formatted = anglebars.format( unformatted, model.formatters );    this.update( formatted );
array.forEach(files, function(f, i){    var fieldName = this.name+"s[]";    var fileName  = f.fileName;
}   this.prevTime = this.timingFunction();  },
constructor() {     this.state = { result: null };     this._callback = this._callback.bind(this);
start = 0;     }     for (let i = start, l = this.length; i < l; i++) {       reduced = func(reduced, this.get(i), i, this);
var log = logger.createLogger('auth-ldap')     , app = express()     , server = Promise.promisifyAll(http.createServer(app))
}     insert(records) {         let returnResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;         return __awaiter(this, void 0, void 0, function* () {
this.DATABASE = {}; function Weaver() {
{           datatable[$(this).attr('groupid')]=obj;         }
delete model[from + ':' + this.valueAttr];           }, this);
this.debug("Socket data being routed for '" + data.event + "' event");         _.bind(this.eventRouter[data.event], this)(data, conn);       }
this.initialize = function() {
let r = [];    for(let i in map){     r.push(map[i]);    }    return r;
var activityProxyGetter = function () {   if (this.currentState == this.state.opened || this.currentState == this.state.opening) {    return this.window._internalActivity;
, getPrototypeOf           = Object.getPrototypeOf   , f                        = require('../Function/functionalize');
if (existingValue) {         for (var prop in value) {           existingValue[prop] = value[prop];         }
var util = require('util')   , Mechanism = require('./Mechanism') function Anonymous() {}
this.testStderr = function () {     var ex = jake.createExec('echo "foo" 1>&2', function () {});
}      this._highlight({row: e.visualIndex});     }],
}         return new this.constructor(...hexes)     }
_.camera.add(_.light);         this._.camera = _.camera;
Gate.prototype.beforeAny = fn => {     this.beforeAnyRequest = fn; };
$('.title a').each(function () {     var href = $(this).attr('href');     if (checked){
coUtils.Debug.reportWarning(       "%s sequence [%s] was ignored.",       arguments.callee.name, Array.slice(arguments));   },
__extends(DependencyObjectCollection, _super);          function DependencyObjectCollection() {              _super.apply(this, arguments);            }
if (!((this.objectModelDeclaration != null) && this.objectModelDeclaration)) {           throw "Failed to deep copy (clone) source object model declaration.";         }
goog.exportSymbol('WebGLEarth.prototype.getCenter', function() {   var pos = this.camera.getPos();   return [goog.math.toDegrees(pos[0]), goog.math.toDegrees(pos[1])];
hasFiles() {     for (const ignored in this.compiling) return true;     for (const ignored in this.copying) return true;     return false;   }
if(get(this, 'renderSrc')) {       this.setupActualImg();     } else {
exception = _error;             throw "openNamespace failure: " + exception;           }
, fs        = require( 'fs' )   , binPath   = path.join( __dirname, '..', '..', '..', 'bin' )   , assetPath = path.join( __dirname, '..', '..', 'assets' );
temperature.on("data", function() {             self.emit("data", this.celsius);             console.log(this.celsius + "°C");         });
parsed[1] = parsed[1].replace(affectedTagRe, disableAttributes);                     return parsed;                 });             return [].concat.apply([], ret).join('');         };
constructor(location, interfaces) {     this.location = location;     this.interfaces = interfaces;   }
data = _.extend({}, {validateOnChange: true}, data);             var self= this             , parsedData = this.parseAction(data);
module.exports = function (ctx, name, getter) {   var context = ('function' === typeof ctx) ? ctx.prototype : ctx     , _get = Object.getOwnPropertyDescriptor(context, name)     , _super = function () {};
const IgniterConsole = {   warn() {     console.warn.call(console, ...arguments);   },
QUnit.test( "parameter passed to stop increments semaphore n times", function( assert ) {  var testContext = this;  assert.expect( 1 );
var params = "";       for (var name in event) {         var value = event[name];         if (typeof value !== 'undefined') {           params += name + '=' + encodeURIComponent(value) + '&';
, MySQLQueryInterface = require('./dialects/mysql/query-interface')   , Transaction = require('./transaction')   , Promise = require('./promise')   , QueryTypes = require('./query-types');
class UnitHealthDropdown extends React.PureComponent {   constructor() {     super(...arguments);     this.state = { dropdownItems: this.getDropdownItems() };
}).call(this);
extend() {     var target = arguments[0]     var objs = [].slice.call(arguments, 1)
it("instance injection in mediator with inject property", function () {   var f = function(){console.log(arguments);this.args = arguments};         f.inject = ['instance'];
export default function (nextState, transition) {   this.store.dispatch(sync())   this.store.dispatch(checkToken())
var app = require('../../examples/auth/app')   , request = require('../support/http')   , should = require('should');
function(){                 $(this).find('i').remove();             }
if (confirm('Are you sure you want to delete the entire list?')) {      this.base.del.apply(t);     } else {
}); function createLogger() {   var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
mUIUtils.getUserText(domId+"EditBox", refNode, false, defaultName,       dojo.hitch(this, function(name) {      if (name) {
if (i < this.$timeouts.length) {       setTimeout(function() {         this.$cycleTouchName(fontName, i + 1);       }, this.$timeouts[i] - (i > 0 ? this.$timeouts[i - 1] : 0));
var g_fButtonPressedOnAnyGamepadEver = false; var g_gamepadVisualizers = new Array(); function runAnimation() {
var globalMatch = haystack.match(globalRegex);    matchArray = new Array();    for (var i in globalMatch) {
const arr = []   for (const uuid in editors) {     arr.push(editors[uuid])
if (koFileEx.scheme != "file") {         throw("'"+file+"' does not have a local dir name");     }
WhatsAppAPI.Wap.sendConversationSeen(data.jid, t, data.unreadCount, false).bind(this).then(function(e)   {
}             original.apply(this, _.rest(arguments));         });
function _log() {   console.log.apply(console, [].concat([`[${moment().format('DD/MM/YYYY HH:mm:ss')}] =>`], Array.from(arguments) || [])) }
(...args) =>     fns.reduceRight((acc, fn) => [fn.apply(this, acc)], args)[0];
return function getGlobals() {    return _ref10.apply(this, arguments);   };
function OverlayBlock(el, overlay, points) {         OverlayBlock.__super__.apply(this, arguments);         this.jsPlumbOverlayInstance = overlay;
if (exp !== undefined) {         return expressionCompile(exp).apply(instance, slice.call(arguments, 1, arguments.length));       } else {
case 'http:       Object.assign(vocab, this.DRAFT_04_HYPER);       break;   }
that._defineDimentions();     $(this)      .removeClass('animating')
, pg   , Generator = require('../../../lib/generators/sql').Generator   , generator = new Generator()   , model = require('../../index')
key: 'renderEnum',     value: function renderEnum(definition) {       var depth = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];       var _definition$config = definition.config;
init: function() {     this._super.apply(this, arguments);     if (!this.$) {
} else {              for (var p in icon_paths) {                 var iconPath = path.join(icon_paths[p],req.params.icon);
import ExtractTextPlugin from 'extract-text-webpack-plugin' export function extractStyles (ext) {   return !this.dev && !!this.options.build.extractCSS && this.options.build.extractCSS[ext] !== false }
this._encoder.on('error', function(err) {     this.rpcCode = nurpc.rpcCode('INTERNAL');     onFinish();   })
console.log('runner run cb', arguments);   process.exit(stats.failCount > 0 ? 1 : 0);
if ('string' == typeof msg) msg = new Buffer(msg);   var len = msg.length     , buf = new Buffer(len + 4);
for (var i in templates) {       this.$markAsBound(templates[i]);
var expect = require('chai').expect   , husk = require('../..')   , assert = require('husk-assert'); describe('husk:', function() {
console.log('IMAP server closed');                     }.bind(this));
, Log = require('./log')   , Q = require('q');
} else {         throw("unexpected context: name='" + context.name + "' type=" + context.type);     }
Events.prototype.one = function(ev, callback) {     return this.bind(ev, function() {       this.unbind(ev, arguments.callee);       return callback.apply(this, arguments);     });
if (this._oOpenPopoverDeferred) {    jQuery.sap.delayedCall(0, this, function () {     this._oOpenPopoverDeferred.resolve();     this._oOpenPopoverDeferred = undefined;
var v=new Number(RegExp.$1);     var donotnotify=false;
if (allowedCallbacks.indexOf(name) === -1) {           throw "ATRACKT ERROR: `setCallback` - `" + name + "` is not a valid callback.  Only callbacks allowed are: " + (allowedCallbacks.join(', '));         }
$.each(this.columns, function (i, column) {             this.columns[i].visible = visible;         });
if ( ! field || ! field.name ) {    throw "A field must have a name"   }
function unroute() {     return unbindRoute.apply(this, arguments); }
this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.document && !this.index) {
this.params = validator(options, 'params') || {};         this.urlParams = validator(options, 'params') || {};         this.method = validator(options, 'method') || 'get';         this.config = validator(options, 'config') || {};
Array.prototype.humanSort = function( ) {    return this.sort( function( a, b ) {       var x, cmp1, cmp2;       var aa = a.split(/(\d+)/);
if (this.previous) {                 var result = this.previous.allConnections;                 result.push.apply(result, this.includedConnections);                 return result;
, shared = require('./shared')   , util = require('util')   , utils = require('./utils')
for(var j = 0; j < this[relation.name].length; j++){               if(this[relation.name][j] && this[relation.name][j].hasChanges()){                 (function(relation, subrecord){
return this.fetch(offset).done(_.bind(function (results) {             var result = results[this.type];                          if (result.length > 0) {                 this._hasNextPage = true;
return function () {       _super.apply(this, arguments);       var have = function (selector) {
JAK.LightBox.Anchorage.Fixed.prototype.$constructor = function(owner) {  this.callSuper('$constructor', arguments.callee)(owner);
return this.flatMap_(         makeSpawner(arguments),          {
return 'school' + schoolCount.toString();     };     this.generateLanguageProperty = function(languageCount) {         return 'language' + languageCount.toString();
function *createPost() {
this.layer = new Backbone.Model();     this.layer.getDataProvider = jasmine.createSpy('getDataProvider');     this.model = new FormulaDataviewModel({
}         }, _callee, this);       }));
})(this);
, max_iob: maxiob_data.max_iob || 0     , carbs: carbratio_data     };
var $export = require('./_export')   , $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');
if(properties.getter) {      value = typecast.call(this, properties.getter.call(this, value), value, properties);    }
this.creative = creative;         this.variation = variation;         super();         this.vastUtil = new VASTUtil();
this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height);     this.radius = globeModel.get('globeRadius'); }
return emit.apply(this, args)   return this.localUpdate.apply(this, args) }
}     throw "internal error: no is_mul_identity value on input to replace_with_notone"; };
delete that.models[this.id];             that._initModel(this.id);         });
triggerOutput() {    Node.triggerOutput(...arguments);   }
}   function safeDigest() {    return Helpers.safeDigest.apply(Helpers, arguments);   }
'use strict'; var pagelet = require('registry-status-pagelet')   , nodejitsu = require('nodejitsu-app');
if (this.mouseUpTime < opts.pressDuration) {                             progress("disable", $(this));                         } else {
sensor.scale([ 0, 100 ]).on("read", function() {     console.log( this.normalized, this.constrained, this.scaled );   });
AbstractClass.all = function all(params, cb) {     if (stillConnecting(this.schema, this, arguments)) return;
function Presenter (props, context) {   BaseComponent.apply(this, arguments)
var vm = this;         vm.canBePromoted = canBePromoted;
'filter':function() {      for (var row in table.getRows()) {       row = table.getRows()[row];
$(this.backControl).set('html', value);                 this._currentState.back = value;             }, true);
let dictionary = Object.keys(self.contracts);         for (className in self.contracts) {           contract = self.contracts[className];
else {                     var ary_vs = new Array();                     data[key].forEach( function( v ) {
e_2 = _c.sent();                             if (this.options && this.options.propagateError) {                                 _arr = [];
attributes += "=";      if(this.quote_attr_values || v.length == 0) {       quote_attr = true;
, KEYCODE_SPACEBAR = 32   , TIME_CLEAR_BUFFER_TIMEOUT = 750   , TIME_CHECK_EDITABLE_ELEMENTS = 1000 * 30          , TIME_OUTLOOK_EDITOR_CHECK = 500
,                     {
clearTimeout(this.timeoutID);     this.timeoutID = setTimeout.apply(null, arguments);   },
acceptsCharsets() {     return this.accept.charsets.apply(this.accept, arguments);   },
for (var i in copyItems) {       var itemName = copyItems[i];       Router[itemName] = ReactRouter[itemName];
expect(spied).to.have.been.called();       expect(this.slider._transitioning).to.be.false;       await wcutils.delay(100);
, vars: {       loginState : false,
newValue = this[head].setIn(tail, value);     } else {
mejs.Utils.typeChecks.push(function(url) {         url = new String(url).toLowerCase();         if (url.indexOf('vimeo') > -1) {
: 'mb.core.printclient.btn.deactivate';                     $(this).val(Mapbender.trans(buttonText));                     self._getTemplateSize();
number.charAt(number.length - 1) == 'e') {           throw 'Lexer found invalid exponential value "' + text + '"';         } else {
self.rerenderGraphs(data);       }.bind(this);
var r1 = oldRotation < 0 ? 360 + oldRotation % 360 : oldRotation % 360     , r2 = newRotation < 0 ? 360 + newRotation % 360 : newRotation % 360
function calcError(outputs, target) {       return target[this.thread.x] - outputs[this.thread.x];     }
var qs = require('qs')   , settings = {}
return error('Error loading exercise text:', err.message || err)       printExercise(type, exerciseText)     }.bind(this))   }) }
var __NEJS_THIS__ = this; Snakeskin.addDirective(  'with',
args[argIndex] = utils.transformValue(this._path, args[argIndex], utils.encrypt);     }     console.log('ARGS:', args);     return this._originalOnDisconnect[methodName].apply(this._originalOnDisconnect, args);   };
return this.getParent().sendAndReceive.apply(this.getParent(), arguments);     }     return this._getActor().sendAndReceive.apply(this._getActor(), arguments);   }
this,       Array.prototype.slice.call(arguments)     ).then(function(contentAndState) {
, morph: function(matrix) {
describe('133. longrawProcedureBind_inout.js', function() {   this.timeout(100000);   var connection = null;
constructor() {     super(arguments);     this.type = 'prime';
BTCStateProvider.prototype.getBlock = async(network, blockId) => {   if (typeof blockId !== 'string' || !this.chain || !network){     throw 'Missing required param';
return !model ? 'Set model or data.' : properties;       }.bind(this).on$(this.X, this.model$, this.properties$));     },
return {                 'string': String.fromCodePoint.apply(String, out),                 'length': offset - start
}   var modelPath = Ember.Handlebars.get(this, 'formForModelPath', options);   options.hash.modelPath = modelPath;
this.height = false;   this.render = true;   this.points.origin = new point(0, 0);   for (let k in hooklib) this[k] = hooklib[k];
if (this.mainHandle) middleware.push(toThunkableFn(this.mainHandle))   middleware.push(function (done) { this.seq(this.onPreEnd)(done) })
};       RemoteStorage.Unauthorized = function() { Error.apply(this, arguments); };       RemoteStorage.Unauthorized.prototype = Object.create(Error.prototype);
const originalMeteorDebug = Meteor._debug; Meteor._debug = function() {  notify(...arguments);  return originalMeteorDebug(...arguments); };
} else {                 throw("unexpected context: name='" + context.name + "' type=" + context.type);             }
, verifyForm: function (button) {                 var button = $(button),
} else {         throw 'unsuported typed array: ${uncompressedData}';       }
console.log('NOTIFY: %s@%s', key || id, id);       original.apply(this, arguments);     };
this.bind("enterframe", function() {     var old = {x: this.x, y: this.y, w: this.w, h: this.h},      changed = false;
PooledWorker.prototype.exec = function() {     this.onExec.apply(this, arguments); };
callback && callback.apply(this, args);         this.trigger.call(this, 'route', name, args);         this.trigger.apply(this, ['route:' + name].concat(args));
if (!gl)             throw "failed context creation";         if ("interactor" in opts) {
var debug = function() {   console.log(arguments); };
.each(function() { ++n; })                 .each("end.all", function() { if (!--n) callback.apply(this, arguments); });         });
function d3_selection_each(callback) {   for (var j = -1, m = this.length; ++j < m;) {     for (var group = this[j], i = -1, n = group.length; ++i < n;) {
if (!this._unsubscribeFns) this._unsubscribeFns = []     this._unsubscribeFns.push(Bacon.onValues.apply(Bacon, arguments))   },
];    for (var i in this._editorTextPlusPlacements)     on(this._editorTextPlusPlacements[i], "click", this.onEditorTextPlusPlacementClick);
exports.Bucket = function(capacity) {     this._store = new Array();     this._capacity = capacity;
constructor(rootPattern, referencer, callback) {         super(this);         this.referencer = referencer;
var async = require('async')   , should = require('should') module.exports = function(idProperty, getEngine) {
function log(level) {   if (log.level >= level) {     console.log.apply(console, _.toArray(arguments).slice(1));   }
stub(Backbone.Radio, 'log');       this.channel.command('some:event', 'argOne', 'argTwo');     });
});     this.route('reroute-guid', {path: 'preprints
return function () {                 throw "Roles cant be instantiated"             }
}     var p = promising();     return p.fulfill.apply(p,args);   }
callback.apply(this, arguments);     }, thisPtr);    }
if (x instanceof Runtime.vec)         return internal._evalVec(x, arguments.callee);     return Math.floor(x);
Date.prototype.getTimespan = function(param) {     if (!param)
}       $(this).parent().css({         "overflow": "hidden"
css: function(property, value) {     var args = [].slice.call(arguments, 0);     if (!this._checkElement(args[0])) {
} else {       path = path.fmt.apply(path, otherArgs);     }
open_file(this, files, path, flags, check_result);         deferred.promise.then(
$scope.selectNode = this.selectNode;         $scope.selectedNode = this.selectedNode;         $scope.dblClick = this.dblClick;
var what, a = arguments, L = a.length, ax;     while (L && this.length) {       what = a[--L];
class Test extends phrase.Phrase {       constructor() {         this.setState('test')       }       describe() {
this.data = data != null ? data : {};       _Class.__super__.constructor.call(this);     }
} export async function favicon_refresh_feeds() {   const feeds = await get_feeds(this.rconn, 'active');   const promises = [];
var log = logger.createLogger('storage:plugins:apk')     , app = express()     , server = http.createServer(app)
this.testSamePrereqTwice = function () {     h.exec('../bin/cli.js foo:asdf', function (out) {
,messages: {}    }
data: this.get('defaultDataStructure'),   options: UNDEF,
socket.on('data', this.emit.bind(this, 'data'));  socket.on('close', this.emit.bind(this, 'close'));  this.emit('connection', socket);
.complete(function(){       $(this).css({ 'opacity': 1 });     });
var type = event.type || event,    bubbling = arguments[3];
ComponentFacet.prototype.init.apply(this, arguments);     var model = new Model         , self = this;
toJSON: function() {    var jsonObj = Backbone.Model.prototype.toJSON.apply(this, arguments);    var children = this._nodes.toJSON();
this.size = { radius:6, infoX:3, infoZ:3 }      this.state = 'white'      this.color = 'rgba(240,240,240,1.0)'
callback.apply(this, arguments);     }, thisPtr);    }
case 'LT':     return function(key) { return key < arguments[1][0] }   case 'GE':
RegExp.prototype.exec = function (str) {      var match = real.exec.call(this, str),          name, i, r2;      if (match) {
if (instructor.instructor_group_id != null) {                         model = new Object();                         model.isGroup = true;
this.formTag(params, function () {           arguments.callee.buf = buf;           if (block) self.fieldsFor(resource, params, block);
if(!object.isValid()) {       throw { message: "Could not convert to date", expression: match, key : key, data : data };      }     }
}),                     error: lang.hitch(this, function () {                         this.layerJSON[url] = {};                         deferred.resolve(this.layerJSON[url]);                     })
$scope.$watch(angular.bind(this, function() {     return this.lang;   }), angular.bind(this, function(newVal) {     this.measureStartMsg = measureStartMsgs[newVal];
_TextLayoutRun.prototype = new Object;  _TextLayoutRun.prototype.constructor = _TextLayoutRun;
if (state !== OPENED) {     throw 'Already closed';     }
self.tag = function () {         self._apply_command(model.Model.prototype.tag, arguments, KEY_TAG);         _persist_command(model.Model.prototype.tag, arguments, KEY_TAG);
for (const pkg of packages) {       const packagePath = path.resolve(path.join.apply(path, [__dirname, '..', 'node_modules'].concat(pkg.package.name.split('/'))));       if (fs.existsSync(packagePath)) {
}     this.config.cols = colList;     let filtered = data;
if ( failed.length ) {     throw '[CKEDITOR.resourceManager.load] Resource name "' + urlsNames[ failed[ 0 ] ].join( ',' ) +      '" was not found at "' + failed[ 0 ] + '".';    }
return {         servicesList: ServicesStore.services         , sizeArr      : [ "s", "m", "l" ]         , widgets      : {
, mkKey = require("../support/models").mkKey   , _ = require('underscore') Promise.promisifyAll(crypto)
if (x instanceof Runtime.vec)         return internal._evalVec(x, arguments.callee);     return x >= 0 ? x : -x;
,'src/core/pagelet.js'             ,'src/core/demolet.js'             ,'src/core/mu.js'             ]
SettingsWindow.prototype.removePanelItem = function(iter) {     this._appRef.removePanelItem.apply(this._appRef, arguments);     this.refreshPanelItems();
auth[fn].call(this, id, projectname, type, rights)                  .then(mainDeferred.resolve)
if (!exp.type.equals(result.type)) {         throw "Shade.constant internal error: type was not preserved";     }
lazy_require(this, {   meta : ['azk'],
const AudioPlayer = () => (   <JPlayer className="jp-default" id={this.props.id}>     <Gui>
throw " I dont know how change this corpus' public/private setting ";     }
if (!Hash.isHash(hash)) throw 'Malformed hash';
} else {       var protocol = strategies[key].protocol         , callback = strategies[key].callback;
}                         var releases = this._releases = result;                         var versions = releases.filter(function (target) {
return {     type: this.BACK_TO_ACCOUNT_DETAIL,     value: address,
name: 'string',   constructor: function StringField() {     Astro.BaseField.apply(this, arguments);   },
localStats = new LocalStats(stream, 100, this,         eventEmitter);
co(function * () {   let caller = sugoCaller({
, GeometryColumnsDao = require('../../../../lib/features/columns/geometryColumnsDao')   , GeoPackageAPI = require('../../../../.')   , path = require('path')
constructor() {     super(arguments);     this.type = 'array';
else {      for (var index in this.idAttributes) {        attr = utils.findAttr(node, this.idAttributes[index], null);
delete self.container.dataset.dragging;       self.dragabbleSection.removeChild(this);       callback();
if ($(this).text().toLowerCase() === curText.toLowerCase() || !$(this).text().length) {                         $(this).html('<em style="color: gray;">' + curText + '</em>');                     }
var _write = function(data, position) {  this.requires.fs.write(this.fd, data, 0, data.length, position, this.onWrite); };
name: 'date',   constructor: function DateField() {     Astro.BaseField.apply(this, arguments);   },
function dialog(selector, options) {   var _this = this;   this.elements = (0, _utils.getElements)(selector);
}.bind(this);       this.bindKeyboardShortcuts();
if (!await fs.exists(this.settingsPath)) {    throw `Couldn't write settings file: ${this.settingsPath}`;   }
}   visit(this._root, depth);   return this;
var size = {width: 960, height: 500}   , projection = d3.geo.albersUsa().scale(1070)   , path = d3.geo.path().projection(projection)
'use strict'; var detective = require('detective')   , readdirp = require('readdirp')   , maps = require('map-stream')
var add = function (obj) {   var self = this   if (!obj || !_.isPlainObject(obj)) {
if(results instanceof Array){     for (var i in results){      this._processResults(results[i]);     }
var middleware = _initialize(passport)   return function*(next) {
} catch (err) {    throw(`Cannot include file at path ${file}, non-existent or can't be read.`);   }
var dataAttribute = rotateAttr ? 'data-rotate' : 'data-sequence';                 $(this).attr(dataAttribute, result[1]);                 if (!result[1]) {
extractParams() {             return extractParams.apply(this, arguments);         }
} catch (error) {     throw 'Error creating WebGL context';   }
this.compile = function () {     var self = this       , src       , fn       , opts = this.opts
else if(this.isTemperature() && !other.isUnitless()) {         throw "Cannot divide with temperatures";       }
"use strict"; var layouts = require('../layouts') , consoleLog = console.log.bind(console);
, helpers    = require('./helpers')   , toCode     = helpers.toCode
$ops.each(function() {     console.log(data.type + ': ' + data.path + ': ' + $(this).data('opt') + ': ' + $(this).data('value'));     data[$(this).data('opt')] = $(this).data('value');
console.log('  ' + color.magenta('[' + section + ']'));     for (var key in data[section]) {       var value = data[section][key];
var SystemJSLoader = function SystemJSLoader() {     Loader.apply(this, arguments);   };
this.selectPath = selectPath;    this.getPathRating = getPathRating;
else if (category == 'tv') {     for (let key in data) {
module.exports = {   Test   : require ('test') , Server : require ('server') }
var result = exports.logWrapper('scrollHistoryModel', {}, 'orange', function () {             $rootScope.$emit.apply($rootScope, arguments);         });
this._prevTime = undefined;         this._down = false;         this._move = false;     }
var toReturn = [];    for (var element in elements) {      toReturn.push(addElementToInternalArray(elements[element]));
if( err.name && err.name == 'ValidationError' ){     for( var error in err.errors ){       req.flash( 'flash-error', err.errors[ error ].message );
const version = buf.readUint16();         if (!BlockHeader.SUPPORTED_VERSIONS.includes(version)) throw 'Block version unsupported';         const prevHash = Hash.unserialize(buf);
top: function() {         return new Number(0);     },
$scope.$on('$destroy', function() {       this.pageSliderPopover.remove()       this.gifPopover.remove()
function arrayIntersectOrSubtract(arr1, args, subtract) {   var result = [], o = {}, arr2 = [].concat.apply([], args);   forEach(arr2, function(el) {
if (statusCode < 100 || statusCode > 599) {     throw 'invalid HTTP code';   }
, nativeTypes = require('../types/nativeTypes.js')   , typePlaceholder = require('../types/typePlaceholder.js')
, less = require('gulp-less')   , assign = require('lodash/object/assign')   , rename = require('gulp-rename')
btn.addEventListener('click', function() { f.track('trackLink', this.href, 'link'); });  btnc.appendChild(btn);
for (var i in shifts) {       var shift = shifts[i]
global.get_nickname = function*(uid){
if (this._unique) {                     throw `Uniqueness constraint violated for key ${key} on path ${this._keyPath}`;                 }
export default async function register({ releaseAddress, network, txParams = {} }) {   if(!releaseAddress) throw 'You must provide a release address'   const kernel = await KernelProvider.fromKernelNetworkFile(network, txParams)
var route = false       , path = req.url       , method = req.method;     for (var i in this.routes) {
function SVGSpriteStandalone(spriter, config, data) {  SVGSpriteBase.apply(this, arguments); }
Object.prototype.isType = function (t) { return t.name === Object.getPrototypeOf(this).constructor.name };         Object.prototype.typeName = function () { return Object.getPrototypeOf(this).constructor.name; };
{         arguments.callee.base.apply(this, arguments);       }
if (!opts.clearDepth.type.equals(Shade.Types.float_t))             throw "clearDepth must be float";         clearDepth = opts.clearDepth.constant_value();
$controls.each(function() {         var eventType = $(this).data('disable-event');         if (!eventType) {
handle = aspect.after(field, 'complete', lang.hitch(field, function() {                 var field = this,                     list = this.owner,
this._req.socket.write(req, "ascii");   this._req.socket.write("\r\n\r\n", "ascii");   this._req.socket.flush();
}                     decorator.apply(this, arguments);                 }
function unique() { var array = Array.prototype.concat.apply(Array.prototype, arguments); var result = []; for (var i = 0; i < array.length; i++) { if (result.indexOf(array[i]) === -1) { result.push(array[i]); } } return result; }
var key = [];     for (var name in values)      {
this.logger.error('Trying to initialize a ConnectionRouteManager3 without a canvas...');             throw ('ConnectionRouteManager3 can not be created');         }
topRange(startDate, endDate, timeGranularity, direction, startingAt, limit, callback) {     const args = Array.prototype.slice.call(arguments);
return 'parsley-' + this.group;       return 'parsley-' + new String(Math.random()).substring(2, 9);     },
if (this._isCanceled) {       throw 'Failed to cancel InvalidatorSubscription: subscription cannot be canceled twice';     }
function MongooseArray (values, path, doc) {   var arr = [];   arr.push.apply(arr, values);   arr.__proto__ = MongooseArray.prototype;
inherit(Merge, _AbstractPool, extend({_name: 'merge'}, MergeLike)); Kefir.merge = function() {   return new Merge(agrsToArray(arguments)); }
var soda = require('soda'),                 browser = soda.createSauceClient({                     url: 'http:                     , host: obj.sel_host                     , browser: obj.sel_browser                 }),
var rec = new RecordType(this.ctor)     , failed = false   recs.push({ self: this, filteredType: rec })
return this.wait(this.send(msg)).then(function () {         return this.createResultList(msg.oids);
for (var i in predef.nametypes) {             var nametype = predef.nametypes[i];
this.triggerEvent('destroy', this);   };   this.code = function (html) {     var isActivated = this.invoke('codeview.isActivated');
}(this, this.jQuery || this.Zepto, this.ch));
if (headerOverrides) {                 for (key in headerOverrides) {                     headers[key] = headerOverrides[key];                 }             }
this.connect = function(...args) {       return getConnectMixin.apply(null, [this].concat(args));     };
} else if (typeof opt === 'object') {     for (var key in opt) {
} else {             throw 'Uses require, but no AMD loader is present';           }
var info = {};         for (var i in namespace_names)         {
var isObject = require('./_is-object')   , meta     = require('./_meta').onFreeze;
constructor: function CommentCollection() {             CommentCollection.__super__.constructor.apply(this, arguments);         },
it("should read fields in Table", function*() {             const groupTarget=file.openGroup('pmc/refinement', CreationOrder.H5P_CRT_ORDER_TRACKED| CreationOrder.H5P_CRT_ORDER_TRACKED);
function property(name, asserter) {       utils.addProperty(Assertion.prototype, name, function () {         return asserter.apply(this, arguments);       });
, mikealRequest = require('request')   , superagent = require('superagent')   , rest = require('restler'); var globalCount;
$('.star a').bind('ajax:success', function() {     $(this).toggleClass('glyphicon-star-empty');     $(this).toggleClass('glyphicon-star');   });
this.unbind();             if(!collection) throw 'collection must be defined';             if(!parentEl) throw 'parentEl must be defined';             this._collection = collection;
if(!user)             throw "need user";         if(!gistname)
}   splice () {     for(let i = 2, l = arguments.length; i < l; i++) {       if (!(arguments[i] instanceof Node)) throw nodeError     }
, self = this     , candidates = this.getCandidates(query)     , numRemoved = 0
if (tagName === 'INPUT') {    if ((type === 'checkbox' || type === 'radio') && ! jQuery(this).attr('checked')) {     return;
var self     = this       , accessor = Utils._.camelize('set_' + this.options.as)
this._addObserverIfNotSpying();     this._bindScrollDirectionListener(window, get(this, 'viewportScrollSensitivity'));     const listeners = get(this, 'viewportListeners');
Object.prototype.call = function(fn) { return fn.apply(this, Array.prototype.slice.call(arguments, 1)); }; var variables = {};
onProcessPaste () {   console.log(arguments);  }
class A {constructor() { this.levels = 1; }}     class B extends A {       constructor() {          this.levels++;        }
GIFWriter.prototype.createCT = function(frame) {   var sizes     , uniq     , ltable
var Extension = require('./index').Extension   , ExtensionDao = require('./index').ExtensionDao;
this.type = type;  this.urlPrefix = '/cms/chunk/' + this.type + '/';
var bucketGraphDate = new Date(startTime + (dayMillis * i));                 for (series in resultData){                     resultData[series].data.push({date: bucketGraphDate, value: 0});                 }             }
render: function() {             ParametricResultsView.prototype.render.apply(this, arguments);             this.$content.html(this.tableTemplate());
, gameObjectBodyCount             , i, j             , body             , container;
return class TransitionAwareRouter extends RouterClass {     render() {       return <PageContainer>{super.render(...arguments)}</PageContainer>;     }
class ServicePodConnectionEndpointList extends React.Component {   constructor() {     super(...arguments);
return this.store_.put(page.serialize());     }, this));   }, this);
}       $(this).hide();     });
module.exports.lowerKeys = function (obj) {     var out = {};     for (var key in obj) {         out[key.toLowerCase()] = obj[key];
init: function() {             Mobile.SalesLogix.History.List.superclass.init.apply(this, arguments);
describe("stability @skip-ci", function () {       let runs = 10         , text = 'Delhi is New @@@ BREAKFAST-FOOD-0001';
} else {     this.append(val);    }
return function (scene, config) {         var _transform = new Transform(this),             _components = [_transform],             _layer = 1,
}   this.signal = signal;   var windowedSignal = utilities.applyWindow(data, this.windowingFunction);
callback = event.data.callback,                     panel = $(this).closest('.' + classes.panel),                     hasShadow = panel.hasClass(classes.active),
case JSON3.stringify(new Number()) === "0":           case JSON3.stringify(new String()) == '""':
if (!callback) return;     callback(false, this);   });
it(NUM_RETRY, "should load", function(done) {       var self = this,           pageLoad = true;       if(url) {
if (typeof source !== 'function') {     throw "SlideViewer second argument should be a generator function!";    }
if (typeof source === 'undefined') {    throw 'Missing source parameter';   }
if (value.groups) {           for (i in value.groups) {             tempMarkup      = tempMarkup + templateGroup;             subDeviceMarkup = '';
beforeEach(function() {       stub(this.controller, 'bindEntityEvents');       this.controller.channel = Backbone.Radio.channel('foo');     });
getAddOverlayData = function() {             var accountDef = this.sandbox.data.deferred(),                 contactDef = this.sandbox.data.deferred(),                 data = [],                 oldData = this.getData();
var concat_node_distro_files = [  'src/shortjsdoc-header.txt' , 'src/typeParser.js' , 'src/JsDocMaker.js'
var diff     = jsdiff.createPatch(info.outputPath, result.output.toString(), result.input);   var diffPath = path.join(this.tmpDifferenceDir, 'currentDiff.diff');
emit() {     let socket = this.get('socket');     socket.emit.apply(socket, arguments);   },
each(seed.nodes, function(nodeData) {       this.create(nodeData);     }, this);
(function (){ var me=arguments["0"] || this; var wnr = {
var specProps = SchemaOrg["types"][id]["specific_properties"];         for (var p in specProps) {             var pId = specProps[p];
if (!stream || !host)              throw 'new Pipe(host,stream[,opts])';
if (subscription == null) {         throw "can not create subscription";     }
format: function (msg, args) {         for (var i in args)             msg=msg.replace('{}',args[i]);
test.get('scope').forEach(function (scope) {       var candidates = DOM.scry(selector, $(this));       if (candidates.length === 1) {
if (!conf.bLight)   throw "light but updateLinkProofsOfPrivateChain";  if (!onFailure)
var self = this;   this.app.on( 'new_session', function() {     self._create_user_identity.apply( self, arguments );   } );
, hyperquest = require('hyperquest')   , sendApi    = 'https:   , defaults   = {method: 'POST', headers: {'content-type': 'application/json'}}
paths = pathHelper.simplifyPaths(paths);         for (const i in paths) {             const path = paths[i];
var util         = require('util')   , Boom         = require('boom')   , Class        = require('../class')
handlers.forEach(function (handler) {                     handler.apply(null, args);                 });
var connect = require('connect')   , mixin = require('utils-merge')   , escapeHtml = require('escape-html')
return (this.hasTagsInContent(node) && this.isBlock(node))      || _.any(node.children, function(child) {      return this.isBlock(child);     }, this);
sel.options.length = 0;     var opt = document.createElement("option");                 var ore = Array();                 for(var oKey in this.ore) {                     ore.push(oKey);
if (!style) {     throw 'Trying to set block style before Blockly.setStyle() has been called';   }
})(enyo, this);
onDragStop: function() {             Garnish.requestAnimationFrame($.proxy(function() {                 this.trigger('dragStop');                 this.settings.onDragStop();
setupController(controller) {     this._super.apply(this, arguments);
placeholder="new@user.com"               error={this.state.errorMsg}             />
var menuItem = function(domNode) {   this.domNode = domNode;   this.submenu = null;
if (!expanded_set.length) return '';       return char.call(this, randSelect.call(this, expanded_set), this.ignoreCase);
function locationRatingChickController() {         var vm = this;         vm.$onInit = function() {
var args = new Array(arguments.length);     for (let i = 0; i < arguments.length; i++)         args[i] = arguments[i];
var formula = function () {     this.init(); };
renderFilter() {     let ctx = this.props.parent       , model = ctx.model       , filters = model.filters || []
var providers = [];   for(var s in services)   {
const wrapCBMiddleware = function wrapCBMiddleware(handler, action) {   if (this.options.circuitBreaker.enabled) {    return function circuitBreakerMiddleware(ctx) {
_forwardEvents: function(view, prefixer) {         this.listenTo(view, 'all', function() {             var args = _.toArray(arguments);             var prefix = _.result(this, prefixer);
let arr = document.getElementsByClassName('dot')         for (let i in arr) {             arr[i].style.background = '#8492A6'
this.set('boundResize', this.triggerResize.bind(this));     $(window).on('resize', this.get('boundResize'));     $(window).on('focus', this.get('boundResize'));     Ember.run.next(this,'onResize');   }.on('init'),
$toinsert.find( "table" ).addClass("table table-condensed table-nonfluid");     n = arguments[4].find( "table" ).length;     console.log ("beautified "+n+" tables in output...");
var requestPromise = PromiseController.create({         promise: this.get('model').save().catch(function() {           if (this.get('model.errors.length') > 0) {             this.set('errors', this.get('model.errors'));
if (!response.is_response(resp)) {           throw "Error: node.js http adapter did not receive a proper response map"         }
, replaceDateHeader = require('./replace-date-header')   , getHttpResponseData = require('./parse-http-response')   , chalk = require('chalk');
el.removeEventListener("touchend", registerCoordinates);     }.bind(this)   };
function _encapsulateTwoParam (context, cb) {     if (func.length === 0 || func.length === 1) {       func(this)       process.nextTick(cb)
if (this.maintainCollections) {       this.collections = {};     }
loaders: [             , {test: /\.css$/, loader: "style!css"}             , {test: /\.scss$/, loader: "style!css!sass"}
withoutConversion(() => {       for (let key in props) {         defineReactive(vm, key, getPropValue(data, key))       }     })
internals.addMethod(['most'], function (value) {     return this.assert(this._ref <= value, 'be at most ' + value, this._ref); });
deferred.resolve(remoteContent)     }.bind(this))     this.getRemoteContent(hash)
this.on(configFile.events.end, function () {    fs.rename(path.join(this.destinationRoot(), '.yo-rc.json'), path.join(this.destinationRoot(), 'setup.json'), function (err) {     if (err) _this.log('ERROR: ' + err);
function get() {     return this._paddingBottom; }
, path = require('path')   , vm = require('vm')   , bot = null; try {
class NodeHealthStore extends GetSetBaseStore {   constructor() {     super(...arguments);
{   grunt.fail.warn (csprintf.apply (null, ['yellow'].concat ([].slice.call (arguments)))); };
function L() { if (Ornament.DEBUG) Vex.L('Vex.Flow.Ornament', arguments); }
},         disable: function() {             return this.applyWidgetFunction('enable', arguments);         },
ugenInterface[key.substr(1)] = fn(function() {           var args = slice.call(arguments, 0, arguments.length - 1);           var tag  = arguments[arguments.length - 1];           var instance = ctor.apply(new Klass(name), args);
Error.call(this);     Error.captureStackTrace(this, arguments.callee);     var typeKey = _.first(_.where(_.keys(defs), function(defKey) {
var request = require('request')   , should = require('should')   , qs = require('qs') var express = require('express')
var PlatformStream = require('stream')   , Stream = require('readable-stream')   , isStream = require('isstream')
if (e.keyCode === KEYS.SHIFT) {                 $(this).data('expandmode', false);             }
var lease = $(this).parents('tr').attr('ip');         if (lease == "undefined"){           lease = $(this).parents('tr').attr('mac');         }
this.model = (model_ != null) && model_ || (function() {           throw "Missing object model input parameter.";         })();
if (!filename) {       throw "Cannot find module: " + request + ". Have you run `npm install .` ?";     }
(function() { Tabs.__working = false; }).bind(this).delay(duration);     } else {
var output = config.path.output;       var key    = this.parentView ?         this.parentView.view : this.filename;
item.GitUrl = gitUrl;      exports.getDefaultSshOptions(serviceRegistry, item).then(function(options) {       var func = arguments.callee;       var gitConfigPreference = new GitConfigPreference(serviceRegistry);
if (!input) {           throw 'Input does not exist: ' + name;         }
this._element = window;   this._element.qx_ClientWindow = this;
Promise.all(this.evaluator.evaluate(this.w, context));       expect(github.issues.removeAssigneesFromIssue).toHaveBeenCalledWith({
ctx.fillStyle = options.lineColor;  for(var b in binary){   var x = b * options.width + encoding.barcodePadding;
, configPath     , versionStr     , version   checkPython()
this.on('popoverInitialize', function() {                 console.log(this.dialog, this.popover);                 var self = this,
function conjunction() {   console.log('conjunction', JSON.stringify(this));   return OPTREES[this.match(/^AND/i).toUpperCase()];
this.g = new dagre.Digraph();  for (var i in this.graph.nodes) {   var node = this.graph.nodes[i];
, currentDoc: null   }
var onDelayTrigger = window.setTimeout( function() {                 this._sendQueriesBatch(as, params, callback, classToDerive);             }, delay);
saveOnUpdate: Ember.on('didUpdate', function() {     if (Tracker.isAutoSaveEnabled(this) || Tracker.isIsDirtyEnabled(this)) {       this.saveChanges();
if (this.state.dashboardIsOpen) Actions.openDashboard(this.state.panelIndex)   const panel = this.state.panels[this.state.panelIndex]
.service('global_functions', function() {     this.showTimestamp = function(timestamp) {
}     with() {       return Array.from(arguments).reduce((c, m) => m(c), this.superclass);     }
ListBase.prototype.onItemSelectedChange.apply(this, arguments);   jQuery.sap.delayedCall(0, this, function() {    this.updateSelectAllCheckbox();   });  };
, keyup: function (e) {             switch(e.keyCode) {
precedence : 0,     method : applyBinary.bind(this, Tone.Divide)    },
for(var k in apiCalls) {       var spec = apiCalls[k].split(' ');       for (var i = 0; i < spec.length; i++) {         if(types[spec[i]]) {
for (j in that.markers.groupOptions[group]) {         marker[j] = that.markers.groupOptions[group][j];       }     }
function setStateImpl(state, cb) {     var _this = this;     if (isFn(cb)) {
}     function notifyOnbind(data) { if (this.__onbind) this.__onbind(data); notifyOnboundedUpdate.call(this, data); }     function notifyOnboundedUpdate(data) { if (this.__onboundedupdate) this.__onboundedupdate(data); }
hasParams() {             return hasParams.apply(this, arguments);         },
$(this).val( value ); }
};     WhileStatement.prototype,getCondition = function(){         return this._condition;     };
var pruned = [];  for (var d in grouped) {      pruned.push({ command: grouped[d], description: d });  }
var cbCount = connections.length, cbIndex = 0;   for (var i in connections) {    var url = connections[i].url.replace('memcached:
} catch (e) {     throw filePath + ' ' + filename + ' load failure!';   }
var callback = sinon.spy();     this.srp.identify = callback;     this.srp.register();     this.expectRequest('register/salt/', "I=user")     this.respondJSON({salt: "5d3055e0acd3ddcfc15"});
, y       = [ 0, 0, 0 ]     , runs    = [ new Run([NEGATIVE_INFINITY, NEGATIVE_INFINITY, NEGATIVE_INFINITY], -1) ];
this.logger.debug('Found Eureka Server @ ', results);         callback([].concat.apply([], results).shift());       });
this;   var _document = root.document || this.document;   function Swipe(container, options) {
setTimeout(key, fn, waitTime) {         if (this._timeouts[key]) throw 'Duplicate timeout for key ' + key;         this._timeouts[key] = setTimeout(fn, waitTime);
if (head != 'BSDF') {         throw "This does not look like BSDF encoded data: " + head;     }
if(!this.published) {    throw "This blog post is not published";   }
var Component = this.Component = Base.extend(Callback, {  _events: [ 'onChange', 'onClick' ],
var ByteCode = new Array(); var ArrayType = new Object(); ByteCode.codes = {
} else {       this.file_.data = this.file_.data.substring(0, size);     }
this.file = opts.file   this.query = require(this.file)  }
exports.promptForPermission = function () {     console.warn('Depreated: Please use `notification.badge.registerPermission` instead.');     this.registerPermission.apply(this, arguments); };
function scrap(from, to, dates, persistData) {         var driver = startBrowser(this.browser);         for (let targetDate of dates) {
var validUrl   , malformedUrl   , invalidUrl
e.target.removeEventListener(e.type, arguments.callee);           return callback(e);
try {         return Ext.Element.prototpye.origContains.apply(this, arguments);     } catch(e) {
this.physics.add.collider(player, bottomLayer)   this.physics.add.collider(player, middleLayer)   this.physics.add.collider(player, topLayer)
this.model = ((model_ != null) && model_) || (function() {           throw "Internal error missing model input parameter.";         })();
}).call(this);
}); Ember.TEMPLATES["user"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) { this.compilerInfo = [4,'>= 1.0.0']; helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
if (!darkener || !navigationContainer) {             throw 'Could not find needed elements (Darkener and/or NavigationId)';         }
var onMutated = bind(this, '_onItemSetMutated')    this._itemSetSubs = this.server.subscribeToItemSetMutations(request.id, onMutated,      bind(this, 'sendFrame', 'FIN_EVENT_ITEMSET_SNAPSHOT'))   }))
if( gradientColor != null && percents != null ) {         gradient = new Array();         for( var i = 0; i < gradientColor.length; i++ ) {
const nestedVariable = getFirstQuotedString(this.test.title).split('.');  const boolean = getFirstBoolean(this.test.title);  const value = nestedVariable.reduce(   (currentObject, nextKey) => currentObject[nextKey],
(item.dataSource.entities.values || []).forEach(function(entity) {                             var hash = hashEntity(entity, this.clock);                             var feature = Feature.fromEntity(entity);
return function * jsonErrorHandler(next) {     let status;
this.getFeatureType = function(layer, dataStore) {       var featureType = layer.get('metadata').name;
this.contract.reserveTicket.sendTransaction(ticketId, txHash, powNonce, objParam, function (err, res) {         if (this.debug) console.log('reserveTicket result: ', res);         if (err) {
var Collection = require('../src/collection').Collection         , ChangeType = require('../src/changes').ChangeType         , changes = require('../src/pouch/changes');     beforeEach(function () {
, "main/contentIO"   , "dijit/MenuItem"   , "dijit/MenuBarItem" ], function(
var ret = [];       for(var i in currentLists) {         ret.push(new ListsTweetsTimeline(this.template.id + '_' + i, this.tweetManager, this.template, currentLists[i], i));
var results = flattenComponentForCaption(cap.components.children[ii]);         for (var jj in results) {           var result = results[jj];
isData: true,   model: this.model || Model,   __path: function(){return '';},
async abort(tx) {         throw 'Unsupported operation';     }
speed: 'fast',           display: !this.autoHide         },
if (properties) {     for(var name in properties){      var value = properties[name];
flexo.then(this.deserialize(child), append);     }, this).then(flexo.funcify(elem));   }
var util = require('util')   , concat = require('concat-stream')   , ImageUtils = require('../imageUtils');
.bind( "mouseleave", function() {                                 $(this).fadeOut( "fast", function() { $(this).remove() } )                             });
var model = Model.compile('_mapreduce_' + res.collection.collectionName,           Model.mapReduce.schema, res.collection.collectionName, _this.db,           this.base);
{  var info = new Array();
if (partialRightArgs) {         args = composeArgsRight(partialRightArgs, partialRightHolders, args || arguments);       }       if (isCurry) {         var argsLength = arguments.length;
console.log("CLICK ADD");     console.log($(this).attr("data-team"));     updateFavoriteTeams($(this).attr("data-team"), 'add', false);
let args = [parentProto, params].concat(dependants.slice(parentProto.cNumDependants));         return S$.t.apply(S$, args);     }
animationEvents.forEach(function(evt) {         document.removeEventListener(evt, this.listener, false);       });
if (obj.property.type !== 'Identifier') {     throw 'Property should be Identifiers';   }
function onChange(model) {   if (this.contains(model) && this._collection.indexOf(model) !== modelInsertIndex.call(this, model)) {     this._collection.remove(model);
Array.prototype.sum = function() {     return this.reduce(function(e1, e2) { return e1 + e2; }, 0); };
var flatData = { data: [].concat.apply([], results) };                         flatData.data.forEach(function (data) {
}         throw ("type mismatch on sub: unexpected types  '"                    + t1.repr() + "' and '" + t2.repr() + "'.");
if (that.loops[key] === undefined) {      throw "animation loop not found";     }
var password = arguments.length <= 1 || arguments[1] === undefined ? "pass1234" : arguments[1];    var callback = arguments.length <= 2 || arguments[2] === undefined ? function () {} : arguments[2];    var self = this;
}       if ($(this).attr('href') === '#map-panel') {         if (!_this.isOldIe) {
{             String.prototype.isNullOrEmpty = function ()             {                 return (this == null || this === "");             };
if (elems.length !== 0) {       for (let i in elems) {         elems[i].style.cssText = "display: none;"
angular.module('umbraco.services').factory('archetypeService', function () {          function executeFunctionByName(functionName, context) {         var args = Array.prototype.slice.call(arguments).splice(2);
makeElectorTries(arguments[0].url, {reset: true, priority: 0});         tryElector(arguments[0].url);       } else {
}         this.tableTab.setTable(this.table, this.sqlView);         this.mapTab.setActiveLayer(layerView);
</div>         <div className="dib right fr" onClick={this.toggleMenu}>           <img
constructor(args) {         this.setName(_.get(args, 'name', ''));         this.addServiceDefinitions(_.get(args, 'serviceDefinitions', []));
if (this.profile._id) {             var stringId = new String('profile' + this.profile._id);           } else {
}  matchAssertions(obj, this[ASSERTIONS], this[ERROR_STACK]); });
if ( Number.isInteger(b.re) && b.re <= 0 && b.im === 0 )       throw 'Hypergeometric function pole';
console.log(this.data);   if (this.data.replyMode) {
var dashboards = result.data;                                         for (var d in dashboards) {                                             allowedDashboardIds.push(dashboards[d].id.id);
}                     for (var i in config.datasources) {                         var datasource = config.datasources[i];
for (var key in dataKeys) {    sumRows.forEach(function (total) {     if (dataKeys[key] === total) {      data[total] = sums[total];
throw new ArgumentNullException(TARGET);         return target instanceof Promise ? this : new PromiseWrapper(target);     }
,sequencer:null   ,timer:null
, concatStream = require('concat-stream')   , async        = require('async')   , extend       = require('./util').extend
debug( 'Current value: %s.', this._xAxisOrient );  oldVal = this._xAxisOrient;
Context.prototype.run = function() {   for (var key in this.schema) {     var rules = this.schema[key];
onStart () {     const fns = [].slice.call(arguments)     if (fns.length === 0) {
Meteor.publish('user', function() {   check(arguments, Match.OneOf({}, null, undefined));   return Meteor.users.find(
}       this.latest_login_list = login_list.sort(function(a,b){ return b.name.length - a.name.length });     });
defaulter.set('jsonifyCompilerStats', function (stats) {       return stats.toJson(Object.assign({}, this.statsOptions, this.statsToJsonOptions))     })
dc.multiGroupMixin = function (_chart) {     _chart._groups   = new Array();     _chart._groupGap = 5;
format: function format() {             var args = arguments;             return Array.prototype.shift.call(args).replace(/%s/g, function () {
let types = join(map(validators, "validators.0.name"), ", ");     throw `Value at key path '${formatKeyPath(keyPath)}' should be one of type [${types}].`;   }
const { writeFileSync } = require('fs') function robotsModule (moduleOptions) {   const options = getOptions.call(this, moduleOptions)
for (let n in clustersToOpen) {         this.openCluster(clustersToOpen[n], {}, false );
this.destroy = function () {     this._destroy();
});                 if (matchedPhoneNumber && matchedPhoneNumber.phoneNumber !== this.dialInNumber && !this._showSaveAsDefault) {                   this.updateDialInNumber(matchedPhoneNumber.phoneNumber);
parentInstance.fire.apply( parentInstance, args );  });
, self = this     , options = {}
it('client.url() new', function() {     return Globals.protocolTest.call(this, {       assertion: function(opts) {
b.prototype.elementInActiveFormattingElements = function(name) {  var els = this.activeFormattingElements.reverse();  for(i in els) {   if(els[i] == HTML5.Marker) break;
debug( 'New value: %s.', this._title );  this.emit( 'titleChanged', str, oldVal ); }
var game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', this); function preload() {
var Pty = require("pty.js")   , CliResize = require("cli-resize")   , OArgv = require("oargv")   ;
chatMethods: function() {    var methods = get( this, "settings.content.constructor.chat_methods" );    return methods.filter(function( method ) {     return !method.disabled;
this.isNull = false;                 for (var key in this.attributes) {                     this.attributes[key].update(plainValue[key], setOldValue, this.bubble);                 }             }
return callback.apply( this, [ e ].concat( e._args ) );   }
, {       name: 'Coffeescript',
})(Issues = exports.Issues || (exports.Issues = {})); Array.prototype.maybePush = function (o) {     o !== exports.QUIET_RESULT && this.push(o); };
VObject.prototype.get_signal_connection_list = function listget_signal_connection_listeners(event) {     var evt = prefix ? prefix + event : event         , handlers = this._events[evt];
refreshMetrics();   setInterval(refreshMetrics.bind(this), REFRESH_RATE); }
exception = _error;                 throw "Error executing error handler function callback: " + exception;               }
RouteController.prototype.init = function (options) {   RouteController.__super__.init.apply(this, arguments);   this._computation = null;
var attributes = {}             , foreignIdentifier = association.foreignIdentifier             , options = additionalAttributes;           var sourceKeys = Object.keys(association.source.primaryKeys);
app.simulation.run(false)         var link = app.data.links[$(this).parents('.link').data('id')]         link.disabled = !link.disabled;
Connection.prototype.setCredentials = function(username, password) {   this.credentials = new Object();   this.credentials.username = username;
constructor(props) {         this.className = 'oAuthForm';         this.stores = {
});     var json = new Object();     json.params = list;     console.log("json: " + JSON.stringify(json));
this.extraVariables_ = new Object(null);   }
if (player.paused) {        $(this).parent().find('.bigplay').addClass('playing');        player.play();
function mousewheel() {     if (!translate0) translate0 = location(d3.mouse(this));     scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * scale);
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored.",         arguments.callee.name, Array.slice(arguments)));   },
paths = pathHelper.simplifyPaths(paths);         for (var i in paths) {             var path = paths[i];
for (var i in options) {                 $currentEl.find('[data-key="' + i + '"]').html(options[i]);             }
this.box0('126:0', side - ( 2 + (i * 2) ), 1, side - ( 2 + ( i * 2) ))       .fwd()
, Marionette = require('marionette')     , RecordsTableRowView = require('views/records/records_table_row_view')     , InfiniteScroll = require('views/mixins/infinite_scroll');
,   'color': '#FFEB3B'                 ,   'padding':'20px'                 ,   'line-height':'110px'                 ,   'background-color':'#212121;'                 }
var n = 15           , c = 1           , ids = []
function StringBuilder(value)  {      this.strings = new Array();      this.append(value);
throw 'User canceled authorization';       }
this.useRefTransfMatrix_loc = undefined;   this.useTexture_loc = undefined;   this.invertNormals_loc  = undefined;  };
var combinedTableAttributes = {}         , sourceKeyType = this.source.rawAttributes[this.source.primaryKeyAttribute].type         , targetKeyType = this.target.rawAttributes[this.target.primaryKeyAttribute].type
$.ajax({      url: $(this).attr('href'),      context: document.body,
this.trigger('sortChange');                 this.settings.onSortChange();             }, this));         },
$(editor).bind('kmlLoaded', function(event, original_event, kmlObject){                         console.log(this, this.el, kmlObject);                         callback(this, this.el, kmlObject)                     });
}                         }, this));                         angular.copy(leafletBoundsHelpers.createBoundsFromArray([
Handlebars.registerHelper('each', function(path, options) {   options.hash.contentBinding = SC.Binding.from('*'+path, this);   options.hash.contentBinding = SC.Binding.from('*'+path, this).oneWay();   options.hash.preserveContext = true;
} else if (p[0] === '!') {      throw "didn't handle special property " + p;     } else if (p === "prototype") {
opt_step = 1;   }   else if(arguments.length === 3 && arguments[2] === 0) {     throw new RangeError("opt_step can't be 0");
}).call(this);
click: Y.bind(function() {                             var libraries = this.scripts ? this.scripts.get('val') : {};                             this.currentScriptName = prompt('Enter a name:');
_RenderContext.ToArray = function (args) {      var arr = new Array();      for (var i in args)
bw.displayIngameMessage('it\'s much more sophisticated!', 60000)   var chatStream = bw.chatHandler.grabExclusiveStream()     , remote = repl.start({ input: chatStream, output: chatStream, terminal: false })   chatStream.setMessageTimeout(60000)
blogObserver: observer('blog.isResetRequested', function() {         const blog = this.get('blog');
events.forEach((event) => {       emitter.addListener(event, function() {         const args = Array.prototype.slice.call(arguments);         args.unshift(event);
} else {             return yield* UserBase.prototype.save.apply(this, arguments);         }
render() {         let pads = []             , popupClass = ''         if (this.state.values.length > 1) {
formatic.form.method('component', function (field, props) {     field = field || this.run(this.root, this.data);     var view = views[field.type];
var sum = 0.0;       for (var i in scores) {         sum += scores[i];
$(this).remove();   }
this.instance.listen();         Handsontable.editors.TextEditor.prototype.focus.apply(this, arguments);     };
function stepHandler () {             util.batch.apply(util, [beforeHandlers].concat(handlerArgs));
, GeoPackage = require('../../lib/geoPackage')   , GeoPackageAPI = require('../../.')   , FeatureColumn = require('../../lib/features/user/featureColumn')
var clean = new Array();       for (var i = 0; i < cResults.length; i++) {
base: 'SauceLabs'   , browserName: 'safari'   , platform: 'Mac 10.6'   , version: '5' };
rpcHandler.unregisterActiveLoader(loaderId);         done.apply(null, arguments);       });
options = _.extend({reindex: true}, options || {});         if (options.reindex) {           this.shadowCollection.reset(collection.models);         }       });
, types = require ('./lib/types')   , sourceExtract = require ('./lib/sourceExtract')   , gruntUtil = require ('./lib/gruntUtil');
, multiply: function(matrix) {       return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))
}   newmoov = concat.apply(null, newmoov);   newmoov.set(itobe4(newmoov.length), 0);
if (!this.options.prefix) {    throw 'Prefix missing for formset.';   }
,     function _putIntegrationRequest(arn, callback) {
if (!userConfigExists) {     throw 'Must contain md-seed-config.js at the project root. run `md-seed init` to create the config file.'   }
var ps=method.head.params ? method.head.params.params : null;         if (ps && !ps.forEach) throw method+" is not array ";         if (ps) res=res.concat(ps);
render: function(){     var self = this       , timeListID = this._id('_time_listbox')       , timeOptID  = this._id('_time_option')       , dateListID = this._id('_cal')
if (pathId_ == null) {               throw "Missing path input parameter.";             }
this.actionsMatching = [];     });
, 'reduceRight'       , 'sort'       , 'indexOf'     ]
exception = _error;             throw "openObserverNamespaceState failure: " + exception;           }
console.error(dist);       throw 'Enumerate can only be used with distributions that have finite support.';     }
var opts = _.extend({}, assemble.options, options);              var root = path.resolve(opts.root || this.dest.root || assemble.get('root'));
var sign = isRequire ? 1 : -1;   _.each(_.flatten(arguments), function (f) {     if (f instanceof Logic.NotFormula) {
$('.confirm-button').on('click', function(event) {   var $this = $(this);   var isThoughAjax = $this.data('ajax');
var col = new Object();     col.title =  'Mode';     col.readOnly = true;
commandMenu.style.fontWeight = 'normal';     commandMenu.style.border = '1px solid ' + this.location;     commandMenu.style.backgroundColor = '#efefef';
console.log('test/Widget:test', arguments);                      return xhr();
var morphs = new Array(morph_ixs.length);     for (var i in morph_ixs) {       morphs[i] = dom.createMorphAt(dom.childAt(fragment, [morph_ixs[i]]), 0);
this.init = function(element, attrs)         {
function normalize(schema, options) {     options = _.pick.apply(_, [options].concat([         'component',
const props = { visible, setVisible, togglePopover };      const inner = this.props.children(props);   if (isFragment(inner)) {
, RE_JS_COMMENT_LINES = /^\s*(?:\/\/|#).+$/gm  , RE_CSS_COMMENT_LINES = /((?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/))$/gm  , RE_JSON = /\.json$/;
if (this.syncBody) {       dom(this.$.body).observeNodes(function() {         if (!this.__lock) {           this.__lock = !0;
var env = {};       var progress = Helpers.newPullProgress(this);
Blockly.Variables.createVariableButtonHandler(this.workspace_, function(text) {         var variable = this.workspace_.getVariable(text, selectedValueType);         that.setValue(variable.getId());
, '')  const script = new vm.Script(stringScript, options)  script.runInNewContext(sandbox, options)  return sandbox.module.exports
unlinkDataSource(this.ds1, '_link2', this.pathTranslation2);  unlinkDataSource(this.ds2, '_link1', this.pathTranslation1);  this.isOn = false;
(function() {   var SimditorMarkdown,     __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },     __hasProp = {}.hasOwnProperty,
if (x === 0) {                 throw "Divide by Zero. Value:<" + x + ">.";             }
lazy_require(this, {   VM: ['azk/agent/vm'],
var contexts = context ? Array.prototype.slice.call(arguments, 1) : [],         currentState = get(this, 'currentState') || this;
router[method].should.be.type('function');         router[method]('/', function *() {});       });
id: id,                             component: this.component,                             time: typeof time != 'undefined' ? time : new Date().getTime()
{         throw "The only and except options can't be used together."     }
var row = $(this).closest("table").find("tr").index(this);     switchEditShareMemo($(this).closest("pre"),row);     return false;
$(document).bind('activateControls.templateItems', function(e, opt) {     var groupableItems = new Array();     $('a[rel=remove]').itemRemove({
seriesGroups[i].attr({         'series-name': this.data.series[i].name       }, Chartist.xmlNs.uri);
console.warn(discarded + ' \u5DF2\u7ECF\u88AB\u5E9F\u5F03\uFF0C\u8BF7\u4F7F\u7528' + hook);                 return fn2.apply(instance, arguments);             }
function handleInjectedCss(style, css) {   watch(css.watch, absolutePath => {     const file = path.relative(config.serve, absolutePath)         , notification = ui.notification('Injecting', file)     log.debug('Injecting style', css.path)
response = taskResponse;                   }.bind( this )                   );
TCPSocket.listen = TCPSocket.prototype.resume = TCPSocket.prototype.suspend = TCPSocket.prototype.upgradeToSecure = function() {         throw 'API not supported';     };
this.inst.animateTo(destPos, 0);
if (!opts.clearDepth.is_constant())             throw "clearDepth must be constant expression";         if (!opts.clearDepth.type.equals(Shade.Types.float_t))
this._destroyed = false;             this.actor.connect('destroy', Lang.bind(this, this._onDestroy));
, thumb_width: 90     , li_width: 90     , li_margin: 10
.textinput();  if ( $( this ).jqmData( "inset" ) ) {   wrapper.addClass( "ui-listview-filter-inset" );
},   resetLoaders: () => {     this.loaders = {};   },
ve.init.mw.ViewPageTarget.prototype.tearDownToolbar = function () {  this.toolbar.$bar.slideUp( 'fast', ve.bind( function () {   this.toolbar.destroy();   this.toolbar = null;
it('post /api/echo', function *() {     yield request.post('/api/echo')
function e() {             return null !== t && t.apply(this, arguments) || this         }
if (err) { callback(err); return; }           Array.prototype.slice.call(arguments, 1).forEach(function (markdown, i) {             articles[i].markdown = markdown;
.submit(function() {               var cmd = this.command.value; this.command.value = '';               $.get('./__debugger__', {cmd: cmd, frame: frameID}, function(data) {
if (inst = compileComponent(node, vm, scope)) {                     into = false
var expression = self.interpolateExpressionVariables(expression, options.scopedVars);                 query.expression = query.expression.concat(expression);
constructor() {         super();         this.isTop = !!super.constructor;       }
var data = ['foo',,'false'];         validate(data) .should.equal(false);
} length = f.length; f.length = function(){};
var self = this;     var server = new mongo.Server(options.host, options.port, options.options);
} catch (error) {     process.exit(1); }
if (!!currentSelected) {     currentSelected.classList.remove('selected-' + this.type);
return 'unavailable';       break;     case "AVAILABLE":       animate($('.state'), 'fade-in');       return 'available';
};       debugger;       token = increment();
configure: function (options) {    debugger;    return this;
(function ($, window, document, undefined) {     'use strict';
if (false && !this.configData.waitToReceiveRimaList){      WhoAmIService.getAll(function(whoAmIsFromServer){
exports.getTestDir = function () {     var testRE = /\/[^\/]+\.test\.js($|\?.*)/;     if (typeof document !== 'undefined' && document && document.getElementsByTagName) {
if (numTotal > numPassed + numFailed) {    var message = (numTotal - (numPassed + numFailed)) + " of " + numTotal + " tests skipped";    console.log(message);
case 'https:':     throw "SSL is not implemented.";     break;
if (req.user.companyId != app.companyId) {           respond(res, 403)           return; Stop         }
export const sendPayment = ({ publicKey, secretKey, sequence, destinationId, amount }) => {   debugger   let sourceKeys = StellarSdk.Keypair.fromSecret(secretKey)
return Cluster.resolveContainers(config, cluster, function(err, list) {     console.log(config); process.exit(0);     console.log(list); process.exit(0);     self.table.setContainers(list);
return VisitorOption.Remove;                         break;                 }
function abortReq() {       timedout=true;       xhr.abort();
function init(params) {             var fixFlag = [],                 pos;             if (params) {
})();  var ast_declaration = (function() {
} else {               window.setTimeout(function() {                 fireDOMContentLoaded();
} else {             new Vue({                 el: '#js-role',
case 'major':       return true;     break;     case 'minor':
process.exit(1);                 console.log(err);             }
return function(ctx, k) {          var r = statement(ctx);
ui.puzzle.setCanvas(pzprv3.getEL('divques'), 'canvas');  ui.puzzle.addSubCanvas();  ui.puzzle.setKeyEvents();
function onMouseDown( tracker, event ) {         var event = $.getEvent( event ),             delegate = THIS[ tracker.hash ],             propagate;
$(document).ready(function() {   var tabId = '' + new Date().getTime();
} else if (lyr.type == 'ESRI Clustered Feature Layer' && esriPluginInstalled) {         layerOptions = _.extend(options, layerParams);         if (layerOptions.createMarker) {
import Class from './Class' export class Action extends Class {   constructor(args) {     const [store, stores, allStores] = [args.store, args.stores, []];
const path = '/v1/ssoconfig'; const jwtUtil = require('../../../../utils/jwtUtil'); const ZERO = 0; const ONE = 1;
it('should merge properties', function(done){     app1.use(function *(ctx, next){       assert.equal(ctx.response.msg, 'hello');
Subscript,         Subscript,         InlineMath,
this.id = `${this.constructor.name}${ID--}`     app = app; }
function userIsServerAdmin(msg, config) {   debugger;   let permission = msg.member.permission.json;
} ; export function logEvent(eventName) {
console.error(error);       process.exit(1);     });
addSignature: function (req, cb) {   return setImmediate(cb, 'Second signature transaction Disabled');   library.schema.validate(req.body, schema.addSignature, function (err) {    if (err) {
throw new Error('The canvas element parent selector is required when calling `toCanvas`');             return;         }
if (isNaN(this._bias)){         console.log(this._error, this.Derivative(), this._learnRate);         process.exit();     }
} else {   debugger;
build = function(opts, foo, bar, baz, what) {   if (opts.debug) {
if (typeof rows === "undefined") rows = self._rows;         var item, index, item;         if (data !== null) {
TouchPoint = {     isSafari: !!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/),     clickTap: ('ontouchstart' in window ? 'touchstart' : 'click'),
}           console.log('*** va *** model.remove(db.remove)', id)           db.remove(id, doc._rev, function (err, response) {
const { Key, browser, ElementArrayFinder, ElementFinder, WebElement, by, element, $, $$, promise } = require('protractor'); const { code: htmlDnd } = require('html-dnd');
return config_values; }; function decodeConfigValue(proto_config_value) {
if (pos && pos.left) {         var lef = pos.left;         this.$('.geocoding-pane-content-wrapper')
getURLOfRemote(remote).then(function (remoteURL) {         var regexParseProjectName = new RegExp(".+[:/](.+\/.+)\.git");         var gitlabHost = URL.parse(gitlabURL).host;
feed.add('msg', 'hello there!', function (err, msg) {       if(err) throw err
settings:"$settings",    params:"$params",    params:"$params_view",    id:"$_id"
if(input.toLowerCase() == "ls") {       Cli.ls(id);     }
args[1] = this.locationMap[program.__uuid][location.__uuid];        } else {        }
fontSize: 28,     color: colors.fullWhite,     background: `linear-gradient(22.5deg, rgba(103, 58, 183, .75), ${colors.deepPurple500})`,
for (var i = 0; i < stack.length; i++) {      var line = stack[i]      if (re) {
var done    = function() {};     if (!success) success = function() {};     if (!error)   error   = function() {};
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
a(1,2,3,4)
textOverflow: 'ellipsis',     fontWeight: 'inherit',     fontSize: '16px'   },
model = require('./../model/ContainerListXmlModel'); class ListContainers extends StandardHandler {     constructor() {     }
if (!currentEscape && el === '"' && !lang) {        el = '\"';       }
var self = this;       var success = function(resultSet) {         self._log(resultSet);
const MOZ_HACK_REGEXP = /^moz([A-Z])/; const PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i; var tbEventDirectives = {};
} else {      var trueValue = can.compute(true)     }
$(e.element).find("tr").not(this.settings.exclude).each(function (i,o) {      debugger;      e.tableRows += "<tr>" + $(o).html() + "</tr>";
break;       default:         return false;       break;     }
}; exports.getCanActivateHook = getCanActivateHook;
}     const { path, relative_path, raw_content, content } = datafile;     const [directory, ...rest] = params.splat || [""];     const filename = getFilenameFromPath(path);
for (var key in views) {         var view = views[key];         var surfaces = map.getSurfaces();
$scope.checked = true; };
for (var i = 0, l = options.length; i < l; i++) {   if (scriptData = options[i].load.js) {    for (var j = 0, e = scriptData.length; j < e; j++) {
return   const     target = document.querySelector
html = html.replace(/([\w\-]+)=["'](\{[^\}]+\})["']/g, function(full, name, expr) {       if (BOOL_ATTR.indexOf(name.toLowerCase()) >= 0) name = '__' + name
insert++;       };
if (!oembetter.inDomain('infogr.am', parsed.hostname)) {       return setImmediate(callback);     }     var matches = url.match(/infogr\.am\/([^\?]+)/);     if (!matches) {
"hierarchy.html":[7,2], "index.html":[], "index.html":[0] };
case 0:           return 'granted'           break;         case 1:
var Util = require('T/util'); var Router = require('T/router'); var Q = require('T/ext/q');
/>);                 break;             case 'user':
var self = this         function checkDelete (d) {           if (d.length == null) {
testNode.childNodes[0].focus();         ko.utils.triggerEvent(testNode.childNodes[0], "focusin");         expect(model.myVal).toEqual(true);
if (false) {             console.error(err);           }
var _ = require("canal-js-utils/misc"); var log = require("canal-js-utils/log"); var { Subject, Observable } = require("canal-js-utils/rx");
export default class ComponentDragSource extends DragSource {   constructor(type, spec, props, getComponentRef) {     invariant(isString(type), 'Expected type to be a string.');
}     var import0, import1, styles_Fbnte, RenderType_Fbnte, RenderType_Fbnte_Host, FbnteNgFactory;     return {
import Ding from 'dings';  import { assign } from 'lodash';  import { apiSync } from 'utils'
initialize: function (args) {       $.extend(self, args);     }
} ; var XmlParser = (function () {
this._map.addControl(this.drawControls[key]);         }         for(var key in this.modifyControls) {             this._map.addControl(this.modifyControls[key]);
return buildParams('', a).join('&').replace(/%20/g, '+'); };
return data   }   async getDestinationsType(local, type) {     let find = {       local,
var jscriptVersion
this.listeners.handleClick = e => {       return;       const sizeRatio = Math.pow(this.camera.getState().ratio, 0.5);       const quadNodes = getQuadNodes(e.x, e.y);
return font => {         debugger         if (!fonts[font.id]) {
{ buf += " " + escHtml(pname) + '=""'; }      else if (val === false) {}      else if (val != null)
Promise.all(promises).then(function(results) {         console.log(results);         for(var i = 0; i < array_size; i++) {
const getTextBlockRegExp = () => /\\text\{([^\}]*)\}/g;
return ((_.isTypeOf (Error, what) ? (what && what.stack) : what) || '').hash },  printError: function (e) { var stackEntries = CallStack.fromError (e),            readSource = (e.remote ? Panic.widget.readRemoteSource : _.readSource)   return [
if (options.contentType === 'multipart\/form-data') {           xhr.setRequestHeader('Content-Type', `multipart\/form-data; boundary=${boundary}`);         } else {
onNewRecordClick: (creds, apiName) => {       dispatch(actions.fetchCreateDefaults(creds, apiName))     },     onCloneClick: (creds, id) => {       dispatch(actions.fetchCloneDefaults(creds, id))     },     onDeleteClick: (creds, id) => {
var request = require('supertest'); require = require('really-need'); var should = require('chai').should();
if ( context ) {    var ret = seed ?     { expr: parts.pop(), set: makeArray(seed) } :
return promise;  };
settings.headers['Content-Length'] = options.params.length;     };
fs = require('fs'); var fileCache = {}; var dirCache = {}; var tagsCache;
expect(appcache).to.have.property('off');     expect(appcache).to.have.property('abortUpdate');     expect(appcache).to.have.property('swapCache');   });
for (var i = 0, j = tokens.length; i < j; i++) {       if (current == null) debugger        var t = tokens[i];
return 'http:   }   if (!!navigator.platform.match(/^Win/i)) {     return 'http:
this.search = new SearchBox(this);   this.search.element.style.backgroundColor = Editor.theme.barColor;;   this.search.setOnChange(function()
import { BaseCriteria } from './BaseCriteria'; import { _ } from 'meteor/underscore'; export class MaxTargetPerOrganCriteria extends BaseCriteria {
var ret = new Promise(INTERNAL);     ret._propagateFrom(this, PROPAGATE_TRACE | PROPAGATE_BIND);     ret._follow(this);
if (proxy && url.isType(PROXY_TYPE)) {       console.log(req.url.replace(model.proxyPrefix, ''))       proxy.web(req, res, {
<td>{currencySign + numeral(amount).format('0,0.00')}</td>       <td><IoIosCloseCircleOutline color="red" size={18} style={{ cursor: 'pointer' }} onClick={() => alert(123)} /></td>     </tr>
actionObjects.push(currentAction);       };
debug.drawEarth = !debug.drawEarth; hit = true; break;                      break;
throw new Error(_const.pluginInitFnMissing);    };
this.init();     };     LineMappings.prototype = Object.create(SourceMappings.prototype);
case "200403.11":                 $p.com.alert($p.locale.exception, "warning");                 return false;                 break;             case "200403.13":
var path = path.pathname.substring(1);     var requestPaths = [path];
if ( match = hostname.match(/^http(s)?:\/\         this.set('secure', ((match[1]||'').toLowerCase() === 's'));
}     if (s.params.onDestroy) s.params.onDestroy();     if (deleteInstance !== false) s = null;
var $el = this.$el;     var title             = cdb.core.sanitize.html(this.options.title);     var description       = cdb.core.sanitize.html(this.options.description);     var clean_description = this._stripHTML(this.options.description);
}, timeout);   };
exports.name = '\/roll'; exports.hidden = false;
let currentUserId; Tracker.autorun(()=> {   if (!!currentUserId) {       roomStream.stop(currentUserId);
var startThumbDrag = function() {                         mousePrevX = event.pageX || event.clientX || layerX || event.screenX;                         savedVal = selValue;
import configIos from './config-ios'; const { userAgent } = window.navigator; appConfig.beta = true;
process.exit(1);     return;   }
this.combYZmax = commonMax(y, z); debugger;
if (typeof console === "undefined") { console = { log: print }; } var i, j;
const matches = /^\${([^"]*)}/.exec(location);   return !!matches     ? process.env[matches[1]] + location.replace(matches[0], '')
'As of': 'As of',     'Received': 'Received',     'Paid': 'Paid',     'Saved': 'Saved',     'For this search': 'For this search',
}, {       requires:['base','node','../../../pub/utils/global','../../../pub/utils/svgelement','../../../pub/views/infos/infos','../../../pub/models/eventtype','../../../pub/views/line/core',,'../../../pub/views/layouts/style1/main'       ]
const appliedClassName = className || 'hovering';     const includeClones = !!!excludeClones;     const includeChildren = restriction !== 'directParentsOnly';
$scope.saveCalendar = function() {             console.log($scope.calendar);             return;    $scope.calendar.ingaSave($scope.back);      };
},             presenterType: "VerticalTablePresenter",             modelViewName: "project_statistics",         },
goog.module.ModuleLoader.prototype.codePostfix_ = null;
return this.finishNode(node, "FunctionTypeAnnotation");       }     case tt.parenL:       this.next();
loader.fire('provide', mod);  };
(function constructor(args) {
class Text extends TelegramMessage {   constructor(text) {     if (!text || typeof text !== 'string')
QUnit.test("Pips: Count, stepped", function (assert) {     expect(0);      var slider = test_slider({
}     context.trackVariablesChange(prop, vars, valueGenerator);;   }
let el = this.returnFocus || this.return_focus || document.activeElement || null
function setAttr(node, name, val, asProp, initial) {  var el = node.el;
var minPassLength;     var emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
getID(instance) {     return (!!this._collection.findOne({ _id: instance })) ? instance : this.findIdBySlug(instance);   }
throw new Error('Song constructor called with invalid backend: ' + song.backendName);             return null;         }
appliedFilters = this.getUpdatedAppliedFilters(payload, appliedFilters);       console.log('>>><>', payload, appliedFilters);     });
let full_accounts = {}          for( var account in next_props.full_accounts )             full_accounts[account] = ChainStore.getAccount( next_props.full_accounts[account], this.update, true )
return this._wrop("add", [obj], function (e) {                 var keyPath = req.source.keyPath;                 if (keyPath) obj[keyPath] = req.result;             });
import React from 'react' import SectionLayout from '../../SectionLayout'
if(this.target) {     if(newMedia || true) {       this.killPopcorn();
setProperties(o, p);           } while (p = gPO(p));           return o;
return state;   }; };
token: "0x000000000000000000000000000000000000000e",     },     assertions: (err, accountTransferHistory) => {       expect(err).toBeFalsy();       expect(accountTransferHistory).toEqual([]);     },   });
import Box from 'reakit/Box'; import Table from 'reakit/Table';
} Notebook = Class.extend(Notebook, File, "ddr:Notebook"); module.exports.Notebook = Notebook;
},             resample: function(oldMatrix, columnsNumber) {                 var columnsNumber = this.width;                 var newMatrix = [];
debugger       list.children.forEach(c => {
if (opt.options.list) {     org.kvms.get({}, function(e, result){     });
return memberName in actual;             } catch (e) { }             return false;
var ast = new AST();   var ast = new AST();
import { ArgumentException } from "./ArgumentException"; import __extendsImport from "../../extends"; const __extends = __extendsImport; const NAME = 'ArgumentNullException';
getVideoMaxBitrate() {     console.warn("getVideoMaxBitrate is deprecated. Use getMaxVideoBitrate instead");     return this.getMaxVideoBitrate();
setTimeout(function() {     throw(customError);     error = customError = listener = null;    }, 10);   };
return weekNum; }; function isLeapYear(year) {
var node = window.contextVars.node;             var pageMeta = _get(window, 'contextVars.analyticsMeta.pageMeta', {});             var pageMeta = _get(window, 'contextVars.analyticsMeta.pageMeta', {});              return {
let match = /<!--StartFragment\-->(.*)<!--EndFragment-->/.exec(html)       if (match) {
x2: 0,      x2: 0     },
context.log(err);        throw err;        context.done();     });
var routeStripper = /^[#\/]/;
this.input = doc.getElementById("wmd-input" + postfix);      };
this._load_sequence();   function cache_transaction(transaction) {     var transaction = TransactionManager.normalize_transaction(transaction);     var sequence = transaction.tx_json.Sequence;
getAlgorithmByOID,   getAlgorithmParameters,   getCrypto,
return value + ' ' + arg;                 break;             default:
let allImg = true;             for (let i = 0, file; file = files[i]; i++) {                 if (file.type.indexOf('image/') !== 0) {
var Sleeping = require('../core/Sleeping'); var Render = require('../render/Render'); var Common = require('../core/Common');
return ((Math.abs(value) < 10) ? "0" : "") + Math.abs(value); }; describe('FeatureInfoSection', function() {
this.current = this.items[n];             console.log(n);             console.log(this.current);       this.render();
}); EG.Model.reopen({
var tip = $("#Tip");     editor.autocomplete({
this.oDate = this.createDate(Date, aArgs);    this.sCalendarType = sap.ui.core.CalendarType.Buddhist;   }
ve.ce.Surface.prototype.onCutCopy = function( e ) {  console.log('copying');  var _this = this,
ok(true, 'before play deferred invoked');         setTimeout(dojo.hitch(js, js.stop), 3000);     }).callAfter(function(completed) {
_afterFocus : function (_, element) {    var element = Aria.$window.document.getElementsByTagName("input")[0];    var active = Aria.$window.document.activeElement;
break;                     case 'info':                         console.log('info');                         break;
idleQueue._iC.delete(promise); };
beforeEach(module('kibana'));       beforeEach(inject(function (Private) {         metricAggs = Private(require('ui/agg_types/index')).byType.metrics;
var named = !!program.named var dir = path.resolve(process.cwd(), program.args[0]) || process.cwd()  var pkg = path.resolve(dir, 'package.json') var recursive = !!program.recursive
try { let a = !define && (window.linkifyElement = linkifyElement); } catch (e) {}
}); }); describe('atomic using redis (callback)', function () {   var limitToOne;   beforeEach(function (done) {
} = node;          debugger;          if (isTryTo(id))
function change(previous) {         var difference = iD.Difference(previous, history.graph());         dispatch.change(difference);
});  return resultEntities;   return wikidataapi.getEntityPropertyClaims(resultEntities,language).then(function(responses2){
var expect = require('chai').expect;  var _ = require('lodash');    var tree = require("../tree-surgeon.js");
case 2:                  for (var t2 = 0; t2 < maxWidth; t2++) {                   row[offsetT + t2] ^= symbolRow[t2];
uksort($data, function (key1, key2){ return (key1 === key2 ? 0 : (key1 > key2 ? 1 : -1)); })     $result = $data     var expected = {a: 'orange', b: 'banana', c: 'apple', d: 'lemon'}
} else {                 var mark = {                                 "type": "line",
if (color.length === 4) {         function r (x) {return x.toUpperCase() + x.toUpperCase()}         return '#' + r(color.charAt(1)) + r(color.charAt(2)) + r(color.charAt(3));
.replace(/([^\/])(\/(?!\*|\/)(\\\/|.)+?\/[gim]{0,3})/g, function(match, $1, $2){                 primatives[primIndex] = $2;
}   } while (node = node.parentElement);
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-04\/door_key_8-1334258086.swf",  admin_props : false,
mc = PrimeFaces.util.MessageContext,             locale = PrimeFaces.locales[PrimeFaces.settings.locale];
}   process.nextTick(wrap(done)); };
delete cache_[ _key.toString() ];        console.log( 'String [%s] removed from cached unique strings', _key);     }
var npId1 var npId2 const NUMBER_PROTOCOLS = 4
return;                  var projectRoot = ProjectManager.getProjectRoot(),             filesToOpen = [],
};     return fetch(config.apiUrl + '/users/' + user.id, requestOptions).then(handleResponse);; }
lastIndex = i;         debugger;         return;
}catch(e){             console.log(e);    return false;
this.socket.onerror = function (ev) {                 console.log('onError');                 self.onErrorHandler(ev);
test: /\.svg$/,         loader: 'svg-sprite-loader',         loader: 'happypack/loader?id=happy-svg',         include: [resolve('src/assets/icons'), resolve('src/assets/images')]
var nodeBuffer = [];                   for (var i = 0, li = replay.nodeBuffer.length; i < li; i++) {                 var tile = replay.nodeBuffer[i];                 nodeBuffer.push(tile);
while (ch = stream.next()) {    if (ch == '"' || ch == "'") {
if (args[0].match(/node[\.exe]*$/)) {     args = _.drop(args, 2);
const REGEX_SPACE_S_FILTER = /([(,|])[\s]+/g; const REGEX_PROP_FILTER = /\.([a-zA-Z_$#][^\s.\/,[\]()'"|#]*)/g; const REGEX_ARRPROP_FILTER = /([^\s([,])(\[)/g;
item.updateConnectedEnds = function (vertex0,vertex1) {   debugger;   let updated = [0,0];
var a = 0;      data = data.splice(0, 25);      for (var k = data.length; k < 25; k++) {       data.unshift(0);
this.syncPoint = 0;   };
if ( expect === false )           {             window.location.href = window.location.href;           }
value: 'SNAPPY',                         description: message.msg('workflow.common.compress.snappy.desc')                     },
if (cap = this.rules.html.exec(src)) {       src = src.substring(cap[0].length);
import {applyMiddleware, combineReducers, compose, createStore} from "redux"; import promiseMiddleware from "redux-promise-middleware";
fs.readFile(generatedFile, function (err, data) {       debugger;       var expected = fs.readFileSync(expectedFile);
}); };; module.exports = ObjectLinkToMultimediaHasTextTranscript;
_value = parseInt(_value, 10);                 if (_value === NaN) {                     _value = null;
getConfig:getConfig,             setDataCSV:setDataCSV,             on:on,
return "Parse tree: " + parseTree.toString(type);     break;    case "dependencies":
templateElem.spread[name] = true;     debugger;     return;
CardTitle,   CardSubtitle,   CardBody,
Debugger.prototype.addProvider = function (type, obj) {   debugger;   this.debugger.addProvider(type, obj)
return this;     };
&& this.authorizer.isPermittedAll(permissions);  } };
idx = list.length;     };     if( !list[ idx ] ){
view : function (ctrl) {         debugger;         return m('.fb-project-organizer#projectOrganizer', ctrl.tb);
if (!unallowedCharacters) {     unallowedCharacters = /[\/@\s\+%:.]/;   }
sFormatted  = sFormatted.replace( this.Regex.BlocksOpener, '\n$&' ) ; ;  sFormatted  = sFormatted.replace( this.Regex.BlocksCloser, '$&\n' ) ;
+', gravityLaw: '+this.gravityLaw.toStringShort()         + NewtonsCradleApp.superClass_.toString.call(this);   }; };
this.orig_prefset = null;     debugger;     if (usesDeck) {
var node = nodeView.node;   var typeDescr = node.constructor.description;
steal('can/model',function(){
if (false && $$logging.get('screenshots').enabled) {             var filename = $$logging.get('screenshots').filename.replace('{date}', moment().format('YYYYMMDDhhmmss'));
if (nodes.filter('table').length > 0) {         rows = nodes.filter('table').find('tr');         var pos = exports.selectedPos();
console.log(contract.tally);   debugger;
class Polling extends EventEmitter {   constructor (options) {     this._options = options
this.availableZoomsForFetch = [];             for (var i = 0, len = (arrBefore.length + arrAfter.length); i < len; i++) {                 if ((i % 2 && arrBefore.length > 0) || arrAfter.length == 0)
wipController.$inject = ['$scope'];         function wipController($scope) {
});   for (field in ev) {     evtJSON[field] = serializeEventVal(queueIndex, ev[field])
return deferred.promise; }; module.exports = {
'Decrediton', 'rpc.cert');     } else {         var certPath = path.join(process.env.HOME, '.decrediton', 'rpc.cert');     }
blockGroup.blocks.push(block);             };             blockGroups.forEach(function (blockGroup) {
function storeCurrentJSBuffer() {         console.log("storeCurrentJSBuffer");         if (CodeEditorIntegration.setDirty) {
function init(){   heroContentFade() };
var _modules = this.modules;       for (module in _modules) {         if (_modules.hasOwnProperty(module)) {
for (var j in Sk.builtin.range(start, l,-1).v){             a.setitem(p, a.getitem(p-1));
this.keyboard.terminal.scrollPageUp();   return hterm.Keyboard.KeyActions.CANCEL; };
var innerResponse = normalizeRequest(request_);         if (innerRequest.error) {             errors.unshift(innerRequest.error);             break;
]).then(function(data){       result = data[0].rows       pkeys = data[1].rows.map(function(r){         return r.attname
var bodyParams = request.data;   if(bodyParams.length!==0) {
Terms = require('./methods/out')(Terms); Terms = require('./methods/replace')(Terms); Terms = require('./methods/split')(Terms); Terms = require('./methods/transform')(Terms); Terms = require('./methods/lump')(Terms); module.exports = Terms;
});   config.name = config.name;   if (existingDatabase) return;
return !(countryCode === "GB" && !ukPostcode.fromString(postcode).isComplete());   };
view.getUint8(2)!=70||   view.getUint8(3)!=3){   throw new Error()    return null;  }
var deferred = $q.defer();         chrome.runtime.sendMessage({action: 'copy', params: [value]}, function () {             deferred.resolve();
corsPreflightReferrer("Referrer policy: unsafe-url", corsUrl, "unsafe-url", "myreferrer", new URL("myreferrer", location).toString()); done();
componentDidMount() {         debugger;         this.updateOnOrDirty(this.props.projectStudios, this.props.myStudios);     }
log.debug('正在检查更新...');     pkgJson('feflow-cli', 'latest', registry).then(json => {       const version = pkg.version;
import { Wrapper } from './styled'; import { contextDB } from '../contexts/db';
} }; var InstToProfile = true;
} else {       var searchEngine = require('./searchT.js')       searchEngine.latest(function (data) {
Port.prototype.isEqualTo = function(port) {     if ( ! port instanceof Port) {         return false;
tyrant.putcat('key1', '+Second Value');   tyrant.get('key1').addCallback(function(value) {puts('Result : '+value);}).addErrback(function(error) {puts('Error : '+error);}); }
var is_file = output.indexOf(".js", Math.max(0, output.length - 3)) > 0;   if (forceUpdate) {   } else if (is_file) {     stream = stream.pipe(newer({ dest: osPath.join(DEST, output) }));
function visitNode(path) {         if (path in deps.written) {
_setSessionVariable: function( variable, value ) {             this.cookies[variable] = value;         },
(function(x) {     for (var argsKey in arguments) { }
if (typeof window.define === 'undefined') window.define = Famono.define; if (typeof window.require === 'unrequired') window.require = Famono.require;
$listpeopleinnodePeopleContainer.html($.TemplateRenderer(listpeopleinnodePeopleTemplate, results));         }else{                      }
import StatusBar from './status-bar' import HubSidebar from './hub-sidebar'
describe("Numeric Analysis", function () {     var fft = fidola.numeric.fft,         ifft = fidola.numeric.ifft,
while (true) {     hillclimb({
var spec = this._getHTMLSpec();       if (!view.getName() in spec) {         throw new Error("invalid tag");
var respond = function(req, res) {     debugger;     _sender.produce({topic: req.$inf.respondTo.topic, partition: req.$inf.respondTo.partition}, JSON.stringify({response: res, $inf: {type: 'response'}}), function(err) {
case MediaPlayer.rules.BaseRulesCollection.prototype.ABANDON_FRAGMENT_RULES:                     return Q.when(adandonFragmentRules);                 default:
let openExternal = (url) => {   console.log(url)   var shell = window.require('electron').shell;
if(goog.isString(route))         route = new RegExp('^' + goog.string.regExpEscape(route).replace(/:\w+/g, '(\w+)').replace(/\*\w+/g, '(.*?)') + '$');     this.routes_.push({route: route, callback: fn});
log('\n' + consts.MODULE_INFO);   log(data.msg + '\n');   return;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-04\/wavy_gravy-1334214775.swf",  admin_props : false,
}     case 'mount':       entity = nearestEntity("object");
let expiresAt = JSON.parse(localStorage.getItem('expires_at'));       return new Date().getTime() < expiresAt;     }
app.use(function *(ctx, next){
const MP_REGEX = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,}$/g const URL_REGEX = /[-a-zA-Z0-9@:%_\+.~#?& const RESPONSES = {
app.controller('EditController', function(Session, $state, $interval, $scope, $http) {  $rootScope.$emit('titleChange', "Edit")     var f = function() {
domClass.add(next[0], type);                 next[0].offsetWidth = next[0].offsetWidth;
var getCanvasByIndex = function(index) {       var canvasId = viewerState.canvases[index]['@id'];       return self.canvasObjects[canvasId];     };
})                                                .catch(softThrow);                                       break;
this.setState(Object.assign({}, this.state, {       innerWidth: window.innerWidth,       innerWidth: window.innerWidth     }))
builder.scale({maxWidthPercent: maxWidth, unit: unit});   } catch(e) {   } }
if (!data.length) {           var err = new Error('The list is empty.')           callback(err)
if(typeof since === 'funciton' && since.modelName) {     since = -1;     targetModel = since;
import Story from '@lskjs/dev/Story'; import DefaultSearchWrapper from '../DefaultSearchWrapper'; const action = name  => (...args)=> console.log('[' + name + ']', ...args)
res.loadAssets(() => {     const game = new Game();
ME: `${API}/users/@me`,  ME: `${API}/users/@me/channels`,  ME_SERVER: (serverID) => `${Endpoints.ME}/guilds/${serverID}`,
fs.ensureDirSync(root + "/static"); process.exit();
j = i;                 } else {                     j = j;                 }
}         while (true) {             visited.push(el);
generateRelations.track((data) => {                 debugger;                 result.addNetwork(data.nodes, data.edges, {groups: data.groups});
keyPressHandler(ev);  } else if ( ev.name === "KeyRelease" ) {  }
import React from 'react' import { createStore } from 'redux' import defaultStorageAdapter from 'resolve-storage-lite' import defaultBusAdapter from 'resolve-bus-memory'
onXHRDone: function(xhr) {    console.log('xhr done! bytesRead: ' + self.bytesRead + ' bytesBuffered: ' + self.bytesBuffered);    doneBuffering = true;
if (templateResult instanceof goog.soy.data.SanitizedContent) {     templateResult =          (templateResult);     var ContentKind = goog.soy.data.SanitizedContentKind;
else {                                              }
_createCookieFromData(data) {     var target = SDK.targetManager.targets(SDK.Target.Capability.Network)[0];     var cookie = new SDK.Cookie(target, data.name, data.value, null);     cookie.addAttribute('domain', data.domain);
},   'Click on choose layout': function(client) {     var PO = client.page.chooseLayout();
var stateManager;   if (this.objects.hasOwnProperty(id)) {    throw(new Error("Cannot add duplicate object ID '"+id+"' to state list."));    if (callback) {     callback(false);
c = new MathLib.Complex(2, 5),    c = new MathLib.Complex(2, 5),    d = new MathLib.Complex(3, 6),
if(this.options.time_format = '24'){     times = options.times || ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"];
var loadSubModules = function (parentModuleInfo, subModulesDescArray, cb, customModules, recursionCheck) {         var subModulesDescArrayLength = subModulesDescArray.length;
])  })(jsPDF, typeof self !== "undefined" && self || typeof global !== "undefined" && global || typeof window !== "undefined" && window || (Function ("return this"))());
import React from 'react' import {blueA400, grey500, grey600, blueA100, white } from 'material-ui/styles/colors' import sizeMe from 'react-sizeme'
if( typeof callbackFunction === 'function' ){             callbackFunction.call( thisElem, url );          }
import ButtonIcon from 'ui/components/buttons/flavors/icon/index.react'; import PickList from 'ui/components/picklists/index.react'; import { prefix as pf } from 'app_modules/ui/util/component';
"it throws an ImmutabilityError when you try to call its shift() method": {     predicate: function(array, args, shiftArg) {
Explorer.currentHighlight.style.backgroundColor = 'rgba(0,0,0,0)';       default:       }
click = false;     };
return [       mwcMixin, mwcRouter, AppState     ];
if (typeof console === "undefined") { console = { log: print }; } console.log (typeof __undefined__);
}                     let maxReturned =                         Number(this.nodeConfig.output_results_count) || 1;
import ChartsContainer from '../../../components/charts-container'; import ContentHeader from '../../../components/content-header'; import ContentSection from '../../../components/content-section'; import Fills from '../../fills/components/fills';
specStarted: function(result) {     console.log(result);   },   specDone: function(result) {
debugger;       this.out.unlinkSync(outputRelative);
import React, { Component } from 'react' import PropTypes from 'prop-types'
var input = ".test1 { background: url(\"test1.jpeg\"); }" +         ".test2 { background-image: url(\'test2.png\'); }";     var output = ".test1 { background: url(\"test1.jpeg\"); }" +
shortcuts.forEach(shortcutUrl)     debugger     Mousetrap.bind('shift+w', openApp);
while (test = me.tests[i++]) {         if (test.cycles) {
}     window.location.assign(`${window.location.protocol}   };
} catch (err) {       console.error(err);       return msg.say(`**${user.username}**, you failed to catch a pokemon :cry:`);
var LoaderModule = (function() {   var modules = ['game', 'cookiedata', 'controls'];
}       var x = depth*horizontalSpacing;       var y = ySum/block._outConnections.length;     }
return result + "</div>";    console.log(arguments);   },
const c = h;         for (const i = 0, len = order.length; i < len; ++i)             c = hamt.remove(keys[order[i]], c);
const ele = (arr, i) => arr[i % arr.length]; const frame = i => ele(styles, i)(ele(spinners[ele(keys, i % step === 0 ? index++ : index)].frames, i));;
setTimeout(function(){             casper.evaluate(function(){                 localStorage.clear();             });         }, 3000);
handleUrl(url.href, reply);   }; };
import React, {Component, PropTypes} from 'react'
console.info.restore();             console.log.restore();             console.warn.restore();         });
} else {      var obj = _.assign(data, file.data)      return obj     }
export const earnExp = (exp) => {  type: 'EARN_EXP',  exp
return result;   };
}          var i = m_opCache.length - 1;          while (i >= 0) {
var data = {};     debugger;     $.each(schema.pages, function(i, page) {
viewOpenRoomScreenAnimation() {     return new Promise((resolve, reject) => {       this.communication.chooseClosestServer().then(() => {
config.pkg = loadJSON('package.json', {cwd: config.cwd});   if(false && config.pkg.ngfactory) {     log('Using ng-factory config from %s', chalk.magenta(tildifyCwd('package.json', {cwd: config.cwd})));
throw Error('Did you pass in an Element?'); };
} else {         if (traverse === document ||           (shadowRootAvailable && (traverse instanceof window.ShadowRoot)) ||           (parent && parent.__redom_mounted)
patterns: [                         {                             match: /var version = '[\.0-9]*';/g,                             replacement: "var version = '" + iopackage.common.version + "';"
});   });      localStorage["missingSharingLink"] = true;   version = "v6";
function getTextSizeForWidth(text, font, width, minFontPx, maxFontPx) {         debugger;         var s = font.replace("?", maxFontPx);
function process(context) {  if(this.debugger) debugger;  return { message : this.fail };
const users = rhf.getValues({ nest: true }).users;   debugger;   const hasDuplicate = ({ lastname }, index) => {
case FV_WORD_UPDATE_ERROR:       case FV_WORD_UPDATE_ERROR:       case DISMISS_ERROR:
this.lastHash = hash;       window.localStorage.setItem('bkp.next.piskel', this.piskelController.serialize());       window.localStorage.setItem('bkp.next.info', JSON.stringify(info));     }
case "developer":       return "icon-file";     case "developer":       return "icon-code";
handleMessage(uid, obj) {     msg = obj.body.toLocaleLowerCase();     var command = msg.split(" ")[0];     if (this.cmdPrefix) command = command.replace(this.cmdPrefix, "");
server.listen(options.port, function(err){                  if(!!err){ return callback(err); }
}; pagespeed.LocalStorageCache.prototype.getData = pagespeed.LocalStorageCache.prototype.getData; pagespeed.LocalStorageCache.prototype.replaceLastScript = function(a) {
} catch (e) {         throw e         this.setErrorMessage(e.message);       }
FilterActions.saveSession();       }catch(e){};     });
throw "Unrecognized mnemonic language"   return  }
</FormField>           </div>           <pre><code className="html hljs xml">{"<FormField label=\"Item 1\" htmlFor=\"item1\" error=\"error text\">\n  <input id=\"\{id\}\" type=\"text\"/>\n</FormField>"}</code></pre>
exports.default = Person; ;
cell = start && domUtils.findParentByTagName(start, ["td", "th"], true);              if (!!cell) {                  return -1;
})(jQuery, document);
}  RocketChat.authz.addUserRoles(owner._id, ['owner'], room._id);  if (type === 'c') {
$(function(){   var width = window.innerWidth;   var height = window.innerHeight;   var doc = $(document);
var processOptions = (function(config) {   if (arguments.length < 1)     var config = undefined;      var options = extractOptions(config);
arr = new Uint32Array(arrayBuffer, offset, length);      case 'FLOAT':          arr = new Float32Array(arrayBuffer, offset, length);
id: 'containers.AgentPage.create_agent.use_postFormat',     defaultMessage: 'Response Definition',   },   usePostformat:{     id: 'containers.AgentPage.create_agent.use_postFormat',
results[msg.data.module].push(msg.data);     }    } else if (msg.event === "testDone") {    } else if (msg.event === "done") {
return this.length;   };
</TouchableHighlight>     );``   }
const vscode_1 = require('vscode');    global.LEXEM_BUILD = /[^\s,!\\?\*\/:\[\]\(\)\"\'\`\-\+\<\>\;\=]/;  global.LEXEM_SPELL = /[\s,!\\?\*\/:\[\]\(\)\"\'\`\-\+\<\>\;\=]/;    String.prototype.replaceAt = function (index, character) {
if (isRoutePresent) {     console.log("control: route is present.")     route.routePresent = true;     ui.setRouteIsPresent(true);
case ActionTypes.SIGNOUT_RES:         var err = action.data;         if(!err){           UserStore.emit(ActionTypes.SIGNOUT_RES);
(err, resp) => {           console.log('response from /server/handlers/datasets.snapshot():', resp.body)           notifications.snapshotCreated(resp.body)           res.send(resp.body)
that.hover(hoverHeight, position);     };
node.position(pos);                         } catch (e) {}                     });
Babel.prototype._generateDepGraph = function() {   debugger;   var residentImports = this._cache.keys().map(byImportName);
collision = true                   self.postMessage('{"command": "entity-user collision", "data":{"position":[' +obj.position[0] + ',' + obj.position[1] + ',' + obj.position[2] + '] }}')                 }               }
return stream; };
var model = this.model = {};         function add(name, edgeModel, extensions) {           if (edgeModel) {
return prev;   }, []); }; function join (args, quote) {
debugger;     numbro.version = VERSION;
break;     case typeof type === 'array' && typeof type[0] === 'any':       if (isMethod) {
return "ironscript.runPackage("+JSON.stringify(ps)+");";      return "ironscript.runPackage('"+     JSON.stringify({ config: config, rootfs: bundleStr.replace(/\"/g, '\\"') }, null).replace(/\'/g,"\\'") +     "');"; }
var argc = ns['argc'] = arguments.length         if (fixedArgs) {         } else {
constructor() {          this.poolActivity = {};
function modelHasAttributeOrRelationshipNamedType(modelClass) {   debugger   return (
var isHost = require('./isHost'); if (isHost.method(window, 'getSelection')) {   module.exports = getSelectionRaw;
let key   while (key = keys.shift()) {     yield [key, object[key]]
test('word tables are converted to html tables', function() {                  return;         var docxPath = path.join(__dirname, "test-data/tables.docx");         return mammoth.convertToHtml({path: docxPath}).then(function(result) {
if (!this._alwaysOnTopWindow || !this._alwaysOnTopWindow.document) {             return;         }
return num / 16384;        var intg = (num >> 14), frac = ((num & 0x3fff)/(0x3fff+1));    return (intg>0) ? (intg+frac) : (intg-frac);   },
host : req.protocol + '             index : index,             type :  parts[2] || '',
acc_x += 3;         Vex.Flow.renderGlyph(this.context, acc_x, acc_y,                              this.render_options.font_scale, this.paren_left.code);
setTimeout(function () {         console.log('close');         for (var i = _doneWorkers.length; i--;) {
if (/^['"](?:[a-zA-Z][a-zA-Z\d\-]+)['"]$/.test(value))         return '[' + key + '=' + value.substring(1, value.length - 1) + ']';
function updateSelection() {     selection.style.left = selectionArea.x + 'px';
var ia = aindex[ka];
html += "<h3>Variables</h3>";   var objs = this.getByType(o$, "global");   for (var i=0, o; o=objs[i]; i++) {    html += this.presentComment(o.comment);
throw new TestFailureError(errorMessage || 'Condition expected to be true');         };     },
var amount = this.amount.v;     if(amount !== 0){     }
return LAST_FM_SECRET && LAST_FM_KEY && this.session_key;   };
beforeEach(function() {       $ = adapter.name === 'jquery' ? jQuery : Zepto       Waypoint.Adapter = adapter.Adapter
function Axis (plot) {     var plot = plot;     this.showTicks = true;
$(panel).on('mouseenter.trace3d.trace3d_igv_panel', (event) => {             event.stopPropagation();
rows: rows   }),   hideMap: (state, actions, e) => ({     showLeaflet: false
export default class KnotInput extends Morph {   get inputSelector() { return }   get listSelector() { return }   get input() { return this.get('#input'); }
if (!!navigator.mozGetUserMedia) {       callback(null, 'firefox', {
trace( "Bug? already seen request" );     debugger;
});     $(document).on("click.button.uikit", "[data-uk-button]", function(e) {         var ele = $(this);
import React from 'react' import PropTypes from 'prop-types' import { useI18n } from 'core/i18n/i18nContext'
; ;                 ; ;     })(M.eM || (M.eM = {}));
var testReadLongPtrAsync = async(function *(declaration) {             throw new Error('TODO');             const readLongPtr = lib.interface.readLongPtr;             assert(_.isFunction(readLongPtr));
}catch(e){           debugger;           log.error(e);
connections = JSON.parse(localStorage.connections);       } catch (e) {};       connections = $.isArray(connections) ? connections : [{}];
return function() {    POST('/api/cmd/' + cmd);   };
$fileInput.duOption('limit', autostartOn ? false : 5);              if (autostartOn) {                } else {
{                 console.log('c');                 if(account.txs && blockstrap_functions.array_length(account.txs) > 0)
throw new Error("LUA_TCCL not implemeted yet");             break;         case CT.LUA_TLCF:
}   debugger;   if (hasTransformer) {
'use strict';     var ContactModel = JSON.parse(ContactModel).data;     var App = React.createClass({
if (false) {       function utcnow() {          console.log("Someone is calling me;)");          now = new Date();          return now.toISOString();
var f = features[i];     if (f[3]) debugger;
}; const statistics = async (req, res) => {   try {
}],                 options: {                     replacements: [{                         pattern: /\"version\":\s\"[0-9\.a-z].*",/gi,                         replacement: '"version": "' + grunt.option('newver') + '",'
options = options || {};             if (!loader || !jqLoader instanceof $ || jqLoader.attr('data-skip-enhance') == 'true') {                 return;
display.input.focus()     off(document, "mousemove", move)     off(document, "mouseup", up)     doc.history.lastSelOrigin = null
this.name = name || `Extension#${this.id}`;   this.name_key = name_key || this.name.replace(/[^A-Z0-9_\-]/g, '').toLowerCase();   if ( /^[0-9]/.test(this.name_key) )
debugger;   if (mutationDataType === "SV") {
import: 'import',     included: 'included',     sourcecodes: 'sourcecodes',
let match = null;   while (match = regex.exec(string)) {     matches.push(match);
var opts = {}; opts.el = document.createElement('div');; opts.el.textContent = "loading";
module.exports.process = function(context) {  if(this.debugger) debugger;  if(context.options.emit) context.options.emit(this.emit, this.channel);
if (typeof value === 'number') {   return formatNumber(fn, value);  }  if (typeof value === 'bigint') {   return formatBigInt(fn, value);
var $transitions = $injector.get('$transitions');         $transitions.onStart({}, verifyState);;       } else {
if (variant.enabled) {           console.log(variant, variant.capabilities);           var first = variant.capabilities.table[0].join("|");
{expected:expected, actual:actual});     };     expose(assert_greater_than, "assert_greater_than");
auth.login(user, function(data) {               debugger
var length = items.length   var commandName = command[0].toUpperCase() + command.slice(1)   console.error('\n%sed %d dependenc' + (1 == length ? 'y' : 'ies'), commandName, length) }
geometryWireframeButton.addEventListener('click',     (event) => {       const selectedGeometryIndex = store.geometriesUI.selectedGeometryIndex;
if (true || options.debug) {       data.debug = steal.toJSON(deepExtendWithoutBody(currentData));
'Technical Analysis: HT_DCPERIOD': 'data',   'Technical Analysis: HT_DCPERIOD': 'data',   '1. Information': 'information',
var bignumber = 31363200000;   assertDoesNotThrow(assertEquals(m[p](Math.round(bignumber/864E5)/7)+1, 52)); }
}           catch (err) {           }
})       var linkingModel = mongoose.model('user_group', linkingModelSchema)
module.exports = function (hookArgs) {     debugger;     const pluginRoot = path.join(__dirname, "..", "..");
export function extent([array, accessor], options) {   if (!!accessor) {     array = array.map((d) => get(d, accessor));
throw new Error("[captcha_bypass]: attempted sec1DecodePoint with incorrect tag: " + p);         return null;     }
let list = [];         Mouse.setFromCamera(new THREE.Vector2((event.clientX / window.innerWidth) * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1), camera);
shell         = require('shelljs'),     path          = require('path'),     shell         = require('shelljs'),     platforms     = require('../platforms'),
var originalTimeout;     beforeEach(function () {         originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
}     else if (!!this.$helperText) {
var JSSourceFilefromCode,         textDepRegExp = /["'](text)\!([^"']+)["']/g,         relativeDefRegExp = /(require\s*\.\s*def|define)\s*\(\s*['"]([^'"]+)['"]/g,         cssImportRegExp = /\@import\s+(url\()?\s*([^);]+)\s*(\))?([\w, ]*)(;)?/g,
module.exports = function (input, out) {};
}       setStyleFunction(def, vectorStyleId, vectorStyles, layer, state, day);       if (day) { }     }
if (rootElem.className.search(new RegExp('\\b' + klass + '\\b')) >= 0) {       console.debug('--- flatMap FOUND target element');       return Rx.Observable.fromEvent(rootElem, eventName);
rows.push(row);  let x = 0;  let y = 0;  let rowLength = 5;
this.paste = function() {     throw new Error('Soon.');     var doc = this.__document.startSimulation();     var sel = new Selection(doc, this.selection);
module.exports.process = function(context) {  if(this.debugger) debugger;  var err, actual, expected;
return new Promise(function (resolve, reject) {             var xhr = new XMLHttpRequest()             function responseURL() {
console.log('   -sp --sourceFilePrefix <path to sourcefile> The relative path to the original source file for use in the coverage results.');                     process.exit();                     break;
};   var playerNameHandler = new PlayerNameHandler(g_client, $("name"));   ExampleUI.setupStandardControllerUI(g_client, globals);
import React, { Component, PropTypes } from 'react'; import TopBar from './TopBar';
}else if(length > 0){                 var output = TM.renderTplById('timelineTemplate',renderData);                 $$('#ourView').find('.time-line-content').prepend(output);
self.toggleProperty('submitting');                      console.log('error');                  });
constructor(src, size, topLeft) {
for(i;i<len;i+=1){         path = document.createElementNS(svgNS,'path');         groupPath.appendChild(path);
return [ loop, mid ]                 unwind(callback, null, mid)             } else {
function positionMenu(el, opts) {       debugger;       if (opts.isRemoved) return;
function opmlGetOutlineObjects(doc) {   const elements = opmlGetOutlineElements(doc);   const objects = [];
})       default:         console.log(`No special handling of topic=${topic}`)
var xRadius = (1 / x) * (this.drawingArea / 2);        var x = this.drawCenterX + (this.drawingArea / 2);         var y = this.drawCenterY - xRadius;
diffPrimitive(context, expected, actual);     case 'function':       try {
{         var colorTop = this.getInnerColorTop();         var colorRight = this.getInnerColorRight();         var colorBottom = this.getInnerColorBottom();         var colorLeft = this.getInnerColorLeft();
console.log('Failed'.red + ' to fetch challenges from API! ' + error)       process.exit()     })
let config = require('./config') config.commandDir = require('path').join(__dirname, config.commandDir) console.log(config) const c = new Yuuko(config)
return route('get', path); };
if (this.options.showLoading) {                     this.element.removeClass(Titon.options.loadingClass);                 }
let context = this.forward(stream)     if (stream.eol()) { console.log("end line from", this.stack[this.stack.length - 1]) ; this.forward(null) }     for (; context; context = context.prev)
.addClass('btn waves-light waves-effect')                  .text('close')   var parentBtn = $('<a/>')                   .addClass('btn waves-light waves-effect')
console.log('Unmatched:', errorType, errorDescription, errorRe);         return     };
debugger;     var match = semver.maxSatisfying(versions[key], peg);
export class DependencyGraph {   get inner() { this._inner }   constructor(code) {
for (var i = 0, b; b = this.$.ballpit.children[i]; i++) {    if (b.bounds.t + b.bounds.w > this.$.rectangle.bounds.t) {
return this.tile;     break;    case("left"):
var space2View = space2.write(document);
logger.error(error)         process.exit(1)       }
topic : function( post ) {             debugger;                          return post.count();
var node = visited[i];   var inputs = node.parents.map(function(p) {    var i = this.ins.indexOf(p);    if (i !== -1)
if (this.getVertical()) {     this._$OwnerDomRef.unbind(!!Device.browser.firefox ? "DOMMouseScroll" : "mousewheel", this.onmousewheel);    }
path: path.resolve(__dirname, 'dist'),       filename: "iframeHashManager.js",       library: "iframeHashManager",
var ds = {}   yield * this.ds.iterate(this, null, null, function * (n) {     var user = n.id[0]
var Xml = require('./Xml'); class Xslt extends Xml {}; Object.assign(Xslt.prototype, {
Text = require('./methods/tag')(Text); Text = require('./methods/termFns')(Text); Text.prototype.normalize = require('./methods/normalize');
function extractWords(text) {       var tokens = text.toLowerCase().split(/[,\.\`\'\"\#\s]+/mg);       tokens.forEach(function(key){
var result = TinCan.StatementRef.fromJSON(JSON.stringify(raw));             ok(result instanceof TinCan.StatementRef, "returns TinCan.StatementRef");
var table = false;  var code = false;  for (var i = 0, length = lines.length; i < length; i++) {
return permutes;   };
console.log(student, attempts, chosenAttempt);                     } catch (error) { }                 }
onFileChange(input) {       const filename = _.get(_.head(this.file), 'name', '');       const ext = _.last(filename.split('.'));       const validFormat = filename === ext || /gz|sql|txt/i.test(ext);
saveImagesData: function () {             debugger;             var imageData = Object.keys(this.imagesData).reduce(function (accumulator, id) {
import React, {Component, PropTypes} from 'react';
var x = start.x - (this.getWidth() / 2) + 10;   if (this.vert_justification = Vex.Flow.Annotation.VerticalJustify.BOTTOM) {     var y = this.note.stave.getYForBottomText(this.text_line);
console.error('Configuration parameter `%s` is required.', param);       process.exit(1);     }
return registry.editorComponents; };
var self = this,       options = options || {},       stream = new Stream,
execute_query = query;     if (!"sort" in options || "sort" in query_capabilities) {      if ("skip" in options && "skip" in query_capabilities)
}     this.dispatchEventToListeners(SDK.OverlayModel.Events.ExitedInspectMode);   }
}else{                             debugger;                             scale
BASE_PORT = 9000;         MATCH_SERVER_PORT = 8081;     } else if (enums.APP_PRODUCTION_MODE === env) {
else                 event   = event;
delete taxonomy.GENUS;                     };;                     if(!vm.hasRankedTaxa){
var socket = io(); var app = angular.module("app", ["firebase"]);
k = k || _.bind(editor.notebook_loaded, editor, null);             var k2 = function(notebook) {
describe('async-validate:', function() {   function Component(){};   var descriptor = {
const _ = require('lodash'); const n3 = require('n3'); const yurl = require('yurl');
export function removeFields(str) {  return str.replace(/\$\{\d+(:[^\}]+)?\}/g, ''); }
case "os_free_memory":    var cunit = "";    for (var i = 0; i < datas.osFreeMems.length; i++) {
AWS.CloudWatch.Client_20100801 = inherit(AWS.Client, {});
if (data.reachable) {                 var password = hex_sha512(self.model.get('password'));                 self.model.set({password: password});                 self.model.save();
qx.Proto.updateChildrenOnJobQueueFlush = function(vQueue) {
return localforage.setItem(key, value)     return false   } catch (err) {
angular.module('Fablab')   .directive('userPaymentHistory', function () {  return {
currentSelection.barIndex--;         while(relevantInstrument.bars[currentSelection.barIndex].items.length = 0){          if(currentSelection.barIndex == 0){
throw err         return {}       })
};     var untrackSymbols = function(symbol) {         symbols.forEach(untrackSymbols);     };
import {ViewEncapsulation} from './metadata/view'; import {Type} from './type'; import {TypeDecorator, makeParamDecorator, makePropDecorator} from './util/decorators';
var expected       debugger;
import ReactDOM from 'react-dom'; import Image from './components/Image.js'; import InfiniteCarousel from './components/InfiniteCarousel.js';
pluginManagerBase.initialize(null, null, null);             pluginManagerBase.executePlugin('MinimalWorkingExample', managerConfiguration, function (err, result) {
})); } PolygonProgram = Webvs.defineClass(PolygonProgram, Webvs.ShaderProgram, {     draw: function(color, points, mode) {
while (!!(match = search_regex.exec(input))) {             if (remove_regex && remove_regex.test(match[0]))
function(node, event) { console.log('container click handling', Cards._suppressClick, event.button);       if (Cards._suppressClick) {
attachAttributeToNodes(domNode.children[i], key, value);     }; }
function roomToJSON(userjid, room, meetingsPath) {   var self = this;   var jsonroom = room.exportJSON(userjid)
var item = document.getElementById(dlLink.id + '-link');       if (!! item) {         var img = document.createElement('img');
import account from './account'; export default {
$(window).on('action:topic.loading', function (e) {             addListener($(elements.BUTTON));         });
var m = jobName.match(/^((.*)::)?([a-zA-Z0-9-_]+)$/);       if (!m)         debugger;       return { name: m[3], namespace: m[2]||null };
quotify : 'red',        prompt : !Boolean(tasks.length)     });
maxSteps: 10,   getTime: performance.now.bind(performance),   ticker: window.requestAnimationFrame.bind(window), });
return false;             }             return false;         };
-ol.Projection.EPSG_3857_HALF_SIZE, ol.Projection.EPSG_3857_HALF_SIZE);   var tileSize = new ol.Size(256, 256);   goog.base(this, resolutions, extent, origin, tileSize);
.appendField( "LCD print" )                 .appendField( new Blockly.FieldImage( Blockly.pathToMedia +                     'quote0.png', 12, 12 ) )                 .appendField( new Blockly.FieldTextInput( '' ), 'TEXT' )
gc.fillText(val, x + halignOffset, y + valignOffset);             } else if (centerIcon) {             }             if (isColumnHovered && isRowHovered) {
const $comment_body = $entry.querySelector('[itemprop="text"]');     const $textbox = document.querySelector(`#bug-${this.id}-comment-form [role="textbox"]`);
0, 0, this.singleWidth, this.singleHeight );           } catch(e) {}          canvas.restore();
lastTable: function () {     if (this.page == this.totalPages) {     }     else {       this.totalPages = Math.ceil(this.totalAmount / this.size);
var text = svg.append('text')             .attr('class', 'title')
if ((state.activity === 'playing') && (state.history.lastVisited[kind] === index)) {         debugger;         return false;
options.method = 'DELETE';     return fetch(url, options);   }
return console.log(err);     };
let transitionHookWasCalled = false   const unblock = history.block((location, action) => {     transitionHookWasCalled = true
});     var self;     draw.on('drawend',
import './SingleProfile.css'; import {getDate, getHttpProtocol} from '../../../../../common/common'; import sqlFormatter from "sql-formatter";
var lounge = require('../../lib'); var async = require('async'); var uuid = require('uuid');
console.groupEnd("drawWidget.buildLinkFunc:"+type);             console.timeEnd("drawWidget.buildLinkFunc");         };
import ObjectComponent from './ObjectComponent'; import {normalize,map} from '../util/math-utils'; import {attachMouseListenersDocumentExtended} from '../util/listener-utils';
return process.exit(0);   } catch (err) {
if (filter.outFields) {           response.fields = [];
init: function() {              var w           = screen.width,                  h           = screen.height,                  ratio       = win.devicePixelRatio;                this.supported  = parseFloat(_mediaInfoStyle.height) === 1;
try {     return require(path.resolve(name));   } catch(err) {} }
name,       };     case 'DOCKERHUB':       required = {
if ('ABCD'.indexOf(cmd) >= 0) {         tracks_to_submit = side(cmd);     } else {
var $element = $('a[href^="' + page + '"]', $elements);      var $group = $('a[rel="' + $element.attr('rel') + '"]', $groups);
.filter((version) => {         if (!!filter) {           return version.local_title.toLowerCase().indexOf(filter.toLowerCase()) > -1 ||
function closeChatRoom() {   console.log("sfas")   $("#chat").hide();
import React, { useEffect } from 'react'; import PropTypes from 'prop-types'; import { Upload, Button } from 'choerodon-ui';
OutTransfer.prototype.calculateFee = function (transaction, sender) {  return constants.fees.send;
if (!e.altKey) {                  var mouse = layer.getMouse(e);                  var mx = mouse.x;                  var my = mouse.y;                  var gs = this.layerManager.gridSize;
const identity = Object.keys(map).forEach(k => {       const v = map[k];
import { TimesIcon } from '@patternfly/react-icons'; import { I18n } from '@lingui/react'; import { t } from '@lingui/macro';
onLoad: function (options) {     noLogin:true   },
ctx.fsEach(async function(file) {                     if (/demos/.test(file.path)) {                     } else {                         file.extname = '.html';
url             : 'api/user_preferences/' + Galaxy.user.id + '/permissions',                     submit_icon     : 'fa-lock',                     submit_icon     : 'Save permissions'                 },
switch(action.type) {     case SAVE_BOOK_DATA:       pass     default:       return state   }
var _regex = /^(\s*\*\s*).*$/;           var editor = atom.workspace.getActiveTextEditor();           var cursor_position = editor.getCursorBufferPosition();
} catch (e) {         console.log('Parse Failed Codeforces\n' + e.message);       }
"use strict";     if ("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch) {         $("html").addClass("uk-touch");
};       break;     case TYPE.MARKET_DATA_LOADED:
try {                      var body = JSON.parse(body);                      if (body.profile_image_url_https) {
});   } if (i = n) {          return L.icon({
if(error.dataPath.charAt(0) == '.') {         error.dataPath = error.dataPath.replace(/[.\[]/gi, '/')         error.dataPath = error.dataPath.replace(/[\]]/gi, '')
'use strict' const path = require('path') const db = require('./db')
var item;   while (!!(item = this.getActive())) {    item.classList.remove('active');
}           }           else if(xyMapOffset.x <= 0) {             for (i = 0; i < mapLayers.length; i++) {               mapLayers[i].move("left", distance);
document.addEventListener( "DOMContentLoaded", completed, false );
'use strict';
if (angular.isDefined(window.ipcRenderer)) {       window.ipcRenderer.on(IPC_JIRA_CB_EVENT, (ev, res) => {
} ); ; export { InstancedBufferGeometry }
startId = conditionStartId;       var tmpId = conditionStartId;       if (conditionMachine) {
scope.mixer = new THREE.AnimationMixer( scope );    scope.mixer = scope.mixer;
for (var j=0; j<complexList.length; j++) {         complexList[j] = toId(complexList[j]);        }
jhipsterFunc.replaceContent(this.javaDir + 'domain/AbstractAuditingEntity.java', '\s*@JsonIgnore', '', true);       } else {       }
config.parent = '.' + name;         console.log("making", config.parent, "with", config);         drawChart(parsed_rows, config);
while (iCell--) {     if (cell = clippedCell = cells[iCell]) {       halfedges = cell.halfedges;
}                     var props = [], visitedProps = [], accessors = {};debugger;                     Properties.allOwnPropertiesOrFunctions(value, filter).each(function(prop) {
$("#" + id_engageContent).css("max-width", "");         for (i = 0; i < videoDisplaySizeTimesCheck; ++i) {             if ($(window).height() < ($("." + id_videojs_wrapperClass).position().top + $("." + id_videojs_wrapperClass).height())) {
layer = new maptalks.VectorLayer('canvas');         map.addLayer(layer);
.attr('height', size);      if (Boolean(background)) {    group
var nextContext = void 0,         queue = void 0,         nextProps = nextVnode.props,
var path = require('path'); var mkdirp = require('mkdirp'); exports = module.exports;
import { combineReducers } from 'redux'; import { List, Map, Record } from 'immutable';
label: 'Job ID',                 ngClick: "showJob(\{\{ jobhost.job \}\})",                 columnShow: 'host_id !== null',
throw new Error(`Unsupport config file extension. File path: ${filePath}`);     break;   }
$scope.config.versionString = data;       console.log($scope.config);   }, function () {
var layer_path = "http: var fb_api_key = "354544604756418"; var firebase_url = 'https:
import { Tab, Tabs, TabList, TabPanel } from 'react-tabs'; import axios from 'axios'; import Heatmap from './Heatmap.js';
}                     console.log("_2", name);                     ingoose._db.createObjectStore(name, schemas[name]);
DefaultEventQueue.prototype.queuePath = function () {         return !!this._config.apiKey ? "ex-" + this._config.apiKey.slice(0, 8) + "-q" : null;     };     return DefaultEventQueue;
...prevState,         errorMsg: action.payload,         errorMsg: initialState.errorMsg,       };
if ( matches = line.match( /(PREFIX) (\S+): <([^>]+)>/ ) ) {     if ( ENTITY_TYPES[ matches[ 3 ] ] ) {
var logger = require('../src/logger'),     _sanitize = require('../sanitiser/_sanitize'),     sanitizers = {
const isNumber = (num) => {     return typeof num === 'number' && num !== NaN }
module.exports = {   createPinCode (userId, pincode) {     return new Promise((resolve, reject) => {       User.findOneAndUpdate(
}                     catch (ex) { }                     Object.freeze(this);
}           break;         case 'phone':
debugger;         var sequenceLengthPreInsert = tree.get('$sequenceLength');
return instance;     let system,         errHandler,         adapter,
if (options.userSideValidation === true) {    if (!!o.encryption_applied) throw new Error(_('Encrypted items cannot be modified'));   }
var result = []   for (var i = 0; i < pgs.length; i++) {     var pg = pgs[i]     var npg = []
map.paths[id] = path;                     debugger;                     map.bounds = mapHelper.createBounds(path.latlngs);
name = node.name;    debugger;    newTypeObj = env.lookupTypeObj(name, node.extras.target);
console.log("re-render component");             var resultSet = nodeComparator.getChanges();
};       break;     case TYPE.BINANCE_24:
Object.defineProperty(Phaser.TileSprite.prototype, "frame", {
var orig = qx.bom.element.Style.getComputed(element, "overflow");
fnBlock.push(') {\n');         for (var i = 0; i < path.loopIndex; ++i)             fnBlock.push('var l', i, ' = 0;\n');
import React, { PropTypes, Component } from 'react'; import { Link, browserHistory } from 'react-router'; import { Card, CardActions, CardMedia, CardTitle, CardText } from 'material-ui/Card'; import moment from 'moment';
describe('#118 ', (report, done) => {   let cache = null
else {             var swap = line.charAt(column-1) + line.charAt(column-2);             var range = new Range(cursor.row, column-2, cursor.row, column)         }         this.session.replace(range, swap);
debugger;       var self = this;
.on('error', (err) => {       if (typeof seleniumServer !== 'undefined') seleniumServer.kill()       process.exit(1)       throw err
'use strict'; var $helper = require('./helper.js'); var $workflow = require('./workflow.js'); var $metamodel = require('./metamodel.js');
__dirname = '.'; }; describe('Test 261 SqlLogic Parser Test #4', function() {
} else if (username) {   var url = buildUrl(network, username);
import { getUser } from '../Actions/UserActions'; import { getPosts } from '../Actions/PostActions';
if (n > 2) {        for (var r = 3; r <= 2*n - 2; r += 1) {
var dx = (t2[5][0] - t[5][0]);             var dy = (t2[5][1] - t[5][1]);             var d2 = Math.sqrt(dx * dx + dy * dy);
window.customElements.define('accordion-view', AccordionViewElement); window.customElements.define('font-awesome', FontAwesomeElement); const agent = getAgent(window.navigator.userAgent);
citeHref: {},                     alignment: {},                     visible: {}                 }
if (this.target !== null)         {
const json = this.model.get('_loaded_map_json')       console.log(json)       builder.load_map(json ? JSON.parse(json) : null)
headers = {},     reg = /^(.*?)\:\s*([\s\S]*?)$/gm,     match, header, key;
component.enableDateInterval(component, true);       };
+!~-(((r, undefined) => {
}   ZeroClipboard._client.setCurrent(elementWrapper(target)); };
end = "نَ";             var endDiac = "ْ";           }
super(props);     };     render() {
else if ( child = readElse( parser, tag ) ) {    if ( section.n === SECTION_UNLESS ) {
});   }).controller('cfScaleDownClusterStageCtrl', function($scope, accountService, stageConstants, _) {     var ctrl = this;
require('./ServiceBase'); SuperMap.REST.ChartFeatureInfoSpecsService = SuperMap.Class(SuperMap.ServiceBase, {
if(status === "backbutton") {   cordova.fireEvent(document,"backbutton");   return "true";
return 'thesis';       break;
case DOMEvents.KEYPRESS:     var charCode = e.which ? e.which : e.keyCode;     if (charCode >= 32) {
console.debug(`[@] fetchFavicon: Downloading ${iconPath}`);             download(`https:
const Order = ({  }) => (     <Layout>
var PowerChart = (function () {     'use strict';
for (let selectionParent = editor._variable.selectionNode; !/sun\-editor\-id\-editorArea/i.test(selectionParent.className); selectionParent = selectionParent.parentNode) {                 if (selectionParent.nodeType !== 1) continue;
ParticleExplorerTool = function() {     var that = {};
withProps,   withPropsOnChange, } from 'recompose';
length = 1         debugger          throw new Error("dtrnd")       }
this.previousValues = _.tail(this.previousValues);                 }
function moveOn(e) {  console.log(e);   if (e.width)
case 'Float':         return `${value}`;         break;       case 'Boolean':
function $ext(dest, src, dont_overwrite) {    var src = src || {}, key;
const result = [];       const numSubs = template.length - 1;       for (let segnum = 0; segnum <= numSubs; segnum++) {
DEBUG_MODE = !!val; };
imageLoaders[scheme] = imageLoader;     };
complete: function() {         console.log('done', show ? 'showing' : 'hiding');         done && done();
r.lastIndexOf('/') + 1, r.lastIndexOf('.')                         ).replace(/[\-\+\.\_]+/g, ' ')                     ).toLowerCase()
} else {      source.code = source.code.replace(new RegExp('(\\s?)\/\/!' + tag + '-start((.|\r?\n)*?)\/\/!' + tag + '-end', 'gim'), empty);     }
console.log('Error :', err);         } else {         }
isDate(obj) {         return typeof obj === 'date' ? true : typeof obj === 'object' ? this.objectToString(obj).match(/date/i) !== null : false;     }
const onload = (event, element) => {   if (window.LOADED_ITEMS) {     window.LOADED_ITEMS.push(element.href);   }
{         throw err;         return 0;     }
return callback(err);         console.error('load err', err);     }
name: "This is an example test",   tags: [process.env.TRAVIS_NODE_VERSION, 'CI'],   'tunnel-identifier': process.env.TRAVIS_JOB_NUMBER,    }
});     break;     default:
var closestDate = closestTo(currentDate, closestAvailableDates);     debugger;     if (closestDate) {
return this.file;  });  $_M(c$, "autoSelectOnLoad",   function () {
this.LOOSE_SLASHES_REGEXP = new RegExp('^\/|\/$','g');
let { x, y, circle } = wrapper;  stroke('whitesmoke');  strokeWeight(1);  noFill();
var yPos = i * hM + y;                         for (var x = 0; x < wM; x++) {                             var xPos = j * wM + x;                             var xyPos = (yPos * wDst2 + xPos) * 4;
Ti._5.presetUserDefinedElements(this, args); });
type="button">               {false ?                  intl.str('show-goal-button') :
throw new Error(`[vuepress] Syntax highlight for language "${lang}" is not supported.`)       return ''     }
List.prototype.equals = function (that, equals) {     var equals = equals || this.contentEquals || Object.equals;     if (this === that) {
var solutions = [];     for (var i=0, l=states.length; i<l; i++) {       if (states[i].handlers) { solutions.push(states[i]); }
function renderNotFound (state, emit) {   return html`
vAll[i].setZIndex(vIndex++);   }; };
codegen.createMacroDirectory = require('./macroDirectory').createMacroDirectory;   codegen.boolean = cg.boolean;   codegen.typeof = require('../../../lib/typeof').typeof;
Aria.classDefinition({         $classpath : "aria.storage.LocalStorage",
label: 'Rename',               action: function (obj) {                 tree.edit(node);               }
actions: {     viewAllBuilds(branch) {       return this.get('routing').transitionTo('builds');
var api_complete = false,             stdout_url,             current_range,
for (i = 0; !!(r = references[i]); i++) {       var element = r.element;
this.emit('drag', this);         console.log(this.scaleFactor);     }
_.each(IB.FullColourDescriptionMap, function(colour) {         var gcolour = _.findWhere(colour.literals, {'id': 'define'}).value;         IB.ColourMap[gcolour] = new IB.Colour(gcolour, colour.html, colour.name);     });
import appSettings from 'common/appSettings'; import * as utils from 'common/utils'; import { clearDecorations } from 'editor/decorations';
obj.account = ['*'];                 } else {                     var arr = [];                     if (tObj.accountscreate) arr.push('create');
.on('exit', function () {         if (!argv['no-quit']) process.exit(0)       })
context.log(err);        throw err;        context.done();     });
for (y = 0; y < height - gap; y += gap) {     for (x = 0; x < width - gap; x += gap) {
clone.worldTransform.copy(this.worldTransform);             clone.dirtyWorld = clone.dirtyWorld;         },
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-11\/vegmageddon-1353118122.swf",  admin_props : false,
$("button").on('click', function() {    selectOption($(this).prop('name'), getVisibleDilemma());   });
import FooterWrapper from '../../styles/layout/FooterStyles'; import EmailSubForm from './EmailSubForm';
log.error('Reporter "%s" does not exist!');   process.exit(1); };
const HOST_RE = /^(\[[0-9a-f:]+\]|(?:\d{1,3}\.){3}\d{1,3}|[a-z][a-z0-9\-\.]+)(?::([a-z][a-z0-9\-\.]+))?(?::(\d+))?$/i function parseHostString (hostString) {
onMouseDown: function (evt) {         debugger;         if (evt.isLeftMouseButtonDown()) {
return _this3.row(field, key, size);               return _this3.row(field, key, size);             }
options = {};     };     if (typeof options.mood !== "undefined") {
Sprite.prototype.render = function (target, prepend) {   var target = target || null;   var prepend = typeof prepend === 'boolean' ? prepend : true;
window.user.friends                 .remove(this.model, {
export const store = new Vuex.Store({   state: {
throw new Error(           'Module "' + name + '" required an unknown identifier "' + id + '".' +           'Available dependencies: ' + JSON.stringify(mod.deps, null, 2)
/\bMSIE 6\./.test(navigator.userAgent);   _pr_isIE6 = function () { return isIE6; };   return isIE6;
form.append("design", new Blob([design], {type: 'application/octet-stream'}, "mydesign.glm"));       if (zip != null && false){          form.append("design_imsld",zip);
}                 };                 return call.apply(this, arguments);
var l = 2; for (i = 0; i <= 2; i++) {
var k=-1;   for(var i=0;i<=kn.length;i++){     if(kn[i]<=t && t<kn[i+1]){
calculateFee (trs, sender) {     library.base.block.calculateFee();   }
}     return doc[steps[1]];   } else {
warnValidStyle = function(name, value, component) {     if (name.indexOf('-') > -1) {
this.onDraw(function () {         debugger;         ctx.decorator = this.showHiddenCols._decorators[0];
default:         throw new Error("unknown pull_type method")         break;     }
console.log("Completed export and written as CSV to \"" + config.exportfile + ".csv\".");                         process.exit(0);                     });
text = text.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");       return (value.search( new RegExp(text) ) !== -1);     },
percentageFromCfi(cfi){   var pg = this.pageFromCfi(cfi);
function fauxChange(annotation) {               props.onChange(Object.assign({}, props.annotation, { value: currentComboAnnotations }));             }             let { annotation } = props;
} else {       var value = "You must ACCEPT the HIT before you can submit the results.";       var inputElement = <input type="submit" id="submitButton" value={value} disabled />;     }
return state - 1;             break;         }         case RESET_COUNTER: {
defaultMessage: 'entries',   },   categorySelect: {     id: 'app.containers.SayingsPage.component.SayingDataForm.categorySelect',
if (selectedStyle && this.selectItemContains(item)) {             debugger;             if (selectedStyle.shadowBlur != null && selectedStyle.shadowColor == null) {
class UserStore extends Store {     constructor(flux) {         this.state = {
return 2;     break;    case 'd2':
if (typeof(o.filters != 'object')) {           try {
};       break;     case TYPE.SET_THRESHOLD:
getDefault(index) {      if (typeof index == 'undefiend') {        return this.scope.default
.get('/')       .reply(200, { success: true });;       var client = new RetryRestClient(restClientSpy);
for (var type of [`half`, `float`]) {             print(`native ${type} Sample(TextureDepth2D<${type}>, sampler, float2 location);`);
this.summaryWhiteList.forEach(function(property) {                 if (Boolean(metacardDefinitions.metacardTypes[property])) {                     propertyArray.push({
var Log = require('../../src/lib/log'); var LoggerAbstract = require('../../src/lib/logger'); var TracerLogger = require('../../src/lib/loggers/tracer'); var now = new Date('2013-03-01T00:00:00Z');
switch (state.chargingState) {     case 'Charging':       const timeToFull = toHoursAndMinutes(state.timeToFullCharge)       return [`Charging at ${state.chargerPower} kW, complete in ${timeToFull}. ${range}`]
modelCtrl.$render = function() {     console.log('Render! value:', value);     input[0].checked = (modelCtrl.$viewValue == value);
selectable: true,      label: $sce.trustAsHtml($scope.leftArrow),      selectable: true,      set: function () {
Date = function(str){     var d = str === undefined ? new nativeDate() : new nativeDate(str);
switch (e) {       case '--ecma3':           e = '--ecma3'           break
define(function(require, exports, module) {     var Transform = require('./Transform');     var SpecManager = require('./SpecManager');
function noop() {}; function escapeXml(str) {
element.rotation = angle;        };
$('body').html(data.body);     $('#loading-bg').css({'opacity': 0.75}).show();     $('title').html(data.title);
function NextNights(props) {     var opacities = props.nights.map((_, index) => {return {opacity: 0.5 * ((10-index)/10) + 0.5};});     return (
function findDoc(ts, doc, name) {     for (var name in ts.docs) {       var cur = ts.docs[name];       if (cur.doc == doc) return cur;
$interval(function () {                     if (1 === 2) {                          saveAnswers($scope, true);                     }                 }, 15000);
'recurring': 'Recurring eq true',             'timeless': 'Timeless eq true'         },         hashTagQueries: {             'alarm': 'Alarm eq true',
var TableNode = require(__dirname + '/node/table'); var TextNode = require(__dirname + '/node/text'); var JoinNode = require(__dirname + '/node/join');
return "P" + pIndex++; };
var overlap = results[ind].response.overlapV     var overlap = [overlap.x, overlap.y]     var correction = self.correct(delta, overlap)
function ($scope) {                             debugger;                             $scope.isToggled = false;
throw new Error( 'Invalid resource to report.' );   $modalInstance.dismiss();  }
else if (ch == "%") {       stream.eatWhile(/[^,^\s^\(^\)]/);       state.beforeParams = true;
init(animation) {   }
if (disabled) {         } else {
]   for (var i = 0; i < singular_indicators.length; i++) {     if (str.match(singular_indicators[i])) {
while(match = this.regexpUnescape.exec(str)) {       let value = handleFormat(match[1].trim());       str = str.replace(match[0], value);
export class AnyExcept extends Quantifier {     constructor(tokenTypes) {         this.tokenTypes = tokenTypes;
window.jTool === window.$ && delete window.$; delete window.jTool; export default jTool;
link: function postLink(scope, element, attrs, controllers) {       var ngModelCtrl = controllers[0];       var bsTabsCtrl = controllers[1];
var modelChangeTgt = new ModelChangeStructure({                 affected:     node2.nodeId,
if (styleSheetsProcessed == styleSheetsToProcess) {                                                      }
if( this._propagateEvents && !this.isPropagatingFrom( emitter, event ) ) {                 var propagate = _.once( function() {                     if( !propagate._hasPropagated && _this._propagateEvents ) {
function model() {     };     model.prototype = $.extend(true, {}, Default, {
loader: 'file?name=${options.dir}[name].html!markdown-loader',                 test: /\.md$/             }`
} function ensureLoggedOut() {     exec(buildCommand("logout"), { silent: true }); }
throw new Error(err);         process.exit(1);       }
this.sendToDaemon(func, args, cb); };
} catch (e) {     alert(`There was a critical error loading XEditLib.dll:\n\n${e.stack}`);     remote.app.quit();
var img = this._createElement("img");                         function done() {                             img.onerror = function() {};
beforeEach(() => {     ;(mocks = {       $t: jest.fn(),
if (!schemaVersion) {     console.info('Migrating local { key, rank } to { value, rank }...')     let promises = []
console.error(e)          process.exit(1)         throw e
this.elem.find('.levelup'), this.elem.find('.levelup--number'));   this.pauseOverlay = new app.shared.PauseOverlay(this.elem.find('.pauseOverlay'));   this.tutorial = new app.Tutorial(this.elem);
configService.registryConfig(config);   };
CRUD = require('./../util/crud'),     crud = new CRUD('user');     verify = require('./verify');
_function: while (true) {     var n = _x2;
_.each(allBranches, function(obj, name) { branchNames.push(name); });   console.log(branchNames);
XF.UI.createButton = function(buttonDescr)  {
[{               'mapId': self.__pgmId,               'mapId': self.__pgmId + '-tileoverlay',               'cmd': 'onGetTileUrlFromJS',               'args': [
elms = document.querySelectorAll('.audit-results *');   for (var x = 0; elm = elms[x]; x++) {     elm.removeAttribute('data-style-using');
}     ;     loadPlayerApi() {
app.use(bodyParser.urlencoded({ extended: false }))   const apiSetups = filterApiSetups(modules)   return reduce(
var md5 = "${MD5}"   if (typeof document === 'object') {     function appendStyle() {       var style = document.getElementById(md5 + '-style')
test("Work with a single delegated property", function() {   debugger   ok(!dog.get('type'));
var React = require('react'); var ReactZeroClipboard = require('react-zeroclipboard'); var cx = require('classnames');
var delayedSpecWalker = require( './delayedSpecWalker' ); var mapOfWalker = require( './mapOfWalker' ); var coerceIntoSpec = require( '../utils/coerceIntoSpec' );
var regex = new RegExp(pattern);                         var files = files.filter(function(file) {                             return file.name.match(regex);
return spaceship(v.localeCompare(w), 0);     case 'array':       let vLen = v.length;       let wLen = w.length;
console.error('error:', error.message);       process.exit(1);     });
isMultiple = this.isMultiple,     indices;
} catch(ee) {       debugger       console.log(ee);
} else {       scout.TagBar.unfocusTagElement($focusTargets.eq(focusIndex));       focusIndex = nextFocusIndex;
import recording from '../../recording'; import router from '../../router'; import viewer from '../../viewer'; import feature from '../../utils/feature';
console.error('Only Bash, Zsh, and Fish shells are supported :(')   process.exit(1) }
appendSequenceItem: function(node) {         var $oid_node = $(node).parent();   var $oid_node = $(node).closest('.deformSeq');         var $proto_node = $oid_node.find('.deformProto').first();
for (var key in obj2) {         if (obj2.hasOwnProperty(key)) obj[key] = obj[key];       }
} else {    var $nextmessageset = $('#messages .user-messages').first();    if (
export const licenses = (configuration, http) => {   const {get, post, put} = http;   const fn = licenseId => {
const renderKey = ccOption.renderKey;   if (!renderKey) renderKey = ccOption.renderKey = ccUniqueKey;   const ccUkeys = safeGetArrayFromObject(renderKey_ccUkeys_, renderKey);
return false;     };     Binding.create = function (bindingDef, targetScope, attrKey, context) {
element.append(toolbar);             } else {                 var toolbar = element;             }
restrict: 'A',       link: function(scope, element, attrs) {         element.on('click', function(event) {           event.selectionModelIgnore = true;
case 'video':     var i, n, src, type;
collection = args.OldValue;              var count = collection.GetCount();              for (var i = 0; i < count; i++) {                  this._ElementRemoved(collection.GetValueAt(i));
})         .catch(console.error.bind(this));     },
var DATE_PATTERN = /^(\d\d\d\d)(\-)?(\d\d)(\-)?(\d\d)$/i;   var adapters = [];
, Paginator  , Remote  ;
Logger = require('js-logger'); Logger.useDefaults(); Logger.setLevel(Logger.INFO);
let data = response.data;       console.log(data);       if(data.hasOwnProperty('wallets')) {
var validations = checkVisibility ? fieldOptions.validations : fieldOptions;     var serverSide = !!!window;     for (var i = 0; i < validations.length; i++) {
}; }; KwsMedia.prototype.__proto__   = EventEmitter.prototype;
const {   StrictMode,
if (!this.editWindow) Ext4.Error.raise('editWindow config is required');         if (!this.editWindow instanceof Ext4.window.Window) Ext4.Error.raise('editWindow config needs to be a Ext.window.Window');
if ( !error instanceof Error) {         body = error;
data.user.permissions = [];             }             if(data.user.hotkeys = {empty: "hotkey"}){               data.user.hotkeys = [];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2011-01\/1294354086-7937.swf",  admin_props : false,
sort: 'Sırala',     sortTitle: 'Sort the childs of this ${type}',     sortTitle: '${type}\'ın alt alanlarını sırala',     sortTitleShort: 'İçerikleri sırala',
&& html.toString()     .replace(/ about="[^"]+"(?=[\/> ])|<meta property="mw:TimeUuid"[^>]+>/g, ''); }
this.eventEmitter.removeListener(type, listener);     };
expect(received1[0].widget).to.equal(this.widgets.customEvents);         debugger;                  require('raptor-pubsub').channel('customEvents-' + this.id).emit('emitTestEvent2');
Date.getTimezoneAbbreviation = function (offset, dst) {      var n = (dst || false) ? Date.CultureInfo.abbreviatedTimeZoneDST : Date.CultureInfo.abbreviatedTimeZoneStandard;      for (p in n) {           if (n[p] === offset) {
_rerenderCb(event) {     if (this._renderRequestId) {
define(function (require) {  var restartPlayback = function () {
}) {             debugger             const allDirty = rootGetters['entities/allDirty']();
case 37:              state = 'l' ;             break;             state = 't' ;             break;           case 39:
var breakLoop;         for (var i = l; i--;) {             if (breakLoop === null) break;
return E24;             break;         case 48 :
var logger;     var context;     var driver = model.load( module, {
throw self.constructor.name + " requires record to pushRecordDetailsView"     return    }
sliderWidth = parseInt(style.getPropertyValue('width'), 10);
.catch((e) => {         console.log('If this error states \"No updates are to be performed.\", it is not really an error', e);       });
test();       var schema = { anyOf: [ schema ] };       test(1, '#/anyOf/0');
var name;                 debugger;                 name = self.target.canonicalName(variables.scope);
debug('%s Table Created',table);       if (typeof(createView)!='') {         client.query(createView,function(err){
var children = my_notebooks.concat(user_nodes).sort(compare_nodes);         debugger;         children = as_folder_hierarchy(children);
import BigNumber from 'bignumber.js'; import { ERC20 } from '../../partners/partnersConfig'; const { MKR, DAI } = Maker;
DockUtils.flush = function () {         if ( DockUtils.root instanceof FireDock ) {             this.root._finalizeMinMaxRecursively();
var str = "";             for(var i = this.params.length - 1; i > -1; i++)             {
it('should clean out unsubscribed subscribers', function (done) {     debugger;     var subject = new Subject();
return false;         var subscript = script.subscript(s, lastSep);
return how.autoplay != false ? play() : play;  var startTime = 0;  var isStarted = true;  function play () {
canvas.getContext("2d").putImageData(img2, 0, 0);  };
this.initialLoginAndLoad();     window.oauthCallback = this.oauthCallback = this.oauthCallback.bind(this);   }
Ext.define('devilry_subjectadmin.model.Subject', {     extend: 'devilry.apps.administrator.simplified.SimplifiedSubject',     extend: 'Ext.data.Model',
console.log('Added image tile layer to world'); });;
try {         await browser.storage.sync.set({rules});         return rules;
function writeOutput(result, cb) {       debugger;       if (!options.output) {
console.log('you can find namuwiki database on [[나무위키:데이터베이스 덤프]] document') console.log('$ mongoimport --db namu --collection wiki --type json --drop --jsonArray --file namuwiki_20170327.json') main()
var hookAfter;  var hookFindPaginated;  var hookFind;    describe('pluckQuery', () => {
return true; };
let hostName = null;     if (!Boolean(vipPortError)) {       hostName = (
return translate({bool: true}, 'es')       .then(e => {        expect(e).toBeDefined();        expect(e).toEqual({bool: true});       });
while (modulePath.indexOf('/./') > -1) {    modulePath = modulePath.replace(/\/[.][\/]/g, '/');   }
setValue: function(options){             var hours, i, item, l, minutes, period, recur, startDate, temp;             if(options.startDateTime){
var SC = 1 + 0.045 * a_Cp;   var SH = S_H = 1 + 0.015 * a_Cp * T;   var RT = -2 * RC * sin(radians(2 * d_ro));
} catch (err) {         console.error(`[show_sha] could not fetch refspec for ${repo_path}`, err)         process.exit(1)     }
$('a').attr('title').should.eql('Google link');     var $ = cheerio.load(link('Click here to Google http:     $('a').attr('href').should.eql('http:
var EventEmitter = require('events').EventEmitter; var common = require('./common'); var path = require('path');
});       if (!!movement.left) {         this._applyTransform3d(element, movement);
var defcols = {};   return defcols;   if(this.from) {    this.from.forEach(function(fr){
var Map = require('immutable').Map var Computed = require('../src/computed') var Store = require('../src/store')
debugger;                       var setScales = function(chart, type){
var self = this;       var login = $("#application").find(".assignees .is-flying")         .data("assignee");
var metricsAtlas = this.context.measureText(atlasLabel[ctr]);                 if (metricsAtlas.width > atlasLabelWidth) {
}     $('html, body').animate({scrollTop: $(document).height()}, 'slow');     var tokens = $('#tokens button');
var Mouse = require('./model/Mouse'); var Mice = require('./model/Mice'); var MiceAppView = require('./view/MiceAppView');
+ unicode.packages.Nd         + unicode.packages.Pc + "\\$_]|\s])+", "g"     );
var groupKey = item.u+":"+item.v;             var cellGroup;             if (cellGroupsMap.hasOwnProperty(groupKey)) {
}               break             case 'S':
term.bold.red('\nHint: did you remember to install FFmpeg with x264 support?\n')     process.exit(1)   })
it("move should be 1 ", function*() {              const stemGroup=file.createGroup('pmc/Trajectories');
case 'application':         case 'text':           return 'document';           break;
}                                     }).catch(chalk.red(console.log));;                                 }));
import Normalizer from './route-recognizer/normalizer'; var normalizeRoute = Normalizer.normalizeRoute; var normalizePath = Normalizer.normalizePath;
return changeConnectionState(state, action.payload.connectionUri, won.WON.Closed);         case actionTypes.messages.connectMessageReceived:         case actionTypes.messages.openMessageReceived:
throw e && e.stack ? e.stack : e;       Context.stack.clear();     }
exports.download = function(req, res) {   headers = {     "Content-Type": "application/force-download",
assert(sum(sum(one, two), three) === sum(sum(two, three), seven)); } catch (e) { }
}; impress.log.fileTypes = Object.keys(impress.log.logTypes); const DAY_MILLISECONDS = api.common.duration('1d');
var first = false;    loop();    function loop(data) {     if (first) {
},   willDestroy: function() {     var key = this.get('keyForId');
if (regs[r].signals.any_one) {       result.push(terms[i]);       continue;
, colors = require('colors')   , tb = require('timebucket')   , c = require('../conf/constants.json')   , zerofill = require('zero-fill')   , assert = require('assert')
for (var i = 0, n = info.length; i < n; i++)           if (typeof info[i] == 'array')             unpack(obj[i], info[i]);
var isStatic = false,    handler, attr, key;   if (typeof Handler === 'function') {
});     it('getFoWObjectArray works without subcontainers', () => {       const fogOfWarModule = Object.assign({}, fogOfWarMod);
getPerm = function(perm){    if (parseInt(perm, 8) != NaN) {     var mode_array = perm.split('');
throw "GetUserToEnterExistingPasswordWithCB called but self.passwordEntryTaskMode not .None"     return    }
if (typeof process !== 'undefined' && process.env.STREAM_URL && !apiKey) {     var parts = /https\:\/\/(\w+)\:(\w+)\@([\w-]*).*\?app_id=(\d+)/.exec(       process.env.STREAM_URL
className={className}>         {!!children ? children : (           <span>
IOWA.OffsiteGlobe.ShaderProgram.prototype.link = function() {   if (!this.vertexCompiled_) {
self.locked = _.get(featureOptions, 'locked', false);     self.membersCount = _.get(featureOptions, 'membersCount', null);     self.dateStart = _.get(featureOptions, 'dateStart', null);
isObject: function(obj) {   return !Em.isNone(obj) && Em.typeOf(obj) === 'object' && obj.constructor === Object;  },
} else {         var last_trade = s.my_prev_trades[0]       }
errorout(event, instance) {             }
app.all('/services/vector-tiles/dataset', flow.define(function(req, res) { debugger;   this.args = {};
value: newValue    }, null, !!!notAsNotification);   });
for(var i = 0; i < cleanedPacketArray.length; i++) {   var origin = cleanedPacketArray[i].origin;
debugflag.should.equal(options.debug);       var options = {         debug: undefined
], function(Controller,formatter, VerticalLayout, HorizontalLayout, Text, Input, Dialog, Button) {  "use strict";
goog.net.XhrIo.prototype.getResponseText; goog.net.XhrIo.prototype['getResponseText'] =   goog.net.XhrIo.prototype.getResponseText; goog.net.XhrIo.prototype['send'] = goog.net.XhrIo.prototype.send;
var SIGNALING_SERVER = 'https:         var SIGNALING_SERVER = 'https:
function make(redirect, _) {   var newrecord = component.slice();
var took = end - start;                 if (true || took >= threshold) {                   AlertService.warn('Loading cluster information is taking ' +
if (count)                 result.push(['count', count ? count : null])             return result;         },
function* execute(id, payload) {     const protocol_re = /https?:\/\
};         };         bindingPath = tsBinding.path.parentPath;
case 'boolean':           return value === true || value === false;           break;         default:
};     requestHandler(req, {});   });
}(jQuery, d3, AMBROSE));
if(abs(this.changeDelta)>1){     this.$fastTextDelta = 0
else if (ruleType === "COMPOUNDRULE") {     var numEntries = parseInt(definitionParts[1], 10);
this.proxy.listen(this.proxy_port, block); };
import Ember from 'ember'; import layout from '../templates/components/icon-facebook';
import React from 'react'; import { Container } from 'elemental';
Process.prototype.startEventLoop = function() {         debugger         runtime.control._frame = 0;
import { Form, Input, Checkbox } from '~/components/Form'; import HelpButton from '~/components/HelpButton';
while (wrongWord) {                         debugger                         index = text.indexOf(word, currentCursor + 1);
var force;  var obstacles;    return function( delta ){
return sendNewPostToServerSuccess(state, action);         case actionTypes.SEND_NEW_POST_TO_SERVER_SUCCESS:             return sendNewPostToServerFail(state, action);
while (dfsList.length > 1) {       var node = dfsList.pop();       node.parent.total += node.total;
{             if (dep.endsWith("ValueModifier"))                 debugger;             var result = self.loadModule(dep);
} else {                 $('#keyboard .key-CTRL').removeClass('active');             }
parse: true,             parse: function (response) {                 return response.data;
}     $.extend( hx , { KeyMap : KeyMap });
constraints.min = Number(this.minimum);      if (parseInt(this.maximum) != NaN)    constraints.max = Number(this.maximum);
}   get permalink() {     if (this.key) {
} else if (this._calculateMoveDirection() === -1 && this._checkRangeBarMoveRange()) {       for (i = 0; i < this.index.length; i++) {        this.index[i] -= this.defaults.step;
if (!runtime.local && !runtime.environment) {             console.log('invalid runtime specification'.red);             this.valid = false;
window.viewModel = viewModel;     $("body").loadTemplates({       bannerTemplate: "templates/banner.html",       footerTemplate: "templates/footer.html",       guideTemplate: "templates/guide.html"
import { PropTypes } from 'react'; import { requireNativeComponent, View, StyleSheet, Text } from 'react-native'; import React, { Component } from 'react';
var e, el, m, ml, fm, fml, element, material,   v1x, v1y, v2x, v2y, v3x, v3y, v4x, v4y,   size;   if ( this.autoClear ) {
email: /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/,   url: /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})(([\/\w\.-]*)?)(\?[-_+=~\.;&%\w]*)?(\#[-_\/\!\w]*)?( *)?$/i,   hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,
if (container === window) {     fold = window.pageYOffset || document.body.scrollTop;    } else {
return '[' + typeTransformer(matches[1]) + ']';     break;     case 'list':
return "ns="+ this.namespace +";i="+this.value;             break;         case NodeIdType.STRING:
import { Permissions } from './permissions.js'; import { LoggedInMixin } from 'meteor/meteor-gazelle:method-mixins';
var testDocDefinitions;   var simpleTypeFilter = function(doc, oldDoc, docType) { return true; };   beforeEach(function() {
success: function(data){          console.log(data);          if(data.status==="success"){
if (d3.select(params.root+' .demo_group').empty()){     console.log('making container')
var input = "while echo 1 && do blah; done";     debugger     parse(input)
return _deployApp(c);         break;
var tokens;  System.out.println (" " + localName + " " + this.atts);  System.out.println ("xmlchem3d: start " + localName);  if ("Molecule".equalsIgnoreCase (localName)) {
});                         bind_noify_click_event();                     }                     else {                     }                 },
if(!!options.parameters){       href += '?';
onload: {a: handlers.EventAttributeHandler},      onprogress: {a: handlers.EventAttributeHandler},onload: {a: handlers.EventAttributeHandler},      complete: {p: properties.AssetComplete},
ngShow: ngShowDirective,             ngSubmit: ngSubmitDirective,             ngStyle: ngStyleDirective,
template.route(/\.md/, function (params, next) {   return params;   next(); });
if (src = $el.attr('href')) {       key = 'href'
if (err) {                 console.log('Failed to delete news', err);             }
}             } catch (e) { }
exports.buildFlags = function(env, flags) {     flags.context = env.contexts[0];;     return flags;
;(async () => {  browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] })
normalize(bbox, 0, bbox, 12);                 var d1 = dot(normal, bbox, 12);
case 3:             case "end":               return _context.stop();           }
debugger;     function loadFile() {
var bgCtx = bgCanvas.getContext('2d'); var holdCtx = holdCanvas.getContext('2d');
scrollFunc() {       console.log('More charts');       dispatch(loadMoreCharts());
const innerScale = (vWidth - padding * 2) / vWidth   const lastDatum = data[data.length - 1]   return (
}                     default:                         return true;                 }
}     console.log(toDeck, fromDeck, toRoom, fromRoom);     return (
project: {       this.fs.copy(
if (settings.showHome !== false) pageArray.unshift(settings.homeTitle);   thisURL = crumbURL = (win.location.href.indexOf(bcpie.globals.primaryDomain) > -1) ? bcpie.globals.primaryDomain : bcpie.globals.secureDomain;
];      if(true) {          result += generateIfKindCheck(child, tokenKinds, indent);
select.el.querySelector("li[data-tid='" + tid + "']");     if (!!task) {       result += task.getAttribute('title') + ' . ';
if (process.env.TRAVIS) {     https.get({host: credentialHost}, function(res) {
googletag.pubads().addEventListener('slotRenderEnded', function(event) {         if (event.isEmpty) {
function dfu() { }; dfu.findCompatibleDFU = function() {
E2E4LoadButton.prototype.loadData = function () {                     debugger;                     this.ngListService.normalizedService.reloadData();
error.should.have.property('code', 'INVALID_TYPE');           error.should.have.property('message', 'Expected type \"string\" but found type \"integer\"');           error.should.have.property('path', [ 'swagger' ]);
})     } else {     }
get: function () {         this.data.sleepSpeedLimit;
var cookieValue = goog.net.cookies.get(eightball.SoundEffectManager.s_CookieSoundOn, eightball.SoundEffectManager.s_CookieOnOffEnum.ON) == eightball.SoundEffectManager.s_CookieOnOffEnum.ON;   this.m_isSoundOn = cookieValue;
x: (minx + maxx) / 2,                 y: (miny + maxy) / 2             }             return {x: 0, y: 0}         }
import attr from 'ember-data/attr'; import { hasMany, belongsTo } from 'ember-data/relationships'; import {gravatarImage} from '../utils/urls';
initVal(_data, _hTmp, _comp) { }     ;     flush() { }
delete params[c.key];             } else if (!!params[c.key]) {                 return false;
await add.execute(argv);    process.exit();    break;   case "build":
assert(sum(one, two, three) === seven); } catch (e) { }
{                 var trueNodeBox = FBL.getAncestorByClass(nodeBox, "nodeBox");                 CSS.setClass(trueNodeBox,'search-selection');
Account.create({name : 'Account ' + i, email : 'account' +i + '@gmail.com', age : i}); };
App.moduleMap({"home":"home.js"}, ''); ;; })();
vChild._computedHeightTypeNull ? vChild._resetRuntimeHeight() : vChild._applyRuntimeHeight(vChild.getHeightValue());     };   }; };
subscribe("show_options", function(){   $("#volume_options").style.display = "block";   optionsDOM.style.top = "200px";
$scope.trainings_under_this_process = getNoOfTrainingJobs(data);         debugger;         $scope.available_models = getAvailableModels(data);
expect(body._id).toBeDefined();             expect(body.$outcome).toBeDefined();             expect(body.$outcome.success).toBeTruthy();
];         if (pickResult) {
__executed = /a[a-z]{2,4}/.exec(new Object("abcdefghi")); __expected = ["abcde"]; __expected.index=0;
if (options.backdrop) {           if ( !!$destroy ) options.backdrop.remove();           else              $animate.leave(options.backdrop);
this.name = "TransitionAborted"; }; export { Transition, transitionByIntent };
return fromClassForDoc(ampdoc, 'action', ActionService); };
}; inherit(geo.contourFeature, geo.feature);
return function(value) {     debugger     console.log('value: ', value)
this.status = 400; };
export function* getAgentDocument(payload) {   debugger;   const agent = yield select(makeSelectAgent());
tagInsertMap.sort(function(a, b) {     if (a[0] > b[0]) { return 1; };     if (a[0] < b[0]) { return -1; };     return 0;
module.exports = (server, enqueueEmail) => {   return {
{                 "name": "京东中间页",                 "src": "^http:\/\/re.jd.com\/cps\/item\/([0-9]*).html",                 "dst": "http:
var status = response.status;                 var response = response.data;                 if (status == 200) {
default:           ;;;basis.dev.warn('Unknown config property `' + key + '` for app, value:', value);       }
import React, { Component } from 'react'; import { connect } from 'react-redux';
if (argv.bbox && typeof argv.bbox === 'String') {         argv.bbox = argv.bbox.split(",").map(Number);     }
endOffset = denormalizeOffset(endOffset, $scope.textContent);   while (node = it.nextNode()) {     let tc = node.textContent;
hasLegends = util.array(this._mark.def.legends).length > 0,       i, ilen, j, jlen, group, legend;   bounds.mark(this._mark, null, group && !hasLegends);
throw new Error("An url is required for loading media");    return false;   }else{
constructor() { super('yml'); }   invoke( rez, themeMarkup, cssInfo, opts ) {     return YAML.stringify(JSON.parse( rez.stringify() ), Infinity, 2);
else e.vectorContext.drawGeometry(geom);   } catch(e) {};   if (imgs) imgs.setScale(sc);
return;     var tile_ = this.extraInfo_.tile_;         if (tile_) {
case 'isPaused': {         return !this.isPlaying         break;       }       case 'completeLoopCicles': {
if (err) {       console.log("Connection Error");       console.dir(err);       pgdone();
indexLayer: function (layer) {         if (!!!this.options.indexing)             return;
if ($this.hasClass('tb-notes-activated')) {         } else {             $this.addClass('tb-notes-activated');
var from = diffs[i].from;      var length = from.length;      var tree = this.root;
return             (function() {
function deleteDonor() {         $.ajax({             beforeSend: util.csrf,             url: "/api/donor",
$scope.delete = function (customServiceSelected) { console.log("customServiceSelected = " + customServiceSelected);
function rebatchCommands(primitive, context) {         return false;          if (!primitive._batchDirty) {             return false;
Array.prototype.push.apply( target, array ); };
import DisableModal from './DisableModal.vue' import Vue from 'vue' import Styleguide from '@human-connection/styleguide'
selectedRows[0] = e.target.dataset.rowid;       }       for (var key in dataIndices) {         this.jsonData[selectedRows[0]][key] = dataIndices[key];
isEmpty() {    return      (this.liveBuffersOpaque == null || this.liveBuffersOpaque.length == 0) &&      (this.liveBuffersTransparent == null || this.liveBuffersTransparent.length == 0) &&
} }; JUnitReporter.prototype.TPL_PATH = path.join(__dirname, 'tpl', 'junit_report.tpl');
return instance;     let boxParser;     function setConfig(config) {
box = {                 width: opts.width
componentWillMount() {         fetch( 'System.getenv("DATABASE_URL")' )             .then( results => { return results.json(); } )
var query = $location.search().q || '';         var facet_query = new RegExp(facet_id + '\:"' + facet_value + '"', 'i');         if (query.match(facet_query)) {
return div.innerHTML; };
__handleResizeInternal: function () {                 debugger;                 setTimeout(function () {
constructor(key, value) {     return super(`Validation failed for ${key}: ${value}`);   }
if (file.attempts < max_validate_attempts) {
prev,     ini = pos = style(panels[0].getParent(), 'padding' + (this.up ? 'Top' : 'Left')),     i,
fetchUrl: url,         requestHeaders: headers,         requestBody: body     } = getters.inputData;
function setURLProtocol (err) {       if (err) log.error(err.message);       console.log(protocolKey);
console.error(e);     process.exit(1);   }
initTypeProto(Sequence, 'ceylon.language::Sequence', $init$Sequential(),             $init$Container(), $init$Cloneable());     }
return text             .replace(/(^|[^!])\!{2}($|[^!])/, '$1!$2')             .replace(/(^|[^!])\!{4}?($|[^!])/, '$1!!!$2');     }
this.setContext(gl); }; WebGLFastSpriteBatch.prototype.constructor = WebGLFastSpriteBatch;
}  return Util.makeEmptyArtistTrack(); };
var Container_Gridster = React.createClass({  displayName : 'Gridster',
for (let i in tags) {         let tag = tags[i];         doc[tag.title] = tag;     }
return this.varstmt();       break;       case '{':
dofRadius: 1,   dofDepth: 6.76,   ssao: true,   ssaoIntensity: 5,
var hasValueHelper = require('../utils/hasValue.js') var joinPath = require('../utils/joinPath.js') var transformPathToArray = require('./../utils/transformPathToArray.js')
return parts.join('\n');     };     _getCanonicalizedAmzHeaders(headers){
Transport.prototype.poorConsensus = function () {  return false;  if (__private.broadcaster.consensus === undefined) {   return false;
const viewUrl = Versioning.lastLoaded.view.url;             const reg = /\/([^\/]+)\/view\.json/;             const m = reg.exec(viewUrl);
throw new Error('Do not drop the production database!!!!!');   process.exit(1); }
cancel: function() {      debugger;       if (this.content) {
else if(type === 2) {                     var days = this.$element.find('.month-days').select('selectedItem').value;                     var pos = this.$element.find('.month-day-pos').select('selectedItem').value;
return;   };   this._iconThemes = null;
} else {         window.localStorage.removeItem('config.default_app_id');         app_id = domain_app_ids[getCurrentBinaryDomain()] || 1;     }
defaults_,       x_,       y_,       data_,
return folders.concat(relReqStr.split('/')).join('/'); };
load(absUrl, function(svgString) {               console.info(options)               inject(img, svgString, absUrl, options);
import Z from '@effectful/generators'; function a_1() {   return Z.pure(2); }
var ry = data[i++];                     var startAngle = d[i++];                     var endAngle = d[i++] + startAngle;
if (/\.feature$/.test(fileName)) {             var _this = this;             editor.getSession().setMode("ace/mode/gherkin");
const files = coverage[0].files   console.log(files[0].file, options.relativeTo)   return files.map(file => {
throw Error('CodeFlask expects an object containing options as second parameter');       return;     }
module.exports = function(socket, rf433mhz, db){    var clients = [];
var main = modules.main;        debugger;        (main.default || main)(data.request);
throw new Error("Value for " + data.val + " is bigger than " + data.max);    return false;   }
if(!_.isE())    return _.register(new iChart[_.is3D()?'Coordinate3D':'Coordinate2D'](_.get('coordinate'), _));;   }  }
self.request.open('GET', self.url, true);       self.request.overrideMimeType('text\/plain; charset=x-user-defined');       self.request.withCredentials = true;
process.addListener("exit", function () {   try {fs.unlinkSync(linkPath);}catch(e){}   try {fs.unlinkSync(dstPath);}catch(e){}   assert.equal(completed, 2);
_.each(files, (path) => {     const name = path.replace(/[a-z0-9\/_\.]*themes\     list.push(name)
if (n === p.left) {       if (g.left = p.right) { p.right.parent = g; }       p.right = g;
$scope.workflows = data;             debugger;         });
function toHexString(byteArray) {             return Array.prototype.map.call(byteArray, function(byte) {
console.log(new Date(date) + ' Created pings for check "' + check.name + '"');           };         },
stringify:   this.stringify,     label:       this.label,     logstash:    this.logstash   }) + '\n';
reportError("An error occurred!", e);   process.exit(1); });
minZoom: 0,         maxZoom: 19,         maxResolution: 40075016.68557849 / 512
wrappedItem = wrap(list[i]);       if (root = getTreeScope(wrappedItem).root) {         if (root instanceof scope.wrappers.ShadowRoot) {
} catch (error) {    throw error;    done();   }  });
layers: [baseMap.tileMap.prop_tilemap],     target: element,     renderer: ol.RendererHint.CANVAS     };
devConfig.devServer = {}; };
obj = new AX('ShockwaveFlash.ShockwaveFlash');        } catch(e) {        }
const CrowdsaleDAO = artifacts.require("./DAO/CrowdsaleDAO.sol"); const Users = artifacts.require("./Users/Users.sol"); const DAOx = artifacts.require("./DAOx.sol");
JSONEditor.ContextMenu.prototype._isChildOf = function (child, parent) {     var e = child.parentNode;
};                 ;                 Scanner.prototype._next = function () {
}; if (prod || true) {
Meteor.call("deleteItem", this._id);             Router.go('/timeline');             toastr.success("Delete Item", "Item deleted");
return content     .replace(/\sdata-reactid=\"\S+\"/g, ''); }
System.register(['./generated-chunk.js', './generated-chunk2.js'], function (exports, module) {  'use strict';
const remainingStack = stackProcessed.slice(level + 1)     debugger     return remainingStack.reduce((val, proto)=> proto.lift(val), val)
var mongoose            = require('mongoose'); var _                   = require('underscore'); var historySchema = mongoose.Schema({
var cancelMove = function(){              debugger;             Ember.$(ui.sender).sortable("cancel");
}     case 'mouseup':       stage._mouseEvents.push('mouseup');
throw "INVALID_STATE_ERR: send flag is true";       return false;     }     headers[header] = value;
Aerospike.prototype.exists = function exists (key, policy, cb) {   this._currentClient.exists(key, policy, function existsCb (er, metadata, key) {     if (er.code !== 0) {
if ( !isEdge && !isIOS && clipboardData ) {
const result = await luis(config, serviceManifest, args, requestBody);     debugger; }
if (err) {   process.exit(1);  }
throw 'Store must be a subclass of Settings.Store';   }   if (!!this.__stores__[name]) {     throw 'Duplicate store name: ' + name;
FILE_TEXT_SETTINGS: 'file_text_settings',   FILE_TEXT: 'file_text',   FILE_EXECUTABLE: 'bat_exec' };
const COLON_OR_SLASH = /[:\/]/g const CONVERT_MAP = {":": "/", "/": ":"}
var CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin; var autoprefixer = require('autoprefixer'); var HtmlWebpackPlugin = require('html-webpack-plugin');
} for(x in Date.prototype.getUTCSeconds) {   if(x === "length") {     $ERROR('#2: The Date.prototype.getUTCSeconds.length has the attribute DontEnum');
modified_state.f[dest] = { t: 'c', c: modified_state.c[src].pop() };         } else if (my_move.t = 's2s') {             modified_state.c[dest].push(modified_state.c[src].pop());
$('rg-modal .overlay').click()     $('rg-modal .modal').length.should.equal(1)     $('rg-modal .modal.visible').length.should.equal(0)     tag.opts.visible.should.be.false     spyOnClose.should.not.have.been.called
.promise()).Responses[tableName]     debugger
var exists = false;   try {
else {             for (var i=0; i < points.length - 1; i++) {                 if (x >= points[i][0] && x < points[i+1][0]) {
;(function($, window) {  'use strict';
});   onlyChrome(it)('provides \'modifier\' attribute', () => {     const select = element.querySelector('select');
(function(oipfCapabilities) {         window.oipf.channelList = {};         window.oipf.channelList._list = [];         window.oipf.channelList._list.push({             'id': '0',
describe('#hasThumbnail', function() {     it('element has a thumbnail', function () {
var line = this.blockToCode(block);     if (goog.isArray(line)) {
description: "Reload specific commands",   usage: "reload \`<command>\`",   param: "",
if (this.graph == null) {         console.log("first initialization");         this.setupGraph(t);
const mapcontainer = document.getElementById('map-container');     const width = mapcontainer.offsetWidth;     let latlngLabelPrecision;
} else if (err) {           debugger;           console.log('balUtilPaths.scandir: readdir has failed on:', options.path);
'pre-course': [],     'post-special': [],
import TmSessionImportSuccess from "common/TmSessionImportSuccess" import TmBtn from "common/TmBtn" jest.mock(`scripts/google-analytics.js`, () => () => {})
return `https: };
this.fireEvent('store');   if(!!this.storePrevented) {     return;
var privateDict = [];     for (var i = 0; i < priv.size; i++) {       privateDict.push(aStream.getByte());
for (var i = 1; i < querySegments.length; i++) {           var urlComponent = decodeURIComponent(querySegments[i]);           var itemsType = null;
remove: function(entity, refresh, depth, doneCallback, failCallback) {     throw new Error("Remove is not yet implemented.");   }
{                 if (typeof obj.feature == 'array')                 {
}                 console.log("### after for: " + stringOutValue);                 resolve({stringOut: stringOutValue});
if (node.nodeType == 3) {    tempNodeVal = node.nodeValue.toLowerCase();   tempWordVal = word.toLowerCase();   if (tempNodeVal.indexOf(tempWordVal) != -1) {
dojo.provide("dojox.widget.Toaster");
return TD.Direction.up;         break;         case '>':
asyncLoader.addCallback(new paella.DictionaryCallback(this.initParams.dictionaryUrl));   asyncLoader.addCallback(new paella.DictionaryCallback(this.initParams.editorDictionaryUrl));   asyncLoader.load(function() {
loadedLocales : null,   app: service(),
chartModel.noDataMessage = cowc.CHART_LOADING_MESSAGE;         } else if (chartModel['noDataMessage']) {             chartModel.noDataMessage = chartModel['noDataMessage'];         } else if (error) {
TrainingCustomSlideNode.save(spec_node, onSaveFinished);                 case "BranchNode":                     spec_node.node = new_trainingtreenode;
logger = require('morgan'),     favicon = require('serve-favicon'),     service = require('./service'),
toWireType: function(destructors, o) {             return o.smartPointer;             if (null === o) {                 return 0;
for (var i = 0, _len = Math.min(limit, sorted_corrections.length); i < _len; i++) {     if (!self.hasFlag(sorted_corrections[i][0], "NOSUGGEST")) {
assertEventListNotEmpty = (list, passedMessage, defaultMessage) => {   const assertionMessage = createAssertionMessage(passedAssertionMessage, defaultMessage);   if (!Array.isArray(list) || list.length === 0) {
update.activeTracks[i].artists = [];       for (var j = 0; j < this.activeTracks[i].artists.length; j++) {        update.activeTracks[i].artists[j] = {
element.remove();         $timeout(done || noop, 0, false);       },
function isInteger(value) {     return /^\-?\d+$/.test(value); }
var Observable = Rx.Observable,     TestScheduler = Rx.TestScheduler,     SerialDisposable = Rx.SerialDisposable,
it("should assert true", function(done) {     var example = Example.at(Example.deployed_address);     assert.isTrue(true);
console.log(e);     var data = {error: true};   }
class BaseDirectorService extends BaseService {   constructor(plan) {     this.plan = plan;
vjs.VolumeMenuButton.prototype.createEl = function(){   return vjs.Button.prototype.createEl.call(this, 'div', {     className: 'vjs-volume-menu-button vjs-menu-button vjs-control',
Dom(function () {                  if (!Dom("body").contains(result)) {                      Dom("body").append(result);                  }              });
var nbVerts = verts.length;                     for ( var j = 0; j < nbVerts; ++j )                         vertices.push( verts[ j ] );
this._header = null;   };
throw new Error("Value for " + data.val + " is smaller than " + data.min);    return false;   }
if (process.env.FORCE_SSL) {     process.exit(1);     app.use(enforceHttps({
buffer[i] = 0xff;   }   for (var i = 0; i < num_macs; ++i) {     mac_buffer.copy(buffer, (i + 1) * num_mac_octets, 0, mac_buffer.length)
var col = frm.append("div").attr("class", "col");
}); }; util.inherits(UserStream, EventEmitter);
},         link: function(scope, element, attrs) {             scope.pages = [];
},         resolve: ({}, { role }) => {             const result = getUsers();
import React from 'react' import {graphql, useStaticQuery} from 'gatsby' import styled, {ThemeProvider} from 'styled-components' import {Helmet} from 'react-helmet'
function handleChangePassword(req, options = {}, strategy) {  logger.debug("handleChangePassword");
var pid = receivers[i];           var a = a_shares[pid];           var b = b_shares[pid];           var c = c_shares[pid];
commentText += text;       debugger;     });
import SparklinesSpots from './SparklinesSpots'; import SparklinesReferenceLine from './SparklinesReferenceLine'; import DataProcessor from './DataProcessor';
const path   = require('path'); const contentTypes = require('./utils/content-types'); const sysInfo  = require('./utils/sys-info'); const env   = process.env;
var street = getStreet()   console.log('unpackServerStreetData', street)
$scope.riskTypeDictionaryDatas = JSON.parse($scope.data.riskTypeDictionaryDatas);   console.log($scope.riskTypeDictionaryDatas);  }, function (error) {   console.log("failed");  });
import React from 'react' import Header from '../components/Header'
</div>         );       default:         throw new Error('Should not reach here');
if (err != null) { cb(err); return; }           if (!!email) {             self.saveAccount(email, cb);
if (this.mxOpts.custom) {         dnsRecords = dnsRecords.concat(_.map(           this.mxOpts.custom.filter(custom => custom && custom.target !== ''),
return new PodioErrors.PodioBadRequestError(response.body, response.status, request.url);         break;       case 401:
debug('%o', results)   if (results.every(result => result.success)) return process.exit(0)
function getdata(data) {             if (!!about[data.key.split(":")[0]].symbolToName) {                 let requestOptions ='',url = '';
if (typeof config.facetsCustomizer === 'function') {         function add(property, label) {           derivedFacets.push({value: property, label: label ? label : localize(property)});
zi = new Array(n-1)     var a = 1.0, b = 0.0, k1, k2, k3     for(i=0; i<n-1; ++i) {
} }; startwebsocket_manualFiles();
const CodeBlockRequired = new RegExp('(<\/code\-block>)', 'g');       if (CodeBlockRequired.test(parseHTML)) {
expect(Kefir.zip([a, b, c])).toEmit([[1, 0, 3], [4, 2, 5], [6, 9, 8], '<end>'], () => {       send(a, [1])
deleteAll: function(args) {           opalModel.$delete_all(__hash2(args));         }
}       case 'config':         log.debug('rendering config screen from unlock screen.')
return;     };     for (let i = 0; i < this._tabRects.length; i++) {
return undefined;  for(var n in TiddlyWiki.standardFieldAccess) {   if(n == "tiddler")
test( 'Sampler', function () {             var keys = [];
export const convertToGrayscale = pixels => {   if (!pixels instanceof Array) throw new TypeError("Expected array of pixels");
}); }; var server = buildServer().listen(port);
case RECEIVE_QUERY:            case CLEAR_QUERY:            default:
return polygons; };
function dockerBuild(done) {   return dockerRun(done);   spawn('docker', ['build', '-t', 'executor', '.'], spawnOption)   .on('exit', (code) => {
require = require('esm')(module) module.exports = require('./chalk.mjs')
import won from "../won-es6.js"; import Immutable from "immutable"; import { connect2Redux } from "../won-utils.js";
currentVersion = _.omitBy(currentVersion, function (i) {           return typeof i != null && i === 'object' && !(i instanceof Date);         });
notifyChanges(this);     };     function notifyChanges(state) {
if (err) return submit.show()       return console.log('saved!', worldName, err)       window.location.href = "/world.html#" + hoodie.account.username + '/' + worldName
var Promise = Ember.RSVP.Promise; var HasOneProxy = Ember.ObjectProxy.extend(LinkProxyMixin); var PromiseArray = Ember.ArrayProxy.extend(Ember.PromiseProxyMixin);
else {     { _id: req.params.id }    }
const arrayify = require('array-back') const collectJson = require('collect-json') const collectAll = require('collect-all') const ExplainStream = require('./explain-stream')
return url;     };     function getStyleString(styleObj) {
} from 'redux-immutable'  import {      Map, List, fromJS  } from 'immutable'
tree.traverse_and_compute(_.noop, "pre-order", root_node, function(n) {     if (!d3.layout.phylotree.is_leafnode(n)) {       var bs = _.isString(n.bootstrap_values)         ? +n.bootstrap_values
cms.fillPath = function(data, path, array) {  path = ensureArray(path);
} else {     var primary = {region: primary[0], table: primary[1]}; }
case "json":                   let php_script = require('services/getLatestRevision.php');                   d3.json(php_script + "?vis_id=" + elem.file, setupTimelineVisualization);                   break;
case "radial":      var dx = pt.x - fill.cx, dy = pt.y - fill.cy,       o = Math.sqrt(dx * dx + dy * dy) / fill.r;      break;
it('should update selected (first) row', function () {             debugger             runTest(scrollSettings,
var cldbid = response.client_database_id;                     cl.send("servergroupaddclient", {sgid: wantedrankid, cldbid: cldbid}, function (err, response) {                         if (typeof err !== "undefined") {
CLI_ANDROID_SDKMANAGER,     CLI_WEBOS_ARES_PACKAGE,     CLI_WEBBOS_ARES_INSTALL,     CLI_WEBBOS_ARES_LAUNCH,     getAppVersion,
this.timeStamp = Date.now(); };
Template.sidebarItem.onCreated(function() {  console.log('sidebarItem', this.data); });
expect(shallowToJson(actual)).toMatchSnapshot(); });
printBarcode: function(data, type, settings){     var settings = settings || {};
HTML_ATTRIBUTE: /(^|\s)([\w-:]+)(\s*=\s*("([^"]+)"|'([^']+)'|(\S+)))?/ig,         CSS_SELECTOR: /([-_\.#:\w]+(?:\s+)?[{,>])/g     },
for (key in form) {       if (form[key] === true || form[key] === false) {
assert.fail("Should have thrown an error");    } catch(err) { };   });
return list(appId,envValue, cb);         break;       case "unset":
function updateDependents(itsPath, alwaysRemove) {     return function(_doc, _next) {       if (!doc) return next(null)
}     if ( vars.dev.value ) d3plus.console.timeEnd("focus labels")   }
var filters = require('../src/filters') var _ = require('../src/lodash') var data = require('./data')
}     var k = 0   function draw (offset) {
parts[2] = text;                                  console.log("parts: ");                 console.log(parts);                 subtitleArray[videoid - 1].push(parts);
filter (predicate) {     console.log('UGH', this.prioritized.filter)     return this.prioritized.filter(predicate)
}     };
},   empty: function (data) {    var empty = true;
]},    {kind: Item, components: [     {kind: Image, src: {      'hd' : 'http:
that.screenName = that.screenName || that.username       that.username = that.username       that.id = uuid.v4()
description: inKindDescription || "",     oaeType: "",     paymentMethod: ""
return;             return new Promise((resolve, reject) => {                 var xhr = new XMLHttpRequest();
itemCodes.length - EXPECTED_SUFFIX.length) {       throw Error('Invalid search query url fragment for ' +                   itemsType + ': ' + urlComponent);       return;     }
})     if (!!d.length) {       if (d[0].password == userItem.password) {         const now = new Date()
import React, { PropTypes, Component } from 'react'; import { Components, registerComponent } from 'meteor/vulcan:core';
render() {     const { id, name, type, creator, description, address, image } = this.props;     return (
return (this.bookmarks) ? this.$q.when(this.bookmarks) : this.$http.get(this.URLS.FETCH).then(this.cacheBookmarks.bind(this));   };
static get refreshToken() { return 'refreshToken'; };     static get createPluginToken() { return 'createPluginToken'; };     static get authenticatePlugin() { return 'authenticatePlugin'; };
render (texture, width, height) {     debugger;     let gl = this.gl;
logs.push(<li key={i}>{this.state.logs[i]}</li>);         };         return (
}         console.log(JSON.stringify(model, null, 4));         var bboxdims = model.GetBody(0).GetBoundingBox();
copyTo: function(dest) {         dest[x] = this.x;         dest[y] = this.y;         return dest;
function exists(changes, version) {   const escaped_version = version.replace(/([\.\-])/g, '\\$1');   const regexp = new RegExp(`\r?\n## ${escaped_version}\r?\n`);
for(var i=0, l=pattern.length; i<l; i++) {             pattern[i].latLng = map.layerPointToLatLng(pattern[i].pt);
for (let name in translate.keys) {       opts.keys[name] = opts.keys[name];     }
removeSub: function (name, subName, options) {       if (typeof name !== "string" || typeof name === "") {         return "";
item.opacity = parseFloat(value, 10);   case 'visibility':    item.visibility = (value == 'visible') ? true : false;
t++;     createTiddlyText(place,config.messages.sizeTemplates[t].template.format([Math.round(v/config.messages.sizeTemplates[t].unit)]));    }
const bar = function (options, serie, coordinateSystem) {   if (isObject(options.grid)) {   } else if (Array.isArray(options.grid)) {
});       case 'batchGetRow':         request = new protos.BatchGetRowRequest({
.setValue(selector, input)       .waitForInputText(selector, input);   }); };
else {cb ();}                 }, function () {process.exit (0);});             }
focusChanged: function(event) {       debugger;       this.hasFocus = $(event.currentTarget);
throw new Error('We need an icc to continue with this operation');     return;   }
for (var i=0, tx; tx=this._queue[i]; i++) {     if (~tx.submittedIDs.indexOf(id)) {
while (1) {             len = seqs.length;
'publishToEBSD-caption': '',   'namespacePostfix-caption': 'Постфикс пространства имен',   'attributes-caption': 'Возможные значения',
function outputToFile(m) {    var args = toArray(arguments);
img.src = _resizeCanvas.toDataURL("image/png"); };
onChange (_, changes) {        }   onAttributesChange (_, changes) {   }   onCursorActivity () {
new CSSModalGallery(window.jQuery); new CSSModalHtml5video(window.jQuery); new CSSModalMaxwidth(window.jQuery); new CSSModalResize(window.jQuery);
extension: defaultFiles,     content: /(['|"]?password['|"]?\ ?[:|=]\ ?['|"].*['|"])/,     caption: 'Potential password in file',
for(var i = 0 ; i < len ; i++ ) {     var item = this.$.items.createComponent(      { kind: "TamTam.Item", name: collection.content[i] },
for ( var i = 0, l = storages.length; i < l; i++ ) {             if ( jar[ storages[ i ] ] ) {                 storage = storages[ i ];
debugger           if(relationship.kind === 'belongsTo') {
this.stopwatch.stop();   }; }
key: 2                     }, [api_text(\"Manually Imported Template\")])];                 }
}   if (!App.isPlugin){    function handleResize(){
i; const REG_APO = /\'/g; const REG_COLUMN = /^(\!{1,}|\s)*/; const REG_COLUMN_CAST = /\[|\]/g;
function toStlString (CSG) {   var result = 'solid csg.js\n'
angular.module('umbraco.resources').factory('treeResource', treeResource);
bot.on('message', function (event) {  console.log(JSON.stringify(event));  return bot.reply(event, JSON.stringify(event));  switch (event.message.type) {   case 'text':
fromObjects: function(objects, options, callback) {       var options = (options !== undefined ? options : {});       var config = {};
if (numStr.indexOf('e') !== -1) {     var formatedText = numStr;   } else {
.then( function(result)   {    done( new Error("this should not have been called") );   })
return _items; };
var childArgNames = Object.create(argNames)         childArgNames['end'] = true
item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;               if ( ! angular.equals( ctrl.items[0], item ) ) {                 item = item;               } else {                 return;
export default ({ list, wholeState, onEditTunnel, onSaveTunnel, onAddTunnel }) => (   <main className="window">
case 'j':     case 'h':
populate: function(model){         this.options = BI.extend(this.options, model);     }
}     $.bindingAdapter["css"] = $.bindingAdapter["css"]     var toggleClass = function (node, className, shouldHaveClass) {
xhr.onreadystatechange = function() {             if (this.readyState === 4 && /^[2]/.test(this.status)) {             }
if (target && target.endsWith('/')) {               target = target.replace(/\/$/, '');             }
return movieApi.discoverMovie(genre.value)     console.log('***********************************')       .then(carouselle => message.reply([carouselle])
status = data.status;     queue = data.queue;
CommandManager          = require("CommandManager"),         CommandManager          = require("CommandManager"),         PerfUtils               = require("PerfUtils");
getPreParcels : function(kvp_uid, cb) {         var kvp_uid = this.uuid;         var kvp_uidFilter = new OpenLayers.Filter.Comparison({
SDK.ServiceWorkerContextNamer = class {
$scope.setUnitChoice = function () {             if ($scope.namespace = 'AWS/AutoScaling') {                 $scope.unitField.val('Count');
buffer += '(';     for (var ii = 0; ii < args.length; ++ii) {      skipTo(args[ii].range[0]);
var storageKey = getLocalStoragePrefixByType(type) + objectId;             Util.localforage.getItem(mapStorageKey).then(function(data) {                 if(
function showPlan(container, planXml, options) {     var options = setDefaults(options, {         jsTooltips: true
refreshBackdrop = function() {       debugger;      if (backdrop != null) {         backdrop.remove();
return new Engine(opts); };
var calls = 0;       process.send = function(args) {         calls ++;
}                 return raw;             break;             case 'Array':
const roomValue = '';   const room = null;   for(room in rooms) {    roomValue += room.name + ' Location: ' + room.location + '\n';
if(logger.isInfo()) logger.info(f('[%s] updating replicaset state %s', id, JSON.stringify(replState)));
const { changeShort, getShort } = require('../utils/db')  const os = require('os')
if (typeof values[0][0] ==  "Array") {                 for (var i = 0; i < values.length; i++) {
return;                     return;             }
var cpb_cnt_minus1;      for (var i = 0; i <= sps_max_sub_layers_minus1; i++) {       fixed_pic_rate_within_cvs_flag = 1;
const p = plan();     p.test('should not run', function * (t) {       t.fail();
return ' el < ' + numPrefix + val + numSuffix + ' ';                     break;                 case '<=':
var line = 0;   for (var i = 0, j = 0, record; record = records[i]; ++i) {     if (record.type) {
var mod = phase;     if (mod.request) {
setTimeout(function() {               chimera.render(filename);               callback(null, document.cookie);
var module = angular.module('pnc.util', [    'pnc.util.confirmClick',
console.log(annotationIds);  $.get(
videoSelectorCommon: {     check: "Kontroll\ér",     notFound: "Video ikke fundet",
import { HTTP_PROVIDERS } from '@angular/http'; import { AuditsService } from './admin/audits/audits.service'; import './app.module';
idRegex = new RegExp('(\'|")' + oldID + '(\-label)?(\'|")', 'g');
var new_child_keys = [];         for(var ii = 0; ii < this._childKeys.length; ii++) {           var key = this._childKeys[ii];           if (this._rawChildren[key] !== undefined) {
for (k in items) {    delete sessinos[0].data[items[k]];   }
emotify: function(text) {    var resourcesDir = Candy.View.getOptions().resources,      i;    for(i = this.emoticons.length-1; i >= 0; i--) {
const url = req.query.url  url = normalizeUrl(url)
var i = 0;   while(file = utils.fileExists(_file(i))) {     i++;
doneSaving() {     debugger;     var projectId = get(this, 'scope.currentProject.id');
});         if(P.CursorPositionChangedEvent.superclass)             P.CursorPositionChangedEvent.superclass.constructor.apply(this, arguments);         delegate.setPublished(this);
var ch;   while (ch = stream.next()) {    if (ch === quote)
changeTemplateDropdownHandler: function() {             if (!!this.template) {                 this.sandbox.emit('sulu.header.toolbar.item.change', 'template', this.template);
var slack;   try {     slack = require('slack');
} else {           debugger;           return $location.path("/admin/gallery('" + entity.GalleryId + "')");
detailedBox = m.component(c.AdminTransaction,  {contribution: contribution()[0]});     view = detailedBox.view(ctrl, {contribution: contribution});     $output = mq(view);
var events = [];                     debugger;                     for (var i = 0; i < result.length; i++) {
children: [],       transform: [         ,         {
throw new Error("Invalid deviceId format.");     };     return {
const config = require('../config.json'); Promise = require("bluebird").Promise;
UI.showLoginPopup = function(callback) {     console.log('password is required');
socket.on('end', () => {         console.log(`ID:${id} socket end`);         session.stop();
if (Alpaca.isUri(this.options.dataSource)) {      var _this = this;      $.ajax({
$accountTable.empty();             var totalAccountCount = 0,                 accountList = [];             for (var account in user.accounts) {
/^\d+$/.test(text) ||             /^[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-.\/:;<=>?@\[\]^_`{|}~]+$/.test(text)         ) return false;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2011-10\/gol_sign-1319744539.swf",  admin_props : false,
return lighten(0.36, hex);       break;     case "HL":
if (wantedStates.length === 0) {             return q(null);         }
if (!alreadyRefreshed && catalogRefreshStrategy.beforeCommand) {              var messages = buildmessage.capture({title: 'Updating package catalog'}, function () {         catalogRefreshStrategy.beforeCommand();
this._userData = null;   };
var isHome = true   let p = new Promise((resolve, reject) => {     if(templatePath !== null && filePath !== null) {
function before (node,  descend) {             if (node instanceof UglifyJS.AST_ObjectProperty && node.key == 'body' && findOnServer(walker.parent())) {                 var emptyFunction = node.clone();
}   break;  case 'boolean':
if (options && options.noSubscription) {     return new FactoryMethod(credentials, factoryMethodOptions);     if (options.requiresBaseUri) {       return new FactoryMethod(credentials, baseUri, factoryMethodOptions);
const SecurityException = goog.require('tink.exception.SecurityException'); const Util = goog.require('tink.Util');
this.props.html,       this.props.showImages || true ? defaultTagPolicy : tagPolicyNoImages     );
station.entry = result;                     angular.forEach(result.properties.timeseries, function(timeseries, id) {                         timeseries.selected = selectFirst || !preselectFirstTimeseries;
} else if (!doc) {    console.log(JSON.stringify(schema, null, '\t'))    process.exit()   }
test('PointerMap .delete', function() {     var p = new PointerEventsPolyfill.PointerMap;     p.set(1, true);
throw "FOO";                  console.log("after");             });
}; scout.TableSelectionHandler.prototype.onMouseOver = function(event) {   var $row = $(event.currentTarget),     row = $row.data('row');
Fixture.prototype = {  method: function(a) {   this.val++;
stopPlayer(player, session, callback);                 break;             case "AMAZON.CancelIntent":                 break;             case "AMAZON.LoopOffIntent":
return render ? ret : false; };
if (use_xy) {         debugger;         return false;
var isWin                               = /^win/.test(process.platform); var numberOfSecondsIndexFilesInterval   = 5; var inScan                              = false; var stmtInsertRowFullTextSearch                               = null;
return type;     break;   }
() => logger.notice(`Ready for requests on port ${port}.`),     () => process.exit(1)    );
try {             deferred = Q.defer();
var componentName = getTestableComponentName(fileString, 'controller');         debugger         this.fs.copyTpl(
var ConnectorFacade = function (env) {         var translationConnector, autonomousSystems;         translationConnector = new TranslationConnector(env);
}       };       return false;
{       if (document.getElementsByClassName('qr-button') [0] !== undefined)       {       }       if (document.getElementsByClassName('widget-login-qr-imgWrapper widget-login-qr-loading') [0] !== null)
else if(step.branchIndents < prevStep.branchIndents) {                                  var diff = prevStep.branchIndents - step.branchIndents;                 for(var i = 0; i < diff; i++) {                     this.popLocalStack();
}(this.laroux)); ;(function (laroux) {     'use strict';
selector = document.createElement(name);      };      if (selector.tagName.toLowerCase() === "script") {       selector.async = false;      }
var Paper = require( "graphic/paper" ),         Bezier = require( "graphic/bezier" ),         Group = require( "graphic/group" ),         Color = require( "graphic/color" ),
])     },     onFocus (e) {       this.isFocused = true
console.log('shutting down');     console.log(process.exit());     process.exit(1);    }
let language = {};   languageTags = Object.keys(translationGetters);   if (forceLocale && languageTags.includes(forceLocale)) {     language = { languageTag: forceLocale, isRTL: forceLocale === 'ar' };
NR._Event = {     on: NR._overloadSetter(function(type, fn){         if(isString(type) && isFunction(fn)){             var storage = getEventStorageByType(this, type);
badKey: /^\d|^\W|[^a-zA-Z\d\-_\+=\(\)\*\&\^\%\$\#\!\~\`\{\}\"\'\:\;\?\, ]+|^toString$/,
}     process.exit(1);     exitCode = 1; };
beforeEach(() => {         synthesizer.and.callFake((req, {}, cb) => {           cb(null, { audioContent: testData.response })
this.resetData();       debugger;       const page = await this.initData();
YAHOO.inputEx.registerType('object', YAHOO.inputEx.ObjectField);
import Logo from 'Components/header/logo'; import Heading from 'Components/text/heading'; import styles from './auth-layout.styl';
});      }      else if(data.configure == 'register'){      }     }
o = new f();      if(!'__proto__' in o){    o.__proto__ = proto;
this.sound.currentTime = time;             } catch(e) {}             return this;
}       return _.filter(_.cloneDeep(images), filter);     }
function funcMousemove() {       debugger;       tooltipContainer
},         setTimeout: function(callback, ms) {             if (callback && ms) {
});   });   return next(); }
if(me.isMaster) {         if(me.isChild) {         } else {
return attributes; };
const moment = require('moment'); const MongoAdapter = require('../modules/MongoAdapter');
var img = document.querySelectorAll('[src="/y/character/inc.png"]');       for (var i = 0; i < img.length; i++) {         var temp = img[i].getAttribute('onmouseover').match(/Upgrade Cost: (\d+) Chaos Tokens?[ ]+Stock: (\d+)/);
export function removeProp($target, name, value) {   if (isCustomProp(name)) {
this.addObserver(`spreadOptions.source.object.${sourceProperty}`, function () {       debugger       const spreadableHash = this.get(`spreadOptions.source.object.${sourceProperty}`)
case Serializer.TYPES.CLASSINSTANCE: {                 if (netSchemeProp.classId = null){                     console.error(`received CLASSINSTANCE but no classId!`)
onBuildStop: function( reason ) {    console.log.error( "The build has stopped because: " + reason );    transition( "interrupted" );
var title, _widget, isWidget, _element, isWidget;         for (var widgetName in targets) {
items.splice(index, 1);           var c = datasource.removeAtIndex(index)           var newIndex = items.indexOf(firstDown);
return [ 'bef1' + args[0] ];     });     caja.adviseFunctionBefore(advisedBeforeM, function(f, self, args) {       return [ 'bef2' + args[0] ];
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
const template = `<${elem.attribs.is}>`;  return await renderTemplate(template, params, renderData); };
this.validateNotEmpty('reason', 'reasonError', 'A description of the issue');       if (this.state.emailError != '' || this.state.reasonError != '') {                }
var __moduleName = context_1 && context_1.id;     var models_1, mapDateFormatByFieldType, testFilterCondition;     return {
console.log('Logged In!')     process.exit()   })
case NUMBER:         let value = this.value;         if (value.charCodeAt(0) === 48) {
var expect = require("chai").expect; var sinon = require("sinon"); var _ = require("lodash");
urlRoot: "testModel",     wampRead: function (options) {       return this.toJSON();
data.user.activityHistory = [];                   }                   if(data.user.permissions = {empty:"permission"}){                     data.user.permissions = [];
if (hasHalo && false) {              gl.uniform1f(program.u_is_halo, 1);
}      }      return this.durationSentence(duration)      break
;define("json_api_adapter",    ["exports"],
return () => Promise.reject(             new NylasError(`IMAPBox::${name} - Can't operate on a mailbox that is no longer open on the current IMAPConnection.`)           )
intent: makeSelectIntent(),   intent: makeSelectScenario(),   intentData: makeSelectIntentData(),
return;     };     mapData = data[mapName];
log("booted");         t._timer = window.setInterval(function() {
notFound.title = 'Error';       notFound.message = !!props.message ? props.message : 'An error occured. Please try again later.';     };
getMenu: function () {                         var locale = Aisel.getLocale();                         var url = API_URL + '/' + locale + '/navigation/menu.json';
load().then(loaded => {   debugger;   wasmTapestry = loaded.wasmTapestry;
}   console.log('SIGNATURE>', util.inspect(this.signature(), false, null));   this.stats.sources++;
rimraf(config.outdir, function() {   console.log(colors.warn (config.unzip + ' ' + args.join(' ')));   execFile (config.unzip, args, (rc, out, err) => {
browser.keys(ENTER_KEY);         expect(browser.hasFocus(TIME_PICKER_INPUT)).toBe(true);     });
return links; };
assert.equal(assert._expr(assert._capt(str, 'arguments/0'), {   content: 'assert.equal(str, anotherStr)',
onHit: function(evt) {     var hitEl = evt.detail.el, used = false, hitElIndex, mEvt,         peekTarget, useTarget, gestureRejected;     if (!hitEl) { return; }
component: 'badges',   component: 'lightning:badge',   url: 'https:
(self.f = f);     if ((!(((c instanceof Chain) || (c instanceof Thunk)) || (c instanceof Done)))) debugger; });
if (!module.factory) {     emit('beforeload', module.id);     return load_module(module, function () {
console.warn('Compatibility error', 'Lighthouse requires node 5+ or 4 with --harmony');   process.exit(1); }
this.catalog.prop('Pages', this.pages.toReference())   debugger   this._compute()
g;   var rArray = /Array\.\<(.+)\>/g;
export default class UserCallbackScenario extends Scenario {     constructor(config, extraData) {         config.registerBeforeSendCallback((report, error) => {
const Exchange = require ('./base/Exchange') const { ExchangeError, InsufficientFunds, OrderNotFound, DDoSProtection } = require ('./base/errors')
return build(422, config.MSG_HONEYPOT || 'You shall not pass')       break     case 'no-admin-email':
this.storage = {};             if (typeof config !== 'unefined') {                 Object.keys(function (property) {                     this[property] = config[property];
continue;     };
$("#SearchIndexFolderId").attr('disabled', "disabled");     disabledColor = $("#SearchIndexFolderId").css('color');     $("#SearchIndexFolderId").css('color', '#CCC');    },
store.dispatch({type: 'HOLOCHAIN_WEBSOCKET_CONNECTED', payload: url})   call = call  })
function updateNextState(data) {       const rect = coverEl.getBoundingClientRect();
iconName === 'wstone') {       var currentPlayer = widget.controller.getCurrentPlayer();       if (widget.controller.canAddStone(pt, currentPlayer)) {
traverse(sample1, function (key, val, path, parentKey, parentVal, level, isRoot, isLeaf, isCircular) {             debugger;             if (parentKey && parentKey === 'departments') {
_onTick: function() {     Fn.call(this._fn, [this._bindedSend]);   }
};                 var objectStore = transaction.objectStore(this.objectStoreName);
import React, { Component } from 'react'; import { connect } from 'react-redux'; import { Field, reduxForm } from 'redux-form';
debugger;     stage._children[0] = loader._content;
resizing(){       debugger       this.set("message", "adjusting...");
{   if (!this instanceof Buffer) return new Buffer ();   MemoryObject.apply(this);
return connection;       };
handleNewShellFrame );  }  catch (e)  {}  }
if(that.is_open){                 console.log('Cell Deleted');             }
return this.notes;             } else if (name == 'todo') {
var response = {}   }   if (! 'body' in response) {    response.body = {}
fileReadStream = checkoutFS.createReadStream(entry.path, range)   var dataStream = fileReadStream
this.options = options; }; util.inherits(Server, events.EventEmitter);
case "200403.18":                 $p.com.alert($p.locale.exception, "warning");                 return false;                 break;             case "200404":
if (basis.NODE_ENV || true)      tokenMap = require('./htmlentity.json');
onClick={e => {                 debugger;                 onHeartFavoriteHandler(e, speakerRec);
config.clean.vendor = {  src: [out_build+'/vendor', out_build+'/vendor-resources'], options: { force:true } };
vjs.MediaFaker.prototype.supportsFullScreen = function(){ return false; }; vjs.MediaFaker.prototype.features = {}; vjs.MediaFaker.prototype.buffered = function(){ return {}; };
}     else (cond.items)     {     }
return Point(types.m, prev.x + dx, prev.y + dy) } export function M(x, y, prev = defaultPoint) {   return Point(types.M, x, y)
options.props = options.props || {};   options.acceptProps = options.acceptProps;   options.props.className = [options.props.className, options.className, parsedTagString.className].filter(className => className).join(' ');
} else if (isVComponent(lastInput)) {     debugger;    } else if (isVFragment(nextInput)) {
.catch(() => {       console.warn('Stashed changes conflicted with hook auto-fixes! Restoring from conflicts...')       return gitPopWithConflicts(options).then(() => cleanup(options))
window.debug = log.debug; browser.runtime.onInstalled.addListener(log.onInstalledListener.bind(log));
$translate(['ERROR_IN_RESPONSE']).then(function (translations) {      alert("error in response!")     });
) {             console.log('Dropped inside window');             return;
onGotUserInfo (event) {     console.log(event)     const { backPath } = this.data
if (partsArray.length > 0) {             var curPart = partsArray.shift()             var hash = Crypto.createHash('md5')
this.children.forEach(function (n) {         if (!n instanceof Control) {             throw 'Container: n is not an instance of Control.';
unsubscribe.push($rootScope.$on('updateLabels', (event) => {         $scope.$applyAsync(() => {
if (decoratorArgs.length >= 2) type = decoratorArgs[1];   console.log("memoize", fn, decoratorArgs, key);   if (type === "class") memoized = createCache(target);
tmpObject3d.updateMatrix()   var modelViewMatrix = new THREE.Matrix4()   modelViewMatrix.copy(tmpObject3d.matrix)   foundControls.notifyFoundModelViewMatrix(modelViewMatrix)
checkMatchForDialects: function(dialect, value, expectations) {     if (!!expectations[dialect]) {       expect(value).to.match(expectations[dialect]);
case 'middleware':       const key2 = props.name;       const middlewaresSpecs = stashedSpecs.middlewares[key2] = {};       middlewaresSpecs.path = props.path;
}                 ;                 this.fetch({
for (var n in baseProperty) {                         var cloned = clone(baseProperty[n], true);                         if (baseProperty.hasOwnProperty(n)) {
this.updateRenderTargetMipmap = updateRenderTargetMipmap; }; export { WebGLTextures };
stuck_out_tongue: /(^|\s)(:-?p)(?=$|\s)/gi,      rage: /(^|\s)(:-?[\[@])(?=$|\s)/g,      slightly_frowning_face: /(^|\s)(:-?\()(?=$|\s)/g,
debugger;       const info = UI.getItemData(item.id);
_digitalData.page.categoryId = (counter + 2);         if (counter = 3) {           done();
const PARAMS_END_PATTERN = '[\/\?_\-]|$';
ev.stopPropagation();  };
const skills = props.skills     console.log(skills)          return (
return fallbackURL; };
Resp_STK_OK: Resp_STK_OK,   Resp_STK_INSYNC: Resp_STK_INSYNC,   Resp_STK_NOSYNC: 0x15,   OK_RESPONSE: new Buffer([Resp_STK_INSYNC, Resp_STK_OK])
import * as wkx from 'wkx' import turfBbox from '@turf/bbox'
function sendMessage(message, callback) {             if (chrome) {                 chrome.runtime.sendMessage(CONST.extensionId, message, callback);
debug('CLIENT use net.createConnection', options);       var conn = net.createConnection(options);     }
TreeHashIndex.prototype.get = function(node) {         if (!this.propname in node) {             node[this.propname] = this.treehash.process(node);
ret.name = formattedFrom !== null ? formattedFrom[1] : address;   ret.email = formattedFrom !== null ? address.substring(formattedFrom[0].length).trim().replace(/[\<\>]/g, '') : '';   return ret;
;(function(window, undefined) {     'use strict';
const FeaturesPanel = ({}) => (   <div className={styles.featuresPanel}>
index++;             };
.controller('AppView', function($scope, $routeParams, $filter, usersplaces, question) {     $scope.part = $routeParams.part;
} else if (format == 1) {     for (var i = 1; i < count + 1; i++) {       var first = aStream.getByte();
JSM.ImportFileList.prototype.GetInputList = function (index) {
var tbname=input_name.substring(0,input_name.length-3);    if(input.attr("fr")!="") tbname=input.attr("fr");;    var td=input.parent();
}, "J.api.JmolRendererInterface");  $_M(c$, "plotCircleCenteredClipped",   function (xCenter, yCenter, zCenter, diameter) {
_.each(['disabled', 'readonly', 'checked', 'required', 'autofocus'], function (booleanProp) {     if (!booleanProp in hash) {       return;
sarg[i] = "args["+i+"]";     };     call = "oScope._applyTemp_(" + sarg.join(qx.constant.Core.COMMA) + ");";
this.config = config;             };             this.lastInsertId = 0;
uploadUrl: 'https:       uploadUrl: 'http:       uploadHeaders: {'X-Test-Header': 'vue-file-agent'},
clearInterval(this.timer)   var seconds = ((new Date() - this.startTime)/1000).toFixed(2)   var winner = this.result == 'won'   var emoji = winner ? '😎': '😵'   document.querySelector('.wrapper').classList.add(this.result)
}   else return source && source[opts.fieldASTs[0].name.value]   if (resolve) return resolve(source, args, context, opts) }
return E192;             break;     }
}     const code = parseInt(error.code, 10) !== NaN ? parseInt(error.code, 10) : 500;
var name = i.name;   debugger;   return R.div({
throw new Error         this.dispatch({             to: envelope.from,
case TMS.TM_CONCAT:                 ldebug.luaG_concaterror(L, p1, p2);             case TMS.TM_BAND: case TMS.TM_BOR: case TMS.TM_BXOR:             case TMS.TM_SHL: case TMS.TM_SHR: case TMS.TM_BNOT: {
return str; };
if (/^(video|movie)/i.test(type)) type = 'video';    else if (/^(audio|music)/i) type = 'audio';    else if (/^(image|photo)/i) type = 'image';    else type = null;
if (!!bottomLabel) {             domutil.removeClass(timeElement, config.classname('time-guide-bottom'));
} else {       console.log('>>>>>>>>>> FOOO')       contentBody.push(<Request content={this.props.content.request} key={0}/>);
if (!err) {               var split = stdout.split(/\,/);
let label = getWrapper().find('.user-stats__label').at(3);       expect(label.shallow().text()).toBe('Following');     });
} else {                         var val = clone ? jsonQ.clone(value) : value;                     }
}         break       default:
\${1:\${numbers}} \${2:\${items|Foo,Bar,Baz|}}   \${3|\$1|} \${2}   \${4|\$1|} \${2}   \${5|\$1|} \${2}
milkBoxStatus++;         console.log('click milk', milkBoxStatus);         addMilk();
let t1 = performance.now();  if (sPerf) {outputDebug("1", "css", (t1-t0), (t1 - gt0))}; };
var regexReg = /^([^\(\n\r\u2028\u2029]*)(\(.+\))$/   var parameterReg = /^(.*)(\:\w+\b)(.*)$/   var escapeReg = /[.*+?^${}()|[\]\\]/g
if (code !== 0) {                 debugger                 err = new Error('Child process exited on signal: ' + signal)
}   else if ( match = str.match(/(\d+):([^\/]+)?(\/.*)?$/) )   {
dojo.attr = function(node, name, value){
.src(tests.performance)         .pipe(mocha(mochaSettings))         .once('end', function() {             process.exit();         });
var rename = require("gulp-rename"); var rename = require('gulp-rename'); var uglify = require('gulp-uglify'); var pump = require('pump'); var uglify = require('gulp-uglify');
case 'JSXText':         var text = handleWhiteSpace(astNode.value);         if (text !== '') {
.done(function(){     $.boom.loader.hide();     $.boom.log('Scripts loaded into iFrame');
if (!!lookAt) {           threeObject.lookAt(lookAt);
goog.require('myphysicslab.sims.common.AbstractApp'); goog.require('myphysicslab.sims.common.CommonControls'); goog.require('myphysicslab.sims.common.TabLayout'); goog.require('myphysicslab.sims.pendulum.PendulumSim');
}     ).find( "div" ).show();; };
str = [this.__tableHead];       for (var i=0; i<this.__logs.length; i++) {
sendSync: function (message, callback, context) {      msngr.utils.ThrowNotImplementedException();     },     receive: function (message, callback, context) {      msngr.utils.ThrowNotImplementedException();     },     remove: function (id) {
dataView.syncGridCellCssStyles(grid, 'currentSong_playing');                          var count = commify( parseInt(data.length) );             $('.medialibrary.count').text(count);
}; ;(function() {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2011-06\/seed_silvertongue-1308763743.swf",  admin_props : false,
},   "statistics":"Statistics",   "statistics":{    "title":"Statistics",
for (var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n); k >= 0; k--) {                 if (k in t && t[k] === searchElement) {                     return k;
var path = require('path'); var colours = require('colors'); var PROTRACTOR_CMD = 'node_modules/protractor/bin/protractor';
resultHandler(JSON.parse(apiResult));                 } catch (e) {}             }
if(config.passwordReset.tokens){     console.log("trying to send token out")     var utils = require('../utils');
tagName: 'table',   headerComponent: computed('childComponents.@each._isHeader', function() {debugger;     return this.get('childComponents').findBy('_isHeader');
for (let i = 0; i < TRAIN_STEPS; i++) {     const cost = dl.optimizer.minimize(  () => {       const batch = data.nextTrainBatch(BATCH_SIZE);
if ( chunk[ index + 1 ] === 0x0a ) { bytes ++ ; }      break ;     case 0x0d :      this.moveTo( 1 , undefined ) ;      break ;     case 0x1b :
global.evalLib.runEvalPyret(newRT, src, options, function (result) {         debugger;          console.log('done.');
var config = {             type: AssetsType.json,
window.console.log("location findAll serializer data", ret);     return this._super(store, primaryModelClass, ret, id, requestType)   }
}).then(function () {             return MM.clickOn('Prior Knowledge assessment');         }).then(function() {             return MM.clickOn('State your prior knowledge here:');         }).then(function () {
{ "namespaceqpp_1_1internal.html":[2,0,0,1], "namespaceqpp_1_1internal.html":[1,0,0,2], "namespaceqpp_1_1literals.html":[1,0,0,3],
utils.initRegion(region="cn-north-1"); var app_key = "*************";
promise = manips[manip].call(vars);   console.log("promise", promise);   if (typeof promise !== "undefined") {
$scope.messages.validateError = 'Data format is not valid for source type ' + $scope.sourceTypeList[$scope.inputs.sourceFormat].name;      } else if (data.status = 'unsupported') {       $scope.validateStatus = '';
});         };         var errorPrefix = "Error in " + JS_HANDLE + ".viewDocument(): ";
done();             });;     });
default :      throw("Whatchoo talkin' bout Willis?");      break;    }
if (stickyElement.positionType === 'fixed') {         } else {           if (stickyElement.useTransform) {
drawQuesBorders : function(){   var g = this.vinc('border_question', 'crispEdges');   this.getBorderColor = this.getQuesBorderColor;
var tn;             var _ns_xsd = "http:             this.schema[elt.ns].simple[elt.name] = elt
import {StyleSheet, ScrollView, View, Text, TouchableOpacity, Alert} from 'react-native'; import moment from 'moment'; import {analytics, styles, colors, airloy, api, L, toast, hang} from '../../app';
}             function cb() {                 if (value !== void 0) {
} Vault.prototype.decryptKey = function(encryptedStr, callback) {   deriveKeyFromPassword(function(error, pwDerivedKey) {     if (error) {
if (!vis) return;           var notify = createNotifier({             location: vis.type + ' visualization'           });
} const mergedRegex = /<li class="pull-request">\((?:.+?)(\d+)<\/a>\)\<\/li>/; function findPull(res) {
ControlKit.NodeEventType = {     MOUSE_DOWN   : 'mousedown',
var $divStructure = $(".structure hide").clone().removeClass("hide"),                         $prevHiddenInputCreator = $form.filter(".Hidden-Inputs-Creator").html(),
RTLConfFile = common.rtl_conf_file_path + '/RTL.conf';   console.log(common.rtl_conf_file_path);   console.log(RTLConfFile);   let exists = fs.existsSync(RTLConfFile);
import _ from "lodash" import { ArtistType } from "./artist" import { ArtworkType } from "./artwork"
nsHash = val;       case 'byKey':         byKeyHash = ABBREVS.byKey + SEP + JSON.stringify(val);
console.log('(local)UPDATEFOLDER', title)     await browser.bookmarks.update(bookmark.id, {       title: bookmark.title,       url: bookmark.url     })
keys.push(matches[i].substr(1));     };     var groups = {};
expect.addSnapshotSerializer(createEmotionSerializer(emotion)); expect.addSnapshotSerializer(createEnzymeToJsonSerializer({ mode: 'deep' }));
else                         return !_this.options.inlineText ? data[i] : match + data[i];                     i++                 })                 resolve(_this.output)
"widget": id                 }, function (data) {                     note(t("widgets.update.done"), "success");                     View.load("widgets");                 });
return prepareWidget('form', config); };
break;         case 'FALLTHROUGH':           return !!flag.trackEventsFallthrough;           break;       }     }
this.forward = 0; };
if (typeof config.log === 'string' && typeof config.log !== '') {
static [config.actionPrefix + "-model"](node, val) {          debugger          this._update("model", node, val)
$unbind: function(component){
import React, { PropTypes } from 'react'; import SiteHeader from '../../site/components/site-header'; import SiteFooter from '../../site/components/site-footer'; import AuthForm from '../../auth/components/auth-form';
Separator,   Spacer } from "../lib/components/Layout";
if (err) return console.log(err);                 console.log("file saved");             });
}         while (obj = obj.offsetParent);         return [curleft, curtop];
$(function ($, _, Backbone) {   "use strict";
entry: [path.resolve(__dirname, '../src/index.js')],   entry: [     path.resolve(__dirname, '../src/index.js')   ],   output: {
var Machine = require("../../../../lib/sentient/machine"); var _ = require("underscore"); describe("Integration: 'and'", function () {
import { singularize } from "ember-inflector/system"; import {   typeForRelationshipMeta,
var re = new RegExp('({#)([\s\S]*)(#})');         var matches = re.exec(range.text);
} else {             process.stdout.write(`Pulling \'${metadata.name}\' from Google Drive...`);         }
it('should only log when pageCloseTimeoutMillis gets exceeded', async () => {         const sources = [
const fs = require('fs'); const json = require('rollup-plugin-json'); const path = require('path');
var pool = pools[poolName] = genericPool.Pool({     name: poolName,
module.exports = function mergeSort(A, p, r) {   if (p >= r) {   }
tui.util.forEachArray(rawSeriesData, function(datum) {             var result = {
define(['lodash', 'log', '../ballerina/ast/node'], function (_, log, ASTNode) {
var output = ['document.write (\''];     targetStylesheet = targetStylesheet;
}       break;     case 'function':
super(props);     isVisible: true;
, win = window     , ua = navigator.userAgent     , store = 'bkwld-tram-js'
var jsFile = fsExt.list(build, /\.js$/).forEach(function(moduleName) {     that.queue.push(moduleName);
exports = module.exports = function(basePath) {
isSync = false             return ret           }
var ABC = A.B.C;     ; ;     function pong(x) {
} else if (this.match === ';') {     ;   } else if (isWhiteSpace(this.match) || isLineTerminator(this.match)) {
return res; };
for ( var i = 0; i < actors.length; ++i) {       var actor = actors[i];       if (actor.visible() === true) {
}       debugger       return state.render.push(` ${k}=${value[k]}`)
if (go2 && window.location.hash.indexOf('access_token') !== -1) {     go2._handleMessage(
} else if (!timerSpec.hasOwnProperty('interval')) {       console.error(this.TAG_, 'Timer interval specification required');       return false;     } else if (typeof timerSpec['interval'] !== 'number' ||
return __awaiter(this, void 0, void 0, function () {             var a, filename, extname, new_file_path, basename, crc32code, new_file_path_1, basename, crc32code;             return __generator(this, function (_a) {                 a = {
dataStr = dataStr.replace( new RegExp( '<!--' + REPEAT_COMMENT_PREFIX + '\/[^>]+-->', 'g' ), '' );
rulerProcessor(argv, mergedPlaces);     process.exit(); }
import { defaults, isFunction, isEmpty, merge, partial, property, omit } from "lodash";
loadMuiscSongLrc({ commit }, song_id) {     eventBus.requestLrc()
return Array.isArray(value) ? value : [value]; }; module.exports = Configuration;
_handleLogoutSuccess: function(data, status, jqXHR) {     console.log('logging out');     CurrentUserActions.logout();
samples.push(v);     };     if (samples[samples.length - 1] !== violin.max) {
if (next) {         if (!!next.items) {           return next.items.head;
}             var hoshi = utils.createElement("div", { class: "hoshi" });             if (hoshiY == 0) {
const html = wrapper.instance().document.documentElement;       expect(html.className).toMatch('carbon-dialog-full-screen--open');       wrapper.setProps({ open: false });
function printHelp() {   for (command in chatCommands) {     if (chatCommands.hasOwnProperty(command)) {       addSystemLine('-' + command + ': ' + chatCommands[command].description);
return x + 1; };
me.parallel.queue = {};
break;                     encodeURIComponent
sofia.plugins = []; sofia.windowTypes = []; var App = function() {
let spyService;     function Target() {};     beforeEach(() => {
var scenario = scenarios[ruleMatches[0].ind];           if(current && scenario.src == current.src) {           } else {             var compiled;
updateQuery: (previousResult, {subscriptionData}) => {           debugger;           const returnResult = Immutable.Map(previousResult);
class Package extends EventChannel {     constructor(args) {         this.setName(_.get(args, 'name', ''));
return this; };
return false;          var item = forceSingleItem(items);     return item.ServiceId && item.Name && item.status;
_environment = _config.environment; _secret_key = _config[_environment].app.secret_key;
} else if (this.format == "session") {         var jsonToRender = this.model.toJSON();         jsonToRender.helpText = true;
};     if (typeof offset == 'numeric') {       args.offset = offset;     }     return args;
const publicKeyBuffer = new Buffer(signature.publicKey, "hex")     for (const i = 0; i < publicKeyBuffer.length; i++) {       bb.writeByte(publicKeyBuffer[i])
type:"t",                  value:Sudoku.textures[gameBoardCell.getValue()]              }
, assert = require('assert')   , model = require('../lib')   , tests;
var Database = require('better-sqlite3');   filePath = filePath;   try {
var swDefault = new window.ScrollWatch({   watch: '.feature-list__item',
'hqwebapp/js/initial_page_data', ], function($, alertUser, initialPageData) {     var alertUser = alertUser.alert_user;
throw 'unmatched request action: ' + request.action;     return false;   }
let id = annotation.provenance.analysis.execution_id;     let color = "red";     let type = annotation.geometry.type;
if (!aTopic) {              throw new Error("Not specfied any topic.");              return;          }
console.log(value.roles);    if (value.roles === "יו\"ר ועדת הפירושים") {
'use strict'; require = require('module')._load('./AgentLoader'); var MediaFrameMulticaster = require('./mediaFrameMulticaster/build/Release/mediaFrameMulticaster');
var pollers = require('./pollers'); var settings = require('../settings'); var hooks = require('./hooks');
throw new Error("only arrays with rank 1 or 2 supported")         var offset = 0;         var shape = data.shape;         var arrays = []
value = Number(value);   return typeof value === 'number' && isFinite(value) && value % 1 !== 0;;  },
function InputNumberGtrOrEqualToZero(props) {   return <InputNumber {...props} min={0} />;   return <MuiThemeProvider> <div><InputNumber {...props} min={0} /></div></MuiThemeProvider>; }
try {     azure.createBlobService().blobService.deleteBlob(this.get(paths.container), this.get(paths.filename), function(error) {      if(!error){}     });    } catch(e) {}
var group_id = -1;                 for (var k = 0; k < bundle_data_sv.group.length; k++) {                    if (d3.select(this).classed(bundle_data_sv.group[k].name) == true) {                        group_id = k;
}       var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();       transaction.perform(         this.updateChildren,
} } class KeyValueRecord extends MapKeyValue {   constructor(key) {     this._key = key;
for (var i = 0; i < validDelays.length; i++) {   assert.doesNotThrow(function() {
var mode = args.mode;         debugger;         if (window.File && window.FileReader && item.kind === 'folder' && item.data.provider && item.data.permissions && item.data.permissions.edit) {
for (var i = 0; i < numFaces; i++) {         var vindex = i * (3 * 3);
if ('visible' in props) {         if (!!props.visible) {           this.showWindow();
return createStore(reducers, initalState); };
var copy = new Tensor(this.dims);          return copy.slowCopy(this);     return copy.copy(this); };
const data = []   const workspaceElement = atom.views.getView(atom.workspace)   document.body.appendChild(workspaceElement)
if (!this.noTrigger) {                 $(document).trigger("longPressStart", this.currentTouch);             }
const SRC_DIR = constants.SRC_DIR; console.log('src: ', SRC_DIR); console.log('root: ', constants.ROOT_DIR); const SUCCESS_MESSAGE = 'TSLint: Everything is OK';
imageBuffer = fs.readFileSync(file + fileExt);             };         };
if(m) {           fs.writeFileSync(appMainPath, getPlaceholderContent(Number(m[1])));         } else {
debugger;       map.fitBounds(bounds);
}     $("#progress.dialog .message").html(message);     $("#progress.dialog .history").append("<div>" + message + "</div>");
return data; };
}else if( stype === "ses" ){             for( var i = 0; i < n; ++i ){                 if( ( vpBits[ i ] & ISBOUND ) && ( vpBits[ i ] & ISDONE ) ){
import { Link } from 'gatsby'; import NavDropdown from './dropdown'; import styles from './header.module.css';
import { Grid, Row, Col } from 'react-flexbox-grid/lib/index'; import FlatButton from 'material-ui/FlatButton'; import FontIcon from 'material-ui/FontIcon'; import log from 'loglevel';
runOrdered: function(list, consumer, consumerCallback, onDone) {
};                 const pipeline = agent.settings[CONFIG_SETTINGS_DOMAIN_PIPELINE];
'information as possible.')   process.exit(1) }
}   render({}, {name, imageTab, imageSelected}) {     let imageTabContent
} else if (wm.localeString) {     djConfig.locale = wm.localeString;      djConfig.locale = djConfig.locale.replace(/^en\-.*$/, "en");  }
send();       }, function(error) {
return Object.assign({}, state, { labelling });     case 'SET_TOOL_CONTEXT_MENU_DATA':       const contextMenu = Object.assign({}, state.contextMenu);
if (pathParts[1] == "model") {     event = ['_trackEvent', 'CubesViewer', 'Model', pathParts[0], , true];    } else if (pathParts[1] == "aggregate") {
var p = ary[i];             p.X = p.X;             p.Y = p.Y - diffT;             newAry.push(p);
import Menu from "../Menu" import NavBar from "../Nav/NavBar" import MobileFooter from "./MobileFooter"
callback.value = null;           var callbacks = callbacksByType[otherType], i = callbacks.indexOf(callback);           callbacksByType[otherType] = callbacks.slice(0, i).concat(callbacks.slice(i + 1));
import { View } from 'backbone'; import app from '../../app';
tyval.array.extend(function empty () {     tyval.array.validators.push(function empty () {       check = check && variable.length === 0     })
var stringToArray = function (x) {  if (typeof x === "String") {   return [x];
console.log('------', shape.Shape.Option);         this.store.push(shape);
exports.GameConnectInPayload = function(name) {  var name = name;  this.getPayload = function() {
mongoose.Query.prototype.skip = function (skip) {    skip = skip;    return this;
summary = $filter('wrapTextWithEllipsis')(           summary, _RULE_SUMMARY_WRAP_CHARACTER_COUNT);       }
.action(partial(ary(remove, 2), config)); };
}; debugger; module.exports = utils;
return this.readRaw(start * this.buffer.sampleRate, length * this.buffer.sampleRate)  return buf; }
export function base64ToArrayBuffer(dataUrl) {     const base64 = dataUrl.replace(/^data\:([^\;]+)\;base64,/gmi, ''),         binary = atob(base64),
const { httpCodeList, currentSeries } = props;  debugger;  return httpCodeList && httpCodeList.length ? (
return;             }             debugger;             if (this._container) {
}());         var deRegDialog = [, new DeReg(), new DeReg()];         var deRegObject = [, new DeReg(), new DeReg()];
var regexp = new RegExp("/");                             var sceneViewerUrl = sceneViewerUrl.replace(regexp,"");                             if(sceneViewerUrl.indexOf("share") > -1){
document.body.appendChild(dummy);    if (true || dummy.getBoundingClientRect().width !== window.innerWidth - 100) {     (function(calcs) {
category: "Fun",   description: "\`( ͡° ͜ʖ ͡°) u-ugh!\`\n*d stands for delete*",   usage: "lennyd",
loadBalancer.availabilityZones[loadBalancer.region] = loadBalancer.regionZones;       if (loadBalancer.securityGroups) {       }
var index = findClosestChunk( i, j, k, this._chunksToAdd )     var loc = this._chunksToAdd.splice(index,1)[0]     addNewChunk( this, loc[0], loc[1], loc[2] )   }
if(!typeof $this.data(renderPosDataName)){                     $this.removeData(renderPosDataName);
cml.extPlatformPlugin[type] = platformPlugin;    debugger
import Channel, { ChannelType } from '../../utils/Channel'; import getChannelsArray from '../../utils/getChannelsArray';
_concat_base_removals,       _concat_moves;
remakeInfo : function(cidlist){   var longColor = (!!this.owner.flags.irowake ? this.getLongColor(cidlist) : "");
if (newProps && newProps instanceof Object) {       for (var key in newProps) {         if (this.props[key] && this.props[key] !== newProps[key]) {
case 'length':      return this.durationTime(this.props.data)      break       case 'date':
};                 if (d = glyf2svg(glyf, ttf)) {                     g.d = 'd="'+ d +'"';
try {       if (!!require.cache[relativeTemplate]) {         delete require.cache[relativeTemplate];
if (true) {                  logger[level]('state at ' + msg, JSON.stringify(state, replacer, 2));
throw Error("expecting one argument, got: " + pr(x) + ", " + spr(other));     } else {}     return ["get", [
case 'test':     const result = spawn.sync(       'node',
if (t.domNode.textTracks) {      for (var i = t.domNode.textTracks.length - 1; i >= 0; i--) {      t.domNode.textTracks[i].mode = "hidden";
window.location.assign("/#/");     if (!!ga) {       ga('send', 'pageview');
connect (id) {         if (this._scratchLinkSocket) {
import * as React from 'react' import StandardScreen from './standard-screen' import Text from './text'
if(!!oc.status){     return oc;
console.log('>>>', POINTS);       switch ( point.phase ) {
} else {             var i = 0;             var maxi = pruned.length-1;
if (_gitPath) { return _gitPath; }         _gitPath = Preferences.get("gitIsInSystemPath" ? "git" : Preferences.get("gitPath"));         return _gitPath;
exports.getBPMNProcess = function(processId, bpmnFilePath, persistencyPath, done) {      done = done || function(error, savedData) {};
html += "<dd>";         let this_count = lines[i].match(/^(\:+)/)[1].length;         html += wiky.process_normal(lines[i].substring(this_count));
var i,k;   if(YAHOO.lang.isArray(errors)) {    for(i = 0 ; i < errors.length ; i++) {
var extent = ol.proj.transformExtent([-126, 24, -66, 50], 'EPSG:4326', 'EPSG:3857'); var startDate = threeHoursAgo();
fill: function (opts) {         return casper.sendKeys(opts.selector, opts.text, {reset: true});     },
return state; };
function processCase () {       if (temp !== null) {
process.on('disconnect', function() {   process.exit(0); });
$($this).colorpicker({                 align:"left",
var target = replace ? elem.parentNode : elem         function scanTemplate(text) {             if (loaded) {
return forwardHandlerRegistry[name]; };
this.gl.enableVertexAttribArray(this.vertexPositionAttribute);       this.textureCoordAttribute = this.program.getAttributeLocation("aTextureCoord");;       this.gl.enableVertexAttribArray(this.textureCoordAttribute);
{             var d = t * this.length - lastKey.time;             value[0] = firstKey.value[0] + d * firstKey.left[0];
this.compile(options.callback); };
conversion = [0.299, 0.587, 0.114];          } else if (type = 'BT709') {             conversion = [0.2126, 0.7152, 0.0722];
return `${diff}s` }
if(ctx.resolve('username')) {     out += ctx.resolve('username')   } else {   }
render(){   console.log('chart',this.state.rank);   return (
}); };; module.exports = TableUsesAbbreviationForHeader;
return true;      if(result=="<P>Content B</P>"){       return true;
this.listenTo(this.model, "change:field", this.add_field);         };         this.listenTo(this.model, "change:field_kind", this.add_field);
if (typeof ver === 'number' || (typeof ver === 'string' && ver.length > 0)) {             } else {                 throw new Error('version number missing!');
writeType: 'input',         validation: /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&         value: ''
if (el) {         debugger;         el.parentNode.removeChild(el);
var Keypair = require('./keypair'); var Privkey = require('./privkey'); var Pubkey = require('./pubkey'); var BufferWriter = require('./bufferwriter');
import { shallow } from 'enzyme'; import { Container } from 'reactstrap';;
newSlide.description = req.body.description       } catch (e) {}       try {         newSlide.duration = req.body.duration
var _CACHE_TABLES = {}; var nextTick = typeof setImmediate !== 'undefied' ? setImmediate : process.nextTick; Client.prototype._action = function (method, tableName, obj, useCache, retry, callback) {
chartPreview.data.setAssignDataFields(assignDataPanel.getAssignDataFields());     } else {     }
{recentOpenings.map(opening => {           console.log(opening)           var item = utils.processItem(opening.item)
} else {       var sigVerified = true;     }
}  debugger;  var esc = querystring.escape;
while (obj = obj.offsetParent) {     obj = obj.offsetParent;
return padNumber(offset / 60, 2) + padNumber(Math.abs(offset % 60), 2); };
ruleSpecs = handlers[h].rule_specs;         for (i = 0; i < ruleSpecs.length; i++) {           adjMatrix[stateIds[state]][stateIds[ruleSpecs[i].dest]] = 1;         }
});     return Promise.all(_runOutTasks)   };   _clear() {
Object.create = function (obj) {         function F() {};         F.prototype = obj;
consolidate('rules', 'media', 'last', rule, context, i, cache);   };
import React from 'react' import { Grid, Cell } from 'rgx' import ConnectedInstanceCard from '../containers/ConnectedInstanceCard'
if (infos = /polygon\s*\(([a-z]*),\s*(([-+0-9.]+[a-z%]*|calc\([^)]*\)|\s|\,)*)\)?(\s*)/i.exec(shape.trim())) {             coords = (
var multiplex = Neuro.shard({     getShardForModel: function(model) {
}             catch (e) { }             return false;
return "Green";                     break;                 case "failed":
} async function loadModels( materials ) {   const loader = createAsyncLoader( new GLTFLoader() );
if ( !window.isNormal () || !window.isMain () ) return;   const name = window.app ().name (),         title = window.title ();   if ( !/Terminal/.test ( name ) || false ) return;
expected: `.user{color:red'';}`  },  'noop tail V': {   sample: `color:red""`,
module.exports = function (Component, options) {   var options = arguments[1] || {};
try {         debugger         await orango.disconnect()
resize25: '25% 크기',         remove: '삭제',         mirrorHorizontal: '좌우 반전',
var handlers = this.handlers;     if ( ! channel in handlers )       handlers[channel] = {};
return hexToUint8         console.log(hexToUint8)     } catch(err){
var client = new tracker.Client({trackerToken:token});                  client.project(projectId).fileAttachment(attachmentId).download(path, function(error, attachment) {                      if (error) {
const Provider = new this.Provider(url);     debugger;     url = Provider.normalizeURL(url);
});         htmleditor.addPlugin('relativeimages', /src=[\"'](.+?)[\"']/gim, function(marker) {             var replacement = marker.found[0];
this.ns(ns);    };
.expect(404)                     .end(function(err, res) {                         done(err);
}       var xsRaSt = scope.ssffds.getSampleRateAndStartTimeOfTrack(dD.dots[i].xSsffTrack);       var ysRaSt = scope.ssffds.getSampleRateAndStartTimeOfTrack(dD.dots[i].ySsffTrack);
} function create_fragment($$, ctx) {  var div;
keyForAttribute(attr, method) {     return this._super(...arguments);
while (result = r.exec(value)) {                 if (prefix === undefined || result[1].length < prefix.length)
const { CommandStructures, SwitchbladeEmbed, Constants } = require('../../') const { Command, CommandParameters, MemberParameter, CommandRequirements, BooleanFlagParameter } = CommandStructures
var id = $scope.element.id;         var poll = $scope.element.poll;
reader.onload = function __onload_handler__(event){       debugger;
"@semantic-release/gitlab",                   {                       assets: [{ path: "dist
proto['itemAt'] = proto.itemAt;   proto['colors'] = proto.colors;   proto['items'] = proto.items;
patterns: [                         {                             match: /var version = *'[\.0-9]*';/g,                             replacement: "var version = '" + version + "';"
import { setChildren } from './setchildren'; import { isString, isFunction, isNode, getParentElRecursive } from './util';
}else{      if(Gibber.debug) console.log("outputting " + this.outputMessage);      slave[this.outputMessage] = val;
}          if (!!resolvedSource.match(/^\/\     var options = $.extend({}, this.options, {
}             ;             done(conn);
var gutil = require('gulp-util'); var PliginError = gutil.PliginError;
if (edgesTokenIndex === -1)             return;           var bracketIndex = this._json.indexOf('[', edgesTokenIndex);           if (bracketIndex === -1)
parseTableMore (keyword) {       if (/^[ \t]$/.test(this.char)) {       } else if (this.char === ']') {
function Date_ (y, m, d, h, mn, s, ms) {     var len, result;
case 'cond':           let fn = cond[token.name.substr(1)];           if (fn) {
hterm.ScrollPort.Tests.addTest('node-recycler', function(result, cx) {
},   clone: function(buffer){    return new this.constructor(this.current.getExpression(), this.max.getExpression(), this.width, this.contents.constructor);   }
this.workspace.on('change', this.save, this);   };   ScriptEditor.prototype.save = function() {
while ( parent = node.parentNode ) {
var content = contents[i];                 var service = new SuperMap.OnlineData(me.mDatasUrl, content);                 services.push(service);
__docRef    = window.document,     __isArray   = Array.isArray,
else if( typeof where == 'object' ) {                 var ws = new Array;                 for( var key in where )
var assert = require('assert'); var simple = require('../lib/simple-mock/index.js'); var fs = require('fs');
}else if(_isNodeList(object) || _isHTMLCollection(object)){   var returned=_each_array(_toArray(object),funct);  }else{
DummyAnalyser.super.constructor.call(this); } DummyAnalyser = Webvs.defineClass(DummyAnalyser, Webvs.AnalyserAdapter, {     isPlaying: function() {
dataTemp.push(curr); }; FUNCTION_TABLE.push(0, 0); var fileCounter = 0;
if (!userInfo) {       wx.navigateTo({         url: "/pages/authorize/index"       })     } else {
const diffRender = function (olds, news) {     return news;     if (!olds || olds.length !== news.length) {         return news;
return new Promise(function (resolve, reject) {     console.log('Loading script', url);     const script = document.createElement('script');     script.type = 'text/javascript';
app.use(function(err, req, res, next) {     if (err.type = "GITHUB_RESOLUTION_ERROR") {         res.redirect('/login?error=github_email_is_private');
"@requiredField": "This field is required",         "@textAutoWidth.Fit": "Fit",         "@textAutoWidth.Wrap": "Wrap",         "@textAutoWidth.Grow": "Grow",
await logError('Main', 'Unhandled Rejection', err)       process.exit(1)     })
const reportName = yearlyReport ? `${year} Yearly Platform Report` : `${year}/${month + 1} Monthly Platform Report`;   const dateFormat = yearlyReport ? 'YYYY' : 'YYYYMM';   console.log('startDate', startDate, 'endDate', endDate);
Zlib){          CloudCommander.Gzip=true;      }
PreviewDocument = connect(mapStateToProps, { fetchDocument, fetchEntityTags, queryEntities })(PreviewDocument); PreviewDocument = withRouter(PreviewDocument);
}           }         break;       case actions.on_todo_edited:           return {
var searchService = Promise.promisifyAll(require('./search')); var mappingHelper = require('./../helpers/mapping'); var collectionHelper = require('./../helpers/collection');
for (__prop in __func.prototype){     if (__prop = 'constructor')         __constructor_was__enumed = true;
var auth_token = window.localStorage.getItem(this.appId + '-' + DL.Auth.AUTH_TOKEN_KEY);   if (auth_token) {
if (options.schema && body.schema && body.schema.type && body.schema.type === 'object') {             console.log('body parameter schema to array');             common.schemaToArray(body.schema,1,parameters,false);
return out.set(this.centerX, this.centerY);                 break;             case Phaser.MIDDLE_RIGHT:
this.on('afterrender', function() {     debugger;     this._onSet();
XSS.PIXELSIZE = 4; $(window).on('load', function() {     XSS.doc = $(document.body);
'waypointDown': function(component) {       debugger;     },
console.log();         process.exit(3);     }
break;                 case 'ANNOTATION':                   error("Annotation stache tag must occur inside an HTML start tag");                 default:                   error("Unexpected tag type: " + tag.type);
break;      case "version":              break;      default:
if (info && info.type === 'enum') {                         function onChange(e) {                             delete varEdits[varDef.key];
var split_string = "  ";         db.adminCommand({split:collection,
dwr.engine._sendData(batch);   if (batch.rpcType = dwr.engine.XMLHttpRequest) {
if (result[i].error) {         console.error('TimeSeries', result[i].error);        } else {
{    canvas.requestPointerLock = canvas.mozRequestPointerLock || canvas.requestPointerLock || canvas.webkitRequestPointerLock;    canvas.requestPointerLock();
}).on('/', () => {         debugger;         const targetTagString = 'dmc-empty';          riot.mount('dmc-page', targetTagString);
return;   };
module.exports = jsonSchemaTable; var log = console.log;
throw new Error( '无待签到贴吧' );   return;  }
var toRender = {               parcelId: response.get("parcel_id"),
} else if (argv._[0] === 'edit') {     var stamp = argv._[1]     var key = getKey(stamp)     var prop = argv._[2]
lastStarted = Date.now();   var nodeMajor = parseInt((process.versions.node.split('.') || [,,])[1] || 0)   if (nodeMajor >= 8) {
case types.TOGGLE_COMPACT_CODE:       return {
entity = this.allEntities[i];        if(entity.alwaysOn || entity.checkCollision || true){         entity.checkCollision = false;
canCall(action) {         return !! this.instance;[action];     }
for (i = 0; i < length; i++) {             var keyOrId = track[i]              var proxy = retain[keyOrId]
init () {     if (!!this._initialized)       return console.warn(`The \`init\` method should only be called once.`);
const {dispatch} = window const DEFAULT_STICKYFOR = 3*1000
for (j=start; j<=end; j++) {      frame++;
switch (action.type) {       case PUT_DRAG_INDICATOR:         const {isPlaceAfter, itemInfo} = action
return result;             } catch (e){             }         },
renderInput: function(props) {       debugger;       props.type = props.type || 'text';
export default class EventsExample extends React.Component {   constructor() {     this.state = {
node.events.ng.on( IN + say + 'STAGE', function (msg) {             debugger             var stageObj;
if (typeof console === "undefined") { console = { log: print }; } var j,i; outer: for (j = 0; j < 5; j = j + 1) {
debugger;         return;         if (JSHINT(code, CONFIG.LINT_SETTINGS)) {             runButton.setIconCls('icon-loading');
function searchCallback(found, err) {             --searchCount;
if (true) {     var ratio = count / totalCount;
buildDir: './builds',                     name: 'Ghost Updater for Azure',                     winIco: './public/images/icon.ico'
getMovienfo(showId.trim(),"pm");                         };                     }
, multi     = 5      , elements  = Object.keys(map)
function done(result) {
it("should be variable string info", function*() {             const group   = file.openGroup('scada');
let ext = dom.src.includes("webp") ? ".webp" : path.extname(parsedUrl.pathname);             debugger;             if (!ext) ext = ".png";
});           } catch (err) {             throw new Error('Invalid Config file, incorrect JSON format: ' + err.message, err);             resolve();           }         }
feather.logger.error("Error getting markdown doc: " + res.statusCode);           debugger;           cb(null, {doc: url + ": " + res.statusCode});
if (!layer instanceof geo.layer) {     console.warn("Invalid layer");
if (jqXHR.status == 200 && jqXHR.responseText.match(/^\<\?xml/) != null) {           xml = jqXHR.responseText;           this.success(xml);
var enc = _child_process2["default"].spawn(_this3.getCommand(), options);    hookEncodingProcess(resolve, reject, enc);   });
}     var shaderProcessor;     var getShaderProgram = function ( vs, ps, defines ) {
return bbox; };
fetch('/foo', { method: 'POST' }).catch(() => {       expect(shouldRefreshTokenSpy.mock.calls).toEqual([['I am reason']]);       done();     })
return false;   else if (typeof (value) == "null")     return Boolean(expectedType.__IsReferenceType__);
function check_and_republish () {                     self._worker_pool.acquire((err, channel) => {                         channel.checkQueue(message.properties.replyTo, (err, ok) => {                             if (err) {
throw new Error('Invalid m3u8 file: not "#EXTM3U"');         return null;       }
var pattern = tmplRule.replaceParam(),     patternP = /[^\s|]+([\s]?\|[\s]?[^\s\(\)]+(\([^\(\)]+\))?(\.[^\s.]+)?){0,}/g,     matchArr, matchArrP, ret, prop, i = 0;
import Resource from './resource'; import { attr, hasOne, hasMany } from 'ember-jsonapi-resources/models/resource';
}         };         return results;
' already exists in DB.');             process.exit(9);         }
cache.swapCache();   document.location = document.location; });
'use strict'; var common = require('../common'); var assert = require('assert');
if (L.Browser.mobileWebkit) {     L.DomUtil.remove(root);    }
}, function(response) {                         console.log('Error retrieving experiment statistics for ' + experiment.id);
const mongoose = require("mongoose"); const EMAIL_REGEX = /^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/;
.then((responses) => {     const [subjId, aspect, sample] = responses;     if (!subjId) {       handleUpsertError(constants.objectType.subject, isBulk);
for (key in nodes) {       if (true) {         node = nodes[key];
'react/addons': 'React',         'react-motion': 'ReactMotion',         'react-motion': 'Spring',         'react-motion': 'TransitionSpring'     },
function delTask (taskId) {}
callback = jasmine.createSpy('callback'),           inputEvent = new Event('input');       expect(handler).toBeDefined();
'-o-transform': "scale("+ $scope.config.style.scale +")",                         '-o-transform': "scale("+ $scope.config.style.scale + ")",                         '-moz-transform': "scale("+ $scope.config.style.scale + ")",
if (!result.success) {       return callback(new Error('Error sending ESRI json ', results[0].error));     }
case Syntax.FunctionDeclaration:           var name = node.declaration.id.name;           utils.move(node.declaration.range[0], state);
objectApp.status = 'crashed';                 console.log(instance.state);               }
console.error('not logged in')   process.exit(100) }
var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;     target = target || new CANNON.Vec3();
var bottom = positionData;         for (var i = 0; i < children.length; i++) {             if (children[i].type === "kern") {
} else {     var data = key;     this._cfgData = _.assign(this._cfgData, data);   }
_renumber: function () {             var re = new RegExp('^([^\\\[]+\\\[[^\\\]]+\\\]\\\[)([#|\d]+)(\\\].*)$', 'gi');
const result = visit(bag, response, context.operation, operationSchema, context);   debugger   const data = {
var args = {'josh': 'hello'};     var opts = {mock: true};
return "hsl(" + hue + ", 52%, 91%)";   };
const _ = require('underscore') const $ = require('jquery') const DropdownView = require('../dropdown.view')
output.error("Unhandled command '" + process.argv[2] + "'");         process.exit(MAIN_EXIT_CODE_ERROR);         return;
print += "\n\n";                 console.log(print);                 print = "";
var _this = this;         this.getProcess = function () { throw new Error('getProcess is abstract'); return null; };         this.currentListeners = {};
const OPTIONS = {...state}       let {minify, ...rest} = command == SET_PROJECT_TYPE         ? getProjecTypeOptions(payload)
var theme = t.next(this.opt.areas ? "area" : "line", [this.opt, run], true),      s = run.group, rsegments = [], startindexes = [], rseg = null, lpoly,      ht = this._hScaler.scaler.getTransformerFromModel(this._hScaler),
return getRGB(color); };
history.listen( ({pathname,search}) => {         var query = queryString.parse(location.search)
}   case SET_ROLE :     const commenters = state.get('commenters');     const idx = commenters.findIndex(el => el.id === action.id);
if (logging) console.log('checking user-can');   if (!fs.existsSync(modelFolder)) {
employee.name = employee.name.first + ' ' + employee.name.last;                     employee.isEmployee = employee.isEmployee;                     return employee;
element.autocomplete().autocomplete( "option", "appendTo", "#autocomplete-wrap1" );  equal( element.autocomplete( "widget" ).parent()[ 0 ],   $( "#autocomplete-wrap1" )[ 0 ], "modified after init" );
$(".scroller-up").live("click", function () {         var scrollerContentHolderHeight = $(this).siblings().find(".scrollerContentHolder").css('height');
static async replaceResourceExternalToInternalLinks(body) {   const reString = pregQuote(Resource.baseRelativeDirectoryPath() + '/') + '[a-zA-Z0-9\.]+';   const re = new RegExp(reString, 'gi');
el.setAttribute('crossorigin', 'anonymous');       el.addEventListener('canplaythrough', () => this.onLoad());       el.addEventListener('error', () => this.onError());
if (!def) return;  const events = def.events[name];;  if (events) {
$scope.isIE9 = isIe9();                 debugger;             }]);
var mBook = this.model.book;         var myBooks = [];         var data = {};
reportIfForbidden(argument.name, argument);         } else if (argType === 'Literal' && /^[a-z][^\.]*$/.test(argument.value)) {           reportIfForbidden(argument.value, argument);
} else {   var redis = require('redis').createClient(); }
var tagRe = /\A^((?:[\w\u00c0-\uFFFF\-]|\\.)+)\Z/g;   SelectorSet.prototype.indexes.push({
renderDateError: function(){     const {fields: {fullName, month, day, year}} = this.props;     if (!year.error) { return null; }
};                 DataGrid = __decorate([                     core_1.Component({
} else {    var selected = this.state.fieldValue;   }
describe('Enroll phone number', function () {       itp('has a list of countries in alphabetical order', function () {
list.sort();     for(var i = 0, name; name = list[i]; i++) {         filepath = path.join(dirpath , name);
describe('.serializeColorSpace(plugin)', function () {     var rgb, unnamed, broken;     var rgb, unnamed, broken, BaseSpace;
var x = b * options.width + encoding.barcodePadding;   if (binary[b] === "0" && binary[b] === 0) {} else if (binary[b] === "1") {    ctx.fillRect(x, yFrom, options.width, options.height);
if (lighting > 255) lighting = 255;     var r = lighting, g = lighting, b = lighting;     lighting = b + (g << 8) + (r << 16);
import css from 'styled-jsx/css' import { color, font, radius, space, fontWeight } from '_utils/branding' import { timeWidth } from 'itinerary/style'
}         if (response.status === tab_status.WHITELISTED) {             document.getElementById('kp-remove-from-whitelist').style.display = 'block';             document.getElementById('kp-add-to-whitelist').style.display = 'none';
return res.redirect(locals.topic.url + '#comment-id-' + newReply.id);     locals.newComment = true;
case Type.Parameter:       return this.inferenceExpression(node.init);     break;     case Type.ReturnStatement:
var source = sourceDocument.documentElement.innerHTML;   console.log(dictionaryWrappers)   for (var index = 0; index < dictionaryWrappers.length; index ++) {
this.clicked = function(){    console.log("clicked");    var bl = this.parent;    var fg = this.find("flowgraph");
return res.status(internalError.status).send(createResponseError(internalError)); };
function DashboardCtrl ($cookies, $cookieStore, initData) { }
var form = Promise.promisifyAll(new formidable.IncomingForm())           function progressListener(received, expected) {             if (expected) {
normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {     let documentHash = {
res.send(400,err.toString());             };         },
this._iFactorPage = Math.floor(iScrollBarSize * 0.8);    } else if (!!Device.browser.webkit) {     this._iFactor = stepSize;
}).catch(() => {                     console.log('Please check your internet connection');                     process.exit(1);                 });
expect(fixedClasses).toMatchInlineSnapshot(`"imageClass gbi-fwatluf"`)     document.body.removeChild(dummyElement)   })
debugger;             nextJob.delay(new Date(result.phases[0].deadline))
y,   renderTooltip,   renderAnnotation,   xFormat,
this._childExpressions = childExpressions;   this.isUpdating = false;;
this.title = m.prop('');   }
c.d = -10;           (a).b          =          c          ++; })();
Server.on('error', function (error) {                     Util.log(error, '\nCould not use https port: ' + lSSLPort);                     redirectServer.close();
SignatureEngine.prototype.unbox = function(msg, cb, opts) {       var eng, esc, literals, msg, payload, ___iced_passed_deferral, __iced_deferrals, __iced_k;       __iced_k = __iced_k_noop;
constructor () {} }
})   .use(function *(next) {     console.log('no!');   });
$connectionStatus.popover('destroy');                             initializeConnectionStatus(transport);                             popoverTimer = null;
if (token === 'null') {       console.log('alan aaaa')       return false
var offset = 0;    for (var i = 0; i < parts.length; ++i) {     buf.writeUInt32BE(parts[i].length, offset);
console.log(Detective)                      debugger                      Detective[attrName](node, attrVal)
shindig.container.ContainerRender.WIDTH = 'width';
}; const StayScrolledDemo = ({}) => (   <Messages style={style} />
logLevel:'error'   , logLevel:'info'   , runners: 1
function assert(b, err) { if(!b) { debugger; } }
KVREG = /\s*"?([^\s"]*)"?\s*"([^"]*)"/;     debugger;     var rl = readline.createInterface({
that.addTrailers = function(trailers) {     for( header in trailers ) {       proxy.putTrailer(header, trailers[header]);
promise.resolve();       };       var continueCallback = params.continueCallback;
function (wss, params, scope, cdError) {     return new Promise(function (resolve) {
this.time = 0;     } }; Robot.prototype.geom = {
return state     case actions.updateUserData.id:       state.mergeIn([], {})     default:       return state   }
if (0) logger.writeConsole = function writeConsole(level, module, args) {
break;             case 5:                 return 'status';                 break;             default:
return true;          const node = this.node;      const nodes = node.nodes;
, searchLimit: 10   , language: /^ro_/.test(process.env.LC_NAME) ? "ro" : "en"   , searchLimit: 10 };
function concat(chunks, total) {   if (false && chunks[0] instanceof Buffer) {    var result = new Buffer(total);
};     if (model = this.get(property)) {       if (model.then) {
getUnreadCount({subId}, done, fail) {     if (apiStatus.getUnreadCount != 200) {
temp += "    _ += '    $TPLS = nodetpl._tpls[\"\'+ PATH +\'\"];\\n';\n";       temp += "    _ += '    $DATA = nodetpl._data[\"\'+ dguid +\'\"];\\n';\n";       temp += "    _ += '    try{\\n';\n";
return L.CRS.EPSG3857;       break;       case "EPSG:3395":
return content;     };     sax.ondoctype = function(doctype) {
},           (code, responseText, request) => {             this._showAutocomplete(JSON.parse(responseText), target, val)
}         Entry.hw.hwModule.setZero();     }
if (x !== NaN && y !== NaN) {           var geometry = new Point(x, y);
const TagRow = ({data}) => {   let tags, tagsSection   if (data.markdownRemark.fields.tagSlugs) {
}                  if (typeof source === 'float') {             return source.toString();
onClick: function(event){     console.log( 'FILTER CLICK' );     $this = $(this);
}     debugger;     return compute.just(x);
return a.priority - b.priority;         };
link: '<a href="/" class="cc-link">{children}</a>',         link: '<a href="/" class="cc-link right">{children}</a>',         close: '<span class="cc-close">&#x274c;</span>',
this.contentDiv = $('<div class="igv-ideogram-content-div"></div>');         $(this.div).append(this.contentDiv[0]);         var myself = this;
if (err) {       return workflow.emit('exception', err);       console.error('Error remove session' + err);     }
;(function () {   'use strict';
.replace(/</g, "&lt;")             .replace(/\>/g, "&gt;")             .replace(/\"/g, "&quot;")             .replace(/\'/g, "&apos;");     }
import ShareEmail from './ShareEmail' import SharePermalink from './SharePermalink' import ShareImage from './ShareImage'
var result = $tw.utils.deepCopy(object),t;  for(var t in extendedProperties) {   if(object[t] !== undefined) {
Terms = require('./match')(Terms); Terms = require('./match/not')(Terms); Terms = require('./methods/tag')(Terms); Terms = require('./methods/loops')(Terms);
catch (e) {                 var err = new Error(e);                 err.status = 400;                 next(err);             }
itemClick() {         console.log("this.props click", this.props)         FSBL.Clients.SearchClient.invokeItemAction(this.props.app, this.props.app.actions[0]);
default: {       throw new Error(`Unknown instruction ${instruction.id}.`);       break;     }   }
controller.action_registerCommands = function( name ){     assert( util.isFunction( model[name] ) );
if (target.nodeName == 'BUTTON') {             util.preventDefault(event);         }
logger.info(error);         process.exit(1);       }
});      } else if (m = stream.match(/^\{([0-9]+)(:.+?)?\}/, false)) {
proto._calculateChildrenDependHeight = function(vModifiedWidget, vHint) {   throw new Error("Auto Height is not supported by QxFlowLayout"); };
function Event( type, props ) {         if ( !this instanceof Event ) {             return new Event( type, props );
successModal: function() {       debugger;       global.modalView.modalData.title = 'Success!';
if ($scope.account.notificationEmail.length > 0) {             return !!!tools.validEmail($scope.account.notificationEmail);         } else {             return true;         }
if (input.placeholder && 'placeholder' in document.createElement('input')) return input;   var color = color || '#AAA';   if (input.value === '' || input.value == input.getAttribute('placeholder')) {
return false; };
}, {     id: null,     id: "_m2",     name: "Deimos"
url: '',   regex: /^.*(?:(?:youtu\.be\/)|(?:youtube\.com)\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*)/ };
},     function (group, opts) {
"License-Online-Resource" : "http:           },            "License" : {             "Part" : "Proj4JS",
this.$el.html(ProgressTemplates(this.options.bars))       debugger     },
openLoc: function(){       var basisjsTools = typeof basisjsToolsFileSync != 'undefined' ? basisjsToolsFileSync : null;       if (basisjsTools && typeof basisjsTools.openFile == 'function')
}   clear () {     cache = {}   }
{     console.log("getMaxScore", players);     return players * 10 - 10;
L.esri.basemapLayer = function(key, options){   return new L.esri.BasemapLayer(key, options); };
return width;     };     function getTextRect(text, textFont, textAlign, textBaseline) {
return <Icon.Hot shrink={0.75} />                               break;                             case Badges.OLD:
static extractExtension(url) {     url = Common.ParsedURL.urlWithoutHash(url);     const indexOfQuestionMark = url.indexOf('?');
if (currentRow[3] === committedSketch){             if (currentRow[3] === "30"){               console.log("3: " + currentRow);             }             var checkerOuter = currentRow[2];
} = actionHelpers; global = Object.assign(global, actionHelpers);
export function isExplictCommand(name) {   return name && !/^\-/.test(name) }
class Wrapper extends Component {    constructor(props){       super();       this.state = {
});     }else if(stage.status=3){      if(!stage.timeout){
return;       break;     }
if (rules && rules.length) {        for (var i = 0, length = rules.length; i < length; i++) {         ruleStyleSheet = rules[i].styleSheet;
import $ from 'jquery' import e from 'gEngine/engine' import _ from 'lodash' import app from 'ampersand-app' import cuid from 'cuid'
const collections = await this.getAllCollections();     console.log('before delete length:', collections.length);     for (const collection of collections) {
function focus_search() {     $("#search").width("504px");
transclude(function (clone) {                         console.log(element);                         element.append(clone);
compatibility: 'all',          compatibility: 'none',       },
alert('Thank you for contacting me! Message was sent succesfully, will get back to you soon!');    $('#test').remove('loading').html('√');     },
.join(true,'T');     console.log(oneRowDescBuff);     test('parses single row description',function() {
getFirstVisibleChild : function() {       return qx.lang.Array.getFirst(this.getVisibleChildren()) || null;     },
ol.TileRange.prototype.containsTileRange = function(tileRange) {   return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&
exports.init = function() {  this.on("create", function() {   console.log("hi, ", this);  });
if (sap.ui.Device.system.phone) {     return this.getAggregation(sAggregationName, null, true);
describe('repeatEvery', function() {     var job = new Job();;     it('sets the repeat interval', function() {
);     return;     if (this.hwModule.monitorTemplate) {         this.hwMonitor = new Entry.HWMonitor(this.hwModule);
);       var currentETag;       for (var i = 0; i < clientETags.length; i++) {
if(err) {             console.log(err)             sage.log(err)
set: function (val) {       WriteStream = val     },     enumerable: true,
no.events._hid_key =  no.events._hid_key ;
} catch (err) {       return console.error(err)     }
this.allocateQuantity = _scope(quantity, this.available);   };   if (!avoidSlider) {
if(VALID_HOOKS.indexOf(event) === -1) {     console.error('addHook: Unknown event type: ' + event + ' - ignoring');     debugger;     return;
{      requestList = [];      requestMap = {};      selectedRequestId = null;      var lastModifiedRequestId = null;
let i = isTail ? this.items.length - 1 : 0;   while (item = this.items[i]) {    idx = this._getColIdx(item);
var output = [];     targetStylesheet = targetStylesheet;
const includes = transpileModules.map(module => (new RegExp(`${module}(?!.*node_modules)`)));   const excludes = [new RegExp(`node_modules(?!\/(${transpileModules.join('|')})(?!.*node_modules))`)];
this.dumpStatistics();         process.exit(1);     }
var self = this,                 $el = self.$element,                 options = self.options;             var $navTab = self._getNavTab(navTab),
resultGeneratedData = generatedData;             console.log(JSON.stringify(resultGeneratedData, null, 4));             return invokeSandbox('saveSandboxGenerated', generatedData);
if (this.showCursor) {                 var index = (this.cursorIndex + samplesIndex) % samples;                 var str = 'LODs:' + values[index][0];                 var lods = values[index][1];
create.execute();  };    conn.addEventListener(air.SQLEvent.OPEN, initListener);
console.log(test1_2({})) function test1_3(c) {var a = ((a = (c = c).a) === void 0 ? 3 : a), b = ((b = c.b) === void 0 ? a + 1 : b), c = ((c = c.c) === void 0 ? b + a + 1 : c);  {
}     } else if (true) {             dom = updateVnode(lastVnode, nextVnode, context, mountQueue);
controller.read(processData);  };
process.exitCode = 1;   process.exit(); }
type: "2fv"         },         uTextureSize: {             type: "2fv"
avatar: {         type: string       },       date: {
var array1 = message.toString().split(': ');             var array2 = array1[1].split('/');
$.Model.belongsTo = function(type, name){   name = name    var cap = $.String.capitalize(name),
if(_screen) {    console.log("ADD: " + JSON.stringify(_screen));        APP.Detail[APP.currentStack].add(_screen);
date = new Date(date.replace(/(\d)-(\d)/g, "$1/$2") );    else if (/^(\d?\d):(\d\d)(\s[\A\?P?]\M)?/.test(date)){      let matches = date.match(/(\d?\d):(\d\d)(\s[\A\?P?]\M)?/);     date = new Date();
onlyChrome(describe)('autoStyling', () => {     it('adds \'material\' modifiers and effects on Android', () => {
env.property = env.property || ''     var match = env.property.match(/^([pP]?([0-9]+))?([\/,][pP]?([0-9]+))?/)     if (match) {
} }; GreaterThanExpression.sign = $lex.GreaterThan;
}     res.status(200).json(data);   };
import DelayRender from '../DelayRender'; import provideChart from '../ChartProvider'; import { Consumer } from '../AxisContext';
for (var keyName in scheme) {           var definition = scheme[keyName];           if (definition.calculate) {
var posterImage;   vjs.BACKGROUND_SIZE_SUPPORTED = false;   posterImage = new PosterImage(this.mockPlayer);
disabled: boolean('disabled', false),       disabled: boolean('disabled', false),       length: number('length', 25)
this.storage[fileName] = str;                     return WinJS.Promise.as(str.length);                 },
const mapStateToProps = (x) => { throw new Error(JSON.stringify(x))   return { user,posts } };
import referencesChecks from './references'; import cacheChecks from './cache'; import wordpressChecks from './wordpress';
if ($scope.RUBY_ENGINE['$==']("opal")) {     }
if (false && _htOption.logoImage !== undefined) {             var logoScale = _htOption.logoScale;
Amount.prototype.to_human = function (opts) {   var opts = opts || {};   if (!this.is_valid()) return '';
if (typeof console === "undefined") { console = { log: print }; } if (5 === 5)  console.log ("hello world");
iElement.on('click', function(){                 if (shortList && false) {                     scope.showList = true;
import { connect } from 'react-redux'; import { login, setBalance, resetPrice } from '../actions/index.js'; import { Link } from 'react-router';
diff) {     diff =  (diff);     var originalLines = this.splitToLines(original);
var self = this,             $el = $(e.target),             shapeType = $el.data('shape-type'),             map = App.getLeafletMap(),
{                 console.log('up overlapY', body.overlapY, body.deltaY());                 body.blocked.up = true;
var get = Ember.get; var set = Ember.set; var forEach = Ember.EnumerableUtils.forEach;
this.processing = false;       C.router.applicationController.view.get('dropzone').resetUpload();       this.sendFile();     }
prop.input.positions += "["+position.join(",")+"]";     console.log(position);     e.preventDefault();
if ((err && err.status == '404') || value == null)           var value = []                  req.original_images = value;
var trigger = true;         debugger;         requestTestRunner(References().simpleReference0, queue).
res.send(404, 'SensorID invalid!');     };   } else {
console.log("CRITICAL ERROR: FAILED TO START");             process.exit();         } else {
get ident() {     var captures;
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
var config = JSON.parse(config)   let intlData = config.intlData
for (var i = 0; i < n; i++) {         var j = reverseBits(i, levels);         if (j > i) {
it("should be constructable.", function() {         debugger         expect(new RequestQueue({}, immediate));
redirect(model) {     return;     let context = this.modelFor('organization');
async function testRun() {              Object.keys(runs).forEach(key => {         runAction(key, runs[key], counter1++, counter2++, result => {
for (var i = 0; i < res.length; i++) {                     if (res[i].name.match(new RegExp(adapter.config.kreis + '\.xml$'))) {                         files.push(res[i].name);
import ProgressBar from 'progress'; import chalk from 'chalk'; import https from 'https';
Object.keys(tests).forEach(function(test) {   var re = new RegExp('^' + test + '.*\.json$');   files.forEach(function(f) {
curtop += obj.offsetTop;             } while (obj = obj.offsetParent);             return [curleft,curtop];
StandardHandler = require('./StandardHandler'); class GetContainerProperties extends StandardHandler {     constructor() {     }
import React from "react-native"; import Colors from "../../colors.json"; import Icon from "./icon"; import Modal from "./modal";
const {resolve, dirname} = require('path') const {read, write, exists, isAbs} = require('flipfile') const JSONChain = require('json-chain')
notify: function() {   debugger;  } });
const Notification = ({   color = 'normal',   size = 'normal',   active = true,
logFileChanges: false,   notify: false  });
"rotate(" + this.angleDeg + ")";     x   }
gmf.contextualdata.component.Controller_.prototype.preparePopover_ = function() {
$(selector + " [data-index='" + index + "'] .wv-palettes-max")                 .html(max + " " + unit);             var title = legend.title || "&nbsp;";
list: []       };       console.error("You are not connected to the internet - jquery.autosuggest!");      }     }
, headers: {           Authorization: 'basic '+btoa(owncloud.username+':'+owncloud.password)         }
" " + xAxisRotation + " " + largeArcFlag +          " " + sweepFlag + " " + pointsAbs[2] + " " +         pointsAbs[3] + " ");   },
window.setTimeout(function() {       editor.windowManager.confirm(message, function(state) {
_.extend(Assemble.prototype, Task.prototype); Assemble = Template.extend(Assemble.prototype);
this._emberDebugWorker.destroy();     };
import { connect } from 'react-redux' import * as actions from '../actions/actions' import ViewContainer from './ViewContainer.jsx'
return newState;         case (TablesCntlr.TABLE_NEW)  :             const {tbl_id, tableMeta, request} = action.payload;             if (has(state, tbl_id)) {
} else if (edge instanceof CircularEdge) {     if (goog.DEBUG) {       UtilityCollision.edgeEdgeCollisionTests++;
var solution = r.solution;   console.log(cell, solution);   for(var i=0; i<cell.length; ++i) {
if (address !== undefined) {             let key = /^\s+(\w*)\:\s+\|/gm.exec(stream.string);             key = key ? key[1] : '';
var title, _widget, isWidget, _element, isWidget;         for (var widgetName in targets) {
else             DOMDebuggerAgent.removeDOMBreakpoint(node.id, type);         this._saveBreakpoints();
} function endDraggingVertex(state, x, y, detectSnap) {   var catalog = state.catalog;
strategy = '+';       case 'minus':         strategy = '-';
},     componentDidUpdate: function(prevProps, prevState) {         this.maybeUnprocess();
if (data) {           debugger;           var username = data.layers[1].options.user_name;
steal('can/util/string',function( $ ) {
export const flagRejectEvent = (event, message, mode, user) => {       debugger       let _mode = mode == 'flag' ? 'flagged' : 'rejected';
_getCacheParam: function (method) {     return {};     var detectedBrowser = browserDetect();     var name = detectedBrowser && detectedBrowser.name && detectedBrowser.name.toUpperCase().trim();
} }; function insertContent(parent,child,prepend,sibling){
} else if ((data.event !== undefined) && (data.event == "patternLab.annotationPanel")) {        var i, els, item, displayNum;
var manager = this.managers[peer];       if (!!manager) {         manager = new ConnectionManager(this.id, peer, this._socket, options);
}     let request = !!this._auditingEnabled ?       this._builder.update().item(item).atVersion(expectedVersion).buildRequest() :
this.menuText.anchor.setTo(0.5,0.5);         this.startkey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);     },
this.keypressSound.load();                 this.keypressSound.play().catch(err => console.log(err));;             }
var singleAttrIdentifier = /([^\s"'<>\/=]+)/,     singleAttrAssign = /=/,
this.forceLayout = layoutEngine;                 var context = this;                 this.forceLayout.force.on("tick", function (d) {
const cache =        await render(req, res, { title: name, description, canonicalUrl });       return;
if (typeof node.name === 'string') return node.name   if (t.isJSXMemberExpression(node)) {     return `${getTag(node.object)}.${node.property.name}`   }
return qx.renderer.border.BorderCache._data[propValue];   };
embedModulesIn: function(doc, relativeModuleURLs, progressBar, thenDo) {         debugger;         var self = this,
if (solved = true) {     console.log(suspect + " did it in the " + room + " with the " + weapon + "!");
path: "/tutorials/blaze/creating-an-app",     contentTemplate: 'blaze-step01',     sha: BLAZE_COMMITS["1"].sha   },
template: Handlebars.compile(user_profileTemplate),         usertemplate: Handlebars.compile(userTemplate),         render : function() {
});         it("async", function (done) {             Augur.hashReport(ballot, salt, function (r) {                 test(r); done();
if(response.ok){           console.log(response.body);           res.json(response.body);
Ember.Select = Ember.View.extend({   tagName: 'select',
export class KeyboardInput extends mixin( null, EmitterMixin ) {     constructor( { element = document.body } ) {         this._map = options.map || this._createAutomap( options.inputs );         this._element = options.element;
} else {     var args = minimist(argv);     command = this._findIndexCommand();
app.controller('loginController', function($scope, $http, $state, webchatService) {      $scope.formMode = "login";
];     } else if (m = s_rgbaRE.exec(s)) {       c = [
var reshape = this._impeach() || this._exile() || this._expand()             if (false && reshape) {                 this.ponged = false
module.exports.isContainerRunning = function (pod, container) {   return typeof module.exports.containerState(pod, container) === 'running'; }
ChainDB.prototype._pruneCoinQueue = function _pruneQueue(block, batch, callback) {   return callback();   var iter = this.db.db.iterator({     gte: 'u/q/' + pad32(block.height),
it('isSubscribable should return false for null', function () {         expect(ko.isSubscribable(null)).toEqual(false);     });
onError : function(responseData, uuid) {     app.u.throwMessage(responseData);     $(app.u.jqSelector('#',app.ext.admin.vars.tab+"Content")).hideLoading();     }
return number * fabric.DPI / 2.54;           break;         case 'in':
finalMeasurements.splice(match, 1);     };   }
'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());           return;         }
else {     this.instance = new core.CanvasRenderer(window.innerWidth, window.innerHeight, settings);   } };
var Web3 = require("web3"); var Pudding = require("../");
function isArray (ar) {     return Object.prototype.toString.call(ar) == '[object Array]';   };
if (expected !== actual) {     debugger;     Results.insert({n: next_result++, type: "assert",
var petApi = sample.pet;     var req = petApi.findPetsByStatus({status: undefined}, {responseContentType: 'application/json'});
CordovaInput.userInterface = new function(convert) {
if (1===1) {                 return Promise.resolve();             }             return this.props.vm.saveProjectSb3()
case 4:       var day = "Thursday";       break;     case 5:
value = this.matchString_(text, pos, goog.i18n.DateTimeSymbols.QUARTERS);     if (value < 0) {
this._childManager.subscribe(publicationKey, this.swapChild.bind(this));             var node = this._dispatch.getNode();             node.removeAllChildren();
if (!!wc.hostWebContents) {       const parentWindow = BrowserWindow.fromWebContents(wc.hostWebContents)
trustedDomains: window.location.host ? [ window.location.host ] : [],     cacheBust: /MSIE/.test(navigator.userAgent) || /Trident\/[\d](?=[^\?]+).*rv:([0-9.].)/.test(navigator.userAgent) ? true : false,     forceHandCursor: false,
this.app.removeActivities([msg.activity]);     default:       logger.error('receive error signal: %j', msg);
}   resizedoc();  }
}         commandList = commmandList.next;      }
function _helperRemapAsyncToGenerator() {   const data = _interopRequireDefault(require("@babel/helper-remap-async-to-generator"));   _helperRemapAsyncToGenerator = function () {     return data;
for ( var x = 0; x < iRowspan - 1; x++) {       if (oLabel) {
return injectZeros(data, this.data, orderBucketsBySum);     };
}   case "say":    if (message.member.roles.some(r => ["Staff", "Développeur"].includes(r.name))) {
return static_url('images/icon-calc.svg');               break;             case DG.TextView:
enyo.dispatch(e);   enyo.pool.releaseObject(e);  },
return header; }; function decodeChannelHeader(header_bytes) {
console.log(e);         var err = new Error('Uglification failed.');         if (e.message) {
PlaceholderComponent(quail, test, Case, options); };; module.exports = ImgAltNotPlaceHolder;
return arcgisGeometryType; }; export function warn () {
return true;     return p.isPlatform('ios', 'iphone|ipad|ipod');   },   versionParser(p) {
var p = this.props;   console.log('PROPS form 4-- ', p)   const advancedParamsArrow = !!p.showAdvancedMarketParams ? '▲' : '▼'
case 9:return 10           break;         case 10:return 11
app.get('/api/inventory/storerooms/:id', function(req, res) {         models.Storeroom.findOne({_id: req.params.id}, function(err, storeroom) {             if (err) return next(err);             res.json(200, storeroom);
return res.render(res.locals.template, data);     themeEngine.getTemplate(req, res, function(err, template) {
.replace( /\s+-\S+/g, "" )                 .replace( /([\(\[\{\\\^\$\|\)\?\*\.\+])/g, "\\$1" )                  .trim().replace(/\s+/g,'|'),
var clickEvent = 'click';     if (!'classList' in userbar) {         return;     }
var upper = this.model.interpolate(bounds[1]/n).toPrecision(2);         console.log(lower, upper);         bounds[0] && this.model.set('lower', lower);
this.addEndSpacers();     if (window.debug === true) debugger;   }
const {HashNode} = nodes; const {SHORTNODE, FULLNODE, VALUENODE} = nodes.types;
$("#wait1").css("display", "none");      showStatsData(response);    },    dataType : "json"   });
set,     remove,     delay,
require('./bootstrap'); import Store from './Store'; import Components from './Components/index'; new Vue({
}     else {}     return false;
function(err, componentsInfo){       if(!!err){ return callback(err); }       server = http.createServer(self.app);
var escapeRegExp = function (str) {     return str.replace(/[\[\]\{\}\(\)\*\+\?\^\$\|]/g, "\\$&"); };
import React, { Component } from 'react'; import ReactDOM from 'react-dom';
options = options || {};   options.create = options.create;
it('MathParameter user resources getter', function () {         var mathParameter = new MyScript.MathParameter();         expect(mathParameter.getUserResources()).to.be.empty;
function view_find_localization(content, index) {     var index = content.indexOf('@(', index);     if (index === -1)
const patternIsString = typeof findPattern === 'string'     if (!findPattern instanceof RegExp && !patternIsString) {       return false
logger.info('no changes to report');       process.exit();     }     notifications.wikiChanges(changes, function (err, stringifiedOptions) {
} else {         tenuki.utils.removeClass(renderer.grid[intersection.y][intersection.x], "dead");       }
reason = evt.reason;     } catch (e) {     }
return result.replace(opts.replacement+"$",'');  };
const error = super.parseError(str);     if(!error) { return error };     if (error.name === 'JavascriptError') {
_buttonTxt = "Finish Quiz";             };             var _button = '<button id="nextQuestion" type="submit" class="btn btn-default">' + _buttonTxt + '</button>';
"self": { "href": "/" },   },   "_links": {     "orders": {
cur = cur[field]           } else {           }         })
console.error('Invalid option: ' + v);                         process.exit(1);                         break;                     }
case 'rotate':       let cosValue = Math.cos(value)       let sinValue = Math.sin(value)
}         var minWidth = Math.max(minWidth, this.getColumnMinWidth(col));         var maxWidth = this.getColumnMaxWidth(col);         if (this.getColumnWidth(col) !== null) {
if(isClient) {       var a = replicate(function (err) {         console.log('EBT failed, fallback to legacy')         rpc._emit('fallback:replicate')
handleMessage: function(msg){     console.log(msg)       handlers = messageListeners[msg['command']];
throw new Error(parser, "Unknown state: " + parser.state)       break     }
this.set('message.visible', false);       if (removeAfter = this.get('message.removeAfter')) {         Ember.run.later(this, remove, removeAfter);
return this;   }; };
for (var opts in service.options) {       _req[opts](service.options[opts]);
var actual = new Date(1449662400000).toString();             var re = /^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/;             expect(re.test(actual)).toBe(true, actual);
return Class.schema.emit(event);     if (!event.stopped) {       return Astro.eventManager.emit(event);
, '');   }
if (!!n.witness_script) {       pairs.push({
if (Ext.Msg) {    debugger;             Ext.Msg.alert(trlVps('Error'), trlVps("An error has occured"));
console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );    return THREE[ value ];   }
return false ? (         <section>
if (hours.id == 9) {                             var matches = /([0-9]+\:[0-9]{2})\s*([AP]M).*([0-9]+\:[0-9]{2})\s*([AP]M)/.exec(hours.hours);                             if (matches) {
case 6:return 24           break;         case 7:return 22
sequelize: Joi.object().type(Sequelize).required(),     sequelize: Joi.object().required(),     sync: Joi.boolean().default(false),
var props = inst._currentElement.props;     if (__DEV__) {       warnIfValueIsNull(props);     }
jisp.emit("failure", err, task);       if (jisp.listeners("failure").length) {} else {}       message = err.stack || err.toString();
toString() {     const str = this.name || this.constructor.name || this.constructor.prototype.name     if (this.message) str += ': ' + this.message     if (this.cause) str += '; caused by ' + this.cause.toString()
const targets = [mainTarget];     let rules = [...initialRules];     while (true) {       const currentTarget = targets[targets.length - 1];
if (!! options ) {         assert(_.isObject(options.cycleDetector));
setTimeout(function() {                 debugger                     set_and_verify_json_sparse(this.test, suffix, [{
Array.prototype.push.call(newArgs, callbacks);     console.log(newArgs);     if(document.body){
const horizonServer = horizon(httpServer, {     auto_create_collection: true,
; (function (w, $) {     if (!$) return;
}    };    var referenceObj = framesArray.shift();
rep('(load-file "' + process.argv[2] + '")');      process.exit(0);  }
if(data.user.dataLists = ["1"]){                     data.user.dataLists = [];
await test.execute(argv);    process.exit();    break;   case "start":
beforeEach(() => {       debugger;       testProps.columns[sortableColIdx].sortable = true;
var result;   var key, value;   var start = this.pos;
emitStack = [],   emitStackLevel = 0;;;;;;;;;
var google = require('google-proxy').get();; var _ = require('underscore'); var GeoJSON = require('geojson');
return _nextReplyId++; };
var that = this;  if(!trigger.groups[toId]) {   trigger.groups[toId] = {};  }
dockerVersion = spawnSync('docker', ['--version'], {     env: process.env,
}     mesh = new THREE.Mesh(geometry, material);     mesh.castShadow = true;
object = object || {};     if(!!baseUrl) object = appendLinks.call(_this, object);     var str = production ?       JSON.stringify(object, null, null) :
var output = eval(reassembleTest(chaiTestFromJSON, data));           debugger;         }
githubs = JSON.parse(githubs);       } catch (err) {       }
export function success(message, title = "Success") {   if (lastMsg === message) {   } else{     toast.success(message, title);
this.children = node.children;       for (var i = this.childNodes.length; --i >= 0;) {         this.childNodes[i].parentNode = this;
if (op = $(/^[<=>]/)) {                         if (b = $(this.addition)) {                             return new(tree.Condition)(op, a, b, index);
const t = document.querySelector('#pageTemplate'); const EDGE_FRACTION = 0.15;
var response = cache.get(url);       var promise;
}           lively.notify(members.length, "members")           const getMembers = members.filter(isGetMember);
;(function (xml_digester) {
import React, { Component } from 'react' import { Grommet, Box, Grid } from 'grommet' import { injectGlobal } from 'styled-components'
return <CmsContainerItem configuration={configuration} />;         break;       default:
this.props.onUpdate({ valid: isFormValid, partialUpdate: changes })     } else {     }
function generate( params, precision ){   var CmdGenerator = function(params){
EG.Model.reopen({
}; }]); linuxDash.directive('cpuIntensiveProcesses',[ 'server', function(server) {     return {
while (prop_value = cssStrings[i++]) {     prop_value = prop_value.split(':');
var fieldName = 'f_' + field.id,             input = inputData[fieldName] || "",             originalFieldData = (originalFieldData && originalFieldData.content) || "";
})(); ;(function() {     M.inherit = function(ChildClass, ParentClass) {
break;         case 'formData':
var resourceRef = sync.dataRef ? sync.dataRef.child('resource') : null;         console.log('aframe update', sync.isMine, this.refLock, resourceRef);   if(sync.isMine && !this.refLock && resourceRef)    resourceRef.set(this.data.res);
setSubs: function (name, value, options) {       if (typeof name !== "string" || typeof name === "") {         return "";
rollup_commonjs({      extensions: [ '.js', '.es6', ,'.es', '.jsx', '.ts', '.tsx' ]     }),
import * as serviceWorker from "./serviceWorker"; import Popup from "react-popup";
return config;   }   if (typeof config[command] == null) {     abort(ERRORS.NO_PROPERTY(command));   }
summary.characterData = projection.getCharacterDataChanged();     };     return summary;
if (window === 'successWindow') {    debugger;    this.$.successWindow.setAttribute('style', 'display:block;');
submit : _element("<input>", { "type" : "reset" }),
} else {       function fbLoginUiCb(func) {         UI.del('fblogin');         if (!func) {           return;
return /iPad|iPhone|iPod/.test(navigator.platform); };
if (level == 0) {                 xml += currentIndent + '</' + geddy.inflection.pluralize(n) + '>';               }
import { removeFromArray } from '../../utils/array'; import { defineProperty } from '../../utils/object';
marker.update(previous && previous.element);   if (previous && window.initialData.scrollPreviewWithEditorSelection) {    let scrollTo = 0;
const temp = input.parentElement;     input.outerHTML = input.outerHTML;     input = temp.firstElementChild;
for(var i = children.length-1; i >= 0; i--){     children[i]._testInputs(ctx, inputs);
function addResponsiveClass(str) {   return str.replace(/\<img/g, '<img class="img-responsive"'); }
performSearch: ({ updateResults, fuse }) => (_, query) => {       console.log({ query })       let results
ipAddress: function(ipAddress) {     var match = ipAddress.match(/\)\)\)([0-9\.]+)$/);     if (!match) return null;
if(err) { return handleError(err); }       var roles = getArguments(arguments);       populateGlobalRoles(roles);
}       if (typeof o === 'object' || typeof o === 'array') {         var s = JSON.stringify(o);
try {   this.db = Ti.Database.open(this.name);  } catch (ex) {
this._props.name = value;    this,emit('setName', value);    return true;
if (selection) {             onSelectText(selection);           } else {
}     var directRenderTextLayerFn = textRenderer.directRenderTextLayerFn(morph),         nMeasured = 0;     morphWidth = morphWidth - paddingLeft - paddingRight;
this.PropertyPathWalker.Update(source);          } else if (this.Binding.RelativeSource && this.Binding.RelativeSource.Mode === RelativeSourceMode.Self) {              this.PropertyPathWalker.Update(this.Target);
} const publish = async (post) => { }
django.jQuery(function($) {  debugger;  django.cascade.TextLinkPlugin = ring.create(eval(django.cascade.ring_plugin_bases.TextLinkPlugin), {});
case 's':                 return s + "es";                 break;             case 'h':
if (oldState) {                 console.log('Upgrading');                 const upgradedState = ['_g'];
d3plus.visualization.line.shapes       = [ "line" ] d3plus.visualization.line.tooltip      = "static"
return;  _controllers.controller.storage.users.get(identity.user_id, function (err, user) {   var isnew = user ? false : true;
"d9/dec/a00090.html#a9c0d57cd72c091f63895944959e98330":[10,0,2,1,2,0], "da/d01/a00153.html":[9,0,2,0], "da/d01/a00153.html":[10,0,2,0], "da/d24/a00068.html":[10,0,3,0,0],
this.chunk = null;   var length = this.offset - start;   if (headerState[this.state]) {
var currentNode = new Potree.PointCloudOctreeGeometryNode(name, pco, boundingBox);     currentNode.level = level;
}); };; module.exports = LanguageDirectionPunctuation;
if (Ember.FEATURES.isEnabled('propertyBraceExpansion')) {         var itemPropertyKeyPattern = match[2],             addItemPropertyKey = function (itemPropertyKey) {               cp.itemPropertyKey(dependentArrayKey, itemPropertyKey);
}else{             console.info(log_start(options.themeUrl));             diffLocalAssets(conf, state).then(function() {
{token : "string", regex : "'",     next  : "start"},             {token : "string", regex : ".|\w+"}         ],
case 'divider':               return <Divider key={`menu-${index}`} />               break
return React.createElement(props.inline ? 'span' : 'div', { className: props.className }, items); }; Group.propTypes = {
get hex6() {     var captures;
}             }             for ( var i = 0, l = this.types.length; i < l; i++ ) {                 this.order[ this.types[ i ] ] = storages;
import { startCase } from "lodash"; import withEditorProps from "../../withEditorProps"; import FeatureProperties from "./FeatureProperties";
}     projectName = !!projectName ? projectName.textContent.trim() : '';     link = togglbutton.createTimerLink({       className: 'phabricator',
return $.ajax({             url: base_url() + url,             type: "PUT",
it('should have the property next (base name: "next")', () => {
var r2 = obj.rectangles[1];   while(from = todo.pop()) {    vertices[from].neighList.forEach(function(obj) {
callback(null, msg);   };   this.slave.once('disconnect', onclose);
});  };  function fullResizeVideo() {
ngeo.message.Popup.prototype.setHeight = function(height) {   this.element_.height(height);
ev = both ? eventName : 'all';             if (list = calls[ev]) {                 for (i = 0, l = list.length; i < l; i++) {
var comment = getDoc(node);       if (comment) {
var fs = require('fs') var eos = require('end-of-stream') var through = require('through2')
}             });             return normalizedHighlights;         },
clipboardy.writeSync(emoji);   process.exit();  };
params.FilterDesc = args.optarg;                                     case "l":                 params.FilterLib  = args.optarg;
]);     _templateObject_bd41acb0dea811e8bb74b182b64af7a1 = function() {       return data;
import Mosaic from '../../src/index'; import { Observable } from '../../src/observable'; import { ARRAY_DELETE_PLACEHOLDER } from '../../src/util';
return this.i18n.Normal;                     break;                 case 2:
exports.run = function (grunt) {     return;     var replaceContent = function (content, sha1) {         content = content.replace('%extVersion%', grunt.config('pkg.extVersion'));
require(['gv', 'config', 'models/Books', 'models/State', 'layouts/Layout', , 'routers/Router'],      function(gv, config, Books) {
.then((response) => {       debugger;         if (response.status === 401) {
import theme from 'nivoTheme' import { colors, totalCount, getColor } from '../../../constants' import ChartLabel from 'core/components/ChartLabel'
if (textfield) {       goog.dom.classlist.add(textfield,           goog.getCssName('firebaseui-textfield-invalid'));     }
var testMulAsync = async(function *(declaration) {             throw new Error('TODO');             assert(lib._funcs);             assert(lib._funcs.mul);
TransportMetricsPlugin.prototype.unbind = function (metricsService) {     $A.uninstallOverride("ClientService.send", this.sendOverride);
if ( typeof THREE.OrbitControls === 'function' ) this.controls = new THREE.OrbitControls( this.camera, this.container );
this.element.appendChild(img);     };
}))             );         };         componentDidMount() {
it('Should filter out bad values', () => {       const nodes = findById([testID, 'NotFound', null, '', {}, 99, , 'Duplicate', ':bad-id']);       expect(nodes)
it('2. Basic Usage: collection observable with ko.computed', () => {     debugger;     kb.statistics = new kb.Statistics();
.then(items => items.reverse())         .then(items => items.filter(item => !!!(document.getElementById(item.guid))))         .then(items => items.map(item => applyTemplate(itemTemplate.cloneNode(true), item)))
item.addParents = function (person) {   debugger;   if (person.inFamily) {
for (var metric in this.metrics) {       if (this.metrics[metric].target === false) {       } else {         var name = this.metrics[metric].target + '-' + this.metrics[metric].source
}     debugger;     this.zoom_container.go_to(new_zoom, new_pos);
if (addon.plan.name.match(/hobby/) != null) {       cli.error('redis:maintenance is not available for hobby-dev instances')       process.exit(1)     }
Object.defineProperty(baseObj, property, {get: getter, configurable: true});   };   var setter = baseObjProperty && baseObjProperty.set;
function makeImage(src) {             debugger;             return new Promise(function(resolve) {
function Consumer() {};     Consumer.prototype.consume = function (ip) {
angular.module('axisJSApp')   .service('pdfOutput', function pdfOutput(GenericOutput, chartProvider, $location) {     var pdf = angular.copy(GenericOutput);
}             } catch (ignore) {             }
if($scoreWrapperEle = $('.bubble-wrapper')[0])   document.body.appendChild($scoreWrapperEle)
: str.replace(/\\/g, '/') }; if (process.platform === 'win32') {
case 'boolean' :             return json;       break;       default:
var wrap = require('./lib/wrap'); var fs = require('fs'); var path = require('path'); var coffee = require('coffee-script');
done();   };
const i = type === 'ssa' ? 2 : 1             for (; i < 9; i++) {               subtitle[ASS_KEYS[i]] = values[i]
log.info('CornerstoneToolsMeasurementModified');   debugger;   const measurement = collection.find(
if (!item.next) {             debugger;         } else {
} ); ; export { Skeleton }
if (this.get('model')) {     C.get.apply(C, this.get('model').getUpdateRequest(this.HTTP));     for (var i = 0; i < types.length; i ++) {
pathname_prefix: "",       action_name_black_list: ["super", "init", /^\_[^\_]+/],      app_tag_on: true,
],       "output": "Boolean",       "outputShape": Blockly.OUTPUT_SHAPE_HEXAGONAL,       "category": Blockly.Categories.data,
require('./grouped_builds_view.css') var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup; const PipeLineBuild =  React.createClass({
let resp = QRespondent.findOne( {_id:Session.get("rid"+instance.qnrid())} );         console.log("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",instance.qnrid(),resp);         $(".qq-val").each(function(idx, elem) {
var parts = /^(.+\/)*(([^\/]+)\.[^\/.]*|[^\/.]+)$/.exec(process.env.GEOJS_TEST_CASE);     if (parts) {
if (!af.os.ios || !this.requiresNativeTap) this.allowDocumentScroll_ = false;
process.exit(1);       return;     }
step.args.find('A').value = 4;   var data = step.pack();   expect(data).to.deep.equal({id: step.id, key: 'foo', cells: {A: 4, B: 2, C: 3}});
return originalValue;         break;       case 'object':
i = 0xFF;         while (true) {             var n = this.readRegister(this.DivIrqReg);
if (callback) {     function next(er, ret) {       if (ret)
computed,   generateGuid,   get,
page.onConsoleMessage = function(msg) {
const mqtt = require('mqtt') opt.broker = opt.broker opt.subbroker = opt.subbroker || opt.broker
const Plugin = require('../plugin'); const url = require('url'); class Router extends Plugin {
return cb(); };
if(err) { return handleError(res, err); }       return res.json(attendance);;     });
}    };    console.log("total rooms: ",this.map.roomsToExit.length);
};     ;     ;     return DigitalOcean;
return false;         break;       case 'Object':
console.log('got session');                             if (!session) return;
const targetName = target.name;         debugger;
if (fs.existsSync(unixSocketFile)) {     console.log(unixSocketFile);     return requestEmulator(unixSocketFile, options);
}     return new CommandStack();; });
forEach(appsList, function (app, key) {     debugger;     appListData.push({
else return logs(args[0], cb);     };     case "stop":  {
};     MainPage = __decorate([         core_1.Component({
setDevicesDiscoveryConfig(discoverUsbDevices, portForwardingEnabled, portForwardingConfig) {   }
return function defFunc(ajv) {     if (ajv.RULES.keywords[keyword])       return console.warn('Keyword', keyword, 'is already defined');     defFunc.definition = {
const instance = this;  window.Apps.getWsListener().unregisterListener(AppEvents.APP_STATUS_CHANGE, instance.onStatusChanged);  window.Apps.getWsListener().unregisterListener(AppEvents.APP_SETTING_UPDATED, instance.onSettingUpdated); });
};       } else if (!paymentCurData) {                } else {         const timeoutHours = orderState === 'DISPUTED' ?
thesauris.save(data)       .then((response) => {         return thesauris.get();
startEndMarkers.push(marker);         };
function doAddressSearch() {   console.log('Address search: ' + address);   var address = $("search_input").value;
goog.require('Zlib.Deflate'); goog.require('Zlib.Inflate'); goog.scope(function() {
output: {     filename: 'dist/bundle.min.js',     filename: 'bundle.min.js'   },
this.pixelType = zen3d.WEBGL_PIXEL_TYPE.FLOAT;         this.magFilter = zen3d.WEBGL_TEXTURE_FILTER.NEAREST;         this.minFilter = zen3d.WEBGL_TEXTURE_FILTER.NEAREST;         this.generateMipmaps = false;
} else {                         return "'" + value.replace(/'/g, "''") + "'";                     }                     break;                 case 'number':
} ; function last(arr) {
}); ;(function($){  "use strict";
);                 var height = (model.getHeight() - prefs.rect.height);                 var middleRect = d3Ref.draw.centeredBasicRect( new DiagramCore.Models.Point({'x': center.x(), 'y':  center.y()+100}), 150, height, 0, 0);
if (!firstLang) {             return gettext('[unknown]');;         }
this.name = 'MongooseError'; };
return 'web'   }   static get scheme () {     'session'   }
function use (names, fn) {   debugger;   if (type(names) === 'string') {
for (index = 0xF0; index <= 0xF7; index++) {   count++;    hex = decimalToHexString(index);   try {
Compiler.prototype.visitRulesetList = Compiler.prototype.visitRulesetList
if(isStream(items)) {             debugger;             iterateOn(iterations, items, scope, section.alias,
return new oid(); };
if(this.addproperty_checkboxes) {       for(var i in this.addproperty_checkboxes) {         if(!this.addproperty_checkboxes.hasOwnProperty(i)) continue;
return 'Q';     break;     case 'chancesleet' :
import { LatLngIdTravelMode, LatLngId } from './../types'; import { TargomoClient } from './targomoClient';
return !!value;             case 'habool':                 const haBoolean =                     this.nodeConfig.server.nodeConfig.ha_boolean === undefined
html += "<h3>Functions</h3>";    for (i=0; o=objs[i]; i++) {     if (o.group) {
getSiteType: function() {         if($('#jplayer').length && /^chat\./.test(location.hostname)) {             return 'chat';
darkMode: window.Canvas.user.darkMode,     locale: window.Canvas.user.locale,     admin: window.Canvas.user.admin, };
function distribution(obj){         o = normalizedObj(obj)         return function(){
return false;                 break;
case 'read':                 console.log('read message list');
if (!result.valid || polymorphicValidationErrors.length > 0) {                 var error = new VError('Error validating request body');                 error.name = 'ValidationError';
if (data) {       data.id = data.id;       delete data._id;
.reduce((sortedLabels, labelName) => {       sortedLabels[labelName] = obj[labelName];       return sortedLabels;
return rule.test(val);     break;    case '[object Array]':
throw new Error('Logger.cli() was removed in winston@3.0.0');   console.warn('Use a custom winston.format(function) instead.');
} catch (e) {     const newEvent = { ...event }     let pathname = new URL(event.request.url).pathname
} else if (tag.type === "return" || tag.type === "returns") {         debugger;
}             var viewGL = coordSys.viewGL;
function menuClose() {    web.eventRemove(window, 'resize', menuClose);    if (web.exists(document.querySelector('.mnp.mnp-display'))) {     web.classRemove(document.querySelector('.mnp.mnp-display'), 'mnp-display');
if (unrenderers[i]($content, message)) break;   };  }
checkQuit();   })  };
return field     })   } catch (err) {     this.emit('log', {       source: 'types',       level: 'error',
render: function () {     console.log(this.props.user.user)     var accountLinks;
}             if (!!value) {               childScope = $scope.$new();
}else{     G.log("before slaves");     this.slave.apply(this, obj[key]);
return null; };
script     );     if (typeof module !== 'undefined' && module.exports) {         module.exports = createApp;     } else {         this.app = createApp();
thisMonth = this.value.getMonth();     var monthLength = this.getMonthLength(thisYear, thisMonth);     var dates = this.$.dates.getControls();
if(editor.isMathEditorVisible() && e.type === 'focus') editor.closeMathEditor()             answerFocus = e.type === 'focus'         }).on('paste', e => {
};     VerifyButton = __decorate([         react_redux_1.connect(null, function (dispatch) {
Viva.Graph.webglInputEvents = function (webglGraphics) {     if (webglGraphics.webglInputEvents) {
import MoviesCardList from "../components/MoviesCardList"; import ActorsList from "../components/ActorsList"; import ReviewsList from "../components/ReviewsList";
if (this.v <= 5) this.errorReservedID();            default:       pendingExprHead = this.id();
ReactDOM.render(<Positioner />, mountNode);
if(!!plug.util.env.mongo) {         log('Starting MongoDB');
var sublocality_area = [];       var idx;       geocoderResult.address_components.forEach(function(addrComp) {
else if (A.FormValidator.isCheckable(target)) {                             var label = ancestor.previous('.' + label);
console.log('PDC:');   console.log(wnt.PDC);    console.log('UserName:');
}   if (niantic_params.CURRENT_VERSION === undefined || Object.keys(window.niantic_params.botguard_method_group_flag).length == 0) {     dialog({
$advancedPreview.css("background-color",color);           methods.updateLightnessStyles($lightnessSpectrum,hue,currentSaturation);           $hueSpectrum.attr("style",methods.updateHueStyles(saturation,currentLightness));
this.forward(req, res, function(r) {     r.on('error', function() {       self.emit('error', err);       res.end();
}); }); describe('GET /api/peers', function () {  it('using invalid ip should fail', function (done) {   var ip = 'invalid';
constructor() {         this.wordPattern = /[\w\-\.:<>\*][\w\d\.\\/\-\?<>\*!]+/;         this.indentationRules = {
import { BackendService } from './services/backend.service'; import * as moment from 'moment' import 'rxjs/add/operator/toPromise';
if (nodejs) {      var AgentSmith = require('../../agent_smith/src/agent_smith');      var Neo = require('../neo');      require('./cluster');
export function* getRecords() {   console.log("GET RECORDS");   const currentModel = yield select(makeSelectCurrentModelName());
onTick: () => {    console.info('Cron job completed')   },
handleTlsConnection (socket, hostname) {     console.log('new Tls connection', hostname);
}                 for (var i = 0; i < this.assetManager.indices.length; i++) {                     if (this.assetManager.indices[i]) {
parser.addHandler("season", /([0-9]{1,2})x[0-9]{1,2}/, { type: "integer" });     parser.addHandler("season", /(?:Saison|Season)[. _\-]?([0-9]{1,2})/i, { type: "integer" });
x[0].id = path + '/' + i;             if (t = props[ppre]) {                 if ((isPseudo && freezeID === t.freezeID) ||
lazy: true,                 useFactory: (config, bootstrap, types, resolvers, args, guards) => __awaiter(this, void 0, void 0, function* () {                     config = yield config;
const firstDigit = requestDetails.statusCode.toString()[0];             debugger;             if (firstDigit !== "2" && firstDigit !== "3") {
return true         break       } else if (comparison < 0) {
}   root.ng.common.locales['ar-il'] = [     'ar-IL',
}).then(function (key) {   if (!!key._key)    t.pass('CryptoSuite_ECDSA_AES function tests: verify generateKey ephemeral=true return object');
const URL = req.body.url     appstore.fetchAppInfo(URl)       .then(info => appModel.add(info))
function _addChar(ch, pos){       var pos = pos || _chars.length;       var id = _.uniqueId('char-')
};  _ImplicitStylePropertyValueProvider.Instance.RecomputePropertyValue = function (propd, providerFlags, error) {      if ((providerFlags & _ProviderFlags.RecomputesOnClear) === 0)          return;
return tokens;   };
return a += b;       break;     }
var transactionsbypayeeRef = {};         var transactionsRef = {};         var authData = fb.getAuth();         var thisHouseId = myCache.get('thisHouseId');
var h;    while(h = this._notifyConnections.pop()){ h.remove(); }
}   var file = path.resolve(process.cwd(), file);   if (!~file.indexOf(':
loadWidget: function(index) {       debugger;
var mcos = 1.0 - cost; var v0 = mcos*xy; var v1 = mcos*xz; var v2 = mcos*yz; return this.multMatrix([cost+mcos*x2, v0+zs, v1-ys, 0, v0-zs, cost+mcos*y2, v2+xs, 0, v1+ys,
showPoster(source);     } else if (ext === 'mp4', 'ogg', 'ogv', 'webm') {      playVideo(source);
function basicGithubId(text) {   return text.replace(/ /g,'-').replace(/[\/?:\[\]`.,()*"';{}\+]/g,''); }
for (index1 in parents) {           if (true) {             var k1 = parents[index1];
options.id = layer.id;       debugger;       esriLayer = new CartoLayer(layer);
columnClass: 'col-lg-3 col-md3 col-sm-2',                 linkTo: "\{\{ '/#/inventories/' + group.inventory \}\}"                 },
switch (action.type) {     case 'MEALS_REPLACE':       let meals = [];
} else {           console.log("Docs successfully built.".bold.green);         }
tabWidth: 2,       trailingComma: true,       wrapColumn: 80,
$('#deletingAlert').addClass('in');                         var result = $.ajax({                             type: 'DELETE',
let state = arrayStates._START_;   while (true) {    let token = this.tokenList[this.index];
loadItems: function() {   hash = {};   hash.type = 'GET';
try {               var _value2 = Slim.lookup(source, path, target);               target.innerText = target.innerText.split(expression).join(_value2 || '');             } catch (err) {}           };
var assembleDefaultLayout = function(assemble, next) {       debugger;       grunt.log.writeln('Assembling'  + ' default layout'.cyan);
seenNonDefaultActions.push(action);       if (!!actionConflicts[actionHash(action)]) {         actionConflicts[actionHash(action)].forEach(function (actionConflict) {
if(this.constructor.prototype==c.prototype && (ct=this.postscript)){ct.apply(this, args)};   },
var config; var path;
}     } catch(e) {              } finally {
console.log ("Error posting to instances, instance data json string no passed in or corrupt");         process.exit (1);     }
},  'no semi-colons': {   options: {
var result = null;     debugger     models.forEach(function(model) {
whileplaying: function() {                     eqBarValues = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];;
if (args) {       if (typeof args.name != "undefined") {       }
allParams = [];     _unwind = obj.unwind !== undefined ? obj.unwind : true;     _splitter = obj.splitter !== undefined ? obj.splitter : "-";
var superError = 'error critical';    var $termsAndConditionsControlGroup = $('#terms-and-conditions').closest('.control-group');    $termsAndConditionsControlGroup.removeClass(superError);    if (!this.get('termsAndConditions')) {
tDescription = this.getPath('model.attributeDescription.attribute.description') + '—' +             SC.String.loc( 'DG.LegendView.attributeTooltip');         if( tDescription !== this._labelNode.get('description')) {
name: `npc${i}`,         labelText: n.replace(/(\}|\{|\:|\.|\(|\)|\-|\=|\[|\])/g, ""),         appendTo: this.npcSettingsWindow,
console.log('error!', res);                         debugger                     });
return keysNotTranslatedPerLocale; };
if ( typeof( id ) == 'array' )     {
throw "self.record undefined in start observing"    return   }
export function clearAutocomplete () {   return   if (autocompleteResults) {     autocompleteCurrentValue = null
let gatewayStatus = availableGateways[selectedGateway];     inputCoinType = !!gatewayStatus.assetWithdrawlAlias          ? gatewayStatus.assetWithdrawlAlias[inputCoinType.toLowerCase()] || inputCoinType.toLowerCase()
QueueEmpty = exports.QueueEmpty = function() {     this.name = "QueueEmpty";
var isReadonly = angular.isDefined(attr.readonly);     var isRequired = angular.isDefined(attr.required);     var mdNoAsterisk = angular.isDefined(attr.mdNoAsterisk);
url: contextPath + "/loadLinksConfig",             data: {activeClassifier: lastActiveClassifier},             success: function (content, textStatus, request) {                 if (tomlEditor != null) {
case 'oneToManyMorph':           case 'manyToManyMorph':             const transformToArrayID = (array) => {               if(_.isArray(array)) {
}                   if(data.user.mostRecentIds = {corpusid:null}){                     data.user.mostRecentIds = {};
var me = this;         me.flow = new SuperMap.ThemeFlow();         me.offset = new SuperMap.ThemeOffset();         me.style = new SuperMap.ThemeGraduatedSymbolStyle();         if (options) {
$(window).on('resize.ADE',callback);   };
if ("build" !== 'build') {}
return (x)['+'](this);         throw ('Unknown Type for Rational +');     }
return process;     break;    case "relay":
return "?" + query.join('&'); };
import Plain from "slate-plain-serializer"; import Base64 from "slate-base64-serializer"; import { Value } from "slate";
this.setState({circuitType5: null});                                     default:                                         break;                                 }
fs.unlinkSync(actualFile);     } catch (err){};
case "Lbracket":             var right;             if (this.lookahead(0) === "Number" || this.lookahead(0) === "Colon") {
return callback(null,'Done - Xml Process');      break;     }
return gulp.src(config.path.resources)              .pipe(gulp.dest(path.join(config.path.build, 'res'))); });
: table[field].equals(context.request.urlTokenized[index - 1])             break;           case "null":
ol.WEBGL_EXTENSIONS;
import MarkdownSerializer from 'slate-mdast-serializer' import { Block } from 'slate' import React from 'react' import { matchBlock } from '../../utils' import shortId from 'shortid'
var g = ('undefined' === typeof window ? global : window) || {}   var foolBrowserify = function (r) {     try { return require(r) } catch (_) { }   }   _crypto = (
if (e.url === component) {               flexo.log("... loaded {0} for".fmt(e.url), this, this.__target);               flexo.notify(this, "@loaded", { instance: this
vNext = vItems[vItems.length-1];   };
return HoneyProxy.search("filter-"+($el.data("filterclass").split(" ").join(" filter-")),$el.val(),$el.data("negate"),ids);   $el.data("active",$el.val().trim() !== "");  }
const URL_REGEXP = /(url\s*\(\s*['"]?\s*)([^'"\)]+)(\s*['"]?\s*\))/g; const HTTP_PROTOCOL_REGEXP = /^https?\:\/\ function processStyleDeclaration(decl, opts) {
this._dataView.get('contentView').set('calculatedWidth', left);   },
}             for (var i = startIndex; i <= endIndex; i++) {                 var item = childNodes[i];
forEach(tmp, function(value) {           if (!value.match(/^max[^\-]/)) {             style.push(value);
.then(() => {      fail('Should not have been able to join a room uninvited');      done();     }).catch(e => {
process.exit(-1);     };
type: 'array',           title: 'Content tags',           of: [
throw new Error('Should not execute unrelated afterEach');         done();     });
this.update = function(node, template) {     var node = this.get(node);     var oldName = node.name;
const fs = require('fs-extra') const path = require('path') const request = require('request-promise-native') const pacote = require('pacote')
var _ = require('underscore'); var React = require('react'); var APIRequest = require('superagent');
const monthsNumInc = text.toString().match(/\:MM_[-,+]?[0-9]{1,2}(?!_)\b/ig);     if (monthsNumInc) {
var type_text, credit_text, au_text;       if (false) {             type_text = "(" + (credit+au) + ")";
return model.getDocs(currentWord)           break         case 'definition':
location_arrow: 'location-arrow',  lock: 'lock',  long_arrow_down: 'long-arrow-down',
escapeRegExCharacters(value) {     return value.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');   },
Bacon.Observable.prototype[symbol('observable')] = Bacon.Observable.prototype.toESObservable;
if (!ws || !ws.length) {       return;     }
results:[pathToCode],            env,            arc,            start,            stats:[stats]
var workers = self.workers;     var startTime = new Date().getTime();     if(config.workerCount !== self.workerCount) {
state.assignable = false;                         const strings = [state.tokenValue];                         result = new runtime_1.TaggedTemplateExpression(strings, strings, result);
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2011-08\/mental_feeling-1312586254.swf",  admin_props : false,
return "mat3";                     case Kinds.MATRIX3:                         return "mat4";
console.log(chalk.white(prefix), sep, msg)   process.exit(0) }
var StringBuilder = traceur.util.StringBuilder;   var Keywords = traceur.syntax.Keywords;   var PredefinedName = traceur.syntax.PredefinedName;
result.errors.push(`Error: invalid data to convert to search format`);             return response;         }
describe('bundling', () => {   it('should accept vars', () => {     expect(process.env['some_env']).toEqual('some_value');   });   it('should work', () => {
charSet: null,     autoPlay: null,     allowTransparency: null
Swiped.prototype.move = function() {         console.log(this.dir, this.right, this.delta);         if ((this.dir > 0 && (this.delta < 0 || this.left === 0)) || (this.dir < 0 && (this.delta > 0 || this.right === 0))) {
wait: function(data, callback){         waitAsync.setTimeout.call(window, callback, timeout);     },
rawCase.status = { 'name': rawCase.status };             rawCase.product = rawCase.product;             rawCase.group = { 'number': rawCase.folder_number };
export const getRidOf = str => {   if (/\{[^\}]+\}/.test(str)) {     return {
var childPositionsValid = true;   for (var i = 0; i < this.children.length; ++i) {    if (!this.children[i].positionValid(this.children[i].getCurrentSpace())) {
const renderer = TestUtils.createRenderer(); const defaultProps = {}; describe('ObjectName', () => {
if (!file instanceof File) {    this.setState({
case 'de':       return currentNumber.split( /(?=(?:\d{3})+(?:\.|$))/g ).join( "." );       break;     }
renderPlaylists() {     this.setState({ currentRoute: "channels" });
this.websocket.send(`${commandStr}${utc}`)     debugger   }
.replace(namedParam, function(match, optional) {                      return optional ? match : '([^\/\?]+)';                    })
var _documents = state.documents.get(targetName);           debugger;           var _nextState = state;
};       break;     case TYPE.BINANCE_CANDLESTICK:
<AppIcon />;   ; const codeIcon =
while (++idx < len) {         var ch = str[idx];         substr += ch;
if(val.indexOf('rgb') > -1) {    var matched = false;
$scope.removeSubscription = function() {             userSubscriptionRef.$remove().then(function() {                 NotificationService.success('Removed', 'User Subscription')
gpii.processReporter.live.get = function (request, processReporter, solutionsRegistryDataSource) {     debugger;     console.log ("!!!! " + request + " !!!!");     var runningSolutions = [];
_.each(tagName, function(tag) {       ko.components.tagIsComponent(tag, isComponent);     });
}                 };                 return postData.call(self, batchExt, { tx: self.txArray });
const value = xs => isEmpty(xs) ? `[]` : `${head(xs)}:${value(tail(xs))}`;     return `[${typeof this === `[string]` ? fromListToString(this) : value(this)}]`;   }
self.annotate = function(req, action, objects) {     var matches = action.match(/^(\w+)\-([\w\-]+)$/);     var property;
'(' + baseUrls.join('|') + ')' +     /[:\/]([^\/]+\/[^\/]+?|[0-9]+)$/.source   );
updateResources(){         debugger;         let tmpSwagger = this.state.swagger;
}, undefined)   var menu = shop.options.menuFactory.create(menuOptions)   if (!menu)     renderNonTty(shop, menuOptions)
case GeochronoUnit.EPOCH:             dates = Geochrono.epoches; break;         case GeochronoUnit.PERIOD:
options: {                 startkey: [startOfWeek,,],                 endkey: [endOfWeek, endOfWeek, 'appointment_'+maxValue]
this.handleOrientationChange();     };
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2011-01\/1294353899-4428.swf",  admin_props : false,
for (propertyId in statements) {     angular.forEach(properties.getRelatedProperties(propertyId.substring(1)), function(relPropScore, relPropId) {
draftPoint_attr,   draftPoint_angle,   draftPoint_attr,   draftPoint_clone,
self.remove = function (model, e) {             debugger;             if (confirm(gettext("Are you sure you want to remove this conditional message?"))) {
document.getElementById("router").setAttribute("route", route); };
router.get('/', async (ctx, next) => {     console.log(ctx.request.ip)     ctx.body = { message: 'Hi there.', ctx: ctx.request.ip } })
var test = document.createElement('div');     var fragment = Polymer.parseAndBindHTML('<input value="{{bar}}" />', test);     test.appendChild(fragment);
this.inherited = true;   };
return (isNaN(n) ? (confVal === "true") : (n !== 0));     if(confVal === "1" || this.data[conf] === "true");   } else if(typeof confVal === "boolean") {
import { storiesOf } from "@storybook/vue"; import { withKnobs, text, select } from "@storybook/addon-knobs"; import notes from "./README.md";
error : function(data){        alert("Error while Searching.");       }
}; let continueTraverseEach; export const traverseEach = (navKey, state, resultFn, path, object, pathIndex, returnFn, context, mutationMarker) => {
augur.api = new contracts.Tx(process.env.ETHEREUM_NETWORK_ID || constants.DEFAULT_NETWORK_ID); augur.api.functions = augur.api.functions; augur.bindContractAPI();
createDat: {     desc: 'create a new Dat archive',     desc: (param, pages, opts = {}) => {       if (opts.title) return `create a new Dat archive, "${opts.title}"`
var indexO = 0; for (indexB1 = 0x00; indexB1 <= 0x7F; indexB1++) {          count++;   var hexB1 = decimalToHexString(indexB1);
var status = navigator.onLine ? true : false;     debugger     if (status) {
return originalValue;       break;     case 'object':
}             break;         case 1:
Ti.Android.currentActivity.startActivity(intent);  }  function createOptionsMenu(evt) {   var menu = evt.menu,
$("#saved-questionnaire-code").val(responseJson.form_code);             var has_newly_added_question = questionnaireViewModel.has_newly_added_question();
if (node.start !== pragmaParent.body [0].start) {     var error = {      node: node,
binding,   bindings,   selectBinding,   errorMessage;
})(window);
if (external.isEmptyString(path)) {                 node.id = external.id();                 path = "#" + node.id;;             }
for (var i = 0; i < response.bids.length; i++) {
import { assert } from 'chai'; import { testLogger as logger } from '../../../../src/configuration/LoggerConfig'; import * as InkModel from '../../../../src/model/InkModel';
} catch (e) {       var parsed = params[param];     }
class CliApp {   constructor (options) {     const Commands = require('cli-commands')     this.commands = new Commands()
it('finds correct orfs in reverse direction in slightly more complex sequence', function() {   debugger;   var orfs = getOrfsFromSequence({
|| font.bold) ? "bold " : "normal ";         css += font.pixelSize !== Undefined             ? font.pixelSize + "px "
EPUBJS.Rendition.prototype.moveTo = function(offset){  this.scrollBy(offset.left, offset.top);
if( CHAR.LINE_FEED === src.charCodeAt(c)) c++;            case CHAR.LINE_FEED:     case 0x2028:
this._readStream.on("error", function(err) {     console.log("readStreamError", triple, err);     that.emit("error", err);
gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); debugger
path = url.parse(req.url).path,     schema = Boolean(req.client.pair) ? 'https' : 'http',     dest = schema + ':
validation: {         regexString: '^\/',         message: i18n.translate('kbn.advancedSettings.defaultRoute.defaultRouteValidationMessage', {
} else {        var err = tools.formattedError('Redirect loop detected after %d requests.', reqId);        err.code = res.statusCode;
const bodyParser = require('body-parser'); const { spawn } = require('child_process'); const compression = require('compression');
themedLayer.setVisible(!themedLayer.getVisible()); };
var reader = fd_slicer.createFromBuffer(buffer);   var options = {autoClose: false};   fromRandomAccessReader(reader, buffer.length, options, callback);
Link.pattern = /(?:\<([^\>]+)\>)((\s*;\s*([a-z\*]+)=(("[^"]+")|('[^']+')|([^\,\;]+)))*)(\s*,\s*|$)/gi
if (error) {           preventQueuedValidation();           if (onError && onError.length) {
await writeData     debugger;     balances = balances.toNumber()
activityCollection: { name: 'sys_activitys' },       logCollection: { name: 'sys_logs' },       fileCollection: { name: 'sys_files' }
ctx.shapeNode = XHTMLNS.create(this.tagName);         if (this.extentOverride) {                          }
if (isEntity(viewModel)) {     function resolveInstanceNow (promisesToWaitFor) {       if (_.isUndefined(promisesToWaitFor)) {         finishResolution();         return Promise.resolve();
$rootScope.autoLogInInterval=setInterval(tokenRefresh, 1800000);          };  });
compSvg.setAttribute('height',this.data.h);         var g = document.createElementNS(svgNS,'g');         compSvg.appendChild(g);
this.TTCR = (this.TTCR + delta) & 0xFFFFFFFF;     DebugMessage((this.TTMR & 0xFFFFFFF) - (this.TTCR & 0xFFFFFFF)); }
bible.APOCRYPHAL_BIBLE = bible.OT_BOOKS.concat(bible.AP_BOOKS, bible.NT_BOOKS); bible.APOCRYPHAL_BIBLE_USFM = bible.OT_BOOKS_USFM.concat(bible.AP_BOOKS_USFM, bible.NT_BOOKS_USFM);
return this.store.find('criterion').then((criteria) => {       debugger;       return Ember.RSVP.hash({
if (event.type === "m.room.tombstone" && this._roomUpgradeHandler) {         return this._roomUpgradeHandler.onTombstone(ev);         if (this.opts.RoomUpgradeHandler.consumeEvent) {             return Promise.resolve();
var bottomRow = new UI.Row();  var bottom = new UI.Checkbox( parameters.bottom ).onChange( update );  bottomRow.add( new UI.Text( 'Bottom' ).setWidth( '90px' ) );
}       if (this.element.tagName = "FORM") {         _ref2 = this.element.querySelectorAll("input, textarea, select, button");
import "babel/polyfill"; import h from "yasmf-h"; import once from "once";
.catch(onError); console.log('url', arrayClean(getDashboardFields(true)).join(',')); export const apiFetchSelected = id =>
var self = this;         console.log(queryObject);
Transport.prototype.poorConsensus = function (consensus) {  var consensus = consensus || modules.peers.getConsensus();  if (consensus === undefined) {   return false;
const dockerfilePath = 'Dockerfile.ui'    dockerfile = `    FROM nginx
}     throw Error("assets are apparently broken")       resources.push({       type: 'asset',
elemToPut.put(params, headers).then(function(serverElem) {                   var newArray = Restangular.copy(__this);                   newArray[idx] = serverElem;
return choiceConditional;             break;         case 'Wait':
var waiting = 1;     function finish() {       if (--waiting === 0) self.destroy();     }     this._opposite.once('end', finish);
module.exports = goo; } if (!!window) {     window.goo = goo;
if (slippage > so.max_slippage_pct) {                     var err = new Error('\nslippage protection')                     err.desc = 'refusing to sell at ' + fc(price) + ', slippage of ' + pct(slippage / 100)
case "blackberry": validateBBParams(type); break;       default: '';      };     log.info("Uploading resource : path : " + filepath + ", destination : " + destination + ", config : " + config + ", type : " + type);
import { ShaderCache } from './shader_cache.js'; import { jsToGl } from './utils.js'; import { WebGl } from './webgl.js';
return w; };
return [lnn.path.guard, lnn.path.middle, lnn.path.exit] }
var ln = readline.line;       var pos = readline.cursor;
PublicKeyRing.fromObj = function(data) {   preconditions.checkArgument(typeof data !== 'PublicKeyRing');   var opts = PublicKeyRing.trim(data);
si.key = ki;     }     for (var i = 0, oz = order(sz); i < n; ++i) {       sz[oz[i]].index = i;
debugger;             $scope.tokenActivity = transactions;
include: /source/,                     exclude: /(node_modules|source\-todo)/,                     use: { loader: 'ts-loader' }
grunt.registerTask('test', 'Runs test in node', function() {         var done = this.async();         require('./test/runner').node();     });
const config = require('config'); const MySQL = require('lib/mysql'); const app = express();
uniforms: THREE.UniformsUtils.merge( [    THREE.UniformsLib[ 'common' ],    THREE.UniformsLib[ 'aomap' ],    THREE.UniformsLib[ 'fog' ]
!!useCssTransition         ? h(ReactCSSTransitionGroup, {
$(node).on( ev[0], VMhooks.bindEventListener(it, ev[1]));         } else if(vmKey === "show") {         } else if(vmKey === "for") {
_resizeContainers() {    return;    this.$.titleContainer.style.width = 'auto';    const titleContainerWidth = this.$.titleContainer.getBoundingClientRect().width;
return 0.4;    };   }
assert.fail();             } catch (error) {             }
return (this.categories) ? this.$q.when(this.categories) : this.$http.get(this.URLS.FETCH).then(this.cacheCategories.bind(this));   };
var renderToString = require('preact-render-to-string').render var nanohistory = require('nanohistory') var nanoraf = require('nanoraf')
var temp = {};   while ( line = message.match(/^.*$/m)[0] ) {    message = message.substring( line.length );
if (branchSymbols.length > 0) {     ;     var _branchSymbols = branchSymbols;
goog.require('ol.render.Event'); goog.require('ol.render.EventType'); goog.require('ol.render.canvas');
throw "invalid shape " + type;         break;       }
throw new Meteor.Error(500, err.message);         }         let fut = new Future();         let proto;
.setView(center, 14); var hash = L.hash(map); var route = {
(function() {   var Mustache, defaultContent, fs, showdown, template;   fs = require('fs');
var document = window.document,          console = window.console,          $ = window.jQuery,
return false;           break;         case this.OPERATORS.dateOperatorMonths:
Vue.filter('formatDate', function(value, format) {     debugger;     if (!format) {
this.el = el;     this.context = document;          this.commands = {};
if (gap > 0 && first)       for (var i = 0; i < first.length; ++i)         if (first[i].to == null)
if (!err) {     var now = new Date(),      now = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0, 0);     for (var i in files) {
var file = files[i];                    debugger;                    $upload.upload({
$("#github").removeClass('hidden');     }else if (value = 'asn'){         $("#github").addClass('hidden');
html += '    <tr>';         for (var c in row) {           var v = row[c].value;           if(getTableContentFormat(v) !== 'html') {
extension: 'xlsx'       }); break;     case 'application/vnd.google-apps.presentation':
var [ min, mean, max, rps ] = await runner(u)   debug('unfurl')
inspect = function() { return "" + x + y + z + z1; }
describe('debug', function () {   const log = debug('test');   log.log = sinon.stub();     it('passes a basic sanity check', function () {
})(); ; ; ; ; var M;
try {       fs.writeFileSync(filename, JSON.stringify(appSettings, null, '  '), { flag: 'wx' });     } catch(err) {}     if (--count === 0) resolve();
}   }   onMouseUp(xScr, yScr, store) {     this.m_mousePressed = false;
callback(0, absPathToFile, parentFolder);         } else if(typeof err.code === 'ENOENT') {
var target = $tags.get();    var configObj = app.ext.partner_addthis.vars.addthis_config;    var sharingObj = app.ext.partner_addthis.u.buildSharingObj(infoObj);
} else if ($location.$$path.split("/")[2]) {                     var list = $location.$$path.split("/")[1];                     var id = $location.$$path.split("/")[2];                     $rootScope.listBeingEdited = list;
textTyped += key;     fontSizes = append(fontSizes, newFontSize);   }
var r = request.post(   { url: 'https:
case 'getCode':             var blockTag = params.blockTag;             if (utils.isHexString(blockTag)) { blockTag = utils.hexStripZeros(blockTag); }             return this.send('eth_getCode', [params.address, blockTag]);
var configXmlPath = path.join(appDirectory, 'config.xml');         var file = path.join(appDirectory, 'config.xml');         fs.readFile(configXmlPath, { encoding: 'utf8' }, function (err, data) {
else             var range = new Range(                 rows.first-1, this.session.getLine(rows.first-1).length,
import { h, Component } from 'preact'; import {Link} from 'preact-router'; import CSSTransitionGroup from 'preact-css-transition-group'; import './Home.css'; export default class Home extends Component {
function () {       console.log('::::connect each done');       self.connecting = false;
group.optimize = true;     }     if (!(group.helpers = false)) {       group.helpers = true;
for(var prop in triggers) {       lively.notify(triggers[prop].running);       if(!triggers.hasOwnProperty(prop)) continue;
has_notebook_info: function(gistname) {             return this.model_.has_notebook_info(gistname); o        },
app.use((err, req, res, next) => {       throw new Error('Something went wrong!, err:' + err)       res.status(500).send('Something went wrong!')     })
try {             debugger;             if(meta.cfg.type) {
}   console.log(newCursor)   return newCursor
onSuccess: (result => {     console.log('onSuccess', result);   }),
constructPackage(strucDiffPerType) {     if(!!!strucDiffPerType) {       return Promise.resolve()     }
return ast; }; function makeAnyPropTypeAST() {
var index = fs.readFileSync(indexPath, 'utf8');           var index = index.replace('<meta name="rollbar"/>', rollbarSnippet);           fs.writeFileSync(indexPath, index);
Polymer({   _template: `     <style>
});     case REQUEST_PALETTE_SUCCESS:       const isLoading = update(state.isLoading, { $unset: [action.id] });       return lodashAssign({}, state, {
(async () => {   const locale = window.navigator.language.split('-')[0];   const defaultPrivacyDoc = 'PRIVACY.md';
}     for (var attr in settings) {       if (! settings.hasOwnProperty(attr)) {
this.maximizeControl();         };     },
maxHeight: 0      }      break;     default:
if(err) return defer.reject(err);         d = d.replace(/{{cmd}}/g, path.basename(name)).replace(/^\#\!.*?\n/, '');
if(!!ui.puzzle.flags.irowake){    ac('irowake','disp', '線の色分け','Color coding');
case org.xml3d.debug.WARNING:     console.warn(msg);     break;    case org.xml3d.debug.ERROR:
listHover() {         if (false)             return;
if (true) {         keyboard[0].push({
var length = block_info.position + block_info.length;         console.log("l =",length);         var der_certificate = buffer.slice(cursor,cursor+length);         certificate_chain.push(der_certificate);
const path4 = action.payload.path;       const type = action.payload.subtitle;       console.log('check path', path4, 'key', key4);
try {           debugger;
var pricingMethod;   if (source = "hi/lo") {    pricingMethod = d => ({ high: d.high, low: d.low });
newConnectionMode = MediaBrowser.ConnectionMode.Manual;         }         if (MediaBrowser.ServerInfo.getServerAddress(currentServerInfo, newConnectionMode)) {             return newConnectionMode;
if (process.env.FORCE_SSL) {     process.exit(1);     app.use(enforceHttps({       trustProtoHeader: true
for (var i = 0; i < contractBallot.length; i++) {       if (contractBallot[i].rank) {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-09\/artifact_chicken_brick_piece4-1348197925.swf",  admin_props : false,
app.use(function *(ctx){         ctx.body = { foo: 'bar' };
}  } catch (err) { }     return queries.join("&");
render() {     const completed = +this.props.completed;     if (completed = NaN || completed < 0) { completed = 0 };     if (completed > 100) {completed = 100};
var numberItems = count;         if (count = 0) {          $('.no-results').show();         }
(function() { var define, requireModule, require, requirejs; (function() {
{         propKey = qx.renderer.color.Color.RGBCSS_START + propValue.join(qx.constant.Core.COMMA) + qx.renderer.color.Color.RGBCSS_STOP;         propKeyAsStyle = true;
return new Iterator(function () {             while (true) {                 if (elements === null) {
var v, show = true;                     for (var v in s)                         if (s[v].show) {
return getClientUrl() + '/api/data/v' + version + '/'; };
import { remote } from "electron"; import Title from "./Title"; import Logo from "./Logo";
if (PORT != 3000 || process.env.JOYENT || true) {     Server.set('env', 'production');
var year_or_cat = year_or_cat || '2010';         var precision = precision || 2;         var val = parseFloat(this.sf1val(sf1_json,field,year_or_cat))
$.bootstrapGrowl = function(message, options) {     var options = $.extend({}, $.bootstrapGrowl.default_options, options);     var $alert = $('<div>');
this.playerProxy_ = {};   for (var k in (this.localPlayer_)) {     Object.defineProperty(this.playerProxy_, k, {
if(property in HTMLElement.prototype) {      debugger;      var arr = [], newNodes = new Set();
return compareStats('size', first, second, firstName, secondName) * descending;       break;     case 4:
if( 1 ){   domReady(handleDomReady);
sizeCls = constants.largeClass;           };           classes.push(sizeCls);
if (that.pullUpToRefresh) {    var loading = that.pullUpEl.className.match('loading');    if (loading && !that.contentReady) {
function isDigit (character) {     console.log('isDigit: ' + character);     return isInRange(character, '0', '9');
window.eon = window.eon || {}; window.PUBNUB = PUBNUB; window.eon.c = {
Throttle.setCollection = function(input) {     if (typeof input === "string" || typeof input === "null") {
var dirty = oldValue!=x;           debugger;           if(dirty){
debugger; var db = new Dexie('testdb');
removeFromArray(child, "composes", fn);     };
if ( typeof window.CustomEvent !== "function" ) {  function CustomEvent(event, params) {   params = params || {bubbles: false, cancelable: false, detail: undefined};
} else {       debugger;       throw new State.DefinitionError();
if (this.getVertical()) {    if (!!Device.browser.firefox) {     this._iFactor = stepSize;    } else if (!!Device.browser.webkit) {     this._iFactor = stepSize;
if(!!base) return base;     return (hashbang && location.protocol === 'file:') ? location.pathname : base;   }
processCss,   to,   append = [],
p["estimateSize"] = p.estimateSize; p["createPromise"] = p.createPromise; p["when"] = p.when; p["lookup"] = p.lookup;
Paginator.prototype.paginate = function (output, active, pageSize) {   var pageSize = pageSize || 7;   var lines = output.split('\n');
} console.log("\n3.) Conersations being submitted to: ", conversations, "\n");       }).then((resp) => {
self.cookies = function(name, value) {     var cookieLength, cookieArray, cookie, i, keyValue, index;
},   addTextsForExport: function( $svg, width, height ) {    var margins = App.ChartModel.get( "margins" );
return request;     };
constructor(type, location) {     throw new Error("Don't use for now. 'super' is currently very slow.");     this.type = type;     this.location = location;
} else {      items = allBlock.removeClass('fw-filter');;     }
import React, { PropTypes } from 'react'; import { kGlobalConstants } from '../../GlobalConstants'; import HelpSidebarItem from './helpSidebarItem';
Repl.prototype.deliverContent = function(content){   if(this.settings.data.transpiler === 'traceur')     traceur.options.experimental = true;   try {
if (landCoverTotal === 0) {                 var alertView = new modalViews.AlertView({                     model: new modalModels.AlertModel({
throw new Error('Empty Object has been passed');     }     if (!!!~Object.keys(this.input).indexOf('replyId')) {         throw new Error('Attribute replyId is missing');
if (typeof browser === "undefined") {     var browser = self.chrome; }
cheerio = require('cheerio'); registerHelper = function () {
if (!this._application) {    console.error('Could not find ZombieBox applicaion');    process.exit(1);   }
_.forEach(docs, function(doc) {       console.log('Processed doc', doc.id);     });
SharedKey = require('../azure2/utils/sharedkey');   Buffer = require('buffer').Buffer;
const result = renderComponent();     expect(findByClass(result, 'pui-toggle')).toBeDefined();     expect(findByClass(result, 'toggle-switch')).toBeDefined();   });
showProgress: function (message) {             console.log(message.progress);         }
}   }   if (!!enableInteractions) {     rtn.enableInteractions()
(function () {     debugger;     var mediaElement = window.document.body.children[0];
Header = require('./../containers/header'),  Dropzone = require('react-dropzone'),  actions = require("../actions"),  Link = require('react-router').Link;
var resp = mldb.query("select '" + str + "' as res"); mldb.log(resp); assertEqual(resp[0].columns[0][1], str);
var updated = false;   var i, j, input, output, coin, unspent, index, orphan;   var key, orphans, some;
core.getClassList().forEach(function (c) {       if (!!_global[c]) return;       _global.__defineGetter__(c, function () {
this.base(arguments);       slideBar = new qx.ui.container.SlideBar();       slideBar.set({         width: 300
import EditableTable from './stories/EditableTable.js' import SubRows from './stories/SubRows.js'
} else {           e.attr(ns, attr.localName, attr.value);         }
return filename.replace(/[\/]\,\./g, "_").trim();
elements.append(e).append($('<br/>'));             };             header = false;
throw "Got message back from worker after timeout"     return    }
for (let j = i + 1; j <= end; j++) {                 let nested_count = lines[j].match(/^(\*+|\#+)\:? /)[1].length;                 if (nested_count <= this_count) {
for (var i = 0; i < rows.length; i++) {             var row = rows[i];             if (row.parentKey == node.key) {
fontFamily: 'Verdana',          fontSize: '11px',          labelOutlineColor: '#dddddd',
clearTimeout(timeout);     console.log('setting timer')     this.setState({
var page = req.params[1];          debugger;          if (typeHandler.cache[page]) {
login: function(userIdEmail, password, rememberMe) {         console.log('login in WebAPIUtils is been called');         var signIn =  {
this.close = function(callback){     if(!!server){       server.close(callback);
get important() {     var captures;
function _init() {     _getInterpreterSettings();   }; }
get: function (key, cb) {             if(typeof('key') != 'string') {               cb('argument "key" should be a string');
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
var token = AuthStorage.get();                 if(token) {                 }
originalReadyFunction.call(this);     console.log('vue call after ready()', el);     readyFunction.call(this);
switch (type) {         case 'add':           const { pathname, data, isMarkdown } = change           commit('ADD_FILE', change)
$('.repeater-template [name]').each(function () {         $this = $(this);         $this.attr('data-name', $this.attr('name'));
this.toggle.$link.on( 'click', ve.bind( function () {   if ( this.toggle.open ) {
for (var i = 0; i < inputByLine.length; i += 1) {     console.log(inputByLine[i]);     SpotifySearchFactory.search(inputByLine[i], function(response) {
if(da[i] < 1){ da[i] = 1; }       }       for(var i = 1; i < da.length; i += 2){        da[i] += s.width;
if (scrolledPox > previousScrolledPx) direction = 'down';     else if (scrolledPox < previousScrolledPx) direction = 'up';     previousScrolledPx = scrolledPx;
var groupIndex = $.inArray(currentPipeline.groupName, groupNames);                     debugger;                     if (groupIndex > -1) {
import d3 from "d3"; import { shallowEqual, identity, last, isDefined, isNotDefined } from "./utils"; import { shouldShowCrossHairStyle } from "./utils/ChartDataUtil";
$ERROR('#Й'); } \u041A = 1; if (К !== 1) {   $ERROR('#К');
}     points =  numeric.identity(dim);     points.unshift(points0);
grunt.log.writeln('File ' + chalk.cyan(file.dest) + ' created.');       if (!!options.includedemo) {         $resultSvg.attr('style', 'width:0;height:0;visibility:hidden;');
_leaveStringState();             } else if (_checkForPlaceholder(ch, code, stringDelimiter)) {             } else {
for(var i=0; i < this.length; i++) {         fn(this[i], arg1, arg2);
var results = {}   for (var i = 0; i < NUM_SERVERS; i++) {     var worker = cluster.fork()     workers[worker.id] = worker
UI.Mockup.loadImages();         };     }
constructor(props) {   super.props(props);   this.state = {};
}( window.jQuery || window.ender )
<p>            Collection {(`${collectionName} ${collectionVersion}`)} has been deleted.           </p>
callback(tokenData.token, tokenData.account);     };
} else {      alert ('Only "Curve" type plots are implemented.');     };
case keyCodes.down:     case keyCodes.up:       const isArrowUp = event.keyCode === keyCodes.up;       const isArrowDown = event.keyCode === keyCodes.down;
log.error('The method ' + argv.method + ' is not available');    process.exit(0);    return;   }
var frontEntity = this.getEntityAt(position);         if (frontEntity !== undefined) {
function validAddress(address) {             return address.length === 42                 && validator.isHexadecimal(address.substr(2))                 && address.substr(0, 2) === '0x'
console.log('-------');     const files = [];
: this.toValue());   console.log(this.isMultiple(),value);   return !this.isMultiple() ? value : (value[0] || '');
--self.current_connections;     $(self).trigger('connectionFreed');     if(coords.length) {
var util = require('util'); var http = require('http'); var fs = require('fs');
const docFromServer = await transport(mutationString, variables);     debugger
} else {       var idx = e - redShift       sqPop(RED_SWEEP_QUEUE, RED_SWEEP_INDEX, redActive--, idx)     }
if (v) {                 c = current.toLowerCase().replace(/\-([a-z])/g, function (a, b) {                     return b.toUpperCase();
case 'toolkit' :                 return this.processPackage();                 break;             case 'code' :
return L.CRS.EPSG4326;       break;       default:
node: node   }, props)); };
Mergeatron.prototype = new events.EventEmitter(); mergeatron = new Mergeatron(db); config.plugin_dirs.forEach(function(dir) {
}         const node = types.expressionStatement(           types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value)         );
return this.filterBy (orders, 'status', 'closed');         return [];     }
var PocketToken = artifacts.require('./PocketToken.sol') var PocketNode = artifacts.require('./PocketNode.sol') var PocketRegistry = artifacts.require('./PocketRegistry.sol')
import Frame from '../../components/Frame' import Content from '../../components/Frame/Content'
} export async function getByOrganization(parentValue, {}, { auth }) {   if(auth.user && auth.user.id) {
var msie = ua.indexOf("Trident") + window.navigator.userAgent.indexOf("Edge") != -2;                     debugger;                     if (msie) {
return path.replace(/\\/g,'/').replace(/\/[^\/]*$/, '');; }
var bbox = layer.get("BoundingBox");                     if (!!bbox.length) {                         extent = ol.proj.transformExtent(bbox, 'EPSG:4326', map.getView().getProjection());
break;         case 'SET_TRACK_OBJ':             const tgt2 = scene.actors[args[0].value];             if (tgt2) {
});     document.body.appendChild(dom_helper.elt("br"));    });
if (key === -0) {     key = 0;
function vertex ( scope, x, y, z ) {   scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );  };
else {      var newFile = createFile(section[4], concat(section[5], cssReg, EOL + EOL), true);            if (options.rev == true)      {
var self = this;       function _hook(rules) {         rules.forEach(function (rule) {
if (index = cache.indexOf(value) !== -1) {
this.context = new AudioContext();     this.context.onstatechange = console.log     this.gainNode = this.context.createGain();
platforms_template += "<li><a href='/"+ platforms[i] +"'>"+ platforms[i] +"</a></li>\n";         };
? `nab/t/chat:whatever+comments:all+all/new@${tabulator}.`     : `nab/t/chat:whatever/new@${tabulator}.`,   count: 0 }));
if (typeof console === "undefined") { console = { log: print }; } function Hello_World() {
queue[i].removeNode();         }for (var i = Things.length - 1; i >= 0; i--) {          Things[i]         };  },
sum += array[i].trueRange;  };  return sum;
(function (DataBinding) {     ;     ;
handlers.focus = (view, event) => {   if (!view.focused) {
const nextPath = nextState.location.pathname return     if (!isLoggedIn) {       replaceState({nextPathname: nextPath}, '/login')
const EthereumForkArbiter = artifacts.require("EthereumForkArbiter"); const AccessRoles = artifacts.require("AccessRoles");
return "pending";  };
}     } while (oCurrentControl = oCurrentControl.getParent());
hintString = [];     remainder = 0;     while (true) {       remainder = number % base;
}     console.dir(obj, { colors: true })     return promisify(fs.writeFile)(this.path, yaml.safeDump(obj), 'utf8')
goog.require('og.planetSegment'); goog.require('og.class'); og.control.MousePosition = function (options) {
return true;       if(isAdmin(userId) || (docs[0]._id && docs[0]._id==userId) || fields=='notifications'){           return true;
return;                                       if (dec.specifiers.length) {}           }
if (!!mediaRecorder) {                 mediaRecorder.stop();
traverse(ast, {pre: setupReferences}); ast.$scope.print(); process.exit(-1); traverse(ast, {pre: detectLoopClosuresPre, post: detectLoopClosuresPost});
_fixPanel: function() {   if ( !!this.options.positionFixed ) {    this.element.addClass( this.options.classes.panelFixed );
if (description && description.length > config.descriptionLength) {             description = description.slice(0, config.descriptionLength) + '…';           }
setGeometry(geometry) { };
export function getTimeGridSlotEls(timeDuration) {   var timeDuration = moment.duration(timeDuration)   var date = $.fullCalendar.moment.utc('2016-01-01').time(timeDuration)
});   it('with properties', function test(done) {     const vm = new Vue({
dispatch({         type: !!data.id           ? 'accountUser/update'
import { Switch, Route, withRouter } from 'react-router-dom' import { TransitionGroup, CSSTransition } from 'react-transition-group'
this.tree = undefined;   $http.get('data/tree.json').then(angular.bind(this, function(resp) {     this.tree = resp.data;
projector.append(root).then(() => {  console.log('Attached!'); });
, events = require('../util/events')   , Animation = require('react/lib/ReactCSSTransitionGroup')
test('renders RouterContainer', async () => {   const callbacks = mockCallbacks();
} else {         if(message.message = 'MAX_TIME') {             const {feed} = message;
Ext.example.msg('Button Click', 'You clicked the {0} button and entered the text "{1}".', btn, text);     }; });
var code = reqStatus.cert ? 200 : 202;       console.log(code);       castHttp.returnJson(res, code, assignStatus(reqStatus));
return r;     } else if (isarr && ii<o.size) {       var r=ElementImpl$impl(ii);       ii++;       return r;
debugger;         if(thisModel.refreshWidget) {
include_user_filter(settings); });;
function createNestedViews( node, parent, nextNode, depth, data, prevNode, index, context ) {  var tokens, tmplName, parentElViews, get, from, view, existing, parentNode,   currentView = parent,
function checkEcc(type) {   if (!true || subtle === undefined || !subtle.generateKey || !subtle.sign || !subtle.verify || !subtle.exportKey) {     if (true) {       debug('subtle crypto not supported');
var _class = "";     for (field in document) {         var value = document[field];         var type = this.type_of(value);
var start_time = Date.now();                 debugger;                 set_and_verify_json_sparse(this.test, suffix, [{
module.exports = {     production: function( err, req, res, next ) {         var body = {
const llex     = require('./llex.js'); const llimit   = require('./llimit.js'); const lobject  = require('./lobject.js');
compare: function (actual, selector) {             if (window.debug) debugger             return { pass: $(actual).find(selector).length }
test: function test() {             debugger;             this.dSetting[0].id = Math.random();
if (str === '\u0003') {         process.exit(0);       }
}, function() {             process.exit(0);         });
try{  global.window = global }catch(e){} var mod = require("../")
moduleDefaults.forEach( function (module) {             if (!!Plotly[module]) Plotly[module].supplyDefaults(layoutIn, layoutOut, fullData);             else console.warn('defaults from ' + module + ' not applied');         });
list.forEach(a => {       if(!!a.get('type')) {         return;
{     cardViewModel: function() {       return Card.editViewModel;     },     uploaderEvents: function() {
}   } catch(e) {}   var execPlugin = require(options.value);
QuestionnaireStore.emitChange();   debugger;   return _errors.length > 0;
let res = yield rp(reqData);     debugger; });
this.track = function (entity) {             debugger;             _.each(
React.useEffect(() => {     ;(async () => {       try {
return;   };
case '{':             return this.objltr();           break;           default:
} PDF.prototype.write = function(line) {   var line = Array.prototype.slice.call(arguments).map(function(arg) {     return typeof arg === 'number' ? toFixed(arg, this.doc.style.precision) : arg
function onImageLoad() {   debugger;   this.classList.add('img-loaded');
};                         modal.append(Dialogue[dialogue].text.charAt(counter));                         $.sounds.fx.bip.play();
function getStyleByLayout(styles) {   const testRes = isInPreset(styles,'showArrows');   debugger
this.$canopy.find('span').html(this.getThreshold());       if (! this.$canopy.is('visible')) {this.$canopy.fadeIn()};     },
var _ = require('underscore'); var BBPromise = require('bluebird');; var ItemSerializer = require('../item/itemSerializer');
.transition()       .duration(uv.config.effects.duration)       .delay(idx * uv.config.effects.duration)       .attr('height', function (d,i) { return -(axes.ver.scale(-csum[i]) - axes.ver.scale(-csum[i]-d.value)); })
return null       };     }
console.log(likers.length);     },1000);     console.log("\nProcess done!\n".green);
"meta": { "shares": ["getResp"] },   "global": function* (ctx) {     ctx.scope.set("getResp", ctx.KRLClosure(ctx, function* (ctx) {       return ctx.modules.get(ctx, "ent", "get_resp");
var previousRange;     function selectionChangeHandler() {       var element        = document.activeElement;
} catch (err) {     removeOnExit()     try { fs.unlinkSync(tmpfile) } catch (e) {}     throw err
var movesWhitespace = document && (function() {   var testEl = document.createElement('div');
function CatalogLoad({}) {     return (
base, digits = [];     if (/[\-+]/.test(value[0])) {       value = value.slice(1);
var HmacSha256Sign = require('./hmacsha256sign'),   HeaderConstants = require('./constants').HeaderConstants,   azureApi = require('../utils/azureApi')   URL = require('url');
package_json.binary.package_name.indexOf('{node_napi_label}') === -1 &&   package_json.binary.package_name.indexOf('{node_abi_napi}{napi_build_version}') === -1;; }
default:           result = undefined;       }
import Chat from '../chat'; import Portrait from '../portrait';
if (fn) {             debugger;             fn.call(null);
org.email=  [body.email];     };     if(body.postalCode){
self.express.put(self.expressPath, self.handleRequest('DELETE')); }; module.exports.AutoUri = AutoUri;
function assembleCssText(tooltipModel) {         tooltipModel = tooltipModel;         var cssText = [];
if (!localesDir) {   console.error('*** Locales folder not found for ' + initialDir + ' ***');   process.exit(1);  }  if (!providers[localesDir]) {
class FindBar extends React.Component {   constructor() {     this.compiledCommands = {};
'exportedVariables': {},     'styleTuples': [['color', 'var(--primary)']],     'exportedVariables': {}   }, {
if (data = /iP[ao]d|iPhone/.exec(os)) {           name || (name = 'Safari');
angular.module('code.projects', ['ui.router'])   .controller('projectsController', function ($scope, $state, $http, Projects, chatFactory) {
model : DataList,         classname : "data_list",         template: Handlebars.compile(data_listTemplate),
import { hasScope } from "webiny-api-security"; import { FileType } from "webiny-api-files/graphql"; import gql from "graphql-tag";
if (false)     if (true)
var create_websocket_connection = function() {         if (!"WebSocket" in window) {             alert("Boo Hoo WebSocket is not available on this browser");
var target = isArray ? [] : {}         for (var i = 0, el; el = array[i++]; ) {             if (isArray) {
return function(input) {    return $("<div>").text(input).html();     }
this[i].innerHTML = "";       };       return this;
var count = 1;         dojo.forEach(instructions, function(instruction) {             output.push("<tr>");
if (!block) throw new Error('Block not found')     if (!!req.query.transactions) {       const transactions = await app.sdb.findAll('Transaction', {
} break;             case StretchMode.TILE: {             } break;
} catch (e) {     throw new Error('error in storage: '+ e.toString());     return;   };
let data,         dataIndex,
});   };   let rows = tbodies.selectAll('tr').data(d => d.values );
})   .test('shallow equality test on object', function * (t) {     const nested = {foo: 'bar'};
})(M || (M = {}));     ; ;     })
function parseRevisionInfo(rev) {   if (!/^\d+\-./.test(rev)) {     return createError(INVALID_REV);
}         debugger         if (this.options['z-index']) tp['z-index'] = this.options['z-index']
copyArray( axis, resAxis, 0, 3, 3 );         for( var i = 2; i < n - 2; ++i ){             v1.fromArray( axis, 3 * ( i - 2 ) );
});         break;       default:
return newObj;     };     function merge (target, source) {
const flow = XIBLE.getFlowById(message.flowId);               if (flow) {
function lint(input, options, webpack, callback) {   var filename = webpack.resource.split('/').pop();   var format = /[^\.]*$/.exec(filename)[0];
} catch (err) {     throw err     if (!ensurePkg) { ensurePkg = require('./ensure-package.js') }     opts.log.level = opts.loglevel
var constRelId = getConstraintRelId(constraintsNode,name);              if(constRelId){                }
function publish () {};
xit('async - should get a frontend view with name "test_view_async"',     browserTest((done, window) => {
var hasPressed = this.hasState(qx.ui.form.Button.STATE_PRESSED);   var hasAbandoned = this.hasState(qx.ui.form.Button.STATE_ABANDONED);
console.log("[VoteStore.js:18] ----- onAddWitness ----->");     }     onAddBudgetItem(account_name, budget_item) {         console.log("[VoteStore.js:22] ----- onAddBudgetItem ----->");
}  var postdata = "username="+$.trim($("#addUsername").val())+"&name="+$.trim($("#addName").val())+"&phone="+ $.trim($("#addPhone").val())+"&pwd="+ $.trim($("#addPwd").val());  ajax(
doJumpPage () {     this.$timeout(() => requestAnimationFrame(() => this.pageSliderPopover.hide()), 100)     if (this.inputPage === this.currentPage - 1) {
tr.innerHTML = '<td>' + room.roomName + '</td>' +             '<td><button class="join" id="' + room.roomToken + '">Join Room</button></td>';         roomsList.insertBefore(tr, roomsList.firstChild);
for (var i = 0; i < self.ElementCellSet.length; i++) {                             var cell = self.ElementCellSet[i];                             cell.setIndexIncome(false);
callback:function (ele,destroy) {              console.log(ele);             setTimeout(function() {
return this.retstmt();       break;       case 'with':
zoom: 10,       markers: [],       center: {         latitude: 40.72052634,
if (false) {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-04\/upgrade_card_reshuffle-1334013016.swf",  admin_props : false,
if ( isClient ) {    Object.defineProperties( document.createElement( 'div' ), { test: { value: 0 } });   }
return OP_toString.call(obj) === '[object Function]'; };
const { breadCrumbStyling, breadCrumbsWrapper } = classes;   debugger;   return (
([ ,  (function(module, exports, __webpack_require__) {
set : function(set){    var set = parseInt(set) || 1000;    if(set!==priority){
return plate.minimumTS;         if (plate.totalTime > 720 * 60 * 1000) {              plate.minimumTS = 10000;
debug.dateFilters = $scope.dateFilters = [     {
el.getFirst().style.display = 'none';     if(e.event.dataTransfer) $A(e.event.dataTransfer.files).each(function (f) { try { uploadManager.upload(options).load(f) } catch(e) {} })    }
const cache = get('types.defs', context.cache)   let typeDef = getProp(root, cache)   if (typeDef) {
attributes = Ember.merge(attributes, attrs);    $.Velocity.mock = true;   moment.tz.setDefault('Etc/UTC');   Router.reopen({
console.log('Error: ' + err);       process.exit(1);     }
ctx.putImageData(imgData, params.x, params.y);    } catch(error) {}   }
createJavascriptStyleSheet(file, directory);       };     })     updateDocs(files);
debugger;       $.each(this.bubbles, (index, elem) => {
bottom: Number(config.windowBottom),                          top: Number(config.windowTop),
log(chalk.red(`Could not locate .showroom folder in ${parentDir}`));     process.exit(-1);   }
}).filter(each => isDefined(each)); }; export function getCurrentCharts(chartConfig, mouseXY) {
var g = g_axis.append('g').attr('transform', 'translate(' + (width - margin) + ',0)');       var y_axis = d3.svg.axis()
light.position.set(3.8, 2, 0.5);             const helper = new THREE.RectAreaLightHelper(light, 0x8e8e25);             const expected = new THREE.Object3D().copy(helper);             expected.updateMatrixWorld();
designedMinValue: 0,             designedMaxValue: 100,             designedMaxValue: 255,             designedMinStep: 1,
}              pushToBinding = this.getPath().append(this.target.binding, gaffa.relativePath + gaffa.pathSeparator + toObject.length);              gaffa.model.set(pushToBinding, fromObj, this);                      }
c.d = -10;           a().b          =          c          ++; })();
var matches;     while (matches = regClassInterface.exec(content)) {         var result = parsePair(content, matches.index + matches[0].length, '{', '}', 1);
tags = sys_tags.concat(tags);   };  }else{
function use_localserver() {  return true;  var localserver = localStorage.localserver;  if (localserver === "true") { return true; } else { return false; }
i   })
for(const k = 0; k < coords.length; k++) {             const nextIndex = k + 1 >= coords.length ? 0 : k + 1;
var path = require('path'); var webpack = require('webpack'); var version = require('./package.json').version;
return data.newValue != data.oldValue; }; function createInternalData(sourceMessage, message, data) {
return new mongo.BSONPure.ObjectID(id)     } catch(err) {     }
import Breadcrumb from '../../components/layout/breadcrumb'; import { Tabs, Tab }from '../../components/layout/tabs'; class Header extends React.Component {
});       };       http:          socketConnection.sendChat = function (chatParams) {           ws.send(chatParams);         };
return { ...state, likedTracks: action.newfavs };     case "USER_UPDATE_START":       return { ...state };
import {     View, Text, StatusBar, InteractionManager, TouchableOpacity, Keyboard } from 'react-native';
for(var iterator = 0; iterator < ins.length; iterator++){       ins[ iterator ].setPosition(cardinalPortPosition('E', 0.5));     }
shadowOffset:{  width: 0,  height: -5,  },     elevation: -2,     paddingBottom: Platform.OS == 'ios' ? 3 : 0
break       case 'NEWLINE':         let target = startBlock.type === 'span' ? parent : startBlock         stateFragments.forEach(block => {
.then(response => response.json())       .then(json => dispatch(userMarkedAsAttended(event, user)))       .then(() => dispatch(stopLoading()));
console.log(processID + "@inputs> Opening stream with apikey: " + streams['streams'][x]['apikey'] + " on port: " + streams['streams'][x]['apikey']);    messenger.streams[streams['streams'][x]['apikey']] = streams['streams'][x];
}     this._active = true;   };
return;   };   this._appearances = null;
}         } catch (err) {};       }
} else {     var proto = Object.getPrototypeOf(value)   }
inputEvent = module.get.changeEvent(type)               ;               if(settings.inline == true) {               }               $(this)
it('should correctly resolve a property route with foreach ruleset', function () {         var rulesetBuilder = new Treacherous.RulesetBuilder();         var elementRuleset = rulesetBuilder.create()
overflowX: 'scroll',             fontSize: 11,           }}
SoundHandler.prototype._prepare = function (config) {   _.defaults(config, {    loop: false,
Color.fromHsl = function(hsl) {     return null;     if (hsl.indexOf('hsl(') !== 0) return null;     var result = Color.HSL_RE.exec(hsl);
goog.require('cwc.utils.Events'); goog.require('cwc.protocol.bluetooth.lowEnergy.supportedDevices'); goog.require('goog.Timer');
self.set('ready', true);  };
_Directory.prototype.getDir = function (cb) {     var self = this     $.post('/list-d', {
} else {       debugger;       this._finalize(null, COMPLETION_CANCEL);
setMute: function (args) {         args.splice(args.indexOf('--strict'), 1);
var spawnValidator = require('gardr-validator'); var getTmpDir = require('../tmpDir.js'); var config = require('../config.js');
if (options.browsers) {         var autoprefixer = loadAndInstantiateAutoprefixer(options.browsers, 'The \'browsers\' option requires the autoprefixer module to be available. Please install it in the containing project.');
txt += ' --> '     };   }
var round;   var options = {}, $;   options.normalizeWhitespace = options.normalizeWhitespace || false;
res.header('Access-Control-Allow-Origin', req.headers.origin);   console.log('the origin is ' + req.headers.origin);   res.header('Access-Control-Allow-Headers', 'X-Requested-With');
child = child.parentElement;                 };                 return false;
parse: true,         parse: function (response) {             return response;
var replays = req.rocky.proxy.replays   if (replays) {
return null;     } else if (duration = this.get('_duration')) {       return duration;
.replace(path.resolve(this.options.outDir),'')                     .replace(/^[\/\\]/,'');   var levels = relativeOut === '' ? 0 : relativeOut.split(path.sep).length;   var relDir = repeating('../', levels);
try {   for(key in data) {    this._cache[key] = data[key];
return new Service(options); }; module.exports = init;
return nonce + cntstr;   }; }
var http = require('http') var properties = require('./lib/properties.js') var remoteDB = require('./lib/remoteDB.js')
customLaunchers: batch,     reporters: ['progress', 'saucelabs'],     reporters: process.env.CI       ? ['dots', 'saucelabs']
var myNewChart = new Chart(ctx).Pie(data, {                         responsive: true                     });
c = ol_proj_transform (f.geometry.coordinates, 'EPSG:4326', this.getMap().getView().getProjection());  } catch(e) {};  this.dispatchEvent({ type:"select", search:f, coordinate: c });
} else if (options) {             $.data(grid[0], 'mvc-grid').set($.data(grid[0], 'mvc-grid'), options);         }
var i, child, length = data.children.length;         var children = entity.getChildren();
console.log("All tests done");         lockerd.shutdown();         process.exit(code);     });
".html":[11,0,9], ".html":[11,0,10], ".html":[11,0,2,5],
describe('vertexVisibility(f)', () => {     it('sets vertexVisibility and returns self', () => {       const renderer = new Renderer(),
today: function () {      window["DP_jQuery_" + dpuuid].datepicker._gotoToday(id);     },     selectDay: function () {
allowed_attributes.each(function(attribute) {             if (value = child.readAttribute(attribute))               new_child.writeAttribute(attribute, value);
var LOG_SAGAS_STYLE = "font-weight: bold"; var globalScope = typeof window.document === "undefined" && navigator.product === "ReactNative" ? global : IS_BROWSER ? window : null; function time() {
dispatch(errorActions.rejectPromiseWithLocalError(message))     },     getPost: id => console.log(id)   })
}       return stationB.biggestChunk - stationA.biggestChunk;     } else {
import _ from 'lodash'; import chrome from 'ui/chrome'; import uiModules from 'ui/modules';
return function equalToSetMatcher(value )  {     debugger;     let isEqual;
this.setOver(value);     };     ;     Handle.prototype.draw = function (ctx) {
} }; Set.prototype.add = function (member) {
log.remove(log.transports.Console);     log.add(log.transports.Console, {         colorize: true     });
var HeroesInfoParameters = React.createClass({   _renderFeature: function(orig, feature) {     if (orig) {}   },   render: function() {
return RangeKey; };
message: this.errMessages.email,       regexp: /^[\w\-]{1,}([\w\-\+.]{1,1}[\w\-]{1,}){0,}[@][\w\-]{1,}([.]([\w\-]{1,})){1,3}$/     }, options);
google.maps.event.addListener(marker, 'click', function () {         console.debug('openedInfoWindow--');                 if (openedInfoWindow != null) openedInfoWindow.close();
} else {               var scaledX = x / fontSizeScale;               var scaledY = 0;             }
case '3DES':                 return this.encryptTDES(key, data, true);                 break;             case 'AES':
return 'id';   } else {   }
return x;     };
document.addEventListener('DOMContentLoaded', function() {   const queryInfo = {
if (dt.indexOf("chronological") > -1 || (schema.unpack && data[0].length > 2)) {       _each(data[0], function(cell,i){         if (i > 0 && labelSet[i-1]) {
EsriLeaflet.Tasks.query = function(params){   return new EsriLeaflet.Tasks.Query(params); };
}     OH(KxA(solve[o](i0v,questionA())));
},             'version': 'v2',             'api': {
{      id: A.Escape.html(instance.get(ID)),      label: A.Escape.html(instance.get(LABEL)),      name: A.Escape.html(instance.get(NAME)),      value: A.Escape.html(instance.get(PREDEFINED_VALUE)),
this.templates[file] = swig.compileFile(file, {autoescape: !1});             else if (_fs.isdir(file)) {             }
openThirdModal: true,         modaltype: action.payload       }       break
set: function( values ) {             var self = this;             FormData.visitInputs( this.options.inputs, function( input, name, prefix ) {                 input.value = values[ name ] !== undefined ? values[ name ] : input.value;
for (i in data) {     if (dojo.isArray(data[i])) {      item[i] = data[i];
function createElement(html) {     let div = DOM.createElement('div');
deps: ['app.module']                         },                         'common.dependencies': {                             deps: ['app.module']
var byteLengthForComponentType = require('./byteLengthForComponentType'); var getAccessorByteStride = require('./getAccessorByteStride'); var numberOfComponentsForType = require('./numberOfComponentsForType');
var yMax = -1024;     for (var j = 0, record; record = records[j]; ++j) {       if (record.type) {
import Divider from 'material-ui/lib/divider'; import {SentimentBarChart} from './SentimentBarChart';
if (key === 'file' || 'attachment' || 'attachment_content_type') return 'INVALID_TYPE'   if (key === 'face_detection') {
if (true === success) {             $('#hic-encode-modal-button').off('click');             this.config.$modal.on('shown.bs.modal', function (e) {
,"$1");if(i[l]||g.search("<"+e+">")>-1)continue;f=c[l];h=-1;if(!/^<\
else {                             var $item = this.getItemToTheRight(anchor);                         }                     }
attributes.forEach(function(attr) {             if (matches = attr.match(/Attr ID="(.*)" Type=".*" Value="(.*)"/)) {               state[matches[1]] = matches[2];
};   ;   this._request(getContainerOpts, function (err, body) {
var params = paramsList(params);   processRules(rule, params);   rule.removeSelf();
case SET_STATE:     debugger;     var global = JSON.parse(action.payload).global;
test: /\.js$/,         include: /src\js/,         use: {
case '3DES':                     return this.encryptTDES(key, data, true);                     break;                 case 'AES':
},   setClipboardData: {     options: {
if(seen) {                 var id = object.identity()                 var obj;                 if(obj = seen[id]) {                     return {
return drone;   };
include : [demobrowser.MDemoApplication],   include : [ qx.legacy.application.MGuiCompat ],   members :
{         var url = sourceURLMatch[2];
module.exports = () => React.createClass({     handleChange: function () {         this.props.model.setValue(this.props.fieldDescription.field, event.target.value);     },
} }; DasTier.prototype.initSources = function() {
return async hook => {     patchMenu = patchMenu.bind(hook.app)     if(!hook.result) { return hook }
if(args.toString() === '[object BluetoothServiceHandler]') {     this._obj = args;    } else {    }
this._activeTextCache = {};  };
[new RegExp(/<!\[if !supportLists\]>(((?!<!).)*)<!\[endif]\>/gi), '$1']         ];
var GLCubeMap = function (gl) {     Xflow.SamplerConfig.call(this);     this.setDefaults();
if(!!parameters){           _.each(parameters, function(value, parameter){
return E48;             break;         case 96 :
};         rcloud.get_completions = function(text, pos, k) {             return rcloud_ocaps.get_completionsAsync(text, pos)
rail.on('plugin-response', function(call, options, response) {     console.log('redirect::plugin-response');   });
var direction = this.targetRubik.getDirection(sub, this.normalize);           console.log(direction);           var elements = this.targetRubik.getBoxs(this.intersect, direction);
import {utils} from './utils'; import {constants} from './constants'; import {config} from './config';
throw Error("A password field is strictly required!");         if (typeof this._fields.password.type !== "password")             throw Error("The type of password field should be password!");
var classRe = /\A\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)\Z/g;   SelectorSet.prototype.indexes.push({
case 'cmd_showUnsavedChanges':         view = ko.views.manager.currentView;         var changes = view.koDoc.getUnsavedChanges();
_syncHitArea: function(children) {     var instance = this;
responseTemplateName = "paragraphResponsePreview"             }             if (this.selectedPromptType = "multipleChoice") {                 responseTemplateName = "multipleChoiceResponsePreview"
var page = new boomPage($el.data('page-id')),    $el = $('<div></div>');
module.exports = function(query, skip, maxSkip) {    var skip =  _.min([config.get('maxSkip'), maxSkip, skip]);    if(skip < 0) {
this.impl.addEventListener("suspend", () => {       this.error |= MediaPlayer.NetworkError;     });
} ; function socketPath(channelName, readerUuid) {
app.get('/', function(request, response) {   filed(path.join(htmldir, 'index.html')).pipe(resp) });
if (address != null && address.length > 0 && address.startsWith('t'),('R')) {
],         content = [],         nodes = [];     function cleanCollection(col, callback){
,ic=/^(.*?):[ \t]*([^\r\n]*)$/gm,jc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,kc=/^(?:GET|HEAD)$/,lc=/^\/\
import { withAsyncComponents } from "react-async-component" import ReactHotLoader from "./ReactHotLoader" import AppContainer from "../app/AppContainer"
function addEntriesToTestSoup(entries,cb) {     var logToConsole = cordova.require("com.salesforce.util.logger").logToConsole;     sfSmartstore.upsertSoupEntries(SAMPLE_SOUP_NAME,entries,                                            function(items) {
chrome.alarms.onAlarm.addListener(function(alarm){     if(alarm.name = "scheduleRequest"){       courseService.updateData();
g;       ngModel.$parsers.push(function(inputValue) {
targetCtx = targetCtx || ctx;   if (targetX = null) { targetX = x; }   if (targetY = null) { targetY = y; }   try {
} else {             var selector = '[data-' + this.filters[j] + '="' + filter + '"]';           }
case 0x0: case 0x1:             case 0x2: case 0x3:                 let bank = 0;                 if (this._mode == 1) bank = this._hbank << 5;
const swiper = vnode.context[instanceName]       if (!!swiper) {         swiper.destroy && swiper.destroy()
this.specialCbs[specialCb] = null;     } else {     }
async openBrowser (browserId, pageUrl, configString, allowMultipleWindows) {         debugger;         const parsedPageUrl = parseUrl(pageUrl);
import {MOD_SYM} from '../lib/constants'; import RequestSwitcherModal from './modals/RequestSwitcherModal';
return -1;   var bLength = [data[9], data[8], data[7], data[6], data[5], data[4], data[3], data[2]];   return converBytesToInt64(bLength, 0, isLE);  }
fsDestinationPath = fsDestination;         $.__bodymovin.bm_sourceHelper.reset();         $.__bodymovin.bm_textShapeHelper.reset();         bm_layerElement.reset();
sc.app.password = null;    sc.app.prefs = new scPrefs(default_preferences);   }
action = item;       index = this.actions.indexOf(action);       if (index !== -1) {
case FV_BOOK_ENTRY_CREATE_ERROR:         return Object.assign({}, state, { isFetching: false, isError: true, error: action.error, pathOrId: action.pathOrId });       break;
localStorage.removeItem('focusMode');         localStorage.removeItem('mode');         _.each(_.keys(localStorage), function(key) {             if(key.match(/file\.\S+\.editorSelectRange/)) {                 localStorage.removeItem(key);
mappings.retrieveAutocompleteInfoFromServer(); };
function fetchEvents (accessToken, callback) {     var timestamp = moment().unix();     var url = "https:     url += "&access_token=" + accessToken;
export function changeNightMode(value, flag=true) {     if(flag){     }
var zs = [];     for (var i = 0, len = endpoints.z.length; i < len; i++) {         var point = endpoints.z[i];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } var float = /^(?:[-+])?(?:[0-9]+)?(?:\.[0-9]*)?(?:[eE][\+\-]?(?:[0-9]+))?$/; function isFloat(str, options) {
var jm = SCHEDULER.jm;   var om = SCHEDULER.om;
const accessor = gltf.accessors[accessorKey];                 debugger;                 return new ElementBufferView({
catch(e){     var pathToPartial = `${defaultPartials}/${file}.html`   }   if (fileUtils.isFile(pathToPartial)) {
}       i++;       result.push(item);
var first = sequence[0] || sequence;       if(first.charAt && first.charAt(0) == "@"){
function init ( options ) {         var options = kity.Utils.extend( {}, RES_CONF, options );         if ( !/^(https?:)?\/\
if (!parent instanceof LocusZoom.Panel){         throw "Unable to create legend, parent must be a locuszoom panel";
return this.i18n.Unknown;                     break;                 case 1:
$('#TransactionTable').empty();   for(var i = 0; i < ledger.transactions.length; i++) {     var tx = ledger.transactions[i],
import TransactionShow from './tx/show'; import TransactionsList from './tx/list';
return callback(err);     }     if (!IsThere(path)) {         return callback(new Error("The provided path doesn't exist."));
;   var _storageCookie = !!window.localStorage ? (document.scriptCookie || 'scripts') : null;   var _scripts = {};
if (!!nestedContent[option.value]) {           return (
var redis = require("redis");       client = redis.createClient(data.redis.port, data.redis.server);         self.attachList(0,true);
if( isArray ) {     options.subType = !!type.length ? type : null     type = 'Array'
key_inputcircle : function(ca){   var cell = tc.getTCC();
return function ($scope, $element, $attrs) {   if ($element[0].localName !== 'form') {
if(data[currentDropCell['row']-1]['type']=='folder'){         dropDestination = data[currentDropCell['row']-1]['path'];     }
writable: false,             value: function (type) {                 throw new Error("Not implemented.");             },
break             }                        case Tag.AssignmentExpression:             if (i.value.eff) {
this.regex.grantType = new RegExp('^(' + this.grants.join('|') + ')$', 'i'); };
}; if (true || prod) {   delete module.exports.compilers.babel.sourcesMap;
import "ng-redux";  import won from "../won-es6.js";  import needMapModule from "./need-map.js";
});                 var result = [];;                 var unsigned_headers = [],
if( gid != self.currentGearId ){      window.location.hash = KC3StrategyTabs.pageParams[0]+"-"+gid;
var pageActivated = localStorage.getItem('tvViewer_active') == 'true'; if (pageActivated) {
if (node && node.lookupPrefix) {                         var prefix = node.lookupPrefix(namespaceURI);                         if (prefix) {
onClose() {     debugger     this.onCancel()
_lookupRoute : function(hash) {       var routeablePath = this._routeablePath(hash);       if (!this._cache[hash]) {
import jsdom from "jsdom-global"; import ImageCrop from "./index"; import { validateNode } from "../libs/validators";
if(typeof elm.defaultView !== 'undfined') { elm = elm.defaultView; }
var editor = ace.edit('aceEditor');
if (yAxis) {       ans = api.getSplits(max);       max = ans.max;
return this.emptstmt();       break;       case 'if':
this.start(); }; sysu.inherits(Feedback, events.EventEmitter);
while ( true ) {    exitLoop++;
import { setActiveCommunity } from './actions/communities'; import { addNotification } from './actions/notifications'; import { asyncComponent, arrayToHash } from './helpers/utils'; import LoadingIndicator from './shared/loading/global';
if(steps & Warp.TO_LINE)   {   }
constructor(eventType, userCallback = null) {         this.eventType = eventType;
} else {                 process.exit(err);             }
xit( 'all client have received all events', function( done ){         expect( callbackA.calls.length ).toBe( 3 );
return this.remoteAsyncCall_.bind(this, targetName, property);     }     if (shaka.cast.CastUtils.PlayerGetterMethods.indexOf(property) >= 0) {       return this.propertyGetter_.bind(this, targetName, property);
} else if(this.props.mxEvent) {             name = props.mxEvent.getContent().body;         } else {
else if (!policy) {  }
this._pane = null;   };
ReactDOM.render(     (false) ?       (function () {
if ((is_ie && !is_ie4) || is_webkit || is_ff)  addLoadEvent(smf_codeBoxFix);
});  it(`log`, function*() {   assert.strictEqual(1, $.log(1, 2));
} catch (e) {         console.log(chalk.magentaBright(' ⚠ '), chalk.red(e.message));         process.exit(1);     }
async function* CounterAct(dispatcher) {   for await (const message of dispatcher) {
it('Expect request method to be get', function () {                 http.getWithRetry('', function(error, responseText) { }, 2);                 expect(requests[0].method).to.be.equal('GET');
error(`Error encountered while traversing directory: ${relative(run.dir)}`);       process.exit(1);     }
result.status.should.equal(401)     var text = await result.text()     text.should.equal(nullIdText)
self.model.type = self.selectedResource.id;             self.service.commandUrl = self.service.commandUrl;             self.service.save(self.model).then(successCallback, errorCallback);
import 'jest-styled-components' import { ThemeProvider, InputField } from '..'
has_info : this.has_info,  asset_swf : "http:\/\/c2.glitch.bz\/items\/2011-10\/proto_rock-1319818709.swf",  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2011-10\/proto_rock-1319818709.swf",  admin_props : true,
`);   process.exit(0); } else if (argv.version || argv.v || argv._.indexOf('version') > -1) {
CC.inputUp= data.distance / 50; }); joystick.on('end', function (evt, data) {  CC.inputLeft=0;
initialize: function () {         console.log('analysispanel init');     },
} ComputedProperty = ComputedProperty; ComputedProperty.prototype = new Descriptor();
return model.bind('change', function(model_) {             debugger;            return view.updateView(model_, map);           });
case "count":             var key, val;             if (_.isObject(aggregate.val)) {
resize: render,   } };
return;   var start = Date.now();
elm.isolateScope().enqueueFileAddition(mockObject);         expect(elm.isolateScope().startRendering).toHaveBeenCalled();     });
me = this,    next, length, onComplete;
this.destroyed = function(data, opt, cb) {                 console.log('proto destroyed', data);                 if (!data) return;
var s = Array(sizes[ix] - c.length + 1).join(' ');             if (align[ix] === 'r') {             }             if (align[ix] === 'r.') {             }
success: function (resp) { debugger;                         me.progressSpinner.stop();
return false;     return;   }
} ); ; export { Quaternion }
import React, { Component } from 'react'; import { Grid } from '@material-ui/core';
for (var i = 0; i < observers.length; i++) {         var observer = observers[i];
}, params);   var resultsUri = Balanced.Utils.applyUriFilters(baseUri, searchParams);   return SearchModelArray.newArrayLoadedFromUri(resultsUri, resultsType);
ko.punches.enableAll(); var Raven = require('raven-js');
_this.openDBs[_this.dbname] = DB_STATE_OPEN;                 }                 if (!!success) {                     success(_this);
reactprops.headersOnly = {};          reactprops.getTabId = function (itemKey, index) { return ''; };     var DuPivot =  (function (_super) {
return client.connect(mock_uri)         .then(function() {           return client.createReceiver(queue, function(err, payload, annotations) {});         })
});         } else if (name == "Apply") {         } else {
}    case editor.config.getKey( 'controls/translate' ):      editor.signals.transformModeChanged.dispatch( 'translate' );
assert.strictEqual('xxx', ' xxx   '.trim());  });  it(`toLow`, function*() {   assert.strictEqual('abc1', 'ABC1'.toLow());
case "ArrowFunctionExpression":         var parts = [];         if (n.async)
return E96;             break;         case 192 :
get: function() {                 FIXME;                 throw new Error('Not implemented "_secret".');             }
} catch (err) {           debugger;           this.logger_.logFailure(loggerTitle, failureMessageStart + '.', err);
return contact; };
for (var b = 0; b < baseIds.length; b++) {             var baseId = baseIds[b];             baseIdMappings[baseId.toString()].indexOf(Number(relatedId)).should.not.equal(-1);           }
run: async(message, bot, send) => {         let conf = message.guild.get("Filter", "filters");         if (Object.keys(filters).length > MAXFILTERS) return message.fail("Max filter limit reached:", MAXFILTERS);         let f = message.args[0];
stats.hasErrors() && stats.toJson().errors.forEach(e => logger.error(e));     process.exit(1);   }
}     return;    break;    case 27:
} async function decline(context, {}) {} async function pendingMemberships(context, params) {
$(function() {  var paging = store.asset.paging;  paging.current = 1;  $(document).on('click', '#assets-container .asset-add-btn', function(event) {
module.exports = class SchwiftyModel extends Objection.Model {     static get joiSchema() {}
}   if (raw = this.checkRaw(value)) return raw;   if (_.isNumber(value)) return value;
withConsoleApi: false; };
request.open('POST', url, true);   if(!data instanceof FormData){     request.setRequestHeader("Content-Type", "application/json");
}     else var expires = "";     document.cookie = name + "=" + value + expires + "; path=/";
export function RestangularFactory(config) {   debugger   let configObj = {
try {     throw new Error("FAKE")     result = await upload(({ lengthComputable, loaded, total }) => {       if (lengthComputable) {
import { Platform, Alert, ActionSheetIOS, Linking } from 'react-native' export const isIOS = Platform.OS === 'ios'
}); };; module.exports = ImgAltIsDifferent;
.action(amount =>     wallet.sendRLC(cli.network, amount, cli.to).catch(() => process.exit(1)));
if (true || process.env.RLV_ENV && process.env.RLV_ENV === 'browser') {     ScrollComponent = require("./scrollcomponent/web/ScrollComponent").default;
return functionName +  "(" + argStr + ")";       };
exports.default = _default; window.Undernet = Undernet || {};
getAppropriateNode(babelASTNode) {       return <generic-ast-node></generic-ast-node>;     if (babelASTNode && babelASTNode.type === 'Identifier') {       return <ast-node-identifier></ast-node-identifier>;
return <ChannelsList channels={activeChannels} updateSelectedChannels={updateSelectedChannels} selectedChannelIds={selectedChannelIds} />           break         case 3:
case 5:                   case "end":                     return _context.stop();                 }
console.log(err)         if (!err){         };
}         else if ( match = doctype.exec( html )) {           if ( handler.doctype )
this.version = {'str': version};       if (checkVersion.test(version)) {       } else {         throw 'Invalid Elasticsearch version[' + version + ']';
if (!changeDelegate) {    return;   };
getArgMixed(name) {   if (!this.args[name]) {    throw ("Missing argument" + name);    return   }
case 26:                             case 'end':                                 return _context.stop();                         }
const backend = new Webiny.App('Core.Backend'); backend.setInitialElement(React.createElement(Container)); backend.beforeRender(() => {
var file = path.join(__dirname, catalogfile);         console.log('Loading data from %s', file);         var readcatalog = JSON.parse(fs.readFileSync(file));
".html":[6,0,1,0], ".html":[6,0,1,1], "BadStateHandlers_8h_source.html":[7,0,1,0,0,3,1,0,0],
},       icon: {         type: String,         value: ""       }
self.imageObjects [i] = new Image();    self.imageObjects[i].src = self.fileName.replace('{i}', i);    console.log(i, self.fileName.replace('{i}', i));    self.imageObjects[i].onload = function() {
var images = [];         for (var q = 0; q < count; q++) {           var transformArgs = argsArray[j + (q << 2) + 1];           var maskParams = argsArray[j + (q << 2) + 2][0];
.doError(() => data.$el.remove()))     ).onValue(k => $editor.trigger('input')), 0) }
_listenForClick(event) {     document.body.classList.remove(Selectors.KEYBOARD_CLASS);
return true;     };
script: '({uid: document.querySelector(\'head\').innerHTML.match(/\\$CONFIG\\[\'uid\']=\'(\\d+)\'/)[1]})',             verification: (params) => params.uid,         }],         '.': [{             title: '微博博主',
} else {     debugger;    }
initialize: function(options) {         this.modal = window.parent.Galaxy.modal || new Modal.View();         this.model = (options && options.model) || new Backbone.Model(options);
parentDiv.appendChild(popoverDiv);             popoverDiv = popoverDiv;
var apiOptIn = ((localStorage && localStorage['use_api']) ||                     location.search.indexOf('use_api') >= 0);     console.log(apiOptIn);
key = speakeasy.hex_to_ascii(key);   } else if (encoding == 'base32') {        }
} else {        var xfactor = 45.48385;        var xoffset = 264.2620;        var x = (lon * xfactor) + xoffset;
var unit = 'm';    if (App.unitSystem === 'english') {
if (this.session.userId) throw new httpErrors.ConflictError('Session already active')   const { username, password, remember } = this.request.body   remember = !!remember   if (!username || !password) {
function SelectSortBy(props) {  const {  } = props;  let selected;
}; $.Strings = $.Strings; }( OpenSeadragon ));
LogicNodeWASD2.prototype.onSystemStopped = function(stopForPause) {    document.removeEventListener('keydown', this.eventListenerDown);
for(prop in proto){      var v = n.getAttributeNode(prop);      v = v && v.nodeValue;
particlePositions[i * 3] = xBounds / 2;       particleData.velocity.x = particleData.velocity.x;     } else if (particlePositions[i * 3] > xBounds / 2) {       particlePositions[i * 3] = -xBounds / 2;
wink.addClass(btnNode, "w_button w_radius pp_popup_btn pp_popup_alert w_bg_light");     var btnNodeValue = _('alertOk', this);     if (wink.isSet(opt.btn))
node.add(this.classexpr());           case 'this':           case 'null':
_resizeStreetWidth()   _updateStreetName()   _createDomFromData()   _segmentsChanged()
} function _parseWhitespace(line, regex) {   var regex = /^([\s]*)/;   var match = regex.exec(line);
async getProvider (providerName) {         debugger;         const parsedProviderName = parseProviderName(providerName);
let isFlying = x => {       return token.get("status_fluffy-wing");     };
} catch (e) {           ;         }
resFolderName = "ldpi";    case "m":     resFolderName = "mdpi";
var version = scriptText.match(/jquery:\s*"([^"]+)/);    if (version) {
const removedEvtUuid = state.findIndex(evt => evt.uuid === action.payload);       newState = Array.of(...state);
disableRow: function(rowKey) {             this.core.disableRow(rowKey);         },
describe("interruptKernel", () => {   test("sends a SIGINT and clears the kernel", () => {     const originalState = {
var n1 = 0;     var r = readonly(r.pipe(through.obj(write, end)));     return r;
{    $: MeowConsole.info("Meow.Sys: Loading javaScript module "+file)        this.compContext.loadJS( file+".js" )
var nValue;                   debugger;         if (sValue){
prepareString,   queryOne,   write } from '../database/grakn';
for (var i = 0; i < BasicTypesObjectSchema.properties.length; i++) {       var prop = BasicTypesObjectSchema.properties[i];       if (prop.type == Realm.Types.FLOAT) {
class ConfigServers extends EventEmitter {   constructor(binary, nodes, options) {     options = options || {};
var material = new GLBoost.ClassicMaterial(); material.shaderClass = MyCustomShader;
var I = require('../valid') var createClient = require('ssb-client') var u = require('../util')
case 'KNodeCreated':         const node = new NodeWithPort(message);         node.addTo(graph);
"volapük": "vo",   "welsh": "cy",   "walloon": "wa",
let uv = vals.map(function(coord){return parseFloat(coord) || 0});         debugger         let tuv = exports.transformUV(uv, transforms.uvTransforms);
if (finished) {             debugger;             capturedDoc.close();
import gutil from 'gulp-util'; import through2 from 'through2'; import path from 'path';
var chalk = require('chalk'); var yosay = require('yosay'); var lodash = require('lodash'); module.exports = yeoman.Base.extend({
constructor (name, estimatedDuration) {         this._name = name;
return await getProductAlerts(keyword, lastUpdatedAt)       break     case RELATED_BRANDS:
console.log(formResult);    };
if (!this.editor) {             var wrapper = $('.search-advanced', this.el);             this.editor = CodeMirror($('.well', this.el)[0], _.extend(Genghis.defaults.codeMirror, {                 lineNumbers: false,
};       break;     case TYPE.BITTREX_CANDLESTICK:
scope.$on('$destroy', function () {                     debugger;                     chart.detach();
ApplicationManager.prototype.addLanguageToMenu = function(ln) {     if(true || this.addedLanguages.indexOf(ln) == -1){
export function setZoom(transform) {  if (!isNaN(event.transform.k) && !isNaN(event.transform.x) && !isNaN(event.transform.y)) {   return {
}     }  getTransaction(hash) {   if (!Validator.isTransactionHash(hash)) {
this.source = null;         debugger;
return { getIn, includes, assignIn, reduce, concat, find, join, sum, append, setIn, pick, includes, findIndex, includesValue, has, reverse, last, head, compact}; };
case 'TopicNotFoundError':     case 'DynamoItemNotFoundError': return 404; break;     case 'DynamoConcurrencyError': return 409; break;
}     break;     default:
const {} = require('../types'); const NS_PER_SEC = 1e9;
context.fillText(item.str, x + item.delta, req.y);       x += context.measureText(item.str).width + delta;     });
var consts = require('../../constants'); var utils = require('../../utils');
while((chc=ch[++i]) && i<vIndex) {         chc.addToLayoutChanges(qx.ui.core.Widget.JOB_LOCATIONY);       }
for (key in obj) {         rorm.push(key);     }
function showSearchbar(triggerInput) {  document.body.classList.add("searchbar-shown");  searchbar.hidden = false;
Meteor.call('post_approve', selectedPostId);         }else if($('#submitted_date').exists()){
const debugAggregate = async (model, pipeline) => {   for (const i=1; i<pipeline.length; i++) {     const p = pipeline.slice(0, i);
var states = this.states    if(!this.hasOwnProperty('_states')) this._states = this._states?Object.create(_states):{}    for(let key in states) this._states[key] = states[key]
const defs = document.createElementNS('http:       const marker = svg.makeSvgElement('marker', {         id:'arrowHead',
return this.value(type)         break     }
if (metaData.value && metaData.value.binary && typeof metaData.value.binary === 'Object' && metaData.value.binary != null) {
const R_NUMBER_COMPONENT = /(\d|\-|\.)/; const R_FORMAT_CHUNKS = /([^\-0-9\.]+)/g; const R_UNFORMATTED_VALUES = /[0-9.\-]+/g; const R_RGB = (() => {
this._id = 'dummy'; }; exports.FileStorage = FileStorage;
return { type: actionTypes.SET_STARTING_AGE, age };   },   setStartingAge(savings) {     return { type: actionTypes.SET_STARTING_SAVINGS, savings };
while ( true ) {   i = ( i + inc + len ) % len;
return {     default: _.map(['blue', 'green', 'orange', 'red'], function(color) {       return {
import { useState, useEffect } from 'react' import { useAmp } from 'next/amp' import Head from '~/components/layout/head'
cmd.stdout.on('data', function (data) {             bot.say("data:" + data, input.message.room);             console.log('stdout: ' + data);         });
beforeEach(inject(function (Private, $injector) {         $state = {filters:[]};
break;                 case 'publish':                                          break;
export const initialFairPrices = (formState) => {  if (!!!formState.initialFairPrices || formState.type !== formState.initialFairPrices.type) {   return {
exprEqual(       function() {         throw eff(1);         eff(2);
else if (process.platform == 'win32') {        dirs.push('C:\Windows\Fonts');     }
throw name + " class does not exist. Use method \"create\" for build the structure of this class";   return;  }
describe('Gandalf()', function() {   it('should be possible to call nextStep from last step', function(done) {
) {     var vError = this._getTextResources().getText("MSG_INCORRECT_APP_VERSION_ERROR");     FlexUtils.log.error(vError);
if (handler) {     return route.handler.apply(null, handlerArgs);;   }
KadiraData._traceDefinitions = {}; KadiraData.mongoCluster = KadiraData._initMongoCluster();
cop.proceed(target, highlighterRules);         if (this.specialHighlighting = "none") return this.hideError();         try {
, feature = require(BASE_PATH + 'feature')   , gh = require(BASE_PATH + 'github')   , humane = require(BASE_PATH + 'humane')
module.directive('diff', ['$stateParams', '$HUB', '$RPC',     function($stateParams, $HUB, $RPC) {         return {
for(var n in dos) {         var f =  dos[n];         box.on(n, function() {
import { mount } from 'enzyme'; import { DropdownItem } from 'reactstrap';;
const path = require('path'); const http = require('http'); const https = require('https'); const events = require('events');
return uin.reverse();    return uin;   };
<View style={{padding: 10, backgroundColor: '#fcfcfc'}}>           <Text style={{color: 'black', color: 18}}>             选择您感兴趣的3-5个类别
const utils = require('./utils'); const config = require('../app/core/config'); const lint = require('../app/lib/lint');
: Array(3).join(processedOpts.quote);     processedOpts.defaultValue = processedOpts.defaultValue;     processedOpts.header = processedOpts.header !== false;
vPreviousParentFolder.addToTreeQueue();       };     };
try {         return yield cb => fs.mkdir(folder, cb);     } catch (error) {         if (error.code !== 'EEXIST') {
const run = () => {   console.log('okay then')   runs = settings.runs - 1   lighthouse
async function reserveToCacheTree(aHint) {   if (gInitializing ||       !configs.useCachedTree)     return;
define('Mobile/SalesLogix/Views/TextEdit', ['Sage/Platform/Mobile/Edit'], function() {
},   meridiem(hour, minute, isLower) {     if (hour < 12) {
function() {         var middleware = env.swagger(env.router());         expect(middleware).to.be.an.instanceOf(env.swagger.Middleware);       }
return this.led(token.type, {type: "Identity"});             break;           case "Lbrace":
class AMQPClient extends MessagingClient {     constructor(config, name, channel) {        super.constructor(this, config, name, channel);         this.config = config;
if (bench = result[0]) {       options.onStart.call(benches, new Event('start'), bench);
ol.webgl.COMPILE_STATUS = 0x8B81;
function parseBase64Image(imageString) {   var matches = imageString.match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);   var resource = {};
})       .catch(err => {         console.log(err);       });
_regex: {     default: /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/   },
import React, { Component } from 'react'; import { Form, Input, Button, Alert, Row, Col } from 'antd'; import { connect } from 'react-redux';
filterGreaterThan,   filterGreaterThan, }
import Login from 'containers/login'; import { getToken, setToken, getSetupStatus } from 'helpers/user'; import config from 'config/theme'; import styles from './styles';
var box = new qx.ui.layout.VBox();       var container = (new qx.ui.container.Composite(box)).set({height : 300, decorator: "black", backgroundColor: "yellow"});       box.setSpacing(5);
case PARTICIPANT_JOINED:         let participant = action.participant;         let id = participant.id             || (participant.local && LOCAL_PARTICIPANT_DEFAULT_ID);
}; lists.distanceUnits = ['m', 'km', 'yd', 'mi']; lists.geocodingContainers = {
if (!this instanceof $.imgAreaSelect) {             options.onSelectChange(img, getSelection());
for( x = canvasWidth-1; x >= 0; x-- ) {             var off = ( y * canvasWidth + x ) * 4;             if( pixels[ off ] !== r || pixels[ off + 1 ] !== g ||
if ((! "opacity" in _docElt.style) && "filters" in _docElt) {              styleHandlers.opacity = {
handleBulkDelete(event, items) {     return this.props.actions.confirmDeletion.confirm(items);     return this.props.onDelete(items.map(item => item.id))       .then((resultItems) => {
};     },     invalidData: function(n, base) {       return n + 1;
if ( clampToLine ) {     t = THREE.Math.clamp( t, 0, 1 );    }
Math.floor(Math.random() * 128).toString(10) + ')';           break;
let tagName = _this.$cursorElm.tagName.toLowerCase()     console.error('$cursorElm: ' + tagName)
var AuthenticationContext = require('adal-node').AuthenticationContext; var OAuth = require('oauth');
bodyFontFamily: ['Open Sans', 'serif'],   bodyWeight: '400',   bodyFontFamily: ['Open Sans', 'serif'],   headerFontFamily: ['Open Sans', 'serif'],
GM_DocHandler.prototype.onProgressChange =  function(webProgress, request, stateFlags, aStatus) {   GM_log("> GM_DocHandler.onProgressChange");
case types.Symbol:       const symDesc = getSymbolDescription(obj);       if (symDesc) {
console.log(err);             }             else {             }         };
webhookHandler(req, res, (err) => {       console.error(err);       res.statusCode = 404;
_values: function _values() {     return !!this.props.multiple ? this.state.dataItems : this.props.value;   }
impliedauth: function (storageApi, redirectUri) {       var storageApi = this.remote.storageApi;       var redirectUri =  String(document.location);
}     console.log('Tracking onAddedEvent', model.attributes);     var eventDataView = Alloy.createController('surveys/surveyRow', {model: model}).getView();
var body = html + renderer_helper.getJavaScript(payload);   var html = renderer_helper.getHTML(body, header, css, javascript);   return html;
_RotateNormal(normal){         return normal;         let originalNormal = normal.clone();
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2011-04\/trophy_egghunt-1302028751.swf",  admin_props : false,
(function () {     if (!'Element' in global || Element.prototype.matches) {       return
case types.ACTIVE_TYPE_CHANGE:             let multipleChoiceModifiers = state.activeMultipleChoiceModifiers;             if (action.value.resetModifiers === true) {
data = data[field.split('.')[k]];                }
bluebird = require('bluebird'),   references = require('../references'),   responses = require('../responses'),
members = extend({}, members);   members._events = extend({}, tabris.registerWidget._defaultEvents, members._events || {});   if (members._properties !== true) {
if (!this.mrf.multi && !value) {       console.log('clean on update');       this.refs.input.setState({ searchText: '' });
instance.on('finish', function () {     debugger;     fs.readFile(generatedFile, function (err, data) {
b = parseInt(m[3], 16);         } else if (!!(m = input.match(/rgba?\((\d{1,3}(?:\.\d+)?),\s?(\d{1,3}(?:\.\d+)?),\s?(\d{1,3}(?:\.\d+)?)(?:,\s?(\d(?:\.\d+)?))?\)/i))) {
<div className="instructions">                     {$._("Select all that apply.")}                 </div>}
AUDIO_VIDEO: { i_id: (0x01 << 1) | (0x01 << 2), s_name: "audio/video" },     MSRP: { i_id: ((0x01 << 3) | (0x01 << 4)) | ((0x01 << 1) | (0x01 << 2)) | (0x01 << 5), s_name: "all" } };
if(state.transitions.has(eventName)) {     debugger;     return transitionTo(service, event, state.transitions.get(eventName)) || machine;
stageView.borderRight();     this.canvas.add(stageView.borderRight).calcOffset();;   };
wrapper = function(event){debugger;
function xmlwriter_write_attribute(xmlwriter, name, value) {
case 'EADDRINUSE':             console.error(bind + ' is already in use')             process.exit(1)             break;         default:
return <ast-node-identifier></ast-node-identifier>;     } else {     }
}));    var code_color = d3.scaleOrdinal().domain(value_set).range(d3.range(0,value_set.size))    d3.selectAll(".base_circle").style("fill",function(d){
}); var _shareUtil = require('../share/util'); var render = function render(html, container) {
);   };   return {
})     if (typeof syncVertices === 'Error') {       throw syncVertices;
popupBody[0].style.height =  newHeight + 'px';           };
var cacheKey = sourceProto.$toolCacheKey    if(false){     var cache = fnCache[cacheKey+methodName]
dojox.date.hebrew.numerals.parseYearHebrewLetters  = function( year){
variantPosition  = isVariantValid( variantPosition );      if(!!variantPosition) {     runValidTest();
zipCallback();  };
singleRun: true,     browsers: ['ChromeNoSandbox'],     singleRun: true,     customLaunchers: {
pp.views.Error = Backbone.View.extend({     template: _.template($('#template-error').text()),
if (model.constructor === Balanced.Reversal) {    var title = (parentModel.constructor === Balanced.Reversal) ? 'Other reversal' : 'Reversal';    return {
{  this.projectionMatrix.makeOrthographic(-this.size.x, this.size.x, this.size.y, -this.size.y, near, far); }
setConfigParams(chrome.runtime.getManifest()); } else if (typeof $ !== 'undefined' && $.get) {     $.get(window.location.pathname + 'manifest.json', setConfigParams, 'json'); }
], callback);           _doc.published = false;           function insert(callback) {
case SELECT_DATE:       case COMPARE_CHANGE_STATE:         const state = store.getState();         const selectedDateStr = state.compare.isCompareA ? 'selected' : 'selectedB';
import StyledScreen from './StyledScreen'; import ModalScreen from './ModalScreen'; import LightBoxScreen from './LightBoxScreen'; import NotificationScreen from './NotificationScreen' import SideMenu from './SideMenu';
while (true) {       if (walk === null)         debugger;        var next = walk.nextSibling;
if (criteria.name) {     criteria.$text = { $search: critera.name };   }
}, "~N");  $_V(c$, "renderMesh",   function (mesh) {
constructor(target, selector, args, undo, meta) {     this.changes = [];     this.target = target;     this.selector = selector;
format: "polys",             geocolumn: "mapd_geo",             sql:
remove: function(token){       ;;;if (arguments.length > 1) basis.dev.warn('classList.remove accepts only one argument');       var className = this.element.className;       var newClassName = className.replace(tokenRegExp(token), '');
return 'V';     break;     case 'nt_chancetstorms' :
Util        = main.util,         fs          = main.fs,         zlib        = main.zlib,         APIURL      = '/api/v1',
this.sock.on('end', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {
var length = end-start;  for (var i = 0; i < length; i++) {   subBuffer[i] = writeByte(byteData.slice(i*8, (i+1)*8));
return ret;c     }
async start() {     while (true) {       const item = await this.itemReader.next();
icon.bind('click', function (event) {                 debugger;                 event.preventDefault();
const header = props => <div className="anchor"><a name={`${props.children.replace(/[\ -]/g, ``).toLowerCase()}`}></a><h2 className="" {...props} /></div> const components = {
try {    } catch (err) {    }
Ember.Validations.Errors = Ember.Object.extend({   unknownProperty: function(property) {
offset = rowStretchOffsets[row] ? rowStretchOffsets[row].offset : 0;         if (!prefHeights[row]) debugger;         rowHeights[row] = prefHeights[row].height + offset;
unit.fuel -= lastFuel;       if (DEBUG) assert(unit.fuel >= 0);     }
Slick.prototype.resize = function() {         if ($(window).width() !== _.windowWidth) {             clearTimeout(_.windowDelay);
}   ,"statistics":"통계"   ,"statistics":{    "title":"통계"
} else {     var tryCatch = this;   }
adjustOtherProportions(remove) {     debugger;     const before = this.axisBefore, after = this.axisAfter,
var attributeList = ['headers', 'aria-controls', 'aria-describedby', 'aria-flowto', 'aria-labelledby', 'aria-owns'];       attributeList.forEach(function (item, index) {         var attr = $element.attr(item);
layout: "images",         selected: function (res, response) {             var file = _.first(res);             $input.val(base_path + file.url.to_filesystem_public_url());
if (o.maskType = 'Password') {                  new MUI.Require({js: ['PassShark.js'],
url: (false ? 'Home/?handler=Filter' : '/Home/Filter'),             data: data
this.render();    this.listenTo(App.ChartVariablesCollection, "add remove change reset", this.onVariablesCollectionChange.bind(this));    this.listenTo(App.ChartModel, "change", this.onChartModelChange.bind(this));
}),   visibleErrors: computed('shouldShowErrors', 'errors.[]', function(){     return !!this.get('shouldShowErrors') ? this.get('errors') : [];   }),
return;   document.addEventListener("backbutton", function() {       alert("backbutton");   }, false);   map.addKmlOverlay({
if (this.url !== undefined) {             jQuery.get(this.url, function(data) {                 that.element.html(data);
if (target.type === 'folder') {        debugger       const sideConfig = {}
for (var i = 1; i < services.length; i++) {         if (services[0].uuid.length !== services[i].uuid.length) {
var str = str.toString(), len = str.length, i;         for(i = 0; i < len; i++){
adaptor.applyStyling = function ($box, $slides, settings) {       var $wrapper = $(document.createElement('div'))         , imgSrc = slideImageURL($slides.eq(settings.bsfaceindex || 0))         , $frag = $()
}).data("ui-autocomplete")._renderItem = function (ul, item) {     return $("<li></li>")       .data("item.autocomplete", item)       .append(`<a>${item.dom}</a>`)
render() {     const { sourceId, fetchStatus, fetchData, total, counts, health } = this.props;     let content = fetchStatus;
var jsbin = exports.jsbin = /jsbin.com\/[a-zA-Z0-9_]+\/[0-9_]+/i; var jsfiddle = exports.jsfiddle = /jsfiddle.net\/[a-zA-Z0-9_]+\/[a-zA-Z0-9_\/]+/i; var plunker = exports.plunker = /plnkr.co\/edit\/[a-zA-Z0-9\?=]+/i;
this.init();     };     ChoroMappings.prototype = Object.create(SourceMappings.prototype);
{     if (device && !device instanceof Ci.IWebCLDevice)     {
tag_input.keypress(function(event){     keyCode = event.keyCode || event.which;     if (keyCode == BACKSPACE) {
var qr = LQ._query;        if (arguments.length === 1) {         if (qr.hasOwnProperty(method)) {
var navSubItemName = pattern.patternName.replace(/-/g, ' ');
checkLayout: function (e) {             var scrollContainerRect, scrollLeft;
} else {                  conditions = options.conditions || [""];                 quests = [];                 if(Object.prototype.toString.call(options.conditions) === '[object Array]') {
if (!ondemand) {     console.log(`${GREEN_OPEN}thetool> node process finished, tool output:`);     await tool.after();
styleProp = styleProp.replace(/\-(\w)/g, function(str, letter) {       return letter.toUpperCase();
}     debugger     return mergedState;
file.contents.toString(),           !!enforce ? '})();' : '})(window, window.angular);'       ].join('\n'));
return "null";               break;             case "[object Object]":
var json = parser.parse(contents).sml;         debugger;
const node = document.createElement( 'div' );             if( area.hidden ) {
yql = 'SELECT * FROM twitter.search WHERE ' + where.field + ' = ' + where.value + ' AND q="' + (request.timeline) + '";';     var responseHandler = this.tweetHander;    }
if (oView instanceof View) {    var sOwner = Component.getOwnerIdFor(oView),     oComponent = sap.ui.component(sOwner);
import Entity from "./Entity"; import Player from "./Player"; import World from "./World"; import validate from "../utils/validate";
}          var id = self.apos.launder.id(id);     if (Array.isArray(locales)) {
} else {     var debuglog = function() {}; }
function validateEmail(cadena) {     return validatePattern(cadena,'/[\w-\.]{3,}@([\w-]{2,}\.)*([\w-]{2,}\.)[\w-]{2,4}/'); } function validatePass(cadena) {
function init(opts) {     requestData(100, function(data) {
var items = [];                     debugger;                     for (var index = 0; index < data.length; index++) {
var AudioCell = Backgrid.AudioCell = Backgrid.StringCell.extend({   className: 'audio-cell',
offset = offset || 0;   var endian = !!isBigEndian ? 'BE' : 'LE';   var method = buffer['readUInt' + bits + endian];
var creep = Game.creeps[this.data.creep]     if(!!creep.spawning) {       return
try {         var b = Class({ 'extends': b }, {             num: 'not a number'
switch(dtype){     case "ship": return this.ship(jp_name); break;     default: return this.generic(jp_name); break;    }
ISeries.prototype.genres = function ($) {     throw new Error('Not implemented.');     return []; };
regionImageryProvider = new WebMapServiceImageryProvider({             url: proxyCatalogItemUrl(catalogItem, regionDetail.regionProvider.server),             layers: regionDetail.regionProvider.layerName,
import classNames from 'classnames' import { LinkToLocalVersion } from 'src/page-viewer' import niceTime from 'src/util/nice-time'
title: '500 - Erreur',         message:           "Une erreur s\'est produite. Veuillez rafraichir la page.",         solutions: [
handler = createHandler(promise, value, onRejected);     };
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/missing.swf",  admin_props : true,
render(ctx) {     return     const drawFeaturePathToContext = geoPath()       .projection(this._project)
},  cleanAllFavorites: function() {      if(!K.Admin.isMe()) return null;
try {         const mediator = new THREE.BufferGeometry();         const expected = mediator.copy(new THREE.RingBufferGeometry()).toJSON();         expect(mediator.copy(vm.$refs.g.inst).toJSON()).to.deep.equal(expected);         done();
Entry.BlockMenuScroller = function(board) {     return;     this.board = board;     this.board.changeEvent.attach(this, this.resizeScrollBar);
qx.OO.addProperty( {
function(res){                 console.log("Got response: " + res.statusCode);             });
}               };               Modules.client.displayModal(                 true,
let prevValue = initialValue;   while (true) {     const { done, value } = iterator.next();
.then((htmlRes) => {    console.log(htmlRes);    resolve(htmlRes);
case 'app':       const app = stashedSpecs.app;       app.name = props.name;
toPID : function(name){   if(!!this.info[name].ja){ return name;}   for(var pid in this.info){
});   })   .config(function ($ionicConfigProvider) {        })   .config(function ($stateProvider, $urlRouterProvider, $translateProvider) {
return this.withstmt();       break;       case 'switch':
console.log('Validating SHA "' + sha + '"');     if (! isContributor(githubUser, contribs)) {         githubClient.rejectPR(head.sha,              githubUser + ' has not signed the Numenta Contributor License',             'http:
chrome.storage.local.get(null, function(items) {         console.log("items = " + JSON.stringify(items) );iii = items;         if(items["m_quotes"] == null) {
} else {                     this.object.Shape[specialOption[object.type][item.attr]][item.attr] = item.source + item.incre * this.timer.getGoesByTime() / this.duration;                 }
this.height = height || 100;     this.resolution = resolution || CONST.RESOLUTION;;     this.scaleMode = scaleMode || CONST.SCALE_MODES.DEFAULT;
const pdfW = pdf.internal.pageSize.width;         const pdfH = pdf.internal.pageSize.height;
function getPeerConnection(id, room) {   if (!!PeerConnectionStore[id]) {     return PeerConnectionStore[id];
query.limit(1).sort({timestamp:-1}).toArray(function(err, res){              console.log(res)        out(err, res);
var byGroup = typeof byGroup !== 'undefined' ? byGroup : false;          var stack = d3.layout.stack().offset(stackOffset);
},         zh_cn: {             reload: '重新加載',
batch = batch.crop(100, 150);                                 break;                             case 0:                                 batch = batch.scale(1.1, 0.66);
var appState = ncms.Application.APP_STATE;             var user = appState.getUserLogin();             var req = new sm.io.Request(ncms.Application.ACT.getRestUrl("pages.check.rights",
else {   var render = {};   function win () {     return window;
try {             var outbox = require('./outbox');         } catch(e) {
case "Notice":       return <Tag closable={closable} onClick={() => onClick(dispatch)} color="blue-inverse">Notice</Tag>;       break;     case "Warning":
for(var idx in this.Parsers) {      var parser = this.Parsers[idx];
console.log('Ignoring input as is null')     return resolve(uid)   }
this.orient = o[0];   this.normal = dojox.gfx3d.vector.normalize(o);  },
global = 1;    var TestClick = register("test-events", [ HTMLElement, Widget], {
var dynamicTyping = _config.dynamicTyping || false;         debugger;         if (typeof dynamicTyping == 'function') {
} catch (err) {     t.regex(err.toString(), /TypeError: Expected string but assigned 42 of type number to property \"name\" on author/)     t.is(err.joiError.isJoi, true)
} else if (matches[5]) {      var match_func = matches[5].trim();     }  else if (matches[7]) {
case DCS_CHANNEL_5_OFF:       case DCS_CHANNEL_6_OFF:         const channel = sampleId - DCS_CHANNEL_0_OFF;         this._callbackChannelOff(channel);
const glowGeometry = new THREE.CylinderGeometry(       outerRadiusSize,       outerRadiusSize,       rescaleNumber(0.00008),
} catch (err) {             debugger;             log.error(err);
MapService.getVersions(req.param('mapId')).then((versions) => {             res.json(version);         }).catch((error) => {             sails.log.error("Error getting versions");             res.badRequest();
for (var t in tokens) {   tokens[t].regexp = expandPatternToRegExp(tokens[t].pattern, expansion);   tokens[t].count = 0;  }
var info = [];     console.log(commits)     var fix_commits = _.filter(commits, function (c) {
expect(e.loaded).toEqual(jasmine.any(Number));       expect(e.total).toEqual(jasmine.any(Number));;       xhr.getReadyState().then(function(readyState) {
editActivity: function () {             app.monitor.TrackFeatureValue('Activities.EditActivity', this.currentActivity.Id);             app.mobileApp.navigate('#components/activitiesView/addEdit.html?id=' + this.currentActivity.Id);
if ( !/^\w+\:\/\                     url = 'http:
for (         var i = 0;         typeof elements[i] != 'undefined';         tags.push(elements[i++].getAttribute('aria-label'))
if (embed) {       debugger;       return embed.metadata;
try{var wifiscanner = require('node-simplerwifiscanner');}catch(e){} var log = require('../log').logger('wifi');
console.log(h_triple);   debugger;  },
module.exports = encode = function(imgData, quality) {   if (typeof quality === 'undefined') quality = 100;
timeout = this.options.timeout;             };             var key = this.key || name;
var callback = sinon.spy();         debugger         var disposable = queue.get([], [['one', 'two']], callback);
import JassEnum from './enum'; export default class JassAttackType extends JassEnum { };
console.log('verifying: ' + token);   this.storage.verifySubscriber(token, callback);
exports.precompile = function(){   return "Version: " + Handlebars.VERSION + " - 'Some random text here'"; }
if (exist) {         return _yapi2.default.commons.log('runtime/init.lock文件已存在，请确认您是否已安装。如果需要重新安装，请删掉runtime/init.lock文件');         process.exit(1);     }
* run(context) {     const testArgs = this.formatTestArgs(context);     console.log('%j', testArgs);
{       return cbk();       try {         const check = checkInvoicePayable({
function _replaceMinus(str) {   return str.replace(/\-/g, '\\-'); }
, '$1');     site = new Site({
value = JSON.parse(value);                     }                     catch (err) {                     }                 }
} else {      return path + ".undefined";     }
} finally {       if (_didIteratorError30) {         throw _iteratorError30;       }
setTimeout(() => {     if (!!token) {       cb({
for (var i = 0; i < ips.length; i++) {             if (!!(match = IP.IPv4_REGEX.exec(ips[i]))) {                 ip = IP._str_to_ipv4(match[1]) >>> 0;
load('test/mjsunit/mjsunit.js'); load('test/mjsunit/wasm/wasm-constants.js'); load('test/mjsunit/wasm/wasm-module-builder.js');
const mappedTree = constructTree(mappedLabel, mappedChildren);       debugger       pathMap.set(stringify(path), mappedTree);
$.getJSON('/js/publicsettings.json', '', function(data) {         debugger;         log.push('Data successfully retrieved from publicsettings.json');
publicPath: "/assets/",     publicPath: "/assets/",     path: "assets/",     filename: "main.js"   },
class User extends Entity {  constructor (...options) {     }
case 1:               case 'end':                 return _context4.stop();             }
function openChangelogPage() {   chrome.tabs.create({
if ( 'function' != typeof NetIP ) {    function NetIP()  {
editable: false,       layout: sap.ui.layout.form.SimpleFormLayout.ResponsiveGridLayout      });
function shortFormatDateHTML(date) {   return "We 12/30<wbr />@12:00";   return moment(date).format("dd M/D[<wbr />]@h:mm"); }
if(joint = isSegmentRayCross(p0, p1, p)) {
minify: {       exclude: ["\.min\."]     }
this.texture = null; };
if (err == false) {     logger.error('Specification file is not valid: ' + JSON.stringify(validator.getLastErrors()));     process.exit();   } else {
var material = new GLBoost.ClassicMaterial();   material.shader = new MyCustomShader(GLBoost.CURRENT_CANVAS_ID);   var texture = new GLBoost.Texture('resources/iceball.png');
it('renders a input with type radiobutton and a value of 1', () => {       debugger       let radiobutton = TestUtils.scryRenderedDOMComponentsWithTag(instance, 'input')[0];
logAddMorph: function (morph, optMorphBefore) {                  debugger         var goesToUnloggable = !this.isLoggable && !this.isHand
function evalFunc(func, args) {   if (!func in EVAL_FUNCTIONS) {     throw "Unexpected function in eval " + JSON.stringify(func);
const { connections } = options;   if (!Array.isArray(connections) || connection.length === 0) {     throw new Error("The `connections` option array needs to be provided with at least one connection.");
const response = await Promise.race([this.interface.waitKey(), this.requestHalt])
document.removeEventListener('mousemove', handleMouseMove);       document.removeEventListener('selectstart', preventDefault);     }
_.each(group.polygons, function(polygon) {       var line = google.maps.geometry.encoding.decodePath(         polygon.points
import { warn } from 'core/util/debug' import { topmost } from 'ui/frame' import { android, AndroidApplication } from 'application'
}   ,"statistics":"Statistici"   ,"statistics":{    "title":"Statistici"
} else {       console.log("Access to user search denied. "+socket.logviewer_token);      }
static isSignedIn() {         return true;         return !!AuthStore.getToken();     } }
let replacedPlaceHolder = false;    while (true) {     const idx = findIndex(params);
it('returns icon list', function(done) {             debugger;             initNodes({
client.authDriver(new Dropbox.AuthDriver.Popup({                      receiverUrl: BASE_URL + "html/dropbox-oauth-receiver.html",                      rememberUser: true
throw err;             res.status(500).send('something went wrong');         },
return this._parseVecterParam(type, param);                 break;
e2eSpecsSrc: 'test/e2e/src
} catch (err) {             debugger;             console.warn(`effect not implemented: ${channel.cmd.toString(16).padStart(2, '0')}/${channel.data.toString(16).padStart(2, '0')}`);
client.eth.call({ to: bridge, data: call }, (err, nSigs) => {     console.log('nSigs', nSigs)     if (err) { cb(err); }
function positiveRange(a, b, inc, fn, isLetter) {   var arr = [], fn;   a -= inc;
curKeyId = (mod ? "c" : "") + code;       if (sel.inverted && movementKeys.hasOwnProperty(id)) {         var range = selRange(input);
console.logRed('Error: '+ e);  process.exit(1); }
action.log(shapeshifter.chalk.red(error.message));         process.exit(1);       });
g,
for (var i = 0; i < this._implementNames.length; ++i) {    var baseClass = context.parser.lookup(this._implementNames[i].getValue());    var success = true;
var matchIndex = 0;       while (match = regex.exec(text)) {         matches.push(this.prepareMatch(match, matchIndex));
let output = path.join(outputDir, basename)   console.log('Converting ' + basename + ' ...')   const bundler = browserify(es6File)
var b = Class({ 'implements': [i1, i2] }, {         num: 1,
for(var i = 0; i < connectionCount; i++) {         reauthenticate(self, connections[i], function(err) {           connectionCount = connectionCount - 1;
setTopBarText: true,     switchTab: true,     reLaunch: true,     startPullDownRefresh: true,
const handleHideTxs = (state, {}) => {   const txs = Set(
var iconSearch = $('.icon-search');   $('#search').hover(function() {    $(iconSearch).toggleClass('search-highlight');   });
grunt.file.expandFiles({cwd: base}, '*').join(', ') + '.\'');   process.exit(12); }
}     debugger;     this.beatLoader.generateBeat({
var fontFamily = this.fontFamily;             debugger;             return content.replace( /\\([a-zA-Z,{}]+)\\/g, function ( match, input ) {
debugger;                     browserName = /edge\/(\d+)/i.exec(userAgent);
$('.conTitle').html(contitle)                 var setgo = window.location.hash.slice(1,7);                 $('nav  .mainbav').eq(arr[0]).children('a').next().show();
var searchRes   ,scrapePtrn = /\[\[([^\:]+)\:\:([0-9]+)\]\]/gi   ,resultHTML = markdown.toHTML( raw )
const groupList = this.userRelatedGroups.map((group) => {       return       <li>         <Button onClick={this.onClickGrantGroup(group)} bsClass="btn btn-sm btn-primary">{group.name}</Button>       </li>     });
for (var i = 0; i < 255; i += 1) {     LOG_TABLE[EXP_TABLE[i]] = i;
export async function getByOrganization(parentValue, {}, { auth }) {   if(auth.user && auth.user.id) {
case 'names':       for (var p = 0; p < value.length; p++) {         format += value[p].replace('/', '');
$('.nav-tabs').stickyTabs();     $('.tab-pane').stickyTabs(); });
api.getConfiguration().then(function (response) {             debugger;             $scope.configuration = response.name;
switch (action.type) {       case GET_CURRENT_USER_SUCCESS:         let newLoginValue = isNewLoginValue         isNewLoginValue = false
_.merge(o, matter(o.content, options));     o.content = o.content;     next(null, o);
return makeModuleMap(moduleName, relModuleMap).fullName in defined;             },             specified: function (moduleName, relModuleMap) {                 return makeModuleMap(moduleName, relModuleMap).fullName in specified;
const fs = require('fs'); const $ = jQuery = require('./../bower_components/jquery/dist/jquery.js'); require('./../bower_components/jquery-csv/src/jquery.csv.js');
{                         if (err.code='notfound')                           p.trigger.updatedsinceread();
return !!getLanguageByCode(code); };
url: "ws:         url: "/fs-moni/live/events",
this.close(); return;             osmEdit.createNode()             .then(function (nodeId) {
pattern: '(m|f){2}c',     rel: 'parent\s sibling'   },
$scope.templatesByStatus = $scope.templates[status];             if (typeof $scope.templatesByStatus === 'undefind' ||                 ($scope.templatesByStatus && $scope.templatesByStatus.length === 0)) {
familyTokens = parsed.family.toLowerCase().split(' ')     parsed.variations.forEach(function(v, i){         res.push(familyTokens.concat(v).join('-'))
import TextLoop from 'react-text-loop'; import Fade from 'react-reveal/Fade'; import Section from '../components/Section';
var rows2 = [];           for (var j = 0; j < series.length; j++) {             rows2.push([]);
module.exports = Cylon.Drivers.I2C.Mpl115A2;
setDirty: function() {         debugger;         wm.job(this.getRuntimeId() + "_hasChanged", 500, dojo.hitch(this, function() {
.catch(function (err) {         throw err;         context.done();     });
left: 0,             display: 'block',             'z-index': '1000'
import { storiesOf } from '@storybook/react-native'; import { Scene, Router, Actions } from 'react-native-router-flux'; import { Button, View, Text } from 'react-native'; import App from '.';
, Event = require('../models/event')     , Team = require('../models/team')     , access = require('../access')     , config = require('../config');
UNDO_REDO_STATE_STATUS,  UNDO_REDO_STATE_STATUS,  Commands,  MappingSide,
return n;  }, $fz.isPrivate = true, $fz), "java.io.InputStream");  $_M(c$, "readTrailer",   ($fz = function () {  return true;
source = source.replace(/\/\/11\.url\.cn\/now\/([^"'\)\`]+)(["'\`\)])/g, '
var grammar = [   Rule('A', [NT('A'), NT('A')]),
return i;   };   function deltaHue(h1, h0) {
function noop(){}; let Link = props => (
R._engine.setSize = function (width, height) {             debugger;             this.width = width || this.width;
.toString('utf8')         .should.match(/ref\: refs\/heads\/testBranch/);
import { connect } from 'react-redux' import { Text, View, Image, ScrollView } from 'react-native' import { withNavigation } from 'react-navigation'
} else {             console.log("v1.2.0");             console.log(readNodeVersionForOlder(rmmvPath));
where: {     name: tagName    }
return '&#'   })   txt = txt.replace(/\ﬂ\°/g, function () {     return '&'
return {type: "Pipe", children: [left, right]};             break;           case "Or":
parse: function (response) {         response.forEach(function (item, index) {             var start = new Date(
} }(function (Backbone) {   Backbone.Attributes = _.extend({}, Backbone.Events);   var modelMethods = ['get', 'set', 'unset', 'clear', 'has', 'changed', 'hasChanged', 'changedAttributes', 'previous', 'previousAttributes'];
setDimensionGroupById : function (id, group, widget, model) {          return model.setDimensionGroupById(id, group)          this._refreshPreview(widget, model);      },
that.setData({           viewHeight: res.windowHeight - 40 - (!!that.answerKey ? 44 : 0)         });
c.y = c.y || scaleLinear().range([c.height, 0])   c.xAxis = c.xAxis || d3.axisBottom().scale(c.x)   c.yAxis = c.yAxis || d3.axisLeft().scale(c.y)   c.drawAxis = function(){
options.yaw = options.yaw || 0;     options.clickable = options.clickable;     options.class = 'marker';
const self = this;     console.log(`Starting to encrypt event for ${this._roomId}`);
|| typeof value == 'boolean'       || typeof value == 'null'       || value == undefined
});     if (NODE_TYPE[doc.nodeType] === 'Document' && doc.childNodes.length > 1) {     }
destPoint : {},       destPoint : this.props.destMarker,       routePrirority : this.props.routePrirority,
}  return ES5internalSlots['[[DefaultValue]]'](input, preferredType); };
} else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)).
return x;   };
}       this.Configure = function (data) { };       repository = JSON.parse(localStorage.getItem("TemplateRepository")) || { Templates: {} };
showDropDown(!navHandler.classList.contains('on'))   })   document.body.addEventListener('click', e => {     showDropDown(false)
crypto.randomBytes(8, function(err, bytes_slow_buf) {       if (err) { return cb(err); }       unsigned_int = Buffer(bytes_slow_buf).readUInt32LE(0);
} else if (tagName === '@member') {           let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value, true, true, false);           name = paramName;
return 'K';     break;     case 'nt_hazy' :
console.log("finished touch");       if (true)          stifle(e);
} else {    try { source = eval('(' + TheTextBox.innerHTML + ')') } catch (e) { return erra (e); };   };   if (Object.prototype.toString.call(source) !== '[object Object]') {
throw 'Provide remote URL to log errors remotely';       return false;     } else if(remoteSettings.additionalParams && typeof remoteSettings.additionalParams !== 'object') {
toStandardMinutes() {    return (days * 24 + hours) * 60 + minutes   }   plus({days, hours, minutes}) {
date.setMinutes(date.getMinutes() + part);    }    if ( part = Number(to.hours) ) {     date.setHours(date.getHours() + part);
}     case 'PANEL_CREATE': {       const { payload } = action
: !!args.matchesFiles;   this.matchesDirectories = !!args.matchesDirectories    ? false
timeEntries.push(this._createTimeEntry(geojson[i]));       };
}         var tmp = new Uint8Array(bytes.length + leadingZeros);         for (var i = 0; i < bytes.length; i++)             tmp[i + leadingZeros] = bytes[bytes.length - 1 - i];
findAll: function (callback) {       var sql = $u.commentOf(function () {
to: data.path.clone().stringify(),                                 easing: Chartist.Svg.Easing.easeOutQuint                             }
var form = {                       type: "object",
return value;   };
data = getLocale(key);       console.log('getset value: ', data);     } else {
i++;   };
}       debugger;       self.lr.resume();
import React from 'react'; import {mount, shallow} from 'enzyme'; import Baobab from 'baobab';
obj.changeStream = true;             } catch (ex) { }
class Sock extends EventEmitter {   constructor(ws) {     this.ws = ws
parser.setAttribute("href", url);         parser.href = parser.href;         var isCrossDomain = parser.host !== location.host;
deactivate(map)       expect(map).toEmit([{current: 0}])     })
settings.family = [settings.family];                 }                 for (var i = 0; i < settings.family.length; ++i) {                     this.family.push(settings.family[i]);
} else {                         var checkTagOrTerm = Utils.checkTagOrTerm(object.typeName);                         if (!checkTagOrTerm.term) {                             tagTermList.push(object);                         }
for (var i=0, len=handlers.length; i<len; i++) {           handlerObj = handlers[i];
const parts = (phone.name || '').split(/\./);         _.set(phone, 'displayName', `${_.capitalize(_.first(parts))} ${parts.slice(1).map(p => (p || '').toUpperCase()).join(' ')}`);       });
} else if (match && match[1]) {                 var target = doc.getElementById(match[1]);             }
result = true;           iterate(function(child) {             if (node === child) {
"global": function* (ctx) {     ctx.scope.set("eci", yield ctx.KRLClosure(ctx, function* (ctx) {       return ctx.modules.get(ctx, "meta", "eci");     }));
if (!code && !t._ok && (!only || name === only)) {                     process.exit(1);                 }             });
this._resultNameCacheCount = 0;     };     WsWorkunits.prototype = Object.create(Comms.prototype);
coordinates.forEach(function(line){         str += DewShape.LineString(line);       });
return parsedDom.getElementsByTagNameNS(xml.parserErrorNS, PARSER_ERROR_TAG).length > 0;     } catch (e) {     }
var menuOpts = [];             function createMenuOpt(x,y,opt) {                 opt.el = menu.append("div")
multisigFees: 'Multisig Fees',      issuer: 'Issuer',      cosignatory: 'Cosignatory'
const router = require('express').Router() const { User, Challenge } = require('../db/models') const Op = require('sequelize').Op;
type: 'GET_SEARCH_RESULTS',     promise: fetch(`${apiURL}/articles?q=${keyword}&_limit=${limit}`)   };
console.log('Received ' + articles.length + ' unique articles for "' + company + '" from Discovery');     var data = {       company : company,
import theme from './components/themeConfig/themeConfig'; import AccountContext from './modules/account/AccountContext';
var entityNameRegex = /https:\/\/duckduckgo.com\/([a-zA-Z0-9\)\(_%]+)$/         if (entityNameRegex.test(item.FirstURL)) {
d = (d<1000) ? d.toFixed(0)+' m' : (d/1000).toFixed(2)+' km';     var t = f.get('durationT')/60;     console.log(f.get('duration'),t)
if(options.isDropdown) var html = '<ul style="display: none;" class="shareMenu">' + "\n";    else var html = '<ul class="shareMenu">' + "\n";
function parseUserProvidedColor(c) {   debugger;   let testElement = document.createElement('div');
var l = 0.5 * add;     if (l === 0) {
Content.create = function(contentJson) {         for (i in Content._contentTypes) {             if (Content._contentTypes[i].canParse(contentJson)) {           return new Content._contentTypes[i](contentJson);
define(function (require, exports, module) {     'use strict';
exports.showKitten = function showKitten(result) {   var title = result.titleHtml.replace(new RegExp('<\/?\w[^>]*>', 'g'), '');   var snippet = result.snippetHtml.replace(new RegExp('<\/?\w[^>]*>', 'g'), '');
createTest : function (config) {         debugger;         var test = new Fiesta.model.TestCase(Ext.apply(config || {}, {
import {Color} from './webgl/utils/Color.js'; export class  SCDomElement {
}     console.error(chalk.red(`> Config file does not exist at ${tildify(configPath)}`))     process.exit(1)   }
Polymer.cs.behaviors.csNavTabs = [     Polymer.cs.behaviors['this'], Polymer.cs.behaviors.tooltip, {       hostAttributes: {
} );    var Sub = AFrame.Class( Super );
System.register(["aurelia-framework", "aurelia-i18n", "../services/index", "dompurify", "jquery"], function (exports_1, context_1) {     "use strict";
label: 'Change value',           action: function(args) {             debugger;             var name = args.data.jsonObj.name;
if(rule.href){              var parentStyleSheet = sheet;        var childSheet = rule.styleSheet || rule;
var MockHolding = artifacts.require('MockHolding');  var MockLitigation = artifacts.require('MockLitigation');  var MockApproval = artifacts.require('MockApproval');
} }; var Modul_colorwheel = function () {
})(OSjs.Helpers.DefaultApplication, OSjs.Helpers.DefaultApplicationWindow, OSjs.Core.Application, OSjs.Core.Window, OSjs.Utils, OSjs.API, OSjs.VFS, OSjs.GUI);
placementKeys = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'],    placement, rotation, steps, x;
shakaExtern.Error = function() {};
window.fbAsyncInit = function() {     return false;     var parent = Atomate.auth;     FB.init({
var testAutomation = function( options ) {  var options = options || {};  var subProcesses = [];
export default zora()   .test('compose table factory', function * (t) {     const data = [];
const { ERROR_MESSAGE } = rule; debugger; const ruleTester = new RuleTester({
if (!!analysis) {         const color = rgbToHex(
self.state.loadQueue = self.state.loadQueue.concat(cellIndices);         };       }
},   messageView: {     backgroundColor: 'white',     flex: 1,     paddingRight: 15
map.add_layer(layer);                         debugger;                         console.log(map.toXML());
import sinon from 'sinon' import _ from 'underscore' import chunkify from '../index'
let {range} = editor;         let matches = text.match(/(^|[^\*])\*([^\*].*?)\*$/);         if (matches) {
logUpdate(`\n${pos} Maybe \n\n${pre} ${dim('Broken link')} or\n${pre} ${dim('Media shared by private profile')}\n`);  process.exit(1); };
export default function Login(props) {   debugger   const prevPath = props.history.pathname;   const baseRedirectUrl = `${window.location.protocol}
r.on('raw', function (rect) {     console.log('42424242');     !initialized && handleConnection(rect.width, rect.height);
if (!path.extname(file) in fileTypes) return false;
} else {                     var regex = "\<.*(?!<\/option>)\>";                 }
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
} finally {     if (_didIteratorError3) {       throw _iteratorError3;     }
result = CSSLint.verify(value);         this.sender.emit("csslint", result.messages.map(function(msg) {
var h;   while(h = this._notifyConnections.pop()){ h.remove(); }
const app = new Koa(); app.use(function * () {   ctx.body = 'Hello Pandora.js';
'Background color'        : 'لون الخلفية',  'Indent'                  : '',  'Outdent'                 : '',  'Format'                  : 'النتسيق',
function Test262Error(message) {   this.message = message || ""; } IntlPolyfill.__applyLocaleSensitivePrototypes(); function assert(mustBeTrue, message) {     if (mustBeTrue === true) {
_modifyIconHeight : function(propValue, propOldValue, propData)     {
this.upstreamListeners[type] = upstreamListener;             for (var i = 0; i < this.upstream.length; i++) {                 this.upstream[i].on(type, upstreamListener);
case "FunctionExpression":             debugger;             return new astExpression.FunctionExpression(node.loc, transform(node.id), transform(node.params), transform(node.body));
var consoleNode, msie,     VALUE             = 'value',     NOOP              = 'noop',
var parts = this.getParts_();   for (var i = 0, part; part = parts[i]; i++) {
import * as aN from './authentication'; import required from '../required_param'; import config from 'config';
return Session.get(stringId).profile.country.name + ' ' + Modules.client.searchJSON(geoJSON.country, Session.get(stringId).profile.country.name)[0].emoji;         return TAPi18n.__('digital-citizen');       }
Git.readFile('alle/europaweite-veranstaltungen-' + year + '.md', 'HEAD', function (err, contents) {       callback(null, !!err ? {} : eventsToObject(contents, year));     });
math.unary = function unary(x) {   if (arguments.length != 1) {
exports.exception = function (exception) {   console.log(e.getStack()); }
}   };   processItem(this.currentItem);
return x === null ? NaN : +x; };
var regex = /%%|%(\d+\$)?([\-+\'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuidfegEG])/g;     var a = arguments, i = 0, format = a[i++];
var results = request.doSearch();
export class TargetWithNoDropResult extends DropTarget {   constructor() {     this.didCallDrop = false;
_clearLoadingState: function(overlayMask) {              },
const currentRunning = String(event.target)       .replace(/(.*)\ x/, (match, p1) => `*${p1}* x`)     debug.log(currentRunning)
case 'createForeign':                                       return createForeign(db, action['table'], action).catch(softThrow);                                       break;
return await Promise.all(promises)       .then(() => process.exit(0))       .catch(e => {
proxy, port , files , 'files': [] , 'startPath': '/' , 'logPrefix': 'snuggsiツ' }
update: function(value) {         console.log('update', value)         var options = {
}                 ;                 var oldWorkFlow = this.currentModel.get('workflow')._id;
initializeSignalHandlers() {     new window.ievv_jsbase_core.SignalHandlerSingleton().addReceiver(       `${this.props.signalNameSpace}.FocusOnSelectableItem.${this.props.itemKey}`,
var constants = require("../../../src/constants"); var store = require("../../../src/store"); var Augur = require("../../../src");
default:                         break;                 }
if (!context.flags.seconds) {       cli.error('Please specify a valid timeout value.')       process.exit(1)     }
mainStory.error(`Invalid version for ${chalk.bold(pkgName)}: ${chalk.bold(version)}`);       process.exit(1);     }
let prev = getValue(this, name)         if (is(prev, value)) return this         setValue(this, name, value)
timer = setTimeout(function() {         if (!serialPortFound) {         }
await store.dispatch(getInsights());     };     return { isServer, user, url };
it("Asynch", function(done) {     var toRun = function(RUNTIME) {       var namespaceToUse = namespace || RUNTIME.namespace;
var charset = parser.parseCharsets(3, 2, new CFFStrings(), true);       expect(charset.charset).toEqual(['.notdef', 8, 9]);
try {       var viewValue = input.toString().trim();     } catch (e) {
}     var fonts = labelData.fonts;     var labelFiles = new Array(fonts.length);
i++;  }; });
export class Singleton extends Registration {   constructor(keyOrRegisterInChild, registerInChild=false){     if(typeof keyOrRegisterInChild === 'boolean'){
jade.page_args = function () {     var page_args = window.location.search.match(/\w+=[\w|\%|\:]+/g);     var result = {};
if(matches){          console.log(matches[1])          suffix = matches[1]
} }; CacheTL.prototype.get = function (key) {
return false;             };             return (value + "").length == this.field.length;         },
document.write('<script type="text/javascript" src="scripts/prototype.js"><\/script>'); document.write('<script type="text/javascript" src="scripts/scriptaculous.js"><\/script>');
set(contextName, contextDefinitions, extend=false) {         const enabled = this.enabled;
current = ComputedStyle.borderMap[current];                 } else {                 }
g, '').replace('#', ''));             }
progress(null, "Fetching repositories ...");         CONFIG._github.repos.getFromUser({             user: user
console.log("registered new listener");
bar = "hello"; bar = "world";
;(function () {
$analyticsProvider.api.trackGoal = function(goalID, revenue) {                     if (window._paq) {                         _paq.push(['trackGoal', goalID, revenue || 0]);
let nangle = normalize_angle(angle - rot1 + rot2);         return new Face(npos.x, npos.y, rad, nangle);     }
for (var symbol of Object.getOwnPropertySymbols (attribs)) {                  var descrip = Object.getOwnPropertyDescriptor (attribs, symbol);                  Object.defineProperty (cls, symbol, descrip);
ret.image = 'android'       if (rep = ret.ua.match(/(Android|Adr)[ |\/]([.0-9]+)/i)) {         ret.version = rep[2]
var angle = Math.acos(vector.dotProduct(vectorToReferencePoint) / (vector.r() * vectorToReferencePoint.r()));       if (isNaN(angle)) { debugger; }       return angle;
return !((typeof v === 'undefined')    || (typeof v === 'null')    || (v === null)
this.moveStep = function(id, prev_id) {       console.log("I am looking");       var dataToBeSend = {'prev_id': prev_id},
pivot: 0.5,                         texture: {type: lng.textures.StaticTexture, options: {}}                     }
if (isList(as) === false) { return error.listError(as, catMaybes); }   if (isMaybe(head(as)) === false) { return error.typeError(m, catMaybes); }   const p = x => isJust(x);
var tests = []; debugger for (var file in window.__karma__.files) {
var hasPath = vendorPaths[name],         isIgnored = (typeof vendorPaths[name] === 'boolean' && vendorPaths[name])         hasExternal = vendorComplete[name];     return !isIgnored && !hasPath && !hasExternal;
if (res.status > 300) {             console.error('Error getting Auth0 users ' + res.status, err);             reject(err);           } else {
this.saveAndEncryptUserToLocalStorage(function(){         if(typeof callback == "function"){           callback();         }
return true;                 break;             case 'date':                 return '2015-0'+(idx+1)+'-'+(idx+14);
strokeColor() {         const color = colorAsArray(this.root.getElementById('strokecolor-option').value).slice();;         color[3] = parseInt(this.root.getElementById('strokeopacity-option').value) / 100;
return {x: d.x, y: newY, color: pow.toString()};   } };
return 2 * p;        ;       };
},   propTypes: {     filter: "Enable a filter for the menu. When this is enabled each menu item requires a name prop.",
__executed = /\bot/.test("pilot\nsoviet robot\topenoffice");
if(true || !localStorage['tutorial-shown']) {  GAME.tutorial = new Tutorial(spawnPos)
scope.deleting = true;      debugger;      scope.deleteClicked = true;
}             debugger;             return contextData;
if (dojo.byId("debugbar_position").innerHTML != "") {             var frame = 0;         }
var ostatus=require('ostatus'); var rsa=require('rsa');
var WrapText = function (text, getTextWidth, wrapMode, wrapWidth, offset) {     debugger     var retLines = WRAP_RESULT;
require = require("esm")(module) let jake = require('../lib/jake'); let assert = require('assert');
HX.FbxSkin.prototype.connectObject = function(obj) {
console.log(e)         console.log(clicked);     }
this.offset = styleJson["line-offset"];             this.opacity = styleJson["line-opacity"] | 1;;             this.width = styleJson["line-width"];
var addr;                                var chars;
if (!authToken) {     console.log('ERROR: Cannot find NOW_TOKEN environment variable')     process.exit(-1)   }
import { ipcRenderer } from 'electron'; import path from 'path';
if (outdated) {       module.hot.apply(function(err, outdatedModules) {         console.error('Should not happen');         process.exit(1);
const basePath = file.split(/[\/\\]/);     basePath[basePath.length - 1] = "";
createFlagSeries(highchart);     console.log(chartData.flags);     for (var i = 0; i < chartData.flags.length; i++) {
const a = prop()       expect(a.takeWhile()).errorsToFlow(a)     })
console.log(Config)             var token = jwt.sign({
if (result !== true) {         if (result === undefined) {         }         else {           arangoHelper.arangoError("Collection error: " + result);
} ; customElements.define('project-loader', ProjectLoader);
areaid = this.id[cell2.id];    if(!!this.owner.flags.irowake){ cell.color = cell2.color;}   }
return format;         };
if (line.indexOf('author') !== -1) {         if (info.author = parseAuthor(line.replace('author ', ''))) {             return true;
get R() {     return this._R;   };
}      shareholders.push(newShareholder);  };     }
traverse = decor !== false;         }         if (traverse === false) {         }       }
socket.on('listening', () => {             const whoIsCommand = '{"cmd": "whois"}';             socket.send(whoIsCommand, 0, whoIsCommand.length, 4321, ip);         });
onError(req, res, 'Operation is temporarily unavailable');     return;          database.BeginTransaction(err => {         if (err) return onError(req, res, err.message || 'Database transaction error');
ListItemText,    Avatar,    CircularProgress,
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-04\/flaming_humbaba-1334193679.swf",  admin_props : false,
const yAxis = new THREE.Vector3( 1, 1, 1 ).normalize();
innerHeight].join(); };
stopDrag(e) {         debugger
][parsed];   } else if (!!parsed) {     return String(parsed);
if (!matches) {           for (var idx = 0; idx < index.aliases.length; idx++) {             var alias = index.aliases[idx].toLowerCase();             matches = true;
if (isExpressionType(parentNode)) {             debugger;             return '"' + node.value + '"';
if (callback) {             var callbackID = `${this._uniqueMethodIdentifier()}_${methodName}`;             this._callbacks.add(callbackID, callback);
query = query.replace(/([(){}\[\].\^$|?+*\\])/g, "\\$1");         return new RegExp(query, "gi");
for (var jj = 0; jj < data.join.length; jj++) {       var join = data.join[jj];
return this.use(route, handler, arguments[2], arguments[3], method);       break;       case 5:
state.isTable = true          debugger     state.render.push(
oldSnapshot.push(this._currentSnapshot[i]);       };
case rfb.encodings.copyRect:
return () => {                 document.removeEventListener(SLIDER_EVENT.MOVE, onMouseMove);                 document.removeEventListener(SLIDER_EVENT.UP, onMouseUp);             }
storage.getURL(id).then(function(url) {       if(!url) {                  } else {
const rootNode = findDOMNode(wrapper).children[0];     const styleNode = document.head.querySelector('.reactive-style');     expect(rootNode.id).toEqual('heart');
function * getDyno (client, appID, dynoID) {   return client.request({
} else {                                 if (self.compileOnBuild && fieldData.CompiledField) {
};             case 4:                 this.get = function (idx, out) {
return createIterable(() => {     while (true) {       const { done, value } = iterator.next();
Button,   OutlineButton,   TextButton,   Box,
broadcast(message, fromSelf){         var mess, msgbuf;         fromSelf = fromSelf !== false ? true : fromSelf;
arrayFromObject,     encodeBase58,     isArray,
} else {       capation = 'Complete';     }
let url = baseUrl + urlPath     console.log(url)     return new Promise((resolve, reject) => {
throw new SyntaxError('Trailing characters: "' + str + '"');       return null;     }
if (false && changelogUrl) {                     console.log(`Opening ${strong(changelogUrl)}...`);
if (is_phylotree_active===false) {   console.log('[BUG] phylocanvas not initialised and we\'re trying to start up gubbins. Problems to follow...')
polyfill = versionMatch && parseInt(versionMatch[2]) < 21;     } else if (navigator.userAgent.indexOf('Android') >= 0) {
xmlHttp.setRequestHeader('X-Algolia-Application-Id', this.applicationID);             for (var i = 0; i < extraHeaders.length; ++i) {                 xmlHttp.setRequestHeader(extraHeaders[i].key, extraHeaders[i].value);             }
const {       isMascara,       isOnboarding,       noActiveNotices,
console.log("Wrote: " + fileName);   };
if(executeUpdates) {                 alert("executing!");                 TrainingTreeUtil.ExecuteUpdate.query({id: $scope.rootNode.id}).$promise.then(function(treeStatus) {                     $scope.getAndDisplayTree();
return field <= (value1.getTime()) || field >= (value2.getTime());           break;         case this.OPERATORS.dateOperatorIsBlank:
import {Parser} from 'expr-eval'; import autobind from 'autobind-decorator'; import {App} from 'website-examples/plot/app';
if (!!req.query.private) {     scopes.push('repo');
Posts.insert(data);     console.log(data);   }
vjs.CurrentTimeDisplay.prototype.createEl = function(){   var el = vjs.Component.prototype.createEl.call(this, 'div', {     className: 'vjs-current-time vjs-time-controls vjs-control'
return cb(null); };
import * as React from 'react';;
if (options.add) {                         add_to_sprint(options, finalCb);                     } else if (options.jql){                                            }else {
.blur(function (e) {                     console.log("blur");                     if (blurCausedByInputFieldSwitching) {
return doWriteOp(project, 'setBranchHash', branch, oldhash, newhash, callback);                 if (writeOps.size()) {                     fsyncs.push({
const PIPELINE_HEADER = `${V3_HEADER}.pipelines` function * pipelineCoupling (client, app) {   return client.get(`/apps/${app}/pipeline-couplings`)
date.setMonth(date.getMonth() + part);    }    if ( part = Number(to.year) ) {     date.setFullYear(date.getFullYear() + part);
console.log('Connection state changed to', conn.connectionState);     if (conn.connectionState === 'connected') {            }   }
import React, { Component } from 'react'; import { Tag } from '@blueprintjs/core'; import Country from 'src/components/common/Country'; import SearchFilterCollectionTag from './SearchFilterCollectionTag';
undefined, undefined, function (data, p) {           console.log(p);           if (p === 404) {
if (this.stream) {       if (process.platform = 'win32') {         clearTimeout(this.stream);       } else {         this.stream.close();
if (!this.props.note) return;   if (!!this.props.note.encryption_applied) return;
subClient.on("message", (channel, message_str)=>{      console.log(`Received new message: ${message_str}`);
const urlParsed = require('url').parse(request.url);   console.log(urlParsed);   if (process.platform === 'win32') {
headers: {     accept: "application/json",     authorization: "Basic " + btoa("nick:Nicholson")    }
var navCharacters = helper.e(".nav-characters");     for (i in array) {       var characterAnchor =_render_navCharacters(array[i].input.name, i);
layers[baseLayer].addTo(map);     if (baseLayer = 'Bing Satellite') contextLayer.addTo(map).bringToFront();     L.control.layers(layers).addTo(map);
if ( msgHide = field && field.msgHide || opt.msgHide ) {                 msgHide.call(me, $msgbox, msgOpt.type);
Console.prototype.editGetText = function() {         if (!this instanceof Console) return;
return newNode;   break;   case document.TEXT_NODE:
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-04\/bean_bean-1334602769.swf",  admin_props : false,
Translator.Locale = Locale; Translator.Namespace = Namespace; Translator.FilterList = FilterList;
pem.can = _.union(pem.can, pemList);     self.setPem (target.qNum, pem);     reply (sprintf('%s 的权限添加成功!', target.userNick));
var last = list.length - 1;   for(var i = 0; i < last; i++){    var child = this._getChildNode(node, list[i]);
for (var key in global) (function() {       return (context)[key] = (global)[key];;     })();
label: this.startTimeText,                     renderer: Mobile.SalesLogix.Format.date.bindDelegate(this, this.startDateFormatText, false),                     exclude: this.isActivityTimeless
}, "DAS": function (cpu) {             debugger;             util.panic("Execute (DAS) :: unsupported");
stores = require('stores'),       Router = require('react-router'),       ProviderResources = require('./ProviderResources.react'),       ProviderCollection = require('collections/ProviderCollection');
request.post(url, options, function (err, res, body) {     var err = utils.error(err, res, body)     done(err, body)   })
}     debugger;     this.queue.receive(this.obj, patches);
options = options || {};   options.defaultValue = (!!options.defaultValue ? options.defaultValue : c.SUPPRESS);   options.dest = (options.dest || c.SUPPRESS);
}       return false;a     });
import Layout from "../components/layout" import SEO from "../components/seo" import Footer from "../components/footer" const BlogIndex = ({
ctrl.field = {};                          console.log(options.field.toString());                          options.field.on("value", function(snap) {
console.log(message.text());       process.exit(2);     }
this.setInputsInline(true);     this.setTooltip(Blockly.Msg.MATH_NUMBER_TOOLTIP);   }
flareMapSrc: '/img/sunflare.png',  init(size) {   this.root = new Object3D();
return result;       } catch (err) {console.log(err)};     };     share.cmult = function (cst) {
mongoose.connection.db.collection(collectionName, function(err, collection){       debugger;       if (err) { return reject(err); }
title: "www.luehangs.site",         description: "https:         description: "Test 11",
delete this[qx.OO.values[a[i]]];     };
if (VERBOSE)       console.log("[iAdvize] post /conversations, ", req.body.idOperator);     if (!isValidSignature(req.header("X-iAdvize-Signature"), req.body)) {
if (text) {     debugger     return text.substr(-1, 1).toLowerCase() === 's' ? text + '\'' : text + '\'s';
if (rid = RID.parse(ref))       return rid;
const reCMD = /^\/([0-9а-я\w\d\_\-]+)/;
# A regular expression for date.   (?<year>\d{4})-    # year part of a date   (?<month>\d{2})-   # month part of a date   (?<day>\d{2})      # day part of a date
if (addr === 0xFF0F) return this._if = value;
import bind from "bind-decorator"; import { ErrorHandler, topology, grpc } from "orbs-common-library"; import StorageService from "./service";
catch(err) {             console.log(err);             result = {httpStatus: httpStatus.BAD_REQUEST, status: "failed", errorDetails: err};
return _Math.genPerpendicularVectorFrisvad( v );      var p = v.clone();
Link,     IndexLink, } from 'react-router';
.argv; if(argv.v) tele.debug(console.log); tele.info(function(){console.log.apply(console,arguments)}); if(argv.port == 42420)
import React, { Component } from 'react' import { TextInput, StyleSheet, View, Platform, Dimensions } from 'react-native' import colors from '../config/colors'
"frame": false,             "resizable": false         },         customConfig = customConfig || {};         utils.extend(config, customConfig);
throw new Error('This function should never be called!');   process.exit(1); }
case LIST_COMMENTS_RESPONSE:             const comments = action.comments;             const newList = concatList(comments,state.comments.list);
}     },     _onWindowBlur : function( event ) {       this._hideCalendar();
if (message['nlpResponse']['result']['actionIncomplete'] == false) {          var alreadyAsked = false;     var alreadyAskedCount = 0;
for (name in this.xhr.callbacks) {   if (this.xhr.callbacks.hasOwnProperty(name)) {    this[name] = function(name) {
lookup['ta'][d.panchayat_code] = true;                     }                     else if ('task_assign' === null) {                         lookup['ta'][d.panchayat_code] = false;
type: "bi.style_table",              color: BICst.DEFAULT_CHART_SETTING.theme_color,              style: BI.StyleTable.STYLE1,              el: {
switch (assertNode.localName) {   case 'all-of':    const asserts = evaluateXPathToNodes('*', assertNode).map(createAsserter);    return (xpath, contextNode) =>
return matrix[b.length][a.length]; };
fileTypes[dest][config][fileType].push(file);             };           };         };         var filesToUpload = [];
extension: 'docx'       }); break;     case 'application/vnd.google-apps.spreadsheet':
cleanupDistStep         ], function(err, results) {             if(err) {                 grunt.fatal(err);
} else {                     debugger;                 }
const isOpen = this.get("isOpen");         const pageX = event.touches[0].pageX;         const rootNode = this.get("rootNode");
function I1DChart() {     };     I1DChart.prototype._palette = Palette.rainbow("default");
}             var event = _ref7;             emitter.addListener( event, reject_handler );         }
case Actions.ResetState:   return initialAppState(reducer(undefined, { type: Actions.ReduxInit }), state);  case Actions.ToggleLoading:  default:
box(reqdiff, pubkey, keys).then(boxed => {               console.log(boxed)               connection.send(JSON.stringify({
$('img' , oThumbs).each( function() {     sName = parseInt(this.id.replace('image-',''), 10);     $('option[value='+ sName +']', oSelect).attr('selected','selected');    });
var DefaultConfig = (function () {     'use strict';
return value;         break;     }
/wireless/ig,         /(shop|store)/ig,         /[.,\/#!$%\^&\*;:{}=\-_`~()]/g,         /\s/g     ];
var target = e.relatedNode;           var changedNode = e.target;
};         showConfirmDialog(function() {
return _ENCODE_HTML_RULES[c] || c; };
var window = require(__dirname + "/../../lib/browser").windowAugmentation(dom); var document = window.document = window.document; var location = window.location = window.location; var navigator = window.navigator = { userAgent: "node-js" };
var tiles = tileLayer.getTiles();             expect(tiles.anchor.toArray()).to.be.eql([1, -255]);             expect(tiles.anchor.zoom).to.be.eql(14);             done();
var opts = {'type':value,'animation':'explode','useLite':true};      if(value = 'lines'){    opts.animation = 'slide';
.then((conversations) => { console.log("RES", conversations, "\n") throw Error("Stopping,")       let conversationIds = conversations.map((conversation) => {         return conversation.convid;
class ToshihikoModel extends EventEmitter {     constructor(collectionName, toshihiko, schema, options) {         this.ai = null;
if (typeof console === "undefined") { console = { log: print }; } function fib(n) {   if (n === 0 || n === 1)
getTagsIndex: function(callback) {         var callback = callback || jsGen.lib.tools.callbackFn;         that.find({}, {
this.name = path.basename(this.name).replace(/^\.+/, '');     while (_existsSync(options.uploadDir + '/' + this.name)) {     }
const compression = require('compression'); const flash = require('express-flash'); const bodyParser = require('body-parser');
console.log('releasing slug...');     process.exit();     return app.releases().create({
break;       break;     case TRANSACTIONS_DELETE_REQUEST:
const h = ht.empty;         for (const i = 0, len = keys.length; i < len; ++i)             h = ht.set(i, keys[i], h);
for ( i=0, l=annotationStackFrom.length; i<l; i++ ) {    break;         if ( annotationStackFrom[i] != annotationStackTo[i] ) {     break;
return molecules;         return {             molecules: molecules,
export const userSetting = (menuItem, browserWindow) => {   const settingPath = path.join(__static, 'preference.md')   createWindow(settingPath) }
export default ({mainStyle, address, balance, burnWallet, goBack, dollarDisplay}) => {   return (
return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];       break;     case DIRECTIONS[1]:
this._nodes.set('header', value);   }   get content() {     this._nodes.get('content');   }
trigger: function(event) {         debugger;         if (this.__listeners__[event]) {
parsers.push(wv.data.parse);         };
fkeys = Object.keys(machbox.functions);  console.log("========== Functions to register: ", fkeys);  for (i in fkeys) {
placement: 'bottom',                 value: '',                 placeholder: 'Enter email...',
var adapted = adapter(fakeQunit);  debugger;
var loaded = q.all(moduleLoads.map(function(ml) { return ml.promise; }));           console.log("Loading: ", moduleLoads);           allImports.then(function(astAndNames) {
}       errors[fieldName] = err;     }
return THREE.AnimationUtils.lerp_string_immediate;      }     }   };  }
return queue.await((err) => {       if (err) { return done(err); }
var DEFAULT_RPC = utilities.urlstring({     protocol: (NODE_JS) ? "http" : window.location.protocol.slice(0, -1),     host: "127.0.0.1",
return     };
var self = this;         var ship, drot, drot, drot;         ship = self.model.ship;
let id = uid()  subscribers.push({ id: id, fn: fn})  return id
token : ["text", "string", "text", "constant", "text"],             regex : "(\\[)(" + escaped("]") + ")(\\]\s*\\[)("+ escaped("]") + ")(\\])"         }, {
knox.createClient(this.options).putFile(file.path, path + filename, {   'Content-Type': filetype,
const openProModal = () => {     console.log('opening modal');     dispatch(openModal('UPGRADE_MODAL'));   };
behaviors: [],      onVisit: function(merchant, roomObj, target, incomingRoomObj, command) {       if (target.race !== 'ogre') {
})       this.geometry.faces.push(new THREE.Face3(...indices))
return s.replace(/\/+$/, '').replace(/^\/+/, '/'); };
p = path.normalize(p);         var arr = p.split(/[\\\/]+/);
import { Footer } from "./Footer.jsx"; import { ExtraStyle } from "./ExtraStyle.jsx"; import { Loading } from "./Loading.jsx";
import LayerManager from 'components/widgets/editor/helpers/LayerManager'; import { findTagInSelectorTree } from 'utils/explore/TreeUtil';
actual(function () {           assert.that(result, is.equalTo(65));           done();
].concat(node.body.body)))         console.log('whileloop', node)     },
});     this.editor.applyingChangeState = false;   }
eM.eF = eF;         ; ;         var eC = (function () {
}         return this._children.map((child, index) => !!child ? this.prefix + index.toString(16) : undefined)             .filter(child => !!child);
this.loadQueue = [];     this.onloaded($.proxy(function() {       this.callback(this.getData());
let callback = this.callbacks[id];         if (callback) {
componentWillReceiveProps(nextProps) {         debugger;         this.updateOnOrDirty(nextProps.projectStudios, nextProps.myStudios);     }
var ModulesListingView = require('./ModulesListingView'); var ModulesListingView = require('./ModulesListingView'); var _ = require('underscore');
var IOUtil = require('io/IOUtil');   parsed = IOUtil.parseDelimited(data, opts);   return new LabelMapping({ name: opts.name || filename, mapping: parsed.data, defaultIndex: opts.defaultIndex, maxIndex: opts.maxIndex });
.then((volumes) => {           this.volumes = _.get(volumes, 'volumes');         }),
point,         normal,         basis,
nextData = data;       data = data;       return;
{     Editor.history.push(self.obj, Action.CHANGED);     self.obj.body.fixedRotation = self.fixedRotation.getValue();
export default function one(s, context) {     return new Init(s, context)[0]; };
const textOrientation = item.text.orientation;     debugger;     const stack = itemStack[textOrientation];
var urls = _.difference(def.url.paths, aliases[name]);     urls = _.map(urls, function (url, i) {       var optionalVars = {};
try {       module = config[helperName].require         ? path.resolve(global.codecept_dir, config[helperName].require)
return matches; }; functions.findRepeaterElement = wrapWithHelpers(findRepeaterElement, repeaterMatch);
$rootScope.$on('$routeChangeError', function handleMiddlewareRedirects(event, current, previous, rejection) {   var pattern = /redirectTo\:([^\(]*)(\((\{.*\})\))?/;   var match;
if (this[kState].closed)       return;
var error = new Error('If you set the mode to "transit" you must also specify either a departure_time or an arrival_time');     if (typeof callback === 'funciton') {       return callback(error);
}; debugger;             return json;
export const clickCounter = (state = 0, action) => {   debugger   if (action.type !== INIT_REDUX_OPERATIONS) return state;
if (!this.hasID(nodeID) || this.hasOwnID(nodeID)) {                                  if (!node.isLive()) debugger                                  this.nodesByID[ nodeID ] = node
var ModelGenerator = module.exports = function ModelGenerator(args, options, config) {     yeoman.generators.NamedBase.apply(this, arguments);
console.log(error);     process.exit(0);   }
var message = message   .replace(/&/g, "&amp;")   .replace(/"/g, '&quot;')   .replace(/'/g, "&apos;")
it('should have a background gradient', () => {       expect(input.props.style.backgroundImage).toMatch(/^linear\-gradient/)     })
onUnregister: Class.empty,   onStart: Class.empty,   onUpdate: Class.empty,
switch (type) {         case 'image':           return 'image';           break;
return handleUndefinedAndNull(file.license)     } else if (typeof file.license === 'objcet') {       return handleUndefinedAndNull(file.license.type)
this.X.gestureManager = this.GestureManager.create();       debugger;       this.Y.registerModel(this.ActionButtonCView.xbind({
{                     project.deleted = true;                 }
);         break;       default:
if (!zoneData) return null;   const co2ColorScale = getCo2Scale(colorBlindModeEnabled);   const co2Intensity = getProductionCo2Intensity(mode, zoneData);
function handleFocusChange() {     var _active = activeElements();
case actions.CREATE:       const binary = step.createBinary();       return state.concat([ {binary} ]);
Git.prototype.submoduleUpdate = function (args, then) {       if (typeof args !== 'array') {         this._getLog('warn', 'Git#submoduleUpdate: args should be supplied as an array of individual arguments');
var URL_REGEXP = /^(https?:\/\/)([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/; adeModule.directive('adeUrl', ['ADE','$compile','$rootScope', '$filter', function(ADE, $compile,$rootScope,$filter) {
break;       default:
README.*`,   `**/CHANGELOG.*`,   `**/react\-docsreact\-stylesreact\-integration
type: og.video.type,             rel: [CONFIG.R.player, CONFIG.R.og],             height: og.video.height,
var tile1 = new maptalks.TileLayer('tile1', {             urlTemplate : TILE_IMAGE         });
success: loginState => {               var loginState = loginState.data;
if (utils.cellMaps.location[graffitiId] !== undefined) {         debugger;         return utils.cellMaps.location[graffitiId];
} else {   Promise.each(Object.values(languages), language => language.build()).catch(() => process.exit(1)); }
'save': ['ctrl+s'],     'save': ['ctrl+shift+s'],     'play/pause': ['space'],
return injector.resolveDependencies();   };   function markAsApplyed( template ){
};     case `${ACTION_TYPES.CHECK_SERVICE_EXIST}_FULFILLED`:       const serviceExists = !!action.payload;       return {
console.error('Database error:', error.message);       process.exit(1);     } else {
case 5:       ;(r = v), (g = p), (b = q)       break   }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-09\/artifact_glove_metal_finger_piece1-1348197973.swf",  admin_props : false,
if (!chain && create) {   chain = newChain(chainName);  }
}); };; module.exports = ScriptsDoNotFlicker;
this.setSourceNodeId(vId);   }; });
throw new Error("ellipse not yet supported");     }     clearRect() {         throw new Error("clearRect not yet supported");     }     clip() {
_allCompleted (tasks) {     for (let i = tasks.length - 1; i <= 0; i--) {       if (!tasks[i].available) {
});     debugger;     this.redirect('/resume', {sheetObject: finalObj, template: this.state.template});
var path = this.processDataPath(dataPath);     if (path === undefined) {     }
var hour = hhmmss[0] || 0;             var minute = hhmmss[1] || 0;             var second = hhmmss[2] || 0;             var millisecond = hhmmss[3] || 0;         }
CONSTANTS.Dir_Top             ];;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2010-03\/1268344207-8296.swf",  admin_props : false,
var targetClass,unclassified; function $HLMethodClassifier(){return $globals.HLMethodClassifier||(typeof HLMethodClassifier=="undefined"?nil:HLMethodClassifier)}
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2011-12\/proto_shrine_alph-1323999218.swf",  admin_props : true,
MonitorChrome.disconnect(errback); };
event.sub('location.refreshed', onLocationRefreshed);    $(window).on('resize load', adjustSize);   };
arrayIdent = scope.reserveParam();           };           init = [];
Ext.example.msg('Button Click', 'You clicked the {0} button', btn);     };
throw new Error("Should not execute this test");                 done();             });
this.api.registerHook = (name, handler) => {     assert(typeof name === 'stirng', `钩子名称必须为字符串类型`);     assert(typeof handler === 'function', `钩子处理函数必须为函数类型`);
.replace(/'/g, "\\'")             .replace(/\{([^\}]+)\}/g, "' + (_.$1 || '') + '") + "'")       )(data);
it('works', function () {       var cdb = new loki('cloningEnabled');       var citems = db.addCollection('items', {         clone: true
return false;                 };             };             if (Date.now() > (cacheFileMtime + cacheTime * 1000)) {
easeInBounce: function (x, t, b, c, d) {   return c - jQuery.easing.easeOutBounce (x, d-t, 0, c, d) + b;  },  easeOutBounce: function (x, t, b, c, d) {
download(options);     case 'r':     case 'run':
});   if( /[\s\<\>!@#\$%^&\*,\.]+/g.test( config.db )){     throw new Error( 'Database name contains illegal characters' );
var column_data = _cache[block_id];                     for (var j = 0; j < limit; j++) {                         var value = values[j];
const path       = require('path'); const plumber    = require('gulp-plumber'); const source     = require('vinyl-source-stream');
$tab_t.width(1 / $tab_t.length * 100 + '%');    };
jQuery.multimediaSupport = {};  var $  = jQuery,    m  = $.multimediaSupport,   vID = new Date().getTime(),
$scope.elasticsearch_dblist = function(query) {       var words = query.split(" ");       var query = $scope.ejs.BoolQuery();       var terms = _.map(words, function(word) {
getBinFromUrl(medias[nb].url, bind.filename, function (err) {    $$.totalDuration += medias[nb].length;
name: 'driver',                     fieldLabel: message.msg('workflow.common.mapreduce.driver'),                     value: 'org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver',
throw newUnsupportedTypeError('equal', x, y); };
isGreaterOrEqualThan,   isLessOrEqualThan,   isNonNegative,
debugger;     state.lastViewClassOrInstance = state.viewClassOrInstance;
while ( m = rEscapes.exec(sLine) ) {
var stop = mobx.spy(c => events.push(c));    debugger;  doStuff();
element.getHierarchy().push(elements[i]);             if (layers[i].parent === undefined) {             } else {                 this.buildItemHierarchy(data,element, layers, layers[i].parent,elements);
return newState;  case 'SET_VEHICLES':   const veh = Object.assign({}, newState.vehicles);   veh[action.route] = action.vehicles;
if(!updated) {                         var zeros = this._zeroGenerator(newLen);                         oldData[i].data = oldData[i].data.concat(zeros);
let is_host_selector =           token.selector.startsWith(':host');         let psudo_rules =           token.styles.map(s => compose_rule(s, coords));
let options = {       'source': getArgumentString(this.props.currentCommand, constants.specialCommands[constants.WALLET_033X]),
process.exit(1);             return;         }
for (var i = 0; i < this.app3d.meshes["field"].length; i++) {                 this.app3d.meshes["field"][i].name = name;             };         } else {
drawGpx.enabled = function(_) {         if (!arguments.length) return iD.svg.Gpx.enabled;         iD.svg.Gpx.enabled = _;         dispatch.change();
filterChain.push(this.buildMethodFilter(proxy));         }         if (this.hasPathFilter(proxy)) {         }         return filterChain;
marginBottom: '4px',               marginBottom: '4px',               fontSize: 16,
if(typeof data === "Object") {          data = querystring.stringify(data);
while (pts.length >= 4) {           var x1 = bx            var y1 = by            bx = parseFloat(pts.shift())
function filterNotILike(value, append) {         filterILike(value, append)         if (append) {         } else {
var bestRect = bestLogo.foregroundRect;   for (var i = 1, candidate; candidate = bestCandidates[i]; ++i) {     var rect = candidate.foregroundRect;     if (bestRect.top > rect.top ||
type: 'GET',                 url: url + '?tags=&search=' + ex_kit.in_cp1251(text) + '&type_search=groups&incldead=0&sorting=0&type_sort=desc',                 cache: false,
case 'performance':       return performance(log, contentType);       break;     default:
}; }; util.inherits(H2183CompassInput, SerialInput);
if (process.env.ENV === 'production') { } else {     Error['stackTraceLimit'] = Infinity;
}             else if (this[levelProp] && (!this[levelProp] instanceof Array) && this[levelProp].implementsOrExtends('BaseEntity'))                 entity[levelProp] = this[levelProp];
}   }   get isGizmoVisible() {     this._gizmos[0].isVisible;   }
Image.static.toHtml = function(image, converter) {   var $el = $('<img>')
console.log(`ExponentConstants.deviceYearClass: is unimplemented on web.`);         return null;
var cancel = new Element('input', {'type': 'button', 'class':'btn-primary', 'value': 'Cancel','class':'btn-primary'}).setStyle('margin-right', "5px");     cancel.setStyle('margin-left', "5px");
for (var key in presences) {     var message = presences[key];     var messageType = this._getMessageType(message.to);     this._handleResourceMessage(socket, message, messageType);
}     MyInline = __decorate([
'inspector': ['three-inspector', {value: this.bind('selected')}],           'object': ['io-object', {value: this.bind('selected'), expanded: true}],           'app-ctrl': ['demo-app-ctrl', {value: this.bind('selected')}]
switch (association.nature) {                 case 'manyToMany':                   const arrayOfIds = obj[association.alias].map(related => {                     return related[ref.primaryKey] || related;
case 'ul':             return document.createElement('ul');         case 'elipse':             return document.createElementNS(svgNamespace, 'elipse');         default:
equal(table.getTitleBody().style.width, table.getBody().offsetWidth + 'px', 'The title style "width" is the initial value');   debugger   table.addRow( {
var _ = self.Prism = {  util: {
import { compose } from 'ramda'; import Card from '@material-ui/core/Card'; import CardHeader from '@material-ui/core/CardHeader'; import Avatar from '@material-ui/core/Avatar';
app.use((req, res, next) => {         res.status(404).render("error", {
it("should be compiled and applied to file multiple times", function*() {         try
var GLBuilders = require('./gl/gl_builders.js'); var CanvasRenderer = require('./canvas/canvas_renderer.js'); var Style = require('./style.js');
applyTheme: YES,
const entity = this.refs.form.getData();     console.log("entity", entity.validFrom, entity);     if (entity._added) {
return;             };
} else {         var s = this.val.toString()
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2011-05\/npc_swoonerfly-1305238807.swf",  admin_props : true,
const restoredMapping = restoreMapping(this, cmd.storedMapping);      return super.addMappingItems(mapping, restoredMapping);
import JassEnum from './enum'; export default class JassEventId extends JassEnum { };
metrics.trackIncrement);  }; Timeline.DetailedEventPainter.prototype.softPaint = function() { }; Timeline.DetailedEventPainter.prototype._prepareForPainting = function() {
case 128:    var p = pref.replace(/"/g, '\\"');    var v = Services.prefs.getBoolPref(pref).toString().replace(/"/g, '\\"');    result.push(`user_pref("${p}", ${v});`);    break;
app.utils.setSettings();    } else if (targetName === 'author' || targetName === 'description') {    } else if (targetName === 'useTabs') {    } else if ($.inArray(targetName, editorOptions) !== -1) {
ret = anchor.getAttribute('href', 4);        } catch(er){}       }
if (typeof max === 'object') {     options = length;   }
};       if (name == "qx.bom.element.Style" && (requireOpts.load || (opts && opts.load)))         debugger;       if (opts)
return 'N';     break;     case 'nt_rain' :
it('should see paused file stream (no buffer)', function(done) {     var h = husk(__filename)       .read({buffer: false})
export function getSong(guild_id, callback) {   return client.lindexAsync(`guild_${guild_id}`, 0)
}, props);   el = vjs.Component.prototype.createEl.call(this, type, props);
azk.fail("agent already started");       process.exit();     } else {
SceneGraph.prototype.Traverse() {
inputEx.registerType("number", inputEx.NumberField, []); })();
constructor() {     this.agentService = ContainerJS.Inject;
percentSpan.textContent = percentText;     UI.ARIAUtils.markAsHidden(valueSpan);     UI.ARIAUtils.markAsHidden(percentSpan);     const valueAccessibleText = this.tree._formatter.formatValueAccessibleText(value, this);
if (stream.match(/[^_\*\[]+/)) {           return getTokens();
if (exports._best) return exports._best;   for (var i=0, k; k = exports.preferred[i]; i++){     var transport = exports[k];
require("./diffs/revision-diff.jsx"); var BlurInput = require("./components/blur-input.jsx"); var PropCheckBox = require("./components/prop-check-box.jsx");
var orderedModels = order || toAdd;           for (var i = 0, length = orderedModels.length; i < length; i++) {             this.models.push(orderedModels[i]);
cdDojoService.find({dojoLeadId: dojoLead.id}, function (response) {               if (!_.isEmpty(response)) {
return engine; };
body,           icon: !!icon ? icon: APP_ICON,           title,
session.source = 'foo this should not change';           return app.__internals__.cache.set(baseMessage.sender.id, session);           return app.__internals__.cache.set(messenger.getCacheKey(baseMessage.sender.id), session);         })
var parsedHostHeader = parseHostHeader(req.headers.host, 443);             console.log('secure handler ', req.headers);             req.originalUrl = req.url;
import App from './Components/App'; import registerServiceWorker from './registerServiceWorker';
invert_point: function(pixel) {         var x_scale = this.scales.x;         var point = 0;         var abs_diff = this.x_pixels.map(function(elem) { return Math.abs(elem - pixel); });
if (typeof("AjaxUpload") != "undefined") {       var info = {
if (!!root.WeakMap) {
if (result.implicitResults && !executeOpts.resultSet) {         function processImplicitResult(ix) {           const resultSet = result.implicitResults[ix];
facebook: "kleinsch",       name: "TEST",       phone: "1231231234",
var date = new Date();                             mPebble.set_time(date.getTime() - date.getTimezoneOffset() * 60000);
return function(elem) {                 debugger                 if (comparator(elem, value, 0) !== 0) return elem;
SpaceTime = require('./methods/query')(SpaceTime); SpaceTime = require('./methods/add')(SpaceTime); SpaceTime = require('./methods/same')(SpaceTime); SpaceTime = require('./methods/compare')(SpaceTime);
var result = response;                 for (i = 0; i < result.length; i++) {                     if (result[i].serialNo.match(self.serialNo)) {
}           break;         case 'm':
{      var answer = confirm(confirm_msg);     }
if (event.type === 'DELETE') {     debugger;     return {
context.container.$setManager(context.lifecycleManager);                         debugger;                         var result = context.container.$setDirty();
}     }).then((xhr) => {       const out = machineTypes;        set(this, 'machineTypes', out);
tt._while.updateContext = function() {   throw new Error("Not Implemented");   if (this.state.inForHeader) return;   this.state.context.push(types.kw_stat);
var errors = require('./errors'); var parsers = require('./parsers'); var Request = require('./request');
treeWorker.postMessage(tmpArr);       pointHelper = new Lore.PointHelper(lore, 'TestGeometry', 'sphere', {         pointScale: 10
.map(toUnmountPromise)   console.log('unmount promises = ', unmountPromises);
this.prototype.loadPluginMacros = function(plugin) {     for (let macro in plugin.macros) {       if (typeof plugin.macros[macro] === "function") {         this.macro(macro, plugin.macros[macro]);
while (result = lines[lnIdx++]) {       if (result.indexOf("
return newMet; return     });     PMethod.prototype.toString = function() {return 'fun ... end'}
if (__DEV__ && false) {   config.allowStartupFailure = true
removeHexPrefix,         fetchBalance,         createSimpleTx,         isAddress,
}, function () {             console.log(args);             console.log(arguments);             callback.apply(this, arguments);
if (!!sources.len) {       sources.ids.forEach(function( id) {
function renderOptVElementToString(optVElement, isRoot, context) {  debugger; }
function parseTerm(term, messages) {  debugger;
that.sn = new ROS3D.SceneNode({       frameID : message.header.frame_id,
for(let i = 0; i < index; ++i) {       browser.tabs.remove(copy[i].id);     }
return '';         done();       }
this._sendMessage('tell');             };         }         this._channel.addEventListener('internal', isLeaderListener);
options = {};     } else if (typeof options !== 'object' && (!options instanceof HTMLElement)) {
onData: function(d) {      Rickshaw.Series.zeroFill(d);      return d;
}         alert('todo');         return;         const { question } = this.state;
item.addNode  = function (layerNum,right) {   debugger;   let lastLayer = layerNum === this.numLevels;
IfcSystemFurnitureElement: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},   IfcSpace: {r: 0.137255, g: 0.303922, b: 0.570588, a: 0.5},   IfcBuildingElementPart: {r: 1, g: 0.5, b: 0.5, a: 1.0},
class FileBranch extends FileTreeLeafObject {   constructor(file, cjbranch) {     this.file = file
goTo.marker("11");debugger; verify.referencesCountIs(7);
const slice = Array.prototype.slice; export class PropertyAccessor {     constructor(obj, propertyKey) {
case 'char': case 'nchar':         return Char(p)         break
return store.create(model, options);                 break;             case "update":
configurable: false,             get: function(val) {                 return _createdAt;
this.useRefTransfMatrix_loc = undefined;   this.useTexture_loc = undefined;   this.invertNormals_loc  = undefined;  };
return exists(this) ? cloudinary.image(this.get(field.path), options) : '';   },   src: function(options) {    return src(this, options);   },   fit: function(width, height) {
var renameView = require("../views/renameView"); var apd = require('atom-package-dependencies'); var contextView = require("../views/contextView");
function put(name, value) {                 var symbol = newSymbol(name, value);
return new paddle.TensorType(variable.type.lod_tensor.tensor);                 break;             default:
var conf = require('ember-cli/tests/helpers/conf'); var EOL = require('os').EOL; var path = require('path'); var Promise = require('ember-cli/lib/ext/promise');
};                   if(data.user.teams = ["1"]){                     data.user.teams = [];
var soajsUtils = require('soajs').utils; var async = require('async'); var colName = 'cicd';
};       function find(id) {
if (!(mainId in cache)) {     def = cache[mainId] = core.createResourceDef(pathInfo.config, mainId, isPreload, !!parts.pluginId ? pathInfo.path : undef);     def.url = core.checkToAddJsExt(pathInfo.url);
var async = require('async'); var bitcore = require('bitcore-lib'); var BitcoinRPC = require('bitcoind-rpc');
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
const rmsie11 = /(trident)\/[\w.]+;.*rv:([\w.]+)/;  const redge = /(edge)[ \/]([\w.]+)/;  const rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/;
const id = m[0];       tok = app.ids.get(id);
this.transparent = true;         this.blending = zen3d.BLEND_TYPE.ADD;         this.depthTest = true;
IDBTransaction: window.IDBTransaction || window.webkitIDBTransaction,         IDBKeyRange: window.IDBKeyRange || window.webkitIDBKeyRange,         IDBTransaction: window.IDBTransaction || window.webkitIDBTransaction     }
try {     var { stdout, stderr } = await execPromise('git', ['pull'], { cwd: localDir });     var { stdout, stderr } = await execPromise('gmake', [makeParms], { cwd: localDir });     stderr = undefined;
emptyMessage: React.PropTypes.string,   messages: React.PropTypes.arrayOf(React.PropTypes.string),   errors: React.PropTypes.arrayOf(React.PropTypes.string),   label: React.PropTypes.string,
if (sps_max_sub_layers_minus1 > 0) {    for (var i = sps_max_sub_layers_minus1; i < 8; i++) {
case ACTION_TYPES.FETCH_RECORDS_SUCCESS:             let recordType = action.payload.recordType;
var newNode = kNode;     if(typeof newNode === 'undefined' || typeof newNode === 'null'){      newNode = new knalledge.KNode();
assert.throws(function() { Buffer.concat(null, null); }, TypeError); assert.throws(function() { var buff_err = new Buffer(null); }, TypeError); var buffer_err = new Buffer(-1); var buff_1 = new Buffer('asd');
], function (err) {     if (err) console.error(err);     return cb_();    });
module.exports = function(Array, __ks_Array, Class, Function, __ks_Function, Object, __ks_Object, Type) {  do {
console.log("finished_with_success");          assert(error_msg === expected_error);         assert(warnings.length == 0);
var appjs = require('./build/Release/appjs.node'); var EventEmitter = require('events').EventEmitter; var Extend = require('util')._extend;
var child_styles = this._getChildStyles(style_tr, stream);     return Nehan.List.map(child_styles, function(child_style){       return new TableCellGenerator(child_style, this._createStream(child_style));
generalSettings: {             jspmConfigFile,             staticUrl         },
function isStatic (ext) {   var extentions = ['.yml', '.yaml', '.json']   return extensions.indexOf(ext) > -1
}; CANNON.GridBroadphase.prototype = new CANNON.Broadphase(); CANNON.GridBroadphase.prototype.constructor = CANNON.GridBroadphase;
model: 'Touch Pro2'     }, {       regEx: /HTC[_|\ ]Touch[_|\ ]Pro/i,       model: 'Touch Pro'
self.addEventListener('push', function(event) {   console.log('ServiceWorker: Received a push message');   var notificationOptions = {
operations = ['add', 'remove'];     }     else if (type === 'map') {            }     else if (type === 'counter') {
return wrap(text, prefix, firstPrefix, '\\\\'); };
this.createOrUpdateKeenSession();         debugger;         var ctx = window.contextVars;
count: model.count,   get: model.get };
window.React = window.parent.React = React; ; const reactContainer = document.createElement('div');
if (!position) {       const windowHeight = window.innerHeight || document.documentElement.clientHeight       const bottom = height + this.element.getBoundingClientRect().bottom
const watcher = yield fork(getGeneralSettingsWatcher);   const updateWatcher = yield fork(updateGeneralSettingsWatcher);
} else {           window.dataLayer.push({ event: 'vic-authenticated' });         }
switch (false) {           case typeof o !== 'undefned':             enc._pushUndefined();
container.appendChild(ul);       document.body.appendChild(container);       setTimeout(function(){
}; ; export { AttributeNode }
boundedComponents = [],     disableRenderIndexKey = false   } = this || {};
SDK.TracingModel.Process = class extends SDK.TracingModel.NamedObject {
var type = _.find(schema._tests, { name: 'integer' }) ? 'integer' : schema._type;         var extension = {             type: type
return true;     } catch (e) {}     return false;   }
}).bind(this));       };
propTypes: {       models: React.PropTypes.instanceOf(Backbone.Collection).isRequired,
return parseFloat(win.getComputedStyle(animTarget).opacity); };
start: function (options, callback) {         debugger;         options = options || {};
var comment = parse_XLNullableWideString(data);  if(0 ) {
debugger;       originalParamContext = pms.parameterContext;
window.a = { 'b': { 'c': new Klass } };     var result = simplify(find.byKind(Klass));     var expected = ['window.a.b.c -> (object)'];     deepEqual(result, expected, 'Klass instance');
} else {     console.log(res);     api.sendMessage("hms.space fucked up. Blame @jordon wing.", message.threadID);
this.serializeForm()     console.log('this._json.data', this._json.data)     return     target.classList.add('loading')
.progress(function(buff){             console.log(buff.toString());         })
return err;                                 done(err);                             } else {
return true;   };   if (this._frame)
if (require.main === module) {     main().catch(console.error).finally(process.exit); }
return false;                 break;             case Hammer.TOUCH_END:
setTimeout(cycle, 500);  window.canNodeList = canNodeList;
var tr = function(x) {              var xs = numeric.div(x,that._DataAspectRatio), n=xs.length, u;             var p = that._transform[0]([xs[0],xs[1],xs[2],0]);             return [p[0],p[1],p[2]];
withMeta,     history,     networkStatus,
render() {     const { loggedIn, loggedInUser, showWhatIsThis, toggleWhatIsThis } = this.props;      return (
var bads = [];  console.log(words);  for (var word in words) {
const EventListing = ({ website, name, start, end, key }) => {   debugger   return (
}                             } else if(flag === 'ink-fv-confirm'){                             }
this._rampLowPercentage = 0.02;     this.output = p5sound.audiocontext.createGain();;     this.control = new TimelineSignal();
if (!Npm) {
'use strict'   console.log(`${GM_info.script.name} v${GM_info.script.version} by ${GM_info.script.author}`)
.replace('$date', date);             console.log('key ' + key);             client.hgetall(key, function(err, hash) {
}); var Issue = FOAM( {
else if (this.enum && this.editable.value) {       debugger;       if (!this.dom.select) {
function redrawCharts () {         d3Selection.selectAll('.grouped-bar').remove();
addItemAt(item, index = this.items.length) {     var items = this.items,         index = Math.min(items.length, Math.max(0, index));     items.splice(index, 0, asItem(item));
var URL_REGEXP = /^(https?:\/\/)([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/; adeModule.directive('adeEmail', ['ADE','$compile','$rootScope', '$filter', function(ADE,$compile,$rootScope,$filter) {
'Viewed Page': 'Viewed Product Detail',       'Viewed Product Detail': 'Test Event',       'Viewed Product Detail': 'Clicked Product',     };     _eventManager.addCallback(['on', 'event', (event) => {
parseInlineTableNext () {       if (this.char === ' ' || this.char === '\t') {       } else if (this.char === Parser.END || this.char === '#' || this.char === '\n' || this.char === '\r') {
function playSong(_t, player) {   player.getMediaControl(player.mediaControl).playSongAtPosition($(_t).data('position')); };
.ticks(this.ticks, this.tickLabel);     this.colors = scaleCategory1;;     this.keyFunction = ((d) => d.x);
}, this)         },                  update_children: function(old_list, new_list) {             this.do_diff(old_list,
scope.$watch('component.value', function (newValue, oldValue) {               console.info(scope.data)               if (scope.data[overrideId] === newValue) {
throw e;       return {};     }
document.addEventListener('DOMContentLoaded', () => {   debugger;   Promise
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-09\/artifact_mirror_with_scribbles_piece1-1348251336.swf",  admin_props : false,
else       return 0;     return 0;   },
const hexToAccount = (prefix, account) => prefix + '0x' + account.substring(2).toUpperCase() const uuidToHex = (uuid) => '0x' + uuid.replace(/\-/g, '') const conditionToHex = (condition) => '0x' + Buffer.from(condition, 'base64').toString('hex')
await display.append_javascript( execute, context.output_area, context ).then(                             ( r ) => console.debug( "Output appended.", r )                         );
} }; export default PickingBehavior;
var result = true;  for (alpha = 0x0430; alpha <= 0x044F; alpha++) {
if (regex.match(paramRegExp)) {           regex = regex.replace(paramRegExp, "([^\/]*)$1");           params.push(param);
case 'graphql':       const graphql = stashedSpecs.graphql = stashedSpecs.graphql || {};       graphql.path = graphql.path || '/graphql';
"Hamster.NOTE_E": 8,                 "Hamster.NOTE_F": 8,                 "Hamster.NOTE_F": 9,                 "Hamster.NOTE_F_SHARP": 10,
var alasql = require('..');  };    describe('Test 125 - remove comments', function() {
});         dojo.forEach(groupNames, function(groupName) {             debugger;             this.addTemplates(templates, panel, groupName, i);
export default function computeNormal(vertices) {   var v, vl, f, fl, face, vertices;
e = '--ecma4'           break       case '--ecma6':           e = '--ecma6'           break       case '--ecma7':           e = '--ecma7'
Object.keys(typesObj).forEach(v => {     debugger     targetObj[typesObj[v]] = function (config) {
}                     console.log(queryString);                     return queryString;
if (!Object.assign) {     function assign(target, source) {       var n$ = Object.getOwnPropertyNames(source);
value = value.replace(/([a-zA-Z0-9\-\/]+)(?=\s*:)/g, '"$&"');
default:      return mxn.Mapstraction.ROAD;      break;    }
}   if (isNumber(line)) {    ctx.strokeStyle= data.datasets[i].mathLineStrokeColor ? data.datasets[i].mathLineStrokeColor : config.defaultStrokeColor;
});         var $element = $('<span><div class="inner"></div></span>');
curren:"Währungssymbol",  yen:"Yen-Zeichen\Nyuan-Zeichen",  brvbar:"Unterbrochener Balken\nUnterbrochener vertikaler Balken",
for (var j = 0; j < 4; j++) {                                 var child = tile.children[j];                                 if (child) {
let scPos = pos;                 alignment.scLengthOnRef += c.len;
webSocket.onopen = e => {       debugger;       setWebsocket(webSocket);       console.log(e.data);
var name = new ContactName();     var j = 0; while(field = nameFields[j++]) {         if (moz[field[0]]) {
try {evaLUAted = eval(args)}             catch(err) {evaLUAted = err.message; console.error(err.stack)};             let overall;
cwc.soy.SelectScreen.style({ 'prefix': this.prefix }));     goog.style.installStyles(         cwc.soy.SelectScreenNormal.style({ 'prefix': this.prefix }));     this.styleSheet = true;   }
{ run: function() {       var self = this,           what = this.what,           stream = new FakeStream(),
import { eventBeforeSend, eventBeforeReceive, eventSend, eventReceive } from '../shared.js'; import ItemAnimate from './ItemAnimate.js'; import ItemDrag from './ItemDrag.js';
asyncTest( "#9532: Need a way in Menu to keep ui-state-active class on selected item for Selectmenu", function( assert ) {  expect( 1 );  var element = $( "#menu1" ).menu(),
if (this.showingMenu) {                         $.each(this.menu.$options, $.proxy(function(index, value) {                             if (!$option) {
if(_undo_command_stack.length > 0) {     var command = _undo_command_stack.pop();     _undo_commands[command.id].pop();
for (var i=0;i<data.length;i++){      $("<li class='imageItem'><a href='#'><span class='imageTitle'>"+data[i].title+"</span> <span class='imgURI'>"+data[i].uri+"</span><\/a></li>").appendTo(".az.inner.textImageList > .list");     }
var numWithoutValue = /(?:\s|^)(\.?\d+\.?\d*)(?![^(]*\)|\w|%|\.)/gi;   if (/^[-a-zA-Z0-9().\/]*,/.test(value)) {     value = value.replace(/(?:,)(?![^(]*\))/g, '');
this.renderList();             } else if (this.options.display === 'form') {             } else {
if (_.has(args, 'server_host_override')) {     secure: _.merge(opts, {       rejectUnauthorized: false
case UserConstants.FETCH_SUCCESS:       const { user, unnamedUserMessage } = action       const users = [...state]
var i = 0;   var currentOctave = 0;     for (i=0; i<whiteNoteCount; i++) {
orsRouteService.addHeightgraph = (geometry) => {             console.log(geometry);             const heightgraph = orsObjectsFactory.createMapAction(-1, undefined, geometry, undefined, undefined);
path = DocObject.getRelativeIdentifier(path);   var doc = new Document(path, className, 'document');
}     break;     case 'SET_RATING':
return lastIndex; }; Quill.registerModule('undo-manager', UndoManager);
this.setState({ showSubmitExpense: !this.state.showSubmitExpense });   };
const url = config.url;     const encoding = typeof config.encoding != "utf-8" ? config.encoding : "utf-8";     proj4.defs([
throw e      process.exit(1)     }
import LoginForm from './login-form'; import Modal from './modal.js';
import dat from 'dat-gui' import {vec2, mat3} from 'gl-matrix'
console.log("failed to insert match from scanApi");                 process.exit(1);             }
if (updated.label) {                 checkObjectType('label', data.label, null, window.cvat.classes.Label);                 copy.label = data.label;
token : "rparen",         regex : "\}",         next:   "start"
if (!_.isString(value) && !_.isNumber(value)) {                 value = $.toJSON(value);             }
.map(sourcePath => path.join(projectPath, sourcePath))               .filter(sourcePath => filePath != sourcePath);             args = args.concat(paths);           }
}           return _results;           break;         case 'Op':
if (parts.length === 2) {     if (match = parts[1].match(/^<([^>]*)>$/)) {       directObjectType = match[1];
function update_notebook(changes, gistname, more) {         debugger;         function add_more_changes(gist) {
initStoreState = dva._store.getState()           console.log('> server render has finished')         } else {
});         } else if (status === 'Stopped') {         } else if (res.status === 'KILLED_BY_TIMER') {
var newvalues = this.dialog.getValue();    this.datatable.updateRow( this.selectedRecord , newvalues );
return log(removedRecords.length, this._relatesTo, this._column, this._definition );    async.each(addedRecords, function(record, next){     if (this._isMapping) {      var values = {};
var cachedContrailListModel = cachedData['dataObject']['listModel'],                 lastUpdateTime = cachedData['lastUpdateTime'],                 cachedContrailListModel = cachedData['dataObject']['listModel'];
}         return false       case OBJECT_TYPE_WATERMELON:         const watermelon = this._cacheFood.get(object.uuid)         if (watermelon) {
handleLoad: function(model, relation)   {
var triangle = handle.append('path')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle')
}) test('disables slider', async t => {   await page.setStep(1).setMin(0).setMax(100).setValue(50).wait
} catch(e) {    throw e;    this.AddError(e.Message, e.useEndLineNumber);   } finally {
action = args[0];         }         if (typeof args[1] == 'date') {             date = args[1];
}; });;'use strict'; gantt.directive('ganttScrollManager', function() {
if (layout instanceof VertexLayout) {         vertexPosition = layout.get('position');         result += Math.round(vertexPosition.x) + ' ' + Math.round(vertexPosition.y);       } else if (layout instanceof PortLayout) {
import {     T as True,     concat,
let parts;       if (parts = /^(a|an|n)(\.\.)?([1-9][0-9]*)?$/.exec(formatString)) {         let max = parseInt(parts[3]);
var store = model.localStorage || model.collection.localStorage;   var resp, errorMessage, syncDfd = $.Deferred && $.Deferred();    try {
define(function (require, exports, module) {     'use strict';
if (link) link.setAttribute('href', binURL) if (gistID.indexOf('/') > -1) gistId = gistId.split('/')[1] loadFromAPI(gistID)
catch (e) {                     var placeAfter = placeholderIndex < thisIndex;                 }                 if (placeAfter) {
Meteor.startup(function() {  Session.setDefault("height", 900); }
import { register } from '..'; afterEach(cleanup); function registerTestPlugins() {
export const setVisibilityFilter = text => {     debugger;     return {
const loggerClass = require('artzlogger'); logger            = new loggerClass({timeStamp: moment(new Date).format('hh:mm:ss:')}); exports.run = (client) => {     logger.info('May is ready to use');
postContextLineBegin=idx;      for (var i=idx+1; i<body.length; i++) {       var ch = body.charAt(i);       if (ch == '\n' || ch == '}' || ch == ';' || i == body.length-1) {
}     };     return '';
var info = {                 recipient: recipient,
function (sandbox, controlsPlugin) {         debugger;         this.sandbox = sandbox;
function clearPerformance(type){         if(window.performance && window.performance.clearResourceTimings){             if(conf.haveAjax&&conf.haveFetch&&conf.ajaxLength==0&&conf.fetLength==0){                 clear()
timezones: moment.tz.names(),         upload_quota: attachments_ui.bytes_to_size(page_params.upload_quota),         total_uploads_size: attachments_ui.bytes_to_size(page_params.total_uploads_size),     });
fObj=fObj+"}";  fObj = fObj;  var regexed = regexImports(fObj);
name: 'coverage',     value: Joi.string().regex(/^[0-9]+\%$/),   }));
throw "getValueFromWidget: " + this._renderType + " not supported!";         break;       }
this.importDocument = function(documentEl) {     debugger;     this.reset();
} else {    var initialText = '';   }
console.log('WidgetName - postCreate');
class P extends React.Component {     constructor() {         this.bind();
angular.module(PKG.name + '.feature.hydrator')   .controller('AdaptersDetailLogController', function($scope, AdapterDetail) {  hydrator:cdap-ui/app/features/hydrator/controllers/tabs/log-ctrl.js     $scope.loadingNext = true;
super.componentWillReceiveProps(props);         this.data = _.clone(props.data);         this.prepareChildren(props.children);
Mongo.Instance = {}; var orig = Mongo.Collection;
var zt = require('../lib/zt/zt.js');  };    var NUMTESTS = 10000;
part = bits.splice(0, 8).join("");         console.log(part);         result.push(String.fromCharCode(parseInt(part, 2)));
use: (!!params.use) ? params.use.replace('gfw_','') : null,             useid: params.useid,
pull(options, stdout) {     var options = options || {};     return async(this, function* (notify) {
model.when('size', function (size) {       console.log("size:");       console.log(size);       svg.attr('width', size.width)
return this.success({name: '新增成功！', url: '/admin/channel/index'});         break;       case 2:
result = JSON.parse(result);                 if (result.code = 100000) {                     res.reply({
var i, ii,         index,         files;
};       for (var p in props) {         iframe.setAttribute(p, props[p])       }
console.log(domain_name)   document.getElementById('testlink').addEventListener('click', pubTest, false)   pubsub_client = new Faye.Client(pubsub_server_url+'/pubsubhub', {
var width = 0;         for (i = 0; i < colspan; ++i) {           var colWidth = px.pixelify(this.colWidth[colIndex + i]);
getUserElementFieldSet();         };
}                     break;                 case "string":
"==": "moveTabToNewWindow",             "g<": "moveTabToPreviousWindow",             "g>": "moveTabToNextWindow",             "u": "undoCloseTab",
var ua = navigator.userAgent.toLowerCase(),    match = /(webkit)[ \/]([\w.]+)/.exec(ua) ||     /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||     /(msie) ([\w.]+)/.exec(ua) ||
return update(state, {         items: { $push: [evtUuid] },       });
const { img, x, y, width, height, repeat } = this;     const { newImgX, newImgY, newImgWidth, newImgHeight } = this;     if (repeat === 'repeat-x') {
for (let i = 0; i < jobs / batch; i++) {    for (let job of yield queue.take(batch)) {}   }
extent: [-13884991, 2870341, -7455066, 6338219],   source: new ol.source.ImageWMS({     url: 'http:
function assert(b, err) { if(!b) { debugger; throw err; } }
FileParser,   Util,   cleanSlug,
}   }   async onIrcPing(ircUser, msg) {     this.ircd.write(ircUser.socket, 'irslackd', 'PONG', []);   }   onIrcLine(ircUser, line) {
errors = require('../errors'),     utils = require('../utils'),     i18n = require('../i18n'),
var requireNativeComponent = require('requireNativeComponent'); var verifyPropTypes = require('verifyPropTypes');
ol.color.fromNamed = function(color) {   var el = document.createElement('div');
ignoreHTTPSErrors: true,       headless: !!!config.debugWindow     },
'<oppia-text-input-html></oppia-text-input-html>'));     callBack = function() {};     pps.init(callBack);
layout = translate( match[ 1 ], layoutTranslations );    }    if ( match = new RegExp( '(' + layoutVersions.join( '|' ) + ')\\/(\\d+)' ).exec( ua ) ) {     layoutversion = parseInt( match[ 2 ], 10 );
this.isLocked = function (name) {         debugger;         if (!name || typeof name !== 'string') {
return create(appId, varName, devValue, liveValue, cb);         break;       case "read":
case "fake":             const fakeSocket = getFakeTransport();             assert(ep.protocol === "fake", " Unsupported transport protocol");
}; DashboardAssistant.prototype.setup = function() {
statful.timer();         expect(util.addMetricToQueue.calls.count()).toEqual(0);     });
} else {                      if (typeof selector == 'element') {
getActiveDelegates: angular.noop,       getDelegateByUsername: angular.noop,       getActiveDelegates: angular.noop     }
var originalPosition;   var maxRange = token.replace(/[>\+~]/g, ' $1 ').length;   var position = {
import { Profile } from '../../components/profile'; import { DashboardContainer, ErrorMessage } from './style'; import { getEverything } from './queries';
import FormControl from '@material-ui/core/FormControl'; import { withStyles, MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'; import TextField from '@material-ui/core/TextField';
switch (action.type) {     case SET_DEBUG_FLAGS:       const obj = Object.assign({}, state, action)       delete obj.type
const policy = require('../protocol/policy'); const rules = require('../covenants/rules'); const util = require('../utils/util');
return false;           break;         case this.OPERATORS.dateOperatorInTheLast:
return someValue !== undefined && someValue !== null && someValue !== 'undefined' &&       (typeof (someValue) === 'String' ? someValue.trim().length > 0 : true);   },
return req; }; Client.prototype.requestStream = function(serviceName, data, opts) {
log().info('Updated all tenants');             process.exit(0);         });     });
if (rule.isApplicableAt(corpus, site)) {             that.rules[rule.key()] = rule;
})) function func(a,b,c) {     this.name = 'yeyan1996'
for (var jj = 0; jj < data.split.length; jj++) {       var split = data.split[jj];
$('a#file-upload').click(switchToImport);         $(document).on('query.build.execute', switchToEditor);         $(document).on(qdb.MSG_QUERY_DATASET, function (e, m) {             divExportUrl.val(qdb.toExportUrl(m.query));
default:     throw "unhandled ControlCommand: " + evalCommand;     break;    }
canvasParent, renderer, canvas, scene, camera,             light1, light2, controls, compass,             render, animate, add3DObject, invalidate,
qualityChange(event) {     console.log("quality change", event)     this.trigger(Clappr.Events.PLAYBACK_HIGHDEFINITIONUPDATE)
$('#package').val($.base64.encode(params));                 evt.preventDefault(); debugger;                 $('#false-aws-login-form').submit();
msie: 1,         version: ua.match(/msie ([\d\.]+);/i)[1]       };
map: React.PropTypes.object,         style: React.PropTypes.object,         fluid: React.PropTypes.bool
function periodicRender() {                     this.render();
process.on('unhandledRejection', (error, promise) => {     console.error('Unhandled promise rejection', {error, promise})     process.exit(1); });
if (templateElementNameFromCustomElementName.hasOwnProperty(tag)) {                     element.appendChild(document.importNode(elements[templateElementNameFromCustomElementName[tag]].content, true));                 }
case actionTypes.other.DECLARE_COUNTER:                     return new Action.Other.DeclareCounter(data.name);                     break;                 case actionTypes.other.DECLARE_VARIABLE:
if( match = block.match( /^\$(\w+)\s*=\s*(.+)/ ) ) {           scope.setVar( match[1], this.parseExpressions( new Scanner( match[2] ), scope ) );
else {                          console.log('Node: %s was created.', path + '/ids/' + consumerId);                          cb();
return oResourceBundle.getText("invoiceStatusA");      break;     case "B":
import { Heading, Subheading } from '../shared/Typography'; import { button, colors, fonts } from '../../utils/styles';
isMove = true;             x = window.event ? window.event.clientX : e.pageX;             y = window.event ? window.event.clientY : e.pageY;             xel = x - currentPhoto.offsetLeft;
log.error('Are you sure this is a Sails app?');   process.exit(1);  },
var search = "";
}          match = '/<\/?[^('+notmatch+')]+>/gi';     alert(match);
case 'h':      var hour = time.getHours() % 12;      if (hour != 0 && hour < 10) {       hour = '0'+hour;
if (typeof plugin.schema) {         console.log('Normalizing event using plugin schema', JSON.stringify(plugin.schema));
},     clearValue: function(value) {         this.el.find('textarea').get(0).value = value;
const parentNode = node.parentNode;     const startIndex = parentNode.childNodes.indexOf(node);     let i = 0;     diffArray(oldItems, newItems, () => 0).accept({
params.tags_autocomplete = $scope.list_data.tags;                 event_track.tags = $scope.list_data.tags;             }
for(i = 0; i < _endKeyFrames.length; i++) {     var kf = _endKeyFrames[i];     kf.frame = _maxKeyFrame - kf.offset;
debugger;     oldLambdaNames.forEach((name) => {
} else {       var names = combinations(name), levels = [];       for (var i = 0, l = names.l; i < l; i++) {
} else {                   }
}  this.renderBufferImmediate = function ( object, program, material ) {   state.initAttributes();
pass = false;     };     this.assert(pass, "Expected all elements to match.");
var path = require('path'),     nodeunit = require('nodeunit'),     mkdirp = require('mkdirp'),
}); var map = new ol.Map(document.getElementById('map'), {   center: new ol.Coordinate(0, 0),
is_editable = true;     } else if (window.hasOwnProperty(is_admin) && is_admin) {
else if(noteCount > 3){     throw new Error("This bar is full already!");     return;    }
import * as Logo from 'components/logos' import React, { Fragment } from 'react' import { borders, colors } from 'theme'
setAutocommitQuery: function(value) {       return "SET autocommit = " + (!!value ? 1 : 0) + ";"     },
v = old[k];           if (!k in val) {             this.realRemove(k);
case "weights":             var clips = this._parseAnimationSampler(samplers[channelDef.sampler], false);             layers = [];
for (var i = 0; i < gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS); i++) {       name = gl.getActiveUniform(program, i).name;       program.uniforms[name] = gl.getUniformLocation(program, name);     }
var server = app.listen(app.get('port'), function () {   console.log('App is running at port', app.get('port'));
var _ = require('lodash'); var EMA = require('./EMA.js');
consumerTag = ok.consumerTag;     console.log(consumerTag);   });
const listingHash = yield call(getListingHash, listingID)         args = [listingHash, convertedNumTokens, listingID, data]         yield call(sendTransactionSaga, registry, methodName, args)
import ToastsActions from './ToastsActions'; import LibraryActions from './LibraryActions'; import app from '../lib/app';
_getErr = function (s7err) {         if (Array.isArray(s7err)) return new Error('Errors: ' + s7err.join('; '));
var Rotate = function (tileXY, direction, originTileXY, out) {     debugger     if (out === undefined) {
, remove: function (e, direction) {       console.log('remove', this._readonly)       if (this.$input.is(document.activeElement) || this._disabled || this._readonly) return
this.ptr-=3;  var t=this.dstk.get("$error");  if (t instanceof Function) t.call(this); else this.stk[this.ptr++]=t;  this.stk[this.ptr++]="command";
this._file = file;             };             this._children = correctInherit(SpecificChildren, children);
if (!condition) {         debugger;         throw new qx.dev.unit.AssertionError(comment, failMsg);
const conn = await db_open();   const channel = new BroadcastChannel('reader');   await activate_feed(conn, channel, feed_id);   conn.close();
} }; function expandInlineDirectives(directives, lines) {
import { h, Component } from 'preact'; import Page from '../Page.jsx';
composite: composite,  value: value,  list: list,  xml: xml,
throw new SyntaxError('"' + str + '" contains no units');       return null;     }
})     if (typeof syncOaks === 'Error') {       throw syncOaks;
var server; function start(host, port) {  sessionMgr.init();
debugger     });
compileMode: "async",         path: "app/assets/javascript",         module: {
} else {             document.write( echo.arguments[i] );         }
log(FAILURE + EMPTY + overallFail + " Failures");             default:                 status = "pass";
self.topIndex = topIndex;             console.log('SETTING TOP INDEX to be ',self.topIndex,processor)         }
event.stopPropagation();                     start(event);                 };
throw new Error("For not all values in the array " + data.val + " is the property " + forChild.val + " of type " + types.join(' or '));  return false; };
return false;         document.lastChild.appendChild(document.createTextNode("Pushing coordinates "));         var touches = event.touches && event.touches.length ? event.touches : [event];
const avatar = [].concat(avatars)[0];       if (!!avatar) {         this.setState({
);     _templateObject_709cbe80e11a11e88dd52590c4efd568 = function() {       return data;
Dom.addClass(nLi,"embassyAction");      var bbtn = document.createElement("button");      bbtn.setAttribute("type", "button");
return console.error('Topic cannot be undefined');       break;   }
$reel.trigger('fractionChange', Number(ix));       equal( $reel.data('value'), it, 'Passed '+ix);     });     start();   });
﻿function isNull(value) {     return typeof value === "undefined" || typeof value === "unknown" || value == null; }
noDeleteVar: function (str, o) {         var rx = /delete ([\w$_]+)(?!.*delete [\w$_]+)/;
if (msgType = 'shortvideo') {             atts.push({
dataRows.each(function (row, index) {                         row.$$('td').get(1).getText()
if (_res && _res.clearCookie) {     var opt = path ? { path: path } : undefined;     _res.clearCookie(name, opt);
}     $(document).ready(function () {         var header = $("meta[name='_csrf_header']").attr("content");
}     return valid && mxGraph.prototype.isValidConnection.apply(this, arguments);; };
"FS type":"",     "Get Information":"",     "Get Pool of my/group\'s resources":"",     "Get Pool of resources":"",     "Graphics":"",
if (allowMultiple) {                 var tempArray = cron[4].split(',');                 for (var i = 0; i < tempArray.length; i++) { tempArray[i] = +tempArray[i]; }
import { Feature } from '@common-stack/server-core'; export default new Feature(authModule);
}   return instr.replace(/\&/g, '&amp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;').replace(/\"/g, '&quot;');   };
case "content": {           this._addSlot(propValue);         }         default: {           console.warn(`${propKey} is unknown`);
_extend = oj.$.extend   function _isCapitalLetter(c){return !!(c.match(/[A-Z]/));};   function _has(obj, key){return ObjP.hasOwnProperty.call(obj, key)}
actual = Buffer.concat([actual, chunk])       console.log('actual: ' + actual.length)       console.log(big.length)       callback()
if (overlap.y === 'inclusive') {       t.vertical = t.vertical     }
else {       var err = {error: 'Grant: missing or misconfigured provider'}       callback(qs.stringify(err))     }
if (textStatus === 'success') {                 console.log(self.title + ' = ' + data);                 self.remoteId = data;
var scanline = slice.call(bytes, begin, end);       if (scanline[0] == 5 && scanline[2] == 5)         debugger;       literals += '\x00' + fromCharCode.apply(null, scanline);
if (id === null) {     this.set('_id', value);     return value;    } else if (EG.String.startsWith(id, prefix) && !EG.String.startsWith(value, prefix)) {     this.set('_id', value);     return value;    } else {
var needsShy = document && (function() {   var testEl = document.createElement('div');
mChainCount[ i ] = modelChainCount;             for( var j = 0; j < modelChainCount; ++j ){                 cModelIndex[ j + chainOffset ] = i;
if (true) {                  const html = $document.find('html').eq(0);
try{         const _settings = JSON.parse(data)         console.log(_settings)         if (_settings.rpcSettings.rpcHost === '' ||
return 'W';     break;     case 'fog' :
anychart.VisualBaseWithBounds.prototype['height'] = anychart.VisualBaseWithBounds.prototype.height; anychart.VisualBaseWithBounds.prototype['pixelBounds'] = anychart.VisualBaseWithBounds.prototype.pixelBounds;
let payload = tryParseJSON(payloadString)     if (!!payload) return payload
armBuild();                             return Q();                             break;                         case 'x86':
const componentName = ReactComponent.displayName || ReactComponent.name ||     (/function ([^\(]+)?\(/.exec(ReactComponent.toString()) || [])[1] || 'Component';
return;     }     for (const i = 0; i < this._lookahead.length; i++) {       this.queue.push(this._lookahead[i]);
scaleVertically(size) {         return size;         return react_native_1.PixelRatio.roundToNearestPixel(size * verticalFactor);     },     scaleWithAverageRatio(size) {
export default [   [     ['pagi', 'pagi', 'tengah hari', 'petang', 'malam'], ,     ['tengah malam', 'pagi', 'tengah hari', 'petang', 'malam']
'available for your system. Please install a supported C++ compiler and reinstall the module \'uws\'.');         process.exit(-1);     }
if (sDisplayShape === sap.f.AvatarShape.Circle) {    sDefaultIconPath = Avatar.DEFAULT_CIRCLE_PLACEHOLDER;
var isBrowser = typeof window == 'object'; var Ajv = require(isBrowser ? 'ajv' : '../lib/ajv'); var fullTest = isBrowser || !process.env.AJV_FAST_TEST;
if (this.token === this.tok.T_LIST) {       var result = this.node("list"),         assign = null;       var isInner = this.innerList;
$(document).unbind('click', clickHandler);                 };
export class Transient extends Registration {   constructor(key){     this.key = key;
case 7:             if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {               _context.next = 54;               break;
this.checkboxRender = (value, label) => {             const { columnHeight, lineHeight, columnBorderWidth, colAlign, col: { columnAttr = '', editor }, } = this.props;             let justifyContent = '';
offset = step * offset;      for (var i = 0; i < len; i += 1) {       L[i] = (step * i + offset).toFixed(dp);
{                     if(isNull(data.error) && typeof data.acknowledged === true)                     {
case 20:                         customFlags = [];                         _context.next = 23;                         return prompt([{
createPackage() {                     debugger                     this.dialogList.state.dialogFormVisible = true;
document.forms[0].partialCountValue.value = "";    document.forms[0].partialCountPeriod.value = "";
)         break;       default:
data.toTime = toTime;         $("#chart").html('<div align=\"center\">Loading...</div>');   $("#info").html('');
return createStoreWithMiddleware(reducer, initialState) };
if (mutation.removedNodes) {         for (var j = 0; j < mutation.removedNodes.length; j++) {           var child = mutation.removedNodes[j];           if (child.nodeType === Node.ELEMENT_NODE) {
}     case 'api':       tag.visibility = parts.shift();
return Index._displayFile(req, res, tempDir, `${name}.log`);   };
var isHTML = text.search(/<[a-z\/\!]/i) !== -1;         if(isHTML) {
return DRAIN_TYPES.find(({ id }) => id === drainTargetType); };
if (msieVersion == 10) {                 display: '-ms-' + flex + 'box';                 if (props.alignItems) {
case 4:            if (this.xhr.status == 200) {             this.replaceContent();           } else {           }
import Routing, { Router, Switch } from "./../utilities/routing"; import { withRouter } from "./../utilities/routing/router";
const REGEXP_PATH = /\ const REGEXP_ARG = /\'/g; const REGEXP_ESCAPE = /\$\(.*?\)|\'/g;
if (typeof t == 'string' && /,/.test(t)) {     var tp = t.split(",");     t = tp[0];
this.dom.firstChild.style.textShadow = "-1px -1px 0 " + newVal;             };         });
throw new Error('Unimplemented API: dojo.data.api.Read.hasAttribute');   return false;   },
set weight(value) {             weight: value;         },         get weight() {
import { RouterComponent } from "./router"; const { SchemaForm, hocFactory, schemaFormDec } = schemaFormReact; let store = createStore(combineReducers({
yy.Search.prototype.toJavaScript = function(context, tableid, defcols) {
console.log('ERROR: Failed to load translation table');         }
if (clear === true) canvas.width = canvas.width;    console.log("Drawing triangle:", triangle);   ctx.beginPath();
stopDisposableDaemons(daemons, function () {           process.exit()                    })
}, function(error, response, body) {      expect(body).toEqual({success: true});      var data = cantrip.get("/foo/collection");
} debugger;       if (self._state.requests[0].command.indexOf('RENAME') > -1) {
var max = 0;             var values = stats.graphsLODs;             for (var i = 0; i < samples; i++) {                 max = values[i][0] > max ? values[i][0] : max;
var scripts = document.getElementsByTagName("script");     var rePkg = /dojo\.js([\?\.]|$)/i;     for(var i = 0; i < scripts.length; i++){
const DatabaseManager = require('@adonisjs/lucid/src/Database/Manager') const VanillaSerializer = require('@adonisjs/lucid/src/Lucid/Serializers/Vanilla') const { ioc } = require('@adonisjs/fold')
var logPushApi = '';
}           } catch(err) {           }
});   }; cv.render = function() {
$ERROR('#s'); } \u0074 = 1; if (t !== 1) {   $ERROR('#t');
XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;   XMLHttpRequuest.FormData = FormData;   module.exports = XMLHttpRequest;
(userAgent.indexOf('Firefox/') != -1 && userAgent.indexOf('Android') != -1);        } catch(e) {};     return false;
require('source-map-support').install();   } catch (_error) {   }
{         if ( typeof def !== 'null' && typeof def !== 'undefined' )         {
'use strict'; var cortex = require('../'); var fs = require('fs-sync'); var node_path = require('path');
console.error(VERSION);                     process.exit(1);                     break;                 case "-o":
var tab = $.extend({}, tab, tab[r]);     if (id == null || typeof id == 'undefined') {      this.tabs.push(tab);
throw new Error('TECHNICAL_EXCEPTION_HTML_STRUCTURE_MAY_HAVE_CHANGED')                 break;             default:
elm.append(propsDiv);     dataView = new Slick.Data.DataView({ inlineFilters: true });     dataView.beginUpdate();     dataView.setFilter(this.filter);     dataView.endUpdate();
vTree.addChildToTreeQueue(this);   }; };
require('../../../components/scientificName/scientificName.directive.js'); var _ = require('lodash'); angular.module('portal').controller('speciesKey2Ctrl', speciesKey2Ctrl);
function TelegrafFlow (opts) {   var opts = Object.assign({     cancelCommands: ['/cancel'],
+', equationY_: "'+this.equationY_+'"'       +'}';   }; };
if (getOwningFileObject()) {         addClass(primary_selector, "collapse");     } else {
{     console.log(data.frame_data.curr_line);     console.log(data.frame_data.total_lines);     $('#stdout').text(data.history);
getComponentDefinition(uri, [ graphUri ]).then((res) => {         console.log(res)         componentDefinition = res.object
this.dirty = false;                     debugger;                 }
helper.nock().get("/v1/users/FakeUserId/applications").reply(200, items);       debugger;       Application.list(function(err, list){
import React, { useEffect } from 'react'; import { ThemeProvider } from '@material-ui/styles';
if (!$iugo['store']['bind_to_dom'].namespacedTagIndex[namespace]) {      $iugo['store']['bind_to_dom'].namespacedTagIndex[namespace] = [];     }
var hiddenUIContext = create_context (hiddenUICanvas) ;   var Nbutton     = 4 ;   for(var kButton = 0 ; kButton < Nbutton ; kButton++) {
} else {           var substr = `<span class="token string">"<a class="token md-link" href="./#articles/${p.history[2].replace('.html', '')}">${p.metadata.title}</a>"</span>`         }
if (!!!res._header) {           res.writeHead(statusCode);
while (foo -= bar) {
});       debugger;       return map;
citation += 'DOI: <a href="http:                 } else if (url = bib.entries[id]['url']) {                     citation += 'URL: <a href="' + url + '">' + url + '</a>. ';
function checkURL(tabId, info, tab) {  var url = new RegExp( '^https?:\/\/play\.google\.com\/music\/listen' );  if ( url.test( tab.url ) ) {
list: function(sids, callback) {             var sids = sids || [];
"you'd like to deploy your app here.\n");     process.exit(1);   }
'use strict'; const models = require('./index');
var t    = require("../../types"); exports.Function = function (node, parent, file, scope) {   if (!node.rest) return;
}   onDragEnter(event) {     const { onDragEnterCallback } = this.props;
value = JSON.stringify(value);     } catch (e) {     }
; 'use strict';
throw err;         };     });
var cordova = require('cordova'),     channel = require('cordova/channel'); var browserWrap;
var event = new Event('close', {code: code || 1000, reason: reason || ''});     event.initEvent('close', false, false);
return ["image"]; }; var Modul_itunes_artwork = function () {
console.log(uniqueCount);   if(uniqueCount == "none" || uniqueCount == "" || uniqueCount == null) {
function() {    deepEqual( container.children( ".ui-screen-hidden" ).length, 3, "Filtering controlgroup inputs and links by value" );    input.val( "" ).trigger( "change" );
for (var i=0;i<optionGroup.length;i++) {      optionGroup[i].applyStyle("display","inline-block");
}     console.log(vnode)     return vnode
import DeviceCard from './card'; import c from 'classnames'; import styles from './styles.css';
}     debugger;    expr.ir(state, irs);
import { GET_LAUNCH } from "./cart-item" import { Query } from "../models/reactUtils" export { GET_LAUNCH }
enumerable: false,             get: function () {               fieldFormats.defaultByType[field.type];             }
var sys = require("sys"); var Browsers = require("./browsers").Browsers;
_data = [];     _dataString = s.replace(/\~|~/g,"\n");     var sd = _dataString.split("\n");
}           return _results1;           break;         case 'Code':
while (~k) {       if (m = str.slice(k).match(END_TAGS)) {         k += m.index + m[0].length
class FileDragSource extends DragSource {   constructor() {     this.item = {
this._showMenu();     };   };
;(function (global, undefined, ctor) {
_getLabelOptions: function(parsedParams) {   var parsedParams = parsedParams[0];   var includeLabel = !parsedParams.label || ( parsedParams.label && parsedParams.label[0] == "yes" );
exports.Vinyl = Vinyl; ;
];     var fontBBox = aFontInfo.bbox;     for (var i = 0; i < fontBBox.length; i++)       topDictIndex = topDictIndex.concat(this.encodeNumber(fontBBox[i]));
params = params || {};   module = module.charAt(0).toUpperCase() + module.slice(1);   var endpoint = applicationName + '/form/'+formName+'/record/add/';
var webpack = require('webpack'); var rucksack = require('rucksack-css') var webpack = require("webpack")
var Transformer = require("./transformer"); var generate    = require("./generator"); var assert      = require("assert"); var File        = require("./file");
constructor() {     _timeouts: []   }
},                 protected: {                     _loadGL() {                         Public(this).loadGL()                         Public(this).emit(Events.BEHAVIOR_GL_LOAD, Public(this))
import Button from 'react-native-button'; import {analytics, airloy, styles, colors, api, L, toast} from '../../app'; import util from '../../libs/Util';
Blockchain.prototype.putBlockOnHold = function(block) {     if (!block['hash'] in this.buffer) {         this.buffer[block['hash']] = {
_model_name: "TooltipModel",             _model_name: "Tooltip",             _model_module: "bqplot",             _model_module: "bqplot",
'use strict'; const e = require('child_process'); const fs = require('fs'); const CI = require('./ci.js');
function hideFn(e){             var e = e || window.event,                 target = baidu.event.getTarget(e);             hideHandle = setTimeout(function(){
if(typeof sourceMapStringOrOffset == 'string') {       var [offset, length, id, ..._rest] = sourceMapStringOrOffset.split(":");
},    en:{      months: [
continueProcessing = false;             case 'x':             case 'compress':
function computedDecorator(fn, params) {       let dec = function(prototype, key, desc) {         assert(           `ES6 property getters/setters only need to be decorated once, '${key}' was decorated on both the getter and the setter`,
var type = Object.prototype.toString.call(subject).slice(8, -1)     console.log(type, '1111', subject.Type)     switch (type) {
var URL;
export default class Outlet extends Component {   constructor() {}   componentDidMount() {
head.insertBefore(el, head.firstChild); };
handleClickToggle: function() {     debugger;     TodoActions.toggleItem(this.model.id);
if (arrowStyle) {                 return maptalks.Util.isArray(arrowStyle) ? arrowStyle : this.arrowStyles[arrowStyle];             }
off = !$("dsos-names").checked || !$("dsos-show").checked;             for (var i=0; i< depends["dsos-names"].length; i++) { fldEnable(depends["dsos-names"][i], off) };       break;
window.addEventListener('click', this, true);     window.addEventListener('keydown', this, true);     window.addEventListener('keyup', this, true);   },
}          var self = this, o = this.options;;          if(BI.isNotNull(configs.group_value)){
} function getWhitelistLogData(meta, oembed) {     if (!meta) {
var b = makeReactive(1);     debugger;     var sum = makeReactive(function() {
that.origin = new ROSLIB.Pose();     } else {
} };
}                         var point = new OpenLayers.Geometry.Point(msg.data[lonMapping], msg.data[latMapping]);                         point.transform(coreMap.Map.SOURCE_PROJECTION, coreMap.Map.DESTINATION_PROJECTION);
var tmp = /\%output\.(\S+)/.exec(cmd);   if (tmp && tmp.length) {     extensions[2] = tmp[1];     cmd = cmd.replace(/\%output\.\S+/, '%output');
if (m3u8.version >= 4)         for (attrname in extParserV4) { extParser[attrname] = extParser[attrname]; }       if (m3u8.version >= 5)
$timeout(function () {                             if (!!e.date) {                                 $scope.$apply(function () {
function invertDatumTypes() {       for (key in TDatumType) {         datumEnum[TDatumType[key]] = key;
searchUsernames: { title: 'Search all usernames, used for admin/mod UI components to lookup users' },   adminPage: { title: 'Page through all forum users, used for admin/mod' },   removeInvite: { title: 'Remove an Invitation' } };
kbnAngular(chrome, {});       debugger;     });     it('should return breadcrumbs based on the url', () => {
for(var i = 0; i < L; i += 1) {       app.u.dump(" -> subcats[i]: "+subcats[i]+" and fetchonly: "+vars.fetchOnly);       var
var route = function route(req, res, next) {   var resHtml = ""   if(typeof req.query.token !== 'undefined' && req.query.token !== null) {
this.ESCAPED_CHARS_REGEXP = new RegExp('[\\.+*?\^$\[\](){}\/\'#]','g');
action= {'newstate':'stay','prev_state':prev_state};   }   else if (msg ="disarm") {      action= {'newstate':'disarm','prev_state':prev_state};
}else{         throw new Error(`Config for ${id_config} not found in section ${section}`);         reject();       }
async.auto(calls, (err, results) => {             debugger;             console.log(':: bootstrap ::', err, results);
return;   }; })(jQuery);
function addAliasCommon(url) {         var input = $('#add-alias-input'), url = $.trim(input.val());         if (url !== '') {
case actionTypes.other.SET_VARIABLE:                     return new Action.Other.SetVariable(data.name, data.value);                     break;                 case actionTypes.other.SET_VARIABLE_BY_JSON_ATTRIBUTE:
parseConnection = require('pg-connection-string').parse,     csv = require('express-csv'),     _ = require('underscore'),     dico = require('./dico'),
if(typeof jszip === 'undefined') jszip = require('./jszip.js');   try { _fs = require('fs'); } catch(e) { }  }
if (err) {           nodeca.logger.log(err);           process.exit(1);         }
if(Settings.supportAdjust){      return;    var _thList = _this.getOriginalThDOM(_table),     _td;
return this.setMethod(value, (err, value) => {       if (err) throw error       this.log('Fake Set Callback Received: ', value)
else {                                 location.href = 'mipilaw66baidu_informLawyer_failed'                                     + '?lawyerId=' + lawyerId + '&sessionId=' + sessionId
return s     .replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1')
menu.open = false;   }; });
closest = null;     parentMesh.updateMatrixWorld()     this.allComponents.map( component => {
case "a": damage = {elem: "fir", coeff: 14.8, total: true}; break;        case "c": damage = {elem: "phy", coeff: 10.4, total: true};        default: damage = {elem: "psn", coeff: 10.4, total: true};        }
if (conversationMd = this.chatConversationsCl.get(msg.sender)) {         conversationMd.set({
T.Heap.INIT_SIZE_ = 32 T.Heap.prototype.killHeap = function() {   this.handles_ = null   this.ns_ = null
for (var i = 0; i < platformsDetectors.length; ++i) {             if (platformsDetectors[i].regexp.test(navigator.userAgent)) {
switch (step) {             case 'm.login.password':                 const PasswordLogin = sdk.getComponent('login.PasswordLogin');                 return (
}          var data = null;     try {
Meteor.publish("mapLayers.tags", function() {   this.unblock();
if(scope.model.config.customViewPath) {             view = config.customViewPath;         }
if (!!filter) {     const examplePath = filter.field !== '@'
var nextToken = this._currentToken.slice(commentEnd + 3);
addItem: function(startTime) {     var startTime = startTime || this.timeline.time();     var item = this.getNextItem();
ol.geom.flatLinearRingIsClockwise =     function(flatCoordinates, offset, end, stride) {
return rc ? rc : ignoreReturnValue;     };
} else {                 dojo.removeClass(this.eventContainerNode, 'list-has-more');                 this.set('eventRemainingContent', '');
default:         var uncompressedData = compressedData;     }
import { Component } from 'react' import { Link } from 'react-router'
return __awaiter(this, void 0, void 0, function () {         var outputDataSize, interval, api, bars, bars;         return __generator(this, function (_a) {
fileHelper = require('./fileHelpers'),   winston = require('winston');   browserTimeVersion = require('browsertime/package.json').version,   os = require('os'),
for (var i = 0; i < j; i++) {         R = multiply(R, R)
} else if (prop === 'ref') {     debugger;    } else {
var projectionExtent = projection.getExtent();   var vectorSource = this.getLayer().getSource();   goog.asserts.assertInstanceof(vectorSource, ol.source.Vector);   var transform = this.getTransform(frameState, 0);
};     case types.CONNECT_SSH_SUCCESS:       return {
}               break             case 'm':
EG.Model = EG.CoreModel.extend(Em.Evented, {
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
R.assoc("counter", state.counter + 1, state)   ),   decrement: new Subject().map(_ => state =>     R.assoc("counter", state.counter - 1, state)
const CHAT_WINDOW_SELECTOR = '.chat .messages'; const URL_REGEX = new RegExp(/(http:\/\/|https:\/\/)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&
import {Actions, ActionConst} from 'react-native-router-flux' import {firebaseLogout} from '../firebase/firebase' import styles from '../styles/styles';
} else {             app.router.navigate(`task/${_.first(responses).taskId.id}`, {trigger: true});           }
it("should use direct xml file", function*() {         try
var item = function*(username) {         var user = yield* models.User.get({ username: username }, {}, db);         if (user)
if (typeof attr[key] === 'function') {       var arr = attr[key](values, 'attr', cntx, tag, key);       value = arr.join('');      } else {
if (options.activeClass) {                     item.classList.add(options.activeClass)                 };
return require(path);     } catch (ignore) {}
}         return;         var errorPrefix = "Error in " + JS_HANDLE + ".getSupportInfo(): ";         try {
this._line(ctx, from2d, to, this.axisColor);       var msg = this.zValueLabel(z) + ' ';       this.drawAxisLabelZ(ctx, from3d, msg, 5);
const tagsQueryString = aws.s3TagSetToQueryString(tags.TagSet);   debugger;   return aws.promiseS3Upload({
VariableManager.prototype.destroyVariable = function(variableName) {   if(!!this.variables[variableName]) {     delete this.variables[variableName];
setRequest: function (requestId) {                 currentRequestId_1 = currentRequestId_1;                 perRequestPipeName_1 = namePrefix_1 + requestId;
case "t6t":           replace_code = preset_mode_util("\{t6t\}", mode_str, origin_mode_str);           code = code.replace(/\{t6t\}/g, replace_code);
req = { url: url, method: method };       while (fn = match(req, routes, i)) {         i = req._route_index + 1;
}     for (var key in tile.glueImageryCredits) {         var value = tile.glueImageryCredits[key];         var value2 = this.visibleCredits.imagery[key];
ext, dir,         path, fs, zlib, url, pipe, CloudFunc, diffPatch, querystring, time,
}                         let newSelected = [];                         if(index < min) {
_trigger: tabris.Proxy._widgetTrigger({       Selection: function(params) {
active: false,   tabIndex: -1,
if (level == 'error') {         process.exit(winston.config.syslog.levels[level]);     }
'number': /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/,   'operator': /[\+\-\*\\\/:=\?&\|<>]/,   'punctuation': /[\{}[\]\(\):]/,   'boolean': /\b(true|false)\b/,
changes.metric4 = action.metric;                 case 5:                     changes.metric5 = action.metric;
var node = this       while(node = node.parentNode){         if(['svg', 'symbol', 'image', 'pattern', 'marker'].indexOf(node.nodeName) > -1) break         m = m.multiply(node.matrixify())
switch (opt) {             case "s":                 params.ServerName = args.optarg;                                     case "f":                 params.FilterName = args.optarg;
return closure;   };
var map = new Map();         var spy = jasmine.createSpy();         var observer = map.observeMapChange(function (plus, minus, key, type) {
if(sjs.use_canvas) {         for(name in sjs.layers) {             var layer = sjs.layers[name];
console.log("   jobscount:", ins.JobsCount.data[0]);     ranks = ins.Ranks.data[0].stdout.replace(/=>/g, ":").trim().split("\n");     var threatLevel = calculateThreatLevel(ranks);
{           control = controls[id];           if (control instanceof qx.ui.core.Widget) {             control.replaceState(old, value);
hash = hash.replace(/^#/, ''),                          window.onhashchange = null;
return instance;     let rules,         ruleMandatoryProperties;
if (matches.length) {                 for (i = 0; match = matches[i]; i++) {                     deps = runDepsRegExp.exec(match);
archive.fileActStream = pda.watch(archive)   archive.fileActStream.on('data', ([event, data]) => {     if (event === 'changed') {
}, [page]);   const modal = component => {     component = component;     setOpen(true);
var stream = new air.FileStream();  alert('made stream ');  stream.open(newFile, air.FileMode.UPDATE);
function LinkHeaderFactory($q, $extendReadOnly, $injector, $halConfiguration) {     return LinkHeader;
class SourceView extends EventChannel {     constructor(args) {         this._options = args;
label: '附近',         screen: 'zqc.Bootstrap',         icon: iconImages['tabbar-nearby'],         navigatorStyle: DEFAULT_NAV_BAR_STYLE,
return `${LTI_LAUNCH_URL}?action=${action}&objectId=${objectId}`;                 break;             case LMS.LEARNING_SUITE.id:
case FETCH_ENTRIES:     console.log("action", action)     if (action.error) {
MapStore.emitChange();     default:
} catch (e) {       ;     }
if (fragment instanceof Prismic.Fragments.Number) {                 return fragment.value
import { withServicesKnob } from '@bbc/psammead-storybook-helpers'; import AMPMostReadContainer from './Amp'; import CanonicalMostReadContainer from './Canonical'; import { RequestContextProvider } from '#contexts/RequestContext';
return  (       getExistingServiceForWindow(window, 'url-replace')); };
;(function() {  'use strict';
if (err) { return callback(err); }                 console.log(tmpFilePath); debugger;                 var stream = Fs.createReadStream(tmpFilePath).pipe(new PNG({ filterType: 4 }))
this.setSelectedElement(vParent);           };         }
}     else if (event.ctrlKey || event.metaKey) {}     else if (event.shiftKey) {
function animate(view, props, opts) {   debugger;   return new Promise(function(resolve) {
var options = map.config();         maptalks.Util.extend(options, {             'center' : map.getCenter(),             'zoom'   : this._getOverviewZoom(),             'scrollWheelZoom' : false,
maxWidth = Math.max( upWidth, downWidth ),                                  padding = 3,                 maxHeight = Math.max( upHeight, downHeight ),
codeValue = record.data.code;         say(nameField);         say(codeField);   nameField[0].setValue(nameValue);
compiled_object[className].info.abiDefinition = JSON.parse(contract.interface);   }   return compiled_object; };
if (message.error) {       console.log(message.error);       return event.sender.send('error');
switch(s) {         case 's': f.interval = n * 1000;         case 'm': f.interval = n * 1000 * 60;         case 'h': f.interval = n * 1000 * 60 * 60;     }
H.waitUntil('document.body', function () {      location.pathname = p;     });
this.setNumberOfOutputChannels(0, 2);         if (pan == null) {             var pan = 0.5;         }         this.pan = new AudioletParameter(this, 1, pan);     },
_this._hasScrolled = false;         }).bind('touchmove.mapify', function (e) {             _this._hasScrolled = true;
return inputName; };
import { Route, IndexRedirect, Link } from 'react-router'; import { layoutConnector, rightBar } from '../../Common/Layout'; import globals from '../../../Globals';
var oauthModule = require('./oauth')   , rest = require('../restler');
_unifyUndoStack()   if (undoStack[undoPosition - 1] && (undoStack[undoPosition - 1].name != street.name)) {
if (this.isPaginated()) {             return _.get(data, 'data', data);         }
this.events = []; }; util.inherits(Response, message.Message);
})(); ;; (function(){;;
var node_parent_id = classNames[key].substring(9);                 var parent_id = parseInt($("#"+node_parent_id).attr("class").match(/item-id-(\d+)/)[1])                 tobj[1] = parent_id;             }
console.log("sending", msg, "to", current_cid);     req = {"token": token, "args": {"cid": current_cid, "message": msg}};     d3.json("/api/v1/send-basic").post(JSON.stringify(req),                                        function(err, r) {
});     } else if (view == "profile") {     } else if (view == "follow") {
&& t <= y1 && y2 <= b);    break;   case 'intersect':
var instance       mix = typeof mix === T_STRING ? riot.mixin(mix) : mix
SVCConfig = reduxForm({     form: 'SVCConfig',
this.select.modifier = 'RECORDSET';   selectfn = this.select.compile(databaseid);      if(db.engineid && alasql.engines[db.engineid].intoTable) {
case 1:               case 'end':                 return _context6.stop();             }
if(!this.props.disabled) {       if (e.targetTouches.length == 1) {         const touch = e.targetTouches[0];         this._changeComponent(touch.pageX);
constructor: function(model, options) {       debugger;       var defaults = _.result(this, 'defaults');
{         var fireEvents = false;         this.getContentElement().setValue(
var regex = /((\w|\s)+)\(([^)]+)/mg       var result;       while (result = regex.exec(transform)) {         var split = result[3].split(/[,\s]+/)
marginBottom: 20,     fontSize: 20,     marginBottom: 20,     color: 'rgba(255,255,255,.8)'   },
} else {     window.addEventListener('polymer-ready', done);   }
}         var tok = this.nextToken();         if(tok && tok.type === lexer.TOKEN_BLOCK_END) {
that.emit('frame_navigation_state', my.frames[from], state);         console.log(JSON.stringify(state));       });
function showValue() {   console.info('Temperature: %s C', modelTemperature.data[modelTemperature.data.length-1].t);
}));     ctx.scope.set("getInfo", ctx.KRLClosure(ctx, function* (ctx) {       return {
var channelNames = [];             for (var i = 0; source != null && i < source.channels.length; i++){                 channelNames[channelNames.length] = {name: source.name + source.channels[i].name,
image: formData.hostImage,             command: !!formData.command.length ? formData.command.split(' ') : [],             memory: parseInt(formData.memory),
model.data_coParser.addHandler( function( sheet ){
var chunk;         while (chunk = this.read()) {           if (file.writable) file.write(chunk);
newState.devices = [action.data].concat(newState.devices);         break;         break;     case Constants.DEVICE_IMPORT_FAIL:
var config = editor.config;     var signals = editor.signals;     var rendererTypes = {
edit: {                 ngClick: "editCredential(\{\{ credential.id \}\})",                 icon: 'fa-edit',
import React from 'react' import { Box } from 'rebass' import styled from 'styled-components'
for ( var i=96; i<=105; i++ ) {   keyCodes[i] = ''+(i-95);
notification_span.setAttribute("class", "label label-danger");    msg_div.innerHTML = message;   }   default: {    msg_div.setAttribute("class", "message-text");
import _ from 'lodash'; import Immutable from 'immutable'; import EntityUtils from './EntityUtils';
oRenderLog.debug("Rerender Control '" + oControl.getId() + "'" + (uiArea ? "" : " (using a temp. RenderManager)"));    sap.ui.core.RenderManager.preserveContent(oDomRef,  true,  false);    rm.render(oControl, oParentDomRef);
function gammavariate(alpha, beta) {     SG_MAGICCONST = 1.0 + Math.log(4.5);     ainv = Math.sqrt(2.0 * alpha - 1.0);
error(`Unable to read the test directory: ${chalk.underline(relative(dir))}`);     process.exit(1);   }
return scope.$watch(attrs.odataPager, function(value) {       debugger;      data = value;       if (data === null || data === void 0) return;
},   rowGetter: function (rowIndex) {     return rows[rowIndex];   },
debugger;         var result = this.properties[property].match(value.sequence.head, true);
if (!!gaGlobalOptions.disableTooltip) {                 return;
broadcast.on('end', function (response) {     t.comment('Ending the broadcast stream');
if(tab.name === 'configuration') {           debugger;           return $scope.hasConfigurationIssues($scope.detailPaneConfig);
});      } else if (m = stream.match(/^\{([a-z_\-][\w\-]*)\}/)) {
export default class ErrorPage extends React.Component {   constructor() {     this.state = ErrorStore.getState()
break;     case typeof type === 'array':       if (isMethod) {
trigger(val, cb);     };   };
for (let i = 0; i < items.length; ++i) {         let item = items[i];         console.info(name, item.duration, 'ms');       }
var res = new this.constructor(this.__value__,false,this.__options__);         debugger;         addedArrays.forEach(function(arr){
leftPx += parseFloat($tab_t.eq(_i).outerWidth(true));      };      $(e).css({
}).call(this); ;
} else if (data.func == "rename_node") {         console.log("Tree - Before: rename_node, please-open = " + gPleaseOpen);         if (gPleaseOpen) {
} function postAuth(next, allowed){    var extensionOptions = angoose.config()[EXTENSION]  ;
this.showMismatch( f, txt );       };    };
const _ = require('lodash'); Promise = require('bluebird').Promise; const fs = require('../utils/fs');
import drawParallelCoordinates from "./drawParallelCoordinates"; import createContinuousRanges from "./createContinuousRanges"; import styles from './parallelCoordinates.css';
var parsedTemplate = jSmartParser.getParsed(template);       this.tree = parsedTemplate.tree;       this.runTimePlugins = parsedTemplate.runTimePlugins;     },
process.exit(1);     };   });
import { TestBed, async } from '@angular/core/testing'; import { PreviousStepDirective } from './previous-step.directive';
var cubeindex = 0;         var i;         for (i = 0; i < 8; ++i) {
_onLoginButtonFacebookTap: function() {         this._showLoadMask();         document.location.href = this._buildFacebookUrl(Kort.util.Config.getOAuth().facebook);     },
var run_async = true;     if ( ds.test_mode ) { run_async = false };     var results = false;
ratesval = 2;   }   else if(document.getElementById("star3").checked = true)   {
enabled.map(filter => {       if (!filter in this._modules) { return; }       const fn = this._modules[filter].execute;
iconSkin = "ico-ztree-md ";                         break;                     case "md":                         iconSkin = "ico-ztree-md ";
_observable = new Observable(),
export default zora()   .test('search directive should be able to register listener', function * (t) {     let counter = 0;
return new Promise((resolve, reject) => {       database.select('slug')
$('[data-toggle="tooltip"]').tooltip();     $("[data-job-go-live]").on('click', function(e) {         goLive(this);
else     var play = this.trackName;    if (play !== this.play) {
import { mapValues } from 'lodash'; import { getFromApi, getSingleItem, getAllPages } from 'Shared/api'; import { getCollection, getProject } from 'Shared/api-loaders'; import { useAPI } from 'State/api';
}       }       for (var key in options) {         record.options[key] = options[key]
token = token.toString('hex');   } else if(! token instanceof String) {    return Promise.resolve(new Error('Token must be a hex-string or a Buffer'));
$('#AreaFieldsWrapper').html('<input type="hidden" name="fieldChildAreaSlug" value=""><input type="hidden" name="fieldAreaSlug" value=""><input type="hidden" name="fieldArea" value="">');  $('#NewVenueForm').submit(); }
RunThreeWayTest(LargeUnsignedLiterals, function(module) {   return;    assertEquals(2147483648, module.a());   assertEquals(2147483649, module.b());
sum = 100         let progress = counter.PlacedAllocs / counter.DesiredTotal * 100         let remaining = 100 - progress         if (progress > 100) {
throw new Error("Value for " + data.val + " is not set");    return false;   }
for(var i = 0; i < this.population.length; i++){       this.population[i].score = null;
var Parser = require('./src/parser') var WebScraper = require('./src/web')
finished = true;     };     node = nodes.get(node).parent;
EntityInfo = connect(mapStateToProps, { fetchEntityReferences, fetchEntityTags }, null, { pure: false })(EntityInfo); export default EntityInfo;
const a = stream()       expect(a.scan(noop, 0)).toActivate(a)     })
var findFiles = require("./utils/find_files"); var path = require("path"); var PackageInfo = require("./package_info");
if (!('date' in props)) {     }       this.setState({
await attempt(async () => {     const updated = await addUsername({ name, id, secret })     console.log('UPDATED: ', updated)     res.json('ok')
expect(legendDom.style.position).to.equal('absolute');     console.log(legendDom.style);     expect(legendDom.style.maxWidth).to.equal('500px');
_createControlElement: function () {             debugger;             var me = this,
CalculationMatrix.prototype.extractAllBulkRecords = function (input) {     return null;     var calculationMatrixRecords = [];     var datapack = input.dataPackData;
reset_selection: function() {             this.model.set("selected", null);             this.selected_indices = null;             this.touch();
this.format = Format.select(format); };
return pitch2; }; window.ABCJS.transform.TextPrinter.prototype.extractOctave = function(pitch) {     return Math.floor(pitch/7);
var href = {         prop: $(this).prop("href"),         attr: $(this).attr("href")       };
var cell = column.cell || [formatters.identity];                             var props = {};                             var content;
config.compression = pair[1] || 'best';       case '-cl': case '--compress-list':         config.compress = pair[1].split(',');
const FakeTransaction = require('ethereumjs-tx/fake.js') const FakeMerklePatriciaTree = require('fake-merkle-patricia-tree') const ethUtil = require('ethereumjs-util')
if(as(value)){       return r.value();     }
date.setHours(date.getHours() + part);    }    if ( part = Number(to.date) ) {     date.setDate(date.getDate() + part);
var assert = require('assert'); var helper = require('./support/helper'); var request = require('supertest');
const _parseImageName = (image) => {     const match = image.match(/^(?:([^\/]+)\/)?(?:([^\/]+)\/)?([^@:\/]+)(?:[@:](.+))?$/);     if (!match) return null;
var se, temp, ops;    debugger;  if (se = this.subexpressions) {
throw new Error('Subscription was unexpectedly fulfilled.');       done();     }, (error) => {
if (slSecuritySchemes.hasOwnProperty('apiKey')) {   var name = null;   var content = {};
if (o.type == "group") {                         for (var name in o.options) {                             var o = options[name];                             if (o["requires-reload"]) {
var self = this;         var pids = common.copy(monitor.pid);;         monitor.shutdown(function () {
lineNumbers: true,             lineNumbers: true,             matchBrackets: true,
const IS_WINDOWS = require('os').platform().substring(0, 3).toLowerCase() === 'win'; const SKIP = (IS_WINDOWS ? '.git\\/' : '/\/\.git\ const Path = require('path');
mode: child.mode,      type: typeof child == "File" ? "blob" : "tree",      sha: sha     };
function setHandlers () {     Object.keys(EVENT_MAP).map(function(evt){      var evtName = 'on' + evt[0].toUpperCase() + evt.substr(1);      vimeoHandlers[evt] = (that.eventHandlers[EVENT_MAP[evt]] || EVENT_MAP[evt]).bind(that, that);
case "only":           debugger       case "first":
for (var i = 0; i < count; i++) {       debugger;       newPoints.push({
import React, { Component } from 'react'; import { AppRegistry, StatusBar, StyleSheet } from 'react-native'; import { Router, Scene } from 'react-native-router-flux';
if (arg.value.length = 1) {                                 var val = arg.value[0];
imagemin        = require('gulp-imagemin'),   spritesmith     = require('gulp.spritesmith'),   concat          = require('gulp-concat'),
Slack.prototype.setWebHook = function(url) {     return this.webhookUrl = url;     return this;   };
const d = util.castDate(propertyValue).getTime();                 const n = (d - min.getTime()) / (max.getTime() - min.getTime());                 properties[name][i] = n;             default:                 return propertyValue;
case 2:                     const target = childNodes[0];                     if (target.nodeName === 'AU-M' || target.nodeName === '#comment') {
if (keyboardEvent.altKey) {       modifiers |= UI.KeyboardShortcut.Modifiers.Alt;     }     if (keyboardEvent.metaKey) {
var tweenObj = state.add.tween(floatingTextGroup).to({                 x: pointsX,
o[id_key] = key;
function connecting(socket) {         ipc.of['embark'].on('connect',function() {           done();         });
}         this.id = id;         this.children = $($(element).get(0).children[0]);
var pendingCallback;   while (pendingCallback = this._pendingSubscribeCallbacks.shift()) {     pendingCallback(err);
var contentEncoding = req.headers['content-encoding'];     var options = options || {};     options.compiler = archive.compiler;
this.setState({excludedProjectsCount: originalNumResults - nonCollectionResults.length});     console.log(`excludedProjectsCount: ${this.state.excludedProjectsCount}`);
};      function prepareChoices(choices){       if(!_.isArray(choices.data)){
{                     var uploadChannel = Firebug.XPCOM.QI(channel, nsIUploadChannel);                     uploadChannel.setUploadStream(postData, "", -1);
modelFiles.forEach((file) => {     debugger;     let model = sequelize.import(path.join(__dirname, file));
{       Editor.clipboard.set(JSON.stringify(self.asset.toJSON()), "text");      }      catch(e){}     }
console.log('> Build project done.');   process.exit(0);    };
return instance;     let fragmentsToScheduleRules,         nextFragmentRules;
createAllTypes () {       console.log('createAllTypes')       let all = ''
return Boolean;         break;       case "Date":
for (var i = 0; i < cleanQuery.query[field].length; i++) {               debugger;               var term = cleanQuery.query[field][i];
return '\t'       break     case 'number':
console.log('in a playlist')     const {html, originalRevision, sections} = await fetchDoc(id, resourceType, req)
var previous = value.slice(0, index) + text + value.slice(index);     var pass = model.pass({$original: 'stringRemove'})._pass;     model.emit('change', segments, [value, previous, pass]);
clearMeasurementTimepointData(measurement._id, measurementData.timepointId);     }
if ( type === 'error' && !( 'error' in this.events ) ) {   throw new ve.Error( 'Missing error handler error.' );  }
var minor = parseInt(parsed.minor) || 0;             while (1) {                 var minorVersion = parsed.family + ' ' + major + '.' + minor;
if (typeof options.button === 'array') {                 options.button = options.button.concat(options.container);
return url;      if(urlregexp[1])     {         return urlregexp[1]     }
export function getTimeGridTop(time) {   var time = moment.duration(time)   var slotEls = getTimeGridSlotEls(time)
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-04\/cosmox-1334267072.swf",  admin_props : false,
it("scroll", function(){    xxx
case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
'<%= tmpDir %>/js/filters.js'     : ['<%= srcDir %>/js/filters*.js'],           '<%= tmpDir %>/js/modules.js'     : ['<%= srcDir %>/js/modules*.js'],           '<%= tmpDir %>/js/services.js'    : ['<%= srcDir %>/js/services*.js']
const errorTemplate = require("./errorTemplate"); const INTERPOLATE_RE = /{{(\w[\w\.]*)}}/g; const BODY_MAIN_PLACEHOLDER = "{{[__bodyMain__]}}";
return model.id ? store.find(model, options) : store.findAll(options);                 break;             case "create":
require('should'); const StorageService = require('../lib/storage-service'); const HttpTestUtils = require('./utils/http');
isAvailable: function(){    return false;     return !![].forEach;    },
idprefix = prefix + "_",       createCallback = function(n) {         modalDialogHelper.createModalCreateDialog(
return self.computeUnspent(self.cache.unspent, cb);     return   }
ProxyListener.prototype.on = function (callback) {     if (this.callbacks===null) { this.callbacks = [] };     this.callbacks.push(callback);
if (attendees && attendees.length) {     var attendees = _.filter(attendees, function (a) { return a.hasOwnProperty("gender") });     if (attendees.length) {
} catch (error) {     hasSupport = false   } finally {     return hasSupport   }
};             reader.readAsText(fileObj);         });
'no-restricted-syntax': [OFF],     'no-restricted-globals': [OFF],     'no-alert': [OFF],
const generateFunctionCall = (node, parent) => {   debugger;   const block = node.arguments.map(mapSyntax(parent)).reduce(mergeBlock, []);
$onInit () {         debugger;         this.urls.docsUrl = this.ovhDocUrl.getDocUrl(this.LogsConstants.LOGS_DOCS_NAME);
var defaults = {}       , options = $.extend(defaults, options)       ;
} else {                 var width = this.width;                 var height = this.height;             }
createLocalClone: function createLocalClone(dir) {         var clone = spawn('git', [ 'clone', path.join(GITROOT, dir), util.getLocalClonePath(dir) ]);         clone.on('exit', function(code) {
return "string";       break;     case "number":
$scope.projectName = $routeParams.project;     $scope.sourceURLPattern = /^((ftp|http|https|git):\/\/(\w+:{0,1}[^\s@]*@)|git@)?([^\s@]+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;     ProjectsService
var caplet = require("../../../"); var Thread = require("./thread"); var User   = require("./user"); module.exports = caplet.createModelClass({
trustedDomains: window.location.host ? [ window.location.host ] : [],     cacheBust: /MSIE/.test(navigator.userAgent) || /Trident\/[\d](?=[^\?]+).*rv:([0-9.].)/.test(navigator.userAgent) ? true : false,     forceHandCursor: false,
{         var innerElement = new qx.html.Element();
var getEmployee;         var transferArray = [];         var parallelTasks;
}     var invalid = _.find(obj.geometries, function (geometry) {       return !isGeoJSON(geometry);
typeDB = 'Device';             case 'Sensor':                 typeDB = 'SensingDevice';
if (!search instanceof RegExp && match[0].length < search.length) {       tail = match[0];
this.session_keys = clone(obj.session_keys) || [];    for (var idx = 0; idx < this.session_keys.length; idx++)     this.session_keys[idx] = new AttrList(this.session_keys[idx]);
var grandchild;                                  for(var i=0, len=child.filters.length; i<len; ++i) {                                      grandchild = child.filters[i];
redisSub = require('../web/core/redisSub'),     orch = require('../orchestration/orchestration.api'),     messages = require('./messages');     global = require('./global');
if (!name) return children;     if (!style) style = () => ({});
self[key] = other[key];     };   }
return false;                         };                     };                 }else{
"class": "modal-input-xlarge",                 "default": "\{\}",                 awPopOver: "<p>Enter variables using either JSON or YAML syntax. Use the radio button to toggle between the two.</p>" +
chunks[0] = require.tlns[chunks[0]] || chunks[0];     path = chunks.join("/") + ".js";
if (!filepath.match(imageFileRegexp)) {    throw new Error("asset \'" + spriteNames[i] + "\' cannot be opened!");   } else {
for(var i = 0; i < entities.length; i++){
return mockResult(request, mock.value);         } else {         }
if (true || !revisions.length || (revisions.length < 2 && revisions[0].debug_isJustTitleChange)) {     return yo`
this.options.geocoder.bind("geocodingError", function(e) {       var dlg = new cdb.admin.GeocoderMessageDialog({         style: "polygon",
message: 'New workspace name:',       validate: s => /^(\s*|\s*[\w\-]+\s*)$/.test(s) || message,       filter: s => s.trim(),
try {     var useSourceURL = (Function('   } catch(e) { }
var bproto = HTMLTextAreaElement.prototype     function newSetter(value) {          setters[this.tagName].call(this, value)
if (cluster.isWorker && !exclusive) {       function onHandle(err, handle) {         if (err) {           var ex = exceptionWithHostPort(err, 'bind', ip, port);           self.emit('error', ex);
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
.$on("initNodes", function(nodesStr) {         console.log(prefix + "On initNodes.");         let nodes = CircularJSON.parse(nodesStr);
return vtkImageMapper.SlicingMode.Z;       break;     case 'L':
this.lookahead(1) === "Rbracket") {               this.advance();               this.advance();               var right = this.parseProjectionRHS(this.bindingPower.Star);               return {type: "Projection",
throw new Error('unSupported Layer Type');                 break;         }
debugger             window.addEventListener('showAdvertising', handler);
dom.waitDomReady(document.body, function () {
var splittedDate = splitOldDate(oldLabDate);   var oldLabDay = splittedDate.day;   var oldLabHour = splittedDate.hour;
&& event.state_key !== $scope.state.user_id  && "join" === event.membership) {                     debugger;                     var notification = new window.Notification(
contracts = '';             Portfolio.setSumPurchase();             $.each(data.portfolio.contracts, function(ci, c) {
selector._id && LocalCollection._selectorIsId(selector._id) &&      _.size(selector) === 1); };
RESET: {         any: [/^\!reset$/],     },
}   for(var i in themesOrder) {    var t = themesOrder[i];
while (newOrigin + offsetShift < 0) {     newRoot = new VNode(newRoot.array.length ? [, newRoot] : [], owner);     newLevel += SHIFT;
look[2] = value[2];                     this._scheduleUpdate(0);;
} else {                 console.log("Ignore individual feature outside region. Feature score " + feature.score + ". Accumulated score " + score + ".");             }
getReposRelease: (reposOwner, reposName) => {         return `${host}repos/${reposOwner}/${reposName}/tags`
var opts = {   mongoConfig : app.get('mongoConfig'),
var ComponentWithRoute = function (_Component) {         babelHelpers.inherits(ComponentWithRoute, _Component);
$scope.rotationStyle = $renderKey.getKeyRotationStyles;   function renderKey(key) {
assert.strictEqual('ABC1', 'abc1'.toUp());  });  it(`format`, function*() {   assert.strictEqual('abcdefg1', 'a{0}c{1}e{2}g{3}'.format('b', 'd', 'f', 1));
return this.state.activeIntervals.bars   }   get section () {     this.state.activeIntervals.sections   }
console.log(errorThrown);         debugger;         alert('gitub auth error');
os.gadgetPrefs_ = new window['gadgets']['Prefs'](); };
var sample = inputSamples[i],                     pts = sample.pts,                     delta = pts - nextPts;
import { last, groupBy, sortBy } from 'lodash'; import * as ss from 'simple-statistics'; import './qq.css';
e.preventDefault();                 var txt = elem$.text();                 txt = decode(txt);                 if(options().validate(txt)) {
exports.signup = function(req, res) {  debugger;
var position = {     top: span.offsetTop + parseInt(computed.getPropertyValue('border-top-width')),
if (test) {         return str.replace(new RegExp('\.' + test + '$', 'ig'), '');     }
}     usage_log.push(log_event);   });
_this.dragZoomLayer.dragInteraction().mouseFilter(function (event) {                 return !Boolean(event.altKey) && event.button === 0;             });
var fightCost = 10 * 3;                     maxLength = (maxLength - fightCost / movementCost) / 2;                 case this.CRITICAL_PATH_TYPE_CAMP_TO_PASSAGE:
longProgram += '1'; debugger;
pro.close = function() {  if(!!this.closed) {   return;
this.min_line = 1000;         for (var i = 0; i < notes.length; ++i) {           var note = notes[i];           this.min_line = Vex.Min(note.getKeyProps()[0].line, this.min_line);
var jsonBody = body   if(err){   }else if (res.statusCode === 200) {
$.subscribed = function () { return subscribed; };   }(jQuery)); });
run: function(target, method ) {     var options = this.options,         ret, length = arguments.length;     this.begin();
if (handler && typeof handler === 'function') {             try { signal.disconnect(handler) } catch (e) {}         }
this.columnsRHSIdx = {};     };
cb(null, tpl);   }); };
reject(`Error! ${err}`);         process.exit(1);       } else {
console.log('Shutting down appium session...');   this.device.stop(function() {
if (goog.isDef(options.hoverCallback)) {                 var origHoverCallback = options.hoverCallback;
startForm: function(sessionId){             debugger;             var fetchingForm = FormplayerFrontend.request("getIncompleteForm", sessionId);
},   catchup: function(now, frame)  {
run_spec(__dirname, ["flow"]); run_spec(__dirname, ["babel", "typescript"]);
var total = 0;             var realCount = 0;             var values = (this.graph == 'Polygons') ? stats.graphsPolygons : stats.graphsBuild;
case 51:             _iteratorNormalCompletion = true;             _context.next = 7;             break;
expect(cases).quailGetById('assert-1').to.have.quailStatus('passed');     expect(cases).quailGetById('assert-2').to.have.quailStatus('failed');   });
if (args = helpers.getEndpointFromProcessArgs()) {   access_token = args.access_token;
Kekule.LOCAL_RES = true; Kekule.Localization.setCurrModule("widget");
if (typeof timingDict.timingFunction === 'string') {          throw 'createFromString not implemented';     this.timingFunction = TimingFunction.createFromString(timingDict.timingFunction);   } else {
},     },     assertions: (err, feeWindows) => {       expect(err).toBeFalsy();       expect(feeWindows).toEqual({});     },   });
}, function() {});  };  $scope.returnFromAddConnection = function(message) {
payload = args[1];         } else if (args.length == 1) {             var callback = args[0];         } else {
(value).forEach(function (item) {      console.log(value);         str_ += item[0] + ':' + item[1] + ', ';
const { getFavicon } = require("sdk/places/favicon"); const { promised, defer } = require('sdk/core/promise'); const { Cu } = require('chrome');
var ns = data.ResourceRecordSets.find(t=> t.Type === 'NS').ResourceRecords.map(x=> x.Value).join('\n')         console.log(chalk.dim.cyan.underline(ns))         callback()
robot.emit('telegram:invoke', 'sendPhoto', { chat_id: res.message.from.id, photo: fs.createReadStream(outFilepath) }, function (error, response) {           if (err) { console.log(err) };         });
const { isVPlusDottedVersionAtLeastOne } = require('./helpers/validators'); const isBowerPrereleaseVersion = Joi.string().regex(/^v\d+(\.\d+)?(\.\d+)?(\-?\w)+?$/); const t = new ServiceTester({ id: 'bower', title: 'Bower' });
if (!this.element) {     console.log(this.filePath);     this.element = new Dom().parseFromString(
},     setContractsByAddress(result) {debugger       if (result&&result.success) {
if (!!~modelSchema.required.indexOf(prop)) {                         options[prop] = defaultValue;
const MongoServer = require('mongodb').Server; const util = require('util');
if ($('#ace-editor').length) {         var queryEditor = new QueryEditor();     }
};         var draw_triangle = function (ctx, outer, width, height, angle) {             ctx.beginPath();
var message     if (message = stanza.getChild('html', xhtmlIm.NS_XHTML_IM)) {         content = message.getChild('body', xhtmlIm.NS_XHTML)
var x = require('x');
Runtime.runCLI(argv, [`Jest REPL v${VERSION}`]); };
App.start();
var newChild = super_.insertBefore.call(this, newChild, refChild);
app.on('tick', function() {     width = app.engine.width     height = app.engine.height     app.camera.right = width
}   else if (_.isNull(b) || _.isUndefined(b)) {}   return [a,b];
location.reload();                     default:                         return true;                 }
control.next(message.body);           case STDIN:             stdin.next(message.body);
} exports.getStack = exports.getStack;
if (attrs.length !== 0) {           debugger;
}                     break;                 default:
function onCleanupListeners() {   console.debug("DETACHING CONTENT SCRIPT", window.location && window.location.href);   try {
import { jsx, Flex, Styled } from 'theme-ui' import Button from '../Button'
function nl_langinfo (item) {
var mime = require('send').mime; var basename = require('path').basename; var etag = require('etag');
Map.propTypes = false ? {} : {   center: _infact.PropTypes.array,
var llx = res[1][0][0];             var lly = res[1][0][1];             var urx = res[1][1][0];             var ury = res[1][1][1];
} catch (err) {         errorHandler.errorHandle(`processContract ${address}`)(err)         process.exit(1)     }
}         ApplicationCacheAgent.getManifestForFrame(frame.id, this._manifestForFrameLoaded.bind(this, frame.id));     },
if (!(/^\s*$/).test(sSplit[i])) {           regexes.push(new RegExp("(^|\\s|;)" + sSplit[i].replace(/\s/gi, '').replace(/([\(\)])/gi, "\\$1").toLowerCase().replace(";", ";?"), "gi"));         }
} WebInspector.OverridesSupport.NetworkThroughputUnlimitedValue = -1; WebInspector.OverridesSupport.NetworkConditionsPreset;
title: 'Edit Discord Activity',         setting       })       break;
} else {         console.warn('[l10n] could not find argument {{' + arg + '}}');         return str;
sourceJs.onaudioprocess = function(e) {                     debugger;                     array = new Uint8Array(analyser.frequencyBinCount);
pc.extend(pc, function () {     var SAMPLE_COUNT = 15;
logDatasetState(dataset) {       debugger;       if (DEBUG) { console.log('dataset =', dataset); }
if (cap = this.rules.strong.exec(src)) {       src = src.substring(cap[0].length);
case 'github':         const token = await localforage.getItem('gh-token')         const owner = userName || state.oauth.authenticatedUser.login
logger.debug('claimModuleAccess', moduleName, mode);       if(! moduleName in modules) {         throw "Module not defined: " + moduleName;
var app = getApp() const product = require('../../utils/product.js')
this.onDecoded.dispatch(this);         };         if (this.pendingPlayback && this.game.cache.isSoundReady(this.key))
for (var [key, value] of pages) {       if (value = "") {         pages.delete(key);
}       return files(_callService, account_id, thread_id);     }
function (conf, state) {  debugger;          var me = this;
if (e.venue.country === teamData.teams[0].country) {                                     debugger;
Commands            = require("command/Commands"),         KeyBindingManager   = require("command/KeyBindingManager"),         NativeFileSystem    = require("file/NativeFileSystem").NativeFileSystem,
side : THREE.DoubleSide   });;
} else {             $('#' + this.options.id + '_content_left_bottom').css('display', 'none');             $('#' + this.options.id + '_content_left_sum_bottom').css('bottom', 0);         }
}   console.log(srcPos);   console.log("/\ /\ /\  srcPos / pos  \/ \/ \/");   console.log(pos);                   fillOptions.fillmode = trace.fill;
}); var testFiles = [
}             debug.log(userGroupIds);             return false;             if (userGroupIds.length > 0){
return this.block();       break;       case ';':
var Backbone = require('backbone'); var _ = require('underscore'); var template = require('./dropdown.tpl');
function checkpassword(c,data) {    if (data.substring(3,data.length-2) == config.serverpassword) {
React.DOM.div(null,                  _.first(this.props.children)             ),
xtype: 'fieldcontainer',                     fieldLabel: message.msg('workflow.common.logDelimiter'),                     layout: 'hbox',
state = { ...state, cardOutput: [...state.cardOutput, payload.msg] };         case CARD_CLEAR_OUTPUT_WINDOW:             state = { ...state, cardOutput: [] };
var value;          var options = this.__availableOptions;                 var Type = qx.lang.Type;
focusedWorkspaceComponentList: [],    isElectron: (fin.container && fin.container === "Electron"),    initialAlwaysOnTop: finsembleWindow.windowOptions.alwaysOnTop,
}   var styles = params.kmlStyles[params.placeMark.styleurl];   var style;
if("syncMode" in kwArgs ? kwArgs.syncMode : this.syncMode){     rpcConfig._sync = true;    }
var time_string = Eventbrite.prototype.utils.formatTime( start_date );       var date_string = start_date.toDateString();       var html = '';
href   : "/content/" + ctrl.schema.key + "/" + data.key,                                     href   : "/content/" + ctrl.schema.key + "/" + data.key,                                     config : m.route
import "./text.css"; import React, { Component } from "react";
Spectra.fn.prototype.equals = function(other) {     color1 = this;     color2 = other;
}   while (true) {     oldIndex = index;
var blocksProcess;  var blockLogic;  var blocks;
output: {     path: path.join(__dirname, '..'),     filename: './app/main.prod.js',   },
return destination;   };
const {FunctionalError, FRUnexpectedError, FRInputError, FunctionalUserError} = require('./errors') const {red, green, white, grey, yellow, magenta} = require('chalk') module.exports = function _init(FR) {
case 'manuscript':       return 'unpublished';       break;          case 'paper-conference':
var oClone = sap.ui.core.Element.prototype.clone.apply(this, arguments);     for ( var i = 0; i < aButtons.length; i++) {    var oButton = aButtons[i];    oButton.attachPress(this._buttonSelected, this);
setToken: function(token) {         if (debug) { console.log("MemoryUserStore.setToken", token); }         _token = token;
static addEvt(node, evtName, fn) {          debugger          node.addEventListener(evtName, fn, false)
let methodsArgs = arguments;     return format.replace(/[{\[](\d+)[\]}]/gi, function (value, index) {         let argsIndex = parseInt(index) + 1;
if (this.controlMode_ = "pannorama") {         pos_[9] *= factor_;
} else if (where = "end") {         var T = String.prototype.replace.call(S, /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/g, '');
_this = this;         this.switchSound = SoundCache.getSound("https:     };
import { action } from '@storybook/addon-actions'; import { withKnobs, text, boolean, number } from '@storybook/addon-knobs'; import { withInfo } from '@storybook/addon-info';
path = path.substr(1);     var file = ["tutum.yml", "docker-compose.yml"];     request.get("https:
const Util = G6.Util; document.body.appendChild(Util.createDOM(` <div>
documentDrag : false,
_lastTrace = this;   console.log(this);  }
store = vmDetail.getStore(),              tokens, binding, highlight, store, root, targets, highlighted;
}         case DELETE_SUBREDDIT:             return state.filter(v => v.title !== action.subreddit);
$( "tbody button:contains(18)", element ).simulate( "mousedown" );   TestHelpers.calendar.equalsDate(    element.calendar( "valueAsDate" ),
throw("incorrect value '"+newProperties[c.name]+"' of type "+DS.typeOf(newProperties[c.name])+" passed to column with type "+c.type);               };               c.data[rowIndex] = newProperties[c.name];
child = children[i];       if (JS.isFn(child)) {         child(new this.klass(element));
opts = $.extend({fade: false, gravity: 'n'}, opts || {});         var tip = null, cancelHide = false;         this.hover(function() {
Meteor.startup(function () {
this.console('debug', 'Moving style from', source, 'to', destination)     debugger     const sheets = this.settings.stylesheets
programMapTable,     counter = 0,     parsePes = function(payload, pes) {
sweatshirts: 'sweatshirts',         sweatshirts: 'sweatshirts',         sweatshirts: 'sweatshirts',         sweatshirts: 'sweatshirts',         sweatshirts: 'sweatshirts',
$scope.result.results = $scope.result.results.concat(res.data.results);       $scope.result.next_url = $scope.result.next_url;     });
for (var i = 0, max = objectsWithBehaviors.length; i < max; i++) {   object3d = objectsWithBehaviors[i];   object3d.updateBehaviors(deltaTime, self);  }
onload: function(responseText) {                 if (match = /cId=(\d+)/.exec(responseText)) {
actionList.on('change_' + actionList('getUID'), function (data) {       if (self.caret_ === null && typeof self.prevCaret_ != null) {         self.caret_ = self.prevCaret_;       }       self.handleComplete_(data.data);
});        return message.reply("Audit exported to: "+url+filename);       setTimeout(function(){          fs.unlink(dir+filename, (err) => {
doRequest (params) {     debugger     const callback = this.callback
console.error('Cannot open', filePath + ':', ex.code === 'ENOENT' ? 'no such file' : ex.message)     process.exit(1)   }
var MAX_DISTANCE = 5;     var allowDensify = ( allowDensify === undefined ) ? true : allowDensify;
const AngularTemplateCache = require('../ingredients/AngularTemplateCache'); const HTMLHint = require('../ingredients/HTMLHint'); const ESLint = require('../ingredients/ESLint'); const Uglify = require('../ingredients/Uglify');
attempts: 'relatedentities.TEZ_TASK_ATTEMPT_ID',   vertexID: 'primaryfilters.TEZ_VERTEX_ID.0',   dagID: 'primaryfilters.TEZ_DAG_ID.0',
} else {         return qx.ui.basic.Image.prototype.setSource.call(this, vSource);       }
xhr.get('/gdc/projects/'+ projectId +'/styleSettings').then(function(result) {             debugger;             d.resolve(result.styleSettings.chartPalette.map(function(c) {
value.primaryKey = this.primaryKey;         console.log("setting the docs  : ", value);         this.docs = value;
am.report({evtName: 'open', 'value': 1});     if (!window.chrome) {
app.factory('rsyncMetaData', function (Restangular) {     return {
var ignore = token.ignore;          token.ignore = token.ignore;     this.i = this.res.length;
profile['layers'] = layersJSON;         } else if (maptalks.Util.isArrayHasData(options['layers'])) {             layers = options['layers'];
var finalizeFns = [];     var completed = {};
for (var c = Multiplicand.length-1; c > (-1); c--) {             var tp = (Multiplicand.charAt(c) * SingleDigitMultiplier) + parseInt(car);             if (tp < 10) {
export default zora()   .test('should traverse a tree (going deep first)', function * (t) {     const tree = {
normalizer.contentDocument.write(markup);           var normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;         }
initSystemJs(config);     expect(config.files[0].pattern).toMatch(/[\/\\]typescript[\/\\].*?[\/\\]typescript\.js$/);     expect(config.files[1].pattern).toMatch(/[\/\\]es6-module-loader\.src\.js$/);
import Schemas from '../schemas' import { selectDatasetByPath } from '../selectors/dataset' import { newLocalModel, updateLocalModel, removeLocalModel } from './locals'
if (err.cause && err.cause instanceof Error) err = err.cause     if (notfound[err.code]) return
escapeForRegExp(str) {     return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');   },
post_error: function(msg, dest) {         debugger;         if (typeof msg === 'string')
export class ChainRejAction extends Action{   constructor(mapper){ this.mapper = mapper }   rejected(x){ return this.mapper(x) }
return merge.smart(...this.configs)     return this   }
import React, { useState } from 'react';
var audioSprite = new Audio([   { src: 'assets/pong.mp3' },
if ((containerLeft + tooltipXPos) < 4) {                 var adjustment = Math.abs(containerLeft + tooltipXPos) + 4;                 tooltipXPos += adjustment;
function checkAuthorization() {     return true;   }   function getAvailableWikis(data) {
list.push(i); }; var err = new Error();
$('#preview').html('');    if (!$(document.body).hasClass('mobile')) $input.focus();   }
text = execute_python(this,text);             var text_and_math = IPython.mathjaxutils.remove_math(text);             text = text_and_math[0];
operator = '<=';       break;     case Blockly.Language.logic_compare.MSG_GT:       operator = '>';
str,   '\d{3}-\d{2}-\d{4}',   config || null
case "D": return slash;       default: return tlsq;     }
describe('Android', function(){     describe('#init', function(){
function initializeChartGroup(group) {         group = group;         if (!group)
context.history().on('change.intro', null);             curtain.reveal('.tag-pane', t('intro.points.close'));         }
var path = require('path'); var express = require('express'); var morgan = require('morgan');
events = events.concat(['click','mouseover','mouseout']);    for (var i=0, il=events.length; i<il; i++) {     (function(eventName) {
import { EXPAND_COLLAPSE } from '../constants'; import { AxisType, toAxisType } from '../Axis'; export default (
deferred.reject();              });;
import React, { Component } from 'react' import { Link } from 'gatsby' import UserLinks from './UserLinks'
const resized = tf.image.resizeBilinear(tensor, [256, 256]).toFloat()                  resized = tf.scalar(255.0).sub(resized)
const initMarkdownEditor = () => {     const simplemde = new SimpleMDE(); };
this.set(`block.meta.checkboxes.${key}`, !oldContent);       debugger;       this.get('onBlockMetaReplacedLocally')(
describe('Cylon.Adaptors.Pebble', function() {   var pebble = new Cylon.Adaptors.Pebble;   it("exposes a 'commands' function containing all adaptor commands", function() {
function isChoice(line) {   return /^[-\*] (.+)$/.test(line); }
email: function(fieldValue) {      var emailReg = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,10})+$/;      return emailReg.test(fieldValue);
throw new Error(message);     return false;   }
} else if (v.band === "meta") {                 var cts = [];                 for (var key in d) {
var epf = new Set(e.profiles)         profileSet = new Set([...profielSet, ...epf])       }
lobby: 'Entrée',           openArea: 'Open space',           staffRoom: 'Salle du personnel',
} catch (e) {           if (e.code = 11) { this.errors.push(VideoJS.errorCodes.videoNotReady); }         }
var _ = require('underscore')   , $ = require('jquery')   , angular = require('angular'); module.exports = AdminEventEditFormFieldsController;
for( var ii = 0 ; ii < friends.length ; ii++ ){     var actor = AllTrustActors[ friends[ ii ].id ];     if( !actor ){
function setStatus(message) {   var status = document.getElementById("status");   status.innerHTML = message; };
else       var e = editor.validate();       if(e) errors[name] = e;
if (android) {         debugger;         const mainDirectory = getAndroidMainDir(platformDirectory);
this.pool.acquire(function(err, connection) {     if(err) {            }
apos.log(field);           if (field.required === true) {
entry.baseType = 'object';             entry.dataType = typeMap(entry.baseType,false,{});;             let contentType = Object.values(response.content)[0];
}           } else if ( noop ) {           } else {             throw '!';
test('user bind Int', function (test_done) {     var params = {
build() {     let plugin = this;     let inputPath = this.inputPaths[0];     let outputPath = this.outputPath + '/' + this.options.outputPath;
var core      = require('../../modules/es6.date.to-string')   , $toString = Date.prototype.toString; module.exports = function toString(it){
console.warn('This should not happen.')       };     } else {
return false;     console.log(user);   }
if (functionCode == 5) {         var address = requestBuffer.readUInt16BE(2);         var state = requestBuffer.readUInt16BE(4);
var origin = loc.protocol + '     for (i = frames.length - 1; i >= 0; i++) {       try {
function check_mtime(resource, mtime) {   var mtime = fs._toUnixTimestamp(mtime);   var stats = stat_resource(resource);
throw new uError('EMPTY_RESULTS', err);             break;         case 5000:
var time_array = str.match(/^(?:(\d+).+\s)?(\d+)[h:]\s?(\d+)[m:]?\s?(\d+)?[s]?(?:\.\d{1,3})?$/);             if (time_array) {
this.toggle(x, y)         {
deps: ['d3']         },         'qe-utils': {             deps: ['jquery']         },         'ipv6': {
}   } else if('type' === 'ApexComponent') {     return {
var dataNameArray = fastCopy($stateParams.listName).split('$');    if (dataNameArray.length < 3 || dataNameArray.length > 4) {
return 0x12000001;         break;     default:
getter: function(node){          return !!node.firstChild ? 'hasChildren' : '';        }
function onChangeBezier(e) {     this._ease.points = e.detail.points; };
match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;                     break;                 }
return 'H';     break;     case 'partlycloudy' :       return 'H';
console.log('Uncompressing', inputFile, 'to', outputFile, '...') decoder.on('end', function () {
REPL.on('close', () => process.exit(0)); REPL.on('SIGINT', () => {  console.log();
return doTransition(this, arguments);   },   intermediateTransitionTo: function(name) {     return doTransition(this, arguments, true);
console.log('total: %d', total);     process.exit();   });
didConfirmSelection: (keyBinding) => {         debugger         this.hide()
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
var pos = parseInt(pos),   spineNodeIndex = spineNodeIndex + 1,    cfi = '/'+spineNodeIndex+'/';
var tie; for(var t = 0; tie = schema.tie[schema.ties[t]]; t++) {     var name = '';
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
BlindsHTTPAccessory.prototype.httpRequest = function(url, methods, callback) {     if (!url) {     }
} else {                 console.log('[' + Signature + '][' + this.GUID + ']:: Next command does not support: ' + message.command);             }
import expect from 'expect.js'; import sinon from 'sinon';
fire();         };       });
console.log(JSON.stringify(result));         process.exit(0);     }
return;     var filteredItemSelectionDialog = new WebInspector.FilteredItemSelectionDialog(new WebInspector.OpenScriptDialog(panel, presentationModel));     WebInspector.Dialog.show(relativeToElement, filteredItemSelectionDialog);
while (true) {       var matches = query.match(/comments(=|:|<|>|<=|>=)([0-9]+)/);
return value;       break;      case 'phonenumber_countrycode':
ol.geom.MultiPoint.prototype.removePoint = function(point) {     goog.array.remove(this.points_, point); };
i = y * 10 + x;             var a = board[i];             if ((a & 14) != P4_PAWN)
return Ember.RSVP.reject(data.error);       } else if (Ember.isEmpty(data.hits)) {         return Ember.RSVP.reject('No results.');       } else {
throw Error("Not a JPEG file");       return;     }
while(1){     i = this.contents.length - 1;     if(this.contents[i] instanceof dd._HtmlTextNode && this.contents[i].isEmpty()){
onDoubleClick: PropTypes.func,   editLaneTitle: PropTypes.bool,   t: PropTypes.func.isRequired
import {State}      from 'react-router'; import FileTree     from '../upload/upload.file-tree.jsx'; import Spinner      from '../common/partials/spinner.component.jsx';
case 12:                                 if (pwHashDoc) {                                     _context.next = 20;                                     break;
if (s = this._serializeWhere(obj._where)) {             sb.indent = 0;
.then(op => op.finish())       .then(() => process.exit(1), () => process.exit(1));   });
const DUMMY_STATE = {} let priority = 0
dispatch({         type: !!data.id           ? 'accountAdmin/update'
}    if (m = block.optionlist.exec(rst)) {     rst = rst.substring(m[0].length);
if( deltaPx = _parsePx( delta ) ) {      return ( ref + axis.getRelVal( deltaPx ) );
app.crypto.Crypto = function(window, util) {  'use strict';
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {   }
var _ = require('underscore'); var BBPromise = require('bluebird');
"use strict";     var numberOfRomanNumeralMaps = 13;     var romanNumberals = {
view : function (ctrl) {         debugger;         return m('.fb-breadcrumbs', m('ul', [
export default class DatArchive {     constructor (url) {     }
run().catch(console.log.bind(console));
import invariant from 'invariant'; import pick from '../utils/pick';
return false;           break;         case this.OPERATORS.dateOperatorNotInTheLast:
this.tree._init(entity.body); }; module.exports = DERDecoder;
};                     if (tType !== 'detail') {                         function setRowField() {                             $timeout(function () {
res += '>';                 if (content = json.content) {                     if (Array.isArray(content)) {
$(document).ready(function () {      'use strict';
};  var support = new Support();
document.documentElement.classList[action]("vimiumFindMode");     action === "add" ? DomUtils.UI.addElement(this.styleIn) : this.styleIn.remove();;   },
describe('flickr.photosets.getPhotos', function () {  it('requires "api_key"', function () {   assert.throws(function () {
}       break;     case Actions.REQUEST_UPDATE_POST:
var menuItems = [];     var labels = (player.qualityLevels) || {};     for(var i = 0; i < player.qualityLevels().length; i++)     {
import Cursor from './cursor' import TextStyle from './text-style' import Debug from './debug/index' import BottomModal from './util/bottom-modal' import ZxDialog from './dialog/index'
chrome.runtime.sendMessage({ type: 'icon', active: true })   })
var classSet = require('react/lib/cx'); var assign = require('react/lib/Object.assign');
}}, function (err, result) {                 CONFIG.promptRunning = false;                 if (!result) { return Dialog.show(); }
if (_this.disabled) {           jQuery('.qtip' + _this.windowId).qtip('hide');           return;         }         jQuery('#' + _this.osdViewerId).parents('.window').find('.qtip-viewer').hide();
}     var results = results.sort(function (a, b) {       return b.hScore - a.hScore
this.terminalPunctuation = "\.\!\?";   this.terminalQuotes = this.rightSingleQuote + this.rightDoubleQuote;
expect(_.isEqual(converted, {       string : "converted",
console.log('keyInfo', keyInfo)       dispatch(addWallet(wallet, keyInfo))
startPlugin : function(sandbox) {         debugger;         this._sandbox = sandbox;
'use strict'; require = require('module')._load('./AgentLoader'); var fs = require('fs');
var LabView = lab.view.LabView; var NF = lab.util.Util.NF; var NF5 = lab.util.Util.NF5; var ODESim = lab.model.ODESim;
disabled: { ignore: 1 },  progress: { bindable: 1 },  indeterminate: { bindable: 1 } });
});       break;     case Actions.REQUEST_CREATE_POST:
opts.is3pcc = !opts.remoteSdp;     opts.dtls = opts.dtls ;     var family = opts.family || 'ipv4' ;
import React from 'react'; import ReactDOM from 'react-dom'; import $ from "jquery";
function Builder({ formData, updateFormData, showBuilder, toggleBuilder, editFormData, setFormData }) {   return null;   const { register, handleSubmit, errors = {}, watch } = useForm();   const [editIndex, setEditIndex] = useState(-1);
const createdFile = filePath.replace(process.cwd(), '').replace(path.sep, '')     console.log(`${this.icon('success')} ${this.chalk.green('create')}  ${createdFile}`)
}   return resul;t  }
nLi.innerHTML = '<label>Time to Recycle:</label>';    var span = nLi.appendChild(document.createElement("span"));    span.innerHTML = 0;
picker = input.data('clockpicker');         ok(picker, 'clockpicker is initialized');         input.focus();         ok(picker.popover.hasClass(place), 'place at ' + place);
if (err == null) {       console.log(decoded)       ops.verifyLogin(req.cookies.email, req.cookies.sessionkey, function(user){
Object.defineProperty(Component.prototype, 'componentWillMount', {     get: function componentWillMount(...args) {       let state = State.getComponentState(name);
throw 'ImageType should be string in SidebarTitleVo';                  return false;              }
DrawingBoard.Control.Navigation.prototype = {  saveHistory: function () {
if (node.isOnline()) {           console.info('js-ipfs node in the service worker is ready')           resolve(node)
div.style.cssText = 'font-size: 1rem;';             return false;         return (/rem/).test(div.style.fontSize);     },
Program.prototype = Object.create (Base.prototype); addMixin (Context.prototype, OwnerMixin); Program.prototype.classDescription = CLASSNAME;
"level": 15,      "short": "Shackleton, the Mayors famous canine",      "description": "",
this.radius_ = Math.min(parentBounds.width, parentBounds.height) / 2;   this.iRadius_ = anychart.utils.normalizeSize(this.innerRadius_, this.radius_);   if (this.iRadius_ == this.radius_) this.iRadius_--;
}); ; Prism.languages.clike = {
}).catch(function(err) {     throw err     res.status(500).send('are you having a crap of me mate??  Are you, having a crap of me mate')    })
}                             $scope.$watch('columns', function(val) {                                 if ($scope.hasColumnsDefinitions === false || $scope.canSaveState === false)
$(function () {     if (!!('ontouchstart' in window)) {       $(document).on("touchend", touchDrop);
import { storiesOf } from '@storybook/react'; import { action } from '@storybook/addon-actions'; import 'semantic-ui-css/semantic.min.css';
logo: PropTypes.string.isRequired,     contactType: PropTypes.string.isRequired,     title: PropTypes.string.isRequired,
"removeHandler", eventService.removeHandler,     "startFiring", eventService.startFiring,     "finishFiring", eventService.finishFiring,     "getEventDef", eventService.getEventDef,
FacebookLoginButton = injectSheet(styles)(FacebookLoginButton) export default connect(mapStateToProps)(FacebookLoginButton)
options = { show: options };       }       if (options.show = 'toggle') {         options.show = toggleFallback;
return deferred.promise;         console.groupEnd();       },
this.video.onloadedmetadata = (e) => {           document.body.append(this.video);           this.video.play();
const lastItem = state.last();       const item = fromJS({         id: state.size,         x: lastItem ? lastItem.get('x') + 38 : 40,
if (match = explicituri.exec(this._input)) {       token.type = "explicituri";
admin = require('../../'); debugger; var dbURL = 'mongodb:
}    }debugger    fsCommon.invoke(url, otherParam, function(data) {
before(function() {     Neume = neume.exports(new window.AudioContext());   });
if (data) {       var perMsgType = []       data.forEach(function (measurement) {
return Cookiebar; })(document);
export function injectGlobal(...args) {   const thing = createStyles(...args)   const hash = hashString(styles)
case 'OperatorNode':         const fn = node.fn.toString()         let args
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2011-10\/race_ticket_lava_leap-1318447328.swf",  admin_props : false,
request.put(payload, function(err, response, body){                 if(err != null){ error = err }                 try{
let classnames = require('classnames') let Icon = require('./icon.jsx') let Strings = require('../utils/strings')
main.render(function(el) {     ok(el instanceof Element, "Contents is a DOM Node");     equal($(el).find("ul li").length, 2, "Correct number of nested li's");
goog.provide('goog.graphics.ext.Path'); goog.require('goog.array'); goog.require('goog.graphics.AffineTransform');
}                 break;             case 13:
created: function(){     debugger;     injectScript(data.document);
return parsed; };
static computeSha256(input) {         if (PlatformUtils.isNodeJs() && nimiq_node) {             const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));
function () {                     console.log('zkgooglecharts: Setting options: ' + JSON.stringify(this._chartOptions));
console.log(key)       debugger       hubs[key].notify()       valCache = newVal
ThrowBallEvent.prototype.throwBall = function (event) {     debugger     var mouse = new THREE.Vector2();
},     error => {       handleError(store, '');     }
var tag = childelt.tagName;   console.log("  child element ", childelt.tagName);
this.data.length = 0;   };
if ( properties = this.properties ) {    for( let i = 0, l = properties.length; i < l; i++ ) {
const semver = require('semver')     debugger     valid = semver.gte(require('process').version, '7.6.0')
if(rs.indexOf(jiff_instance.id) > -1 && ss.indexOf(jiff_instance.id) > -1) {     var deferred = $.Deferred();     var promise = deferred.promise();     var promises = [];
for (i = 0; i < pixLen; i++) {                             var idx = i * 4;                             pixels[idx] += state.red * image[i] * alpha / alphaImgLen;
renderSongCards () {     const { dispatch, genre, isFetching, playlists } = this.props;     return (
if ( geometry.type === 'LineString' ) {       this.params.geometry = EsriLeaflet.Util.geojsonToArcGIS(geometry);       this.params.geometryType = EsriLeaflet.Util.geojsonTypeToArcGIS(geometry.type);       return;
import { ThemeProvider, makeStyles } from '@material-ui/styles'; import Button from '@material-ui/core/Button';
const { decodeJWT, verifyJWT } = require('did-jwt') const { didResolverMock } = require('./__mocks__/3ID') const Room = require('ipfs-pubsub-room')
__models.widgets.find(req.params.cid).then(function (widget) {         var widget = __.getWidget(widget.widget_type);         widget.render_setting(req, res, widget.widget_type, widget).then(function (re) {             res.send(re);
var FunctionNode = require('nodes/FunctionNode');   var $ = require('jquery');     return Node.Model.extend({
} } ExoWeb.eachProp = eachProp; function objectToArray(obj) {
var action = function () {} var Promise = require('bluebird') var logger = require(enduro.enduro_path + '/libs/logger') var enduro_server = require(enduro.enduro_path + '/server')
export default [   [
}         process.exit(1);     }
condition: function () {                 var a, op, index = i;                 if (a = $(this.addition)) {                     if (op = $(/^[<=>]/)) {
import config from "../config/config"; import ajaxWrapper from "../helpers/ajaxWrapper"; import URLUtil from "../helpers/URLUtil";
);         FCC_Global.assert.approximately(           navbar.getBoundingClientRect().top,
} else {             var rot = CubeRotation.byCode[rotCode];             var scaledCollideAABB = aabb.translate([-x, -y, -z]).rotate(rot.inverse).scale(scale);           }
}   return identifier.replace(/[\/|\\]/g, '_'); }
element.autocomplete();  equal( element.autocomplete( "widget" ).parent()[ 0 ],   $( "#autocomplete-wrap2" )[ 0 ], "null, inside .ui-front" );
}       case 'balance':         return this.formatCurrency(this.data.totalReceived[this.currency] - this.data.totalSpent[this.currency], this.data.keyspace)
module.exports.setVariables = function(string, syntax, variables) {   var sorted = [], lines = [],     ast, result, changeVariable;   changeVariable = function(ast, key, value) {
constructor(token, options = {}) {
btnMultiSelect.addListener("changeChecked", function(e) {          return;          var enable = e.getValue();          tree.getManager().setMultiSelection(enable);          if (!enable) {
for ( var i = 0; i < swap.length; i++ )      if ( swap[ i ] != null )
socket.on('connect_error', err => {    if (err.message = 'xhr poll error') {     if (loggedXhrPollError) {
throw error;     }; }
.catch(function(error){     $('.flash-messages').html(nunjucks.render("src/templates/error.html",{message:message}));    });
'Ember.ArrayProxy, but you passed %@', [typeof arrangedContent]),          Ember.isArray(arrangedContent) || arrangedContent.isDestroyed);
static iconForUISourceCode(uiSourceCode) {     if (!Runtime.experiments.isEnabled('persistence2'))       return null;     var binding = Persistence.persistence.binding(uiSourceCode);
import React from "react"; import { StyleSheet, View } from "react-native"; import MagicMove from "./magic-move";
}; export default InputRow = React.createFactory(InputRow);
log.info('server.js: Starting server at: ' + port)     console.log('server.js: Starting server at: ' + port)         app.listen(port)
} else {         var startSide  = start - (item.getWidthLeft()  + 10) * factor;         var endSide = end   + (item.getWidthRight() + 10) * factor;       }
var set = function( text ) {   Debug.log( 'title.set()', text );   settings.element.title.text( text );
var deferred = $q.defer();             console.log(ipfsHash);             var post = ipfs.catJson(ipfsHash, function(err, ipfsData) {
function RecipeBullet($timeout, $rootScope) {         return {
throw new Error('Unimplemented API: dojo.data.api.Identity.getIdentityAttributes');   return null;   },
Promise.resolve(this.run(argv0, argv, { stdin, stdout, stderr, ... rest })).then(exitCode => {             process.exit(exitCode);         }, error => {
while (peek = context.reader.peek(++count)) {      if (!/[\w@]$/.test(peek)) {
if (option.type === 'POST') {     if (FormData && sendData instanceof FormData) {} else {       request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')       sendData = []
return Visibility.FULL;         var distance = this.computeDistanceToTile(tile, frameState);         tile._distance = distance;
var domutil = require('../../common/domutil'); var domevent = require('../../common/domevent'); var reqAnimFrame = require('../../common/reqAnimFrame');
import { NavigationHandler } from 'navigation-react'; import { Scene } from 'navigation-react-mobile'; import getStateNavigator from './getStateNavigator';
}),   new ts.Action({     name:    'export-csv',
import moment from 'moment'; import alt from '../alt';
var tab = dtResult.tab;     console.log('dtResult.result.columns', dtResult.result.columns);     console.log('dtResult.result.data.data', dtResult.result.data);     this.setUp(tab, settings, resultDOM);
function Sequence(tests, bail) {  if (!this instanceof Sequence) {   throw new TypeError('Class constructor Sequence cannot be invoked without \'new\'');
return 'unpublished';       break;     case 'paper-conference':
export default class DialogActivate extends Component {  constructor( props ) {   this.state = {
, validateList = require('./util/validateListInterface')   , filter   = require('./util/filter')   , scrollTo = require('./util/dom/scroll');
onDrop: function (params) {                 this.dagrePosition();             }
Notification: true, Player: true, Settings: true,
if (typeof(text) === "string") {     return text.replace(sensitivePattern(client), "「ｒｅｄａｃｔｅｄ」").replace(/`/g, "`" + String.fromCharCode(8203)).replace(/@/g, "@" + String.fromCharCode(8203));;   } else {
Aria.classDefinition({     $classpath : "aria.jsunit.SonarReport",
if (isSecondTab) {             return false;console.info(isSecondTab);         }
})   .fail(function(jqxhr, settings, exception) {
var s;     while (s = query.match(statement)) {       var s_name = s[1];
to: "Zu",         to: "An",         memo: "Memo",
console.log(`Running chaincode for location(s): ${chaincodeLocations.join(', ')}`);     process.exit(0)     const copyAllChaincode = () => Promise.all(chaincodeLocations.map(location => copyChaincode(location)));
case 'size':     return dfrd.resolve({error : fm.res('error', 'cmdsupport')});     break;    case 'search':
import React, { Fragment } from 'react'; import { string } from 'prop-types';
it('should support string as handler', async () => {     const { builder, classifier } = setup();
emitter.emit('success', obj['count(*)'])       })     })     return emitter.run()   }
if(!!err){           if(err === 'Unauthorized'){
gutil.beep();         process.exit();     }
return (str+'').replace(/([\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1"); }
orga() {     debugger     const orga = Organizations.findOne({ _id: FlowRouter.getParam('_id') });
this.connection.close(callback);     };
EventEmitter = require('events').EventEmitter,   WireResponse = require('./wire_response'),   inherits = require('util').inherits;
if (precision) return r.substr(0, precision);             case '%':                 return '%';
switch(element.type) {       case FIELD:         const matchInField = checkField(element, line, column);         if(matchInField) return matchInField;
var _this = this;         let loader = new LoadersVolume();
getSiteType: function () {         if (CHAT || window.CHAT) {             return 'chat';
var elt;     while(elt = this.next()) {       this[this.cache.length] = elt;
import React        from 'react'; import Toolbar      from '../../../../panels/Toolbar'; import { activateSimulationStep } from '../../../../network/helpers/simulations';
console.log(currentResult);     debugger;     if(event.keyCode  == 70){
.attr({                 cx: function (d, i) {                   var pivotNodeTranslate = that.getPivotNodeAlignedTranslationX(that.pathWrappers[d.pathIndex]);
logger.log(`No ${chalk.green("xclap.js")} found in ${x}`);     process.exit(1);   } else if (search) {
}         return Promise.reject('Return data is not a json')         return Promise.reject(error)     }
me.define.args.normalize = function(payload) {
module.exports = function(expect, Helper, Type) {  function foo() {
return files_data;       grunt.log.debug('Data successfully imported');
if(0) write_record(ba, "BrtWbProp", write_BrtWbProp());
expect(component.draw).toHaveBeenCalledWith(                         jasmine.any(Number),                         jasmine.any(Object),                         jasmine.any(Object)
else {                     debugger;                     host.exception(new SklearnError("Unknown function '" + name + "'."), false);
return thisThing.execute(this._semantics, this);   };
if (this.css = this.accept('{')) {       delim = '}';
debugger;   const roptions = {
ui5strap.Action.runTask(this.context, errorTask);    }
} export async function getByOrganization(parentValue, {}, { auth }) {   if(auth.user && auth.user.id) {
this.init = function() {                 console.log("init!")                                  that.attr('id', params.fieldDef["name"] + '--id_0');
module.exports = require('apps/drawapp').extend({  require,  require,  onDraw:function(){
throw new Error('Element must be in document');     return;   }
var queryHash = queries[index]       var method = SequelizeHelper.Array.without(SequelizeHelper.Hash.keys(queryHash), "params")[0]       var object = queryHash[method]
}); };; module.exports = FormWithRequiredLabel;
import Components from '../Components'; import Logo from '../Logo'; import Message from '../Message'; import TableOfContents from '../TableOfContents';
import classSet from "classnames"; import { app, createComponent, i18n } from 'webiny-app'; import TabHeader from './TabHeader';
if(dojox.gfx.isVml){     sourceDir = bidiEngine.checkContextual(text);
get looksLikeSelector() {     var i = 1;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-08\/subway_gate-1346109087.swf",  admin_props : true,
function pos () {   if (typeof window === 'undefined') {}   return {
: table[field].gte(context.request.urlTokenized[index - 1])             break;           case "explicit":
Signature.prototype.baseString = function(method, url, params) {  debugger;  querystring.escape = _encodeURI;
const characters = account.getCharacters();         const deceased   = account.getDeceased();         const maxCharacters   = 3;
var connUrl = {pathname: ''};           try { connUrl = new URL(conns[i].url); } catch (e) {};           var connPathname = connUrl.pathname.replace(/\/$/, "");
z += x[a];    if (z = 42)      delete x["c"]
for (var i = 0; i < quadLen - 1; i++) {             if (OverLap) {
var FluxMixin = Fluxxor.FluxMixin(React); var Router = require("react-router"); var Button = require('react-bootstrap/lib/Button');
this.ul.classList.add("dropdown");  document.body.appendChild(this.ul); };
GenoverseUtils.prototype.getGenomeObject = function(genome, genomes) {         if (typeof genome === 'undefined') debugger;
path += ')/'      this.query([path], session, cb, function() {debugger;});     }, this);
if (typeof console === "undefined") { console = { log: print }; } var arr = ["hello world"]; console.log (arr[0]);
w.terminate();     process.exit(0); };
var orderByCode = null;   for (var i = 1; true; i++) {     var text_order =
window.addEventListener('load', function() {   if ('PaymentRequest' in window || true) {
if (!isAsync) {             var data = jQuery.parseJSON(request.responseText);             return data;         }
it("xpath without namespace declaration", function*() {         try
timer.stop();         console.log('total runtime: ' + timer.getTotal());     });
if ( !!document.getElementById( id ) ) {   Expr.find.ID = function(match, context, isXML){
return source;  };
data: function() {    var convData = getConverById(this.params.convId).fetch()[0];
delete data[field];     })    };    return data;
yBits = decCoefficientToBinaryString(bitNot(y))     for (var i = 0; i < yBits.length; ++i) {       yBits[i] ^= 1
Vex.Flow.durationToTicks.durations = {   "1/2":  Vex.Flow.RESOLUTION * 2,   "1":    Vex.Flow.RESOLUTION / 1,   "2":    Vex.Flow.RESOLUTION / 2,
default:       return "Unknown Platform";       break;   }
var modal = this.modal = new Backbone.BootstrapModal({         content: form,
it('168.2 cannot customize the key value without metadata setting', async () => {     let conn, coll;     try {
} else {         gProcessor.setJsCad(getSourceFromEditor(), 'example.jscad')       }
} ); ; export { OrthographicCamera }
import styled from 'styled-components' import TagsContainer from '../layouts/components/TagsContainer' import { StyledH1, StyledP } from '../theme/globalStyle'
((isContentEditableSupported) ? '' : '<input type="text" class="cursor" autocapitalize="off"/>') +           ((true) ? '' : '' +              '<div class="context-menu">' +
var stores = function( storeName, hash ){     var definedStores, definedStore, target, resolvedTarget;     var target;
for (key in source) {              var formatName = this.getFormatName(key);              if (typeof formatName !== 'undefined') {
Source.prototype.delete = Source.prototype.delete;
const controller = function (Base, $element, utils, user, $attrs) {         class DexBlock extends Base {
setupEvent();                     console.log(viewState.spectroSettings);
config = readConfigFile(envVal);     } catch (ignore) {     }
mapAndSave(model, source);   };
_serializeValue: function (value) {   if (BetaJS.RMI.Skeleton.is_class_instance(value) && value.instance_of(BetaJS.RMI.Skeleton)) {    var registry = this;
return false;      if (typeof WebSocket != 'undefined' && !('__initialize' in WebSocket)) {     return false;
var tpl = new TemplateFile(__dirname + Path.sep +                                ".."+ Path.sep +
var init = function() {         renderContainer(template_data);         addHash();
enyo.args.root = (enyo.args.root || tag.path); ;
let right = r * scale * self.opW_;     if (colorSet) {     } else if (scale < 0.2) {         context.strokeStyle = "#888888";
}      s.length = s.buffer.duration;      s.dispatchEvent(LEvent.COMPLETE);      return;
if (consume(ID, "octet")) return "octet";     };
import React from 'react' import { Link } from 'react-router' import { Msg } from './messages'
if (panInProgress && panEnabled && onPanEnd) {     var { dx, dy, panStartXScale, panOrigin } = panStart;
for (var i in options.columns) {             var column = options.columns[i];             if (column.filterable == "advanced") {
if (this._transform)   modelViewMatrix = sglMulM4(modelViewMatrix, this._transform);  if (!this.dataAdapter)
var payers = null;     debugger;     before(function (done) {
var rawCreateElement = doc.createElement.bind(document);   doc._createElement = function(tagName, callConstructor) {
do(noOp, noOp, function() {             debugger;             expect(lhs[__ref_index]).to.equal(0);
success: function(r) {                  debugger;                  this.grid.reload();
case "Cone":                 div2.append(jQuery('<span \>',{ class:'input-group-addon',}).html('Length'));
'clientY': offset - $(window).scrollTop(),         'offsetX': offset - player.offset().left,         'offsetY': offset - player.offset().top,         'pageX': offset,
_sendMessage(messageType, destination, content, mentions){      var self = this;
constructor() {     this.super();     this.listenTo(this.model, 'change', this.render);
if (err && err.hasOwnProperty('responseText') && err.responseText !== undefined) {         alert(err.responseText);       }
'use strict'; const fs = require('fs'); const path = require('path');
mockedCdn.putFileContent.yields(null, 'ok');         setInterval = sinon.stub();         initialise();
var EXPLICIT_CLASSIFICATION, TRAINING_DATA_CLASSIFICATION;     var acs, sof, oof, acrof, $stateName, state, state2,       registryService, stateClassifierMapping;
cy.url().should('include', '/login')       })
}     for(var ti in this.tails)         this.tails[ti].sort(); };
require('./sounds')(nodecg);  } catch (e) {   nodecg.log.error('Failed to load "sounds" lib:', e.stack);   process.exit(1);  }
} if (!string.prototype.repeat) { string.prototype.repeat = function(count) {     if (count < 1) return '';
var model = deepClone(pagesConfig)           model.basic = model.basic           model.cols = model.cols           model.cols = model.cols || []
import {   Window,   TitleBar,   PushButton,
<AddContributionForm     onSubmit={x => console.log("REPLACE ME WITH SOMETHING REAL!")}     initialValues={{
try {       return _function.apply(_this, curryArgs.concat(slice.call(arguments, 0, arguments.length)));     } catch (e) {       if (e = exceptionHandler(e)) throw e;     }   };
ezmlm.replyToList(id, callback);   }, function (err) {     handle(err);     process.exit();   });
var evt = new MouseEvent("onMouseUp", o.x, o.y, this, e, id, id==this._primaryPointerID);   if (this.onMouseUp) { this.onMouseUp(evt); }
} catch( ex ) {        alert('ERROR: UdpClient.onDataAvailable ['+ex+']\n\n(Make sure to use the correct CoAP version.)');    }
PageActions = require('./../app/PageActions'),   Header = require('./../app/header'),   Loading = require('./../widgets/Loading'),
var appy = require('appy'); var oembed = require('oembed'); var request = require('request'); var async = require('async');
}   };   return { time : time, price : zigzag };
for (var i in edit) {             if (i === '_read' || i === '_modified' || i === '_modifier' ||                      i === '_creator' || i === '_created' || '_commitId') {                 continue;
console.log("Didn't remove the device " + err);     process.exit(1);    });  },
if (adapter.config.everyCalOneColor) {                  result.suffix += '<span class=\"' + calName + '2\" style=\"font-weight:normal;color:' + col + '\">';              } else {
} else {       nextButtons[buttonIndex].value = Boolean(pressed)         ? 1.0
return deferred.promise; };
ISense.prototype.setCompilationSettings = function (options) {                  return;                  var compOptions = new TypeScript.CompilationSettings();                  for(var i in options) {
throw new Error(WarningTextEnum.INVALID_DATA);     };   };
test( "Popup placement works correctly", function() {  var desired, result,
p.once( function( newVal, oldVal ) {       debugger;       console.log( 'callback: ' + newVal );       count++;
var path = [];     while (node) { path.unshift(node); node = this.parentNode(node); };     return path;
if (result.error) {                     console.warn("[tangelo.stream.run()] error: " + data.error + "; aborting stream run");                     return;                 } else if (result.finished) {
const master_model_1 = require("../master/master.model"); ; ; ; class RoomsModel extends master_model_1.default {
const hookPrefix = 'redibox-hook'; const hookRegexMatch = new RegExp(`@?[a-zA-Z-_0-9]*?\/?${hookPrefix}-([A-Za-z0-9-_]*)`); const hookRegexReplace = new RegExp(`@?[a-zA-Z-_0-9.]*?\/?${hookPrefix}-`);
case 'sideNavOpen': {           propValue ? this.hig.showSideNav() : this.hig.hideSideNav();         }         default: {           console.warn(`${propKey} is unknown`);
return locs;         self._rendered = true;         return null;         },
if(!!this.distinctHost) {     this.listeningServer.listen(this.port, this.host);
if (areaType === REGION) {     } else if (areaType === DISTRICT) {     } else {
import { connect } from 'react-redux'; import shortid from 'shortid';
isArray = comb.isArray,     combIsNumber = comb.isNumber,     combDeepEqual = comb.deepEqual,
var urlParts = this.url.split("/");                     this.url = this.url.replace(/^\/apps\/[a-z0-9\-]*\/?/,"/");                 }
} }; GrowlerContentWrapper.displayName = "GrowlerContentWrapper";
if (userRoles.isModeratorOf(id)) {             UR.UserRoles.removeAllRolesFor(id);             MeetingSeriesCollection.remove(id);
}     continue;    }    if (m=s.match(/^\s*(https?:\/\/[^\s<>"]+\/[^\s<>"]+)\.(bmp|png|webp|gif|jpg|jpeg|svg)\s*$/)) {           lout.push('<img src="'+m[1]+'.'+m[2]+'">');
msg = '메타마스크 로그인 안됨';   } else if (window.web3.version.network !== '1') {     msg = '메인넷 아님';
var index = 0, x, y, random;     for (var x=0; x < imageData.width; ++x) {       for (var y=0; y < imageData.height; ++y) {         random = Math.random() * 0.8;
function date_timestamp_set(dt, timestamp) {
var intv;     if(dojo.isIE){      f.onreadystatechange = function(){
{     this.layers = dotgrid.history.prev();     dotgrid.draw();   }
}         for(var j = 0; j < pack.images.length; j++) {             var image = pack.images[j];             if (image.enabled && this.enabledImages.indexOf(image) == -1) {
scope.meta.Class = scope.meta.Class;  scope.meta["Class"] = scope.meta.Class;
onCheckUsername: function(event, input, form) {
{        indices = indices;      }
for (var key in labelsMap) {                                 var hasKeys = true;                                 text += key + " : <i>"+ labelsMap[key] + "</i>,\n ";
att = await collection.get(this.att_id, { id: this.att_id });         att = await attachment.fetch();       }
} else {       mode = MODES.NEW_STREET      }
}        $switcher.on(app.touchSupport ? 'tap' : 'click', function(e) {     return toggle();
const LandingPage = ({ }) => (   <div>
thisSeedBin = QRLLIB.mnemonic2bin(userBinSeed)     }     XMSS_OBJECT = new QRLLIB.Xmss(thisSeedBin, 10)     const thisAddress = XMSS_OBJECT.getAddress()
handleNavigate(newUrl, options) {     debugger     locationStore.actions.navigate(newUrl, options)
switch (activityType) {     case 'create_comment':       const commentText = content.text;       const commentContent = JSON.parse(annotation.content);
})(); function sayDelete(e) {  alert('Hey you just deleted something!');
try {             var obj = JSON.parse(obj);
else if (_panes[name]) {                 debug.info('Updating tab', name, val);                 _panes[name].loadData(val);
this.applyNumberFormat(column, options);         case 'DateFormat':           this.applyDateFormat(column, options);
RegExp.escape = function(s) {   return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'); };
for(var i in this.outputs)    {
case 'since':       var sym = '>=';   }
elem = elem instanceof Node ? elem : this;     if (!elem instanceof Node) {       throw new Error('No node provided to diff renderer as either the first argument or the context.');
if (str.length == 6) {                     var y = str.substr(0, 4);                     var m = str.substr(4, 2);
async function notify(aParams = {}) {   var id = await browser.notifications.create({
if (!Array.isArray(value)) {           errors++         }
if (nodejs) {   var AgentSmith = require('../../agent_smith/src/agent_smith');   var Neo = require('../neo');   require('./metrics');
data.user.activityHistory = [];                   }                   if(data.user.permissions = {empty:"permission"}){                     data.user.permissions = [];
bottomshape: '置后',             upshape: '上移一层',             downshape: '下移一层',             align: '水平方向',
default:         throw "unknown type: " + type;     }
const parseCodeFenceHeader = require('./parseCodeFenceHeader'); const { Registry } = require('vscode-textmate'); const { downloadExtensionIfNeeded } = require('./downloadExtension');
if (myTop < containerScrollTop) this.props.setContainerScrollTop(myTop);     var myBottom = myTop + node.offsetHeight;     if (myBottom > containerScrollBottom)
if (isPropStateSet = true) {           var pCcClassKeys = util.safeGetArrayFromObject(propModuleName_ccClassKeys_, module);
this.newMetadata["textsize"] = this.newDataAsText.length;    };   }
this.sandbox.on('husky.column-navigation.edit', function(item) {                 if (!!this.data.ids.indexOf(item.id)) {                     this.data.ids.push(item.id);
{   width = width;   var rowheight = 25;
gameArea.stop();   console.log(currentLevel);   if (currentLevel = totalLevels) gameComplete();   else{
P0FClient.prototype.process_send_queue = function () {     if (this.send_queue.length === 0) { return; };     for (var i=0; i<this.send_queue.length; i++) {
return basicForm(verb, eSound, vtype);         break;
var spacing = this.getSpacing();       var childLeft = childAlignOffset + (options[0].marginLeft || 0);
import Footer from './Shared/Footer'; import CaseStudySlider from './Home/CaseStudySlider'; import InfoWeb from './Home/InfoWeb';
return IconComponent.tick(color);         break;       case "ercc only":
loopFlow(view, proxy, generic);              try {             } catch (exception) {
if (this && (!'context' in this)) {         this.context = context;
const idMatch = val.match(/^#([a-z\-]+)/);
case 'Q' :        for(var k=0,v=data.length;k<v;k+=4){         generatePoint(tn, pc, sn, data[k], data[k+1], lc+1, sx, sy); pc++;
popupCard.target = target;     popupCard.position = _positionCard(sourceElement, target);     _renderPopup();
}));       },       "prelude": function* (ctx) {         ctx.scope.set("baz", ctx.callKRLstdlib("*", ctx.scope.get("foo"), ctx.scope.get("bar")));       },       "action_block": {
prop = prop.substr(0, prop.length - loader.packages[pkgMatch].main.length - 1);         var pkg = loader.packages[prop] = loader.packages[prop] || {};         pkg.map = v;       }
var air_name = 'air:'+name+'List';         if (!obj[air_name] instanceof Array)             throw new uError('PARSING_AIR_WRONG_TYPE', obj[air_name]);
function GBAbstractPoint() {   Geom.apply(this, arguments); }; GBAbstractPoint.prototype = new LabeledGeom();
const idDroplet = params[1];     console.log("command : " + command);     console.log("id : " + idDroplet);     const api = new DigitalOceanApi({
if (document.readyState == 'complete' ||       document.readyState == 'interactive') {     callback.call(opt_scope);
for(var timer, sent=sc.dom.querySelector("send[id="+id+"]").sent;    timer=sent.pop();)     try{window.clearTimeout(timer)} catch(err){}  },
var MASTHEAD_BG_CLASS_REGEX = /(\s|^)bg-[a-z-]+(\s|$)/;   var FILTERS_REGEX = /\.*[\?|&]filters\=([^&]+)/;
this.startGameLoop(this.run);   }   if (parameters.debugMaterials || true) {    this._addDebugKeys();
}         case "selectandLockField":          if ( !_.isEmpty( fld ) && ( !_.isEmpty( val )) ) {
html: function(token, attrs, content) {    var parts,     attribs = '';
center: proj.startCenter,         rotation: proj.id === 'geographic' || 'webmerc' ? 0.0 : models.map.rotation,         zoom: proj.startZoom,
console.error(e);         process.exit(1);     });
this._numList = [];      };     Paginator.prototype = Object.create(HTMLWidget.prototype);
function garg_ontick(data) {      debugger;      switch (data.stack.castInfo.rune) {
render() {     if (true || this.props.workflowStatus === statusConstants.RUNNING) {       return (
processor.emit = function() {             debugger;             var event = arguments[0];
console.log('Import: error ', _.omit(fileObj,'blob') );    throw new Meteor.Error(500, i18n('upload_error_imageNotValid') + K.Util.humanize.filesize(K.settings.public.import.maxFileSize) );    i18n('error_import_formatNotValid')   }
mapping.generateElement(this.editor, start);     editor.selection.range = editor.selection.range;     if (!editor.commit()) {
function _getColorsFromPaletteTypeTop(palette, numCategories, othersColor) {     colors = _getSubPalettes(palette, numCategories);     return _avoidShowingInterpolation(numCategories, colors, othersColor);
stop();     z.load({mockresult: "fail"}).using("mock").success(function(result){         ok(false, "Should fail here, success shouldn't be called.");
is: "hax-blox-picker",   behaviors: [simpleColorsBehaviors],   properties: {
console.log('Uh oh: ' + err);   process.exit(1); }
if (plugin.active) {                 json = plugin.fn(json, plugin.params);             }
radius = Base.readNamed(arguments, 'radius');    return createEllipse(new Rectangle(center.subtract(radius),      new Size(radius * 2, radius * 2)), arguments);   },
this._p; };
"darwin" : [         { name : 'fontmanager.category.system.folder.name', type : 'system', directory : '/Library/Fonts', type : 'system'},         { name : 'Google Font', type : 'googlefont', directory: 'data/googlefont/main-font'},
bz.legacyIE = (bz.IE6||bz.IE7||bz.IE8);  bz.oldGecko = (bz.Gecko && UA.match(/rv\:(\d+\.\d+)/) && parseFloat(RegExp.$1)< 1.9);   var Gecko7orOlder = (bz.Gecko && UA.match(/rv\:(\d+\.\d+)/) && parseFloat(RegExp.$1)< 8.0);
readable.on('data', function (data) {     if (!data instanceof Buffer) {       data = new Buffer(data);     }
this.domain = scheme + ': }; function Util() {};
import React from 'react'; import logo from './logo.svg'; import './App.scss';
var Emitter = require('emitter-component'); var Hammer = require('../module/hammer'); var moment = require('../module/moment'); var util = require('../util');
case Syntax.VariableDeclaration:           var name = node.declaration.declarations[0].id.name;           utils.append('var ' + name + ' = module.exports.' + name + ' = ', state);
if ((menu.initialTop - currentTop) <= 30) {       var top = 30;       menu[0].className = 'docs-side-menu menu-fixed';
'use strict'; var expect = require('expect.js'); var Database = require('../');
this.root = { box: { center: center, halfDim: halfDim }, point: data[0] };             for (var i = 1; i < data.length; ++i) {                 this.insert(this.root, data[i]);
else {     lastValues = JSON.stringify(params.value).replace(/\'/g, '&quote;')     inputSource += `<select ${attributes} class="${inputClass}" last-values='${lastValues}'>`
if (lastLayer) {     debugger;     let topText = node.topText;
var trackers = storage.trackers;                 var key;                 if (areaName === 'local') {
elem.rel = 'stylesheet';         elem.type = 'text/css';         elem.href = url;         document.getElementsByTagName('head')[0].appendChild(elem);     }
init : function() {         this.setHelpUrl(Blockly.Msg.INFRARED_HELPURL);         this.setColourRGB([ 143, 164, 2 ]);         this.appendDummyInput().appendField(Blockly.Msg.SENSOR_INFRARED);
const duartionRegexp = /([0-9]+ms)/g; const categoryRegexp = /(\[[\w\-_\.:]+\])/g; const httpMethodRegexp = /(GET|POST|PUT|PATH|HEAD|DELETE) /g;
if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {                         extended[prop] = extend(true, extended[prop], obj[prop]);                     } else {
import React, { Component } from 'react'; import { PropTypes } from 'prop-types';
var distance = finalPosition.distanceToSquared(imagePosition);             console.log(index + '=' + distance);
this.childs = children.length ? children : [this];         return;         if (showProp) {             children = this.childs.filter(child => child.data.get(showProp));
} else {       console.log(`${context} key \'${key}\' not found in ${parentKey}`);       error = true;
if (excludes.length) {                 result._doc = mask.mask(result, excludes);             }             return result;
}                 };                 if (!matrixSide) {
var sharedProjects = require('./db/sharedProjects'); var writeError = api.writeError; module.exports = {};
}); Formsy.addValidationRule('isAlpha2', (values, value, otherField) => {   if (value !== null){
r.base = null;   if (r = r._previousVTree) unmount(r);  }
element.parentNode.MaterialTextfield.boundUpdateClassesHandler(); };
process.on('exit', (code) => {     if (updateData) {
post('/chat', function(){   messages.push(param('message'))   this.halt(200)
var obj = obj || { id: id, cls: "PFVArType2IEEEVArController" };                 super.submit (id, obj);
import React from 'react'; import { Navbar, Nav, NavItem, NavDropdown, MenuItem, Button, FormGroup, FormControl } from 'react-bootstrap'; import { Link, IndexLink } from 'react-router';
});         break;       case 'Validation':
var state = uri.getData(path);     if (window.paused) debugger;     if (!state) {
throw "Got unexpected control cell."             error(endpoint)         }
},   'diagnoses.age_at_diagnosis': {     type: 'Diagnosis',
var outPath = data.path.replace(/(\.js)?$/, '.css');       console.log('Writing CSS! file: ' + outPath + '\n');       var css = layerBuffer.join('');
if(err){    console.log(err);   }else{
core.item(qs.error, function(data) {         current._osm_object_type = current.object_type;
"actions": [{             "action": function* (ctx) {               return ctx.modules.get(ctx, "event", "send")(ctx, [{                   "eci": ctx.modules.get(ctx, "meta", "eci"),
var height = 0;     for (var index = 0; index += rowSize; index < indexOfElement) {       var value = obj.get(index);
rows: rows     };   }; }
this._frameObject = null;   };
const instance = mount(PageProposal, {       doBefore: ({}) => {         store.commit(`setProposal`, {})
handleFocusChange();   }   function observeShadowFocus() {     document.addEventListener('focus', handleDocumentFocusEvent, true);
if (infos = /rectangle\s*\(((\s*[-+0-9.]+[a-z%]*\s*,*\s*){4,6})\s*\)/i.exec(shape.trim())){             if (!infos[1]){
return compiler.rewrite(code,o); }; exports.rewrite = rewrite;
debugger;     if (view.isView) {
app.use(noopServiceWorkerMiddleware());       spawn(findpath(), [paths.appPath], { stdio: 'ignore' })         .on('close', code => process.exit(code))         .on('error', err => console.error(err));     },
return this.i18n.Major;                     break;                 case 5:
var formData = new FormData(_this.$form.get(0));         $.ajax({             url: window.location.href,
return  n;                     break;                 }
import React from 'react'; import { FormattedMessage } from 'react-intl'; import { createStructuredSelector } from 'reselect'; import { connect } from 'react-redux'; import Content from '../../components/Content';
var contents = this.gobble_expression();     if(match = this.buffer.match(close_paren_regex)) {      this.buffer = this.buffer.substr(match[0].length);
for (var name in properties) {    var value = getOwnProperty(properties, name);    if (name === 'implements' || value === undefined) continue;
case 3:               case 'end':                 return _context2.stop();             }
if (_activeRequests == 0) {       console.log("All requests complete");       console.dir(_config);       _callback(_config);
throw new Error( 'stroked round lineJoin not implemented .. add arc/arcTo' );                             break;                         case 'miter':
const errStr = "Input to set emoji was not a known emoji."       throw errStr       fn(new Error(errStr))       return
{     DockerManager.startOrchestra(DockerManager.defaultOrchestra, function (err, result)     {
return field > (value1.getTime());           break;         case this.OPERATORS.dateOperatorIsBetween:
switch (format) {           case 'csv':             const { send } = res;             res.send = (data) => {
+ _volume._childrenInfo[1]._sliceNormal[2]*_ras[2]     + _volume._childrenInfo[1]._originD;;
static removeUrls(message, fn) {     return message.replace(/(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?/g, fn ? fn : "");   }
function logUserRequest(message, conversationId) {  log(message, conversationId, conversationId, 'incoming'); };
loadedGroup = new LayerGroupCollection(null, item.name[defaultLanguage]);                     console.log("Jeeeee", loadedGroup);                     loadedGroup.id = item.id;
$page.find('#main').append($footer); };
if (schema.type === 'object') {     var required = schema.required ? schema.required : [];     var instance = {};
throw new Error("Error referencing component '" + root.tag + "'. Components can only be used when within modules. See documentation for more information on t7.module().");               return;             }
frame.minSpeed = matchArray[2];         },         requestLocation : function(message, frame) {             gpsMessageOnlyParse(message, frame);
this.gl.glp().stateTracker.toggleBoolState(data);       } else if (data.type = "num") {         this.gl.glp().stateTracker.changeNumberState(data);
toLabel: ({ assert }) => `(is ${ assertToLabel( assert ) })`,   toGherkin: ({ target, params, assert }) => `Assert that element \`${ target }\`     is located ${ assertToLabel( assert ) }`,
}); var uploadFileName = "upload1.txt";
.replace(/\./g, '-')      .replace(/[\(|\)]/g, '');
$('body').on('click', '[data-reload]', function(){    window.location.href = window.location.href;   });
if (result = this.scanInjections(ruleStack, lineWithNewline, position, firstLine)) {       for (let injection of baseGrammar.injections.injections) {
case 'incollection':       return 'chapter';       break;          case 'conference':
rm.write("<div  id=\"" + oControl.getId() + "_SB\" tabIndex=\"0\" role=\"separator\" title=\"" + oControl.getText("SPLITTER_MOVE") + "\"");   if (orientation == sap.ui.core.Orientation.Vertical) {    if (oControl.getSplitterBarVisible()) {
if (this._promises) {       for (var i = 0; i < this._promises.length; i += 1) {         data._chainPromise(this._promises[i])
return f32_scratchLoad()     return res   }
if (!window.ace)     ace = {};
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-04\/scrumptious_frittata-1334210155.swf",  admin_props : false,
setTimeout(() => doQueueNext(msg), 20000);         });
let json = utils.xmlToJson(xml)         console.log(json);                  let flatTileMatrix = null;
var csv = require('../js/util/csv') moment = moment || require('moment'); describe('csv utils', function() {
if (typeof ciTime) {             hoursAgo = (ciTime-bgTime)/(45*60*1000);
if (existsFiles.length>0) {                     var mes="同じ名前のファイルが既に登録されています：\n";                     existsFiles.forEach(function(f){
switch (name) {       case 'date':         const dateMoment = evt != null ? evt.format('YYYY-MM-DD') : null;         date = dateMoment ? `@${dateMoment}` : null;
} else {     var homeDir = process.env.HOME;   }
var r = require('rethinkdb') var when = require('when') var mongoose = require('mongoose')
console.log("restarting!");              process.exit(0)          } else {
var days = [];     for (i = 1; i < 6; i++) {         var weekDay = moment().day(i).hours(0).minutes(0).seconds(0).milliseconds(0);
exports.stringHexColor = stringHexColor; ;
console.log("event before:", event.activeSchedule);         if (activeSchedule) {
return fs.copy(src, destination).then(() => {     console.log(`Docs synced to ${config.blog.outputPath} folder`)   })
import TwiddleResolver from "ember-twiddle/lib/twiddle-resolver"; import File from "ember-twiddle/lib/file";
item.addPartnerRightAction = function (person) {   debugger;   let node = person.nodeOf;
var path = basis.path;   var arrayAdd = basis.array.add;   var arrayRemove = basis.array.remove;   var consts = require('basis.template.const');
html += "}));";     console.log(html);     return html;
} else if (leftNum < rightNum) {   this.prover.evaluate(GH.operatorUtil.create('<', [sexp.left(), sexp.right()]));   var result = this.prover.getLast();
var deps = this.diffDependencies[diff.id];                         deps.forEach(function(diffId) {                             self.trigger('markPublishDiffItem', { diffId: diffId, state: false });
function quasi(value) {     if (!value) debugger;     if (value.slice(value.length - 2) != "${") return cont();
import { Anchor, Box, Image } from 'grommet' import { string } from 'prop-types'
return await Promise.all(compilation.graph.map(file => {       console.log('file', file);       const path = file.path === '/' ? '' : file.path;
this.btnHowToPlay = game.add.button(game.world.centerX, game.world.centerY - (position - 2*range), 'ssButtons',      function(){
async eventSocket (Socket, data, User) {
tag = [tag];   }   if (typeof data === 'callback') {     callback = data;
const a = send(prop(), [0])       expect(a.debounce(100)).toEmitInTime([[0, {current: 0}], [160, 3], [360, 4], [710, 8], [710, '<end>']], tick => {         send(a, [1])
});        function done() {         if (progress) progress.done();        }        Deferred.all(allInfoDeferreds).then(done, done);
return str;   };
Blockly.Blocks['communicate_ow_read'] = {     init: function() {         this.setColour(Blockly.Blocks.communicate.HUE);         this.appendValueInput('VAR')
result = err;     } finally {       return result;     }
decompileFromAst,   codeGenerator };
exports.post = function(req, res, next) {   var self = this;   var obj = this.new(req.body);
} else {                         process.exit(68);                      }
var res = {};             for (memo_id in memos) {               res[memo_id] = JSON.parse(memos[memo_id]);
} else {             resolved[id] = factory;         }
if (!!scope.timeout) {                     $timeout.cancel(scope.timeout);
}; }; function afterEachAllRewrite() {
for(index =0 ;index<hosts.length;index ++){    var hh = hosts[index];
const masterPlan = plan();     p1.test('should not run this test', function * (t) {       t.fail();
return;             }             if (!goog.object.containsKey(pred, w)) {               forward_fringe.push(w);
}).slice(0, -1).join('\n')   return trace   }
continue;                                     break;
cordova.exec(function() {         if (typeof callback === "function") {
cwt.storage.itemLoader = function (itemKey, itemReceiver, errorReceiver) {   localforage.getItem(itemKey, function (err, value) {     if (err == null) {       errorReceiver(err);
log.debug('Starting to install app', app)     const appRegex = new RegExp(`^${vendorPattern}\.${namePattern}@${wildVersionPattern}$`)     if (!appRegex.test(app)) {
} else {     var fromdata = Object.keys(alasql.databases[databaseid].objects).map(       function(key) {return alasql.databases[databaseid].objects[key]}      );     this.selectors.unshift({srchid:'CHILD'});
({ str, tracers } = str(body));     return { body: str, tracers: tracers };   };
, match = regex.exec(string)   else     var seperator = seperator || '---'       , pattern = '^('
webWorker._init();    if ( Boolean( this.crossOrigin ) ) webWorker.setCrossOrigin( this.crossOrigin );
default:       };         this.$ele.find('[data-notify="' + cmd + '"]').html(commands[cmd]);
import * as Animatable from 'react-native-animatable'; import { View, Text, TextInput } from 'react-native'; import { WoWsLoading } from '../component';
var getUserPrefFunction = function(prefKey){         if(localStorage){             return localStorage[prefKey] || defaultPrefs[prefKey];
case 'break': return this.parseBreakStatement();     case 'catch': this.notId ()  ;          case 'class': return this.parseClass(CONTEXT.NONE ) ;     case 'const':
lightningHost: 'localhost:10009',   cert: `/Users/${userInfo().username}/Library/Application\ Support/Lnd/tls.cert` }
propagateArrayChange: function(mode, element, modifiers) {         debugger;         var affectedMorphs = this.entangledMorphs.without(this.updatingMorph);
var i = 1;  var names = {};  files.forEach(function(name) {
}     len = message.data10.length;     for (var i = 10; i < 27; i++) {         var version = versions[i][ec_level];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2009-12\/1261531551-3616.swf",  admin_props : false,
if (newId !== data.$id) {           debugger
.on('callUpdate', (call) => {         debugger;         if (call.state === 'done') {
if(!this instanceof Touche) return new Touche(nodes);      if (!nodes) {
data: {category: category,                criterion, criterion},
gateway.connect(function(err) {
const points = this.selected.geometry.parameters.points;         debugger         app.editor.execute(new SetGeometryCommand(this.selected, new THREE.LatheBufferGeometry(
this._setGeneratedUser = function(properties) {       var generatedId = localStorage.getObject(this.generatedIdKey);       var user = { id: generatedId, properties: properties };
tChildren.forEach( function( iChild, iIndex) {               iChild.adjust( { left: kPadding, top: tCurrTop, left: (kCellHeight - iChild.iconExtent.width) / 2 });               iChild.set('isVisible', true);
getOBJ : function(){ return bd.getobj(this.pos.bx, this.pos.by);},  setOBJ : function(obj){
}; ; export { EllipseCurve }
class App extends Component {   constructor() {     this.state = {
} var robohydra = new RoboHydra();
return persistence.getDataForServer(serverId).then(data => {       debugger;       let settingsReturnBlob = {};
finish(null); };
for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {           var sourceMaterial = materials[mi];           buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);
it('Should set path to http:     expect(url({ jackal: { baseUrl: "http:       .to.be.eql('http:   })
},   get: function() {     var collection = this;
const { _ } = require('lib/locale.js'); const ArrayUtils = require('lib/ArrayUtils.js'); const { sprintf } = require('sprintf-js');
});         var map = $('#' + this.router.options.target).data('mapbenderMbMap').map.olMap;         this.set({
description: $('.content_for_perma', elem).textContent,     projectName: (!!$(".project")) ? ($(".project > title") || $(".project > header > h1 > a")).innerHTML : ""   });
}; try{register(JsBarcode)} catch(e){} try{module.exports.register = register} catch(e){}
import DynamicInput from './DynamicInput'; import { Text, MarkupText } from 'preact-i18n'; import t from '../Utility/i18n';
var resolvedUrl = null;
jQuery.sap.clearDelayedCall(this.oLoadEvent);   }   if(!!this.oFailedEvent){    jQuery.sap.clearDelayedCall(this.oFailedEvent);
console.log('A personal access token is needed to use the GitLab API\n' + url.grey);     var question = 'Enter personal access token: '.yellow;     while (!options.token) {
HX.Light.prototype._updateScaledIrradiance = function () {
playerSpy(amount);     debugger;   }
week: 'ddd D/M'         },         eventClick: function (calEvent, jsEvent, view) {           $scope.setTimeSlot(calEvent.start)         },         eventMouseover: function (event, jsEvent, view) {
if (!(validOutPort > 0 && validOutPort <= 65535)) {    console.log(portInvalidMsg[1]);
window.$ = window.jQuery = require('jquery') window._ = require('lodash') require('bootstrap-sass/assets/javascripts/bootstrap.js')
});       for (var i = 1; i <= groups.length; i++) {         newVal = newVal.replace('$' + i, groups[i]);
this.inChunkSize = rtmpBody.readUInt32BE();         console.log('[rtmp handleRtmpMessage] Set In chunkSize:' + this.inChunkSize);         break;
PlaceholderComponent(quail, test, Case, options); };; module.exports = ObjectMustHaveValidTitle;
offset += 2;         console.log(addressLen);         cookie.address = buf.unpackString(addressLen, offset);
}                  else {
return str.split(/[-\.\s]+/) }
notifyLayerVisibilityChanged : function(layer) {         debugger;         var scaleOk = layer.isVisible();
if (!item) return '';   if (!!item.encryption_applied) return '🔑 ' + _('Encrypted');   return !!item.title ? item.title : _('Untitled');  }
headers["cache-control"] = "max-age=" + self._cache;         for (var aH in additionalHeaders) {             headers[aH] = additionalHeaders[aH] || headers[aH];
else if (text == freelanceMenuOptions.editBio) {  } else if (text == freelanceMenuOptions.editCategories) {
typeahead.on("typeahead:initialized", function(event, prefetchedData) {       Ember.run(function () {         self.$('input').focus();
this._show(context, widget);             },             detach: function (context, widget) {             },
var alasql = require('..');  };
onkeyup   : () => {},     onkeyup   : () => {},
event.waitUntil(self.clients.claim.bind(self.clients)); };
data = undefined;         if (args.hasOwnProperty('data')) {             data = data;         }
app.use(function *redirect() {   this.redirect('/graphql');
import {remote} from 'electron'; document.querySelector('#coinmarketcapli').addEventListener('on', (e) => {
camelize: function(str, upper){       if (upper) { return lib.upperCamelize(str) };       return str.replace(/[-_]+(.)?/g, function(match, chr) {
"use strict"; self.EventEmitter = require("lib/events");
var BAUDRATES = [115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 120,, 600, 300, 200, 150, 134, 110, 75, 50]; var DATABITS  = [8, 7, 6, 5];
if (typeof arguments[0] === 'object') {             debugger;             var target = arguments[0];
userAgent: window.navigator.userAgent,                     language: window.navigator.language,                     plugins: window.navigator.plugins                 }),
var orientation_ = map_.getPositionOrientation(pos_);         var inertia_ = 0.8;
onChange(ev) {         debugger;     }
console.log('done');   process.exit();   return html; });
const UNCHANGED_WAIT = 1000; const ID_ALIAS = 'nonoonoono';
clashingName1 = 'test'; clashingName2 = () => {}; export default clashingName2;
static ["text"](node, key, vm) {    debugger    Register.registDomListener4Hubs("text", node, key, vm)
append("<a>").text("Full Color Wheel"));           };           $listContainer.append($tabContainer);
let ret = true               for (let i = 0; i > this.validators.length; i++) {                 const { name } = this.validators[i]
value: function enableScroll() {       document.body.style.removeProperty('overflow');     }
it('must be prototype', function () {     newObj = buildLogger(originalObj, 'name', 'id', function (name, id, ts, event, payload) {     });
const max = this.input.max.eval();         if (!min.getTime)             debugger;         const tmin = min.getTime();
}   console.log('messenger:'+processID+'@inputs> zmq_pattern: ' + zmq_pattern );         mq_sockets[c]['socket'] = mq.socket(zmq_pattern);
import React from 'react'; import { Button, Image, Menu, MenuItem, MenuList, Panel, PanelGrid, Popover, Tile, Token } from '../'; import { DocsText, DocsTile, Header, Import, Properties, Separator } from '../_playground';
}   optionsWrapper = document.getElementById('options')   for (var key in options) {
for (var i = 0, cur = outerType; i < len; ++i) {       var type = types[i]       if (cur == "L" && type == "1") types[i] = "L"
mc.get([counterMcKey, registerMcKey], function (err, data) {         console.log("C");
$story = $('#article-wrapper p')  $story.layoutMode()
Store.prototype.del = function(packet, cb) {   var packet = this._inflights[packet.messageId];   if (packet) {
throw new Error();           done();         })
EntityViewsMenu = connect(mapStateToProps)(EntityViewsMenu); EntityViewsMenu = injectIntl(EntityViewsMenu); EntityViewsMenu = withRouter(EntityViewsMenu); export default EntityViewsMenu;
var SignInManager = Streamus.backgroundPage.SignInManager;     var Settings = Streamus.backgroundPage.Settings;          var LinkUserIdView = Backbone.Marionette.ItemView.extend({
SQR.Matrix44 = function() {     if (typeof Float32Array !== 'undefined') Float32Array = Array;     this.data = new Float32Array(16);
options:{                 nav : _modules['carousel']['nav-buttons']['enabled'],                 dots: _modules['carousel']['bullets']['enabled'],                 callbacks: true,
{ "group__opts_group.html#gae68fb615835364c0809555e8dc93f57e":[3,0,2,57], "group__opts_group.html#gae68fb615835364c0809555e8dc93f57e":[2,2,3,16], "group__stan_conn_group.html":[2,2,11], "group__stan_conn_mgt_group.html":[2,2,11,0],
module.exports = function(Array, __ks_Array, Class, Function, __ks_Function, Object, __ks_Object, Type) {  for(let x = 0; x <= 10; ++x) {
return cutStr;       break;   }
exports.preCheckTemplateSyntaxForVue = function(source, type, options) {   debugger;   let {lang} = options;
setFormData: (state, items) => {      debugger         state.getFormData[items.ref] = items.value
a = b;;                      _startShape.style.x = a;
{   if (!this instanceof Event) return new Event ();   Base.apply(this);
var mapper = [] ;    var model = new orion.textview.TextModel(fileText, "\r\n");
const normalizeArrayIndices = (path) => {      return path.replace(/\.\d+\./g, "\.*\.") }
$rootScope.$on("importComplete", function(event, args) {          alertify.success("Import has completed");
this.opt = assign({}, defaults, option);     this.scrollAmount = -this.opt.offsetTop;;     this.scrollOld = 0;
view.dimensionFilter = tdimension;      var parts = cubesviewer.model.getDimensionParts(tdimension);      var params = {
el.parent = root;    x += point.x;    y += point.y;   });
if (currentBranch.votePeriod === (currentPeriod - 1)) {         var percentComplete = ((currentBranch.currentPeriod - currentPeriod) * 100).toFixed(3);       } else {
add: function(other) {   var dx = pos.x - this.x;   var dy = pos.y - this.y;   return Math.abs(Math.sqrt((dx * dx) + (dy * dy)));
ownsDocument = function(userId, doc) {  console.log("asdfs: ", Roles.userHasRole(userId, "admin"))   return doc && doc.userId === userId || Roles.userHasRole(userId, "admin");
exports.getRules = function( url, cb ){   var defaultCb = function( err, output ){    if( err ){
export default function (config) {
if (!window.qxloader) {         this.__fireReady();
a1.value = 5;     expect(a1.type).toEqual(Enums.ValueType.Number);     expect(row1.hasValues).toBeTruthy();     var b1 = row1.getCell(2);
unitHeight = 30,             unitWidth = width / maxCt,             axisThickness = 2,
o.redirectUrl = browser.runtime.getURL('images/1x1-black.gif');;         }
proto.setCoords = setCoords;          function Marker(){};          Marker.prototype = proto;
}   for(var y = prevHeight; y < this.height; ++y) {     var row = [];     for(var x = 0; x < this.width; ++x) {       row[x] = null;
customDebugDraw.drawAxes(context);                 var centerX = 300;                 var centerY = 300;                                  this.ngBox2DSystem._world.DrawDebugData();
var transaction = transactionData.transaction;  transaction.operations = transaction.operations;  transaction.lengthDifference = transaction.lengthDifference;  this.dmSurface.change( transaction, this.dmsurface.getSelection() );
}); }); Router.onBeforeAction(AccountsTemplates.ensureSignedIn, {   only: ['profileEdit', 'profileNew', 'jobEdit', 'jobNew']
winston.error('Database Error: ' + err.message);             process.exit();         }
case 'ms_sqlitefilename':                 configuration.data.filename = environment[key];             case 'website_auth_signing_key':                 configuration.auth.secret = environment[key];
import { connect } from 'react-redux'; import MonacoEditor, { MonacoDiffEditor } from 'react-monaco-editor'; import { ActionGroup, Alert, Button } from '@patternfly/react-core';
case 'last':           while (node = node.nextSibling)  {             if ( node.nodeType === 1 ) return false;
}  dojo.declare("dojox.charting.action2d.MouseZoomAndPan", dojox.charting.action2d.ChartAction, {
mapAndSave(model, pollingLocation);   };
return Class.verifyUserToken(user, session.password);         return bcrypt.compareAsync(session.password, user.password);       } else if (isAdminScope(session.scope)) {
}         return (             <div>Enjoy this HTML placeholder.</div>         );     }
if (isNumber(k)) {           if (!isInteger(k) || k < 0) {           }
EffectCompositor.prototype.getSSAOTexture = function (renderer, scene, camera, frame) {     return this._ssaoPass.getTargetTexture();
import { PLANE_GEOM, BOX_GEOM } from './utils/geometry-factory'; import { MAT_DEFAULT } from './utils/material-factory'; import checkProperty from './utils/property-check';
if ('function' !== typeof stepRule) {             debugger             throw new TypeError('Game.shouldStep: stepRule is not a function.');
return 'application/octet-binary';             break;
firstItemOffset = $firstItem.offset().top;     for (i = numItems; i = 1; i--) {
this.getstate = function(sel) {   var sel = this.files(sel),    cnt = sel.length,
for(var i = 0; i < args.length; i++){      var arg = args[i]
if (config.packages) {             for (var i = 0; i < config.packages.length; i++) {                 config.packages[i].location = baseUrl + config.packages[i].location;
}); $('#text').val(text); CKEDITOR.instances['editor'].on('change', function() {
var buf = BN(this.stack.length).toScriptNumBuffer();           this.stack.push(buf);
kafka.on('message', function(message, commit) {             debugger;             _options.bus.callback(JSON.parse(message.value));
context.beginPath();         for (var x = 0; x < width; x++) {           var time = x / width * duration;
senchaRows = this.get("sencha");                     debugger;                     if (senchaRows) {
function failStatic (basename, ...args) {   return;    it(`should refuse to load '${basename}'`, function () {     let failed = false;
.fail( function() {                 alert( WPAuth0EmailVerification.e_msg );             } );
if (this.origin_soldier) {           console.log("play_mode では盤上の駒を駒台に置くことはできない")           return true
}    else sails.on('hook:controllers:bound:actions', bindCRUDRoutes);
} else {    var tmp = a.pipelineSource();    code += a.transformSource();
}     console.log(child);     mount(parent, child, current);
UserAgent.prototype._onAcceptSuccess = function _onAcceptSuccess(ist, dialog) {   var self = this;   this.inviteServerTransactions.delete(ist);
html = html.replace(/@CLASSNAME/g, '');     default:       break;   }
ascii,         format,         encryptPrivateKey,
return str.split('').reverse().join('').replace(/^\,/, ''); };
result = true;         mathML = mathML;         if (isSuperscriptAtom(stream)) {
var SPAN_CLASS = 'number-display';     var _formatNumber = d3.format('.2s');     var _chart = dc.baseMixin({});     var _html = {one: '', some: '', none: ''};
positionBelow: [left2, top2],         current,         length,
let results = _.transform(settings, (result, setting, index) => {         let merged = v.merge(setting, routeTableSettingsDefaults);         let errors = v.validate({
try {                     this.writeToCache(descriptor, config, mark);                 } catch(e2) {
var OPCUABaseServer = require("./base_server").OPCUABaseServer; var async = require("async"); var OPCUAClientBase = require("node-opcua-client").OPCUAClientBase;
var name = this.ds[i+1] || this.ds[i];      if( window.console ) console.debug("UDS: " + name + " " + response[instance][this.ds[i]]);      this.graphs[instance].updateDataset(       name, instance
import React, { useContext } from 'react'; import PropTypes from 'prop-types';
}  , _patch_detail: function _patch_detail( bundle, callback ){}  , delete_detail: function delete_detail( bundle ){
const logger = winston.createLogger({     level: !!process.env.NODE_PRODUTION ? 'info' : 'debug',     format: winston.format.combine(
s.delete(next);         next += 1;         deliver(msg);       } else {
match = buffer.toString().trim().match(/\#\!(.+)/i);     if (match) {
.update('shouldRefetchData', v => !v);     case SUBMIT_TEMP_GROUP_SUCCEEDED:       const newGroup = state         .get('newGroup')
exports.removeEmpty(value)   for (const i = 0;i < list.length;i++) {     if (list[i][key] === keyValue) {
else if ( c === "total" ) {           var a = 1         }         else {           var a = 0
var ppu = 16.0; Cut(function(root, container) {   Cut.Mouse(root, container, true);
case 0x44:      msg = this.parseD(buffer, length);     break;   case 0x45:
externalClasses: ['wux-class'],     externalClasses: ['wux-class'],     data: mergeOptionsToData(defaults),
if (err) return cb(err)         debugger         this._loadArchive(this.props.archiveId, context, (err, archive) => {
let rstOutput = '';     if (config.rst) {       rstOutput += `${rstTitle}\n`;       rstOutput += `${'='.repeat(rstTitle.length)}\n\n`;       rstOutput += `.. code-block:: shell\n\n`;
return false   }   if(!!Memory.spawnqueue.index[this.name][name]) {     return true
return config; };
var flows = this.get('elements.Flow').content;    var toSend = toReceive = flows.length;    if (!toSend) {
act.setAttributes(activity);             console.log(act);             this.__analyzerDB.activities.addEntry(act);
self.hoodie.emit('warn', err.message);                 process.exit(1);                 return callback(err);               }
}     process.exit()   }
import SocialButton from '../components/SocialButton'; const { ...meta } = Expo.Constants.manifest; import { getCurrentYear, socialLinks, manifest } from '../lib/constants';
actions: {     goBack() {debugger;},     completed(hostConfig) {
q[_this.get('queryKey')] = query;       const queryObj = jQuery.extend(true, {}, q , _this.get('params'));
name:'ngAnimate',                       files:['/apollo/ui/bower_components/angular-animate/angular-animate.js']                     })                     $ocLazyLoad.load(                     {
import { storiesOf } from '@storybook/react';  import InlineLink from '@bbc/psammead-inline-link'; import {
ol_layer_Geoportail.getCapabilities = function(gppKey, all) {   var capabilities = {};
http:     ret.priority = (raw_packet[offset] & 0xE0) >> 5;
'markdown': staticPath('js/markdown.js'),         'navbar-control': staticPath('js/navbarControl.js')     }
} else {    console.log(taskList);    taskList.removeTask(task);
const StaticTeamDescription = ({description}) => (   !!description ? <p className="description read-only">{description}</p> : null );
import React from 'react'; import BaseLayout from '../layouts/BaseLayout'; import {
return axios.get(this.baseUrl);   };
past(years, refDate) {   debugger;   let date = refDate ? new Date(Date.parse(refDate)) : new Date();
drawValues(scope.vs, canvas, scope.config, col);               console.log(scope.config);             }
case REQUEST_ALL_KNOWTATIONS:       const onSuccess = knowtations => {         dispatch(receiveAllKnowtations(knowtations));
return this.use(route, handler, method);       break;
return this;     } };
module.exports['internal/streams/pipeline.js'] = [   , errorsTwoLevel
for (let i = 1; i < args.length; ++i) {     if (obj = args[i]) {       for (let key in obj) {
scientific: 'modules/scientific/0-0-1/js',   shakemap: 'modules/shakemap/0-0-1/js',   impact: 'modules/impact/0-0-1/js',   scientific: 'modules/scientific/0-0-1/js'  },
req.flash(config.constant.flash.error, '注册功能已被停用，请联系管理员: gefangshuai@outlook.com');     res.redirect('/login');     return;     var user = req.body;     if (!user.username || !user.password) {
function testcase() {   if(Math.hypot(NaN, 3) === NaN) {    return true;
log.start('building static site')     const { build } = require('.')     build(opts)
case exports.UNZIP:       var status  = zlib_inflate.inflateInit2(         this.strm,
}     debugger     return s;
var firstDayOfWeek = scheduler.get(FIRST_DAY_OF_WEEK);     var today = instance.getToday();     var monthStartDate = instance._findCurrentMonthStart();
"use strict"; function Launcher() {};
return this; };
let devDependencies = config.devDependencies;         let rmDependencies = config.rmDependencies;         for (let key in addonConfig) {
orion = {}; orion.options = Options;
} else if (isVPlaceholder(input)) {   debugger;  } else {
var waitForLoad = function(callback, constructor) {   if ((document.readyState === 'interactive' || document.readyState === 'complete') && document.activeElement) {     return callback.call(constructor);
this.creator.classList.remove('is-hidden');     window.addEventListener('scroll', this.creatorCallback);   }
},           punctuation: [/[\[\]().,:`]|\->/],           operator: [
var rePostInline = /^[-\s`'")\]}>/:.,;!?\\_]/;     var reEnumeratedList = /^\s*((\d+|[A-Za-z#])[.)]|\((\d+|[A-Z-a-z#])\))\s/;     var reBulletedList = /^\s*[-\+\*]\s/;     var reExamples = /^\s+(>>>|In \[\d+\]:)\s/;
});     case CHANGE_SIDEBAR_TAB:       const isActive = action.activeTab === 'events';       if (isActive === state.active) return state;
try {     const branch1 = master.get(['deep', 'real']).create()   } catch (error) {
await knex.raw(`drop database "${target}"`);     return process.exit(0);   } catch (err) {
if ( data.activated && !ops.noAck ) {      ;      messages.addMessage( ops.message );
if (date) {                             debugger;                             self.val(formatters.date.dateString(date));
Seadragon.Drawer = function Drawer(seadragon) {     this.ensureArguments(arguments, 'Drawer');
parseFloat(m[1]) > parseFloat(m[2]))    {    }
nodeName = nodeExpression.getOperator();             if (ASTFactory.isBinaryExpression(nodeExpression)) {                 paramExpressions.push(nodeExpression.getLeftExpression());
else{       var final = mw.color.hexToRgb(CSScolor);       final.alpha = 1
var data = [];              var options = {         delimiter: config.delimiter,
return "八";                 break;             }             case 9: {                 return "九";
this.data.children = {}     }     if(!!this.data.children[label]) {       return true
define(['jquery', 'oroui/js/mediator', 'underscore', 'jquery-ui'], function($, mediator, _) {     'use strict';
var box = new qx.ui.layout.HBox();       var container = (new qx.ui.container.Composite(box)).set({decorator: "black", backgroundColor: "yellow"});       box.setSpacing(5);
console.error("Got a non-GET request to the redirect destination URL");         resp.writeHead(400);         resp.end();         return;
ngClick: "deleteGroup(\{\{ group.group_id \}\},'\{\{ group.name \}\}')",                 awToolTip: 'Delete group',
gl.blendFunc( gl.SRC_ALPHA, gl.ONE ); var scene = new GLBoost.Scene(); var camera = new GLBoost.Camera(   {
return accumulator;   };
const contact = this.currentContact()     console.log(assignment.campaign().initialScriptText())     return (contact && contact.messages().fetch().length === 0) ? assignment.campaign().initialScriptText() : ''
sequence: DS.attr('number'),     style: DS.attr('string'),     tab_text: DS.attr('string'),
if (angular.isDefined(previousRangeDataPoints) && previousRangeDataPoints.length > 0) {                     console.debug("Running PreviousRangeOverlay");                     prevRangeLine = d3.svg.line()
(function( scope ) {     M.DialogView = M.View.extend({
}     process.exit();   });
this.addEventListener('mousemove', this.parent.move3d.bind(this.parent, this, controlAxis));     case ROS3D.INTERACTIVE_MARKER_MOVE_AXIS:       this.addEventListener('mousemove', this.parent.moveAxis.bind(this.parent, this, controlAxis));
var TextMode = require("./text").Mode; var Tokenizer = require("../tokenizer").Tokenizer; var FtlHighlightRules = require("./ftl_highlight_rules").FtlHighlightRules;
}); };; module.exports = ListNotUsedForFormatting;
DataAccessObject.prototype[i] = dataSource.constructor.DataAccessObject.prototype[i];         };     }
import PropTypes from 'prop-types' import config from  'app-config'
}       } else if(list[item] instanceof Node){         nodes.push(list[item]);       }
})(jQuery, window);
this.monitor_element = monitor_element;   monitor_element = document.createElement('div');   monitor_element.setAttribute('id', 'submon');
it.skip('should call onSubmitFailure function with asyncErrors when the invalid form is submitted', done => {     const spy = sandbox.spy();
if (typeof mergePolys === 'Error') {     done(err);
productionSourceMap: app.buildSourcemaps === true ? true : false,     productionSourceMap: false,
},         drop: {             onMouseOver: (commit) => {
$scope.delBookmark = function(bookmarkId) {         toastr.warning('功能暂未实现。。。', "警告");         return;         var params = {             id: bookmarkId
if (false) {
}));     beforeEach(angular.mock.module('htmlTemplates'));     beforeEach(inject(($q, $rootScope, $compile, StateService, FolderService) => {
var inner = core( head ) ;     while ( !false ) {      switch (this. lttype) {
let exists = []   if (session) debugger   if (thisid) tags = tags.filter(_ => thisGroupMap[_.id].data.includes(thisid))
for (var i=0; i < offers.length; i++) {     var rows = orderBookScreen.makeRows(offers[i]);
this.a_nextPos = gl.getAttribLocation(       program, ol.DEBUG ? 'a_nextPos' : 'f');
valid = state.validate(this, params, transition);       if(!async) transition.resume(valid);     } else {
_Format.prototype.date = function (date) {   var date = new Date(date)   return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()  }
export const packageNameRegex = /^reptar\-/;
} export async function getByOrganization(parentValue, {}, { auth }) {   if(auth.user && auth.user.id) {
openInBrowser(schemesHtmlPath, function(err) {       if (err) {       } else {
matcherRegex : (function() {   var emailRegex = /[\-;:&=\+\$,\w\.]+@/,      domainNameRegex = Autolinker.matcher.domainNameRegex,
for(var i = 0; i < slides.length; i++) {     var oldPosition = parseInt(getTransformValue(slides[i].style.transform));     var newPosition = oldPosition - 100;
}                     if (! old) old = new pc['Vec' + len];                     for(var i = 0; i < len; i++)                         old.data[i] = value[i];
borderBottomStartRadius: true,   borderBottomWidth: true,   borderLeftWidth: true,   borderRadius: true,
.attr('class', 'member-entity-name')                         .text(function(d) { return iD.util.displayName(d.member); });
import NowViewingItem from './NowViewingItem.jsx'; import defined from 'terriajs-cesium/Source/Core/defined'; import ObserveModelMixin from './../ObserveModelMixin';
export default async function testHasOneHelpers(test, orm) { }
let pos = 0;         tup: for (const i of tup) {           if (i.name != null) continue;
var unassignObj = getTagsToAddRemove("unassign", tags, origTags);       var collection = 'service_templates \/' + id + '\/ tags';       if (assignObj.resources.length > 0) {
var matchCount = 0;           for (param in targetParams) {             if (param != 'q' && params[param] && params[param] == targetParams[param]) {
undo: 'Son değişikliği geri al (Ctrl+Z)',     validationCannotMove: 'Cannot move a field into a child of itself',     validationCannotMove: 'Alt alan olarak taşınamıyor',     autoType: 'Alan tipi "otomatik". ' +
'line-height': this.getMjAttribute('line-height'),       'line-height': this.getMjAttribute('line-height'),       'text-align': this.getMjAttribute('align'),
export default createComponent([ExportModal, ModalComponent], {     modules: ["Modal"  , , "Loader", "Button"] });
return value;        break;    }
if (body.error) {                         botkit.debug('API ERROR', json.error);                         return cb && cb(json.error.message);                     }
if (_aLeftChannel[pos] < -SPIKE_THRESH) {                         console.log("found it");                         startSpikePos = pos;
case 'sc':           const token = getAccessToken();           return transferSc(token, from, to, amount, memo);           break;       }
function ExperimentsService($resource) {     ExperimentsService = {};     var res = $resource('experiments', null, {
function buildTree() {   var obj = new THREE.Object3D();   var material = new THREE.MeshFaceMaterial([
injectCSS('res/features/main.css'); debugger; ensureDefaultsAreSet().then(applySettingsToDom);
$(iframeElement).on('load', function () {             already_loaded = false             updateLoadStatus(1);             console.log("iframe loaded");
tricksByUser: function() {     var blockUserTrick = $('.block-tricks-user');
return self.tab.vm.maPager.load();             console.log("TAB");
const params = this.getParams(),       scene = !!'physics'       ? new Physijs.Scene(
import React, { useState } from "react"; import PropTypes from "prop-types";
var spaceLeft = false,     vAlign = null;    if(this.parser.source.substr(this.parser.pos).search(/^\^([^\^]|\^\^)/) === 0) {
o = $.extend(this.options, this.element.data('options')),    input = this.element,    theme = o.theme;
}       case Actions.ADD_PRODUCT_TO_LIST:         let idArray = [...state.items];         idArray.indexOf(action.id) === -1 ? idArray.push(action.id) : console.log("Item is already in list");
return link;     link['on_' + name](frame); };
var cacheKeyLocale= context.locale ? context.locale + "_" : '';    var paymentProductSpecificInputs = paymentProductSpecificInputs || {};    var promise = new Promise()
decimalsRounded: 2       }),       valueChange: formatPercent(ZERO)     };
}, function(err, n) {           console.log('[tab-home.js.57]', n);            if (err) {
case 'mssql':       return `[${identifier.replace(/[\[\]']+/g, '')}]`;
console.log(`not ok - error during cluster.collapse: ${err}`);      return process.exit(1);             return callback(err);         });
}                     for (var i = 0, len = value.length; i < len; i++) {                         light = value[i];
this.info("Time to load api indexfile from server: " + (loadEnd.getTime() - loadStart.getTime()) + "ms");       }, this);       req.addListener("failed", function(evt) {         alert("Couldn't load file: " + url);
import { defineMessages, injectIntl } from 'react-intl'; import { NonIdealState } from '@blueprintjs/core'; import Waypoint from 'react-waypoint';
record = registeredUIPreviewerTarget.contentStore.getRecord(             itemId.replace(/\.[^\.]+$/, "")         );
var searchPaths = this.searchPaths.filter(function(p) { return existsSync(p); });             var watcher = chokidar.watch(searchPaths);             var _this = this;
getItem: function(hash) {       window.AMOUNT = window.AMOUNT || 0;       if ( (item = this.attachedItems[hash]) ) {
var verticalHeights;   $('.horizontal-context').fadeOut(100);   verticalHeights = window.getVerticalHeights();
'use strict';
}     GetEvent = GetEvent;     _This.$EventSrc = function (event) {
it('> 1 amino acid long sequence', function() {   debugger;   aaData = getAminoAcidDataForEachBaseOfDna('atgtaat', true);
define(['imp/renderModule/nodeShapeRelative'], function(nodeShapeRelative){
intake.create = function(options){     var options = options || {};     var context = require("zeromq");
: table[field].lt(context.request.urlTokenized[index - 1])             break;           case "explicit":
return false;   };  }
describe('.reset()', function() {     var store = new JsonApiDataStore(),         payload = {
if (typeof line === 'string') {       var data = /^([^\(<]+)\s*(<([^>]*)>)?\s*(\((https?:\/\/[^\)]+)\))?/.exec(line)       line = {
$("#"+sourceId).on("select2:open", function (e) {                 var predefinedStructs = self._package.getStructDefinitions();
chrome.storage.local.get(message.data, function(response) {       debugger;       sendResponse(response);
function(error) {       $scope.setAlert(new ErrorAlert("Error while clearing index cache", error));      }
var r = BigInteger.small[diff];   if (this._s < 0) {
var vm = require('vm'); var util = require('util'); var nunjucks = require('nunjucks');
__inline('./scroll'); __inline('./tab');
break;         case model_1.TypeKind.COMPOSITE:             if (visitor.onCompositeType) {
if (id !== data[pkName]) {     var err = new Error(g.f('{{id}} property (%s) ' +             'cannot be updated from %s to %s', pkName, id, data[pkName]));
$("#github").removeClass('hidden');     }else if (value = 'asn'){         $("#github").addClass('hidden');
while (parent = parent.parent) {           nestedIncludes = [_.extend({}, child, { include: nestedIncludes })];
(function(module) {
reporters: ['progress', , 'coverage'],
document.getElementById("id_snippet").cols=40;          $('#id_snippet').val("#To avoid indentation errors use tabs for indentation for Python questions");       });    $('#id_type').bind('change',function(event){
return timestamp; };
});     console.log('formatted_data', formatted_data);     return formatted_data; };
angular.module('copayApp.directives')   .directive('incomingDataMenu', function($timeout, $rootScope, bitcore) {     return {
var chance = require('chance')(),   urllib = require('url'),   _ = require('underscore'),   PouchDB = require('pouchdb'),
return this.i18n.Suspended;                     break;                 case 4:
viz.ui.button = setup_buttons (viz, viz.ui) ;   console.log(viz.ui.button) ;   var playerConfig = {
this.init( );   };   Selectpicker.prototype = {
return res.type('application/json').status(200).send('{"state": "' + state + '", "key": "' + req.params.name + '"}');         debug('plugin disabled');       });
entryOrderLength = entryOrder.length;                 for (var i = 0; i < entryOrderLength; i++) {                     o.push(entryGroups[entryOrder[i].format(dateCompareString)].join('') + this.groupEndTemplate.apply(this));
pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2;       }else{
cwt.CoSheet = my.Class({
}   var state = stringReduce(state.keypath, reducer, initialState)   state = reducer(state, 'END', state.keypath.length, initialState.keypath)
function _clickItem(scrollWheel, event) {
it('returns root dir from config', () => {   const { rootDir } = createCosmosConfig({ rootDir: '..' });   expect(rootDir).toBe(getCwdPath('..'));
var relation = new Relation(left.header, left.data);     for( var i=0; i < right.data.length; i++ ) {       relation.push( right.data[i] );     }
}   } catch(e) { }   return false;
return fr.readAsArrayBuffer(packet.data); };
};     function resetCrop() {       imageRepresentationProxy.getCropFilter().reset();       croppingWidget.resetWidgetState();       resetCropHandlers.forEach((handler) => {
Object.defineProperty(exports, "__esModule", { value: true }); ;
case fragmentValueTypes.COMPONENT:     debugger;     break;   }
'/cgi-bin/lookup-tunnel-dns', '/cgi-bin/rootca', '/cgi-bin/log/set']; var PLUGIN_PATH_RE = /^\/(whistle|plugin)\.([a-z\d_\-]+)(\/)?/; var STATIC_SRC_RE = /\.(?:ico|js|css|png)$/i;
success(function(){                         motechAlert('security.delete.user.saved', 'security.deleted');                         $scope.showUsersView=!$scope.editUserView;
import webpack from 'webpack' import path from 'path'
}   grid.disconnect();  })();
var lines = text.split(splitRegExp),         line, remainWidth, isLaseLine, newLineMode;     for (var i, linesLen = lines.length; i < linesLen; i++) {         line = lines[i];
var keymap = top, valmap       var patstr = require('util').inspect(pat)       for( var i = 0; i < keys.length; i++ ) {
function _pluginSyntaxAsyncGenerators() {   const data = _interopRequireDefault(require("@babel/plugin-syntax-async-generators"));   _pluginSyntaxAsyncGenerators = function () {     return data;
mouseUpHandler(mouseCoordinates) {     this.mouseDown = false;
this.object = object;  this.domElement = ( domElement !== undefined ) ? domElement : document;
submitComment: (parent, text, tags) => Promise.resolve({ ok: true }),
}   return obj; };
var v = req.param('v');   if(!v || !v.match(/201[0-9]\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}/))     return res.send(400,"Invalid video id");      var thumbnail = '/'+THUMBNAILS_DIR + v + '.jpg';
import React, { Component } from 'react'; import {
server.close();     process.exit(0);   }
get events() {} }
HEADER_FORMAT = '\n',  CONSTRUCTOR_REGEXP = /(?:function)\s+(?:[A-Z][\$\w]*)\s*\([\$\w\s,]+\)/g,  ARGUMENTS_REGEXP = /\(\s*[\$\w]+\s*(?:,\s*[\$\w]+\s*)*\)/,  PARENTHESES_REGEXP = /\(|\)/g,  BRACKETS_REGEXP = /(?:^\[)|(?:\]$)/g;
var field_array = [];     obj = kbn.flatten_json(obj._source)     for (field in obj) {       field_array.push(field);
} else {       var seekTime = this.hoverPosition * this.duration     }
} else {       for (var keys = _.keys(data), i = 0, res = [], l = limiter || keys.length, res = []; i < l; i++)         if (predicate(data[keys[i]], keys[i], data)) res.push(data[keys[i]]);
args.schema = path.join(process.cwd(), args.schema); args.destination = args.destination; const validSchema = validateSchema(args.schema);
return edge[+(edge.left === cell.site)];   };
adjusted_scale : this.adjusted_scale,  asset_swf_v : "http:\/\/c2.glitch.bz\/items\/2012-04\/lemene-1334267482.swf",  admin_props : false,
ok(_.isFunction(layout.setView), "Has the setView function");      ok(_.isFunction(layout.getAllOptions), "Has the getAllOptions function"); });
var deferred = new scout.DeferredGlassPaneTarget();   var renderedHandler = function(event) {
}                 break;             case 'vec2':
function HudObject () {}; HudObject.stdWidth  = 40;
const swagger = require('swagger-parser'); const colors = require('colors'); const _ = require('lodash');
import { Link } from 'gatsby'; import FaArrowLeft from 'react-icons/lib/fa/arrow-left'; import FaArrowRight from 'react-icons/lib/fa/arrow-right'; import PropTypes from 'prop-types';
return result;   };   var regjsparser = {
var names = Object.keys(tree);   for (i = 0, l = names.length; i < l; i++) {     var name = names[i];
media.playtime = time     media.custom.currentTime = time   } catch (e) {}
if (xhr.readyState = 4) {
var x1 = y1 = 0.0;   var x2 = 1.0;   y2 = this.canvas.width / this.canvas.height;
function AgenciesController ($log, agencies) {} })();
T.prototype.addpoint_ = function(xys, stat) {   var e = this.lastLine_   if (e === null) {     e = T.surface.makeLine(this.surface)
res.end();   };  });
vdom.val = el.textContent;           for(var child in vdom.children) {                        }
cbus.server.searchPodcasts = function(searchTerm, callback) {      request({        url: "https:
if (params.viz.resize) {       console.log('here')
set(value) {       if (Array.isArray(value) && value.length === 1) debugger;           if (!Array.isArray(value)) value = [String(value), {}];
return 'pending';         break;       case 1:
switch (action.type) {     case types.ADD_FRIEND:       const len = state.friends.length ? state.friends.length : 1;       const newId = (state.friends[len - 1] + 1) || 0;
render(pageBody, pageData, file) {     const layoutTemplate = this.layouts[pageData.layout];
return 'application/json';             break;         case Resource.XHR_RESPONSE_TYPE.DEFAULT:
}, function () {             debugger;         });
ecma: 6,                         module: true,                         toplevel: true                     },
function showCashBalance(augur, address, callback) {   console.log("showCashBalance");   augur.api.Cash.balanceOf({ _owner: address }, function (err, cashBalance) {
try {                         return new Blob([str], {                             type: 'application/octet-stream'
return conn.connect(config); }; module.exports = createClient;
case "amortization":                         var calculation_method = calculateAmortization;                     break;
}).catch(done); };
}         return next();       } else {
innerTableDate:function () {             debugger;             let self = this;
return false;           this.logger("removing enhancement request for closed source repo with repository===null");         }         if (enhancement.dataPath === ".repository" && repo.repository === null) {           return false;
DataGrid.DataGridWidget = class extends UI.VBox {
export function merge(oldCookieString, newCookieString) {   const oldCookieJar = !!oldCookieString ? parse(oldCookieString) : [];   const newCookieJar = !!newCookieString ? parse(newCookieString) : [];
tocView = function(mode) {     var toc = document.querySelector(".github-toc");     if (toc) {
getBrowserName : function() {    return BrowserDetect.browser;   },
write(ctx, ctx.currentIndent);                     var childNode = children[i];                     ctx.currentOMNode = childNode;                     writeSVGNode(ctx, i);                     write(ctx, ctx.terminator);
const versionFile = path.join(__dirname, '../src/version.js'); const newContent = `export default \'${newVersion}\';\n`; fs.writeFileSync(versionFile, newContent);
firstStep = false;    }    for(i in obj){     if(typeof obj[i] == 'function'){
db.rpush("log-" + this.room, this.cmdstr, __bind(function() {               return io.sockets.emit('broadcast', this);             }, this));
