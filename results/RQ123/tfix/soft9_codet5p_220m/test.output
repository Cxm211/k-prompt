if(fs.existsSync(path)) {     throw new Error('The file "' + path + '" already exists!');   }
this.formTitle = '修改字典'         this.selRow.detail.split(',').forEach(function(val,index){           var arr = val.split(':')
var response = {      host: req.headers.host    , cache: qs.parse(req.headers['cache-control']) || {}
var _super = this.$super,                     _self = this;
ret[inputtypes] = (function(props) {         for (var i = 0; i < props.length; i++) {             f.setAttribute('type', props[i]);
var that = this;         this._properties = attrs || {};
}    var name = $input.val(),      filter = controls.search.filter;
self = this,      start = function() {       var CodeMirror = self.CodeMirror,        ta   = $(textarea),
var ring_desc_start = ring_start + 4;         var flags = that.memory.read16(ring_start),
StringPrototype.escape = function() {     return _.escape(this) }
}; }(this));
if (!gl) {         throw new Error("WebGL: Failed to create a WebGL context!");     }
var concat = require('concat-stream') var context = require('../context') module.exports = load
evt.preventDefault();                             self._trigger('selected', null, file);                             modal.close();
var baseDir = config.assetsDir + 'img';     src = config.buildGulpSrc(src, baseDir, '**
{                     constructor: FindSearch,                     pageName:'search'                 }
this._streamBindings = undefined;     this._super(...arguments);   },
for (var k = 0; k < result.response.headers.length; k++) {                                         result.response.headerArray.push({                                             name: k,
targetElement.setAttribute('id', container.getAttribute('id'));     }     Object.keys(container.style).forEach(function(key) {       targetElement.style[key] = container.style[key];
}(window));
"Position cursor after last char and hit backspace", function() {         this.editor.selection.set({           start: [0, 4],
if (input.eventType!= 1) {    throw new Error("Parser must be on START_ELEMENT to read next text.");   }
var section = null;         var cursorPos = that.editor.cursorManager.getCursorPosition();
describe("create an h5 and group ", function(done) {          let file;
var buffer = context.createBuffer(1, 44100, context.sampleRate)
}       }, _callee);     }));
}             handler(self.collectEventData(element, type, ev));         };
a = query.split(/\s+and\s+/);            for (k = 0; k < a.length; k++) {             s = a[k];
async function _setup (accounts){   mockToken = await MockToken.new();
var $export = require('./_export'); var $task = require('./_task'); $export($export.G + $export.B, {
helpers.each(values,function(dataPoint,index){         var color = that.colorManager.getColor(dataPoint);         datasetObject.bars.push(new this.BoxClass({
method: 'POST'         }).done((resp) => {             this.set(resp);
if (source.warns)         warns.push(...source.warns);
.reply(500);       this.customDomains.verify({ id: this.data.id }, this.data).catch(function(err) {         expect(err).to.exist;
Validator.prototype.validate=function(grp, args){     var isGroup =!(!grp ||!grp.length);     var inputs = isGroup? this._inputsForGroups(grp) : Object.keys(this._inputs);
define(Array, 'compact', function() {     var results = [];
}(window));
Promise.all(promises).then(function () {                     var canvas = document.createElement("canvas");
return globalFunctionTrampoline[globalFunctionName](...arguments)       } else {
if ( isFunction ||!( l <= 1 || typeof value!== "string" || jQuery.support.checkClone ||!rchecked.test( value ) ) {    return this.each(function() {     var self = jQuery( this );     if ( isFunction ) {
return {       contentType : HoneyProxy.getContentTypeFromHeaders(response.headers)      }
spyOn(this.addon, 'getDOMImage').and.returnValue(stubbedImage);         this.$el.on('input', () => {             inputTriggerCount++;
var value;         return (function(...args) {             if ((value === undefined))(value = f(...args));             return value;
if (sourceName) {         memo[this._sourceIdAttrName(name)] = val.id;       } else {
for (let p = 0; p < polygons.length; p++) {         let polygon = polygons[p][0];
values = this.uniqueValues;     }     this.uiFilteredValues = {};     for (var i = 0; i < values.length; i++) {
function PrivateKey(version, buf, compressed) {   PrivateKey.super(this);   if (compressed!== undefined)
var server = require('./server') var request = require('../index') var tape = require('tape') var s = server.createServer()
'upper',     function(s) {       return String(s).toUpperCase();     }
function fill (a, b, c) {       return setter(Array.prototype.fill.call(this, a, b, c))     }
return function() {               var err = arguments[0];               return __slot_1.self_sig = arguments[1];             };
var focused  = dates.eq(date,  this.state.focusedDate,  'year')          , selected = dates.eq(date, this.props.value,  'year');
}     }, _callee6);   }));
exports.promptForPermission = function () {     console.warn('Please use `notification.badge.registerPermission` instead.');     this.registerPermission(...arguments); };
, 'collection'    , 'connections/repl_set_servers'    , 'cursor'
exports.testCases = [    'specs/util-path/test.html',    'specs/util-events/test.html',    'specs/util-path/test.html',
bespin.subscribe("file:saved", dojo.hitch(this, function(e) {             this.fetchFileUpdate(e.filename);         }));
TNTools.register('fontChange', function() {   var font = $(this).val();   proof.empty();
}         return fn(...parameters);     }
cache: false,             data: $form.serializeArray(),             type: 'PUT',
s += "var " + __rt + "=require('streamline/lib/callbacks/runtime').runtime(__filename)";   Object.keys(rt).forEach(function(key) {    var k = _safeName(options.precious, key);
if (this.__isDrag) return;         evt.preventDefault();         updateRecords(evt);
var request = require('request')  , qs = require('querystring'); module.exports = function routes(app){
function native_BoolImplementation_EQ(other) {   return typeof other == 'boolean' && that == other; }
case KEY_ENTER:             return onEnter(...args);         case KEY_TAB:
else {                 throw new me.Error("no level loader defined");             }             return true;
var Advisor = function() {  this.pointcut = null;  this.advice = null;
{ from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit" }, { from:"/edit
this.collection.reset(validSelectors);
var Atom = infestines.inherit(function Atom() {     AbstractMutable.call(this);     if (arguments.length) this._emitValue(arguments[0]);
return _ret = (_temp = (_this = __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default()(this, (_ref = Demo.__proto__ || Object.getPrototypeOf(Demo)).call.apply(_ref, [this].concat(args))), _this), _this.state = {       disabled: false,
, join = require('./shieldbattery/join') var socket = io.connect('https:
componentDidUpdate(prevProps, prevState) {     if (this.state.editing &&!prevState.editing) {
return cb(err);       fs.write(info.fd, msg);
}       return this.fromBuffer(buf,...rest)     }
this.options = {};
} else {         throw new Error(JSON.stringify(data));       }
storeErrors(filterDuplicates(idCounts));   this.complete = true;
if (Array.isArray(this._renderProperties)) {   for (var i = 0; i < this._renderProperties.length; i++) {    render(this._renderProperties[i], this._encodings, this._options);
, end = { p : verb.last( knots ), l : totalLen }  , mid = {};
if (layers.hasOwnProperty(id)) {       throw new Error('invalid or duplicate layer id:'+ id);     }
render: function(text, record) {       return (       <Button color="primary" size="sm" onClick={() => this.hendleDeleteCrud(record.id)}>         Delete
var map = self.get("map");
"Integer": new Integer(),   "Boolean": new Boolean()  };
everyHour = 5 || minute * 60; function noop() {} function updateScript(script) {
Pipeline.prototype.index = function(...args) {     this.gremlin.queryIndex.apply(this.gremlin, args);     return this;   };
(subAsParent, schemaFromAllOf) => {                      (collapseSchemas(             subAsParent,
var request = require('../index') var http = require('http') var tape = require('tape') var methodsSeen = {
for (var j = 0; j < wires.length; j++) {                         var node = flows.get(wires[j]);
function(language){  return this.toTypedExpression(language).s; }; Number.prototype.toStrings=function(){  return this.toString().replace(/e([\+\-])([\d.]+)/,"\\cdot 10^{$2}");
if (response) {           for (i in response.structure) {             if (response.structure.hasOwnProperty(i)) {               nest.structure = i;               nest.presence  = response.structure[i].away === false? 'on' : 'off';
exchange () {     throw new Error('exchange Not Yet Implemented', 'AbstractOverlay.js');   }
describe('2.8 connection request queue (basic functionality)', function(){     function getBlockingSql(secondsToBlock) {
module.exports.log = function (...args) {   console.log(...args); };
if (confProps.scales!= null) {                 confProps.resolutions = [];                 for(var i = 0; i < confProps.scales.length; i++) {
, doc = xmlbuilder.create()        , child = doc.begin('plist', XMLHDR, XMLDTD).att('version', '1.0');
, inherits  = require('util').inherits
} else {             if (arguments[0]!== 'newListener') {                 if (events[arguments[0]]) {
this.toggleBottomMenubar();         },
typeof getter =='string'? getter : getter && getter[name] || name);
}     this._items.sort(function (a, b) {return mcmp(key(a), key(b));}); }; list.PY$insert = function(index, x) {
return {     type: actions.UNLOCK_IN_PROGRESS,   }
this.fire( YS_COMPLETE );       }.bind( this ) );
}     return result;   }).catch((error) => {
'use strict'; var deferred = require('../../lib/deferred'); var promise = require('../../lib/promise'); module.exports = {
accepts: ['js', 'css'],
bus.emit('file-add', {         source: that.id,         name: file.name,
csv_row.push(friend.name);     for (i = 0; i < 3; i++){       this.addColumn_(csv_row, friend.email[i]);     }
if (!this.get('selectedRepo')) { return; }                  if (!this.get('category.customappname')) { return; }
}         this.set('memberCount', this.store.peekAll('member').length);         this._lastFetchDate = newFetchDate;
function log(...aArgs) {  utils.log('autoHide',...aArgs); }
var constr = function () {                 var obj = this;
doneArgs = [ ]       return
module.exports = function() {  return new Palette(); }
done();       });     });
if(Array.isArray(encoded)){     for(var i = 0; i < encoded.length; i++){      nextLevel(encoded[i]);
if (finalConfiguration.zoomable) {                 that.zoom = zoom(d3.select(this), dimensions, scales, finalConfiguration, data, draw);             }
temp = replace     replace = []     for (i = 0; i < search.length; i += 1) {
function hoverTruncate(grid) {     var $grid = $(grid);     if ($grid.hasClass('hovercard')) {
cb(null, file);  }, function (cb) {
that.send(from, 'Hi'+ from + ', nice to meet you!');       });
var guid = table.attr('data-table-guid');     jQuery.support.cors = true;
favMapView.render();      this.$('.js-favMapTitle').removeClass('is-hidden');     }.bind(this));
var RequestObject = Ember.Object.extend({     init() {       this._super(...arguments);
try {         return expressionCompile(expression).apply(instance, args);       } catch (e) {
action = function(varName) {                 storedVars[varName] = accessor();             };
const arg = combinator.args[i]                     switch (arg.type) {
var i, len = this.masksProperties? this.masksProperties.length : 0;     this.viewData = createSizedArray(len);     this.solidPath = '';
})(   this.Blotter, this._, this.THREE );
});   this.ipcClient.on('error', function (error) {
return key_promise.then(function(key) {       config = that.getSignConfig(getJwaNameForSignKey(key));       return Jose.crypto.subtle.verify(config.id, key, signature, Utils.arrayFromString(aad + "." + payload)).then(function(res) {
type: Array,             default: () => []         },
const checksums = JSON.parse(new Buffer(process.env.ASSETS_CHECKSUMS, 'base64').toString('ascii'));     Object.keys(checksums.assets).forEach(srcPath => {       const checksum = checksums.assets[srcPath];
function e(e) {             var i = t.call(this) || this;
default:         throw new Error('invalid matrix mode'+ mode);     }
promise = Q.resolve();             that._logger.warn('not-installed', name, {                 name: name
describe("copier", function() {   it("should send from Emitter to Collector via copier", async function() {     let result = [];
const results = []   content = String(content).replace(/\/\*.+?\*\/|\/\/.*(?=[\n\r])/g, '')   while (match = exports.CSS_IMPORT_REG.exec(content)) {     results.push(match[2])
} else {       Object.keys(styles.computed).forEach(function(key) {         computedStyles[key] = styles.computed[key](styles);
this.anim(                 elem,
var typeName = this._getTypeNameForMessage(payload)           , cacheItem = new CacheItem()
items = this.filteredItems.map((item) => {       return <option value={item.id} selected={true}>{item.text}</option>     })
it('add block', function() {     let editor = this.setEditor('<p>0123</p>');     editor.formatAt(4, 1, 'align', 'center');
}else{    for(var arg in this.options){     if(this.options.hasOwnProperty(arg)){      this.payload += '&' + arg + '=' + this.options[arg];     }
var touch = e.changedTouches[i]             var slot = slotted[touch.identifier]             if (slot === void 0) {
{  var a = arguments[i+1].charCodeAt(0);  if(a!=header[i]) return false;
var args = Array.prototype.slice.call(arguments, 0);                     this.trigger(...args);                 }
};     self.__doreq("DESTROY-EXISTS",getoptions,null,function(result) {       self.logger.debug("Returned rest api info: " + JSON.stringify(result.doc));
showPageLoadingMsg: function( theme, msgText, textonly ) {    this.loaderWidget.loader('show', theme, msgText, textonly );   },
var c = w({ first: f('value') });       var result = c.build(this.grammar).fragment;       expect(result).to.eql('first = value');
var status = new app.Model.StatusUpdateModel();     status.set("attachmentIds", []);     _.each($(e.target).serializeArray(), function(data) {
cwd: './src/',                 files: [ 'core
, sourceExtract = require ('./sourceExtract')  , gruntUtil = require ('./gruntUtil');
var findIn = require('../examples/find-in'); describe('integration', function() {   var db, modules;
if (rc!= 0) {         throw new Error("can not call subscribe command");     }
});         this.$el.trigger('change');         this.render();
} else {         console.log(`Winner: ${fastest}`);       }
{             value = [];             for(var i=0; i<count;i+=2)
html += getFileHTML(path,val)             })             html += "</ul>"
}).catch(function(ex) {                 return that.alert(ex.toString(), 'danger');             });
return indent + "[object " + (obj.tagName || "Node") +"]";             var arr = [],type = $.type(obj),next = indent +  "\t";             switch (type) {
return (dispatch) => {     dispatch(actions.showLoadingIndication())     _accountManager.clearSeedWordCache((err, account) => {
inherit: SVG.Element,
this.isMounted = false     delete this.root._tag   } }
, end = null                    , $_cbs = $table.find('tbody td:first-child [type=checkbox]')                     , $checked;
function getBalances(request, response, next) {   var options = {
lang.mixin(this.config, this.commonConfig, this.appConfig, this.customUrlConfig);
return { metaInfo, tags } }
provider: '',       traits: that.getSourceTraits(),    }),
if (!goog.array.remove(this.topComments_, comment)) {     throw Error('Comment not present in workspace\'s list of top-most comments.');   }
define(Array, 'partitionBy', function(fn) {     var partitions = {};
function newFile(req, res, next) {     var that = this, params = req.params,         themeHome = getViewsHome(req.app), themeId = params.id,
}; const getSiteConfig = async function(source, destination) {     let siteConfig = {};
this.element = element;  this.store = [];
if( descriptor.resource.getRegistered(namespace)!== model ) {         throw new Error('namespace [' + namespace + '] has already been registered, autoRegister failed.');       }
function _merge (getKeys,...args) {     return reduce(args, function (result, source) {         forEach(getKeys(source), function (key) {
if (!extensions.instancedArrays) {         throw new Error("WebGL: No instanced rendering support!");     }
const result = [];     for (var idx in listValues) {       if (listValues.hasOwnProperty(idx)) {         result.push(this.valueType.getValue(listValues[idx]));       }
describe('#compile_solidity', function() {     var expectedObject = {};
const getCollectionLoader = function(collection) {         return async function(filePath) {             const extension = path.extname(filePath);
this.get('player').setVolume(this.get('volume'));   },
{    throw new Error("insufficient read permissions on path");   }
function checkToEnd() {       if (this.y <= this.maxScrollY + threshold) {         this.trigger('pullingUp');
options: options,
propCallback({             wavesurfer: wavesurfer           });
class UsersStore extends GetSetBaseStore {   constructor(...args) {     super(...args);
const key = [name, pipeline_name || '', +remote].join(':')   this.asset_cache.set(key, this._findAsset(name, pipeline_name, remote))   return yield this.asset_cache.get(key) })
module.exports = () => {   return async (ctx, next) => {     try {
var parsed = {};         for (var key in includeObj) {             if (includeObj.hasOwnProperty(key)) {                 parsed[key] = this._parseIncludeArgs(includeObj[key]);             }
if (_.contains([ "istate", "ostate", "state", "meta", "model", "connection" ], what)) {             _apply_persist("on");         } else {
}             if (that.type.toLowerCase() == "checkbox") {
var ByteCode = new Array(); var ArrayType = new Map(); ByteCode.codes = {
if (proxyDetails.method && proxy[proxyDetails.method]) {             return proxy[proxyDetails.method](...proxyDetails.args);           } else {
return function (socket, nextstage) {     socket.emit(event,...arguments);   }
default:         throw new Error('illegal char:'+ c);     }
function getPersonalHolidays(data) {   var personalHolidays = [];   for(var i = 0; i < data.response.absences.length; i++) {
router.get('/connect', passport.authenticate('google', { scope:     [ 'https: router.get('/google/callback', passport.authenticate('google',
{          Object.keys(modal_parameters.events).forEach(function(key){           $(this).on(modal_parameters.events[key], function(event){                     if(modal_parameters.on_event){
trackException(error, fatal = false) {     GoogleAnalyticsBridge.trackException(this.id, error, fatal);   }
var tmpl = $('#job-template').html()    , from = 0;
case 114:              for (var idx = 0; idx < content.length; idx++) {                 records.push(processResult(content[idx], results.subcontents));
json = _a.sent();                         return [2, json? utils_1.assetFromJSON(json) : null];                 }
HTMLMediaElement.prototype.play = function(...args) {       let p = originalPlay.apply(this, args);       if (p) {
} else if ("0".split(void 0, 0).length) {     StringPrototype.split = function split(separator, limit) {         if (separator === void 0 && limit === 0) { return []; }
const missedPrerequisites = this.checkPrerequisites(player);       missedPrerequisites.forEach(prereq => {
if (!json.txs) {         throw new Error('Could not fetch transactions from API')       }
var icon_dis;     for (var j = 0; j < res['RelatedTopics'][i]['Topics'].length; j++){         if (j + i > 3)              break;
TW.TabManager.initTabs = function (tabs) {   for (i = 0; i < tabs.length; i++) {     TW.TabManager.addTab(tabs[i]);
const b = inst(this.body.infer())    const ps = new AST.TypeConstructor('Product', [])    for (const r of this.args) {
, fs = require("graceful-fs") rebuild.usage = "npm rebuild [<name>[@<version>] [name[@<version>]...]]"
console.log("CHAN_GET: " + url + " " + res.statusCode);                         stream_cb(res);                 });
var repoName= url.substring(url.lastIndexOf("/")+1,url.lastIndexOf(".git"));               var input = input.replace(/\s\s+/g,' ');               $("#"+id+".response").append("Cloning into '"+repoName+"'... <br/>");
initElements(nodes);     return nodes;   };
, async = require('async')  , isMac = process.platform === 'darwin';
) {                             that.markers[i].keep = true;                             doAdd = false;
this.blog.photo(this.options.blogName, postOptions, function(err, result) {   that._logResult(err, result, that.options.blogName);  });
} else {         throw new Error('illegal version:'+ version);       }
$.ElementList = function () {  function $ElementList(...args) {   this.src = Array.from(args);  }
]).forEach(function(event) {     session.on(event, function(...args) {       router.send.apply(router, args);     });
var scale = this.container_div.width() / (this.view.high - this.view.low);                  if (include_labels) this.zi_slots = {};         var dummy_canvas = $("<canvas></canvas>").get(0).getContext("2d");
function execSync(command, options, callback) {   options = normalizeExecArgs(command, options, callback);   var inheritStderr =!opts.options.stdio;
if (!$(this).parent().hasClass('dragging')) {                 $parent.css({ width: '' });             } else {
, Db       = require('../../')  , Base = Db.Base, StringType = Db.String; module.exports = function () {
if (requestModel.security) {       for (var securityOption in requestModel.security) {         if (!requestModel.security.hasOwnProperty(securityOption)) continue;         var auth = AuthManager.getAuth(securityOption);
setTimeout(function () {      var oAppSettings = this._oCore.getConfiguration(),       oThemeSelect = this._oCore.byId("ThemeSelect"),
if (key=="value"){    this._renderStars(this.value);
var fn = strings[this.fn];         return fn? fn(...newArgs) : this.fn + '(' + this.args.join(', ') + ')';     }
var calendar = [];             for (var i = 0; i < 6; i++) {
addon.port.on('socket-disconnected', function(response) {     that.disconnectingSockets[response.socketId].call();   });
if (duration < 100) {       throw new Error('Duration should be greater than 100 milliseconds or it won\'t really be noticeable');     }
Object.keys(this.core.plugins).forEach(pluginType => {         const plugins = this.core.plugins[pluginType]
clear: function(property) {             return function(fields) {                 return this.__clearPropertyValue([property].concat(_.isString(fields)? fields.split('.') : fields || []));             };
_cmdFilter: function(...args){    return this._filter.apply(this, args[args.length - 1]);   },
var datas = new Map();     var test_names = new Array();
that.options.autoplay = true;             that.load();         }
const data = jsonfile.readFileSync(that.filepath);   return data;
var bigInsert = '';      for (var w = 0; w < config.widgetSets.length; w++) {          var file;
checkLogin(id, skey) {         let param = { id, skey };
var cometURL = document.location.replace(/\/jquery-examples\/.*$/, '') + '/cometd';       cometd.init({
}    , categorizr = {         categorize: function (...args) {           var args = [].slice.call(arguments, 0)
options.errorThrown = errorThrown;       if (error) error.call(this);     };
, len = socks.length    , sock = socks[this.n++ % len];
function handleEnter(event){         if (!this._down) return;         this._eventInput.off('mousemove', handleMove.bind(this));
step: function(ignoreTime){
var _onEnd = function(){         this._dirtyLock--;         if (this._dirty && this._dirtyLock == 0) {
callback();       })      .catch(function (error) {
function moveNestedTags(child, i) {   Object.keys(child.tags).forEach(function(tagName) {     var tag = child.tags[tagName]
module.exports = methods;   } else if (root) {     for (var key in methods) {       if (methods.hasOwnProperty(key)) {         root[key] = methods[key];       }
get Model() {         throw new Error("ModelHandler.Model must be overriden!");     },
toggleSelection(id, type, changeHead) {
var maxHeight = 0;  for(let i = 0; i < encodings.length; i++){    let options = merge(options, encodings[i].options);
return self._call(context, arguments);    };   },
return newModels;     }, []));     this.$namespace.publish('_.reset', oldModels);
setTimeout(() => {       if (this.windowSession.currentRecordingTabId[testCaseId] === activeInfo.tabId && this.windowSession.currentRecordingWindowId[testCaseId] === activeInfo.windowId)         return;
var core = require('../../modules/_core'); var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify }); module.exports = function stringify(it) {
} else {     throw new Error('no view found');   }
function getPlayerByName(name) {     for (var i = 0; i < discovery.players.length; i++) {         var player = discovery.players[i];
}             return fn.apply(this, args);         };
var fs      = require('fs')  , dir     = __dirname; modul8('main.coffee')
this.onComplete(             async function() {                 if (mustCompile) {
'use strict';
hook('onClick');    var url = this.getAttribute('url');    var fullurl = 'u=' + encodeURIComponent(url);
var transform = function(chunk, enc, callback) {     this.push(template(chunk));     callback();   };
var SimpleBrain = function(user){     Brain.call(this, user); };
}             throw new Error("unknown JPEG marker " + fileMarker.toString(16));         }
var key ='secret12'      , pt = '☭'      , ct = twoFish.encrypt(key, pt)      , cpt = twoFish.decrypt(key, ct);
.done(function() {    var data = $form.find('form').serialize();
{     if (typeof(e) === 'undefined')      return false;
TextLayout.prototype = new RefObject;  TextLayout.prototype.constructor = TextLayout;
$(AVG_REPLICATE_VALS_BOTTOM_MENU).click(() => {         grnState.nodeColoring.averageBottomDataset =!grnState.nodeColoring.averageBottomDataset;         updateApp(grnState);
that do not match any member of "cols".`,       code: function(...args) {         const cols = this.getColIdxs_(args);         return this.DOT(this.GridRow.DATA, this.ArrayExtract.create({
var self = this;   args = extractCallback(args);   args[0] = Mongo.Collection._rewriteSelector(args[0]);
if (typeof (key) === 'object') {                 for (var name in key) {                     if (key.hasOwnProperty(name)) {                         this.setVisual(name, key[name]);                     }
function SaveCommand() {   SaveCommand.super.call(this); }
it('edits textbox', () => {       cy.wrap(this.$textboxEl).within(() => {         cy.get('.widget-menu-regular').click({ force: true }).within(() => {
var object = require('isomorph/object')  , validators = require('validators')
constructor(){         super();         super.addMixedIn('Heritable');
} else {     return fn();   }
case "domain":                  loadSiteNotes(true);         break;
init: function() {     this.A = [];     this.A[1] = +0.6399175073;     this.A[2] = -0.1358797613;
var generatorCoffee = path.join(self.generators, generator + '.coffee')            , generatorJs = path.join(self.generators, generator + '.js');
pauseRecording(self.valueWillMutate,self);           if(write &&!self.write)throw new Error("This observable can't be set.");           self.value = value;
}  deny(...args) {   return this.model.deny.apply(this.model, args);  }
this.options = options; }, {
this.closing = false;   this.loaded = false;   await this.fire('close'); };
this.append(ws`    ${this.declVars(`__WRAP_CACHE__ = __RESULT__, __WRAP_TMP__ = [], __WRAP_POS__ = 0`)}    __RESULT__ = ${this.getReturnDecl()};
var options = this.options(defaults);
root["javel"] = factory(); })(this, function() { return  (function(modules) {
gutil.log(gutil.colors.red('Running gulp is', cliPackage.version));     gutil.log(gutil.colors.red('Local gulp (installed in gulpfile dir) is', cliPackage.modulePackage.version));   }
if (val === 'y' || val === 'yes') {       for (var i = 0; i < newer.data.length; i++) {         debug('pushing', newer.data[i])
expect(emailValueAfter).toEqual(null);       const passwordValueAfter = this.component.loginForm.get('password').value;       expect(passwordValueAfter).toEqual(null);
try {         this._stackdriver.report(result);       } catch(err) {         console.error('Error while reporting error:'+ err);       }
inputSignal = true;     };
if (err) {       that.emit('error', err);       return;     }
Planner.mapDom.remove(cardDom);
send: function(connectionId, reportId, data, callback) {                  if (connectionId ==='mockConnection') {
Renderer.prototype.render = async function(template, locals, options) {   var o = this.options;
if (!prototypeOfArray.map) {   prototypeOfArray.map = function(callback, thisArg) {     var mapped = [];
module.exports = function zipWith(cb) {   var args = argsToArray(arguments).slice(1)
, getPrototypeOf = Object.getPrototypeOf  , proto = Proto.prototype;
if (window.DEBUG) {    console.log(...arguments);   }
function L(...args) { if (BarNote.DEBUG) Vex.L('Vex.Flow.BarNote', args); } export class BarNote extends Note {
Object.keys(file[testType]).forEach(function(key) {             factory(file[testType][key].name, file[testType][key], file.scope);
if (testNull === null) {       throw new Error('No match in string')     }
catch (e) {     alert("Exception creating service " + serviceName + " : " + e);    }   }
};  for (var p in thisClass) {   if (thisClass.hasOwnProperty(p)) {    Employee.prototype[p] = thisClass[p];   }
, Iterator   = require('./iterator')
user: require('lsk-user/uapp').default(...arguments),     offer: require('~/modules/offer/uapp').default(...arguments)   };
var Cookie = tough.Cookie exports.parse = function(str) {
if (evt.authorized) {                                 status = '<a>' + i18n.general.switchAccount + '</a>';                                 this._twitterStatusNode.innerHTML = status;
if (this.key_!== b.key_) {       throw new Error('Failed to sync VNode: keys does not match (old:'+ this.key_ + ', new:'+ b.key_ + ')');     }     if (this.type_!== b.type_) {
, Packager = require('package-jsonld')  , jsonldContextInfer = require('jsonld-context-infer');
return [function split(separator, limit) {     var O = defined(this);     var fn = separator == undefined? undefined : separator[SPLIT];     return fn!== undefined? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
gulp.task('compress', () => {   let { version } = require('../app/manifest.json')   let { name } = require('../package.json')   return gulp.src('dist*')
type = type || 'closest';   for (var idx1 = 0; idx1 < a.length; idx1++){     var color1 = a[idx1];
, stream = fs.createReadStream(filename) , xml = new XmlStream(stream);
else       this.gotoFrame(frame);   },   gotoAndStop: function (frame, scene) {     this.stop();
this.registerAppComponent = registerAppComponent;
enyo.forEach(this.enyoIndexer.getFunctionList(pattern), (name) => {     name = name.substr(len);     this.suggestionsOnyx.push(name);    });
var researching;  var imagePathsArray = []; var imagePositionInArray;
const orgError = console.error;   console.error = function(...args) {     errors.push(args);     orgError.apply(console, args);   };
if (value) {       for (i in value) {         if (value.hasOwnProperty(i)) {           change    = 'neutral';           arrow     = 'arrows-h';
return this.verify(function verified(err) {     if (err) return fn(err);     var current = this.pid;
var newRow = {}       for (var col = 0; col < row.length; col++) {         var datatype = this.props.queryResult.meta[col].datatype
var sax = require('sax'),   ignored = require('./ignored.js')
if (old.length === neo.length) {                 if (old!= neo && old.length > 0) {                     this.clear(pos, el)                 }
this.Alert = function Alert(){      console.log( colors.green('[OKAY] '+ this.fmt.apply(null,arguments)) );  }
beforeEach(function () {         this.addMatchers(diffHelper.matcher);         canvas = $('<canvas width="' + width + '" height="' + height + '"></canvas>');
} else if (options) {           for (var i in options) {             if (options.hasOwnProperty(i)) {                 data.options[i] = options[i];             }
install: function () {         const injectJsFilesToIndex = () => {             this.log('\n' + chalk.bold.green('Running `gulp inject` to add JavaScript to index.html\n'));             this.spawnCommand('gulp', ['inject:app']);
if (!regl.hasExtension('ANGLE_instanced_arrays')) {       throw new Error('regl-error2d requires `ANGLE_instanced_arrays` extension enabled');     }
} else {     return eachObj();   }
} export async function reset__rpc() {   log(`${logPrefix}|reset__rpc`)
var PROJECT_ID = Session.get('projectId');     var portarray = [];     var delarray = [];     var hostid = undefined;
this._parentPicker && this._parentPicker._updateColumnHeights();        return FontWidget.prototype._doLayout.call(this);   },
thingsChanged: function() {          if ( this.get('application.currentRouteName') ==='splash')
Target.prototype.yield = function yield$() {     return this.then().yield(...arguments)   }   Target.prototype.ensure = function ensure() {
;    for (key in this.tables) {   if (this.tables.hasOwnProperty(key)) {     needs++;     if (key == tbl.name) this.tables[key].done = true;
_.each(this.getReverseRelations(), function(relation) {    relation.addRelated(this.instance, opts);   });  },
this.on('end', function() {       that._removeFromPool();     });
function e() {             var e = t.call(this) || this;
if(err){                 throw new Error('Error sending Keen data:'+ err);             }
if (response.status!== 200) {                 throw new ApiError(response);               }
maskToken.matches = maskToken.matches.reverse();                 for (var match = 0; match < maskToken.matches.length; match++) {                     var intMatch = parseInt(match);
});      return this.on(name, once, context);     },     writable: true,
}); NativeArray = NativeArray.where(...ignore);
export default class AuthenticatedUserAccountDropdown extends UserAccountDropdown {   constructor(...args) {     super(...args);
var traits = this.traits();             for (var i = 0; i < traits.length; i++) {                 traits[i].setFromArgs( obj, args, ignores );
catch(e) {         setTimeout(fn, 0);         return;
class TuyaCloudRequestError extends Error {   constructor(options) {     super(options);     this.code = options.code;     this.message = options.message;   }
callMethod = function( methodName, args ) {
res = [];                  for (var b = 0; b < obj.length; b++) {                      res.push(copyCleanModel(obj[b]));                  }
throw new Error('Unrecognized initial character in unidiff line')           }
module.exports = Cylon.Drivers.GPIO.Motor;
async run() {     throw new Error(`Need to implement ${this.constructor.name} async run() function`);   }
this._commands = {};   this._lastCharCodeForEvent = {}; };
this.route('map', {   path: '/',
default:       throw new Error('Unsupported value');   }
hasPendingChanges: false         }, () => {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path)
if (!this._parentWindow) {       this.parentWindow = exports.windowAugmentation(dom, {url: this.URL});     }
var that = this;             that.parents.forEach(function(v, i) {                 result[that.fields[i]] = v.constant_value();             });
this.applyStyle(this.defaultStyle);
var slices = 24;   var wfs = [];   for (var i = 0; i < radii.length; i++) {
var Roster  = require('../../index').Roster  , helper  = require('../helper')
it('should handle wd errors asynchronously', function(done) {     driver.run(function(done) {       try {
var s = _getActiveSelection();         $(this).addClass("couzteauSpellCheck");
$("#redeem").keypress(function(e) {     if((e.keyCode? e.keyCode : e.which)!== 13) return;     var data = {passcode: $(this).val()};
io.register_write(port, this, function(out_byte)     {         write_data(out_byte);     }, function(out_word)
return function () {              compound.apply(this);          };
anInstance(that, $ArrayBuffer, ARRAY_BUFFER);   var numberLength = +length;   var byteLength = toLength(numberLength);   if (numberLength!= byteLength) throw RangeError(WRONG_LENGTH);
'use strict';
} else if (this.readyState === 3) {                         span.imp().info('XMLHttpRequest loading (readyState=3)');                     } else if (this.readyState === 4) {
var key = '';         Object.keys(defaultParams).forEach(function(name) {             var chunk = parameters[name].toString();
{    for(var i = 0; i < object._missing_components.length; i++)    {
}),       takeEvery(self.types.events[event].get.SUCCESS, function* () {         meta,
if (!this.requireMinimumVersion(this.apiVersion, minimumVersion)) {       throw new Error("this method requires at least @{minimumVersion}");     }
this.state.set(this.state.value().join(''));                  this.emit('complete', 'concat', 'concatenated'+ stateItemCount +'item(s).');              }
return $.grep(this._pages, $.proxy(function(page, index) {    return current === this._core.maximum() &&!this._core.settings.loop    ? index === this._pages.length - 1     : page.start <= current && page.end >= current;   }, this)).pop();
})(EndGate || (EndGate = {}));
constructor: function GroupingModel(...args) {             GroupingModel.__super__.constructor.apply(this, args);         }
var Backbone = require('backbone');
function UiFactory() {   this._background = null;   this._foreground = null;
var res = [];     for (var i = 0; i < len; i++) {
var Element = function(board, element, options) {    this.element = element;    this.options = options;
$this.blur();
arguments[0].forEach(function(item, i) {    this[i] = item;   }.bind(this));   this.length = arguments[0].length;
t.ok(is.number(-Infinity), 'negative infinity is number');   t.ok(is.number(42), 'object number is number');   t.notOk(is.number(), 'undefined is not number');
var utils = require('../utils')  , nodes = require('../nodes');
, cmdItems      , taskArgs      , preempt;
for (i = 0; i < this.regexpProps.length; i++) {       property = this.regexpProps[i]
this.$().data('DateTimePicker').destroy();   } });
this.assets = [];   var addressToPath = {};
async function extractApkInfoWithApkanalyzer (localApk) {   const apkAnalyzer = await getApkanalyzer();   const args = ['-h','manifest', 'print', localApk];
TileRequestHandler.prototype['GET'] = function(server, req, callback) {  var self = this;  var done = _.once(callback);
var Query = require('../connection/commands').Query  , MongoError = require('../error');
this.bind('change', function(e) {     var $selector = $(this);     $selector.find('option').each(function() {      var $form = $('#'+$(this).val());
port.send('deprecation:watch');     this._super(...arguments);   },
this.height = "";
});             for (var l = 0; l < removedLinks.length; l++) {                 RED.nodes.removeLink(removedLinks[l]);
return {       sourcesByFile: sourcesByFile   };
if (this._input.value.length > 0) {             L.DomUtil.removeClass(this._close, 'leaflet-pelias-hidden');
this.clearArgs = function() {         self.argArray[_POST] = [];         self.argArray[_GET] = [];     }
})(typeof(window)!== 'undefined'? window : global);
gen.fs.write(gen.destinationPath('extension.js'), 'foo');      })     .on('end', done);
const asyncWrapper = function (f) {     return function (...args) {       return f.apply(this, args).catch((e) => {         recorder.saveFirstAsyncError(e);
var self = this   Tensor.call(self) }
, graveyard = []
_.each(state, function(value, key) {                 that.key_value_lock = [key, value];                 try {
$(".admin section").click(function (event) {         var elementId = $(this).attr("id");         var sectionId = ExtractSectionId($(this));
function ondata (b) {
if (!internals.diff.fullcolumns )             internals.diff.fullcolumns = [];         var oKeys = Object.keys( db[ 0 ] );
{    throw new Error("QR Error: Error getVersionForNumber");   }
};      for(let i = 0; i < tokens.length; i++) {       yield parseToken(tokens[i]);
if ($(this).hasLabel()) {        $this.children(".classlabelbadge").remove();       }
var toObject = require('./_to-object'); var $getPrototypeOf = require('./_object-gpo');
throw new Error("invalid call: atomic expression");       },
exports.startIoTjs = function(process) { global.process = process;
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.exp2);     return x / Math.PI * 180;
}, function (reason) {                             throw new Error(file + ': Error loading data from.stl file:'+ reason);                         }
this.target.classList.add('shepherd-enabled','shepherd-target');   this.el.classList.add('shepherd-element');
if (typeof val!== "number")                 throw new Error("texture_table requires numeric values");             elements.push(val);
Object.values = function(object, skipFunction)  {
let names = className.split(/\s+/);       for (let i = 0; i < names.length; i++) {         let name = names[i].slice('ql-'.length);         if (icons[name] == null) return;
if (memoryRegion >= this.REGION_ROM0) {   throw new regionError("Bad access");  }
pzprv3.includeFile("tests/for_test.js");    setTimeout(checkDOM,10);    return false;   }
if (input.length!= this.size)         throw new Error("INPUT size and LAYER size must be the same to activate!");
this.targetElement.keyDown(key);           this.targetElement.keyPress(key);           this.targetElement.keyUp(key);         });
initXhr: function(xhrobj) {             var self = this;             if (xhrobj.upload) {
default:         throw new Error('Unsupported data type.');     }
Canvace.MultiSet.prototype.fastAdd = function () {  for (var i in arguments) {   if (arguments.hasOwnProperty(i)) {    this.elements[this.nextId++] = arguments[i];   }
var fs = require('fs')  , async = require('async');
return function() {     var value0 = style.getPropertyValue(name),         value1 = value(this);
let clickedEl = event.target;
}   }   var items = [];   items[0] = [];   items[0]['a'] = out;
return this._instantiateModel(dasherize(type), attrs);   }   create(type, attrs) {     var collection = this._collectionForType(type);
rebuild: function (rebuild) {
this.aParams = [];    this.vids = [];
var modelsChange = false;   Object.keys(modelsMap).forEach(function (modelId) {     modelsChange =
for ( var i = 0; i < this.propertyBindings.length; i++ ) {
var express = require('express')  , everyauth = require('everyauth')
this.inline = new InlineCompiler(this.options); };
this.url = url;
e.preventDefault();     if(!Meteor.user()) throw new Error('You must be logged in.');
else {                 throw new Error('buildfunc: unsupported refarg type:'+ func.name);             }             out.push('}');
if (_.isUndefined(t2))             throw new Error("t2 multiplication with undefined type?");         var type_list = [
} else {    this.keys = [];    this.defaultValues = {};
purge: function() {     var d = new Date();     var now = d.getTime() + (d.getTimezoneOffset() * 60 * 1000);
[    "device"   , "streamHost"
}]);     this.layerView.trigger('mouseover', new $.Event('e'), [0, 0], [0, 0], {       test1: 'test1',
subnode.updateChildTransforms();   }   for(c = 0; c < this.components.length; c++) {    this.components[c].onUpdateTransform(absolute);
const mod = require(src);     if (args && args.constructor === Array) return mod(...args);     return mod();
getAllListenerInfo () {     return [].concat(...this.getHandlers().map(handler => handler.__events__))   }
}             $.when(...contentLoadedPromises).done(_.bind(function() {                 this._hideLoading();
}             this.modal.show(context.content, { attachment: context.attachmentToFocus });         }.bind(this));     };
size: props.size,                   direction: dir                 });
script.onload = script.onreadystatechange = () => {       if (!done) {         done = true
}                 ilios.pm.schoolDepartmentTreeModel = [];                 for (var key in parsedObject) {
var keys = [];     for (var key in obj) {       if (obj.hasOwnProperty(key)) {         keys.push(key);       }
if (arguments.length==2) {              if (r) throw new Error(path+" is Read only.");              if (text==null) delete ls[path];
scene.args.unshift(playNextScene)         sequence.push(scene)
co(function * co() {  const res = yield fetch('http:
if (prev_output.is_stable === 0)            throw Error("prev is not stable");           if (prev_output.is_serial === 1 && prev_output.sequence!== 'good')
var flatten = function(array) {     return [].concat.apply([], array); };
var ll = par.getElementsByTagName('li'); if (!ll.length) return '';  for (var i = 0; i < ll.length; i++) {   var range = ll[i].getAttribute('data-range');
that.append($=> str);  }
var grafs = text.split(/\n{2,}/g);  var grafsOut = [];
if (!Pokedex._(self.species + "?")) {   throw new Error("There exists no Pokémon in the Pokédex object with the species name \"" + self.species + "\".");  }
Object.keys( extenders ).forEach( function( i ) {     Object.keys( extenders ).forEach( function( key ) {      result[ key ] = extenders[ i ][ key ];
var cs = this.current.fillColorSpace;       var color = Util.makeCssRgb(cs.getRgb());       this.ctx.fillStyle = color;
if (options.fn) {         return helpers.with.call(this, this.author, options);     }
if (qq.FileUploader.prototype._leaving_document_out(e)) {                         for (var elem = 0; elem < dropzones.length; elem++){ dropzones[elem].style.display = 'none'; }             }
run.bind(this, (event) => {         if (plotter) {
this.retCallback(data);       console.log('set data:'+ JSON.stringify(flowData));       this.retCallback = null;
if (VIE.prototype.Attribute) {  throw new Error("ERROR: VIE.Attribute is already defined. Please check your installation!"); }
NGN.BUS.emit(...args)       }     }
const model = modelParam;
var url = require('url'); var path = require('path'); module.exports = function(version) {
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SPA", Array.slice(arguments));   },
__extends(StickRightLocationDirective, AbstractLocationDirective);         function StickRightLocationDirective(...args) {             AbstractLocationDirective.apply(this, args);         }
Array.prototype.findAll = (match) => {     let result = [];     for (let index = 0; index < this.length; index++) {         const element = this[index];
for (var idattrs = 0; idattrs < dattrs.length; idattrs++) {    var cmd = dattrs[idattrs]
if (NoSqlProviderUtils.isCompoundKeyPath(index.keyPath)) {                                     throw new Error('Can\'t use multiEntry and compound keys');                                 }
node.set(request);      node.getChildren().forEach(function (child) {        this._setTreeNodes(child, request);       }, this);
var samplers;   for (var i = 0; i < batches.length; i++) {    var batch = batches[i];
'use strict'; var parse = require('url').parse;
return config;     });   }); };
const keys = key.split(',');             keys.forEach(k => {                 this.keyListener.simple_combo(k, value.bind(this));             }, this);
this._fastBootCookiesCache = fastBootCookies;     return this._filterCachedFastBootCookies(fastBootCookies);   },   read(name, options = {}) {
while ( jsonml.length ) {     content.push( jsonml.shift() );   }
var that = this;  $(that.oTextHandle)  .attr({ name: 'dummy_' + Math.floor(Math.random() * 1000000), autocomplete: 'off' })  .bind(is_opera || is_ie? 'keypress keydown' : 'keydown', function (oEvent) { return that.handleKey(oEvent); })
if ( value === undefined ) {   throw new Error( 'Undefined attribute:'+ key );  }
}         callback(err, response);     }
_setEditorSize: function( width, height ) {
if (endContainer.nodeType!== Node.TEXT_NODE) {                 throw new Error('Could not found endContainer, highlighting would be unstable');             }
return (cache[markup] = fn);     };     Simplate: function(markup, o) {         this.fn = make(markup, o);
, SessionStateStore = require('./state/session')  , setup = require('./setup');
function TextInputUnit () {     }
}     return func(...arguments);   };
var Intercom = function() {   var a,b, toto;
var jsDAV_iQuota = module.exports = function() {     this.REGBASE = this.REGBASE | jsDAV.__IQUOTA__;
}         };         var result = cp.TransitManager.prototype.transit.call(this);         if(result) {
var prefixes = OpenLayers.Style.SYMBOLIZER_PREFIXES;         for (var i = 0; i < rules.length; i++) {             for (var s=0; s<prefixes.length; s++) {
for (attribute in tests) {             if (tests.hasOwnProperty(attribute)) {                 phonetics = doubleMetaphone(attribute);                 assert(phonetics[0] === tests[attribute][0]);
req.user = user;       passport.authenticate(strategyName, _onPassportAuth(req, res))(req, res);     })(req, res);
this.total  += t.total;       t.parent     = t.parent;       t.parent_uid = t.uid;
var storage = localStorage, i, key, new_value, func, all = bgSettings.defaults;   func = function(val) {
minValue(query=null) {         if (!this.__backend.connected) throw new Error('JungleDB is not connected');         return this._currentState.minValue(query);
}   }   this._super( "_setOption", key, value );  },
var _computeUvs = function() {         var tiles = this._tiles;
module.controller('DatePickerCtrl', ['$scope', '$mdDialog', 'currentDate', '$mdMedia', function($scope, $mdDialog, currentDate, $mdMedia) {     var self = this;
var s = require('../index'); var assert = require('chai').assert; describe('request descriptor', function () {
if (!base) {         throw new Error("Please provide a base namespace!");     }
, sql = ''      , tableName = this._tableizeModelName(query.model.modelName);
var frequencies = [];         var context = new window.OfflineAudioContext(1, buffer.length, buffer.sampleRate);
expandIsoform(selectedIsoform);               }             }
var mockContext = {   report: function(...args) {    collectedReport.push(args);   }
var TableClass = function() {          this.cols_ = that.columns_.getKeys().map(function(colName) {       this[colName] = new lf.schema.BaseColumn(
{     throw new Error("unkown Message Type: '" + message.type + "'");   }
this.source_ = source;
function get(concept) {             return $http.get('/openmrs/ws/rest/v1/concept/' + concept, {
var tar = require('tar')              , zlib = require('zlib');
value = arguments[0]         notifySubscribers(...args)       }
_hideCriteria: function () {             DateFilter.__super__._hideCriteria.apply(this);         },
value: function(callback) {           return Collection.clone.call(this, callback);         },         writable: true,         enumerable: false
var express = require('express')  , routes = require('./routes')  , http = require('http')
if ( xhr === self.xhr ) {       response( data );      }
console.log("\nBot Express\n");
const config = {     formComponent: 'vueForm',
return (this.patternFocused[patternId])   }   setPatternFocused (patternId, focused) {     this.patternFocused[patternId] = focused
var print = this["print"];
$('#help-summary h3').each(function(){    if ($(this).prevAll('h2').first()[0]!==h2) {     $(this).slideUp();    } else {
if (result0!== null) {           result0 = (function() { return node("node_directive", "DAT", node.apply(this, ["node_value", "val_paramlist"].concat(plist))); })(pos0, result0[3]);         }         if (result0 === null) {
each(['delete', 'has', 'get','set'], function (key) {     var proto = $WeakMap.prototype;     var method = proto[key];     redefine(proto, key, function (a, b) {
constructor(args) {         super();         this._totalHeightGap = 50;         this._parent = _.get(args, "parent");
for (var key in attrValueHash) {         var value = attrValueHash[key];         var _value = this.escape(value)
});             mockModel = MockModel.get('items', {                 fetch: function() {
, binomial = require('binomial')  , labor = require('labor');
data.oldParams = item.Params;      var params = handleParamsInCommand(func, data, start? messages["startApplication"] : messages["stopApplication"]);
for (var index = 0; index < array.length; index++) {           var value = array[i][index] + "";
sheet = sheet || NOVAE.CurrentSheet;     NOVAE.Cells.Used.registerCell(letter + number, sheet);
let bar = [];  bar.push(...foo, 99); }
if (missingOptions.length) {     throw new Error('The following options are required:'+ missingOptions.join(', '));   }
this.shapes = new Map();
'use strict'; var $export = require('./_export'); var $at = require('./_string-at')(false); $export($export.P, 'String', {
event.preventDefault();       that.moveFocusDown();       break;
obj.getCenterPt= function() {         var {pt1,pt2}= this;         var x= (pt1.x + pt2.x)/2;
if (edit_mode){         this.autofit($(this).get(0),MIN_HEIGHT);         return;
each(data.handlers, function(handlerSpec, eventName) {       this._bindHandler($el[0], data._owner, eventName, handlerSpec);     }.bind.bind(this));     return $el;
if(name in this._widgets){    return this._formWidgetValue(this._widgets[name], value);    }
} catch( error ) {       setTimeout( callback, 0 );       return;
if ( typeof textureDimensions[ file ] == "undefined" ) {    throw new Error( "No dimensions set for texture \"" + file + "\"" );   }
if (!converted) {     throw new Error("Unsupported language code '" + langCode + "'.");   }
this.get(wsRoute,...wrappedMiddlewares);
.replace(/<OTHER_SELECTIONS>/g, otherConstraints.join(' '))                .replace(/<SELECTIONS>/g, this.buildSelections(otherConstraints));
this.stopTrackingProgress();       that.trigger('progress');      }
if (!subDef.inactive && _postal.configuration.resolver.compare(subDef.topic, envelope.topic)) {             subDef.callback(envelope.data, envelope);         }
var lines = o.value.split("\n");    var indices = [];    var sl = 0;
if (!options) {             throw new Error('A date or time stamp must be provided.');         }
{          throw new Error("Long_Task no longer runnable");      }
var list = function () {         var l = Nil
if (!that.file) {         file = yield r.table(fileTable).get(fileId)
this.sandbox.emit('husky.select.terms-of-payment.revert');                         }.bind(this)                     }.bind(this));                 }.bind(this));             }
var dwords = [];        var len = message.length;
if (this.validURL()) {     return false   }
return logDb(new settingDb());         else throw new Error("db nams is not valid");     },
if (typeof ctx[key] === 'function') {       Vue.prototype[`$${key}`] = (...args) => ctx[key](...args);       Vue.directive(key, historyRedirect(ctx, key));
if (!fileStats.isFile()) {   throw new Error("Not a file: '"+inFile+"': ";  }
function promiseify(fn) {   return (...args) => {     return new Promise((resolve, reject) => {
var cwd = path.resolve(npm.dir, p)   fs.stat(cwd, function (er, s) {
labelNodesDidChange: function() {           this.notifyPropertyChange('labelNodes');         }.observes('*model.labels'),
requires: {         mongodb: ">=2.6.0"     }
if (format === undefined) {     throw new Error('idate() expects at least 1 parameter, 0 given')   }
const   cache = require('gulp-cache')  , del = require('del')
return Q.all([     exec(...args.sharepath),     exec(...args.root),   ]);
for (var i in defaultAspectRatios) {             if (defaultAspectRatios.hasOwnProperty(i)) {                 $aspectRatioToolbar.find('.btn-group').append(render(defaultAspectRatios[i]));             }
, hotplate = require('hotplate')
var feedback = Jasper(function() {       throw new Error('up');     });
var adUnit, error, createAd;         if (!that._frame.contentWindow) {             error = 'the iframe is not anymore in the DOM tree';
if ('string' === typeof view) {                 return this.renderFromFile(...arguments);             }
function PublicKeyInput(...args) {   Input.apply(this, args); }
if(fontSize.search('em') > 0) {       fontSize = $this.toPx({scope : quail.html});     }
function batchImages(descriptor) {    for (var i in descriptor.frames) {     if (descriptor.frames.hasOwnProperty(i)) {      (function (id, progress) {
return "mat";             throw new Error("internal error: not pod, vec or mat");         }
this.isTopPage = true;
export async function exploreCave (action) {   const {caveId} = action.payload
if (fragment.match(pathRegexp)) {           throw new Error("Recursive fragment usage detected on " + path + ".")         }
this.emit('event', packet.items);       this.emit(...packet.items);       break;
}     app.getAsyncHelper('include').apply(this, arguments);   });
enyo.forEach(this.enyoIndexer.getFunctionList(pattern), (name) => {     name = name.substr(len);     this.suggestionsEnyo.push(name);    });
var key ='secret12'      , pt = '☢€  ☂ ڴ!'      , ct = twoFish.encrypt(key, pt)      , cpt = twoFish.decrypt(key, ct);
, '/login' : controllers.auth.reverse  , '/logout' : controllers.auth.basic }
throw new Error('Rev A boards are not yet supported.');         case 'B1':
var __call__ = function(...args) { return create_object.apply(undefined, args);
var MAX_ATTEMPTS = 10              , toBeCached = {};
var i, len = value1.length;         var arr = createSizedArray( len );         for(i=0;i<len;i+=1){
function createVideoNode(url) {
pinpointApp.factory('ServerMapFilterVo', [  function () {     return function ServerMapFilterVo() {         var self = this;
if ($this.hasClass('dwwb')) {                     if (testTouch(e)) {
if (!$(this).hasClass('isPrime')) {                     $(this).popover('hide');                     $(this).css({textDecoration: 'none'});                 }
if (typeof gen === 'function') gen = gen.call(this);
if (g === null) {             throw new Error('Error creating WebGL context.');         }
function askForAdminPassword() {     if (this.composeApplicationType ==='monolith') return;     var done = this.async();
const dynamic = {};         Object.keys(renders).forEach((field) => {             const target = `children.${code}.${field}`;             dynamic[field] = renders[field];         });
constructor(target, prop, value, meta) {     super(target);     this.prop = prop;
function update(dev,par) {
.attr('type', 'radio')                            .addClass(that.model)                            .val(item)
const   shell = require('gulp-shell') ;
default:             throw new Error('Expected string, function, or undefined.');     }
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SPA", Array.slice(arguments));   },
expect(this.player1.amber).toBe(3);                 this.player1.clickCard(this.punch);                 expect(this.player1).toHavePrompt('Choose a card to play, discard or use');             });
unsubscribe() {     return this.nc.unsubscribe()   }
var statuses   = require("statuses"); var Buffer     = (function () { return this }()).Buffer || respond; module.exports = respond;
_.each(this.views, function(v) {              this.listenTo(v, 'positionChanged', this.__handlePositionChanged);
constructor(image) {     super();     this.message = `Not found '${image}' docker image`;   }
var i = 0;       for (var i = 0; i < data.length; i++) {         var item = data[i];         textToInsert[i++] = "<tr>";
BengineConfig.extensibles.xcode = new function Xcode() {  this.type = "xcode";  this.name = "code";
else {     throw new Error('[sprintf] huh?');    }    _fmt = _fmt.substring(match[0].length);
if (this._transformContent)    this.applyMatrix(true);
const GlobalObject = (typeof self!== "undefined")? self : global;
default:       throw new Error(`Only support reference child(), parent(), val() \ and exists() now, ${obj.property.name} found`);   }
this.currentAuth = currentAuth;
if (typeof func === 'function') {                 return func(...evalList(flags, scope, locator, this.args, part));             }
val = "",     arr = [];    if (sel.eq(0).val() == "id") { val = "id_"; }
var Q =  driverBlock.Q  , path = require('path')
, Db      = require('../../')  , Proto   = require('../../lib/_proto');
this.tagSelectView = new App.TagSelectView({             allTags: this.allTags         })         this.tagListView = new App.TagListView({
if (!m_width ||!m_height) {       throw new Error('Map layer has size 0');     }
console.trace? console.trace()           : console.error(...arguments);     })
constructor(tag, url, path, xhrSettings, context) {         super();         var assetConfig = {             tag: tag,
let o = chalk.yellow('[out]')   console.log = function(...args) {     out.push(args)
function updateLinkArray(essenceId, entityId, attArr) {         return co(function* () {
},   initRoles() {     this.set('roleArray', (this.get('primaryResource.projectRoleTemplateIds') || []).map(r => {       return {
var spriteY = this.y;                     if (this.spriteNombre) {
if (event.keyCode === 13) {                 var val = Util.escapeHtml(that.value);                 window.location.pathname = "/" + val;             }
, nameRe = /^[a-zA-Z][0-9a-zA-Z]*$/  , rel, setReverse; setReverse = function (rel, index) {
return;   }); };
}; function printError(...args) {   console.error('INVALID COMMIT MSG:'+ util.format(...args)); }
'Complex': function (s) {       throw new Error('Cannot convert Complex number to Node')     }
function replace (word, rule) {     return word.replace(rule[0], function (match, index) {       var result = interpolate(rule[1], match, index);
else                 throw new Error("i > 0 in pod element");         }
var parse = function(dimension, elementType) {         var array = [];         if (dimension.length > 1) {
},   _resizeMap: function _resizeMap() {     var map = this._getMap();     map.resize();
retNode = node.left;     } else if (that.comparator_(node.value, value) < 0) {       retNode = node.right;
var _operationTypes = {         'and': true
});         instance.$service(...concat([Class, instance], arguments, 1));
lrSnippet            , mountFolder(connect, '.tmp')             ]
this.parseResults = function(dataobj, facetMap) {       var resultobj = {};       resultobj["records"] = [];       resultobj["start"] = "";
if (!that.isDisabled() &&!that.parent().hasClass('disabled')) {           var $options = that.$element.find('option'),
if(typeof arguments[0] === "object") {   for(key in obj) {    that[key] = obj[key];
test.equal(reason, undefined, 'Neither USB device was found');       });
it("should have one child of type group ", function(done) {              const group=file.openGroup('pmcservices');
app.config = config.init(_config)   app.get('/connect/:provider/:override?', function * (provider, override) {     if (override == 'callback') return yield callback     this.session.grant = {
if (this.position + numBytes > this.byteArray.length) {       throw new Error('dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread');     }
{    throw new Error("System.ArgumentException");   }
Scope.prototype.$emit = function(...args) {             logEvent('$emit', args);             return origEmit.apply(this, args);
}             throw new Error(str + ", line " + line + " (tokens: '" + tok + "')\n" + JSON.stringify(tokens.slice(0, 5), null, 4));         };
};     this.setHost = function (host) {         host = host;     };
this.parentItem.fetch();         }, this));     }.bind(this));     return this;
if (!((address_!= null) && address_)) {               throw new Error("Missing address input parameter.");             }
that.send(from, 'Hi'+ from + ', nice to meet you!'); });
function off() {   config.off(...arguments); }
me.callParent();    }
getFiles: function( data ) {         var configData = data;         var files;
constructor(system, depend) {     super();     this.system = system;     this.depend = depend;
constructor (YoutubePlayerSettings, YoutubeSearch, YoutubeVideoInfo, PlaylistEditorSettings) {    Object.assign(this, YoutubePlayerSettings, YoutubeSearch, YoutubeVideoInfo, PlaylistEditorSettings);
this.view.$('.js-collapse').click();       expect(this.model.toggleCollapsed.calls.count()).to.be(2);     });
let topologyContextProps =         { handleReset: this.resetTopology        , handleTopoRequest: this.handleTopoRequest
var path = require('path')  , util = require('util')
if (Node.LEADER === data.state && Node.FOLLOWER!== this.state) {       this.change({ state: Node.FOLLOWER });     }
if (response.status!= 200) {     throw new Error('Failed loading data from'+ response.url);   }
this._eventInput.on('clean', function(){             if (this._dirty) {                 this._dirty = false;
this.menuItemDiv.click (event => {   myThis.isOpen =!this.isOpen;   if (myThis.isOpen) {
data.eachItemGraphicEl(function (el, idx) {                                  var itemModel = data.getItemModel(idx);
, showImage = true  , test = "durp";  if (utils.isRefererValid(referer)) {
, Collection = require('./collection')  , crypto = require('crypto')
co6.main(function () {     var opts = options(process.argv);
atEnd() {       if (this.situation.loops === true) {
var toString = Object.prototype.toString  , id = toString.call(new Error()); module.exports = function (x) {
this.set('mouseUpListener', () => {             Ember.$( 'body' ).removeClass('resizing' )
function getFixturePath(...args) {         return path.join(process.cwd(), "eslint", "fixtures", "config", "fixtures", "config", "fixtures", "config", "fixtures", "config", "fixtures", "config", "fixtures", "config", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "fixtures", "
utils.each(this.proxyLabelMethods, function(method) {         labels[method] = this[method];       });
$('.prime-live-iframe')[0].contentWindow.CKEDITOR.inline(this);      $(this).trigger('focus');     }.bind(this));
const hashmap = {};   for(let key in this.items) {     if(this.items.hasOwnProperty(key)) {       hashmap[key] = fn(this.items[key]);     }
Sequelize.prototype.log = function() {   var last = Utils._.last(arguments)    , options;
(function (require) {
{                 var document = that.documents[i];
it('superscript exclusitivity', function() {       let editor = this.setEditor('<p><sup>0123</sup></p>');       editor.formatAt(1, 2,'script','sub');
result = this.multiply(result, m.flat);         this.matrixCache_[m] = result.slice();       }
Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.prototype.toJSON = Float64Array.toJSON;
"database",     async function(siteConfig, builtInPlugins) {         if (process.env.NODE_ENV === "production") {
debuglog("search complete");             if (!self.isMounted()) {                 console.error("Discarding stale search results");
if (typeof JpegImage === 'undefined') {     throw new Error('No JPEG Baseline decoder loaded');   }
saveAuth: async function(type, token, data) {       this.getApp().logger.debug('Save user auth', this._id, type, token);
let data = [];
, XMLDom = require("xmldom")  , helpers = require('../../helpers.js');
var args = _normalizeArguments.apply(this, arguments);    args[1].mode = 'toggle';    return this.effect(args[1]);   }
};     me.callParent();     me.down('#id').setReadOnly(false);
var proc = spawn('REG', args, {         cwd: undefined,
export default function() {     save()        .then(setValue(this));
throw  new Error("aObj: " + aObj.toString() + " is not an IAnaforaObj");  }
this.primitives = [ "print_string", "print_number"];     this.labels = new Map();     this.instructionIndex = 0;
let recommendedCounters = null;   if (props.recommendedCounters) {     recommendedCounters = (
callback();         }.bind(this));
], function(c) {    c.addRemoveClass("hover");   }, this);
{  var info = "";
}             this.trigger('g:deleted');         }).fail((err) => {             this.trigger('g:error', err);
}, function (next) {     this.push(footer);     next();
var Tile = function(tileCoord, state, opt_options) {   EventTarget.call(this);   var options = opt_options? opt_options : {};
function () {  return this.myAttributes; };
if (!content ||!content.serialize || typeof (content.serialize)!== 'function') {     throw new Error('Content.serialize requires non-null Content instance as first argument')   } else {
var process = this.process,         window = this.window,         msgChannel = null,
} else {   window.ga = function(...args) {     console.log([].slice.call(args));   };
if (t.EQUALITY_BINARY_OPERATORS.indexOf(node.operator) >= 0 &&               t.get('right').isPure()) {               let left = node.left;
,    vec2 = require('../math/vec2'),    shallowClone = require('../utils/Utils').shallowClone; module.exports = Heightfield;
extensions.concat(excluded),             async function(filePath, ev, match) {                 if (!options.excludedWatchPatterns.some(regex => regex.test(filePath))) {
project.config.templateNames = this.getTemplateNames()   project.allTemplateNames = this.getAllTemplateNames()
ctx.compile_type!== Shade.FRAGMENT_PROGRAM_COMPILE) {                 throw new Error("gl_FragColor and gl_FragData assignment"                        + " only allowed on fragment shaders");
var tmp = require('tmp')
module.exports = Cylon.Drivers.GPIO.Motor;
debug: () => {                              }
StringPrototype.toUrl = function () {         var url;
var validUrl var malformedUrl var invalidUrl var server = http.createServer(function (req, res) {
}   Context.prototype.user = function(...args) {     return Meteor.user(...args);   }
if (op.test(parent.content[i].type)) {             throw new Error('Template theme variables are not permitted in operations:\n>>> '+Node.toString(parent));           }
kb.holds(subject, UI.ns.wf('tracker'))) {       var tracker = kb.any(subject, WF('tracker'))       if (!tracker) throw new Error('This issue'+ subject + 'has no tracker')
if (err) {                 nodeUtil.p2jinfo("fieldInfo XML Error: " + JSON.stringify(err));                 this.ptiParser = null;
el.remove();                             onReady.callOnContentReady(this.el, {newRender: false});                         }).defer(5000);                     }
paths.push(pkg.name);   const parentDir = path.join(...paths);   const tarballFile = path.join(parentDir, `${pkg.version}-${pkg.dist.shasum}.tgz`);
for (var attr in self.defaultSettings) {         if (self.defaultSettings.hasOwnProperty(attr)) {             self.settings[attr] = self.defaultSettings[attr];         }
let items = [defaultItem].concat(this.props.services);     return items.map((service) => {       var selectedHtml = this.getItemHtml(service);       var dropdownHtml = (<a>{selectedHtml}</a>);
let search = event.target.value.trim().toLowerCase();         $(".admin-element-item").hide().filter(() => {             return $(this).html().trim().toLowerCase().indexOf(search)!== -1;         }).show();
self._gen_table = function( table ) {         var t = [];         if( table instanceof Array ) {
Handlebars.registerHelper('truncate', function() {         var value = options.fn(this);         if(value.length > 255) {
describe("Validators",() => {     beforeEach(() => {         this.jsdom = jsdom();         const wrapper = document.createElement("div");
didInsertElement() {     if (this.get('shouldTransition')) {       this.transitionDomNode(this.get('element'), 'enter', this.didTransitionIn);     }
if (!checkValue(value)) {     throw new Error(`Not a valid boolean value, can't initialize.`);   }
var format = authHeader[0]      , tokenId = authHeader[1]
console.log("binding "+path);     that.app[verb || 'all'](path, callbacks);
, "src/lib/keen-domready.js"          , "src/_outro.js"         ],
if (!semver.satisfies(pkg.version, that.options.gitbook)) {             throw new Error("GitBook version doesn't satisfy version required by the book: "+that.options.gitbook);         }
}   this.instance = this;
return fn(...[ ].concat( args ) )
callback(err);                              });                          }
if(typeof options.name!=='string') {      throw new Error('Components must be provided a name (namespace).');    }
val = val.replace(/[, ]/ig, '/').replace(/\/\    for (var m = 0; m < w2utils.settings.fullmonths.length; m++) {     var t = w2utils.settings.fullmonths[m];
exception = _error;               throw new Error("onNamespaceRemoved failure: " + exception);             }
makeNestedResource(this, 'invoices', 'invoice');             makeNestedResource(this, 'logs', 'log');         });
type ='select';                 }                 if ( $node.prop( 'nodeName' ).toUpperCase() === 'TEXTAREA' ) {                     type = 'textarea';
it('should respect noValidate', () => {     var change = sinon.spy()      , inst = tsp(
httpServer.listen(0, (er) => {     console.error(`test http server listening on ${this.address().port}`);     assert.ifError(er);
console.log("Error in projects:", error);          });            models.flavors.bind("error", function(model, error) {              console.log("Error in flavors:", error);
callback(null, json.objectIds)   }) }
message: 'What do you want to call your view?',      default: that.slugifiedName     }, {
this.getDomEvent().returnValue = false;         this.base(vValue);       },
export const changeNumCols = (numCols) => (dispatch) => {     if (!numCols || numCols < 0) throw new Error(`Invalid number of cols:${numCols}`);     for (let i = 0; i < numCols; i++) {
if (key!== 1 &&!this.findTouch_(touchList, key - 2)) {         var p = value.out;         d.push(this.touchToPointer(p));       }
var browsers = getBrowser().browsers;             for (var i = 0; i < browsers.length; i++)             {
this.dialog('Insert Drop Zone', null, dialog_drop);   var node = select(container, toggle)[0];   if (node) {
} function AbortSignal () {   this._abortSignal = {aborted: false}
it('prevents the second launch of app', done => {       const appPath = path.join(__dirname, 'fixtures', 'api','singleton-old')       const first = ChildProcess.spawn(remote.process.execPath, [appPath])
foreign_ids: ids        .map((id) => {           return this.collection + ':' + id;         })
while (innerWrap.firstChild) innerWrap = innerWrap.firstChild             innerWrap.appendChild(innerWrap)           }
if (notToReject-- === 0) {           deferred.reject(...rejected);         }
this.items = [];                 }
module.exports = Cylon.Drivers.GPIO.Motor;
var $export = require('./$.export');
close(...args) {     this.server.close(...args)   }
if(optFieldDefs) {       for (var name in optFieldDefs.fields) {         if (optFieldDefs.fields.hasOwnProperty(name)) {           var defs = optFieldDefs.fields[name];           var {result, keysToDelete} = parseFieldDef(x, name, defs);
var Itag=function(args){   this.loc="azcontentarea";   this._base=args.base;
function defaultSetter(name, value) {   this._nativeSet(name, value);   if (this['$prop_' + name].nocache) {     this._triggerChangeEvent(name, value);
requires: {         topology: "replicaset"     }
},   willInsertElement() {     this.set('participants', this.get('proposal.possibleDelegates'));   },
options_clone.comm = comm;             return that.new_model(options_clone).then(function(model) {
this.cencKeyIds.push(...keyIds);     this.systemIds.push(systemId);
}     var type = nonpol[0];     switch ( type ) {
if (routeInfo.route.indexOf(':') >= 0) {                 throw new Error('default route must not have params:'+ routeInfo.route);             }
fn.call(cursor.context, {                         sender: this,
})(this);
var name = element.tagName.toLowerCase();                 if (BuildHelpers.doesStringLookLikeDependency(name)) {                     dependenciesList.push(name);
setWaypoints: function (latLngs, cb) {     var i;     var callbackCount = 0;     var firstErr;
var plugin_cli = shell.exec(cmd, {silent:true});                     if (plugin_cli.code > 0) throw new Error('An error occured during plugin installation for'+ platform + '.'+ plugin_cli.output);                 });
function _injectSprintfProcessor() {          var values = [];
module.exports = function (context, deps, env) {   var args = arguments.length > 2? arguments[1] : false;
function maker(e, s) {     return function (...args) {       return func.apply(e[s], e, args)     }
if (_.config.selection) {     for (var idx = 0; idx < _.message.length; idx++) {      var item = _.message[idx], iType = typeof item,
it('dialog element should be focused', function() {                 this.dialog.focusContent();
for (i in this._lngCoords) {             if (this._lngCoords.hasOwnProperty(i)) {                 lines.push(this._verticalLine(this._lngCoords[i], this.options.zoneStyle));             }
, ServerManager = require('mongodb-topology-manager').Server      , Connection = require('../../../lib/connection/connection');
WMTSRequestEncoding.KVP;
.option('-s, --spec-version <version>','select the type of specification to retrieve: doc|aws|complete')    .action(function (resourcePath, httpMethod, options) {
}     else {       const method = require(filepath);       Object.defineProperty(Object.prototype, methodName, {         value: function () {
self.label = "General Plugin"; }(hatohol));
async function loadValue (ctx, { network, dataIdentifier }) {   const rec = await this.load(ctx, { where: {     networkId: network.id,
this.redirect('hacker', user);     }   }.bind(this)); }
return api.getSite({ siteId }).then(async siteData => {       const accessToken = await api.authenticate();       const arr = addons.map(({ addonName, addonDidInstall }) => {
if (inElements) {     for (var index = 0; index < inElements.length; index++) {      var elemObject = $(inElements[ index ]);
element.one('animateClosedStart', function(e) {         e.stopPropagation();
var handler = dispatchHandlers[action]   if (handler) handler(...args)   else console.error('Missing dispatch handler:'+ action)
setHasClickThrough: function() {       let status = arguments.length > 0 && arguments[0]!== undefined? arguments[0] : 0       const groups = this.layers.slice().filter(layer => layer.class() == MSLayerGroup)
if (fold.start.row < this.startRow || fold.endRow > this.endRow) {                 throw new Error("Can't add a fold to this FoldLine as it has no connection");             }
var isHardDisabled = isButtonDisabled($(this)) || isButtonDisabledVision($(this));
var express = require('express');
}   applyFilter(...args) {     return this.applyModifier.apply(this, args);   }
case'starred_at':             return values.push(this.STARRED_AT);           default:
var result = [];      for (var row in table.getRows()) {       if (!table.getRows().hasOwnProperty(row)) continue;       row = table.getRows()[row];
module.exports = avconv; var   spawn = require('child_process').spawn;
do {     parent = parent? parent[i] = new Array(4);     if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
default:                 throw new Error("Unsupported uniform format for setting. May be a todo.");
const printStyle = $(`<link rel="stylesheet" href="build/css/print.css" media="print">`) class Observer {
accepts: ['js', 'css'],
testContext.testPipe = function () {     var ex = jake.createExec('ls', function () {})
function getHandleNearImagePoint(element, data, coords) {         for (var handle = 0; handle < data.handles.length; handle++) {             var handleCanvas = cornerstone.pixelToCanvas(element, data.handles[handle]);
this.setXhr(); };
opts.data = data   opts.method = 'POST'   return exports.request(test, url, opts, callback) }
function addEvent (element, event) {         var evt = events.parseEvent(event)          , eventType = (listeners[id] || (listeners[id] = {}))[evt.name]
if (e.type === 'change') {             var type = this.type.toLowerCase();
var tasks = {}; options.map(function(t) { tasks[t] = 0 });
var o = {};  oForEach(scope, function (value, key) {   if (callback.call(scope, value, key)) {
define(Array,'slice', function (begin, end) {
if(name === 'emit')       return emitter._emit(...args)
return this > lower && this < upper;    };  , character = function(num) { return String.fromCharCode(num); };  , parse = function(key) {
for (var j = 0; j < columns.length; j++)   {
if (Error.captureStackTrace) {       Error.captureStackTrace(this, this.constructor)     }
this.list = [    {
string = ["I, [" + (new Date().toISOString()) + "]  INFO -- :"],       data = string.concat(args.slice());   return console.log(...data); };
this.expression._walk(visitor);             this._walk(visitor);         });
Crisp.Router.route('/forms/:id', function() {     Crisp.View.get('NavbarMain').highlightItem('/forms/', this.id);
$(options.context || 'body').addClass(vendor + 'canvas');
if(shouldFail[method]) {     throw new Error("You should not call anymethod on this object");
const coreConstants = require(rootPrefix + '/config/core_constants')  , QueryDBKlass = require(rootPrefix + '/app/models/queryDb')  , ModelBaseKlass = require(rootPrefix + '/app/models/base')
exception = _error;       throw new Error("clone: " + exception);     }
var Db = require('../../')  , Base = Db.Base, ObjectType = Db.Object; module.exports = function (a) {
} catch (ex) {           throw new Error('try to remove non-existing shortcut');         }
articleSchema.pre('findOne', function(next) {
current_state(data);           });         }
if (isMaster) {       var rs = this._db[cmd](...args);       if (cb) process.nextTick(() => { cb(rs); });
esriRequest({               url: portalUrlUtils.getUpdateItemUrl(this.portalUrl, this.username, itemId, folder),               handleAs: 'json',
var pairs = s.split("&");       for (var pi in pairs) {         if (pairs.hasOwnProperty(pi)) {           var kvsegs = pairs[pi].split("=");           var key = decodeURIComponent(kvsegs[0]), val = decodeURIComponent(kvsegs[1]);
Minionette.CollectionView = Minionette.View.extend({     constructor: function(...args) {         Minionette.View.apply(this, args);
this.aski18n(this); }
try {     var template = require(viewsDir + '/' + viewPath + '.hbs');     var html = template(data);     callback(null, html);
};   AbstractQuery.prototype.isBulkUpdateQuery = function() {     return this.options.type === QueryTypes.BULKUPDATE;   };
function formatArgs(...args) {   var useColors = this.useColors;
if(this.options.callTip)    tip = this.options.callTip();    else
return Math.floor(Math.random() * (max - min + 1)) + min;     },     topUpRooms: function () {
const redirHandler = (payload) => {             this.metrics.tick('request.redir');             return {
}   var _ = (deps && deps.underscore)? deps.underscore : global._;   var tweenable = (deps && deps.Tweenable)? deps.Tweenable : global.Tweenable;   var defaultConfig = {
const install = plugin.install || plugin;   const ret = install(plugin, options);   installed.set(plugin, ret);
}   return processPlugins(plugins, args[0], args); };
for (var i = 0; i < objects.length; i++) {       for (var j = 0; j < objects[i].length; j++) {         target[j] = objects[i][j];       }
} else {           callback();         }
});                     eventer.trigger(that, e);                     return e.result;
if ( $container.length === 0 ) {             throw new Error( "Container not found for PaletteSelector: " + spec.selector );         }
this.center = new Vector2();         this.rings = [];         this.isBridged = false;
function _tidyEmpersand(str, hasFirst, hasLast) {     if (str) {
if (!this.meta.last_layer.boundary){
}     return this.outerHeight(includeMargin);   };
function createElementCtor(ctor, base) {   function F(...args) {     Element.apply(this, args);     if (ctor) {
if (checkForProperty) {    throw new Error("You can't both check for the existence of a property and set it at the same time.");   } else {
if (definition.events) {                 for (var event in definition.events) {                     if (definition.events.hasOwnProperty(event)) {                         this.addEventListener(event, createTrigger(definition.events[event]));                     }
if (this.messageToPeers) {             _.onAfter (log.impl, 'defaultWriteBackend', this.$ (params => {                 this.messageToPeers ({ what: 'log', params: params }, this.isDeveloper) })) } },
if(position === "left" || position === "right") {                     container.css({top:($container.height()/2) - (height/2) + "px"});                 } else {
constructor: function PageableCollection(...args) {             PageableCollection.__super__.constructor.apply(this, args);         },
var list = document.querySelectorAll('div.bf');     for (var i = 0; i < list.length; i++) {         console.log(list[i].innerText);
this.set(options.updatedAt, now);    }    if (options.updatedBy && this._req_user) {     this.set(options.updatedBy, this._req_user._id);
}   logDebug (...args) {     this.log.debug(`[${this.socketId}] TcpSocket`,...args);   }
console.log(node);                      throw new Error(node+" is not array. cannot join fmt:"+fmt);                  }
var params = {};       for (var i in this.pathParameterNames) {         if (this.pathParameterNames.hasOwnProperty(i)) {           var name = this.pathParameterNames[i];           params[name] = decodeURIComponent(matcher[parseInt(i, 10) + 1]);
avoidableParams[5] = avoidFords;                 var truckParams = [];                 var truck_length = permaInfo[preferences.value_lengthIdx];
if (i < 0 || i > 7) {       throw new Error("Invalid signature type");     }
Bridge.init(); })();
_.each(fieldsValues, function(setValue, fieldName) {     this.setOne(doc, fieldName, setValue, options);   }.bind(this)); };
if (observer.addedComponent) {     for (var i = 0; i < entity._components.length; i++) {      observer.addedComponent(entity, entity._components[i]);
if (clip(d.geometry.coordinates) && dsoDisplay(d.properties, cfg.dsos.limit)) {           var pt = projection(d.geometry.coordinates),               type = d.properties.type;
fn.apply( this, arguments );   this._format();   if ( previous!== this.options.value ) {
JSii.prototype.queryParser = function(query) {     var res = [];
},         initContainer: function(original,...args) {             original.apply(this, args);
tasks: {    * a(f) {     t.equal(f, fly1, 'pass fly instance to tasks');
exception = _error;       throw new Error("ResolveNamespaceDescriptor failure: " + exception);     }
}     flags = this.getFlags(...arguments);     const previousValue = this.dataValue;
var vec4 = exports.vec4 = exports.vec4 = exports.vec4 = exports.vec4 = exports.vec4 = exports.vec4 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2 = exports.vec2
exports.curry = function curry (context, func,...args) {   var copy = Array.prototype.slice;   args = copy.call(args, 2);
this._selection = rawSelection.reduce(function (prev, curr) {             prev[curr] = true;             return prev;         }, {});     };
req.app = res.app = origApp;         return next();       });
var max = 0;     for (var i = 0; i < this.edges.length; i++) {         var connector = IdToConnector(this.edges[i]);         if (connector.name == name) {             max = Math.max(parseInt(connector.index)+1, max);
it("blank", done => {         this.timeout(TIMEOUT);         Augur.blank(
export async function http__error(ctx, next) {   try {
var ptSlater =  Clazz.newIntArray (nFuncs, 0);  var atoms = this.asc.getAtoms ();  for (var i = 0, pt = 0; i < tokens.length; ) {
function e() {                  var e = t.call(this) || this;                  return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img4 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PI
}),     onContentChange: function(optionIndex, e) {         var options = this.props.options.slice();         var option = _.clone(options[optionIndex]);
}     if ( ++steps > that.options.executionLimit ) throw Error( 'Execution Limit Reached' );    }
} function UPlot(opts, data) {  var self = this;  var series  = setDefaults(opts.series, xSeriesOpts, ySeriesOpts);
, debug     = require('debug')('koa-better-ratelimit')  , copy      = require('copy-to');
this.bindSourceData(this.boundSource);         this.__reattach();     }
class Rectangle extends _RectangleBase$(T) {       constructor(left, top, width, height) {         super();         this.left = left;         this.top = top;
prepareSVG(svg, options, encodings);  for(var i = 0; i < encodings.length; i++){   var encodingOptions = merge(options, encodings[i].options);
var logger;     var driver = model.load( module, {
document.body.onmousemove = function(e) {   var halfHeight = canvas.height/2   var halfWidth = canvas.width/2
if (this._sPrettyPrintDelayedCallID) {        clearTimeout(this._sPrettyPrintDelayedCallID);       }
constructor(target, selector, args, undo, meta) {     super();     this.changes = [];     this.target = target;     this.selector = selector;
, crypto = require('crypto')  , sasl = require('./sasl')  , fs = require('fs')
let column_ = columns_[i];             if (!(column_ instanceof nlobjSearchColumn)) throw new Error('SSS_TYPE_ARG_REQD');
var exec = require('child_process').exec  , os = require('os')
changeColumnQuery: function(tableName, attributes) {     var query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;';     var sql = [];
function ArrayCollectionStrategy() {           _classCallCheck(this, _ArrayCollectionStrategy);           _CollectionStrategy.call(this);           this.observerLocator = observerLocator;         }
this._createTree();             } else if (this.options.type === 'dialog' && Boolean(this.options.autoOpen).valueOf() === true) {                 this.open();
if (oldMax!== newMax) {       run.scheduleOnce('afterRender', this, () => {         this.element._flatpickr.set('maxDate', newMax);       });     }
var path  = require('path')  , fs = require('fs')
that.extendForeignObject(obj_array._id, obj, function (err) {     if (err) {
var assert = require('assert') var tag_version = require('../../lib/utils').tag_version require('../../lib/logger').setup([])
mapLayer: new cwt.ScreenLayer(this.TILE_ANIM_STEP, this.TILE_ANIM_TIME),
this.set('module', (...args) => {       Reflect.apply(window.ga, this, args);     });
var str = 'div.' + variables.get.typeOfBranch() + 'Branch:visible';                 var temp = [];                 $.each($(str).get(), function(i, item) {
var express = require('express')  , app = express()  , i18n = require('../index')  , i18nMongoSync = require('../backends/mongoDb/index');
if (typeof number!== 'number') {       throw new Error('Float32Encoder.encode(): Argument received is not a number.');     }
class UnitHealthStore extends GetSetBaseStore {   constructor(...args) {     super(...args);
}       that.plugin.end();     }
proceed.apply(this, args);             if (tooltip.events && tooltip.events.show) {
if (!(o.jiff === share.jiff)) {         throw new Error('shares do not belong to the same instance (/)');       }
self[name + 'MarkReady'] = function(data) {                     if (!data) throw new Error("No object passed to " + name + "MarkReady");                     if (deferreds[name]) {
let queue = this._updateByIdQueue[_id]    let self = this    this._updateByIdQueue[_id] = null
var bind = function(f,...args) {     return Function.prototype.bind.apply(f, args); };
const CardListExample = () => {   const cards = Array(...new Array(10)).map((_, i) => (     <Card key={i} className="md-cell md-cell--2 md-cell--4-tablet">
return args[ this.lastToggle++ ].apply( this, arguments ) || false;   }.bind( this )
var categories = this.model.get('data');         expect(categories.length).to.equal(1);         expect(categories[0].name).toEqual('Barcelona');
if (!object_ended) {                     throw new Error("Expected end of object.");                 }
, cache = require('../lib/cache/object')  , Job = require('../lib/Job');
} else {      return fileClient.fetchChildren(launchConfDir.ChildrenLocation).then(function(children) {
if (!((objectModelDeclaration_!= null) && objectModelDeclaration_)) {           throw new Error("Missing object model delcaration input parameter!");         }
var Backbone = require("backbone")  , Template = require("./template")
}     var smartChanged = function(index, id, fields) {       var data = this[id].data;       _.each(fields, function(val, key) {
this.route('list-items');     this.route('selected-element');
console.log('testbody1');   process.nextTick(() => {     throw new Error('Too bad');   });
}                 base.update_cb(val);             }
unsafeWindow.localStorage.clear();   Object.keys(savedLocalStorage).forEach(function(key) {    unsafeWindow.localStorage[key] = savedLocalStorage[key];
renderObj.filename=tempFilePath;                 html=ejs.render(temp);               }else{
layer.methods = {};         var methods = rules[rule];         for (method in methods) {             if (!methods.hasOwnProperty(method)) continue;             options = methods[method];
rethinkdb.Connection.prototype.iter = function(exprOrOpts, opt_callback, opt_doneCallback) {     argCheck_(exprOrOpts, 1);
var particleShader = [   'uniform sampler2D texture;', 'uniform vec2 resolution;'
'value': dataArray[i],        'meta': Chartist.serialize(that.data.series[i].meta)       }, Chartist.xmlNs.uri);
io.set('transports', [                         'websocket'  , 'htmlfile'
Permutation.forEachPermutation = function ( array, callback ) {          recursiveForEachPermutation( array, [], callback );      };
propertyName: propertyName,                                     type: 'css-background-image'                                 };
typeof define === 'function' && define.amd? define(factory) :  factory(); }(function () { 'use strict';  const items = [{}, {}, {}];
workflow: Ember.computed('submission.provider.reviewsWorkflow', function () {         return WORKFLOW[this.get('submission.provider.reviewsWorkflow').toLowerCase()];     }),
if (e.target.tagName!= "g") {         that.clearSelection(brush1);       }
yate.AST.prototype.error = function(s) {     throw new Error('ERROR:'+ s + '\n' + yate.parser._where(this.where)); };
function command() {         var self = this;         self.objStatus        = ko.observable('ready');
clearInterval(pollingInterval);     }, defaultInterval); };
var json = self.elementToJSON()     json.data = self.getData()     return json
var Schema = mongoose.Schema; var ObjectId = Schema.ObjectId; var User = new Schema({  displayName: ObjectId,
valueClick: function () {     if (this.get('isEmberObject') || this.get('isArray')) {       this.get('mixin').send('digDeeper', this.get('model'));
if ($this.attr('checked') == 'checked') {                 portal.chat.setSetting('offline', true, true);
if($(this).attr('disabled', true)){        return $(this);
Router._createDeferredRoutes = function () {     for (var n = 0; n < this._i18n.deferredRoutes.length; n++) {         var defRoute = this._i18n.deferredRoutes[n];
fg.controller('fgEditController', function ($scope, fgUtils) {   var self = this;
this.addCss('navbar '.concat(prefix).concat('-')             .concat(this.position).concat(' navbar-');             .concat(this.theme).concat(' bg-');             .concat(this.theme).concat(' navbar-expand-lg'));
function extend(target, modules) {   for (var i = 0; i < modules.length; i++) {     var module = modules[i];     switch (typeof module) {
collision: 'flipfit'         };
.on("mousedown", '[data-ax5grid-column-resizer]', function (e) {                                  self.xvar.mousePosition = GRID.util.getMousePosition(e);
module.exports = Cylon.Drivers.GPIO.Motor;
this.showMessage("error", "Error while deleting script.");                                 }.bind(this));                             }                         });
if (window.console && console[methods[zl]]) {                     console[methods[zl]](...result.format(logArgs, lvl, event));                 }
try {     yield packages(this.metric).upload(pkg)     this.body = yield packages(this.metric).get(pkg.name)   } catch (err) {
exports.show = async function() {   this.body = 'Hero'+ this.req.user.login;
setTimeout(function() {         this.useToolbox();     }.bind(this), this.animTime_);     this.nextArticle(0, false, this.sectionTags_.length);
var lazy = lazy_require({   Client: [ 'azk/agent/client' ],
info.connection().on('connection', socket => {
Initializer.prototype.run = function(cb, thisArg) {   var phases = this._phases    , idx = 0;
var Convex = require('../src/shapes/Convex');
}   return this.render(template, options); };
}       saveInstance(obj);       break;
} else {       listners = getListeners(that, type, true);       if (listners) {
var util = require('util')  , EventEmitter = events.EventEmitter;
update: function (block) {              this.clear()
return Globalize[   runtimeKey( "messageFormatter", this._locale )  ];
}     for (var i = 0; i < listOrderedTickers.length; i++) {       var tickerId = listOrderedTickers[i];
default:         throw new Error('Unexpected tag:'+ cp_info.tag);     }
each(arguments[0], function(value, name) {           this.setAttribute(name, value);         }.bind(this));       }
ACCESSIBLE_GLOBALS.customSidebarButtons : [];
writeUint64(value) {         if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');         this._view.setFloat64(this._writePos, value);
String.prototype.ucfirst = require('./lib/helpers/ucfirst'); var merge_options = require('./lib/helpers/merge-options');
this.on(C.EVENT_TYPE.LIGHT_STRUCTURE_CHANGED, () => {             this.lightsNeedUpdate = true;             this.shaderFactory.setLightStructureDirty();
if (xhrObject()) {     return sendXhr('DELETE', url, params, callback);   }
if (is.defined(width)) {     if (is.integer(width) && is.inRange(width, 1)) {       this.options.width = width;
writecb(er);   }); };
if(!await cfg.fileExists(modName)) {             throw new Error(`${cfg.getBase()} not found in ${cfg.getDir(modName)}`);         }
this.requestTransaction(function () {         if (op.id[0] === 0xFFFFFF) {
$scope.newReservation = true;     $scope.user = {};    }
var res = '';         for (var i = 0; i < data.length; i++) {             var s = data[i];
jj = ((j*4) & modulus);    if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);    if(!sectors[addr]) break;
exports.remove = function remove(_path) {   _unset(this.config, replacePath(_path))
});         $('input[name=show_unread_counts_in_title]', $modal).each(() => {             if (NEWSBLUR.Preferences.show_unread_counts_in_title) {                 $(this).attr('checked', true);                 return false;
}   get (collectionName, docId, field) {     let [collectionName, docId, field] = parseArguments(arguments)     return this.collectionSet.get(collectionName, docId, field)
if (opt_init && opt_init.responseType == 'document') {       return fetchPolyfill(options);     }
app.render = function(name, options, fn){   var opts = {}    , cache = this.cache
function ScribbleCanvas(tag) {   this.tagcanvasDiv = tag;   this.colorseg = Math.floor(Math.random()*14);
var count = this.publish.call(this);
function RuleDecl() {   throw new Error('RuleDecl cannot be instantiated -- it\'s abstract'); }
elements.each(function(i) {             var pos = $(this).offset();
if(newValue!== lastValue) {           setMeta(this, lastValueKey, newValue);           this.notifyPropertyChange(key);
var aArgs = Array.prototype.slice.call(arguments, 1),           fBound = function () {
if (options.inject && Array.isArray(options.inject)) {       injects.push(...options.inject);     } else if (options.inject) {
this.headers.sort(cmp(function(h){                 return self.order.indexOf(h);             }));             for(var i = 0; i < this.data.length; i++) {                 var row = new JsonRow({
uploadTask: task(function (blob, url, resolve, reject) {     try {
var template = this.normalize(loaded, options);     if (!this._usedRouter) this.use(this.router);     var type = this._router.route(...arguments);     extend(this.cache[plural], template);
, force = _ref[2]    , cb = _ref[3];
, pool = require('./collabjs.pool.mysql').pool  , passwordHash = require('password-hash');
})(typeof window!== 'undefined'? window : typeof global!== 'undefined'? global : typeof self!== 'undefined'? self : {});
this.newick = data;       MetadataService.getMetadata(this.metadataurl);     });
fs.appendFile = function(path, data, options, callback) {   options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });
Screen.prototype.exec = function(file, args, options, callback) {   var ps = this.spawn(file, args, options);   ps.on('error', function(err) {
this.webCompile(inPath, outPath, function (result) {         _this2.fsWrite(inPath, outPath, result, callback);       });     }
module.exports = Cylon.Drivers.GPIO.Motor;
'</div>' +         this.view.toHTML() + '</div>';     },
Eventable.call(self);
if ( bool =!!elem.canPlayType ) {                 bool      = Boolean(bool);                 bool.ogg  = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,'');
unmountChildren: function(renderedChildren) {     for (var name in renderedChildren) {       if (renderedChildren.hasOwnProperty(name)) {         var renderedChild = renderedChildren[name];         ReactReconciler.unmountComponent(renderedChild);
this.listenTo(this.model, 'change:bits', function(wire, bits) {             this.$el.toggleClass('bus', bits > 1);         }.bind(this));         this.prevModels = { source: null, target: null };     },
notIn(refValues, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValues = this._normalizeValues(refValues, valueInfo);             return!_.includes(normalizedRefValues, value);
this._fragment.d(detach!== false);   this._fragment = null;
var TObject = require( 'PHET_IO/types/TObject' );   var TVector2 = function( vector2, phetioID ) {     TObject.call( this, vector2, phetioID );     assert && assert( vector2 instanceof phet.dot.Vector2 );
if (typeof type ==='string') type = Shade.Types[type];     if (_.isUndefined(type)) throw new Error("attribute requires valid type");     var bound_buffer;
before(() => {     this.jsdom = require('jsdom-global')('<html><body><div id="root"></div></body></html>');      sandbox.spy(React, 'createClass');
const srckey = keys[0];   const dstkey = toresolve[keys[0]];   delete toresolve[srckey];
this.target = target;     this.selector = selector;
var Line = Base.extend({
function callbackHandler(promise) {         that.set(_this, 'promise', promise);         promise.then(
thunk(function () {   var timeN = 0
var eslint = require('eslint') , eslintConf = require('eslint/lib/config')
});                          setTimeout(function(){ jpn_acf_tabs(id, false, parent); }, 550);
var DEFAULT_EXTENSIONS = {   js: ['js', 'json'],   css: ['css'],   html: ['html']
return Promise.try(function () {     return this._doWorkFn(job.data);   }.bind(this))    .bind(this)
const PIPELINE_HEADER = `${V3_HEADER}.pipelines` function pipelineCoupling (client, app) {   return client.get(`/apps/${app}/pipeline-couplings`)
function log(data) {       instance.private$.logger(that, data)       instance.emit('log', data)
Evme.$('.rightbutton', el)[0].addEventListener('click',       function onClick(e) {         that.removeEventListener('click', onClick);         e.stopPropagation();
me.store.load();     me.callParent();   }
var target = path.join(process.cwd(), exercise.boilerplateOut[boilerplateName])   var done = after(2, callback)
const id = workerTimers.setInterval(() => {                 throw new Error('this should never be called');             }, 100);
} else {       return this.delta.do(...fcdArgs);      }     };
function onOffline() {   debug("MQTT client offline"); }
, stack = err.stack || message      , index = stack.indexOf(message) + err.stack.length      , msg = stack.slice(0, index)
var widget = this.field.widget   var id = object.get(widget.attrs, 'id', this.autoId())   if (id) {
}     callback(...arguments)   }
if (!jQuery.isArray(attrs)) {         attrs = [ attrs ];     }     for (var a = 0; a < attrs.length; a++) {         this.add(attrs[a].id, attrs[a].range);
if (!exp1.type.is_struct())                 throw new Error("internal error, was expecting a struct here");             var s = {};
userChoice, totalVotes = 0;             for (var c = 0; c < poll.choices.length; c++) {                 var choice = poll.choices[c];
{         super();
var testPositions = getTests(pos, ndxIntlzr, tstPs), testPos;                 for (var ndx = 0; ndx < testPositions.length; ndx++) {                      testPos = testPositions[ndx];
if (data.feed.entry.length > 0) {                     $('<li/>').addClass('loadMore').text('Load more').click(function() {                     $(this).addClass('loading');                     Search.searchPlaylists('', true);
checkImmutableMutable(function(immutable, mutable, methodArgs) {       assert.isTrue(TestUtils.returnsImmutable(methodName, immutable, mutable, methodArgs));
};     window.addEventListener('storage', this._notify, false);   },   willDestroy() {
Sequelize.prototype.normalizeDataType = function(Type) {   var type = typeof Type === 'function'? new Type() : Type;   var dialectTypes = this.dialect.DataTypes || {};
else {         throw new Error("couldn't match NAK");       }     };
class Session extends EventEmitter {   constructor(opts) {     super()     this.authenticated = false     this.server = opts.server
beforeEach(function() {         scheduler = [
if (guestWindow!= null) {     event.returnValue = guestWindow[method](...args)   } else {
function mixinProperties(obj, proto) {  for (var prop in proto) {   if (proto.hasOwnProperty(prop)) {    obj[prop] = proto[prop];   }
socket.end();         throw new Error('websocket key is missing');     }
this.installDir = getPath(process.env.USERPROFILE, `Documents/Qlik/Sense/Extensions/${this.PKG_NAME}`);   this.hicomvcDir = getPath(process.env.HICOMVC_DIR || '../hicomvc');
var type = data[from].type;     var obj = data[to] = data[from];     obj.type = type;
}     subscribe(this.branch, this.id, options, cb)     return this   })
}     done(Object.keys(testCases).length); };
if (choice === "yes") {        var store = that.getViewModel().getStore("list");        Ext.Ajax.request({
if (arguments.length === 1) {     return EventTarget;
passport.loadStrategies = function () {   var self = this;   var strategies = sails.config.passport;
for (var key in values) {       if (values.hasOwnProperty(key)) {         this.addAttribute(key, values[key])       }
text: "selected" }).on("change:selection", selection => {   this.set("text", selection? "selected" : "deselected"); }).appendTo(page);
var list = [];  for (let i = 0; i < cache.length; i++) {   list = list.concat(cache[i]);  }
t.is(isEmpty([]), true)   t.is(isEmpty({[Symbol.iterator]: () => {}}), true)   t.is(isEmpty([0]), false)
};   this.add = function(...args) {     queue.append.apply(queue, args);   };
,   prevTag = null  ,   chunk = null  ,   withinItem = false
hasChildShapes: function() {    for(var i = 0; i < this.childShapes.length; i++)     return true;
this.css  = '';     this.width  = null;     this.height  = null;     this.onShow  = null;
if (semActs) {      for (var lang in semActs) {               if (!semActs.hasOwnProperty(lang)) continue;               pieces.push("\n"+indent+"   %");
throw new System.IO.EndOfStreamException();     this.m_tempBuffer.length = bytesRead;     return this.m_tempBuffer;   };
vec = arguments[0];             if (!vec.type.equals(Shade.Types.vec3))                 throw new Error("create with 1 parameter requires a vec3");         } else if (arguments.length === 3) {
} else {           ddManager[method](...args);         }
for( var i = 0; i < subs.length; i++ )   {
default:             throw new Error("Can't serialize object of type " + st.object.termType +'into XML')         }
function addListener( {matches, onEvent} ) {     listenters.push(matches); }
this.rect.y += delta.y;         this.updateOverlay(this.element, fixRect(this.rect));     }
(spec.axes = spec.axes || []);     spec.axes.push(...axis.defs(['row'], encoding, layout, stats));   } else {
define(Array, 'group', function (size) {   var groups = [];
function square(coord) {    return board.square(coord);   }
"es": "ajustes",          "pl": "ustawienia"      }.bind(this), };
{         var tag = arguments.callee.tag;         var cons = arguments.callee.cons;         var newTag = new cons();
}   var done = requestDone.call(this, method, where, cb)
}         selection.style("padding",padding)       }
for (let i = start; i < len; i++) {             this._drawLayerCanvasImage(images[i]);         }
if (!ethUtil.isValidAddress(target)) {     throw new Error('Please provide a valid Ethereum address as the target.');   }
},   onSearchInput: function(query) {     this.setState({searchQuery: query});     this.refs.pluginList.resetSelection();
$.ElementList = function () {  function $ElementList($element) {   this.src = Array.from(arguments);  }
var soundState = this._getSoundState(util.target);     for (var effect in soundState.effects) {         if (!soundState.effects.hasOwnProperty(effect)) continue;         soundState.effects[effect] = 0;
function saveAllFiles() {         for (key in sessions) {             if (sessions.hasOwnProperty(key)) {                 saveFile(key);             }
if (~nativeTypes.indexOf(id))       throw new Error('"' + id + '" is a reserved type name');     customTypes[id] = 1;
module.exports = function () {  throw this; };
objectScale.x = scale.x;       objectScale.y = scale.y;       objectScale.z = scale.z;
var componentConstructor = function(...args) {         Component.apply(this, args);     };
exports.TouchHandler = TouchHandler; })();
imgObj = this.makeImgObj(dataURL, function(){     self.frameData[self.state.count]();     self.rotations.push(0);
extMethod: function(to,from){         var keys = Object.keys(from);
helpers.mockPrompt({   'requirejs': true
}   insertWithRelatedAndFetch(...args) {     return this.insertGraphAndFetch(...args);   }
let branch = this.get('modelMeta').branch;     return branch == null || branch === defaultBranch;   }),
case 'pagedown':             if ( this.get( 'isExpanding' ) ) {                 var scrollView = this.getParent( NS.ScrollView );
if (getProfile) {      that.setProfile(getProfile, false);     }
} else {         throw new Error('Invalid format specified. Please use "rectangle", "polygon", or "point"');       }
mouseMoveHandle = function() {       let focus = d3.mouse(this);       focus[0] -= currentTranslation[0];
, _ = require('lodash')  , tingodb = require('tingodb')(); module.exports = {
var self = this          , config = this.app.config;         exp.configure(function(){
var inputsComponent = $("#less input")      , inputsVariables = $("#less-variables input")
module.exports = function* (series, thunk) {    yield eachLimit(series, 1, thunk);  };
if (err) return this.run('kill -9 %s', this.pid, function again(err, output) {       if (err) return fn(err);
scene.remove(gridSelections[gridName].dot);   }   scriptsToRun = {};   for (var markedPointName in markedPoints){
if (Object(data)!== data) {             return replaceComment(data)         }
var listenerSourceCode = this.__getNodeText(observeBlock);    if(listenerSourceCode == null) throw new Error("Encountered empty <script> element");    component.addEventHandler(eventName, listenerSourceCode);
show: function() {       this.$el.attr('aria-hidden', false).show();     },
$('body').addClass('menu-active');         $('#'+that.id).parent('.dropdown').find('.dropdown-content').show();     });
var expected = [[0,0],[1,0],[1,0],[1,1],[1,2],[2,2]];   for(var i = 0; i < expected.length; i++){    same([path.nodes[i].getX(), path.nodes[i].getY()], expected[i], "initial: path node " + i + " is as expected");
init: function() {     this._super(...arguments);     var childViews = get(this, 'childViews');
if (templ_rows.length!== 1)         throw Error("template not found");        var arrAddressDefinitionTemplate = JSON.parse(templ_rows[0].definition_template);
'use strict'; var Joi = require('joi'); module.exports = function (schema) {
},     changeNavbar({         payload
if (typeof methods === 'object') {             for (var i in methods) {                 if (methods.hasOwnProperty(i)) {                     Child.prototype[i] = methods[i];                 }
var __i18nGlobal__ = exports; define({
`report-to ${ reports.join ` ` }`
showingChangedHandler: function (sup) {    return function (...args) {     sup.apply(this, args);
dojo.connect(this.gitPassphrase, "onfocus", null, dojo.hitch(this, function(){    this.isPrivateKey.checked = true;    }) );
, SELECTOR_EDITABLE_BODY = 'body[contenteditable=true]'         , SELECTOR_GMAIL_EDIT = 'div.aoI'
if ($this.prop("checked")) {                         node[keyparts[i]] = 1 ;                     } else {
} else {        named_transformation = base_transformations.concat($.grep(base_transformations, function() { return this!= null && this!= ""}).join(".");        base_transformations = [];
for(var i = 0; i < joints_source.length; i++)     {
if (arguments.length == 0 || arguments[0] == this.dimensions()) {             switch (this.dimensions()) {
drawer.setLayout(this.createRightDrawerLayout());             drawer.getGroupForEntry = function(entry) {                 return this.getGroupForRightDrawerEntry(entry);             };
self.drag(e);         });       }
topologyOptions: topologyOptions,
result = results     } else if (this.options.hasJoin === true && queryResultHasJoin.call(this, results)) {       result = prepareJoinData.call(this, results)
return function(refShorthandDefaultPos){    var start = refShorthandDefaultPos.start ;    var rhs,r = base.apply(this,arguments);
this.top = {     left: data.target.offset.left,
const YearRange = function(options) {     this.options = options;
this.actions = {       StageCreate:                    null,
return Lua; })({},  ENVIRONMENT_IS_NODE? global : this,
this.value   = value;     this.message = `Invalid value: ${value} in option ${option}`;   }
Compiler.prototype.page = function find(page, assets) {   var css = page.dependencies['.css'] || []    , js = page.dependencies['.js'] || [];
this.dataRequest('edge','store', { edgeIds: edgeIds }),                 this.dataRequest('ontology', 'concepts')             ]).done(function(results) {
this.time = time;    }    for(var layer in this.layers){     if(this.layers.hasOwnProperty(layer)){      this.layers[layer].trigger(eventId, event);     }
if (!isValue ||!this._settingFromInput ) {             TextView.parent.propertyNeedsRedraw( value );         }
for (var i = 0; i < meshdata.length; i++) {     mdat = meshdata[i]     var m = new BABYLON.Mesh( 'terr'+matID, self._scene )
.then(function(diffs) {         return _.map(diffs, that._normalizeDiff);     });
if (configuration.renderOn!== null &&!angular.isString(configuration.renderOn)) {         throw new Error('renderOn must be a string');       }       if (configuration.renderOn!== null && configuration.renderOn.length < 1) {
]);     me.callParent();
util.forEachOwnProperties(this, function(value, key) {         this[key] = null;     }.bind(this)); };
var headers = headerTransforms.forRequest(ctx);     return {
{   return wrpFunc(arguments.callee, null, [ el, releaser ]);
value: function buildAsyncTree() {       var curIndex = arguments.length > 0 && arguments[0]!== undefined? arguments[0] : 1;       var tree = arguments.length > 1 && arguments[1]!== undefined? arguments[1] : this.parsedCommands[0];
if (cbFunc[0] === that.$name) {         const self = this;
el.addEventListener(val[0], function() {             that.method(val[1]);           });
var expect = require("expect.js")  , fs = require("fs")
typeof pFromEnter!== 'boolean'){
info: colorConsole.info,     warn (...args) {       colorConsole.warn.apply(null, args)       dailyfile.warn.apply(null, args)     },
fs.stat(file, function(err, stat) {         if (stat && stat.isDirectory()) {           walkDir(file, function(err, dt) {             dt.forEach(function(a){               var filename = path.parse(a).name;
items: []      , processing: false      , timer: null
if ( hasNoArguments ) {           listener( error );         }
const promise = Promise.resolve(definition(rootSuiteBrowser));
, knexMocker = require('../../../testUtils/mockKnex')  , QueryBuilder = objection.QueryBuilder;
} else {    that.unicorn_show_error();   }
edges() {       for (let u in vertices) {
function e() {                  var e = t.call(this) || this;                  return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img4 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PI
assert.equal(curr, prev + 1);       var lastStrategy = this.completer.strategies[this.completer.strategies.length - 1];       assert.strictEqual(lastStrategy, strategy);
pageInstance.open(endpoint, settings, function (status) {         console.log('attempting to POST: ', settings.data.substring(0, 50),'to ',endpoint);         if (status!=='success') {
return URLs.find({userId: this.userId}, {         sort: {timeModified: -1, timeCreated: -1}     });
console.error(err);         throw new Error("Error on keyspace creation. Aborting unit tests.");     }
, _mapReduceQuery  , _serializeForDataType;
error(...args) {     if (typeof args[0] ==='string') args[0] = this.prefix +'' + args[0];     this.logger.error(args);   }
if (this!== expectedThis) {         $ERROR("'this' must be same as for function called without explicit this got " + expectedThis);     }
var series   var sum = 0   var min = Number.MAX_VALUE
this.state.configfetched = true;             propertiesFromBackend.forEach((property) => {               this.state.plugin.properties[property] = this.state.plugin.properties[property] || '';             });
var self = this;
return foo(10,'sss',1);  } runTestCase(testcase);
this.debug = function() {     this.logger.debug.apply(this.logger, arguments);   };
var EventEmitter = require('events').EventEmitter  , Logger = require('./logger')
if (result!= null) {           for (let i = 0; i < result.length; i++) {             result[i] = result[i].toLowerCase()
} })({}, typeof CSSwhat === "undefined"? require("CSSwhat") : CSSwhat);
var copy = {};    for (var cmd in this.list) {     if (this.list.hasOwnProperty(cmd)) {      copy[cmd] = this.list[cmd];     }
console.warn('[swan instance mismatch]', this.data.compId);         callback();
if (this.version!== 2 && this.version!== 3) {         throw new Error("SenchaJSBuilder: Unsupported version: " + this.version);     }
shouldDisableOrderButton: computed('isUnverified', 'hasTicketsInOrder', function() {     return this.get('isUnverified');   }),
}         return this.editing(false);       }.bind(this))     }, this);
constructor(tracer) {         super();         this._tracer = tracer;         this._uuid = this._generateUUID();
etag (...args ) {  return this.hash( args.join( "-" ) ); }
var self = this;       image.addEventListener('load', () => {         if (self.image == this) {           self.setImage(this);
for (x = 0; x < labelledByIds.length; x++) {                 var labelledByElement = element.ownerDocument.querySelector('#' + labelledByIds[x]);
;; return module.exports; })();
$scope.requestModel.security.forEach(function(secuirtyOption) {       var auth = AuthManager.getAuth(secuirtyOption);
return function(event) {       return __method.apply(object, [(event || window.event)].concat(args));     }
mediaTypes: [     'audio/mp3','audio/ogg','audio/oga','audio/wav','audio/mpeg',     'video/mp4','video/webm','video/ogg'     ]
poolTable.setBombNumber(game.bombNumber);      });      goog.events.listen(game, eightball.Game.EventType.BOMBTICK, function (e) {
this.regionsetViewer = null;         this.embeddedTools = [];     }, {
script.propagateEvents( this.isPropagatingEvents() );                 }
() => {         dispatchEvent.bind(this, view.doc, 'DOMLocalized', langs);         view.observer.start();
} else if (mode == MODE_GEN.TEXT) {                     var output = "";
add: function (target, offset) {     var args = this.target(target, offset);     args.objects = exports.prepareOutput(args);     this.invoke('view.add', args);
var actual = (films[seriesName] && films[seriesName].length) || 0;   test.assertEquals(parseFloat(numberOfFilms), actual, 0);  });
availableActions: function() {     let isActive = this.get('isActive')=== 'active'? true: false;     let l = this.get('links')||{};
for (var id in this._variables) {         if (this._variables.hasOwnProperty(id)) {             var variable = this._variables[id];             if (variable.type === undefined) {
var filename = this.builder? fromFileURL(address) : address;   var outname = this.builder? fromFileURL(outAddress) : outAddress;   return System['import']('lesscss', module.id)
buildRawList(...args) {     if (args.length < 2) {
function UnboundModel() {     }
}else{                 len = this.v.length;
'Must have ENV global set to detect CLIENT/SERVER.');   var storeNames = args.slice(0);   var result = {};
};         throbber.appendChild(throb);
'facetItems': [],        'selectedItems': [],         };
if (j$.util.isUndefined(obj[methodName])) {         throw new Error(methodName + '() method does not exist');       }
receiver[p] = {};                     this._parse(receiver[p], val);                 } else if (valType === '[object Array]') {
function Int64(lo, hi) {         Uint64.call(this, lo, hi);     }     function numToDigits(num) {
this.activeIp = Monitor.activeIp;   this.process.send('' + this.id + '|' + args.join('|'));  }
return [value];       }) : Chartist.normalizeDataArray(this.data, options.reverseData)     };
return cb();             })            .catch(function (err) {
constructor({target, property, values}) {         super();         this.values = values;         this.dropDownLabel = Icon.makeLabel("chevron-circle-down", {
isInstance : function(value) {   throw new Error('Abstract method [isInstance].');  },  CLASS_NAME : 'Jsonix.Schema.XSD.AnyType'
_results = [];       for (cls in name.split(' ')) {         if (!name.hasOwnProperty(cls)) continue;         _results.push(el.classList.add(cls));
var util = require('util')  , Polling = require('./polling')   ;
if (is.object(value)) {     for (var opt in value) {       if (value.hasOwnProperty(opt)) {         value[opt] = replaceProjectIdToken(value[opt], projectId);       }
module.exports = function () {   var self = this   self.move('forward')
var ret = {};   Object.keys(data).forEach(function(section) {     var sections = section.split(':');
}         return $this;       }
function AnimationUtilApply(anim, opt_target) {   if (anim.children && anim.children.length!== undefined) {
function replaceImages(options = {}) {   const res = id => this.resolve(id)   function transformer(tree) {
callback = (callback!= null)? callback : defaultCallback;      $.fn.embedly.embedArray = [];
} else {                 throw new Error("only file to file supports");             }
', cm, data);
} else {         that.set('teamId', null);       }
} else {       templateParse(that, null, null, null, fetchFrag, 'update')     }
var axis = this[dimension];       var size = axis.rangeBand() / this.groupsOf;       var gutter = size * 0.1;       return size - gutter;     };
}       };       this.resetFilter();
},   sendUpdate() {     const type = get(this, 'type');     const out = {};
var Graph = function() {     this.nodes = new Map();     this.edges = [];
if (title.length > 20) {       throw new Error('Title cannot be longer 20 characters.');     }
StringPrototype.underscore = function() {     return underscore(this);
if (_isFrozen) {         freeze();       }     }
noCoverTrig: true,         width: this.menuWidth,         trigHeight: this.selectedHeight + 4,
exports.getIds = function (callback, scope) {     this.getIds(callback, scope); };
if (lines.length > 0) {    for (var i = 0; i < lines.length; i++) {     lines[i] = "<" + (tag.match(/^a\s?/i)? replaceSlug(tag, lines[i]) : tag.match(/^option\s?/i)? replaceValue(tag, lines[i]) : tag) + ">" + lines[i].trim() + "</" + close + ">";
function e() {             var e = t.call(this) || this;             return e._layer = new PIXI.Container, e._layer.y = -30, e.addChild(e._layer), e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PI
function() {         this.stateTransition_(lf.proc.TransactionState_.ACQUIRED_SCOPE);       }.bind(this)); };
function initiateTableFilter(data, filterDiv, tableDiv) {   $('.clear').on("click", function() {     $(this.id + ".noMatches").css("visibility", "hidden")
} else {                     $input.val('');                 }
}     }.bind(this));   }.bind(this));   return routes
function Class( args ) {         if ( this instanceof Class ) {
if (configuration.modelType!== null &&!angular.isString(configuration.modelType)) {         throw new Error('modelType must be a string');       }       if (configuration.modelType!== null && configuration.modelType.length < 1) {
var $export = require('./_export'); var sign = require('./_math-sign');
var source = container._source   var deps = this.dependencies   var args = []
} else {     newMessages[messageId] = function(...args) {      return `${messageText(...args)} (${ruleName})`;     };
var verificationFields = [];  var verificationFieldLength = 0;
var b = npm.bin   var PATH = osenv.path()
} Transaction.prototype.get = function (key, cb) {   var self = this   if (key == null) throw new Error('A key must be given as an argument')
if(typeof name === "object"){    for(var x in name){     if(name.hasOwnProperty(x)){      this.set(x, name[x]);     }
if (a || b) {       return opts.inverse(a)     }
});     _.extend(targetUnit.guide[dimension], _.omit(guide_dim,...properties)); }
, 'docs-server.js'            , 'components.js'
var realLoader = moduleModule._load;   moduleModule._load = function (inv, filename) {     var parent = currentInvocation;
items.forEach(function(item) {       this.upsert(item);     }.bind(this));   }
me.editableCondition = me.editableCondition || NX.Conditions.isPermitted('nexus:capabilities:update');     me.callParent();   },
triggerEvent(handler, this.context);     return this.arguments[0]._active;
},                             on: {                                 success: function() {                                     this.showMessage("success", "Script saved");
throw new Error("Callback was already called.");
var mod = require('./tasks/' + file), name;         for (name in mod) {             if (mod.hasOwnProperty(name)) {                 exports[name] = mod[name];             }
}   }  };  for(var i = 0; i < this.nodes.length; i++) {   this.nodes[i].RIGHT = this.nodes[i].LEFT = this.nodes[i].UP = this.nodes[i].DOWN=0;
for (const key in this.map_) {       list.push(...this.map_[key]);     }
} function setAttribute ( name, value ) {  this.element.node.setAttribute( name, value ); }
}.bind(this);     var handleSystemMsg_ = function(msg) {         this._handleSystemMsg(msg);     }.bind(this);     var handleGameMsg_ = function(msg) {
var canvas = element.find('canvas')[0]         var g = canvas.getContext('2d')         function vendorBackingStorePixelRatio(g) {
}             this.componentManager.register(axis.name, Axis, axisParams);         }.bind(this));     },
function createTree(adapter, items, parent) {   this.items = items.reduce((res, item) => {     const next = parent
if ((e.type==='change' && this.lazy) || (e.type==='keyup')) {     this.curValue = e.target.value;
} else if(serializer!== false){    return typeof serializer === "function"? serializer.call(map, val, attr): oldSingleSerialize.call(this);   }
var qs = require('./')  , times = 100000;
for( var i = 0; i < self._equipments_columns.length; i++ ){   switch( self._equipments_columns[i][1] ){    case'':
if (selector.match(Prime.Utils.spaceRegex)) {       throw new Error("ancestor selector must not contain a space");     }
irc: {     raw: function(...args) {      testableNetwork.lastCommand = args;     },
if (_.isUndefined(map[ctor])) {                         throw new Error("opts.buffer must be either Uint8Array or Float32Array");                     }
self.openConnections[self.id] = self;     }
let errors = parseShaderErrors(message);         throw new Error(type, message, errors);     }
module.exports = {     key: key  , populate: populate
}    }    that._mLoadedSections[sNodeId] = aLoadedSections;    }   }
let { clusterTemplate: { defaultRevisionId = '' } } = this;     return this.id!== defaultRevisionId &&!get(this, 'clusterTemplate.isReadOnly');   },
if (!/^<(([0-9A-F][0-9A-F])*)>$/i.test(src))    throw new Error('eval: not a hex string literal');
ajax_success: function(response){                 console.log('ajax_success');
applyCtx: function (changes) {             return this.applyBase(...arguments);         },
if (typeof method === "string") { method = target[method]; }     if (!method) { throw new Error("You must pass a method to removeObserver()"); }
init() {             this._super(...arguments);             this.formatter = this.container.lookup(`ember-intl@formatter:format-${formatType}`);
for (var i in body) {                 if (body.hasOwnProperty(i)) {                     if (typeof(body[i])!=='string') {                         throw new Error("An interface definition must be a string, defining the property type.");
this.removeWaypoint(e.marker, function() {              });
t.deepEqual(original,register, 'deepEqual case: '+description);         for (var index = 0; index < register.length; index++) {             var item = register[index];
var args = [].slice.call(arguments);   if (this.emit(...args)) {     return true;
val[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8? 2 : biff}); break;   default: throw new Error("Bad SerAr: " + val[0]);   }
var vec2 = require('../math/vec2') var Nearphase = require('./Nearphase') var Shape = require('./../shapes/Shape') module.exports = Broadphase;
this.label = null;     this.position = null;
mouseenter: function (e) {             this.mousedover = true
constructor(node, edges){     super(node,edges)
case AST_INCLUDE:    throw new Error('TODO program_gen' + stmt.type);   case AST_NAMESPACE: {
var first = false;       for (var i = 0; i < fields.length; i++) {         if (!first) {
$('a[data-remote],input[data-remote]').live('click.rails', e => {   $(this).callRemote();   e.preventDefault();
}     super.add(item)     return this.__watchItem(item)
}) &&       p.every(function(i) {         return that.checkConnectionDetails(x[i], y[i]);       });
Promise.prototype.error = function (...args) {   return this.emit('error',...args); };
that.app[verb || 'all'](path, targetFn);    return;
if(node.nodeName == "none") {                 ret = "0px";
var txn = {         getBinary: sinon.stub().returns([]),         abort: sinon.stub()
} else {         throw new Error("The length of an unsigned integer constant value must be 4!");       }
async deleteIndex(indexName) {         if (this._db.connected) throw new Error('Cannot delete index while connected');         this._indicesToDelete.push(indexName);
callback(null, groups);              });          };        },
player.videoaddress=[];    for(var no in videosrc){     if(videosrc.hasOwnProperty(no)){      player.videoaddress.push({res:no,url:videosrc[no]});     }
case PARTIAL: return new DomPartial( options, this.docFrag );    default: throw new Error('WTF? not sure what happened here...');   }
rs1imm = rs1imm.split("(")[1];             that.rs1 = parseInt(rs1imm.replace( /^\D+/g, ""));         } else {
el._boundEvents[type].push(listener);     el.addEventListener(type, listener, useCapture);   }
switchClonesSrc: observer('virtualSrc', function () {     Ember.run.scheduleOnce('afterRender', this, '_switchClonesSrc');   }),
for(let item = 0; item < filters_keys.length; item++) {                     let key = filters_keys[item];                     filters.push([key, this.$route.query[key]].join('='));
Builder.prototype.initTargets = function (targets) {  function init (tgts, parent) {   var instances = [];
, newShare      : React.PropTypes.bool
this.organizationUsers.bind('loading', function() {       this._panes.active('loading');     }, this);
var titles = this.selection.slice(0);  for (var i = 0; i < titles.length; i++) { titles[i] = "'"+titles[i].getTitle()+"'"; }  var result = confirm(_("confirmtable")+" "+titles.join(", ")+"?");
})(typeof(window)!== 'undefined'? window : global);
module.exports = {   putCloudWatchEvents, };
}     if (call) this.app.logger.debug(`${this}generate ${call.constructor.name} from factory.`)     return call
let ids = context.request.ids;   let relatedField = context.request.relatedField;   let relatedType = context.request.relatedType;   let options = {
}     }     if (this.type!== 'button' && this.type!== 'cancel' && this.type!=='submit' && this.name && this.name!== '') {       iterator(this, i);
beforeEach(() => {       this.mixin = make_mixin(default_mixin_spec());     });
];     me.callParent();     me.down('#proxyFieldSet').add(1, {xtype: 'nx-coreui-repository-docker-proxy-facet'});
if (typeof hook!= 'function') {             throw new Error('Unable to register event hook, invalid hook function passed');         }         this.event_hooks[event].push(hook);
}     return this._super(...arguments);   },
goog.asserts.assert(body);         that.activeDialog_ = new wtf.app.ui.HealthDialog(             db,
music = game.add.audio('boden');     music.play();
$(this.element).addClass(this.get('orientation'));  }.bind(this));
if (!parentNode) {     throw new Error('Reference node has no parent.');   }
newLabel = ( typeof newLabel!== 'undefined' && newLabel.length > 0 )? newLabel : curLabel;                         $input.text( newLabel );                     } );
module.exports = function(Cam) {  const linerase = require('./utils').linerase  , url = require('url');
function Dvia_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;
var parseUrl = require('./parseUrl')  , pathRegExp = require('../').pathRegExp
export function randomCouchString(...args) {     const length = args.length > 0 && args[0]!== undefined? args[0] : 10;
this._client.on('listening', function() {         that.openFlag = true;     });
} catch (err) {     error(err)   }
reference: function (attr) {       return SVG.get(this.attr(attr))
this.actions.applyCSSVars(changes.cssVars.newValue)   }   if (changes.panels &&!this.state.private) {     this.actions.updatePanels(changes.panels.newValue)
if (!ZRINIT_FLAG[fl]) {         throw new Error("Invalid ZRINIT flag: " + fl);     }
case 'oauth':       return rem.promptOauth(...args.slice(1));     case 'cookies':
var assetsDirContents = fs.readdirSync(assetPath);   Object.keys(realContents).forEach(function (id) {     var item = realContents[id];
} else if (this.highDefinition === "unavailable") {           that.highDefinition = "available";           changed = true;         }
});             });         }
list.removeClass('hidden').each(function() {           list.find('i').contents().unwrap();         });
this.clearLoadingSpinner();                 this.$('.main-results-content.results').append(this.handleError(i18n['app.feature.search'], xhr));             });
async function createComment(postId) {   postId = new ObjectID(postId);
renameColumnQuery(tableName, attrBefore, attributes) {     var query = "EXEC sp_rename '<%= tableName %>.<%= before %>', '<%= after %>', 'COLUMN';";
module.exports = Cylon.Drivers.GPIO.Motor;
return {     user: store.user.single.user,     newUser: store.user.single.newUser   }
console.warn('OSjs::Core::WindowManager::removeWindow()', 'Got', w);       throw new Error('removeWindow() expects a "Window" class');     }
if (method) {     return method.apply(target, args);   }   else {
checkIfSufficientBuffer() {             var timeToEnd = getTimeToEnd.call(this);             if ((bufferLevel < minBufferTime) && ((minBufferTime < timeToEnd) || (minBufferTime >= timeToEnd &&!isBufferingCompleted))) {
_log = function() {     return console.log(...arguments);   };
var log = console.log;     sinon.stub(console, 'log', function(...args) {       return log.apply(log, args);     });
};  this.exec = this.run = function(...args) {   const command = Object.keys(args).map(key => args[key]).join(" ");   const filename = controller.getUUID();
} else {             throw new Error("internal error on Shade.Optimizer.replace_with_notone");         }
} else {         throw new Error("Cannot join a closed paths with another");       }
case "align":                     return ax5.ui.layout_instance.align(this, x, y);                     break;
this.passthrough('https:   this.get('/api/auth/session', function() {
exception = _error;         throw new Error("StoreDetails failure: " + exception);       }
if (res.length >= cnt) {         return retcb(null, res);       } else {
debug( 'Current value: %d.', this._yNumTicks );
crypto.getRandomValues(array);     return new Buffer(String.fromByteArray(array), 'binary');   };
, common.shipItems , true , function (err, xml) {   console.log(xml);  }
if (!this.isConsistent(transactions)) {             throw new Error('Given set of transactions violates rules for combined transactions');         }
it('should display/hide the loader while loading', function () {     this.visView.addOverlay({       type: 'loader'
replaceSelection : function(items) {       this.setSelection(items);
module.exports.json_newsletter = function() {  var self = this;  self.body.language = self.language || '';
off(name, handler) {   this.__super(name, handler);
if (builtInCommand) {     builtInCommand(...process.argv.slice(3));   } else {
describe('high compression', function() {                     it('should succeed', function(done) {
args[0] = files.convertToOSPath(args[0]);   return fs.unwatchFile(...args); };
return new H.map.DomIcon(icon);     }
var node = $(node).parent(function() {     if( this.__ff__ ) return this;   }.bind(this));
} else {      Monogatari.run (doAction, false);      Monogatari.global ('_CurrentChoice', null);     }
,'   v_fill = unpack_color(fill);','   dim = vec4(x, y, r, -r);','   v_stroke = replace_stroke;'
Extensions.unregister = function (...args) {   var names = Array.isArray(args[0])? args[0] : args;   var groups = this.$groups();
app.post('/connect/:provider/:override?', function *(provider, override) {     this.session.grant = {
parsePath: function (data) {     function parse(path) {       var parsed = extend({}, parsePath(path), data);       if (typeof parsed.ext === 'undefined') {
Device.prototype.toString = function toString() {   var output = this.family;   var version = this.toVersion();
for (var i = 0; i < files.length; i++) {         var filePath = path.resolve(dirPath, files[i]),             output   = fs.readFileSync(filePath).toString();
var $container = $("#irs-" + pluginCount),                     $body = $(document.body),
var proxy = httpProxy.createProxyServer({})    , domainEnv = core.config.get('publicDomain');   return function(req, res, next) {
, path = require('path')  , h = {accept:'application/json', 'content-type':'application/json'};
{           script_obj.source_data = script_obj.source_data;           script_obj.line_arr = [];
this.message = tmp.message;     this.method = options.method;     return this; };
addToScene() {     this.objects.forEach((obj) => {       this.scene.add(obj);     });
else                                 throw new Error("Save is Not Atomic");                         },function(){
async function findOCSP(certificate, issuerCertificate)    {
} else {       var xhr = io.util.request();       var self = this;
[States.NOT_STARTED, 'Not Started'], [States.COMPLETED,   'Completed'] ]
var objectProviderFn = function objectProviderFn(type, ids, paths, inScope, changes, onSuccess, onFailure) {  throw new Error("Object provider has not been implemented.  Call ExoWeb.Mapper.setObjectProvider(fn);"); };
it('Get configuration from server', function(done){   var json = JSON.parse(this.body);    expect(json).to.have.property('engine');
, attrList = ['pos', 'color', 'fugue']   init()
"use strict"; var _extends = function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(target, key)) { target[key] = source[key]; } } return target; }; var z = _extends({}, x);
else                         throw new Error(this.type.repr() + " is an atomic type, got this: " + i);                 } else if (this.type.is_vec()) {
module.exports = Cylon.Drivers.GPIO.Motor;
"use strict"; var uglify = require('uglify-js')  , child = require('./lib/child')
, bindMethods    = require('../../Object/bind-methods').call  , pad2           = require('../../Number/pad').call(2).call  , pad3           = require('../../Number/pad').call(3).call  , format         = require('../../String/format')
this._inputStack.push([this.xmlNode.documentElement, this,'result']);     this._initializeObjects = [];     this._ids = [];     var self = this;
if (!template || typeof template!== 'object') {         throw new Error('ListFacade "template" must be an object.');       }       if (!template || typeof template.key!== 'function') {
});   this.on('finish', () => {     this._stream.end();   });
exception = _error;             throw new Error("getAddressFromPathId failure: " + exception);           }
module.exports = PointToPointConstraint; var Constraint = require('./Constraint'); var ContactEquation = require('../equations/ContactEquation');
function() {                 if (!this.isRemoved) {                     this.maximize();
for (var index = 0; index < entries.length; index++) {           var entry = self.config.processEntry(entries[index], data);
$(".hook-list").on("change", '.hook-icon-set', function() {     viewTheme($(this).attr("id")); });
var error = function (message, options) {         var tmp = Error.call(this, message, options);         tmp.name = this.name = 'EvaluationError';
if (!((address_!= null) && address_)) {               throw new Error("Missing address input parameter.");             }             observerState = _this.openObserverState(observerId_);
if (typeof inputData!=='string') {   throw new Error('LCHErrorInputInvalid');  }
this._adUnit[method](...args);   timeoutId = setTimeout(() => {     timeoutId = null;
for (let t = 0; t < this.renderable_tiles.length; t++) {             let tile = this.renderable_tiles[t];
{         for (var i = 0; i < this._uiSourceCodes.length; i++) {             var uiSourceCode = this._uiSourceCodes[i];             if (uiSourceCode.originURL() === originURL)
var desired_format    , method_name
, playInBackground : false   };
var instance = this;
if (file.state() ==='resolved') {           results.push(file.done(function (file) {             return cb(file)           }))
, sequelizeErrors = require('../../errors.js')  , parserStore = require('../parserStore')('mssql');
edit() {         return this.guild.shard.client.editGuildMember.apply(this.guild.shard.client, this.guild.id, this.id);     }
this._runOrStore(function() {       fn.apply(context, [this.hasErrors()]);     });
var i, _results;     Stagger.__super__.createTween.call(this);     i = this.transits.length;
});     this.Super('init');    }
var Connection = require('./connection')  , crypto = require('crypto')
module.exports = suspend.callback(function (gridModel, columns, viewColumns, exporter, settings) {   assertValidViewColumns(columns, viewColumns);
if (path==null) throw new Error("putDir: Null path");          if (!isDir(path)) throw new Error("Not a directory : "+path);          if (media==MM_RAM) {
beforeEach(function() {       this.modelInstance.validationError = 'foo';       this.modelInstance.serverError = 'bar';       this.itemView.templateHelpers();
get: function(size) {     for (var i in this.queries) {       if (this.queries.hasOwnProperty(i)) {         var query = this.queries[i];         if (size === query.name) return query.value;
var promise = _toConsumableArray($.map(constraints, function (constraint) {           return _this10._validateConstraint(value, constraint);
this.getEncountersOfPatient = function(patientUuid) {         return $http.get(Bahmni.Common.Constants.encounterUrl, {
throw new Error('Invalid range, cannot remove from'+ range.start +'to'+ range.end);  }
})   describe('undefined', function (){
var _this6 = this;       var identity = arguments.length <= 0 || arguments[0] === undefined? this.props.params.identity : arguments[0];       if (typeof io!== "undefined") {
if (/^data-balloon/.test(this.attributes[attr].name)) {                         $purchase_button.removeAttr(that.attributes[attr].name);                     } else {
commit.parentsDiffTrees(function(error, parentsDiffTrees) {         console.log(error, parentsDiffTrees);         process.exit();       });
if(_.isString(data)){     this.data = data;
var feed = __dirname + '/feeds/nondefaultnamespace.atom'    , meta = {}
return (typeof value === 'number') && ('NaN' == String(value));             },
var promises = [];    for (var i = 0; i < ips.length; i++) {     promises.push(get_req(req, ips[i].host));    }
$(this).addClass("active").siblings().removeClass("active");   window.location.hash = $(this).data("tag");  });
style: { opacity: 1 },         onAnimationEnd: handleAnimationEnd,       }, {
if (data.collectStatus === 200) {                  let dataSoureTmp = [];                  let status = data.lisentersGroupkeyStatus;
} else {                          reject(this);
var type = null;        for (var typeEntry in types) {         if (!types.hasOwnProperty(typeEntry)) continue;         var typeNames = types[typeEntry];
console.info('app.App::startup', arguments);
}             for(var i = 0; i < edges.length; i++) {                 var p = objs[edges[i][0]];
module.service('QueryBuilderSrv', function(ZabbixCache, Utils) {     this.build = function (groupFilter, hostFilter, appFilter, itemFilter) {
return function () {       var info = (0, _data['default'])(this);       var isNative = this.attachedCallback;
var PersistedModel = require('../../lib/loopback').PersistedModel  , loopback = require('../../lib/loopback')  , path = require('path')
return Widget.prototype._doLayout.call(this);   },
var mongoose = require('mongoose')
if (this._stateStack.length > 0) {             throw new Error('Cannot close database while transactions are active');         }
var qs = require('qs') var querystring = require('querystring') function Querystring (request) {
gaze('lib
svg: function (svg) {       var well, len
var startTime = new Date().getTime(),                     renderFrame = function () {                         if (!this.inAnimation) { return; }                         var frameTime = new Date().getTime() - startTime,
function e() {             var e = t.call(this) || this;
}     this.doc = new jsPDF('portrait', 'pt', 'letter');     this.docWidth = 612;
this.dates = (this.dates || []).concat(res);   var text = wo.w;
function mouseOver() {                                  document.getElementById(gitlab_variables.menuBtnId).className = "is-over is-showing-fly-out"
if (hexCode.length > 2)             result += that.replaceExpr('[0]');         return result;
, util = require('util')  , tick = utils.tick;
if (!objJoint.unsigned)      throw Error("ifOkUnsigned() signed");     callbacks.ifOkUnsigned();
var iterCount = 0; async function fn() {   for await ([ _ ] of [iterable]) {
return this._run(command, function (err, data) {          then && then(err,!err && that._parsePull(data));       });
this.addItems = function(newItemDicts) {         for (i = 0; i < newItemDicts.length; i++) {             tiid = newItemDicts[i]["_id"]
}   insertWithRelated(...args) {     return this.insertGraph(...args);   }
});             elem.find('.fieldset-delete-button').on('click', function(){                 if(xmltools.confirm_delete($(this))){
constructor(model) {   super(model);   this.shortcutOff = null;
this.bus = Gibberish.Bus();    this.sounds.kick.sampler.send(this.bus, this.amp);
this.addToBuffer(motionAxisName, value) {         if (buffer[motionAxisName]) {
type:'string',         set: function(data) {           return this.l = `${data.l} bar`         }
static: true,     args: args,     returnType: KMeansModel
if (S[i] === '+') {         stack.push(addition(...stack.splice(-2)));       } else if (S[i] === '*') {
$("#settings_overlay_container.sidebar").on("click", "li[data-section]", function ($this) {         var $settings_overlay_container = $("#settings_overlay_container");
];         for (i = 0; i < points.length; i++) {           p = points[i];
{         this.notify("event/broker-stopped");         this.unsubscribe(this._request_id);
htmlBufferPush(buf,'id="' + id + '"' + '>');
this.socket.on('wait_for_phase_two', function(data) {         that.set_status('Player accepted, waiting for match');     }); };
$(this).click(function(e) {           $modal.openModal(options);           e.preventDefault();
compose: function(containerBlock) {
Clazz.overrideMethod (c$, "getBfactor",   function () {  return Float.isNaN (this.atom.bfactor) && this.atom.anisoBorU!= null? this.atom.anisoBorU[7] * 100 : this.atom.bfactor;  });
emit: function(...args) {         var sett = args[args.length - 1];
Logger.prototype.clear = function () {   Object.keys(this.transports).forEach(function (name) {     this.remove({ name: name });
it('can return the result of the executed script', function(done) {       var listener = function() {
module.exports = Cylon.Drivers.GPIO.Motor;
throw new Error("No writes are allowed after close.");         this._chunks.push(...strings);         if (this._tempFile &&!this._isWriting)
var acc = init;     for(var p in obj) {         if(obj.hasOwnProperty(p)) {             acc = xf.step(acc, [p, obj[p]]);             if(transducers.isReduced(acc)) {
setTimeout(function() {     Completers.filter(...args);   }, 210);
this._client.on('close', function(had_error) {         that.openFlag = false;     });
Circle = new Class(Drawable, {  initialize : function(args){   this.super('initialize', args);
function invoke(domainAndMethod,...args) {       Protocol.InspectorBackend._AgentPrototype.prototype._invoke.apply(this, args);     }
, starReplace = ""  , compTrimExpression = new RegExp("((<|>)?=|<|>)\\s*("                                     +semver+"|"+xRangePlain+")", "g")  , compTrimReplace = "$1$3"
$w('minWidth maxWidth minHeight maxHeight').each(function(dimension) {       this[dimension] = this.findDim(dimension);     }, this);
, formatParam = typeof opts =='string'? opts : opts.format      , negotiated = _negotiateContent.call(this, formatParam)      , contentType
if (req.method === 'GET')     return body;   data = await this.readBody(req, 'utf8', opt);   if (!data)
value: function(callback) {           return Collection.mode(callback);         },         writable: true,         enumerable: false
var utils = require('../utils');
var sw = w * options.density              , sh = h * options.density              , f
);   const maxOutputWireCount = Math.max(...outputWireCounts);   const outputGateWidth = (2 + Math.max(7, maxOutputWireCount));
},   refresh() {     this.mountStyle()   } }
const data = this.items(this.context)           if (data && data.then && isFunction(data.then)) {
if ($.isFunction(this.options.content)) {                     content = this.options.content.call(this.$element[0]);                 } else {
if (!InternalStorage[name] ) {       throw new Error('Invalid InternalStorage API call name');     }
activeClass: 'active',   ariaExpanded: computed('isExpanded', 'isExpandedNodeHasChildren', function() {     return this.get('isExpandedNodeHasChildren')? this.get('isExpandedNodeHasChildren') + '' : null;   }).readOnly(),
options.schemaLocation = options.schemaLocation?     options.schemaLocation : _ol_format_GML2_.schemaLocation_;
const docs = this.meta.docsWith(msg.actor.id);                     const clocks = this.clocks.getMultiple(docs);                     DocumentBroadcast.broadcastMetadata(metadata, clocks, [msg.peer]);
Runner_MySQL.prototype._stream = function(sql, stream, options) {   var runner = this;   return new Promise(function(resolver, rejecter) {
db.get(docId, {rev: rev}, function(err, doc){
if(input.toLowerCase() == 'clear'){             $(".input").remove();
describe('.delete', () => {     let fixture = require('./fixture')()      , evt1 = fixture.event1
key: 'init',     value: function init(services, options) {       options = options || {};
let callID = navigationID;         defaultUrl(() => {
})(this);
return function() {               sig = arguments[0];             };
this.send.apply(this, [action, player.slot].concat(args));  }
if (image == null){                 throw new Error('Assigned value on Sprite.image is undefined or null. Please double-check image path, and check if the image you want to use is preload before use.');             }
function translationPath(segmentId, translationId)  {
function hideQuestions(all) {         var temp = [];         temp = (all && all == 1)? variables.get.shownQuestions() : variables.questionsToHide;
if (this.meta.hasMethod(attribute.setterName))                          this[attribute.setterName](value)                     else
function calculate_bb(graphs){     for (var i = 0; i < graphs.length; i++){         var graph = graphs[i];
let props = {...this.props};       for (let name in this.observed) {         if (this.observed.hasOwnProperty(name)) {           props[name] = this.observed[name].data;         }
if (nodes === null) {       throw new Error('TTS: nodes is empty. make call epub.getTextAndImageNodes().');     }
return this.run('ps -p %s -o args=', this.pid, function ran(err) {     fn(undef,!err);   });
, uid = require('uid2')  , DEFAULT_TTL = 1209600
var args = Array.prototype.slice.call(arguments);       args.unshift('progress');       this.emit(...args);
mtEvtDiscriminator.getEvtInst = function (subsys, cmdName) {     return ArgObj.factory(subsys, cmdName); };
var toData = os.getData(dir, to);     for (var key in fromData) {       if (fromData.hasOwnProperty(key)) {         data[fromData[key]] = toData[key];       }
var Context = require('./context')  , escapeRegExp = /[\-\[\]{}()+?.,\\\^$|#\s]/g
this.azureInstanceTypeService = _azureInstanceTypeService_;
, isNode     = classof(process) == 'process'  , P          = global[PROMISE];
if (toResolve === 0) {       deferred.resolve(...resolved);     } else {
throw(new Error({value: this.chr, message: this.chr +'is not a valid chromosome for'+ species.db + '!'});    }
weak32: function (data, prev, start, end) {         var a = 0          , b = 0
},             insertCell (...args) {                 var cell = nativeMethods.insertCell.apply(this, args);                 sandbox.nodeSandbox.overrideDomMethods(cell);
var NormalizeNormalAndEyeVector = function ( fnormal, fpos ) {         Node.call( this, fnormal, fpos );         this._normal = fnormal;
Pattern.prototype.apply = function (input, day) {          Object.keys(Pattern.PROPS).forEach(function(prop) {              var rule = this.rules[prop];
if (!this.asset_cache.has(key)) this.asset_cache.set(key, this._findAsset(name, pipeline_name, remote))   return yield this.asset_cache.get(key) })
if (typeof parent!== 'function' ) {         throw new Error('Parent must be a callable constructor');     }
photos = data.photos? data.photos.photo : data.photoset.photo,                 len = Math.min( data.options.max, photos.length ),                 photo,
if(locale == 'zh_CN'){         this.locale = JSON.parse(fs.readFileSync('./language/'+locale+'.json'));       }else{
, dirscan = require('./dirscan')  , out = require('./output');
var ms;         if ($.isFunction(opts.mask) && (opts.mask = opts.mask.call(that, opts)), $.isArray(opts.mask)) {             if (opts.mask.length > 1) {
Backbone.Subset.extend = Backbone.Collection.extend; })();
locales: []
function TextCandidate () {     }
if (!((componentDescriptor_!= null) && componentDescriptor_)) {                   throw new Error("Internal error: componentDescriptor_ should be defined.");                 }
function setLanguage(oLanguage) {         $.extend(true, $.fn.dataTable.defaults, {
})(this);
if(!self.oldVal[ searchName ] || self.oldVal[ searchName ]!== searchTerm ) {       self.$input.trigger( 'change' );      }
constructor: function EntityFieldModel(...args) {             EntityFieldModel.__super__.constructor.apply(this, args);         },
var bias = [];
equalsbar$:'Property %s is not equal to "bar", man... At %s.',             exactlyone$: function(...args) {               return'my custom error msg for values '+args[0]+' at location '+args[1]             }
}         _this.update(defaultImage, true);     };
if (anonDefine)           throw new Error("Multiple defines for anonymous module");         anonDefine = define;
failure: function ( xhr ) {         that._failConnection();     }.invokeInRunLoop(),
class TaskTable extends React.Component {   constructor(...args) {     super(...args);
var req = new XMLHttpRequest(),                 isSuccessful = false;             req.open("HEAD", request.url, true);
const { EmbeddedDocument } = require('marpat'); const { interceptRequest } = require('./utilities'); const instance = axios.create(this.configuration); instance.interceptors.request.use(interceptRequest);
this.hideResults().search();             window.setTimeout(() => {                 this.$('.g-search-mode-choose').popover('hide');             }, 250);         },
var getProperty = require('../connection/utils').getProperty  , getSingleProperty = require('../connection/utils').getSingleProperty;
}; Document.prototype.update = function() {     return this.write(this.buffer); }; Document.prototype.load = function() {
}             throw new Error('The module has not been loaded yet');         },
constructor(config) {         super(config);         this.config = config;         this.config.guide = _.defaults(
var toString = Object.prototype.toString  , id = toString.call(new Error()); module.exports = function (x) {
if (err) {         throw new Error("Error "+err+" not expected");     }
if (target[key] && isObject(target[key]) && isObject(add[key])) {       that.mergeJSON(target[key], add[key]);   } else {
add(key, options) {          this._states[key] = options
}     for ( i = 0; i < props.length; i++ ) {       prop = props[i];
if (!is_feed(feed)) {     log('%s: bad object type %d %o', db_write_feed_property.name, feed_id,         feed);
{             that._reportProfileProgress(event.data.profile, event.data.done, event.data.total);         }
return part.render(this.partContainer.group());     })      .then(() => {         this.spaceVertically(elements, {
else      throw new Error("No value found for non-optional replacement '" + key, expression: string, data: data };    }
i = this.shapes[i];    var newShape = {}    for(var j in i){
constructor: function TransitionCollection(...args) {             TransitionCollection.__super__.constructor.apply(this, args);         }
this.autoend()   return this.tearDown() }
self.addFlags(uids, 'Deleted', function(e) {           fnMe(e, reentryCount + 1, deletedUIDs);         });
if (_.isArray(type)) {             type.forEach((name) => { this.on(name,...args) });         } else {
var data = function (connector, SensorStore, logT) {     var logger = logT || {};
map: this.map,       layer: this.layer
label = <label    class={'col-form-label VF-Field__label control-label'+ this.getForm().labelClass}    for={this.name}>
this.appversions = addDefaults({}, k8sEnum.Kind.APPVERSION);
debug( 'New value: %s.', this._xMax.toString() );  this.emit( CHANGE_EVENT ); }
} else {     rest = [].concat(...[].slice.call(arguments, 1));   }
opts = arguments[2] || {};    enyo.mixin(opts, {store: this});
var trackWidth = this.pane.el.width() - this.pane.padding * 2      , pos = ev.pageX - this.startPageX      , barWidth = this.el.width()      , innerEl = this.pane.inner.get(0)
done();     });   });
if (x) {             $this.find(".glyphicon-triangle-right").removeClass("glyphicon-triangle-right").addClass("glyphicon-triangle-bottom");         } else {
, isFunction = require('./$.is-function')  , global     = $.g; function ctx(fn, that){
var util = require('./util');
if(that.debug){     console.log("\n\r###### SHEET "+sheetCount+" XML #####\n\r");
module.exports = function Plugin (...regExps) {   this.apply = function (compiler) {
, wkx = require('wkx')  , path = require('path');
if (!pattern.hasOwnProperty(key)) {                 throw new Error('unknow option:'+ key);             }
if ( this.hasOwnProperty('lookupCache_') ) {
};       to = {         x: parseFloat(endX),         y: parseFloat(endY)       };
function sort (arrayLike,...args) {     var criteria = _makeCriteria(args);     var len = _toArrayLength(arrayLike.length);
var elm = $(this);         $.get(elm.attr('href'),  function(data) {             elm.closest('.un-us-item').find('.form-inline').html(data).show();
if (arguments.length <= 1) {             return Year.parseText(text);         } else {
var log = logger.createLogger('reaper')
},     execute: function (op) {       return this.deleteOperation(op.target, op.length || 1)     }
.attr("font-family","Helvetica")      .each(function(dd){wordWrap(t,this,width-(padding*2),width,false);})     y_offset += text.node().getBBox().height
output = command.split('=>')[1];    var ouptupCache = this.getBlockOutput(name);    params = ouptupCache[name];
var $, children, each, find, next, parent, prev, siblings, soupselect, _;   _ = require("underscore");
var getter = this.getEval(fors, expression);
GEPPETTO.Console.executeCommand(actionStr);                                 eval(that.props.metadata.action.replace(/\$entity\$/gi, path));                             }
l.curve = function(_) {     return arguments.length? c(curveRadial(_)) : c()._curve;   };
if (newVersion) {         return that._getCacheNameForVersion(newVersion)          .then(caches.open.bind(caches))
var shown = 0;                 for (var i = 0; i < options.items.length; i++) {                     var item = options.items[i];
const codeList = [];     for (let concept in conceptList) {       if (conceptList.hasOwnProperty(concept)) {         codeList.push(conceptList[concept]['$'])       }
'zoomend': this._endZoomAnim       }.bind(this))     })
var buffer = []   var timer
lib.TestManager.TestRun.prototype.ALL_TESTS = lib.f.createEnum('<all-tests>');
const fns =     args.reverse()   const head =
if (!adapterNpmName) {     throw new Error("The adapter's npm name is required when running init.");   } }
if (payload.email === 'error@user.com') {             throw new Error('user error')           }
let key, notification;     for (key in this._notifications) {       if (!this._notifications.hasOwnProperty(key)) continue;       notification = this._notifications[key];
})     const Heartbeat = function () {       this.isAlive = true     }
if (linkHref === href) {           this.set('navService.selectedIndex', index);         }       }
debug( 'Current value: %s.', this._aValue );
,common.merchantOrderNumber , function (err, xml) {   console.log(xml);  }
notebook_star_count_exists: function(notebook_id) {         return this.model_.notebook_star_count_exists(notebook_id);     },
obj[prop] = 0;              }          });
injectConfigFilePath: function(filePath, configPath) {     this.inject(filePath, '__CONFIG_FILE__', configPath);   },
this.mockOpts = opts;                     this.method = 'generateInline';                 }             });
module.exports = (function () {   function Pipeline(...args) {     GremlinObject.apply(this, args);   }
girder.wrap(imagespace.views.SearchView,'render', function (render) {         render();         this.$('.pull-right').append(girder.templates.startIqrSession({             currentIqrSession: imagespace.smqtk.iqr.currentIqrSession
});       onChange = function(value) {         this.removeClass(this.refs.button, 'btn-success submit-success');         this.removeClass(this.refs.button, 'btn-danger submit-fail');
if (_.isUndefined(value)) {                 throw new Error("parameter " + key + " has not been set.");             }
var process = function(err, trades) {     var price = that.calculateAveragePrice(trades);     callback(price);
Redirect.prototype.redirectTo = function (response) {   var self = this
this.handleMultiMinusButtonTap = function(e) {     this.multiData.splice(e.item.idx, 1);     this.change(this.multiData);
let channel = message[CHANNEL]      , data = message[DATA]      , error = message[ERROR];
if (!settings.url) {       throw new Error("Qajax: settings.url is required");     }
initialize: function(args) {   if (!args.graph) {    throw new Error("Rickshaw.Graph.DragZoom needs a reference to a graph");   }
var entities = [];   for (var i = 0; i < this._entities.length; i++) {    var entity = this._entities[i];    if (entity.transformComponent) {
}         }).done((resp) => {             this.render();             this.$('#g-google-analytics-tracking-id').val(
this.pages[data.link] = cygnus.parseHTML(data.html);   },
var canSendMMS = getCanSendMaxMessageSize(canSendMMS, isFirefox);
{         that.widgets["statuspane.systeminfo"].setContent(that.tr("Running tests..."));         that.toolbar.setEnabled(false);
util.forEach(range, function(date) {         this._addHlData(datetime.format(date, 'YYYY-MM-DD'), cssClass);     }.bind(this)); };
projectionProvided: function() {     return mapConfig.sources.find( s => s.projection );   }.property('mapConfig'),
collection : function(){ return this._cmd('collection',arguments); },         close : function(){ return this._cmd('close',arguments); },
var Shape = require('../shapes/Shape'); var Broadphase = require('../collision/Broadphase'); module.exports = SAPBroadphase;
$(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));    if (Math.abs(delta.x) < Math.abs(delta.x)) {
}   throw new Error('illegal error correct level:'+ level); };
input.addEventListener("blur", function() {           focus(this);           totalBlock.update();         }, false);
}.bind(this, event);         document.addEventListener('mousemove', this.boundMove);
var scenarioManager = new ScenarioManager(url.format(config.servers.elasticsearch));
if (!((objectModelDeclaration_.jsonTag!= null) && objectModelDeclaration_.jsonTag)) {           throw new Error("Missing required root namespace property 'jsonTag'.");         }         this.model.jsonTag = objectModelDeclaration_.jsonTag;
}     this.columns(...columns);     this.values(...values);     return this;
if (btn == 'yes') {          this.getSelectionModel().getSelections().forEach(function(rec){      this.store.remove(rec);
adaptor.applyStyling = function ($box, $slides, settings) {       var imgSrc = slideImageURL($slides.eq(settings.bsfaceindex || 0))        , $frag = $()
$.each(asyncWebshims.cfg, function(i, cfg){     webshims.setOptions(cfg);    });
function() {                                  this.setActiveItem();
this.contexts = [];    for( i = 0; i < contexts.length; i++ ) { this.contexts.push( contexts[i].substr( 1 ) ); }    line = line.replace( TodoTxt._context_replace_re,'' );
_("%s sequence [%s] was ignored."),         "DECSCL", Array.slice(arguments));     }
this.name = ast[1].join('/');     this.constants = {};      };
dispatch(this.unlockMetamask())       dispatch(this.setSelectedAddress())       dispatch(this.updateMetamaskState(result))       dispatch(this.hideLoadingIndication())
file.removeWithoutTrash=function () {                  if (!file.exists() &&!file.isTrashed()) throw new Error(path+": No such file.");                  lcs(path, null);
var Errors = require('./errors')  , fs = require('fs')
});       return Promise.all(promises);     },
function proxyArrayMethod(method) {       return function(...args) {         var callback = args[0];         return [][method].apply(
default:    throw new Error("unknown type="+(typeof value)+" of "+value);  }
if (remote === undefined) {       throw new Error("unsupported");     } else if (!(remote in config.read().remote)) {
const idProp = this.idProp,       service = this.service,       cacheService = this.cacheService,
var xmpp = require('../index')  , debug = require('debug')('server-and-client')  , Client = require('node-xmpp-client')
if (self.debug)                 console.log(name, args);             var newStateObject = self.currentStateMap.toJS();
if (this.output.length!== 2) {      throw new Error('Output must have 2 dimensions on graphical mode');     }
var width = dim.w- 2*(me.w + be.w + pe.w);                  widget.resize({t:0,l:0,w: width});
function image_status(status) {  private_msg(client, [common.IMAGE_STATUS, status]); }
try {               createdItem = processSingleItem(...args);             } catch (e) {
var modulevalue = 0;             var moduleDependencies = [];             $.each($('input[dependencies=' + $(this).attr('module') + ']:checked'), function () {
$(this.element).removeClass("horizontal vertical");   $(this.element).addClass(this.get('orientation'));  }.bind(this));
if (max_alt_rows.length!== 1)           throw Error("not a single max alt level");          var max_alt_level = max_alt_rows[0].max_alt_level;
if(cdsStart > exonEnds)  {   return smallBox( (exonStarts - (Math.min(...pluck(data, 'txStart')))), (exonEnds - exonStarts - (5 / multiplyingFactor)), multiplyingFactor, strand, label);  }
this.debug.log("Waiting for more " + type + " buffer before starting playback.");                 this.notify(this.notifier.ENAME_BUFFER_LEVEL_STATE_CHANGED, false);             } else {
that.updateHairlineInfo();     that.attachHairlinesToChart_();
constructor(project, url) {     super();     this.project_ = project;     this.url_ = url;
Vue.filter('transChoice', function(id, number, parameters, domain, locale) {         return this.$transChoice(id, evalExp.call(this, number) || 0, evalExp.call(this, parameters), evalExp.call(this, domain), evalExp.call(this, locale));     });
shell.config.silent =!config.isVerbose;       cb(0, shell[program](...programArgs));     } else {
app.listen(8000); function promiseFromStreams(...args) {     return Q.all(args, function(stream) {         return Q.promise(function(resolve, reject) {             stream.on("error", reject);
var glob = require( 'glob' )    , async = require( 'async' )
if (width <= 0 || height <= 0 || width > 65535 || height > 65535)     throw new Error("Width/Height invalid.");   function check_palette_and_num_colors(palette) {
$('a.option', doc).click(function(event) {                     var href = that.href;                     var de = jQuery.Event('drop');
if (this._template && isThemeVar && isRefContext) {         if (parent.type === NodeType.ARGUMENTS) {           throw new Error('Template theme variables are not permitted as arguments:\n>>> '+Node.toString(parent));         }
\n\n'].join('\n');   module.exports = function doGrunt(grunt) {
return spawn(...kill); };
didTransition() {     this._super(...arguments);     if (config.gaCode) {
if (info.p[0]!== 'c') {      throw new Error("How did we end up with paths other than 'c' and 'a'?");     }
ended.should.equal(false)     await increaseTime(moment.duration(2.1, 'week'))     ended = await this.crowdsale.hasEnded()
var node = this;
resolve();       });     }, this);
});   pool.connect(...options.auth); }
if (token.tagName === 'html') {          tc._insertElement(that._createElementForToken(token, false));          tc.insertionMode = BEFORE_HEAD_MODE;
else if (Array.isArray(value)) {         obj[key] = value.map(replaceRecordIds);       }       else {
this.log.debug('Error: %s', err.name)     this.log.debug('Error cause: %s', err.cause.name)     this.log.debug('Error cause message: %s', err.cause.message)   })
var params = isName? arguments[1] : null;     logger.log('Changing state to {0}', pathQueryOrName || '""');
if (_.isArray(t[k])) {    t[k] = _.without(..._.union([t[k]],v));   } else throw new Error("Cannot apply $pull/$pullAll modifier to non-array");
}   return function(...args) {     return g.call(null, f(...args))   }
var Graticule = function(options) {  if (!options) options = {};
, f = require('util').format  , assign = require('./utils').assign;
$scope.userWalls[isEditing].showLoading = true;                 for (k = 0; k < $scope.newWallOptions.length; k++) {                     $scope.userWalls[isEditing][k] = $scope.newWallOptions[k];
isFunction( obj ) {     return toString.call(obj) === "[object Function]";
module.exports = Cylon.Drivers.GPIO.Motor;
for(var conceptUri in parentData) {     if(parentData.hasOwnProperty(conceptUri)) {         var branchHelper,         exactMatchFound;         currentNode = createConceptObject(conceptUri, parentData[conceptUri]);
done();       });     });
ojster.example.templates.Tools.SomeTool = function(opt_data, opt_ctx, opt_writer) {  ojster.Template.call(this, opt_data, opt_ctx, opt_writer); };
var Constructor = function(elementFilter, indicatorFilter, spec) {       var self = this;
}; })(typeof(window)!== 'undefined'? window : global);
, Readable = require('stream').Readable || require('readable-stream').Readable  , Define = require('./metadata');
key.empty();  var keys = [];
if (!(requirement in require_.modules)) {                 throw new Error('dependency not loaded:'+ requirement + '.');             }
var OPACITY = 1;
method.apply(container, arguments);                 });             }, this);
this.dev = null;   this.gnubbyInstance = ++Gnubby.gnubbyId_;   this.cid = Gnubby.BROADCAST_CID;   this.rxframes = [];   this.synccnt = 0;
if ( isFresh && Application.isDeveloperMode ) {     this._logger.fine ( String ( "Import \"" + name + "\":\n\n" + result ) );    }
swalPromiseResolve(resolveValue || {})   globalState.deferDisposalTimer = setTimeout(() => disposeSwal(), DISPOSE_SWAL_TIMEOUT) }
.attr('title', layer.get("title") || layer.get("name"))    .click(function(){ $(this).prev().click(); })    .attr('unselectable', 'on')
return this.autorun(() => {   const data = Template.currentData();
}     tx.timestamp = parseInt(tx.getBlock(false).timestamp, 16);     if (!payload.mutable) {
newProps[e.target.name] = e.target.checked;         this.props.onChange(newProps);     },
} }).call(undefined);
if (byteArray === undefined) {     throw new Error('dicomParser.parseDicom: missing required parameter \'byteArray\'');   }
class TaskDetail extends mixin(TabsMixin, StoreMixin) {   constructor(...args) {     super(args);     this.tabs_tabs = {};
}.bind(this));   };   return KeyboardHandler;
if (typeof (err) ==='string') {       formattedMessage = formatter(...arguments);       err = props = undefined;
Handler.call( this, fileName );  this.setCRS( null );
console.error("Error uploading selfie", err);       });     }
GeneratorFunction.prototype.goThen = function (onFulfilled, onRejected,...args) {     return this.goWith(args).then(onFulfilled, onRejected);   };
else {                 throw new Error('i18next is not loaded');             }         };
return Promise.reject(error);             });     },
function Matrix (...args) {       Element.apply(this, args)
if (err) throw err     for (let i = 0; i < results.length; i++) {       const guildRss = results[i]       const guildId = guildRss.id
run(options) {     this._super(...arguments);
{             this.query = query;
var Mongoose = require('mongoose') function mongooseRest (schema, options) {
if ($div.length === 0) {       throw new Error('DIV StringMeasurement does\'nt exist');     }
, Store = require('../store')  , assert = require('assert');
MultiLevelMenuUtil.getTargetRouteIndex = function (router, targetModuleId) {             for (var routeIndex = 0; routeIndex < router.navigation.length; routeIndex++) {                 var route = router.navigation[routeIndex];
}       });       if (!hasVisibleNodes && this.parentNode.$node) {
this.FEATURE_COLLECTION_PARSERS = {};   this.FEATURE_COLLECTION_PARSERS[_ol_format_GMLBase_.GMLNS] = {     'featureMember': _ol_xml_.makeReplacer(
var ss = {}   this.ss.iterate(this, null, null, function (n) {     var user = n.id[0]
const fn = async function({a1, a2, a3}) {  this.return = a1; };
path ='' + path;   return sugarskull.Router.prototype.dispatch.call(this); };
var nodeListToArray = function nodeListToArray(nodeList) {   return document.querySelectorAll(nodeList); };
Ember.tryInvoke(this, name, args);     this._super(...arguments);   },
}         return self.explore(...args);     }
function get(target, propertyKey ) {   var desc, proto;   if (anObject(target) === receiver) return target[propertyKey];
if (message instanceof String) {   _.eachKey(this._patternMessageSubscribers,     function(patternSubscribers, pattern) {
jQuery('input[name^="'+vessel+'-"]').each(function (index) {   $(this).parent().show();   }
if (obj === undefined)         throw new Error('retain_array: array is not an argument');     for (ix=0;!(retained_arrays[ix] === undefined); ix++) { };
self._model.addChild(leftTypeStructDef);         });
onVMouseMove: function(event) {         if (this.props.floating) {             event.preventDefault();
var backListener = function() {that.view.fireEvent('android:back', null);};
beforeEach(function() {         state = new RoomState(roomId);
if(arguments.length === 1) {       return this.validator.validate(value);     }
, eslintConf = require('eslint/lib/config')
var child = new (forever.Monitor)(script, childConfig);   child.on('exit', function (...args) {    console.log(args);    console.log(script +'has exited after 3 restarts');   });
function valueNull() {         delete that.value;       }
this.width = width         this.roomObjects = []         this.updatableObjects = []         this.backgroundTiles = new Array(height).fill().map(x => new Array(width))
pickNarrativesBySet(narrative_set) {         let narratives_in_sets = {}         for (var i = 0; i < narrative_set.length; i++) {
var scalingFactor = Math.min(worldSize.x / myWidth, worldSize.y / myHeight);     var desiredPosition = myBounds.topLeft().subPt(worldSize.subPt(this.owner.worldPoint(myWidth, myHeight))).scaleBy(0.5));
this.form = this.app.form;     processAlertMessage(this);
try{             this.removeListener("connect");
let options;     const last = _.last(args);
, app = express()    , bootstrappedEnv;
this.iv = iv;         asm.init_state( iv );     }
'use strict' var request = require('../index') var tape = require('tape')
if (!SPARK) {         throw new Error("Soy templates must be initialized to SPARK-namespace before loading spark-bootstrap.js");     }
const loaderUtils = require('loader-utils'); module.exports = function (input) {   const { text } = loaderUtils.getOptions(this);   return input + text;
var gun = Gun({   peers: require('../../test/shotgun'),   s3: require('../../test/shotgun')  });
extractCSS = function( arrayOfStyles, styleObj){     var i, val, out, len = arrayOfStyles.length, css = [];     for( var i = 0; i < len; i++){
function handleInputs(widget, config) {         var inputs_container = widget.append('div');         inputs_container.classed({'chart-inputs': true});
function () {  return that.getProteinStructure ();  });
constructor(tempVarTransformer, protoName, thisName, internalName) {     super();     this.tempVarTransformer_ = tempVarTransformer;     this.protoName_ = protoName;
...props,             title: ast.identifier.title,             alt: ast.alt,
{         for (var i = 0; i < events.length; i++)             this._profiler.dispatchEventToListeners(WebInspector.PowerProfiler.EventTypes.PowerEventRecorded, events[i]);
var target = this._parentNode,         node = target.node,         ret = _super.apply(this, args);
var path = "notes/" + filename;         var promise = this._createPromise(Noted.dropbox.readFile);         promises.push(this._createPromiseRead(path));       }.bind(this));
it('ordering', function() {       let editor = this.setEditor('<p>012</p><p>456</p>');       editor.formatAt(0, 2, 'bold', true);
, multi     = 5
var _ = require('underscore'); var BluebirdPromise = require('bluebird'); var Adapter = require('./base'); var sqlite3 = require('sqlite3');
this.props = props;         super();         this._vdom = createElement(h(this.tagName));         document.body.appendChild(this._vdom);         this._boundRender = () => {
}             throw new me.Entity.Error("Shape (" + index + ") not defined");         },
catch (e) {  } runTestCase(testcase);
}         throw new Error('you need to provide either an URL or CSV data.');     }
let fullSelector = buildSelector(this, context, selector, options);           context.assertElementExists(fullSelector, options);
var findAutoIncrementField = function() {     var fields = this.QueryGenerator.findAutoIncrementField(this)     this.autoIncrementField = null
params.imageClass         = options.imageClass || defaultParams.imageClass;         params.callback           = options.callback || null;
Notification.prototype.bind = function(){     var behaviour = this;
rendrExpressApp.use(function(req, res, next) {     var session = req.session;
it('should validate for string', function () {     this.validator.validate('1', {'type': ['number','string']}).should.be.empty;   });
{         var commands = ["log", "debug", "info", "warn", "error", "assert", "dir",
const done = this.async();     this.prompt({
newString.matchAll = function(regexp) {   var matches = [];   this.replace(regexp, function() {     var arr = ([]).slice.call(arguments, 0);
function() {      $(this).text(gettext("Show"));     $(this).closest("fieldset").addClass("collapsed");     return false;    }
function publish (topic, data) {   postbox.notifySubscribers(data);   return this;
} else {             return MonthDay.ofNumberNumber(yearOrNumber);         }
}     throw new Error('Unable to determine scrollTop of the window');   }
var tile = prenderer.getTile(null, plevel, pface, px, py, "neighbour of " + name);                     tile.onDestroy.add(this._onNeighborTileDestroyed);                 });
else if (targ0 === 'object') {       fields = arguments[0];       return adt.record(function (r, field) {         for (var name in fields) if (fields.hasOwnProperty(name)) field(name, fields[name]);       });
var frameworkPath = join(framework, shortName)    , lib = core.dlopen(frameworkPath)
, groupBy: {}         }
, StringDecoder = require('string_decoder').StringDecoder
class NodeDetailPage extends mixin(TabsMixin, StoreMixin) {   constructor(...args) {     super(...args);
this.upgradeResults = function(files){       Object.keys(files).forEach(function(name){ files[name].results = angular.copy(this.baseResults);});       this.results  = files;
});     if (_.isUndefined(obj.data)) throw new Error("data is a required field");     if (_.isUndefined(obj.data)) throw new Error("columns is a required field");     function table() {
, sequelize = new Sequelize(config.database, config.username, config.password, {logging: false})
if (info.p.length > 1) {     throw new Error("How did we end up with more than two paths?");    }    if (info.p.length) {
this._isDefined = fcn;  debug( 'New Value: %s.', oldVal );  this.emit( CHANGE_EVENT ); }
if (!newSurface) {     throw new Error('Couldn\'t clear and hide the drag surface: missing new surface.');   }
"use strict";     var CONTENT_TYPE = 'application/json';     this.STATUS_CODES = {
{                 $this.hide();             }
this._viewFolder = ''   beforeFilters = []
};      that._write_nodes_helper( node, on_nodes_written );  }
Object.keys(params.headers).forEach(headerName => {         const headerValue = params.headers[headerName];
for (var i = 0; i < Report.visualizationTypes.length; i++)      {
uki.each(['width', 'height','minX','maxX','minY','maxY', 'left', 'top'], function(index, attr) {         proto[attr] = function(...args) {             return rect[attr](...args);         };
} else {         throw new Error("a public key string is required");     }
, MongoError = require('mongodb-core').MongoError  , Define = require('./metadata');
var parents = this.parents || [];       for (var i = 0; i < parents.length; i++) {         parents[i]().call(this);
options.classNames.series,         (that.data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i))       ].join(' '));
if (inside[name]) {    this.strongSpace = false;   }
target.value = text.slice(0, startLine) + text.slice(startLine + preTab, selStart) +                         sel.replace(new RegExp('\n' + tab, 'g'), function () {
if(/^\<pre.*>(.*)\n?\<\/pre>$/.test(that.data)){
url : '/ke/cluster/zk/cmd/ajax?cmd=' + command + '&type=delete',     success : function(data) {      if (data!= null) {       term.echo(String(data));      }
, spinner_tpl = '<span class="glyphicon glyphicon-refresh decoy-el-spinner">'  , icon_size = 20
if (validateClient) {                      $this.valid();                      dependsOnCheck(this, new Array());                  }
function hotFix1493(map) {     var fixedMap = map;     var fixedArray = [];
gulp.task('publish', async () => {   Object.keys(process.env).forEach(key => {     console.log(`${key}: ${process.env[key]}`);
if ( jQuery.isFunction( html ) ) {    return this.each(function() {     jQuery(this).wrapAll( html.apply(this) );    });
}     this.engine.sendAsync(...arguments);   }
this.info = function(...args) {     args[0] = t(args[0]);     logger.info(...args);   };
module.exports = function(d) {   if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this;
, ImageData = canvas.ImageData  , PixelArray = canvas.CanvasPixelArray;
for (var i = 0; i < modelAtomCount; ++i) {  var tokens = this.getTokens ();
this._eventHandlers = {};     forEach(get(this, 'leafletEvents'), function(eventName) {       if(typeof this[eventName] === 'function') {
module.exports = Cylon.Drivers.GPIO.Motor;
})).start(tmp.morph)     })    };
{         for (var i = 0; i < this.tabs.length; i++)         {             var tab = this.tabs[i];
constructor() {     super();
console.log('init_attr start');            _base.init_attr(elem);                    elem.initData('glue','');
new function(){var a=20}
exports.supported = [];
gte(refValue, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValue = this._normalizeValue(refValue, valueInfo);             return (value >= normalizedRefValue);
const mergeReducers = (baseReducer,...reducers) => {   const combinedReducers = combineReducers(...reducers);   return (state, action) =>
var Visitor = require('./')  , nodes = require('../nodes');
"use strict"   var ws = require('websocket-server')    , spawn = require('child_process').spawn
GooglePlusPanelView.prototype.LABEL_LOGGED_IN = 0; GooglePlusPanelView.prototype.LABEL_NOT_LOGGED_IN = 1; GooglePlusPanelView.prototype.beforeShow = function gppv_beforeShow(...args) {   PanelView.prototype.beforeShow.apply(this, args);
var options = this.documentDetailOptions.apply(this, arguments);                 this.documentDetail(options);             }.bind(this));
if (argv.length > 3) {         var theUser = encodeURIComponent(argv[3])         var uri = "/-/by-user/"+theUser+"|"+un         console.error(uri)
if(tOfVal === 'object' && val.length){         var absArr = createSizedArray(val.length);         var i, len = val.length;
toastr.success(TAPi18n.__('Room_password_changed_successfully'));
if (typeof this.renderSelf == 'function') {       this.renderSelf();     };
for(var i = 0; i < categories.length; i++)          feed.push({ category: [{ _attr: { term: categories[i] } }] });
show: function () {     var cal = $('#' + $(this).data('pickmeupId'));     if (!cal.is(':visible')) {
if (countDown < 1) {       fetch(expireSessionUrl, { method: 'POST' })
this.build();    this.$tempTopics.empty();   }.bind( this ), 0 );  }
else {   ExoWeb.Batch.resume(batch);   callback(true, typesJson);  }
link: function (scope, elem, attr) {              }
var startTs = that.since;     var parsedTrades = [];
if (!this.definitions) {     throw new Error('Definitions not parsed yet');   }
var TodoViewModel;   TodoViewModel = function(model) {
this.anchor.set(0.5, 0.5);   this.areaHeight = HEXA_HEIGHT;
Size.prototype = new RefObject;  Size.prototype.constructor = Size;
if (showEditConnectionForm) {       deleteButton = <button type="delete" className="btn btn-default" onClick={() => this.handleDelete()}>Delete</button>     }
var Proto = require('../../lib/_proto')  , Base = Db.Base, DateTime = Db.DateTime
try {       let outputFileName = compilation.options.output || 'bundle.js';       asset = compilation.assets[outputFileName] || Object.values(compilation.assets)[0];
if (2 === Object.keys(room.members).length) {                     for (var i = 0; i < room.members.length; i++) {                         var member = room.members[i];
{   if (!('sItemListContainerId' in this.opt))    this.oItemList = $('#' + this.opt.sItemListContainerId)[0];
}   if (!dirty) return false;   this._state = assign(assign({}, oldState), newState);
if (!options ||!options.template) throw new Error('Reef.js: You did not provide a template for this component.');
if(this.ready())   K.map.initMap(K.profile.getOpts('map'), function() {    this.enableBBox();
value: function(func) {         return new neume.SynthDef(context, func);       },
});       that.once( 'complete', function( error, message, data ) {         console.log( 'generateKey job complete' );
return function auth(next) {     var session = this.session;     this.user = {};
callback(new Error('Creating profile without roles succeeded. Expected to throw.'));       })      .catch(() => {         callback();
func(event, this, pt);       }     };     if (actions.mouseover &&
if (ssf && Error.captureStackTrace) {     Error.captureStackTrace(this, ssf);
, d = { configurable: true, enumerable: false, writable: true }; module.exports = function (e1, e2) {
{    throw new Error("QR Error: Error BitMatrixParser");   }
edit.off("show").on("show", function() {             var root = $(this);             root.append(settings_html);
opacity: function (el, i, val) {       if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;
for (var i in sidebar){     if (sidebar.hasOwnProperty(i)){       for (var j = 0; j < sidebar[i].length; j++){         list[sidebar[i][j]] = j;       }
}     end(...args) {       this.client.end(...args);     }
for (var p = 0; p < panels.length; p++) {     object.panels[p] = $.extend(true, {}, w2layout.prototype.panel, panels[p]);
args.unshift(log.color.cyan('mrdoc'));
{     throw new Error(sprintf("open %s faild"));    }
if (this.keyForAttribute) {       typeClass.eachAttribute((key) => {         payloadKey = this.keyForAttribute(key, 'deserialize');         if (key === payloadKey) { return; }
if (padded) {       this.formatTokenFunctions[padded[0]] = function(...args) {         return zeroFill(func.apply(this, args), padded[1], padded[2]);       };
} else {                          _liA.push('<a tabindex="-1" class="opt '+optClass+'">'+$(this).text()+'</a>');                     }
else                         throw new Error("float is an atomic type");                 } if (this.type.is_vec()) {
exports.trimZeros = function (num) {     var str = num || '0';     if (str.indexOf('.') == -1)         return str;
var item_elt = $(this.htmlForListItem(path, {                 name: this._name(path),                 offset: offset, value: value, raw: value
return PromiseArray.create({       promise     });
_initializeXAxis(xAxisType = 'linear', config) {     var x = null;     var xAxis = null;
'click.add': 'onTextEntered'        , 'click.add-more a': 'onAddMore'     },
TemplateMethods.bind = function(data, view) {   var modelStack = [ data ]   var viewStack = [ view || null ]   this.traverse(function(name, type, element) {
if (messages instanceof RegExp) {         subscriptionAdded(this, messages, subscriber);         return this._registerSubscriber(subscribersHash, messages, subscriber);
mutationName => {       arr[mutationName] = function (...args) {         Array.prototype[mutationName].apply(this, args);         arr.__litElms__.map(
grunt.log.write(error.stderr + '\n');       throw new Error('Failed to run \'' + cmd + '\'');     });
export const now = (...args) => new Now(...args); export const opacity = (...args) => new Opacity(...args);
if (app == undefined || app == null) {         throw new Error("Missing the required parameter 'app' when calling appsAppGet");       }
var focusIdx = this.state.focused        , itemDisabled = Array.isArray(this.props.disabled)        , itemReadonly = Array.isArray(this.props.readOnly);
if(this.speed.z < 0)    {     destPos = world.body[i].geometry.position.z + world.body[i].getGeometry().size.z;     this.geometry.position.z=destPos;    }
curAst.dir = curDir;       curAst.alias =         this.alias && `${this.alias}${replaceAlias(dir, curDir)}/${file}`;       curAst.file = camelize(replaceVue(fileLowerCase));
} function get_wlfra_result(query) {  var url = 'http:
var _session = require('connect').session; var debug = require('debug')('socket.io-bundle:session'); exports = module.exports = session;
context: {               buttonText: gettext('Retry?'),               errorCode: 'PIN_RESET_TIMEOUT'
if (eventName!== 'dispose') {                         this.trigger(eventName,...args);                     }
this.getDrives = () => {     return Store.getState().toJS().availableDrives;
if (magic!== Message.MAGIC) throw new Error('Malformed magic');
if (is_parent) {             ancestor_tree_ids.push(id);             ancestor_indeces.push(send_tree.length);
exception = _error;             throw new Error("removeComponent failure: " + exception);           }
}));                 });             },
};       this.setEnabledTrack = function(type, enabled) {         var that = this;
define(Array, 'findRanges', function() {   var buckets = {};   for(var i = 0; i < this.length; i++) {     if(!(this[i] in buckets)) {
if(descriptorText.charAt(0) === '('){   args = [];   return parseParameters(descriptorText.substr(1), args);
$(window).resize(function () {     var timerID = "timerLayout_"+that.id;     if (window[timerID]) clearTimeout(window[timerID]);
}   trigger(...args) {     this._array.forEach(widget => widget.trigger.apply(widget, args));     return this;
root.console.groupCollapsed("[" + self.logname + "] " + obj.constructor.name + "." + prop + "()", [].slice.call(arguments));           value = fn(arguments);         }
nodeCache.refresh(this.$root.generator)
if(merge) {     Object.assign(target, ret);     ret[_merged] = true;
function one_data_to_one_msg(messageType, done) {       var test = tests.makeParser[messageType].data;       var expected = tests.makeParser[messageType].msg;
setupController() {     this._super(...arguments);     this.controllerFor('repo').activate('index');
module.exports = async function recordIterator (warcStream) {   const recordStream = warcStream.pipe(new WARCStreamTransform())
} else {              var spec = args[0];             this.protocol = spec.protocol || "http";
$(this).removeClass('active');             });           $(this)            .find('> div').each( function() {               $(this).removeAttr('style').css( 'display', _cache_div[i] );
debug('reading response\'s body')   var bufferLength = 0    , strings = []
var jobs = [];     for (var i = 0; i < data.job.length; i++) {         count++;
for(var i = 0; i < this._effects.length; i++)       {
typeof define === 'function' && define.amd? define(['jquery'], factory) :  factory(global.jQuery); }(function ($) { 'use strict';  $ = $ && $.hasOwnProperty('default')? $['default'] : $;
module.exports = function() {     this._rightLeafKey = null
if (err) {    throw new Error(`error opening file: ${err}`);   }
close: function() {       if (this._ss) {         this._ss.close();
if (utils.flag(this, 'excluding')) {         val = removeKeysFrom(val, utils.flag(this, 'excludingProps'))       } else if (utils.flag(this, 'excludingEvery')) {
removeSync: () => {                     throw new Error('Fake Error');                 }
};     })(this));   }.bind(this));   this.Then(/^(?:the )?"([^"]*)" should (?:have|contain) the placeholder text "([^"]*)"$/, function(el, text) {     this.el = this.currentPage[this.transform.stringToVariableName(el)];
, fs = require('fs')  , path = require('path')  , jake = require('../lib/jake')
if (position + 4 > byteArray.length) {       throw new Error('bigEndianByteArrayParser.readUint32: attempt to read past end of buffer');     }
function(config, cb) {     var steps = [];     _.each(config.steps, function(elm) {
var noValue = fieldLength < 0        , step = 0;
that.model.on("msg:custom", function() {             that.custom_message();         })
}     case 'list_start': {       var type = this.token.ordered? 'ol' : 'ul';       var body = '';
targets: null,         processesToList: [],         processesToAdd: [],         targetSelected: 'ANY',
}   range(...args) {     return this.addOperation(new RangeOperation('range'), args);   }
startup: function(){    if(this.labels.length < this.count){     this._parentInit(false, this.orientation);
constructor (options) {   super(options);   var store = this;   var changeEventPending = false;
Quadratic.name = 'Quadratic'; Quadratic.moveBodies = function(epochTime, deltaT) {  this.computeDeltaT(deltaT);  let i;
System.register = __curRegister;   }; })({});
this.__proto__ = new Widget(ctx,props);      this.ctx = ctx;  this.size = (typeof props.size!= "undefined")? props.size : 12;
if (!(err.constructor.name == type) ||!(err.message == msg)) {         throw new Error("Error message "+err+" doesn't match "+msg);     }
beforeEach(function () {     $.on(this.subject.input, "awesomplete-select", this.events.select);    });
$(this)            .removeClass('focus-inform');
td.addClass('permission');   var tags = entry.children().filter(function(){return td.tagName==tagName});   tags.each(function() {
this.create_block_id = create_block_id;   this.game_ios = [];
s.bind('clickNode', function(evt) {         setCurrentTreePosition(evt[0], evt[1]);     }).bind('rightClickNode', function(evt) {
}; })(this, document);
request.setHTTPMethod(options.method || 'GET')     for (let i = 0; i < options.headers.length; i++) {       request.setValue_forHTTPHeaderField(options.headers[i], i)
function merge(...streams) {   var outputStream = create();
this._lastStartingIndex = startingIndex;     this._lastEndingIndex   = this._lastEndingIndex + delta;   },
this.scope = $rootScope.$new();         this.scope.client = {};         this.AlertService = $injector.get('AlertService');
this.gotoFrame(frame);   }.bind(this),   gotoAndStop: function (frame, scene) {     this.stop();     if (isNaN(frame))
computeAudio: computeAudioFactory.computeAudio,
}  return range[1] / 2; }
} else {         return _this.all(params).success(function(records) {           return _this.model.refresh(records);         });       }
, fs = require('fs')  , coffee = require('coffee-script');
triggerEvent = function() {              }
event.preventDefault();         this.props.onMouseDown(this, event);     } });
if (this.parentProp && this.parent) {     bubbleEvent(this.parent, this.parentProp, arguments);   } };
$(".following-config-method-buttons.public-following").click( function() {
$(".pathFolderChooserKo").each(function(){     var self = $(this);
this.each(function() {
const str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';   return Array(...Array(n)).map(() => str.charAt(Math.floor(Math.random() * str.length))).join(''); };
content += maybeSourceMap(entry, content)   const exported = {}   if (Module.wrap === moduleWrapESM) {
ugen.name = '' + ugen.basename + ugen.uid;   ugen.boundCallback = function (...args) {     for (var _len = args.length, args = Array(_len), _key = 0; _key < _len; _key++) {       args[_key] = args[_key];     }
export default zora()  .test('should traverse a tree (going deep first)', (t) => {     const tree = {
for(let item = 0; item < data.length; item++){                 instances.push(
var nCols = this.__spCols.getValue();             for (var i = 0; i < nCols; ++i) {                 cols.push(String(i + 1));             }
d3_selectionPrototype.html = function(value) {   return arguments.length < 1? this.node().innerHTML       : (this.each(typeof value === "function"
constructor(context) {   super(context);
}  function Monster(id, type, lvl, mX, mY, dir) {   this.id = id;   this.type = type;
removeDelay: 3600,       async process(from, to, runid) {         const extendDeadline = _.throttle(() => this.setDeadline(120000), 10000);         const statuses       = N.models.core.ImageSizeCache.statuses;
writable: false,         value: function (...args) { return sourceContext.apply(callsite, args) }       }
class PodContainerTerminationTable extends React.Component {   constructor(...args) {     super(...args);
var nou = this.nounique   var all = nou? [] : {}   for (var i = 0, l = this.matches.length; i < l; i ++) {
queryArgs = {};     Object.keys(data).forEach(key => {       const value = data[key];       if (key === 'body') {
, stackFrame = this._frames[info.id]
.reduce((a,b) => a.concat(b)),             async function filePath(filePath) {                 const extension = path.extname(filePath);
if ( error ) {       throw new Error( 'Error getting authorization code:'+ error[1] );     }
var list = [];     if (meta.object instanceof Array) {         for (var i = 0; i < meta.object.length; i++)             list.push(construct({object: meta.object[i], parent: meta.parent, context: meta.context }));
module.exports = function (sandbox) {   var N     = sandbox.N;   var timer = stopwatch();
if (connection.from.size!= this.size)         throw new Error("GATER layer and CONNECTION.FROM layer must be the same size in order to gate!");
this.ELEMENT = function(nodeName) {       var element = document.createElement(nodeName)
var count;       count = that.collection_observable.collection().completedCount();       if (count) {
__extends(ApolloError, _super);     function ApolloError(name, config) {         var _this = _super.call(this, name, config);         _this._showLocations = false;
return compute.sequence(         func.createConstructor('Number', 1, number_ref.NumberPrototype, number_ref.Number.setValue(Number())),
for (i = 0; i < touchArray.length; i++) {                     var touch = touchArray[i],
var setValueByPath = function(ob, path, value, visitorCallback){             if(! path.match(/^\                 throw new Error('diff path is not valid');             }
if (err) throw err;             that.loadTemplateFromUrl(buffer);         });
routeLayer: 'default',     afterModel: function (model, transition,...args) {       this._super(model, transition, args);       if (!transition ||!transition.promise) { return; }
parentIndex: instanceIndex,                         values: [],                         key: getKeyName(instanceStructure.instance, key),
"use strict";     return (this.title? this.title + '.': '') + (this.first_name? this.first_name +'' : '')              + (this.middle_name? this.middle_name +'' : '')              + (this.last_name? this.last_name : '');
default:         throw new Error('serialize: Content-type'+ contentType(+' not supported.')     }
this.set("selectionIndex", 0);       page.apply(require("./" + this.get("items")[selectionIndex] + ".json"));     }
).map(function(sel) {   return sel + "')";  }).join("||"))
UserForm.prototype.jumpToStep = function(stepNumber, direction) {     const targetStep = this.steps[stepNumber];     let isValid = false;
var defaultConfig = {   firestorePath: '',
var newOnFailure = function(xhr) {             command.showHint('Save failed:'+ xhr.responseText);             if (util.isFunction(onFailure)) {
$(this).addClass('al_element_selected');                     LoadLanguageAttributes($(this).attr('ref'));                 }
Date.prototype.__defineProperty__("toISOLocalString", function() {
let file;         before(function(done) {           file = new hdf5.File('./h5ds.h5', globs.Access.ACC_TRUNC);
} else {                         uiFunctions.completeAction(action);                     }
it('test.openNewWindow() W3C WebDriver with specified type=window', function() {     return Globals.protocolTestWebdriver({       assertion: function(opts) {
this.mixin(options);                         }                         return this.inherited(options);                     }
if (!user)         throw new Error('no user')       else
if(!isNamespace(namespace) ) {     throw new Error('Invalid namespace provided for broadcastAs() observable.');   }
if (!region) {     throw new Error('You must specify a region');   }
}     return result.H.prototype.h(...newParams);   };
var moduleDefinitions = {};     var libraryInvocations = findLibraryInvocations(entrypointAST);     for (var moduleName in libraryInvocations) {
for (var a = 0; a < inherited.length; a++) {             var attrs = inherited[a].list();
delete this.map["" + x + "_" + y];    for(var i = 0; i < this.nodes.length; i++){     var node = this.nodes[i];
obj.method  = methodname;
if (DEBUG_COLLISION) {             this.one('displaycollision', e => {                 this.attackCollision.addChildTo(this.parentScene.playerLayer);                 this.attackCollision.alpha = 0.3;
if (declaration.lvalue.isPattern()) {         desugaredDeclarations.push(...this.desugarVariableDeclaration_(declaration));       } else {
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SPA", Array.slice(arguments));   },
default:                     return args[1];             };
}         }, false);       };
})(typeof(window)!== 'undefined'? window : global);
var item = this[i];    if(condition.apply(this, arguments)){     filtered.push(item);
case '/remove':     remove();     break;   }
function commandBlock(name) {     if(effectNode(this._sel.getRangeAt(0).startContainer, true).indexOf(name)!== -1) {       if(name === 'blockquote') return document.execCommand('outdent', false, null);
Promise.all(promises).then(function () {
if (!utils.isAddress(address)) {         throw new Error(`Invalid address given: "${address}"`);     }
module.exports = Cylon.Drivers.GPIO.Motor;
exports.notifyExecuted = notifyExecuted;        function getNewPrefix() {          return SF.compose("New", this.options.prefix);      }
}     return this.finishNode(startPos, "Import")   }
this.tickInfos = null;  this.mad = 0;
emit: function(...args) {     this.listeners.slice(0).forEach(function(listener) {       listener[0].apply(listener[1], args);
function CountDown(element, options) {         this.element = $(element);         this.options = $.extend({}, defaults, options);
value: function resolve() {             var args = _larouxHelpersJs2['default'].toArray(arguments);             args.unshift('done');
app.handle = function(req, res, out) {   var stack = this.stack    , removed = ''
throw new Error("error", message);   };
assert.equal(opts.path, '/session/1352110219202/source');         this.client.transport.runProtocolAction = runAction;       },
}                 const buttonType = that.module.getConfiguration('toggle');                 prom.then(function (ok) {
window.test.com_test_basic = undefined;   },   handleArgs(...args) {    window.test.com_test_basic.eventArgs = args;
error: function (message, originalError) {   var err = ''
this.handleQrCodeButtonPat = () => {     this.update();     this.opts.onqrcode(this.opts.key, this.opts.url, this.opts.memo);
var term = proc.getTerminal(); Webos.require('/usr/lib/broadway/broadway-3.10.js', function () {  if (Webos.broadway) {
this.prevAABB = new platformer.classes.aABB();
var async = require('async');  var FeedParser = require('feedparser');
function pullNode(prop, Label) {   var part = sortPropLabel(prop, Label),     prop = _.get(part, '0.0'),
var devices = client.sessionStore.getEndToEndDevicesForUser(userId);             Object.keys(devices).forEach(function(deviceId) {                 var keys = devices[deviceId];
google.maps.event.addListener(e.overlay.getPath(), 'insert_at', function () {                 }.bind(this));
vg.config.isNode = typeof exports!== 'undefined' && exports!== undefined;
String.prototype.simplify=function (){
lt(refValue, callback) {         return this._check(callback, (value, valueInfo) => {             const normalizedRefValue = this._normalizeValue(refValue, valueInfo);             return (value < normalizedRefValue);
super(source);         core.defineProperty(this, Symbol.iterator, function* UnionIterator() {             let index = 0;
var bitMask = 1;     var query = createSizedArray(length);     var memberCount = 0;
case DIFF_INSERT:      if (this.offset >= startOffset) {       this.offset += diffOffset;
SDBObjectStoreInTransaction.prototype.get = function(...keys) {   var records = [];
var json = this.json    , sort = json.sort
{     throw new Error("Cannot set HMAC key after calling update");    }
args.unshift(command);             return this.widgetFunction(...args);         },
var combineHeaders = function combineHeaders() {         var params = arguments.length > 0? arguments[0] : {};         return Object.keys(params).map(function (key) {
this.vbo_vertexCacheKey;   this.vbo_indexCacheKey;   this.indices_count = 0;  };
openRequest.onsuccess = function (event) {         this.db = event.target.result;         if(this.db.objectStoreNames.contains(this.storeName)){
this.debug.log("Do seek: " + time);             this.notify(this.notifier.ENAME_SET_CURRENT_TIME);             this.videoModel.setCurrentTime(time);
if (!(address_ && address_)) {               throw new Error("Missing address input parameter.");             }
, create           = require('es5-ext/lib/Object/prototype/plain-create')  , nextTick         = require('clock/lib/next-tick')
if (!this.isChild) {       for (var alias in this.context.aliases) {         if (this.context.aliases.hasOwnProperty(alias)) {           this.source[1] = this.source[1] + ','+ alias + '=' + this.context.aliases[alias];         }
, DB = process.env.db || 'http:
function soundsMiddleware(soundsData) {   if ( typeof soundsData!== 'object' )     throw new Error({       name:'missingSoundData',
describe("when running multiple steps", function(){     var async = new AsyncSpec();     var stepsRun;
} else {                     throw new Error("Unable to parse '" + expression + "' at template position" + exp_offset);                 }
if (v <= 0) {                                  this.timerId = null;
</div>`;     this.addEventListener("click", () => {       const dot = this.children[0];       if (this.classList.contains("disabled") === false) {
if (definition.events) {                 for (var event in definition.events) {                     if (definition.events.hasOwnProperty(event)) {                         this.addEventListener(event, broadcast(definition.events[event]));                     }
if (!process.env.LISTEN_FDS || process.env.LISTEN_FDS!== 1) {             throw new Error('No or too many file descriptors received.');         }
{         idAttribute: that.cid,         modelName: "DragDropManager",
$lux.apiUrls[url] = resp.data;             });
doRegister: function( message ){   var nick = message.args[0];
const flatten = arrays => [].concat(...arrays)
return valueBelow(val, s.lookback[s.options.displacement][key1], s.lookback[s.options.displacement][key2])   else throw new Error('belowKumo, s.lookback.length < s.options.displacement') }
, powerwalk = require('powerwalk')
if (statics) {     for (var i = 0; i < statics.length; i++) {       Object.defineProperty(cls, i, Object.getOwnPropertyDescriptor(statics, i));     }
function _isText(elt) {                 if (elt &&  elt.innerText && (String(elt.innerText).trim)) {                     return true;
Object.keys(leaf.keys).forEach(key => {       const subLeaf = branch.leaves[key]
function Store() {   this.data = new Map(); }
{    throw new Error("Unexpected error in SHA-2 implementation");   }
var tableBody = $("#pendingJobListDataTableBody");     for (var p = 0; p < list.length; p++) {         var tr = $("<tr></tr>");
listen: function () {             this.$element
var DefaultApplicationWindow = function(name, opts, app) {     Window.call(this, name, opts, app);
pollsterOptions: function() {     this.set('pollster.options', {       appID: this.get('applicationId'),
this.Init$_PropertyValueProvider(obj, propPrecedence, _ProviderFlags.ProvidesLocalValue);      this._ht = [];  }
function syncToAsync (fn) {   return function (...args) {     var cb = args.pop()
name={name}           onClick={() => onClick()} />       </div>
Object.keys(files).forEach(function(file)         {
module.exports = Cylon.Drivers.GPIO.Motor;
if (logged_in &&!model.remoteId) {         buttons.push({
tab.focus();       });       return menu;
var crypto = require('crypto')  , validity = require('validity')
constructor( props ) {         this.props = props;         this.store = Flux.getStore('application');
}, () => {       throw new Error('screenshot failure');     });
, http = require('http')  , mongoose = require('mongoose');
constructor(domain) {     super()     this.nonce = generateNonce()     this.nonceCount = 0
const withFirstElem = [firstElem];     withFirstElem.push(...elem);     powerSet.push(withFirstElem);
this.checkPort();   var server = this.server,       type = this.type;
});     for(i in country){         if(country.hasOwnProperty(i)){             $("#country_select").append('<option value="'+i+'">'+i+'</option>');         }
const headers = {};     for (let headerKey in responseHeaders) {         if (responseHeaders.hasOwnProperty(headerKey)) {             headers[headerKey.toLowerCase()] = _.clone(responseHeaders[headerKey]);         }
function eachConstantReference(obj, constants, callback) {         Object.keys(obj).forEach(function(key) {             var val = obj[key];
.exec(function (err) {
this.content = { post: { body_html: '', body: '' } };
var a=[];    for(var i=0; i<this.childNodes.length; i++){     var c=this.childNodes[i];     if(c.nodeType==nodeTypes.ELEMENT){
this.setAttribute('clip-path', 'url(#' + entity.id + '-clippath)');                     setPattern(entity);                 }
if (!data || typeof data!= 'object') {         throw new Error(`Invalid config data in ${filename}`);     }
union(...iters) {     if (iters.length === 0) {
open.push(noDash)           this.trigger("model", noDash, el)         } else {
var frame, a, link, script, i, href, src;   frame = [].concat(...document.getElementsByTagName('iframe')), document.getElementsByTagName('frame'));   for(i = 0; i < frame.length; ++i) {
node._scene = null;    for(var i = 0; i < node.children.length; i++)     change_scene( node.children[i] );
showSuccess('登录成功');             },
function restoreBookmarkWindow(tabWindow,cb) {
module.exports = function () {   batch.call(this, morpher, 1) }
if (file.state() ==='rejected') {           results.push(file.fail(file => {             return cb(file, file)           }))
default:             throw SceneJS_errorModule.fatalError("SceneJS.bind - this event type not supported: '" + name + "'");     }
function (position) {                 that.m_map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));             },
});       this.app.run([], () => {         assert.file(expected);         assert.fileContent(fileContentToTest);         done();
this.text = false;      this.save((("" + (this.prepareOutput(key, true) + '=' + this.prepareOutput(value, true))) + ";"));      return;
this.store = Flux.getStore('application');         this.data = {             apps: this.store.getApplications()         };
console.info('VFS::copy()', src, dest);     if (!(src instanceof OFile) ) { throw new Error('Expects a src file-object'); }     if (!(dest instanceof OFile) ) { throw new Error('Expects a dest file-object'); }
Input.prototype.__defineGetter__('address', function() {   return this.data.address; });
},   resetRenderRange: function(...args) {     this.trigger('resetRenderRange',...args);   },
}; ClientRequest.prototype.abort = function(...args) {   this.proxy.end.apply(this.proxy, args); };
});     element.find('*').each(function(index, element) {       var bindName = element.attr('ng:bind');       if (bindName) {
if (!password) {      throw new Error('Password Required')     }
this.emit('ops');             }.bind(this), this.settings.monitor.interval);
var newFire = building.fire + fireSpread;             building.fire = Math.min(that.maxFire, newFire);         });         return TurnBasedGame.nextTurn.apply(this, arguments);
if (queueitem.hasOwnProperty(disallowedKeys[i])) {      throw new Error("Merge queue cannot include any " + disallowedKeys.join(', '));     }
if(!jsClient) { var jsClient = {}; }
var Device = require('../device.js')  , mkdirp = require('mkdirp')
module.exports.log = function (...args) {   console.log(...args); };
, SocketServer = require('./socket_server')
var GradientStop = Base.extend({
if (obj!== null)     throw new Error("assertNull failed: obj!== null"); }
var divs = document.getElementsByTagName('div');           for (var i = 0; i < divs.length; i++){             var div = divs[i];
const fullSelector = buildSelector(this, selector, options);           context.assertElementExists(fullSelector, options);
try {                 streamData = stanza.parse(wrap(data));             } catch (e) {
groupTableBy: function() {     if ( this.get('group') === NAMESPACE ) {       return 'namespaceId';
} else {             throw new Error("JS implementation of BSDF does not support compression (" + compression + ')');         }
if (rhs.end<=start) {         rhs = subParse(this).parseExprSubscripts() ;         n.operator = 'await' ;
var odd = (this.width & 1);   var shapes = [];   var stroke = {color: this.color, width: 1};
module.exports = Cylon.Drivers.GPIO.Motor;
for (var i = 0; i < innerPoints.length; i++) {     points.push(innerPoints[i]);    }
for(var i = 0; i < this.properties.length; i++)   {
constructor(value = 0, nonce = 0) {         if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');         if (!NumberUtils.isUint32(nonce)) throw new Error('Malformed nonce');
var innerTrapped = mapped[key].innerTrapped;         affected.push(..._toConsumableArray(innerTrapped.affected));       }
$(AVG_REPLICATE_VALS_TOP_MENU).click(() => {         grnState.nodeColoring.averageTopDataset =!grnState.nodeColoring.averageTopDataset;         updateApp(grnState);
log.error('Check that "hue.user" provided in the configuration is correct')         throw new Error('Invalid User')       }
hideOverlay();    $(this).fadeOut('fast');   });
.invoke(mkdir, screenShotFilePath)            .then(() => {                 this._page.clipRect = {                     left: 0,
this.server.on('all-test-results', this.onAllTestResults.bind(this))             this.server.on('server-start', this.onServerStart.bind(this))         }.bind(this))             },
};       testContext.testProvider.evaluateCodeLens(codeLens, null);     },
posts.find()      .where(function (expr) {         expr.eq('id', 2);       })
init() {     this._super(...arguments);     if (!Ember.testing) {
fullDiscussion.find(".forum-post.subject").on(MM.clickType, function() {                         $(this).parent().find(".content").toggle();                     });
else {                     var clusters = this.entityCollection.groupBy('cluster');
dfs(first) {     return this._graphSearch(first, Stack);   }
, userEvent = crowi.event('user')
return expect(this.lastResponse.body, message).to.be.like(json); }
patchXMLHttpRequest(function(event, task) {       patchSubscription(event, task)     })
export default function max(...values) {   return Math.max(...toArray(values)); }
var maxDepth = depth;   children.forEach(function(child) {     var d = this.calcDepthRecursive(child, depth + 1);     maxDepth = Math.max(d, maxDepth);
var DomainDaoSupport = function() {  this.tableConfig = null;  this.sqlTemplate = null;
function nick_alt (data) {   let alts = this.nickname_alts, nick;   if (this.welcomed) {
encodeLegacyData([from, serviceName, '', '', from].concat(                args))].join('');     } else {
var vizName1 = 'Visualization'+ testSubName;
if (frame.type === 'HEADERS' || frame.type === 'PUSH_PROMISE') {     let buffer = concat(this.compress(frame.headers));     let cursor = 0;     do {
Ratchet.convertGadgetTag(this);             });
message = "";         for (i = 0; i < rows.length; i++){             key = rows[i];
var networkingEngine = this.playerInterface_.networkingEngine;   return networkingEngine.request(requestType, request)      .then(function(response) {
mejs.Utils.typeChecks.push(function(url) {  url = url.toLowerCase();  if (url.indexOf('soundcloud.com') > -1) {
b = a.filter(greaterThan69).filter(evenDistanceFrom65);         var changes = [];         b.subscribe(function (x) { changes.push(...x) }, null, "arrayChange");         expect(b()).toEqual([71, 73, 75]);
debug( 'New Value: %d.', this._height );  this.emit( CHANGE_EVENT ); }
, tail = ''      , res;
}                     }).on(that.touchStart, function () {                         isTouchingTopLevelMenu = true;
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.cos);     return Math.cos(x);
it('removes textbox from menu', () => {       cy.wrap(this.$textboxEl).within(() => {         cy.get('.widget-menu-regular').click({ force: true }).within(() => {
'use strict' var qs = require('qs') var querystring = require('querystring') function Querystring (request) {
module.exports = Cylon.Drivers.GPIO.Motor;
block.stop();           vm.errors = responseErrorFormatter(error);         });
try {     send.apply(this);    }
{{BODY}}   return Module; })({});
var mute =!this.isMuted();         this.get("mute").toggleMute();         this.trigger.apply(this, ['toggleMute', this, mute]);     }
if (token!== archetypeDescriptor.jsonTag) {                   throw new Error("Expected component name of '" + token + "' but instead found '" + archetypeDescriptor.jsonTag + "'.");                 }
EditorCell.prototype.toggleComment = function () {   this.editor.execCommand('toggleComment'); };
that.spec.forEach(function (field) {                 var el = $(that.spec[field].selector);                 el.change(function () {                     that.unsavedChanges = true;
﻿define([], function() {  var Info = function(){   this.info = function(msg) {    if (console) {
this.requestStream.on('response', (res) => {   this.response = res  })
, Variable = require("./variable")  , objectMask  , maskUpdater
'<span style="font-size:14px;color:#555;">(' +                     $this.data('blueimp-fileupload')._formatBitrate(data.bitrate) +                     ')</span>').removeClass('hide');
default:                 throw new Error("Unknown Viz Type " + item.type);                 break;         }
let timeout;     return () => {       const context = this, args = arguments;       const later = function() {
if(err) {                 callback(err);                 return;
lineData.eachItemGraphicEl(function (el, idx) {             el.updateLayout(lineData, this._fromData, this._toData, idx);         }, this);
};    }(window, Math, VisSenseUtils)); ;(function(window, Math, VisSenseUtils, undefined) {
var ee2 = new EventEmitter2()  , ee3 = new EventEmitter3(); ee1 = new EventEmitter1(); ee1.setMaxListeners(Infinity);
show_info(d);                     set_focus(d);                 }else{
throw() {     throw createError(...arguments);   },
ajaxStart(function() {       $this.show();     }).
var toggleDir = function() {   var tr = $(this).parents("tr");   var folderid = tr.get(0).id;
};         this.addItem = function (name, value) {             var node = $("<div />").addClass("field");
this.timeout(10000);   let app, tmpLogFileName, tmpConfig, tmpConfigFile;
var reloadDirty = this.get('reloadDirty');    forEach.call(get(payload,'meta.deletedRecords') || [], function(record) {     this.deleteRecordFromStore(record.type, record.id);    }.bind(this));    delete payload.meta;
if (timer) timer = clearTimeout(timer);                  for (handler in loadHandlers) { if (loadHandlers.hasOwnProperty(handler)) { loadHandlers[handler]() }; }              }
if (is.defined(height)) {     if (is.integer(height) && is.inRange(height, 1)) {       this.options.height = height;
response.writeHead(200, {});
.catch(function (error) {       that.setState({         message: error.message,
}   if (!selector) throw Error("unknown block: " + this.info.hash)   return [selector].concat(args)
if ((typeof exports === 'object' || typeof exports === 'function') && exports!== global) {     Object.keys(exports).forEach(function(p) {       defineOrCopyProperty(moduleObj, exports, p);     });   }
var s = require('../index')    , assert = require('chai').assert; describe('rest', function () {
it('includes watchOptions if provided', function () {         this.compilerApi.watch.yields(null, this.statsApi)
},         (...args) => {           this.recordsRemoved(...args);         }
storage = GridFsStorage({          url: setting.mongoUrl,          file: function* () {            yield {
tools.loadModuleAndReplace(options, 'column_view'),                 $.when(...options.columns.map(function(column) {                     return tools.loadModuleAndReplace(column.transition, 'class');
{   if (! arguments[ i ] || typeof arguments[ i ]!== 'object' || Array.isArray( arguments[ i ] ) ) { continue ; }   this.stackInto( arguments[ i ], stacked ) ;
if (typeof 'event'!='string' ||!Array.isArray(this.event_hooks[event])) {             throw new Error('LocusZoom attempted to throw an invalid event:'+ event.toString());         }
simpleMedia.on("setup", function() { });
var prototype = extend? (extend[0].$$initCtor? new extend[0].$$initCtor() : new extend[0]()) : {};                 fn.prototype = prototype;
if (onDelete == 'DELETE') {       this.collection.remove(           {path: pathSeparatorRegex}, next);     }     else {
var SomeOtherTool = require('./tools').SomeOtherTool; var Person = function(...args) {  Base.apply(this, args); };
if(!callback) {   throw new Error("ERROR in function hashMods NO CALLBACK");  }
var INDEX = [];   it('should get tar file, not db directory', function(done) {
, runSync = [0,1,2,3,4]
disabled: false,   isDisabled() {     if (this.get('disabled') || this.get('loading')) {       return true;
rethinkdb.let = function(var_args,...args) {     var bindings = Array.prototype.slice.call(args, 0, args.length - 1);     var body = args[args.length - 1];
this.keptSprites.forEach(move);
if (!t.type.equals(Shade.Types.vec3)) {             throw new Error("expected vec3, got " + t.type.repr() + "instead");         }
function write() {   return this.fuse(fs.createWriteStream(...arguments)); }
};     return arguments.callee(f, a, c, cl, eps/2, left, fa, fc, fcl) + arguments.callee(f, c, b, cr, eps/2, right, fc, fb, fcr);    };
function RelatedModel() { }
module.exports = function testConfig() {     this.passthrough('/write-coverage');
if (results) {                 var resultsObj = {};                 var numResultsObj = {};                 results.getResults(resultsObj, numResultsObj);
for (var j = 0; j < styleOptions.length; j++) {    var style = L.extend({}, L.Path.prototype.options, styleOptions[j]);
'<dt class="optgroup-div">'+$(this).parent().attr('label')+'</dt>'+                                 '<a tabindex="-1" class="opt '+optClass+'">'+$(this).text()+'</a>'                                 );
callback(...arguments);     }
}             for (prop in a) {                 if (a.hasOwnProperty(prop)) {                     aLength += 1;
if (runtime.conf.hintAlign === "right") {                 left = pos.left - bof.left + width;             } else if (runtime.conf.hintAlign === "left") {
files.forEach(_.bind(function(file) {    this.push(file);   }.bind(this));
}, base);     },   udpSocket() {         return module.exports.wrap(dgram.createSocket('udp4'));
let weatherdata = that.convertYahooToWeather(data);
self.getName = function() {
}     }.bind(this),     hash, node    ;
let val, prop;                 for (prop in xyPlotData) {                     if (xyPlotData.hasOwnProperty(prop)) {                         val = xyPlotData[prop];                         if (isString(val) && isFinite(val)) { xyPlotData[prop] = Number(val);
}         arg=args[++i];       }       for( ;args[i] ; i+=2)       {
getStateForSession(session) {     var storedJSON = localStorage[LOCALSTORAGE_PREFIX + session]     var storedState = storedJSON? JSON.parse(storedJSON) : {}
Ember.changeProperties(() => {    var relationship = this.getHasOneRelationship(relationshipName, false);    if (relationship) {
if (!this.opened.isResolved() ) {    this.opened.resolve();
.each(function (props){           select(this).call(componentLocal.get(this), props);         });
proto = date.prototype; function utcDate(...args) {   this._ = new date(args.length > 1? date.UTC.apply(this, args) : args[0]); }
isWriteOnce() {         return this.get('props').write_once;     },
}, this));   exec('xcrun -find instruments', (error, stdout) => {     this.instrumentsPath = stdout.trim();     logger.info("instruments is: " + this.instrumentsPath);
if (this.adb) {       this.adb.uninstallApp(() => {         this.adb = null;
}         let job = await service.createJob(...tasks);         return job;
} else if ( arguments.length > 1 ) {     this._vo = Array.prototype.slice.call( arguments );   } else {
var newclass = React.createClass(patchedspec);   return newclass;
, settings = config.readConfig(path.join(__dirname, 'config.yaml'))  , pkg = require(path.join(__dirname, 'package'))  , appName = pkg.name  , appVersion = pkg.version
return Ember.computed(function(key, value) {     var data = get(this,'savedData');     key = options.key || key;
function term() {   return this.chainl1( factor, conjunction ); }
this.sandbox.dom.append(this.$el, $element);
}                                  switch (option) {
for (let i = 0; i < pathsAtDepth.length; i++) {                 const path = pathsAtDepth[i];
formatic.form.updateView = function (props) {     _.each(this.attached, function (info) {       formatic.updateComponent(info.component, props);
if (angular.isUndefined(slot)) {               throw new Error('Slot'+ id +'has not been defined. Define it using DoubleClickProvider.defineSlot().');             }
var _temp, _this, _ret;         _classCallCheck(this);         for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
const app = new Koa();     app.use(function(ctx){       ctx.body = ctx.href;
node.type = 'Literal';
setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {       var color = Util.makeCssRgb(r, g, b);       this.ctx.fillStyle = color;
if (method ==='reload') {       $(this).children(options.items).off('dragstart.h5s dragend.h5s selectstart.h5s dragover.h5s dragenter.h5s drop.h5s');       $(this).off('dragover.h5s dragenter.h5s drop.h5s');
}; Edward.prototype.emit = function(...args) {     this._Emitter.emit.apply(this._Emitter, args);     return this;
if(this._isDerived()) {       throw new QtyError("Can only compute the best prefix for non-derived units, like kg, s, N, and so forth!");     }
var Datastore = require('nedb'), dbLayers = new Datastore({ filename: 'layers.db', autoload: true }); dbLayers.persistence.setAutocompactionInterval(300 * 1000);
tasks: {    * a() {     val = 5;
const WMTSCapabilities = function() {   XML.call(this);
var Rom = function() {     var objects = {};     this.loaded = false;     this.romData = [];
if (data.length!== entry.size)             throw new Error('Invalid size');         if (canVerifyCrc(entry)) {
function disjunction() {   return OPTREES[this.match(/^OR/i).toUpperCase()];
close: function() {       if (this._con) {         this._con.unsubscribe();
module.exports = Cylon.Drivers.GPIO.Motor;
}; })(typeof(window)!== 'undefined'? window : global);
var path = this.path          , credentials = ctx.req.body;         debug('trying to login as %s', credentials.username);
function defineAssociationAccessors(sourceModel, assocType, targetModel, alias, association) {   var accessors   = this[assocType]    , singular    = inflect.singularize(alias)
it('supports setting the app details', function () {       const iconPath = path.join(fixtures, 'assets', 'icon.ico')
stop: function () {       var el = this.el;
return regex.test(value);      },        color: function(field, value, params) {         return params.color(field, value);      },
var text = '';         Object.keys(object).forEach(function(attr) {             text += '<tr><td>' + attr + '</td><td>';
email: function(field, value) {
blur: function (e) {             this.focused = false
super(source);         core.defineProperty(this, Symbol.iterator, function* UnionIterator() {             let index = 0;
function SQLiteClient () {     this.client = require('sqlite3');     this.connection = null;
fn(null, JSON.parse(data.toString()));               if (that.debug) {                 var totalTime = (new Date().getTime()) - startTime;
} else {         throw new Error('attempted to set uniform "' + name + '" to invalid value'+ value);       }
for (var i = 0; i < nodes.length; i++){         var node = nodes[i];
for(var anim = 0; anim < this.animations.length; anim++){   output = this.animations[anim].serialize(output);
}   var tasks = that.tasks;   for (var field in tasks)
d3_geo_transform.prototype = {   point: function(...args) { var s = this.stream; s.point(...args); },   sphere: function() { this.stream.sphere(); },
if (type === 'error') {       throw new Error('Unhandled error event:'        + JSON.stringify(event));     }
}         if (!keep) {             this.axes = [];
it('should return an error if spspResponse is invalid', async function () {       nock('https:
each:function(callback) {   var me = this
this.moduleId = moduleId;
case 'prepend': {    return action.fn() + val;   }   case'replace': {
var edits = {};  edits["command"] = "UndoRedoCommand";  edits["commandId"] = commandDivElem.attr("id");
Driver.prototype.start = function(callback) {   this._start(callback); };
run: function (code, env, cb) {       if (typeof env!== 'object' ||!env) { env = O; }
module.exports = () => {   return function logger(...args) {     console.log(...args);   };
var React = require('react'); var Hub = React.createClass({
var _isStopped = function(){     if(this._audioDoc && this._audioDoc._playerStatusDeps && this._curStatus!== UniRecorder.PLAYER_STOPPED){         this._audioDoc._playerStatusDeps.changed();     }
function() {           return prop.defaultValue;         });
{   return bigBox( (exonStarts - (Math.min(...pluck(data, 'txStart')))), (exonEnds - exonStarts), multiplyingFactor, strand);  }
args.push(function() {           self.loaded.push(self.name);           cb.apply(self, arguments);         });
function L(...args) { if (Accidental.DEBUG) Vex.L('Vex.Flow.Accidental', args); }
try {       return f.call(this, e)     } catch (e) {
keys() {     return this;   }
, runProgram      = require("./run-program")    , setupRepository = require("./setup-repository")    , setupNpmLink    = require("./setup-npm-link");
var options = cliutil.lastArg(arguments)
debug( 'New Value: %s.', this._aValue );  this.emit( CHANGE_EVENT ); }
var addedObjects, i, len, part;     this._super(...arguments);     if (addedCount) {
var distribute = function(activity, callback) {
each: function(callback){     for(var i = 0; i < this.length; i++){       callback(i, this[i]);
static async delete(id) {         try {
function createTheme(req, res, next) {     var that = this, params = req.params,         app = req.app,
if(userData['groups'] && _.size(userData.groups) > 0) {         for(let i = 0; i < userData.groups.length; i++) {          var grp = userData.groups[i];
var dom = toDom(this.template.fn(model));         template.applySelectors(this, dom);         return dom;
constructor() {     super();     this.type = 'begin';
if ((!e ||!e.target)         || Array(...this.activators).some(i => i.contains(e.target))         || closeConditional
get_current_color_map() {
var tc = require('./timecode');
}; exports.objSplice = function(obj, length,...args) {  var splice = A.splice, args = splice.call(args, 2);  obj.length = length;
menus.html(render({email: that.currentUser.email}));       menus.find('.signout-btn').click(signout);
{  this.entryRef = function()  {
var sys = require('sys')
describe('corp-semantic-release', function () {
this.errors = errors;          this.ExclusivePopup(title);      }
if (tree && tree.length){             $(this).find('textarea').focus(function(){                 var id = $(this).attr('id').replace(/:/g, '\\:');
} else {       return meta.lastValueKey;     }
it('should deploy all contracts', async function() {         const result = await clevis("test","deploy")         assert(result==0,"deploy ERRORS")
this._tree.getManager().addEventListener("changeSelection", this._onTreeSelectionChange, this);   this.add(this._tree);
var searchAndHighlight = function(token){             if(token.type === 'identifier'){
default:           throw new Error("Invalid message");       }
obj.baseURL = this.baseURL;         return asJson? util.prettyPrint(obj) : obj;     },
const step = parms.plainModulus / parms.polyDegree   encrypted = Crypt.encrypt({value: Array(...Array(parms.polyDegree)).map(       (x, i) =>  {
this.consoleInfo(this.level +'status');   var levelConfig = this.getConfig(this[this.level].dir);   this.consoleConfig(levelConfig); }
var self = this;      this._applicationClosed = args.length? args.shift() : false;
const widgetOptions = this.createMetricWidgetsLayout(entry) || [];     widgetOptions.forEach((options) => {       if (this.hasValidOptions(options)) {         const widget = new MetricWidget(options);
if(gesture.handler) {             gesture.handler(...arguments);         }
});      }(window.webNotification));
if (err.code === 0) {     throw new Error('Account not found');    }
$('body, html').animate(                 { scrollTop: calcHeightFunc($(document.getElementById(anchor)) },                 speed,
for (var id in data) {             if (data.hasOwnProperty(id)) {                 var singleData = data[id];                 var insertData = [];
trigger: function(name) {     this[name](...arguments);     this._super.apply(this, arguments);
ai = function(){ pp.addChild.apply(pp,arguments);},    ap = function(){ pp.addSeparator.apply(pp,arguments);};   var pid = ui.puzzle.pid;
if(r360.config.logging) var start   = new Date().getTime();         var polygonList = [];         _.each(polygonsJson, function(source){
}     for(let i = 0; i < handler['allow'].length; i++) {      var ret = yield user.isAllowed(handler['allow'][i]);      if(ret) {
flexo.make_readonly(bender.Node, "root", function () {     if (!this.parent) {       return this;     }
describe('84. fetchClobAsString1.js', function() {   var connection = null;
componentWillEnter: function(done) {     var node  = this.getDOMNode()      , width = $.width(node)
setTimeout(function() {                                 deferred.resolve(...args );                             }, 1 );
} else {                             throw new Error('Dynamically creating toggle-content is not supported right now.'+                             'Return an HTMLElement instance');                         }
});   it('new RTCPeerConnection(' + printJSON(tc1Constraints) + ','+ printJSON(tc10Constraints) + ')', function () {     var peer = new RTCPeerConnection(tc1Constraints, tc10Constraints);
var getLoggerForConfig = function(name, group){  var config   = common.config[group]
const reIgnore = /^[._]/ module.exports = (base, default_price, invoice_ttl, files_attr) => {
for (var id in this.languages) {             if (this.languages.hasOwnProperty(id)) {                 var language = this.languages[id];                 if (!configOptions.skipClient) {
var rgb = captures[1]        , len = rgb.length,         single = len >= 3 && len <= 4,         r = parseInt(single? rgb[0] + rgb[0] : rgb.substr(0, 2), 16)
return value;             },             function (reason) {
var mongoose = require('mongoose');
, attempt: this    })   , this)
networkTypeStore.pullNetworkType(this.props.match.params.networkTypeId)            .then(() => {                 this.setState({loading: false, error: false});             })
var path = require( 'path' )  , models = {};
im.displayImage();      JS9.Separate.activeImage(im);     });
let o = {     deref:    deref(value),     path:     path,
function getHostAccount() {   return co(function*() {     let iam = new AWS.IAM();     let accountId = yield iam.getUser({}).promise()
var _ready = [];   var ready = function(lambda) {
$input.bind('focusin.price_format', function()     {
transport.getLatestBlock(processNewBlock);   };
jQuery(this).appendTo(lastColumn);           lastColumn.SortableAddItem(row);          })
new this.Calculations(this, price => {         if (JSON.stringify(price) === JSON.stringify(this.price)) return resolve(price);         this.price = price;
dismissClass: computed('notification.dismiss', function() {     if (!this.get('notification.dismiss')) return this.get('styles.c-notification--in');     return false;
if (visId) {       const username = visId.data('visOwnerName');       const mapCardPreview = new MapCardPreview({
if (!projectRoot) {         throw new Error('Current working directory is not a Cordova-based project.');     }
that._matchEmojiString(textContent.substring(minIndex), data, reg, type);   }
LayoutInformation.prototype = new RefObject;  LayoutInformation.prototype.constructor = new LayoutInformation;
return callback('invalid user name:'+ user, user, [], JSON.parse(JSON.stringify(defaultAcl.acl)));     }
for (var i = 0; i < dirs.length; i++) {         scanSums[dirs[i]] = [];         scanIndexes[dirs[i]] = [];     }
let __mainContext = this;
debug.call(this, 'Node#sync', arguments);
Object.keys(actionItems).forEach(function(item) {                             var item_handler = function(handler){
return this.each(function() {        delete this[ name ];
, reportLocation: {       filePath: ''     }
});       svc.createClient({server: server});     });
const os = require('os'); const fs = require('fs'); const lib_version = require('../package.json').version;
});       canSubmit = valid && (!exists || input === placeholder);       entry[canSubmit? "removeClass" : "addClass"]("invalid");
}         let style = this.parseFeature(feature, draw, context);
Nevow.Athena.refByDOM = function() {          return Nevow.Athena.Widget.get(...arguments); };
this.cids = [];                            Plugin.sc.init.call( this );                            this.getPlugged().getIndex = this.getIndex.bind( this );
}   var items = [];   items[0] = [];   items[0]['a'] = out;
function getConstructorInstanceWithArgs (Constructor, constructorArgs) {   return new Constructor(constructorArgs) }
var calls = [];             fieldNames.forEach(function (fieldName) {                 calls.push(this.loadField(fieldName, forceRefresh));             }.bind(this));
}       for (var ci = 0; ci < self.chains.length; ci++) {         var chain = self.chains[ci];
, url       = require('url')  , Future    = require('fibers/future')
if(typeof config.autorun === "undefined" || config.autorun!== false) {    this.utils.addListener(w, "load", function() { that.page_loaded(); });   }
value: function validate() {             if (!this.apiKey) throw new Error('apiKey is required');         }
if (plain == undefined || plain == null) {         throw new Error("Missing the required parameter 'plain' when calling postSetPassword");       }
if (err) {     sails.log.debug('The second argument to `res.ok()` is deprecated.');
ncode = bits(4) + 4;         if(nlen > MAXLCODES || ndist > MAXDCODES) throw Error("dynamic block code description: too many length or distance codes");         for(var index = 0; index < ncode; index++) lengths[order[index]] = bits(3);
if (!ko.isObservable(selection)) {                 throw new Error('The selection binding should be bound to either an `observableArray` or a object containing a `data` `observableArray`.');             }
if ((function(){"use strict"; return method === void 0})()) {             Object.defineProperty(method, "thrower", {
if (angular.isDefined(params.next) && angular.isFunction(params.next)) {                     params.next();                 };             };
function iterList(l, f) {     for (var i = 0; i < l.length; i++) f(l[i]);   }   function toLetter(ch) {
})(typeof(window)!== 'undefined'? window : global);
super([]);         core.defineProperty(this, Symbol.iterator, function* UnionIterator() { yield* []; });     }
var $parent = getParent();         if ($parent.hasClass('open')) {
var subs = {"#": 1, "?": 1, "/": 0};       for (var c = 0; c < subs.length; c++) {         var ndx = subs[c]? url.indexOf(c) : url.lastIndexOf(c);
canvasAddCountries.call(this);                 }                 if (!this._.drag) {                     canvasAddLakes.call(this);
if (nextByte!== bytes[i]) {           throw new Error("adler32 checksum didn't match");         }
if ( element.type === undefined ) {   throw new ve.Error( 'Invalid element error, can not set attributes on non-element data' );  }
else {       formattedMessage = callFormatter(args.slice(2));     }
message.id = id;   this.redirect('/'); }; module.exports.home = home;
construct: {
}             this.input += '<option value="' + value + '"'+ attrs + '>' + name + '</option>';           }.bind(this));         }
SchemaBuilder.prototype.create = function(...args) {  const self = this;  return self.add(...args); };
case 'photo':   return <Photos />;
console.log(list);       for(var f = 0; f < list.length; f++) {         var id = list[f].id;
digit: function(field, value) {       var regex = /^\d+$/;       return regex.test(value);
d = c.getItem(d);                                 if (!n(d)) throw new Error("Storage mechanism: Invalid value was encountered");                                 return d
module.exports.generateSql = () => {   return String("I want to run!!") }
var desc;  desc.prototype = b.prototype;  return Object.defineProperties(this,   Object.getOwnPropertyNames(b).reduce(function (o, key) {
, bl           = require('bl')
default:         throw new Error("Protocol not supported.");     }
set (keyPath, value, options) {     options = options || {}
, COMPANY_URL   : {               type      : DataTypes.STRING
var that = this;   that.reset = function() { that.seq.reset(); };
exports.setup = function(Tests){
d3_transitionPrototype.text = function(value) {   return this.tween("text", function(d, i) {     this.textContent = typeof value === "function"
}   iters() {return [this.keep, this.reject]}
progress: function (easeIt) {       return easeIt? this.situation.ease(this.pos) : this.pos
var optionToSelect = null;     for (opt = 0; opt < element.options.length; opt++){       var el = element.options[opt];
$('#lighthouseKeepLogin').on('click', function() {   chrome.storage.sync.set({
var cells = IPython.notebook.get_cells();         for (var i = 0; i < cells.length; i++) {             add_lan_selector(cells[i], cells[i].metadata.kernel);
})(this);
size: {                     width: [],                     height: []                 },
}();   this.BLOTTER = BLOTTER; };
}                         emitter.emit(...eventData);                     };
, ContentsIdDao = require('../../../../lib/extension/contents/contentsIdDao')  , ImageUtils = require('../../lib/tiles/imageUtils')
}                 ds.rowCb = function (item) {                     var model = this._toModel(item, true);                     if (recip) {
var record;     result.fetch_obj( function( obj ) {       record = self.populate_record( obj );
function entityRemove(args, cb) {     args.command.cmd ='remove';
throw new Error(__('Invalid iOS developer certificate'));     }    }),
var buf = Buffer([ 0x03, 0x01, 0x20, 0xff, 0x00 ])     var array = Struct.types.array
testContext.testInt = function () {     var byTor;
for (var i = queue.length - 1; i >= 0; i--)       {
if (!this._inChangeGroup) {             throw new Error("TextView._replaceCharacters() called without a change " +                 "group");         }
module.exports = Cylon.Drivers.GPIO.Motor;
addOpenMetadata(this.messages[1], 1);       addOpenMetadata(this.messages[2], 1);       const icon = find(this.thread, "open-tracking-icon");       expect(icon.children.length).toEqual(1);
} else {     throw new Error("Unsupported DataType: " + attribute.type);    }
getClassName: function() {       return "R.debug.ConsoleRef";    }
if (oldKey) {      throw new Error("Illegal Keystroke '"+specString+"': contains more than one regular key");     }
if(eventListeners[eventName]) {    for(let i = 0; i < eventListeners[eventName].length; i++) {     yield eventListeners[eventName][i](params);
let variables = ''       Object.keys(config.ctx).forEach(key => {         let variable
yield block()
} else {                     DateEditorView.__super__.onGenericEscapeKeydown.call(this, e);                 }
this._modulesToReset = {};
var subRecords = [];                 for (var idx = 0; idx < subcontents.length; idx++) {                     var subRecord = processResult(subcontents[idx]);
this.__mwcDeps[i].dep.depend();         this[this.__mwcDeps[i].cb](this.__mwcDeps[i].arg);         this.__mwcDeps = _.clone(this.__mwcDeps);
if (hasSetPage) {       return content.setPage(p);     } else {
},   _validateRow: function (row, cb) {     var record = this._getRecord(row);     this.props.model.isValidRecord(record, function (err, validErrors) {
var mv_swap = function() {         this.game.swap(this.x, this.y);     }
.value();                     $scope.navItems.push({
} const mapDispatchToProps = () => {} export default connect(mapStateToProps, mapDispatchToProps)(ReactChoropleth)
function xor() {     var length = arguments.length,         result = arguments[0] || [];
}   that.cb = cb;
} else {             showNotification("Error: status=" + status);             errorCallback("FAILED");
var pg = require("pg@0.2.7");
Backbone.Form.editors.Base.prototype._setOptions.call(this, opts);      this.constructor.__super__.initialize.call(this);     this.value = this.model.get(this.options.keyAttr);
if (str.length <= (i + 1)) {         throw new Error('High surrogate without following low surrogate');       }
Object.keys(config).forEach((prop) => {       this[prop] = config[prop];     });
var TObject = require( 'PHET_IO/types/TObject' );   var TBounds3 = function( bounds3, phetioID ) {     TObject.call( this, bounds3, phetioID );     assert && assert( bounds3 instanceof phet.dot.Bounds3 );
var marked = new Array();    Object.keys(this._shapes).forEach(function(key) {     marked.push(this._shapes[key]);
var $export = require('./_export'); var $values = require('./_object-to-array')(false);
rhs.async = true ;        this.pos = rhs.end ;        this.next();
var exec = require('child_process').exec  , path = require('path')
var actualAction, actualChangeListenerFunctionContext, expectedChangeListenerFunctionContext;
before(function (done) {             var mongoose = this.mongoose = require("mongoose");
if (that.auto_wait) {      if (node.window) {       node.emit('WAITING...');
'use strict'; var Utils = require('./utils');
var DocumentManager     = require("DocumentManager")    ,   EditorUtils         = require("EditorUtils")
return _write.call(this);         }
soundManager.play("cuehit");    });
return download.start(this.options).then(() => {       expect(this.exit).to.be.calledWith(1)     })
if (!item ||!item.id ) {       throw new Error('url() expects a File ref with Id');     }
enableAppIdLink: function() {     return this.get('tezApp');   }.property('applicationId', 'appDetail'),   childDisplayViews: [
if (err) {       callback(err);     } else {
options = options || {};
JSHC.addToplevelNamespace(mod.ast);         }
if (componentGlyph.points) {                     const transformedPoints = transformPoints(componentGlyph.points, component.dx, component.dy);                     glyph.points.push(...transformPoints(componentGlyph.points, transformedPoints));                 }
}     throw new Error('illegal char:'+ c);   }
if (!/^\s+/.test(buf) || (buf.length > 3 &&!/^\s+at /.test(buf))) {       buf = '';
var http = require('http')  , nowjs = require("now")
}; NaiveBroadphase.prototype = new Broadphase();
}];     for (var id in clientStrings) {         if (clientStrings.hasOwnProperty(id)) {             var cs = clientStrings[id];             if (cs.r.test(nAgt)) {
tempDiv.innerHTML = tmpl   return tempDiv.childNodes[0]
} else {             throw new Error("Internal error: Builtin '" + name + "' has no evaluator?!");         }
var concat = Array.prototype.concat,         concat2 = Array.prototype.concat2,         concat3 = Array.prototype.concat3,         concat4 = Array.prototype.concat4,         concat5 = Array.prototype.concat5;
const result = [];           Object.keys(data).forEach((key) => {             let item = data[key];             item.key = key;
var BreakpointGutter = function () {         this.cm = null;         this.cd = null;
}     let ret = opts.val || {};     ret['category'] = item.value;
}   return this; }
result.push('(' + component.value + ')');         for (ii = 0; ii < component.children.length; ii++) {           result.push(flattenComponent(component.children[ii]));
constructor(location, binding, initializer) {     super(location);     this.initializer = initializer;
expect(log.event, nameErrorMessage).to.be.equal(name);   Object.keys(params).forEach(key => {     const expected = params[key];
for(var i = 0; i < this.connections.length; i++){         var conn = this.connections[i];         var tojson = conn.toJSON();
, levels = require('./levels')
$.data(that, 'plugin_' + pluginName)[options]();             }
declutterMarkers: function(opts) {   throw new Error('Not supported');  },
setTimeout(function() {    this.fireEvent("media", this);    this.informTable("Resize");
startMeasure("run");             that.set("selected", undefined);
if (r!== null) {             for (var i = 0; i < r.length; i++) {                 var uniform = r[i].match(/uniform\s+\w+\s+(\w+)/)[1];
for(j = 0; j < this.dropDots.length; j++){     item = this.dropDots[j];
} else {         message.say(`New code successfully pulled!\nPlease restart ${client.shard? `all shards.` : 'the bot.'}`)       }
handler: function (v) {                      self.fireEvent(BI.AnalysisOperatorTitle.EVENT_SAVE, v)                  }
if (!share.jiff.helpers.array_equals(share.holders, o.holders)) {         throw new Error('shares must be held by the same parties (|)');       }
Object.keys(MFT.AppModel.interactionChoises[ChoisesVal].choiceSet).forEach(function(ChoisesSet){                         button = MFT.Button.create({
function top(k, offset, renderSpec, callbacks) {           var query = writeQuery(_binParams, true, _orderExpression);
var renderer = this.renderer            , view = renderer.view;
const outer = this;     const ns = new Set(() => {       yield* ano.entries;
var cb = this.async();   this.log('\n----'+ 'Client'.red.underline +'----\n');
case's': case 'd': case 'b': case 'n': break;     default: throw new Error('unrecognized type'+ val.t);    }
inverse: function () {       return new SVG.Matrix(this.native().inverse())
try {              S3.JSONRequest[this.attr('id')].abort();          } catch(err) {};
function setDisplayLength(iDisplayLength) {         $.extend($.fn.dataTable.defaults, {
it("get a notification message", async function() {       await VerifyNotificationDisplayed(this.driver, AUTHENTICATION_TOTP_FAILED);     });
if (message.type == "prepare") {                 node.receivePrepare(message.port, message.address, message.proposalId)             } else if (message.type == "accept") {
function insertXPath(parent, child) {   let prefix = this.config.platform === 'iOS'? 'XCUIElementType' : '';   let currentIndex = child.pathInParent;
} runTestCase(testcase);
, fs = require('fs')  , underscore = require('underscore'); var Pool = require('./pool');
renderNodes: function($container, nodes, type) {    for (var index = 0; index < nodes.length; index++) {     var node = nodes[index];
if (!(type in this.schemas)) {       this.schemas[type] = Parser(...arguments);     } else {
module.exports = Cylon.Drivers.GPIO.Motor;
) {         const retVal = formio.hooks.on[name].apply(formio.hooks.on, args);         return (retVal!== undefined)?!!retVal : true;       }
Template.Fall_Semester.onRendered(function fallSemesterOnRendered() {   if (this.data) {
describe('91. fetchBlobAsBuffer4.js', function() {   var connection = null;
var file = JSIL.Host.getFile(filename);       return String.fromCharCode(...file);     }
FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);  if(NumSets === 1 && Offset0!== blob.l) throw new Error("Length mismatch");  else if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }
vertices.position.forEach((elem, index, array) => {       Object.keys(vertices).forEach((attribName) => {         var element = vertices[attribName][index];
if (console.log.apply) {         console.log(...arguments);       } else {
});         $(that).parent().find('.remove-recipient').show(200);     });
if (this.output.length!== 2) {     throw new Error('Output must have 2 dimensions on graphical mode');    }
var atomic_fill       = $this.css('fill'),       atomic_hexvalue   = atomicRgb2Hex( atomic_fill ),
const createMenu = require('simple-terminal-menu')
'use strict'; var extend = require('xtend'); var _ =
, fs = require('fs')
}       that.set('optionsDates', newOptionsDates);     }
trigger(...args) {         var count = this._liveResources.length;
constructor() {         this.map = {};     }
export function log(...argv) {     console.log(...argv); }
if (!_this.tokenVector.length) {               throw new Error("Invalid address contains no address tokens.");             }
init() {     this._super();     this._nextPaintFrame = null;
case this.ERROR:                     _logger.error(...args);                     break;
if (body == undefined || body == null) {         throw new Error("Missing the required parameter 'body' when calling createUser");       }
results.forEach(function(result) {         var error = result.error;         var attribute = result.attribute;
},   render: function () {     if (this.currentIndex === null) {
for ( var i = 0; i < 50; ++i ) {         var controller = this.TaskController.create({});         this.taskControllers_[controller.task.id] = controller;
module.exports = Cylon.Drivers.GPIO.Motor;
return;     }     let body = (this.get('doc.body') || '').toString();     if (this.get('doc.body')!== this.get('session').getValue()) {       this.get('session').setValue(body);
const _checkAction = function() {};
, minifyify = require('../lib/minifyify')
function txn_oncomplete(entry_id, callback, event) {   log('%s: marked entry as read', db_mark_entry_read.name, entry_id);   this.channel.postMessage({type: 'entry-marked-read', id: entry_id});
.on("mousemove", function(d, i){                                  mousex = mousex[0] + 15;
}   for (var i = 0; i < toCut.length; i++) {     var tabIdToCut = toCut[i];
if (!that._trigger( "load", undefined, triggerData ) ) {      return;
method == 'load'? load.apply(this, slice.call(arguments, 1)) :                 localize.apply(this, slice.call(arguments, 1));     };
send() {     return this.nc.publish(...arguments)   }
module.exports = Cylon.Drivers.GPIO.Motor;
(exports.setrange = function(client, key, offset, str){   var val = this.data[string(key)]    , offset = +string(offset);
case JSON3.stringify(Number()) === "0":           case JSON3.stringify(String()) == '""':
widgetOk = widget.querySelector('.pf-widget-ok'),       widgetReco = widget.querySelector('.pf-content-unit');
}         childNodes.forEach(function (childNode) {             this.appendChild(childNode);         }, this);
store.PURCHASE_EXPIRED = 6778003; })();
var osm = this.getAttribute('data-id'),                 layer = this.getAttribute('data-layer');
expect(popularity).to.be('1');       });     });
if (this.right) {     if (this.right.parent!== this) { throw new Error('Parent pointer broken for key'+ this.key); }     this.right.checkInternalPointers();
}, this)     this.on('context.updated', (context) => {       this._context = context     }, this)
function($log, $state, productList) {
base.externals.push(...Object.keys(options.libs || {}));
}       throw new Error("toStringJS on an unknown type: " + val);     }
module.exports = Cylon.Drivers.GPIO.Motor;
try {      self._bind.push(new EpoxyBinding($element, bindings, context, handlers));     } catch( error ) {
if(Ext.Array.contains(assignment_ids, parseInt(assignment_id))) {                 sumScaledPoints += that._calculateScaledPoints(group.points);             };
return Utils._.template(sql)({         triggerName: triggerName,         tableName: tableName       });     },
this.Roles.save({ id: 'bulk' }, { roles: this.roles }, function (data) {                 UIkit.notify(this.$trans('Roles reordered.'));             }, function (data) {
trigger: function( event, data, elem  ) {      var type = event.type || event;
, rimraf    = require('rimraf') var dbidx = 0
self.final.aliasTo = self.aliasTo;                 for (var i = 0; i < ALIAS_PROPS.length; i++) {                     var key = ALIAS_PROPS[i];
{         RemoteModule.removeListener(this);     },
this.router.listener.add(requestObject, connection);   this.funnel.execute(requestObject)
this.on('streamStart', function (attrs) {
value(emitter);  if (type!= null) {   data = emitter.hasOwnProperty('__ee__') && emitter.__ee__;
var self          = this      , updatedAtAttr = Utils._.underscoredIf(self.options.updatedAt, self.options.underscored)      , createdAtAttr = Utils._.underscoredIf(self.options.createdAt, self.options.underscored)      , errors        = []
'use strict';
that.completeAction(action);    }, function () {
defineInstanceSimilar(sugarNumber, 'abs,pow,sin,asin,cos,acos,tan,atan,exp,pow,sqrt', function(methods, name) {     methods[name] = function mathAlias(...args) {       return math[name].apply(null, args);     }
var cluster = that.vbr.clusterSectorStart       var offset = 0
res.writeHead(200, {     'Content-Length': body.length   });   res.end(body); }
function seq (t) {       var fn;
clearTimeout(id);       writeHead(res);     }     next();
} else {             throw new Error('Unknown compression method:'+ entry.method);         }
this.registerNamespaceFriendlyPrefix = registerNamespaceFriendlyPrefix;   this.$get = function() {
reset() {     this.extraVariables_ = {};   }
if($(this).is(':checked')) {          BIMSurfer.show($(this).val(), project);         } else {
} export async function load__data__csv__worker(ctx) {   info(`${logPrefix}|load__data__csv|Promise|setTimeout`)
var num_gaps = 0, ref_count = 0, total_gap_days = 0, total_work_days = 0;       new_e.forEach( function(point) {
it("should return true when a PrimitiveClass is given", () => {       expect(isPrimitiveOrPrimitiveClass(String())).to.eq(true);     });
} else {     this.path_ = path;   }
} else {                     mockFunc = sendError.bind(that, mock.error, filePath);                 }
$popup.toggle();      $popup.toggleClass('active');       e.preventDefault();
ownerType:'mixin',          getValue() {              let html = _getHtml(this);              return html.value;
, /(\s(\\\}|[^\}])+)?/         ].map((exp) => exp.source).join(""), "g");
this.write = function (session, callback) {     var secret = geddy.config.secret      , data = JSON.stringify(session.data)
function ($log, productDetail, productVersions, Notifications) {       var that = this;
, async.apply(commonUtilities.prepareDb, benchDb), async.apply(commonUtilities.insertDocs, d, n, profiler)
var destination = {};  for (var property in source)   if (source.hasOwnProperty(property)) {    destination[property] = source[property];   }
module.exports = function() {   var v = variance.apply(this, arguments);   return v? Math.sqrt(v) : v;
getClassName: function() {       return "R.debug.ConsoleRef";    }
}).catch( function(error) {         that.showErrorMessage("Error loading data. " +error);         console.error(error);
this.table = table;         var name;
function compileModes() {     for (var i = 0; i < LANGUAGES.length; i++) {       var language = LANGUAGES[i];
} function LenyaLinkTree(doc, treeElement) {     this.doc = doc;     this.treeElement = treeElement;
if (!this.container) {             throw new Error('Toggleable container with id "' + ContainerId + '" not found');         }
this.sessionId = sessionId;   for (prop in properties) {     if (properties.hasOwnProperty(prop)) {       this[prop] = properties[prop];     }
[ targets.show, targets.hide, targets.tooltip, targets.container, targets.content, targets.window ],      function(){ return target!== FALSE; }     )
server.decorate('server','setupViews', path => {     this.views({       path: path,       isCached: config.get('optimize.viewCaching'),       engines: _.assign({ jade: require('jade') }, engines || {})
var c, parts, part, p, fullName;    for ( var name in list ) {     if ( list.hasOwnProperty( name ) ) {      c = list[name];      if ( c.type =='script' ) {
ref: function (x, y) {       return this.attr('refX', x).attr('refY', y)
CommonViewFunction.saveTermToAsset({                             termName: termName,                             guid: this.guid
{       throw new Error("ReedSolomonException Bad error location");      }
this.updateFastColorPickMenu();     this.setUiColor(this.favoriteColors[0].color);   } else {
dfa.accept = -1;  dfa.nfa_set = [];  dfa.done = false;
{   super();   this.config = Object.assign(    {scale: 1.15, duration: 75, revertOnDispose: true},
var index;      for (var i = 0; i < data.length; i++) {          if (data[i].ts < 946681200000) data[i].ts *= 1000;
try {       await closeStream(this.stream);     } finally {
scope.dependencies.forEach(function(dep) {                         dep_name = dep;                         dep_src = scope.dependencies[dep];
if (Meteor.users.find().count() === 0) {         var userId = null;
default:         throw new Error("Invalid argument for node-brackets module initialization.");     }
function getGridFragment(callback) {     if (!this.world) {         callback(false);
}; Dword.prototype.emit = function(...args) {     this._Emitter.emit(...args);     return this;
this.getKeyValueView("From", "from_date", "date"),    this.getEditableKeyValueView("Payment method", "payment_method", Balanced.ChangeFundingSourceModalView, "change-funding-source-btn")   ];
if (_byte == undefined || _byte == null) {         throw new Error("Missing the required parameter '_byte' when calling testEndpointParameters");       }
$('#channels a.server').live('click', function(){      self.focusOnServer($(this));          });
})(typeof(window)!== 'undefined'? window : global);
position: 'absolute',               top: `${cropTop}px`,               transform: [
function separateEnvModule() {   const { server, client,...env } = this.nuxt.options.env
editIntegration(options) {         return this.shard.client.editGuildIntegration.apply(this.shard.client, this.id, options);     }
function toRegex(...args) {   const str = fill.apply(null, args);   return new RegExp('^(' + str + ')$');
vector: function (x, y) {                            throw new Error("internal error, can't evaluate matrix/vector");                       },
errorCount+=ec;              }else{
}   table.render();
_.each(this.getReverseRelations(), (relation) => {    relation.addRelated(this.instance, options);   });
test.done();         };
.bind('keydown', function( event ) {     var valuenow = $( this ).attr( "aria-valuenow" );     if ( self.options.disabled ) {
onBroadcast (callback) {     throw new Error('onBroadcast Not Yet Implemented', 'AbstractOverlay.js');   }
args.push(raw);                     self.emit(...args);                 } else {
var store = this       this.requestTransaction(function () {         var exeNow = store.listenersByIdExecuteNow
if(!this.queryModel.get('queryText') || isEmpty(fieldNames)) {                     this.model.set('processing', false);
var path = require('path')  , hotplate = require('hotplate')
Base.call(this, {});             this.initialize();         },
var result = {};             for (var key in obj) {                 if (obj.hasOwnProperty(key)) {                     result[key] = deepWalk(obj[key]);                 }
module.exports = ModelBaseClass;
this.events.addEventType("tileloaded");         this.grid = [];     },
this.$from.animationComplete($.proxy(function() {      this.doneOut( screenHeight, reverseClass, none );     }, this));
static createError (name) {     return SuperError.subclass(name)   }
{      options.current.extraParams = eval('(' + $parent.data('id') + ')');     }
this.sections.each(function(section){    if (section.position == 'footer') this.hasFooter = true;    if (section.position == 'headertool') this.options.hasHeaderTool = true;   }, this);
})(typeof(window)!== 'undefined'? window : global);
if (this.active) {             for(var i in this.handlers) {                 if (this.handlers.hasOwnProperty(i)) {                     this.handlers[i].deactivate();                 }
answer.error = err;             that.eventEmitter.emit("error",asked,answer);         });
};   Neatline.commands.setHandler(this.ID+':display', display); };
let last;     for (let i = 0; i < keys.length; i++) {       last = get(keys[i]);
, Component = require('node-xmpp-component')
CrawlGraph.prototype.getAllCrawlers = function () {         var c = [];         for(var key in this.allCrawlers) {             c.push(this.allCrawlers[key]);
groups = [];            for(let i = 0; i < user['groups'].length; i++) {             var g = user['groups'][i];             var gr = yield userManager.getGroup(g);
}     }, _callee5);   }));
.get('/log/(*)', logAPI.get) const app = Toa(function * app() {   var path = this.path
if (!doc.exists) {             throw new Error('Document does not exist!');           }
pulse.Metric = function (name, aggregate, rate, groupBy) {  this.tags = {};  this.name = name;
it('should clear suggestions', function() {       this.source.andReturn(mockResults);       this.dataset.update('woah');
$('#actions input').each(function(i){       if ($(this).is(':checked') && $(this).val()!== null) {         actions[i] = $(this).val();
}     }, { engine: engineMock });     this.tooltipManager.start(this.layerView);
var sendOpts = config.app.env === 'production'? {root: 'client', maxage: config.app.cacheTime} : {root: 'client'};   app.use(async (ctx, next) => {
this.editMode = false;     this.toolbarButtons = ngWigToolbar.getToolbarButtons(this.buttons);     $attrs.$observe('disabled', function (isDisabled) {
})     var test1 = thisFuncs.printf instanceof Function     var test2 = thisFuncs.printf instanceof Function     expect(test1).to.be(true)     expect(test2).to.be(true)   })
throw new Error("Illegal state: unexpected event type [" + et + "].");   }
} else {           for (param in userAccounts) {             if (userAccounts.hasOwnProperty(param)) {               hasAccount = true;               if (param in svcOptions) {
var match = cache.search(type,+shard,+id);             if (match) result.push(...match);         }
removeKeys: function(keys) {     _.each(keys, (key) => {       if (this.get(key)) {         this.get(key).remove();
.bind( "blur.button", function() {     $button.removeClass( focusClass );    });
}     text = text + text.toLowerCase();     text = text.toLowerCase();
function FlowLayoutController(options) {         BaseLayoutController.call(this, options);
, $ = require('jquery')  , moment = require('moment'); module.exports = AdminEventEditFormFeedController;
String.prototype.  should    = nativeShould;
return gameGroup.addPlayer(player);   };
this.favoriteColors = JSON.parse(colors);     this.setUiColor(rgbaToHex(this.favoriteColors[0].color));   } else {
} else {     throw new Error('Unable to create route instance: routeClass or viewClass must be defined')   }
.on('change.dirty', function () {           var el = input,             field = input.closest('.field'),
selectionUpdated() {     const selection = this.get('_selection');     if(isNone(selection)) {
, filesize = require('filesize')  , docker = new Docker({ socketPath: '/var/run/docker.sock'})  , exec = require('child_process').exec
requestToSave = function(request, cb){       var snapshot, ref$, cs;       if (request.is('application/json')) {
change: function () {     this.set('value', this.$('option:selected').val());   },   didInsertElement() {
if (MaxSendRate <= 1 && process.env.NODE_ENV === "production") {                 throw new Error('You are currently in Sandbox Mode. Please contact Amazon to get this lifted.');             }
this._maxLength = 4;  this.shapes = createSizedArray(this._maxLength); };
function updateSampleKeys(featureList) {     const samples = new Set(this.sampleKeys);     for (let feature of featureList) {
History.pushQueue({
} else {         return true;       }
for (var i = 0; i < srcOutputLoc.length; i++) {         var srcOutputDir = path.resolve(apiOutputDir, srcOutputLoc[i]);
var tmpl = $('#job-template').html()    , from = activePage * perPage;
updateRepresentations = function(adaptation) {             var reps,                 manifest = manifestModel.getValue();
var chunks = getChunks(wordpos, nextcur);       for (var j = 0; j < chunks.length; j++) {         ret.push([word].concat(chunks[j]));
this.classList.remove(...ALL_COLOR_CLASSES);
this._Width = 0.0;      this._Length = 0;  };
}       return this.base(type, listener, self, capture);     }
var feed = __dirname + '/feeds/complexNamespaceFeed.xml'    , meta = {}
}, promise );     } )
}; Connection.prototype.onclose = function (close) {     EventLogActions.add_event("WebSocket Connection closed.", close); };
} catch ( e ) {       throw new Error( 'Cannot setImageData() invalid or no mime' );
this.nextId_ = 1;
class LogView extends React.Component {   constructor(...args) {     super(...args);
vtext.update = function (...args) {  this.vm.updater.updateTextContent.apply(this.vm.updater, args); }
insert_text = "{{ " + val + " }}";   tinyMCE.activeEditor.execCommand('mceInsertContent', false, insert_text); }
, Lexer = require ('./lexer')
module.exports = Cylon.Drivers.GPIO.Motor;
alert(err.message)         dispatch(actions.txError(err))         return console.error(err.message)
for ( var i = 0; i < d.length; i++ ) {     old["padding" + d[i]] = 0;
['menuTool', 'picture', 'Basic tool' ],    [ 'disabledMenuTool', 'picture', 'Basic tool disabled', setDisabled ]   ],
else if (type.call(currentRoute) === STRING) {    var oldRoute = currentRoute;
var mongoose = require("mongoose");
, MediaRow = require('../../../../lib/extension/relatedTables/mediaRow')  , RelatedTablesUtils = require('./relatedTablesUtils')
constructor: function() {             this.processes = [];             this.targets = [];         },
const svgSpinner = () => {   switch (this.props.size) {     case 'large':
} })(this);
var ERR_CYCLE = 2; var SnmpError = function(aMessage, aCode) {   this.message_ = aMessage;   this.code_ = aCode || ERR_OTHER;
LQ._invokeListeners(eventName, args);                           LQ._invokeListeners('any', args);                     } else {
, http = require('http')  , res = http.ServerResponse.prototype;
oldActiveControllers = Array.from(activeControllers.keys());   newActiveControllers = [];
this.plugin.sendTransfer = (transfer) => {           this.plugin.emit('outgoing_cancel', transfer, {name: 'Foo'})           return Promise.resolve(null)         }
var argsLen = arguments.length;     args = new Array(argsLen);     while (++argsIdx < argsLen) {
Agent.prototype.toString = function toString() {   var agent = this.toAgent();   var os = this.os!== 'Other'? this.os : false;
var lines = this.code.split("\n");   for(var i = 0; i < lines.length; i++)    lines[i] = lines[i].split("
it('stops event propagation', done => {   const naja = this.mockNaja();   new this.RedirectHandler(naja);
Object.keys(copy).forEach(function(key){         var item = copy[key];
_schemas: {},   registerSchema(name, schema) {     if(this._schemas[name]) {       throw new Error(`Schema with name "${name}" already exists.`);
setToolbar: function(){    this.inherited("setToolbar");    var forRef = this.button;
it("should store data", () => {             this.propertyMetadata.schema.exclusiveMaximum.should.eq(10);         });     });
this.data = data;
, webui_https_certificate: null           , webui_listen: []
tr.setZoomAround(interpolate(startZoom, zoom, k), around);             this.fire('move').fire('zoom');
if(resource = bind.getChild("resource", 'urn:ietf:params:xml:ns:xmpp-bind')) {                     self.fullJid = resource.getText();                 }
for (id in this.changedModels) {                 if (!this.changedModels.hasOwnProperty(id)) continue;                 model = this.editCollection.get(id);
if (parent_rows.some(function(parent_row){ return!parent_row.ball; }))       throw Error("some parents have no balls");      if (parent_rows.length > 0)
if (!(tx instanceof Transaction)) {             throw new Error('Can only inherit transactions');         }
async function waitForDomains (context, heroku) {   function someNull (domains) {
it('can handle MACSTRING in Central European encoding', function() {         var encoding = 'x-mac-ce';         var data = '42 65 74 F5 74 92 70 75 73';
if (!stat.isFile()) {                 throw new Error("Source file not found: "+files[i]);             }
queue.forEach(function(func) {       if (func) func(err);     });     self.commit();
table.push(header)   table.push(...rows)   return table.toString()
})(enyo);
}      var size = object.getBounds().size();     function scale(size, value) {
it('should allow arguments to be passed on initialization', function(done) {    suspend(function(foo, resume) {     assert.strictEqual(foo, 'bar');
return handle(...[trackingInfo, options].concat(toDecorate));   };
$("button[value='Lodge Request']").html("Lodge Request").attr("class", "button").css("font-weight", "bold").on('click', function() {    var requestBody = {};    var time = Date.now();
window.sim = sim; function createCube(device) {   const geometry = new THREE.BoxGeometry(10, 10, 50);
once() {     var now = Date.now();
} var debugFlag = argv['debug'] == true;
} function Controller ($state) {     let vm = this;     vm.dismiss = dismiss.bind(vm, $state);
var request = require('../index')  , tape = require('tape')
} catch(e) {                     throw new Error("Unable to run getValueSync because allowSync was set back to false by when get method executed synchronously within a selector function.");                 }
(function(){    if ( jQuery.isReady ) return;    if ( document.readyState!= "loaded" && document.readyState!= "complete" ) {     setTimeout( setTimeout, 0 );     return;
map: function map() {     return this.interpolate(...arguments);   }
return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase(); }; String.prototype.to_url = function() {
const workshopper = require('../') workshopper({
module.exports = Cylon.Drivers.GPIO.Motor;
var data = jwtutil.decode(req.query.jwt, options.secret)       var redir = urlutil.removeParam(req.url, 'jwt')       if (data) {
var proxyquire =  require('proxyquireify')(require)  , stats      =  require('./fixtures/stats')
DAO.prototype.equalsOneOf = function(others) {     var result = false;     var self = this;     others.forEach(function(other) { result = result || self.equals(other) })
'stream error',         args,         new Date().toDateString()
.val();      var projects = [];      $('input:checkbox[name="project"]:checked').each(function() {
var ROOT = __dirname + '/dump';   describe('init', function() {
for (var i = 0, len = args.length; i < len; i++) {       for (var k in args[i]) {         if (args[i].hasOwnProperty(k)) {           dest[k] = args[i][k];         }
if (data) {   if (typeof data[method] == 'function')    data[method].apply(this, args);
var virtualList = ctrls[1];
this.AlertService = $injector.get('AlertService');
var config = byPath[file];          var transformed = config? wrap(content, config) : content;
if (fallbackChain) {         that.freeze(fallbackChain);       }
push: function(...args) {    this.line.push.apply(this.line, args);   },
let fnString = fn.toString();     fnString = `(${fnString}).apply(window, ` +                              JSON.stringify(args) + ')';     this.sendToWindow(windowID, 'execute', {
case 'LINK':       return resolve(href);     case 'OBJECT':
if (typeof options!== 'object') {             throw new Error('AV.realtime need a argument at least.');         }
var matrix = renderer.getZoomMatrix(scale, origin);         renderer.transform(matrix);         Z.DomUtil.preventDefault(event);
, viewportH = makeViewportGetter('height', 'innerHeight', 'clientHeight')      , xports = {};
case 'ReferenceError':                 $consoler.warn(e.message)                 break
clearInterval(interval);   update(options[that.selectedIndex]); }
calculateATR(rawData.D, period);  var brickSize = function (d) { return d["atr" + period]; };  var renkoData = [];  var index = 0, prevBrickClose = rawData.D[index].open, prevBrickOpen = rawData.D[index].open;
var request = require('../index') var tape = require('tape') var port1
Vue.filter('date', function(date, format) {         return this.$date(date, evalExp(format));     });
}         callback && callback();     });
this.__scheme = null;     return Process.prototype.destroy.call(this);   };
return function (_x6) {                     return _ref4.apply(this, arguments);                 };
var id = (+new Date());         div.innerHTML = id;         div.setAttribute('data-textarea', id);
, request = require('supertest')
if (!modelIsAlreadyInDataTable) {                 var model = {};                 model.id = parsedObject.offering_id;
clone: function () {       return new SVG.Matrix(this)
function materialize_String(obj, args) {    return args && String(args[0]);   }
return (function fn(node_data,node_descriptor){     var xml = "";     var type = typeof node_data;     if(node_data instanceof Array) {
const tab = "  ";      Object.keys(libs).forEach(dep => {     const { props, ident } = libs[dep];
var idx_selected = indices.filter(indices, function(index) {             var elem = this.model.mark_data[index];                 return (elem[0] >= min && elem[0] <= max);
if (this.blocks!== null) {             for (let blockIndex in this.blocks) {                 if (this.blocks.hasOwnProperty(blockIndex)) {                     this.blocks[blockIndex].destroy()                 }
, debug = require('debug')('collection')  , path = require('path');
const startTime = Date.now();       promiseFunc(...arguments)      .then(returnValue => {
}       throw new Error(`Unsupported logic operation: ${obj.operator}`);
let readyTimeOut = null; var pageLoaded = true; Recorder.addEventHandler("checkPageLoaded", "readystatechange", (event) => {   let self = this;   if (window.document.readyState === "loading") {
}, this);                                  ncms.Application.registerWorkspaces(nitems);
scheduleAfterRender: function () {         Ember.run.scheduleOnce('afterRender', this, this.afterRenderEvent);     },
showError: function() {         var $error = $(this.refs.error.getDOMNode());         if (!$error.is(":visible")) {
module.exports = Cylon.Drivers.GPIO.Motor;
function echoSingle(...args) {                 return args[0];             }
chunkTemplate.plugin("render", function(modules, chunk) {    var source = new ConcatSource();
} else {     throw new Error('A container must be provided.');    }
uploadcare.jQuery(uploadcare).on('log.uploadcare', function(e, args){              });
target instanceof State ||                     ( target = origin.query( target ) );                 if (!target ||
executeFromRest.call(kuzzle, params, request, response);     });     api.post('/:collection', function (request, response) {
function loadInitalAnalyses() {       var analyses = self.seedAnalyses(state.tokens);
, DocumentObjectId = mongoose.Types.ObjectId  , MongooseArray = mongoose.Types.Array;
export default curry3(function mergeWith(cb, result) {   let rightIndex = 2   while (rightIndex < arguments.length) {     result = _merge(result, arguments[rightIndex++], cb)   }
var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator ==='symbol'? function (obj) { return typeof obj; } : function (obj) { return typeof obj; };
constructor: function ColumnModel(...args) {             ColumnModel.__super__.constructor.apply(this, args);         }
screwunit: function(params) {         params = params? params : {};
util.log('Get Topic List for: '+this.id);     this.socket.emit('topic', 'xxx:yyy');     getSomeTopics(this.socket); }
var me = this;             this.inherited(id).then(function (item) {                 if (Array.isArray(item)) {
const ValidatingCreateMixin = Mixin.create({   create(...args) {     const instance = this._super(...args);
await this.crowdsale.sendTransaction({value: ether(1), from: investor, gasPrice: 0});
if (isPlainObj(key)) {             for (var k = 0; k < key.length; k++) {                this.set(k, key[k]);             }
, a =''      , b =''      , tmp;
if (t.merged) {     throw new Error('!!!!');   }
function updateLocation(view, destination, skipPush) {         if (typeof destination.length!== "number") throw new Error("Destination needs to be string or array");
var htmlReason = $reason.find('.reason-content');                 htmlReason.find('select, input, textarea').each(function () {
['ii'].forEach(function(sig) {          tables[sig] = zeros(that.nextIndex);        });
describe("concat", function() {   it("should concat 2 ports", async function() {     let result = [];
if(map) {    for(var key in map.properties) {     if(map.properties.hasOwnProperty(key)) {      var prop = map.properties[key],      propName = (prop.map)? prop.map : 'p-' + key,
if (this.options == null) {             this.options = {};         }
}  , throw_outside = function(ex) {
this.connect = connect;     function connect(options) {
$child.closest('.accordion-child').next('.accordion-child').find('input:visible:first').focus();       }
}.bind(this));     p.centroid.x = this._roundNumber(p.centroid.x, 2);     p.centroid.y = this._roundNumber(p.centroid.y, 2);
if (__indexOf.call(invalidDirs, dir) >= 0) {       throw new Error("Load path not found for " + filename);     }     id = filename.replace("" + dir + sep, '');
that.markers = null;
ProxyClass.prototype[prop] = function() {         return promisifyCursorRequest(this[targetProp][prop](...arguments));       };
}   trigger(...args) {     this._array.forEach(widget => widget.trigger(...args));     return this;
ret = [];             for(key in val){                 if(val.hasOwnProperty(key)){                     ret.push( val[key] );                 }
'weekday' : $(this).index() + self.options.startIn,         'weekdayname' : self.options.weeks[($(this).index() == 6? 0 : $(this).index() + self.options.startIn)],         'data' : data
function checkOneFile(i, callback) {
if(opts.noRecord) {           throw new Error({ code: 'RECORDING_DISABLED' });         } else {
const createJsFileIfNotExist = co.wrap(function *(opts, playground) {   return yield createAssetFileIfNotExist(opts, playground, 'js', co.wrap(function (ext) {     return 'console.log(\'Hello\')';
, serveStatic = require('serve-static')  , forEachAsync = require('foreach-async').forEachAsync  , send = require('connect-send-json')
, MaxKey = require('./max_key').MaxKey  , Binary = require('./binary').Binary;
process = null;                 callback(null, stderr);             });
if (includes(methods, 'chain')) {           throw new Error('Chaining syntax is not yet supported');         }
} else {     throw new Error("Parent node of dropdown menu not found");    }
for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {     let tail = re.slice(pl.reStart + pl.open.length)     this.debug('setting tail', re, pl)
})    .catch(this.base._handleError.bind(this.base, req, res)); };
className: className,           disableTouchRipple: true,           disableFocusRipple: true,
this                        .children('.zoo-img')
let customMixins = {};   if (this.context.mixins) {     customMixins = this.context.mixins;
return function (name, oldValue, newValue) {       var info = (0, _data.default)(this);       var attributeToPropertyMap = info.attributeToPropertyMap || {};
this._prepareOn(name, handler, context);     Events.on(name, handler, context);     return this;
if (cb) {                         cb();                     }                 });
enabled: true,         displayname: this.socialUserInfo.screen_name,
$(this).removeClass('on');   $(this).siblings(".current-menu-item").css("background-color","#f00").children().css("color","#fff"); };
export const downloadImage = (url) => dispatch => {     if (!url) throw new Error("Cannot have null url");     dispatch({
var prefix = '# Do not edit. File was generated by node-gyp\'s "configure" step'     var json = JSON.stringify(config, boolsToString, 2)     log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)
var self = this;     Sandbox.call(self);     self.loadListeners = [];
} else {             throw new Error('Sketch File Not Found:'+ file);         }
this.backend.stub            .post('/')
if(err){                 callback(err);             }
if (input.view && input.view.$input) {             that.$inputList.append( input.view.$input );           }
if (tapable.hooks) {     return tapable.hooks[name](...args);   }
for (var i = 1; i < arguments.length - 2; i++) {
if (errors) {                 for (var i = 0; i < errors.length; i++) {                     toastr.warning(errors[i], "Não foi possível prosseguir devido a um erro.");                 }
batch = paths.slice(complete, complete + concurrency);     files.push(...yield batch.map(read));     complete += concurrency;
if ( $container.length === 0 ) {             throw new Error( "No container for ProductMap: " + containerId );         }
_setView: function () {     if (this.map.hasChanged('zoom') || this.map.hasChanged('center')) {       this._leafletMap.flyTo(this.map.get('center'), this.map.get('zoom') || 0);
onValueChange: this.setValue,           onPanelChange: this.handlePanelChange         })
it.each(_.range(0, dispatches), "dispatch %s", ['element'], function (element, next) {             this.timeout(constants.timeout);             Augur.dispatch({
function ZscElement(nm, abi, adr) {     this.name = nm;     this.parameNos = 0;
, logErrorFile = path.join(logDir, appName + '-errors.json')  , logger;
function Measurement(format, gettextCatalog, options = ({})) {   ngeoInteractionMeasure.call(this,  (options));   if (options.continueMsg!== undefined) {
default:         throw new Error("Unknown brush predicate " + __.brushPredicate);       }
document.body.style.cursor = 'pointer';   layer.draw();  };
var size = this.headerLength.map(function(length){                 return _outputSize(length);             });             var modifier = new Modifier({size : size});
var log = logger.createLogger('storage:s3')   var app = express()   var server = http.createServer(app)
, cloneDeep = require('./util/clone')  , has = require('./util/has');
}; }).call(undefined);
if (arguments.length!= param_length) {                 throw new Error("expected " + param_length + " arguments, got "                     + arguments.length + " instead.");             }
return compute.sequence(         func.createConstructor('String', 1, string_ref.StringPrototype, string_ref.String.setValue(String())),
var samplers = {};     for(var i = 0; i < this.properties.length; i++)   {
this.metadataRaw = metadataRaw;    this.streamMetadataRaw = streamMetadataRaw;    this.linkMetadataRaw = linkMetadataRaw;    this.partition = partition;
function ParticleEmitter() {                     this.particlesPool = [];                     this.activeParticles = [];                     this.container = new createjs.Container();
for (device in state) {                 if (state.hasOwnProperty(device)) {                     SB.spec.updateTemplate(state[device]);                 }
);    return fn(...params);   };
if (position + 8 > byteArray.length) {       throw new Error('bigEndianByteArrayParser.readDouble: attempt to read past end of buffer');     }
, changed   = require('gulp-changed')
return (   this.ua.satisfies(...arguments) &&   this.ua.family in baseLineVersions &&
fill_table(datasets, ["date_created"], table);             table.children("tbody").find("tr").on("click", select);
args = args || [];         if (!hop.call(arguments, 'length') || arguments.length > 4) {             throw new Error('invalid `sx.parent` call, should receive arguments as array');
expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty({foo: 1})).toBe(false);       const array = [];       array.push('1');
var matcha = require('matcha');
: parentSize;                 },                 [object, this.size]
that.doc = document;
console.error('An error occurred compiling the shaders:'+ gl.getShaderInfoLog(vertShader));     throw new Error('Error compiling vertex shader');    }
if (!prototypeOfArray.indexOf) {     prototypeOfArray.indexOf = function indexOf(sought  ) {         if (this === void 0 || this === null)
var test = require('../../../test')   require.async('./a', function(a) {
jQuery.readyList.push( function() { return fn( jQuery ); } );
var env = require('env-variable')  , Stream = require('stream')
if (argument) {         for (var key in argument) {           if (argument.hasOwnProperty(key)) {             newOptions[key] = argument[key];           }
Blockly.FieldDropdown.validateOptions_ = function(options) {   if (!Array.isArray(options)) {     throw Error('FieldDropdown options must be an array.');   }
input.addEventListener("blur", function() {           focus(this);
var keys = [],             bindings = Bindings(this);         for (var k in bindings) {             if (bindings.hasOwnProperty(k)) {                 this.unbind(k);             }
try {         return [null, eval('with($scope){(%s)}'.replace('%s', args[1])))]     } catch (e) {
} })(typeof(window)!== 'undefined'? window : global);
.then(metadata => {           Object.keys(metadata).forEach(key => {             this.props.owner().addMetadata(key, metadata[key]);
}).item(0).data('index');         }         if (!index) {             index = 0;         }
, { carrier : 'UPS', trackingNumber : '123453423453' } , function (err, xml) {   console.log(xml);  }
var reThis = /\bthis\b/;
'use strict' var request = require('../index') var tape = require('tape') var local = 'http:
var fs        = require('fs')  , sylvester = require('sylvester');
{             $this.dblclick(function()             {
describe('the "___" should be displayed', function() {
});       openRequest.onsuccess = function (event) { this.log('Success handler for open request called.');         this.db = event.target.result;
var correct = loadable instanceof this.vie.Loadable;         if (!correct) {throw new Error("Invalid Loadable passed");}
return first(() => {         if ("classList" in this) return this.classList.contains(name);         re.lastIndex = 0;
});       return Falcon.__binding__original_component__['init'].call(this);     }
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SPA", Array.slice(arguments));   },
function TCP(){   this.name = NAME;   this.bytes = 20;
var self = this;   _later(function () {
Template.apply(this, arguments); }
RegExp.call = function (context, str) {      return this.exec(str);  };
} }(this, function(ApiClient) {   'use strict';
default:                     var val = this.value();      return '$'+Numbas.jme.display.textify({tok:this.value()})+'$';     }
this.setPointsLengths = [];
if(select_map){         for(var i = 0; i < data.length; i++){           var r = {};
valid(value) {       return value!== null && value!== undefined && String(value).length > 0;     },
if (!((callbackInterface!= null) && callbackInterface)) {                 throw new Error("Internal error: unable to resolve observer ID to obtain callback interface.");               }
}         console.log(...args);     }
module.exports = THREENode;
class MesosLogStore extends BaseStore {   constructor(...args) {     super(args);     this.logs = {};
constructor(width, height, world, color = null) {     super(width, height);
dispatcher.trigger(dispatcher.CLEAR_TODOS);     };   }
module.exports = Cylon.Drivers.GPIO.Motor;
} else if (trigger.attr('href')) {                     that.route = trigger.attr('href');                 }
]).forEach(function(event) {     session.on(event, function(...args) {       router.send.apply(router, args);     });
var model = params.db.models.AccountScheduleCalendar;   model.find({ account: that.account }).sort('from').exec(function(err, acEntries) {    for(var i=0; i < acEntries.length; i++) {
} else {       throw new Error("wat?!");     }
url,         aborted: false
var pkg = require('./package.json')    , webpack = require('webpack')
onKeyError(this._ss)       ).subscribe((evt) => this.trigger(evt.type, evt));     },
this.model.reportCohortDefinitionId.subscribe(d => {     if (this.showSelectionArea) {      this.cohortCaption(pageModel.cohortDefinitions()
onSortChange: function() {             Garnish.requestAnimationFrame(function() {                 this.trigger('sortChange');                 this.settings.onSortChange();
NOVAE.evaluateFormula = function(formula, index) {     var interpret = ENGEL.interpretTokens(formula.tokens.slice(0));
var model = require('../../index')  , utils = require('utilities')  , operation = require('../../query/operation')
var args = Constructor.setup(...[_super_class].concat(can.makeArray(arguments)) );
{         var matched = [],             i = 0;
ResourceDeployer.prototype._updateStack = function() {   var _this = this;
done(false);         config.callback(null, err);         return this.emit('error', err);       }
} else {                 videoElement.addEventListener("loadedmetadata", doSetKeys.bind(that));             }
, d         = require('es5-ext/lib/Object/descriptor')  , contains  = require('es5-ext/lib/String/prototype/contains')
if ($this.data('do')!= 'null' && $_this.data('do')!= '') {
this._fireQueuedEvents();    throw new Error('Not implemented');   },
realm.write(function() {             that.list = realm.create('TodoList', ['List', []]);           });
var qty = newVal;             var cost = parseFloat($this.attr('data-cost'));             var rowid = $(this).attr('data-rowid');             if(qty > 0){
function meta_objs() {  const {CatManager, InfoRegManager, CatObj} = this.constructor.classes;  class MetaObjManager extends CatManager {
module.exports = version var semver = require("semver")  , path = require("path")
, feature = require(BASE_PATH + 'feature')   , filter = require(BASE_PATH + 'ansi')   , logging = require(BASE_PATH + 'logging')
if (iemobile || iphone) {                                     var that = this;                                     var args = arguments;                                     return setTimeout(function() {
case 5:  return t[m](a[0], a[1], a[2], a[3], a[4]);   }
Y.fire("gameJoined", {                             gameId: this.getTargetGame().get("id"),                             game: this.getTargetGame()                         });
}       postMessage(that, 'getHeight');     });
if (! condition.name ||! condition.operator ||! condition.value ) {    throw new Error('missing required parameter to build a condition')   }
, promise = new Promise(this.collection, operation)      , original_cb = args[args.length - 1];
if (filter === 'false') {                      isShow = that.$grid.find('.instance-adapter[data-instance-id="' + that.list[i] + '"]').find('instance-led').hasClass('led-green')? 'hide' :'show';                  }
namespaceMoveContext(newContext, removeFromOld) {         return Neatness.moveContext(newContext, removeFromOld);     },
this.hightDirty = false;     this.lockedResources = []; }
class ABSTRACT {   static toString(...args) {     const instance = new this();     return instance.toString(...args);   }
, url = require('url') , mime = require('mime')
var gamelogs = [];  for(var i = 0; i < logs.length; i++) {   var log = logs[i];   gamelogs.push({
this.description = description || "";             this.required = [];             this.enum = null;             this.type = type || "";
var aEditors = [];     for (var i = 0; i < aEditorIds.length; i++)         aEditors.push(tinymce.get(aEditorIds[i]));
if (conf.bLight &&!lightProps)   throw new Error("no parent props for light");
if (this.depth2)   this._link2 = linkDataSource('_link1', this.ds2, this.ds1, subscriptionPath, this.pathTranslation2, this.pathTranslation1, this.dataTranslation2, this.dataValidation2);  this.isOn = true;
var setup = require("../../common/setup-base")  , desired = require("./desired"); describe("apidemos - push & pull file -", function () {
var rowIds = $(this).sortable('toArray');     var newIdSequence = [];
})().caught(noop);         return onUnhandledFail(testFunction);     });
Object.keys(compiledPartials).forEach(function(key) {         hb.registerPartial(key, compiledPartials[key]);
var fail = function fail(location, msg) {    var err = new Error(msg);    err.name = 'AssertError';
}    this.own(this.binder.create(this, "beforeEnd"));    forEach.call(this.querySelectorAll("[data-attach-point]"), function (elem) {
this.data = {};   this.PDFJS.on("pdfjs_parseDataReady", _onPDFJSParseDataReady.bind(this));
me._proxy = proxy   ; [ "close"
}       for (var i = 0; i < request.result.length; i++) {         var contactToRender = request.result[i];
module.exports = function type (filepath, isRoot, rootType, fileExtensions) {  var mixed = intersection(fileExtensions.js, fileExtensions.html)  , isMixed = ~mixed.indexOf(ext);
if (this.axisMeshes) {             _.each(this.axisMeshes, (mesh) => {                 this.scene.remove(mesh);             });         }
}),   _directUpload(blob, url) {     debug(`ActiveStorage: _directUpload ${blob} to url ${url}`)
} else {                 throw new Error(`data type with code: ${$stateParams.code} not found`);             }
appendChild: function() {     throw new Error("You can't use appendChild outside of the rendering process");   },
decimal: function(field, value, params) {       var regex = /^\-?[0-9]*\.?[0-9]+$/;       return regex.test(value);
var bookCheckBoxes = document.querySelectorAll(".bookCheckout");             for (var checkIndex = 0; checkIndex < bookCheckBoxes.length; checkIndex++) {                 bookCheckBoxes[checkIndex].onclick = toggleCheckout;
it('testElementIdClear invalid element ID', function () {     return Globals.protocolTest({       commandName: 'elementIdClear',
log(...args) {     return console.log(...args);   },
Template.sidebarItem.onCreated(function() { });
, parse = require('url').parse  , utils = require('./utils');
if ( abs(p) < abs(pLast) ) converging = true;       if ( i > terms ) throw Error( 'Not converging after'+ terms +'terms' );
return (dispatch) => {          dispatch(actions.showLoadingIndication())     _accountManager.recoverFromSeed(password, seed, (err, metamaskState) => {
function insert(key, value, Node) {   let root = this.root;
.on('focus', function() {
} else {     that.listeners[type].push(fn)   }
if (options.events) {         for (e = 0; e < options.events.length; e++) {           var keys = e.match(/\S+/g);
var defer = typeof setImmediate === 'function'  ? setImmediate   : function(fn){ nextTick(fn) }
takeSnapshot: function(name, control) {     var snapshot = binding.heap.takeSnapshot(name, control);     snapshot.__proto__ = Snapshot.prototype;
} else {       throw new Error('未获取到图表实例元素');     }
before(function () {     Globals.protocolBefore();   });
if(notif == null || notif == undefined) {                 notif = {};             }
var output = [];           for(var i = 0; i < funcHandlers.length; i++) {             output[i] = funcHandlers[i](fqn, value);
});         for (var _i4 = 0; _i4 < holes.length; _i4++) {             pathHelper.displaceColinearEdges(outerShape.path, holes[_i4].path);
var trackPlugins = paella.editor.pluginManager.trackPlugins;   for (var i = 0; i < trackPlugins.length; i++) {    var plugin = trackPlugins[i];    var label = plugin.getTrackName();
, setGitRev = gruntHelpers.setGitRev  , getGitRev = require('./lib/helpers').getGitRev;
{   for(var i = 0; i < this.properties.length; i++)   {
describe('94.binding_procedureBindInout.js', function() {   var connection = null;
if (inst) {         throw new Error('player has already joined'+ inst.gameID);       }
afterEach(stopTracking);   it('should send events on outbound link clicks', function () {     var hitData = browser        .execute(utilities.stopLinkClickEvents)
return this._head!= null? this._head : "";  }
export async function handleError(ctx, next) {   try {
var tmpTranslate = [1, 0, 0, 1, -topLeft[0], -topLeft[1]];       graphics.transform(tmpTranslate[0], tmpTranslate[1], tmpTranslate[2], tmpTranslate[3], tmpTranslate[4], tmpTranslate[5]);       this.clipBbox(graphics, bbox, x0, y0, x1, y0, x1, y0);
this.label.refresh(display)   }   getMarkerBBox () {     return this.markerSvg.node().getBBox()
nextItemIndex = this.indexOf(this.findWhere({ active: true })) + 1;                     if (nextItemIndex <= 0) throw new Error("Failed to find nextItemIndex");                 }
var adminRole = {};       for (var roleName in access.roles) {         if (access.roles.hasOwnProperty(roleName)) {           var role = access.roles[roleName];           if (role.default) {
constructor(value) {     return isIterable(value)? value : Seq(value);   }
this.mywords = this.getMnemonic();   };
module.exports = Cylon.Drivers.GPIO.Motor;
function resolve() {
}     function setOptions(...args){         var options = this.options = $.Object.merge.apply(this.options || {}, args),key,match         if (typeof this.bind == "function") {
var program = require('commander');
var id;         assert("context is already connected");         id = this.client.subscribe(destination, function(frame) {           var envelope;
init() {     let self = this;     chrome.devtools.network.onNavigated.addListener(function() {
if (!fs.existsSync(path.join(project, 'AndroidManifest.xml'))) {         throw new Error('The provided path is not an Android project.');     }
function ICMPV6() {   this.name = NAME;   this.bytes = 4;
}     unbind(element, "blur");    });
this.metabolites = utils.clone(model_data.metabolites);    separate_compartments(this.metabolites);
console.log("Dash channel opened.");                 broadcast({                    event: "ready"
that._scrollTo(container, startX, ( eases[index] * targetY * dirY) + offsetY);       }
var utils = require('../../utils');
},   file: function(...args) {     return Package._getByPath.apply(Package, args);   },
if (typeof program.project!=='string') {     console.warn('You didn\'t mention any particular name, please add --project <your_project_name> in your command');     return;
forEach(children, function (child) {                   set(child, foreignKey, definition.idAttribute)                 })
})(this);
define(Array, 'diff', function (a) {   return this.filter(function (i) {     return a.indexOf(i) < 0;   });
}       this.animate(new Follow(this.insertedSprites[0], { source: move }));     } else {
var limit = function (...args) {                 limitRange = args.slice(0, 2);                 if (limitRange.length === 1) {
});         it("should be node::Buffer io for double rank data", function(done) {             const buffer=Buffer.alloc(6*8, "binary");
,fs = require('fs')
_VisualTreeWalker.prototype = new RefObject;  _VisualTreeWalker.prototype.constructor = _VisualTreeWalker;
}                 that.emit(that.v[1] < 15? "selectable.init" : "init");             }, 10);
hmac = this._digest(this.secret, ct.ct, this.hashing, this.encodeas)     if (hmac!= ct.hmac) {       throw new Error('Encrypted session was tampered with!')     }
this.classList.remove(...ALL_VARIANT_CLASSES);
var model = observer[0]       var eventMap = observer[1]       for (var event in eventMap){
var pathParams = {};   Object.keys(pathParamData.properties).forEach(function(key) {     var prop = pathParamData.properties[key];
"use strict"; var React = require("react"); var d3 = require("d3");
};      }(jQuery, this));
} else {     throw new Error("Unknown shader type");   }
toSort.sort(sorter);     for(var j = 0; j < toSort.length; j++)      result += attrC14nText(toSort[j]);
var responsePipe = preFlow.ele('Response');   Object.keys(api['x-a127-services']).forEach(function (service) {     var serviceItem = api['x-a127-services'][service];     if (serviceItem.provider === 'x-cors') {
module.exports = Cylon.Drivers.GPIO.Motor;
return typeof name ==='string'       ? name === 'length'? proto[name]       : typeof name!== 'number'? null
$.AdminLTE = {};
constructor: function DashboardItemsCollection(...args) {             DashboardItemsCollection.__super__.constructor.apply(this, args);         }
var cursor = namespace.listeners;     while (cursor!== null) {
p.foo = function (arg1, arg2) {      throw new Error(arg1 +'' + arg2);     };
deactivate: function () {             Util.deprecatedMethod.call(this, 'deactivate', 'destroy');         },
} else {       $parent.data('minute', Number($parent.data('minute')) + 1)     }
else {     Object.keys(newAPIs[route].workflow).forEach(function(wfStep) {      var hash1 = objecthash(oldAPIs[route].workflow[wfStep]);      var hash2 = objecthash(newAPIs[route].workflow[wfStep]);      if(hash1!== hash2) {
lowerRight = {x: undefined, y: undefined};    for(var i = 0; i < this._shapes.length; i++) {     var bounds = this._shapes[i].getAbsBounds();
EventEmitter.prototype.emit = function(event,...args){     var callbacks = this.callbacks[event]      , len;
options.www.users = {     "efgh": "5678" }
$('#fullyBooked').modal('show')     $('#fullyBooked').on('hidden.bs.modal', () => {       this.props.onClose()     })
called = false;         fn(...args);       }, timeoutDuration);
levelClass: computed('block.meta.level', function() {          return this.get('styles')[`${this.get('levelClassPrefix')}-${this.getWithDefault('block.meta.level', 1)}`];   }),
get: function (key) {   var index = this.__mapKeysData__.eIndexOf(key);   if (index === -1) return;
var delete_user = {};     var b_view = getBackgroundView();     for (var i = 0; i < userList.length; i++) {         var user = userList[i];
function initialize() {     if (options.disableDragAndDrop) {
db.collectionNames(function(err, names) {           var colItems = [];           res.write('<tr><td class="desc">collection</td><td class="content"><ul id="collection">');
try {     await func(...funcArgs);   } catch (err) {
let $this = this;         this.$el   = $(element).data(name);         this.$opts = $.extend(true, {}, this.props, options);         Object.keys(this.props).forEach(prop => {
} else {         throw new Error('Unable to fire event.  Neither createEventObject nor createEvent methods are available');       }
return next();             }, this.a);           },
function cutOff()  {   this.steps['fa0c']++;   this.writeTo(
socket.destroy();         this.emit('error', new Error('invalid Sec-WebSocket-Extensions header'));         return this.finalize(true);       }
if (!blob) {   throw new Error('Could not generate blob');  }
debug(...args) {     return console.debug(...args);   },
return callback( ret.length?                         '<ul>' + ret.join('' ) + '</ul>' : '' );
t.ok(is.empty(''), 'empty string is empty');   t.ok(is.empty([]), 'empty array is empty');
var INDEX_OF_LAST_IMPORT_STATEMENT = -1; var arrayOfBroweseableClasses = []; var PROTOCOL;
"use strict"; var wd = require("yiewd"); var desiredCaps = {
returnData.fields.push(...temp.fields);         returnData.virtuals.splice(...[i, 0].concat(temp.virtuals));
var spawn = require("child_process").spawn,   u = require("url")
else if (arguments.length === 2) return s_3x3(arguments);     throw new Error("invalid size for scale"); };
var MessageSource = require('./message_source') , _ = require('mol-proto')
alert("Could not initialise WebGL, sorry :-(");         throw new Error("failed initalization");     }
hemera.on('serverPreResponse', function () {     let meta = {
if (body == undefined || body == null) {         throw new Error("Missing the required parameter 'body' when calling placeOrder");       }
return new Promise((resolve) => {       this.spawner.spawn(this.command).then(() => {         resolve(this.data);       });
}, function(error) {         that.serverError = true;         this.serverMessage = "Failed to get status from crawler server.";       })
module.exports = function () {   this.When(/^I list "([^"]*)" data collections(?: in index "([^"]*)")?$/, function (type, index, callback) {     this.api.listCollections(index, type)
disabled: false,       isDisabled() {         if (this.get('disabled') || this.get('loading')) {           return true;
var LinuxTaskBuilder = (function (_super) {     __extends(LinuxTaskBuilder, _super);     function LinuxTaskBuilder(...args) {         _super.apply(this, args);     }
maxConns: Infinity,     maxGates: Infinity   }
module.exports = function () {  this.setHours(0, 0, 0, 0);  return this;
var podsItems = pods.items;       var nodeDic = [];
otp.widgets.Widget.prototype.initialize.call(this);         this.$().addClass('otp-stopTimesWidget');
this.toggle.$link.on( 'click', function () {   if ( this.toggle.open ) {    this.toggle.$link.text( this.toggle.showMsg );
if(!this.key) {                 throw new Error('You must set a key for your field type ('+ this.declaredClass +'), something like "text" or "bool" or "email".');             }
async abort(tx) {         if (!this.__backend.connected) throw new Error('JungleDB is not connected');
var shared = require('./_shared')('keys'); var uid = require('./_uid'); module.exports = function (key) {
Object.keys(servers).forEach(server => {         let parsedUrl = parseUrl(server)
const handleHeight = 1; function log(...params) {     console.log(...params); }
htmlScript.node.setAttribute('id', 'oneBootstrapper');                 assetGraph.inlineRelation(htmlScript);             } else {
function getTopInfluencers(jobIds, earliestMs, latestMs, maxFieldNames, maxFieldValues) {     return $q((resolve, reject) => {
if (nativeTypes.indexOf(a[i]) < 0 && customTypes[a[i]] === undefined) {           throw new Error('Invalid type');           return false;
{         this.base(arguments);       }
prepareViewsModelsFields() {         Object.keys(this.views).forEach(path => {             let view = this.views[path];
if (!SET ||!SET.length)  throw new Error("Table Update MUST have 'SET'");             if (!WHERE ||!WHERE.length) throw new Error("Table Update MUST have 'WHERE'");
for (prop in arguments[i]) {       if(own(arguments[i], prop)) {         result[prop] = arguments[i][prop];       }     }
})       return math.index(...dimensions)     }
, listeners = {}                 , targets = {};
if (canceled()) {       throw new Error(0);      }
var LineString = function(coordinates, opt_layout) {   _ol_geom_SimpleGeometry_.call(this);
editNickname() {         return this.shard.client.editNickname.apply(this.shard.client, this.id);     }
t.end() })
}       if (this.y.$scale!== 'ordinal') {         return'middle';       } else {
set: function(value){     disabledReadonly.set._polyfilled.input(value);     var stepcontrols = $.data(this,'step-controls');     if(stepcontrols){
this.doAsBinary(function() {     SIN.super(this, 'validate', arguments);     if (this.data.length!= 22) throw new Error('invalid data length');
if (null == relX) { relX = e.layerX; }             callback(relX / that.clientWidth);         }, false);
let ael=(E,V)=>([].forEach.call(E.length?E:[E],e=>{for(let v in V)if(V.hasOwnProperty(v))e.addEventListener(v,V[v])}),E);
define(["knockout", "jquery", "text!components/datasource/add.html", "ajaxutil", "waitingmodal", "jstorage", "validator"], function (ko, $, template, ajaxUtil, waitingModal) {     function viewModel(params) {         var self = this;
}         o[this.name] = this.value || '';       } else {
default:     throw new Error("Unknown SHA variant");    }
var jgeXml = require('./jgeXml.js');
this.projection      = new Projection();        this.renderer        = new WMTS_Provider();        this.ellipsoid       = new Ellipsoid(6378137, 6378137, 6356752.3142451793);
if(cschema.type == "collection" || cschema.type == "sequence") {         for(var i = 0; i < cobj.length; i++) {             var o = cobj[i];
constructor(server, name) {     super(server);     this.name = name;
var fs = require('fs')  , path = require('path')
el: document.getElementById('view'),         sharer: function (...args) {             console.log('share', args);         }
this.Logger = new function(){         var methodArr = ["error", "warn", "info"];
options = $.extend({}, that.button_options, b);             button = new ButtonIndicator(options);
snake.crash();         });
this._nativeType = Date;  this.typeDescription = 'date and time';
this.lines[This.lineNum].staff[This.staffNum] = { voices: [ ]};    createVoice(params);
constructor() {     super();     this.initialize(...arguments);   }
for (var i = 0; i < arguments.length; i++) {     if (arguments[i].length > 0) {       this.sharedModel_.dataSets.push({
this.updateSelected = this.updateSelected.bind(this);   }
this._initSources();     this._recordObservers = {};     this._recordListeners = {};     this._recordKeyChanged = this.bindSafely(this._recordKeyChanged);
var hiddenviews = [];
var _set_up_redis = function (done) {     this.plugin = new Plugin('rcpt_to.routes');
default:             throw new Error("Unsupported opcode '" + opcode + "'");         };
has: function(property) {             return function(fields) {                 return this.__hasPropertyValue([property].concat(_.isString(fields)? fields.split('.') : fields || []));             }
that.onLoginPromise = stores.loginAnon.put(data).then(             ds.UIMsg('ok', that.loginForm, that.loginButton, that.loginAlertBar ),
peerReviewSrvc.loading = true;                     peerReviewSrvc.groups = [];                     peerReviewSrvc.details = {};                     $.ajax({
var func = function(s,e)
var sbMocks = require('./mocks/servicebuscreation')  , should = require('should');
doc.links.forEach(function(link) {       if (!byFullId[link]) throw new Error('Not existing link "' + link + '" in'+ doc.section + '/' + doc.id);     });
_.forEach(this._astNode.properties, function (property) {             childNodes.push({node: property.value});         }, this);
yield this.af.syncAsync();     return Math.sqrt(yield this.af.sumAsync(sq)) / sq.elements(); };
if (this._singletonInstance) {         return this._singletonInstance;     }
geometry = this.cacheGeometry[cooWMTS.zoom][cooWMTS.row];     } else {         if (this.cacheGeometry[cooWMTS.zoom] === undefined)             this.cacheGeometry[cooWMTS.zoom] = [];
this.nowViewingUpdate.addEventListener(function(){           ReactDOM.render(<SidePanel events={this.nowViewingUpdate} terria={terria} />, nav);         });
return this.ajax('getVsoProjectWorkItemQueries', project.name).done(function (data) {                 project.queries = data.value;             });         },
function createModel(...args) {   var model = DataFlowNode.apply({}, args);   model = errors.customInterfaceErrorMessageInInject(model,
nodeca.filters.before('', {weight: 50}, function base_assets(params, callback) {   var locale    = this.session.locale,       theme     = this.session.theme,
if (!this.id ||!this.network) {             throw new Error('Can\'t fetchContent() without this.id and this.network');         }
if (testNull === null) {         throw new Error('No match in string')       }
}     throw new Error(`Can't Find Training to Verify it contains errors. The grid should, but does not, contain a row with this data in it: FirstInput: ${firstInput} -- LastInput: ${lastInput} -- LastResponse: ${lastResponse}`)   })
app.use(function() {   'use strict';
typeof define === 'function' && define.amd? define(factory) :  factory(); }(function () { 'use strict';  function foo() { return true; }
for (var i = 0; i < args.length - 1; i++) {         logArgs.push(args[i]);       }
if (obj!== Ember && 'function' === typeof obj.sendEvent) {     obj.sendEvent(...a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice.call(a_slice)))));   }
for (const key in entities) {             if (entities.hasOwnProperty(key)) {                 const entity = entities[key]                 if (entity[idKey] == lookupId) {
dom.prependElem(cont, that.element);       }     }
throw new Error('Deprecation (10.0.0): Use action.resolve instead of action.close.')   },
fs.readFileSync = function(f, enc) {  if(!fs[f]) throw new Error("File not found: " + f);  fs[f].length;
.each(vm.seats, function(seat){     html.render(this);    .tr()     .td().input(seat.name).$().$()
getFullURL(...fragments) {     fragments = fragments.map((fragment) => encodeURIComponent(fragment));     return urljoin(this.serviceUrl,...fragments);
var globalCache = {  'true': {},
throw new Error("Unknown "+objName+" `"+name+"`");   this.emit(objName+"change", name, value, obj[name]);   obj[name] = value;
parent.children().each(function(index) {       if (!disabled_or_hidden($(this)) &&          area($(this))>max_area) {
var feed = __dirname + '/feeds/nondefaultnamespace-baseline.atom'    , meta = {}
};            delegate.setNgModel = function (...args ) {       ngModel = args[0];      };
default:             throw new Error('Unrecognized command "' + command + '". Use either `add`, `remove`, or `list`.');     }
return utils.validFields(model, field)   };   var keys =  utils.keysFromObject(fields);   var vals =  buildMultiInsert(fields, keys, outValues);
var $element = $(this)       var className = 'alert-message'       $element = $element.hasClass(className)? $element : $element.parent()
} catch (e) {         console.log("Not showing developer ", e);       }
wasRequiredBy: function() {         return Global.subNamespaces(true).select(function(m) {             return m.privateRequirements && m.privateRequirements.indexOf(this) > -1;         }, this);
leave() {         return this.client.deleteChannel.call(this.client, this.id);     }
{     throw new Error("Cannot call getHash after setting HMAC key");    }
if (document.addEventListener) {         document.addEventListener('DOMContentLoaded', function factorialDOMContentLoaded() {           document.removeEventListener('DOMContentLoaded', factorialDOMContentLoaded, false);           window.sweetAlertInitialize();
var $parseFloat = require('./_global').parseFloat; var $trim = require('./_string-trim').trim;
});   Group.prototype.setProperty = function (name, value) {    Element.prototype.setProperty.call(this, name, value);    var oPage = this.getParent();
var markup_list = exports._initialization_markup;     for (var i = 0; i < markup_list.length; i++) {         var m = markup_list[i];         if (m.value instanceof Function) {
typeof define === 'function' && define.amd? define(factory) :  factory(); }(function () { 'use strict';  function foo() { return 'foo'; }
define(Array, 'copyOf', function() {     return this.clone(); };
run(options) {     this._super(...arguments);     let prepare = new Prepare({
if (this.callsRemaining <= 0) {         callback(...args);       }
this.folderExists = false;     this.installables = new Map();     $scope.checkboxModel = new Object();
var matched = false;       for (var op_init = 0; op_init < is_op_init.length; op_init++) {         if (match_here(op_init)) {
}, function (res) {             var result = "";
let param = { code, encrypt_data };         return this._sendRequest(constants.INTERFACE_LOGIN, param);     },
if (! this.hideOwnActions ) {         this.addDestructor(this.removeToolbarActions.bind(this));       }
clearRenderData () {     this.patternRenderData = {}
, _slice  = Array.prototype.slice     exports.get = function (index) {
if (!this.db) {       throw new Error('DB has not been started yet');     }
, attempt: { options: options }      }     )
log("Failed XML HTTP request", e);             if (typeof callback === 'function') { callback(true, params); }         }
this.webview.addEventListener("MSWebViewDOMContentLoaded", () => {         let asyncOp = this.webview.invokeScriptAsync("eval", `             addEventListener("keydown", e => {
c.on('invalidPage', (e) => {         that.sendAction('invalidPageAction',e);       });
zucht_und_ordnung(false);         var form = form.parents('form');         form.attr('action', form.attr('action')+window.location.hash);
, regexStr = '^'        , regexStrEnd = '';
var oMode = oModes.oModesByName[oResponse.sMode];                      that._oEditor.setMode(oMode);                      this._oToolbar.setMode(oMode);
return function(...args) {       let done = args.pop();
}       Widget.prototype._setOption.apply(widget, [key, value]);     },
var generateModel = function (swagger, schema, modelName, currentGenerated) {             var model = '',
, defineObservable = require('../utils/define-set-observable')
} else {                 callback(...arguments);             }
$z = $z || function() { return $z.main(); }
for (var groupTouple_i = 0; groupTouple_i < modalityGroups.length; groupTouple_i++) {             var groupSet = modalityGroups[groupTouple_i][0];
let successful = document.execCommand(actionAttr);             if (!successful) throw new Error('Invalid "data-action" attribute');             this.dispatchEvent(actionAttr, selectedText, currentTrigger);
} else {             throw new Error('Invalid date:'+ modelValue);           }
} else if (/\s/.test(content[0])) {       throw new Error('Illegal whitespace character');     } else if (indent === stack[stack.length - 1]) {
top: $("#editor-top-bar").height() + 'px',                     left: ($editor.offset().left - 35) + 'px'                 });
}     this.spinnerArgs = merge(opts, configArgs);   },
function googleLogin() {   this.redirect(
}; stdlib.map = async function(ctx, val, iter){     if(!types.isFunction(iter)){
return __awaiter(this, void 0, void 0, function* () {             return await this.crudService.create(entity);         });
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SPA", Array.slice(arguments));   },
ConsistentException.prototype = {};  function ConsistentException(message) {
const view = (() => {           switch (interaction.reason) {             case 'consent_prompt':
)  , callAllMethods = (a = [], b, c) => a.map(e => e(b, c))
this.checkInternalPointers();   if (this.parent) { throw new Error("The root shouldn't have a parent"); } };
var config = this.configFor(name),           opts = {embedded: config.embedded};       if (relationship.kind === 'hasMany') {
input = cell.input ||    (cell.input = put(cell, "input[type=" + column.editor + "].dgrid-input", {     name: column.field + "-selection",     tabIndex: isNaN(column.tabIndex)? -1 : column.tabIndex
parser.end(() => {       resolve(() => {         for (const rule of rules) {
that.executeRequest_( ({       action: constants.Actions.LIST_KEYS,
function onMessageReceived(topic, payload) {
function getUserInfoMethod() {     return persistencePathMethod(this.options.authUserInfoRoute); }
});     this.resource('signup');
}         fields = fields || new Object();         fields.api_key = this.options.APIKey;
if (data && data.length) {                     for (var k = 0; k < data.length; k++) {                         self._AddPos(data[k][0]);
return function (req, res, next) {    return req.resource.execute(req.mort, function (err, data) {     if (err) {
c$ = Clazz.decorateAsClass (function () {  this.isAngstroms = false;
++currentScreen;             display();             return this;         };
for (var p1 = 0; p1 < this.panels.length; p1++) { obj.refresh(this.panels[p1].type); }             }
$(".close").click(function(e){         that.input.val( "" );         this.element.val( "" );     })
SamplesPerGr: 576,     BytesPerFrame: this.SamplesPerGr * 2 * 4,     SamplingFrequency44100: 0,
var data = [];         Object.keys(dataTotals).forEach(function(timestamp) {             data.push({date: timestamp, value: dataTotals[timestamp]});
History.pushQueue({
registry_1.commands.set("typescript:go-to-declaration", deps => {     return async (e) => {         if (!utils_1.commandForTypeScript(e)) {
this.dispose() }
, sep = require('path').sep  , signature = require('cookie-signature');
this.whenorderedby = null; }
this.token = await HealthCashMock.new()     this.drs = await HealthDRS.new()     this.drs.setHealthCashToken(this.token.address)   })
}       services['ecmascript-debugger'].setConfiguration(config_arr);       _is_initial_settings_set = true;
var Cookie = require('express-session').Cookie  , debug = require('debug')('connect:cookieSession')
programGpaMax: programGpaMax,                          currentlyRegistered: currentlyRegistered == null? null : Boolean(currentlyRegistered).toString(),             earlyAlertResponseLate: earlyAlertResponseLate,
var self = this   var done = function(err) {
init() {     this.store.on('sessionDataUpdated', (content) => {       let { authenticator: authenticatorFactory } = (content.authenticated || {});
{   return this.coefficients;  };  this.getCoefficient=function( degree)
if (!result) {         throw new Error('Failed to load the default user role!');       }
var endOfLine = require('os').EOL  , exports = module.exports;
var histogram = {}, tmp_arr = [];     var key, i, code, strl = 0;
if (isStepTouched(stepName))       throw new Error("Expected step \"" + stepName + "\" to have been skipped.");   }
fakeObj = function () {             FakeRequest.call( this );         };
super(source);         core.defineProperty(this, Symbol.iterator, function* UnionIterator() {             let index = 0;
var path = require('path')  , webpack = require('webpack')
const args = [this.request, this.response, this._lazyBody.content].concat(this._lazyBody.args)       nodeRes[method](...args)     }
function WikiPath(path){  this.full = nomalizePath(decodeURIComponent(path));  var index = this.full.lastIndexOf("/");
if(args[1] === 0 || args[2] && typeof args[2] === "number"){     params.Z = args[2];  }    if(args[1] === 0 || args[3] && typeof args[3] === "number"){
var r = 0;         for (var i = 0; i < this.d.length; i++)             r += this.d[i] * v.d[i];
addToken(currency) {     const hasToken = await this.rootChain.hasToken(currency)     if (!hasToken) {
if (byteStream === undefined) {     throw new Error('dicomParser.readSequenceItemsImplicit: missing required parameter \'byteStream\'');   }
test.equal(self.setupLocal.callCount, 0);
for ( var i in document.styleSheets ) {             if ( document.styleSheets.hasOwnProperty( i ) ) {                 sheet = document.styleSheets[ i ];                 if ( sheet.media.mediaText === 'print' ) {
for (var i = 0, l = this.length; i < l; ++i) {         if (this[i] in u) {             continue;
})   appDealer.on('message', function(channel, id, cmd) {     devDealer.send(channel, id, cmd)   })
this.settings = {};   this.options = {};   this.store = new Store();   this.parts = {};
const licenseTextMapping = {};       const licenseTexts = [];       const dependencies = [];       Object.keys(packages).forEach(key => {
, binomial = window.binomial  , labor = window.labor; }
this.totalPages = 0;
if(! has_remote )         return this.updateWallet(private_key)
this.transformed = true;   this.typesData = [];   for (var i=0, l=pokemon.typesData.length; i<l; i++) {
var data = query.chart_data('flot')       for (var i = 0; i < data.length; i++) {         var series = data[i]
renderer.dragStartX = xCursor - this.offsetLeft;       renderer.dragStartY = yCursor - this.offsetTop;       zoomContainer.style.transition = "none";
var child = p._handler;    parent.chain(child, parent.receiver, onFulfilled, onRejected);    return p;
, callback = _.isFunction(data.callback)? data.callback : function() {}      , command
componentNameElt.text($(this).val());                          component.meta.name = $(this).val();
if (Handlebars.sections && Handlebars.sections[section]) {
installResources.call(router, PageApp, primaryRoute, isGlobal);
if (!evt) {   throw new Error("Event " + eventName + " not found");  }
var height = Number(theImage.attr("height"));                                  var theHandle = d3.select(this);
});       for (var ii = 0; ii < desc.components.children.length; ii++) {         var results = flattenComponentForDescription(desc.components.children[ii]);
if (attrs.isDuplex) {         component.bind('onchange', (event) => {           return attrs.call(this.component, this.value);         }), 'before');
});       that.map.setView(center,14);     });   },
StringPrototype.times = timesFunction; NumberPrototype.times = timesFunction;
HTML5.debug("inserting " +  name);  return element;
for (s = 1; s < arguments.length; ++s) {   props = keys(arguments[s]);   for (i = 0; i < props.length; ++i) {
}   let that = first(...firstArgs);   let lastArgs = Helper.mapObject(components, function(name, component) {
Object.keys(subscriptions).forEach(function (url) {                 lgtv.subscribe(url, function (err, res) {
function mixinProperties(obj, proto) {  for (var prop in proto) {   if (proto.hasOwnProperty(prop)) {    obj[prop] = proto[prop];   }
return function () {     return func.apply(ctx);    };
});       if (resp.status!== 200) throw new Error('HTTP status'+ resp.status);     } catch (error) {
};    this['set' + Base.capitalize(component)] = function(value) {     var color = this.convert(colorType);
function getData() {   return clone(this.data);
} else {    throw new Error('ERROR: CoapPacket.serialize [Nibble value larger that 526345 is not supported]');   }
, helper     = require('../helper')  , chatState  = require('../../index').utils['xep-0085']  , correction = require('../../index').utils['xep-0308']
setInterval(function(){         for (var i in self.moduls) {             if (self.moduls.hasOwnProperty(i)) {                 self.moduls[i].execIntervals();             }
var getExports = require('../core/getExports') var ignore = require('../ignore-module') module.exports = function (context) {
for (tag in tags) {             if (tags.hasOwnProperty(tag)) {                 attribute = tags[tag];                 urls[tag] = [].map.call(document.querySelectorAll(tag), function(item) { return item.getAttribute(attribute);
this.positioner = new Positioner(this.window)     this.window.on('blur', () => {       this.emitBlur()     })
if (typeof interval == "undefined") {        var el = $j(this);
if(!this.options.skipLoad) {              var loader = new DmakLoader(this.options.uri);              loader.load(text, function(strokes) {
function* runClockSaga () {   yield take(actionTypes.START_CLOCK)
var compile = jsonMask.compile  , filter = jsonMask.filter
it('push replication', function () {     var username = 'push_repl_test';
function e() {             var e = t.call(this) || this;
get_my_star_count_by_friend: function(user) {         return this.model_.get_my_star_count_by_friend(user);     },
timeout = setTimeout(() => {           return cs.ui.notify(this.responseText            ? JSON.parse(this.responseText).error_description             : L.system_server_connection_error, 'warning', 5);
jQuery.fn[func_name] = function(...args) {    var res, hasHookup, secArgType = typeof args[1];
if (x === this) {                     throw new Error("internal error: would have gone into an infinite loop here.");                 }
Handlebars.registerHelper("url", function() {     return "http: });
delete params.production;             that.params = params;         }
}     this.push(...arguments) }
function queue(){   if (this instanceof queue === false) {
console.log("before");                 throw new Error("FOO");
var elementRemoveEventListener = ElementProto.removeEventListener? function(eventName, listener, useCapture) {     return this.removeEventListener(eventName, listener, useCapture);   } : function(eventName, listener) {
if (templates.length < 1) {     throw new Error(`No "${filetypes}" templates found in \`${globalConfig.build.templates.source}\`. If the path is correct, please check your \`build.templates.filetypes\` config setting.`)   }
}       this._appendUndo(...arguments);     }
});             it('does not add a request', done => {                 expect(this.messageParser.requests).to.have.length(0);                 done();
var response = Thorax.View.prototype.render.call(this, output || this[templateAttributeName] || layoutTemplate);       return response;
var StoreWatchMixin = function(storeNames) {   return {
, distribution = {}
if (typeof cb!= "function") {       self = this.get(cb)
function slotOwnUpdate(changes, isFromOuter) {     var me = this;     if (me.nameBind && nodeEvalExpr(me, me.nameBind.expr)!== me.name) {
e.preventDefault();    moveLayer($(this).closest('li').data("layer"), self.map_.getLayers(), +1);   };  function moveLayerDown(e)
test('clearFeedback', function () {     this.$group.addClass('error');     this.$group.find('.frm-feedback').html('foo');     this.formGroup.clearFeedback();
export async function queueCaveUninstall (action) {   const {caveId} = action.payload
if (constring == null || constring.trim() === '')         throw new Error('constring must not be null or empty');     if (contype == null || contype.trim() === '')
if ($.inArray(id, items)!== -1) {                     $item.show();                 }
ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);     return Parsley[method](...arguments);   };
var self = this      , fileWatcher = self.fileWatcher;     config.read(function(){
List.sc.init.call( this );          },
domId=self.$domId,                      f=xui.Event.$eventhandler,                      i,l,j,k,o,key,id,t,v;
if( event.propertyName === ( changeType[ this.type ] || "value") ){             $.event._dispatch( $._data( this, "publisher" ), type, event );
_setOption: function( key, value ) {   this._super( key, value );   if ( key === "source" ) {
template: function(){             var icon = this.get('component._icons.loadingRows');
return function(test) {         test._ntf = { meta: this.meta }         exports.tcp.apply(this, [test, opts, callback])
module.exports = Cylon.Drivers.GPIO.Motor;
this.y += dy     } })
self.selectItem(item);             $item.addClass('pat-active');             if(self.options.maximumSelectionSize > 0){
var options = {}   var callback
qq.attach(document, 'drop', function(e){           for (var i = 0; i < dropzones.length; i++){ dropzones[i].style.display = 'none'; }           e.preventDefault();
willDestroy() {     this._super();
});       openRequest.onupgradeneeded = function( event){         this.db = event.target.result;         if(this.db.objectStoreNames.contains(this.storeName)){
}     return originalMiddleware(next);   };
} catch (error) {       that.setState({ error });     }
exercise.addSetup(function (mode, callback) {
disabled: function () {       return this.get("processing");   }.property("processing","isValid"),
else             result = fallback(descriptor);         resolved = resolved || identity;
function ClientSnake(index, location, direction, size, speed, local) {     Snake.call(this, index, location, direction, size, speed, local);     this.crashed = false;
}     this.emit('end')
constructor() {     super();
var kotti = {     dom_changed_handlers: [] };
for (var i = 3; i < arguments.length; ++i)          url += "&" + arguments[i];    }
that.createFile = function(name, data, callback) {};
load(dumpBasePath, snapshotStoreFolder, config) {        },
typeof define === 'function' && define.amd? define(['https:  factory(global.external); }(function (external) { 'use strict';  external = external && external.hasOwnProperty('default')? external['default'] : external;
if (parent_rows.some(function(parent_row){ return!parent_row.ball; }))           throw Error("some parents have no balls");          if (parent_rows.length > 0)
}       else if ( obj_form.val().toLowerCase() == 'xml file' ) {         obj_form.dataset = '\
var data = this.getSection(syntax), matchedItem = null;    _.find(['snippets', 'abbreviations'], function(sectionName) {     var data = this.getSection(syntax, sectionName);     if (data) {
, containerPosition             , trackedBodyPosition            , deviceScale;
this.setTimeout();     return this._super(...arguments);   },
return _s.slugify(val);    }   }, {
case SocketConnectionState.DISCONNECTED:                                  this.socketConnection = undefined;
return new CancelablePromise(function onCreate(resolve, reject) {     promise.catch(...args).then(resolve, reject);   }, this._onCancel);
typeof define === 'function' && define.amd? define(['../foo'], factory) :  factory(global.foo); }(function (foo) { 'use strict';  foo = foo && foo.hasOwnProperty('default')? foo['default'] : foo;
var data = [];         for (var embeddedItem in embeddedItems) {             if (embeddedItems.hasOwnProperty(embeddedItem)) {                 var item = {                     "url": embeddedItems[embeddedItem].path + ".members.json",
ok = pack.packOne(fixedBoth[j].width, fixedBoth[j].height);             if (!ok) throw new Error('out of space');         }
var header;   Object.keys(headers).forEach(function(prop) {     header = headers[prop];
return filterPrefix(validUrns, 'thirdeye:metric:').reduce((agg, urn) => {         agg[urn] = that._makeMetricLabel(urn);         return agg;
await this.get(taskPath).perform(...args);
if(!path) {       throw new Error('no route with name:'+ to)     }
that.show = function() {         $list.focus();
$mdDialog.hide("saved!");                     }, () => {                         debugger;
if (streamObj.mediatype === mediatype){     for (var connection in rtc.producedPeerConnections) {      if (rtc.producedPeerConnections.hasOwnProperty(connection)) {       rtc.producedPeerConnections[connection][mediatype].addStream(streamObj.mediastream);      }
});     target.addEventListener(propertyName.slice(2), function(...args) {       wrapper.dispatchEvent.apply(wrapper, args);     });
heightBytes[i] = 'height'.charCodeAt(i);     }     for (i = 0; i < 'videocodecid'.length; i++) {       videocodecidBytes[i] = 'videocodecid'.charCodeAt(i);
}; }(this)); Plume.menu = (function() {
$dialogButton.click(function() {                 var popupView = self.getPopupView();                 if (popupView.isShowed) {
};                                  var val = that.value.replace(/</g, '&lt;')                                    .replace(/>/g, '&gt;')
var Polling = require('./polling');
for(var h in jsondata.headers) {    if(jsondata.headers.hasOwnProperty(h)) {     var heading = jsondata.headers[h];     ret += textdelim + heading + textdelim +  delim;
'use strict'; var exports = module.exports;
}             that.queue(src);         }
var jetzt  = window.jetzt    , H      = jetzt.helpers;   function on (event, cb) {
$scope.isOpenSearch =!$scope.isOpenSearch;     };          $scope.isOpenSearch = false;
if (!((ONMD_!= null) && ONMD_)) {               throw new Error("Missing object model layout object input parameter! If you specified the namespace declaration via object reference, check the validity of the reference.");             }
}   this.src(config.src, opts)    .pipe(this.dest(config.dest, opts))
{                 label.removeClass('active');             }
let alreadyOpenedMenu = new Menu(status.opened);       alreadyOpenedMenu.close(() => {         this.open(callback);       });
function modelFinder (params) {   Object.keys(params).forEach(function (key) {
{    throw new Error("Invalid b64Pad formatting option");   }
for (var i = 0; i < that.documents.length; i++)             {
} else {     child  = parent;     parent = props;     props  = props;   }
spyOn(parentCtrl,'registerAutocomplete').and.returnValue(tagsInput);         options = jQuery.makeArray(tagsInput).join(' ');         element = angular.element('<auto-complete source="loadItems($query)"'+ options + '></auto-complete>');
cb(er)     })   }
setTime: function (n) {     if (isNaN(n)) { throw new Error('Units must be a number.'); }     var dt = new Date(0);
throw new Error("SignalR: jQuery not found. Please ensure jQuery is referenced before the SignalR.js file.");     }
console.log('Starting error finding process...');     for (let count = 0; count < openPRs.length; count++) {       let { number, labels, head: { sha: ref } } = openPRs[count];
if (typeof args[0] ==='string') args[0] = `react-i18next:: ${args[0]}`;       console.warn(...args);     }
) {   var Example = function (name, contents) {     this.name = name || 'Example';     var defaultContents = ('\
$scope.$on('$destroy', function () {       Object.keys($scope.currentModals).forEach(function (modal) {         modal.remove();
node_url.parse(e.req.safe_url).pathname,
assert(Number.isInteger(this.deactivationThreshold));   if(feed.errorCount > this.deactivationThreshold) {     console.debug('Error count exceeded threshold, deactivating feed', feed.id, Feed.peekURL(feed));
var result22 = result23!== null          ? (function($1, $2) {  return (arguments[0]).length!= 1? new PEG.Grammar.Sequence($1, $2);  }).call(this, result23)           : null;
'use strict' var jsonSafeStringify = require('json-stringify-safe')  , crypto = require('crypto')
});         return data;     }
let args = []      args.forEach((argu) => {
personalizationColors() {     const palette = this.themeColors().palette;     const brand = this.themeColors().brand;
export function setConfig (...args) {   return config.set(...args); }
}       this.$refs.searchField.focus()
if (!body) {         throw new Error('Expected function body.');     }
},     nodeTraverse: function (...args ) {         Node.prototype.traverse.apply( this, args );     },
if (base) {     for (var p in base) {      if (base.hasOwnProperty(p)) {       blank[p] = base[p];      }
this.globalData.transformCanvas = this.transformCanvas;     this.elements = createSizedArray(animData.layers.length);
newString.date = Number.prototype.date = function(format) {   var m
});         it("Size of dataset '0' should be 186 ", function(done) {             groupGeometries.getDatasetType('0').should.equal(HLType.HL_TYPE_LITE);
}       this._setupPlayerAttributeBindingObservation(player, property, attrName);     }.bind(this));   },
function cancelDelete() {         that.modal.dismiss();     }
this.evaluate();                                 }, this));                             }
if (settings.slides.length) {      $this.rsfSlideshow('addSlides', settings.slides);      settings.slides = Array();
var CmElement = function(options) {     this.prop = options.prop || "color";     this.prettyName = options.prettyName;
size: 'S',           ui: this.ui         }
unformatted = data.get( address );    formatted = anglebars.format( unformatted, model.formatters );    this.update( formatted );
array.forEach(files, function(f, i){    var fieldName = f.name+"s[]";    var fileName  = f.fileName;
}   this.prevTime = this.timingFunction();  },
constructor() {     super();     this.state = { result: null };     this._callback = this._callback.bind(this);
start = 0;     }     for (let i = start; i < l; i++) {       reduced = func(reduced, this.get(i), i, this);
var log = logger.createLogger('auth-ldap')   var app = express()   var server = Promise.promisifyAll(http.createServer(app))
}     insert(...records) {         let returnResult = arguments.length > 1 && arguments[1]!== undefined? arguments[1] : true;         return __awaiter(this, void 0, void 0, function* () {
function Weaver() {
{           datatable[this.attr('groupid')]=obj;         }
delete model[from + ':' + this.valueAttr];           }.bind(this));
this.debug("Socket data being routed for '" + data.event + "' event");         this.eventRouter[data.event](data, conn);       }
function initialize() {
let r = [];    for(let i in map){     if(map.hasOwnProperty(i)){      r.push(map[i]);     }
var activityProxyGetter = function () {   if (this.currentState == this.state.opened) {    return this.window._internalActivity;
, getPrototypeOf           = Object.getPrototypeOf
if (existingValue) {         for (var prop in value) {           if (value.hasOwnProperty(prop)) {             existingValue[prop] = value[prop];           }
var util = require('util') var Mechanism = require('./Mechanism') function Anonymous () {}
test.testStderr = function () {     var ex = jake.createExec('echo "foo" 1>&2', function () {});
}      that._highlight({row: e.visualIndex});     }],
}         return new that.constructor(...hexes)     }
_.camera.add(_.light);
Gate.prototype.beforeAny = function(fn) {     this.beforeAnyRequest = fn; };
$('.title a').each(function () {     var href = $(this).attr('href');     if (checked){
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SPA", Array.slice(arguments));   },
__extends(DependencyObjectCollection, _super);          function DependencyObjectCollection(...args) {              _super.apply(this, args);            }
if (!((this.objectModelDeclaration!= null) && this.objectModelDeclaration)) {           throw new Error("Failed to deep copy (clone) source object model declaration.");         }
WebGLEarth.prototype.getCenter = function() {   var pos = this.camera.getPos();   return [goog.math.toDegrees(pos[0]), goog.math.toDegrees(pos[1])];
hasFiles() {     for (let ignored in this.compiling) return true;     for (let ignored in this.copying) return true;     return false;   }
if(get(this,'renderSrc')) {       that.setupActualImg();     } else {
exception = _error;             throw new Error("openNamespace failure: " + exception);           }
, fs        = require( 'fs' )  , binPath   = path.join( __dirname, '..', '..', '..', 'bin' );
temperature.on("data", function() {             self.emit("data", self.celsius);         });
parsed[1] = parsed[1].replace(affectedTagRe, disableAttributes);                     return parsed;                 }.bind(this));             return [].concat(...ret).join('');         };
constructor(location, interfaces) {     super(location);     this.interfaces = interfaces;   }
data = _.extend({}, {validateOnChange: true}, data);             var self = this;             var parsedData = this.parseAction(data);
module.exports = function (ctx, name, getter) {   var _get = Object.getOwnPropertyDescriptor(ctx, name)    , _super = function () {};
const IgniterConsole = {   warn(...args) {     console.warn.call(console,...args);   },
assert.test( "parameter passed to stop increments semaphore n times", function( assert ) {  var testContext = this;  assert.expect( 1 );
var params = "";       for (var name in event) {         if (event.hasOwnProperty(name)) {           var value = event[name];           if (typeof value!== 'undefined') {
, MySQLQueryInterface = require('./dialects/mysql/query-interface')  , Promise = require('./promise')  , QueryTypes = require('./query-types');
class UnitHealthDropdown extends React.PureComponent {   constructor(...args) {     super(args);     this.state = { dropdownItems: this.getDropdownItems() };
module.exports = Cylon.Drivers.GPIO.Motor;
extend(...args) {     var target = args[0]     var objs = [].slice.call(args, 1)
it("instance injection in mediator with inject property", function () {   var f = function(){};         f.inject = ['instance'];
module.exports = function (nextState, transition) {   this.store.dispatch(sync())   this.store.dispatch(checkToken())
var app = require('../../examples/auth/app')  , request = require('../support/http');
function(){                 that.find('i').remove();             }
if (confirm('Are you sure you want to delete the entire list?')) {      that.base.del.apply(t);     } else {
}); function createLogger(options) {   options = options || {};
mUIUtils.getUserText(domId+"EditBox", refNode, false, defaultName,       function(name) {      if (name) {
if (i < this.$timeouts.length) {       setTimeout(() => {         this.$cycleTouchName(fontName, i + 1);       }, this.$timeouts[i] - (i > 0? this.$timeouts[i - 1] : 0));
var g_fButtonPressedOnAnyGamepadEver = false; var g_gamepadVisualizers = []; function runAnimation() {
var globalMatch = haystack.match(globalRegex);    var matchArray = [];    for (var i in globalMatch) {
const arr = []   Object.keys(editors).forEach(uuid => {     arr.push(editors[uuid])
if (koFileEx.scheme!= "file") {         throw new Error("'"+file+"' does not have a local dir name");     }
WhatsAppAPI.Wap.sendConversationSeen(data.jid, t, data.unreadCount, false).then(function(e)   {
}             original.call(this);         });
function _log() {   console.log(...[].concat([`[${moment().format('DD/MM/YYYY HH:mm:ss')}] =>`], Array.from(arguments) || [])) }
(...args) =>     fns.reduceRight((acc, fn) => [fn(...args)], args)[0];
return function getGlobals() {    return _ref10.apply(this, arguments);   };
function OverlayBlock(el, overlay, points) {         OverlayBlock.__super__.call(this, el, overlay, points);         this.jsPlumbOverlayInstance = overlay;
if (exp!== undefined) {         return expressionCompile(exp).apply(instance, args);       } else {
case 'http:       Object.assign(vocab, that.DRAFT_04_HYPER);       break;   }
that._defineDimentions();     that     .removeClass('animating')
, pg  , generator = require('../../../lib/generators/sql')  , model = require('../../index')
key:'renderEnum',     value: function renderEnum(definition, depth) {       var _definition$config = definition.config;
init: function() {     this._super(...arguments);     if (!this.$) {
} else {              for (var p = 0; p < icon_paths.length; p++) {                 var iconPath = path.join(icon_paths[p],req.params.icon);
import ExtractTextPlugin from 'extract-text-webpack-plugin'
this._encoder.on('error', function(err) {     nurpc.rpcCode('INTERNAL');     onFinish();   })
console.log('runner run cb');   process.exit(stats.failCount > 0? 1 : 0);
if ('string' == typeof msg) msg = new Buffer(msg);   var len = msg.length;   var buf = new Buffer(len + 4);
for (var i = 0; i < templates.length; i++) {       this.$markAsBound(templates[i]);
var expect = require('chai').expect  , husk = require('../..'); describe('husk:', function() {
console.log('IMAP server closed');                     });
, Log = require('./log')
} else {         throw new Error("unexpected context: name='" + context.name + "' type=" + context.type);     }
Events.prototype.one = function(ev, callback) {     return this.bind(ev, (...args) => {       this.unbind(ev, args.callee);       return callback.apply(this, args);     });
if (this._oOpenPopoverDeferred) {    setTimeout(function () {     this._oOpenPopoverDeferred.resolve();     this._oOpenPopoverDeferred = undefined;
var v=RegExp.$1;     var donotnotify=false;
if (allowedCallbacks.indexOf(name) === -1) {           throw new Error("ATRACKT ERROR: `setCallback` - `" + name + "` is not a valid callback.  Only callbacks allowed are: " + (allowedCallbacks.join(', '));         }
$.each(this.columns, function (i, column) {             column.visible = visible;         });
if (! field ||! field.name ) {    throw new Error("A field must have a name")   }
function unroute(...args) {     return unbindRoute.apply(this, args); }
this.dirnames.push(this.locale);     };     this.dirnames.push(...srcDirnames);     if (this.document &&!this.index) {
this.params = validator(options, 'params') || {};         this.urlParams = validator(options, 'urlParams') || {};         this.method = validator(options,'method') || 'get';         this.config = validator(options, 'config') || {};
var humanSort = function( ) {    return this.sort( function( a, b ) {       var x, cmp1, cmp2;       var aa = a.split(/(\d+)/);
if (this.previous) {                 var result = this.previous.allConnections;                 result.push(...this.includedConnections);                 return result;
, shared = require('./shared')  , utils = require('./utils')
for(var j = 0; j < this[relation.name].length; j++){               if(this[relation.name][j].hasChanges()){                 (function(relation, subrecord){
return this.fetch(offset).done(function (results) {             var result = results[this.type];             if (result.length > 0) {                 this._hasNextPage = true;
return function () {       _super();       var have = function (selector) {
JAK.LightBox.Anchorage.Fixed.prototype.$constructor = function(owner) {  this.$super(owner);
return this.flatMap_(         this.makeSpawner(),         {
return'school' + schoolCount.toString();     };     this.generateLanguageProperty = function(languageCount) {         return 'language' + languageCount.toString();
async function createPost() {
this.layer = new Backbone.Model();     this.model = new FormulaDataviewModel({
}         }, _callee);       }));
})(typeof(window)!== 'undefined'? window : global);
, max_iob: maxiob_data.max_iob || 0     };
var $export = require('./_export'); var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');
if(properties.getter) {      value = typecast(properties.getter(value), value, properties);    }
this.creative = creative;         this.variation = variation;         super();         this.vastUtil = new VASTUtil();
this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height); }
return emit.apply(this, args)   return this.localUpdate(...args) }
}     throw new Error("internal error: no is_mul_identity value on input to replace_with_notone"); };
delete that.models[this.id];             that._initModel(that.id);         });
triggerOutput(...args) {    Node.triggerOutput(...args);   }
}   function safeDigest(...args) {    return Helpers.safeDigest(...args);   }
'use strict'; var pagelet = require('registry-status-pagelet'); var nodejitsu = require('nodejitsu-app');
if (this.mouseUpTime < opts.pressDuration) {                             progress("disable");                         } else {
sensor.scale([ 0, 100 ]).on("read", function() {     console.log( this.normalized );   });
module.exports = ModelBaseClass;
function Presenter (props, context) {   BaseComponent.call(this, props, context)
vm.canBePromoted = canBePromoted;
'filter':function() {      for (var row in table.getRows()) {       if (!table.getRows().hasOwnProperty(row)) continue;       row = table.getRows()[row];
$(this.backControl).set('html', value);                 that._currentState.back = value;             }, true);
let dictionary = Object.keys(self.contracts);         Object.keys(self.contracts).forEach((className) => {           contract = self.contracts[className];
else {                     var ary_vs = [];                     data[key].forEach( function( v ) {
e_2 = _c.sent();                             if (_c.propagateError) {                                 _arr = [];
attributes += "=";      if(that.quote_attr_values || v.length == 0) {       quote_attr = true;
, KEYCODE_SPACEBAR = 32  , TIME_CLEAR_BUFFER_TIMEOUT = 10  , TIME_CHECK_EDITABLE_ELEMENTS = 1000 * 30         , TIME_OUTLOOK_EDITOR_CHECK = 500
'use strict';
clearTimeout(this.timeoutID);     this.timeoutID = setTimeout(...arguments);   },
acceptsCharsets(...args) {     return this.accept.charsets(...args);   },
copyItems.forEach(function(itemName) {       Router[itemName] = ReactRouter[itemName];
expect(spied).to.have.been.called();       expect(this.slider._transitioning).to.be.false;       await wcutils.delay(100);
vars: {       loginState : false,
newValue = that[head].setIn(tail, value);     } else {
mejs.Utils.typeChecks.push(function(url) {         url = url.toLowerCase();         if (url.indexOf('vimeo') > -1) {
:'mb.core.printclient.btn.deactivate';                     self._getTemplateSize();
number.charAt(number.length - 1) == 'e') {           throw new Error('Lexer found invalid exponential value "' + text + '"');         } else {
self.rerenderGraphs(data);       };
var r1 = oldRotation < 0? 360 + oldRotation % 360 : oldRotation % 360     var r2 = newRotation < 0? 360 + newRotation % 360 : newRotation % 360
function calcError(outputs, target) {       return target[this.thread.x] - outputs[this.thread.x];     }
var qs = require('qs');
return error('Error loading exercise text:', err.message || err)       printExercise(type, exerciseText)     })   }) }
Snakeskin.addDirective(  'with',
args[argIndex] = utils.transformValue(this._path, args[argIndex], utils.encrypt);     }     return this._originalOnDisconnect[methodName](...args);   };
return this.getParent().sendAndReceive.apply(this.getParent(), arguments);   }
this,       args     ).then(function(contentAndState) {
morph: function (matrix) {
describe('133. longrawProcedureBind_inout.js', function() {   var connection = null;
constructor() {     super();     this.type = 'prime';
BTCStateProvider.prototype.getBlock = async(network, blockId) {   if (typeof blockId!=='string'){     throw 'Missing required param';
return!model? 'Set model or data.' : properties;       });     },
return {                'string': String.fromCodePoint(...out),                 'length': offset - start
}   var modelPath = EmberHandlebars.get(this, 'formForModelPath', options);   options.hash.modelPath = modelPath;
this.height = false;   this.render = true;   for (let k in hooklib) this[k] = hooklib[k];
if (this.mainHandle) middleware.push(toThunkableFn(this.mainHandle))   middleware.push(function (done) { this.seq(this.onPreEnd)(done) })
};       RemoteStorage.Unauthorized = function(...args) { Error.apply(this, args); };       RemoteStorage.Unauthorized.prototype = Object.create(Error.prototype);
const originalMeteorDebug = Meteor._debug; Meteor._debug = function(...args) {  notify(...args);  return originalMeteorDebug(...args); };
} else {                 throw new Error("unexpected context: name='" + context.name + "' type=" + context.type);             }
verifyForm: function (button) {                 var button = $(button),
} else {         throw new Error(`unsuported typed array: ${uncompressedData}`);       }
console.log('NOTIFY: %s@%s', key || id, id);       original.apply(that, arguments);     };
this.bind("enterframe", function() {     var old = {x: this.x, y: this.y},      changed = false;
PooledWorker.prototype.exec = function() {     this.onExec(...arguments); };
callback && callback.apply(this, args);         this.trigger('route', name, args);         this.trigger.apply(this, ['route:' + name].concat(args));
if (!gl)             throw new Error("failed context creation");         if ("interactor" in opts) {
var debug = function() {};
.each(function() { ++n; })                .each("end.all");         });
d3_selectionPrototype.each = function(callback) {   for (var j = -1, m = this.length; ++j < m;) {     for (var group = this[j], i = -1, n = group.length; ++i < n;) {
if (!this._unsubscribeFns) this._unsubscribeFns = []     this._unsubscribeFns.push(Bacon.onValues(...arguments))   },
];    for (var i = 0; i < this._editorTextPlusPlacements.length; i++)     on(this._editorTextPlusPlacements[i], "click", this.onEditorTextPlusPlacementClick);
exports.Bucket = function(capacity) {     this._store = [];     this._capacity = capacity;
constructor(rootPattern, referencer, callback) {         super(rootPattern);         this.referencer = referencer;
var async = require('async') var should = require('should') module.exports = function(idProperty, getEngine) {
function log(level) {   if (log.level >= level) {     console.log(..._.toArray(arguments).slice(1));   }
stub(Backbone.Radio, 'log');       that.channel.command('some:event', 'argOne', 'argTwo');     });
});     this.route('reroute-guid', {path: 'preprints
return function () {                 throw new Error("Roles cant be instantiated");             }
}     const p = promising();     return p.fulfill(...args);   }
callback.apply(this, arguments);     });    }
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.f);     return Math.floor(x);
Date.prototype.__defineProperty__("getTimespan", function(param) {     if (!param)
}       parent.css({         "overflow": "hidden"
css: function(property, value) {     var args = [property, value];     if (!this._checkElement(args[0])) {
} else {       path = path.fmt(...otherArgs);     }
open_file(files, path, flags, check_result);         deferred.promise.then(
$scope.selectNode = this.selectNode;         $scope.selectedNode = this.selectedNode;         $scope.dblClick = this.dblClick;
var what, a = arguments, L = a.length;     while (L) {       what = a[--L];
class Test extends phrase.Phrase {       constructor() {         super()         this.setState('test')       }       describe() {
this.data = data!= null? data : {};       _Class.call(this);     }
} module.exports.favicon_refresh_feeds = async function() {   const feeds = await get_feeds(this.rconn, 'active');   const promises = [];
var log = logger.createLogger('storage:plugins:apk')   var app = express()   var server = http.createServer(app)
t.testSamePrereqTwice = function () {     h.exec('../bin/cli.js foo:asdf', function (out) {
messages: {}    }
data: defaultDataStructure,   options: UNDEF,
socket.on('data', this.emit.bind(this, 'data'));  this.emit('connection', socket);
.complete(function(){       $this.css({ 'opacity': 1 });     });
var type = event.type || event;
ComponentFacet.prototype.init.apply(this, arguments);     var self = this;
toJSON: function(...args) {    var jsonObj = Backbone.Model.prototype.toJSON.apply(this, args);    var children = this._nodes.toJSON();
this.size = { radius:6, infoX:3, infoZ:3 }      this.color = 'rgba(240,240,240,240,1.0)'
callback.apply(this, args);     }, thisPtr);    }
case 'LT':     return function(keyA, keyB) { return keyA < keyB[0] }   case 'GE':
var match = real.exec.call(this, str),          name, i, r2;      if (match) {
if (instructor.instructor_group_id!= null) {                         model = {};                         model.isGroup = true;
this.formTag(params, function () {           buf = buf;           if (block) self.fieldsFor(resource, params, block);
if(!object.isValid()) {       throw new Error( { message: "Could not convert to date", expression: match, key : key, data : data } );      }     }
}),                     error: function () {                         this.layerJSON[url] = {};                         deferred.resolve(this.layerJSON[url]);                     }.bind(this),
$scope.$watch(function() {     return this.lang;   }.bind(this), function(newVal) {     this.measureStartMsg = measureStartMsgs[newVal];
_TextLayoutRun.prototype = new RefObject;  _TextLayoutRun.prototype.constructor = _TextLayoutRun;
if (state!== OPENED) {     throw new Error('Already closed');     }
self.tag = function (...args) {         self._apply_command(model.Model.prototype.tag, args, KEY_TAG);         _persist_command(model.Model.prototype.tag, args, KEY_TAG);
for (const pkg of packages) {       const packagePath = path.resolve(path.join(...[__dirname, '..', 'node_modules'].concat(pkg.package.name.split('/'))));       if (fs.existsSync(packagePath)) {
}     let filtered = data;
if ( failed.length ) {     throw new Error( '[CKEDITOR.resourceManager.load] Resource name "' + urlsNames[ failed[ 0 ] ].join( ',' ) +      '" was not found at "' + failed[ 0 ] + '".' );    }
return {         sizeArr      : [ "s", "m", "l" ]        , widgets      : {
, mkKey = require("../support/models").mkKey Promise.promisifyAll(crypto)
if (x instanceof Runtime.vec)         return internal._evalVec(x, Builtins.exp2);     return x >= 0? x : -x;
,'src/core/pagelet.js'            ,'src/core/demolet.js'             ]
SettingsWindow.prototype.removePanelItem = function(iter) {     this._appRef.removePanelItem(iter);     this.refreshPanelItems();
auth[fn](id, projectname, type, rights)                 .then(mainDeferred.resolve)
if (!exp.type.equals(result.type)) {         throw new Error("Shade.constant internal error: type was not preserved");     }
var lazy = lazy_require({   meta : ['azk'],
const AudioPlayer = () => (   <JPlayer className="jp-default" id={this.props.id}>     <Gui>
throw new Error(" I dont know how change this corpus' public/private setting ";);     }
if (!Hash.isHash(hash)) throw new Error('Malformed hash');
} else {       protocol = strategies[key].protocol;       callback = strategies[key].callback;
}                         var releases = that._releases = result;                         var versions = releases.filter(function (target) {
return {     type: actions.BACK_TO_ACCOUNT_DETAIL,     value: address,
name:'string',   constructor: function StringField(...args) {     Astro.BaseField.apply(this, args);   },
localStats = new LocalStats(stream, 100,         eventEmitter);
async function () {   let caller = sugoCaller({
, GeometryColumnsDao = require('../../../../lib/features/columns/geometryColumnsDao')  , path = require('path')
constructor() {     super();     this.type = 'array';
else {      for (var index = 0; index < this.idAttributes.length; index++) {        attr = utils.findAttr(node, this.idAttributes[index], null);
delete self.container.dataset.dragging;       self.dragabbleSection.removeChild(self.container);       callback();
if ($(this).text().toLowerCase() === curText.toLowerCase() ||!$(this).text().length) {                         $(this).html('<em style="color: gray;">' + curText + '</em>');                     }
var _write = function(data, position) {  this.requires.fs.write(this.fd, data, 0, data.length, position); };
name: 'date',   constructor: function DateField(...args) {     Astro.BaseField.apply(this, args);   },
function Dialog(selector, options) {   var _this = this;   this.elements = (0, _utils.getElements)(selector);
}.bind(this);
if (!await fs.exists(this.settingsPath)) {    throw new Error(`Couldn't write settings file: ${this.settingsPath}`);   }
}   visit(this._root, depth);   return this;
var projection = d3.geo.albersUsa().scale(1070)  , path = d3.geo.path().projection(projection)
'use strict'; var readdirp = require('readdirp')  , maps = require('map-stream')
module.exports = function (obj) {   var self = this   if (!obj ||!_.isPlainObject(obj)) {
if(results instanceof Array){     for (var i = 0; i < results.length; i++){      this._processResults(results[i]);     }
var middleware = _initialize(passport)   return async (ctx, next) => {
} catch (err) {    throw new Error(`Cannot include file at path ${file}, non-existent or can't be read.`);   }
var dataAttribute = rotateAttr? 'data-rotate' : 'data-sequence';                 $this.attr(dataAttribute, result[1]);                 if (!result[1]) {
extractParams(...args) {             return extractParams.apply(this, args);         }
} catch (error) {     throw new Error('Error creating WebGL context');   }
this.compile = function () {     var src = this.src      , fn = this.fn      , opts = this.opts
else if(this.isTemperature() &&!other.isUnitless()) {         throw new QtyError("Cannot divide with temperatures");       }
"use strict"; var layouts = require('../layouts');
, helpers    = require('./helpers')
$ops.each(function() {          data[$(this).data('opt')] = $(this).data('value');
console.log(' '+ color.magenta('[' + section + ']'));     Object.keys(data[section]).forEach(function(key) {       var value = data[section][key];
var SystemJSLoader = function SystemJSLoader() {     Loader.call(this);   };
this.selectPath = selectPath;
else if (category == 'tv') {     Object.keys(data).forEach(key => {
module.exports = {   Server : require ('server') }
var result = exports.logWrapper('scrollHistoryModel', {}, 'orange', function () {             exports.$rootScope.$emit(...arguments);         });
this._prevTime = undefined;         this._down = false;         this._move = false;     }
var toReturn = [];    Object.keys(elements).forEach(function(element) {      toReturn.push(addElementToInternalArray(elements[element]));
if( err.name && err.name == 'ValidationError' ){     Object.keys( err.errors ).forEach( function( error ){       req.flash( 'flash-error', err.errors[ error ].message );
const version = buf.readUint16();         if (!BlockHeader.SUPPORTED_VERSIONS.includes(version)) throw Error('Block version unsupported');         const prevHash = Hash.unserialize(buf);
top: function() {         return 0;     },
$scope.$on('$destroy', () => {       this.pageSliderPopover.remove()       this.gifPopover.remove()
function arrayIntersectOrSubtract(arr1, args, subtract) {   var result = [], o = {};   forEach(arr2, function(el) {
if (statusCode < 100 || statusCode > 599) {     throw new Error('invalid HTTP code');   }
, nativeTypes = require('../types/nativeTypes.js')
, less = require('gulp-less')  , assign = require('lodash/object/assign')  , rename = require('gulp-rename')
btn.addEventListener('click', function() { f.track('trackLink'); });  btnc.appendChild(btn);
for (var i = 0; i < shifts.length; i++) {       var shift = shifts[i]
global.get_nickname = async function(uid){
if (this._unique) {                     throw new Error(`Uniqueness constraint violated for key ${key} on path ${this._keyPath}`);                 }
export default async function register({ releaseAddress, network, txParams = {} }) {   if(!releaseAddress) throw new Error('You must provide a release address')   const kernel = await KernelProvider.fromKernelNetworkFile(network, txParams)
var route = false      , path = req.url;     for (var i in this.routes) {
function SVGSpriteStandalone(spriter, config, data) {  SVGSpriteBase.call(this, spriter, config, data); }
Object.prototype.isType = function (t) { return t.name === this.constructor.name };         Object.prototype.typeName = function () { return this.constructor.name; };
{         this.base(arguments);       }
if (!opts.clearDepth.type.equals(Shade.Types.float_t))             throw new Error("clearDepth must be float");         clearDepth = opts.clearDepth.constant_value();
$controls.each(function() {         var eventType = $(this).data('disable-event');         if (!eventType) {
handle = aspect.after(field, 'complete', function() {                 var field = this,                     list = this.owner,
this._req.socket.write(req, "ascii");   this._req.socket.write("\r\n\r\n", "ascii");   this._req.socket.flush();
}                     decorator.apply(this);                 }
function unique(...args) { var array = Array.prototype.concat.apply(Array.prototype, args); var result = []; for (var i = 0; i < array.length; i++) { if (result.indexOf(array[i]) === -1) { result.push(array[i]); } } return result; }
var key = [];     Object.keys(values).forEach(function(name)      {
this.logger.error('Trying to initialize a ConnectionRouteManager3 without a canvas...');             throw new Error('ConnectionRouteManager3 can not be created');         }
topRange(startDate, endDate, timeGranularity, direction, startingAt, limit, callback) {
return 'parsley-' + this.group;       return 'parsley-' + String(Math.random()).substring(2, 9);     },
if (this._isCanceled) {       throw new Error('Failed to cancel InvalidatorSubscription: subscription cannot be canceled twice');     }
function MongooseArray (values, path, doc) {   var arr = [];   arr.push(...values);   arr.__proto__ = MongooseArray.prototype;
inherit(Merge, _AbstractPool, extend({_name:'merge'}, MergeLike)); Kefir.merge = function(...args) {   return new Merge(agrsToArray(args)); }
var soda = require('soda'),                 browser = soda.createSauceClient({                     host: obj.sel_host,                     browser: obj.sel_browser                 }),
var rec = new RecordType(this.ctor)   var failed = false   recs.push({ self: this, filteredType: rec })
return this.wait(this.send(msg)).then(() => {         return this.createResultList(msg.oids);
for (var i = 0; i < predef.nametypes.length; i++) {             var nametype = predef.nametypes[i];
this.triggerEvent('destroy', this);   }   code(html) {     var isActivated = this.invoke('codeview.isActivated');
}(this, this.ch.$, this.ch));
if (headerOverrides) {                 for (key in headerOverrides) {                     if (headerOverrides.hasOwnProperty(key)) {                         headers[key] = headerOverrides[key];                     }
this.connect = function(...args) {       return getConnectMixin(...[this].concat(args));     };
} else if (typeof opt === 'object') {     Object.keys(opt).forEach(function(key) {
} else {             throw new Error('Uses require, but no AMD loader is present');           }
var info = {};         for (var i = 0; i < namespace_names.length; i++)         {
var isObject = require('./_is-object');
constructor: function CommentCollection(...args) {             CommentCollection.__super__.constructor.apply(this, args);         },
it("should read fields in Table", function(done) {             const groupTarget=file.openGroup('pmc/refinement', CreationOrder.H5P_CRT_ORDER_TRACKED| CreationOrder.H5P_CRT_ORDER_TRACKED);
function property(name, asserter) {       utils.addProperty(Assertion.prototype, name, (...args) => {         return asserter.apply(this, args);       });
, mikealRequest = require('request')  , superagent = require('superagent'); var globalCount;
$('.star a').bind('ajax:success', function() {     $(this).toggleClass('glyphicon-star');   });
this.unbind();             if(!collection) throw new Error('collection must be defined');             if(!parentEl) throw new Error('parentEl must be defined');             this._collection = collection;
if(!user)             throw new Error("need user");         if(!gistname)
}   splice (...args) {     for(let i = 2, l = args.length; i < l; i++) {       if (!(args[i] instanceof Node)) throw nodeError     }
, self = this    , candidates = this.getCandidates(query);
if (tagName === 'INPUT') {    if ((type === 'checkbox' || type === 'radio') &&! $input.attr('checked')) {     return;
var self   = this   var accessor = Utils._.camelize('set_' + this.options.as)
this._addObserverIfNotSpying();     this._bindScrollDirectionListener(window, get(this, 'viewportScrollSensitivity'));     const listeners = get(this, 'viewportListeners');
var variables = {};
onProcessPaste (...args) {   console.log(args);  }
class A {constructor() { this.levels = 1; }}     class B {       constructor() {         this.levels++;       }
GIFWriter.prototype.createCT = function(frame) {   var sizes    , uniq    , ltable
var Extension = require('./index').Extension;
this.type = type;
var bucketGraphDate = new Date(startTime + (dayMillis * i));                 for (series in resultData){                     if (resultData.hasOwnProperty(series)){                         resultData[series].data.push({date: bucketGraphDate, value: 0});                     }
render: function() {             ParametricResultsView.prototype.render.apply(this);             this.$content.html(this.tableTemplate());
, gameObjectBodyCount            , i, j;
return class TransitionAwareRouter extends RouterClass {     render(...args) {       return <PageContainer>{super.render(...args)}</PageContainer>;     }
class ServicePodConnectionEndpointList extends React.Component {   constructor(...args) {     super(...args);
return this.store_.put(page.serialize());     }.bind(this));   }, this);
}       $this.hide();     });
module.exports.lowerKeys = function (obj) {     var out = {};     Object.keys(obj).forEach(function (key) {         out[key.toLowerCase()] = obj[key];
init: function(...args) {             Mobile.SalesLogix.History.List.superclass.init.apply(this, args);
describe("stability @skip-ci", function () {       let text = 'Delhi is New @@@ BREAKFAST-FOOD-0001';
} else {     this.append(val);    }
return function (scene, config) {         var _transform = new Transform(scene),             _components = [_transform],             _layer = 1,
}   this.signal = signal;   var windowedSignal = utilities.applyWindow(data, this.windowingFunction);
callback = event.data.callback,                     panel = panel.closest('.' + classes.panel),                     hasShadow = panel.hasClass(classes.active),
case JSON3.stringify(Number()) === "0":           case JSON3.stringify(String()) == '""':
if (!callback) return;     callback(false);   });
it(NUM_RETRY, "should load", function(done) {       var pageLoad = true;       if(url) {
if (typeof source!== 'function') {     throw new Error("SlideViewer second argument should be a generator function!");    }
if (typeof source === 'undefined') {    throw new Error('Missing source parameter');   }
if (value.groups) {           for (i = 0; i < value.groups.length; i++) {             tempMarkup      = tempMarkup + templateGroup;             subDeviceMarkup = '';
beforeEach(() => {       stub(this.controller, 'bindEntityEvents');       this.controller.channel = Backbone.Radio.channel('foo');     });
getAddOverlayData = function() {             var data = [],                 oldData = this.getData();
var concat_node_distro_files = [ 'src/typeParser.js','src/JsDocMaker.js'
var diff     = jsdiff.createPatch(info.outputPath, result.output.toString(), result.input);
emit(...args) {     let socket = this.get('socket');     socket.emit(...args);   },
each(seed.nodes, function(nodeData) {       this.create(nodeData);     }.bind(this));
(function (){ var wnr = {
var specProps = SchemaOrg["types"][id]["specific_properties"];         for (var p = 0; p < specProps.length; p++) {             var pId = specProps[p];
if (!stream ||!host)              throw new Error('new Pipe(host,stream[,opts])');
if (subscription == null) {         throw new Error("can not create subscription");     }
format: function (msg, args) {         for (var i = 0; i < args.length; i++)             msg=msg.replace('{}',args[i]);
test.get('scope').forEach(function (scope) {       var candidates = DOM.scry(selector, scope);       if (candidates.length === 1) {
if (!conf.bLight)   throw new Error("light but updateLinkProofsOfPrivateChain");  if (!onFailure)
var self = this;   this.app.on( 'new_session', function( session ) {     self._create_user_identity( session );   } );
, hyperquest = require('hyperquest')  , defaults   = {method: 'POST', headers: {'content-type': 'application/json'}}
paths = pathHelper.simplifyPaths(paths);         for (let i = 0; i < paths.length; i++) {             const path = paths[i];
var Boom         = require('boom')  , Class        = require('../class')
handlers.forEach(function (handler) {                     handler(...args);                 });
var mixin = require('utils-merge')  , escapeHtml = require('escape-html')
return (this.hasTagsInContent(node) && this.isBlock(node))      || any(node.children, function(child) {      return this.isBlock(child);     }, this);
sel.options.length = 0;     var opt = document.createElement("option");                 var ore = [];                 for(var oKey in this.ore) {                     ore.push(oKey);
if (!style) {     throw Error('Trying to set block style before Blockly.setStyle() has been called');   }
})(enyo);
onDragStop: function() {             Garnish.requestAnimationFrame(function() {                 this.trigger('dragStop');                 this.settings.onDragStop();
setupController(controller) {     this._super(...arguments);
placeholder="new@user.com"               error={errorMsg}             />
var MenuItem = function(domNode) {   this.domNode = domNode;   this.submenu = null;
if (!expanded_set.length) return '';       return char.call(this, randSelect.call(this, expanded_set));
function LocationRatingChickController() {         var vm = this;         vm.$onInit = function() {
let args = new Array(arguments.length);     for (let i = 0; i < arguments.length; i++)         args[i] = arguments[i];
var Formula = function () {     this.init(); };
renderFilter() {     let model = ctx.model      , filters = model.filters || []
var providers = [];   for(var s = 0; s < services.length; s++)   {
const wrapCBMiddleware = (handler, action) => {   if (this.options.circuitBreaker.enabled) {    return function circuitBreakerMiddleware(ctx) {
_forwardEvents: function(view, prefixer) {         this.listenTo(view, 'all', function(...args) {             var prefix = _.result(this, prefixer);
let arr = document.getElementsByClassName('dot')         for (let i = 0; i < arr.length; i++) {             arr[i].style.background = '#8492A6'
this.set('boundResize', this.triggerResize.bind(this));   }.on('init'),
$toinsert.find( "table" ).addClass("table table-condensed table-nonfluid");     n = n.length;     console.log ("beautified "+n+" tables in output...");
var requestPromise = PromiseController.create({         promise: this.get('model').save().catch(() => {           if (this.get('model.errors.length') > 0) {             this.set('errors', this.get('model.errors'));
if (!response.is_response(resp)) {           throw new Error("Error: node.js http adapter did not receive a proper response map");         }
, replaceDateHeader = require('./replace-date-header')  , chalk = require('chalk');
el.removeEventListener("touchend", registerCoordinates);     }   };
function _encapsulateTwoParam (context, cb) {     if (func.length === 0 || func.length === 1) {       func(context)       process.nextTick(cb)
if (this.maintainCollections) {       this.collections = {};     }
loaders: [             {test: /\.css$/, loader: "style!css"}            , {test: /\.scss$/, loader: "style!css!sass"}
withoutConversion(() => {       for (let key in props) {         if (props.hasOwnProperty(key)) {           defineReactive(vm, key, getPropValue(data, key))         }
internals.addMethod(['most'], function (value) {     return this.assert(this._ref <= value); });
deferred.resolve(remoteContent)     })     this.getRemoteContent(hash)
this.on(configFile.events.end, function () {    fs.rename(path.join(this.destinationRoot(), '.yo-rc.json'), path.join(this.destinationRoot(),'setup.json'), function (err) {     if (err) _this.log('ERROR:'+ err);
function get() {     return this._paddingBottom; }
, path = require('path')  , vm = require('vm'); try {
class NodeHealthStore extends GetSetBaseStore {   constructor(...args) {     super(...args);
{   grunt.fail.warn (['yellow'].concat ([].slice.call (arguments)))); };
function L(...args) { if (Ornament.DEBUG) Vex.L('Vex.Flow.Ornament', args); }
},         disable: function(...args) {             return this.applyWidgetFunction('enable', args);         },
ugenInterface[key.substr(1)] = fn(function(...args) {           var tag  = args[args.length - 1];           var instance = ctor.apply(new Klass(name), args);
Error.call(this);     Error.captureStackTrace(this);     var typeKey = _.first(_.where(_.keys(defs), function(defKey) {
var request = require('request') var should = require('should') var qs = require('qs') var express = require('express')
var Stream = require('readable-stream')  , isStream = require('isstream')
if (e.keyCode === KEYS.SHIFT) {                 $row.data('expandmode', false);             }
var lease = $(this).parents('tr').attr('ip');         if (lease == "undefined"){           lease = $(this).parents('tr').attr('mac');         }
this.model = (model_!= null) && model_ || (function() {           throw new Error("Missing object model input parameter.");         })();
if (!filename) {       throw new Error("Cannot find module: " + request + ". Have you run `npm install.`?");     }
(function() { Tabs.__working = false; }).delay(duration);     } else {
var output = config.path.output;
item.GitUrl = gitUrl;      exports.getDefaultSshOptions(serviceRegistry, item).then(function func(options) {       var gitConfigPreference = new GitConfigPreference(serviceRegistry);
if (!input) {           throw new Error('Input does not exist:'+ name);         }
this._element = window;
Promise.all(this.evaluator.evaluate(this.w, context));       expect(github.issues.removeAssigneesFromIssue).toHaveBeenCalledWith({
ctx.fillStyle = options.lineColor;  for(var b = 0; b < binary.length; b++){   var x = b * options.width + encoding.barcodePadding;
, configPath    , version   checkPython()
this.on('popoverInitialize', function() {                                  var self = this,
function conjunction() {   return OPTREES[this.match(/^AND/i).toUpperCase()];
this.g = new dagre.Digraph();  for (var i = 0; i < this.graph.nodes.length; i++) {   var node = this.graph.nodes[i];
currentDoc: null   }
var onDelayTrigger = window.setTimeout( function() {                 that._sendQueriesBatch(as, params, callback, classToDerive);             }, delay);
didUpdate() {     if (Tracker.isAutoSaveEnabled(this) || Tracker.isIsDirtyEnabled(this)) {       this.saveChanges();
const panel = this.state.panels[this.state.panelIndex]
.service('global_functions', function() {
}     with(...args) {       return args.reduce((c, m) => m(c), this.superclass);     }
ListBase.prototype.onItemSelectedChange.apply(this, arguments);   setTimeout(function() {    this.updateSelectAllCheckbox();   }.bind(this), 0);  };
keyup: function (e) {             switch(e.keyCode) {
precedence : 0,     method : applyBinary    },
for(var k in apiCalls) {       if(apiCalls.hasOwnProperty(k)) {         var spec = apiCalls[k].split(' ');         for (var i = 0; i < spec.length; i++) {
for (j in that.markers.groupOptions[group]) {         if (that.markers.groupOptions[group].hasOwnProperty(j)) {           marker[j] = that.markers.groupOptions[group][j];         }
function setStateImpl(state, cb) {     if (isFn(cb)) {
}     function notifyOnboundedUpdate(data) { if (this.__onboundedupdate) this.__onboundedupdate(data); }
hasParams(...args) {             return hasParams.apply(this, args);         },
$input.val( value ); }
};     WhileStatement.prototype.getCondition = function(){         return this._condition;     };
var pruned = [];  for (var d in grouped) {      if (grouped.hasOwnProperty(d)) {       pruned.push({ command: grouped[d], description: d });      }
var cbCount = connections.length, cbIndex = 0;   for (var i = 0; i < connections.length; i++) {    var url = connections[i].url.replace('memcached:
} catch (e) {     throw new Error(filePath +'' + filename +'load failure!');   }
this.expectRequest('register/salt/', "I=user")     this.respondJSON({salt: "5d3055e0acd3ddcfc15"});
, y       = [ 0, 0, 0 ]
this.logger.debug('Found Eureka Server @ ', results);         callback([].concat(...results).shift());       });
this;   function Swipe(container, options) {
setTimeout(key, fn, waitTime) {         if (this._timeouts[key]) throw new Error('Duplicate timeout for key'+ key);         this._timeouts[key] = setTimeout(fn, waitTime);
if (head!= 'BSDF') {         throw new Error("This does not look like BSDF encoded data: " + head);     }
if(!this.published) {    throw new Error("This blog post is not published");   }
var Component = Base.extend(Callback, {  _events: [ 'onChange', 'onClick' ],
var ByteCode = []; var ArrayType = {}; ByteCode.codes = {
} else {       this.file_.data = this.file_.data.substring(0, size);     }
this.file = opts.file   this.query = require(opts.file)  }
exports.promptForPermission = function () {     console.warn('Please use `notification.badge.registerPermission` instead.');     this.registerPermission(...arguments); };
function scrap(from, to, dates, persistData) {         let driver = startBrowser(this.browser);         for (let targetDate of dates) {
var validUrl  , malformedUrl
e.target.removeEventListener(e.type, callback);           return callback(e);
try {         return Ext.Element.prototpye.origContains.call(this);     } catch(e) {
this.physics.add.collider(player, bottomLayer)   this.physics.add.collider(player, middleLayer)   this.physics.add.collider(player, topLayer)
this.model = ((model_!= null) && model_) || (function() {           throw new Error("Internal error missing model input parameter.");         })();
module.exports = Cylon.Drivers.GPIO.Motor;
Ember.TEMPLATES["user"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) { this.compilerInfo = [4,'>= 1.0.0']; helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
if (!darkener ||!navigationContainer) {             throw new Error('Could not find needed elements (Darkener and/or NavigationId)');         }
var onMutated = bind(this, '_onItemSetMutated')    this._itemSetSubs = this.server.subscribeToItemSetMutations(request.id, onMutated,      bind(this,'sendFrame', 'FIN_EVENT_ITEMSET_SNAPSHOT'))   }))
if( gradientColor!= null && percents!= null ) {         gradient = [];         for( var i = 0; i < gradientColor.length; i++ ) {
const nestedVariable = getFirstQuotedString(this.test.title).split('.');  const value = nestedVariable.reduce(   (currentObject, nextKey) => currentObject[nextKey],
(item.dataSource.entities.values || []).forEach(function(entity) {                             var hash = hashEntity(entity);                             var feature = Feature.fromEntity(entity);
return async (ctx, next) => {     let status;
function getFeatureType(layer, dataStore) {       var featureType = layer.get('metadata').name;
this.contract.reserveTicket.sendTransaction(ticketId, txHash, powNonce, objParam, err => {         if (this.debug) console.log('reserveTicket result: ', res);         if (err) {
var Collection = require('../src/collection').Collection        , ChangeType = require('../src/changes').ChangeType;     beforeEach(function () {
, "main/contentIO"  , "dijit/MenuItem" ], function(
var ret = [];       for(var i = 0; i < currentLists.length; i++) {         ret.push(new ListsTweetsTimeline(this.template.id + '_' + i, this.tweetManager, this.template, currentLists[i], i));
var results = flattenComponentForCaption(cap.components.children[ii]);         for (var jj = 0; jj < results.length; jj++) {           var result = results[jj];
isData: true,   model: Model,   __path: function(){return '';},
async abort(tx) {         throw new Error('Unsupported operation');     }
speed: 'fast',           display: false         },
if (properties) {     Object.keys(properties).forEach(function(name){      var value = properties[name];
flexo.then(this.deserialize(child), append);     });   }
var concat = require('concat-stream')  , ImageUtils = require('../imageUtils');
.bind( "mouseleave", function() {                                 $(this).remove();                             });
var model = Model.compile('_mapreduce_' + res.collection.collectionName,           Model.mapReduce.schema, res.collection.collectionName);
{  var info = [];
if (partialRightArgs) {         args = composeArgsRight(partialRightArgs, partialRightHolders, args);       }       if (isCurry) {         var argsLength = arguments.length;
updateFavoriteTeams($(this).attr("data-team"), 'add', false);
let args = [parentProto, params].concat(dependants.slice(parentProto.cNumDependants));         return S$.t(...args);     }
animationEvents.forEach(function(evt) {         document.removeEventListener(evt, that.listener, false);       });
if (obj.property.type!== 'Identifier') {     throw new Error('Property should be Identifiers');   }
function onChange(model) {   if (this.contains(model) && this._collection.indexOf(model)!== modelInsertIndex.call(this, model)) {     this._collection.remove(model);
define(Array,'sum', function() {     return this.reduce(function(e1, e2) { return e1 + e2; }, 0); };
var flatData = { data: [].concat(...results) };                         flatData.data.forEach(function (data) {
}         throw new Error("type mismatch on sub: unexpected types  '"                    + t1.repr() + "' and '" + t2.repr() + "'.");
if (that.loops[key] === undefined) {      throw new Error("animation loop not found");     }
var password = arguments.length <= 1 || arguments[1] === undefined? "pass1234" : arguments[1];    var self = this;
}       if ($this.attr('href') === '#map-panel') {         if (!_this.isOldIe) {
{             StringPrototype.isNullOrEmpty = function () {                 return (this == null || this === "");             };
if (elems.length!== 0) {       for (let i = 0; i < elems.length; i++) {         elems[i].style.cssText = "display: none;"
angular.module('umbraco.services').factory('archetypeService', function () {          function executeFunctionByName(functionName, context,...args) {         var args = Array.prototype.slice.call(args).splice(2);
makeElectorTries(url, {reset: true, priority: 0});         tryElector(url);       } else {
}         this.tableTab.setActiveLayer(layerView);
</div>         <div className="dib right fr" onClick={toggleMenu}>           <img
constructor(args) {         super();         this.setName(_.get(args, 'name', ''));         this.addServiceDefinitions(_.get(args,'serviceDefinitions', []));
if (this.profile._id) {             var stringId = String('profile' + this.profile._id);           } else {
}  matchAssertions(obj, this[ASSERTIONS], this[ERROR_STACK]); };
if ( Number.isInteger(b.re) && b.re <= 0 && b.im === 0 )       throw Error( 'Hypergeometric function pole' );
if (this.data.replyMode) {
var dashboards = result.data;                                         for (var d = 0; d < dashboards.length; d++) {                                             allowedDashboardIds.push(dashboards[d].id.id);
}                     for (var i = 0; i < config.datasources.length; i++) {                         var datasource = config.datasources[i];
for (var key in dataKeys) {    if (dataKeys.hasOwnProperty(key)) {     sumRows.forEach(function (total) {      if (dataKeys[key] === total) {
throw new ArgumentNullException(TARGET);         return new PromiseWrapper(target);     }
,sequencer:null
, concatStream = require('concat-stream')  , extend       = require('./util').extend
debug( 'Current value: %s.', this._xAxisOrient );
Context.prototype.run = function() {   Object.keys(this.schema).forEach(function(key) {     var rules = this.schema[key];
onStart (...args) {     const fns = [].slice.call(args)     if (fns.length === 0) {
Meteor.publish('user', function(...args) {   check(args, Match.OneOf({}, null, undefined));   return Meteor.users.find(
}       that.latest_login_list = login_list.sort(function(a,b){ return b.name.length - a.name.length });     });
defaulter.set('jsonifyCompilerStats', function (stats) {       return stats.toJson(this.statsToJsonOptions)     })
dc.multiGroupMixin = function (_chart) {     _chart._groups   = [];     _chart._groupGap = 5;
format: function format(...args) {             return Array.prototype.shift.call(args).replace(/%s/g, function () {
let types = join(map(validators, "validators.0.name"), ", ");     throw new TypeError(`Value at key path '${formatKeyPath(keyPath)}' should be one of type [${types}].`);   }
const { writeFileSync } = require('fs') function RobotsModule (moduleOptions) {   const options = getOptions.call(this, moduleOptions)
for (let n = 0; n < clustersToOpen.length; n++) {         this.openCluster(clustersToOpen[n], {}, false );
destroy() {     this._destroy();
});                 if (matchedPhoneNumber && matchedPhoneNumber.phoneNumber!== this.dialInNumber) {                   this.updateDialInNumber(matchedPhoneNumber.phoneNumber);
parentInstance.fire(...args );  });
, self = this
it('client.url() new', function() {     return Globals.protocolTest({       assertion: function(opts) {
b.prototype.elementInActiveFormattingElements = function(name) {  var els = this.activeFormattingElements.reverse();  for(var i = 0; i < els.length; i++) {   if(els[i] == HTML5.Marker) break;
debug( 'New value: %s.', this._title );  this.emit( CHANGE_EVENT ); }
var game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example'); function preload() {
var CliResize = require("cli-resize")   ;
chatMethods: function() {    var methods = get( this, "settings.content.constructor.chat_methods" );    return methods.filter(function( method ) {     return!method.disabled;
this.isNull = false;                 for (var key in this.attributes) {                     if (this.attributes.hasOwnProperty(key)) {                         this.attributes[key].update(plainValue[key], setOldValue, this.bubble);                     }
return callback( e );   }
{       name: 'Coffeescript',
})(Issues = exports.Issues || (exports.Issues = {}));
VObject.prototype.get_signal_connection_list = function listget_signal_connection_listeners(event) {     var evt = prefix? prefix + event : event;
refreshMetrics();   setInterval(refreshMetrics, REFRESH_RATE); }
exception = _error;                 throw new Error("Error executing error handler function callback: " + exception);               }
RouteController.prototype.init = function (options) {   RouteController.__super__.init.call(this, options);   this._computation = null;
var attributes = {}            , foreignIdentifier = association.foreignIdentifier;           var sourceKeys = Object.keys(association.source.primaryKeys);
app.simulation.run(false)         var link = app.data.links[link.data('id')]         link.disabled =!link.disabled;
Connection.prototype.setCredentials = function(username, password) {   this.credentials = {};   this.credentials.username = username;
constructor(props) {         super(props);         this.className = 'oAuthForm';         this.stores = {
});     var json = {};     json.params = list;     console.log("json: " + JSON.stringify(json));
this.extraVariables_ = {};   }
if (player.paused) {        player.play();
function mousewheel() {     translateTo(Math.pow(2, d3_behavior_zoomDelta() *.002) * scale);
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored."),       "SPA", Array.slice(arguments));   },
paths = pathHelper.simplifyPaths(paths);         for (var i = 0; i < paths.length; i++) {             var path = paths[i];
for (var i in options) {                 if (options.hasOwnProperty(i)) {                     $currentEl.find('[data-key="' + i + '"]').html(options[i]);                 }
box0('126:0', side - ( 2 + (i * 2) ), 1, side - ( 2 + ( i * 2) ))      .fwd()
, Marionette = require('marionette')    , RecordsTableRowView = require('views/records/records_table_row_view');
,   'color': '#FFEB3B'                ,   'padding':'20px',                 'line-height':'110px',                 'background-color':'#212121;'                 }
var n = 15          , c = 1          , ids = []
function StringBuilder(value)  {      this.strings = [];      this.append(value);
throw new Error('User canceled authorization');       }
this.useRefTransfMatrix_loc = undefined;   this.invertNormals_loc  = undefined;  };
var combinedTableAttributes = {}       var sourceKeyType = this.source.rawAttributes[this.source.primaryKeyAttribute].type       var targetKeyType = this.target.rawAttributes[this.target.primaryKeyAttribute].type
$.ajax({      url: url,      context: document.body,
this.trigger('sortChange');                 this.settings.onSortChange();             }.bind(this));         },
$(editor).bind('kmlLoaded', function(event, original_event, kmlObject){                         callback(this, kmlObject)                     });
}                         });                         angular.copy(leafletBoundsHelpers.createBoundsFromArray([
Handlebars.registerHelper('each', function(path, options) {   options.hash.contentBinding = SC.Binding.from('*'+path);   options.hash.preserveContext = true;
} else if (p[0] === '!') {      throw new Error("didn't handle special property " + p);     } else if (p === "prototype") {
opt_step = 1;   }   else if(args.length === 3 && args[2] === 0) {     throw new RangeError("opt_step can't be 0");
module.exports = Cylon.Drivers.GPIO.Motor;
click: function() {                             var libraries = this.scripts? this.scripts.get('val') : {};                             this.currentScriptName = prompt('Enter a name:');
_RenderContext.ToArray = function (args) {      var arr = [];      for (var i in args)
bw.displayIngameMessage('it\'s much more sophisticated!', 60000)   var chatStream = bw.chatHandler.grabExclusiveStream()   var remote = repl.start({ input: chatStream, output: chatStream, terminal: false })   chatStream.setMessageTimeout(60000)
blogObserver: observer('blog.isResetRequested', () => {         const blog = this.get('blog');
events.forEach((event) => {       emitter.addListener(event, (...args) => {         args.unshift(event);
} else {             return yield* UserBase.prototype.save.call(this);         }
render() {         let pads = [];         let popupClass = '';         if (this.state.values.length > 1) {
formatic.form.component = function (field, props) {     field = field || this.run(this.root, this.data);     var view = views[field.type];
var sum = 0.0;       for (var i = 0; i < scores.length; i++) {         sum += scores[i];
element.remove();   }
this.instance.listen();         Handsontable.editors.TextEditor.prototype.focus.call(this, e);     };
function stepHandler () {             util.batch(beforeHandlers,...handlerArgs);
, GeoPackage = require('../../lib/geoPackage')  , FeatureColumn = require('../../lib/features/user/featureColumn')
var clean = [];       for (var i = 0; i < cResults.length; i++) {
base: 'SauceLabs'  , browserName:'safari' };
rpcHandler.unregisterActiveLoader(loaderId);         done(...arguments);       });
options = _.extend({reindex: true}, options || {});         this.shadowCollection.reset(collection.models);       });
, types = require ('./lib/types')  , sourceExtract = require ('./lib/sourceExtract');
multiply: function (matrix) {       return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))
}   newmoov = concat(...newmoov);   newmoov.set(itobe4(newmoov.length), 0);
if (!this.options.prefix) {    throw new Error('Prefix missing for formset.');   }
function _putIntegrationRequest(arn, callback) {
if (!userConfigExists) {     throw new Error('Must contain md-seed-config.js at the project root. run `md-seed init` to create the config file.')   }
var ps=method.head.params? method.head.params.params : null;         if (ps &&!ps.forEach) throw new Error(method+" is not array ";         if (ps) res=res.concat(ps);
render: function(){     var timeListID = this._id('_time_listbox')      , timeOptID = this._id('_time_option')      , dateListID = this._id('_cal')
if (pathId_ == null) {               throw new Error("Missing path input parameter.");             }
that.actionsMatching = [];     });
,'reduceRight'      ,'sort'     ]
exception = _error;             throw new Error("openObserverNamespaceState failure: " + exception);           }
console.error(dist);       throw new Error('Enumerate can only be used with distributions that have finite support.');     }
var opts = _.extend({}, assemble.options, options);
var sign = isRequire? 1 : -1;   _.each(_.flatten(f), function (f) {     if (f instanceof Logic.NotFormula) {
$('.confirm-button').on('click', function() {   var $this = $(this);   var isThoughAjax = $this.data('ajax');
var col = {};     col.title =  'Mode';     col.readOnly = true;
commandMenu.style.fontWeight = 'normal';     commandMenu.style.border = '1px solid #efefef';     commandMenu.style.backgroundColor = '#efefef';
return xhr();
var morphs = new Array(morph_ixs.length);     for (var i = 0; i < morph_ixs.length; i++) {       morphs[i] = dom.createMorphAt(dom.childAt(fragment, [morph_ixs[i]]), 0);
function init(element, attrs)         {
function normalize(schema, options) {     options = _.pick(...[options].concat([         'component',
const props = { visible, setVisible, togglePopover };      const inner = this.props.children(props);   if (isFragment(inner)) {
, RE_JS_COMMENT_LINES = /^\s*(?:\/\/|#).+$/gm , RE_CSS_COMMENT_LINES = /((?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/))$/gm;
if (this.syncBody) {       dom(this.$.body).observeNodes(() => {         if (!this.__lock) {           this.__lock =!0;
var env = {};
Blockly.Variables.createVariableButtonHandler(this.workspace_, function(text) {         var variable = that.workspace_.getVariable(text, selectedValueType);         that.setValue(variable.getId());
, '')  const script = new vm.Script(stringScript, options)  script.runInNewContext(sandbox, options)  return sandbox.module.exports
unlinkDataSource(this.ds1, '_link2', this.pathTranslation2);  unlinkDataSource(this.ds2, '_link1', this.pathTranslation1);  this.isOn = false;
(function() {   var SimditorMarkdown,     __hasProp = {}.hasOwnProperty,
if (x === 0) {                 throw new QtyError("Divide by Zero. Value:<" + x + ">.");             }
var lazy = lazy_require({   VM: ['azk/agent/vm'],
var contexts = [],         currentState = get(this, 'currentState') || this;
router[method].should.be.type('function');         router[method]('/', function () {});       });
id: id,                             component: that.component,                             time: typeof time!= 'undefined'? time : new Date().getTime()
{         throw new Error("The only and except options can't be used together.");     }
var row = $(this).closest("table").find("tr").index(this);     return false;
$(document).bind('activateControls.templateItems', function(e, opt) {     var groupableItems = [];     $('a[rel=remove]').itemRemove({
seriesGroups[i].attr({        'series-name': that.data.series[i].name       }, Chartist.xmlNs.uri);
console.warn(discarded +'\u5DF2\u7ECF\u88AB\u5E9F\u5F03\uFF0C\u8BF7\u4F7F\u7528' + hook);                 return fn2.call(instance, e);             }
function handleInjectedCss(style, css) {   watch(css.watch, file => {     const notification = ui.notification('Injecting', file)     log.debug('Injecting style', css.path)
response = taskResponse;                   }                   );
TCPSocket.listen = TCPSocket.prototype.resume = TCPSocket.prototype.suspend = TCPSocket.prototype.upgradeToSecure = function() {         throw new Error('API not supported');     };
that.inst.animateTo(destPos, 0);
if (!opts.clearDepth.is_constant())             throw new Error("clearDepth must be constant expression");         if (!opts.clearDepth.type.equals(Shade.Types.float_t))
this._destroyed = false;             this.actor.disconnect();
, thumb_width: 90         , li_margin: 10
.textinput();  if ( wrapper.jqmData( "inset" ) ) {   wrapper.addClass( "ui-listview-filter-inset" );
},   resetLoaders() {     this.loaders = {};   },
ve.init.mw.ViewPageTarget.prototype.tearDownToolbar = function () {  this.toolbar.$bar.slideUp( 'fast', function () {   this.toolbar.destroy();   this.toolbar = null;
it('post /api/echo', function () {     yield request.post('/api/echo')
function e() {             var e = t.call(this) || this;             return e._layer = new PIXI.Container, e._layer.y = -30, e._layer.addChild(e._layer), e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img3 = new PIXI.Sprite, e._img2 = new PIXI.Sprite, e._img1 = new PIXI.Sprite, e._img1 =
if (err) { callback(err); return; }           args.forEach(function (markdown, i) {             articles[i].markdown = markdown;
.submit(function() {               var cmd = this.command.value;               $.get('./__debugger__', {cmd: cmd, frame: frameID}, function(data) {
if (inst) {                     into = false
expression = self.interpolateExpressionVariables(expression, options.scopedVars);                 query.expression = query.expression.concat(expression);
constructor() {         super();         this.isTop =!!super.constructor;       }
var data = ['foo',null,false'];         validate(data).should.equal(false);
} var length = f.length; f.length = function(){};
var server = new mongo.Server(options.host, options.port, options.options);
} catch (error) {     process.exitCode = 1; }
if (currentSelected) {     currentSelected.classList.remove('selected-' + this.type);
return 'unavailable';
};       token = increment();
configure: function (options) {    return this;
(function ($) {     'use strict';
if (!this.configData.waitToReceiveRimaList){      WhoAmIService.getAll(function(whoAmIsFromServer){
exports.getTestDir = function () {     var testRE = /\/[^/]+\.test\.js($|\?.*)/;     if (typeof document!== 'undefined' && document && document.getElementsByTagName) {
if (numTotal > numPassed + numFailed) {    message = (numTotal - (numPassed + numFailed)) + " of " + numTotal + " tests skipped";    console.log(message);
'use strict';
if (req.user.companyId!= app.companyId) {           respond(res, 403);           return;         }
export const sendPayment = ({ publicKey, secretKey, sequence, destinationId, amount }) => {   let sourceKeys = StellarSdk.Keypair.fromSecret(secretKey)
return Cluster.resolveContainers(config, cluster, function(err, list) {     self.table.setContainers(list);
return VisitorOption.Remove;                 }
var abortReq = function() {       timedout=true;       xhr.abort();
function init(params) {             var fixFlag = [];             if (params) {
})();
} else {               setTimeout(function() {                 fireDOMContentLoaded();
} else {             new Vue({                 el: '#js-role',
case'major':       return true;     case'minor':
process.exit(1);             }
return function(ctx) {          var r = statement(ctx);
ui.puzzle.setCanvas(pzprv3.getEL('divques'), 'canvas');  ui.puzzle.setKeyEvents();
function onMouseDown( tracker, event ) {         var delegate = THIS[ tracker.hash ],             propagate;
$(document).ready(function() {   var tabId = '';
} else if (lyr.type == 'ESRI Clustered Feature Layer' && esriPluginInstalled) {         layerOptions = extend(options, layerParams);         if (layerOptions.createMarker) {
import Class from './Class' export class Action extends Class {   constructor(args) {     super();     const [store, stores, allStores] = [args.store, args.stores, []];
const path = '/v1/ssoconfig'; const ZERO = 0; const ONE = 1;
it('should merge properties', function(done){     app1.use(function(ctx, next){       assert.equal(ctx.response.msg, 'hello');
Subscript,         InlineMath,
this.id = `${this.constructor.name}${ID--}` }
function userIsServerAdmin(msg, config) {   let permission = msg.member.permission.json;
} export function logEvent(eventName) {
console.error(error);       process.exitCode = 1;     });
addSignature: function (req, cb) {   library.schema.validate(req.body, schema.addSignature, function (err) {    if (err) {
throw new Error('The canvas element parent selector is required when calling `toCanvas`');         }
if (isNaN(this._bias)){         console.log(this._error, this.Derivative(), this._learnRate);         process.exit();     }
} else {
build = function(opts, foo, bar, baz) {   if (opts.debug) {
if (typeof rows === "undefined") rows = self._rows;         if (data!== null) {
TouchPoint = {     clickTap: ('ontouchstart' in window? 'touchstart' : 'click'),
}           db.remove(id, doc._rev, function (err, response) {
const { Key, browser, ElementArrayFinder, ElementFinder, WebElement, promise } = require('protractor'); const { code: htmlDnd } = require('html-dnd');
return config_values; } function decodeConfigValue(proto_config_value) {
if (pos && pos.left) {         this.$('.geocoding-pane-content-wrapper')
getURLOfRemote(remote).then(function (remoteURL) {         var regexParseProjectName = new RegExp(".+[:/](.+\/.+)\.git");         var gitlabHost = URL.parse(gitlabURL).host;
feed.add('msg', 'hello there!', function (err) {       if(err) throw err
settings:"$settings",    params:"$params_view",    id:"$_id"
if(input.toLowerCase() == "ls") {       cli.ls(id);     }
args[1] = this.locationMap[program.__uuid][location.__uuid];        }
fontSize: 28,     background: `linear-gradient(22.5deg, rgba(103, 58, 183,.75), ${colors.deepPurple500})`,
for (i = 0; i < stack.length; i++) {      line = stack[i]      if (re) {
var done    = function() {};
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
this.a(1,2,3,4)
textOverflow: 'ellipsis',     fontWeight: 'inherit'   },
model = require('./../model/ContainerListXmlModel'); class ListContainers {     constructor() {     }
if (!currentEscape && el === '"' &&!lang) {        el = '"';       }
var self = this;       self._success = function(resultSet) {         self._log(resultSet);
const MOZ_HACK_REGEXP = /^moz([A-Z])/; var tbEventDirectives = {};
} else {      trueValue = can.compute(true)     }
$(e.element).find("tr").not(this.settings.exclude).each(function (i,o) {      e.tableRows += "<tr>" + $(o).html() + "</tr>";
default:         return false;       }     }
} exports.getCanActivateHook = getCanActivateHook;
}     const { path, relative_path, raw_content, content } = datafile;     const filename = getFilenameFromPath(path);
for (key in views) {         view = views[key];         var surfaces = map.getSurfaces();
$scope.checked = true; }
for (var i = 0, l = options.length; i < l; i++) {   var scriptData = options[i].load.js;   if (scriptData) {    for (var j = 0, e = scriptData.length; j < e; j++) {
const     target = document.querySelector
html = html.replace(/([\w-]+)=["'](\{[^\}]+\})["']/g, function(full, name, expr) {       if (BOOL_ATTR.indexOf(name.toLowerCase()) >= 0) name = '__' + name
insert++;       }
if (!oembetter.inDomain('infogr.am', parsed.hostname)) {       return setImmediate(callback);     }     var matches = url.match(/infogr\.am\/([^?]+)/);     if (!matches) {
"hierarchy.html":[7,2], "index.html":[0] };
case 0:           return 'granted';           break;         case 1:
var Util = require('T/util'); var Q = require('T/ext/q');
/>);             case 'user':
var self = this         var checkDelete = function (d) {           if (d.length == null) {
testNode.childNodes[0].focus();         utils.triggerEvent(testNode.childNodes[0], "focusin");         expect(model.myVal).toEqual(true);
if (err) {             console.error(err);           }
var _ = require("canal-js-utils/misc"); var { Subject, Observable } = require("canal-js-utils/rx");
export default class ComponentDragSource extends DragSource {   constructor(type, spec, props, getComponentRef) {     super();     invariant(isString(type), 'Expected type to be a string.');
}     var import0, import1, styles_Fbnte, RenderType_Fbnte, FbnteNgFactory;     return {
import Ding from 'dings';  import { apiSync } from 'utils'
initialize: function (args) {       Object.assign(self, args);     }
} var XmlParser = (function () {
this._map.addControl(this.drawControls[key]);         }         for(key in this.modifyControls) {             this._map.addControl(this.modifyControls[key]);
return buildParams('', a).join('&').replace(/%20/g, '+'); }
return data   }   async getDestinationsType(local, type) {     let find = {       local,
var jscriptVersion = '0.0.0'
this.listeners.handleClick = e => {       const sizeRatio = Math.pow(this.camera.getState().ratio, 0.5);       const quadNodes = getQuadNodes(e.x, e.y);
return font => {         if (!fonts[font.id]) {
{ buf += " " + escHtml(pname) + '=""'; }      else if (val!= null)
Promise.all(promises).then(function(results) {         for(var i = 0; i < array_size; i++) {
const getTextBlockRegExp = () => /\\text\{([^}]*)\}/g;
return ((_.isTypeOf (Error, what)? (what && what.stack) : what) || '').hash },  printError: function (e) {   var stackEntries = CallStack.fromError (e),            readSource = (e.remote? Panic.widget.readRemoteSource : _.readSource)   return [
if (options.contentType ==='multipart\/form-data') {           xhr.setRequestHeader('Content-Type', `multipart\/form-data; boundary=${boundary}`);         } else {
onNewRecordClick: (creds, apiName) => {       dispatch(actions.fetchCreateDefaults(creds, apiName))     },     onDeleteClick: (creds, id) => {
var request = require('supertest'); var should = require('chai').should();
if ( context ) {    ret = seed?     { expr: parts.pop(), set: makeArray(seed) } :
return promise;  }
settings.headers['Content-Length'] = options.params.length;     }
fs = require('fs'); var tagsCache;
expect(appcache).to.have.property('off');     expect(appcache).to.have.property('abortUpdate');     expect(appcache).to.have.property('swapCache');   });
for (var i = 0, j = tokens.length; i < j; i++) {       var t = tokens[i];
return 'http:   }   if (navigator.platform.match(/^Win/i)) {     return 'http:
this.search = new SearchBox(this);   this.search.setOnChange(function()
import { BaseCriteria } from './BaseCriteria'; export class MaxTargetPerOrganCriteria extends BaseCriteria {
var ret = new Promise(INTERNAL);     ret._propagateFrom(this, PROPAGATE_TRACE);     ret._follow(this);
if (proxy && url.isType(PROXY_TYPE)) {       proxy.web(req, res, {
<td>{currencySign + numeral(amount).format('0,0.00')}</td>       <td><IoIosCloseCircleOutline color="red" size={18} style={{ cursor: 'pointer' }} onClick={() => alert(123)} /></td>     </tr>
actionObjects.push(currentAction);       }
debug.drawEarth =!debug.drawEarth; hit = true; break;
throw new Error(_const.pluginInitFnMissing);    }
this.init();     }     LineMappings.prototype = Object.create(SourceMappings.prototype);
case "200403.11":                 $p.com.alert($p.locale.exception, "warning");                 return false;             case "200403.13":
path = path.pathname.substring(1);     var requestPaths = [path];
if ( (match = hostname.match(/^http(s)?:\/\         this.set('secure', ((match[1]||'').toLowerCase() ==='s'));
}     if (deleteInstance!== false) deleteInstance;
var $el = this.$el;     var clean_description = this._stripHTML(this.options.description);
}, timeout);   }
exports.name = '/roll'; exports.hidden = false;
let currentUserId; Tracker.autorun(() => {   if (currentUserId) {       roomStream.stop(currentUserId);
var startThumbDrag = function() {                         var mousePrevX = event.pageX || event.clientX || layerX || event.screenX;                         savedVal = selValue;
import configIos from './config-ios'; appConfig.beta = true;
process.exit(1);   }
this.combYZmax = commonMax(y, z);
var i, j;
const matches = /^\${([^"]*)}/.exec(location);   return matches    ? process.env[matches[1]] + location.replace(matches[0], '')
'As of': 'As of',     'Paid': 'Paid',     'Saved': 'Saved',     'For this search': 'For this search',
}, {       requires:['base','node','../../../pub/utils/global','../../../pub/utils/svgelement','../../../pub/views/infos/infos','../../../pub/models/eventtype','../../../pub/views/line/core','../../../pub/views/layouts/style1/main'       ]
const appliedClassName = className || 'hovering';     const includeChildren = restriction!== 'directParentsOnly';
$scope.saveCalendar = function() {             $scope.calendar.ingaSave($scope.back);      };
},             modelViewName: "project_statistics",         },
ModuleLoader.prototype.codePostfix_ = null;
return this.finishNode(node, "FunctionTypeAnnotation");       }       break;     case tt.parenL:       this.next();
loader.fire('provide', mod);  }
(function constructor() {
class Text extends TelegramMessage {   constructor(text) {     super()     if (!text || typeof text!=='string')
QUnit.test("Pips: Count, stepped", function (assert) {     assert.expect(0);      var slider = test_slider({
}     context.trackVariablesChange(prop, vars, valueGenerator);   }
let el = this.returnFocus || this.return_focus || document.activeElement || null
function setAttr(node, name, val, asProp) {  var el = node.el;
var minPassLength;     var emailRegex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[
getID(instance) {     return (this._collection.findOne({ _id: instance }))? instance : this.findIdBySlug(instance);   }
throw new Error('Song constructor called with invalid backend:'+ song.backendName);         }
appliedFilters = this.getUpdatedAppliedFilters(payload, appliedFilters);     });
let full_accounts = {}          for( let account in next_props.full_accounts )             full_accounts[account] = ChainStore.getAccount( next_props.full_accounts[account], this.update, true )
return this._wrop("add", [obj], function (e) {                 var keyPath = req.source.keyPath;                 if (keyPath) obj[keyPath] = req.result;             });
import React, { Component } from'react' import SectionLayout from '../../SectionLayout'
if(this.target) {     if(newMedia) {       this.killPopcorn();
setProperties(o, p);           }           p = gPO(p);           return o;
return state;   } }
token: "0x0000000000000000000000000000000000000000000000000000000e",     },     assertions: function(err, accountTransferHistory) {       expect(err).toBeFalsy();       expect(accountTransferHistory).toEqual([]);     },   });
import Box from'reakit/Box';
} var Notebook = Class.extend(Notebook, File, "ddr:Notebook"); module.exports.Notebook = Notebook;
},             resample: function() {                 var columnsNumber = this.width;                 var newMatrix = [];
list.children.forEach(c => {
if (opt.options.list) {     org.kvms.get({}, function(){     });
return memberName in actual;             }             return false;
var ast = new AST();
import { ArgumentException } from "./ArgumentException"; const NAME = 'ArgumentNullException';
getVideoMaxBitrate() {     logger.warn("getVideoMaxBitrate is deprecated. Use getMaxVideoBitrate instead");     return this.getMaxVideoBitrate();
setTimeout(function() {     error = customError = listener = null;    }, 10);   };
return weekNum; } function isLeapYear(year) {
node = window.contextVars.node;             pageMeta = _get(window, 'contextVars.analyticsMeta.pageMeta', {});             pageMeta = _get(window, 'contextVars.analyticsMeta.pageMeta', {});              return {
let match = /<!--StartFragment-->(.*)<!--EndFragment-->/.exec(html)       if (match) {
x2: 0,      x3: 0     },
context.done();     });
var routeStripper = /^[#/]/;
this.input = doc.getElementById("wmd-input" + postfix);      }
this._load_sequence();   function cache_transaction(transaction) {     transaction = TransactionManager.normalize_transaction(transaction);     var sequence = transaction.tx_json.Sequence;
getAlgorithmByOID,   getCrypto,
return value +'' + arg;             default:
let allImg = true;             for (let i = 0, file; i < files.length; i++) {                 file = files[i];                 if (file.type.indexOf('image/')!== 0) {
var Sleeping = require('../core/Sleeping'); var Common = require('../core/Common');
return ((Math.abs(value) < 10)? "0" : "") + Math.abs(value); }
this.current = this.items[n];       this.render();
}); Model.reopen({
editor.autocomplete({
this.oDate = this.createDate(Date, aArgs);    this.sCalendarType = CalendarType.Buddhist;   }
ve.ce.Surface.prototype.onCutCopy = function( e ) {  var _this = this,
ok(true, 'before play deferred invoked');         setTimeout(dojo.hitch(js, js.stop), 3000);     }).callAfter(function(completed) {
_afterFocus : function (_, element) {    element = Aria.$window.document.getElementsByTagName("input")[0];    var active = Aria.$window.document.activeElement;
case 'info':                         log.info('info');                         break;
idleQueue._iC.delete(promise); }
beforeEach(ngMock.module('kibana'));       beforeEach(ngMock.inject(function (Private) {         metricAggs = Private(require('ui/agg_types/index')).byType.metrics;
var named =!!program.named var dir = path.resolve(process.cwd(), program.args[0]) || process.cwd()  var recursive =!!program.recursive
window.linkifyElement = linkifyElement; } catch (e) { console.log(e); }
}); describe('atomic using redis (callback)', function () {   beforeEach(function (done) {
} = node;          if (isTryTo(id))
function change(previous) {         var difference = Diff(previous, history.graph());         dispatch.change(difference);
});   return wikidataapi.getEntityPropertyClaims(resultEntities,language).then(function(responses2){
var expect = require('chai').expect;  var tree = require("../tree-surgeon.js");
case 2:                  for (t2 = 0; t2 < maxWidth; t2++) {                   row[offsetT + t2] ^= symbolRow[t2];
uksort($data, function (key1, key2){ return (key1 === key2? 0 : (key1 > key2? 1 : -1)); })     var $result = $data     var expected = {a: 'orange', b: 'banana', c: 'apple', d: 'lemon'}
} else {                 mark = {                                 "type": "line",
if (color.length === 4) {         var r = function (x) {return x.toUpperCase() + x.toUpperCase()};         return '#' + r(color.charAt(1)) + r(color.charAt(2)) + r(color.charAt(3));
.replace(/([^\/])(\/(?!\*|\/)(\\\/|.)+?\/[gim]{0,3})/g, function(match, $1, $2){                 primatives[primIndex] = $2;
}   } while ((node = node.parentElement));
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/door_key_8-1334258086.swf",  admin_props : false,
mc = PrimeFaces.util.MessageContext,             locale = PrimeFaces.locales[PrimeFaces.settings.locale];
}   process.nextTick(() => wrap(done)); };
delete cache_[ _key.toString() ];        log( 'String [%s] removed from cached unique strings', _key);     }
const NUMBER_PROTOCOLS = 4
var projectRoot = ProjectManager.getProjectRoot(),             filesToOpen = [],
};     return fetch(config.apiUrl + '/users/' + user.id, requestOptions).then(handleResponse); }
lastIndex = i;         return;
}catch(e){    return false;
this.socket.onerror = function (ev) {                                  self.onErrorHandler(ev);
test: /\.svg$/,         include: [resolve('src/assets/icons'), resolve('src/assets/images')]
var nodeBuffer = [];                   for (i = 0, li = replay.nodeBuffer.length; i < li; i++) {                 tile = replay.nodeBuffer[i];                 nodeBuffer.push(tile);
while ((ch = stream.next())) {    if (ch == '"' || ch == "'") {
if (args[0].match(/node[.exe]*$/)) {     args = _.drop(args, 2);
const REGEX_SPACE_S_FILTER = /([(,|])[\s]+/g; const REGEX_PROP_FILTER = /\.([a-zA-Z_$#][^\s.\/,[\]()'"|#]*)/g; const REGEX_ARRPROP_FILTER = /([^\s([,])(\[)/g;
item.updateConnectedEnds = function (vertex0,vertex1) {   let updated = [0,0];
a = 0;      data = data.splice(0, 25);      for (k = data.length; k < 25; k++) {       data.unshift(0);
this.syncPoint = 0;   }
if ( expect === false )           {             window.location.reload();           }
value: 'SNAPPY',                         description: 'Snappy',                     },
if ((cap = this.rules.html.exec(src))) {       src = src.substring(cap[0].length);
import {compose, createStore} from "redux"; import promiseMiddleware from "redux-promise-middleware";
fs.readFile(generatedFile, function (err, data) {       var expected = fs.readFileSync(expectedFile);
}); }; module.exports = ObjectLinkToMultimediaHasTextTranscript;
_value = parseInt(_value, 10);                 if (isNaN(_value)) {                     _value = null;
getConfig:getConfig,             setDataCSV:setDataCSV,             on:on,
return "Parse tree: " + parseTree.toString(type);    case "dependencies":
templateElem.spread[name] = true;     return;
CardTitle,   CardBody,
Debugger.prototype.addProvider = function (type, obj) {   this.debugger.addProvider(type, obj)
return this;     }
&& this.authorizer.isPermittedAll(permissions);  } }
idx = list.length;     }     if(!list[ idx ] ){
view : function (ctrl) {         return m('.fb-project-organizer#projectOrganizer', ctrl.tb);
if (!unallowedCharacters) {     unallowedCharacters = /[\/@\s+%:.]/;   }
sFormatted  = sFormatted.replace( this.Regex.BlocksOpener, '\n$&' ) ;  sFormatted  = sFormatted.replace( this.Regex.BlocksCloser, '$&\n' ) ;
+', gravityLaw: '+this.gravityLaw.toStringShort()       +', gravityLaw: '+this.gravityLaw.toStringShort()       + NewtonsCradleApp.superClass_.toString.call(this); };
this.orig_prefset = null;     if (usesDeck) {
node = nodeView.node;   var typeDescr = node.constructor.description;
var steal = steal || {}; steal('can/model',function(){
if ($logging.get('screenshots').enabled) {             var filename = $$logging.get('screenshots').filename.replace('{date}', moment().format('YYYYMMDDhhmmss'));
if (nodes.filter('table').length > 0) {         var rows = nodes.filter('table').find('tr');         var pos = exports.selectedPos();
console.log(contract.tally);
class Polling extends EventEmitter {   constructor (options) {     super()     this._options = options
this.availableZoomsForFetch = [];             for (i = 0, len = (arrBefore.length + arrAfter.length); i < len; i++) {                 if ((i % 2 && arrBefore.length > 0) || arrAfter.length == 0)
function wipController($scope) {
});   for (var field in ev) {     evtJSON[field] = serializeEventVal(queueIndex, ev[field])
return deferred.promise; } module.exports = {
'Decrediton', 'rpc.cert');     }
blockGroup.blocks.push(block);             }             blockGroups.forEach(function (blockGroup) {
function storeCurrentJSBuffer() {         if (CodeEditorIntegration.setDirty) {
function init(){   heroContentFade(); }
var _modules = this.modules;       for (var module in _modules) {         if (_modules.hasOwnProperty(module)) {
for (var j in Sk.builtin.range(start, l,-1).v){             a.setitem(p, a.getitem(p-1));
this.keyboard.terminal.scrollPageUp();   return keyActions.CANCEL; };
var innerResponse = normalizeRequest(request_);         if (innerResponse.error) {             errors.push(innerResponse.error);             break;
]).then(function(data){       var result = data[0].rows       var pkeys = data[1].rows.map(function(r){         return r.attname
bodyParams = request.data;   if(bodyParams.length!==0) {
require('./methods/out')(Terms); require('./methods/replace')(Terms); require('./methods/split')(Terms); require('./methods/transform')(Terms); require('./methods/lump')(Terms); module.exports = Terms;
});   if (existingDatabase) return;
return!(countryCode === "GB" &&!ukPostcode.fromString(postcode).isComplete());   }
view.getUint8(2)!=70||   view.getUint8(3)!=3){   throw new Error();  }
var deferred = $q.defer();         runtime.sendMessage({action: 'copy', params: [value]}, function () {             deferred.resolve();
corsPreflightReferrer("Referrer policy: unsafe-url", corsUrl, "unsafe-url", "myreferrer", new URL("myreferrer", location).toString()); done();
componentDidMount() {         this.updateOnOrDirty(this.props.projectStudios, this.props.myStudios);     }
log.debug('正在检查更新...');     pkgJson('feflow-cli', 'latest', registry).then(() => {       const version = pkg.version;
import { Wrapper } from './styled';
} } var InstToProfile = true;
} else {       let searchEngine = require('./searchT.js')       searchEngine.latest(function (data) {
Port.prototype.isEqualTo = function(port) {     if (!(port instanceof Port)) {         return false;
tyrant.putcat('key1', '+Second Value');   tyrant.get('key1').addCallback(function(value) {sys.puts('Result : '+value);}).addErrback(function(error) {sys.puts('Error : '+error);}); }
var is_file = output.indexOf(".js", Math.max(0, output.length - 3)) > 0;   if (forceUpdate) {     stream = stream.pipe(newer({ dest: osPath.join(DEST, output) }));
var visitNode = function visitNode(path) {         if (path in deps.written) {
setSessionVariable: function( variable, value ) {             this.cookies[variable] = value;         },
(function() {     for (var argsKey in arguments) { }
if (typeof window.define === 'undefined') window.define = Famono.define;
$listpeopleinnodePeopleContainer.html($.TemplateRenderer(listpeopleinnodePeopleTemplate, results));         }
import StatusBar from './status-bar'
describe("Numeric Analysis", function () {     var fft = numeric.fft,         ifft = numeric.ifft,
for (;;) {     hillclimb({
var spec = this._getHTMLSpec();       if (!(view.getName() in spec)) {         throw new Error("invalid tag");
var respond = function(req, res) {     _sender.produce({topic: req.$inf.respondTo.topic, partition: req.$inf.respondTo.partition}, JSON.stringify({response: res, $inf: {type:'response'}}), function(err) {
case MediaPlayer.rules.BaseRulesCollection.prototype.ABANDON_FRAGMENT_RULES:                     return adandonFragmentRules;                 default:
let openExternal = (url) => {   var shell = window.require('electron').shell;
if(goog.isString(route))         route = route.replace(/:\w+/g, '(\w+)').replace(/\*\w+/g, '(.*?)') + '$');     this.routes_.push({route: route, callback: fn});
log('\n' + consts.MODULE_INFO);   log(data.msg + '\n');   return;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/wavy_gravy-1334214775.swf",  admin_props : false,
}       break;     case'mount':       entity = nearestEntity("object");
let expiresAt = localStorage.get('expires_at');       return new Date().getTime() < expiresAt;     }
app.use(function(ctx, next){
const MP_REGEX = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[$@$!%*#?&])[A-Za-z\d$@$!%*#?&]{8,}$/g const RESPONSES = {
app.controller('EditController', function(Session, $state, $interval, $scope, $http) {     var f = function() {
domClass.add(next[0], type);                 next[0].offsetWidth;
var getCanvasByIndex = function(index) {       var canvasId = viewerState.canvases[index]['@id'];       return self.canvasObjects[canvasId];     };
})                                               .catch(e => console.error(e));                                       break;
this.setState(Object.assign({}, this.state, {       innerWidth: window.innerWidth     }))
builder.scale({maxWidthPercent: maxWidth, unit: unit});   } }
if (!data.length) {           err = new Error('The list is empty.')           callback(err)
if(typeof since === 'function' && since.modelName) {     since = -1;     targetModel = since;
import Story from '@lskjs/dev/Story'; const action = name  => (...args)=> console.log('[' + name + ']',...args)
res.loadAssets(() => {     const game = new Game();
ME: `${API}/users/@me`,  ME_CHANNELS: `${API}/users/@me/channels`,  ME_SERVER: (serverID) => `${Endpoints.ME}/guilds/${serverID}`,
fs.ensureDirSync(root + "/static");
j = i;                 }
}         for (;;) {             visited.push(el);
generateRelations.track((data) => {                 result.addNetwork(data.nodes, data.edges, {groups: data.groups});
keyPressHandler(ev);  }
import React from'react' import defaultStorageAdapter from'resolve-storage-lite' import defaultBusAdapter from'resolve-bus-memory'
onXHRDone: function(xhr) {    doneBuffering = true;
if (templateResult instanceof goog.soy.data.SanitizedContent) {     var ContentKind = goog.soy.data.SanitizedContentKind;
else {                                              }
_createCookieFromData(data) {     var cookie = new SDK.Cookie(data.name, data.value, null);     cookie.addAttribute('domain', data.domain);
},   'Click on choose page': function(client) {     var PO = client.page.chooseLayout();
var stateManager;   if (this.objects.hasOwnProperty(id)) {    throw(new Error("Cannot add duplicate object ID '"+id+"' to state list."));   }   if (callback) {     callback(false);
c = new MathLib.Complex(2, 5),    d = new MathLib.Complex(3, 6),
if(this.options.time_format == '24'){     times = options.times || ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "18", "19", "20", "21", "22", "23", "24"];
loadSubModules = function (parentModuleInfo, subModulesDescArray, cb, customModules, recursionCheck) {         var subModulesDescArrayLength = subModulesDescArray.length;
])  })(jsPDF);
import React from'react' import {blueA400, grey500, grey600} from'material-ui/styles/colors' import sizeMe from'react-sizeme'
if( typeof callbackFunction === 'function' ){             callbackFunction.call( thisElem );          }
import ButtonIcon from 'ui/components/buttons/flavors/icon/index.react'; import { prefix as pf } from 'app_modules/ui/util/component';
"it throws an ImmutabilityError when you try to call its shift() method": {     predicate: function(array, args, shiftArg) {
Explorer.currentHighlight.style.backgroundColor = 'rgba(0,0,0,0,0)';         break;       default:       }
click = false;     }
return [       mwcMixin, mwcRouter     ];
console.log (typeof __undefined__);
}                     var maxReturned =                         Number(this.nodeConfig.output_results_count) || 1;
import ChartsContainer from '../../../components/charts-container'; import Fills from '../../fills/components/fills';
specStarted: function(result) {   },   specDone: function(result) {
this.out.unlinkSync(outputRelative);
import React from'react' import PropTypes from 'prop-types'
var input = ".test1 { background: url(\"test1.jpeg\"); }" +         ".test2 { background-image: url(\"test2.png\"); }";     var output = ".test1 { background: url(\"test1.jpeg\"); }" +
shortcuts.forEach(shortcutUrl)     Mousetrap.bind('shift+w', openApp);
while ((test = me.tests[i++])) {         if (test.cycles) {
}     window.location.reload();   };
} catch (err) {       logger.error(err);       return msg.say(`**${user.username}**, you failed to catch a pokemon :cry:`);
var LoaderModule = (function() {   var modules = ['game', 'cookiedata', 'controls'];
}       x = depth*horizontalSpacing;       y = ySum/block._outConnections.length;     }
return result + "</div>";   },
const c = h;         for (let i = 0, len = order.length; i < len; ++i)             c = hamt.remove(keys[order[i]], c);
const ele = (arr, i) => arr[i % arr.length]; const frame = i => ele(styles, i)(ele(spinners[ele(keys, i % step === 0? index++ : index)].frames, i));
setTimeout(function(){             casper.evaluate(function(){                 localStorage.clear();             });         }, 3000);
handleUrl(url.href, reply);   } }
import React from'react'
console.info.restore();         });
} else {      return _.assign(data, file.data)     }
export const earnExp = (exp) => {  exp
return result;   }
}          i = m_opCache.length - 1;          while (i >= 0) {
var data = {};     $.each(schema.pages, function(i, page) {
viewOpenRoomScreenAnimation() {     return new Promise((resolve) => {       this.communication.chooseClosestServer().then(() => {
config.pkg = loadJSON('package.json', {cwd: config.cwd});   if(config.pkg.ngfactory) {     log('Using ng-factory config from %s', chalk.magenta(tildifyCwd('package.json', {cwd: config.cwd})));
throw Error('Did you pass in an Element?'); }
} else {         if (traverse === document) {           (shadowRootAvailable && (traverse instanceof ShadowRoot)) ||           (parent && parent.__redom_mounted)
patterns: [                         {                             match: /var version = '[.0-9]*';/g,                             replacement: "var version = '" + iopackage.common.version + "';"
});   });   version = "v6";
function getTextSizeForWidth(text, font, width, minFontPx, maxFontPx) {         var s = font.replace("?", maxFontPx);
function process(context) {  return { message : this.fail };
const users = rhf.getValues({ nest: true }).users;   const hasDuplicate = ({ lastname }, index) => {
case FV_WORD_UPDATE_ERROR:       case DISMISS_ERROR:
this.lastHash = hash;       localStorage.setItem('bkp.next.piskel', this.piskelController.serialize());       localStorage.setItem('bkp.next.info', JSON.stringify(info));     }
case "developer":       return "icon-file";     case "developer-code":       return "icon-code";
handleMessage(uid, obj) {     var msg = obj.body.toLocaleLowerCase();     var command = msg.split(" ")[0];     if (this.cmdPrefix) command = command.replace(this.cmdPrefix, "");
server.listen(options.port, function(err){                  if(err){ return callback(err); }
}; LocalStorageCache.prototype.getData = LocalStorageCache.prototype.getData; LocalStorageCache.prototype.replaceLastScript = function(a) {
} catch (e) {         this.setErrorMessage(e.message);       }
FilterActions.saveSession();       }catch(e){}     });
throw "Unrecognized mnemonic language"  }
</FormField>           </div>           <pre><code className="html hljs xml">{"<FormField label=\"Item 1\" htmlFor=\"item1\" error=\"error text\">\n  <input id=\"{id}\" type=\"text\"/>\n</FormField>"}</code></pre>
exports.default = Person;
cell = start && domUtils.findParentByTagName(start, ["td", "th"], true);              if (cell) {                  return -1;
})(jQuery);
}  authz.addUserRoles(owner._id, ['owner'], room._id);  if (type === 'c') {
$(function(){   var doc = $(document);
var processOptions = (function(config) {   var options = extractOptions(config);
arr = new Uint32Array(arrayBuffer, offset, length);          break;      case 'FLOAT':          arr = new Float32Array(arrayBuffer, offset, length);
id: 'containers.AgentPage.create_agent.use_postFormat',
results[msg.data.module].push(msg.data);     }    } else if (msg.event === "testDone") {     results[msg.data.module].push(msg.data);    } else if (msg.event === "done") {
return this.length;   }
</TouchableHighlight>     );   }
global.LEXEM_BUILD = /[^\s,!\\?\*\/:\[\]\(\)\"\'\`\-\+\<\>\;\=]/;  global.LEXEM_SPELL = /[\s,!\\?\*\/:\[\]\(\)\"\'\`\-\+\<\>\;\=]/;    String.prototype.replaceAt = function (index, character) {
if (isRoutePresent) {     route.routePresent = true;     ui.setRouteIsPresent(true);
case ActionTypes.SIGNOUT_RES:         err = action.data;         if(!err){           UserStore.emit(ActionTypes.SIGNOUT_RES);
(err, resp) => {           res.send(resp.body)
that.hover(hoverHeight, position);     }
node.position(pos);                         }                     });
Babel.prototype._generateDepGraph = function() {   var residentImports = this._cache.keys().map(byImportName);
collision = true                   that.postMessage('{"command": "entity-user collision", "data":{"position":[' +obj.position[0] + ',' + obj.position[1] + ',' + obj.position[2] + '] }}')                 }               }
return stream; }
var model = this.model = {};         var add = function(name, edgeModel, extensions) {           if (edgeModel) {
return prev;   }, []); } function join (args, quote) {
numbro.version = VERSION;
break;     case Array.isArray(type) && type[0] === 'any':       if (isMethod) {
return "ironscript.runPackage("+JSON.stringify(ps)+"); }
var argc = ns['argc'] = arguments.length         if (fixedArgs) {           argc = ns['argc'] = ns['argc']         } else {
constructor() {          super();          this.poolActivity = {};
function modelHasAttributeOrRelationshipNamedType(modelClass) {   return (
var isHost = require('./isHost'); var getSelection = function() {   module.exports = getSelectionRaw;
let key   while ((key = keys.shift())) {     yield [key, object[key]]
test('word tables are converted to html tables', function() {         var docxPath = path.join(__dirname, "test-data/tables.docx");         return mammoth.convertToHtml({path: docxPath}).then(function(result) {
if (!this._alwaysOnTopWindow ||!this._alwaysOnTopWindow.document) {             return false;         }
return num / 16384;   },
host : req.protocol +'            index : req.index,             type :  parts[2] || '',
acc_x += 3;         Flow.renderGlyph(this.context, acc_x, acc_y,                              this.render_options.font_scale, this.paren_left.code);
setTimeout(function () {         for (var i = _doneWorkers.length; i--;) {
if (/^['"](?:[a-zA-Z][a-zA-Z\d-]+)['"]$/.test(value))         return '[' + key + '=' + value.substring(1, value.length - 1) + ']';
var updateSelection = function() {     selection.style.left = selectionArea.x + 'px';
ia = aindex[ka];
html += "<h3>Variables</h3>";   objs = this.getByType(o$, "global");   for (i=0; o=objs[i]; i++) {    html += this.presentComment(o.comment);
throw new TestFailureError(errorMessage || 'Condition expected to be true');         }     },
var amount = this.amount.v;
return LAST_FM_SECRET && LAST_FM_KEY && this.session_key;   }
beforeEach(function() {       Waypoint.Adapter = adapter.Adapter
function Axis (plot) {     var plot = plot;     this.showTicks = true;
panel.on('mouseenter.trace3d.trace3d_igv_panel', (event) => {             event.stopPropagation();
rows: rows   }),   hideMap: () => ({     showLeaflet: false
export default class KnotInput extends Morph {   get input() { return this.get('#input'); }
if (navigator.mozGetUserMedia) {       callback(null, 'firefox', {
trace( "Bug? already seen request" );
});     document.addEventListener("click.button.uikit", "[data-uk-button]", function(e) {         var ele = $(this);
import React from'react' import { useI18n } from 'core/i18n/i18nContext'
;                 ;     })(M.eM || (M.eM = {}));
var testReadLongPtrAsync = async(function *(declaration) {             const readLongPtr = lib.interface.readLongPtr;             assert(_.isFunction(readLongPtr));
}catch(e){           log.error(e);
connections = JSON.parse(localStorage.connections);       } catch (e) {}       connections = $.isArray(connections)? connections : [{}];
return function() {    Meteor.POST('/api/cmd/' + cmd);   };
$fileInput.duOption('limit', autostartOn? false : 5);              if (autostartOn) {                  $fileInput.duOption('limit', autostartOn);              } else {
{                                  if(account.txs && blockstrap_functions.array_length(account.txs) > 0)
throw new Error("LUA_TCCL not implemeted yet");         case CT.LUA_TLCF:
}   if (hasTransformer) {
'use strict';     var App = React.createClass({
function utcnow() {       now = new Date();       return now.toISOString();
var f = features[i];
}; const statistics = async () => {   try {
}],                 options: {                     replacements: [{                         pattern: /"version":\s"[0-9.a-z].*",/gi,                         replacement: '"version": "' + grunt.option('newver') + '",'
options = options || {};             if (!loader ||!(jqLoader instanceof $) || jqLoader.attr('data-skip-enhance') == 'true') {                 return;
display.input.focus()     doc.history.lastSelOrigin = null
this.name = name || `Extension#${this.id}`;   this.name_key = name_key || this.name.replace(/[^A-Z0-9_-]/g, '').toLowerCase();   if ( /^[0-9]/.test(this.name_key) )
if (mutationDataType === "SV") {
import: 'import',     sourcecodes:'sourcecodes',
let match = null;   while ((match = regex.exec(string))) {     matches.push(match);
var opts = {}; opts.el = document.createElement('div'); opts.el.textContent = "loading";
module.exports.process = function(context) {  if(context.options.emit) context.options.emit(this.emit, this.channel);
if (typeof value === 'number') {   return formatNumber(fn, value);  }  if (typeof value === 'bigint') {   return formatBigInt(fn, value);
var $transitions = $injector.get('$transitions');         $transitions.onStart({}, verifyState);       } else {
if (variant.enabled) {           var first = variant.capabilities.table[0].join("|");
{expected:expected, actual:actual});     }     expose(assert_greater_than, "assert_greater_than");
auth.login(user, function(data) {
length = items.length   commandName = command[0].toUpperCase() + command.slice(1)   console.error('\n%sed %d dependenc' + (1 == length? 'y' : 'ies'), commandName, length) }
geometryWireframeButton.addEventListener('click',     () => {       const selectedGeometryIndex = store.geometriesUI.selectedGeometryIndex;
if (options.debug) {       data.debug = steal.toJSON(deepExtendWithoutBody(currentData));
'Technical Analysis: HT_DCPERIOD': 'data',   '1. Information': 'information',
var bignumber = 31363200000;   assert.notThrow(assertEquals(m[p](Math.round(bignumber/864E5)/7)+1, 52)); }
}           catch (err) {             console.log(err);           }
})       linkingModel = mongoose.model('user_group', linkingModelSchema)
module.exports = function (hookArgs) {     const pluginRoot = path.join(__dirname, "..", "..");
export function extent([array, accessor], options) {   if (accessor) {     array = array.map((d) => get(d, accessor));
throw new Error("[captcha_bypass]: attempted sec1DecodePoint with incorrect tag: " + p);     }
let list = [];         Mouse.setFromCamera(new Vector2((event.clientX / window.innerWidth) * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1), camera);
shell         = require('shelljs'),     platforms     = require('../platforms'),
var originalTimeout;     beforeEach(() => {         originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
}     else if (this.$helperText) {
var JSSourceFilefromCode,         textDepRegExp = /["'](text)\!([^"']+)["']/g,         relativeDefRegExp = /(require\s*\.\s*def|define)\s*\(\s*['"]([^'"]+)['"]/g,         cssImportRegExp = /\@import\s+(url\()?\s*([^);]+)\s*(\))?([\w, ]*)(;)?/g,
module.exports = function () {};
}       setStyleFunction(def, vectorStyleId, vectorStyles, layer, state, day);       if (day) { return; }       setStyleFunction(def, vectorStyleId, vectorStyles, layer, state, day);       if (day) { return; }       setStyleFunction(def, vectorStyleId, vectorStyles, layer, state, day);     }
if (rootElem.className.search(new RegExp('\\b' + klass + '\\b')) >= 0) {       return Rx.Observable.fromEvent(rootElem, eventName);
rows.push(row);  let rowLength = 5;
this.paste = function() {     var doc = this.__document.startSimulation();     var sel = new Selection(doc, this.selection);
module.exports.process = function(context) {  var err, actual, expected;
return new Promise(function (resolve, reject) {             function responseURL() {
console.log('   -sp --sourceFilePrefix <path to sourcefile> The relative path to the original source file for use in the coverage results.');                     break;
};   ExampleUI.setupStandardControllerUI(g_client, globals);
import React from'react'; import TopBar from './TopBar';
}else if(length > 0){                 output = TM.renderTplById('timelineTemplate',renderData);                 $$('#ourView').find('.time-line-content').prepend(output);
self.toggleProperty('submitting');                  });
constructor(src, size, topLeft) {     super();
for(i;i<len;i+=1){         path = doc.createElementNS(svgNS,'path');         groupPath.appendChild(path);
return [ loop, mid ]             } else {
function positionMenu(el, opts) {       if (opts.isRemoved) return;
function opmlGetOutlineObjects(doc) {   opmlGetOutlineElements(doc);   const objects = [];
})         break       default:         console.log(`No special handling of topic=${topic}`)
xRadius = (1 / x) * (this.drawingArea / 2);        x = this.drawCenterX + (this.drawingArea / 2);         y = this.drawCenterY - xRadius;
diffPrimitive(context, expected, actual);       break;     case 'function':       try {
{         colorTop = this.getInnerColorTop();         colorRight = this.getInnerColorRight();         colorBottom = this.getInnerColorBottom();         colorLeft = this.getInnerColorLeft();
console.log('Failed'.red +'to fetch challenges from API!'+ error)     })
let config = require('./config') config.commandDir = require('path').join(__dirname, config.commandDir) const c = new Yuuko(config)
return route('get', path); }
if (this.options.showLoading) {                     this.element.removeClass(Titon.options.loadingClass);                 }
let context = this.forward(stream)     for (; context; context = context.prev)
.addClass('btn waves-light waves-effect')                 .text('close');   var parentBtn = $('<a/>')                  .addClass('btn waves-light waves-effect')
console.log('Unmatched:', errorType, errorDescription, errorRe);         return     }
var match = semver.maxSatisfying(versions[key], peg);
export class DependencyGraph {   get inner() { return this._inner }   constructor(code) {
for (var i = 0, b; i < this.$.ballpit.children.length; i++) {    if (b.bounds.t + b.bounds.w > this.$.rectangle.bounds.t) {
return this.tile;    case("left"):
var space2View = this.space2.write(document);
logger.error(error)         process.exitCode = 1       }
topic : function( post ) {             return post.count();
node = visited[i];   inputs = node.parents.map(function(p) {    var i = this.ins.indexOf(p);    if (i!== -1)
if (this.getVertical()) {     this._$OwnerDomRef.unbind(Device.browser.firefox? "DOMMouseScroll" : "mousewheel", this.onmousewheel);    }
path: path.resolve(__dirname, 'dist'),       library: "iframeHashManager",
var ds = {}   this.ds.iterate(this, null, null, function (n) {     var user = n.id[0]
var Xml = require('./Xml'); class Xslt extends Xml {} Object.assign(Xslt.prototype, {
require('./methods/tag')(Text); require('./methods/termFns')(Text); require('./methods/normalize')(Text);
function extractWords(text) {       var tokens = text.toLowerCase().split(/[,.`'"#\s]+/mg);       tokens.forEach(function(key){
result = TinCan.StatementRef.fromJSON(JSON.stringify(raw));             ok(result instanceof TinCan.StatementRef, "returns TinCan.StatementRef");
var table = false;  for (var i = 0, length = lines.length; i < length; i++) {
return permutes;   }
console.log(student, attempts, chosenAttempt);                 }
onFileChange(input) {       const filename = get(_.head(this.file), 'name', '');       const ext = get(_.last(filename.split('.'));       const validFormat = filename === ext || /gz|sql|txt/i.test(ext);
saveImagesData: function () {             var imageData = Object.keys(this.imagesData).reduce(function (accumulator, id) {
import React from'react';
var x = start.x - (this.getWidth() / 2) + 10;   if (this.vert_justification == Vex.Flow.Annotation.VerticalJustify.BOTTOM) {     var y = this.note.stave.getYForBottomText(this.text_line);
console.error('Configuration parameter `%s` is required.', param);       throw new Error('Configuration parameter `%s` is required.');     }
return registry.editorComponents; }
var self = this,       options = opts || {},       stream = new Stream,
execute_query = query;     if (!("sort" in options || "sort" in query_capabilities)) {      if ("skip" in options && "skip" in query_capabilities)
}     this.dispatchEventToListeners(OverlayModel.Events.ExitedInspectMode);   }
}else{                             scale
BASE_PORT = 9000;         MATCH_SERVER_PORT = 8081;     } else if (enums.APP_PRODUCTION_MODE === env) {
else                 event   = null;
delete taxonomy.GENUS;                     }                     if(!vm.hasRankedTaxa){
var app = angular.module("app", ["firebase"]);
var k = k || _.bind(editor.notebook_loaded, editor, null);             var k2 = function(notebook) {
describe('async-validate:', function() {   function Component(){}   var descriptor = {
const _ = require('lodash'); const yurl = require('yurl');
export function removeFields(str) {  return str.replace(/\$\{\d+(:[^\}]+)?\}/g, ''); }
case "os_free_memory":    cunit = "";    for (var i = 0; i < datas.osFreeMems.length; i++) {
AWS.CloudWatch_20100801 = inherit(AWS.Client, {});
if (data.reachable) {                 self.set({password: hex_sha512(self.model.get('password'))});                 self.model.save();
qx.Clazz.define("qx.ui.QueueFlush", {
return localforage.setItem(key, value)   } catch (err) {
module('Fablab')  .directive('userPaymentHistory', function () {  return {
currentSelection.barIndex--;         while(relevantInstrument.bars[currentSelection.barIndex].items.length == 0){          if(currentSelection.barIndex == 0){
throw err       })
};     var untrackSymbols = function(symbol) {         symbol.forEach(untrackSymbols);     };
import {ViewEncapsulation} from './metadata/view'; import {TypeDecorator, makeParamDecorator, makePropDecorator} from './util/decorators';
var expected       debuggerStatementFunction()       debuggerStatementFunction()
import ReactDOM from'react-dom'; import InfiniteCarousel from './components/InfiniteCarousel.js';
pluginManagerBase.initialize(null);             pluginManagerBase.executePlugin('MinimalWorkingExample', managerConfiguration, function () {
})); }; PolygonProgram = Webvs.defineClass(PolygonProgram, Webvs.ShaderProgram, {     draw: function(color, points, mode) {
while ((match = search_regex.exec(input))) {             if (remove_regex && remove_regex.test(match[0]))
function(node, event) {       if (Cards._suppressClick) {
attachAttributeToNodes(domNode.children[i], key, value);     } }
function roomToJSON(userjid, room, meetingsPath) {   var jsonroom = room.exportJSON(userjid)
var item = document.getElementById(dlLink.id + '-link');       if (item) {         var img = document.createElement('img');
export default {
$(window).on('action:topic.loading', function (e) {             addListener(elements.BUTTON);         });
var m = jobName.match(/^((.*)::)?([a-zA-Z0-9-_]+)$/);       return { name: m[3], namespace: m[2]||null };
quotify :'red',        prompt :!tasks.length     });
maxSteps: 10, });
return false;         };
-ol.Projection.EPSG_3857_HALF_SIZE, ol.Projection.EPSG_3857_HALF_SIZE);   var tileSize = new ol.Size(256, 256);   goog.base(this, resolutions, extent, origin, tileSize);
.appendField( "LCD print" )                .appendField( new Blockly.FieldTextInput( '' ), 'TEXT' )
gc.fillText(val, x + halignOffset, y + valignOffset);             }             if (isColumnHovered && isRowHovered) {
document.querySelector(`#bug-${this.id}-comment-form [role="textbox"]`);
0, 0, this.singleWidth, this.singleHeight );           }          canvas.restore();
lastTable: function () {     if (this.page === this.totalPages) {       this.totalPages = Math.ceil(this.totalAmount / this.size);
svg.append('text')            .attr('class', 'title')
if ((state.activity === 'playing') && (state.history.lastVisited[kind] === index)) {         return false;
options.method = 'DELETE';     return this.request(url, options);   }
return console.log(err);     }
let transitionHookWasCalled = false   history.block((location) => {     transitionHookWasCalled = true
});     draw.on('drawend',
import './SingleProfile.css'; import {getDate} from '../../../../../common/common'; import sqlFormatter from "sql-formatter";
var lounge = require('../../lib'); var uuid = require('uuid');
console.groupEnd("drawWidget.buildLinkFunc:"+type);         };
import ObjectComponent from './ObjectComponent'; import {normalize} from '../util/math-utils'; import {attachMouseListenersDocumentExtended} from '../util/listener-utils';
return endProgram(0);   } catch (err) {
if (this.filter.outFields) {           response.fields = [];
init: function() {              var w           = screen.width,                  h           = screen.height;                this.supported  = parseFloat(_mediaInfoStyle.height) === 1;
try {     return require(path.resolve(name));   } catch(err) {     return path.resolve(path.resolve(name));   } }
name,       };       break;     case 'DOCKERHUB':       required = {
if ('ABCD'.indexOf(cmd) >= 0) {         side(cmd);     } else {
$element = $('a[href^="' + page + '"]', $elements);      $group = $('a[rel="' + $element.attr('rel') + '"]', $groups);
.filter((version) => {         if (filter) {           return version.local_title.toLowerCase().indexOf(filter.toLowerCase()) > -1 ||
function closeChatRoom() {   $("#chat").hide();
import React, { useEffect } from'react'; import { Upload, Button } from 'choerodon-ui';
OutTransfer.prototype.calculateFee = function () {  return constants.fees.send;
if (!e.altKey) {                  mouse = layer.getMouse(e);                  mx = mouse.x;                  my = mouse.y;                  gs = this.layerManager.gridSize;
Object.keys(map).forEach(k => {       const v = map[k];
import { TimesIcon } from '@patternfly/react-icons'; import { t } from '@lingui/macro';
onLoad: function (options) {     noLogin:true   },
ctx.fsEach(async function(file) {                     if (!/demos/.test(file.path)) {                         file.extname = '.html';
url             : 'api/user_preferences/' + Galaxy.user.id + '/permissions',                     submit_icon     : 'Save permissions'                 },
case SAVE_BOOK_DATA:       return state;     default:       return state;   }
var _regex = /^(\s*\*\s*).*$/;           editor = atom.workspace.getActiveTextEditor();           var cursor_position = editor.getCursorBufferPosition();
} catch (e) {         log('Parse Failed Codeforces\n' + e.message);       }
"use strict";     if ("ontouchstart" in window && document instanceof DocumentTouch) {         $("html").addClass("uk-touch");
};     case TYPE.MARKET_DATA_LOADED:
try {                      body = JSON.parse(body);                      if (body.profile_image_url_https) {
});   } if (i == n) {          return L.icon({
if(error.dataPath.charAt(0) == '.') {         error.dataPath = error.dataPath.replace(/[.[]/gi, '/')         error.dataPath = error.dataPath.replace(/[\]]/gi, '')
'use strict' const db = require('./db')
var item;   while ((item = this.getActive())) {    item.classList.remove('active');
}           }           else if(xyMapOffset.x <= 0) {             for (var i = 0; i < mapLayers.length; i++) {               mapLayers[i].move("left", distance);
doc.addEventListener( "DOMContentLoaded", completed, false );
'use strict';
if (window.ipcRenderer) {       window.ipcRenderer.on(IPC_JIRA_CB_EVENT, (ev, res) => {
} ); export { InstancedBufferGeometry }
startId = conditionStartId;       tmpId = conditionStartId;       if (conditionMachine) {
scope.mixer = new THREE.AnimationMixer( scope );
for (var j=0; j<complexList.length; j++) {         complexList[j] = this.toId(complexList[j]);        }
jhipsterFunc.replaceContent(this.javaDir + 'domain/AbstractAuditingEntity.java', '\s*@JsonIgnore', '', true);       }
config.parent = '.' + name;         drawChart(parsed_rows, config);
while (iCell--) {     cell = clippedCell = cells[iCell];     if (cell) {       halfedges = cell.halfedges;
}                     var props = [], visitedProps = [], accessors = {};                     Properties.allOwnPropertiesOrFunctions(value, filter).each(function(prop) {
$("#" + id_engageContent).css("max-width", "");         for (var i = 0; i < videoDisplaySizeTimesCheck; ++i) {             if ($(window).height() < ($("." + id_videojs_wrapperClass).position().top + $("." + id_videojs_wrapperClass).height())) {
layer = new VectorLayer('canvas');         map.addLayer(layer);
.attr('height', size);      if (background) {    group
var nextContext = void 0,         nextProps = nextVnode.props,
var path = require('path'); exports = module.exports;
import { combineReducers } from'redux'; import { List, Map } from 'immutable';
label: 'Job ID',                 ngClick: "showJob(jobhost.job)",                 columnShow: 'host_id!== null',
throw new Error(`Unsupport config file extension. File path: ${filePath}`);   }
$scope.config.versionString = data;   }, function () {
var layer_path = "http: var firebase_url = 'https:
import { Tab, Tabs, TabList, TabPanel } from'react-tabs'; import Heatmap from './Heatmap.js';
}                     ingoose._db.createObjectStore(name, schemas[name]);
DefaultEventQueue.prototype.queuePath = function () {         return this._config.apiKey? "ex-" + this._config.apiKey.slice(0, 8) + "-q" : null;     };     return DefaultEventQueue;
...prevState,         errorMsg: initialState.errorMsg,       };
if ( (matches = line.match( /(PREFIX) (\S+): <([^>]+)>/ ) ) ) {     if ( ENTITY_TYPES[ matches[ 3 ] ] ) {
var logger = require('../src/logger'),     sanitizers = {
const isNumber = (num) => {     return typeof num === 'number' && num!== NaN }
module.exports = {   createPinCode (userId) {     return new Promise((resolve, reject) => {       User.findOneAndUpdate(
}                     Object.freeze(this);
}         case 'phone':
var sequenceLengthPreInsert = tree.get('$sequenceLength');
let system,         errHandler,         adapter,
if (options.userSideValidation === true) {    if (o.encryption_applied) throw new Error(_('Encrypted items cannot be modified'));   }
var result = []   for (i = 0; i < pgs.length; i++) {     pg = pgs[i]     var npg = []
map.paths[id] = path;                     map.bounds = mapHelper.createBounds(path.latlngs);
name = node.name;    newTypeObj = env.lookupTypeObj(name, node.extras.target);
var resultSet = nodeComparator.getChanges();
};     case TYPE.BINANCE_24:
Object.defineProperty(TileSprite.prototype, "frame", {
var orig = element.style.getComputed(element, "overflow");
fnBlock.push(') {\n');         for (i = 0; i < path.loopIndex; ++i)             fnBlock.push('var l', i,'= 0;\n');
import React, { PropTypes, Component } from'react'; import { Link } from'react-router'; import { Card, CardActions, CardMedia, CardTitle, CardText } from'material-ui/Card'; import moment from'moment';
describe('#118 ', () => {   let cache = null
else {             swap = line.charAt(column-1) + line.charAt(column-2);             range = new Range(cursor.row, column-2, cursor.row, column)         }         this.session.replace(range, swap);
var self = this;
.on('error', (err) => {       if (typeof seleniumServer!== 'undefined') seleniumServer.kill()       throw err
'use strict'; var $metamodel = require('./metamodel.js');
__dirname = '.'; }
} else if (username) {   let url = buildUrl(network, username);
import { getUser } from '../Actions/UserActions';
if (n > 2) {        for (r = 3; r <= 2*n - 2; r += 1) {
dx = (t2[5][0] - t[5][0]);             dy = (t2[5][1] - t[5][1]);             d2 = Math.sqrt(dx * dx + dy * dy);
window.customElements.define('accordion-view', AccordionViewElement); const agent = getAgent(window.navigator.userAgent);
citeHref: {},                     alignment: {}                 }
if (this.target!== null)         {
const json = this.model.get('_loaded_map_json')       builder.load_map(json? JSON.parse(json) : null)
headers = {},     reg = /^(.*?)\:\s*([\s\S]*?)$/gm,     match, header, key;
component.enableDateInterval(component, true);       }
+!~-((() => {
}   this._client.setCurrent(elementWrapper(target)); };
end = "نَ";             endDiac = "ْ";           }
super(props);     }     render() {
else if ( (child = readElse( parser, tag ) ) ) {    if ( section.n === SECTION_UNLESS ) {
});   }).controller('cfScaleDownClusterStageCtrl', function($scope, accountService, stageConstants) {     var ctrl = this;
require('./ServiceBase'); var SuperMap = require('../SuperMap'); SuperMap.REST.ChartFeatureInfoSpecsService = SuperMap.Class(SuperMap.ServiceBase, {
if(status === "backbutton") {   this.fireEvent(document,"backbutton");   return "true";
return 'thesis';
case DOMEvents.KEYPRESS:     charCode = e.which? e.which : e.keyCode;     if (charCode >= 32) {
debug(`[$] fetchFavicon: Downloading ${iconPath}`);             download(`https:
const Order = () => (     <Layout>
PowerChart = (function () {     'use strict';
for (let selectionParent = editor._variable.selectionNode;!/sun-editor-id-editorArea/i.test(selectionParent.className); selectionParent = selectionParent.parentNode) {                 if (selectionParent.nodeType!== 1) continue;
var ParticleExplorerTool = function() {     var that = {};
withProps, } from'recompose';
length = 1         throw new Error("dtrnd")       }
this.previousValues = tail(this.previousValues);                 }
function moveOn(e) {   if (e.width)
case 'Float':         return `${value}`;       case 'Boolean':
function $ext(dest, src) {    var src = src || {}, key;
const result = [];       let numSubs = template.length - 1;       for (let segnum = 0; segnum <= numSubs; segnum++) {
DEBUG_MODE =!!val; }
imageLoaders[scheme] = imageLoader;     }
complete: function() {         done && done();
r.lastIndexOf('/') + 1, r.lastIndexOf('.')                         ).toLowerCase()
} else {      source.code = source.code.replace(new RegExp('(\\s?)/\/!' + tag + '-start((.|\r?\n)*?)\/\/!' + tag + '-end', 'gim'), empty);     }
console.log('Error :', err);         }
isDate(obj) {         return typeof obj === 'object'? this.objectToString(obj).match(/date/i)!== null : false;     }
const onload = (event, element) => {   if (window.LOADED_ITEMS) {     window.LOADED_ITEMS.push(element.href);   }
{         return 0;     }
return callback(err);     }
name: "This is an example test",   tunnel-identifier: process.env.TRAVIS_JOB_NUMBER,    }
});     default:
var closestDate = closestTo(currentDate, closestAvailableDates);     if (closestDate) {
return this.file;  });  Clazz.defineMethod (c$, "autoSelectOnLoad",   function () {
this.LOOSE_SLASHES_REGEXP = new RegExp('^\/|\/$','g');
let { x, y, circle } = wrapper;  noFill();
yPos = i * hM + y;                         for (x = 0; x < wM; x++) {                             xPos = j * wM + x;                             var xyPos = (yPos * wDst2 + xPos) * 4;
presetUserDefinedElements(this, args); });
type="button">               {showGoal?                  intl.str('show-goal-button') :
throw new Error(`[vuepress] Syntax highlight for language "${lang}" is not supported.`)     }
List.prototype.equals = function (that, equals) {     equals = equals || this.contentEquals || Object.equals;     if (this === that) {
var solutions = [];     for (i=0, l=states.length; i<l; i++) {       if (states[i].handlers) { solutions.push(states[i]); }
function renderNotFound () {   return html`
vAll[i].setZIndex(vIndex++);   } }
codegen.createMacroDirectory = require('./macroDirectory').createMacroDirectory;   codegen.typeof = require('../../../lib/typeof').typeof;
module.exports = Aria.classDefinition({         $classpath : "aria.storage.LocalStorage",
label: 'Rename',               action: function () {                 tree.edit(node);               }
actions: {     viewAllBuilds() {       return this.get('routing').transitionTo('builds');
var api_complete = false,             current_range,
for (i = 0; (r = references[i]); i++) {       var element = r.element;
this.emit('drag', this);     }
_.each(IB.FullColourDescriptionMap, function(colour) {         var gcolour = findWhere(colour.literals, {'id': 'define'}).value;         IB.ColourMap[gcolour] = new IB.Colour(gcolour, colour.html, colour.name);     });
import appSettings from 'common/appSettings'; import { clearDecorations } from 'editor/decorations';
obj.account = ['*'];                 } else {                     arr = [];                     if (tObj.accountscreate) arr.push('create');
.on('exit', function () {         process.exit(0)       })
context.done();     });
for (y = 0; y < height - gap; y += gap) {     for (x = 0; x < width - gap; x += gap) {
clone.worldTransform.copy(this.worldTransform);             clone.dirtyWorld = this.dirtyWorld;         },
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-11\/vegmageddon-1353118122.swf",  admin_props : false,
$("button").on('click', function() {    selectOption($(this).prop('name'), getVisibleDilemma());   });
import FooterWrapper from '../../styles/layout/FooterStyles';
log.error('Reporter "%s" does not exist!');   throw new Error('Reporter "%s" does not exist!'); };
const HOST_RE = /^(\[[0-9a-f:]+\]|(?:\d{1,3}\.){3}\d{1,3}|[a-z][a-z0-9\-.]+)(?::([a-z][a-z0-9\-.]+))?(?::(\d+))?$/i function parseHostString (hostString) {
onMouseDown: function (evt) {         if (evt.isLeftMouseButtonDown()) {
return _this3.row(field, key, size);             }
options = {};     }     if (typeof options.mood!== "undefined") {
Sprite.prototype.render = function (target, prepend) {   target = target || null;   var prepend = typeof prepend === 'boolean'? prepend : true;
this.user.friends                .remove(this.model, {
export const store = new Store({   state: {
throw new Error(           'Module "' + name + '" required an unknown identifier "' + id + '".' +           'Available dependencies:'+ JSON.stringify(mod.deps, null, 2)
/\bMSIE 6\./.test(navigator.userAgent);   return isIE6;
form.append("design", new Blob([design], {type: 'application/octet-stream'}, "mydesign.glm"));       if (zip!= null){          form.append("design_imsld",zip);
}                 }                 return call.apply(this, arguments);
var l = 2; for (var i = 0; i <= 2; i++) {
var k=-1;   for(i=0;i<=kn.length;i++){     if(kn[i]<=t && t<kn[i+1]){
calculateFee (trs, sender) {     this.library.base.block.calculateFee();   }
}     return doc[steps[1]];   } else {
warnValidStyle = function(name) {     if (name.indexOf('-') > -1) {
this.onDraw(function () {         ctx.decorator = this.showHiddenCols._decorators[0];
default:         throw new Error("unknown pull_type method");     }
console.log("Completed export and written as CSV to \"" + config.exportfile + ".csv\".");                     });
text = text.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");       return (value.search( new RegExp(text) )!== -1);     },
pageFromCfi(cfi){   var pg = this.pageFromCfi(cfi);
function fauxChange(annotation) {               props.onChange(Object.assign({}, props.annotation, { value: currentComboAnnotations }));             };             let { annotation } = props;
} else {       value = "You must ACCEPT the HIT before you can submit the results.";       inputElement = <input type="submit" id="submitButton" value={value} disabled />;     }
return state - 1;         }         case RESET_COUNTER: {
defaultMessage: 'entries',   },   categorySelect: {     id: 'app.containers.SayingsPage.component.SayingDataForm.categorySelect',
if (selectedStyle && this.selectItemContains(item)) {             if (selectedStyle.shadowBlur!= null && selectedStyle.shadowColor == null) {
class UserStore extends Store {     constructor(flux) {         super();         this.state = {
return 2;    case 'd2':
if (typeof(o.filters)!= 'object') {           try {
};     case TYPE.SET_THRESHOLD:
getDefault(index) {      if (typeof index == 'undefined') {        return this.scope.default
.get('/')      .reply(200, { success: true });       var client = new RetryRestClient(restClientSpy);
for (let type of [`half`, `float`]) {             print(`native ${type} Sample(TextureDepth2D<${type}>, sampler, float2 location);`);
this.summaryWhiteList.forEach(function(property) {                 if (metacardDefinitions.metacardTypes[property]) {                     propertyArray.push({
var Log = require('../../src/lib/log'); var now = new Date('2013-03-01T00:00:00Z');
switch (state.chargingState) {     case 'Charging': {       const timeToFull = toHoursAndMinutes(state.timeToFullCharge)       return [`Charging at ${state.chargerPower} kW, complete in ${timeToFull}. ${range}`]
modelCtrl.$render = function() {     input[0].checked = (modelCtrl.$viewValue == value);
selectable: true,      set: function () {
var Date = function(str){     var d = str === undefined? new nativeDate() : new nativeDate(str);
switch (e) {       case 'ecma3':           e = '--ecma3'           break
define(function(require, exports, module) {     var SpecManager = require('./SpecManager');
function noop() {} function escapeXml(str) {
element.rotation = angle;        }
$('body').html(data.body);     $('#loading-bg').css({'opacity': 0.75}).show();     $('title').html(data.title);
function NextNights(props) {     props.nights.map((_, index) => {return {opacity: 0.5 * ((10-index)/10) + 0.5};});     return (
function findDoc(ts, doc, name) {     for (let name in ts.docs) {       let cur = ts.docs[name];       if (cur.doc == doc) return cur;
$interval(function () {                     if (1 === 2) {                          saveAnswers($scope, true);                     }                 }, 15000);
'recurring': 'Recurring eq true',             'timeless': 'Timeless eq true'         },         hashTagQueries: {             'alarm': 'Alarm eq true',
var TableNode = require(__dirname + '/node/table'); var JoinNode = require(__dirname + '/node/join');
return "P" + pIndex++; }
overlap = results[ind].response.overlapV     overlap = [overlap.x, overlap.y]     var correction = self.correct(delta, overlap)
function ($scope) {                             $scope.isToggled = false;
throw new Error( 'Invalid resource to report.' );  }
else if (ch == "%") {       stream.eatWhile(/[^,^\s^\(^\)]/);       state.beforeParams = true;
init(animation) {     super();     this.animation = animation;   }
if (disabled) {           return;         } else {
]   for (i = 0; i < singular_indicators.length; i++) {     if (str.match(singular_indicators[i])) {
while((match = this.regexpUnescape.exec(str))) {       let value = handleFormat(match[1].trim());       str = str.replace(match[0], value);
export class AnyExcept extends Quantifier {     constructor(tokenTypes) {         super();         this.tokenTypes = tokenTypes;
window.jTool = jTool;
link: function postLink(scope, element, attrs, controllers) {       var bsTabsCtrl = controllers[1];
modelChangeTgt = new ModelChangeStructure({                 affected:     node2.nodeId,
if (styleSheetsProcessed == styleSheetsToProcess) {                                              }
if( this._propagateEvents &&!this.isPropagatingFrom( emitter, event ) ) {                 var propagate = function() {                     if(!propagate._hasPropagated && _this._propagateEvents ) {
function model() {     }     model.prototype = $.extend(true, {}, Default, {
loader: 'file?name=${options.dir}[name].html!markdown-loader',                 test: /\.md$/             }`
} module.exports.ensureLoggedOut = function() {     exec(buildCommand("logout"), { silent: true }); }
throw new Error(err);       }
this.sendToDaemon(func, args, cb); }
} catch (e) {     remote.app.quit();
var img = this._createElement("img");                         img.onerror = function() {};
beforeEach(() => {     mocks = {       $t: jest.fn(),
if (!schemaVersion) {     let promises = []
console.error(e)          throw e
this.elem.find('.levelup'), this.elem.find('.levelup--number'));   this.tutorial = new app.Tutorial(this.elem);
configService.registryConfig(config);   }
CRUD = require('./../util/crud');
_function: while (_next) {     var n = _x2;
_.each(allBranches, function(obj, name) { branchNames.push(name); });
UI.createButton = function(buttonDescr)  {
[{              'mapId': self.__pgmId,              'mapId': self.__pgmId + '-tileoverlay',               'cmd': 'onGetTileUrlFromJS',               'args': [
elms = document.querySelectorAll('.audit-results *');   for (x = 0; elm = elms[x]; x++) {     elm.removeAttribute('data-style-using');
}     loadPlayerApi() {
app.use(bodyParser.urlencoded({ extended: false }))   return reduce(
var md5 = "${MD5}"   if (typeof document === 'object') {     var appendStyle = function() {       var style = document.getElementById(md5 + '-style')
test("Work with a single delegated property", function() {   ok(!dog.get('type'));
var React = require('react'); var cx = require('classnames');
var delayedSpecWalker = require( './delayedSpecWalker' ); var coerceIntoSpec = require( '../utils/coerceIntoSpec' );
var regex = new RegExp(pattern);                         files = files.filter(function(file) {                             return file.name.match(regex);
return spaceship(v.localeCompare(w), 0);     case 'array': {       let vLen = v.length;       let wLen = w.length;
console.error('error:', error.message);       process.exitCode = 1;     });
isMultiple = this.isMultiple;
} catch(ee) {       console.log(ee);
} else {       TagBar.unfocusTagElement($focusTargets.eq(focusIndex));       focusIndex = nextFocusIndex;
import recording from '../../recording'; import feature from '../../utils/feature';
console.error('Only Bash, Zsh, and Fish shells are supported :(')   process.exitCode = 1 }
appendSequenceItem: function(node) {         var $oid_node = $(node).parent();         var $proto_node = $oid_node.find('.deformProto').first();
for (var key in obj2) {         if (obj2.hasOwnProperty(key)) obj[key] = obj[key];       }
} else {    $nextmessageset = $('#messages.user-messages').first();    if (
export const licenses = (configuration, http) => {   const fn = licenseId => {
let renderKey = ccOption.renderKey;   if (!renderKey) renderKey = ccOption.renderKey = ccUniqueKey;   const ccUkeys = safeGetArrayFromObject(renderKey_ccUkeys_, renderKey);
return false;     }     Binding.create = function (bindingDef, targetScope, attrKey, context) {
element.append(toolbar);             }
restrict: 'A',       link: function(scope, element) {         element.on('click', function() {           event.selectionModelIgnore = true;
case 'video':     var i, n, src, type;
collection = args.OldValue;              count = collection.GetCount();              for (i = 0; i < count; i++) {                  this._ElementRemoved(collection.GetValueAt(i));
})        .catch(error.bind(this));     },
var DATE_PATTERN = /^(\d\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d)(\-)?(\d\d))$/i;   var adapters = [];
, Paginator  ;
var Logger = require('js-logger'); Logger.useDefaults(); Logger.setLevel(Logger.INFO);
let data = response.data;       if(data.hasOwnProperty('wallets')) {
var validations = checkVisibility? fieldOptions.validations : fieldOptions;     var serverSide =!window;     for (var i = 0; i < validations.length; i++) {
}; } KwsMedia.prototype.__proto__   = EventEmitter.prototype;
const {   StrictMode,
if (!this.editWindow) Ext4.Error.raise('editWindow config is required');         if (!(this.editWindow instanceof Ext4.window.Window)) Ext4.Error.raise('editWindow config needs to be a Ext.window.Window');
if (!(error instanceof Error)) {         body = error;
data.user.permissions = [];             }             if(data.user.hotkeys == {empty: "hotkey"}){               data.user.hotkeys = [];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-01\/1294354086-7937.swf",  admin_props : false,
sort: 'Sırala',     sortTitle: '${type}\'ın alt alanlarını sırala',     sortTitleShort: 'İçerikleri sırala',
&& html.toString()    .replace(/ about="[^"]+"(?=[/> ])|<meta property="mw:TimeUuid"[^>]+>/g, ''); }
this.eventEmitter.removeListener(type, listener);     }
expect(received1[0].widget).to.equal(this.widgets.customEvents);                  require('raptor-pubsub').channel('customEvents-' + this.id).emit('emitTestEvent2');
Date.getTimezoneAbbreviation = function (offset, dst) {      var n = (dst || false)? Date.CultureInfo.abbreviatedTimeZoneDST : Date.CultureInfo.abbreviatedTimeZoneStandard;      for (var p in n) {           if (n[p] === offset) {
_rerenderCb() {     if (this._renderRequestId) {
define(function () {  var restartPlayback = function () {
}) {             const allDirty = rootGetters['entities/allDirty']();
state = 't' ;             break;           case 39:
var breakLoop;         for (i = l; i--;) {             if (breakLoop === null) break;
return E24;         case 48 :
var logger;     var driver = model.load( module, {
throw self.constructor.name + " requires record to pushRecordDetailsView"    }
var sliderWidth = parseInt(style.getPropertyValue('width'), 10);
.catch((e) => {         console.log('If this error states "No updates are to be performed.", it is not really an error', e);       });
test();       schema = { anyOf: [ schema ] };       test(1, '#/anyOf/0');
var name;                 name = self.target.canonicalName(variables.scope);
debug('%s Table Created',table);       if (createView!='') {         client.query(createView,function(err){
var children = my_notebooks.concat(user_nodes).sort(compare_nodes);         children = as_folder_hierarchy(children);
import BigNumber from 'bignumber.js'; import { ERC20 } from '../../partners/partnersConfig'; const { MKR, DAI } = Maker;
DockUtils.flush = function () {         if (!(DockUtils.root instanceof FireDock) ) {             this.root._finalizeMinMaxRecursively();
var str = "";             for(var i = this.params.length - 1; i > -1; i--)             {
it('should clean out unsubscribed subscribers', function (done) {     var subject = new Subject();
return false;         subscript = script.subscript(s, lastSep);
return how.autoplay!= false? play() : play;  function play () {
canvas.getContext("2d").putImageData(img2, 0, 0);  }
this.initialLoginAndLoad();   }
Ext.define('devilry_subjectadmin.model.Subject', {     extend: 'Ext.data.Model',
console.log('Added image tile layer to world'); });
try {         await storage.sync.set({rules});         return rules;
function writeOutput(result, cb) {       if (!options.output) {
console.log('you can find namuwiki database on [[나무위키:데이터베이스 덤프]] document') main()
var hookAfter;  describe('pluckQuery', () => {
return true; }
let hostName = null;     if (!vipPortError) {       hostName = (
return translate({bool: true}, 'es')      .then(() => {        expect(e).toBeDefined();        expect(e).toEqual({bool: true});       });
while (modulePath.indexOf('/./') > -1) {    modulePath = modulePath.replace(/\/[.][/]/g, '/');   }
setValue: function(options){             var hours, item, l, minutes, period, recur, startDate, temp;             if(options.startDateTime){
var SC = 1 + 0.045 * a_Cp;   var SH = a_Cp * T;   var RT = -2 * RC * sin(radians(2 * d_ro));
} catch (err) {         throw new Error(`[show_sha] could not fetch refspec for ${repo_path}`, err)     }
$('a').attr('title').should.eql('Google link');     $ = cheerio.load(link('Click here to Google http:     $('a').attr('href').should.eql('http:
var EventEmitter = require('events').EventEmitter; var path = require('path');
});       if (movement.left) {         this._applyTransform3d(element, movement);
var defcols = {};   if(this.from) {    this.from.forEach(function(fr){
var Map = require('immutable').Map var Store = require('../src/store')
var setScales = function(chart, type){
var self = this;       var login = $("#application").find(".assignees.is-flying").data("assignee");
metricsAtlas = this.context.measureText(atlasLabel[ctr]);                 if (metricsAtlas.width > atlasLabelWidth) {
}     var tokens = $('#tokens button');
var Mouse = require('./model/Mouse'); var MiceAppView = require('./view/MiceAppView');
+ unicode.packages.Nd         + unicode.packages.Pc + "\\$_]|\s])+", "g"     );
groupKey = item.u+":"+item.v;             cellGroup;             if (cellGroupsMap.hasOwnProperty(groupKey)) {
}             case 'S':
term.bold.red('\nHint: did you remember to install FFmpeg with x264 support?\n')     return   })
it("move should be 1 ", function(done) {              const stemGroup=file.createGroup('pmc/Trajectories');
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[57],{
}                                     }).catch(chalk.red(console.log));                                 }));
import Normalizer from './route-recognizer/normalizer';
return changeConnectionState(state, action.payload.connectionUri, won.WON.Closed);         case actionTypes.messages.connectMessageReceived:         case actionTypes.messages.openMessageReceived:
throw e && e.stack? e.stack : e;     }
exports.download = function(req, res) {   var headers = {     "Content-Type": "application/force-download",
assert(sum(sum(one, two), three) === sum(sum(two, three), seven)); } catch (e) {     console.log(e); }
}; const DAY_MILLISECONDS = api.common.duration('1d');
var first = false;    var loop = function loop(data) {     if (first) {
},   willDestroy() {     var key = this.get('keyForId');
if (regs[r].signals.any_one) {       result.push(terms[r]);       continue;
, colors = require('colors')  , assert = require('assert')
for (var i = 0, n = info.length; i < n; i++)           if (info[i] instanceof Array)             unpack(obj[i], info[i]);
var isStatic = false;   if (typeof Handler === 'function') {
});     it('getFoWObjectArray works without subcontainers', () => {       const fogOfWarModule = Object.assign({}, fogOfWarMod);
getPerm = function(perm){    if (!isNaN(parseInt(perm, 8))) {     var mode_array = perm.split('');
throw "GetUserToEnterExistingPasswordWithCB called but self.passwordEntryTaskMode not.None"    }
if (typeof process!== 'undefined' && process.env.STREAM_URL &&!apiKey) {     parts = /https:\/\/(\w+)\:(\w+)\@([\w-]*).*\?app_id=(\d+)/.exec(       process.env.STREAM_URL
className={className}>         {children? children : (           <span>
ShaderProgram.prototype.link = function() {   if (!this.vertexCompiled_) {
self.locked = get(featureOptions, 'locked', false);     self.membersCount = get(featureOptions,'membersCount', null);     self.dateStart = get(featureOptions, 'dateStart', null);
isObject: function(obj) {   return!Ember.isNone(obj) && Ember.typeOf(obj) === 'object' && obj.constructor === Object;  },
} else {         last_trade = s.my_prev_trades[0]       }
errorout() {             }
app.all('/services/vector-tiles/dataset', flow.define(function(req, res) {   this.args = {};
value: newValue    }, null);   });
for(i = 0; i < cleanedPacketArray.length; i++) {   var origin = cleanedPacketArray[i].origin;
debugflag.should.equal(options.debug);       options = {         debug: undefined
], function(Controller,formatter, VerticalLayout, HorizontalLayout, Text, Input, Dialog) {  "use strict";
goog.net.XhrIo.prototype.getResponseText; goog.net.XhrIo.prototype['send'] = goog.net.XhrIo.prototype.send;
var SIGNALING_SERVER = 'https:
function make() {   var newrecord = component.slice();
var took = end - start;                 if (took >= threshold) {                   AlertService.warn('Loading cluster information is taking'+
if (count)                 result.push(['count', count? count : null]);             return result;         },
function execute(id, payload) {     const protocol_re = /https?:\/\
};         }         bindingPath = tsBinding.path.parentPath;
case 'boolean':           return value === true || value === false;         default:
};     req.requestHandler(req, {});   });
}(jQuery, d3));
if(abs(this.changeDelta)>1){     this.$fastTextDelta = 0
else if (ruleType === "COMPOUNDRULE") {     numEntries = parseInt(definitionParts[1], 10);
this.proxy.listen(this.proxy_port, block); }
import Ember from 'ember'; import layout from '../templates/components/icon-facebook';
import React, { Component } from'react'; import { Container } from 'elemental';
Process.prototype.startEventLoop = function() {         runtime.control._frame = 0;
import { Form } from '~/components/Form'; import HelpButton from '~/components/HelpButton';
while (wrongWord) {                         index = text.indexOf(word, currentCursor + 1);
var force;    return function( delta ){
return sendNewPostToServerSuccess(state, action);         case actionTypes.SEND_NEW_POST_TO_SERVER_FAIL:             return sendNewPostToServerFail(state, action);
while (dfsList.length > 1) {       node = dfsList.pop();       node.parent.total += node.total;
{             var result = self.loadModule(dep);
} else {                 $('#keyboard.key-CTRL').removeClass('active');             }
parse: function (response) {                 return response.data;
}     Object.assign( hx, { KeyMap : KeyMap });
constraints.min = Number(this.minimum);      if (!isNaN(parseInt(this.maximum)))    constraints.max = Number(this.maximum);
}   permalink() {     if (this.key) {
} else if (this._calculateMoveDirection() === -1 && this._checkRangeBarMoveRange()) {       for (var i = 0; i < this.index.length; i++) {        this.index[i] -= this.defaults.step;
if (!runtime.local &&!runtime.environment) {             this.valid = false;
window.viewModel = viewModel;     $("body").loadTemplates({       bannerTemplate: "templates/banner.html",       footerTemplate: "templates/footer.html",       guideTemplate: "templates/guide.html"
import { PropTypes } from'react'; import React, { Component } from'react';
var e, el, m, ml, fm, fml, element, material,   v1x, v1y, v2x, v2y, v3x, v3y, v4x, v4y;   if ( this.autoClear ) {
email: /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/,   url: /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})(([\/\w\.-]*)?)(\?[-_+=~\.;&%\w]*)?(\#[-_\/\!\w]*)?( *)?$/i,   hex: /^#?([a-f0-9]{6}|[a-f0-9]{6}|[a-f0-9]{3})$/i,
if (container === window) {     fold = window.pageYOffset;    } else {
return '[' + typeTransformer(matches[1]) + ']';     case 'list':
return "ns="+ this.namespace +";i="+this.value;         case NodeIdType.STRING:
import { Permissions } from './permissions.js'; import { LoggedInMixin } from'meteor/meteor-gazelle:method-mixins';
var testDocDefinitions;   beforeEach(function() {
success: function(data){          if(data.status==="success"){
if (d3.select(params.root+'.demo_group').empty()){
var input = "while echo 1 && do blah; done";     parse(input)
return _deployApp(c);
var tokens;  if ("Molecule".equalsIgnoreCase (localName)) {
});                         bind_noify_click_event();                     }                 },
if(options.parameters){       href += '?';
onload: {a: handlers.EventAttributeHandler},      complete: {p: properties.AssetComplete},
ngShow: ngShowDirective,             ngStyle: ngStyleDirective,
template.route(/\.md/, function (params, next) {   return params; });
if (src) {       key = 'href'
if (err) {                 logger.error('Failed to delete news', err);             }
}             } catch (e) { }
exports.buildFlags = function(env, flags) {     flags.context = env.contexts[0];     return flags;
(async () => {  browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] })
normalize(bbox, 0, bbox, 12);                 d1 = dot(normal, bbox, 12);
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
function loadFile() {
var bgCtx = bgCanvas.getContext('2d');
scrollFunc() {       dispatch(loadMoreCharts());
const innerScale = (vWidth - padding * 2) / vWidth   return (
}                         break;                     default:                         return true;                 }
}     return (
var project = {       this.fs.copy(
if (settings.showHome!== false) pageArray.unshift(settings.homeTitle);   thisURL = crumbURL = (win.location.href.indexOf(bcpie.globals.primaryDomain) > -1)? bcpie.globals.primaryDomain : bcpie.globals.secureDomain;
];      if(indent) {          result += generateIfKindCheck(child, tokenKinds, indent);
select.el.querySelector("li[data-tid='" + tid + "']");     if (task) {       result += task.getAttribute('title') + '. ';
if (process.env.TRAVIS) {     https.get({host: credentialHost}, function(res) {
pubads.addEventListener('slotRenderEnded', function(event) {         if (event.isEmpty) {
function dfu() { } dfu.findCompatibleDFU = function() {
E2E4LoadButton.prototype.loadData = function () {                     this.ngListService.normalizedService.reloadData();
error.should.have.property('code', 'INVALID_TYPE');           error.should.have.property('message', 'Expected type "string" but found type "integer"');           error.should.have.property('path', ['swagger' ]);
})     }
get: function () {         return this.data.sleepSpeedLimit;
var cookieValue = goog.net.cookies.get(eightball.SoundEffectManager.s_CookieSoundOn, eightball.SoundEffectManager.s_CookieOnOffEnum.ON);   this.m_isSoundOn = cookieValue;
return {x: 0, y: 0}         }
import attr from 'ember-data/attr'; import { hasMany } from 'ember-data/relationships'; import {gravatarImage} from '../utils/urls';
initVal(_data, _hTmp, _comp) { }     flush() { }
delete params[c.key];             } else if (params[c.key]) {                 return false;
await add.execute(argv);    break;   case "build":
assert(sum(one, two, three) === seven); } catch (e) {     console.log(e); }
{                 var trueNodeBox = nodeBox.getAncestorByClass(nodeBox, "nodeBox");                 CSS.setClass(trueNodeBox,'search-selection');
Account.create({name : 'Account'+ i, email : 'account' +i + '@gmail.com', age : i}); }
App.moduleMap({"home":"home.js"}, ''); })();
vChild._computedHeightTypeNull? vChild._resetRuntimeHeight() : vChild._applyRuntimeHeight(vChild.getHeightValue());     }   } }
subscribe("show_options", function(){   optionsDOM.style.display = "block";   optionsDOM.style.top = "200px";
$scope.trainings_under_this_process = getNoOfTrainingJobs(data);         $scope.available_models = getAvailableModels(data);
expect(body._id).toBeDefined();             expect(body.$outcome).toBeDefined();             expect(body.$outcome.success).toBeTruthy();
];         if (pickResult) {
var __executed = /a[a-z]{2,4}/.exec(new Object("abcdefghi")); var __expected = ["abcde"]; __expected.index=0;
if (options.backdrop) {           if ( $destroy ) options.backdrop.remove();           else              $animate.leave(options.backdrop);
this.name = "TransitionAborted"; } export { Transition, transitionByIntent }
return fromClassForDoc(ampdoc, 'action', ActionService); }
}; inherit(geo.contourFeature, geo.feature);
return function(value) {     console.log('value: ', value)
this.status = 400; }
export function* getAgentDocument(payload) {   const agent = yield select(makeSelectAgent());
tagInsertMap.sort(function(a, b) {     if (a[0] > b[0]) { return 1; }     if (a[0] < b[0]) { return -1; }     return 0;
module.exports = (server) => {   return {
{                 "name": "京东中间页",                 "src": "^http:\/\/re.jd.com\/cps\/item\/([0-9]*).html",                 "dst": "http:
var status = response.status;                 response = response.data;                 if (status == 200) {
default:            basis.dev.warn('Unknown config property `' + key + '` for app, value:', value);       }
import React from'react'; import { connect } from'react-redux';
if (argv.bbox && typeof argv.bbox ==='string') {         argv.bbox = argv.bbox.split(",").map(Number);     }
endOffset = denormalizeOffset(endOffset, $scope.textContent);   node = it.nextNode();   while (node) {     let tc = node.textContent;
hasLegends = util.array(this._mark.def.legends).length > 0;   bounds.mark(this._mark, null, group &&!hasLegends);
throw new Error("An url is required for loading media");   }else{
constructor() { super('yml'); }   invoke( rez, themeMarkup, cssInfo ) {     return YAML.stringify(JSON.parse( rez.stringify() ), Infinity, 2);
else e.vectorContext.drawGeometry(geom);   }   if (imgs) imgs.setScale(sc);
var tile_ = this.extraInfo_.tile_;         if (tile_) {
case 'isPaused': {         return!this.isPlaying;       }       case 'completeLoopCicles': {
if (err) {       pgdone();
indexLayer: function (layer) {         if (!this.options.indexing)             return;
if ($this.hasClass('tb-notes-activated')) {             $this.addClass('tb-notes-activated');
var from = diffs[i].from;      length = from.length;      var tree = this.root;
return             (function() {
function deleteDonor() {         $.ajax({             url: "/api/donor",
$scope.delete = function (customServiceSelected) {
function rebatchCommands(primitive, context) {         if (!primitive._batchDirty) {             return false;
Array.prototype.push.apply( target, array ); }
import DisableModal from './DisableModal.vue' import Styleguide from '@human-connection/styleguide'
selectedRows[0] = e.target.dataset.rowid;       }       for (key in dataIndices) {         this.jsonData[selectedRows[0]][key] = dataIndices[key];
isEmpty() {    return (this.liveBuffersOpaque == null || this.liveBuffersOpaque.length == 0) &&      (this.liveBuffersTransparent == null || this.liveBuffersTransparent.length == 0) &&
} } JUnitReporter.prototype.TPL_PATH = path.join(__dirname, 'tpl', 'junit_report.tpl');
let boxParser;     function setConfig(config) {
var box = {                 width: opts.width
componentWillMount() {         this.fetch( 'System.getenv("DATABASE_URL")' )            .then( results => { return results.json(); } )
var query = $location.search().q || '';         var facet_query = new RegExp(facet_id + ':' + facet_value + '"', 'i');         if (query.match(facet_query)) {
return div.innerHTML; }
__handleResizeInternal: function () {                 setTimeout(function () {
constructor(key, value) {     super(`Validation failed for ${key}: ${value}`);   }
if (file.attempts < max_validate_attempts) {
prev,     pos = style(panels[0].getParent(), 'padding' + (this.up? 'Top' : 'Left')),     i,
fetchUrl: url,         requestBody: body     } = getters.inputData;
function setURLProtocol (err) {       if (err) log.error(err.message);       console.log(protocolKey);
console.error(e);     process.exitCode = 1;   }
initTypeProto(Sequence, 'ceylon.language::Sequence', $init$Sequential(),             $init$Cloneable());     }
return text            .replace(/(^|[^!])\!{2}($|[^!])/, '$1!$2')            .replace(/(^|[^!])\!{4}?($|[^!])/, '$1!!!$2');     }
this.setContext(gl); } WebGLFastSpriteBatch.prototype.constructor = WebGLFastSpriteBatch;
}  return Util.makeEmptyArtistTrack(); };
var Container_Gridster = React.createClass({  displayName : 'Gridster',
for (let i in tags) {         let tag = tags[i];         doc[tag.title] = tag;     }
return this.varstmt();       case '{':
dofRadius: 1,   ssao: true,   ssaoIntensity: 5,
var hasValueHelper = require('../utils/hasValue.js') var transformPathToArray = require('./../utils/transformPathToArray.js')
return parts.join('\n');     }     _getCanonicalizedAmzHeaders(headers){
Transport.prototype.poorConsensus = function () {  if (__private.broadcaster.consensus === undefined) {   return false;
const viewUrl = Versioning.lastLoaded.view.url;             const reg = /\/([^/]+)\/view\.json/;             const m = reg.exec(viewUrl);
throw new Error('Do not drop the production database!!!!!'); }
cancel: function() {       if (this.content) {
else if(type === 2) {                     days = this.$element.find('.month-days').select('selectedItem').value;                     pos = this.$element.find('.month-day-pos').select('selectedItem').value;
return;   }   this._iconThemes = null;
} else {         localStorage.removeItem('config.default_app_id');         app_id = domain_app_ids[getCurrentBinaryDomain()] || 1;     }
defaults_,       data_,
return folders.concat(relReqStr.split('/')).join('/'); }
load(absUrl, function(svgString) {               inject(img, svgString, absUrl, options);
import Z from '@effectful/generators'; function a_2() {   return Z.pure(2); }
var ry = data[i++];                     var startAngle = data[i++];                     var endAngle = data[i++] + startAngle;
if (/\.feature$/.test(fileName)) {             editor.getSession().setMode("ace/mode/gherkin");
const files = coverage[0].files   return files.map(file => {
throw Error('CodeFlask expects an object containing options as second parameter');     }
module.exports = function(socket, rf433mhz){    var clients = [];
var main = modules.main;        (main.default || main)(data.request);
throw new Error("Value for " + data.val + " is bigger than " + data.max);   }
if(!_.isE())    return _.register(new iChart[_.is3D()?'Coordinate3D':'Coordinate2D'](_.get('coordinate'), _));   }  }
self.request.open('GET', self.url, true);       self.request.withCredentials = true;
process.addListener("exit", function () {   assert.equal(completed, 2);
_.each(files, (path) => {     const name = path.replace(/[a-z0-9/_.]*themes\     list.push(name)
if (n === p.left) {       if (g.left === p.right) { p.right.parent = g; }       p.right = g;
$scope.workflows = data;         });
var toHexString = function(byteArray) {             return Array.prototype.map.call(byteArray, function(byte) {
console.log(new Date(date) +'Created pings for check "' + check.name + '"');           }         },
stringify:   this.stringify,     label:       this.label   }) + '\n';
reportError("An error occurred!", e); });
minZoom: 0,         maxResolution: 40075016.68557849 / 512
wrappedItem = wrap(list[i]);       root = getTreeScope(wrappedItem).root;       if (root) {         if (root instanceof scope.wrappers.ShadowRoot) {
} catch (error) {    done(error);   }  });
layers: [baseMap.tileMap.prop_tilemap],     target: element     };
devConfig.devServer = {}; }
obj = new AX('ShockwaveFlash.ShockwaveFlash');        } catch(e) {           console.log(e);        }
const CrowdsaleDAO = artifacts.require("./DAO/CrowdsaleDAO.sol"); const DAOx = artifacts.require("./DAOx.sol");
ContextMenu.prototype._isChildOf = function (child, parent) {     var e = child.parentNode;
};                 Scanner.prototype._next = function () {
}; if (prod) {
Meteor.call("deleteItem", this._id);             toastr.success("Delete Item", "Item deleted");
return content    .replace(/\sdata-reactid="\S+"/g, ''); }
System.register(['./generated-chunk.js', './generated-chunk2.js'], function () {  'use strict';
const remainingStack = stackProcessed.slice(level + 1)     return remainingStack.reduce((val, proto)=> proto.lift(val), val)
var mongoose            = require('mongoose'); var historySchema = mongoose.Schema({
var cancelMove = function(){              Ember.$(ui.sender).sortable("cancel");
}       break;     case'mouseup':       stage._mouseEvents.push('mouseup');
throw "INVALID_STATE_ERR: send flag is true";     }     headers[header] = value;
Aerospike.prototype.exists = function exists (key, policy, cb) {   this._currentClient.exists(key, policy, function existsCb (er) {     if (er.code!== 0) {
if (!isEdge &&!isIOS && clipboardData ) {
const result = await luis(config, serviceManifest, args, requestBody); }
if (err) {   process.exitCode = 1;  }
throw 'Store must be a subclass of Settings.Store';   }   if (this.__stores__[name]) {     throw 'Duplicate store name:'+ name;
FILE_TEXT_SETTINGS: 'file_text_settings',   FILE_EXECUTABLE: 'bat_exec' };
const CONVERT_MAP = {":": "/", "/": ":"}
var CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin; var HtmlWebpackPlugin = require('html-webpack-plugin');
} for(var x in Date.prototype.getUTCSeconds) {   if(x === "length") {     $ERROR('#2: The Date.prototype.getUTCSeconds.length has the attribute DontEnum');
modified_state.f[dest] = { t: 'c', c: modified_state.c[src].pop() };         } else if (my_move.t =='s2s') {             modified_state.c[dest].push(modified_state.c[src].pop());
$('rg-modal.overlay').click()     spyOnClose.should.not.have.been.called
.promise()).Responses[tableName]
exists = false;   try {
else {             for (i=0; i < points.length - 1; i++) {                 if (x >= points[i][0] && x < points[i+1][0]) {
(function($, window) {  'use strict';
});   it('provides \'modifier\' attribute', () => {     const select = element.querySelector('select');
(function(oipfCapabilities) {         oipf.channelList = {};         oipf.channelList._list = [];         oipf.channelList._list.push({             'id': '0',
it('element has a thumbnail', function () {
var line = this.blockToCode(block);     if (Array.isArray(line)) {
description: "Reload specific commands",   usage: "reload <command>",   param: "",
if (this.graph == null) {         this.setupGraph(t);
let latlngLabelPrecision;
} else if (err) {           console.log('balUtilPaths.scandir: readdir has failed on:', options.path);
'post-special': [],
import TmSessionImportSuccess from "common/TmSessionImportSuccess" jest.mock(`scripts/google-analytics.js`, () => () => {})
return `https: }
this.fireEvent('store');   if(this.storePrevented) {     return;
var privateDict = [];     for (i = 0; i < priv.size; i++) {       privateDict.push(aStream.getByte());
for (i = 1; i < querySegments.length; i++) {           urlComponent = decodeURIComponent(querySegments[i]);           var itemsType = null;
remove: function(entity, refresh, depth, doneCallback, failCallback) {     throw new Error("Remove is not yet implemented.");   }
{                 if (obj.feature instanceof Array)                 {
}                                  resolve({stringOut: stringOutValue});
if (node.nodeType == 3) {    var tempNodeVal = node.nodeValue.toLowerCase();   var tempWordVal = word.toLowerCase();   if (tempNodeVal.indexOf(tempWordVal)!= -1) {
dojo.require("dojox/widget/Toaster");
return TD.Direction.up;         case '>':
asyncLoader.addCallback(new DictionaryCallback(this.initParams.dictionaryUrl));   asyncLoader.addCallback(new DictionaryCallback(this.initParams.editorDictionaryUrl));   asyncLoader.load(function() {
loadedLocales : null,
chartModel.noDataMessage = cowc.CHART_LOADING_MESSAGE;         } else if (noDataMessage) {             chartModel.noDataMessage = noDataMessage;         } else if (error) {
TrainingCustomSlideNode.save(spec_node, onSaveFinished);                     break;                 case "BranchNode":                     spec_node.node = new_trainingtreenode;
logger = require('morgan'),     service = require('./service'),
toWireType: function(destructors, o) {             if (null === o) {                 return 0;
for (i = 0, _len = Math.min(limit, sorted_corrections.length); i < _len; i++) {     if (!self.hasFlag(sorted_corrections[i][0], "NOSUGGEST")) {
assertEventListNotEmpty = (list, passedMessage, defaultMessage) => {   let assertionMessage = createAssertionMessage(passedMessage, defaultMessage);   if (!Array.isArray(list) || list.length === 0) {
update.activeTracks[i].artists = [];       for (j = 0; j < this.activeTracks[i].artists.length; j++) {        update.activeTracks[i].artists[j] = {
element.remove();         setTimeout(done || noop, 0);       },
function isInteger(value) {     return /^-?\d+$/.test(value); }
var Observable = Rx.Observable,     SerialDisposable = Rx.SerialDisposable,
it("should assert true", function(done) {     var example = this.getExample();     assert.isTrue(true);
console.log(e);     data = {error: true};   }
class BaseDirectorService extends BaseService {   constructor(plan) {     super();     this.plan = plan;
VolumeMenuButton.prototype.createEl = function(){   return Button.prototype.createEl.call(this, 'div', {     className: 'vjs-volume-menu-button vjs-menu-button vjs-control',
Dom(function () {                  Dom("body").append(result);              });
var nbVerts = verts.length;                     for ( j = 0; j < nbVerts; ++j )                         vertices.push( verts[ j ] );
this._header = null;   }
throw new Error("Value for " + data.val + " is smaller than " + data.min);   }
if (process.env.FORCE_SSL) {     app.use(enforceHttps({
buffer[i] = 0xff;   }   for (i = 0; i < num_macs; ++i) {     mac_buffer.copy(buffer, (i + 1) * num_mac_octets, 0, mac_buffer.length)
col = frm.append("div").attr("class", "col");
}); } util.inherits(UserStream, EventEmitter);
},         link: function(scope) {             scope.pages = [];
},         resolve: ({ role }) => {             const result = getUsers();
import React from'react' import {useStaticQuery} from 'gatsby' import styled from'styled-components' import {Helmet} from'react-helmet'
function handleChangePassword(req) {  logger.debug("handleChangePassword");
var pid = receivers[i];           a = a_shares[pid];           b = b_shares[pid];           c = c_shares[pid];
commentText += text;     });
import SparklinesSpots from './SparklinesSpots'; import DataProcessor from './DataProcessor';
const path   = require('path'); const env   = process.env;
var street = getStreet()
$scope.riskTypeDictionaryDatas = JSON.parse($scope.data.riskTypeDictionaryDatas);  }, function () {   console.log("failed");  });
import React, { Component } from'react' import Header from '../components/Header'
</div>         );         break;       default:         throw new Error('Should not reach here');
if (err!= null) { cb(err); return; }           if (email) {             self.saveAccount(email, cb);
if (this.mxOpts.custom) {         dnsRecords = dnsRecords.concat(_.map(           this.mxOpts.custom.filter(custom => custom && custom.target!== ''),
return new PodioErrors.PodioBadRequestError(response.body, response.status, request.url);       case 401:
debug('%o', results)   if (results.every(result => result.success)) return endProgram(0)
function getdata(data) {             if (about[data.key.split(":")[0]].symbolToName) {                 let requestOptions ='',url = '';
if (typeof config.facetsCustomizer === 'function') {         var add = function(property, label) {           derivedFacets.push({value: property, label: label? label : localize(property)});
zi = new Array(n-1)     a = 1.0, b = 0.0, k1, k2, k3     for(i=0; i<n-1; ++i) {
} } startwebsocket_manualFiles();
const CodeBlockRequired = new RegExp('(<\/code-block>)', 'g');       if (CodeBlockRequired.test(parseHTML)) {
expect(Kefir.zip([a, b, c])).to.emit([[1, 0, 3], [4, 2, 5], [6, 9, 8], '<end>'], () => {       send(a, [1])
deleteAll: function(args) {           opalModel.$delete_all(args);         }
}         break       case 'config':         log.debug('rendering config screen from unlock screen.')
return;     }     for (let i = 0; i < this._tabRects.length; i++) {
return undefined;  for(let n in TiddlyWiki.standardFieldAccess) {   if(n == "tiddler")
QUnit.test( 'Sampler', function () {             var keys = [];
export const convertToGrayscale = pixels => {   if (!(pixels instanceof Array)) throw new TypeError("Expected array of pixels");
}); } var server = buildServer().listen(port);
case RECEIVE_QUERY:             break;            case CLEAR_QUERY:            default:
return polygons; }
function dockerBuild(done) {   dockerRun(done);   spawn('docker', ['build', '-t', 'executor', '.'], spawnOption)  .on('exit', (code) => {
module.exports = require('./chalk.mjs')
import won from "../won-es6.js"; import { connect2Redux } from "../won-utils.js";
currentVersion = _.omitBy(currentVersion, function (i) {           return i!== null && i === 'object' &&!(i instanceof Date);         });
notifyChanges(this);     }     function notifyChanges(state) {
if (err) return submit.show()       window.location.href = "/world.html#" + hoodie.account.username + '/' + worldName
var Promise = Ember.RSVP.Promise; var PromiseArray = Ember.ArrayProxy.extend(Ember.PromiseProxyMixin);
else {     { _id: req.params.id }    }
const arrayify = require('array-back') const ExplainStream = require('./explain-stream')
return url;     }     function getStyleString(styleObj) {
} from'redux-immutable'
tree.traverse_and_compute(_.noop, "pre-order", root_node, function(n) {     if (!d3.layout.phylotree.is_leafnode(n)) {       var bs = n.bootstrap_values        ? +n.bootstrap_values
cms.fillPath = function(data, path) {  path = ensureArray(path);
} else {     primary = {region: primary[0], table: primary[1]}; }
case "json":                   var php_script = require('services/getLatestRevision.php');                   d3.json(php_script + "?vis_id=" + elem.file, setupTimelineVisualization);                   break;
case "radial":      dx = pt.x - fill.cx, dy = pt.y - fill.cy;      o = Math.sqrt(dx * dx + dy * dy) / fill.r;      break;
it('should update selected (first) row', function () {             runTest(scrollSettings,
var cldbid = response.client_database_id;                     cl.send("servergroupaddclient", {sgid: wantedrankid}, function (err, response) {                         if (typeof err!== "undefined") {
CLI_ANDROID_SDKMANAGER,     getAppVersion,
this.timeStamp = Date.now(); }
Template.sidebarItem.onCreated(function() { });
expect(actual).toMatchSnapshot(); });
printBarcode: function(data, type, settings){     settings = settings || {};
HTML_ATTRIBUTE: /(^|\s)([\w-:]+)(\s*=\s*("([^"]+)"|'([^']+)'|(\S+)))?/ig,         CSS_SELECTOR: /([-_.#:\w]+(?:\s+)?[{,>])/g     },
for (var key in form) {       if (form[key] === true || form[key] === false) {
assert.fail("Should have thrown an error");    } catch(err) { }   });
return list(appId,envValue, cb);       case "unset":
function updateDependents(itsPath, alwaysRemove) {     return function(_doc, _next) {       if (!doc) return next(null)
}     if ( vars.dev.value ) console.timeEnd("focus labels")   }
var filters = require('../src/filters') var data = require('./data')
}   function draw (offset) {
parts[2] = text;                                  subtitleArray[videoid - 1].push(parts);
filter (predicate) {     return this.prioritized.filter(predicate)
}     }
},   empty: function () {    var empty = true;
]},    {components: [     {kind: Image, src: {      'hd' : 'http:
that.screenName = that.screenName || that.username       that.id = uuid.v4()
description: inKindDescription || "",     paymentMethod: ""
return;             }             return new Promise((resolve, reject) => {                 var xhr = new XMLHttpRequest();
itemCodes.length - EXPECTED_SUFFIX.length) {       throw new Error('Invalid search query url fragment for'+                   itemsType + ':'+ urlComponent);     }
})     if (d.length) {       if (d[0].password == userItem.password) {         const now = new Date()
import React, { Component } from'react'; import { Components, registerComponent } from'meteor/vulcan:core';
render() {     const { id } = this.props;     return (
return (this.bookmarks)? this.$q.when(this.bookmarks) : this.$http.get(this.URLS.FETCH).then(this.cacheBookmarks.bind(this));   }
static get refreshToken() { return'refreshToken'; };     static get authenticatePlugin() { return 'authenticatePlugin'; };
render (texture, width, height) {     let gl = this.gl;
logs.push(<li key={i}>{this.state.logs[i]}</li>);         }         return (
}         var bboxdims = model.GetBody(0).GetBoundingBox();
copyTo: function(dest) {         dest[this.x] = this.x;         dest[this.y] = this.y;         return dest;
function exists(changes, version) {   const escaped_version = version.replace(/([.-])/g, '\\$1');   const regexp = new RegExp(`\r?\n## ${escaped_version}\r?\n`);
for(i=0, l=pattern.length; i<l; i++) {             pattern[i].latLng = map.layerPointToLatLng(pattern[i].pt);
for (let name in translate.keys) {       opts.keys[name] = translate.keys[name];     }
removeSub: function (name, subName, options) {       if (typeof name!== "string" || name === "") {         return "";
item.opacity = parseFloat(value, 10);    break;   case 'visibility':    item.visibility = (value == 'visible')? true : false;
t++;     createTiddlyText(place,config.messages.sizeTemplates[t].template.format([Math.round(v/config.messages.sizeTemplates[t].unit)]));    }
const bar = function (options, serie, coordinateSystem) {   if (isObject(options.grid)) {     options.grid = options.grid;   } else if (Array.isArray(options.grid)) {
});         break;       case 'batchGetRow':         request = new protos.BatchGetRowRequest({
.setValue(selector, input)      .waitForInputText(selector, input);   }); }
else {cb ();}                 });             }
focusChanged: function(event) {       this.hasFocus = $(event.currentTarget);
throw new Error('We need an icc to continue with this operation');   }
for (var i=0, tx; (tx=this._queue[i]); i++) {     if (~tx.submittedIDs.indexOf(id)) {
while (len > 0) {             len = seqs.length;
'publishToEBSD-caption': '',   'attributes-caption': 'Возможные значения',
function outputToFile() {    var args = toArray(arguments);
img.src = _resizeCanvas.toDataURL("image/png"); }
onChange (_, changes) {        }   onAttributesChange (_, changes) {     this._setAttributes(changes);   }   onCursorActivity () {
new CSSModalGallery(window.jQuery); new CSSModalResize(window.jQuery);
extension: defaultFiles,     content: /(['|"]?password['|"]??[:|=]?[:|=]?[|"].*['|"])/,     caption: 'Potential password in file',
for(i = 0 ; i < len ; i++ ) {     item = this.$.items.createComponent(      { kind: "TamTam.Item", name: collection.content[i] },
for ( var i = 0, l = storages.length; i < l; i++ ) {             if ( jar[ storages[ i ] ] ) {                 storage = storages[ i ];
if(relationship.kind === 'belongsTo') {
this.stopwatch.stop();   } }
key: 2                     }, [api_text("Manually Imported Template")])];                 }
}   if (!App.isPlugin){    var handleResize = function(){
i; const REG_APO = /'/g; const REG_COLUMN = /^(\!{1,}|\s)*/; const REG_COLUMN_CAST = /\[|\]/g;
function toStlString () {   var result ='solid csg.js\n'
module('umbraco.resources').factory('treeResource', treeResource);
bot.on('message', function (event) {  bot.reply(event, JSON.stringify(event));  switch (event.message.type) {   case 'text':
fromObjects: function(objects, options, callback) {       options = (options!== undefined? options : {});       var config = {};
if (numStr.indexOf('e')!== -1) {     formatedText = numStr;   } else {
.then( function(result)   {    done( new Error("this should not have been called") );   })
return _items; }
childArgNames = Object.create(argNames)         childArgNames['end'] = true
item = ctrl.tagging.fct!== undefined? ctrl.tagging.fct(ctrl.search) : ctrl.search;               if (! angular.equals( ctrl.items[0], item ) ) {                 item = item;               } else {                 return;
export default ({ list, wholeState, onEditTunnel, onSaveTunnel }) => (   <main className="window">
case 'j':     case 'h':
populate: function(model){         this.options = _.extend(this.options, model);     }
}     var toggleClass = function (node, className, shouldHaveClass) {
xhr.onreadystatechange = function() {             if (this.readyState === 4 && /^[2]/.test(this.status)) {                 this.onreadystatechange();             }
if (target && target.endsWith('/')) {               target = target.replace(/\/$/, '');             }
return movieApi.discoverMovie(genre.value)      .then(carouselle => message.reply([carouselle])
var status = data.status;     var queue = data.queue;
CommandManager          = require("CommandManager"),         PerfUtils               = require("PerfUtils");
getPreParcels : function(kvp_uid, cb) {         var kvp_uidFilter = new OpenLayers.Filter.Comparison({
export default class ServiceWorkerContextNamer {
$scope.setUnitChoice = function () {             if ($scope.namespace === 'AWS/AutoScaling') {                 $scope.unitField.val('Count');
buffer += '(';     for (ii = 0; ii < args.length; ++ii) {      skipTo(args[ii].range[0]);
var storageKey = getLocalStoragePrefixByType(type) + objectId;             localStorage.getItem(mapStorageKey).then(function(data) {                 if(
function showPlan(container, planXml, options) {     options = setDefaults(options, {         jsTooltips: true
refreshBackdrop = function() {       if (backdrop!== null) {         backdrop.remove();
return new Engine(opts); }
var calls = 0;       process.send = function() {         calls ++;
}                 return raw;             case 'Array':
const roomValue = '';   let room = null;   for(room in rooms) {    roomValue += room.name +'Location:'+ room.location + '\n';
if(logger.isInfo()) logger.info(f('[%s] updating replicaset state %s', id, JSON.stringify(replState)));
const { changeShort } = require('../utils/db')  const os = require('os')
if (values[0][0] instanceof Array) {                 for (var i = 0; i < values.length; i++) {
return;             }
var cpb_cnt_minus1;      for (i = 0; i <= sps_max_sub_layers_minus1; i++) {       fixed_pic_rate_within_cvs_flag = 1;
const p = plan();     p.test('should not run', (t) => {       t.fail();
return'el <'+ numPrefix + val + numSuffix +'';                 case '<=':
var line = 0;   for (var i = 0, j = 0, record; i < records.length; ++i) {     if (record.type) {
mod = phase;     if (mod.request) {
setTimeout(function() {               chimera.render(filename);               callback(null, document.cookie);
var module = angular.module('pnc.util', [    'pnc.util.confirmClick',
$.get(
videoSelectorCommon: {     check: "Kontrollér",     notFound: "Video ikke fundet",
import { HTTP_PROVIDERS } from '@angular/http'; import './app.module';
idRegex = new RegExp('(\'|")' + oldID + '\\-label)?(\'|")', 'g');
var new_child_keys = [];         for(ii = 0; ii < this._childKeys.length; ii++) {           key = this._childKeys[ii];           if (this._rawChildren[key]!== undefined) {
for (var k in items) {    delete sessinos[0].data[items[k]];   }
emotify: function(text) {    var resourcesDir = View.getOptions().resources,      i;    for(i = this.emoticons.length-1; i >= 0; i--) {
let url = req.query.url  url = normalizeUrl(url)
var i = 0;   while((file = utils.fileExists(_file(i))) {     i++;
doneSaving() {     var projectId = get(this,'scope.currentProject.id');
});         if(CursorPositionChangedEvent.superclass)             CursorPositionChangedEvent.superclass.constructor.apply(this, arguments);         delegate.setPublished(this);
var ch;   while ((ch = stream.next())) {    if (ch === quote)
changeTemplateDropdownHandler: function() {             if (this.template) {                 this.sandbox.emit('sulu.header.toolbar.item.change', 'template', this.template);
var slack;   try {     slack = require('slack');
} else {           return $location.path("/admin/gallery('" + entity.GalleryId + "')");
var detailedBox = m.component(c.AdminTransaction,  {contribution: contribution()[0]});     var view = detailedBox.view(ctrl, {contribution: contribution});     $output = mq(view);
var events = [];                     for (var i = 0; i < result.length; i++) {
children: [],       transform: [         {
throw new Error("Invalid deviceId format.");     }     return {
const config = require('../config.json');
UI.showLoginPopup = function(callback) {
socket.on('end', () => {         session.stop();
if (Alpaca.isUri(this.options.dataSource)) {      $.ajax({
$accountTable.empty();             var totalAccountCount = 0;             for (var account in user.accounts) {
/^\d+$/.test(text) ||             /^[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-.\/:;<=>?@\[\]^_`{|}~]+$/.test(text)         ) return false;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/gol_sign-1319744539.swf",  admin_props : false,
return lighten(0.36, hex);     case "HL":
if (wantedStates.length === 0) {             return null;         }
if (!alreadyRefreshed && catalogRefreshStrategy.beforeCommand) {              messages = buildmessage.capture({title: 'Updating package catalog'}, function () {         catalogRefreshStrategy.beforeCommand();
this._userData = null;   }
var isHome = true   new Promise((resolve, reject) => {     if(templatePath!== null && filePath!== null) {
var before = function (node,  descend) {             if (node instanceof UglifyJS.AST_ObjectProperty && node.key == 'body' && findOnServer(walker.parent())) {                 var emptyFunction = node.clone();
}  case 'boolean':
if (options && options.noSubscription) {     return new FactoryMethod(credentials, factoryMethodOptions);
const SecurityException = goog.require('tink.exception.SecurityException');
this.props.html,       this.props.showImages? defaultTagPolicy : tagPolicyNoImages     );
station.entry = result;                     result.properties.timeseries.forEach(function(timeseries) {                         timeseries.selected = selectFirst ||!preselectFirstTimeseries;
} else if (!doc) {    throw new Error(JSON.stringify(schema, null, '\t'))   }
test('PointerMap.delete', function() {     var p = new PointerMap();     p.set(1, true);
throw "FOO";             });
}; TableSelectionHandler.prototype.onMouseOver = function(event) {   var $row = $(event.currentTarget),     row = $row.data('row');
Fixture.prototype = {  method: function() {   this.val++;
stopPlayer(player, session, callback);                 break;             case "AMAZON.LoopOffIntent":
return render? ret : false; }
if (use_xy) {         return false;
var isWin                               = /^win/.test(process.platform); var stmtInsertRowFullTextSearch                               = null;
return type;   }
() => logger.notice(`Ready for requests on port ${port}.`),     () => endProgram(1)    );
try {             var deferred = Q.defer();
var componentName = getTestableComponentName(fileString, 'controller');         this.fs.copyTpl(
var ConnectorFacade = function (env) {         var translationConnector;         translationConnector = new TranslationConnector(env);
}       }       return false;
{       if (document.getElementsByClassName('qr-button') [0]!== undefined)
else if(step.branchIndents < prevStep.branchIndents) {                                  diff = prevStep.branchIndents - step.branchIndents;                 for(i = 0; i < diff; i++) {                     this.popLocalStack();
}(this.laroux)); (function (laroux) {     'use strict';
selector = document.createElement(name);      }      if (selector.tagName.toLowerCase() === "script") {       selector.async = false;      }
var Paper = require( "graphic/paper" ),         Color = require( "graphic/color" ),
])     },     onFocus () {       this.isFocused = true
console.log('shutting down');     process.exit(1);    }
let language = {};   let languageTags = Object.keys(translationGetters);   if (forceLocale && languageTags.includes(forceLocale)) {     language = { languageTag: forceLocale, isRTL: forceLocale === 'ar' };
NR._Event = {     on: function(type, fn){         if(isString(type) && isFunction(fn)){             var storage = getEventStorageByType(this, type);
badKey: /^\d|^\W|[^a-zA-Z\d\-_+=\(\)\*\&\^\%\$\#\!\~\`\{\"'\:\;?, ]+|^toString$/,
}     process.exitCode = 1; };
beforeEach(() => {         synthesizer.and.callFake((req, cb) => {           cb(null, { audioContent: testData.response })
this.resetData();       const page = await this.initData();
YAHOO.inputEx.registerType('object', ObjectField);
import Logo from 'Components/header/logo'; import styles from './auth-layout.styl';
});      }      else if(data.configure =='register'){       return;      }     }
o = new f();      if(!('__proto__' in o)){    o.__proto__ = proto;
this.sound.currentTime = time;             }             return this;
}       return filter(cloneDeep(images), filter);     }
function funcMousemove() {       tooltipContainer
},         setTimeout(callback, ms) {             if (callback && ms) {
});   }.bind(this)); }
if(me.isMaster) {         if(me.isChild) {           me.addChild(me.isChild);         } else {
return attributes; }
const moment = require('moment');
var img = document.querySelectorAll('[src="/y/character/inc.png"]');       for (i = 0; i < img.length; i++) {         var temp = img[i].getAttribute('onmouseover').match(/Upgrade Cost: (\d+) Chaos Tokens?[ ]+Stock: (\d+)/);
export function removeProp($target, name, value) {   if (isCustomProp(name)) {
this.addObserver(`spreadOptions.source.object.${sourceProperty}`, function () {       const spreadableHash = this.get(`spreadOptions.source.object.${sourceProperty}`)
case Serializer.TYPES.CLASSINSTANCE: {                 if (netSchemeProp.classId == null){                     console.error(`received CLASSINSTANCE but no classId!`)
onBuildStop: function( reason ) {    transition( "interrupted" );
var title, isWidget, _element;         for (var widgetName in targets) {
items.splice(index, 1);           var c = datasource.removeAtIndex(index);           var newIndex = items.indexOf(firstDown);
return [ 'bef1' + args[0] ];     });     this.adviseFunctionBefore(advisedBeforeM, function(f, self, args) {       return [ 'bef2' + args[0] ];
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
const template = `<${elem.attribs.is}>`;  return await renderTemplate(template, params, renderData); }
this.validateNotEmpty('reason','reasonError', 'A description of the issue');       if (this.state.emailError!= '' || this.state.reasonError!= '') {         throw new Error('A description of the issue');       }
var __moduleName = context_1 && context_1.id;     var models_1;     return {
console.log('Logged In!')   })
case NUMBER:         value = this.value;         if (value.charCodeAt(0) === 48) {
var expect = require("chai").expect; var _ = require("lodash");
urlRoot: "testModel",     wampRead: function () {       return this.toJSON();
data.user.activityHistory = [];                   }                   if(data.user.permissions == {empty:"permission"}){                     data.user.permissions = [];
if (hasHalo) {              gl.uniform1f(program.u_is_halo, 1);
}      }      return this.durationSentence(duration)      break
define("json_api_adapter",    ["exports"],
return () => Promise.reject(             new Error(`IMAPBox::${name} - Can't operate on a mailbox that is no longer open on the current IMAPConnection.`)           )
intent: makeSelectIntent(),   scenario: makeSelectScenario(),   intentData: makeSelectIntentData(),
return;     }     mapData = data[mapName];
t._timer = window.setInterval(function() {
notFound.title = 'Error';       notFound.message = props.message? props.message : 'An error occured. Please try again later.';     };
getMenu: function () {                         var locale = this.getLocale();                         var url = API_URL + '/' + locale + '/navigation/menu.json';
load().then(loaded => {   wasmTapestry = loaded.wasmTapestry;
}   this.stats.sources++;
rimraf(config.outdir, function() {   console.log(colors.warn (config.unzip +'' + args.join(' ')));   execFile (config.unzip, args, (rc, out, err) => {
browser.keys(ENTER_KEY);         expect(browser.hasFocus(TIME_PICKER_INPUT)).to.be(true);     });
return links; }
assert.equal(assert._expr(assert._capt(str, 'arguments/0'), {   content: 'assert.equal(str, anotherStr)',
onHit: function(evt) {     var hitEl = evt.detail.el;     if (!hitEl) { return; }
component: 'badges',   url: 'https:
(self.f = f); });
if (!module.factory) {     emit('beforeload', module.id);     return load_module(module, function () {
console.warn('Compatibility error', 'Lighthouse requires node 5+ or 4 with --harmony'); }
this.catalog.prop('Pages', this.pages.toReference())   this._compute()
var rArray = /Array\.<(.+)\>/g;
export default class UserCallbackScenario extends Scenario {     constructor(config, extraData) {         super(extraData);         config.registerBeforeSendCallback((report, error) => {
const Exchange = require ('./base/Exchange')
return build(422, config.MSG_HONEYPOT || 'You shall not pass')     case 'no-admin-email':
this.storage = {};             if (typeof config!== 'undefined') {                 Object.keys(function (property) {                     this[property] = config[property];
continue;     }
$("#SearchIndexFolderId").attr('disabled', "disabled");     var disabledColor = $("#SearchIndexFolderId").css('color');     $("#SearchIndexFolderId").css('color', '#CCC');    },
store.dispatch({type: 'HOLOCHAIN_WEBSOCKET_CONNECTED', payload: url})   store.dispatch({type: 'HOLOCHAIN_WEBSOCKET_CONNECTED', payload})  })
const updateNextState = (data) => {       const rect = coverEl.getBoundingClientRect();
iconName === 'wstone') {       currentPlayer = widget.controller.getCurrentPlayer();       if (widget.controller.canAddStone(pt, currentPlayer)) {
traverse(sample1, function (key, val, path, parentKey, parentVal, level, isRoot, isLeaf, isCircular) {             if (parentKey && parentKey === 'departments') {
_onTick: function() {     this._fn(this._bindedSend);   }
};                 objectStore = transaction.objectStore(this.objectStoreName);
import React, { Component } from'react'; import { Field, reduxForm } from'redux-form';
stage._children[0] = loader._content;
resizing(){       this.set("message", "adjusting...");
{   if (!(this instanceof Buffer)) return new Buffer ();   MemoryObject.apply(this);
return connection;       }
handleNewShellFrame );  }  catch (e) {   console.log(e);  }
if(that.is_open){                              }
return this.notes;             } else if (name == 'todo') {
var response = {}   }   if (!('body' in response)) {    response.body = {}
var fileReadStream = checkoutFS.createReadStream(entry.path, range)   var dataStream = fileReadStream
this.options = options; } util.inherits(Server, events.EventEmitter);
case "200403.18":                 $p.com.alert($p.locale.exception, "warning");                 return false;             case "200404":
if (basis.NODE_ENV)      tokenMap = require('./htmlentity.json');
onClick={e => {                 onHeartFavoriteHandler(e, speakerRec);
config.clean.vendor = {  src: [out_build+'/vendor', out_build+'/vendor-resources'], options: { force:true } };
MediaFaker.prototype.supportsFullScreen = function(){ return false; }; MediaFaker.prototype.buffered = function(){ return {}; };
}     else (cond.items.length > 0)
return Point(types.m, prev.x + dx, prev.y + dy) } export function M(x, y) {   return Point(types.M, x, y)
options.props = options.props || {};   options.props.className = [options.props.className, options.className, parsedTagString.className].filter(className => className).join(' ');
} else if (isVComponent(lastInput)) {    } else if (isVFragment(nextInput)) {
.catch(() => {       logger.warn('Stashed changes conflicted with hook auto-fixes! Restoring from conflicts...')       return gitPopWithConflicts(options).then(() => cleanup(options))
browser.runtime.onInstalled.addListener(log.onInstalledListener.bind(log));
$translate(['ERROR_IN_RESPONSE']).then(function (translations) {            });
) {             return;
onGotUserInfo (event) {     const { backPath } = this.data
if (partsArray.length > 0) {             curPart = partsArray.shift()             var hash = Crypto.createHash('md5')
this.children.forEach(function (n) {         if (!(n instanceof Control)) {             throw 'Container: n is not an instance of Control.';
unsubscribe.push($rootScope.$on('updateLabels', () => {         $scope.$applyAsync(() => {
if (decoratorArgs.length >= 2) type = decoratorArgs[1];   if (type === "class") memoized = createCache(target);
tmpObject3d.updateMatrix()   var modelViewMatrix = new Matrix4()   modelViewMatrix.copy(tmpObject3d.matrix)   foundControls.notifyFoundModelViewMatrix(modelViewMatrix)
checkMatchForDialects: function(dialect, value, expectations) {     if (expectations[dialect]) {       expect(value).to.match(expectations[dialect]);
case'middleware':       key2 = props.name;       middlewaresSpecs = stashedSpecs.middlewares[key2] = {};       middlewaresSpecs.path = props.path;
}                 this.fetch({
for (n in baseProperty) {                         cloned = clone(baseProperty[n], true);                         if (baseProperty.hasOwnProperty(n)) {
this.updateRenderTargetMipmap = updateRenderTargetMipmap; } export { WebGLTextures }
stuck_out_tongue: /(^|\s)(:-?p)(?=$|\s)/gi,      rage: /(^|\s)(:-?[[@])(?=$|\s)/g,      slightly_frowning_face: /(^|\s)(:-?()(?=$|\s)/g,
const info = UI.getItemData(item.id);
_digitalData.page.categoryId = (counter + 2);         if (counter === 3) {           done();
const PARAMS_END_PATTERN = '[/?_-]|$';
ev.stopPropagation();  }
const skills = props.skills     return (
return fallbackURL; }
Resp_STK_OK: Resp_STK_OK,   OK_RESPONSE: new Buffer([Resp_STK_INSYNC, Resp_STK_OK])
import turfBbox from '@turf/bbox'
function sendMessage(message, callback) {             if (typeof chrome!== 'undefined') {                 chrome.runtime.sendMessage(CONST.extensionId, message, callback);
debug('CLIENT use net.createConnection', options);       conn = net.createConnection(options);     }
TreeHashIndex.prototype.get = function(node) {         if (!(this.propname in node)) {             node[this.propname] = this.treehash.process(node);
ret.name = formattedFrom!== null? formattedFrom[1] : address;   ret.email = formattedFrom!== null? address.substring(formattedFrom[0].length).trim().replace(/[<>]/g, '') : '';   return ret;
(function(window, undefined) {     'use strict';
const FeaturesPanel = () => (   <div className={styles.featuresPanel}>
index++;             }
.controller('AppView', function($scope, $routeParams, $filter, usersplaces) {     $scope.part = $routeParams.part;
} else if (format == 1) {     for (i = 1; i < count + 1; i++) {       var first = aStream.getByte();
JSM.ImportFileList.prototype.GetInputList = function () {
var tbname=input_name.substring(0,input_name.length-3);    if(input.attr("fr")!="") tbname=input.attr("fr");    var td=input.parent();
}, "J.api.JmolRendererInterface");  Clazz.defineMethod (c$, "plotCircleCenteredClipped",   function (xCenter, yCenter, zCenter, diameter) {
_.each(['disabled','readonly', 'checked','required', 'autofocus'], function (booleanProp) {     if (!(booleanProp in hash)) {       return;
sarg[i] = "args["+i+"]";     }     call = "oScope._applyTemp_(" + sarg.join(qx.constant.Core.COMMA) + ");";
this.config = config;             }             this.lastInsertId = 0;
uploadUrl: 'https:       uploadHeaders: {'X-Test-Header': 'vue-file-agent'},
clearInterval(this.timer)   seconds = ((new Date() - this.startTime)/1000).toFixed(2)   winner = this.result == 'won'   emoji = winner? '😎': '😵'   document.querySelector('.wrapper').classList.add(this.result)
}   if (resolve) return resolve(source, args, context, opts) }
return E192;     }
}     const code = parseInt(error.code, 10)!== 10? parseInt(error.code, 10) : 500;
var name = i.name;   return R.div({
this.dispatch({             to: envelope.from,
case TMS.TM_CONCAT:                 return ldebug.luaG_concaterror(L, p1, p2);             case TMS.TM_BAND: case TMS.TM_BOR: case TMS.TM_BXOR:             case TMS.TM_SHL: case TMS.TM_SHR: case TMS.TM_BNOT: {
return str; }
if (/^(video|movie)/i.test(type)) type = 'video';    else if (/^(audio|music)/i.test(type)) type = 'audio';    else if (/^(image|photo)/i.test(type)) type = 'image';    else type = null;
if (bottomLabel) {             domutil.removeClass(timeElement, config.classname('time-guide-bottom'));
} else {       contentBody.push(<Request content={this.props.content.request} key={0}/>);
if (!err) {               var split = stdout.split(/,/);
let label = getWrapper().find('.user-stats__label').at(3);       expect(label.shallow().text()).to.equal('Following');     });
} else {                         val = clone? jsonQ.clone(value) : value;                     }
}       default:
\${1:\${numbers}} \${2:\${items|Foo,Bar,Baz|}}   \${3|\$1|} \${2}   \${4|\$1|} \${2}   \${5|\$1|} \${2}
milkBoxStatus++;         addMilk();
let t1 = performance.now();  outputDebug("1", "css", (t1-t0), (t1 - gt0)); }
var regexReg = /^([^\(\n\r\u2028\u2029]*)(\(.+\))$/   var parameterReg = /^(.*)(\:\w+\b)(.*)$/   var escapeReg = /[.*+?^${}()|[\]\\]/g
if (code!== 0) {                 err = new Error('Child process exited on signal:'+ signal)
}   else if ( (match = str.match(/(\d+):([^\/]+)?(\/.*)?$/) ) )   {
var attr = function(node, name, value){
.src(tests.performance)        .pipe(mocha(mochaSettings));
var rename = require("gulp-rename"); var uglify = require('gulp-uglify');
case 'JSXText':         text = handleWhiteSpace(astNode.value);         if (text!== '') {
.done(function(){     $.boom.log('Scripts loaded into iFrame');
if (lookAt) {           threeObject.lookAt(lookAt);
goog.require('myphysicslab.sims.common.AbstractApp'); goog.require('myphysicslab.sims.common.CommonControls'); goog.require('myphysicslab.sims.pendulum.PendulumSim');
}     ).find( "div" ).show(); }
var str = [this.__tableHead];       for (var i=0; i<this.__logs.length; i++) {
sendSync: function (message, callback, context) {      msngr.utils.ThrowNotImplementedException();     },     receive: function (message, callback) {      msngr.utils.ThrowNotImplementedException();     },     remove: function (id) {
dataView.syncGridCellCssStyles(grid, 'currentSong_playing');                          count = commify( parseInt(data.length) );             $('.medialibrary.count').text(count);
}; (function() {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-06\/seed_silvertongue-1308763743.swf",  admin_props : false,
},   "statistics":{    "title":"Statistics",
for (var k = n >= 0? Math.min(n, len - 1) : len - Math.abs(n); k >= 0; k--) {                 if (k in t && t[k] === searchElement) {                     return k;
var path = require('path'); var PROTRACTOR_CMD = 'node_modules/protractor/bin/protractor';
resultHandler(JSON.parse(apiResult));                 }             }
if(config.passwordReset.tokens){     var utils = require('../utils');
tagName: 'table',   headerComponent: computed('childComponents.@each._isHeader', function() {     return this.get('childComponents').findBy('_isHeader');
for (let i = 0; i < TRAIN_STEPS; i++) {     const cost = dl.optimizer.minimize(  () => {       const batch = data.nextTrainBatch(BATCH_SIZE);
if ( chunk[ index + 1 ] === 0x0a ) { bytes ++ ; }      break ;     case 0x0d :      this.moveTo( 1, undefined ) ;      break ;     case 0x1b :
global.evalLib.runEvalPyret(newRT, src, options, function (result) {         console.log('done.');
config = {             type: AssetsType.json,
window.console.log("location findAll serializer data", ret);     return this._super(store, primaryModelClass, ret, id, requestType)   }
}).then(function () {             return MM.clickOn('Prior Knowledge assessment');         }).then(function () {             return MM.clickOn('State your prior knowledge here');         }).then(function () {
{ "namespaceqpp_1_1internal.html":[2,0,0,0,1], "namespaceqpp_1_1literals.html":[1,0,0,0,3],
utils.initRegion(region="cn-north-1");
promise = manips[manip].call(vars);   if (typeof promise!== "undefined") {
$scope.messages.validateError = 'Data format is not valid for source type'+ $scope.sourceTypeList[$scope.inputs.sourceFormat].name;      } else if (data.status === 'unsupported') {       $scope.validateStatus = '';
});         }         var errorPrefix = "Error in " + JS_HANDLE + ".viewDocument(): ";
done();             });     });
default :      throw("Whatchoo talkin' bout Willis?");    }
if (stickyElement.positionType === 'fixed') {           if (stickyElement.useTransform) {
drawQuesBorders : function(){   this.vinc('border_question', 'crispEdges');   this.getBorderColor = this.getQuesBorderColor;
var tn;             this.schema[elt.ns].simple[elt.name] = elt
import {StyleSheet, ScrollView, View, Text, TouchableOpacity, Alert} from'react-native'; import {analytics, styles, colors, airloy, api, L, toast, hang} from '../../app';
}             var cb = function() {                 if (value!== void 0) {
} Vault.prototype.decryptKey = function(encryptedStr, callback) {   var deriveKeyFromPassword = function(error, pwDerivedKey) {     if (error) {
if (!vis) return;           createNotifier({             location: vis.type +'visualization'           });
} function findPull(res) {
var NodeEventType = {     MOUSE_DOWN   :'mousedown',
var $divStructure = $(".structure hide").clone().removeClass("hide"),                         $prevHiddenInputCreator = $form.filter(".Hidden-Inputs-Creator").html(),
RTLConfFile = common.rtl_conf_file_path + '/RTL.conf';   let exists = fs.existsSync(RTLConfFile);
import { ArtistType } from "./artist" import { ArtworkType } from "./artwork"
nsHash = val;         break;       case 'byKey':         byKeyHash = ABBREVS.byKey + SEP + JSON.stringify(val);
console.log('(local)UPDATEFOLDER', title)     await browser.bookmarks.update(bookmark.id, {       title: bookmark.title     })
keys.push(matches[i].substr(1));     }     var groups = {};
expect.addSnapshotSerializer(createEnzymeToJsonSerializer({ mode: 'deep' }));
else                         return!_this.options.inlineText? data[i] : match + data[i];                 })                 resolve(_this.output)
"widget": id                 }, function () {                     note(t("widgets.update.done"), "success");                     View.load("widgets");                 });
return prepareWidget('form', config); }
break;         case 'FALLTHROUGH':           return flag.trackEventsFallthrough;           break;       }     }
this.forward = 0; }
if (typeof config.log ==='string') {
static [config.actionPrefix + "-model"](node, val) {          this._update("model", node, val)
$unbind: function(){
import React, { PropTypes } from'react'; import AuthForm from '../../auth/components/auth-form';
Separator, } from "../lib/components/Layout";
if (err) return console.log(err);             });
}         while ((obj = obj.offsetParent));         return [curleft, curtop];
(function ($, _, Backbone) {   "use strict";
entry: [path.resolve(__dirname, '../src/index.js')],   entry: path.resolve(__dirname, '../src/index.js'),   output: {
var Machine = require("../../../../lib/sentient/machine"); describe("Integration: 'and'", function () {
import { singularize } from "ember-inflector/system"; import {   typeForRelationshipMeta,
var re = new RegExp('({#)([\s\\S]*)(#})');         var matches = re.exec(range.text);
} else {             process.stdout.write(`Pulling '${metadata.name}' from Google Drive...`);         }
it('should log when pageCloseTimeoutMillis gets exceeded', async () => {         const sources = [
const fs = require('fs'); const path = require('path');
pool = pools[poolName] = genericPool.Pool({     name: poolName,
module.exports = function mergeSort(A, p, r) {   if (p >= r) {     return;   }
snippet.forEachArray(rawSeriesData, function(datum) {             var result = {
define(['lodash', '../ballerina/ast/node'], function (_, ASTNode) {
var output = ['document.write (\''];
}     case 'function':
super(props);
, win = window    , store = 'bkwld-tram-js'
fsExt.list(build, /\.js$/).forEach(function(moduleName) {     that.queue.push(moduleName);
exports = module.exports = function() {
isSync = false             return null           }
var ABC = A.B.C;     function pong(x) {
} else if (this.match === ';') {   } else if (isWhiteSpace(this.match) || isLineTerminator(this.match)) {
return res; }
for ( i = 0; i < actors.length; ++i ) {       actor = actors[i];       if (actor.visible() === true) {
}       return state.render.push(` ${k}=${value[k]}`)
if (go2 && location.hash.indexOf('access_token')!== -1) {     go2._handleMessage(
} else if (!timerSpec.hasOwnProperty('interval')) {       throw new Error('Timer interval specification required');     } else if (typeof timerSpec['interval']!== 'number' ||
return __awaiter(this, void 0, void 0, function () {             var a, filename, extname, new_file_path, basename, crc32code, new_file_path_1, basename, crc32code;             return __generator(this, function (_a) {                 a = {
dataStr = dataStr.replace( new RegExp( '<!--' + REPEAT_COMMENT_PREFIX + '/[^>]+-->', 'g' ), '' );
rulerProcessor(argv, mergedPlaces); }
import { defaults } from "lodash";
loadMuiscSongLrc({ commit }, song_id) {     eventBus.requestLrc()
return Array.isArray(value)? value : [value]; } module.exports = Configuration;
_handleLogoutSuccess: function(data, status, jqXHR) {     CurrentUserActions.logout();
samples.push(v);     }     if (samples[samples.length - 1]!== violin.max) {
if (next) {         if (next.items) {           return next.items.head;
}             hoshi = utils.createElement("div", { class: "hoshi" });             if (hoshiY == 0) {
const html = wrapper.instance().document.documentElement;       expect(html.className).to.equal('carbon-dialog-full-screen--open');       wrapper.setProps({ open: false });
function printHelp() {   for (var command in chatCommands) {     if (chatCommands.hasOwnProperty(command)) {       addSystemLine('-' + command + ':'+ chatCommands[command].description);
return x + 1; }
this.parallel.queue = {};
window.location = window.location.replace(/^#/.test(window.location.pathname)? window.location.replace(/^#/.test(window.location.pathname) : window.location.replace(/^#/.test(window.location.pathname)) : window.location.href.replace(/^#/.test(window.location.href)? window.location.href : window.location.href.replace(/^#/.test(window.location.pathname) : window.location.href.replace(/^#/.test(window.location.href))? window.location.href : window.location.href.replace(/^#/.test(window.location.href) : window.location.href.replace(/^#/.test(window.location.href) : window.location.href.replace(/^#/.test(window.location.href);
var sofia = sofia || {}; sofia.plugins = []; sofia.windowTypes = []; var App = function() {
let spyService;     function Target() {}     beforeEach(() => {
var scenario = scenarios[ruleMatches[0].ind];           if(current && scenario.src == current.src) {             var compiled;
updateQuery: (previousResult, {subscriptionData}) => {           const returnResult = Immutable.Map(previousResult);
class Package extends EventChannel {     constructor(args) {         super();         this.setName(_.get(args, 'name', ''));
return this; }
var item = forceSingleItem(items);     return item.ServiceId && item.Name && item.status;
var _environment = _config.environment; var _secret_key = _config[_environment].app.secret_key;
} else if (this.format == "session") {         jsonToRender = this.model.toJSON();         jsonToRender.helpText = true;
};     if (typeof offset == 'number') {       args.offset = offset;     }     return args;
let publicKeyBuffer = new Buffer(signature.publicKey, "hex")     for (let i = 0; i < publicKeyBuffer.length; i++) {       bb.writeByte(publicKeyBuffer[i])
type:"t",                  value:textures[gameBoardCell.getValue()]              }
, assert = require('assert')  , model = require('../lib');
var Database = require('better-sqlite3');   try {
new window.ScrollWatch({   watch: '.feature-list__item',
'hqwebapp/js/initial_page_data', ], function($, alertUser) {     alertUser = alertUser.alert_user;
throw 'unmatched request action:'+ request.action;   }
let id = annotation.provenance.analysis.execution_id;     let type = annotation.geometry.type;
if (!aTopic) {              throw new Error("Not specfied any topic.");          }
if (value.roles === "יו\"ר ועדת הפירושים") {
'use strict'; var MediaFrameMulticaster = require('./mediaFrameMulticaster/build/Release/mediaFrameMulticaster');
var pollers = require('./pollers'); var hooks = require('./hooks');
throw new Error("only arrays with rank 1 or 2 supported")         var offset = 0;         var arrays = []
value = Number(value);   return typeof value === 'number' && isFinite(value) && value % 1!== 0;  },
function InputNumberGtrOrEqualToZero(props) {   return <div><InputNumber {...props} min={0} /></div>; }
try {     azure.createBlobService().blobService.deleteBlob(this.get(paths.container), this.get(paths.filename));    } catch(e) {}
var group_id = -1;                 for (var k = 0; k < bundle_data_sv.group.length; k++) {                    if (d3.select(this).classed(bundle_data_sv.group[k].name) === true) {                        group_id = k;
}       ReactUpdates.ReactReconcileTransaction.perform(         this.updateChildren,
} class KeyValueRecord {   constructor(key) {     this._key = key;
for (i = 0; i < validDelays.length; i++) {   assert.doesNotThrow(function() {
var mode = args.mode;         if (window.File && window.FileReader && item.kind === 'folder' && item.data.provider && item.data.permissions && item.data.permissions.edit) {
for (i = 0; i < numFaces; i++) {         var vindex = i * (3 * 3);
if ('visible' in props) {         if (props.visible) {           this.showWindow();
return createStore(reducers, initalState); }
var copy = new Tensor(this.dims);     return copy.copy(this); };
const data = []   const workspaceElement = getView(atom.workspace)   document.body.appendChild(workspaceElement)
if (!this.noTrigger) {                 document.trigger("longPressStart", this.currentTouch);             }
const SRC_DIR = constants.SRC_DIR; const SUCCESS_MESSAGE = 'TSLint: Everything is OK';
imageBuffer = fs.readFileSync(file + fileExt);             }         }
if(m) {           fs.writeFileSync(appMainPath, m[1]);         } else {
map.fitBounds(bounds);
}     $("#progress.dialog.message").html(message);     $("#progress.dialog.history").append("<div>" + message + "</div>");
return data; }
}else if( stype === "ses" ){             for( i = 0; i < n; ++i ){                 if( ( vpBits[ i ] & ISBOUND ) && ( vpBits[ i ] & ISDONE ) ){
import { Link } from 'gatsby'; import styles from './header.module.css';
import { Grid, Row, Col } from'react-flexbox-grid/lib/index'; import log from 'loglevel';
runOrdered: function(list, consumer, consumerCallback) {
}                 const pipeline = agent.settings[CONFIG_SETTINGS_DOMAIN_PIPELINE];
'information as possible.') }
}   render(props, {name, imageTab, imageSelected}) {     let imageTabContent
} else if (wm.localeString) {     djConfig.locale = wm.localeString;  }
send();       }, function() {
return Object.assign({}, state, { labelling });     case 'SET_TOOL_CONTEXT_MENU_DATA': {       const contextMenu = Object.assign({}, state.contextMenu);
if (pathParts[1] == "model") {     event = ['model', pathParts[0]];    } else if (pathParts[1] == "aggregate") {
var p = ary[i];             p.X = p.X - diffT;             p.Y = p.Y - diffT;             newAry.push(p);
import Menu from "../Menu" import MobileFooter from "./MobileFooter"
callback.value = null;           callbacks = callbacksByType[otherType];           i = callbacks.indexOf(callback);           callbacksByType[otherType] = callbacks.slice(0, i).concat(callbacks.slice(i + 1));
import { View } from 'backbone';
tyval.array.extend(function empty () {     tyval.array.validators.push(function empty () {       check = check && variable.length === 0     })
var stringToArray = function (x) {  if (typeof x === "string") {   return [x];
this.store.push(shape);
exports.GameConnectInPayload = function(name) {  this.getPayload = function() {
mongoose.Query.prototype.skip = function (value) {    skip = value;    return this;
summary = $filter('wrapTextWithEllipsis')(           summary, RULE_SUMMARY_WRAP_CHARACTER_COUNT);       }
.action(partial(ary(remove, 2), config)); }
}; module.exports = utils;
return this.readRaw(start * this.buffer.sampleRate, length * this.buffer.sampleRate) }
export function base64ToArrayBuffer(dataUrl) {     const base64 = dataUrl.replace(/^data:([^;]+)\;base64,/gmi, ''),         binary = atob(base64),
const { httpCodeList, currentSeries } = props;  return httpCodeList && httpCodeList.length? (
return;             }             if (this._container) {
}());         var deRegDialog = [new DeReg(), new DeReg()];         var deRegObject = [new DeReg(), new DeReg()];
var sceneViewerUrl = sceneViewerUrl.replace(regexp,"");                             if(sceneViewerUrl.indexOf("share") > -1){
document.body.appendChild(dummy);    if (dummy.getBoundingClientRect().width!== window.innerWidth - 100) {     (function(calcs) {
category: "Fun",   description: "( ͡° ͜ʖ ͡°) u-ugh!",   usage: "lennyd",
loadBalancer.availabilityZones[loadBalancer.region] = loadBalancer.regionZones;
var index = findClosestChunk( i, j, k, this._chunksToAdd )     loc = this._chunksToAdd.splice(index,1)[0]     addNewChunk( this, loc[0], loc[1], loc[2] )   }
if($this.data(renderPosDataName)){                     $this.removeData(renderPosDataName);
cml.extPlatformPlugin[type] = platformPlugin;
import Channel from '../../utils/Channel'; import getChannelsArray from '../../utils/getChannelsArray';
_concat_base_removals;
remakeInfo : function(cidlist){   var longColor = (this.owner.flags.irowake? this.getLongColor(cidlist) : "");
if (newProps && newProps instanceof Object) {       for (key in newProps) {         if (this.props[key] && this.props[key]!== newProps[key]) {
case 'length':      time = this.durationTime(this.props.data)      break       case 'date':
};                 if ((d = glyf2svg(glyf, ttf))) {                     g.d = 'd="'+ d +'"';
try {       if (require.cache[relativeTemplate]) {         delete require.cache[relativeTemplate];
if (state) {                  logger[level]('state at'+ msg, JSON.stringify(state, replacer, 2));
throw Error("expecting one argument, got: " + pr(x) + ", " + spr(other));     }     return ["get", [
case 'test':     spawn.sync(       'node',
if (t.domNode.textTracks) {      for (i = t.domNode.textTracks.length - 1; i >= 0; i--) {      t.domNode.textTracks[i].mode = "hidden";
window.location.assign("/#/");     if (typeof ga!== 'undefined') {       ga('send', 'pageview');
disconnect (id) {         if (this._scratchLinkSocket) {
import * as React from'react' import Text from './text'
if(oc.status){     return oc;
switch ( point.phase ) {
} else {             i = 0;             var maxi = pruned.length-1;
if (_gitPath) { return _gitPath; }         _gitPath = Preferences.get("gitIsInSystemPath")? "git" : Preferences.get("gitPath"));         return _gitPath;
exports.getBPMNProcess = function(processId, bpmnFilePath, persistencyPath, done) {      done = done || function() {};
html += "<dd>";         let this_count = lines[i].match(/^(:+)/)[1].length;         html += wiky.process_normal(lines[i].substring(this_count));
var i,k;   if(Array.isArray(errors)) {    for(i = 0 ; i < errors.length ; i++) {
var extent = ol.proj.transformExtent([-126, 24, -66, 50], 'EPSG:4326', 'EPSG:3857'); var startDate = threeHoursAgo();
fill: function (opts) {         return casper.sendKeys(opts.selector, opts.text, {reset: true});     },
return state; }
var processCase = function () {       if (temp!== null) {
process.on('disconnect', function() {   process.exitCode = 0; });
$this.colorpicker({                 align:"left",
var target = replace? elem.parentNode : elem         var scanTemplate = function(text) {             if (loaded) {
return forwardHandlerRegistry[name]; }
this.gl.enableVertexAttribArray(this.vertexPositionAttribute);       this.textureCoordAttribute = this.program.getAttributeLocation("aTextureCoord");       this.gl.enableVertexAttribArray(this.textureCoordAttribute);
{             d = t * this.length - lastKey.time;             value[0] = firstKey.value[0] + d * firstKey.left[0];
this.compile(options.callback); }
conversion = [0.299, 0.587, 0.114];          } else if (type == 'BT709') {             conversion = [0.2126, 0.7152, 0.0722];
return `${diff}s` }
if(ctx.resolve('username')) {     out += ctx.resolve('username')   }
render(){   return (
}); }; module.exports = TableUsesAbbreviationForHeader;
if(result=="<P>Content B</P>"){       return true;
this.listenTo(this.model, "change:field", this.add_field);         }         this.listenTo(this.model, "change:field_kind", this.add_field);
if (typeof ver === 'number' || (typeof ver ==='string' && ver.length > 0)) {                 throw new Error('version number missing!');
writeType: 'input',         validation: /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&         value: ''
if (el) {         el.parentNode.removeChild(el);
var Keypair = require('./keypair'); var BufferWriter = require('./bufferwriter');
import { shallow } from 'enzyme'; import { Container } from'reactstrap';
newSlide.description = req.body.description       }       if (req.body.duration) {         newSlide.duration = req.body.duration
var _CACHE_TABLES = {}; var nextTick = typeof setImmediate!== 'undefined'? setImmediate : process.nextTick; Client.prototype._action = function (method, tableName, obj, useCache, retry, callback) {
chartPreview.data.setAssignDataFields(assignDataPanel.getAssignDataFields());     }
{recentOpenings.map(opening => {           var item = utils.processItem(opening.item)
} else {       sigVerified = true;     }
}  var esc = querystring.escape;
while ((obj = obj.offsetParent)) {     obj = obj.offsetParent;
return padNumber(offset / 60, 2) + padNumber(Math.abs(offset % 60), 2); }
ruleSpecs = handlers[h].rule_specs;         for (var i = 0; i < ruleSpecs.length; i++) {           adjMatrix[stateIds[state]][stateIds[ruleSpecs[i].dest]] = 1;         }
});     return Promise.all(_runOutTasks);   }   _clear() {
Object.create = function (obj) {         function F() {}         F.prototype = obj;
consolidate('rules','media', 'last', rule, context, i, cache);   }
import React from'react' import { Grid } from 'rgx' import ConnectedInstanceCard from '../containers/ConnectedInstanceCard'
infos = /polygon\s*\(([a-z]*),\s*(([-+0-9.]+[a-z%]*|calc\([^)]*\)|\s|\,)*)\)?(\s*)/i.exec(shape.trim())) {             coords = (
var multiplex = Neuro.shard({     getShardForModel: function(model) {
}             return false;
return "Green";                 case "failed":
} async function loadModels() {   const loader = createAsyncLoader( new GLTFLoader() );
if (!window.isNormal () ||!window.isMain () ) return;   const name = window.app ().name ();   if (!/Terminal/.test ( name ) || false ) return;
expected: `.user{color:red'';}`  },  'noop tail V': {   sample: `color:red""`,
module.exports = function (Component, options) {   options = options || {};
try {         await orango.disconnect()
resize25: '25% 크기',         mirrorHorizontal: '좌우 반전',
var handlers = this.handlers;     if (! ( channel in handlers ) )       handlers[channel] = {};
return hexToUint8     } catch(err){
var client = new tracker.Client({trackerToken:token});                  client.project(projectId).fileAttachment(attachmentId).download(path, function(error, attachment) {                      if (error) {
const Provider = new this.Provider(url);     url = Provider.normalizeURL(url);
});         htmleditor.addPlugin('relativeimages', /src=["'](.+?)["']/gim, function(marker) {             var replacement = marker.found[0];
this.ns(ns);    }
.expect(404)                    .end(function() {                         done(err);
}       xsRaSt = scope.ssffds.getSampleRateAndStartTimeOfTrack(dD.dots[i].xSsffTrack);       ysRaSt = scope.ssffds.getSampleRateAndStartTimeOfTrack(dD.dots[i].ySsffTrack);
} function create_fragment() {  var div;
keyForAttribute() {     return this._super(...arguments);
while ((result = r.exec(value))) {                 if (prefix === undefined || result[1].length < prefix.length)
const { SwitchbladeEmbed, Constants } = require('../../') const { CommandParameters, MemberParameter, CommandRequirements, BooleanFlagParameter } = CommandStructures
var id = $scope.element.id;
reader.onload = function __onload_handler__(event){
"@semantic-release/gitlab",                   {
proto['itemAt'] = proto.itemAt;   proto['items'] = proto.items;
patterns: [                         {                             match: /var version = *'[.0-9]*';/g,                             replacement: "var version = '" + version + "';"
import { setChildren } from './setchildren'; import { isFunction, isNode, getParentElRecursive } from './util';
}else{      slave[this.outputMessage] = val;
}          if (resolvedSource.match(/^\/\     var options = $.extend({}, this.options, {
}             done(conn);
var gutil = require('gulp-util');
if (edgesTokenIndex === -1)             return;           let bracketIndex = this._json.indexOf('[', edgesTokenIndex);           if (bracketIndex === -1)
parseTableMore (keyword) {       if (/^[ \t]$/.test(this.char)) {         return null       } else if (this.char === ']') {
var Date_ = function (y, m, d, h, mn, s, ms) {     var len, result;
case 'cond':           fn = cond[token.name.substr(1)];           if (fn) {
Test.addTest('node-recycler', function(result, cx) {
},   clone: function(){    return new this.constructor(this.current.getExpression(), this.max.getExpression(), this.width, this.contents.constructor);   }
this.workspace.on('change', this.save, this);   }   ScriptEditor.prototype.save = function() {
while ( (parent = node.parentNode) ) {
var content = contents[i];                 var service = new OnlineData(me.mDatasUrl, content);                 services.push(service);
var __docRef    = window.document,     __isArray   = Array.isArray,
else if( typeof where == 'object' ) {                 ws = [];                 for( var key in where )
var assert = require('assert'); var fs = require('fs');
}else if(_isNodeList(object) || _isHTMLCollection(object)){   returned=_each_array(_toArray(object),funct);  }else{
DummyAnalyser.super.constructor.call(this); }; DummyAnalyser = Webvs.defineClass(DummyAnalyser, Webvs.AnalyserAdapter, {     isPlaying: function() {
dataTemp.push(curr); }; var fileCounter = 0;
if (!userInfo) {       this.navigateTo({         url: "/pages/authorize/index"       })     } else {
const diffRender = function (olds, news) {     if (!olds || olds.length!== news.length) {         return news;
return new Promise(function (resolve, reject) {     const script = document.createElement('script');     script.type = 'text/javascript';
app.use(function(err, req, res, next) {     if (err.type == "GITHUB_RESOLUTION_ERROR") {         res.redirect('/login?error=github_email_is_private');
"@requiredField": "This field is required",         "@textAutoWidth.Grow": "Grow",
await logError('Main', 'Unhandled Rejection', err)     })
const reportName = yearlyReport? `${year} Yearly Platform Report` : `${year}/${month + 1} Monthly Platform Report`;   console.log('startDate', startDate, 'endDate', endDate);
Zlib){          Zlib.Gzip=true;      }
PreviewDocument = connect(mapStateToProps, {})(PreviewDocument); PreviewDocument = withRouter(PreviewDocument);
}         break;       case actions.on_todo_edited:           return {
var searchService = Promise.promisifyAll(require('./search')); var collectionHelper = require('./../helpers/collection');
for (__prop in __func.prototype){     if (__prop === 'constructor')         __constructor_was__enumed = true;
auth_token = window.localStorage.getItem(this.appId + '-' + DL.Auth.AUTH_TOKEN_KEY);   if (auth_token) {
if (options.schema && body.schema && body.schema.type && body.schema.type === 'object') {             common.schemaToArray(body.schema,1,parameters,false);
return out.set(this.centerX, this.centerY);             case Phaser.MIDDLE_RIGHT:
this.on('afterrender', function() {     this._onSet();
XSS.PIXELSIZE = 4;
'waypointDown': function(component) {     },
console.log();         process.exitCode = 3;     }
error("Annotation stache tag must occur inside an HTML start tag");                   break;                 default:                   error("Unexpected tag type: " + tag.type);
break;      default:
if (info && info.type === 'enum') {                         var onChange = function(e) {                             delete varEdits[varDef.key];
db.adminCommand({split:collection,
dwr.engine._sendData(batch);   if (batch.rpcType == dwr.engine.XMLHttpRequest) {
if (result[i].error) {         logger.error('TimeSeries', result[i].error);        } else {
{    canvas.requestPointerLock = canvas.mozRequestPointerLock || canvas.requestPointerLock || canvas.webkitRequestPointerLock;    canvas.requestPointerLock();
}).on('/', () => {         riot.mount('dmc-page', targetTagString);
return;   }
module.exports = jsonSchemaTable;
throw new Error( '无待签到贴吧' );  }
toRender = {               parcelId: response.get("parcel_id"),
} else if (argv._[0] === 'edit') {     stamp = argv._[1]     key = getKey(stamp)     prop = argv._[2]
lastStarted = Date.now();   var nodeMajor = parseInt((process.versions.node.split('.') || [null, null, null])[1] || 0)   if (nodeMajor >= 8) {
case types.TOGGLE_COMPACT_CODE:       return {
entity = this.allEntities[i];        if(entity.alwaysOn || entity.checkCollision){         entity.checkCollision = false;
canCall(action) {         return!! this.instance;     }
for (i = 0; i < length; i++) {             keyOrId = track[i]              proxy = retain[keyOrId]
init () {     if (this._initialized)       return console.warn(`The \`init\` method should only be called once.`);
const DEFAULT_STICKYFOR = 3*1000
for (var j=start; j<=end; j++) {      frame++;
switch (action.type) {       case PUT_DRAG_INDICATOR: {         const {isPlaceAfter, itemInfo} = action
return result;             }         },
renderInput: function(props) {       props.type = props.type || 'text';
export default class EventsExample extends React.Component {   constructor() {     super();     this.state = {
node.events.ng.on( IN + say + 'STAGE', function (msg) {             var stageObj;
var j,i; outer: for (j = 0; j < 5; j = j + 1) {
if (JSHINT(code, CONFIG.LINT_SETTINGS)) {             runButton.setIconCls('icon-loading');
var searchCallback = function(found, err) {             --searchCount;
if (totalCount > 0) {     var ratio = count / totalCount;
buildDir: './builds',                     winIco: './public/images/icon.ico'
getMovienfo(showId.trim(),"pm");                         }                     }
, multi     = 5
var done = function done(result) {
it("should be variable string info", function(done) {             const group   = file.openGroup('scada');
let ext = dom.src.includes("webp")? ".webp" : path.extname(parsedUrl.pathname);             if (!ext) ext = ".png";
});           } catch (err) {             throw new Error('Invalid Config file, incorrect JSON format:'+ err.message, err);           }         }
feather.logger.error("Error getting markdown doc: " + res.statusCode);           cb(null, {doc: url + ": " + res.statusCode});
if (!(layer instanceof geo.layer)) {     console.warn("Invalid layer");
if (jqXHR.status == 200 && jqXHR.responseText.match(/^\<\?xml/)!= null) {           var xml = jqXHR.responseText;           this.success(xml);
var enc = _child_process2["default"].spawn(_this3.getCommand(), options);    hookEncodingProcess(resolve, reject, enc);   });
}     var getShaderProgram = function ( vs, ps, defines ) {
return bbox; }
fetch('/foo', { method: 'POST' }).catch(() => {       expect(shouldRefreshTokenSpy.mock.calls.length).to.equal([['I am reason']]);       done();     })
return false;   else if (value == null)     return Boolean(expectedType.__IsReferenceType__);
var check_and_republish = function () {                     self._worker_pool.acquire((err, channel) => {                         channel.checkQueue(message.properties.replyTo, (err, ok) => {                             if (err) {
throw new Error('Invalid m3u8 file: not "#EXTM3U"');       }
var pattern = tmplRule.replaceParam(),     patternP = /[^\s|]+([\s]?\|[\s]?[^\s\(\)]+(\([^\(\)]+\))?(\.[^\s.]+)?){0,}/g,     matchArr, matchArrP, ret, prop, i = 0;
import Resource from './resource'; import { attr } from 'ember-jsonapi-resources/models/resource';
}         }         return results;
'already exists in DB.');             exit(9);         }
cache.swapCache(); });
'use strict'; var assert = require('assert');
if (L.Browser.mobileWebkit) {     L.DomUtil.remove(root);    }
}, function() {                         console.log('Error retrieving experiment statistics for'+ experiment.id);
const mongoose = require("mongoose"); const EMAIL_REGEX = /^([a-zA-Z0-9_\-.]+)@([a-zA-Z0-9_\-.]+)\.([a-zA-Z]{2,5})$/;
.then((responses) => {     const [subjId, sample] = responses;     if (!subjId) {       handleUpsertError(constants.objectType.subject, isBulk);
for (key in nodes) {       if (Object.prototype.hasOwnProperty.call(nodes, key)) {         node = nodes[key];
'react/addons': 'React',        'react-motion': 'Spring',        'react-motion': 'TransitionSpring'     },
function delTask () {}
callback = jasmine.createSpy('callback'),           inputEvent = new jasmine.Event('input');       expect(handler).toBeDefined();
'-o-transform': "scale("+ $scope.config.style.scale +")",                         '-moz-transform': "scale("+ $scope.config.style.scale + ")",
if (!result.success) {       return callback(new Error('Error sending ESRI json ', result[0].error));     }
case Syntax.FunctionDeclaration:           name = node.declaration.id.name;           utils.move(node.declaration.range[0], state);
objectApp.status = 'crashed';               }
console.error('not logged in')   process.exitCode = 100 }
var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;     target = target || new Vec3();
var bottom = positionData;         for (i = 0; i < children.length; i++) {             if (children[i].type === "kern") {
} else {     data = key;     this._cfgData = _.assign(this._cfgData, data);   }
_renumber: function () {             var re = new RegExp('^([^\\\[]+\\\[[^\\\]]+\\\]\\\[)([#|\d]+)(\\\].*)$', 'gi');
const result = visit(bag, response, context.operation, operationSchema, context);   const data = {
args = {'josh': 'hello'};     opts = {mock: true};
return "hsl(" + hue + ", 52%, 91%)";   }
const _ = require('underscore') const DropdownView = require('../dropdown.view')
output.error("Unhandled command '" + process.argv[2] + "'");         process.exitCode = MAIN_EXIT_CODE_ERROR;         return;
print += "\n\n";                 print = "";
var _this = this;         this.getProcess = function () { throw new Error('getProcess is abstract'); };         this.currentListeners = {};
const OPTIONS = {...state}       let {minify,...rest} = command == SET_PROJECT_TYPE        ? getProjecTypeOptions(payload)
var theme = t.next(this.opt.areas? "area" : "line", [this.opt, run], true),      s = run.group, rsegments = [], startindexes = [], rseg = null, lpoly,      ht = this._hScaler.scaler.getTransformerFromModel(this._hScaler),
return getRGB(color); }
history.listen( ({pathname}) => {         var query = queryString.parse(location.search)
}   case SET_ROLE : {     const commenters = state.get('commenters');     const idx = commenters.findIndex(el => el.id === action.id);
if (!fs.existsSync(modelFolder)) {
employee.name = employee.name.first +'' + employee.name.last;                     return employee;
element.autocomplete().autocomplete( "option", "appendTo", "#autocomplete-wrap1" );  assert.equal( element.autocomplete( "widget" ).parent()[ 0 ],   $( "#autocomplete-wrap1" )[ 0 ], "modified after init" );
$(".scroller-up").live("click", function () {         var scrollerContentHolderHeight = $(this).siblings().find(".scrollerContentHolder").css('height');
static async replaceResourceExternalToInternalLinks(body) {   const reString = Resource.baseRelativeDirectoryPath() + '/' + '[a-zA-Z0-9.]+';   const re = new RegExp(reString, 'gi');
el.setAttribute('crossorigin', 'anonymous');       el.addEventListener('canplaythrough', () => this.onLoad());       el.addEventListener('error', () => this.onError());
if (!def) return;  const events = def.events[name];  if (events) {
$scope.isIE9 = isIe9();             }]);
var mBook = this.model.book;         var data = {};
reportIfForbidden(argument.name, argument);         } else if (argType === 'Literal' && /^[a-z][^.]*$/.test(argument.value)) {           reportIfForbidden(argument.value, argument);
} else {   redis = require('redis').createClient(); }
var tagRe = /\A^((?:[\w\u00c0-\uFFFF-]|\\.)+)\Z/g;   SelectorSet.prototype.indexes.push({
renderDateError: function(){     const {fields: {fullName}} = this.props;     if (!year.error) { return null; }
};                 __decorate([                     core_1.Component({
} else {    selected = this.state.fieldValue;   }
describe('Enroll phone number', function () {       itp('has a list of countries in alphabetical order', function () {
list.sort();     for(var i = 0, name; i < list.length; i++) {         filepath = path.join(dirpath, name);
describe('.serializeColorSpace(plugin)', function () {     var rgb, unnamed, broken, BaseSpace;
var x = b * options.width + encoding.barcodePadding;   if (binary[b] === "1") {    ctx.fillRect(x, yFrom, options.width, options.height);
if (lighting > 255) lighting = 255;     r = lighting, g = lighting, b = lighting;     lighting = b + (g << 8) + (r << 16);
import css from'styled-jsx/css' import { color } from '_utils/branding' import { timeWidth } from 'itinerary/style'
}         if (response.status === status.WHITELISTED) {             document.getElementById('kp-remove-from-whitelist').style.display = 'block';             document.getElementById('kp-add-to-whitelist').style.display = 'none';
return res.redirect(locals.topic.url + '#comment-id-' + newReply.id);
case Type.Parameter:       result = this.inferenceExpression(node.init);     break;     case Type.ReturnStatement:
var source = sourceDocument.documentElement.innerHTML;   for (var index = 0; index < dictionaryWrappers.length; index ++) {
this.clicked = function(){    var bl = this.parent;    var fg = this.find("flowgraph");
return res.status(internalError.status).send(createResponseError(internalError)); }
function DashboardCtrl ($cookies, $cookieStore) { }
var form = Promise.promisifyAll(new formidable.IncomingForm())           var progressListener = function(received, expected) {             if (expected) {
normalizeArrayResponse(store, primaryModelClass, payload) {     let documentHash = {
res.send(400,err.toString());             }         },
this._iFactorPage = Math.floor(iScrollBarSize * 0.8);    } else if (Device.browser.webkit) {     this._iFactor = stepSize;
}).catch(() => {                     throw new Error('Please check your internet connection');                 });
expect(fixedClasses).toMatchInlineSnapshot(`"imageClass gbi-fwatluf"`)     doc.removeChild(dummyElement)   })
nextJob.delay(new Date(result.phases[0].deadline))
y,   xFormat,
this._childExpressions = childExpressions;   this.isUpdating = false;
this.title = m.prop('');   }
c.d = -10;           a.b          =          c          ++; })();
Server.on('error', function (error) {                     Util.log(error, '\nCould not use https port:'+ lSSLPort);                     redirectServer.close();
SignatureEngine.prototype.unbox = function(msg, cb, opts) {       var eng, esc, literals, msg, payload, ___iced_passed_deferral, __iced_deferrals, __iced_k;       __iced_k = __iced_k_noop;
constructor () {} }
})  .use(function (next) {     console.log('no!');   });
$connectionStatus.popover('destroy');                             popoverTimer = null;
if (token === 'null') {       return false
var offset = 0;    for (i = 0; i < parts.length; ++i) {     buf.writeUInt32BE(parts[i].length, offset);
console.log(Detective)                      Detective[attrName](node, attrVal)
shindig.container.ContainerRender.WIDTH = 'width';
}; const StayScrolledDemo = () => (   <Messages style={style} />
logLevel:'error'  , runners: 1
function assert(b, err) { if(!b) { return; } }
KVREG = /\s*"?([^\s"]*)"?\s*"([^"]*)"/;     var rl = readline.createInterface({
that.addTrailers = function(trailers) {     for( var header in trailers ) {       proxy.putTrailer(header, trailers[header]);
promise.resolve();       }       var continueCallback = params.continueCallback;
function (wss, params, scope) {     return new Promise(function (resolve) {
this.time = 0;     } } Robot.prototype.geom = {
return state     case actions.updateUserData.id:       return state.mergeIn([], {})       break     default:       return state   }
logger.writeConsole = function writeConsole(level, module, args) {
break;             default:
const node = this.node;      const nodes = node.nodes;
, searchLimit: 10  , language: /^ro_/.test(process.env.LC_NAME)? "ro" : "en" };
function concat(chunks, total) {   if (chunks[0] instanceof Buffer) {    var result = new Buffer(total);
};     if ((model = this.get(property))) {       if (model.then) {
getUnreadCount({subId}) {     if (apiStatus.getUnreadCount!= 200) {
temp += "    _ +='   $TPLS = nodetpl._tpls[path];\\n';\n";       temp += "    _ +='   $DATA = nodetpl._data[dguid];\\n';\n";       temp += "    _ +='   try{\\n';\n";
return L.CRS.EPSG3857;       case "EPSG:3395":
return content;     }     sax.ondoctype = function(doctype) {
},           (code, responseText) => {             this._showAutocomplete(JSON.parse(responseText), target, val)
}         entry.hw.hwModule.setZero();     }
if (!(x!== NaN && y!== NaN)) {           var geometry = new Point(x, y);
const TagRow = ({data}) => {   if (data.markdownRemark.fields.tagSlugs) {
}                  if (source instanceof Float) {             return source.toString();
onClick: function(event){     $this = $(this);
}     return compute.just(x);
return a.priority - b.priority;         }
link: '<a href="/" class="cc-link">{children}</a>',         close: '<span class="cc-close">&#x274c;</span>',
this.contentDiv = $('<div class="igv-ideogram-content-div"></div>');         this.div.append(this.contentDiv[0]);         var myself = this;
if (err) {       workflow.emit('exception', err);       throw err;     }
(function () {   'use strict';
.replace(/</g, "&lt;")            .replace(/>/g, "&gt;");            .replace(/"/g, "&quot;")            .replace(/\'/g, "&apos;");     }
import ShareEmail from './ShareEmail' import ShareImage from './ShareImage'
var result = $tw.utils.deepCopy(object);  for(let t in extendedProperties) {   if(object[t]!== undefined) {
require('./match')(Terms); require('./match/not')(Terms); require('./methods/tag')(Terms); require('./methods/loops')(Terms);
catch (e) {                 next(new Error(e));             }
itemClick() {         FSBL.Clients.SearchClient.invokeItemAction(this.props.app, this.props.app.actions[0]);
default: {       throw new Error(`Unknown instruction ${instruction.id}.`);     }   }
controller.action_registerCommands = function( name ){
if (target.nodeName == 'BUTTON') {             target.preventDefault(event);         }
logger.info(error);         process.exitCode = 1;       }
});      } else if ((m = stream.match(/^\{([0-9]+)(:.+?)?\}/, false))) {
proto._calculateChildrenDependHeight = function(vModifiedWidget, vHint) {   throw new Error("Auto Height is not supported by QxFlowLayout"); };
function Event( type, props ) {         if (!(this instanceof Event) ) {             return new Event( type, props );
successModal: function() {       global.modalView.modalData.title = 'Success!';
if ($scope.account.notificationEmail.length > 0) {             return!tools.validEmail($scope.account.notificationEmail);         }
if (input.placeholder && 'placeholder' in document.createElement('input')) return input;   color = color || '#AAA';   if (input.value === '' || input.value == input.getAttribute('placeholder')) {
return false; }
}, {     id: "_m2",     name: "Deimos"
url: '',   regex: /^.*(?:(?:youtu\.be\/)|(?:youtube\.com)\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&?]*)/ };
},     function () {
"License-Online-Resource" : "http:           },            "Proj4" : {             "Part" : "Proj4JS",
this.$el.html(ProgressTemplates(this.options.bars))     },
openLoc: function(){       var basisjsTools = typeof basisjsToolsFileSync!= 'undefined'? basisjsToolsFileSync : null;       if (basisjsTools && typeof basisjsTools.openFile == 'function')
}   clear () {     cache = {}   }
{     return players * 10 - 10;
basemapLayer: function(key, options){   return new BasemapLayer(key, options); };
return width;     }     function getTextRect(text, textFont, textAlign, textBaseline) {
return <Icon.Hot shrink={0.75} />                             case Badges.OLD:
static extractExtension(url) {     url = URL.urlWithoutHash(url);     const indexOfQuestionMark = url.indexOf('?');
if (currentRow[3] === committedSketch){             var checkerOuter = currentRow[2];
} = actionHelpers; Object.assign(global, actionHelpers);
export function isExplictCommand(name) {   return name &&!/^-/.test(name) }
class Wrapper extends Component {    constructor(){       super();       this.state = {
});     }else if(stage.status==3){      if(!stage.timeout){
return;     }
if (rules && rules.length) {        for (i = 0, length = rules.length; i < length; i++) {         ruleStyleSheet = rules[i].styleSheet;
import app from 'ampersand-app' import cuid from 'cuid'
const collections = await this.getAllCollections();     for (const collection of collections) {
var focus_search = function() {     $("#search").width("504px");
transclude(function (clone) {                         element.append(clone);
compatibility: 'all',       },
alert('Thank you for contacting me! Message was sent succesfully, will get back to you soon!');    $('#test').remove('loading').html('√');     },
.join(true,'T');     test('parses single row description',function() {
getFirstVisibleChild : function() {       return Array.getFirst(this.getVisibleChildren()) || null;     },
TileRange.prototype.containsTileRange = function(tileRange) {   return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&
exports.init = function() {  this.on("create", function() {   console.log("hi");  });
if (Device.system.phone) {     return this.getAggregation(sAggregationName, null, true);
describe('repeatEvery', function() {     var job = new Job();     it('sets the repeat interval', function() {
);     if (this.hwModule.monitorTemplate) {         this.hwMonitor = new Entry.HWMonitor(this.hwModule);
);       for (var i = 0; i < clientETags.length; i++) {
if(err) {             sage.log(err)
set: function (val) {       WriteStream = val;     },     enumerable: true,
no.events._hid_key =  no.events._hid_key ;
} catch (err) {       return console.error(err)     }
this.allocateQuantity = _scope(quantity, this.available);   }   if (!avoidSlider) {
if(VALID_HOOKS.indexOf(event) === -1) {     return;
{      var requestList = [];      var requestMap = {};      var selectedRequestId = null;      var lastModifiedRequestId = null;
let i = isTail? this.items.length - 1 : 0;   while ((item = this.items[i])) {    idx = this._getColIdx(item);
var output = [];
const includes = transpileModules.map(module => (new RegExp(`${module}(?!.*node_modules)`)));   const excludes = [new RegExp(`node_modules(?!\/(${transpileModules.join('|')})(?!.*node_modules))`)];
this.dumpStatistics();         process.exitCode = 1;     }
var self = this,                 $el = self.$element;             var $navTab = self._getNavTab(navTab),
resultGeneratedData = generatedData;             return invokeSandbox('saveSandboxGenerated', generatedData);
if (this.showCursor) {                 index = (this.cursorIndex + samplesIndex) % samples;                 str = 'LODs:' + values[index][0];                 var lods = values[index][1];
create.execute();    conn.addEventListener(air.SQLEvent.OPEN, initListener);
console.log(test1_2({})) function test1_3(c) {var a = ((a = c.a) === void 0? 3 : a), b = ((b = c.b) === void 0? a + 1 : b), c = ((c = c.c) === void 0? c + a + 1 : c);  {
}     } else {             dom = updateVnode(lastVnode, nextVnode, context, mountQueue);
controller.read(processData);  }
process.exitCode = 1; }
type: "2fv"
avatar: {         type:'string'       },       date: {
array1 = message.toString().split(': ');             array2 = array1[1].split('/');
$.Model.belongsTo = function(type, name){   var cap = $.String.capitalize(name),
if(_screen) {        APP.Detail[APP.currentStack].add(_screen);
date = new Date(date.replace(/(\d)-(\d)/g, "$1/$2") );    else if (/^(\d?\d):(\d\d)(\s[\A?P?]\M)?/.test(date)){      let matches = date.match(/(\d?\d):(\d\d)(\s[\A?P?]\M)?/);     date = new Date();
it('adds \'material\' modifiers and effects on Android', () => {
env.property = env.property || ''     var match = env.property.match(/^([pP]?([0-9]+))?([\/,][pP]?([0-9]+))?/)     if (match) {
} } GreaterThanExpression.sign = $lex.GreaterThan;
}     res.status(200).json(data);   };
import DelayRender from '../DelayRender'; import { Consumer } from '../AxisContext';
for (keyName in scheme) {           definition = scheme[keyName];           if (definition.calculate) {
var posterImage;   posterImage = new PosterImage(this.mockPlayer);
disabled: boolean('disabled', false),       length: number('length', 25)
this.storage[fileName] = str;                     return Promise.as(str.length);                 },
const mapStateToProps = (x) => {   return { user, posts } };
import referencesChecks from './references'; import wordpressChecks from './wordpress';
if ($scope.RUBY_ENGINE['$==']("opal")) {       $scope.$apply();     }
if (_htOption.logoImage!== undefined) {             var logoScale = _htOption.logoScale;
Amount.prototype.to_human = function (opts) {   opts = opts || {};   if (!this.is_valid()) return '';
if (5 === 5)  console.log ("hello world");
iElement.on('click', function(){                 if (shortList) {                     scope.showList = true;
import { connect } from'react-redux'; import { login } from '../actions/index.js'; import { Link } from'react-router';
diff) {     var originalLines = this.splitToLines(original);
var self = this,             map = App.getLeafletMap(),
{                                  body.blocked.up = true;
var forEach = Ember.EnumerableUtils.forEach;
this.processing = false;       this.sendFile();     }
prop.input.positions += "["+position.join(",")+"]";     e.preventDefault();
if ((err && err.status == '404') || value == null)           value = [];         req.original_images = value;
var trigger = true;         requestTestRunner(References().simpleReference0, queue).
res.send(404, 'SensorID invalid!');     }   } else {
console.log("CRITICAL ERROR: FAILED TO START");             callback(new Error("CRITICAL ERROR: FAILED TO START"));         } else {
ident: function() {     var captures;
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
config = JSON.parse(config)   let intlData = config.intlData
for (i = 0; i < n; i++) {         j = reverseBits(i, levels);         if (j > i) {
it("should be constructable.", function() {         expect(new RequestQueue({}, immediate));
redirect(model) {     let context = this.modelFor('organization');
Object.keys(runs).forEach(key => {         runAction(key, runs[key], counter1++, counter2++, result => {
for (var i = 0; i < res.length; i++) {                     if (res[i].name.match(new RegExp(adapter.config.kreis + '.xml$'))) {                         files.push(res[i].name);
import ProgressBar from 'progress'; import https from 'https';
Object.keys(tests).forEach(function(test) {   var re = new RegExp('^' + test + '.*\\.json$');   files.forEach(function(f) {
curtop += obj.offsetTop;             }             return [curleft,curtop];
const storageManager = require('./../StorageManager'); class GetContainerProperties {     constructor() {     }
import React from "react-native"; import Modal from "./modal";
const {resolve, dirname} = require('path') const {read, write, exists} = require('flipfile') const JSONChain = require('json-chain')
notify: function() {     } });
const Notification = ({   active = true,
logFileChanges: false,   notify: false  });
"rotate(" + this.angleDeg + ")";   }
Controller_.prototype.preparePopover_ = function() {
$(selector + " [data-index='" + index + "'].wv-palettes-max")                .html(max + " " + unit);             var title = legend.title || "&nbsp;";
list: []       };       console.error("You are not connected to the internet - jquery.autosuggest!");     }
, headers: {           Authorization: 'basic '+owncloud.username+':'+owncloud.password         }
" " + xAxisRotation + " " + largeArcFlag +          " " + sweepFlag + " " + pointsAbs[2] + " " +         pointsAbs[3] + " ");   },
setTimeout(function() {       editor.windowManager.confirm(message, function(state) {
_.extend(Assemble.prototype, Task.prototype);
this._emberDebugWorker.destroy();     }
import { connect } from'react-redux' import ViewContainer from './ViewContainer.jsx'
return newState;         case (TablesCntlr.TABLE_NEW)  : {             const {tbl_id, tableMeta, request} = action.payload;             if (has(state, tbl_id)) {
} else if (edge instanceof CircularEdge) {     if (goog.DEBUG) {       UtilityCollision.edgeEdgeCollisionTests++;
var solution = r.solution;   for(var i=0; i<cell.length; ++i) {
if (address!== undefined) {             let key = /^\s+(\w*)\:\s+|/gm.exec(stream.string);             key = key? key[1] : '';
var title, _widget, isWidget;         for (var widgetName in targets) {
else             this._removeDOMBreakpoint(node.id, type);         this._saveBreakpoints();
} function endDraggingVertex(state) {   var catalog = state.catalog;
strategy = '+';         break;       case'minus':         strategy = '-';
},     componentDidUpdate: function() {         this.maybeUnprocess();
if (data) {           var username = data.layers[1].options.user_name;
steal('can/util/string',function() {
export const flagRejectEvent = (event, message, mode, user) => {       let _mode = mode == 'flag'? 'flagged' :'rejected';
_getCacheParam: function (method) {     var detectedBrowser = browserDetect();     var name = detectedBrowser && detectedBrowser.name && detectedBrowser.name.toUpperCase().trim();
} } function insertContent(parent,child,prepend,sibling){
} else if ((data.event!== undefined) && (data.event == "patternLab.annotationPanel")) {
var manager = this.managers[peer];       if (manager) {         manager = new ConnectionManager(this.id, peer, this._socket, options);
}     let request = this._auditingEnabled?       this._builder.update().item(item).atVersion(expectedVersion).buildRequest() :
this.menuText.anchor.setTo(0.5,0.5);         this.startkey = this.game.input.keyboard.addKey(Keyboard.SPACEBAR);     },
this.keypressSound.load();                 this.keypressSound.play().catch(err => console.log(err));             }
var singleAttrAssign = /=/,
this.forceLayout = layoutEngine;                 this.forceLayout.force.on("tick", function (d) {
const cache =        await render(req, res, { title: name });       return;
if (typeof node.name ==='string') return node.name   if (isJSXMemberExpression(node)) {     return `${getTag(node.object)}.${node.property.name}`   }
return qx.renderer.border.BorderCache._data[propValue];   }
embedModulesIn: function(doc, relativeModuleURLs, progressBar, thenDo) {         var self = this,
if (solved === true) {     console.log(suspect + " did it in the " + room + " with the " + weapon + "!");
path: "/tutorials/blaze/creating-an-app",     contentTemplate: 'blaze-step01'   },
template: Handlebars.compile(user_profileTemplate),         render : function() {
});         it("async", () => {             Augur.hashReport(ballot, salt, function (r) {                 test(r); done();
if(response.ok){           res.json(response.body);
Ember.View.extend({   tagName:'select',
export class KeyboardInput extends mixin( null, EmitterMixin ) {     constructor( { element = document.body } ) {         super();         this._map = options.map || this._createAutomap( options.inputs );         this._element = options.element;
} else {     args = minimist(argv);     command = this._findIndexCommand();
app.controller('loginController', function($scope, $http) {      $scope.formMode = "login";
];     } else if ((m = s_rgbaRE.exec(s))) {       c = [
var reshape = this._impeach() || this._exile() || this._expand()             if (reshape) {                 this.ponged = false
module.exports.isContainerRunning = function (pod, container) {   return typeof module.exports.containerState(pod, container) === 'undefined'; }
ChainDB.prototype._pruneCoinQueue = function _pruneQueue(block, batch, callback) {   var iter = this.db.iterator({     gte: 'u/q/' + pad32(block.height),
it('isSubscribable should return false for null', function () {         expect(ko.isSubscribable(null)).to.equal(false);     });
onError : function(responseData, uuid) {     app.u.throwMessage(responseData);     $(app.u.jqSelector('#',app.ext.admin.vars.tab+"Content")).hideLoading();     }
return number * fabric.DPI / 2.54;         case 'in':
finalMeasurements.splice(match, 1);     }   }
'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());         }
else {     this.instance = new canvas.CanvasRenderer(width, height, settings);   } };
var Pudding = require("../");
function isArray (ar) {     return Object.prototype.toString.call(ar) == '[object Array]';   }
if (expected!== actual) {     Results.insert({n: next_result++, type: "assert",
var req = petApi.findPetsByStatus({status: undefined}, {responseContentType: 'application/json'});
CordovaInput.userInterface = new function() {
if (1===1) {                 return Promise.resolve();             }             return this.props.vm.saveProjectSb3()
case 4:       day = "Thursday";       break;     case 5:
value = this.matchString_(text, pos, DateTimeSymbols.QUARTERS);     if (value < 0) {
this._childManager.subscribe(publicationKey, this.swapChild.bind(this));             node = this._dispatch.getNode();             node.removeAllChildren();
if (wc.hostWebContents) {       const parentWindow = BrowserWindow.fromWebContents(wc.hostWebContents)
trustedDomains: window.location.host? [ window.location.host ] : [],     forceHandCursor: false,
this.app.removeActivities([msg.activity]);       break;     default:       logger.error('receive error signal: %j', msg);
}   resizedoc();  }
}         commmand = commmandList.next;      }
function _helperRemapAsyncToGenerator() {   var data = _interopRequireDefault(require("@babel/helper-remap-async-to-generator"));   _helperRemapAsyncToGenerator = function _helperRemapAsyncToGenerator() {     return data;
for (x = 0; x < iRowspan - 1; x++) {       if (oLabel) {
return injectZeros(data, this.data, orderBucketsBySum);     }
}    break;   case "say":    if (message.member.roles.some(r => ["Staff", "Développeur"].includes(r.name))) {
return static_url('images/icon-calc.svg');             case DG.TextView:
enyo.dispatch(e);   pool.releaseObject(e);  },
return header; } function decodeChannelHeader(header_bytes) {
console.log(e);         err = new Error('Uglification failed.');         if (e.message) {
PlaceholderComponent(quail, test, Case, options); }; module.exports = ImgAltNotPlaceHolder;
return arcgisGeometryType; } export function warn () {
return true;   },   versionParser(p) {
var p = this.props;   const advancedParamsArrow =!!p.showAdvancedMarketParams? '▲' : '▼'
case 9:return 10         case 10:return 11
app.get('/api/inventory/storerooms/:id', function(req, res) {         Storeroom.findOne({_id: req.params.id}, function(err, storeroom) {             if (err) return next(err);             res.json(200, storeroom);
themeEngine.getTemplate(req, res, function(err, template) {
.replace( /\s+-\S+/g, "" )                .trim().replace(/\s+/g,'|'),
var clickEvent = 'click';     if (!('classList' in userbar)) {         return;     }
var upper = this.model.interpolate(bounds[1]/n).toPrecision(2);         bounds[0] && this.model.set('lower', lower);
this.addEndSpacers();   }
const {HashNode} = nodes;
$("#wait1").css("display", "none");      showStatsData(response);    }   });
set,     delay,
require('./bootstrap'); new Vue({
}     return false;
function(err, componentsInfo){       if(err){ return callback(err); }       server = http.createServer(self.app);
var escapeRegExp = function (str) {     return str.replace(/[[\]{}()*+?^$|]/g, "\\$&"); };
import React from'react'; import ReactDOM from'react-dom';
options = options || {};
it('MathParameter user resources getter', function () {         var mathParameter = new MathParameter();         expect(mathParameter.getUserResources()).to.be.empty;
function view_find_localization(content, index) {     index = content.indexOf('@(', index);     if (index === -1)
const patternIsString = typeof findPattern ==='string'     if (!(findPattern instanceof RegExp) &&!patternIsString) {       return false
logger.info('no changes to report');     }     notifications.wikiChanges(changes, function (err, stringifiedOptions) {
} else {         utils.removeClass(renderer.grid[intersection.y][intersection.x], "dead");       }
reason = evt.reason;     } catch (e) {       console.log(e);     }
return result.replace(opts.replacement+"$",'');  }
const error = super.parseError(str);     if(!error) { return error; }     if (error.name === 'JavascriptError') {
_buttonTxt = "Finish Quiz";             }             var _button = '<button id="nextQuestion" type="submit" class="btn btn-default">' + _buttonTxt + '</button>';
"self": { "href": "/" },   },   "_links": {     "orders": {
cur = cur[field]           }         })
console.error('Invalid option:'+ v);                         done(1);                         break;                     }
case 'rotate':       cosValue = Math.cos(value)       sinValue = Math.sin(value)
}         minWidth = Math.max(minWidth, this.getColumnMinWidth(col));         maxWidth = this.getColumnMaxWidth(col);         if (this.getColumnWidth(col)!== null) {
if(isClient) {       rpc._emit('fallback:replicate')
handleMessage: function(msg){       handlers = messageListeners[msg['command']];
throw new Error(parser, "Unknown state: " + parser.state)     }
this.set('message.visible', false);       if (removeAfter) {         Ember.run.later(this, remove, removeAfter);
return this;   } }
for (opts in service.options) {       _req[opts](service.options[opts]);
var actual = new Date(1449662400000).toString();             var re = /^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/;             expect(re.test(actual)).toBe(true, actual);
if (!event.stopped) {       return Astro.eventManager.emit(event);
'use strict';
if (n.witness_script) {       pairs.push({
if (Ext.Msg) {             Ext.Msg.alert(trlVps('Error'), trlVps("An error has occured"));
console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );    return value;   }
return (         <section>
if (hours.id == 9) {                             var matches = /([0-9]+\:[0-9]{2})\s*([AP]M).*([0-9]+\:[0-9]{2})\s*([AP]M)/.exec(hours.hours);                             if (matches) {
case 6:return 24         case 7:return 22
sequelize: Joi.object().type(Sequelize).required(),     sync: Joi.boolean().default(false),
var props = inst._currentElement.props;     if (__DEV__) {       inst._warnIfValueIsNull(props);     }
jisp.emit("failure", err, task);       message = err.stack || err.toString();
toString() {     let str = this.name || this.constructor.name || this.constructor.prototype.name     if (this.message) str += ':'+ this.message     if (this.cause) str += '; caused by'+ this.cause.toString()
const targets = [mainTarget];     let rules = [...initialRules];     while (targets) {       const currentTarget = targets[targets.length - 1];
if ( options ) {         assert(_.isObject(options.cycleDetector));
setTimeout(function() {                     set_and_verify_json_sparse(this.test, suffix, [{
Array.prototype.push.call(newArgs, callbacks);     if(document.body){
horizonServer = horizon(httpServer, {     auto_create_collection: true,
(function (w, $) {     if (!$) return;
}    }    var referenceObj = framesArray.shift();
rep('(load-file "' + process.argv[2] + '")');   }
if(data.user.dataLists == ["1"]){                     data.user.dataLists = [];
await test.execute(argv);    break;   case "start":
beforeEach(() => {       testProps.columns[sortableColIdx].sortable = true;
var result;   var start = this.pos;
emitStack = [],   emitStackLevel = 0;
var google = require('google-proxy').get(); var GeoJSON = require('geojson');
return _nextReplyId++; }
var that = this;  if(!that.trigger.groups[toId]) {   that.trigger.groups[toId] = {};  }
var dockerVersion = spawnSync('docker', ['--version'], {     env: process.env,
}     mesh = new Mesh(geometry, material);     mesh.castShadow = true;
object = object || {};     var str = production?       JSON.stringify(object, null, null) :
var output = eval(reassembleTest(chaiTestFromJSON, data));         }
githubs = JSON.parse(githubs);       } catch (err) {         console.log(err);       }
export function success(message, title = "Success") {   if (lastMsg === message) {     toast.success(message, title);
this.children = node.children;       for (i = this.childNodes.length; --i >= 0;) {         this.childNodes[i].parentNode = this;
if (op = $(/^[<=>]/)) {                         if (b) {                             return new(tree.Condition)(op, a, b, index);
const t = document.querySelector('#pageTemplate');
var response = cache.get(url);
}           const getMembers = members.filter(isGetMember);
(function (xml_digester) {
import React, { Component } from'react' import { Grommet } from 'grommet' import { injectGlobal } from'styled-components'
return <CmsContainerItem configuration={configuration} />;       default:
this.props.onUpdate({ valid: isFormValid, partialUpdate: changes })     }
function generate( params ){   var CmdGenerator = function(params){
Model.reopen({
}; }]); linuxDash.directive('cpuIntensiveProcesses',['server', function(server) {     return {
while ((prop_value = cssStrings[i++])) {     prop_value = prop_value.split(':');
var fieldName = 'f_' + field.id;             input = inputData[fieldName] || "";             originalFieldData = (originalFieldData && originalFieldData.content) || "";
})(); (function() {     M.inherit = function(ChildClass, ParentClass) {
case 'formData':
var resourceRef = sync.dataRef? sync.dataRef.child('resource') : null;   if(sync.isMine &&!this.refLock && resourceRef)    resourceRef.set(this.data.res);
setSubs: function (name, value, options) {       if (typeof name!== "string" || name === "") {         return "";
rollup_commonjs({      extensions: [ '.js', '.es6', '.es', '.jsx', '.ts', '.tsx' ]     }),
import Popup from "react-popup";
return config;   }   if (typeof config[command] === 'undefined') {     abort(ERRORS.NO_PROPERTY(command));   }
summary.characterData = projection.getCharacterDataChanged();     }     return summary;
if (window ==='successWindow') {    this.$.successWindow.setAttribute('style', 'display:block;');
reset : _element("<input>", { "type" : "reset" }),
} else {       var fbLoginUiCb = function(func) {         UI.del('fblogin');         if (!func) {           return;
return /iPad|iPhone|iPod/.test(navigator.platform); }
if (level == 0) {                 xml += currentIndent + '</' + n + '>';               }
import { removeFromArray } from '../../utils/array';
marker.update(previous && previous.element);   if (previous && initialData.scrollPreviewWithEditorSelection) {    let scrollTo = 0;
const temp = input.parentElement;     input = temp.firstElementChild;
for(i = children.length-1; i >= 0; i--){     children[i]._testInputs(ctx, inputs);
function addResponsiveClass(str) {   return str.replace(/<img/g, '<img class="img-responsive"'); }
performSearch: ({ updateResults, fuse }) => (_, query) => {       let results
ipAddress: function(ipAddress) {     var match = ipAddress.match(/\)\)([0-9.]+)$/);     if (!match) return null;
if(err) { return handleError(err); }       roles = getArguments(arguments);       populateGlobalRoles(roles);
}       if (typeof o === 'object') {         var s = JSON.stringify(o);
try {   this.db = Ti.Database.open(this.name);  } catch (ex) {
this._props.name = value;    this.emit('setName', value);    return true;
if (selection) {             this.onSelectText(selection);           } else {
}     var directRenderTextLayerFn = textRenderer.directRenderTextLayerFn(morph);     var nMeasured = 0;     morphWidth = morphWidth - paddingLeft - paddingRight;
this.PropertyPathWalker.Update(source);          } else if (this.Binding.RelativeSource.Mode === RelativeSourceMode.Self) {              this.PropertyPathWalker.Update(this.Target);
} const publish = async () => { }
django.jQuery(function($) {  django.cascade.TextLinkPlugin = ring.create(eval(django.cascade.ring_plugin_bases.TextLinkPlugin), {});
case's':                 return s + "es";             case 'h':
if (oldState) {                                  const upgradedState = ['_g'];
d3plus.visualization.line.shapes       = [ "line" ]
_controllers.controller.storage.users.get(identity.user_id, function (err, user) {   var isnew = user? false : true;
"d9/dec/a00090.html#a9c0d57cd72c091f63895944959e98330":[10,0,2,1,2,0], "da/d24/a00068.html":[10,0,3,0,0,0,0],
this.chunk = null;   length = this.offset - start;   if (headerState[this.state]) {
var currentNode = new PointCloudOctreeGeometryNode(name, pco, boundingBox);     currentNode.level = level;
}); }; module.exports = LanguageDirectionPunctuation;
if (Ember.FEATURES.isEnabled('propertyBraceExpansion')) {         var itemPropertyKeyPattern = match[2];         var addItemPropertyKey = function (itemPropertyKey) {               cp.itemPropertyKey(dependentArrayKey, itemPropertyKey);
}else{             diffLocalAssets(conf, state).then(function() {
{token : "string", regex : "'",     next  : "start"},             {token : "string", regex : ".|\w+"}         ],
case 'divider':               return <Divider key={`menu-${index}`} />               break
return React.createElement(props.inline?'span' : 'div', { className: props.className }, items); } Group.propTypes = {
hex6: function() {     var captures;
}             }             for ( i = 0, l = this.types.length; i < l; i++ ) {                 this.order[ this.types[ i ] ] = storages;
import { startCase } from "lodash"; import FeatureProperties from "./FeatureProperties";
}     projectName = projectName? projectName.textContent.trim() : '';     link = togglbutton.createTimerLink({       className: 'phabricator',
return $.ajax({             url: this.base_url() + url,             type: "PUT",
it('should have the property next (base name: "next")', () => {
var r2 = obj.rectangles[1];   while((from = todo.pop())) {    vertices[from].neighList.forEach(function(obj) {
callback(null, msg);   }   this.slave.once('disconnect', onclose);
});  };  var fullResizeVideo = function() {
exports.setHeight = function(height) {   this.element_.height(height);
ev = both? eventName : 'all';             if ((list = calls[ev])) {                 for (i = 0, l = list.length; i < l; i++) {
comment = getDoc(node);       if (comment) {
var fs = require('fs') var through = require('through2')
}             }.bind(this));         },
clipboardy.writeSync(emoji);   return;  };
params.FilterDesc = args.optarg;                                         break;                                     case "l":                 params.FilterLib  = args.optarg;
]);     this._templateObject_bd41acb0dea811e8bb74b182b64af7a1 = function() {       return data;
import Mosaic from '../../src/index'; import { ARRAY_DELETE_PLACEHOLDER } from '../../src/util';
return this.i18n.Normal;                 case 2:
exports.run = function (grunt) {     var replaceContent = function (content, sha1) {         content = content.replace('%extVersion%', grunt.config('pkg.extVersion'));
require(['gv', 'config','models/Books','models/State', 'layouts/Layout', 'routers/Router'],      function(gv, config, Books) {
.then((response) => {         if (response.status === 401) {
import theme from 'nivoTheme' import { totalCount } from '../../../constants' import ChartLabel from 'core/components/ChartLabel'
if (textfield) {       textfield.classlist.add(textfield,           goog.getCssName('firebaseui-textfield-invalid'));     }
var testMulAsync = async(function *(declaration) {             assert(lib._funcs);             assert(lib._funcs.mul);
TransportMetricsPlugin.prototype.unbind = function () {     $A.uninstallOverride("ClientService.send", this.sendOverride);
if ( typeof OrbitControls === 'function' ) this.controls = new OrbitControls( this.camera, this.container );
this.element.appendChild(img);     }
}))             );         }         componentDidMount() {
it('Should filter out bad values', () => {       const nodes = findById([testID, 'NotFound', null, '', 99, 'Duplicate', ':bad-id']);       expect(nodes)
it('2. Basic Usage: collection observable with ko.computed', () => {     kb.statistics = new kb.Statistics();
.then(items => items.reverse())        .then(items => items.filter(item =>!(document.getElementById(item.guid))))        .then(items => items.map(item => applyTemplate(itemTemplate.cloneNode(true), item)))
item.addParents = function (person) {   if (person.inFamily) {
for (var metric in this.metrics) {       if (this.metrics[metric].target === false) {         var name = this.metrics[metric].target + '-' + this.metrics[metric].source
}     this.zoom_container.go_to(new_zoom, new_pos);
if (addon.plan.name.match(/hobby/)!= null) {       cli.error('redis:maintenance is not available for hobby-dev instances')       process.exit(1)     }
Object.defineProperty(baseObj, property, {get: getter, configurable: true});   }   var setter = baseObjProperty && baseObjProperty.set;
function makeImage(src) {             return new Promise(function(resolve) {
function Consumer() {}     Consumer.prototype.consume = function (ip) {
angular.module('axisJSApp')  .service('pdfOutput', function pdfOutput(GenericOutput, chartProvider) {     var pdf = angular.copy(GenericOutput);
}             } catch (e) {                 console.log(e);             }
var $scoreWrapperEle = $('.bubble-wrapper')[0])   document.body.appendChild($scoreWrapperEle)
: str.replace(/\\/g, '/') } if (process.platform === 'win32') {
case 'boolean' :             return json;       default:
var wrap = require('./lib/wrap'); var coffee = require('coffee-script');
done();   }
let i = type ==='ssa'? 2 : 1             for (; i < 9; i++) {               subtitle[ASS_KEYS[i]] = values[i]
log.info('CornerstoneToolsMeasurementModified');   const measurement = collection.find(
if (!item.next) {                      } else {
} ); export { Skeleton }
if (this.get('model')) {     this.get('model').getUpdateRequest(this.HTTP);     for (var i = 0; i < types.length; i ++) {
pathname_prefix: "",       action_name_black_list: ["super", "init", /^_[^_]+/],      app_tag_on: true,
],       "outputShape": Blockly.OUTPUT_SHAPE_HEXAGONAL,       "category": Blockly.Categories.data,
require('./grouped_builds_view.css')
let resp = QRespondent.findOne( {_id:Session.get("rid"+instance.qnrid())} );         $(".qq-val").each(function(idx, elem) {
var parts = /^(.+\/)*(([^\/]+)\.[^\/.]*|[^\/.]+)$/.exec(process.env.GEOJS_TEST_CASE);     if (parts) {
if (!this.requiresNativeTap) this.allowDocumentScroll_ = false;
process.exit(1);     }
step.args.find('A').value = 4;   data = step.pack();   expect(data).to.deep.equal({id: step.id, key: 'foo', cells: {A: 4, B: 2, C: 3}});
return originalValue;       case 'object':
i = 0xFF;         for (;;) {             var n = this.readRegister(this.DivIrqReg);
if (callback) {     var next = function(er, ret) {       if (ret)
computed,   get,
page.onConsoleMessage = function() {
const mqtt = require('mqtt') opt.subbroker = opt.subbroker || opt.broker
const Plugin = require('../plugin'); class Router extends Plugin {
return cb(); }
if(err) { return handleError(res, err); }       return res.json(attendance);     });
}    }    console.log("total rooms: ",this.map.roomsToExit.length);
};     return DigitalOcean;
return false;       case 'Object':
if (!session) return;
const targetName = target.name;
if (fs.existsSync(unixSocketFile)) {     return requestEmulator(unixSocketFile, options);
}     return new CommandStack(); });
forEach(appsList, function (app, key) {     appListData.push({
else return logs(args[0], cb);     }     case "stop":  {
};     MainPage = __decorate([         core_1.Component({
setDevicesDiscoveryConfig(discoverUsbDevices, portForwardingEnabled) {   }
return function defFunc(ajv) {     if (ajv.RULES.keywords[keyword])       return warn('Keyword', keyword, 'is already defined');     defFunc.definition = {
const instance = this;  window.Apps.getWsListener().unregisterListener(AppEvents.APP_STATUS_CHANGE, instance.onStatusChanged);  window.Apps.getWsListener().unregisterListener(AppEvents.APP_SETTING_UPDATED, instance.onSettingUpdated); });
};       } else if (!paymentCurData) {         const timeoutHours = orderState === 'DISPUTED'?
thesauris.save(data)      .then(() => {         return thesauris.get();
startEndMarkers.push(marker);         }
function doAddressSearch() {   var address = $("search_input").value;
goog.scope(function() {
output: {     filename: 'bundle.min.js'   },
this.pixelType = WEBGL_PIXEL_TYPE.FLOAT;         this.magFilter = WEBGL_TEXTURE_FILTER.NEAREST;         this.minFilter = WEBGL_TEXTURE_FILTER.NEAREST;         this.generateMipmaps = false;
} else {                         return "'" + value.replace(/'/g, "''") + "'";                     }                 case 'number':
} function last(arr) {
}); (function($){  "use strict";
);                 height = (model.getHeight() - prefs.rect.height);                 var middleRect = d3Ref.draw.centeredBasicRect( new DiagramCore.Models.Point({'x': center.x(), 'y':  center.y()+100}), 150, height, 0, 0);
if (!firstLang) {             return gettext('[unknown]');         }
this.name = 'MongooseError'; }
return 'web'   }   static get scheme () {     return'session'   }
function use (names, fn) {   if (type(names) ==='string') {
for (var index = 0xF0; index <= 0xF7; index++) {   count++;    var hex = decimalToHexString(index);   try {
Compiler.prototype.visitRulesetList = Compiler.prototype.visitRulesetList
if(isStream(items)) {             iterateOn(iterations, items, scope, section.alias,
return new oid(); }
if(this.addproperty_checkboxes) {       for(i in this.addproperty_checkboxes) {         if(!this.addproperty_checkboxes.hasOwnProperty(i)) continue;
return 'Q';     case 'chancesleet' :
import { LatLngIdTravelMode } from './../types'; import { TargomoClient } from './targomoClient';
return!!value;             case 'habool': {                 const haBoolean =                     this.nodeConfig.server.nodeConfig.ha_boolean === undefined
html += "<h3>Functions</h3>";    for (i=0; i<objs.length; i++) {     if (o.group) {
getSiteType: function() {         if($('#jplayer').length && /^chat\./.test(location.hostname)) {             return 'chat';
darkMode: window.Canvas.user.darkMode, };
function distribution(obj){         var o = normalizedObj(obj)         return function(){
return false;
case'read':
if (!result.valid || polymorphicValidationErrors.length > 0) {                 error = new VError('Error validating request body');                 error.name = 'ValidationError';
if (data) {       delete data._id;
.reduce((sortedLabels, labelName) => {       sortedLabels[labelName] = obj[labelName];       return sortedLabels;
return rule.test(val);    case '[object Array]':
throw new Error('Logger.cli() was removed in winston@3.0.0');
} catch (e) {     let pathname = new URL(event.request.url).pathname
} else if (tag.type === "return" || tag.type === "returns") {
}             viewGL = coordSys.viewGL;
var menuClose = function() {    web.eventRemove(window,'resize', menuClose);    if (web.exists(document.querySelector('.mnp.mnp-display'))) {     web.classRemove(document.querySelector('.mnp.mnp-display'),'mnp-display');
if (unrenderers[i]($content, message)) break;   }  }
checkQuit();   });  }
return field     })   } catch (err) {     this.emit('error', {       source: 'types',       level: 'error',
render: function () {     var accountLinks;
}             if (value) {               childScope = $scope.$new();
}else{     this.slave.apply(this, obj[key]);
return null; }
script     );     if (typeof module!== 'undefined' && module.exports) {         module.exports = createApp;     } else {         this.app = createApp();
thisMonth = this.value.getMonth();     var dates = this.$.dates.getControls();
if(editor.isMathEditorVisible() && e.type === 'focus') editor.closeMathEditor()             answerFocus = e.type === 'focus'         }).on('paste', e => {
};     return __decorate([         react_redux_1.connect(null, function (dispatch) {
Graph.webglInputEvents = function (webglGraphics) {     if (webglGraphics.webglInputEvents) {
import MoviesCardList from "../components/MoviesCardList"; import ReviewsList from "../components/ReviewsList";
if (this.v <= 5) this.errorReservedID();       break;     default:       pendingExprHead = this.id();
render(<Positioner />, mountNode);
if(plug.util.env.mongo) {         log('Starting MongoDB');
var sublocality_area = [];       geocoderResult.address_components.forEach(function(addrComp) {
else if (A.FormValidator.isCheckable(target)) {                             label = ancestor.previous('.' + label);
console.log('PDC:');   console.log('UserName:');
}   if (niantic_params.CURRENT_VERSION === undefined || Object.keys(window.niantic_params.botguard_method_group_flag).length === 0) {     dialog({
$advancedPreview.css("background-color",color);           methods.updateLightnessStyles($lightnessSpectrum,$hue,currentSaturation);           $hueSpectrum.attr("style",methods.updateHueStyles(saturation,currentLightness));
this.forward(req, res, function(r) {     r.on('error', function(err) {       self.emit('error', err);       res.end();
}); describe('GET /api/peers', function () {  it('using invalid ip should fail', function () {   var ip = 'invalid';
constructor() {         this.wordPattern = /[\w\-.:<>*][\w\d.\\/\-\?<>*!]+/;         this.indentationRules = {
import { BackendService } from './services/backend.service'; import 'rxjs/add/operator/toPromise';
if (nodejs) {      require('../../agent_smith/src/agent_smith');      require('./cluster');
export function* getRecords() {   const currentModel = yield select(makeSelectCurrentModelName());
onTick: () => {    log.info('Cron job completed')   },
handleTlsConnection (socket, hostname) {
}                 for (i = 0; i < this.assetManager.indices.length; i++) {                     if (this.assetManager.indices[i]) {
parser.addHandler("season", /([0-9]{1,2})x[0-9]{1,2}/, { type: "integer" });     parser.addHandler("season", /(?:Saison|Season)[. _\-]?([0-9]{1,2})/i, { type: "integer" });
x[0].id = path + '/' + i;             if ((t = props[ppre])) {                 if ((isPseudo && freezeID === t.freezeID) ||
lazy: true,                 useFactory: (config, bootstrap, types, resolvers, args, guards) => {                     config = yield config;
const firstDigit = requestDetails.statusCode.toString()[0];             if (firstDigit!== "2" && firstDigit!== "3") {
return true       } else if (comparison < 0) {
}   global.ng.common.locales['ar-il'] = [     'ar-IL',
}).then(function (key) {   if (key._key)    t.pass('CryptoSuite_ECDSA_AES function tests: verify generateKey ephemeral=true return object');
const URL = req.body.url     appstore.fetchAppInfo(appURL)      .then(info => appModel.add(info))
function _addChar(ch, pos){       pos = pos || _chars.length;       var id = _.uniqueId('char-')
};  _ImplicitStylePropertyValueProvider.Instance.RecomputePropertyValue = function (propd, providerFlags) {      if ((providerFlags & _ProviderFlags.RecomputesOnClear) === 0)          return;
return tokens;   }
return a += b;     }
var transactionsbypayeeRef = {};         var thisHouseId = myCache.get('thisHouseId');
var h;    while((h = this._notifyConnections.pop())){ h.remove(); }
}   file = path.resolve(process.cwd(), file);   if (!~file.indexOf(':
loadWidget: function(index) {
var mcos = 1.0 - cost; var v0 = mcos*x2, v0+zs, v1-ys, 0, v0-zs, v2+xs, 0, v1+ys,
showPoster(source);     } else if (ext ==='mp4') {      playVideo(source);
function basicGithubId(text) {   return text.replace(/ /g,'-').replace(/[\/?:[\]`.,()*"';{}\+]/g,''); }
for (index1 in parents) {           if (Object.prototype.hasOwnProperty.call(parents, index1)) {             var k1 = parents[index1];
options.id = layer.id;       esriLayer = new CartoLayer(layer);
columnClass: 'col-lg-3 col-md3 col-sm-2',                 linkTo: "/#/inventories/" + group.inventory + "/"                 },
switch (action.type) {     case 'MEALS_REPLACE': {       let meals = [];
} else {           console.log("Docs successfully built.");         }
tabWidth: 2,       wrapColumn: 80,
$('#deletingAlert').addClass('in');                         $.ajax({                             type: 'DELETE',
let state = arrayStates._START_;   while (this.index < this.tokenList.length) {    let token = this.tokenList[this.index];
loadItems: function() {   var hash = {};   hash.type = 'GET';
try {               var _value2 = Slim.lookup(source, path, target);               target.innerText = target.innerText.split(expression).join(_value2 || '');             } catch (err) {}           };
var assembleDefaultLayout = function(assemble, next) {       grunt.log.writeln('Assembling'  +'default layout'.cyan);
seenNonDefaultActions.push(action);       if (actionConflicts[actionHash(action)]) {         actionConflicts[actionHash(action)].forEach(function (actionConflict) {
if(this.constructor.prototype==c.prototype && (ct=this.postscript)){ct.apply(this, args)}   },
var config;
}     } catch(e) {       console.log(e);     } finally {
console.log ("Error posting to instances, instance data json string no passed in or corrupt");         throw new Error ("Error posting to instances, instance data json string no passed in or corrupt");     }
},  'no semi-colons': {   options: {
var result = null;     models.forEach(function(model) {
whileplaying: function() {                     eqBarValues = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
if (args) {       if (typeof args.name!= "undefined") {         args.name = args.name;       }
allParams = [];     _splitter = obj.splitter!== undefined? obj.splitter : "-";
var superError = 'error critical';    if (!this.get('termsAndConditions')) {
tDescription = this.getPath('model.attributeDescription.attribute.description') + '—' +             String.loc( 'DG.LegendView.attributeTooltip');         if( tDescription!== this._labelNode.get('description')) {
name: `npc${i}`,         labelText: n.replace(/(\}|\{|\:|\.|\(|\)|\-|=|\[|\])/g, ""),         appendTo: this.npcSettingsWindow,
console.log('error!', res);                     });
return keysNotTranslatedPerLocale; }
if ( Array.isArray( id ) )     {
throw "self.record undefined in start observing"   }
export function clearAutocomplete () {   if (autocompleteResults) {     autocompleteCurrentValue = null
let gatewayStatus = availableGateways[selectedGateway];     inputCoinType = gatewayStatus.assetWithdrawlAlias         ? gatewayStatus.assetWithdrawlAlias[inputCoinType.toLowerCase()] || inputCoinType.toLowerCase()
var QueueEmpty = exports.QueueEmpty = function() {     this.name = "QueueEmpty";
var isReadonly = angular.isDefined(attr.readonly);     var mdNoAsterisk = angular.isDefined(attr.mdNoAsterisk);
url: contextPath + "/loadLinksConfig",             data: {activeClassifier: lastActiveClassifier},             success: function () {                 if (tomlEditor!= null) {
case 'oneToManyMorph':           case'manyToManyMorph': {             const transformToArrayID = (array) => {               if(_.isArray(array)) {
}                   if(data.user.mostRecentIds == {corpusid:null}){                     data.user.mostRecentIds = {};
var me = this;         me.flow = new ThemeFlow();         me.offset = new ThemeOffset();         me.style = new ThemeGraduatedSymbolStyle();         if (options) {
$(window).on('resize.ADE',callback);   }
if (build === 'build') {}
return (x)['+'](this);     }
return process;    case "relay":
return "?" + query.join('&'); }
import Plain from "slate-plain-serializer"; import { Value } from "slate";
this.setState({circuitType5: null});                                         break;                                     default:                                         break;                                 }
fs.unlinkSync(actualFile);     } catch (err){}
case "Lbracket":             if (this.lookahead(0) === "Number" || this.lookahead(0) === "Colon") {
return callback(null,'Done - Xml Process');     }
return gulp.src(config.path.resources)             .pipe(gulp.dest('res')); });
: table[field].equals(context.request.urlTokenized[index - 1])           case "null":
var WebGL_EXTENSIONS = ['webgl', 'webgl2', 'webgl3', 'webgl4', 'webgl5', 'webgl6', 'webgl3', 'webgl4', 'webgl5', 'webgl6'];
import MarkdownSerializer from'slate-mdast-serializer' import shortId from'shortid'
var g = ('undefined' === typeof window? global : window) || {}   _crypto = (
if (e.url === component) {                              flexo.notify(this, "@loaded", { instance: this
vNext = vItems[vItems.length-1];   }
return HoneyProxy.search("filter-"+($el.data("filterclass").split(" ").join(" filter-")),$el.val(),$el.data("negate"),ids);  }
const URL_REGEXP = /(url\s*\(\s*['"]?\s*)([^'"\)]+)(\s*['"]?\s*\))/g; const HTTP_PROTOCOL_REGEXP = /^https?:\/\ function processStyleDeclaration(decl, opts) {
this._dataView.get('contentView').set('calculatedWidth', left);   },
}             for (i = startIndex; i <= endIndex; i++) {                 var item = childNodes[i];
forEach(tmp, function(value) {           if (!value.match(/^max[^-]/)) {             style.push(value);
.then(() => {      done(`Should not have been able to join a room uninvited`);     }).catch(e => {
process.exit(-1);     };
type: 'array',           of: [
throw new Error('Should not execute unrelated afterEach');     });
this.update = function(node, template) {     node = this.get(node);     var oldName = node.name;
const fs = require('fs-extra') const pacote = require('pacote')
var _ = require('underscore'); var APIRequest = require('superagent');
const monthsNumInc = text.toString().match(/:MM_[-,+]?[0-9]{1,2}(?!_)\b/ig);     if (monthsNumInc) {
var type_text, credit_text, au_text;       if (au) {             type_text = "(" + (credit+au) + ")";
return model.getDocs(currentWord)         case 'definition':
location_arrow: 'location-arrow',  long_arrow_down: 'long-arrow-down',
escapeRegExCharacters(value) {     return value.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');   },
Observable.prototype[symbol('observable')] = Observable.prototype.toESObservable;
if (!ws ||!ws.length) {       return undefined;     }
results:[pathToCode],            env,            arc,            start,            stats:[stats]
var workers = self.workers;     if(config.workerCount!== self.workerCount) {
state.assignable = false;                         strings = [state.tokenValue];                         result = new runtime_1.TaggedTemplateExpression(strings, strings, result);
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-08\/mental_feeling-1312586254.swf",  admin_props : false,
return "mat3";                     case Kinds.MATRIX4:                         return "mat4";
console.log(chalk.white(prefix), sep, msg) }
var StringBuilder = traceur.util.StringBuilder;   var PredefinedName = traceur.syntax.PredefinedName;
result.errors.push(`Error: invalid data to convert to search format`);             return null;         }
describe('bundling', () => {   it('should work', () => {
charSet: null,     allowTransparency: null
Swiped.prototype.move = function() {         if ((this.dir > 0 && (this.delta < 0 || this.left === 0)) || (this.dir < 0 && (this.delta > 0 || this.right === 0))) {
wait: function(data, callback){         waitAsync.setTimeout(callback, timeout);     },
rawCase.status = { 'name': rawCase.status };             rawCase.group = { 'number': rawCase.folder_number };
export const getRidOf = str => {   if (/{[^}]+\}/.test(str)) {     return {
var childPositionsValid = true;   for (i = 0; i < this.children.length; ++i) {    if (!this.children[i].positionValid(this.children[i].getCurrentSpace())) {
describe('ObjectName', () => {
if (!(file instanceof File)) {    this.setState({
case 'de':       return currentNumber.split( /(?=(?:\d{3})+(?:\.|$))/g ).join( "." );     }
renderChannels() {     this.setState({ currentRoute: "channels" });
this.websocket.send(`${commandStr}${utc}`)   }
.replace(namedParam, function(match, optional) {                      return optional? match : '([^/?]+)';                    })
var _documents = state.documents.get(targetName);           var _nextState = state;
};     case TYPE.BINANCE_CANDLESTICK:
<AppIcon />;   const codeIcon =
while (++idx < len) {         ch = str[idx];         substr += ch;
if(val.indexOf('rgb') > -1) {    matched = false;
$scope.removeSubscription = function() {             userSubscriptionRef.$remove().then(() => {                 NotificationService.success('Removed', 'User Subscription')
gpii.processReporter.live.get = function (request, processReporter, solutionsRegistryDataSource) {     var runningSolutions = [];
_.each(tagName, function(tag) {       component.tagIsComponent(tag, isComponent);     });
}                 }                 return postData.call(self, batchExt, { tx: self.txArray });
const value = xs => isEmpty(xs)? `[]` : `${head(xs)}:${value(tail(xs))}`;     return `[${typeof this === `[string]`? fromListToString(this) : value(this)}]`;   }
self.annotate = function(req, action, objects) {     var matches = action.match(/^(\w+)\-([\w-]+)$/);     var property;
'(' + baseUrls.join('|') + ')' +     /[:\/]([^/]+\/[^/]+?|[0-9]+)$/.source   );
updateResources(){         let tmpSwagger = this.state.swagger;
}, undefined)   const menu = shop.options.menuFactory.create(menuOptions)   if (!menu)     renderNonTty(shop, menuOptions)
case GeochronoUnit.EPOCH:             dates = Geochrono.epoches; break;         case GeochronoUnit.PERIOD:
options: {                 startkey: [startOfWeek],                 endkey: [endOfWeek, endOfWeek, 'appointment_'+maxValue]
this.handleOrientationChange();     }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-01\/1294353899-4428.swf",  admin_props : false,
for (var propertyId in statements) {     angular.forEach(properties.getRelatedProperties(propertyId.substring(1)), function(relPropScore, relPropId) {
draftPoint_attr,   draftPoint_clone,
self.remove = function (model, e) {             if (confirm(gettext("Are you sure you want to remove this conditional message?"))) {
document.getElementById("router").setAttribute("route", route); }
router.get('/', async (ctx, next) => {     ctx.body = { message: 'Hi there.', ctx: ctx.request.ip } })
var test = document.createElement('div');     var fragment = Polymer.parseAndBindHTML('<input value="{{foo}}" />', test);     test.appendChild(fragment);
this.inherited = true;   }
return (isNaN(n)? (confVal === "true") : (n!== 0));   } else if(typeof confVal === "boolean") {
import { storiesOf } from "@storybook/vue"; import { withKnobs } from "@storybook/addon-knobs"; import notes from "./README.md";
error : function(data){        console.error("Error while Searching.");       }
}; export const traverseEach = (navKey, state, resultFn, path, object, pathIndex, returnFn, mutationMarker) => {
augur.api = new contracts.Tx(process.env.ETHEREUM_NETWORK_ID || constants.DEFAULT_NETWORK_ID); augur.bindContractAPI();
createDat: {     desc: (param, pages, opts = {}) => {       if (opts.title) return `create a new Dat archive, "${opts.title}"`
var indexO = 0; for (var indexB1 = 0x00; indexB1 <= 0x7F; indexB1++) {     var count++;   var hexB1 = decimalToHexString(indexB1);
var status = navigator.onLine? true : false;     if (status) {
return originalValue;     case 'object':
}         case 1:
Ti.Android.currentActivity.startActivity(intent);  };  var createOptionsMenu = function(evt) {   var menu = evt.menu,
var has_newly_added_question = questionnaireViewModel.has_newly_added_question();
if (node.start!== pragmaParent.body [0].start) {     error = {      node: node,
binding,   errorMessage;
})(typeof(window)!== 'undefined'? window : global);
if (external.isEmptyString(path)) {                 node.id = external.id();                 path = "#" + node.id;             }
for (i = 0; i < response.bids.length; i++) {
import { assert } from 'chai'; import * as InkModel from '../../../../src/model/InkModel';
} catch (e) {       parsed = params[param];     }
class CliApp {   constructor () {     const Commands = require('cli-commands')     this.commands = new Commands()
it('finds correct orfs in reverse direction in slightly more complex sequence', function() {   var orfs = getOrfsFromSequence({
|| font.bold)? "bold " : "normal ";         css += font.pixelSize!== undefined            ? font.pixelSize + "px "
Rendition.prototype.moveTo = function(offset){  this.scrollBy(offset.left, offset.top);
if( CHAR.LINE_FEED === src.charCodeAt(c)) c++;       break;     case CHAR.LINE_FEED:     case 0x2028:
this._readStream.on("error", function(err) {     that.emit("error", err);
gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
path = url.parse(req.url).path,     schema = req.client.pair? 'https' : 'http',     dest = schema + ':
validation: {         regexString: '^/',         message: i18n.translate('kbn.advancedSettings.defaultRoute.defaultRouteValidationMessage', {
} else {        err = tools.formattedError('Redirect loop detected after %d requests.', reqId);        err.code = res.statusCode;
const bodyParser = require('body-parser'); const compression = require('compression');
themedLayer.setVisible(!themedLayer.getVisible()); }
var reader = fd_slicer.createFromBuffer(buffer);   options = {autoClose: false};   fromRandomAccessReader(reader, buffer.length, options, callback);
Link.pattern = /(?:\<([^\>]+)\>)((\s*;\s*([a-z\*]+)=(("[^"]+")|('[^']+')|([^\,;]+)))*)(\s*,\s*|$)/gi
if (error) {           if (onError && onError.length) {
await writeData     balances = balances.toNumber()
activityCollection: { name:'sys_activitys' },       fileCollection: { name:'sys_files' }
ctx.shapeNode = XHTMLNS.create(this.tagName);
if (isEntity(viewModel)) {     var resolveInstanceNow = function (promisesToWaitFor) {       if (_.isUndefined(promisesToWaitFor)) {         finishResolution();         return Promise.resolve();
$rootScope.autoLogInInterval=setInterval(tokenRefresh, 1800000);          }  });
compSvg.setAttribute('height',this.data.h);         var g = doc.createElementNS(svgNS,'g');         compSvg.appendChild(g);
this.TTCR = (this.TTCR + delta) & 0xFFFFFFFF;     this.DebugMessage((this.TTMR & 0xFFFFFFF) - (this.TTCR & 0xFFFFFFF)); }
bible.APOCRYPHAL_BIBLE = bible.OT_BOOKS.concat(bible.AP_BOOKS, bible.NT_BOOKS); bible.APOCRYPHAL_BIBLE_USFM = bible.OT_BOOKS_USFM.concat(bible.AP_BOOKS_USFM, bible.NT_BOOKS_USFM);
return this.store.find('criterion').then((criteria) => {       return Ember.RSVP.hash({
if (event.type === "m.room.tombstone" && this._roomUpgradeHandler) {         if (this.opts.RoomUpgradeHandler.consumeEvent) {             return Promise.resolve();
var bottomRow = new UIRow();  var bottom = new UICheckbox( parameters.bottom ).onChange( update );  bottomRow.add( new UIText( 'Bottom' ).setWidth( '90px' ) );
}       if (this.element.tagName == "FORM") {         _ref2 = this.element.querySelectorAll("input, textarea, select, button");
import "babel/polyfill"; import once from "once";
.catch(onError); export const apiFetchSelected = id =>
var self = this;
Transport.prototype.poorConsensus = function (consensus) {  consensus = consensus || modules.peers.getConsensus();  if (consensus === undefined) {   return false;
let dockerfilePath = 'Dockerfile.ui'    let dockerfile = `    FROM nginx
}     resources.push({       type: 'asset',
elemToPut.put(params, headers).then(function(serverElem) {                   var newArray = copy(__this);                   newArray[idx] = serverElem;
return choiceConditional;         case 'Wait':
var waiting = 1;     var finish = function() {       if (--waiting === 0) self.destroy();     };     this._opposite.once('end', finish);
module.exports = goo; } if (typeof window!== 'undefined') {     window.goo = goo;
if (slippage > so.max_slippage_pct) {                     err = new Error('\nslippage protection')                     err.desc ='refusing to sell at'+ fc(price) + ', slippage of'+ pct(slippage / 100)
case "blackberry": validateBBParams(type); break;       default:     }     log.info("Uploading resource : path : " + filepath + ", destination : " + destination + ", config : " + config + ", type : " + type);
import { ShaderCache } from './shader_cache.js'; import { WebGl } from './webgl.js';
return w; }
return [path.guard, path.middle, path.exit] }
ln = readline.line;       pos = readline.cursor;
PublicKeyRing.fromObj = function(data) {   preconditions.checkArgument(data!== 'PublicKeyRing');   var opts = PublicKeyRing.trim(data);
si.key = ki;     }     for (i = 0, oz = order(sz); i < n; ++i) {       sz[oz[i]].index = i;
$scope.tokenActivity = transactions;
include: /source/,                     exclude: /(node_modules|source-todo)/,                     use: { loader: 'ts-loader' }
grunt.registerTask('test', 'Runs test in node', function() {         require('./test/runner').node();     });
const config = require('config'); const app = express();
uniforms: UniformsUtils.merge( [    UniformsLib[ 'common' ],    UniformsLib[ 'aomap' ],    UniformsLib[ 'fog' ]
useCssTransition        ? h(ReactCSSTransitionGroup, {
$(node).on( ev[0], VMhooks.bindEventListener(it, ev[1]));         } else if(vmKey === "show") {           VMhooks.show();         } else if(vmKey === "for") {
_resizeContainers() {    this.$.titleContainer.style.width = 'auto';    const titleContainerWidth = this.$.titleContainer.getBoundingClientRect().width;
return 0.4;    }   }
assert.fail();             } catch (error) {                 console.log(error);             }
return (this.categories)? this.$q.when(this.categories) : this.$http.get(this.URLS.FETCH).then(this.cacheCategories.bind(this));   }
var renderToString = require('preact-render-to-string').render var nanoraf = require('nanoraf')
var temp = {};   while ( (line = message.match(/^.*$/m)[0] ) ) {    message = message.substring( line.length );
if (branchSymbols.length > 0) {     var _branchSymbols = branchSymbols;
goog.require('ol.render.Event'); goog.require('ol.render.canvas');
throw "invalid shape " + type;       }
throw new Meteor.Error(500, err.message);         };         let fut = new Future();         let proto;
.setView(center, 14); var route = {
(function() {   var Mustache;   fs = require('fs');
var document = window.document,          $ = window.jQuery,
return false;         case this.OPERATORS.dateOperatorMonths:
Vue.filter('formatDate', function(value, format) {     if (!format) {
this.el = el;     this.context = doc;     this.commands = {};
if (gap > 0 && first)       for (i = 0; i < first.length; ++i)         if (first[i].to == null)
if (!err) {     now = new Date();     now = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0, 0);     for (var i in files) {
var file = files[i];                    $upload.upload({
$("#github").removeClass('hidden');     }else if (value == 'asn'){         $("#github").addClass('hidden');
html +='   <tr>';         for (let c in row) {           let v = row[c].value;           if(getTableContentFormat(v)!== 'html') {
extension: 'xlsx'       });     case 'application/vnd.google-apps.presentation':
let [ min, mean, max, rps ] = await runner(u)   debug('unfurl')
var inspect = function() { return "" + x + y + z + z1; }
describe('debug', function () {   it('passes a basic sanity check', function () {
})(); ; ; ; ; var M;
if (--count === 0) resolve();
}   }   onMouseUp() {     this.m_mousePressed = false;
callback(0, absPathToFile, parentFolder);         } else if(typeof err.code === 'undefined') {
var target = $tags.get();    var configObj = app.ext.partner_addthis.vars.addthis_config;    var sharingObj = app.ext.partner_addthis.u.buildSharingObj(infoObj);
} else if ($location.$$path.split("/")[2]) {                     list = $location.$$path.split("/")[1];                     id = $location.$$path.split("/")[2];                     $rootScope.listBeingEdited = list;
textTyped += key;     fontSizes = append(fontSizes, newFontSize);   }
r = request.post(   { url: 'https:
case 'getCode':             blockTag = params.blockTag;             if (utils.isHexString(blockTag)) { blockTag = utils.hexStripZeros(blockTag); }             return this.send('eth_getCode', [params.address, blockTag]);
var configXmlPath = path.join(appDirectory, 'config.xml');         fs.readFile(configXmlPath, { encoding: 'utf8' }, function (err, data) {
else             range = new Range(                 rows.first-1, this.session.getLine(rows.first-1).length,
import { h, Component } from 'preact'; import './Home.css'; export default class Home extends Component {
function () {       self.connecting = false;
group.optimize = true;     }     if (group.helpers === false) {       group.helpers = true;
for(var prop in triggers) {       if(!triggers.hasOwnProperty(prop)) continue;
has_notebook_info: function(gistname) {             return this.model_.has_notebook_info(gistname);        },
app.use((err, req, res, next) => {       res.status(500).send('Something went wrong!')     })
try {             if(meta.cfg.type) {
}   return newCursor
onSuccess: (result => {     console.log('onSuccess', result);   }),
constructPackage(strucDiffPerType) {     if(!strucDiffPerType) {       return Promise.resolve()     }
return ast; } function makeAnyPropTypeAST() {
index = fs.readFileSync(indexPath, 'utf8');           index = index.replace('<meta name="rollbar"/>', rollbarSnippet);           fs.writeFileSync(indexPath, index);
Polymer({   _template: `     <style>
});     case REQUEST_PALETTE_SUCCESS: {       const isLoading = update(state.isLoading, { $unset: [action.id] });       return lodashAssign({}, state, {
(async () => {   const defaultPrivacyDoc = 'PRIVACY.md';
}     for (attr in settings) {       if (! settings.hasOwnProperty(attr)) {
this.maximizeControl();         }     },
maxHeight: 0      };     default:
if(err) return defer.reject(err);         d = d.replace(/{{cmd}}/g, path.basename(name));
if(ui.puzzle.flags.irowake){    ac('irowake','disp', '線の色分け','Color coding');
case org.xml3d.debug.WARNING:     logger.warn(msg);     break;    case org.xml3d.debug.ERROR:
listHover() {         if (this.isHover) {             return;
if (isMobile) {         keyboard[0].push({
var length = block_info.position + block_info.length;         var der_certificate = buffer.slice(cursor,cursor+length);         certificate_chain.push(der_certificate);
const path4 = action.payload.path;       let type = action.payload.subtitle;       console.log('check path', path4, 'key', key4);
try {           debuggerStatementFunction();
var pricingMethod;   if (source == "hi/lo") {    pricingMethod = d => ({ high: d.high, low: d.low });
newConnectionMode = MediaBrowser.ConnectionMode.Manual;         }         if (MediaBrowser.ServerInfo.getServerAddress(currentServerInfo, newConnectionMode)) {             return newConnectionMode;
if (process.env.FORCE_SSL) {     app.use(enforceHttps({       trustProtoHeader: true
for (i = 0; i < contractBallot.length; i++) {       if (contractBallot[i].rank) {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_chicken_brick_piece4-1348197925.swf",  admin_props : false,
app.use(function(ctx){         ctx.body = { foo: 'bar' };
}     return queries.join("&");
render() {     let completed = +this.props.completed;     if (completed == NaN || completed < 0) { completed = 0 };     if (completed > 100) {completed = 100};
var numberItems = count;         if (count === 0) {          $('.no-results').show();         }
(function() { var define, requireModule, requirejs; (function() {
{         propKey = qx.renderer.color.Color.RGBCSS_START + propValue.join(qx.constant.Core.COMMA) + qx.renderer.color.Color.RGBCSS_STOP;         propKeyAsStyle = true;
return new Iterator(function () {             while (elements) {                 if (elements === null) {
var v, show = true;                     for (v in s)                         if (s[v].show) {
return getClientUrl() + '/api/data/v' + version + '/'; }
import { remote } from "electron"; import Logo from "./Logo";
if (PORT!= 3000 || process.env.JOYENT) {     Server.set('env', 'production');
var year_or_cat = year_or_cat || '2010';         precision = precision || 2;         var val = parseFloat(this.sf1val(sf1_json,field,year_or_cat))
$.bootstrapGrowl = function(message, options) {     options = $.extend({}, $.bootstrapGrowl.default_options, options);     var $alert = $('<div>');
this.playerProxy_ = {};   for (k in (this.localPlayer_)) {     Object.defineProperty(this.playerProxy_, k, {
if(property in HTMLElement.prototype) {      var arr = [], newNodes = new Set();
return compareStats('size', first, second, firstName, secondName) * descending;     case 4:
if( isReady ){   domReady(handleDomReady);
sizeCls = constants.largeClass;           }           classes.push(sizeCls);
if (that.pullUpToRefresh) {    loading = that.pullUpEl.className.match('loading');    if (loading &&!that.contentReady) {
function isDigit (character) {     return isInRange(character, '0', '9');
window.eon = window.eon || {}; window.eon.c = {
Throttle.setCollection = function(input) {     if (typeof input === "string") {
var dirty = oldValue!=x;           if(dirty){
var db = new Dexie('testdb');
removeFromArray(child, "composes", fn);     }
if ( typeof window.CustomEvent!== "function" ) {  var CustomEvent = function(event, params) {   params = params || {bubbles: false, cancelable: false, detail: undefined};
} else {       throw new State.DefinitionError();
if (this.getVertical()) {    if (Device.browser.firefox) {     this._iFactor = stepSize;    } else if (Device.browser.webkit) {     this._iFactor = stepSize;
if(!!base) return base;     return (hashbang && location.protocol === 'file:')? location.pathname : base;   }
processCss,   append = [],
p["estimateSize"] = p.estimateSize; p["lookup"] = p.lookup;
Paginator.prototype.paginate = function (output, active, pageSize) {   pageSize = pageSize || 7;   var lines = output.split('\n');
} console.log("\n3.) Conersations being submitted to: ", conversations, "\n");       }).then((resp) => {
self.cookies = function(name, value) {     var cookieLength, cookieArray, i, keyValue, index;
},   addTextsForExport: function() {    var margins = App.ChartModel.get( "margins" );
return request;     }
constructor(type, location) {     super();     this.type = type;     this.location = location;
} else {      items = allBlock.removeClass('fw-filter');     }
import React, { PropTypes } from'react'; import HelpSidebarItem from './helpSidebarItem';
Repl.prototype.deliverContent = function(content){   traceur.options.experimental = true;   try {
if (landCoverTotal === 0) {                 var alertView = new modalViews.AlertView({                     model: new modalModels.AlertModel({
throw new Error('Empty Object has been passed');     }     if (!this.input.replyId) {         throw new Error('Attribute replyId is missing');
if (typeof browser === "undefined") {     browser = self.chrome; }
var cheerio = require('cheerio'); registerHelper = function () {
if (!this._application) {    throw new Error('Could not find ZombieBox applicaion');   }
_.forEach(docs, function(doc) {       console.log('Processed doc', doc.id);     });
var SharedKey = require('../azure2/utils/sharedkey');   Buffer = require('buffer').Buffer;
const result = renderComponent();     expect(findByClass(result, 'toggle-switch')).toBeDefined();   });
showProgress: function (message) {             console.log(message.progress);         }
}   }   if (enableInteractions) {     rtn.enableInteractions()
(function () {     var mediaElement = window.document.body.children[0];
Header = require('./../containers/header'),  actions = require("../actions");
var resp = mldb.query("select '" + str + "' as res"); assert.equal(resp[0].columns[0][1], str);
var updated = false;   var key, orphans, some;
core.getClassList().forEach(function (c) {       if (_global[c]) return;       _global.__defineGetter__(c, function () {
this.base(arguments);       var slideBar = new qx.ui.container.SlideBar();       slideBar.set({         width: 300
import EditableTable from './stories/EditableTable.js'
} else {           e.attr(ns, attr.localName, attr.value);         }
return filename.replace(/[/],\./g, '_').trim();
elements.append(e).append($('<br/>'));             }             header = false;
throw "Got message back from worker after timeout"    }
for (let j = i + 1; j <= end; j++) {                 let nested_count = lines[j].match(/^(\*+|\#+)\:? /)[1].length;                 if (nested_count <= this_count) {
for (i = 0; i < rows.length; i++) {             row = rows[i];             if (row.parentKey == node.key) {
fontFamily: 'Verdana',          labelOutlineColor: '#dddddd',
clearTimeout(timeout);     this.setState({
var page = req.params[1];          if (typeHandler.cache[page]) {
login: function(userIdEmail, password, rememberMe) {         var signIn =  {
this.close = function(callback){     if(server){       server.close(callback);
important: function() {     var captures;
function _init() {     _getInterpreterSettings()   } }
get: function (key, cb) {             if(typeof(key)!='string') {               cb('argument "key" should be a string');
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
var token = AuthStorage.get();
originalReadyFunction.call(this);     readyFunction.call(this);
switch (type) {         case 'add': {           const { pathname, data, isMarkdown } = change           commit('ADD_FILE', change)
$('.repeater-template [name]').each(function () {         var $this = $(this);         $this.attr('data-name', $this.attr('name'));
this.toggle.$link.on( 'click', function () {   if ( this.toggle.open ) {
for (var i = 0; i < inputByLine.length; i += 1) {     SpotifySearchFactory.search(inputByLine[i], function(response) {
if(da[i] < 1){ da[i] = 1; }       }       for(i = 1; i < da.length; i += 2){        da[i] += s.width;
if (scrolledPox > previousScrolledPx) direction = 'down';     else if (scrolledPox < previousScrolledPx) direction = 'up';     previousScrolledPx = scrolledPx;
var groupIndex = $.inArray(currentPipeline.groupName, groupNames);                     if (groupIndex > -1) {
import d3 from "d3"; import { shallowEqual, identity, last } from "./utils"; import { shouldShowCrossHairStyle } from "./utils/ChartDataUtil";
$ERROR('#Й'); } var \u041A = 1; if (К!== 1) {   $ERROR('#К');
}     var points =  numeric.identity(dim);     points.unshift(points0);
grunt.log.writeln('File'+ chalk.cyan(file.dest) +'created.');       if (options.includedemo) {         $resultSvg.attr('style', 'width:0;height:0;visibility:hidden;');
_leaveStringState();             } else if (_checkForPlaceholder(ch, code, stringDelimiter)) {                 _leavePlaceholder(ch, code, stringDelimiter);             } else {
for(i=0; i < this.length; i++) {         fn(this[i], arg1, arg2);
var results = {}   for (i = 0; i < NUM_SERVERS; i++) {     worker = cluster.fork()     workers[worker.id] = worker
UI.Mockup.loadImages();         }     }
constructor(props) {   super(props);   this.state = {};
}( window.jQuery )
<p>            Collection {(`${collectionName} ${collectionVersion}`)} has been deleted.           </p>
callback(tokenData.token, tokenData.account);     }
} else {      console.log('Only "Curve" type plots are implemented.');     };
case keyCodes.down:     case keyCodes.up: {       const isArrowUp = event.keyCode === keyCodes.up;       const isArrowDown = event.keyCode === keyCodes.down;
log.error('The method'+ argv.method +'is not available');    callback(new Error('The method'+ argv.method +'is not available'));    return;   }
frontEntity = this.getEntityAt(position);         if (frontEntity!== undefined) {
var validAddress = function validAddress(address) {             return address.length === 42                 && validator.isHexadecimal(address.substr(2))                 && address.substr(0, 2) === '0x'
const files = [];
: this.toValue());   return!this.isMultiple()? value : (value[0] || '');
--self.current_connections;     self.trigger('connectionFreed');     if(coords.length) {
var util = require('util'); var fs = require('fs');
const docFromServer = await transport(mutationString, variables);
} else {       idx = e - redShift       sqPop(RED_SWEEP_QUEUE, RED_SWEEP_INDEX, redActive--, idx)     }
if (v) {                 c = current.toLowerCase().replace(/-([a-z])/g, function (a, b) {                     return b.toUpperCase();
case 'toolkit' :                 result = this.processPackage();                 break;             case 'code' :
return L.CRS.EPSG4326;       default:
node: node   }, props)); }
Mergeatron.prototype = new events.EventEmitter(); config.plugin_dirs.forEach(function(dir) {
}         node = types.expressionStatement(           types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value)         );
return this.filterBy (orders,'status', 'closed');     }
var PocketToken = artifacts.require('./PocketToken.sol') var PocketRegistry = artifacts.require('./PocketRegistry.sol')
import Frame from '../../components/Frame'
} export async function create(parentValue, { name, email, mobile, mobileOrNumber }) {   if(auth.user && auth.user.id) {
var msie = ua.indexOf("Trident") + window.navigator.userAgent.indexOf("Edge")!= -2;                     if (msie) {
return path.replace(/\\/g,'/').replace(/\/[^\/]*$/, ''); }
var bbox = layer.get("BoundingBox");                     if (bbox.length) {                         extent = ol.proj.transformExtent(bbox, 'EPSG:4326', map.getView().getProjection());
break;         case 'SET_TRACK_OBJ': {             const tgt2 = scene.actors[args[0].value];             if (tgt2) {
});     doc.body.appendChild(dom_helper.elt("br"));    });
if (key === 0) {     key = 0;
function vertex ( scope, x, y, z ) {   scope.vertices.push( new Vertex( new Vector3( x, y, z ) ) );  };
else {      newFile = createFile(section[4], concat(section[5], cssReg, EOL + EOL), true);            if (options.rev == true)      {
var self = this;       var hook = function(rules) {         rules.forEach(function (rule) {
if (index === cache.indexOf(value)!== -1) {
this.context = new AudioContext();     this.context.onstatechange = true;     this.gainNode = this.context.createGain();
platforms_template += "<li><a href='/"+ platforms[i] +"'>"+ platforms[i] +"</a></li>\n";         }
? `nab/t/chat:whatever+comments:all+all/new@${tabulator}.`     : `nab/t/chat:whatever/new@${tabulator}.` }));
function Hello_World() {
queue[i].removeNode();         }for (i = Things.length - 1; i >= 0; i--) {          Things[i]         };  },
sum += array[i].trueRange;  }  return sum;
(function (DataBinding) {
handlers.focus = (view) => {   if (!view.focused) {
const nextPath = nextState.location.pathname     if (!isLoggedIn) {       replaceState({nextPathname: nextPath}, '/login')
const EthereumForkArbiter = artifacts.require("EthereumForkArbiter");
return "pending";  }
}     } while ((oCurrentControl = oCurrentControl.getParent())!== undefined);
hintString = [];     remainder = 0;     while (number > 0) {       remainder = number % base;
}     return promisify(fs.writeFile)(this.path, yaml.safeDump(obj), 'utf8')
og.control.MousePosition = function (options) {
if(isAdmin(userId) || (docs[0]._id && docs[0]._id==userId) || fields=='notifications'){           return true;
return;           }
if (mediaRecorder) {                 mediaRecorder.stop();
traverse(ast, {pre: setupReferences}); traverse(ast, {pre: detectLoopClosuresPre, post: detectLoopClosuresPost});
_fixPanel: function() {   if ( this.options.positionFixed ) {    this.element.addClass( this.options.classes.panelFixed );
if (description && description.length > config.descriptionLength) {             description = description.slice(0, config.descriptionLength) + '…';           }
setGeometry(geometry) { }
export function getTimeGridSlotEls(timeDuration) {   timeDuration = moment.duration(timeDuration)   var date = $.fullCalendar.moment.utc('2016-01-01').time(timeDuration)
});   it('with properties', done => {     const vm = new Vue({
dispatch({         type: data.id          ? 'accountUser/update'
import { Switch, Route, withRouter } from'react-router-dom' import { TransitionGroup } from'react-transition-group'
this.tree = undefined;   $http.get('data/tree.json').then(function(resp) {     this.tree = resp.data;
projector.append(root).then(() => { });
, events = require('../util/events')
test('renders RouterContainer', async () => {   const callbacks = mockCallbacks();
} else {         if(message.message === 'MAX_TIME') {             const {feed} = message;
Ext.example.msg('Button Click', 'You clicked the {0} button and entered the text "{1}".', btn, text);     } });
var code = reqStatus.cert? 200 : 202;       castHttp.returnJson(res, code, assignStatus(reqStatus));
return r;
if(thisModel.refreshWidget) {
include_user_filter(settings); });
function createNestedViews( node, parent, nextNode, depth, data, prevNode, index, context ) {  var tmplName, parentElViews, get, from, view, existing, parentNode,   currentView = parent,
function checkEcc(type) {   if (!subtle === undefined ||!subtle.generateKey ||!subtle.sign ||!subtle.verify ||!subtle.exportKey) {     if (subtle!== undefined) {       debug('subtle crypto not supported');
var _class = "";     for (var field in document) {         var value = document[field];         var type = this.type_of(value);
var start_time = Date.now();                 set_and_verify_json_sparse(this.test, suffix, [{
module.exports = {     production: function() {         var body = {
const llex     = require('./llex.js'); const lobject  = require('./lobject.js');
compare: function (actual, selector) {             return { pass: $(actual).find(selector).length }
test: function test() {             this.dSetting[0].id = Math.random();
if (str === '\u0003') {         return endProgram(0);       }
}, function() {             process.exitCode = 0;         });
var mod = require("../")
moduleDefaults.forEach( function (module) {             if (Plotly[module]) Plotly[module].supplyDefaults(layoutIn, layoutOut, fullData);             else console.warn('defaults from'+ module +'not applied');         });
list.forEach(a => {       if(a.get('type')) {         return;
{     cardViewModel: function() {       return this.cardViewModel;     },     uploaderEvents: function() {
}   }   var execPlugin = require(options.value);
QuestionnaireStore.emitChange();   return _errors.length > 0;
let res = yield rp(reqData); });
this.track = function (entity) {             _.each(
React.useEffect(() => {     async () => {       try {
return;   }
case '{':             node.add(this.objltr());           break;           default:
} PDF.prototype.write = function(line) {   line = Array.prototype.slice.call(arguments).map(function(arg) {     return typeof arg === 'number'? toFixed(arg, this.doc.style.precision) : arg
function onImageLoad() {   this.classList.add('img-loaded');
};                         $.sounds.fx.bip.play();
function getStyleByLayout(styles) {   const testRes = isInPreset(styles,'showArrows');
this.$canopy.find('span').html(this.getThreshold());       if (! this.$canopy.is('visible')) {this.$canopy.fadeIn()}     },
var _ = require('underscore'); var BBPromise = require('bluebird'); var ItemSerializer = require('../item/itemSerializer');
.transition()      .duration(effects.duration)      .delay(idx * effects.duration)      .attr('height', function (d,i) { return -(axes.ver.scale(-csum[i]) - axes.ver.scale(-csum[i]-d.value)); })
return null       }     }
console.log(likers.length);     });     console.log("\nProcess done!\n".green);
"meta": { "shares": ["getResp"] },   "global": function* (ctx) {     ctx.scope.set("getResp", yield ctx.KRLClosure(ctx, function* (ctx) {       return ctx.modules.get(ctx, "ent", "get_resp");
var previousRange;     var selectionChangeHandler = function() {       var element        = document.activeElement;
} catch (err) {     fs.unlinkSync(tmpfile)     throw err
var movesWhitespace = document && (function() {   var testEl = document.createElement('div');
function CatalogLoad() {     return (
base, digits = [];     if (/[-+]/.test(value[0])) {       value = value.slice(1);
var HmacSha256Sign = require('./hmacsha256sign'),   HeaderConstants = require('./constants').HeaderConstants;
package_json.binary.package_name.indexOf('{node_napi_label}') === -1 &&   package_json.binary.package_name.indexOf('{node_abi_napi}{napi_build_version}') === -1; }
default:           result = undefined;       }
import Chat from '../chat';
if (fn) {             fn.call(null);
org.email=  [body.email];     }     if(body.postalCode){
self.express.put(self.expressPath, self.handleRequest('DELETE')); } module.exports.AutoUri = AutoUri;
function assembleCssText() {         var cssText = [];
if (!localesDir) {   throw new Error('*** Locales folder not found for'+ initialDir +'***');  }  if (!providers[localesDir]) {
class FindBar extends React.Component {   constructor() {     super();     this.compiledCommands = {};
'exportedVariables': {},    'styleTuples': [['color', 'var(--primary)']   }, {
if (data) {           name || (name = 'Safari');
angular.module('code.projects', ['ui.router'])  .controller('projectsController', function ($scope, $state, $http, Projects) {
model : DataList,         template: Handlebars.compile(data_listTemplate),
import { hasScope } from "webiny-api-security"; import gql from "graphql-tag";
if (process.env.NODE_ENV === 'test')     if (true)
var create_websocket_connection = function() {         if (!("WebSocket" in window)) {             alert("Boo Hoo WebSocket is not available on this browser");
var target = isArray? [] : {}         for (var i = 0, el; i < array.length; i++) {             el = array[i++];             if (isArray) {
return function(input) {    return input.html();     }
this[i].innerHTML = "";       }       return this;
var count = 1;         array.forEach(instructions, function(instruction) {             output.push("<tr>");
if (!block) throw new Error('Block not found')     if (req.query.transactions) {       const transactions = await app.sdb.findAll('Transaction', {
} break;
} catch (e) {     throw new Error('error in storage: '+ e.toString());   };
let data,         dataIndex,
});   }   let rows = tbodies.selectAll('tr').data(d => d.values );
})  .test('shallow equality test on object', (t) => {     const nested = {foo: 'bar'};
})(M || (M = {}));     ;     })
function parseRevisionInfo(rev) {   if (!/^\d+\-./.test(rev)) {     return createError(INVALID_REV);
}         if (this.options['z-index']) tp['z-index'] = this.options['z-index']
copyArray( axis, resAxis, 0, 3, 3 );         for( i = 2; i < n - 2; ++i ){             v1.fromArray( axis, 3 * ( i - 2 ) );
});       default:
return newObj;     }     function merge (target, source) {
flow = XIBLE.getFlowById(message.flowId);               if (flow) {
function lint(input, options, webpack, callback) {   var filename = webpack.resource.split('/').pop();   var format = /[^.]*$/.exec(filename)[0];
} catch (err) {     if (!ensurePkg) { ensurePkg = require('./ensure-package.js') }     opts.log.level = opts.loglevel
var constRelId = getConstraintRelId(constraintsNode,name);
function publish () {}
it('async - should get a frontend view with name "test_view_async"',     browserTest((done, window) => {
var hasPressed = this.hasState(qx.ui.form.Button.STATE_PRESSED);
console.log("[VoteStore.js:18] ----- onAddWitness ----->");     }     onAddBudgetItem() {         console.log("[VoteStore.js:22] ----- onAddBudgetItem ----->");
}  var postdata = "username="+$.trim($("#addUsername").val())+"&name="+$.trim($("#addName").val())+"&phone="+ $("#addPhone").val())+"&pwd="+ $("#addPwd").val());  ajax(
doJumpPage () {     this.$timeout(() => requestAnimationFrame(() => this.pageSliderPopover.hide()), 100)     if (this.inputPage === this.currentPage - 1) {
tr.innerHTML = '<td>' + room.roomName + '</td>' +             '<td><button id="' + room.roomToken + '">Join Room</button></td>';         roomsList.insertBefore(tr, roomsList.firstChild);
self.ElementCellSet.forEach(function (cell) {                             cell.setIndexIncome(false);
callback:function (ele,destroy) {              setTimeout(function() {
return this.retstmt();       case 'with':
zoom: 10,       markers: [],       center: {         latitude: 40.72052634,
if (process.env.NODE_ENV === 'test') {
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/upgrade_card_reshuffle-1334013016.swf",  admin_props : false,
if ( isClient ) {    Object.defineProperties( document.createElement( 'div' ), { test: { value: 0 } });   }
return OP_toString.call(obj) === '[object Function]'; }
const { breadCrumbStyling, breadCrumbsWrapper } = classes;   return (
({  0:  (function(module, exports) {
set : function(set){    set = parseInt(set) || 1000;    if(set!==priority){
if (plate.totalTime > 720 * 60 * 1000) {              plate.minimumTS = 10000;
$scope.dateFilters = [     {
el.getFirst().style.display = 'none';     if(e.event.dataTransfer) $A(e.event.dataTransfer.files).each(function (f) { uploadManager.upload(options).load(f); })    }
const cache = get('types.defs', context.cache)   let typeDef = getProp(root, cache)   if (typeDef) {
attributes = Ember.merge(attributes, attrs);    Router.reopen({
console.log('Error:'+ err);       process.exitCode = 1;     }
ctx.putImageData(imgData, params.x, params.y);    }   }
createJavascriptStyleSheet(file, directory);       }     });     updateDocs(files);
$.each(this.bubbles, (index, elem) => {
bottom: Number(config.windowBottom),
log(chalk.red(`Could not locate.showroom folder in ${parentDir}`));     throw new Error(`Could not locate.showroom folder in ${parentDir}`);   }
}).filter(each => isDefined(each)); } export function getCurrentCharts(chartConfig, mouseXY) {
g = g_axis.append('g').attr('transform', 'translate(' + (width - margin) + ',0)');       var y_axis = d3.svg.axis()
light.position.set(3.8, 2, 0.5);             const helper = new RectAreaLightHelper(light, 0x8e8e25);             const expected = new Object3D().copy(helper);             expected.updateMatrixWorld();
designedMinValue: 0,             designedMaxValue: 100,             designedMinStep: 1,
}              var pushToBinding = this.getPath().append(this.target.binding, gaffa.relativePath + gaffa.pathSeparator + toObject.length);              gaffa.model.set(pushToBinding, fromObj, this);                      }
c.d = -10;           a().b          =          c.d          ++; })();
var matches;     while ((matches = regClassInterface.exec(content))) {         var result = parsePair(content, matches.index + matches[0].length, '{', '}', 1);
tags = sys_tags.concat(tags);   }  }else{
function use_localserver() {  var localserver = localStorage.localserver;  if (localserver === "true") { return true; } else { return false; }
return this   })
for(let k = 0; k < coords.length; k++) {             const nextIndex = k + 1 >= coords.length? 0 : k + 1;
var path = require('path'); var version = require('./package.json').version;
return data.newValue!= data.oldValue; } function createInternalData(sourceMessage, message, data) {
return new mongo.BSONPure.ObjectID(id)     } catch(err) {         console.log(err)     }
import Breadcrumb from '../../components/layout/breadcrumb'; import { Tabs } from '../../components/layout/tabs'; class Header extends React.Component {
socketConnection.sendChat = function (chatParams) {           ws.send(chatParams);         };
return {...state, likedTracks: action.newfavs };
import {     View, Text, StatusBar, InteractionManager, TouchableOpacity } from'react-native';
for(var iterator = 0; iterator < ins.length; iterator++){       ins[ iterator ].setPosition(cardinalPortPosition('E', 0.5));     }
shadowOffset:{  width: 0,  height: -5,  },     paddingBottom: Platform.OS == 'ios'? 3 : 0
break       case 'NEWLINE': {         let target = startBlock.type ==='span'? parent : startBlock         stateFragments.forEach(block => {
.then(response => response.json())      .then(() => dispatch(stopLoading()));
logger.debug(processID + "@inputs> Opening stream with apikey: " + streams['streams'][x]['apikey'] + " on port: " + streams['streams'][x]['apikey']);    messenger.streams[streams['streams'][x]['apikey']] = streams['streams'][x];
}     this._active = true   }
return;   }   this._appearances = null;
}         } catch (err) {}       }
} else {     proto = Object.getPrototypeOf(value)   }
inputEvent = module.get.changeEvent(type)               $(this)
it('should correctly resolve a property route with foreach ruleset', function () {         var rulesetBuilder = new RulesetBuilder();         var elementRuleset = rulesetBuilder.create()
overflowX:'scroll',           }}
SoundHandler.prototype._prepare = function (config) {   _.defaults(config, {    loop: false,
Color.fromHsl = function(hsl) {     if (hsl.indexOf('hsl(')!== 0) return null;     var result = Color.HSL_RE.exec(hsl);
goog.require('cwc.utils.Events'); goog.require('cwc.protocol.bluetooth.lowEnergy.supportedDevices'); goog.require('goog.Timer');
self.set('ready', true);  }
_Directory.prototype.getDir = function (cb) {     $.post('/list-d', {
} else {       this._finalize(null, COMPLETION_CANCEL);
setStrict: function (args) {         args.splice(args.indexOf('--strict'), 1);
var spawnValidator = require('gardr-validator'); var config = require('../config.js');
if (options.browsers) {         loadAndInstantiateAutoprefixer(options.browsers, 'The \'browsers\' option requires the autoprefixer module to be available. Please install it in the containing project.');
txt +='-->'    }   }
var round;   options = {};   options.normalizeWhitespace = options.normalizeWhitespace || false;
res.header('Access-Control-Allow-Origin', req.headers.origin);   res.header('Access-Control-Allow-Headers', 'X-Requested-With');
child = child.parentElement;                 }                 return false;
parse: function (response) {             return response;
replays = req.rocky.proxy.replays   if (replays) {
return null;     } else if (duration) {       return duration;
.replace(path.resolve(this.options.outDir),'')                    .replace(/^[/\\]/,'');   var levels = relativeOut === ''? 0 : relativeOut.split(path.sep).length;   var relDir = repeating('../', levels);
try {   for(var key in data) {    this._cache[key] = data[key];
return new Service(options); } module.exports = init;
return nonce + cntstr;   } }
var properties = require('./lib/properties.js') var remoteDB = require('./lib/remoteDB.js')
customLaunchers: batch,     reporters: process.env.CI      ? ['dots','saucelabs']
new Chart(ctx).Pie(data, {                         responsive: true                     });
c = ol_proj_transform (f.geometry.coordinates, 'EPSG:4326', this.getMap().getView().getProjection());  } catch(e) {  }  this.dispatchEvent({ type:"select", search:f, coordinate: c });
} else if (options) {             $.data(grid[0],'mvc-grid').set($.data(grid[0],'mvc-grid'), options);         }
var i, child;         var children = entity.getChildren();
console.log("All tests done");         lockerd.shutdown();         process.exit(code);     });
".html":[11,0,9], ".html":[11,0,10], ".html":[11,0,2,5],
describe('vertexVisibility()', () => {     it('sets vertexVisibility and returns self', () => {       const renderer = new Renderer(),
today: function () {      window["DP_jQuery_" + dpuuid].datepicker._gotoToday(id);     },     selectDay: function () {
allowed_attributes.each(function(attribute) {             if (child.readAttribute(attribute))               new_child.writeAttribute(attribute, value);
var LOG_SAGAS_STYLE = "font-weight: bold"; function time() {
dispatch(errorActions.rejectPromiseWithLocalError(message))     })   })
}       return stationB.biggestChunk - stationA.biggestChunk;     } else {
import _ from 'lodash'; import uiModules from 'ui/modules';
return function equalToSetMatcher(value )  {     let isEqual;
this.setOver(value);     };     Handle.prototype.draw = function (ctx) {
} } Set.prototype.add = function (member) {
log.remove(log.transports.Console);     log.add(log.transports.Console, {         colorize: true     });
var HeroesInfoParameters = React.createClass({   render: function() {
return RangeKey; }
message: this.errMessages.email,       regexp: /^[\w\-]{1,}([\w\-+.]{1,1}[\w\-]{1,}){0,}[@][\w\-]{1,}([.]([\w\-]{1,})){1,}([.]([\w\-]{1,})){1,}$/     }, options);
google.maps.event.addListener(marker, 'click', function () {                 if (openedInfoWindow!= null) openedInfoWindow.close();
} else {               scaledX = x / fontSizeScale;               scaledY = 0;             }
case '3DES':                 result = this.encryptTDES(key, data, true);                 break;             case 'AES':
return 'id';   }
return x;     }
document.addEventListener('DOMContentLoaded', () => {   const queryInfo = {
if (dt.indexOf("chronological") > -1 || (schema.unpack && data[0].length > 2)) {       data[0].forEach(function(cell,i){         if (i > 0 && labelSet[i-1]) {
Task.query = function(params){   return new Task(params); };
}     OH(KxA(solve[o](i0v)));
},             'api': {
{      id: instance.get(ID),      label: instance.get(LABEL),      name: instance.get(NAME),      value: instance.get(PREDEFINED_VALUE)),
this.templates[file] = swig.compileFile(file, {autoescape:!1});             else if (_fs.isdir(file)) {                 this.templates[file] = swig.compileFile(file, {autoescape:!1});             }
import { createActionCreators } from 'utils/redux';
set: function( values ) {             FormData.visitInputs( this.options.inputs, function( input, name ) {                 input.value = values[ name ]!== undefined? values[ name ] : input.value;
for (i in data) {     if (Array.isArray(data[i])) {      item[i] = data[i];
var createElement = function(html) {     let div = DOM.createElement('div');
deps: ['app.module']
var byteLengthForComponentType = require('./byteLengthForComponentType'); var numberOfComponentsForType = require('./numberOfComponentsForType');
var yMax = -1024;     for (var j = 0, record; j < records.length; ++j) {       if (record.type) {
import Divider from'material-ui/lib/divider';
if (key === 'file' || key === 'attachment' || key === 'attachment_content_type') return 'INVALID_TYPE'   if (key === 'face_detection') {
if (true === success) {             this.config.$modal.on('shown.bs.modal', function (e) {
,"$1");if(i[l]||g.search("<"+e+">")>-1)continue;f=c[l];h=-1;if(!/^<\
else {                             $item = this.getItemToTheRight(anchor);                         }                     }
attributes.forEach(function(attr) {             if (attr.match(/Attr ID="(.*)" Type=".*" Value="(.*)"/)) {               state[matches[1]] = matches[2];
};   this._request(getContainerOpts, function (err, body) {
params = paramsList(params);   processRules(rule, params);   rule.removeSelf();
case SET_STATE:     var global = JSON.parse(action.payload).global;
test: /\.js$/,         include: /src\js/,         use: {
case '3DES':                     result = this.encryptTDES(key, data, true);                     break;                 case 'AES':
},   setClipboardOptions: {     options: {
if(seen) {                 var id = object.identity();                 var obj = seen[id];                 if(obj) {                     return {
return drone;   }
include : [demobrowser.MDemoApplication],   members :
{         url = sourceURLMatch[2];
module.exports = () => React.createClass({     handleChange() {         this.props.model.setValue(this.props.fieldDescription.field, event.target.value);     },
} } DasTier.prototype.initSources = function() {
return async hook => {     let patchMenu = patchMenu.bind(hook.app)     if(!hook.result) { return hook }
if(args.toString() === '[object BluetoothServiceHandler]') {     this._obj = args;    }
this._activeTextCache = {};  }
[new RegExp(/<!\[if (!supportLists\]>(((?!<!).)*)<!\[endif]\>/gi), '$1']         ];
var GLCubeMap = function (gl) {     SamplerConfig.call(this);     this.setDefaults();
if(parameters){           _.each(parameters, function(value, parameter){
return E48;         case 96 :
};         rcloud.get_completions = function(text, pos) {             return rcloud_ocaps.get_completionsAsync(text, pos)
rail.on('plugin-response', function(call, options, response) {     console.log('redirect::plugin-response', response);   });
var direction = this.targetRubik.getDirection(sub, this.normalize);           var elements = this.targetRubik.getBoxs(this.intersect, direction);
import {utils} from './utils'; import {config} from './config';
throw Error("A password field is strictly required!");         if (this._fields.password.type!== "password")             throw Error("The type of password field should be password!");
var classRe = /\A\.((?:[\w\u00c0-\uFFFF-]|\\.)+)\Z/g;   SelectorSet.prototype.indexes.push({
case 'cmd_showUnsavedChanges':         var view = ko.views.manager.currentView;         var changes = view.koDoc.getUnsavedChanges();
instance._syncHitArea: function(children) {     var instance = this;
responseTemplateName = "paragraphResponsePreview"             }             if (this.selectedPromptType == "multipleChoice") {                 responseTemplateName = "multipleChoiceResponsePreview"
var page = new boomPage($el.data('page-id'));
module.exports = function(query, skip, maxSkip) {    skip =  _.min([config.get('maxSkip'), maxSkip]);    if(skip < 0) {
this.impl.addEventListener("suspend", () => {       this.error |= NetworkError;     });
} function socketPath(channelName, readerUuid) {
app.get('/', function(request, response) {   this.filed(path.join(htmldir, 'index.html')).pipe(resp) });
if (address!= null && address.length > 0 && address.startsWith('t'),('R')) {
],         content = [];     function cleanCollection(col, callback){
(function() {   var accessToken, addGroupItemToStroage, groupItems, removeGroupItemFromStorage;
import { withAsyncComponents } from "react-async-component" import AppContainer from "../app/AppContainer"
function addEntriesToTestSoup(entries,cb) {     sfSmartstore.upsertSoupEntries(SAMPLE_SOUP_NAME,entries,                                            function(items) {
chrome.alarms.onAlarm.addListener(function(alarm){     if(alarm.name == "scheduleRequest"){       courseService.updateData();
ngModel.$parsers.push(function(inputValue) {
targetCtx = targetCtx || ctx;   if (targetX == null) { targetX = x; }   if (targetY == null) { targetY = y; }   try {
} else {             selector = '[data-' + this.filters[j] + '="' + filter + '"]';           }
case 0x0: case 0x1:             case 0x2: case 0x3: {                 let bank = 0;                 if (this._mode == 1) bank = this._hbank << 5;
const swiper = vnode.context[instanceName]       if (swiper) {         swiper.destroy && swiper.destroy()
this.specialCbs[specialCb] = null;     }
async openBrowser (browserId, pageUrl, configString, allowMultipleWindows) {         const parsedPageUrl = parseUrl(pageUrl);
import {MOD_SYM} from '../lib/constants';
return -1;   bLength = [data[9], data[8], data[7], data[6], data[5], data[4], data[3], data[2]];   return converBytesToInt64(bLength, 0, isLE);  }
fsDestinationPath = fsDestination;         bm_sourceHelper.reset();         bm_textShapeHelper.reset();         bm_layerElement.reset();
sc.app.password = null;    sc.app.prefs = new scPrefs(default_preferences);   }
action = item;       var index = this.actions.indexOf(action);       if (index!== -1) {
case FV_BOOK_ENTRY_CREATE_ERROR:         return Object.assign({}, state, { isFetching: false, isError: true, error: action.error, pathOrId: action.pathOrId });       break;
localStorage.removeItem('focusMode');         localStorage.removeItem('mode');         _.each(_.keys(localStorage), function(key) {             if(key.match(/file\.\S+\.editorSelectRange/)) {                 localStorage.removeItem(key);
mappings.retrieveAutocompleteInfoFromServer(); }
var fetchEvents = function (accessToken, callback) {     var timestamp = moment().unix();     var url = "https:     url += "&access_token=" + accessToken;
export function changeNightMode(value, flag=true) {     if(flag){         this.setNightMode(value);     }
var zs = [];     for (i = 0, len = endpoints.z.length; i < len; i++) {         var point = endpoints.z[i];
function _interopRequireDefault(obj) { return obj && obj.__esModule? obj : { default: obj }; } var float = /^(?:[-+])?(?:[0-9]+)?(?:\.[0-9]*)?(?:[eE][+\-]?(?:[0-9]+))?$/; function isFloat(str, options) {
var jm = SCHEDULER.jm;
const accessor = gltf.accessors[accessorKey];                 return new ElementBufferView({
catch(e){     pathToPartial = `${defaultPartials}/${file}.html`   }   if (fileUtils.isFile(pathToPartial)) {
}       result.push(item);
first = sequence[0] || sequence;       if(first.charAt && first.charAt(0) == "@"){
function init ( options ) {         options = kity.Utils.extend( {}, RES_CONF, options );         if (!/^(https?:)?\/\
if (!(parent instanceof LocusZoom.Panel)){         throw "Unable to create legend, parent must be a locuszoom panel";
return this.i18n.Unknown;                 case 1:
$('#TransactionTable').empty();   for(i = 0; i < ledger.transactions.length; i++) {     var tx = ledger.transactions[i],
import TransactionShow from './tx/show';
if (!IsThere(path)) {         return callback(new Error("The provided path doesn't exist."));
;   var _storageCookie = window.localStorage? (document.scriptCookie ||'scripts') : null;   var _scripts = {};
if (nestedContent[option.value]) {           return (
var redis = require("redis");       var client = redis.createClient(data.redis.port, data.redis.server);         self.attachList(0,true);
if( isArray ) {     options.subType = type.length? type : null     type = 'Array'
key_inputcircle : function(ca){   var cell = tc.getTCC();
return function ($scope, $element) {   if ($element[0].localName!== 'form') {
if(data[currentDropCell['row']-1]['type']=='folder'){         dropDestination = data[currentDropCell['row']-1]['path'];     }
writable: false,             value: function () {                 throw new Error("Not implemented.");             },
case Tag.AssignmentExpression:             if (i.value.eff) {
this.regex.grantType = new RegExp('^(' + this.grants.join('|') + ')$', 'i'); }
}; if (prod) {   delete module.exports.compilers.babel.sourcesMap;
import "ng-redux";  import needMapModule from "./need-map.js";
});                 var result = [];                 var unsigned_headers = [],
if( gid!= self.currentGearId ){      window.location.hash = KC3StrategyTabs.pageParams[0]+"-"+gid;
var pageActivated = localStorage.getItem('tvViewer_active') == 'true'; if (pageActivated) {
if (node && node.lookupPrefix) {                         prefix = node.lookupPrefix(namespaceURI);                         if (prefix) {
onClose() {     this.onCancel()
_lookupRoute : function(hash) {       if (!this._cache[hash]) {
import jsdom from "jsdom-global"; import { validateNode } from "../libs/validators";
if(typeof elm.defaultView!== 'undefined') { elm = elm.defaultView; }
var editor = ace.edit('aceEditor');
if (yAxis) {       var ans = api.getSplits(max);       max = ans.max;
return this.emptstmt();       case 'if':
this.start(); } sysu.inherits(Feedback, events.EventEmitter);
for (;;) {    exitLoop++;
import { setActiveCommunity } from './actions/communities'; import LoadingIndicator from './shared/loading/global';
if(steps & Warp.TO_LINE)   {     return;   }
constructor(eventType, userCallback = null) {         super();         this.eventType = eventType;
} else {                 done(err);             }
it( 'all client have received all events', function( done ){         expect( callbackA.calls.length ).toBe( 3 );
return this.remoteAsyncCall_.bind(this, targetName, property);     }     if (CastUtils.PlayerGetterMethods.indexOf(property) >= 0) {       return this.propertyGetter_.bind(this, targetName, property);
} else if(this.props.mxEvent) {             var name = props.mxEvent.getContent().body;         } else {
else if (!policy) {   return;  }
this._pane = null;   }
ReactDOM.render(     (process.env.NODE_ENV === 'test')?       (function () {
if ((is_ie &&!is_ie4) || is_webkit || is_ff)  addLoadEvent(smf_codeBoxFix);
});  it(`log`, function() {   assert.strictEqual(1, $.log(1, 2));
} catch (e) {         console.log(chalk.magentaBright(' ⚠ '), chalk.red(e.message));         process.exit(1);     }
async function CounterAct(dispatcher) {   for await (const message of dispatcher) {
it('Expect request method to be get', function () {                 http.getWithRetry('', function () { }, 2);                 expect(requests[0].method).to.be.equal('GET');
error(`Error encountered while traversing directory: ${relative(run.dir)}`);       throw new Error(`Error encountered while traversing directory: ${relative(run.dir)}`);     }
result.status.should.equal(401)     text = await result.text()     text.should.equal(nullIdText)
self.model.type = self.selectedResource.id;             self.service.save(self.model).then(successCallback, errorCallback);
import 'jest-styled-components' import { InputField } from '..'
has_info : this.has_info,  asset_swf : "\/c2.glitch.bz\/items\/2011-10\/proto_rock-1319818709.swf",  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/proto_rock-1319818709.swf",  admin_props : true,
`); } else if (argv.version || argv.v || argv._.indexOf('version') > -1) {
CC.inputUp= data.distance / 50; }); joystick.on('end', function () {  CC.inputLeft=0;
initialize: function () {     },
} ComputedProperty.prototype = new Descriptor();
return model.bind('change', function(model_) {             return view.updateView(model_, map);           });
case "count":             if (_.isObject(aggregate.val)) {
resize: render,   } }
var start = Date.now();
elm.isolateScope().enqueueFileAddition(mockObject);         expect(elm.isolateScope().startRendering).toHaveBeenCalled();     });
me = this,    next, length;
this.destroyed = function(data, opt, cb) {                                  if (!data) return;
var s = Array(sizes[ix] - c.length + 1).join(' ');
success: function (resp) {                         me.progressSpinner.stop();
return false;   }
} ); export { Quaternion }
import React from'react'; import { Grid } from '@material-ui/core';
for (i = 0; i < observers.length; i++) {         var observer = observers[i];
}, params);   var resultsUri = Utils.applyUriFilters(baseUri, searchParams);   return SearchModelArray.newArrayLoadedFromUri(resultsUri, resultsType);
ko.punches.enableAll();
_this.openDBs[_this.dbname] = DB_STATE_OPEN;                 }                 if (success) {                     success(_this);
reactprops.headersOnly = {};     var DuPivot =  (function (_super) {
return client.connect(mock_uri)        .then(() => {           return client.createReceiver(queue, function() {});         })
});         } else if (name == "Apply") {           return;         } else {
}      break;    case editor.config.getKey( 'controls/translate' ):      editor.signals.transformModeChanged.dispatch( 'translate' );
assert.strictEqual('xxx','xxx   '.trim());  });  it(`toLow`, function() {   assert.strictEqual('abc1', 'ABC1'.toLow());
case "ArrowFunctionExpression":         parts = [];         if (n.async)
return E96;         case 192 :
get: function() {                 throw new Error('Not implemented "_secret".');             }
} catch (err) {           this.logger_.logFailure(loggerTitle, failureMessageStart + '.', err);
return contact; }
for (b = 0; b < baseIds.length; b++) {             baseId = baseIds[b];             baseIdMappings[baseId.toString()].indexOf(Number(relatedId)).should.not.equal(-1);           }
run: async(message, bot, send) => {         let conf = message.guild.get("Filter", "filters");         if (Object.keys(filters).length > MAXFILTERS) return message.fail("Max filter limit reached:", MAXFILTERS);         let f = message.args[0];
stats.hasErrors() && stats.toJson().errors.forEach(e => logger.error(e));   }
}     break;    case 27:
} async function decline(context) {} async function pendingMemberships(context, params) {
$(function() {  $(document).on('click', '#assets-container.asset-add-btn', function(event) {
module.exports = class SchwiftyModel extends Objection.Model {
}   if ((raw = this.checkRaw(value))) return raw;   if (_.isNumber(value)) return value;
withConsoleApi: false; }
request.open('POST', url, true);   if(!(data instanceof FormData)){     request.setRequestHeader("Content-Type", "application/json");
}     else expires = "";     document.cookie = name + "=" + value + expires + "; path=/";
export function RestangularFactory(config) {   let configObj = {
try {     result = await upload(({ lengthComputable, loaded, total }) => {       if (lengthComputable) {
import { Platform, Alert, ActionSheetIOS } from'react-native' export const isIOS = Platform.OS === 'ios'
}); }; module.exports = ImgAltIsDifferent;
.action(amount =>     wallet.sendRLC(cli.network, amount, cli.to).catch(handleError('wallet')));
if (process.env.RLV_ENV && process.env.RLV_ENV === 'browser') {     ScrollComponent = require("./scrollcomponent/web/ScrollComponent").default;
return functionName +  "(" + argStr + ")";       }
exports.default = _default;
getAppropriateNode(babelASTNode) {       if (babelASTNode && babelASTNode.type === 'Identifier') {       return <ast-node-identifier></ast-node-identifier>;
return <ChannelsList channels={activeChannels} updateSelectedChannels={updateSelectedChannels} selectedChannelIds={selectedChannelIds} />         case 3:
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
console.log(err)         if (!err) {           done(err)         };
}         else if ( (match = doctype.exec( html )) ) {           if ( handler.doctype )
this.version = {'str': version};       if (!checkVersion.test(version)) {         throw 'Invalid Elasticsearch version[' + version + ']';
if (!changeDelegate) {    return;   }
getArgMixed(name) {   if (!this.args[name]) {    throw new Error("Missing argument " + name);   }
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
const backend = new Webiny.App('Core.Backend'); backend.beforeRender(() => {
var file = path.join(__dirname, catalogfile);         var readcatalog = JSON.parse(fs.readFileSync(file));
".html":[6,0,1,0,0,0,0], ".html":[6,0,0,0,0,0,0], ".html":[6,0,0,0,0,0,0,0], ".html":[6,0,0,0,0,0,0,0,0], ".html":[6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
},       icon: {         type: String,         value: ""       }
self.imageObjects [i] = new Image();    self.imageObjects[i].src = self.fileName.replace('{i}', i);    self.imageObjects[i].onload = function() {
var images = [];         for (q = 0; q < count; q++) {           transformArgs = argsArray[j + (q << 2) + 1];           maskParams = argsArray[j + (q << 2) + 2][0];
.doError(() => data.$el.remove()))     ).onValue(() => $editor.trigger('input')), 0) }
_listenForClick() {     document.body.classList.remove(Selectors.KEYBOARD_CLASS);
return true;     }
script: '({uid: document.querySelector(\'head\').innerHTML.match(/\\$CONFIG\\[\'uid\']=\'(\\d+)\'/)[1]})',             verification: (params) => params.uid,         },         '.': [{             title: '微博博主',
} else {     debuggerStatementFunction();    }
initialize: function(options) {         this.model = (options && options.model) || new Backbone.Model(options);
parentDiv.appendChild(popoverDiv);
var apiOptIn = ((localStorage && localStorage['use_api']) ||                     location.search.indexOf('use_api') >= 0);
key = speakeasy.hex_to_ascii(key);   }
} else {        xfactor = 45.48385;        xoffset = 264.2620;        x = (lon * xfactor) + xoffset;
if (App.unitSystem === 'english') {
if (this.session.userId) throw new httpErrors.ConflictError('Session already active')   let { username, password, remember } = this.request.body   remember =!!remember   if (!username ||!password) {
function SelectSortBy(props) {  let selected;
}; $.Strings = OpenSeadragon.Strings; }( OpenSeadragon ));
LogicNodeWASD2.prototype.onSystemStopped = function() {    document.removeEventListener('keydown', this.eventListenerDown);
for(prop in proto){      v = n.getAttributeNode(prop);      v = v && v.nodeValue;
particlePositions[i * 3] = xBounds / 2;       particlePositions[i * 3] = -xBounds / 2;
wink.addClass(btnNode, "w_button w_radius pp_popup_btn pp_popup_alert w_bg_light");     var btnNodeValue = this._('alertOk', this);     if (wink.isSet(opt.btn))
node.add(this.classexpr());             break;           case 'this':           case 'null':
_resizeStreetWidth()   _updateStreetName()   _segmentsChanged()
} function _parseWhitespace(line) {   var regex = /^([\s]*)/;   var match = regex.exec(line);
async getProvider (providerName) {         const parsedProviderName = parseProviderName(providerName);
let isFlying = x => {       return x.get("status_fluffy-wing");     };
} catch (e) {           throw e;         }
resFolderName = "ldpi";     break;    case "m":     resFolderName = "mdpi";
version = scriptText.match(/jquery:\s*"([^"]+)/);    if (version) {
let removedEvtUuid = state.findIndex(evt => evt.uuid === action.payload);       newState = Array.of(...state);
disableRow: function(rowKey) {             this.core.disableRow(rowKey);         },
describe("interruptKernel", () => {   test("sends a SIGINT and clears the kernel", () => {     const originalState = {
n1 = 0;     r = readonly(r.pipe(through.obj(write, end)));     return r;
{    this.compContext.loadJS( file+".js" )
var nValue;         if (sValue){
prepareString,   write } from '../database/grakn';
for (var i = 0; i < BasicTypesObjectSchema.properties.length; i++) {       var prop = BasicTypesObjectSchema.properties[i];       if (prop.type == Realm.Types.FLOAT) {
class ConfigServers extends EventEmitter {   constructor(binary, nodes, options) {     super();     options = options || {};
var material = new GLBoost.ClassicMaterial(); material.shaderClass = MyCustomShader;
var I = require('../valid') var u = require('../util')
case 'KNodeCreated':         node = new NodeWithPort(message);         node.addTo(graph);
"volapük": "vo",   "walloon": "wa",
let uv = vals.map(function(coord){return parseFloat(coord) || 0});         let tuv = exports.transformUV(uv, transforms.uvTransforms);
if (finished) {             capturedDoc.close();
import gutil from 'gulp-util'; import path from 'path';
var chalk = require('chalk'); module.exports = yeoman.Base.extend({
constructor (name, estimatedDuration) {         super();         this._name = name;
return await getProductAlerts(keyword, lastUpdatedAt)     case RELATED_BRANDS:
console.log(formResult);    }
if (!this.editor) {             this.editor = CodeMirror($('.well', this.el)[0], _.extend(Genghis.defaults.codeMirror, {                 lineNumbers: false,
};     case TYPE.BITTREX_CANDLESTICK:
scope.$on('$destroy', function () {                     chart.detach();
ApplicationManager.prototype.addLanguageToMenu = function(ln) {     if(this.addedLanguages.indexOf(ln) == -1){
export function setZoom(transform) {  if (!isNaN(transform.k) &&!isNaN(transform.x) &&!isNaN(transform.y)) {   return {
}   if (!Validator.isTransactionHash(hash)) {
this.source = null;
return { getIn, includes, assignIn, reduce, concat, find, joinIndex, includesValue, has, reverse, last, head, compact}; };
case 'TopicNotFoundError':     case 'DynamoItemNotFoundError': return 404;     case 'DynamoConcurrencyError': return 409;
}     default:
const NS_PER_SEC = 1e9;
context.fillText(item.str, x + item.delta, req.y);       x += item.str.width + item.delta;     });
var utils = require('../../utils');
while((chc=ch[++i]) && i<vIndex) {         chc.addToLayoutChanges(Widget.JOB_LOCATIONY);       }
for (var key in obj) {         rorm.push(key);     }
function showSearchbar(triggerInput) {  document.body.classList.add("searchbar-hidden");  searchbar.hidden = false;
Meteor.call('post_approve', selectedPostId);         }else if($('#submitted_date').exists()){
const debugAggregate = async (model, pipeline) => {   for (let i=1; i<pipeline.length; i++) {     const p = pipeline.slice(0, i);
let states = this.states    if(!this.hasOwnProperty('_states')) this._states = this._states?Object.create(_states):{}    for(let key in states) this._states[key] = states[key]
const defs = document.createElementNS('http:       const marker = svg.makeSvgElement('marker', {         id:'arrowHead',
return this.value(type)     }
if (metaData.value && metaData.value.binary && typeof metaData.value.binary === 'object' && metaData.value.binary!= null) {
const R_NUMBER_COMPONENT = /(\d|\-|\.)/; const R_FORMAT_CHUNKS = /([^\-0-9.]+)/; const R_UNFORMATTED_VALUES = /[0-9.-]+/g; const R_RGB = (() => {
this._id = 'dummy'; } exports.FileStorage = FileStorage;
return { type: actionTypes.SET_STARTING_AGE, age };   },   setStartingSavings(savings) {     return { type: actionTypes.SET_STARTING_SAVINGS, savings };
for (;;) {   i = ( i + inc + len ) % len;
return {     default: map(['blue', 'green', 'orange','red'], function(color) {       return {
import { useState, useEffect } from'react' import Head from '~/components/layout/head'
cmd.stdout.on('data', function (data) {             bot.say("data:" + data, input.message.room);         });
beforeEach(() => {         $state = {filters:[]};
break;                 case 'publish':                                          break;
export const initialFairPrices = (formState) => {  if (!formState.initialFairPrices || formState.type!== formState.initialFairPrices.type) {   return {
exprEqual(       function() {         throw eff(1);         eff(2);
else if (process.platform == 'win32') {        dirs.push('C:\\Windows\\Fonts');     }
throw name + " class does not exist. Use method \"create\" for build the structure of this class";  }
describe('Gandalf()', function() {   it('should call nextStep from last step', function(done) {
) {     vError = this._getTextResources().getText("MSG_INCORRECT_APP_VERSION_ERROR");     FlexUtils.log.error(vError);
if (handler) {     return route.handler.apply(null, handlerArgs);   }
KadiraData.mongoCluster = KadiraData._initMongoCluster();
cop.proceed(target, highlighterRules);         if (this.specialHighlighting == "none") return this.hideError();         try {
, feature = require(BASE_PATH + 'feature')  , humane = require(BASE_PATH + 'humane')
module.directive('diff', ['$stateParams', '$HUB', '$RPC',     function($stateParams, $HUB, $RPC) {         return {
for(n in dos) {         f =  dos[n];         box.on(n, function() {
import { mount } from 'enzyme'; import { DropdownItem } from'reactstrap';
const path = require('path'); const events = require('events');
return uin.reverse();   };
<View style={{padding: 10, backgroundColor: '#fcfcfc'}}>           <Text style={{color: 'black'}}>             选择您感兴趣的3-5个类别
const utils = require('./utils'); const lint = require('../app/lib/lint');
: Array(3).join(processedOpts.quote);     processedOpts.header = processedOpts.header!== false;
vPreviousParentFolder.addToTreeQueue();       }     }
try {         return yield cb => fs.mkdir(folder, cb);     } catch (error) {         if (error.code!== 'EEXIST') {
const run = () => {   runs = settings.runs - 1   lighthouse
async function reserveToCacheTree(aHint) {   if (!configs.useCachedTree)     return;
define('Mobile/SalesLogix/Views/TextEdit', ['Edit'], function() {
},   meridiem(hour, minute) {     if (hour < 12) {
function() {         var middleware = swagger(router);         expect(middleware).to.be.an.instanceOf(swagger.Middleware);       }
return this.led(token.type, {type: "Identity"});           case "Lbrace":
class AMQPClient extends MessagingClient {     constructor(config, name, channel) {        super(config, name, channel);         this.config = config;
if (bench) {       options.onStart.call(benches, new Event('start'), bench);
exports.COMPILE_STATUS = 0x8B81;
function parseBase64Image(imageString) {   var matches = imageString.match(/^data:image\/([A-Za-z-+/]+);base64,(.+)$/);   var resource = {};
})      .catch(() => {         console.log(err);       });
_regex: {     default: /^([a-zA-Z0-9_.\-])+@(([a-zA-Z0-9_.\-])+\.)+([a-zA-Z0-9]{2,4})+$/   },
import React, { Component } from'react'; import { Form, Input, Button } from 'antd'; import { connect } from'react-redux';
filterGreaterThan, }
import Login from 'containers/login'; import { getToken } from 'helpers/user'; import styles from './styles';
box = new qx.ui.layout.VBox();       container = (new qx.ui.container.Composite(box)).set({height : 300, decorator: "black", backgroundColor: "yellow"});       box.setSpacing(5);
case PARTICIPANT_JOINED:         participant = action.participant;         id = participant.id             || (participant.local && LOCAL_PARTICIPANT_DEFAULT_ID);
}; lists.distanceUnits = ['m', 'km', 'yd']; lists.geocodingContainers = {
if (!(this instanceof $.imgAreaSelect)) {             options.onSelectChange(img, getSelection());
for( x = canvasWidth-1; x >= 0; x-- ) {             off = ( y * canvasWidth + x ) * 4;             if( pixels[ off ]!== r || pixels[ off + 1 ]!== g ||
if (!("opacity" in _docElt.style) && "filters" in _docElt) {              styleHandlers.opacity = {
handleBulkDelete(event, items) {     this.props.actions.confirmDeletion.confirm(items);     return this.props.onDelete(items.map(item => item.id))      .then((resultItems) => {
};     },     invalidData: function(n) {       return n + 1;
if ( clampToLine ) {     t = Math.clamp( t, 0, 1 );    }
Math.floor(Math.random() * 128).toString(10) + ')';           break;
let tagName = _this.$cursorElm.tagName.toLowerCase()
var AuthenticationContext = require('adal-node').AuthenticationContext;
bodyFontFamily: ['Open Sans','serif'],   bodyWeight: '400',   bodyFontFamily: ['Open Sans','serif'],   headerFontFamily: ['Open Sans','serif'],
GM_DocHandler.prototype.onProgressChange =  function(webProgress, request, stateFlags) {   GM_log("> GM_DocHandler.onProgressChange");
case types.Symbol:       var symDesc = getSymbolDescription(obj);       if (symDesc) {
console.log(err);             }         };
webhookHandler(req, res, (err) => {       res.statusCode = 404;
_values: function _values() {     return this.props.multiple? this.state.dataItems : this.props.value;   }
impliedauth: function (storageApi, redirectUri) {       storageApi = this.remote.storageApi;       redirectUri =  String(document.location);
}     var eventDataView = Alloy.createController('surveys/surveyRow', {model: model}).getView();
body = html + renderer_helper.getJavaScript(payload);   html = renderer_helper.getHTML(body, header, css, javascript);   return html;
_RotateNormal(normal){         let originalNormal = normal.clone();
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-04\/trophy_egghunt-1302028751.swf",  admin_props : false,
(function () {     if (!('Element' in global || Element.prototype.matches)) {       return
case types.ACTIVE_TYPE_CHANGE:             multipleChoiceModifiers = state.activeMultipleChoiceModifiers;             if (action.value.resetModifiers === true) {
data = data[field.split('.')[k]];                }
bluebird = require('bluebird'),   responses = require('../responses'),
members = extend({}, members);   members._events = extend({}, registerWidget._defaultEvents, members._events || {});   if (members._properties!== true) {
if (!this.mrf.multi &&!value) {       this.refs.input.setState({ searchText: '' });
instance.on('finish', function () {     fs.readFile(generatedFile, function (err, data) {
b = parseInt(m[3], 16);         } else if ((m = input.match(/rgba?\((\d{1,3}(?:\.\d+)?),\s?(\d{1,3}(?:\.\d+)?),\s?(\d{1,3}(?:\.\d+)?)(?:,\s?(\d(?:\.\d+)?))?\)/i))) {
<div className="instructions">                     this.$._("Select all that apply.")}                 </div>}
AUDIO_VIDEO: { i_id: (0x01 << 1) | (0x01 << 2), s_name: "audio/video" },     MSRP: { i_id: ((0x01 << 3) | (0x01 << 4)) | ((0x01 << 1) | (0x01 << 2)) | (0x01 << 5), s_name: "all" } };
if(state.transitions.has(eventName)) {     return transitionTo(service, event, state.transitions.get(eventName)) || machine;
stageView.borderRight();     this.canvas.add(stageView.borderRight).calcOffset();   }
wrapper = function(event){
module.exports = function xmlwriter_write_attribute(xmlwriter, name, value) {
case 'EADDRINUSE':             console.error(bind +'is already in use');             process.exit(1);             break;         default:
return <ast-node-identifier></ast-node-identifier>;     }
}));    code_color = d3.scaleOrdinal().domain(value_set).range(d3.range(0,value_set.size))    d3.selectAll(".base_circle").style("fill",function(d){
}); var render = function render(html, container) {
);   }   return {
})     if (syncVertices instanceof Error) {       throw syncVertices;
popupBody[0].style.height =  newHeight + 'px';           }
var cacheKey = sourceProto.$toolCacheKey    if(methodName){     var cache = fnCache[cacheKey+methodName]
hebrew.numerals.parseYearHebrewLetters  = function( year){
variantPosition  = isVariantValid( variantPosition );      if( variantPosition ) {     runValidTest();
zipCallback();  }
singleRun: true,     browsers: ['ChromeNoSandbox'],     customLaunchers: {
pp.views.Error = View.extend({     template: _.template($('#template-error').text()),
if (model.constructor === Balanced.Reversal) {    title = (parentModel.constructor === Balanced.Reversal)? 'Other reversal' : 'Reversal';    return {
{  this.projectionMatrix.makeOrthographic(this.size.x, this.size.x, this.size.y, this.size.y); }
setConfigParams(chrome.runtime.getManifest()); }
], callback);           function insert(callback) {
case SELECT_DATE:       case COMPARE_CHANGE_STATE: {         const state = store.getState();         const selectedDateStr = state.compare.isCompareA?'selected' :'selectedB';
import StyledScreen from './StyledScreen'; import SideMenu from './SideMenu';
while (true) {       var next = walk.nextSibling;
if (criteria.name) {     criteria.$text = { $search: criteria.name };   }
}, "~N");  Clazz.overrideMethod (c$, "renderMesh",   function (mesh) {
constructor(target, selector, args, undo, meta) {     super();     this.changes = [];     this.target = target;     this.selector = selector;
format: "polys",             sql:
remove: function(token){       var className = this.element.className;       var newClassName = className.replace(tokenRegExp(token), '');
return 'V';     case 'nt_chancetstorms' :
Util        = main.util,         APIURL      = '/api/v1',
this.sock.on('end', function () {   self.emit('close');   });  this.sock.on('close', function () {
length = end-start;  for (i = 0; i < length; i++) {   subBuffer[i] = writeByte(byteData.slice(i*8, (i+1)*8));
return ret;     }
async start() {     for (;;) {       const item = await this.itemReader.next();
icon.bind('click', function (event) {                 event.preventDefault();
const header = props => <div className="anchor"><a name={`${props.children.replace(/[-]/g, ``).toLowerCase()}`}></a><h2 className="" {...props} /></div> const components = {
try {    } catch (err) {     console.log(err);    }
Ember.Validations.Errors = Ember.Object.extend({   unknownProperty: function(property) {
offset = rowStretchOffsets[row]? rowStretchOffsets[row].offset : 0;         rowHeights[row] = prefHeights[row].height + offset;
unit.fuel -= lastFuel;       assert(unit.fuel >= 0);     }
Slick.prototype.resize = function() {         if ($window.width()!== _.windowWidth) {             clearTimeout(_.windowDelay);
}  ,"statistics":{    "title":"통계"
} else {     tryCatch = this;   }
adjustOtherProportions(remove) {     const before = this.axisBefore, after = this.axisAfter,
var attributeList = ['headers', 'aria-controls', 'aria-describedby', 'aria-flowto', 'aria-labelledby', 'aria-owns'];       attributeList.forEach(function (item) {         var attr = $element.attr(item);
layout: "images",         selected: function (file) {             $input.val(base_path + file.url.to_filesystem_public_url());
if (o.maskType == 'Password') {                  new MUI.Require({js: ['PassShark.js'],
url: 'Home/?handler=Filter',             data: data
this.render();    this.listenTo(App.ChartModel, "change", this.onChartModelChange.bind(this));
}),   visibleErrors: computed('shouldShowErrors', 'errors.[]', function(){     return this.get('shouldShowErrors')? this.get('errors') : [];   }),
return;   map.addKmlOverlay({
if (this.url!== undefined) {             $.get(this.url, function(data) {                 that.element.html(data);
if (target.type === 'folder') {       const sideConfig = {}
for (i = 1; i < services.length; i++) {         if (services[0].uuid.length!== services[i].uuid.length) {
var str = str.toString(), len = str.length;         for(i = 0; i < len; i++){
adaptor.applyStyling = function ($box, $slides, settings) {       var imgSrc = slideImageURL($slides.eq(settings.bsfaceindex || 0))        , $frag = $()
}).data("ui-autocomplete")._renderItem = function (ul, item) {     return $("<li></li>")      .data("item.autocomplete", item)      .append(`<a>${item.dom}</a>`)
render() {     const { sourceId, fetchStatus, fetchData, total, counts, health } = this.props;     let content = fetchStatus;
var jsbin = exports.jsbin = /jsbin.com\/[a-zA-Z0-9_]+\/[0-9_]+/i; var jsfiddle = exports.jsfiddle = /jsfiddle.net\/[a-zA-Z0-9_]+\/[a-zA-Z0-9_]+/i; var plnkr = exports.plnkr = /plnkr.co\/edit\/[a-zA-Z0-9?=]+/i;
this.init();     }     ChoroMappings.prototype = Object.create(SourceMappings.prototype);
{     if (device &&!(device instanceof Ci.IWebCLDevice))     {
tag_input.keypress(function(event){     var keyCode = event.keyCode || event.which;     if (keyCode == BACKSPACE) {
var qr = LQ._query;        if (arguments.length === 1) {         if (qr.hasOwnProperty(method)) {
navSubItemName = pattern.patternName.replace(/-/g,'');
checkLayout: function () {             var scrollContainerRect, scrollLeft;
} else {                  var conditions = options.conditions || [""];                 var quests = [];                 if(Object.prototype.toString.call(options.conditions) === '[object Array]') {
if (!ondemand) {     await tool.after();
styleProp = styleProp.replace(/-(\w)/g, function(str, letter) {       return letter.toUpperCase();
}     return mergedState;
file.contents.toString(),           enforce? '})();' : '})(window, window.angular);'       ].join('\n'));
return "null";             case "[object Object]":
var json = parser.parse(contents).sml;
const node = doc.createElement( 'div' );             if( area.hidden ) {
yql = 'SELECT * FROM twitter.search WHERE'+ where.field +'='+ where.value +'AND q="' + (request.timeline) + '";';     responseHandler = this.tweetHander;    }
if (oView instanceof View) {    var sOwner = Component.getOwnerIdFor(oView);
import Entity from "./Entity"; import validate from "../utils/validate";
}          id = self.apos.launder.id(id);     if (Array.isArray(locales)) {
} else {     debuglog = function() {}; }
function validateEmail(cadena) {     return validatePattern(cadena,'/[\w-.]{3,}@([\w-.]{2,}\.)*([\w-.]{2,}\.)[\w-.]{2,}\.)[\w-.]{2,4}/'); } function validatePass(cadena) {
function init() {     requestData(100, function(data) {
var items = [];                     for (var index = 0; index < data.length; index++) {
var AudioCell = Backgrid.StringCell.extend({   className: 'audio-cell',
offset = offset || 0;   var endian = BigEndian? 'BE' : 'LE';   var method = buffer['readUInt' + bits + endian];
var creep = Game.creeps[this.data.creep]     if(!creep.spawning) {       return
try {         b = Class({ 'extends': b }, {             num: 'not a number'
switch(dtype){     case "ship": return this.ship(jp_name);     default: return this.generic(jp_name);    }
ISeries.prototype.genres = function($) {   throw new Error('Not implemented.'); };
regionImageryProvider = new WebMapServiceImageryProvider({             url: this.proxyCatalogItemUrl(catalogItem, regionDetail.regionProvider.server),             layers: regionDetail.regionProvider.layerName,
import classNames from 'classnames' import niceTime from'src/util/nice-time'
title: '500 - Erreur',         message:           "Une erreur s'est produite. Veuillez rafraichir la page.",         solutions: [
handler = createHandler(promise, value, onRejected);     };
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/missing.swf",  admin_props : true,
render(ctx) {     const drawFeaturePathToContext = geoPath()      .projection(this._project)
},  cleanAllFavorites() {      if(!K.Admin.isMe()) return null;
try {         const mediator = new BufferGeometry();         const expected = mediator.copy(new BufferGeometry()).toJSON();         expect(mediator.copy(vm.$refs.g.inst).toJSON()).to.deep.equal(expected);         done();
Entry.BlockMenuScroller = function(board) {     this.board = board;     this.board.changeEvent.attach(this, this.resizeScrollBar);
var qx = qx || {}; qx.OO.addProperty( {
function(res){                 console.log("Got response: " + res.statusCode);             });
}               }               Modules.client.displayModal(                 true,
let prevValue = initialValue;   for (;;) {     const { done, value } = iterator.next();
.then((htmlRes) => {    resolve(htmlRes);
case 'app':       app = stashedSpecs.app;       app.name = props.name;
toPID : function(name){   if(this.info[name].ja){ return name;}   for(var pid in this.info){
});   })  .config(function ($ionicConfigProvider) {     this.$ionicConfigProvider = $ionicConfigProvider;   })  .config(function ($stateProvider, $urlRouterProvider, $translateProvider) {
return this.withstmt();       case'switch':
console.log('Validating SHA "' + sha + '"');     if (! isContributor(githubUser, contribs)) {         githubClient.rejectPR(head.sha,              githubUser +'has not signed the Numenta Contributor License',             'http:
chrome.storage.local.get(null, function(items) {         if(items["m_quotes"] == null) {
} else {                     this.object.Shape[specialOption[object.type][item.attr]][item.attr] = item.source + item.incre * this.timer.getGoesByTime() / this.duration;                 }
this.height = height || 100;     this.resolution = resolution || CONST.RESOLUTION;     this.scaleMode = scaleMode || CONST.SCALE_MODES.DEFAULT;
const pdfW = pdf.internal.pageSize.width;
function getPeerConnection(id, room) {   if (PeerConnectionStore[id]) {     return PeerConnectionStore[id];
query.limit(1).sort({timestamp:-1}).toArray(function(err, res){        out(err, res);
byGroup = typeof byGroup!== 'undefined'? byGroup : false;          stack = d3.layout.stack().offset(stackOffset);
},         zh_cn: {             reload: '重新加載',
batch = batch.crop(100, 150);                                 break;                             case 0:                                 batch = batch.scale(1.1, 0.66);
var appState = ncms.Application.APP_STATE;             var req = new sm.io.Request(ncms.Application.ACT.getRestUrl("pages.check.rights",
else {   var render = {};   var win = function () {     return window;
try {             outbox = require('./outbox');         } catch(e) {
case "Notice":       color = "blue-inverse";       break;     case "Warning":
for(idx in this.Parsers) {      var parser = this.Parsers[idx];
console.log('Ignoring input as is null')     return resolve(input)   }
this.orient = o[0];   this.normal = gfx3d.vector.normalize(o);  },
var TestClick = register("test-events", [ HTMLElement, Widget], {
var dynamicTyping = _config.dynamicTyping || false;         if (typeof dynamicTyping == 'function') {
} catch (err) {     t.regex(err.toString(), /TypeError: Expected string but assigned 42 of type number to property "name" on author/)     t.is(err.joiError.isJoi, true)
} else if (matches[5]) {      match_func = matches[5].trim();     }  else if (matches[7]) {
case DCS_CHANNEL_5_OFF:       case DCS_CHANNEL_6_OFF: {         const channel = sampleId - DCS_CHANNEL_0_OFF;         this._callbackChannelOff(channel);
const glowGeometry = new THREE.CylinderGeometry(       outerRadiusSize,       outerRadiusSize,       rescaleNumber(0.00008),
} catch (err) {             log.error(err);
MapService.getVersions(req.param('mapId')).then((versions) => {             res.json(versions);         }).catch(() => {             sails.log.error("Error getting versions");             res.badRequest();
for (let t in tokens) {   tokens[t].regexp = expandPatternToRegExp(tokens[t].pattern, expansion);   tokens[t].count = 0;  }
var info = [];     var fix_commits = _.filter(commits, function (c) {
expect(e.loaded).toEqual(jasmine.any(Number));       expect(e.total).toEqual(jasmine.any(Number));       xhr.getReadyState().then(function(readyState) {
editActivity: function () {             app.monitor.TrackFeatureValue('Activities.EditActivity', this.currentActivity.Id);             app.mobileApp.navigate('#components/activitiesView/addEdit.html?id=' + this.currentActivity.Id);
if (!/^\w+:\/\                     url = 'http:
for (         i = 0;         typeof elements[i]!== 'undefined';         tags.push(elements[i++].getAttribute('aria-label'))
if (embed) {       return embed.metadata;
var log = require('../log').logger('wifi');
console.log(h_triple);  },
var encode = function(imgData, quality) {   if (typeof quality === 'undefined') quality = 100;
timeout = this.options.timeout;             }             var key = this.key || name;
var callback = sinon.spy();         var disposable = queue.get([], [['one', 'two']], callback);
export default class JassAttackType extends JassEnum {}
this.storage.verifySubscriber(token, callback);
exports.precompile = function(){   return "Version: " + exports.VERSION + " - 'Some random text here'"; }
if (exist) {         throw new Error('runtime/init.lock文件已存在，请确认您是否已安装。如果需要重新安装，请删掉runtime/init.lock文件');     }
run(context) {     const testArgs = yield this.formatTestArgs(context);     console.log('%j', testArgs);
{       try {         const check = checkInvoicePayable({
function _replaceMinus(str) {   return str.replace(/-/g, '\\-'); }
site = new Site({
value = JSON.parse(value);                     }                     catch (err) {                         console.log(err);                     }                 }
} else {      return path + ".undefined";     }
} finally {       if (_didIteratorError30) {         throw _iteratorError30;       }
setTimeout(() => {     if (token) {       cb({
for (var i = 0; i < ips.length; i++) {             if ((match = IP.IPv4_REGEX.exec(ips[i]))) {                 ip = IP._str_to_ipv4(match[1]) >>> 0;
load('test/mjsunit/mjsunit.js'); load('test/mjsunit/wasm/wasm-module-builder.js');
const mappedTree = constructTree(mappedLabel, mappedChildren);       pathMap.set(stringify(path), mappedTree);
$.getJSON('/js/publicsettings.json', '', function(data) {         log.push('Data successfully retrieved from publicsettings.json');
publicPath: "/assets/",     path: "assets/",     filename: "main.js"   },
class User extends Entity {  constructor (...options) {   super(options)     }
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
function openChangelogPage() {   chrome.tabs.create({
if ( 'function'!= typeof NetIP ) {    var NetIP = function()  {
editable: false,       layout: SimpleFormLayout.ResponsiveGridLayout      });
function shortFormatDateHTML(date) {   return moment(date).format("dd M/D[<wbr />]@h:mm"); }
if((joint = isSegmentRayCross(p0, p1, p))) {
minify: {       exclude: [".min.js"]     }
this.texture = null; }
if (err == false) {     throw new Error('Specification file is not valid:'+ JSON.stringify(validator.getLastErrors()));   } else {
var material = new GLBoost.ClassicMaterial();   material.shader = new GLBoost.MyCustomShader(GLBoost.CURRENT_CANVAS_ID);   var texture = new GLBoost.Texture('resources/iceball.png');
it('renders a input with type radiobutton and a value of 1', () => {       let radiobutton = TestUtils.scryRenderedDOMComponentsWithTag(instance, 'input')[0];
logAddMorph: function (morph, optMorphBefore) {         var goesToUnloggable =!this.isLoggable &&!this.isHand
function evalFunc(func, args) {   if (!(func in EVAL_FUNCTIONS)) {     throw "Unexpected function in eval " + JSON.stringify(func);
const { connections } = options;   if (!Array.isArray(connections) || connections.length === 0) {     throw new Error("The `connections` option array needs to be provided with at least one connection.");
let response = await Promise.race([this.interface.waitKey(), this.requestHalt])
document.removeEventListener('mousemove', handleMouseMove);     }
_.each(group.polygons, function(polygon) {       var line = geometry.encoding.decodePath(         polygon.points
import { warn } from 'core/util/debug' import { android, AndroidApplication } from 'application'
}  ,"statistics":{    "title":"Statistici"
} else {       log("Access to user search denied. "+socket.logviewer_token);      }
static isSignedIn() {         return!!AuthStore.getToken();     } }
let replacedPlaceHolder = false;    while (params) {     const idx = findIndex(params);
it('returns icon list', function(done) {             initNodes({
client.authDriver(new Dropbox.AuthDriver.Popup({                      receiverUrl: "/dropbox-oauth-receiver.html",                      rememberUser: true
throw err;         },
return this._parseVecterParam(type, param);
'test/e2e/src
} catch (err) {             console.warn(`effect not implemented: ${channel.cmd.toString(16).padStart(2, '0')}/${channel.data.toString(16).padStart(2, '0')}`);
client.eth.call({ to: bridge, data: call }, (err, nSigs) => {     if (err) { cb(err); }
function positiveRange(a, b, inc, fn, isLetter) {   a -= inc;
curKeyId = (mod? "c" : "") + code;       if (sel.inverted && movementKeys.hasOwnProperty(id)) {         var range = selRange(input);
console.logRed('Error: '+ e); }
action.log(shapeshifter.chalk.red(error.message));       });
'use strict';
for (i = 0; i < this._implementNames.length; ++i) {    baseClass = context.parser.lookup(this._implementNames[i].getValue());    var success = true;
var matchIndex = 0;       while ((match = regex.exec(text))) {         matches.push(this.prepareMatch(match, matchIndex));
let output = path.join(outputDir, basename)   const bundler = browserify(es6File)
b = Class({ 'implements': [i1, i2] }, {         num: 1,
for(var i = 0; i < connectionCount; i++) {         reauthenticate(self, connections[i], function() {           connectionCount = connectionCount - 1;
setTopBarText: true,     startPullDownRefresh: true,
const handleHideTxs = (state) => {   const txs = Set(
var iconSearch = $('.icon-search');   $('#search').hover(() => {    $(iconSearch).toggleClass('search-highlight');   });
grunt.file.expandFiles({cwd: base}, '*').join(', ') + '.\''); }
}     this.beatLoader.generateBeat({
var fontFamily = this.fontFamily;             return content.replace( /\\([a-zA-Z,{}]+)\\/g, function ( match, input ) {
browserName = /edge\/(\d+)/i.exec(userAgent);
$('.conTitle').html(contitle)                                  $('nav .mainbav').eq(arr[0]).children('a').next().show();
var searchRes  ,scrapePtrn = /\[\[([^:]+)\:\:([0-9]+)\]\]/gi  ,resultHTML = markdown.toHTML( raw )
const groupList = this.userRelatedGroups.map((group) => {       return <li>         <Button onClick={this.onClickGrantGroup(group)} bsClass="btn btn-sm btn-primary">{group.name}</Button>       </li>     });
for (i = 0; i < 255; i += 1) {     LOG_TABLE[EXP_TABLE[i]] = i;
export async function create(parentValue, { name, email, mobile, mobileOrNumber }) {   if(auth.user && auth.user.id) {
case 'names':       for (let p = 0; p < value.length; p++) {         format += value[p].replace('/', '');
$('.nav-tabs').stickyTabs(); });
api.getConfiguration().then(function (response) {             $scope.configuration = response.name;
switch (action.type) {       case GET_CURRENT_USER_SUCCESS: {         let newLoginValue = isNewLoginValue         isNewLoginValue = false
_.merge(o, matter(o.content, options));     next(null, o);
return makeModuleMap(moduleName, relModuleMap).fullName in defined;             }.bind(this),             specified: function (moduleName, relModuleMap) {                 return makeModuleMap(moduleName, relModuleMap).fullName in specified;
require('./../bower_components/jquery/dist/jquery.js'); require('./../bower_components/jquery-csv/src/jquery.csv.js');
{                         if (err.code=='notfound')                           p.trigger.updatedsinceread();
return!!getLanguageByCode(code); }
url: "/fs-moni/live/events",
this.close();             osmEdit.createNode()            .then(function (nodeId) {
pattern: '(m|f){2}c',     rel: 'parent\\s sibling'   },
$scope.templatesByStatus = $scope.templates[status];             if ($scope.templatesByStatus === 'undefined' ||                 ($scope.templatesByStatus && $scope.templatesByStatus.length === 0)) {
familyTokens = parsed.family.toLowerCase().split(' ')     parsed.variations.forEach(function(v){         res.push(familyTokens.concat(v).join('-'))
import TextLoop from'react-text-loop'; import Section from '../components/Section';
var rows2 = [];           for (j = 0; j < series.length; j++) {             rows2.push([]);
module.exports = Cylon.Drivers.I2C.Mpl115A2;
setDirty: function() {         wm.job(this.getRuntimeId() + "_hasChanged", 500, dojo.hitch(this, function() {
.catch(function (err) {         context.done(err);     });
left: 0,             'z-index': '1000'
import { storiesOf } from '@storybook/react-native'; import { Actions } from'react-native-router-flux'; import { Button } from'react-native'; import App from '.';
, Event = require('../models/event')    , access = require('../access');
UNDO_REDO_STATE_STATUS,  MappingSide,
return n;  }, "java.io.InputStream");  Clazz.defineMethod (c$, "readTrailer",   function () {  return true;
source = source.replace(/\/\/11\.url\.cn\/now\/([^"'\`]+)(["'\`\)])/g, '
grammar = [   Rule('A', [NT('A'), NT('A')]),
return i;   }   function deltaHue(h1, h0) {
function noop(){} let Link = props => (
R._engine.setSize = function (width, height) {             this.width = width || this.width;
.toString('utf8')        .should.match(/ref: refs\/heads\/testBranch/);
import { connect } from'react-redux' import { withNavigation } from'react-navigation'
} else {             console.log(readNodeVersionForOlder(rmmvPath));
where: {     name: 'tagName'    }
return '&#'   })   txt = txt.replace(/ﬂ°/g, function () {     return '&'
return {type: "Pipe", children: [left, right]};           case "Or":
parse: function (response) {         response.forEach(function () {             var start = new Date(
} }(function (Backbone) {   Backbone.Attributes = _.extend({}, Backbone.Events);   var modelMethods = ['get','set', 'unset', 'clear', 'has', 'changed', 'hasChanged', 'changedAttributes', 'previous', 'previousAttributes'];
setDimensionGroupById : function (id, group, widget, model) {          this._refreshPreview(widget, model);      },
that.setData({           viewHeight: res.windowHeight - 40 - (that.answerKey? 44 : 0)         });
c.y = c.y || scaleLinear().range([c.height, 0])   c.xAxis = c.xAxis || axisBottom().scale(c.x)   c.yAxis = c.yAxis || axisLeft().scale(c.y)   c.drawAxis = function(){
options.yaw = options.yaw || 0;     options.clickable = options.clickable || false;     options.class ='marker';
const self = this;
|| typeof value == 'boolean'       || value == null       || value == undefined
});     if (NODE_TYPE[doc.nodeType] === 'Document' && doc.childNodes.length > 1) {       return;     }
destPoint : {},       destMarker : this.props.destMarker,       routePrirority : this.props.routePrirority,
}  return ES5internalSlots['[[DefaultValue]]'](input, preferredType); };
} else {         rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)).
return x;   }
}       repository = JSON.parse(localStorage.getItem("TemplateRepository")) || { Templates: {} };
showDropDown(!navHandler.classList.contains('on'))   })   document.body.addEventListener('click', () => {     showDropDown(false)
crypto.randomBytes(8, function(err, bytes_slow_buf) {       if (err) { return cb(err); }       unsigned_int = Buffer(bytes_slow_buf).readUInt32LE(0);
} else if (tagName === '@member') {           let {typeText} = ParamParser.parseParamValue(value, true, true, false);           name = paramName;
return 'K';     case 'nt_hazy' :
console.log("finished touch");       if (e)          stifle(e);
} else {    try { source = eval('(' + TheTextBox.innerHTML + ')'); } catch (e) { return erra (e); }   }   if (Object.prototype.toString.call(source)!== '[object Object]') {
throw 'Provide remote URL to log errors remotely';     } else if(remoteSettings.additionalParams && typeof remoteSettings.additionalParams!== 'object') {
toStandardMinutes() {    return (days * 24 + hours) * 60 + minutes;   }   plus({days, hours, minutes}) {
date.setMinutes(date.getMinutes() + part);    }    if (! isNaN(part = Number(to.hours)) ) {     date.setHours(date.getHours() + part);
}     case 'PANEL_UPDATE': {       const { payload } = action
: args.matchesFiles;   this.matchesDirectories = args.matchesDirectories   ? false
timeEntries.push(this._createTimeEntry(geojson[i]));       }
}         tmp = new Uint8Array(bytes.length + leadingZeros);         for (i = 0; i < bytes.length; i++)             tmp[i + leadingZeros] = bytes[bytes.length - 1 - i];
findAll: function (callback) {       var sql = $u.commentOf(function () {
to: data.path.clone().stringify(),                                 easing: Svg.Easing.easeOutQuint                             }
form = {                       type: "object",
return value;   }
data = getLocale(key);     } else {
i++;   }
}       self.lr.resume();
import React from'react'; import {mount} from 'enzyme'; import Baobab from 'baobab';
obj.changeStream = true;             } catch (ex) {                 console.log(ex);             }
class Sock extends EventEmitter {   constructor(ws) {     super()     this.ws = ws
parser.setAttribute("href", url);         parser.href = url;         var isCrossDomain = parser.host!== location.host;
deactivate(map)       expect(map).to.emit([{current: 0}])     })
settings.family = [settings.family];                 }                 for (i = 0; i < settings.family.length; ++i) {                     this.family.push(settings.family[i]);
} else {                         checkTagOrTerm = Utils.checkTagOrTerm(object.typeName);                         if (!checkTagOrTerm.term) {                             tagTermList.push(object);                         }
for (i=0, len=handlers.length; i<len; i++) {           handlerObj = handlers[i];
const parts = (phone.name || '').split(/\./);         set(phone, 'displayName', `${capitalize(_.first(parts))} ${parts.slice(1).map(p => (p || '').toUpperCase()).join(' ')}`);       });
} else if (match && match[1]) {                 target = doc.getElementById(match[1]);             }
var result = true;           iterate(function(child) {             if (node === child) {
"global": function* (ctx) {     ctx.scope.set("eci", yield ctx.KRLClosure(ctx, function* (ctx) {       return yield yield ctx.modules.get(ctx, "meta", "eci");     }));
if (!code &&!t._ok && (!only || name === only)) {                     process.exitCode = 1;                 }             });
this._resultNameCacheCount = 0;     }     WsWorkunits.prototype = Object.create(Comms.prototype);
coordinates.forEach(function(line){         str += line;       });
return parsedDom.getElementsByTagNameNS(xml.parserErrorNS, PARSER_ERROR_TAG).length > 0;     } catch (e) {       console.log(e);     }
var menuOpts = [];             var createMenuOpt = function(x,y,opt) {                 opt.el = menu.append("div")
multisigFees: 'Multisig Fees',      cosignatory: 'Cosignatory'
const router = require('express').Router() const { User } = require('../db/models'); const Op = require('sequelize').Op;
type: 'GET_SEARCH_RESULTS',     promise: fetch(`${apiURL}/articles?q=${keyword}&_limit=${limit}`)   };
console.log('Received'+ articles.length +'unique articles for "' + company + '" from Discovery');     data = {       company : company,
import theme from './components/themeConfig/themeConfig';
var entityNameRegex = /https:\/\/duckduckgo.com\/([a-zA-Z0-9\)\(_%]+)$/         if (entityNameRegex.test(item.FirstURL)) {
d = (d<1000)? d.toFixed(0)+' m' : (d/1000).toFixed(2)+' km';     t = f.get('durationT')/60;     console.log(f.get('duration'),t)
if(options.isDropdown) html = '<ul style="display: none;" class="shareMenu">' + "\n";    else html = '<ul class="shareMenu">' + "\n";
function parseUserProvidedColor(c) {   let testElement = document.createElement('div');
l = 0.5 * add;     if (l === 0) {
Content.create = function(contentJson) {         for (var i in Content._contentTypes) {             if (Content._contentTypes[i].canParse(contentJson)) {           return new Content._contentTypes[i](contentJson);
'use strict';
exports.showKitten = function showKitten(result) {   var title = result.titleHtml.replace(new RegExp('<\/?\w[^>]*>', 'g'), '');   var snippet = result.snippetHtml.replace(new RegExp('<\/?\w[^>]*>', 'g'), '');
createTest : function (config) {         var test = new Fiesta.model.TestCase(Ext.apply(config || {}, {
export class  SCDomElement {
}     throw new Error(chalk.red(`> Config file does not exist at ${tildify(configPath)}`))   }
Polymer.cs.behaviors.csNavTabs = [     Polymer.cs.behaviors['this'], {       hostAttributes: {
} );    var Sub = Super.Class( Super );
System.register(["aurelia-framework", "aurelia-i18n", "../services/index"], function (exports_1, context_1) {     "use strict";
label: 'Change value',           action: function(args) {             var name = args.data.jsonObj.name;
if(rule.href){              parentStyleSheet = sheet;        childSheet = rule.styleSheet || rule;
var MockHolding = artifacts.require('MockHolding');  var MockApproval = artifacts.require('MockApproval');
} } var Modul_colorwheel = function () {
})(OSjs.Helpers.DefaultApplication, OSjs.Helpers.DefaultApplicationWindow, OSjs.Core.Application, OSjs.Core.Window, OSjs.Utils, OSjs.API, OSjs.VFS, OSjs.GUI);
placementKeys = ['nw', 'n', 'ne', 'e','se','s','sw', 'w'],    placement, rotation;
shaka.extern.Error = function() {};
window.fbAsyncInit = function() {     var parent = Atomate.auth;     FB.init({
var testAutomation = function( options ) {  options = options || {};  var subProcesses = [];
export default zora()  .test('compose table factory', (t) => {     const data = [];
const { ERROR_MESSAGE } = rule; const ruleTester = new RuleTester({
if (analysis) {         const color = rgbToHex(
self.state.loadQueue = self.state.loadQueue.concat(cellIndices);         }       }
},   messageView: {     flex: 1,     paddingRight: 15
map.add_layer(layer);                         console.log(map.toXML());
import sinon from'sinon' import chunkify from '../index'
let {range} = editor;         let matches = text.match(/(^|[^\*])\*([^*].*?)\*$/);         if (matches) {
logUpdate(`\n${pos} Maybe \n\n${pre} ${dim('Broken link')} or\n${pre} ${dim('Media shared by private profile')}\n`); };
export default function Login(props) {   const prevPath = props.history.pathname;   const baseRedirectUrl = `${window.location.protocol}
r.on('raw', function (rect) {    !initialized && handleConnection(rect.width, rect.height);
if (!(path.extname(file) in fileTypes)) return false;
} else {                     var regex = "<.*(?!<\/option>";                 }
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
} finally {     if (_didIteratorError) {       throw _iteratorError;     }
var result = CSSLint.verify(value);         this.sender.emit("csslint", result.messages.map(function(msg) {
var h;   while((h = this._notifyConnections.pop())){ h.remove(); }
const app = new Koa(); app.use(function () {   ctx.body = 'Hello Pandora.js';
'Background color'        : 'لون الخلفية',  'Format'                  : 'النتسيق',
function Test262Error(message) {   this.message = message || ""; }; function assert(mustBeTrue, message) {     if (mustBeTrue === true) {
_modifyIconHeight : function(propValue, propOldValue)     {
this.upstreamListeners[type] = upstreamListener;             for (i = 0; i < this.upstream.length; i++) {                 this.upstream[i].on(type, upstreamListener);
case "FunctionExpression":             return new astExpression.FunctionExpression(node.loc, transform(node.id), transform(node.params), transform(node.body));
var consoleNode, msie,     NOOP              = 'noop',
var parts = this.getParts_();   for (var i = 0, part; i < parts.length; i++) {
import * as aN from './authentication'; import config from 'config';
return Session.get(stringId).profile.country.name +'' + Modules.client.searchJSON(geoJSON.country, Session.get(stringId).profile.country.name)[0].emoji;       }
Git.readFile('alle/europaweite-veranstaltungen-' + year + '.md', 'HEAD', function (err, contents) {       callback(null, err? {} : eventsToObject(contents, year));     });
module.exports = function unary(x) {   if (arguments.length!= 1) {
exports.exception = function (exception) {   console.log(exception); }
}   }   processItem(this.currentItem);
return x === null? NaN : +x; }
var regex = /%%|%(\d+\$)?([\-+'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuidfegEG])/g;     var a = arguments, i = 0, format = a[i++];
request.doSearch();
export class TargetWithNoDropResult extends DropTarget {   constructor() {     super();     this.didCallDrop = false;
_clearLoadingState: function() {              },
const currentRunning = String(event.target)      .replace(/(.*)\ x/, (match, p1) => `*${p1}* x`)     debug.log(currentRunning)
case 'createForeign':                                       return createForeign(db, action['table'], action).catch(softThrow);                                       break;
return await Promise.all(promises)      .catch(e => {
proxy, port, files, startPath: '/', logPrefix:'snuggsiツ' }
update: function(value) {         var options = {
}                 var oldWorkFlow = this.currentModel.get('workflow')._id;
initializeSignalHandlers() {     new SignalHandlerSingleton().addReceiver(       `${this.props.signalNameSpace}.FocusOnSelectableItem.${this.props.itemKey}`,
var constants = require("../../../src/constants"); var Augur = require("../../../src");
default:                         break;                 }
if (!context.flags.seconds) {       cli.error('Please specify a valid timeout value.', 1)     }
mainStory.error(`Invalid version for ${chalk.bold(pkgName)}: ${chalk.bold(version)}`);       throw new Error(`Invalid version for ${chalk.bold(pkgName)}: ${chalk.bold(version)}`);     }
let prev = getValue(this, name)         if (is(prev, value)) return this         setValue(this, name, value)
timer = setTimeout(function() {         if (!serialPortFound) {           return;         }
await store.dispatch(getInsights());     }     return { isServer, user, url };
it("Asynch", function(done) {     var toRun = function() {       var namespaceToUse = namespace || RUNTIME.namespace;
charset = parser.parseCharsets(3, 2, new CFFStrings(), true);       expect(charset.charset).toEqual(['.notdef', 8, 9]);
try {       viewValue = input.toString().trim();     } catch (e) {
}     fonts = labelData.fonts;     var labelFiles = new Array(fonts.length);
i++;  } });
export class Singleton extends Registration {   constructor(keyOrRegisterInChild, registerInChild=false){     super();     if(typeof keyOrRegisterInChild === 'boolean'){
jade.page_args = function () {     var page_args = window.location.search.match(/\w+=[\w|%|:]+/g);     var result = {};
if(matches){          suffix = matches[1]
} } CacheTL.prototype.get = function (key) {
return false;             }             return (value + "").length == this.field.length;         },
document.write('<script type="text/javascript" src="scripts/prototype.js"><\/script>');
set(contextName, contextDefinitions) {         const enabled = this.enabled;
current = ComputedStyle.borderMap[current];                 }
g, '').replace('#', ''));             }
progress(null, "Fetching repositories...");         CONFIG.github.repos.getFromUser({             user: user
console.log("registered new listener");
bar = "hello";
(function () {
$analyticsProvider.api.trackGoal = function(goalID, revenue) {                     if (_paq) {                         _paq.push(['trackGoal', goalID, revenue || 0]);
let nangle = normalize_angle(angle - rot1 + rot2);         return new Face(npos.x, npos.y, nangle);     }
for (let symbol of Object.getOwnPropertySymbols (attribs)) {                  let descrip = Object.getOwnPropertyDescriptor (attribs, symbol);                  Object.defineProperty (cls, symbol, descrip);
ret.image = 'android'       rep = ret.ua.match(/(Android|Adr)[ |\/]([.0-9]+)/i)       if (rep) {         ret.version = rep[2]
var angle = Math.acos(vector.dotProduct(vectorToReferencePoint) / (vector.r() * vectorToReferencePoint.r()));       return angle;
return!((typeof v === 'undefined')    || (v === null)    || (v === null)
this.moveStep = function(id, prev_id) {       var dataToBeSend = {'prev_id': prev_id},
pivot: 0.5,                         texture: {type: lng.textures.StaticTexture, options: {}}                     }
if (isList(as) === false) { return error.listError(as, catMaybes); }   if (isMaybe(head(as)) === false) { return error.typeError(m, catMaybes); }   const p = x => isJust(x);
var tests = []; for (var file in window.__karma__.files) {
var hasPath = vendorPaths[name],         isIgnored = vendorPaths[name];     return!isIgnored &&!hasPath &&!hasExternal;
if (res.status > 300) {             console.error('Error getting Auth0 users'+ res.status);             reject(res.status);           } else {
this.saveAndEncryptUserToLocalStorage(function(){         if(typeof callback == "function"){           callback();         }
return true;             case 'date':                 return '2015-0'+(idx+1)+'-'+(idx+14);
strokeColor() {         let color = colorAsArray(this.root.getElementById('strokecolor-option').value).slice();         color[3] = parseInt(this.root.getElementById('strokeopacity-option').value) / 100;
return {x: d.x, y: newY, color: pow.toString()};   } }
return 2 * p;       };
},   propTypes: {     filter: "Enable a filter for the menu. When this is enabled each menu item requires a name prop.",
var __executed = /\bot/.test("pilot\nsoviet robot\topenoffice");
if(!localStorage['tutorial-shown']) {  GAME.tutorial = new Tutorial(spawnPos)
scope.deleting = true;      scope.deleteClicked = true;
}             return contextData;
if (dojo.byId("debugbar_position").innerHTML!= "") {             frame = 0;         }
var ostatus=require('ostatus');
var WrapText = function (text, getTextWidth, wrapMode, wrapWidth, offset) {     var retLines = WRAP_RESULT;
let jake = require('../lib/jake'); let assert = require('assert');
FbxSkin.prototype.connectObject = function(obj) {
console.log(e)     }
this.offset = styleJson["line-offset"];             this.opacity = styleJson["line-opacity"] | 1;             this.width = styleJson["line-width"];
var addr;
if (!authToken) {     throw new Error('ERROR: Cannot find NOW_TOKEN environment variable')   }
import path from 'path';
if (outdated) {       module.hot.apply(function() {         console.error('Should not happen');         process.exit(1);
const basePath = file.split(/[/\\]/);     basePath[basePath.length - 1] = "";
createFlagSeries(highchart);     for (var i = 0; i < chartData.flags.length; i++) {
const a = prop()       expect(a.takeWhile()).to.flowErrors(a)     })
var token = jwt.sign({
if (result!== true) {         if (result === undefined) {           arangoHelper.arangoError("Collection error: " + result);
} customElements.define('project-loader', ProjectLoader);
areaid = this.id[cell2.id];    if(this.owner.flags.irowake){ cell.color = cell2.color;}   }
return format;         }
if (line.indexOf('author')!== -1) {         if ((info.author = parseAuthor(line.replace('author ', ''))) {             return true;
get R() {     return this._R;   }
}      shareholders.push(newShareholder);  }     }
traverse = decor!== false;         }         if (traverse === false) {           return;         }       }
socket.on('listening', () => {             socket.send(whoIsCommand, 0, whoIsCommand.length, 4321, ip);         });
onError(req, res, 'Operation is temporarily unavailable');     database.BeginTransaction(err => {         if (err) return onError(req, res, err.message || 'Database transaction error');
ListItemText,    CircularProgress,
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/flaming_humbaba-1334193679.swf",  admin_props : false,
const yAxis = new Vector3( 1, 1, 1 ).normalize();
innerHeight].join(); }
stopDrag(e) {
][parsed];   } else if (parsed) {     return String(parsed);
if (!matches) {           for (idx = 0; idx < index.aliases.length; idx++) {             alias = index.aliases[idx].toLowerCase();             matches = true;
if (isExpressionType(parentNode)) {             return '"' + node.value + '"';
if (callback) {             callbackID = `${this._uniqueMethodIdentifier()}_${methodName}`;             this._callbacks.add(callbackID, callback);
query = query.replace(/([(){}[\].^$|?+*\\])/g, "\\$1");         return new RegExp(query, "gi");
for (jj = 0; jj < data.join.length; jj++) {       var join = data.join[jj];
return this.use(route, handler, arguments[2], arguments[3], method);       case 5:
state.isTable = true     state.render.push(
oldSnapshot.push(this._currentSnapshot[i]);       }
break;    case rfb.encodings.copyRect:
return () => {                 document.removeEventListener(SLIDER_EVENT.MOVE, onMouseMove);                 document.removeEventListener(SLIDER_EVENT.UP, onMouseUp);             }
storage.getURL(id).then(function(url) {
const rootNode = findDOMNode(wrapper).children[0];     expect(rootNode.id).toEqual('heart');
function getDyno (client, appID, dynoID) {   return yield client.request({
} else {                                 if (self.compileOnBuild && self.fieldData.CompiledField) {
};                 break;             case 4:                 this.get = function (idx, out) {
return createIterable(() => {     for (;;) {       const { done, value } = iterator.next();
Button,   Box,
broadcast(message, fromSelf){         var mess;         fromSelf = fromSelf!== false? true : fromSelf;
arrayFromObject,     isArray,
} else {       capation = 'Complete';     }
let url = baseUrl + urlPath     return new Promise((resolve, reject) => {
throw new SyntaxError('Trailing characters: "' + str + '"');     }
if (changelogUrl) {                     console.log(`Opening ${strong(changelogUrl)}...`);
if (is_phylotree_active===false) {
polyfill = versionMatch && parseInt(versionMatch[2]) < 21;     } else if (userAgent.indexOf('Android') >= 0) {
xmlHttp.setRequestHeader('X-Algolia-Application-Id', this.applicationID);             for (var i = 0; i < extraHeaders.length; ++i) {                 xmlHttp.setRequestHeader(extraHeaders[i].key, extraHeaders[i].value);             }
const {       noActiveNotices,
console.log("Wrote: " + fileName);   }
if(executeUpdates) {                                  TrainingTreeUtil.ExecuteUpdate.query({id: $scope.rootNode.id}).$promise.then(function(treeStatus) {                     $scope.getAndDisplayTree();
return field <= (value1.getTime()) || field >= (value2.getTime());         case this.OPERATORS.dateOperatorIsBlank:
import {Parser} from 'expr-eval'; import {App} from 'website-examples/plot/app';
if (req.query.private) {     scopes.push('repo');
Posts.insert(data);   }
vjs.CurrentTimeDisplay.prototype.createEl = function(){   var el = Component.prototype.createEl.call(this, 'div', {     className: 'vjs-current-time vjs-time-controls vjs-control'
return cb(null); }
import * as React from'react';
if (options.add) {                         add_to_sprint(options, finalCb);                     }else {
.blur(function (e) {                     if (blurCausedByInputFieldSwitching) {
return doWriteOp(project,'setBranchHash', branch, oldhash, newhash, callback);
const PIPELINE_HEADER = `${V3_HEADER}.pipelines` function pipelineCoupling (client, app) {   return client.get(`/apps/${app}/pipeline-couplings`)
date.setMonth(date.getMonth() + part);    }    if (! isNaN(part = Number(to.year)) ) {     date.setFullYear(date.getFullYear() + part);
console.log('Connection state changed to', conn.connectionState);   }
import React, { Component } from'react'; import SearchFilterCollectionTag from './SearchFilterCollectionTag';
undefined, undefined, function (data, p) {           if (p === 404) {
if (this.stream) {       if (process.platform === 'win32') {         clearTimeout(this.stream);       } else {         this.stream.close();
if (!this.props.note) return;   if (this.props.note.encryption_applied) return;
subClient.on("message", (channel, message_str)=>{
const urlParsed = require('url').parse(request.url);   if (process.platform === 'win32') {
headers: {     accept: "application/json"    }
var navCharacters = helper.e(".nav-characters");     for (var i in array) {       var characterAnchor =_render_navCharacters(array[i].input.name, i);
layers[baseLayer].addTo(map);     if (baseLayer === 'Bing Satellite') contextLayer.addTo(map).bringToFront();     L.control.layers(layers).addTo(map);
if ( (msgHide = field && field.msgHide || opt.msgHide ) ) {                 msgHide.call(me, $msgbox, msgOpt.type);
Console.prototype.editGetText = function() {         if (!(this instanceof Console)) return;
return newNode;   case document.TEXT_NODE:
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/bean_bean-1334602769.swf",  admin_props : false,
Translator.FilterList = FilterList;
pem.can = _.union(pem.can, pemList);     self.setPem (target.qNum, pem);     reply (sprintf('%s 的权限添加成功!', target.userNick));
var last = list.length - 1;   for(i = 0; i < last; i++){    var child = this._getChildNode(node, list[i]);
for (var key in global) (function() {       return (context)[key] = (global)[key];     })();
label: this.startTimeText,                     renderer: Format.date.bindDelegate(this, this.startDateFormatText, false),                     exclude: this.isActivityTimeless
}, "DAS": function (cpu) {             util.panic("Execute (DAS) :: unsupported");
stores = require('stores'),       ProviderResources = require('./ProviderResources.react');
request.post(url, options, function (err, res, body) {     done(utils.error(err, res, body)   })
}     this.queue.receive(this.obj, patches);
options = options || {};   options.defaultValue = (options.defaultValue? options.defaultValue : c.SUPPRESS);   options.dest = (options.dest || c.SUPPRESS);
}       return false;     });
import Layout from "../components/layout" const BlogIndex = ({
ctrl.field = {};                          options.field.on("value", function(snap) {
console.log(message.text());       process.exitCode = 2;     }
this.setInputsInline(true);     this.setTooltip(Msg.MATH_NUMBER_TOOLTIP);   }
flareMapSrc: '/img/sunflare.png',  init() {   this.root = new Object3D();
return result;       } catch (err) {console.log(err)}     }     share.cmult = function (cst) {
mongoose.connection.db.collection(collectionName, function(err, collection){       if (err) { return reject(err); }
title: "www.luehangs.site",         description: "Test 11",
delete this[qx.OO.values[a[i]]];     }
if (VERBOSE)              if (!isValidSignature(req.header("X-iAdvize-Signature"), req.body)) {
if (text) {     return text.substr(-1, 1).toLowerCase() ==='s'? text + '\'' : text + '\'s';
if (rid)       return rid;
const reCMD = /^\/([0-9а-я\w\d_\-]+)/;
# A regular expression for date.   (?<year>\d{4})-    # year part of a date   (?<month>\d{2})-   # month part of a date   (?<day>\d{2})      # day part of a date
if (addr === 0xFF0F) return this._if = value;
import bind from "bind-decorator"; import { grpc } from "orbs-common-library"; import StorageService from "./service";
catch(err) {             result = {httpStatus: httpStatus.BAD_REQUEST, status: "failed", errorDetails: err};
return _Math.genPerpendicularVectorFrisvad( v );
Link, } from'react-router';
.argv; if(argv.v) tele.debug(console.log); tele.info(function(){console.log.apply(console,arguments)}); if(argv.port == 42420)
import React, { Component } from'react' import { StyleSheet, View, Platform } from'react-native' import colors from '../config/colors'
"frame": false,             "resizable": false         };         customConfig = customConfig || {};         utils.extend(config, customConfig);
throw new Error('This function should never be called!'); }
case LIST_COMMENTS_RESPONSE: {             const comments = action.comments;             const newList = concatList(comments,state.comments.list);
}     },     _onWindowBlur : function() {       this._hideCalendar();
if (message['nlpResponse']['result']['actionIncomplete'] == false) {          var alreadyAskedCount = 0;
for (var name in this.xhr.callbacks) {   if (this.xhr.callbacks.hasOwnProperty(name)) {    this[name] = function(name) {
lookup['ta'][d.panchayat_code] = true;                     }                     else if (d.task_assign === null) {                         lookup['ta'][d.panchayat_code] = false;
type: "bi.style_table",              color: BI.StyleTable.DEFAULT_CHART_SETTING.theme_color,              style: BI.StyleTable.STYLE1,              el: {
switch (assertNode.localName) {   case 'all-of': {    const asserts = evaluateXPathToNodes('*', assertNode).map(createAsserter);    return (xpath, contextNode) =>
return matrix[b.length][a.length]; }
fileTypes[dest][config][fileType].push(file);             }           }         }         var filesToUpload = [];
extension: 'docx'       });     case 'application/vnd.google-apps.spreadsheet':
cleanupDistStep         ], function(err) {             if(err) {                 grunt.fatal(err);
} else {                     debuggerStatementFunction();                 }
const isOpen = this.get("isOpen");         const pageX = event.touches[0].pageX;         const rootNode = this.get("rootNode");
function I1DChart() {     }     I1DChart.prototype._palette = Palette.rainbow("default");
}             emitter.addListener( _ref6, reject_handler );         }
case Actions.ResetState:   return initialAppState(reducer(undefined, { type: Actions.ReduxInit }), state);  case Actions.ToggleLoading:  default:
box(reqdiff, pubkey, keys).then(boxed => {               connection.send(JSON.stringify({
$('img', oThumbs).each( function() {     var sName = parseInt(this.id.replace('image-',''), 10);     $('option[value='+ sName +']', oSelect).attr('selected','selected');    });
module.exports = (function () {     'use strict';
return value;     }
/wireless/ig,         /(shop|store)/ig     ];
var target = e.relatedNode;
};         var showConfirmDialog = function() {
return _ENCODE_HTML_RULES[c] || c; }
var window = require(__dirname + "/../../lib/browser").windowAugmentation(dom); var document = window.document; var navigator = window.navigator = { userAgent: "node-js" };
var tiles = tileLayer.getTiles();             expect(tiles.anchor.toArray()).to.be.eql([1, -255]);             done();
var opts = {'type':value,'animation':'explode','useLite':true};      if(value == 'lines'){    opts.animation ='slide';
.then((conversations) => {       let conversationIds = conversations.map((conversation) => {         return conversation.convid;
class ToshihikoModel extends EventEmitter {     constructor(collectionName, toshihiko, schema, options) {         super();         this.ai = null;
function fib(n) {   if (n === 0 || n === 1)
getTagsIndex: function(callback) {         callback = callback || jsGen.lib.tools.callbackFn;         that.find({}, {
this.name = path.basename(this.name).replace(/^\.+/, '');
const compression = require('compression'); const bodyParser = require('body-parser');
console.log('releasing slug...');     return app.releases().create({
break;     case TRANSACTIONS_DELETE_REQUEST:
const h = ht.empty;         for (let i = 0, len = keys.length; i < len; ++i)             h = ht.set(i, keys[i], h);
for ( i=0, l=annotationStackFrom.length; i<l; i++ ) {         if ( annotationStackFrom[i]!= annotationStackTo[i] ) {     break;
return molecules;
export const userSetting = (menuItem, browserWindow) => {   createWindow(path.join(__static, 'preference.md')) }
export default ({mainStyle, address, balance, burnWallet, goBack, dollarDisplay}) => {   return (
return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];     case DIRECTIONS[1]:
this._nodes.set('header', value);   }   get content() {     return this._nodes.get('content');   }
trigger: function(event) {         if (this.__listeners__[event]) {
parsers.push(wv.data.parse);         }
fkeys = Object.keys(machbox.functions);  for (i in fkeys) {
placement: 'bottom',                 placeholder: 'Enter email...',
var adapted = adapter(fakeQunit);
var loaded = q.all(moduleLoads.map(function(ml) { return ml.promise; }));           allImports.then(function(astAndNames) {
}       this.errors[fieldName] = err;     }
return THREE.AnimationUtils.lerp_string_immediate;      }     }   }  }
return queue.await((err) => {       if (err) { return done(err); }
var DEFAULT_RPC = utilities.urlstring({     protocol: "http",     host: "127.0.0.1",
return     }
var self = this;         var ship;         ship = self.model.ship;
let id = uid()  subscribers.push({ id: id, fn: fn })  return id
token : ["text", "string", "text", "constant", "text"],             regex : "(\\[)(" + escaped("]") + ")(\\])"         }, {
client.putFile(file.path, path + filename, {   'Content-Type': filetype,
const openProModal = () => {     dispatch(openModal('UPGRADE_MODAL'));   };
behaviors: [],      onVisit: function(merchant, roomObj, target) {       if (target.race!== 'ogre') {
this.geometry.faces.push(new THREE.Face3(...indices))
return s.replace(/\/+$/, '').replace(/^\/+/, '/'); }
p = path.normalize(p);         var arr = p.split(/[\\/]+/);
import { Footer } from "./Footer.jsx"; import { Loading } from "./Loading.jsx";
import LayerManager from 'components/widgets/editor/helpers/LayerManager';
actual(function () {           assert.that(result);           done();
].concat(node.body.body)))     },
});   }
eM.eF = eF;         var eC = (function () {
}         return this._children.map((child, index) => child? this.prefix + index.toString(16) : undefined)            .filter(child =>!!child);
this.loadQueue = [];     this.onloaded(function() {       this.callback(this.getData());
callback = this.callbacks[id];         if (callback) {
componentWillReceiveProps(nextProps) {         this.updateOnOrDirty(nextProps.projectStudios, nextProps.myStudios);     }
var ModulesListingView = require('./ModulesListingView'); var _ = require('underscore');
var IOUtil = require('io/IOUtil');   var parsed = IOUtil.parseDelimited(data, opts);   return new LabelMapping({ name: opts.name || filename, mapping: parsed.data, defaultIndex: opts.defaultIndex, maxIndex: opts.maxIndex });
.then((volumes) => {           this.volumes = get(volumes, 'volumes');         }),
point,         basis,
nextData = data;       return;
{     self.obj.body.fixedRotation = self.fixedRotation.getValue();
export default function one(s, context) {     return new Init(s, context)[0]; }
const textOrientation = item.text.orientation;     const stack = itemStack[textOrientation];
var urls = _.difference(def.url.paths, aliases[name]);     urls = _.map(urls, function (url) {       var optionalVars = {};
try {       config[helperName].require        ? path.resolve(global.codecept_dir, config[helperName].require)
return matches; } functions.findRepeaterElement = wrapWithHelpers(findRepeaterElement, repeaterMatch);
$rootScope.$on('$routeChangeError', function handleMiddlewareRedirects(event, current, previous, rejection) {   var pattern = /redirectTo:([^(]*)(\((\{.*\})\))?/;   var match;
if (this[kState].closed)       return undefined;
var error = new Error('If you set the mode to "transit" you must also specify either a departure_time or an arrival_time');     if (typeof callback === 'function') {       return callback(error);
};             return json;
export const clickCounter = (state = 0, action) => {   if (action.type!== INIT_REDUX_OPERATIONS) return state;
if (!this.hasID(nodeID) || this.hasOwnID(nodeID)) {                                  this.nodesByID[ nodeID ] = node
var ModelGenerator = module.exports = function ModelGenerator(args, options) {     yeoman.generators.NamedBase.apply(this, arguments);
console.log(error);   }
message = message  .replace(/&/g, "&amp;")  .replace(/"/g, '&quot;')  .replace(/'/g, "&apos;")
it('should have a background gradient', () => {       expect(input.props.style.backgroundImage).toMatch(/^linear-gradient/)     })
onUnregister: Class.empty,   onUpdate: Class.empty,
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[57],{
return handleUndefinedAndNull(file.license)     } else if (file.license instanceof Object) {       return handleUndefinedAndNull(file.license.type)
this.X.gestureManager = this.GestureManager.create();       this.Y.registerModel(this.ActionButtonCView.xbind({
{                     self.project.deleted = true;                 }
);       default:
if (!zoneData) return null;   const co2Intensity = getProductionCo2Intensity(mode, zoneData);
var handleFocusChange = function() {     var _active = activeElements();
case actions.CREATE:       return step.createBinary();
Git.prototype.submoduleUpdate = function (args, then) {       if (Array.isArray(args)) {         this._getLog('warn', 'Git#submoduleUpdate: args should be supplied as an array of individual arguments');
adeModule.directive('adeUrl', ['ADE','$compile','$rootScope', '$filter', function(ADE, $compile,$rootScope,$filter) {
break;       default:
README.*`,   `**/react-docsreact-stylesreact-integration
type: og.video.type,             rel: [CONFIG.R.player, CONFIG.R.og],             height: og.video.height,
var tile1 = new maptalks.TileLayer('tile1', {             urlTemplate : maptalks.IMAGE         });
success: loginState => {               loginState = loginState.data;
if (utils.cellMaps.location[graffitiId]!== undefined) {         return utils.cellMaps.location[graffitiId];
} else {   Promise.each(Object.values(languages), language => language.build()); }
'save': ['ctrl+s'],     'play/pause': ['space'],
return injector.resolveDependencies();   }   function markAsApplyed( template ){
};     case `${ACTION_TYPES.CHECK_SERVICE_EXIST}_FULFILLED`: {       const serviceExists =!!action.payload;       return {
console.error('Database error:', error.message);       throw new Error('Database error:'+ error.message);     } else {
case 5:       (r = v), (g = p), (b = q)       break   }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_glove_metal_finger_piece1-1348197973.swf",  admin_props : false,
if (!chain && create) {   chain = newChain(chainName);  }
}); }; module.exports = ScriptsDoNotFlicker;
this.setSourceNodeId(vId);   } });
throw new Error("ellipse not yet supported");     }     clip() {
_allCompleted (tasks) {     for (let i = tasks.length - 1; i >= 0; i--) {       if (!tasks[i].available) {
});     this.redirect('/resume', {sheetObject: finalObj, template: this.state.template});
var path = this.processDataPath(dataPath);
hour = hhmmss[0] || 0;             minute = hhmmss[1] || 0;             second = hhmmss[2] || 0;             millisecond = hhmmss[3] || 0;         }
CONSTANTS.Dir_Top             ];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2010-03\/1268344207-8296.swf",  admin_props : false,
var targetClass,unclassified; function $HLMethodClassifier(){return $globals.HLMethodClassifier||(typeof HLMethodClassifier=="undefined"?nil:HLMethodClassifier)}
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-12\/proto_shrine_alph-1323999218.swf",  admin_props : true,
MonitorChrome.disconnect(errback); }
event.sub('location.refreshed', onLocationRefreshed);   };
arrayIdent = scope.reserveParam();           }           init = [];
Ext.example.msg('Button Click', 'You clicked the {0} button', btn);     }
throw new Error("Should not execute this test");             });
this.api.registerHook = (name, handler) => {     assert(typeof name ==='stirng', `钩子名称必须为字符串类型`);     assert(typeof handler === 'function', `钩子处理函数必须为函数类型`);
.replace(/'/g, "\\'")            .replace(/\{([^}]+)\}/g, "' + (_.$1 || '') + '") + "'")       )(data);
it('works', function () {       db.addCollection('items', {         clone: true
return false;                 }             }             if (Date.now() > (cacheFileMtime + cacheTime * 1000)) {
easeInBounce: function (x, t, b, c, d) {   return c - jQuery.easing.easeOutBounce (x, d-t, 0, c, d) + b;  },  easeOutBounce: function (x, t, b, c, d) {
download(options);       break;     case 'r':     case 'run':
});   if( /[\s<>!@#$%^&\*,.]+/g.test( config.db )){     throw new Error( 'Database name contains illegal characters' );
column_data = _cache[block_id];                     for (j = 0; j < limit; j++) {                         var value = values[j];
const path       = require('path'); const source     = require('vinyl-source-stream');
$tab_t.width(1 / $tab_t.length * 100 + '%');    }
jQuery.multimediaSupport = {};  var m  = jQuery.multimediaSupport,   vID = new Date().getTime(),
$scope.elasticsearch_dblist = function(query) {       words = query.split(" ");       query = $scope.ejs.BoolQuery();       var terms = _.map(words, function(word) {
getBinFromUrl(medias[nb].url, bind.filename, function (err) {    $$.totalDuration += medias[nb].length;
name: 'driver',                     fieldLabel: 'Driver',                     value: 'org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver',
throw new TypeError('equal', x, y); };
isGreaterOrEqualThan,   isNonNegative,
state.lastViewClassOrInstance = state.viewClassOrInstance;
while ( (m = rEscapes.exec(sLine)) ) {
var stop = mobx.spy(c => events.push(c));    doStuff();
element.getHierarchy().push(elements[i]);             if (layers[i].parent === undefined) {                 this.buildItemHierarchy(data,element, layers, layers[i].parent,elements);
return newState;  case 'SET_VEHICLES': {   const veh = Object.assign({}, newState.vehicles);   veh[action.route] = action.vehicles;
if(!updated) {                         zeros = this._zeroGenerator(newLen);                         oldData[i].data = oldData[i].data.concat(zeros);
let is_host_selector =           token.selector.startsWith(':host');
options = {      'source': getArgumentString(this.props.currentCommand, constants.specialCommands[constants.WALLET_033X]),
process.exit(1);         }
for (var i = 0; i < this.app3d.meshes["field"].length; i++) {                 this.app3d.meshes["field"][i].name = name;             }         } else {
drawGpx.enabled = function(_) {         if (!arguments.length) return Gpx.enabled;         Gpx.enabled = _;         dispatch.change();
filterChain.push(this.buildMethodFilter(proxy));         }         if (this.hasPathFilter(proxy)) {             filterChain.push(this.buildPathFilter(proxy));         }         return filterChain;
marginBottom: '4px',               fontSize: 16,
if(typeof data === "object") {          data = querystring.stringify(data);
while (pts.length >= 4) {           x1 = bx           y1 = by            bx = parseFloat(pts.shift())
function filterNotILike(value, append) {         filterILike(value, append)         if (append) {           return append(append)         } else {
var bestRect = bestLogo.foregroundRect;   for (i = 1; candidate = bestCandidates[i]; ++i) {     rect = candidate.foregroundRect;     if (bestRect.top > rect.top ||
type: 'GET',                 url: url + '?tags=&search=' + ex_kit.in_cp1251(text) + '&type_search=groups&incldead=0&sorting=0&type_sort=desc',                 cache: false,
case 'performance':       return performance(log, contentType);     default:
}; } util.inherits(H2183CompassInput, SerialInput);
if (process.env.ENV === 'production') {     Error['stackTraceLimit'] = Infinity;
}             else if (this[levelProp] && (!(this[levelProp] instanceof Array) && this[levelProp].implementsOrExtends('BaseEntity'))                 entity[levelProp] = this[levelProp];
}   }   get isGizmoVisible() {     return this._gizmos[0].isVisible;   }
Image.static.toHtml = function(image) {   var $el = $('<img>')
log(`ExponentConstants.deviceYearClass: is unimplemented on web.`);         return null;
var cancel = new Element('input', {'type': 'button', 'value': 'Cancel'}).setStyle('margin-right', "5px");     cancel.setStyle('margin-left', "5px");
for (key in presences) {     message = presences[key];     messageType = this._getMessageType(message.to);     this._handleResourceMessage(socket, message, messageType);
}     return __decorate([
'inspector': ['three-inspector', {value: this.bind('selected')}],           'app-ctrl': ['demo-app-ctrl', {value: this.bind('selected')}]
switch (association.nature) {                 case'manyToMany': {                   const arrayOfIds = obj[association.alias].map(related => {                     return related[ref.primaryKey] || related;
case 'ul':             return document.createElement('ul');         default:
equal(table.getTitleBody().style.width, table.getBody().offsetWidth + 'px', 'The title style "width" is the initial value');   table.addRow( {
var Prism = {  util: {
import { compose } from 'ramda'; import Avatar from '@material-ui/core/Avatar';
app.use((req, res) => {         res.status(404).render("error", {
it("should be compiled and applied to file multiple times", function(done) {         try
var GLBuilders = require('./gl/gl_builders.js'); var Style = require('./style.js');
applyTheme: YES,
const entity = this.refs.form.getData();     if (entity._added) {
return;             }
} else {         s = this.val.toString()
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-05\/npc_swoonerfly-1305238807.swf",  admin_props : true,
restoredMapping = restoreMapping(this, cmd.storedMapping);      return super.addMappingItems(mapping, restoredMapping);
export default class JassEventId extends JassEnum {}
metrics.trackIncrement);  }; DetailedEventPainter.prototype.softPaint = function() { }; DetailedEventPainter.prototype._prepareForPainting = function() {
case 128:    p = pref.replace(/"/g, '\\"');    v = Services.prefs.getBoolPref(pref).toString().replace(/"/g, '\\"');    result.push(`user_pref("${p}", ${v});`);    break;
app.utils.setSettings();    } else if (targetName === 'author' || targetName === 'description') {     app.utils.setTargetName(targetName);    } else if (targetName === 'useTabs') {     app.utils.setTargetName(targetName);    } else if ($.inArray(targetName, editorOptions)!== -1) {
ret = anchor.getAttribute('href', 4);        }       }
if (typeof max === 'object') {     max = length;   }
};       if (name == "qx.bom.element.Style" && (requireOpts.load || (opts && opts.load))) {         if (opts)
return 'N';     case 'nt_rain' :
it('should see paused file stream (no buffer)', function(done) {     husk(__filename)      .read({buffer: false})
export function getSong(guild_id) {   return client.lindexAsync(`guild_${guild_id}`, 0)
}, props);   Component.prototype.createEl.call(this, type, props);
azk.fail("agent already started");     } else {
SceneGraph.prototype.Traverse = function() {
inputEx.registerType("number", inputEx.NumberField, []); })();
constructor() {     super();     this.agentService = ContainerJS.Inject;
percentSpan.textContent = percentText;     const valueAccessibleText = this.tree._formatter.formatValueAccessibleText(value, this);
if (stream.match(/[^_*]+/)) {           return getTokens();
if (exports._best) return exports._best;   for (var i=0, k; (k = exports.preferred[i]); i++){     var transport = exports[k];
require("./diffs/revision-diff.jsx"); var PropCheckBox = require("./components/prop-check-box.jsx");
var orderedModels = order || toAdd;           for (i = 0, length = orderedModels.length; i < length; i++) {             this.models.push(orderedModels[i]);
service.find({dojoLeadId: dojoLead.id}, function (response) {               if (!_.isEmpty(response)) {
return engine; }
body,           icon: icon? icon: APP_ICON,           title,
session.source = 'foo this should not change';           app.__internals__.cache.set(baseMessage.sender.id, session);           return app.__internals__.cache.set(messenger.getCacheKey(baseMessage.sender.id), session);         })
var parsedHostHeader = parseHostHeader(req.headers.host, 443);             req.originalUrl = req.url;
import App from './Components/App';
invert_point: function(pixel) {         var abs_diff = this.x_pixels.map(function(elem) { return Math.abs(elem - pixel); });
if (typeof(AjaxUpload)!= "undefined") {       var info = {
if (root.WeakMap) {
if (result.implicitResults &&!executeOpts.resultSet) {         var processImplicitResult = function(ix) {           const resultSet = result.implicitResults[ix];
facebook: "kleinsch",       phone: "1231231234",
mPebble.set_time(date.getTime() - date.getTimezoneOffset() * 60000);
return function(elem) {                 if (comparator(elem, value, 0)!== 0) return elem;
require('./methods/query')(SpaceTime); require('./methods/add')(SpaceTime); require('./methods/same')(SpaceTime); require('./methods/compare')(SpaceTime);
var result = response;                 for (var i = 0; i < result.length; i++) {                     if (result[i].serialNo.match(self.serialNo)) {
}         case'm':
{      var answer = this.confirm(confirm_msg);     }
if (event.type === 'DELETE') {     return {
context.container.$setManager(context.lifecycleManager);                         var result = context.container.$setDirty();
}     }).then(() => {       set(this,'machineTypes', out);
tt._while.updateContext = function() {   if (this.state.inForHeader) return;   this.state.context.push(types.kw_stat);
var errors = require('./errors'); var Request = require('./request');
treeWorker.postMessage(tmpArr);       pointHelper = new PointHelper(lore, 'TestGeometry','sphere', {         pointScale: 10
.map(toUnmountPromise)
this.prototype.loadPluginMacros = function(plugin) {     for (let macro in plugin.macros) {       if (typeof plugin.macros[macro] === "function") {         this.macro(macro, plugin.macros[macro]);
while ((result = lines[lnIdx++])) {       if (result.indexOf("
return newMet;     };     PMethod.prototype.toString = function() {return 'fun... end'}
if (__DEV__) {   config.allowStartupFailure = true
removeHexPrefix,         isAddress,
}, function () {             callback.apply(this, arguments);
if (sources.len) {       sources.ids.forEach(function( id) {
function renderOptVElementToString(optVElement, isRoot, context) { }
function parseTerm(term, messages) {
that.sn = new SceneNode({       frameID : message.header.frame_id,
for(let i = 0; i < index; ++i) {       browser.tabs.remove(copy[i].id);     }
return '';       }
this._sendMessage('tell');             }         }         this._channel.addEventListener('internal', isLeaderListener);
options = {};     } else if (typeof options!== 'object' &&!(options instanceof HTMLElement)) {
onData: function(d) {      Series.zeroFill(d);      return d;
}         const { question } = this.state;
item.addNode  = function (layerNum,right) {   let lastLayer = layerNum === this.numLevels;
IfcSystemFurnitureElement: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},   IfcBuildingElementPart: {r: 1, g: 0.5, b: 0.5, a: 1.0},
class FileBranch extends FileTreeLeafObject {   constructor(file, cjbranch) {     super()     this.file = file
goTo.marker("11"); verify.referencesCountIs(7);
export class PropertyAccessor {     constructor(obj, propertyKey) {
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[57],{
return store.create(model, options);             case "update":
configurable: false,             get: function() {                 return _createdAt;
this.useRefTransfMatrix_loc = undefined;   this.useTexture_loc = undefined;   this.invertNormals_loc  = undefined;  }
return exists(this)? cloudinary.image(this.get(field.path), options) : '';   },   fit: function(width, height) {
var renameView = require("../views/renameView"); var contextView = require("../views/contextView");
var put = function(name, value) {                 var symbol = newSymbol(name, value);
return new paddle.TensorType(variable.type.lod_tensor.tensor);             default:
var conf = require('ember-cli/tests/helpers/conf'); var Promise = require('ember-cli/lib/ext/promise');
};                   if(data.user.teams == ["1"]){                     data.user.teams = [];
var soajsUtils = require('soajs').utils; var colName = 'cicd';
}       function find(id) {
if (!(mainId in cache)) {     def = cache[mainId] = core.createResourceDef(pathInfo.config, mainId, isPreload, parts.pluginId? pathInfo.path : undef);     def.url = core.checkToAddJsExt(pathInfo.url);
var async = require('async'); var BitcoinRPC = require('bitcoind-rpc');
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
const rmsie11 = /(trident)\/[\w.]+;.*rv:([\w.]+)/;  const rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/;
id = m[0];       tok = app.ids.get(id);
this.transparent = true;         this.blending = BLEND_TYPE.ADD;         this.depthTest = true;
IDBTransaction: window.IDBTransaction || window.webkitIDBTransaction,         IDBKeyRange: window.IDBKeyRange || window.webkitIDBKeyRange     }
try {     const { stdout, stderr } = await execPromise('git', ['pull'], { cwd: localDir });     const { stdout, stderr } = await execPromise('gmake', [makeParms], { cwd: localDir });     stderr = undefined;
emptyMessage: React.PropTypes.string,   messages: React.PropTypes.arrayOf(React.PropTypes.string),   label: React.PropTypes.string,
if (sps_max_sub_layers_minus1 > 0) {    for (i = sps_max_sub_layers_minus1; i < 8; i++) {
case ACTION_TYPES.FETCH_RECORDS_SUCCESS:             recordType = action.payload.recordType;
var newNode = kNode;     if(typeof newNode === 'undefined'){      newNode = new knalledge.KNode();
assert.throws(function() { Buffer.concat(null, null); }, TypeError); var buff_1 = new Buffer('asd');
], function (err) {     if (err) logger.error(err);     return cb_();    });
module.exports = function() {  do {
console.log("finished_with_success");          assert(error_msg === expected_error);         assert(warnings.length == 0);
var appjs = require('./build/Release/appjs.node'); var Extend = require('util')._extend;
var child_styles = this._getChildStyles(style_tr, stream);     return List.map(child_styles, function(child_style){       return new TableCellGenerator(child_style, this._createStream(child_style));
generalSettings: {             jspmConfigFile         },
function isStatic (ext) {   return extensions.indexOf(ext) > -1
}; GridBroadphase.prototype = new GridBroadphase(); GridBroadphase.prototype.constructor = GridBroadphase;
model: 'Touch Pro2'     }, {       regEx: /HTC[_| ]Touch[_| ]Pro/i,       model: 'Touch Pro'
self.addEventListener('push', function(event) {   var notificationOptions = {
operations = ['add','remove'];     }     else if (type ==='map') {       operations = ['add','remove'];     }     else if (type === 'counter') {
return wrap(text, prefix, firstPrefix, '\\\\'); }
this.createOrUpdateKeenSession();         var ctx = window.contextVars;
count: model.count,   get: model.get };
window.React = window.parent.React = React; const reactContainer = document.createElement('div');
if (!position) {       const bottom = height + this.element.getBoundingClientRect().bottom
yield fork(getGeneralSettingsWatcher);
} else {           dataLayer.push({ event: 'vic-authenticated' });         }
switch (false) {           case typeof o!== 'undefined':             enc._pushUndefined();
container.appendChild(ul);       document.body.appendChild(container);       setTimeout(function(){
}; export { AttributeNode }
boundedComponents = [],     disableRenderIndexKey = false;
SDK.TracingModel.Process = class {
var type = _.find(schema._tests, { name: 'integer' })? 'integer' : schema._type;         extension = {             type: type
return true;     } catch (e) {     return false;   }
}).bind(this));       }
propTypes: {       models: React.PropTypes.instanceOf(Backbone.Collection).isRequired,
return parseFloat(win.getComputedStyle(animTarget).opacity); }
start: function (options, callback) {         options = options || {};
var comment = parse_XLNullableWideString(data);
originalParamContext = pms.parameterContext;
window.a = { 'b': { 'c': new Klass } };     var result = find.byKind(Klass);     var expected = ['window.a.b.c -> (object)'];     deepEqual(result, expected, 'Klass instance');
} else {     api.sendMessage("hms.space fucked up. Blame @jordon wing.", message.threadID);
this.serializeForm()     target.classList.add('loading')
.progress(function(buff){             console.log(buff.toString());         })
return err;                             } else {
return true;   }   if (this._frame)
if (require.main === module) {     main(); }
return false;             case Hammer.TOUCH_END:
setTimeout(cycle, 500);
var tr = function(x) {              var xs = numeric.div(x,that._DataAspectRatio);             var p = that._transform[0]([xs[0],xs[1],xs[2],0]);             return [p[0],p[1],p[2]];
withMeta,     networkStatus,
render() {     const { loggedIn, loggedInUser } = this.props;      return (
var bads = [];  for (var word in words) {
const EventListing = ({ website, name, start, end, key }) => {   return (
}                             } else if(flag === 'ink-fv-confirm'){                                  }
this._rampLowPercentage = 0.02;     this.output = p5sound.audiocontext.createGain();     this.control = new TimelineSignal();
if (typeof Npm!== 'undefined') {
'use strict'   console.log(`${script.name} v${script.version} by ${script.author}`)
.replace('$date', date);             client.hgetall(key, function(err, hash) {
}); FOAM( {
else if (this.enum && this.editable.value) {       if (!this.dom.select) {
var redrawCharts = function () {         d3Selection.selectAll('.grouped-bar').remove();
addItemAt(item, index = this.items.length) {     var items = this.items;     index = Math.min(items.length, Math.max(0, index));     items.splice(index, 0, asItem(item));
adeModule.directive('adeEmail', ['ADE','$compile','$rootScope', '$filter', function(ADE,$compile,$rootScope,$filter) {
'Viewed Page': 'Viewed Product Detail',       'Viewed Product Detail': 'Clicked Product',     };     _eventManager.addCallback(['on', 'event', (event) => {
parseInlineTableNext () {       if (this.char ==='' || this.char === '\t') {         return null       } else if (this.char === Parser.END || this.char === '#' || this.char === '\n' || this.char === '\r') {
function playSong(_t, player) {   player.getMediaControl(player.mediaControl).playSongAtPosition($(_t).data('position')); }
.ticks(this.ticks, this.tickLabel);     this.colors = scaleCategory1;     this.keyFunction = ((d) => d.x);
}, this)         },         update_children: function(old_list, new_list) {             this.do_diff(old_list,
scope.$watch('component.value', function (newValue, oldValue) {                              if (scope.data[overrideId] === newValue) {
throw e;     }
document.addEventListener('DOMContentLoaded', () => {   Promise
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-09\/artifact_mirror_with_scribbles_piece1-1348251336.swf",  admin_props : false,
else       return 0;   },
const hexToAccount = (prefix, account) => prefix + '0x' + account.substring(2).toUpperCase() const conditionToHex = (condition) => '0x' + Buffer.from(condition, 'base64').toString('hex')
await display.append_javascript( execute, context.output_area, context ).then(                             ( r ) => debug( "Output appended.", r )                         );
} } export default PickingBehavior;
for (alpha = 0x0430; alpha <= 0x044F; alpha++) {
if (regex.match(paramRegExp)) {           regex = regex.replace(paramRegExp, "([^/]*)$1");           params.push(param);
case 'graphql':       graphql = stashedSpecs.graphql = stashedSpecs.graphql || {};       graphql.path = graphql.path || '/graphql';
"Hamster.NOTE_E": 8,                 "Hamster.NOTE_F": 9,                 "Hamster.NOTE_F_SHARP": 10,
var alasql = require('..');  }
});         dojo.forEach(groupNames, function(groupName) {             this.addTemplates(templates, panel, groupName, i);
export default function computeNormal(vertices) {   var v, vl, f, fl, face;
e = '--ecma4'           break       case 'ecma6':           e = '--ecma6'           break       case 'ecma7':           e = '--ecma7'
Object.keys(typesObj).forEach(v => {     targetObj[typesObj[v]] = function (config) {
}                     return queryString;
if (!Object.assign) {     var assign = function (target, source) {       var n$ = Object.getOwnPropertyNames(source);
value = value.replace(/([a-zA-Z0-9\-/]+)(?=\s*:)/g, '"$&"');
default:      return mxn.Mapstraction.ROAD;    }
}   if (line) {    ctx.strokeStyle= data.datasets[i].mathLineStrokeColor? data.datasets[i].mathLineStrokeColor : config.defaultStrokeColor;
});         $element = $('<span><div class="inner"></div></span>');
curren:"Währungssymbol",  yen:"Yen-Zeichen Nyuan-Zeichen",  brvbar:"Unterbrochener Balken\nUnterbrochener vertikaler Balken",
for (j = 0; j < 4; j++) {                                 child = tile.children[j];                                 if (child) {
scPos = pos;                 alignment.scLengthOnRef += c.len;
webSocket.onopen = e => {       setWebsocket(webSocket);       console.log(e.data);
var name = new ContactName();     var j = 0; while(field = nameFields[j++]) {         if (moz[field[0]]) {
try {evaLUAted = eval(args)}             catch(err) {evaLUAted = err.message; console.error(err.stack)}             let overall;
cwc.soy.SelectScreen.style({ 'prefix': this.prefix }));     this.styleSheet = true;   }
{ run: function() {       var self = this,           stream = new FakeStream(),
import { eventBeforeSend, eventBeforeReceive, eventSend, eventReceive } from '../shared.js'; import ItemDrag from './ItemDrag.js';
asyncTest( "#9532: Need a way in Menu to keep ui-state-active class on selected item for Selectmenu", function( assert ) {  var element = $( "#menu1" ).menu(),
if (this.showingMenu) {                         this.menu.$options.forEach(function(index, value) {                             if (!$option) {
if(_undo_command_stack.length > 0) {     command = _undo_command_stack.pop();     _undo_commands[command.id].pop();
for (var i=0;i<data.length;i++){      $("<li class='imageItem'><a href='#'><span class='imageTitle'>"+data[i].title+"</span> <span class='imgURI'>"+data[i].uri+"</span><\/a></li>").appendTo(".az.inner.textImageList >.list");     }
var numWithoutValue = /(?:\s|^)(\.?\d+\.?\d*)(?![^(]*\)|\w|%|\.)/gi;   if (/^[-a-zA-Z0-9()./]*,/.test(value)) {     value = value.replace(/(?:,)(?![^(]*\))/g, '');
this.renderList();             } else if (this.options.display === 'form') {                 this.renderForm();             } else {
if (_.has(args,'server_host_override')) {     _.merge(opts, {       rejectUnauthorized: false
case UserConstants.FETCH_SUCCESS: {       const { user, unnamedUserMessage } = action       const users = [...state]
i = 0;   currentOctave = 0;     for (i=0; i<whiteNoteCount; i++) {
orsRouteService.addHeightgraph = (geometry) => {             const heightgraph = orsObjectsFactory.createMapAction(-1, undefined, geometry, undefined, undefined);
path = DocObject.getRelativeIdentifier(path);   doc = new Document(path, className, 'document');
}     case 'SET_RATING':
return lastIndex; } Quill.registerModule('undo-manager', UndoManager);
this.setState({ showSubmitExpense:!this.state.showSubmitExpense });   }
const url = config.url;     const encoding = typeof config.encoding!= "utf-8"? config.encoding : "utf-8";     proj4.defs([
throw e     }
import LoginForm from './login-form';
import dat from 'dat-gui'
console.log("failed to insert match from scanApi");                 done(1);             }
if (updated.label) {                 checkObjectType('label', data.label);                 copy.label = data.label;
token : "rparen",         regex : "}",         next:   "start"
if (!_.isString(value) &&!_.isNumber(value)) {                 value = JSON.stringify(value);             }
.map(sourcePath => path.join(projectPath, sourcePath))              .filter(sourcePath => filePath!== sourcePath);             args = args.concat(paths);           }
}           return _results;         case 'Op':
if (parts.length === 2) {     if ((match = parts[1].match(/^<([^>]*)>$/))) {       directObjectType = match[1];
function update_notebook(changes, gistname, more) {         function add_more_changes(gist) {
initStoreState = dva._store.getState()         } else {
});         } else if (status === 'Stopped') {           done();         } else if (res.status === 'KILLED_BY_TIMER') {
newvalues = this.dialog.getValue();    this.datatable.updateRow( this.selectedRecord, newvalues );
async.each(addedRecords, function(record, next){     if (this._isMapping) {      var values = {};
var cachedContrailListModel = cachedData['dataObject']['listModel'],                 cachedContrailListModel = cachedData['dataObject']['listModel'];
}         return false       case OBJECT_TYPE_WATERMELON: {         const watermelon = this._cacheFood.get(object.uuid)         if (watermelon) {
onLoad: function(model, relation)   {
handle.append('path')      .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle')
}) test('disables slider', async () => {   await page.setStep(1).setMin(0).setMax(100).setValue(50).wait
} catch(e) {    this.AddError(e.Message, e.useEndLineNumber);   } finally {
action = args[0];         }         if (typeof args[1] == 'object') {             date = args[1];
}; });; gantt.directive('ganttScrollManager', function() {
if (layout instanceof VertexLayout) {         var vertexPosition = layout.get('position');         result += Math.round(vertexPosition.x) +'' + Math.round(vertexPosition.y);       } else if (layout instanceof PortLayout) {
import {     concat,
let parts;       parts = /^(a|an|n)(\.\.)?([1-9][0-9]*)?$/.exec(formatString);       if (parts) {         let max = parseInt(parts[3]);
var store = model.localStorage || model.collection.localStorage;   var resp, errorMessage;    try {
'use strict';
if (link) link.setAttribute('href', binURL) if (gistID.indexOf('/') > -1) gistId = gistId.split('/')[1] loadFromAPI(gistID)
catch (e) {                     placeAfter = placeholderIndex < thisIndex;                 }                 if (placeAfter) {
Meteor.startup(function() {  Session.setDefault("height", 900); }
import { register } from '..'; afterEach(() => cleanup()); function registerTestPlugins() {
export const setVisibilityFilter = text => {     return {
const loggerClass = require('artzlogger'); const logger            = new loggerClass({timeStamp: moment(new Date).format('hh:mm:ss:')}); exports.run = (client) => {     logger.info('May is ready to use');
postContextLineBegin=idx;      for (i=idx+1; i<body.length; i++) {       ch = body.charAt(i);       if (ch == '\n' || ch == '}' || ch == ';' || i == body.length-1) {
}     }     return '';
let info = {                 recipient: recipient,
function (sandbox, controlsPlugin) {         this.sandbox = sandbox;
var clear = function(){         if(window.performance && window.performance.clearResourceTimings){             if(conf.haveAjax&&conf.haveFetch&&conf.ajaxLength==0&&conf.fetLength==0){                 clear()
timezones: moment.tz.names(),         upload_quota: page_params.upload_quota,         total_uploads_size: page_params.total_uploads_size,     });
fObj=fObj+"}";  var regexed = regexImports(fObj);
name: 'coverage',     value: Joi.string().regex(/^[0-9]+%$/),   }));
throw "getValueFromWidget: " + this._renderType + " not supported!";       }
this.importDocument = function(documentEl) {     this.reset();
} else {    initialText = '';   }
console.log('WidgetName - postCreate');
class P extends React.Component {     constructor() {         super();         this.bind();
angular.module(PKG.name + '.feature.hydrator')  .controller('AdaptersDetailLogController', function($scope, AdapterDetail) {     $scope.hydrator:cdap-ui/app/features/hydrator/controllers/tabs/log-ctrl.js     $scope.loadingNext = true;
super.componentWillReceiveProps(props);         this.data = props.data;         this.prepareChildren(props.children);
Mongo.Collection = {};
var zt = require('../lib/zt/zt.js');  }    var NUMTESTS = 10000;
part = bits.splice(0, 8).join("");         result.push(String.fromCharCode(parseInt(part, 2)));
use: params.use? params.use.replace('gfw_','') : null,             useid: params.useid,
pull(options, stdout) {     options = options || {};     return async(this, function* (notify) {
model.when('size', function (size) {       svg.attr('width', size.width)
return this.success({name: '新增成功！', url: '/admin/channel/index'});       case 2:
result = JSON.parse(result);                 if (result.code == 100000) {                     res.reply({
var i, ii,         files;
};       for (let p in props) {         iframe.setAttribute(p, props[p])       }
console.log(domain_name)   pubsub_client = new Faye.Client(pubsub_server_url+'/pubsubhub', {
var width = 0;         for (var i = 0; i < colspan; ++i) {           var colWidth = px.pixelify(this.colWidth[colIndex + i]);
getUserElementFieldSet();         }
}                 case "string":
"==": "moveTabToNewWindow",             "g>": "moveTabToNextWindow",             "u": "undoCloseTab",
var ua = navigator.userAgent.toLowerCase(),    match = /(webkit)[ \/]([\w.]+)/.test(ua) ||     /(msie) ([\w.]+)/.exec(ua) ||
return update(state, {         items: { $push: [evtUuid] },       });
const { img, x, y, width, height, repeat } = this;     if (repeat ==='repeat-x') {
for (let i = 0; i < jobs / batch; i++) {    for (let job of yield queue.take(batch)) {}   }
extent: [-13884991, 2870341, -7455066, 6338219],   source: new olSourceImageWMS({     url: 'http:
function assert(b, err) { if(!b) { throw err; } }
FileParser,   cleanSlug,
}   }   async onIrcLine(ircUser, line) {
errors = require('../errors'),     i18n = require('../i18n'),
var verifyPropTypes = require('verifyPropTypes');
color.fromNamed = function(color) {   var el = document.createElement('div');
ignoreHTTPSErrors: true,       headless:!config.debugWindow     },
'<oppia-text-input-html></oppia-text-input-html>'));     var callBack = function() {};     pps.init(callBack);
layout = translate( match[ 1 ], layoutTranslations );    }    if ( ( match = new RegExp( '(' + layoutVersions.join( '|' ) + ')\\/(\\d+)' ).exec( ua ) ) ) {     layoutversion = parseInt( match[ 2 ], 10 );
this.isLocked = function (name) {         if (!name || typeof name!=='string') {
return create(appId, varName, devValue, liveValue, cb);       case "read":
case "fake":             assert(ep.protocol === "fake", " Unsupported transport protocol");
} DashboardAssistant.prototype.setup = function() {
statful.timer();         expect(util.addMetricToQueue.calls.count()).to.equal(0);     });
} else {                      if (typeof selector == 'object') {
getActiveDelegates: angular.noop,       getDelegateByUsername: angular.noop     }
var originalPosition;   var position = {
import { Profile } from '../../components/profile'; import { DashboardContainer } from './style'; import { getEverything } from './queries';
import FormControl from '@material-ui/core/FormControl'; import { withStyles } from '@material-ui/core/styles'; import TextField from '@material-ui/core/TextField';
switch (action.type) {     case SET_DEBUG_FLAGS: {       const obj = Object.assign({}, state, action)       delete obj.type
const policy = require('../protocol/policy'); const util = require('../utils/util');
return false;         case this.OPERATORS.dateOperatorInTheLast:
return someValue!== undefined && someValue!== null && someValue!== 'undefined' &&       (typeof (someValue) ==='string'? someValue.trim().length > 0 : true);   },
return req; } Client.prototype.requestStream = function(serviceName, data, opts) {
log().info('Updated all tenants');         });     });
if (rule.isApplicableAt(corpus, site)) {             that.rules[rule.key()] = rule;
})) function func() {     this.name = 'yeyan1996'
for (jj = 0; jj < data.split.length; jj++) {       var split = data.split[jj];
$('a#file-upload').click(switchToImport);         $(document).on(qdb.MSG_QUERY_DATASET, function (e, m) {             divExportUrl.val(qdb.toExportUrl(m.query));
default:     throw "unhandled ControlCommand: " + evalCommand;    }
canvasParent, renderer, canvas, scene, camera,             render, animate, add3DObject, invalidate,
qualityChange(event) {     this.trigger(Clappr.Events.PLAYBACK_HIGHDEFINITIONUPDATE)
$('#package').val($.base64.encode(params));                 evt.preventDefault();                 $('#false-aws-login-form').submit();
msie: 1,         version: ua.match(/msie ([\d.]+);/i)[1]       };
map: React.PropTypes.object,         fluid: React.PropTypes.bool
var periodicRender = function() {                     this.render();
process.on('unhandledRejection', (error, promise) => {     console.error('Unhandled promise rejection', {error, promise});     process.exit(1); });
if (templateElementNameFromCustomElementName.hasOwnProperty(tag)) {                     element.appendChild(document.importNode(templateElementNameFromCustomElementName[tag]].content, true));                 }
case actionTypes.other.DECLARE_COUNTER:                     action = new Action.Other.DeclareCounter(data.name);                     break;                 case actionTypes.other.DECLARE_VARIABLE:
if( ( match = block.match( /^\$(\w+)\s*=\s*(.+)/ ) ) ) {           scope.setVar( match[1], this.parseExpressions( new Scanner( match[2] ), scope ) );
else {                          log('Node: %s was created.', path + '/ids/' + consumerId);                          cb();
return oResourceBundle.getText("invoiceStatusA");     case "B":
import { Heading, Subheading } from '../shared/Typography'; import { button } from '../../utils/styles';
isMove = true;             x = e.pageX;             y = e.pageY;             xel = x - currentPhoto.offsetLeft;
log.error('Are you sure this is a Sails app?');   throw new Error('Are you sure this is a Sails app?');  },
search = "";
}          match = '/<\/?[^('+notmatch+')]+>/gi';
case 'h':      hour = time.getHours() % 12;      if (hour!== 0 && hour < 10) {       hour = '0'+hour;
if (plugin.schema) {         console.log('Normalizing event using plugin schema', JSON.stringify(plugin.schema));
},     setValue: function(value) {         this.el.find('textarea').get(0).value = value;
const parentNode = node.parentNode;     diffArray(oldItems, newItems, () => 0).accept({
params.tags_autocomplete = $scope.list_data.tags;                 params.event_track.tags = $scope.list_data.tags;             }
for(i = 0; i < _endKeyFrames.length; i++) {     kf = _endKeyFrames[i];     kf.frame = _maxKeyFrame - kf.offset;
oldLambdaNames.forEach((name) => {
} else {       names = combinations(name);       levels = [];       for (var i = 0, l = names.l; i < l; i++) {
} else {                   }
}  this.renderBufferImmediate = function () {   state.initAttributes();
pass = false;     }     this.assert(pass, "Expected all elements to match.");
var path = require('path'),     mkdirp = require('mkdirp'),
}); var map = new ol.Map({   center: new ol.Coordinate(0, 0),
is_editable = true;     } else if (is_admin) {
else if(noteCount > 3){     throw new Error("This bar is full already!");    }
import * as Logo from 'components/logos' import React from'react' import { borders, colors } from 'theme'
setAutocommitQuery: function(value) {       return "SET autocommit = " + (value? 1 : 0) + ";"     },
v = old[k];           if (!(k in val)) {             this.realRemove(k);
case "weights":             clips = this._parseAnimationSampler(samplers[channelDef.sampler], false);             layers = [];
for (var i = 0; i < gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS); i++) {       var name = gl.getActiveUniform(program, i).name;       program.uniforms[name] = gl.getUniformLocation(program, name);     }
app.listen(app.get('port'), function () {   console.log('App is running at port', app.get('port'));
var EMA = require('./EMA.js');
consumerTag = ok.consumerTag;   });
let listingHash = yield call(getListingHash, listingID)         args = [listingHash, convertedNumTokens, listingID, data]         yield call(sendTransactionSaga, registry, methodName, args)
import ToastsActions from './ToastsActions'; import app from '../lib/app';
var _getErr = function (s7err) {         if (Array.isArray(s7err)) return new Error('Errors:'+ s7err.join('; '));
var Rotate = function (tileXY, direction, originTileXY, out) {     if (out === undefined) {
, remove: function (e, direction) {       if (this.$input.is(document.activeElement) || this._disabled || this._readonly) return
this.ptr-=3;  t=this.dstk.get("$error");  if (t instanceof Function) t.call(this); else this.stk[this.ptr++]=t;  this.stk[this.ptr++]="command";
this._file = file;             }             this._children = correctInherit(SpecificChildren, children);
if (!condition) {         throw new qx.dev.unit.AssertionError(comment, failMsg);
const conn = await db_open();   let channel = new BroadcastChannel('reader');   await activate_feed(conn, channel, feed_id);   conn.close();
} } function expandInlineDirectives(directives, lines) {
import { h } from 'preact'; import Page from '../Page.jsx';
composite: composite,  list: list,  xml: xml,
throw new SyntaxError('"' + str + '" contains no units');     }
})     if (syncOaks instanceof Error) {       throw syncOaks;
var server; function start() {  sessionMgr.init();
debuggerStatementFunction()     });
compileMode: "async",         module: {
} else {             doc.write( echo.arguments[i] );         }
log(FAILURE + EMPTY + overallFail + " Failures");                 break;             default:                 status = "pass";
self.topIndex = topIndex;         }
event.stopPropagation();                     self.start(event);                 };
throw new Error("For not all values in the array " + data.val + " is the property " + forChild.val + " of type " + types.join(' or ')); };
return false;         var touches = event.touches && event.touches.length? event.touches : [event];
const avatar = [].concat(avatars)[0];       if (avatar) {         this.setState({
);     _templateObject_e5e8e0e8e0e8e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0
Dom.addClass(nLi,"embassyAction");      bbtn = document.createElement("button");      bbtn.setAttribute("type", "button");
return console.error('Topic cannot be undefined');   }
$reel.trigger('fractionChange', Number(ix));       assert.equal( $reel.data('value'), it, 'Passed '+ix);     });     QUnit.start();   });
﻿function isNull(value) {     return typeof value === "undefined" || value === "unknown" || value === null; }
noDeleteVar: function () {         var rx = /delete ([\w$_]+)(?!.*delete [\w$_]+)/;
if (msgType =='shortvideo') {             atts.push({
dataRows.each(function (row) {                         row.$$('td').get(1).getText()
if (_res && _res.clearCookie) {     opt = path? { path: path } : undefined;     _res.clearCookie(name, opt);
}     $(function () {         var header = $("meta[name='_csrf_header']").attr("content");
}     return valid && mxGraph.prototype.isValidConnection.apply(this, arguments); }
"FS type":"",     "Get Pool of my/group's resources":"",     "Get Pool of resources":"",     "Graphics":"",
if (allowMultiple) {                 tempArray = cron[4].split(',');                 for (i = 0; i < tempArray.length; i++) { tempArray[i] = +tempArray[i]; }
import { Feature } from '@common-stack/server-core'; export default new Feature(authModule);
}   return instr.replace(/\&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');   };
case "content": {           this._addSlot(propValue);           break;         }         default: {           console.warn(`${propKey} is unknown`);
_extend = oj.$.extend   function _has(obj, key){return ObjP.hasOwnProperty.call(obj, key)}
actual = Buffer.concat([actual, chunk])       callback()
if (overlap.y === 'inclusive') {       t.vertical = overlap.y     }
else {       callback({error: 'Grant: missing or misconfigured provider'})     }
if (textStatus ==='success') {                                  self.remoteId = data;
var scanline = slice.call(bytes, begin, end);       literals += '\x00' + fromCharCode.apply(null, scanline);
if (id === null) {     this.set('_id', value);     return value;    } else if (String.startsWith(id, prefix) &&!String.startsWith(value, prefix)) {     this.set('_id', value);     return value;    } else {
var needsShy = document && (function() {   var testEl = document.createElement('div');
mChainCount[ i ] = modelChainCount;             for( j = 0; j < modelChainCount; ++j ){                 cModelIndex[ j + chainOffset ] = i;
if ($document.find('html').eq(0)) {                  const html = $document.find('html').eq(0);
try{         const _settings = JSON.parse(data)         if (_settings.rpcSettings.rpcHost === '' ||
return 'W';     case 'fog' :
anychart.VisualBaseWithBounds.prototype['height'] = anychart.VisualBaseWithBounds.prototype.height;
let payload = tryParseJSON(payloadString)     if (payload) return payload
armBuild();                             break;                         case 'x86':
const componentName = ReactComponent.displayName || ReactComponent.name ||     (/function ([^(]+)?(/.exec(ReactComponent.toString()) || [])[1] || 'Component';
return;     }     for (let i = 0; i < this._lookahead.length; i++) {       this.queue.push(this._lookahead[i]);
scaleVertically(size) {         return react_native_1.PixelRatio.roundToNearestPixel(size * verticalFactor);     },     scaleWithAverageRatio(size) {
export default [   [     ['pagi', 'pagi', 'tengah hari', 'petang','malam'], u,     ['tengah malam', 'pagi', 'tengah hari', 'petang','malam']
'available for your system. Please install a supported C++ compiler and reinstall the module \'uws\'.');         throw new Error(-1);     }
if (sDisplayShape === AvatarShape.Circle) {    sDefaultIconPath = Avatar.DEFAULT_CIRCLE_PLACEHOLDER;
var isBrowser = typeof window == 'object'; var fullTest = isBrowser ||!process.env.AJV_FAST_TEST;
if (this.token === this.tok.T_LIST) {       var assign = null;       var isInner = this.innerList;
$(document).unbind('click', clickHandler);                 }
export class Transient extends Registration {   constructor(key){     super();     this.key = key;
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
this.checkboxRender = (value, label) => {             const { columnHeight, lineHeight, columnBorderWidth, colAlign, col: { columnAttr = '', editor }, } = this.props;             let justifyContent = '';
offset = step * offset;      for (i = 0; i < len; i += 1) {       L[i] = (step * i + offset).toFixed(dp);
{                     if(isNull(data.error) && data.acknowledged === true)                     {
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
createPackage() {                     this.dialogList.state.dialogFormVisible = true;
document.forms[0].partialCountPeriod.value = "";
)       default:
data.toTime = toTime;         $("#chart").html('<div align="center">Loading...</div>');   $("#info").html('');
return createStoreWithMiddleware(reducer, initialState) }
if (mutation.removedNodes) {         for (j = 0; j < mutation.removedNodes.length; j++) {           child = mutation.removedNodes[j];           if (child.nodeType === Node.ELEMENT_NODE) {
}       break;     case 'api':       tag.visibility = parts.shift();
return Index._displayFile(req, res, tempDir, `${name}.log`);   }
var isHTML = text.search(/<[a-z/!]/i)!== -1;         if(isHTML) {
return DRAIN_TYPES.find(({ id }) => id === drainTargetType); }
if (msieVersion == 10) {                                  if (props.alignItems) {
case 4:            if (this.xhr.status == 200) {             this.replaceContent();           }
import Routing from "./../utilities/routing"; import { withRouter } from "./../utilities/routing/router";
const REGEXP_PATH = /\ const REGEXP_ARG = /'/g;
if (typeof t =='string' && /,/.test(t)) {     tp = t.split(",");     t = tp[0];
this.dom.firstChild.style.textShadow = "-1px -1px 0 " + newVal;             }         });
throw new Error('Unimplemented API: dojo.data.api.Read.hasAttribute');  },
set weight(value) {             weight = value;         },         get weight() {
import { RouterComponent } from "./router"; let store = createStore(combineReducers({
yy.Search.prototype.toJavaScript = function() {
console.log('ERROR: Failed to load translation table');         }
if (clear === true) canvas.width = canvas.width;   ctx.beginPath();
stopDisposableDaemons(daemons, function () {                    })
}, function(error, response, body) {      expect(body).to.equal({success: true});      var data = cantrip.get("/foo/collection");
}       if (self._state.requests[0].command.indexOf('RENAME') > -1) {
var max = 0;             values = stats.graphsLODs;             for (i = 0; i < samples; i++) {                 max = values[i][0] > max? values[i][0] : max;
var scripts = document.getElementsByTagName("script");     var rePkg = /dojo\.js([?.]|$)/i;     for(var i = 0; i < scripts.length; i++){
const DatabaseManager = require('@adonisjs/lucid/src/Database/Manager') const { ioc } = require('@adonisjs/fold')
var logPushApi = '';
}           } catch(err) {             console.log(err);           }
});   } cv.render = function() {
$ERROR('#s'); } var \u0074 = 1; if (t!== 1) {   $ERROR('#t');
XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;   module.exports = XMLHttpRequest;
(userAgent.indexOf('Firefox/')!= -1 && userAgent.indexOf('Android')!= -1);        } catch(e) {}     return false;
require('source-map-support').install();   }
{         if ( typeof def!== 'undefined' && typeof def!== 'undefined' )         {
'use strict'; var node_path = require('path');
console.error(VERSION);                     exit(1);                     break;                 case "-o":
tab = $.extend({}, tab, tab[r]);     if (id == null || typeof id == 'undefined') {      this.tabs.push(tab);
throw new Error('TECHNICAL_EXCEPTION_HTML_STRUCTURE_MAY_HAVE_CHANGED')             default:
elm.append(propsDiv);     dataView = new DataView({ inlineFilters: true });     dataView.beginUpdate();     dataView.setFilter(this.filter);     dataView.endUpdate();
vTree.addChildToTreeQueue(this);   } }
require('../../../components/scientificName/scientificName.directive.js'); angular.module('portal').controller('speciesKey2Ctrl', speciesKey2Ctrl);
function TelegrafFlow (opts) {   opts = Object.assign({     cancelCommands: ['/cancel'],
+', equationY_: "'+this.equationY_+'"'       +'}'; }
if (getOwningFileObject()) {         addClass(primary_selector, "collapse");     } else {
{     $('#stdout').text(data.history);
getComponentDefinition(uri, [ graphUri ]).then((res) => {         componentDefinition = res.object
this.dirty = false;                 }
helper.nock().get("/v1/users/FakeUserId/applications").reply(200, items);       Application.list(function(err, list){
import React from'react'; import { ThemeProvider } from '@material-ui/styles';
if (!$iugo['store']['bind_to_dom'].namespacedTagIndex[namespace]) {      $iugo['store']['bind_to_dom'].namespacedTagIndex[namespace] = [];     }
var hiddenUIContext = create_context (hiddenUICanvas) ;   for(var kButton = 0 ; kButton < Nbutton ; kButton++) {
} else {           substr = `<span class="token string">"<a class="token md-link" href="./#articles/${p.history[2].replace('.html', '')}">${p.metadata.title}</a>"</span>`         }
if (!res._header) {           res.writeHead(statusCode);
while (foo >= bar) {
});       return map;
citation += 'DOI: <a href="http:                 } else if (url) {                     citation += 'URL: <a href="' + url + '">' + url + '</a>. ';
function checkURL(tabId, info, tab) {  var url = new RegExp( '^https?:\/\/play\.google\.com\/music\/listen' );  if ( url.test( tab.url ) ) {
list: function(sids, callback) {             sids = sids || [];
"you'd like to deploy your app here.\n");     exit(1);   }
'use strict';
exports.Function = function (node, parent, file) {   if (!node.rest) return;
}   onDragEnter() {     const { onDragEnterCallback } = this.props;
value = JSON.stringify(value);     } catch (e) {       console.log(e);     }
'use strict';
throw err;         }     });
var cordova = require('cordova'); var browserWrap;
event = new Event('close', {code: code || 1000, reason: reason || ''});     event.initEvent('close', false, false);
return ["image"]; } var Modul_itunes_artwork = function () {
if(uniqueCount == "none" || uniqueCount == "" || uniqueCount == null) {
function() {    assert.deepEqual( container.children( ".ui-screen-hidden" ).length, 3, "Filtering controlgroup inputs and links by value" );    input.val( "" ).trigger( "change" );
for (i=0;i<optionGroup.length;i++) {      optionGroup[i].applyStyle("display","inline-block");
}     return vnode
import DeviceCard from './card'; import styles from './styles.css';
}    expr.ir(state, irs);
import { GET_LAUNCH } from "./cart-item" export { GET_LAUNCH }
enumerable: false,             get: function () {               return fieldFormats.defaultByType[field.type];             }
var Browsers = require("./browsers").Browsers;
_data = [];     _dataString = s.replace(/\~|~/g,"\n");     var sd = _dataString.split("\n");
}           return _results;         case 'Code':
while (~k) {       if ((m = str.slice(k).match(END_TAGS))) {         k += m.index + m[0].length
class FileDragSource extends DragSource {   constructor() {     super();     this.item = {
this._showMenu();     }   }
(function (global, undefined, ctor) {
_getLabelOptions: function(parsedParams) {   var includeLabel =!parsedParams.label || ( parsedParams.label && parsedParams.label[0] == "yes" );
exports.Vinyl = Vinyl;
];     fontBBox = aFontInfo.bbox;     for (i = 0; i < fontBBox.length; i++)       topDictIndex = topDictIndex.concat(this.encodeNumber(fontBBox[i]));
params = params || {};   var endpoint = applicationName + '/form/'+formName+'/record/add/';
var webpack = require('webpack'); var webpack = require("webpack")
var Transformer = require("./transformer"); var File        = require("./file");
constructor() {     this._timeouts = []   }
},                 protected: {                     loadGL() {                         Public(this).loadGL()                         Public(this).emit(Events.BEHAVIOR_GL_LOAD, Public(this))
import Button from'react-native-button'; import {analytics, airloy, styles, api, L} from '../../app'; import util from '../../libs/Util';
Blockchain.prototype.putBlockOnHold = function(block) {     if (!(block['hash'] in this.buffer)) {         this.buffer[block['hash']] = {
_model_name: "TooltipModel",             _model_module: "bqplot",
'use strict'; const CI = require('./ci.js');
function hideFn(e){             e = e || window.event;             hideHandle = setTimeout(function(){
if(typeof sourceMapStringOrOffset =='string') {       var [offset, length, id,..._rest] = sourceMapStringOrOffset.split(":");
},    es: {      months: [
continueProcessing = false;               break;             case 'x':             case 'compress':
var computedDecorator = function(fn, params) {       let dec = function(prototype, key, desc) {         assert(           `ES6 property getters/setters only need to be decorated once, '${key}' was decorated on both the getter and the setter`,
var type = Object.prototype.toString.call(subject).slice(8, -1)     switch (type) {
module.exports = URL;
export default class Outlet extends Component {   constructor() {     super();   }   componentDidMount() {
head.insertBefore(el, head.firstChild); }
handleClickToggle: function() {     TodoActions.toggleItem(this.model.id);
if (arrowStyle) {                 return isArray(arrowStyle)? arrowStyle : this.arrowStyles[arrowStyle];             }
off =!$("dsos-names").checked ||!$("dsos-show").checked;             for (i=0; i< depends["dsos-names"].length; i++) { fldEnable(depends["dsos-names"][i], off) };       break;
window.addEventListener('click', this, true);   },
}          var self = this, o = this.options;          if(BI.isNotNull(configs.group_value)){
} function getWhitelistLogData(meta) {     if (!meta) {
var b = makeReactive(1);     var sum = makeReactive(function() {
that.origin = new Pose();     } else {
} }; module.exports = Cylon.Drivers.GPIO.Motor;
}                         point = new OpenLayers.Geometry.Point(msg.data[lonMapping], msg.data[latMapping]);                         point.transform(coreMap.Map.SOURCE_PROJECTION, coreMap.Map.DESTINATION_PROJECTION);
tmp = /\%output\.(\S+)/.exec(cmd);   if (tmp && tmp.length) {     extensions[2] = tmp[1];     cmd = cmd.replace(/\%output\.\S+/, '%output');
if (m3u8.version >= 4)         for (attrname in extParserV4) { extParser[attrname] = extParserV4[attrname]; }       if (m3u8.version >= 5)
$timeout(function () {                             if (e.date) {                                 $scope.$apply(function () {
function invertDatumTypes() {       for (var key in TDatumType) {         datumEnum[TDatumType[key]] = key;
searchUsernames: { title: 'Search all usernames, used for admin/mod UI components to lookup users' },   adminPage: { title: 'Page through all forum users, used for admin/mod' },   removeInvite: { title: 'Remove an Invitation' } };
kbnAngular(chrome, {});     });     it('should return breadcrumbs based on the url', () => {
for(var i = 0; i < L; i += 1) {       var
var route = function route(req, res, next) {   if(typeof req.query.token!== 'undefined' && req.query.token!== null) {
this.ESCAPED_CHARS_REGEXP = new RegExp('[\\.+*?^$(){}\/\'#]','g');
action= {'newstate':'stay','prev_state':prev_state};   }   else if (msg =="disarm") {      action= {'newstate':'disarm','prev_state':prev_state};
}else{         reject(`Config for ${id_config} not found in section ${section}`);       }
async.auto(calls, (err, results) => {             console.log(':: bootstrap ::', err, results);
return;   } })(jQuery);
function addAliasCommon(url) {         var input = $('#add-alias-input');         url = $.trim(input.val());         if (url!== '') {
case actionTypes.other.SET_VARIABLE:                     action = new Action.Other.SetVariable(data.name, data.value);                     break;                 case actionTypes.other.SET_VARIABLE_BY_JSON_ATTRIBUTE:
parseConnection = require('pg-connection-string').parse,     dico = require('./dico'),
if(typeof jszip === 'undefined') jszip = require('./jszip.js');   try { _fs = require('fs'); } catch(e) { console.log(e); }  }
if (err) {           nodeca.logger.error(err);           process.exit(1);         }
if(Settings.supportAdjust){      var _thList = _this.getOriginalThDOM(_table),     _td;
return this.setMethod(value, (err, value) => {       if (err) throw err       this.log('Fake Set Callback Received: ', value)
else {                                 window.location.href ='mipilaw66baidu_informLawyer_failed'                                     + '?lawyerId=' + lawyerId + '&sessionId=' + sessionId
return s    .replace(/([-()\[\]{}+?*.$^|,:#<!\\])/g, '\\$1')
menu.open = false;   } });
closest = null;     this.updateMatrixWorld();     this.allComponents.map( component => {
case "a": damage = {elem: "fir", coeff: 14.8, total: true}; break;        default: damage = {elem: "psn", coeff: 10.4, total: true};        }
conversationMd = this.chatConversationsCl.get(msg.sender);         conversationMd.set({
var failure_T = 'Could not Triangulate'
for (i = 0; i < platformsDetectors.length; ++i) {             if (platformsDetectors[i].regexp.test(navigator.userAgent)) {
switch (step) {             case'm.login.password': {                 const PasswordLogin = sdk.getComponent('login.PasswordLogin');                 return (
}          try {
Meteor.publish("mapLayers.tags", function() {   this.unblock();
if(scope.model.config.customViewPath) {             view = scope.model.config.customViewPath;         }
if (filter) {     const examplePath = filter.field!== '@'
nextToken = this._currentToken.slice(commentEnd + 3);
addItem: function(startTime) {     startTime = startTime || this.timeline.time();     var item = this.getNextItem();
var flatLinearRingIsClockwise =     function(flatCoordinates, offset, end, stride) {
return rc? rc : ignoreReturnValue;     }
} else {                                  this.set('eventRemainingContent', '');
default:         uncompressedData = compressedData;     }
import { Component } from'react'
return __awaiter(this, void 0, void 0, function () {         var outputDataSize, interval, api;         return __generator(this, function (_a) {
fileHelper = require('./fileHelpers'),   winston = require('winston'),   os = require('os'),
for (i = 0; i < j; i++) {         R = multiply(R, R)
} else if (prop ==='ref') {    } else {
var projectionExtent = projection.getExtent();   var vectorSource = this.getLayer().getSource();   var transform = this.getTransform(frameState, 0);
};     case types.CONNECT_SSH_FAILURE:       return {
}             case'm':
var Model = EG.CoreModel.extend(Ember.Evented, {
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
R.assoc("counter", state.counter + 1, state)   ),   decrement: state =>     R.assoc("counter", state.counter - 1, state)
const CHAT_WINDOW_SELECTOR = '.chat.messages';
import {Actions, ActionConst} from'react-native-router-flux' import styles from '../styles/styles';
} else {             app.router.navigate(`task/${first(responses).taskId.id}`, {trigger: true});           }
it("should use direct xml file", function(done) {         try
var item = function*(username) {         var user = yield* User.get({ username: username }, {}, db);         if (user)
if (typeof attr[key] === 'function') {       arr = attr[key](values, 'attr', cntx, tag, key);       value = arr.join('');      } else {
if (options.activeClass) {                     item.classList.add(options.activeClass);                 }
return require(path);     }
}         var errorPrefix = "Error in " + JS_HANDLE + ".getSupportInfo(): ";         try {
this._line(ctx, from2d, to, this.axisColor);       msg = this.zValueLabel(z) +'';       this.drawAxisLabelZ(ctx, from3d, msg, 5);
const tagsQueryString = aws.s3TagSetToQueryString(tags.TagSet);   return aws.promiseS3Upload({
VariableManager.prototype.destroyVariable = function(variableName) {   if(this.variables[variableName]) {     delete this.variables[variableName];
setRequest: function (requestId) {                                  perRequestPipeName_1 = namePrefix_1 + requestId;
case "t6t":           replace_code = preset_mode_util("t6t", mode_str, origin_mode_str);           code = code.replace(/\{t6t\}/g, replace_code);
req = { url: url, method: method };       while ((fn = match(req, routes, i))) {         i = req._route_index + 1;
}     for (key in tile.glueImageryCredits) {         value = tile.glueImageryCredits[key];         value2 = this.visibleCredits.imagery[key];
ext, dir,         path, url, pipe, CloudFunc, diffPatch, querystring, time,
}                         var newSelected = [];                         if(index < min) {
_trigger: Proxy._widgetTrigger({       Selection: function(params) {
tabIndex: -1,
if (level == 'error') {         throw new Error(level);     }
'number': /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/,   'operator': /[\+-\*\\\/:=?&|<>]/,   'punctuation': /[\{}[\]\(\):]/,   'boolean': /\b(true|false)\b/,
changes.metric4 = action.metric;                     break;                 case 5:                     changes.metric5 = action.metric;
var node = this       while(!(node = node.parentNode)){         if(['svg','symbol', 'image', 'pattern','marker'].indexOf(node.nodeName) > -1) break         m = m.multiply(node.matrixify())
switch (opt) {             case "s":                 params.ServerName = args.optarg;                 break;             case "f":                 params.FilterName = args.optarg;
return closure;   }
var map = new Map();         var observer = map.observeMapChange(function (plus, minus, key, type) {
if(sjs.use_canvas) {         for(var name in sjs.layers) {             var layer = sjs.layers[name];
console.log("   jobscount:", ins.JobsCount.data[0]);     var ranks = ins.Ranks.data[0].stdout.replace(/=>/g, ":").trim().split("\n");     var threatLevel = calculateThreatLevel(ranks);
{           var control = controls[id];           if (control instanceof qx.ui.core.Widget) {             control.replaceState(old, value);
window.onhashchange = null;
let rules,         ruleMandatoryProperties;
if (matches.length) {                 for (i = 0; i < matches.length; i++) {                     match = matches[i];                     deps = runDepsRegExp.exec(match);
archive.fileActStream = pda.watch(archive)   archive.fileActStream.on('data', (event) => {     if (event === 'changed') {
}, [page]);   const modal = component => {     setOpen(true);
var stream = new air.FileStream();  stream.open(newFile, air.FileMode.UPDATE);
function LinkHeaderFactory($q, $extendReadOnly) {     return LinkHeader;
class SourceView extends EventChannel {     constructor(args) {         super();         this._options = args;
label: '附近',         screen: 'zqc.Bootstrap',         navigatorStyle: DEFAULT_NAV_BAR_STYLE,
return `${LTI_LAUNCH_URL}?action=${action}&objectId=${objectId}`;             case LMS.LEARNING_SUITE.id:
case FETCH_ENTRIES:     if (action.error) {
MapStore.emitChange();       break;     default:
} catch (e) {       throw e;     }
if (typeof fragment === 'number') {                 return fragment.value
import { withServicesKnob } from '@bbc/psammead-storybook-helpers'; import { RequestContextProvider } from '#contexts/RequestContext';
return  (       getExistingServiceForWindow(window, 'url-replace'); }
(function() {  'use strict';
if (err) { return callback(err); }                 var stream = Fs.createReadStream(tmpFilePath).pipe(new PNG({ filterType: 4 }))
this.setSelectedElement(vParent);           }         }
}     else if (event.ctrlKey || event.metaKey) { return false; }     else if (event.shiftKey) {
function animate(view, props, opts) {   return new Promise(function(resolve) {
var options = map.config();         _.extend(options, {             'center' : map.getCenter(),             'zoom'   : this._getOverviewZoom(),            'scrollWheelZoom' : false,
maxWidth = Math.max( upWidth, downWidth ),                                  maxHeight = Math.max( upHeight, downHeight ),
codeValue = record.data.code;   nameField[0].setValue(nameValue);
compiled_object[className].info.abiDefinition = JSON.parse(contract.interface);   }   return compiled_object; };
if (message.error) {       return event.sender.send('error');
case's': f.interval = n * 1000; break;         case'm': f.interval = n * 1000 * 60; break;         case 'h': f.interval = n * 1000 * 60; break;     }
H.waitUntil('document.body', function () {      window.location.pathname = p;     });
this.setNumberOfOutputChannels(0, 2);         this.pan = new AudioletParameter(this, 1, pan);     },
_this._hasScrolled = false;         }).bind('touchmove.mapify', function () {             _this._hasScrolled = true;
return inputName; }
import { Route, IndexRedirect, Link } from'react-router'; import { layoutConnector } from '../../Common/Layout'; import globals from '../../../Globals';
var oauthModule = require('./oauth');
if (undoStack[undoPosition - 1] && (undoStack[undoPosition - 1].name!= street.name)) {
if (this.isPaginated()) {             return get(data, 'data', data);         }
this.events = []; } util.inherits(Response, message.Message);
})(); (function(){
node_parent_id = classNames[key].substring(9);                 parent_id = parseInt($("#"+node_parent_id).attr("class").match(/item-id-(\d+)/)[1]);                 tobj[1] = parent_id;             }
console.log("sending", msg, "to", current_cid);     var req = {"token": token, "args": {"cid": current_cid, "message": msg}};     d3.json("/api/v1/send-basic").post(JSON.stringify(req),                                        function(err, r) {
});     } else if (view == "profile") {       return;     } else if (view == "follow") {
&& t <= y1 && y2 <= b);   case 'intersect':
var instance       mix = typeof mix === T_STRING? mixin(mix) : mix
export default reduxForm({     form: 'SVCConfig',
this.select.modifier = 'RECORDSET';   var selectfn = this.select.compile(databaseid);   if(db.engineid && alasql.engines[db.engineid].intoTable) {
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
if(!this.props.disabled) {       if (e.targetTouches.length == 1) {         const touch = e.targetTouches[0];         this._changeComponent(touch.pageX);
constructor: function(model, options) {       var defaults = _.result(this, 'defaults');
{         this.getContentElement().setValue(
var regex = /((\w|\s)+)\(([^)]+)/mg       while ((result = regex.exec(transform))) {         var split = result[3].split(/[,\s]+/)
marginBottom: 20,     fontSize: 20,     color: 'rgba(255,255,255,.8)'   },
} else {     document.addEventListener('polymer-ready', done);   }
}         tok = this.nextToken();         if(tok && tok.type === lexer.TOKEN_BLOCK_END) {
that.emit('frame_navigation_state', my.frames[from], state);       });
function showValue() {   console.info('Temperature: %s C', modelTemperature.data[modelTemperature.data.length-1].t);
}));     ctx.scope.set("getInfo", yield ctx.KRLClosure(ctx, function* (ctx) {       return {
var channelNames = [];             for (i = 0; source!= null && i < source.channels.length; i++){                 channelNames[channelNames.length] = {name: source.name + source.channels[i].name,
image: formData.hostImage,             command: formData.command.length? formData.command.split(' ') : [],             memory: parseInt(formData.memory),
model.data_coParser.addHandler( function( sheet ){
var chunk;         while ((chunk = this.read())) {           if (file.writable) file.write(chunk);
newState.devices = [action.data].concat(newState.devices);         break;     case Constants.DEVICE_IMPORT_FAIL:
var config = editor.config;     var rendererTypes = {
edit: {                 ngClick: "editCredential(credential.id)",                 icon: 'fa-edit',
import React from'react' import styled from'styled-components'
for ( i=96; i<=105; i++ ) {   keyCodes[i] = ''+(i-95);
notification_span.setAttribute("class", "label label-danger");    break;   }   default: {    msg_div.setAttribute("class", "message-text");
import Immutable from 'immutable'; import EntityUtils from './EntityUtils';
oRenderLog.debug("Rerender Control '" + oControl.getId() + "'" + (uiArea? "" : " (using a temp. RenderManager)"));    RenderManager.preserveContent(oDomRef,  true,  false);    rm.render(oControl, oParentDomRef);
function gammavariate(alpha, beta) {     var SG_MAGICCONST = 1.0 + Math.log(4.5);     ainv = Math.sqrt(2.0 * alpha - 1.0);
error(`Unable to read the test directory: ${chalk.underline(relative(dir))}`);     throw new Error(`Unable to read the test directory: ${chalk.underline(relative(dir))}`);   }
return scope.$watch(attrs.odataPager, function(value) {       data = value;       if (data === null || data === void 0) return;
},   rowGetter: function () {     return this.rows[this.rowIndex];   },
var result = this.properties[property].match(value.sequence.head, true);
if (gaGlobalOptions.disableTooltip) {                 return;
broadcast.on('end', function () {     t.comment('Ending the broadcast stream');
if(tab.name === 'configuration') {           return $scope.hasConfigurationIssues($scope.detailPaneConfig);
});      } else if ((m = stream.match(/^\{([a-z_\-][\w\-]*)\}/))) {
export default class ErrorPage extends React.Component {   constructor() {     super()     this.state = ErrorStore.getState()
break;     case Array.isArray(type):       if (isMethod) {
trigger(val, cb);     }   }
for (let i = 0; i < items.length; ++i) {         let item = items[i];       }
var res = new this.constructor(this.__value__,false,this.__options__);         addedArrays.forEach(function(arr){
leftPx += parseFloat($tab_t.eq(_i).outerWidth(true));      }      $(e).css({
}).call(this);
} else if (data.func == "rename_node") {         if (gPleaseOpen) {
} function postAuth(next){    var extensionOptions = angoose.config()[EXTENSION]  ;
this.showMismatch( f, txt );       }    }
const fs = require('../utils/fs');
import drawParallelCoordinates from "./drawParallelCoordinates"; import styles from './parallelCoordinates.css';
parsedTemplate = jSmartParser.getParsed(template);       this.tree = parsedTemplate.tree;       this.runTimePlugins = parsedTemplate.runTimePlugins;     },
process.exit(1);     }   });
import { TestBed } from '@angular/core/testing'; import { PreviousStepDirective } from './previous-step.directive';
var cubeindex = 0;         for (i = 0; i < 8; ++i) {
_onLoginButtonFacebookTap: function() {         this._showLoadMask();         document.location.href = this._buildFacebookUrl(Kort.util.Config.getOAuth().facebook);     },
var run_async = true;     if ( ds.test_mode ) { run_async = false; }     var results = false;
ratesval = 2;   }   if(document.getElementById("star3").checked == true)   {
enabled.map(filter => {       if (!(filter in this._modules)) { return; }       const fn = this._modules[filter].execute;
iconSkin = "ico-ztree-md ";                         break;                     case "md2":                         iconSkin = "ico-ztree-md2 ";
_observable = new Observable(),
export default zora()  .test('search directive should be able to register listener', (t) => {     let counter = 0;
return new Promise((resolve) => {       database.select('slug')
$('[data-toggle="tooltip"]').tooltip();     $("[data-job-go-live]").on('click', function() {         goLive(this);
else     play = this.trackName;    if (play!== this.play) {
import { mapValues } from 'lodash'; import { getCollection, getProject } from 'Shared/api-loaders'; import { useAPI } from 'State/api';
}       }       for (key in options) {         record.options[key] = options[key]
token = token.toString('hex');   } else if(!(token instanceof String)) {    return Promise.resolve(new Error('Token must be a hex-string or a Buffer'));
$('#AreaFieldsWrapper').html('<input type="hidden" name="fieldChildAreaSlug" value=""><input type="hidden" name="fieldAreaSlug" value=""><input type="hidden" name="fieldArea" value="">');  $('#NewVenueForm').submit(); }
RunThreeWayTest(LargeUnsignedLiterals, function(module) {   assertEquals(2147483648, module.a());   assertEquals(2147483649, module.b());
sum = 100         progress = counter.PlacedAllocs / counter.DesiredTotal * 100         remaining = 100 - progress         if (progress > 100) {
throw new Error("Value for " + data.val + " is not set");   }
for(i = 0; i < this.population.length; i++){       this.population[i].score = null;
var Parser = require('./src/parser')
finished = true;     }     node = nodes.get(node).parent;
EntityInfo = connect(mapStateToProps, {})(EntityInfo); export default EntityInfo;
const a = stream()       expect(a.scan(noop, 0)).to.activate(a)     })
var findFiles = require("./utils/find_files"); var PackageInfo = require("./package_info");
if (!('date' in props)) {       return;     }       this.setState({
await attempt(async () => {     res.json('ok')
expect(legendDom.style.position).to.equal('absolute');     expect(legendDom.style.maxWidth).to.equal('500px');
_createControlElement: function () {             var me = this,
CalculationMatrix.prototype.extractAllBulkRecords = function (input) {     var calculationMatrixRecords = [];     var datapack = input.dataPackData;
reset_selection: function() {             this.model.set("selected", null);             this.selected_indices = null;             this.touch();
this.format = Format.select(format); }
return pitch2; }; TextPrinter.prototype.extractOctave = function(pitch) {     return Math.floor(pitch/7);
var href = {         prop: $(this).prop("href"),         attr: $(this).attr("href")       };
var cell = column.cell || [formatters.identity];                             var content;
config.compression = pair[1] || 'best';         break;       case '-cl': case '--compress-list':         config.compress = pair[1].split(',');
const FakeTransaction = require('ethereumjs-tx/fake.js') const ethUtil = require('ethereumjs-util')
if(as(value)){       return as(value);     }
date.setHours(date.getHours() + part);    }    if (! isNaN(part = Number(to.date)) ) {     date.setDate(date.getDate() + part);
var assert = require('assert'); var request = require('supertest');
const _parseImageName = (image) => {     const match = image.match(/^(?:([^\/]+)\/)?(?:([^\/]+)\/)?([^@:\/]+)(?:[@:](.+))?$/);     if (!match) return null;
var se, temp, ops;    if (se = this.subexpressions) {
throw new Error('Subscription was unexpectedly fulfilled.');     }, (error) => {
if (slSecuritySchemes.hasOwnProperty('apiKey')) {   var content = {};
if (o.type == "group") {                         for (name in o.options) {                             o = options[name];                             if (o["requires-reload"]) {
var self = this;         var pids = common.copy(monitor.pid);         monitor.shutdown(function () {
lineNumbers: true,             matchBrackets: true,
const IS_WINDOWS = require('os').platform().substring(0, 3).toLowerCase() === 'win'; const SKIP = (IS_WINDOWS? '.git\\/' : '/\/\.git\ const Path = require('path');
mode: child.mode,      type: typeof child == "File"? "blob" : "tree",      sha: child.sha     };
var setHandlers = function () {     Object.keys(EVENT_MAP).map(function(evtName){      vimeoHandlers[evt] = (that.eventHandlers[EVENT_MAP[evtName]] || EVENT_MAP[evtName]).bind(that, that);
case "only":       case "first":
for (var i = 0; i < count; i++) {       newPoints.push({
import React, { Component } from'react'; import { AppRegistry } from'react-native'; import { Router, Scene } from'react-native-router-flux';
if (arg.value.length == 1) {                                 var val = arg.value[0];
imagemin        = require('gulp-imagemin'),   concat          = require('gulp-concat'),
Slack.prototype.setWebHook = function(url) {     this.webhookUrl = url;     return this;   };
const d = util.castDate(propertyValue).getTime();                 return (d - min.getTime()) / (max.getTime() - min.getTime());             default:                 return propertyValue;
case 2:                     target = childNodes[0];                     if (target.nodeName === 'AU-M' || target.nodeName === '#comment') {
if (keyboardEvent.altKey) {       modifiers |= KeyboardShortcut.Modifiers.Alt;     }     if (keyboardEvent.metaKey) {
tweenObj = state.add.tween(floatingTextGroup).to({                 x: pointsX,
o[id_key] = key;
var connecting = function(socket) {         ipc.of['embark'].on('connect',function() {           done();         });
}         this.id = element.id;         this.children = $($(element).get(0).children[0]);
var pendingCallback;   while ((pendingCallback = this._pendingSubscribeCallbacks.shift())) {     pendingCallback(err);
var contentEncoding = req.headers['content-encoding'];     options = options || {};     options.compiler = archive.compiler;
this.setState({excludedProjectsCount: originalNumResults - nonCollectionResults.length});
};      var prepareChoices = function(choices){       if(!_.isArray(choices.data)){
{                     var uploadChannel = XPCOM.QI(channel, nsIUploadChannel);                     uploadChannel.setUploadStream(postData, "", -1);
modelFiles.forEach((file) => {     let model = sequelize.import(path.join(__dirname, file));
{       Editor.clipboard.set(JSON.stringify(self.asset.toJSON()), "text");      }     }
console.log('> Build project done.');   done(0);    };
let fragmentsToScheduleRules,         nextFragmentRules;
createAllTypes () {       let all = ''
return Boolean;       case "Date":
for (var i = 0; i < cleanQuery.query[field].length; i++) {               var term = cleanQuery.query[field][i];
return '\t'     case 'number':
const {html, originalRevision, sections} = await fetchDoc(id, resourceType, req)
var previous = value.slice(0, index) + text + value.slice(index);     pass = model.pass({$original:'stringRemove'})._pass;     model.emit('change', segments, [value, previous, pass]);
clearMeasurementTimepointData(measurement._id);     }
if ( type === 'error' &&!( 'error' in this.events ) ) {   throw new ve.Error( 'Missing error handler error.' );  }
var minor = parseInt(parsed.minor) || 0;             while (true) {                 var minorVersion = parsed.family +'' + major + '.' + minor;
if (Array.isArray(options.button)) {                 options.button = options.button.concat(options.container);
if(urlregexp[1])     {         return urlregexp[1];     }
export function getTimeGridTop(time) {   time = moment.duration(time)   var slotEls = getTimeGridSlotEls(time)
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/cosmox-1334267072.swf",  admin_props : false,
it("scroll", function(done){    xxx
case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";         case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
'<%= tmpDir %>/js/filters.js'     : ['<%= srcDir %>/js/filters*.js'],           '<%= tmpDir %>/js/services.js'    : ['<%= srcDir %>/js/services*.js']
const errorTemplate = require("./errorTemplate"); const BODY_MAIN_PLACEHOLDER = "{{[__bodyMain__]}}";
return model.id? store.find(model, options) : store.findAll(options);             case "create":
require('should'); const HttpTestUtils = require('./utils/http');
isAvailable: function(){    return!![].forEach;    },
idprefix = prefix + "_",       createCallback = function() {         modalDialogHelper.createModalCreateDialog(
return self.computeUnspent(self.cache.unspent, cb);   }
ProxyListener.prototype.on = function (callback) {     if (this.callbacks===null) { this.callbacks = []; }     this.callbacks.push(callback);
if (attendees && attendees.length) {     attendees = _.filter(attendees, function (a) { return a.hasOwnProperty("gender"); });     if (attendees.length) {
} catch (error) {     hasSupport = false;   }
};             reader.readAsText(fileObj);         });
'no-restricted-syntax': [OFF],     'no-alert': [OFF],
const generateFunctionCall = (node, parent) => {   const block = node.arguments.map(mapSyntax(parent)).reduce(mergeBlock, []);
$onInit () {         this.urls.docsUrl = this.ovhDocUrl.getDocUrl(this.LogsConstants.LOGS_DOCS_NAME);
options = $.extend(defaults, options)       ;
} else {                 width = this.width;                 height = this.height;             }
createLocalClone: function createLocalClone(dir) {         var clone = spawn('git', [ 'clone', path.join(GITROOT, dir), util.getLocalClonePath(dir) ]);         clone.on('exit', function(code) {
return "string";     case "number":
$scope.projectName = $routeParams.project;     $scope.sourceURLPattern = /^((ftp|http|https|git):\/\/(\w+:{0,1}[^\s@]*@)|git@)?([^\s@]+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-/]))?$/;     ProjectsService
var caplet = require("../../../"); module.exports = caplet.createModelClass({
trustedDomains: window.location.host? [ window.location.host ] : [],     cacheBust: /MSIE/.test(navigator.userAgent) || /Trident\/[\d](?=[^\?]+).*rv:([0-9.].)/.test(navigator.userAgent)? true : false,     forceHandCursor: false,
{         innerElement = new qx.html.Element();
var getEmployee;         var transferArray = [];         var parallelTasks;
}     invalid = _.find(obj.geometries, function (geometry) {       return!isGeoJSON(geometry);
typeDB = 'Device';                 break;             case 'Sensor':                 typeDB = 'SensingDevice';
if (!(search instanceof RegExp) && match[0].length < search.length)) {       tail = match[0];
this.session_keys = clone(obj.session_keys) || [];    for (idx = 0; idx < this.session_keys.length; idx++)     this.session_keys[idx] = new AttrList(this.session_keys[idx]);
var grandchild;                                  for(i=0, len=child.filters.length; i<len; ++i) {                                      grandchild = child.filters[i];
redisSub = require('../web/core/redisSub'),     orch = require('../orchestration/orchestration.api');
if (!name) return children;
self[key] = other[key];     }   }
return false;                         }                     }                 }else{
"class": "modal-input-xlarge",                 "default": "---",                 awPopOver: "<p>Enter variables using either JSON or YAML syntax. Use the radio button to toggle between the two.</p>" +
chunks[0] = require.tlns[chunks[0]] || chunks[0];     var path = chunks.join("/") + ".js";
if (!filepath.match(imageFileRegexp)) {    throw new Error("asset \'" + filepath + "\' cannot be opened!");   } else {
for(var i = 0; i < entities.length; i++){
return mockResult(request, mock.value);         }
if (!revisions.length || (revisions.length < 2 && revisions[0].debug_isJustTitleChange)) {     return yo`
this.options.geocoder.bind("geocodingError", function(e) {       var dlg = new GeocoderMessageDialog({         style: "polygon",
message: 'New workspace name:',       validate: s => /^(\s*|\s*[\w-]+\s*)$/.test(s) || message,       filter: s => s.trim(),
try {     var useSourceURL = (Function('   } catch(e) {     console.log(e);   }
var bproto = HTMLTextAreaElement.prototype     var newSetter = function (value) {          setters[this.tagName].call(this, value)
if (cluster.isWorker &&!exclusive) {       var onHandle = function(err, handle) {         if (err) {           var ex = exceptionWithHostPort(err, 'bind', ip, port);           self.emit('error', ex);
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
.$on("initNodes", function(nodesStr) {         let nodes = CircularJSON.parse(nodesStr);
return vtkImageMapper.SlicingMode.Z;     case 'L':
this.lookahead(1) === "Rbracket") {               this.advance();               right = this.parseProjectionRHS(this.bindingPower.Star);               return {type: "Projection",
throw new Error('unSupported Layer Type');         }
window.addEventListener('showAdvertising', handler);
doc.waitDomReady(document.body, function () {
var splittedDate = splitOldDate(oldLabDate);   oldLabDay = splittedDate.day;   oldLabHour = splittedDate.hour;
&& event.state_key!== $scope.state.user_id  && "join" === event.membership) {                     var notification = new window.Notification(
contracts = '';             $.each(data.portfolio.contracts, function(ci, c) {
selector._id && LocalCollection._selectorIsId(selector._id) &&      size(selector) === 1); };
RESET: {         any: [/^!reset$/],     },
}   for(i in themesOrder) {    var t = themesOrder[i];
while (newOrigin + offsetShift < 0) {     newRoot = new VNode(newRoot.array.length? [null, newRoot] : [], owner);     newLevel += SHIFT;
look[2] = value[2];                     this._scheduleUpdate(0);
} else {                 console.log("Ignore individual feature outside region. Feature score " + feature.score + ". Accumulated score " + score + ".");             }
getReposRelease: (reposOwner, reposName) => {         return `${host}repos/${reposOwner}/${reposName}/tags`
opts = {   mongoConfig : app.get('mongoConfig'),
var ComponentWithRoute = function (_Component) {
$scope.rotationStyle = $renderKey.getKeyRotationStyles;   function renderKey(key) {
assert.strictEqual('ABC1', 'abc1'.toUp());  });  it(`format`, function() {   assert.strictEqual('abcdefg1', 'a{0}c{1}e{2}g{3}'.format('b', 'd', 'f', 1));
return this.state.activeIntervals.bars   }   get section () {     return this.state.activeIntervals.sections   }
console.log(errorThrown);         alert('gitub auth error');
os.gadgetPrefs_ = new window['gadgets']['Prefs'](); }
var sample = inputSamples[i],                     pts = sample.pts;
import { last, groupBy, sortBy } from 'lodash'; import './qq.css';
e.preventDefault();                 txt = elem$.text();                 txt = decode(txt);                 if(options().validate(txt)) {
exports.signup = function(req, res) {
position = {     top: span.offsetTop + parseInt(computed.getPropertyValue('border-top-width')),
if (test) {         return str.replace(new RegExp('\\.' + test + '$', 'ig'), '');     }
}     usage_log.push(event);   });
_this.dragZoomLayer.dragInteraction().mouseFilter(function (event) {                 return event.altKey === 0 && event.button === 0;             });
var fightCost = 10 * 3;                     maxLength = (maxLength - fightCost / movementCost) / 2;                     break;                 case this.CRITICAL_PATH_TYPE_CAMP_TO_PASSAGE:
longProgram += '1';
pro.close = function() {  if(this.closed) {   return;
this.min_line = 1000;         for (i = 0; i < notes.length; ++i) {           note = notes[i];           this.min_line = Vex.Min(note.getKeyProps()[0].line, this.min_line);
var jsonBody = body   if(err){     done(err)   }else if (res.statusCode === 200) {
$.subscribed = function () { return subscribed; };   }); });
run: function(target, method ) {     var options = this.options;     this.begin();
if (handler && typeof handler === 'function') {             signal.disconnect(handler);         }
this.columnsRHSIdx = {};     }
cb(null, tpl);   }); }
reject(`Error! ${err}`);       } else {
this.device.stop(function() {
if (options.hoverCallback) {                 var origHoverCallback = options.hoverCallback;
startForm: function(sessionId){             var fetchingForm = FormplayerFrontend.request("getIncompleteForm", sessionId);
},   catchup: function()  {
run_spec(__dirname, ["flow"]);
var total = 0;             var values = (this.graph == 'Polygons')? stats.graphsPolygons : stats.graphsBuild;
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
expect(cases).quailGetById('assert-1').to.have.quailStatus('passed');   });
if (args) {   access_token = args.access_token;
Kekule.Localization.setCurrModule("widget");
if (typeof timingDict.timingFunction ==='string') {     this.timingFunction = TimingFunction.createFromString(timingDict.timingFunction);   } else {
},     },     assertions: function(err, feeWindows) {       expect(err).toBeFalsy();       expect(feeWindows).toEqual({});     },   });
}, function() {});  }  $scope.returnFromAddConnection = function(message) {
payload = args[1];         } else if (args.length == 1) {             callback = args[0];         } else {
(value).forEach(function (item) {         str_ += item[0] + ':' + item[1] + ', ';
const { getFavicon } = require("sdk/places/favicon"); const { promised } = require('sdk/core/promise'); const { Cu } = require('chrome');
var ns = data.ResourceRecordSets.find(t=> t.Type === 'NS').ResourceRecords.map(x=> x.Value).join('\n')         callback()
robot.emit('telegram:invoke','sendPhoto', { chat_id: res.message.from.id, photo: fs.createReadStream(outFilepath) }, function (err, response) {           if (err) { console.log(err); };         });
const { isVPlusDottedVersionAtLeastOne } = require('./helpers/validators'); const t = new ServiceTester({ id: 'bower', title: 'Bower' });
if (!this.element) {     this.element = new Dom().parseFromString(
},     setContractsByAddress(result) {       if (result&&result.success) {
if (modelSchema.required.indexOf(prop)) {                         options[prop] = defaultValue;
const MongoServer = require('mongodb').MongoServer;
if ($('#ace-editor').length) {         new QueryEditor();     }
};         var draw_triangle = function (ctx, outer, width, height, angle) {             ctx.beginPath();
var message     if ((message = stanza.getChild('html', xhtmlIm.NS_XHTML_IM))) {         content = message.getChild('body', xhtmlIm.NS_XHTML)
var x = require('x');
Runtime.runCLI(argv, [`Jest REPL v${VERSION}`]); }
app.start();
newChild = super_.insertBefore.call(this, newChild, refChild);
app.on('tick', function() {     var width = app.engine.width     var height = app.engine.height     app.camera.right = width
}   return [a,b];
location.reload();                         return true;                     default:                         return false;                 }
control.next(message.body);             break;           case STDIN:             stdin.next(message.body);
} exports.getStack = __root.getStack;
if (attrs.length!== 0) {
}                 default:
function onCleanupListeners() {   try {
import { jsx } from 'theme-ui' import Button from '../Button'
function nl_langinfo () {
var mime = require('send').mime; var etag = require('etag');
Map.propTypes = {   center: _infact.PropTypes.array,
llx = res[1][0][0];             lly = res[1][0][1];             urx = res[1][1][0];             ury = res[1][1][0];
} catch (err) {         errorHandler.errorHandle(`processContract ${address}`)(err)         process.exit(1)     }
}         ApplicationCacheAgent.getManifestForFrame(frame.id, this._manifestForFrameLoaded.bind(this, frame.id));     },
if (!(/^\s*$/).test(sSplit[i])) {           regexes.push(new RegExp("(^|\\s|;)" + sSplit[i].replace(/\s/gi, '').replace(/([\(\)])/gi, "\\$1").toLowerCase().replace(";", ";?"), "gi"));         }
} WebInspector.OverridesSupport.NetworkThroughputUnlimitedValue = -1;
title: 'Edit Discord Activity',         setting       }.bind(this))       break;
} else {         logger.warn('[l10n] could not find argument {{' + arg + '}}');         return str;
sourceJs.onaudioprocess = function(e) {                     array = new Uint8Array(analyser.frequencyBinCount);
Object.assign(pc, function () {     var SAMPLE_COUNT = 15;
logDatasetState(dataset) {       if (DEBUG) { console.log('dataset =', dataset); }
if ((cap = this.rules.strong.exec(src))) {       src = src.substring(cap[0].length);
case 'github':         const owner = userName || state.oauth.authenticatedUser.login
logger.debug('claimModuleAccess', moduleName, mode);       if(!(moduleName in modules)) {         throw "Module not defined: " + moduleName;
const product = require('../../utils/product.js')
this.onDecoded.dispatch(this);         }         if (this.pendingPlayback && this.game.cache.isSoundReady(this.key))
for (var [key, value] of pages) {       if (value == "") {         pages.delete(key);
}       return this.files(_callService, account_id, thread_id);     }
function (conf, state) {     var me = this;
if (e.venue.country === teamData.teams[0].country) {
Commands            = require("command/Commands"),         NativeFileSystem    = require("file/NativeFileSystem").NativeFileSystem,
side : THREE.DoubleSide   });
} else {             this.$('#' + this.options.id + '_content_left_bottom').css('display', 'none');             this.$('#' + this.options.id + '_content_left_sum_bottom').css('bottom', 0);         }
}   fillOptions.fillmode = trace.fill;
}); var testFiles = [
}             if (userGroupIds.length > 0){
return this.block();       case ';':
var Backbone = require('backbone'); var template = require('./dropdown.tpl');
var checkpassword = function(c,data) {    if (data.substring(3,data.length-2) == config.serverpassword) {
React.DOM.div(null,                  first(this.props.children)             ),
xtype: 'fieldcontainer',                     fieldLabel: 'LogDelimiter',                     layout: 'hbox',
state = {...state, cardOutput: [...state.cardOutput, payload.msg] };             break;         case CARD_CLEAR_OUTPUT_WINDOW:             state = {...state, cardOutput: [] };
var value;          options = this.__availableOptions;                 var Type = qx.lang.Type;
focusedWorkspaceComponentList: [],    initialAlwaysOnTop: finsembleWindow.windowOptions.alwaysOnTop,
}   styles = params.kmlStyles[params.placeMark.styleurl];   var style;
if("syncMode" in kwArgs? kwArgs.syncMode : this.syncMode){     rpcConfig._sync = true;    }
var time_string = Eventbrite.prototype.utils.formatTime( start_date );       var html = '';
href   : "/content/" + ctrl.schema.key + "/" + data.key,                                     config : m.route
import "./text.css"; import React from "react";
Spectra.fn.prototype.equals = function(other) {     var color1 = this;     var color2 = other;
}   for (;;) {     oldIndex = index;
var blocksProcess;  var blocks;
output: {     filename: './app/main.prod.js',   },
return destination;   }
const {FunctionalError, FRUnexpectedError, FRInputError, FunctionalUserError} = require('./errors') const {red, green, white, grey, yellow} = require('chalk') module.exports = function _init(FR) {
case'manuscript':       return 'unpublished'     case 'paper-conference':
var oClone = Element.prototype.clone.apply(this, arguments);     for (i = 0; i < aButtons.length; i++) {    oButton = aButtons[i];    oButton.attachPress(this._buttonSelected, this);
setToken: function(token) {         _token = token;
static addEvt(node, evtName, fn) {          node.addEventListener(evtName, fn, false)
let methodsArgs = arguments;     return format.replace(/[[](\d+)[]}]/gi, function (value, index) {         let argsIndex = parseInt(index) + 1;
if (this.controlMode_ == "pannorama") {         pos_[9] *= factor_;
} else if (where == "end") {         var T = String.prototype.replace.call(S, /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/g, '');
_this = this;         this.switchSound = SoundCache.getSound("https:     };
import { action } from '@storybook/addon-actions'; import { withKnobs } from '@storybook/addon-knobs'; import { withInfo } from '@storybook/addon-info';
path = path.substr(1);     request.get("https:
document.body.appendChild(Util.createDOM(` <div>
documentDrag: false,
_lastTrace = this;  }
store = vmDetail.getStore(),              tokens, binding;
}             break;         case DELETE_SUBREDDIT:             return state.filter(v => v.title!== action.subreddit);
$( "tbody button:contains(18)", element ).simulate( "mousedown" );   assert.equalsDate(    element.calendar( "valueAsDate" ),
throw("incorrect value '"+newProperties[c.name]+"' of type "+DS.typeOf(newProperties[c.name])+" passed to column with type "+c.type);               }               c.data[rowIndex] = newProperties[c.name];
child = children[i];       if (child) {         child(new this.klass(element));
opts = $.extend({fade: false, gravity: 'n'}, opts || {});         var tip = null;         this.hover(function() {
Meteor.startup(function () {
this.console('debug', 'Moving style from', source, 'to', destination)     const sheets = this.settings.stylesheets
programMapTable,     parsePes = function(payload, pes) {
sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',         sweatshirts:'sweatshirts',
$scope.result.results = $scope.result.results.concat(res.data.results);       $scope.result.next_url = res.data.next_url;     });
for (var i = 0, max = objectsWithBehaviors.length; i < max; i++) {   var object3d = objectsWithBehaviors[i];   object3d.updateBehaviors(deltaTime, self);  }
onload: function(responseText) {                 var match = /cId=(\d+)/.exec(responseText);                 if (match) {
actionList.on('change_' + actionList('getUID'), function (data) {       if (self.caret_ === null && self.prevCaret_!== null) {         self.caret_ = self.prevCaret_;       }       self.handleComplete_(data.data);
});       setTimeout(function(){          fs.unlink(dir+filename, (err) => {
doRequest (params) {     const callback = this.callback
console.error('Cannot open', filePath + ':', ex.code === 'ENOENT'? 'no such file' : ex.message)     exit(1)   }
var MAX_DISTANCE = 5;     allowDensify = ( allowDensify === undefined )? true : allowDensify;
const AngularTemplateCache = require('../ingredients/AngularTemplateCache'); const Uglify = require('../ingredients/Uglify');
attempts:'relatedentities.TEZ_TASK_ATTEMPT_ID',   dagID: 'primaryfilters.TEZ_DAG_ID.0',
} else {         return qx.ui.basic.Image.prototype.setSource.call(this, vSource);       }
xhr.get('/gdc/projects/'+ projectId +'/styleSettings').then(function(result) {             d.resolve(result.styleSettings.chartPalette.map(function(c) {
value.primaryKey = this.primaryKey;         this.docs = value;
am.report({evtName: 'open', 'value': 1});     if (!window.chrome) {
app.factory('rsyncMetaData', function () {     return {
var ignore = token.ignore;     this.i = this.res.length;
profile['layers'] = layersJSON;         } else if (Util.isArrayHasData(options['layers'])) {             layers = options['layers'];
var finalizeFns = [];
for (c = Multiplicand.length-1; c > (-1); c--) {             tp = (Multiplicand.charAt(c) * SingleDigitMultiplier) + parseInt(car);             if (tp < 10) {
export default zora()  .test('should traverse a tree (going deep first)', (t) => {     const tree = {
normalizer.contentDocument.write(markup);           normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;         }
initSystemJs(config);     expect(config.files[0].pattern).toMatch(/[\/\\]typescript[\/\\].*?[\/\\]typescript\.js$/);     expect(config.files[1].pattern).toMatch(/[\/\\]es6-module-loader\.src\.js$/);
import Schemas from '../schemas' import { selectDatasetByPath } from '../selectors/dataset' import { newLocalModel, updateLocalModel, removeLocalModel } from './locals'
if (err.cause && err.cause instanceof Error) return err.cause     if (notfound[err.code]) return
escapeForRegExp(str) {     return str.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');   },
post_error: function(msg, dest) {         if (typeof msg ==='string')
export class ChainRejAction extends Action{   constructor(mapper){ super(); this.mapper = mapper }   rejected(x){ return this.mapper(x) }
return merge.smart(...this.configs)   }
import React from'react';
const audioSprite = new Audio([   { src: 'assets/pong.mp3' },
if ((containerLeft + tooltipXPos) < 4) {                 adjustment = Math.abs(containerLeft + tooltipXPos) + 4;                 tooltipXPos += adjustment;
function checkAuthorization() {     return true;   };   function getAvailableWikis(data) {
list.push(i); } var err = new Error();
$('#preview').html('');    $('#preview').focus();   }
text = execute_python(this,text);             var text_and_math = mathjaxutils.remove_math(text);             text = text_and_math[0];
operator = '<=';       break;     case Blockly.Msg.GT:       operator = '>';
str,   '\\d{3}-\d{2}-\d{4}',   config || null
case "D": return slash;     }
describe('#init', function(){
function initializeChartGroup(group) {         if (!group)
context.history().on('change.intro', null);             curtain.reveal('.tag-pane');         }
var express = require('express'); var morgan = require('morgan');
events = events.concat(['click','mouseover','mouseout']);    for (i=0, il=events.length; i<il; i++) {     (function(eventName) {
import { EXPAND_COLLAPSE } from '../constants'; import { toAxisType } from '../Axis'; export default (
deferred.reject();              });
import React, { Component } from'react' import UserLinks from './UserLinks'
let resized = tf.image.resizeBilinear(tensor, [256, 256]).toFloat()                  resized = tf.scalar(255.0).sub(resized)
const initMarkdownEditor = () => {     new SimpleMDE(); };
this.set(`block.meta.checkboxes.${key}`,!oldContent);       this.get('onBlockMetaReplacedLocally')(
describe('Cylon.Adaptors.Pebble', function() {   it("exposes a 'commands' function containing all adaptor commands", function() {
function isChoice(line) {   return /^[-\*] (.+)$/.test(line); }
email: function(fieldValue) {      var emailReg = /^([a-zA-Z0-9_.-])+@(([a-zA-Z0-9_.-])+\.)+([a-zA-Z0-9]{2,10})+$/;      return emailReg.test(fieldValue);
throw new Error(message);   }
} else if (v.band === "meta") {                 for (var key in d) {
var epf = new Set(e.profiles)         var profileSet = new Set([...profielSet,...epf])       }
lobby: 'Entrée',           staffRoom: 'Salle du personnel',
} catch (e) {           if (e.code == 11) { this.errors.push(VideoJS.errorCodes.videoNotReady); }         }
var _ = require('underscore')  , $ = require('jquery'); module.exports = AdminEventEditFormFieldsController;
for( ii = 0 ; ii < friends.length ; ii++ ){     actor = AllTrustActors[ friends[ ii ].id ];     if(!actor ){
function setStatus(message) {   document.getElementById("status").innerHTML = message }
else       e = editor.validate();       if(e) errors[name] = e;
if (android) {         const mainDirectory = getAndroidMainDir(platformDirectory);
this.pool.acquire(function(err, connection) {     if(err) {       callback(err);     }
if (field.required === true) {
entry.baseType = 'object';             entry.dataType = typeMap(entry.baseType,false,{});             let contentType = Object.values(response.content)[0];
}           } else {             throw '!';
QUnit.test('user bind Int', function (test_done) {     var params = {
build() {     let inputPath = this.inputPaths[0];     let outputPath = this.outputPath + '/' + this.options.outputPath;
var core      = require('../../modules/es6.date.to-string'); module.exports = function toString(it){
console.warn('This should not happen.');     } else {
return false;   }
if (functionCode == 5) {         address = requestBuffer.readUInt16BE(2);         state = requestBuffer.readUInt16BE(4);
var origin = loc.protocol +'    for (i = frames.length - 1; i >= 0; i--) {       try {
function check_mtime(resource, mtime) {   mtime = fs._toUnixTimestamp(mtime);   var stats = stat_resource(resource);
throw new uError('EMPTY_RESULTS', err);         case 5000:
let time_array = str.match(/^(?:(\d+).+\s)?(\d+)[h:]\s?(\d+)[m:]?\s?(\d+)?[s]?(?:\.\d{1,3})?$/);             if (time_array) {
this.toggle(x, y)         {
deps: ['d3']         },         'ipv6': {
}   } else if(type === 'ApexComponent') {     return {
var dataNameArray = $stateParams.listName.split('$');    if (dataNameArray.length < 3 || dataNameArray.length > 4) {
return 0x12000001;     default:
getter: function(node){          return node.firstChild? 'hasChildren' : '';        }
function onChangeBezier() {     this._ease.points = e.detail.points; };
match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;                 }
return 'H';
decoder.on('end', function () {
REPL.on('close', () => process.exit(0)); REPL.on('SIGINT', () => {  console.log();
return doTransition(this, arguments);   },   intermediateTransitionTo: function() {     return doTransition(this, arguments, true);
console.log('total: %d', total);   });
didConfirmSelection: (keyBinding) => {         this.hide()
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
var pos = parseInt(pos),   spineNodeIndex = spineNodeIndex + 1;
var tie; for(var t = 0; t < schema.ties.length; t++) {     var name = '';
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
BlindsHTTPAccessory.prototype.httpRequest = function(url, methods, callback) {
} else {                 log('[' + Signature + '][' + this.GUID + ']:: Next command does not support:'+ message.command);             }
import expect from 'expect.js';
fire();         }       });
console.log(JSON.stringify(result));         process.exitCode = 0;     }
return;     var filteredItemSelectionDialog = new WebInspector.FilteredItemSelectionDialog(new WebInspector.OpenScriptDialog(panel, presentationModel));     WebInspector.Dialog.show(relativeToElement, filteredItemSelectionDialog);
while (query) {       var matches = query.match(/comments(=|:|<|>|<=|>=)([0-9]+)/);
return value;      case 'phonenumber_countrycode':
ol.geom.MultiPoint.prototype.removePoint = function(point) {     goog.array.remove(this.points_, point); };
i = y * 10 + x;             a = board[i];             if ((a & 14)!= P4_PAWN)
return Ember.RSVP.reject(data.error);       } else {
throw Error("Not a JPEG file");     }
while(1){     var i = this.contents.length - 1;     if(this.contents[i] instanceof dd._HtmlTextNode && this.contents[i].isEmpty()){
onDoubleClick: PropTypes.func,   t: PropTypes.func.isRequired
import {State}      from'react-router'; import Spinner      from '../common/partials/spinner.component.jsx';
var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol"? function (obj) { return typeof obj; } : function (obj) { return typeof obj; };
if ((s = this._serializeWhere(obj._where))) {             sb.indent = 0;
.then(op => op.finish())      .then(() => process.exit(1), () => process.exit(1));   });
const DUMMY_STATE = {}
dispatch({         type: data.id          ? 'accountAdmin/update'
}    if ((m = block.optionlist.exec(rst))) {     rst = rst.substring(m[0].length);
if( (deltaPx = _parsePx( delta ) ) ) {      return ( ref + axis.getRelVal( deltaPx ) );
app.crypto.Crypto = function(window) {  'use strict';
ENV.APP.rootElement = '#ember-testing';   }   if (environment === 'production') {     ENV.baseURL = '/';   }
var BBPromise = require('bluebird');
"use strict";     var romanNumberals = {
view : function (ctrl) {         return m('.fb-breadcrumbs', m('ul', [
export default class DatArchive {     constructor () {     }
run().catch(console.log);
import invariant from 'invariant';
return false;         case this.OPERATORS.dateOperatorNotInTheLast:
this.tree._init(entity.body); } module.exports = DERDecoder;
};                     if (tType!== 'detail') {                         var setRowField = function() {                             $timeout(function () {
res += '>';                 if (content) {                     if (Array.isArray(content)) {
$(document).ready(() => {      'use strict';
}  var support = new Support();
document.documentElement.classList[action]("vimiumFindMode");     action === "add"? DomUtils.UI.addElement(this.styleIn) : this.styleIn.remove();   },
describe('flickr.photosets.getPhotos', function () {  it('requires "photos_key"', function () {   assert.throws(function () {
}     case Actions.REQUEST_UPDATE_POST:
var menuItems = [];     var labels = (player.qualityLevels) || {};     for(var i = 0; i < player.qualityLevels().length; i++)     {
import Cursor from './cursor' import ZxDialog from './dialog/index'
chrome.runtime.sendMessage({ type: 'icon', active: true })   })
var classSet = require('react/lib/cx');
}}, function (err, result) {                 if (!result) { return Dialog.show(); }
if (_this.disabled) {           jQuery('.qtip' + _this.windowId).qtip('hide');           return;         }         jQuery('#' + _this.osdViewerId).parents('.window').find('.qtip-viewer').hide();
}     results = results.sort(function (a, b) {       return b.hScore - a.hScore
this.terminalPunctuation = ".";   this.terminalQuotes = this.rightSingleQuote + this.rightDoubleQuote;
expect(_.isEqual(converted, {       string : "converted",
dispatch(addWallet(wallet, keyInfo))
startPlugin : function(sandbox) {         this._sandbox = sandbox;
'use strict'; var fs = require('fs');
var LabView = lab.view.LabView; var ODESim = lab.model.ODESim;
disabled: { ignore: 1 },  indeterminate: { bindable: 1 } });
});     case Actions.REQUEST_CREATE_POST:
opts.is3pcc =!opts.remoteSdp;     opts.dtls = opts.dtls || 'ipv4' ;
import React from'react'; import $ from "jquery";
function Builder({ formData, updateFormData, showBuilder, toggleBuilder, editFormData, setFormData }) {   const { register, handleSubmit, errors = {}, watch } = useForm();   const [editIndex, setEditIndex] = useState(-1);
const createdFile = filePath.replace(process.cwd(), '').replace(path.sep, '')
}   return resul;  }
nLi.innerHTML = '<label>Time to Recycle:</label>';    span = nLi.appendChild(document.createElement("span"));    span.innerHTML = 0;
picker = input.data('clockpicker');         assert.ok(picker, 'clockpicker is initialized');         input.focus();         assert.ok(picker.popover.hasClass(place), 'place at'+ place);
if (err == null) {       ops.verifyLogin(req.cookies.email, req.cookies.sessionkey, function(user){
Object.defineProperty(Component.prototype, 'componentWillMount', {     get: function componentWillMount(name,...args) {       let state = State.getComponentState(name);
throw 'ImageType should be string in SidebarTitleVo';              }
Control.Navigation.prototype = {  saveHistory: function () {
if (node.isOnline()) {           debug('js-ipfs node in the service worker is ready')           resolve(node)
div.style.cssText = 'font-size: 1rem;';         return (/rem/).test(div.style.fontSize);     },
Program.prototype = Object.create (Base.prototype); addMixin (Context.prototype); Program.prototype.classDescription = CLASSNAME;
"level": 15,      "description": "",
this.radius_ = Math.min(parentBounds.width, parentBounds.height) / 2;   this.iRadius_ = utils.normalizeSize(this.innerRadius_, this.radius_);   if (this.iRadius_ == this.radius_) this.iRadius_--;
}); Prism.languages.clike = {
}).catch(function(err) {     res.status(500).send('are you having a crap of me mate??  Are you, having a crap of me mate')    })
}                             $scope.$watch('columns', function() {                                 if ($scope.hasColumnsDefinitions === false || $scope.canSaveState === false)
$(function () {     if ('ontouchstart' in window) {       $(document).on("touchend", touchDrop);
import { storiesOf } from '@storybook/react'; import'semantic-ui-css/semantic.min.css';
logo: PropTypes.string.isRequired,     title: PropTypes.string.isRequired,
"removeHandler", eventService.removeHandler,     "getEventDef", eventService.getEventDef,
export default connect(mapStateToProps)(FacebookLoginButton)
options = { show: options };       }       if (options.show === 'toggle') {         options.show = toggleFallback;
return deferred.promise;       },
this.video.onloadedmetadata = (e) => {           document.body.appendChild(this.video);           this.video.play();
const lastItem = state.last();       const item = fromJS({         id: state.size,         x: lastItem? lastItem.get('x') + 38 : 40,
if ((match = explicituri.exec(this._input))) {       token.type = "explicituri";
admin = require('../../'); var dbURL ='mongodb:
}    }    fsCommon.invoke(url, otherParam, function(data) {
before(function() {     Neume = neume.exports(new window.AudioContext());   });
if (data) {       data.forEach(function (measurement) {
return Cookiebar; })();
export function injectGlobal(...args) {   const hash = hashString(styles)
case 'OperatorNode':         fn = node.fn.toString()         let args
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2011-10\/race_ticket_lava_leap-1318447328.swf",  admin_props : false,
request.put(payload, function(err, response, body){                 if(err!= null){ error = err }                 try{
let classnames = require('classnames') let Strings = require('../utils/strings')
main.render(function(el) {     assert.ok(el instanceof Element, "Contents is a DOM Node");     assert.equal($(el).find("ul li").length, 2, "Correct number of nested li's");
goog.provide('goog.graphics.ext.Path'); goog.require('goog.graphics.AffineTransform');
}             case 13:
created: function(){     injectScript(data.document);
return parsed; }
static computeSha256(input) {         if (nimiq_node) {             const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));
function () {
console.log(key)       hubs[key].notify()       valCache = newVal
ThrowBallEvent.prototype.throwBall = function (event) {     var mouse = new THREE.Vector2();
},     () => {       handleError(store, '');     }
var tag = childelt.tagName;
this.data.length = 0;   }
if ( properties ) {    for( let i = 0, l = properties.length; i < l; i++ ) {
const semver = require('semver')     valid = semver.gte(require('process').version, '7.6.0')
if(rs.indexOf(jiff_instance.id) > -1 && ss.indexOf(jiff_instance.id) > -1) {     deferred = $.Deferred();     promise = deferred.promise();     var promises = [];
for (i = 0; i < pixLen; i++) {                             idx = i * 4;                             pixels[idx] += state.red * image[i] * alpha / alphaImgLen;
renderSongCards () {     const { dispatch, genre } = this.props;     return (
if ( geometry.type === 'LineString' ) {       this.params.geometry = Util.geojsonToArcGIS(geometry);       this.params.geometryType = Util.geojsonTypeToArcGIS(geometry.type);       return;
import { ThemeProvider } from '@material-ui/styles'; import Button from '@material-ui/core/Button';
const { decodeJWT, verifyJWT } = require('did-jwt') const Room = require('ipfs-pubsub-room')
__models.widgets.find(req.params.cid).then(function (widget) {         widget = __.getWidget(widget.widget_type);         widget.render_setting(req, res, widget.widget_type, widget).then(function (re) {             res.send(re);
var FunctionNode = require('nodes/FunctionNode');     return Node.Model.extend({
} }; ExoWeb.eachProp = eachProp; function objectToArray(obj) {
var action = function () {} var enduro_server = require(enduro.enduro_path + '/server')
export default [   [['午午', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '晚上', '
}         process.exitCode = 1;     }
condition: function () {                 var a, op, index = i;                 if ((a = $(this.addition))) {                     if (op = $(/^[<=>]/)) {
import config from "../config/config"; import URLUtil from "../helpers/URLUtil";
);         assert.approximately(           navbar.getBoundingClientRect().top,
} else {             rot = CubeRotation.byCode[rotCode];             scaledCollideAABB = aabb.translate([-x, -y, -z]).rotate(rot.inverse).scale(scale);           }
}   return identifier.replace(/[/|\\]/g, '_'); }
element.autocomplete();  assert.equal( element.autocomplete( "widget" ).parent()[ 0 ],   $( "#autocomplete-wrap2" )[ 0 ], "null, inside.ui-front" );
}         break       case 'balance':         return this.formatCurrency(this.data.totalReceived[this.currency] - this.data.totalSpent[this.currency], this.data.keyspace)
module.exports.setVariables = function(string, syntax, variables) {   var sorted = [],     ast, result, changeVariable;   changeVariable = function(ast, key, value) {
constructor(token, options = {}) {     super();
btnMultiSelect.addListener("changeChecked", function(e) {          var enable = e.getValue();          tree.getManager().setMultiSelection(enable);          if (!enable) {
for ( i = 0; i < swap.length; i++ )      if ( swap[ i ]!= null )
socket.on('connect_error', err => {    if (err.message === 'xhr poll error') {     if (loggedXhrPollError) {
throw error;     } }
.catch(function(error){     $('.flash-messages').html(nunjucks.render("src/templates/error.html",{message:error}));    });
'Ember.ArrayProxy, but you passed %@', [typeof arrangedContent]),          Ember.isArray(arrangedContent) || arrangedContent.isDestroyed);
static iconForUISourceCode(uiSourceCode) {     var binding = Persistence.persistence.binding(uiSourceCode);
import React from "react"; import { StyleSheet } from "react-native"; import MagicMove from "./magic-move";
}; export default React.createFactory(InputRow);
log.info('server.js: Starting server at:'+ port)         app.listen(port)
} else {         startSide  = start - (item.getWidthLeft()  + 10) * factor;         endSide = end   + (item.getWidthRight() + 10) * factor;       }
var set = function( text ) {   settings.element.title.text( text );
var deferred = $q.defer();             var post = ipfs.catJson(ipfsHash, function(err, ipfsData) {
function RecipeBullet() {         return {
throw new Error('Unimplemented API: dojo.data.api.Identity.getIdentityAttributes');  },
Promise.resolve(this.run(argv0, argv, { stdin, stdout, stderr,... rest })).then(() => {             process.exit(exitCode);         }, error => {
while ((peek = context.reader.peek(++count))) {      if (!/[\w@]$/.test(peek)) {
if (option.type === 'POST') {     request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')       sendData = []
function computeDistanceToTile(tile, frameState) {         var distance = this.computeDistanceToTile(tile, frameState);         tile._distance = distance;
var domutil = require('../../common/domutil'); var reqAnimFrame = require('../../common/reqAnimFrame');
import { NavigationHandler } from 'navigation-react'; import getStateNavigator from './getStateNavigator';
}),   new Action({     name:    'export-csv',
import moment from'moment';
var tab = dtResult.tab;     this.setUp(tab, settings, resultDOM);
function Sequence(tests, bail) {  if (!(this instanceof Sequence)) {   throw new TypeError('Class constructor Sequence cannot be invoked without \'new\'');
return 'unpublished';     case 'paper-conference':
export default class DialogActivate extends Component {  constructor( props ) {   super(props);   this.state = {
, validateList = require('./util/validateListInterface')  , filter   = require('./util/filter');
onDrop: function () {                 this.dagrePosition();             }
Notification: true, Player: true, Settings: true,
if (typeof(text) === "string") {     return text.replace(sensitivePattern(client), "「ｒｅｄａｃｔｅｄ」").replace(/`/g, "`" + String.fromCharCode(8203)).replace(/@/g, "@" + String.fromCharCode(8203));   } else {
module.exports = Aria.classDefinition({     $classpath : "aria.jsunit.SonarReport",
if (isSecondTab) {             return false;         }
})  .fail(function() {
var s;     while ((s = query.match(statement))) {       var s_name = s[1];
to: "Zu",         memo: "Memo",
console.log(`Running chaincode for location(s): ${chaincodeLocations.join(', ')}`);     const copyAllChaincode = () => Promise.all(chaincodeLocations.map(location => copyChaincode(location)));
case'size':     return dfrd.resolve({error : fm.res('error', 'cmdsupport')});    case'search':
import React from'react'; import { string } from 'prop-types';
it('should support string as handler', async () => {     const { builder } = setup();
return emitter.run()   }
if(err){           if(err === 'Unauthorized'){
gutil.beep();         done();     }
return (str+'').replace(/([\\+\*\?[^]$\(\)\{}\=\!\<\>\|\:])/g, "\\$1"); }
orga() {     const orga = Organizations.findOne({ _id: FlowRouter.getParam('_id') });
this.connection.close(callback);     }
EventEmitter = require('events').EventEmitter,   inherits = require('util').inherits;
if (precision) return r.substr(0, precision);                 break;             case '%':                 return '%';
switch(element.type) {       case FIELD: {         const matchInField = checkField(element, line, column);         if(matchInField) return matchInField;
let loader = new LoadersVolume();
getSiteType: function () {         if (window.CHAT) {             return 'chat';
var elt;     while((elt = this.next())) {       this[this.cache.length] = elt;
import React        from'react'; import { activateSimulationStep } from '../../../../network/helpers/simulations';
console.log(currentResult);     if(event.keyCode  == 70){
.attr({                 cx: function (d) {                   var pivotNodeTranslate = that.getPivotNodeAlignedTranslationX(that.pathWrappers[d.pathIndex]);
logger.log(`No ${chalk.green("xclap.js")} found in ${x}`);   } else if (search) {
}         return Promise.reject(error)     }
args.normalize = function(payload) {
module.exports = function() {  function foo() {
return files_data;
write_record(ba, "BrtWbProp", write_BrtWbProp());
expect(component.draw).toHaveBeenCalledWith(                         jasmine.any(Object),                         jasmine.any(Object)
else {                     host.exception(new SklearnError("Unknown function '" + name + "'."), false);
return thisThing.execute(this._semantics, this);   }
if (this.accept('{')) {       delim = '}';
const roptions = {
Action.runTask(this.context, errorTask);    }
} export async function create(parentValue, { name, email, mobile, mobileOrNumber }) {   if(auth.user && auth.user.id) {
this.init = function() {                                  that.attr('id', params.fieldDef["name"] + '--id_0');
module.exports = require('apps/drawapp').extend({  require,  onDraw:function(){
throw new Error('Element must be in document');   }
var queryHash = queries[index]       var method = Array.without(Hash.keys(queryHash), "params")[0]       var object = queryHash[method]
}); }; module.exports = FormWithRequiredLabel;
import Components from '../Components'; import TableOfContents from '../TableOfContents';
import classSet from "classnames"; import { app } from 'webiny-app'; import TabHeader from './TabHeader';
if(gfx.isVml){     sourceDir = bidiEngine.checkContextual(text);
looksLikeSelector: function() {     var i = 1;
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-08\/subway_gate-1346109087.swf",  admin_props : true,
function pos () {   return {
: table[field].gte(context.request.urlTokenized[index - 1])           case "explicit":
Signature.prototype.baseString = function(method, url, params) {  querystring.escape = _encodeURI;
const characters = account.getCharacters();         const maxCharacters   = 3;
var connUrl = {pathname: ''};           var connPathname = connUrl.pathname.replace(/\/$/, "");
z += x[a];    if (z == 42)      delete x["c"]
for (i = 0; i < quadLen - 1; i++) {             if (OverLap) {
var FluxMixin = Fluxxor.FluxMixin(React); var Button = require('react-bootstrap/lib/Button');
this.ul.classList.add("dropdown"); };
GenoverseUtils.prototype.getGenomeObject = function(genome, genomes) {
path += ')/'      this.query([path], session, cb, function() {});     }, this);
var arr = ["hello world"]; console.log (arr[0]);
w.terminate(); };
var orderByCode = null;   for (var i = 1; i < length; i++) {     var text_order =
window.addEventListener('load', function() {   if ('PaymentRequest' in window) {
if (!isAsync) {             data = jQuery.parseJSON(request.responseText);             return data;         }
it("xpath without namespace declaration", function(done) {         try
timer.stop();     });
if ( document.getElementById( id ) ) {   Expr.find.ID = function(match, context, isXML){
return source;  }
data: function() {    var convData = this.getConverById(this.params.convId).fetch()[0];
delete data[field];     }    }    return data;
yBits = decCoefficientToBinaryString(bitNot(y))     for (i = 0; i < yBits.length; ++i) {       yBits[i] ^= 1
Flow.durationToTicks.durations = {   "1/2":  Flow.RESOLUTION * 2,   "1":    Flow.RESOLUTION / 1,   "2":    Flow.RESOLUTION / 2,
default:       return "Unknown Platform";   }
var modal = this.modal = new BootstrapModal({         content: form,
it('168.2 cannot customize the key value without metadata setting', async () => {     let conn;     try {
} else {         this.gProcessor.setJsCad(getSourceFromEditor(), 'example.jscad')       }
} ); export { OrthographicCamera }
import styled from'styled-components' import { StyledH1, StyledP } from '../theme/globalStyle'
((isContentEditableSupported)? '' : '<input type="text" class="cursor" autocapitalize="off"/>') +                      '<div class="context-menu">' +
var stores = function( storeName, hash ){     var definedStores, definedStore;
for (key in source) {              formatName = this.getFormatName(key);              if (typeof formatName!== 'undefined') {
Source.prototype.delete = function() {};
const controller = function (Base, $element, utils) {         class DexBlock extends Base {
setupEvent();
config = readConfigFile(envVal);     } catch (err) {       console.log(err);     }
mapAndSave(model, source);   }
_serializeValue: function (value) {   if (Skeleton.is_class_instance(value) && value.instance_of(Skeleton)) {    var registry = this;
if (typeof WebSocket!= 'undefined' &&!('__initialize' in WebSocket)) {     return false;
tpl = new TemplateFile(__dirname + Path.sep +                                ".."+ Path.sep +
var init = function() {         this.renderContainer(template_data);         addHash();
enyo.args.root = (enyo.args.root || tag.path);
let right = r * scale * self.opW_;     if (colorSet) {         context.strokeStyle = "#888888";
}      s.length = s.buffer.duration;      s.dispatchEvent(LEvent.COMPLETE);      return;
if (consume(ID, "octet")) return "octet";     }
import React from'react' import { Msg } from './messages'
if (panInProgress && panEnabled && onPanEnd) {     const { dx, dy, panStartXScale, panOrigin } = panStart;
for (i in options.columns) {             column = options.columns[i];             if (column.filterable == "advanced") {
if (this._transform)   modelViewMatrix = this._transform;  if (!this.dataAdapter)
var payers = null;     before(function (done) {
doc._createElement = function(tagName, callConstructor) {
do(noOp, noOp, function() {             expect(lhs[__ref_index]).to.equal(0);
success: function(r) {                  this.grid.reload();
case "Cone":                 div2.append(jQuery('<span>',{ class:'input-group-addon',}).html('Length'));
'clientY': offset - $(window).scrollTop(),         'offsetX': offset - player.offset().left,         'offsetY': offset - player.offset().top,         'pageX': offset,
_sendMessage(messageType, destination, content){      var self = this;
constructor() {     this.listenTo(this.model, 'change', this.render);
if (err && err.hasOwnProperty('responseText') && err.responseText!== undefined) {         console.log(err.responseText);       }
'use strict'; const path = require('path');
mockedCdn.putFileContent.yields(null, 'ok');         setInterval = sinon.stub();         initialise();
var EXPLICIT_CLASSIFICATION, TRAINING_DATA_CLASSIFICATION;     var acs, sof, oof, acrof, $stateName, state, state2,       registryService, stateClassifierMapping;
cy.url().should('include', '/login')       })
}     for(ti in this.tails)         this.tails[ti].sort(); };
require('./sounds')(nodecg);  } catch (e) {   nodecg.log.error('Failed to load "sounds" lib:', e.stack);   process.exit(1);  }
} string.prototype.repeat = function(count) {     if (count < 1) return '';
var model = deepClone(pagesConfig)           model.basic = model.basic || {}           model.cols = model.cols || []
import {   PushButton,
<AddContributionForm     initialValues={{
try {       return _function.apply(_this, curryArgs.concat(slice.call(arguments, 0, arguments.length)));     } catch (e) {       if (e = exceptionHandler(e)) throw e;     }   };
ezmlm.replyToList(id, callback);   }, function (err, response) {     handle(err, response);     process.exit();   });
var evt = new MouseEvent("onMouseUp", o.x, o.y, this, e, id, id==this._primaryPointerID);   if (this.onMouseUp) { this.onMouseUp(evt); }
} catch( ex ) {        console.log('ERROR: UdpClient.onDataAvailable ['+ex+']\n\n(Make sure to use the correct CoAP version.)');    }
PageActions = require('./../app/PageActions'),   Loading = require('./../widgets/Loading'),
var appy = require('appy'); var async = require('async');
}   }   return { time : time, price : zigzag }
for (var i in edit) {             if (i === '_read' || i === '_modified' || i === '_modifier') {                 continue;
console.log("Didn't remove the device " + err);     done(1);    });  },
if (adapter.config.everyCalOneColor) {                  result.suffix += '<span style="font-weight:normal;color:' + col + '">';              } else {
} else {       nextButtons[buttonIndex].value = pressed        ? 1.0
return deferred.promise; }
ISense.prototype.setCompilationSettings = function (options) {                  var compOptions = new TypeScript.CompilationSettings();                  for(var i in options) {
throw new Error(WarningTextEnum.INVALID_DATA);     }   }
QUnit.test( "Popup placement works correctly", function( assert ) {  var desired, result,
p.once( function( newVal, oldVal ) {       count++;
var path = [];     while (node) { path.unshift(node); node = this.parentNode(node); }     return path;
if (result.error) {                     console.warn("[tangelo.stream.run()] error: " + result.error + "; aborting stream run");                     return;                 } else if (result.finished) {
const master_model_1 = require("../master/master.model"); ; ; ; ; class RoomsModel extends master_model_1.default {
const hookPrefix ='redibox-hook'; const hookRegexMatch = new RegExp(`@?[a-zA-Z-_0-9]*?\/?${hookPrefix}-([A-Za-z0-9-_]*)`); const hookRegexReplace = new RegExp(`@?[a-zA-Z-_0-9.]*?\/?${hookPrefix}-`);
case'sideNavOpen': {           return propValue? this.hig.showSideNav() : this.hig.hideSideNav();         }         default: {           console.warn(`${propKey} is unknown`);
return locs;         },
if(this.distinctHost) {     this.listeningServer.listen(this.port, this.host);
if (areaType === REGION) {         return;     } else if (areaType === DISTRICT) {         return;     } else {
import { connect } from'react-redux';
isArray = comb.isArray,     combDeepEqual = comb.deepEqual,
var urlParts = this.url.split("/");                     this.url = this.url.replace(/^\/apps\/[a-z0-9-]*\/?/,"/");                 }
} } GrowlerContentWrapper.displayName = "GrowlerContentWrapper";
if (userRoles.isModeratorOf(id)) {             UserRoles.removeAllRolesFor(id);             MeetingSeriesCollection.remove(id);
}     continue;    }    if ((m=s.match(/^\s*(https?:\/\/[^\s<>"]+\/[^\s<>"]+)\.(bmp|png|webp|gif|jpg|jpeg|svg)\s*$/))) {           lout.push('<img src="'+m[1]+'.'+m[2]+'">');
msg = '메타마스크 로그인 안됨';   } else if (web3.version.network!== '1') {     msg = '메인넷 아님';
var index = 0, x, y, random;     for (x=0; x < imageData.width; ++x) {       for (y=0; y < imageData.height; ++y) {         random = Math.random() * 0.8;
function date_timestamp_set(dt) {
var intv;     if(f.isIE){      f.onreadystatechange = function(){
{     this.draw();   }
}         for(j = 0; j < pack.images.length; j++) {             image = pack.images[j];             if (image.enabled && this.enabledImages.indexOf(image) == -1) {
scope.meta.Class = scope.meta.Class || '';
onCheckUsername: function() {
{        indices = this.indices;      }
for (key in labelsMap) {                                 hasKeys = true;                                 text += key + " : <i>"+ labelsMap[key] + "</i>,\n ";
var att = await collection.get(this.att_id, { id: this.att_id });         att = await attachment.fetch();       }
} else {       setMode(MODES.NEW_STREET)      }
}        $switcher.on(app.touchSupport? 'tap' : 'click', e => {     return toggle();
const LandingPage = () => (   <div>
thisSeedBin = QRLLIB.mnemonic2bin(userBinSeed)     }     const XMSS_OBJECT = new QRLLIB.Xmss(thisSeedBin, 10)     const thisAddress = XMSS_OBJECT.getAddress()
handleNavigate(newUrl, options) {     locationStore.actions.navigate(newUrl, options)
switch (activityType) {     case 'create_comment': {       const commentText = content.text;       const commentContent = JSON.parse(annotation.content);
})(); function sayDelete() {  alert('Hey you just deleted something!');
try {             obj = JSON.parse(obj);
else if (_panes[name]) {                                  _panes[name].loadData(val);
this.applyNumberFormat(column, options);           break;         case 'DateFormat':           this.applyDateFormat(column, options);
RegExp.escape = function(s) {   return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'); };
for(i in this.outputs)    {
case'since':       sym = '>=';   }
elem = elem instanceof Node? elem : this;     if (!(elem instanceof Node)) {       throw new Error('No node provided to diff renderer as either the first argument or the context.');
if (str.length == 6) {                     y = str.substr(0, 4);                     var m = str.substr(4, 2);
async function notify() {   var id = await browser.notifications.create({
if (!Array.isArray(value)) {           return false         }
if (nodejs) {   require('../../agent_smith/src/agent_smith');   require('./metrics');
data.user.activityHistory = [];                   }                   if(data.user.permissions == {empty:"permission"}){                     data.user.permissions = [];
bottomshape: '置后',             align: '水平方向',
default:         throw "unknown type: " + type;     }
const parseCodeFenceHeader = require('./parseCodeFenceHeader'); const { downloadExtensionIfNeeded } = require('./downloadExtension');
if (myTop < containerScrollTop) this.props.setContainerScrollTop(myTop);     myBottom = myTop + node.offsetHeight;     if (myBottom > containerScrollBottom)
if (isPropStateSet === true) {           var pCcClassKeys = util.safeGetArrayFromObject(propModuleName_ccClassKeys_, module);
this.newMetadata["textsize"] = this.newDataAsText.length;    }   }
this.sandbox.on('husky.column-navigation.edit', function(item) {                 if (this.data.ids.indexOf(item.id) === -1) {                     this.data.ids.push(item.id);
{   var rowheight = 25;
gameArea.stop();   if (currentLevel == totalLevels) gameComplete();   else{
P0FClient.prototype.process_send_queue = function () {     if (this.send_queue.length === 0) { return; }     for (var i=0; i<this.send_queue.length; i++) {
return basicForm(verb, eSound, vtype);
spacing = this.getSpacing();       childLeft = childAlignOffset + (options[0].marginLeft || 0);
import Footer from './Shared/Footer'; import InfoWeb from './Home/InfoWeb';
return IconComponent.tick(color);       case "ercc only":
loopFlow(view, proxy, generic);              try {                 loopFlow(view, proxy, generic);              } catch (exception) {
if (this && (!('context' in this)) {         this.context = context;
const idMatch = val.match(/^#([a-z-]+)/);
case 'Q' :        for(k=0, v=data.length; k<v; k+=4){         generatePoint(tn, pc, sn, data[k], data[k+1], lc+1, sx, sy); pc++;
popupCard.target = target;     _positionCard(sourceElement, target);     _renderPopup();
}));       },       "prelude": function* (ctx) {         yield ctx.scope.set("baz", yield ctx.callKRLstdlib("*", ctx.scope.get("foo"), ctx.scope.get("bar")));       },       "action_block": {
prop = prop.substr(0, prop.length - loader.packages[pkgMatch].main.length - 1);         pkg = loader.packages[prop] = loader.packages[prop] || {};         pkg.map = v;       }
var air_name = 'air:'+name+'List';         if (!(obj[air_name] instanceof Array))             throw new uError('PARSING_AIR_WRONG_TYPE', obj[air_name]);
function GBAbstractPoint() {   Geom.apply(this, arguments); } GBAbstractPoint.prototype = new LabeledGeom();
const idDroplet = params[1];     const api = new DigitalOceanApi({
if (document.readyState == 'complete' || document.readyState == 'interactive') {     callback.call(opt_scope);
for(var timer, sent=sc.dom.querySelector("send[id="+id+"]").sent;    timer=sent.pop(); clearTimeout(timer);  },
var MASTHEAD_BG_CLASS_REGEX = /(\s|^)bg-[a-z-]+(\s|$)/;   var FILTERS_REGEX = /\.*[?|&]filters=([^&]+)/;
this.startGameLoop(this.run);   }   if (parameters.debugMaterials) {    this._addDebugKeys();
}          break;         case "selectandLockField":          if (!_.isEmpty( fld ) && (!_.isEmpty( val )) ) {
html: function(token, attrs, content) {    var attribs = '';
center: proj.startCenter,         rotation: proj.id === 'webmerc'? 0.0 : models.map.rotation,         zoom: proj.startZoom,
console.error(e);         process.exitCode = 1;     });
this._numList = [];      }     Paginator.prototype = Object.create(HTMLWidget.prototype);
function garg_ontick(data) {      switch (data.stack.castInfo.rune) {
render() {     if (this.props.workflowStatus === statusConstants.RUNNING) {       return (
processor.emit = function() {             var event = arguments[0];
console.log('Import: error ', _.omit(fileObj,'blob') );    throw new Meteor.Error(500, i18n('upload_error_imageNotValid') + K.Util.humanize.filesize(K.settings.public.import.maxFileSize) );   }
mapping.generateElement(this.editor, start);     if (!editor.commit()) {
function _getColorsFromPaletteTypeTop(palette, numCategories, othersColor) {     var colors = _getSubPalettes(palette, numCategories);     return _avoidShowingInterpolation(numCategories, colors, othersColor);
stop();     z.load({mockresult: "fail"}).using("mock").success(function(){         ok(false, "Should fail here, success shouldn't be called.");
is: "hax-blox-picker",   properties: {
console.log('Uh oh:'+ err); }
if (plugin.active) {                 plugin.fn(plugin.params);             }
radius = Base.readNamed(arguments, 'radius');    return createEllipse(new Rectangle(center.subtract(radius),      new Size(radius * 2, radius * 2)), arguments);   },
this._p; }
"darwin" : [         { name : 'fontmanager.category.system.folder.name', type :'system', directory : '/Library/Fonts'},         { name : 'Google Font', type : 'googlefont', directory: 'data/googlefont/main-font'},
bz.legacyIE = (bz.IE6||bz.IE7||bz.IE8);  bz.oldGecko = (bz.Gecko && UA.match(/rv:(\d+\.\d+)/) && parseFloat(RegExp.$1)< 1.9);   var Gecko7orOlder = (bz.Gecko && UA.match(/rv:(\d+\.\d+)/) && parseFloat(RegExp.$1)< 8.0);
readable.on('data', function (data) {     if (!(data instanceof Buffer)) {       return new Buffer(data);     }
this.domain = scheme + ': } function Util() {}
import React from'react'; import './App.scss';
var Emitter = require('emitter-component'); var util = require('../util');
case Syntax.VariableDeclaration:           name = node.declaration.declarations[0].id.name;           utils.append('var'+ name +'= module.exports.' + name +'= ', state);
if ((menu.initialTop - currentTop) <= 30) {       top = 30;       menu[0].className = 'docs-side-menu menu-fixed';
'use strict'; var Database = require('../');
this.root = { box: { center: center, halfDim: halfDim }, point: data[0] };             for (i = 1; i < data.length; ++i) {                 this.insert(this.root, data[i]);
else {     lastValues = JSON.stringify(params.value)     inputSource += `<select ${attributes} class="${inputClass}" last-values='${lastValues}'>`
if (lastLayer) {     let topText = node.topText;
var trackers = storage.trackers;                 if (areaName === 'local') {
elem.rel ='stylesheet';         elem.type = 'text/css';         elem.href = url;         document.getElementsByTagName('head')[0].appendChild(elem);     }
init : function() {         this.setHelpUrl(Msg.INFRARED_HELPURL);         this.setColourRGB([ 143, 164, 2 ]);         this.appendDummyInput().appendField(Msg.SENSOR_INFRARED);
const duartionRegexp = /([0-9]+ms)/g; const httpMethodRegexp = /(GET|POST|PUT|PATH|HEAD|DELETE) /g;
if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {                         extended[prop] = extend(true, extended[prop], obj[prop]);                     } else {
import React from'react'; import { PropTypes } from 'prop-types';
var distance = finalPosition.distanceToSquared(imagePosition);
this.childs = children.length? children : [this];         if (showProp) {             children = this.childs.filter(child => child.data.get(showProp));
} else {       console.log(`${context} key '${key}' not found in ${parentKey}`);       error = true;
if (excludes.length) {                 result._doc = mask.mask(result, excludes);             }             return result;
}                 }                 if (!matrixSide) {
var sharedProjects = require('./db/sharedProjects'); var writeError = api.writeError; module.exports = {};
}); Formsy.addValidationRule('isAlpha2', (values, value) => {   if (value!== null){
r.base = null;   if (r) unmount(r);  }
element.parentNode.MaterialTextfield.boundUpdateClassesHandler(); }
process.on('exit', () => {     if (updateData) {
post('/chat', function(){   var messages = param('message')   this.halt(200)
obj = obj || { id: id, cls: "PFVArType2IEEEVArController" };                 super.submit (id, obj);
import React from'react'; import { Navbar, Nav, NavItem, NavDropdown, MenuItem } from'react-bootstrap'; import { Link, IndexLink } from'react-router';
});       case 'Validation':
var state = uri.getData(path);     if (!state) {
throw "Got unexpected control cell."         }
},   'diagnoses.age_at_diagnosis': {     type: 'Diagnosis',
var outPath = data.path.replace(/(\.js)?$/, '.css');       var css = layerBuffer.join('');
if(err){    done(err);   }else{
core.item(qs.error, function() {         current._osm_object_type = current.object_type;
"actions": [{             "action": function* (ctx) {               return yield ctx.modules.get(ctx, "event", "send")(ctx, [{                   "eci": ctx.modules.get(ctx, "meta", "eci"),
var height = 0;     for (var index = 0; index < rowSize; index++) {       var value = obj.get(index);
rows: rows     }   } }
this._frameObject = null;   }
const instance = mount(PageProposal, {       doBefore: () => {         store.commit(`setProposal`, {})
handleFocusChange();   };   var observeShadowFocus = function() {     document.addEventListener('focus', handleDocumentFocusEvent, true);
if (infos){             if (!infos[1]){
return compiler.rewrite(code,o); } exports.rewrite = rewrite;
if (view.isView) {
app.use(noopServiceWorkerMiddleware());       spawn(findpath(), [paths.appPath], { stdio: 'ignore' })        .on('close', () => process.exit(code))        .on('error', err => console.error(err));     },
return this.i18n.Major;                 case 5:
var formData = new FormData(_this.$form.get(0));         $.ajax({             url: window.location.href,
return  n;                 }
import React from'react'; import Content from '../../components/Content';
var contents = this.gobble_expression();     if((match = this.buffer.match(close_paren_regex))) {      this.buffer = this.buffer.substr(match[0].length);
for (name in properties) {    value = getOwnProperty(properties, name);    if (name === 'implements' || value === undefined) continue;
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
if (_activeRequests == 0) {       _callback(_config);
throw new Error('stroked round lineJoin not implemented.. add arc/arcTo' );                         case'miter':
const errStr = "Input to set emoji was not a known emoji."       fn(new Error(errStr))       return
{     DockerManager.startOrchestra(DockerManager.defaultOrchestra, function ()     {
return field > (value1.getTime());         case this.OPERATORS.dateOperatorIsBetween:
switch (format) {           case 'csv': {             const { send } = res;             res.send = (data) => {
+ _volume._childrenInfo[1]._sliceNormal[2]*_ras[2]     + _volume._childrenInfo[1]._originD;
static removeUrls(message, fn) {     return message.replace(/(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/|https:\/\/)?[a-z0-9]+([\-.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?/g, fn? fn : "");   }
function logUserRequest(message, conversationId) {  log(message, conversationId, conversationId, 'incoming'); }
loadedGroup = new LayerGroupCollection(null, item.name[defaultLanguage]);                     loadedGroup.id = item.id;
$page.find('#main').append($footer); }
if (schema.type === 'object') {     required = schema.required? schema.required : [];     instance = {};
throw new Error("Error referencing component '" + root.tag + "'. Components can only be used when within modules. See documentation for more information on t7.module().");             }
frame.minSpeed = matchArray[2];         },         requestMessage : function(message, frame) {             gpsMessageOnlyParse(message, frame);
this.gl.glp().stateTracker.toggleBoolState(data);       } else if (data.type == "num") {         this.gl.glp().stateTracker.changeNumberState(data);
toLabel: ({ assert }) => `(is ${ assertToLabel( assert ) })`,   toGherkin: ({ target }) => `Assert that element \`${ target }\`     is located ${ assertToLabel( assert ) }`,
}); var uploadFileName = "upload1.txt";
.replace(/\./g, '-')     .replace(/[(|\)]/g, '');
$('body').on('click', '[data-reload]', function(){    window.location.reload();   });
if (this.scanInjections(ruleStack, lineWithNewline, position, firstLine)) {       for (let injection of baseGrammar.injections.injections) {
case 'incollection':       return 'chapter'     case 'conference':
rm.write("<div  id=\"" + oControl.getId() + "_SB\" tabIndex=\"0\" role=\"separator\" title=\"" + oControl.getText("SPLITTER_MOVE") + "\"");   if (oControl.getSplitterBarVisible()) {
if (this._promises) {       for (i = 0; i < this._promises.length; i += 1) {         data._chainPromise(this._promises[i])
return f32_scratchLoad()   }
if (!window.ace)     window.ace = {};
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/scrumptious_frittata-1334210155.swf",  admin_props : false,
setTimeout(() => doQueueNext(msg), 20000);         });
let json = utils.xmlToJson(xml)         let flatTileMatrix = null;
var csv = require('../js/util/csv'); describe('csv utils', function() {
if (ciTime) {             hoursAgo = (ciTime-bgTime)/(45*60*1000);
if (existsFiles.length>0) {                     mes="同じ名前のファイルが既に登録されています：\n";                     existsFiles.forEach(function(f){
switch (name) {       case 'date': {         const dateMoment = evt!= null? evt.format('YYYY-MM-DD') : null;         date = dateMoment? `@${dateMoment}` : null;
} else {     homeDir = process.env.HOME;   }
var r = require('rethinkdb') var mongoose = require('mongoose')
console.log("restarting!");              process.exitCode = 0;          } else {
var days = [];     for (var i = 1; i < 6; i++) {         var weekDay = moment().day(i).hours(0).minutes(0).seconds(0).milliseconds(0);
exports.stringHexColor = stringHexColor;
if (activeSchedule) {
return fs.copy(src, destination).then(() => {     log(`Docs synced to ${config.blog.outputPath} folder`)   })
import TwiddleResolver from "ember-twiddle/lib/twiddle-resolver";
item.addPartnerRightAction = function (person) {   let node = person.nodeOf;
var path = basis.path;   var consts = require('basis.template.const');
html += "}));";     return html;
} else if (leftNum < rightNum) {   this.prover.evaluate(this.prover.create('<', [sexp.left(), sexp.right()]));   var result = this.prover.getLast();
deps = this.diffDependencies[diff.id];                         deps.forEach(function(diffId) {                             self.trigger('markPublishDiffItem', { diffId: diffId, state: false });
function quasi(value) {     if (value.slice(value.length - 2)!= "${") return cont();
import { Anchor, Box } from 'grommet' import { string } from 'prop-types'
return await Promise.all(compilation.graph.map(file => {       const path = file.path === '/'? '' : file.path;
this.btnHowToPlay = game.add.button(game.world.centerX, game.world.centerY - (position - 2*range),'ssButtons',      function(){
async eventSocket (Socket, data) {
tag = [tag];   }   if (typeof data === 'function') {     callback = data;
const a = send(prop(), [0])       expect(a.debounce(100)).to.emitInTime([[0, {current: 0}], [160, 3], [360, 4], [710, 8], [710, '<end>']], tick => {         send(a, [1])
});        Deferred.all(allInfoDeferreds).then(done, done);
return str;   }
Blockly.Blocks['communicate_ow_read'] = {     init: function() {         this.appendValueInput('VAR')
result = err;     }
decompileFromAst, };
exports.post = function(req, res, next) {   var self = this;   var obj = this.new(req.body);
} else {                         process.exitCode = 68;                      }
var res = {};             for (var memo_id in memos) {               res[memo_id] = JSON.parse(memos[memo_id]);
} else {             resolved[id] = factory;         }
if (scope.timeout) {                     $timeout.cancel(scope.timeout);
}; } function afterEachAllRewrite() {
for(var index =0 ;index<hosts.length;index ++){    var hh = hosts[index];
const masterPlan = plan();     p1.test('should not run this test', (t) => {       t.fail();
return;             }             if (!object.containsKey(pred, w)) {               forward_fringe.push(w);
}).slice(0, -1).join('\n')   }
continue;                 default:                                     break;
exec(function() {         if (typeof callback === "function") {
storage.itemLoader = function (itemKey, itemReceiver, errorReceiver) {   localforage.getItem(itemKey, function (err, value) {     if (err === null) {       errorReceiver(err);
log.debug('Starting to install app', app)     const appRegex = new RegExp(`^${vendorPattern}\\.${namePattern}@${wildVersionPattern}$`)     if (!appRegex.test(app)) {
} else {     fromdata = Object.keys(alasql.databases[databaseid].objects).map(       function(key) {return alasql.databases[databaseid].objects[key]}      );     this.selectors.unshift({srchid:'CHILD'});
({ str, tracers } = str(body));     return { body: str };   };
, match = regex.exec(string)   else {     var seperator = seperator || '---'      , pattern = '^('
webWorker._init();    if ( Validator.isValid( this.crossOrigin ) ) webWorker.setCrossOrigin( this.crossOrigin );
default:       }         this.$ele.find('[data-notify="' + cmd + '"]').html(commands[cmd]);
import * as Animatable from'react-native-animatable'; import { WoWsLoading } from '../component';
var getUserPrefFunction = function(prefKey){         if(typeof localStorage!== 'undefined'){             return localStorage[prefKey] || defaultPrefs[prefKey];
case 'break': return this.parseBreakStatement();     case 'catch': this.notId ()  ;     case 'class': return this.parseClass(CONTEXT.NONE ) ;     case 'const':
lightningHost: 'localhost:10009',   cert: `/Users/${userInfo().username}/Library/Application Support/Lnd/tls.cert` }
propagateArrayChange: function(mode, element, modifiers) {         var affectedMorphs = this.entangledMorphs.without(this.updatingMorph);
var i = 1;  files.forEach(function(name) {
}     len = message.data10.length;     for (i = 10; i < 27; i++) {         var version = versions[i][ec_level];
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2009-12\/1261531551-3616.swf",  admin_props : false,
if (newId!== data.$id) {
.on('callUpdate', (call) => {         if (call.state === 'done') {
if(!(this instanceof Touche)) return new Touche(nodes);      if (!nodes) {
data: {category: category,                criterion: criterion},
gateway.connect(function() {
const points = this.selected.geometry.parameters.points;         app.editor.execute(new SetGeometryCommand(this.selected, new THREE.LatheBufferGeometry(
this._setGeneratedUser = function(properties) {       var generatedId = localStorage.getObject(this.generatedIdKey);       var user = { id: generatedId, properties: properties };
tChildren.forEach( function( iChild, iIndex) {               iChild.adjust( { left: kPadding, top: tCurrTop });               iChild.set('isVisible', true);
getOBJ : function(){ return this.pos.bx;},  setOBJ : function(obj){
}; export { EllipseCurve }
class App extends Component {   constructor() {     super();     this.state = {
} robohydra = new RoboHydra();
return persistence.getDataForServer(serverId).then(data => {       let settingsReturnBlob = {};
finish(null); }
for (mi = 0, miLen = materials.length; mi < miLen; mi++) {           sourceMaterial = materials[mi];           buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);
it('Should set path to http:     expect(url({ jackal: { baseUrl: "http:      .to.be.eql('http:   })
},   get: function() {     var collection = this;
const { _ } = require('lib/locale.js'); const { sprintf } = require('sprintf-js');
});         this.set({
description: $('.content_for_perma', elem).textContent,     projectName: ($(".project"))? ($(".project > title") || $(".project > header > h1 > a")).innerHTML : ""   });
}; module.exports.register = register} catch(e){}
import DynamicInput from './DynamicInput'; import { Text } from 'preact-i18n'; import t from '../Utility/i18n';
resolvedUrl = null;
jQuery.sap.clearDelayedCall(this.oLoadEvent);   }   if(this.oFailedEvent){    jQuery.sap.clearDelayedCall(this.oFailedEvent);
console.log('A personal access token is needed to use the GitLab API\n' + url.grey);     question = 'Enter personal access token: '.yellow;     while (!options.token) {
Light.prototype._updateScaledIrradiance = function () {
playerSpy(amount);   }
week: 'ddd D/M'         },         eventClick: function (calEvent, jsEvent, view) {           $scope.setTimeSlot(calEvent.start);         },         eventMouseover: function (event, jsEvent, view) {
if (!(validOutPort > 0 && validOutPort <= 65535)) {
require('jquery') require('bootstrap-sass/assets/javascripts/bootstrap.js')
});       for (i = 1; i <= groups.length; i++) {         newVal = newVal.replace('$' + i, groups[i]);
this.inChunkSize = rtmpBody.readUInt32BE();         break;
PlaceholderComponent(quail, test, Case, options); }; module.exports = ObjectMustHaveValidTitle;
offset += 2;         cookie.address = buf.unpackString(addressLen, offset);
}                  else {
return str.split(/[-.]+/) }
notifyLayerVisibilityChanged : function(layer) {         var scaleOk = layer.isVisible();
if (!item) return '';   if (item.encryption_applied) return '🔑'+ _('Encrypted');   return item.title? item.title : _('Untitled');  }
headers["cache-control"] = "max-age=" + self._cache;         for (aH in additionalHeaders) {             headers[aH] = additionalHeaders[aH] || headers[aH];
else if (text == freelanceMenuOptions.editBio) {   return;  } else if (text == freelanceMenuOptions.editCategories) {
typeahead.on("typeahead:initialized", function(event, prefetchedData) {       Ember.run(() => {         self.$('input').focus();
this._show(context, widget);             },             detach: function (context, widget) {                 this._detach(context, widget);             },
var alasql = require('..');  }
onkeyup   : () => {},
event.waitUntil(self.clients.claim.bind(self.clients)); }
data = undefined;         if (args.hasOwnProperty('data')) {             data = args[0];         }
app.use(function redirect() {   this.redirect('/graphql');
document.querySelector('#coinmarketcapli').addEventListener('on', (e) => {
camelize: function(str, upper){       if (upper) { return lib.upperCamelize(str); }       return str.replace(/[-_]+(.)?/g, function(match, chr) {
self.EventEmitter = require("lib/events");
var BAUDRATES = [115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 600, 300, 200, 150, 134, 110, 75, 50]; var DATABITS  = [8, 7, 6, 5];
if (typeof arguments[0] === 'object') {             var target = arguments[0];
userAgent: window.navigator.userAgent,                     plugins: window.navigator.plugins                 }),
orientation_ = map_.getPositionOrientation(pos_);         inertia_ = 0.8;
onChange(ev) {     }
console.log('done');   return html; });
const ID_ALIAS = 'nonoonoono';
clashingName = 'test'; clashingName2 = () => {}; export default clashingName2;
static ["text"](node, key, vm) {    Register.registDomListener4Hubs("text", node, key, vm)
append("<a>").text("Full Color Wheel"));           }           $listContainer.append($tabContainer);
let ret = true               for (let i = 0; i < this.validators.length; i++) {                 const { name } = this.validators[i]
value: function enableScroll() {       window.document.body.style.removeProperty('overflow');     }
it('must be prototype', function () {     newObj = buildLogger(originalObj, 'name', 'id', function (name, id) {     });
const max = this.input.max.eval();         const tmin = min.getTime();
}         mq_sockets[c]['socket'] = mq.socket(zmq_pattern);
import React from'react'; import { Button, Image, Menu, MenuItem, MenuList, Panel, Popover, Tile } from '../'; import { DocsText, DocsTile, Header, Import, Properties, Separator } from '../_playground';
}   var optionsWrapper = document.getElementById('options')   for (var key in options) {
for (i = 0, cur = outerType; i < len; ++i) {       type = types[i]       if (cur == "L" && type == "1") types[i] = "L"
mc.get([counterMcKey, registerMcKey], function (err, data) {
var $story = $('#article-wrapper p')  $story.layoutMode()
Store.prototype.del = function(packet, cb) {   packet = this._inflights[packet.messageId];   if (packet) {
throw new Error();         })
EntityViews = connect(mapStateToProps)(EntityViews); EntityViews = withRouter(EntityViews); export default EntityViews;
var SignInManager = Streamus.backgroundPage.SignInManager;     var LinkUserIdView = Backbone.Marionette.ItemView.extend({
SQR.Matrix44 = function() {     this.data = new Float32Array(16);
options:{                 dots: _modules['carousel']['bullets']['enabled'],                 callbacks: true,
{ "group__opts_group.html#gae68fb615835364c0809555e8dc93f57e":[2,2,3,16], "group__stan_conn_group.html":[2,2,11], "group__stan_conn_mgt_group.html":[2,2,11,0],
module.exports = function() {  for(let x = 0; x <= 10; ++x) {
return cutStr;   }
exports.preCheckTemplateSyntaxForVue = function(source, type, options) {   let {lang} = options;
setFormData: (state, items) => {         state.getFormData[items.ref] = items.value
a = b;                      _startShape.style.x = a;
{   if (!(this instanceof Event)) return new Event ();   Base.apply(this);
var mapper = [];    var model = new TextModel(fileText, "\r\n");
const normalizeArrayIndices = (path) => {      return path.replace(/\.\d+\./g, "\\.*\\.") }
$rootScope.$on("importComplete", function() {          alertify.success("Import has completed");
this.opt = assign({}, defaults, option);     this.scrollAmount = -this.opt.offsetTop;     this.scrollOld = 0;
view.dimensionFilter = tdimension;      var parts = model.getDimensionParts(tdimension);      var params = {
el.parent = root;    el.x += x;    el.y += y;   });
if (currentBranch.votePeriod === (currentPeriod - 1)) {         percentComplete = ((currentBranch.currentPeriod - currentPeriod) * 100).toFixed(3);       } else {
add: function(other) {   var dx = pos.x - this.x;   var dy = pos.y - this.y;   return Math.abs(Math.sqrt((dx * dx) + (dy * dy)));
ownsDocument = function(userId, doc) {   return doc && doc.userId === userId || Roles.userHasRole(userId, "admin");
exports.getRules = function( url, cb ){   var defaultCb = function( err ){    if( err ){
export default function () {
if (!qxloader) {         this.__fireReady();
a1.value = 5;     expect(a1.type).to.equal(Enums.ValueType.Number);     expect(row1.hasValues).to.be.true;     var b1 = row1.getCell(2);
unitHeight = 30,             unitWidth = 2,             axisThickness = 2,
o.redirectUrl = browser.runtime.getURL('images/1x1-black.gif');         }
proto.setCoords = setCoords;          function Marker(){}          Marker.prototype = proto;
}   for(y = prevHeight; y < this.height; ++y) {     row = [];     for(x = 0; x < this.width; ++x) {       row[x] = null;
customDebugDraw.drawAxes(context);                                  this.ngBox2DSystem._world.DrawDebugData();
var transaction = transactionData.transaction;  transaction.lengthDifference = transaction.lengthDifference;  this.dmSurface.change( transaction, this.dmsurface.getSelection() );
}); Router.onBeforeAction(AccountsTemplates.ensureSignedIn, {   only: ['profileEdit', 'profileNew', 'jobEdit', 'jobNew']
winston.error('Database Error:'+ err.message);             throw new Error('Database Error:'+ err.message);         }
configuration.data.filename = environment[key];                 break;             case 'website_auth_signing_key':                 configuration.auth.secret = environment[key];
import { connect } from'react-redux'; import { ActionGroup, Alert, Button } from '@patternfly/react-core';
case 'last':           while ( (node = node.nextSibling) )  {             if ( node.nodeType === 1 ) return false;
}  return dojo.declare("dojox.charting.action2d.MouseZoomAndPan", dojox.charting.action2d.ChartAction, {
mapAndSave(model, pollingLocation);   }
return Class.verifyUserToken(user, session.password);       } else if (isAdminScope(session.scope)) {
}         return (             <div>Enjoy this HTML placeholder.</div>         );     }
if (isNumber(k)) {           if (!isInteger(k) || k < 0) {             return k;           }
EffectCompositor.prototype.getSSAOTexture = function () {     return this._ssaoPass.getTargetTexture();
import { PLANE_GEOM, BOX_GEOM } from './utils/geometry-factory'; import checkProperty from './utils/property-check';
if ('function'!== typeof stepRule) {             throw new TypeError('Game.shouldStep: stepRule is not a function.');
return 'application/octet-binary';
firstItemOffset = $firstItem.offset().top;     for (i = numItems; i > 1; i--) {
this.getstate = function() {   var sel = this.files(),    cnt = sel.length,
for(i = 0; i < args.length; i++){      var arg = args[i]
if (config.packages) {             for (i = 0; i < config.packages.length; i++) {                 config.packages[i].location = baseUrl + config.packages[i].location;
}); CKEDITOR.instances['editor'].on('change', function() {
let buf = BN(this.stack.length).toScriptNumBuffer();           this.stack.push(buf);
kafka.on('message', function(message, commit) {             _options.bus.callback(JSON.parse(message.value));
context.beginPath();         for (x = 0; x < width; x++) {           var time = x / width * duration;
senchaRows = this.get("sencha");                     if (senchaRows) {
function failStatic (basename,...args) {   it(`should refuse to load '${basename}'`, function () {     let failed = false;
.fail( function() {                              } );
if (this.origin_soldier) {           logger.debug("play_mode では盤上の駒を駒台に置くことはできない")           return true
}    else this.sails.on('hook:controllers:bound:actions', bindCRUDRoutes);
} else {    tmp = a.pipelineSource();    code += a.transformSource();
}     mount(parent, child, current);
UserAgent.prototype._onAcceptSuccess = function _onAcceptSuccess(ist) {   this.inviteServerTransactions.delete(ist);
html = html.replace(/@CLASSNAME/g, '');       break;     default:       break;   }
ascii,         encryptPrivateKey,
return str.split('').reverse().join('').replace(/^\,/, ''); };
result = true;         if (isSuperscriptAtom(stream)) {
var SPAN_CLASS = 'number-display';     var _formatNumber = d3.format('.2s');     var _chart = baseMixin({});     var _html = {one: '', some: '', none: ''};
positionBelow: [left2, top2],         length,
let results = _.transform(settings, (result, setting) => {         let merged = v.merge(setting, routeTableSettingsDefaults);         let errors = v.validate({
try {                     this.writeToCache(descriptor);                 } catch(e2) {
var OPCUABaseServer = require("./base_server").OPCUABaseServer; var OPCUAClientBase = require("node-opcua-client").OPCUAClientBase;
var name = this.ds[i+1] || this.ds[i];      this.graphs[instance].updateDataset(       name, instance
import React from'react'; import PropTypes from 'prop-types';
} , delete_detail: function delete_detail( bundle ){
const logger = winston.createLogger({     level: process.env.NODE_PRODUTION? 'info' : 'debug',     format: winston.format.combine(
s.delete(next);         next += 1;         deliver(msg);       } else {
match = buffer.toString().trim().match(/#!(.+)/i);     if (match) {
.update('shouldRefetchData', v =>!v);     case SUBMIT_TEMP_GROUP_SUCCEEDED: {       const newGroup = state        .get('newGroup')
exports.removeEmpty(value)   for (let i = 0;i < list.length;i++) {     if (list[i][key] === keyValue) {
else if ( c === "total" ) {           a = 1         }         else {           a = 0
Cut(function(root, container) {   Cut.Mouse(root, container, true);
case 0x44:      var msg = this.parseD(buffer, length);     break;   case 0x45:
externalClasses: ['wux-class'],     data: mergeOptionsToData(defaults),
if (err) return cb(err)         this._loadArchive(this.props.archiveId, context, (err, archive) => {
let rstOutput = '';     if (this.config.rst) {       rstOutput += `${rstTitle}\n`;       rstOutput += `${'='.repeat(rstTitle.length)}\n\n`;       rstOutput += `.. code-block:: shell\n\n`;
return false   }   if(Memory.spawnqueue.index[this.name][name]) {     return true
return config; }
var flows = this.get('elements.Flow').content;    var toSend = flows.length;    if (!toSend) {
act.setAttributes(activity);             this.__analyzerDB.activities.addEntry(act);
self.hoodie.emit('warn', err.message);                 self.hoodie.emit('error', err.message);                 self.hoodie.emit('warn', err.message);                 return callback(err);               }
}     done()   }
import SocialButton from '../components/SocialButton'; import { getCurrentYear, socialLinks, manifest } from '../lib/constants';
actions: {     goBack() {},     completed(hostConfig) {
q[_this.get('queryKey')] = query;
name:'ngAnimate',                       files:['/apollo/ui/bower_components/angular-animate/angular-animate.js']                     }),                     $ocLazyLoad.load(                     {
import { storiesOf } from '@storybook/react';
Geoportail.getCapabilities = function(gppKey, all) {   var capabilities = {};
ret.priority = (raw_packet[offset] & 0xE0) >> 5;
'markdown': staticPath('js/markdown.js'),         'navbar-control': staticPath('js/navbarControl.js')     }
} else {    taskList.removeTask(task);
const StaticTeamDescription = ({description}) => (   description? <p className="description read-only">{description}</p> : null );
import React from'react'; import {
return axios.get(this.baseUrl);   }
past(years, refDate) {   let date = refDate? new Date(Date.parse(refDate)) : new Date();
drawValues(scope.vs, canvas, scope.config, col);             }
case REQUEST_ALL_KNOWTATIONS:       let onSuccess = knowtations => {         dispatch(receiveAllKnowtations(knowtations));
return this.use(route, handler, method);
return this;     } }
module.exports['internal/streams/pipeline.js'] = [   errorsTwoLevel
for (let i = 1; i < args.length; ++i) {     let obj = args[i];     for (let key in obj) {
scientific:'modules/scientific/0-0-1/js',   shakemap:'modules/shakemap/0-0-1/js'  },
req.flash(config.constant.flash.error, '注册功能已被停用，请联系管理员: gefangshuai@outlook.com');     res.redirect('/login');     var user = req.body;     if (!user.username ||!user.password) {
function testcase() {   if(Number.isNaN(Math.hypot(NaN, 3))) {    return true;
log.start('building static site')     const build = require('./lib/build')     build(opts)
case exports.UNZIP:       status  = zlib_inflate.inflateInit2(         this.strm,
}     return s;
var firstDayOfWeek = scheduler.get(FIRST_DAY_OF_WEEK);     var monthStartDate = instance._findCurrentMonthStart();
"use strict"; function Launcher() {}
return this; }
let devDependencies = config.devDependencies;         for (let key in addonConfig) {
var orion = {}; orion.options = Options;
} else if (isVPlaceholder(input)) {     } else {
var waitForLoad = function(callback, constructor) {   if (document.readyState === 'complete') {     return callback.call(constructor);
this.creator.classList.remove('is-hidden');   }
},           punctuation: [/[[\]().,:`]|\->/],           operator: [
var rePostInline = /^[-\s`'")\]}>/:.,;!?\\_]/;     var reExamples = /^\s+(>>>|In \[\d+\]:)\s/;
});     case CHANGE_SIDEBAR_TAB: {       const isActive = action.activeTab === 'events';       if (isActive === state.active) return state;
try {     master.get(['deep','real']).create()   } catch (error) {
await knex.raw(`drop database "${target}"`);     return endProgram(0);   } catch (err) {
if ( data.activated &&!ops.noAck ) {      messages.addMessage( ops.message );
if (date) {                             self.val(formatters.date.dateString(date));
Seadragon.Drawer = function Drawer() {     this.ensureArguments(arguments, 'Drawer');
parseFloat(m[1]) > parseFloat(m[2]))    {     return false;    }
nodeName = nodeExpression.getOperator();             if (isBinaryExpression(nodeExpression)) {                 paramExpressions.push(nodeExpression.getLeftExpression());
else{       final = mw.color.hexToRgb(CSScolor);       final.alpha = 1
var data = [];              options = {         delimiter: config.delimiter,
return "八";             case 9:                 return "九";
this.data.children = {}     }     if(this.data.children[label]) {       return true
define(['jquery', 'oroui/js/mediator', 'underscore'], function($, mediator) {     'use strict';
box = new qx.ui.layout.HBox();       container = (new qx.ui.container.Composite(box)).set({decorator: "black", backgroundColor: "yellow"});       box.setSpacing(5);
console.error("Got a non-GET request to the redirect destination URL");         res.writeHead(400);         res.end();         return;
ngClick: "deleteGroup(group.group_id)",                 awToolTip: 'Delete group',
gl.blendFunc( gl.SRC_ALPHA, gl.ONE ); var scene = new Scene(); var camera = new Camera(   {
return accumulator;   }
const contact = this.currentContact()     return (contact && contact.messages().fetch().length === 0)? assignment.campaign().initialScriptText() : ''
sequence: DS.attr('number'),     tab_text: DS.attr('string'),
if (angular.isDefined(previousRangeDataPoints) && previousRangeDataPoints.length > 0) {                     prevRangeLine = d3.svg.line()
(function() {     M.DialogView = M.View.extend({
}     done();   });
this.addEventListener('mousemove', this.parent.move3d.bind(this.parent, this, controlAxis));       break;     case ROS3D.INTERACTIVE_MARKER_MOVE_AXIS:       this.addEventListener('mousemove', this.parent.moveAxis.bind(this.parent, this, controlAxis));
var TextMode = require("./text").Mode; var FtlHighlightRules = require("./ftl_highlight_rules").FtlHighlightRules;
}); }; module.exports = ListNotUsedForFormatting;
DataAccessObject.prototype[i] = dataSource.constructor.DataAccessObject.prototype[i];         }     }
import PropTypes from 'prop-types'
}       } else if(node instanceof Node){         nodes.push(node);       }
})(jQuery);
this.monitor_element = document.createElement('div');   monitor_element.setAttribute('id','submon');
it('should call onSubmitFailure function with asyncErrors when the invalid form is submitted', done => {     const spy = sandbox.spy();
if (mergePolys instanceof Error) {     done(err);
productionSourceMap: app.buildSourcemaps === true? true : false,
},         mouseOver: {             onMouseOver: (commit) => {
$scope.delBookmark = function(bookmarkId) {         var params = {             id: bookmarkId
if (process.env.NODE_ENV === 'test') {
}));     beforeEach(inject(($q, $rootScope, $compile, StateService, FolderService) => {
var inner = core( head ) ;     for (;;) {      switch (this. lttype) {
let exists = []   if (thisid) tags = tags.filter(_ => thisGroupMap[_.id].data.includes(thisid))
for (i=0; i < offers.length; i++) {     var rows = orderBookScreen.makeRows(offers[i]);
this.a_nextPos = gl.getAttribLocation(program, 'f');
let valid = state.validate(this, params, transition);       if(!async) transition.resume(valid);     } else {
_Format.prototype.date = function (date) {   return new Date(date)   return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()  }
export const packageNameRegex = /^reptar-/;
} export async function create(parentValue, { name, email, mobile, mobileOrNumber }) {   if(auth.user && auth.user.id) {
openInBrowser(schemesHtmlPath, function(err) {       if (err) {         callback(err);       } else {
matcherRegex : (function() {   var emailRegex = /[-;:&=+$,w.]+@/,      domainNameRegex = Autolinker.matcher.domainNameRegex,
for(i = 0; i < slides.length; i++) {     var oldPosition = parseInt(getTransformValue(slides[i].style.transform));     var newPosition = oldPosition - 100;
}                     if (! old) old = new pc['Vec' + len];                     for(i = 0; i < len; i++)                         old.data[i] = value[i];
borderBottomStartRadius: true,   borderRadius: true,
.attr('class','member-entity-name')                        .text(function(d) { return util.displayName(d.member); });
import NowViewingItem from './NowViewingItem.jsx'; import ObserveModelMixin from './../ObserveModelMixin';
export default async function testHasOneHelpers() { }
let pos = 0;         for (let i = 0; i < tup.length; i++) {           if (i.name!= null) continue;
var unassignObj = getTagsToAddRemove("unassign", tags, origTags);       var collection ='service_templates/' + id + '/tags';       if (assignObj.resources.length > 0) {
var matchCount = 0;           for (var param in targetParams) {             if (param!= 'q' && params[param] && params[param] == targetParams[param]) {
undo: 'Son değişikliği geri al (Ctrl+Z)',     validationCannotMove: 'Alt alan olarak taşınamıyor',     autoType: 'Alan tipi "otomatik".'+
'line-height': this.getMjAttribute('line-height'),       'text-align': this.getMjAttribute('align'),
export default createComponent([ExportModal, ModalComponent], {     modules: ["Modal", "Loader", "Button"] });
return value;    }
if (body.error) {                         botkit.debug('API ERROR', body.error);                         return cb && cb(body.error.message);                     }
if (_aLeftChannel[pos] < -SPIKE_THRESH) {                         startSpikePos = pos;
case'sc':           token = getAccessToken();           return transferSc(token, from, to, amount, memo);       }
function ExperimentsService($resource) {     var res = $resource('experiments', null, {
function buildTree() {   var obj = new Object3D();   var material = new MeshFaceMaterial([
injectCSS('res/features/main.css'); ensureDefaultsAreSet().then(applySettingsToDom);
$(iframeElement).on('load', function () {             updateLoadStatus(1);             console.log("iframe loaded");
getTicksByUser: function() {     var blockUserTrick = $('.block-tricks-user');
return self.tab.vm.maPager.load();
const params = this.getParams(),       scene = 'physijs'      ? new Physijs.Scene(
import React from "react"; import PropTypes from "prop-types";
var spaceLeft = false;    if(this.parser.source.substr(this.parser.pos).search(/^\^([^\^]|\^\^)/) === 0) {
o = $.extend(this.options, this.element.data('options')),    input = this.element;
}       case Actions.ADD_PRODUCT_TO_LIST: {         let idArray = [...state.items];         idArray.indexOf(action.id) === -1? idArray.push(action.id) : console.log("Item is already in list");
return link; };
var cacheKeyLocale= context.locale? context.locale + "_" : '';    var promise = new Promise()
decimalsRounded: 2       }     };
}, function(err, n) {           if (err) {
case'mssql':       return `[${identifier.replace(/[[]']+/g, '')}]`;
console.log(`not ok - error during cluster.collapse: ${err}`);             return callback(`not ok - error during cluster.collapse: ${err}`);         });
}                     for (i = 0, len = value.length; i < len; i++) {                         light = value[i];
this.info("Time to load api indexfile from server: " + (loadEnd.getTime() - loadStart.getTime()) + "ms");       }.bind(this));       req.addListener("failed", function(evt) {         alert("Couldn't load file: " + url);
import { defineMessages, injectIntl } from'react-intl'; import Waypoint from'react-waypoint';
record = registeredUIPreviewerTarget.contentStore.getRecord(             itemId.replace(/\.[^.]+$/, "")         );
var searchPaths = this.searchPaths.filter(function(p) { return existsSync(p); });             chokidar.watch(searchPaths);             var _this = this;
getItem: function(hash) {       if ( (item = this.attachedItems[hash]) ) {
var verticalHeights;   verticalHeights = window.getVerticalHeights();
'use strict';
}     _This.$GetEvent = GetEvent;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;     _This.$GetData = GetData;
it('> 1 amino acid long sequence', function() {   aaData = getAminoAcidDataForEachBaseOfDna('atgtaat', true);
define(['imp/renderModule/nodeShapeRelative'], function(NodeShapeRelative){
intake.create = function(options){     options = options || {};     var context = require("zeromq");
: table[field].lt(context.request.urlTokenized[index - 1])           case "explicit":
return false;   }  }
describe('.reset()', function() {     var store = new DataStore(),         payload = {
if (typeof line ==='string') {       var data = /^([^\(<]+)\s*(<([^>]*)>)?\s*(\((https?:\/\/[^\)]+)\))?/.exec(line)       line = {
$("#"+sourceId).on("select2:open", function () {                 var predefinedStructs = self._package.getStructDefinitions();
chrome.storage.local.get(message.data, function(response) {       sendResponse(response);
function(error) {       $scope.setAlert(new ErrorAlert("Error while clearing index cache", error));      }
r = BigInteger.small[diff];   if (this._s < 0) {
var vm = require('vm'); var nunjucks = require('nunjucks');
var __inline = __inline || {}; __inline('./scroll'); __inline('./tab');
break;         case model_1.TypeKind.MODEL:             if (visitor.onCompositeType) {
if (id!== data[pkName]) {     err = new Error(g.f('{{id}} property (%s)'+             'cannot be updated from %s to %s', pkName, id, data[pkName]));
$("#github").removeClass('hidden');     }else if (value == 'asn'){         $("#github").addClass('hidden');
while (parent) {           nestedIncludes = [_.extend({}, child, { include: nestedIncludes })];
(function() {
reporters: ['progress', 'coverage'],
document.getElementById("id_snippet").cols=40;          $('#id_snippet').val("#To avoid indentation errors use tabs for indentation for Python questions");       });    $('#id_type').bind('change',function(event){
return timestamp; }
});     return formatted_data; };
angular.module('copayApp.directives')  .directive('incomingDataMenu', function($timeout, $rootScope) {     return {
var chance = require('chance')(),   PouchDB = require('pouchdb'),
return this.i18n.Suspended;                 case 4:
viz.ui.button = setup_buttons (viz, viz.ui) ;   var playerConfig = {
this.init( );   }   Selectpicker.prototype = {
return res.type('application/json').status(200).send('{"state": "' + state + '", "key": "' + req.params.name + '"}');       });
entryOrderLength = entryOrder.length;                 for (i = 0; i < entryOrderLength; i++) {                     o.push(entryGroups[entryOrder[i].format(dateCompareString)].join('') + this.groupEndTemplate.apply(this));
pool.trigger(_tick_);         setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2;       }else{
var CoSheet = my.Class({
}   state = stringReduce(state.keypath, reducer, initialState)   state = reducer(state, 'END', state.keypath.length, initialState.keypath)
function _clickItem(scrollWheel) {
it('returns root dir from config', () => {   expect(rootDir).toBe(getCwdPath('..'));
var relation = new Relation(left.header, left.data);     for( i=0; i < right.data.length; i++ ) {       relation.push( right.data[i] );     }
}   }   return false;
return fr.readAsArrayBuffer(packet.data); }
};     const resetCrop = () => {       imageRepresentationProxy.getCropFilter().reset();       croppingWidget.resetWidgetState();       resetCropHandlers.forEach((handler) => {
Object.defineProperty(exports, "__esModule", { value: true });
case fragmentValueTypes.COMPONENT:     break;   }
'/cgi-bin/lookup-tunnel-dns', '/cgi-bin/rootca', '/cgi-bin/log/set']; var PLUGIN_PATH_RE = /^\/(whistle|plugin)\.([a-z\d_\-]+)(\/)?/; var STATIC_SRC_RE = /\.(?:ico|js|css|png)$/i;
success(function(){                         $scope.showUsersView=!$scope.editUserView;
import path from 'path'
}   this.grid.disconnect();  })();
var lines = text.split(splitRegExp),         line, remainWidth, isLaseLine;     for (i = 0; i < lines.length; i++) {         line = lines[i];
var keymap = top, valmap       for( var i = 0; i < keys.length; i++ ) {
function _pluginSyntaxAsyncGenerators() {   var data = _interopRequireDefault(require("@babel/plugin-syntax-async-generators"));   _pluginSyntaxAsyncGenerators = function _pluginSyntaxAsyncGenerators() {     return data;
mouseUpHandler() {     this.mouseDown = false;
this.object = object;
submitComment: (parent, text) => Promise.resolve({ ok: true }),
}   return obj }
var v = req.param('v');   if(!v ||!v.match(/201[0-9]\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-9]{2}\-[0-
import React from'react'; import {
server.close();   }
get events() { return false; } }
HEADER_FORMAT = '\n',  ARGUMENTS_REGEXP = /\(\s*[$\w]+\s*(?:,\s*[$\w]+\s*)*\)/,  PARENTHESES_REGEXP = /\(|\)/g;
var field_array = [];     obj = this.flatten_json(obj._source)     for (field in obj) {       field_array.push(field);
} else {       seekTime = this.hoverPosition * this.duration;     }
} else {       for (keys = _.keys(data), i = 0, res = [], l = limiter || keys.length; i < l; i++)         if (predicate(data[keys[i]], keys[i], data)) res.push(data[keys[i]]);
args.schema = path.join(process.cwd(), args.schema); const validSchema = validateSchema(args.schema);
return edge[+(edge.left === cell.site)];   }
adjusted_scale : this.adjusted_scale,  asset_swf_v : "\/c2.glitch.bz\/items\/2012-04\/lemene-1334267482.swf",  admin_props : false,
ok(_.isFunction(layout.setView), "Has the setView function"); });
var deferred = new DeferredGlassPaneTarget();   var renderedHandler = function(event) {
}             case'vec2':
function HudObject () {} HudObject.stdWidth  = 40;
const swagger = require('swagger-parser'); const _ = require('lodash');
import { Link } from 'gatsby'; import PropTypes from 'prop-types';
return result;   }   var regjsparser = {
var names = Object.keys(tree);   for (var i = 0, l = names.length; i < l; i++) {     var name = names[i];
media.playtime = time     media.custom.currentTime = time   }
if (xhr.readyState === 4) {
var x1 = y1 = 0.0;   var x2 = 1.0;   y2 = this.canvas.width / this.canvas.height;
function AgenciesController ($log) {} })();
var failure_T = 'Could not Triangulate'
res.end();   }  });
vdom.val = el.textContent;           for(var child in vdom.children) {             el.children[child].innerHTML = el.textContent;           }
server.searchPodcasts = function(searchTerm, callback) {      request({        url: "https:
if (params.viz.resize) {
set(value) {       if (!Array.isArray(value)) value = [String(value), {}];
return 'pending';       case 1:
switch (action.type) {     case types.ADD_FRIEND: {       const len = state.friends.length? state.friends.length : 1;       const newId = (state.friends[len - 1] + 1) || 0;
render(pageBody, pageData) {     const layoutTemplate = this.layouts[pageData.layout];
return 'application/json';         case Resource.XHR_RESPONSE_TYPE.DEFAULT:
}, function () {         });
ecma: 6,                         module: true                     },
function showCashBalance(augur, address, callback) {   augur.api.Cash.balanceOf({ _owner: address }, function (err, cashBalance) {
try {                         var blob = new Blob([str], {                             type: 'application/octet-stream'
return conn.connect(config); } module.exports = createClient;
case "amortization":                         calculation_method = calculateAmortization;                     break;
}).catch(done); }
}         return next()       } else {
innerTableDate:function () {             let self = this;
return false;
export default class DataGridWidget extends VBox {
export function merge(oldCookieString, newCookieString) {   const oldCookieJar = oldCookieString? parse(oldCookieString) : [];   const newCookieJar = newCookieString? parse(newCookieString) : [];
tocView = function(mode) {     var toc = doc.querySelector(".github-toc");     if (toc) {
getBrowserName : function() {    return this.browser;   },
write(ctx, ctx.currentIndent);                     write(ctx, ctx.terminator);
const versionFile = path.join(__dirname, '../src/version.js'); const newContent = `export default '${newVersion}';\n`; fs.writeFileSync(versionFile, newContent);
firstStep = false;    }    for(var i in obj){     if(typeof obj[i] == 'function'){
db.rpush("log-" + this.room, this.cmdstr, __bind(function() {               return _io.sockets.emit('broadcast', this);             }, this));
