LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),          files[0].isFolder());      expected +=         getLsResultStr("/testRoot/testDir", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,              testUser, testUser, files[1].getPermission(), files[1].isFolder());      expected += getLsResultStr("/testRoot/testDir/testFileB", files[2].getCreationTimeMs(), 20,          LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),
assertEquals(1, serverStub.callsToProcessBufferInserter);          assertNull(lm.getField("id"));          assertEquals("foo", lm.getField("_something"));         assertEquals(8, lm.getFields().size());      }      @Test
}      @Override     public Connection getOrConnect(Address address, boolean silent) {          return getOrConnect(address);      }     public void block(Address address) {          blockedAddresses.add(address);          Connection connection = getConnection(address);          if (connection != null) {
if (sizeModeClass.equals("FixedSizeMode")) {              sizeMode = VizController.getInstance().getTextManager().getSizeModes()[0];         } else if (colorModeClass.equals("ProportionalSizeMode")) {              sizeMode = VizController.getInstance().getTextManager().getSizeModes()[2];         } else if (colorModeClass.equals("ScaledSizeMode")) {              sizeMode = VizController.getInstance().getTextManager().getSizeModes()[1];          }
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
}       private final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   private final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
playerLocation.setY(y);              playerLocation.setZ(z);             player.teleport(playerLocation);              Command.broadcastCommandMessage(sender, String.format("Teleported %s to %.2f, %.2f, %.2f", player.getDisplayName(), x, y, z));          }          return true;
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid pet value", response = Void.class) })     void deletePet(@PathParam("petId") @ApiParam("Pet id to delete") Long petId,@HeaderParam("api_key")   String apiKey);      @GET      @Path("/findByStatus")
*       * @return the message.       */     @Message(id = 15867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
private final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
SignableVertexSpec vertexProto = builder.build();     TaskSpec taskSpec = Converters.getTaskSpecfromProto(vertexProto, 0, 0, null);      assertEquals("dagName", taskSpec.getDAGName());      assertEquals("vertexName", taskSpec.getVertexName());
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   private final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);          Data data = serializationService.toData(normalResponse);         final Packet packet = new Packet(data, 0, serializationService.getPortableContext());          packet.setHeader(Packet.HEADER_RESPONSE);          packet.setHeader(Packet.HEADER_OP);          executor.execute(packet);
}     private class Sl4jCommonLogger implements CommonLogger {          private final Logger logger;
new Delete().from(type).where("Id=?", id).execute();   }  public static <T extends Model> T load(Class<? extends Model> type, long id) {    return new Select().from(type).where("Id=?", id).executeSingle();   }
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().terminate();              }          };
logger.debug("got a query");      if (!isProperlyConfigured) {       logger.error("Configuration for influxdb not yet loaded or broken.");        return Collections.emptyList();      }      if (!isConnected()) {       logger.error("InfluxDB is not yet connected");        return Collections.emptyList();      }
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
};       private final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
final String key, value;   Parameter(String key, String value) {      this.key = key;      this.value = value;    }
@SuppressWarnings("unchecked")    @Override   public void removePredecessor(Object node) {      Object previousValue = adjacentNodeValues.get(node);      if (previousValue == PRED) {        adjacentNodeValues.remove(node);
*  * @see java.lang.Object    */  public int hash(T record);   /**    * Sets the given element as the comparison reference for future calls to
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15853, value = "Unexpected initial path key %s")      IllegalStateException unexpectedInitialPathKey(String key);      /**
new LinkedBlockingQueue<Runnable>(100),              new NamedThreadFactory("Close-ExecutorService-Timer", true));     public static boolean isShutdown(Executor executor) {          if (executor instanceof ExecutorService) {             if (((ExecutorService) executor).isShutdown()) {                  return true;              }          }
*       * @return the message.       */     @Message(id = 15839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
if (getColumnClass(counter) == ParseTreeTableModel.class) {                          final MouseEvent mouseEvent = (MouseEvent) event;                          final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),                                 mouseEvent.getWhen(), mouseEvent.getModifiers(),                                  mouseEvent.getX() - getCellRect(0, counter, true).x,                                  mouseEvent.getY(), mouseEvent.getClickCount(),                                  mouseEvent.isPopupTrigger());
* @should fail if global property being updated does not already exist    * @should update a global property whose typed value is handled by a custom datatype    */  public void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;   /**    * Save the given global property to the database
public void testMoveException() throws Exception    {      MockStorageService mockS3Client = new MockStorageService();     S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);      mover.move(          sourceSegment,
trackingObj = dbCol.findOne(filter);          if (trackingObj == null) {              dbCol.insert(filter, WriteConcern.SAFE);             trackingObj = dbCol.findOne();          }          trackingObj = new BasicDBObject("_id", trackingObj.get("_id"));
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 15872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);   }
private SocketChannel channel;      public MysqlQueryExecutor(MysqlConnector connector){           if (!connector.isConnected()) {              throw new RuntimeException("should execute connector.connect() first");           }           this.channel = connector.getChannel();
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.debug("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null ? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.debug("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
return Sets.newHashSet();      }     public int total() {          try {             return Cache.getOrElse(TOTAL_CNT_CACHE_KEY, new Callable<Integer>() {                  @Override                 public Integer call() throws Exception {                      MessageCountResponse response = api.get(MessageCountResponse.class).path("/count/total").execute();                      return response.events;                  }
public static interface AdvancedZooKeeperMasterEndpointBuilder              extends                  EndpointConsumerBuilder {          default ZooKeeperMasterEndpointBuilder basic() {
};       private final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
public static interface AdvancedHazelcastMultimapEndpointBuilder              extends                  AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {          default HazelcastMultimapEndpointBuilder basic() {
};       private final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),          files[0].isFolder());      expected +=         getLsResultStr("/testRoot/testDir", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,              testUser, testUser, files[1].getPermission(), files[1].isFolder());      expected += getLsResultStr("/testRoot/testFileC", files[3].getCreationTimeMs(), 30,          LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),
};       private final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (multiValueRow.size() == 0) {                                  return null;                                } else if (multiValueRow.size() == 1) {                                 return columnVals.lookupName(multiValueRow.get(1));                                } else {                                  final String[] strings = new String[multiValueRow.size()];                                  for (int i = 0 ; i < multiValueRow.size() ; i++) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   private final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else if (e instanceof TimeoutException) {      logger.debug("[{}]: Websocket timeout error", connection.getHost());     } else {     logger.error("[{}]: Websocket error: {}", connection.getHost(), e.getMessage());     }    }
};       private final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      public byte[] decodeMessage() {         byte[] data = new byte[17];          data[0] = 0x11;          data[1] = RFXComBaseMessage.PacketType.ENERGY.toByte();
};          thread.start();         instance2.getLifecycleService().shutdown();          semaphore.release();          HazelcastInstance instance3 = factory.newHazelcastInstance();
}               final InetAddress inetAddress = InetAddress.getByName(currentAddress);               ServerSocket serverSocket = serverSocketChannel.socket();              serverSocket.setReuseAddress(false);               InetSocketAddress isa;               int port = config.getPort();
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   private final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().terminate();              }          };
return additionalReplacements;    }   private final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public static interface AdvancedKMSEndpointBuilder              extends                  EndpointProducerBuilder {          default KMSEndpointBuilder basic() {
break;          case Token.CASE:            if (controlCanExit(n.getFirstChild())) {             compiler.report(JSError.make(currentStatement, Es6ToEs3Converter.CANNOT_CONVERT_YET,                "Case statements that contain yields"));              return false;            }
public static class Parameters extends AssetLoaderParameters<TiledMap> {       boolean yUp = true;   }   protected static final int FLAG_FLIP_HORIZONTALLY = 0x80000000;
CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();    }   static final List<PairedStats> ALL_PAIRED_STATS =        ImmutableList.of(            EMPTY_PAIRED_STATS,            ONE_VALUE_PAIRED_STATS,
*       * @return the message.       */     @Message(id = 15862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
assertMockEndpointsSatisfied();         Thread.sleep(200);          File local = new File("target/lwd/hello.txt").getAbsoluteFile();
public GraphDatabaseService newHighlyAvailableDatabase( String path )      {         return newEmbeddedDatabaseBuilder( path ).newGraphDatabase();      }      public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )
public static interface ServerEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedServerEndpointProducerBuilder advanced() {
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.debug("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null ? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.debug("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
}       private class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;   /**    * Completely remove the given global property from the database
ConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);     assumedDuplicateName.setName(duplicateName.getName());     newConcept.addName(assumedDuplicateName);    Errors errors = new BindException(concept, "concept");     new ConceptValidator().validate(newConcept, errors);     Assert.assertEquals(false, errors.hasErrors());    }
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glHint (int target, int mode) {
*     * @throws IOException Thrown if any of the two views raises an exception.    */  public void copy(DataInputView source, DataOutputView target) throws IOException;  }
*     * @return the data stream constructed    */  private DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {   DataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
String locations1 = "[disk]/dir0,[DISK]/dir1,[sSd]/dir2,[disK]/dir3,[ram_disk]/dir4";      conf.set(DFS_DATANODE_DATA_DIR_KEY, locations1);      locations = DataNode.getStorageLocations(conf);     assertThat(locations.size(), is(4));      assertThat(locations.get(0).getStorageType(), is(StorageType.DISK));      assertThat(locations.get(0).getUri(), is(dir0.toURI()));      assertThat(locations.get(1).getStorageType(), is(StorageType.DISK));
}    private void renderCached () {    cache5.setColor(red);     cache5.draw(spriteBatch);     cache1.draw(spriteBatch);
OperationService opService = getOperationService(local);          int partitionId = getPartitionId(remote);         opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);         ICompletableFuture f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);          ExecutionCallback callback = mock(ExecutionCallback.class);          f.andThen(callback);
* @see <a href="http:       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.constructTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
this.source = checkNotNull(source, "source");      this.classMatcher = checkNotNull(classMatcher, "classMatcher");      this.methodMatcher = checkNotNull(methodMatcher, "methodMatcher");     this.interceptors = ImmutableList.of(interceptors);    }    public Object getSource() {
}          int[] ids = new int[length];          for (int i = 0; i < length; i++) {             ids[i] = length % dictionarySize;          }          return new DictionaryBlock(length, builder.build(), wrappedIntArray(ids));      }
};       private final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgram(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
private final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public static interface AdvancedStompEndpointBuilder              extends                  AdvancedStompEndpointConsumerBuilder, AdvancedStompEndpointProducerBuilder {          default StompEndpointBuilder basic() {
public static interface SftpEndpointBuilder              extends                  SftpEndpointConsumerBuilder, SftpEndpointProducerBuilder {          default AdvancedSftpEndpointBuilder advanced() {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   private final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      public int hashCode()      {         return Objects.hash(expressions);      }      @Override
};       private final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   private final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassNotFoundException.class))          );      }
if (queueLength.isDefined() && queueLength.asInt() == 0) {                  if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {                     throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());                  }              }
rel.setPersonA(personA);     rel.setPersonB(personB);     rel.setRelationshipType(relType);    ps.createRelationship(rel);    }    public void voidRelationship(Integer relationshipId, String voidReason) {
*       * @return the message.       */     @Message(id = 15844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
}    };   private final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       private final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Expects the JS to generate one bad-read warning.     */    private void assertRedeclare(String js) {     testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);    }    /**
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameter(target, pname, params);    }    public int glGetError () {
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
if (msgInfo == null) {              return new SctpMessage(protocolIdentifier, streamIdentifier, unordered, content().duplicate());          } else {             return new SctpMessage(msgInfo, content().copy());          }      }
*       * @return the error message       */     @Message(id = 15836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
public static interface GoogleSheetsEndpointBuilder              extends                  GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {          default AdvancedGoogleSheetsEndpointBuilder advanced() {
* Advanced builder for endpoint for the Azure Storage Queue Service       * component.       */     public static interface AdvancedQueueServiceEndpointBuilder              extends                  AdvancedQueueServiceEndpointConsumerBuilder, AdvancedQueueServiceEndpointProducerBuilder {          default QueueServiceEndpointBuilder basic() {
public void testRecipientListParallel() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedBodiesReceived("c", "b", "a");          template.sendBodyAndHeader("direct:start", "Hello World", "foo", "direct:a,direct:b,direct:c");
}      @Override     public void dispatchEvent(ReplicationMessage event, ReplicatedMessageListener listener) {          listener.onMessage(event);      }
private class CompoundEventPredicate implements EventPredicate {          private List<EventPredicate> predicates = new ArrayList<EventPredicate>();
ConceptNumeric cn = new ConceptNumeric(c);     for (ConceptSet cSet : cn.getConceptSets()) {     Assert.assertSame(cn, cSet.getConcept());     }    }
@Before      public void setUpAdminObjects() throws NamingException {          server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8280");         server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8380");          Assert.assertNotNull(server1Proxy);          Assert.assertNotNull(server2Proxy);      }
}          public String cookie(String name) {             Validate.notNull(name, "Cookie name must not be null");              return cookies.get(name);          }
}    };   private final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**
final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc("title"), 2, 2);          assertThat(page2.pagination().getCount()).isEqualTo(2);         assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7);          assertThat(page2.delegate())                  .extracting("title")                  .containsExactly("hello4", "hello5");
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.constructStatuses(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
}      System.out.println("Validation succeeded.");     return false;    }    private static boolean validateWorkers(String name) throws InterruptedException {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   private final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedSlackEndpointBuilder              extends                  AdvancedSlackEndpointConsumerBuilder, AdvancedSlackEndpointProducerBuilder {          default SlackEndpointBuilder basic() {
};       private final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (name == null)     return null;    try {    return Class.forName(name);    } catch (ClassNotFoundException e) {     return null;    }
WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory(                 getWebSocketLocation(req), null, false);          handshaker = wsFactory.newHandshaker(req);          if (handshaker == null) {              WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse(ctx.channel());
};       private final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**
public static interface AdvancedMvelEndpointBuilder              extends                  EndpointProducerBuilder {          default MvelEndpointBuilder basic() {
}      @FixMethodOrder(MethodSorters.DEFAULT)     private static class DummySortWithDefault {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.debug("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null ? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.debug("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
public void addAll (char[] array, int offset, int length) {     char[] items = this.items;     int sizeNeeded = size + length ;    if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;    }
final Map<String, String> m = new HashMap<String, String>();              for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {                  UriTemplate t = new UriTemplate(e.getKey());                 logger.trace("Trying to map {} to {}", t, path);                  if (t.match(path, m)) {                      atmosphereHandlerWrapper = e.getValue();                      logger.trace("Mapped {} to {}", t, e.getValue());
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   private final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public static interface AdvancedHazelcastTopicEndpointBuilder              extends                  AdvancedHazelcastTopicEndpointConsumerBuilder, AdvancedHazelcastTopicEndpointProducerBuilder {          default HazelcastTopicEndpointBuilder basic() {
}   @Configuration  @ConditionalOnEnablednHealthIndicator("diskspace")   public static class DiskSpaceHealthIndicatorConfiguration {    @Bean
* @param request   The request object providing information about the HTTP request       * @param response  The response object providing functionality for modifying the response       */     public abstract void handle(Exception exception, Request request, Response response);  }
};       private final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);  private static final int DEFAULT_NUMBER_OF_READ_BUFFERS = 128;  private static final int DEFAULT_NUMBER_OF_WRITE_BUFFERS = 128; private static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 128 * 1024;   private static final boolean DEFAULT_ALLOW_SPILLING = true;
@Configuration   @ConditionalOnBean(SolrServer.class)  @ConditionalOnEnablednHealthIndicator("solr")   public static class SolrHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {
*       * @return the message.       */     @Message(id = 15860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
ActorRef rpcEndpoint,     Time timeout,     long maximumFramesize,    @Nullable CompletableFuture<Boolean> terminationFuture) {    this.address = Preconditions.checkNotNull(address);    this.hostname = Preconditions.checkNotNull(hostname);
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniform(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniform(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
when(mock.getColumn()).thenReturn(1);          when(mock.getMessage()).thenReturn("Mocked message.");          when(mock.getFileName()).thenReturn("InputMockFile.java");         final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();          final String expected = "[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]";
* Builder for endpoint producers for the Hazelcast Replicated Map       * component.       */     public static interface HazelcastReplicatedmapEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastReplicatedmapEndpointProducerBuilder advanced() {
* Look for function calls that have no side effects, and annotate them     * that way.     */   private final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface TwitterSearchEndpointBuilder              extends                  TwitterSearchEndpointConsumerBuilder, TwitterSearchEndpointProducerBuilder {          default AdvancedTwitterSearchEndpointBuilder advanced() {
};       private final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
String uri = getScpUri() + "?username=admin&password=admin&chmod=640&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Bonjour Monde", Exchange.FILE_NAME, "monde.txt");         Thread.sleep(500);          File file = new File(getScpPath() + "/monde.txt");          assertFileExists(file.getAbsolutePath());
}              if (resources.contains(r)) {                 return r;              }
public static interface HazelcastMultimapEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {
private final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   private final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
for (int t = 0; t < types.length; t++) {        result[t] = resolve(types[t]);      }     return ImmutableList.of(result);    }    /**
return false;          }         if (!expected.getType().equals(actual.getType().toString())) {              return false;          }
* @return {@link   public long[] ensureCapacity (int additionalCapacity) {     int sizeNeeded = size + additionalCapacity;    if (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));     return items;    }
};       private final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   private final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
log.debug("Optimistic locking exception : " + exception);              } else {               log.error("Error while closing command context", exception);              }              transactionContext.rollback();
try {          if(UserGroupInformation.isSecurityEnabled())           UserGroupInformation.getCurrentUser().reloginFromKeytab();          long now = Time.now();
classPool.appendClassPath(new ClassClassPath(NoOpTypeParameterMatcher.class));      }     public void appendClassPath(ClassPath classpath) {          classPool.appendClassPath(classpath);      }     public void appendClassPath(String pathname) throws NotFoundException {          classPool.appendClassPath(pathname);      }
public static interface AdvancedEhcacheEndpointBuilder              extends                  AdvancedEhcacheEndpointConsumerBuilder, AdvancedEhcacheEndpointProducerBuilder {          default EhcacheEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 15851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
};       private final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 15834, value = "%s recognizes only %s as children: %s")      String unrecognizedChildren(String parent, String children, String parentSpec);      /**
private int getStreamId(HttpHeaders httpHeaders) {          return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),             connection.remote().nextStreamId());      }      @Override
private final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameter(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create("encoding", ModelType.STRING, true).build();     SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create("file", ModelType.OBJECT, true).              setCorrector(FileCorrector.INSTANCE).              setValidator(new FileValidator()).              build();
responsePacketHandler.handle(responsePacket);          } catch (Throwable e) {              inspectOutputMemoryError(e);             logger.severe("Failed to process response: " + responsePacket + " on response thread:" + getName());          }      }
final List<MessageListener> messageListeners = resourceAdapterRepository.getMessageListeners(raIdentifier);              if (messageListeners == null || messageListeners.isEmpty()) {                 throw MESSAGES.unknownMessageListenerType(resourceAdapterName, messageListenerInterface.getName());              }              MessageListener requiredMessageListener = null;
};       private final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.constructStatuses(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }
} catch (Exception e) {        throw new InflateException(e);       }     } else if (itemActionLayout >= 0) {       item.setActionView(itemActionLayout);      }     }
};       private final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       private final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 15804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName);      /**
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
new ModelNode[] { removeDwm, removeContext });              mcc.execute(compositeOp);              ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,                     TestSuiteEnvironment.getServerAddress(), serverPort);          }          protected abstract Policy getPolicy();
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().terminate();              }          };
};       private final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
this.queryManager = checkNotNull(queryManager, "queryManager is null");          this.httpClient = checkNotNull(httpClient, "httpClient is null");         queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(), queryManager), 200, 200, TimeUnit.MILLISECONDS);      }      @PreDestroy
*       * @return the error message       */     @Message(id = 15836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameter(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameter(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
* @see <a href="http:       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.constructTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
assertEquals(1, taskService.createTaskQuery()                      .or()                      .taskInvolvedUser("involvedUser")                     .taskInvolvedGroups(groups)                      .endOr()                      .count());
@Override      public void set(K key, V value) {          begin();         transactionalMap.put(key, value);          commit();      }
return false;          }         if (this.referenceId == referenceId) {              return true;          }
}                      }                      nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));                     nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)));                      if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {                          nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, "application/x-www-form-urlencoded");
private final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedGoogleDriveEndpointBuilder              extends                  AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {          default GoogleDriveEndpointBuilder basic() {
}    /**    * Free the file or Folder from tachyon in-memory specified by argv     *     * @param path The TachyonURI path as the input of the command     * @return 0 if command if successful, -1 if an error occurred.
private long translateToDate( long timeWithDate, long time, TimeZone timeIsGivenInThisTimeZone )      {         Calendar calendar = Calendar.getInstance();          calendar.setTimeInMillis( timeWithDate );          Calendar timeCalendar = Calendar.getInstance();
private int port = Integer.valueOf(System.getProperty("port"));   @Test  public void testHome() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
public static interface KubernetesSecretsEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesSecretsEndpointBuilder advanced() {
new StaticFieldGetterSetterInliner(root).run();     GatherGettersAndSetterProperties.update(compiler, externs, root);    }    class StaticFieldGetterSetterInliner {
};       private final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @param folder the location       */     public static void configureExternalStaticResources(String folder) {          Assert.notNull(folder, "'folder' must not be null");          if (!externalStaticResourcesSet) {
};       private final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
m1.setIntAttribute("Test", 321);         latch.await(2, TimeUnit.SECONDS);          assertNotNull(member.getIntAttribute("Test"));          assertEquals(321, (int) member.getIntAttribute("Test"));
*       * @return the message.       */     @Message(id = 15869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
};       private final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(561);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
if(LOG.isDebugEnabled()) {            LOG.debug("not assigning region (on kill list): " +             info.getRegionName());          }          return;        }
};       private final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   private final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return a message for the error.       */     @Message(id = 15831, value = "The master host controller cannot register slave host controllers as it's current running mode is '%s'")      String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);      /**
static final HazelcastProperty MAX_TOLERATED_MISS_COUNT              = new HazelcastProperty("hazelcast.invalidation.max.tolerated.miss.count", 10);      static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS             = new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds", 1, SECONDS);      static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS             = new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds", 1, SECONDS);      static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 15866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
};       private final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Parameter(value = "default_message_output_class")      private String defaultMessageOutputClass = "";     @Parameter(value = "collector_expiration_threshold", validator = PositiveIntegerValidator.class)      private Duration collectorExpirationThreshold = Duration.days(14);     @Parameter(value = "collector_inactive_threshold", validator = PositiveIntegerValidator.class)      private Duration collectorInactiveThreshold = Duration.minutes(1);      @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)
new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {        @Override        public Integer execute(Jedis connection) {         connection.subscribe(jedisPubSub, patterns);          return 0;        }      }.runWithAnyNode();
* @see <a href="http:       */      public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {         return Trends.constructTrendsList(get(getSearchBaseURL() + "trends/current.json"                  + (excludeHashTags ? "?exclude=hashtags" : ""), false)).get(0);      }
if (s == null || regex == null) {        return null;      }     if (!regex.equals(lastRegex)) {        lastRegex = regex;        p = Pattern.compile(regex);      }
return value;    }   private boolean isIdentifierStart(char ch) {      switch (ch) {      case '$':      case '_':
};       private final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(247);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {System.out.println($ctx.toStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
public void testSendAccountBean() throws Exception {          long start = System.currentTimeMillis();          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMessageCount(2);          assertMockEndpointsSatisfied();          long delta = System.currentTimeMillis() - start;
};       private final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private String charset;      private int bpos;     public XMLStreamReaderInputStream(XMLStreamReader reader, String charset, XMLOutputFactory outfactory) {          this.reader = reader;          this.buffer = new byte[BUFFER_SIZE];          this.chunk = new TrimmableByteArrayOutputStream();
try {       in = new DataInputStream(new BufferedInputStream(new GZIPInputStream(pkmFile.read())));       int fileSize = in.readInt();      compressedData = BufferUtils.newByteBuffer(fileSize);       int readBytes = 0;       while ((readBytes = in.read(buffer)) != -1) {        compressedData.put(buffer, 0, readBytes);
}      int toRead = (int) Math.min(len, remaining()); if (mBufferIsValid && mBuffer.remaining() > toRead) {        mBuffer.get(b, off, toRead);        mPos += toRead;        mBlockIsRead = true;
}        int index = unpackIndex(i);        float score = unpackScore(i);       packed[j] = pack(index, score);        ++j;      }      packed = newPacked;
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
}          doRemoveRecord(key, source);          if (isEventsEnabled()) {             publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                   origin, IGNORE_COMPLETION));          }          return true;
private final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
return;    }   time.put(delta);    final float currentLoad = delta == 0f ? 0f : current / delta;    load.put((delta > 1f) ? currentLoad : delta * currentLoad + (1f - delta) * load.latest);
*/   static public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {    DecimalType result = null;   HistoricItem itemThen = historicState(item, timestamp);    if (itemThen != null) {     DecimalType valueThen = (DecimalType) itemThen.getState();     DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);
wakenUp.set(false);                  try {                     int selectedKeyCount = selector.select(500);
};       private final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
"1: " + getCheckMessage(MSG_KEY_MISMATCH),          };         verify(checkConfig, getPath("InputPackageDeclarationDiffDirectoryAtParent.java"), expected);      }      @Test
new SpdySessionStatus(1, "PROTOCOL_ERROR");            public static final SpdySessionStatus INTERNAL_ERROR =         new SpdySessionStatus(11, "INTERNAL_ERROR");      /**       * Returns the {@link SpdySessionStatus} represented by the specified code.
};       private final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@ApiOperation(value = "Logs out current logged in user session", notes = "", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void logoutUser();      @PUT      @Path("/{username}")
* {@link EnableAutoConfiguration Auto-configuration} for Spring REST Docs.   *   * @author Andy Wilkinson   */  @Configuration  @ConditionalOnWebApplication  @EnableConfigurationProperties class RestDocsAutoConfiguration {   @Bean   @ConditionalOnMissingBean(MockMvcRestDocumentationConfigurer.class)
@Verifies(value = "should return all global properties in the database", method = "getAllGlobalProperties()")   public void getAllGlobalProperties_shouldReturnAllGlobalPropertiesInTheDatabase() throws Exception {    executeDataSet(ADMIN_INITIAL_DATA_XML);   Assert.assertEquals(20, Context.getAdministrationService().getAllGlobalProperties().size());   }   /**
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   private final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   private final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Look for function calls that have no side effects, and annotate them     * that way.     */   private final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
Assert.assertEquals(2, result.size());        hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()            .map(regionName -> regionName.split("\\.")[1]).collect(Collectors.toList()));       ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());        result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));        Assert.assertEquals(0, result.size());
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNano(System.nanoTime() - start);          }          return result;      }
assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();
};       private final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/   @Override   public Collection<Item> getItems() {   Set<Item> items = new HashSet<Item>();    for (String name : modelRepository.getAllModelNamesOfType("items")) {     items.addAll(getItemsFromModel(name));    }
EnvironmentTestUtils.addEnvironment(this.context, "security.ignored:none");    this.context.refresh();   assertEquals(2,      this.context.getBean(FilterChainProxy.class).getFilterChains().size());   }
}      public boolean hasAttributes() {         return nodeData.getAttributes() == null;      }      public void setAttributes(Attributes attributes) {
}      }     private SSLEngineResult sslReadErrorResult(int err, int bytesConsumed, int bytesProduced) throws SSLException {
* @param importGroup           *        import group.           */         public void setImportGroup(String importGroup) {              this.importGroup = importGroup;          }
@ApiResponse(code = 200, message = "successful operation", response = Pet.class),          @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),          @ApiResponse(code = 404, message = "Pet not found", response = Void.class) })     Pet getPetById(@PathParam("petId") @ApiParam("ID of pet to return") Long petId);      @PUT      @Consumes({ "application/json", "application/xml" })
assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();
private final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       private final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedJcloudsEndpointBuilder              extends                  AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {          default JcloudsEndpointBuilder basic() {
private final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface RssEndpointBuilder             extends                 EndpointConsumerBuilder {          default AdvancedRssEndpointBuilder advanced() {              return (AdvancedRssEndpointBuilder) this;          }
* @should delete global properties from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;   /**    * Save the given global property to the database. If the global property already exists,
if (TACHYON_STREAMING_READ) {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));            InputStream is = file.getInStream(ReadType.CACHE);            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glHint (int target, int mode) {
};       private final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);         assertFalse(model.getUniqueItems());      }  } \ No newline at end of file
}      public Predicate createPredicate(RouteContext routeContext) {         ExpressionType predicateType = getCompletePredicate();          if (predicateType != null && predicate == null) {              predicate = predicateType.createPredicate(routeContext);          }
new ModelNode[] { removeDwm, removeContext });              mcc.execute(compositeOp);              ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,                     TestSuiteEnvironment.getServerAddress(), serverPort);          }          protected abstract Policy getPolicy();
thread.shutdown();              }              synchronized (ticket) {                 ticket.notify();              }          }      }
if (isStatisticsEnabled()) {              if (result) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNano(System.nanoTime() - start);              }             statistics.addGetTimeNano(System.nanoTime() - start);              if (isHit) {                  statistics.increaseCacheHits(1);              } else {
* Look for function calls that have no side effects, and annotate them     * that way.     */   private final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public boolean keyDown (int keycode) {    InputProcessor[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (items[i].keyDown(keycode)) return true;     } finally {      processors.end();     }
};       private final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface GoogleSheetsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {
if (id != null) {              builder.getAdviceWithTasks().add(AdviceWithTasks.afterById(route, id, answer, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          } else if (toString != null) {             builder.getAdviceWithTasks().add(AdviceWithTasks.afterByToString(route, toString, answer, selectLast, selectFirst, selectFrom, selectTo, maxDeep));          } else if (type != null) {              builder.getAdviceWithTasks().add(AdviceWithTasks.afterByType(route, type, answer, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          }
* @see <a href="http:       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.constructTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
public static interface ServerEndpointBuilder              extends                  ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {          default AdvancedServerEndpointBuilder advanced() {
public static interface JcrEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedJcrEndpointProducerBuilder advanced() {
public void testSamplingUsingmessageFrequency() throws Exception {          long totalMessages = 100;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
@Override      public Map<AgentInfo, PinpointRouteResponse> invoke(List<AgentInfo> agentInfoList, byte[] payload)              throws TException {         return invoke(agentInfoList, payload, DEFUALT_FUTURE_TIMEOUT);      }      @Override
};       private final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/    @Override    @Transactional(readOnly = true)   public Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {     if (datatypeClasses == null) {      populateBeanListsFromContext();     }
};       private final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
, (args = args.rest()).first()        , args.rest());     case 17:     return invoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid pet value", response = Void.class) })     void deletePet(@PathParam("petId") @ApiParam("Pet id to delete") Long petId,@HeaderParam("api_key")   String apiKey);      @GET      @Path("/findByStatus")
};       private final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15850, value = "No handler for operation %s at address %s")      String noHandlerForOperation(String operationName, PathAddress address);      /**
public static interface AdvancedJiraEndpointBuilder              extends                  AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {          default JiraEndpointBuilder basic() {
template.sendBodyAndHeader(serverUri, "Hello World", HttpProducer.QUERY, "one=uno&two=dos");         assertMockEndpointsSatisifed();      }      protected RouteBuilder createRouteBuilder() throws Exception {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /**
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
public static interface CouchbaseEndpointBuilder              extends                  CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {          default AdvancedCouchbaseEndpointBuilder advanced() {
else    {    ISeq s = RT.seq(sizeOrSeq);   int size = s.count();    long[] ret = new long[size];    for(int i = 0; i < size && s != null; i++, s = s.next())     ret[i] = ((Number) s.first()).longValue();
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameter(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameter(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
};       private final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   private final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       private final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
public JvmGcDetailedBo map(TJvmGcDetailed tJvmGcDetailed) {          JvmGcDetailedBo jvmGcDetailedBo = new JvmGcDetailedBo();          jvmGcDetailedBo.setGcNewCount(tJvmGcDetailed.getJvmGcNewCount());         jvmGcDetailedBo.setGcNewTime(tJvmGcDetailed.getJvmGcNewCount());          jvmGcDetailedBo.setCodeCacheUsed(tJvmGcDetailed.getJvmPoolCodeCacheUsed());          jvmGcDetailedBo.setNewGenUsed(tJvmGcDetailed.getJvmPoolNewGenUsed());          jvmGcDetailedBo.setOldGenUsed(tJvmGcDetailed.getJvmPoolOldGenUsed());
notifyHandlerException(t);          } finally {              ChannelBufferHolder<Object> inbound = ctx.inbound();             if (inbound.isEmpty() && inbound.hasByteBuffer()) {                  inbound.byteBuffer().discardReadBytes();              }          }
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
* {@inheritDoc}       */      @Override     public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {          try {              if (destroyed.get()) {                  logger.debug(DESTROYED, getID(), "addAtmosphereResource(AtmosphereResource<?, ?> r");                 return r;              }              start();
public static interface DirectEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedDirectEndpointProducerBuilder advanced() {
public static interface AdvancedKinesisEndpointBuilder              extends                  AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {          default KinesisEndpointBuilder basic() {
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   private final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (sizeModeClass.equals("FixedSizeMode")) {              sizeMode = VizController.getInstance().getTextManager().getSizeModes()[0];         } else if (colorModeClass.equals("ProportionalSizeMode")) {              sizeMode = VizController.getInstance().getTextManager().getSizeModes()[2];         } else if (colorModeClass.equals("ScaledSizeMode")) {              sizeMode = VizController.getInstance().getTextManager().getSizeModes()[1];          }
} catch (IOException e) {       logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);      } finally {      IOUtils.closeQuitely(is);      }     }    } catch (NotInitializedException e) {
};       private final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
long now = System.currentTimeMillis();      StringBuilder acc = new StringBuilder(get());      while (!predicate.test(acc.toString())) {       Assert.assertTrue(System.currentTimeMillis() - now < 5000);        try {          Thread.sleep(1);        } catch (InterruptedException e) {
String s = (String) req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);          if (s == null) {              s = response.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);             if (s == null) {                  String tmp = req.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);                 s = !tmp.equalsIgnoreCase("0") ? tmp : null;              }          }          uuid = s == null ? UUID.randomUUID().toString() : s;
repo.setDeadLetterUri("direct:dead");         repo.setRecoveryInterval(500, TimeUnit.MILLISECONDS);          super.setUp();      }
public static interface AdvancedFileEndpointBuilder              extends                  AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {          default FileEndpointBuilder basic() {
}      private void checkClusterVersion(Version clusterVersion) {         if (!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) && !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)) {              LOG.error("Elasticsearch node is of the wrong version {}, it must be between {} and {}! "                              + "Please make sure you are running the correct version of Elasticsearch.",                      clusterVersion, MINIMUM_ES_VERSION, MAXIMUM_ES_VERSION);
*       * @return the message.       */     @Message(id = 15850, value = "No handler for operation %s at address %s")      String noHandlerForOperation(String operationName, PathAddress address);      /**
public void testGetRequiredTokens() {          ThrowsCountCheck obj = new ThrowsCountCheck();          int[] expected = {TokenTypes.LITERAL_THROWS};         assertArrayEquals(expected, obj.getAcceptableTokens());      }  }
}      }     public Set<PlanNodeId> getNoMoreSplits()      {          ImmutableSet.Builder<PlanNodeId> noMoreSplits = ImmutableSet.builder();          for (Entry<PlanNodeId, DriverSplitRunnerFactory> entry : partitionedDriverFactories.entrySet()) {
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 15803, value = "Caught exception awaiting final response from server %s on host %s")      void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);      /**
*/    public void closeRegion(final String regionname, final String serverName)    throws IOException {     closeRegion(Bytes.toBytesBinary(regionname), serverName);    }    /**
if (fValue > 1) fValue = 1;      if (fValue < -1) fValue = -1;      short value = (short)(fValue * Short.MAX_VALUE);     bytes[j] = (byte)(value | 0xff);      bytes[j + 1] = (byte)(value >> 8);     }
*  Does class have non-private ctors.           *  @return true if class has non-private ctors           */         boolean isWithNonPrivateCtor() {              return withNonPrivateCtor;          }
public static interface GitEndpointBuilder              extends                  GitEndpointConsumerBuilder, GitEndpointProducerBuilder {          default AdvancedGitEndpointBuilder advanced() {
jsonArray = new JSONArray(responseAsString);                  }                  if (CONF.isPrettyDebugEnabled()) {                     logger.debug(json.toString(1));                  }              } catch (JSONException jsone) {                  if (logger.isDebugEnabled()) {
};       private final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedCaffeineLoadCacheEndpointBuilder              extends                  AdvancedCaffeineLoadCacheEndpointConsumerBuilder, AdvancedCaffeineLoadCacheEndpointProducerBuilder {          default CaffeineLoadCacheEndpointBuilder basic() {
return additionalReplacements;    }   private final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (pollFuture != null && !pollFuture.isCancelled())     pollFuture.cancel(false);   logger.debug("rapidRefreshFuture scheduleing for {} millis", millis);    pollFuture = pollService.scheduleAtFixedRate(new Runnable() {     @Override
*       * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**
public static interface InfinispanEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedInfinispanEndpointProducerBuilder advanced() {
public static interface BraintreeEndpointBuilder              extends                  BraintreeEndpointConsumerBuilder, BraintreeEndpointProducerBuilder {          default AdvancedBraintreeEndpointBuilder advanced() {
if (pollFuture != null && !pollFuture.isCancelled())     pollFuture.cancel(false);   logger.debug("rapidRefreshFuture scheduleing for {} millis", millis);    pollFuture = pollService.scheduleAtFixedRate(new Runnable() {     @Override
String expected = "";      expected += getLsNoAclResultStr("/testRoot/testFileA", files[0].getCreationTimeMs(), 10,          LsCommand.STATE_FILE_IN_MEMORY);     expected += getLsNoAclResultStr("/testRoot/testDir", files[1].getCreationTimeMs(), 0,          LsCommand.STATE_FOLDER);      expected += getLsNoAclResultStr("/testRoot/testFileC", files[3].getCreationTimeMs(), 30,          LsCommand.STATE_FILE_NOT_IN_MEMORY);
assertEquals(0, historyService.createHistoricActivityInstanceQuery().unfinished().list().size());      if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {       assertEquals(2, historyService.createHistoricActivityInstanceQuery().finished().list().size());      } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {       assertEquals(1, historyService.createHistoricActivityInstanceQuery().finished().list().size());      } else {        assertEquals(0, historyService.createHistoricActivityInstanceQuery().finished().list().size());      }
Thread.yield();     response = client.get(path);      assertEquals(response.getCode(), 404);
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   private final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   private final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
executeDataSet(ADMIN_INITIAL_DATA_XML);    AdministrationService as = Context.getAdministrationService();   Assert.assertEquals(20, as.getAllGlobalProperties().size());    as.purgeGlobalProperty(as.getGlobalPropertyObject("a_valid_gp_key"));   Assert.assertEquals(19, as.getAllGlobalProperties().size());   }   /**
*     * @param toCompare The element to set as the comparison reference.    */  public void setReference(T toCompare);   /**    * Checks, whether the given element is equal to the element that has been set as the comparison
};       private final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return (T) fastConstructor.newInstance(arguments);        }        public List<Parameter<?>> getParameters() {         return Parameter.forConstructor(errorHandler, fastConstructor);        }        public Member getMember() {         return fastConstructor.getJavaConstructor();        }      };    }
*       * @return the error message       */     @Message(id = 15836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
private static interface ChannelCallback<T> {          T doWithChannel(Channel channel) throws Exception;      }
* @see <a href="http:       */      public ResponseList<Status> getMentions(Paging paging) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/mentions.json",                  null, paging.asPostParameterList(), true));      }
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   private final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsText(String path, int batchSize) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);   }
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   private final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}          else {             details.put(CONFIG_HASH_KEY, currentConfigHash);          }      }
*     * @return The closed DataStream.    */  public DataStream<OUT> print() {    DataStream<OUT> inputStream = this.copy();    PrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();   DataStream<OUT> returnStream = addSink(inputStream, printFunction, null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());
*       * @return the message.       */     @Message(id = 15867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
};       private final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedHazelcastMultimapEndpointBuilder              extends                  AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {          default HazelcastMultimapEndpointBuilder basic() {
public static interface JmsEndpointBuilder              extends                  JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {          default AdvancedJmsEndpointBuilder advanced() {
private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();    private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();    private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();   private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 80000;    private static final boolean DEFAULT_USE_COMBINER = false;    private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;    private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;
* Builder for endpoint for the Kubernetes Persistent Volume Claim       * component.       */     public static interface KubernetesPersistentVolumesClaimsEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder advanced() {
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameter(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameter(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
};       private final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface GuavaEventBusEndpointBuilder              extends                  GuavaEventBusEndpointConsumerBuilder, GuavaEventBusEndpointProducerBuilder {          default AdvancedGuavaEventBusEndpointBuilder advanced() {
};       private final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedSqlStoredEndpointBuilder              extends                  EndpointProducerBuilder {          default SqlStoredEndpointBuilder basic() {
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glHint (int target, int mode) {
, (args = args.rest()).first()        , args.rest());     case 12:     return invoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
};       private final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (getPath() == null && c.getPath() != null) {              return -1;         } else if (c.getPath() == null) {              return 1;          }          v = getPath().compareTo(c.getPath());
public static interface FtpsEndpointBuilder              extends                  FtpsEndpointConsumerBuilder, FtpsEndpointProducerBuilder {          default AdvancedFtpsEndpointBuilder advanced() {
new SpdySessionStatus(1, "PROTOCOL_ERROR");            public static final SpdySessionStatus INTERNAL_ERROR =         new SpdySessionStatus(11, "INTERNAL_ERROR");      /**       * Returns the {@link SpdySessionStatus} represented by the specified code.
};       private final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.retInt();      }     private void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)      {          MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), "getSizeInBytes", type(long.class));
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),          @ApiResponse(code = 404, message = "User not found", response = Void.class) })     void testEndpointParameters(@FormParam(value = "number")  BigDecimal number,@FormParam(value = "double")  Double _double,@FormParam(value = "pattern_without_delimiter")  String patternWithoutDelimiter,@FormParam(value = "byte")  byte[] _byte,@FormParam(value = "integer")  Integer integer,@FormParam(value = "int32")  Integer int32,@FormParam(value = "int64")  Long int64,@FormParam(value = "float")  Float _float,@FormParam(value = "string")  String string,@FormParam(value = "binary")  byte[] binary,@FormParam(value = "date")  LocalDate date,@FormParam(value = "dateTime")  Date dateTime,@FormParam(value = "password")  String password,@FormParam(value = "callback")  String paramCallback);      @GET      @Consumes({ "*/*" })
if (ClassReflection.isAssignableFrom(Enum.class, actualType)) {     if (knownType == null || knownType != actualType) {       if (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;   /**    * @param aClass class of object getting length for
Vector<RelationshipListItem> ret = new Vector<RelationshipListItem>();     List<Relationship> rels = Context.getPersonService()            .getRelationships(Context.getPersonService().getPerson(personId));     for (Relationship rel : rels) {      if (!rel.isVoided()              && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(
*  *  @see java.util.Comparator    */  public int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;
@Override      protected void doStop() throws Exception {          if (channel != null) {             LOG.trace("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   private final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@Override              public void checkAssertion() throws IOException {                  final String expectedPath = getFilePath("main/") + File.separator;                 final StringBuilder sb = new StringBuilder();                  sb.append("Starting audit...").append(System.getProperty("line.separator"));                  final String format = "[WARN] %s.java:%s: %s [FileLength]";                  for (String[] outputValue : outputValues) {
ticker.advance(4000000);      stopwatch.stop();      ticker.advance(9000000);     assertEquals(4, stopwatch.elapsedMillis());    }    public void testElapsedMillis_multipleSegments() {
*       * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
"functions are set.");       private final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}   @ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)  @UnrelatedOne   static class ImportAutoConfigurationWithItemsTwo {   }
public static interface AdvancedKeystoneEndpointBuilder              extends                  EndpointProducerBuilder {          default KeystoneEndpointBuilder basic() {
private static List<String> updateWarnings = null;   /**    * Convenience method to run the changesets using Liquibase to bring the database up to a
throw new IllegalArgumentException("Plugin is not associated with this PluginLoader");          }         if (!plugin.isEnabled()) {              JavaPlugin jPlugin = (JavaPlugin)plugin;              server.getPluginManager().callEvent(new PluginEvent(Event.Type.PLUGIN_DISABLE, plugin));
}      if (isBlockLocked(blockId) || !mToRemoveBlockIdSet.contains(blockId)) {       return false;      }      try {        if (!mFs.delete(getBlockFilePath(blockId), false)) {
fail |= inconsistent( record,                      "next record set but length less than maximum" );          }         if ( record.getLength() > store.getRecordSize()                                    - store.getRecordHeaderSize() )          {              fail |= inconsistent( record,                      "length larger than maximum for store" );          }
}   @Test  public void testHealth() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
AbstractAioChannel ch = null;          try {              ch = findChannel(command);         } catch (Exception e) {          }
DIAMOND(264),      IRON_INGOT(265),      GOLD_INGOT(266),     IRON_SWORD(267, 1, 59),      WOOD_SWORD(268, 1, 59),      WOOD_SPADE(269, 1, 59),      WOOD_PICKAXE(270, 1, 59),
case "contigo":    case "consigo":    default:    First = word.substring(0, 3);     second = word.substring(3, 5);    }
final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc("title"), 3, 2);          assertThat(page3.pagination().getCount()).isEqualTo(1);         assertThat(page3.pagination().getGlobalTotal()).isEqualTo(7);          assertThat(page3.delegate())                  .extracting("title")                  .containsExactly("hello6");
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgram(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
};       private final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
void addName(String nameToAdd) {              varNames.add(nameToAdd);          }
}   public void glBindTexture (int target, int texture) {   GL.glBindTextureEXT(target, texture);   }   public void glBlendFunc (int sfactor, int dfactor) {
"functions are set.");       private final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      private Channel lookupInCache(Url url) {         Channel channel = connectionsPool.get(url);          if (channel != null) {              /**               * The Channel will eventually be closed by Netty and will becomes invalid.
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 15866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
private final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Class[] argsClass = { String.class };          Object[] arguments = { op.testOptions.taggerSerializedFile };          System.err.printf("Loading tagger from serialized file %s ...\n",op.testOptions.taggerSerializedFile);         tagger = (Function<List<? extends HasWord>,ArrayList<TaggedWord>>) Class.forName("edu.stanford.nlp.tagger.maxent.MaxentTagger").getConstructor(argsClass).newInstance(arguments);        } catch (RuntimeException e) {          throw e;        } catch (Exception e) {
String uri = getScpUri() + "?username=admin&password=admin&chmod=640&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Bonjour Monde", Exchange.FILE_NAME, "monde.txt");         Thread.sleep(100);          File file = new File(getScpPath() + "/monde.txt");          assertFileExists(file.getAbsolutePath());
};       private final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public void touchUp (InputEvent event, float x, float y, int pointer, int button) {       if (pointer != draggingPointer) return;       draggingPointer = -1;      if (!calculatePositionAndValue(x, y)) {        ChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);        fire(changeEvent);
try {              final String echo = localEcho.echo(message);              Assert.fail("Remote invocation on a local view " + LocalEcho.class.getName() + " was expected to fail");         } catch (EJBException nsee) {              logger.trace("Got the expected exception on invoking on a local view, remotely", nsee);          }
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertEquals(expectedPlan, actualPlan);   }   @Test
public static interface AdvancedSWFEndpointBuilder              extends                  AdvancedSWFEndpointConsumerBuilder, AdvancedSWFEndpointProducerBuilder {          default SWFEndpointBuilder basic() {
Assert.assertEquals(1, result.size());        hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()            .map(regionName -> regionName.split("\\.")[1]).collect(Collectors.toList()));       ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());        result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));        Assert.assertEquals(0, result.size());
assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();
mThriftServer = createThriftServer();      mWorkerNetAddress =          new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()             .getCanonicalHostName(), thriftServerPort, mDataServer.getPort());      int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);
*       * @return the message.       */     @Message(id = 15849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Bye World", Exchange.FILE_NAME, "mysub/bye.txt");         Thread.sleep(200);          File file = new File(getScpPath() + "/mysub/bye.txt");          assertFileExists(file.getAbsolutePath());
int msgType = buf.readInt();    KvStateRequestType[] values = KvStateRequestType.values();   if (msgType >= 0 && msgType <= values.length) {     return values[msgType];    } else {     throw new IllegalArgumentException("Illegal message type with index " + msgType);
};       private final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.constructTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
};       private final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public static interface Sjms2EndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSjms2EndpointProducerBuilder advanced() {
* @should return null if no implementation id is defined yet    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public ImplementationId getImplementationId() throws APIException;   /**    * Set the given <code>implementationId</code> as this implementation's unique id
};       private final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
};       private final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}       private final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
int receiverBufferSize = TestUtils.randomPortInt();      Random rand = new Random();      boolean reuseAddress = rand.nextBoolean();     int trafficClass = TestUtils.randomByte() + 127;      boolean tcpNoDelay = rand.nextBoolean();      boolean tcpKeepAlive = rand.nextBoolean();      int soLinger = TestUtils.randomPositiveInt();
httpClientBinder(binder).bindHttpClient("memoryManager", ForMemoryManager.class)                  .withTracing()                  .withConfigDefaults(config -> {                     config.setIdleTimeout(new Duration(2, SECONDS));                      config.setRequestTimeout(new Duration(10, SECONDS));                  });
import org.jboss.logging.MessageLogger;  /**  * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain * controller logger messages. See http:   * JBAS message id blocks.   * <p/>
public void test_cn_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年5月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
public void testSamplingFromExchangeStream() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMessageCount(2);          mock.setResultWaitTime(3000);          List<Exchange> sentExchanges = new ArrayList<Exchange>();
}      @Override     public void display(GL2 gl, GLU glu) {          markTime++;          VizModel vizModel = VizController.getInstance().getVizModel();
}      @FixMethodOrder(MethodSorters.DEFAULT)     private static class DummySortWithDefault {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
private final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return a message for the error.       */     @Message(id = 15832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
public static interface GoogleDriveEndpointBuilder              extends                  GoogleDriveEndpointConsumerBuilder, GoogleDriveEndpointProducerBuilder {          default AdvancedGoogleDriveEndpointBuilder advanced() {
public static interface AdvancedRabbitMQEndpointBuilder              extends                  AdvancedRabbitMQEndpointConsumerBuilder, AdvancedRabbitMQEndpointProducerBuilder {          default RabbitMQEndpointBuilder basic() {
org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();          String label = sourceEdgeData.getLabel();         if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {              label = sourceEdgeTextData.getText();          } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {              label = null;
private final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Test    @Verifies(value = "should pass if the duplicate ConceptName is neither preferred nor fully Specified", method = "validate(Object,Errors)")    public void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {    Context.setLocale(Context.getLocale());     Concept concept = Context.getConceptService().getConcept(5497);     ConceptName duplicateName = new ConceptName("duplicate name", Context.getLocale());
outResult.add(cell);              count++;              totalBytesRead += CellUtil.estimatedSerializedSizeOf(cell);             totalHeapSize += CellUtil.estimatedHeapSizeOf(cell);              if (totalBytesRead > maxRowSize) {                throw new RowTooBigException("Max row size allowed: " + maxRowSize                + ", but the row is bigger than that.");
checkConfig.addAttribute("matchDirectoryStructure", "false");          final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;         verify(checkConfig, getPath("InputPackageDeclarationDiffDirectory.java"), expected);      }      @Test
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
long sessionId = IdUtils.createSessionId();        long blockSize = openUfsBlockOptions.getBlockSize();        boolean isSourceLocal = mLocalWorkerAddress.getHost().equals(request.getSourceHost())           && mLocalWorkerAddress.getRpcPort() == request.getSourcePort();        try {          if (isSourceLocal) {
} catch (IOException e) {       logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);      } finally {      IOUtils.closeQuitely(is);      }     }    } catch (NotInitializedException e) {
}    /**    * Free the file or Folder from tachyon in-memory specified by argv     *     * @param path The TachyonURI path as the input of the command     * @return 0 if command if successful, -1 if an error occurred.
private static final Logger LOG = LoggerFactory.getLogger(Utils.class);  private static final int DEFAULT_HEAP_LIMIT_CAP = 500;   private static final float DEFAULT_YARN_HEAP_CUTOFF_RATIO = 0.8f;   /**
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   private final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (NodeUtil.isFunctionBind(expr)) {        return true;      }     if (!expr.isGetProp() || !expr.getLastChild().getString().equals("bind")) {        return false;      }      Node recv = expr.getFirstChild();
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 15872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   private final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);   }
private final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15848, value = "Exception getting result from host %s: %s")      String exceptionAwaitingResultFromHost(String name, String message);      /**
Configuration.getBoolean(PropertyKey.USER_FILE_PASSIVE_CACHE_ENABLED);    private static final int UNINITIALIZED_BLOCK_INDEX = -1;    private static final int EOF_DATA = -1;   private static final int EOF_BLOCK_ID = -1;        private final InStreamOptions mInStreamOptions;
}       private final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       private final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override    protected boolean removeEldestEntry(Map.Entry<K, List<PropertyMapping>> eldest) {    return size() >= this.capacity;    }
Transition transition = parser.transitionIndex.get(predictedTransition.object());            State newState = transition.apply(state, predictedTransition.score());           if (bestState == null || newState.score() < bestState.score()) {              bestState = newState;            }            beam.add(newState);
public void addAll (int[] array, int offset, int length) {     int[] items = this.items;     int sizeNeeded = size + length;    if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;    }
};       private final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
if (setter != null) {                      if (paramType == null) {                         paramType = setter.getRawParameterTypes() != null ? setter.getRawParameterTypes()[0] : null;                      }                      for (final Annotation fieldAnnotation : setter.annotations()) {
public static interface RedisEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedRedisEndpointProducerBuilder advanced() {
public static interface BeanstalkEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedBeanstalkEndpointProducerBuilder advanced() {
};       private final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
assertTrue(repo.contains("e.txt"));          resetMocks();         notify = new NotifyBuilder(context).whenDone(4).create();          getMockEndpoint("mock:result").expectedMessageCount(2);
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.valueOf(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(100);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
* @return True, if all normalized key comparisons should invert the sign of the comparison result,    *         false if the normalized key should be used as is.    */  public boolean invertNormalizedKey();
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassCastException.class))          );      }
*       * @return the message.       */     @Message(id = 15860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
mbeanServer.registerMBean(instance, objectName);                   }               } catch (Exception ex) {                  getLog().error("register druid-driver mbean error", ex);               }               return true;
if (tiled != null) return tiled;     Drawable drawable = optional(name, Drawable.class);    if (tiled != null) {      if (!(drawable instanceof TiledDrawable)) {       throw new GdxRuntimeException("Drawable found but is not a TiledDrawable: " + name + ", "        + drawable.getClass().getName());      }     return tiled;     }     tiled = new TiledDrawable(getRegion(name));
apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);                  } else if ("javax.ws.rs.DefaultValue".equals(item.annotationType().getName())) {                      try {                         rsDefault = (String) item.getClass().getMethod("value").invoke(item);                      } catch (Exception ex) {                          LOGGER.error("Invocation of value method failed", ex);                      }
return getOutputFactory().createXMLEventWriter(result);      }     @Converter      public XMLStreamWriter createXMLStreamWriter(OutputStream outputStream) throws XMLStreamException {          return getOutputFactory().createXMLStreamWriter(outputStream);      }
public Container<T> prefSize (float width, float height) {   prefSize(new Fixed(width));    return this;   }
}       private class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
};       private final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleAlternativesWithCommonLabel_4() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(561);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
getMockEndpoint("mock:error").expectedMessageCount(2);         resultEndpoint.expectedBodiesReceived("one", "three");          sendMessage("1", "one");          sendMessage("2", "two");
MapDifference<String, PropertyAccessKind> sourceDifference =                Maps.difference(                    compiler.getSourceGetterAndSetterProperties(),                   GatherGettersAndSetterProperties.gather(compiler, mainRoot));            assertWithMessage("Pass did not update new source getters / setters")                .that(sourceDifference.entriesOnlyOnRight())                .isEmpty();
public static interface WordpressEndpointBuilder              extends                  WordpressEndpointConsumerBuilder, WordpressEndpointProducerBuilder {          default AdvancedWordpressEndpointBuilder advanced() {
if (ObjectProperty.isType(type) || node.get("properties") != null) {              detailNode = node.get("additionalProperties");             if (detailNode != null) {                  Property items = propertyFromNode(detailNode);                  if (items != null) {                      MapProperty mapProperty = new MapProperty(items).description(description);
}          }          if (isStatisticsEnabled()) {             statistics.addGetTimeNano(System.nanoTime() - start);          }          CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);          final Object process = entryProcessor.process(entry, arguments);
* Look for function calls that are pure, and annotate them     * that way.     */   private final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsText(String path, int batchSize) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);   }
public static interface SqsEndpointBuilder              extends                  SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {          default AdvancedSqsEndpointBuilder advanced() {
for (String type : types) {             Class<?> clazz = classResolver.resolveClass(type);              appendModels(clazz, swagger);          }
try {              ((TextView) getView()).setText(s);          } catch (ClassCastException e) {             Log.e(IcsToast.TAG, "This Toast was not created with IcsToast.makeText", e);          }      }  }
}       private final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   private final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       private final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should execute sql containing group by    */   @Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)  public List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;   /**    * Get the implementation id stored for this server Returns null if no implementation id has
public static interface LinkedInEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedLinkedInEndpointProducerBuilder advanced() {
@Before      public void setUpAdminObjects() throws NamingException {          server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8280");         server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8380");          Assert.assertNotNull(server1Proxy);          Assert.assertNotNull(server2Proxy);      }
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
ModelNode oldResponse = response;                  try {                      flags = EnumSet.noneOf(Flag.class);                     response = step.response;                      ModelNode newOperation = operation = step.operation;                      modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));                      step.handler.execute(this, newOperation);
mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;");          } else if (propertyClass == double.class) {             mw.visitVarInsn(DLOAD, context.var("double"));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;");          } else if (propertyClass == boolean.class) {
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
}      public ILock getLock(Object key) {         if (name == null) {              throw new NullPointerException("Retrieving a lock instance with a null key is not allowed!");          }          return getDistributedObject(LockService.SERVICE_NAME, node.getSerializationService().toData(key));
warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\n');                          break;                      case HINT:                         warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\n');                          break;                  }              }
ppiX = ppi;    ppiY = ppi;    ppcX = ppiX / 2.54f;   ppcY = ppcY / 2.54f;    app.debug(tag, "Display: ppi=" + ppi + ", density=" + density);
assertEquals(usedTimestamp, (Double) lm.getField("timestamp"), 1e-8);          assertEquals("ü", lm.getField("_lol_utf8"));          assertEquals("bar", lm.getField("_foo"));         assertEquals(13, lm.getFields().size());      }      @Test
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   private final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Builder for endpoint for the Kubernetes Persistent Volume Claim       * component.       */     public static interface KubernetesPersistentVolumesClaimsEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder advanced() {
}       private final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
subgroup.setMaxQueuedQueries(4);          subgroup.setMaxRunningQueries(3);         MockQueryExecution query1 = new MockQueryExecution(1);          subgroup.run(query1);          root.processQueuedQueries();
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), is("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
@PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })  public class ConfigurationLoaderTest {     private Configuration loadConfiguration(String name)          throws CheckstyleException {          return loadConfiguration(name, new Properties());      }     private Configuration loadConfiguration(          String name, Properties props) throws CheckstyleException {          final String fName =              "src/test/resources/com/puppycrawl/tools/checkstyle/configs/" + name;
};       private final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       private final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      @Override     public boolean updateWorld() {          boolean repositioned = octree.repositionNodes();          boolean updated = dataBridge.updateWorld();
public static void format(Configuration conf) throws IOException {     format(conf, false);    }    static NameNodeMetrics metrics;
* @see <a href="http:       */      public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {         return DirectMessage.constructDirectMessages(get(getBaseURL()                  + "direct_messages.json", null, paging.asPostParameterList(), true));      }
*      * @param queueName Name of the job queue.     */   protected void setQueueName(String queueName) {      super.setQueueName(queueName);    }
public static interface AdvancedBrowseEndpointBuilder              extends                  AdvancedBrowseEndpointConsumerBuilder, AdvancedBrowseEndpointProducerBuilder {          default BrowseEndpointBuilder basic() {
private String config( TargetDirectory target, int id, int port )      {          File config = target.file( "zookeeper" + id + ".cfg" );         File dataDir = target.directory( "zk" + id + "data" );          try          {              PrintWriter conf = new PrintWriter( config );
private final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private static final Logger logger = Logger.getLogger(TransactedTopicMessageSender.class);     @Resource(name = "java:/topic/myAwesomeTopic")      private Topic topic;     @Resource(name = "java:/ConnectionFactory")      private ConnectionFactory factory;      @Resource
if (field != null) {                     paramType = field.getRawType();                      for (final Annotation fieldAnnotation : field.annotations()) {                          if (!paramAnnotations.contains(fieldAnnotation)) {
obj = null;                  removed = false;                  if (isEventsEnabled()) {                     publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                            origin, completionId));                  }              } else {
private void registerWebTestClient(ConfigurableApplicationContext context) {    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();    if (beanFactory instanceof BeanDefinitionRegistry) {    registerWebTestClient((BeanDefinitionRegistry) context);    }   }
public static interface PulsarEndpointBuilder              extends                  PulsarEndpointConsumerBuilder, PulsarEndpointProducerBuilder {          default AdvancedPulsarEndpointBuilder advanced() {
}    };   private final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Before      public void setUpAdminObjects() throws NamingException {          server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8280");         server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8380");          Assert.assertNotNull(server1Proxy);          Assert.assertNotNull(server2Proxy);      }
*       * @return the message.       */     @Message(id = 15863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
}      public synchronized ProcessorType getLastInterceptedNode() {         if (routeList == null) {              return null;          }          return routeList.get(routeList.size() - 1);
if (record == null || isExpired) {                  removed = false;                  if (isEventsEnabled()) {                     publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                            origin, completionId));                  }              } else {
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
*       * @return a message for the error.       */     @Message(id = 15832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
.retInt();      }     private void generatePositionEqualsPositionMethod(              ClassDefinition classDefinition,              CallSiteBinder callSiteBinder,              List<Type> joinChannelTypes,
*       * @return the message.       */     @Message(id = 15850, value = "No handler for operation %s at address %s")      String noHandlerForOperation(String operationName, PathAddress address);      /**
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   private final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override   public void internalReceiveCommand(String itemName, Command command) {    super.internalReceiveCommand(itemName, command);   logger.debug("MyQ binding received command '{}' for item '{}'",      command, itemName);    if (myqOnlineData != null) {     computeCommandForItem(command, itemName);
};       private final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,    Buffer pixels) {   GL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));   }   public void glViewport (int x, int y, int width, int height) {
return additionalReplacements;    }   private final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException;   /**    * Returns a list of locales used by the user when searching.
*      * @param queueName Name of the job queue.     */   protected void setQueueName(String queueName) {      super.setQueueName(queueName);    }
};       private final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort);    env.enableCheckpointing(500);    env.setParallelism(parallelism);   env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    env.setBufferTimeout(0);
if (getSslStoreProvider() != null) {     try {      factory.setKeyStore(getSslStoreProvider().getKeyStore());     factory.setTrustStore(getSslStoreProvider().getKeyStore());     }     catch (Exception ex) {      throw new IllegalStateException("Unable to set SSL store", ex);
* @param testedPrototype  The tested prototype instance * @param expectedToString The expected {@link Prototype     */   public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {      this.expectedToString = expectedToString;      this.testedPrototype = testedPrototype;    }
Response resp = f.get(3, TimeUnit.SECONDS);          assertNotNull(resp);          assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);         assertEquals(resp.getHeader("target"), target);          client.close();      }
};       private final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
private final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private class FileDropListener implements FileDrop.Listener {          private final JScrollPane scrollPane;         public FileDropListener(JScrollPane scrollPane) {              this.scrollPane = scrollPane;          }
Optional.empty());         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))                  .row("a", "a")                  .row("a", "a")                  .row("b", null)
*       * @return the message.       */     @Message(id = 15849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));          assertTrue(byteBuf.release());         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, false);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {            mBuf.putInt(0, k + mWorkerId);
@Message(id = 14238, value = "More than one timer found in database with id %s")      RuntimeException moreThanOneTimerFoundWithId(String id);     @Message(id = 14238, value = "The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.")      String timerServiceIsNotActive();     @Message(id = 14239, value = "This EJB does not have any timeout methods")      String ejbHasNoTimerMethods();  }
* @should set uuid on implementation id global property    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public void setImplementationId(ImplementationId implementationId) throws APIException;   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is
*       * @return the message.       */     @Message(id = 15854, value = "Null stream at index %d")      String nullStream(int index);      /**
HttpResponse res = (HttpResponse) ch.readInbound();          DecoderResult dr = res.getDecoderResult();          assertFalse(dr.isSuccess());         assertFalse(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   private final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
SimpleMatrix fullVector = RNNUtils.concatenate(leftVector, rightVector);      for (int slice = 0; slice < size; ++slice) {        SimpleMatrix scaledFullVector = fullVector.scale(deltaFull.get(slice));       deltaTensor = deltaTensor.plus(Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose()).mult(scaledFullVector));      }      return deltaTensor.plus(WTDeltaNoBias);    }
boolean case2 = standbyInfo == null && logPosition.getPostion().getServerId() != null                                      && !logPosition.getPostion().getServerId().equals(findServerId(mysqlConnection));                      if (case2) {                          long timestamp = logPosition.getPostion().getTimestamp();
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, true));      }
};       private final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@Override     public void onException(Throwable cause) {     LOG.error("Async Kafka commit failed.", cause);      failedCommits.inc();     }    };
return parseTimeWithoutTimeZone(session.getTimeZoneKey(), value.toStringUtf8());          }          catch (IllegalArgumentException e) {             throw new PrestoException(INVALID_CAST_ARGUMENT, e);          }      }
String executeCypher( String cypher )      {          return engine.execute( cypher )                 .toString();      }      String executeSql( String sql ) throws SQLException
if (value instanceof AsciiString) {              return ((AsciiString) value).parseDouble();          }         return Double.valueOf(value.toString());      }  }
checkConfig.addAttribute("allowThrowsTagsForSubclasses", "true");          checkConfig.addAttribute("allowUndeclaredRTE", "true");          final String[] expected = {};         verify(checkConfig, getSrcPath("checks/javadoc/Input_03.java"), expected);      }      @Test
@Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/test");          servlet.service(request, response);
* Removes try/catch/finally statements for easier debugging.     */    void removeTryCatchFinally() {     logger.info("Remove try/catch/finally");      startPass("removeTryCatchFinally");      RemoveTryCatch r = new RemoveTryCatch(this);      process(r);
}   public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {   GL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);   }   public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {   GL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);   }   public void glCullFace (int mode) {
@SuppressWarnings("unchecked")      public void returnsA500OnExceptions() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          final RuntimeException ex = new RuntimeException("whoops");
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   private final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void test_Decode_Return_Request_Event_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   private final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.constructTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
*       * @return the message.       */     @Message(id = 15864, value = "Error obtaining input stream from URL %s -- %s")      String errorObtainingUrlStream(String url, String message);      /**
Map<HashComputation, Symbol> hashSymbols = new HashMap<>(source.getHashSymbols());             hashSymbols.keySet().retainAll(result.getOutputSymbols());              return new PlanWithProperties(result, hashSymbols);          }
Assert.assertFalse("expectedIter not exhausted!?", expectedIter.hasNext());    }   @Test(timeout = 10_000L)    public void testDeadLock() throws Exception    {      final URL[] urls = ((URLClassLoader)QueryGranularity.class.getClassLoader()).getURLs();
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glHint (int target, int mode) {
if (a.length != b.length) {     throw new AssertionError("Display modes " + Arrays.toString(a) + " aren't equal to display modes " + Arrays.toString(b));    }   boolean equal = false;    for (int i = 0; i < a.length; i++) {    equal = isDisplayModeEqual(a[i], b[i]);    }    if (!equal) {     throw new AssertionError("Display modes " + Arrays.toString(a) + " aren't equal to display modes " + Arrays.toString(b));
throw new NullPointerException("uncollectedPointCreator must not be null");          }          this.timeWindow = timeWindow;         this.uncollectedPointCreater = uncollectedPointCreator;      }      public Chart<P> build(List<P> sampledPoints) {
final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);          Data data = serializationService.toData(normalResponse);         final Packet packet = new Packet(data, 0, serializationService.getPortableContext());          packet.setHeader(Packet.HEADER_RESPONSE);          packet.setHeader(Packet.HEADER_OP);          executor.execute(packet);
};       private final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (getPath() == null && c.getPath() != null) {              return -1;         } else if (c.getPath() == null) {              return 1;          }          v = getPath().compareTo(c.getPath());
private final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
try {        info = ShellUtils.getUnixMountInfo();      } catch (IOException e) {       LOG.warn("Failed to get mount information: {}", e.getMessage());        return;      }      for (UnixMountInfo mountInfo : info) {
public static interface GoogleCalendarEndpointBuilder              extends                  GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {          default AdvancedGoogleCalendarEndpointBuilder advanced() {
@Path("timeout")          public String getTimeout() {              try {                 Thread.sleep(2000);              } catch (InterruptedException e) {                  e.printStackTrace();              }
private final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShader(shader, pname, params);    }    public String glGetString (int name) {
* Look for function calls that are pure, and annotate them     * that way.     */   private final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    private int getTimeZone() {     return calendar.getTimeZone().getDSTSavings() / 3600000;    }    private boolean isDaylightSavingTime() {
throws IOException          {              generator.writeStartObject();             generator.writeStringField("type", value.getType().getCanonicalName());              generator.writeFieldName("value");              if (value.getValue() == null) {                  generator.writeNull();
};       private final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
command = new RollCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return -1;          }        } else if ("list".equals(args[i])) {          command = new ListCommand();
*       * @return the message.       */     @Message(id = 15862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create("encoding", ModelType.STRING, true).build();     SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create("file", ModelType.OBJECT, true).              setCorrector(FileCorrector.INSTANCE).              setValidator(new FileValidator()).              build();
};       private final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   private final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}       private class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
final GraphiteUDP graphite = argument.getValue();          assertThat(getField(graphite, "hostname")).isEqualTo("localhost");         assertThat(getField(graphite, "port")).isEqualTo(8080);          assertThat(getField(graphite, "address")).isNull();      }
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {         return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +                  user + "/lists.json?cursor=" + cursor, true));      }
{      private final IdentityHashMap<JoinNode, SourceHashProvider> joinHashes = new IdentityHashMap<>();     public SourceHashProvider getSourceHashProvider(JoinNode node, ExecutionPlanner executionPlanner)      {          SourceHashProvider hashProvider = joinHashes.get(node);          if (hashProvider == null) {
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {      checkIsInMultiOrPipeline();      client.zrangeByScoreWithScores(key, min, max);     return getBinaryTupledSet();    }    @Override
SequenceFile.CompressionType compress) throws IOException {        super(conf, new Path(dirName),               comparator(comparator),              keyClass(NullWritable.class),               compressionType(compress));      }
@Override    public Annotation createFromFile(File file) throws IOException {     return createFromFile(file.getAbsoluteFile());    }    @Override
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgram(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
RecipientListProcessor rlp = new RecipientListProcessor(exchange.getContext(), producerCache, iter, getAggregationStrategy(),                                                                  isParallelProcessing(), getExecutorService(), isStreaming(), isStopOnException(), getTimeout()) {              @Override             protected ExecutorService createAggregateExecutorService(String name) {                  if (aggregateExecutorService == null) {                      aggregateExecutorService = super.createAggregateExecutorService("RecipientList-AggregateTask");
/*  * Copyright 2012-2018 the original author or authors.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   private final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Closes all the resources asscoated with the context. Make sure all the resources are released     * back to this context before calling this close. Usually, you don't need to call this.     */   public synchronized void close() {      mFileSystemMasterClientPool.close();      mFileSystemMasterClientPool = null;      mBlockMasterClientPool.close();
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;   /**    * Completely remove the given global property from the database
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnablednHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   private final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       private final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String query = "start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file";          gen.get().addSnippet( "query1", createCypherSnippet( query ) );          String result = engine.execute( query )                 .toString();          assertTrue( result.contains("File1") );          gen.get()                  .addSnippet( "result1", createQueryResultSnippet( result ) );
int size = s.count();    long[] ret = new long[size];    for(int i = 0; i < size && s != null; i++, s = s.rest())    ret[i] = ((Number) s.first()).intValue();    return ret;    }  }
*  * @see java.lang.Object    */  public int hash(T record);   /**    * Sets the given element as the comparison reference for future calls to
@Test   public void BaseCommandTest() {   S_Command scmd = new S_Command("00FE30", 20.0);    String commandStr = scmd.getCommandString();
grantGlobal(TEST_UTIL, toGroupEntry(GROUP_READ), Permission.Action.READ);      grantGlobal(TEST_UTIL, toGroupEntry(GROUP_WRITE), Permission.Action.WRITE);     assertEquals(5, AccessControlLists.getTablePermissions(conf, TEST_TABLE).size());      try {       assertEquals(5, AccessControlClient.getUserPermissions(systemUserConnection,            TEST_TABLE.toString()).size());      } catch (Throwable e) {        LOG.error("error during call of AccessControlClient.getUserPermissions. ", e);
int numTimeslots = (int) this.timeWindow.getWindowRangeCount();          List<P> points = new ArrayList<>(numTimeslots);          for (long timestamp : this.timeWindow) {             points.add(uncollectedPointCreater.createUnCollectedPoint(timestamp));          }          return points;      }
*       * @return the message.       */     @Message(id = 15854, value = "Null stream at index %d")      String nullStream(int index);      /**
public void read(final Kryo kryo, final Input input) {   this.jobID = kryo.readObjectOrNull(input, JobID.class);    this.jobName = input.readString();
}      static long combineToLong(int x, int y) {         return ((long) x << 32) | ((long) y & 0xFFFFFFFL);      }      static int extractInt(long value, boolean lowerBits) {
}          }          if (simple.getFromReceivedDate() != null) {             String s = simple.getFromSentDate();              if (s.startsWith("now")) {                  long offset = extractOffset(s, typeConverter);                  builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));
}   @Configuration  @ConditionalOnEnablednHealthIndicator("diskspace")   public static class DiskSpaceHealthIndicatorConfiguration {    @Bean
*       * @return the message.       */     @Message(id = 15864, value = "Error obtaining input stream from URL %s -- %s")      String errorObtainingUrlStream(String url, String message);      /**
if (TACHYON_STREAMING_READ) {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));            InputStream is = file.getInStream(ReadType.CACHE);            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
} else if (outputFS instanceof DistributedFileSystem) {          loadSpec = ImmutableMap.<String, Object>of(              "type", "hdfs",             "path", indexOutURI.getPath()          );        } else {          throw new ISE("Unknown file system[%s]", outputFS.getClass());
*       * @return the message.       */     @Message(id = 15860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
if (mod.getModuleActivator() != null)       mod.getModuleActivator().willStop();     }    catch (Throwable t) {      log.warn("Unable to call module's Activator.willStop() method", t);     }
* @param lineNo line of class definition.           * @param columnNo column of class definition.           */         public Context(String className, int lineNo, int columnNo) {              this.className = className;              this.lineNo = lineNo;              this.columnNo = columnNo;
configuration = new Configuration();                  configuration.setHostLanguage(Configuration.XQUERY);                  configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE);                 LOG.debug("Created new Configuration {}");              } else {                  LOG.debug("Using existing Configuration {}", configuration);              }
};       private final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   private final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**
if (description == null) {              description = Description.createTestDescription(getTestClass().getJavaClass(),                      testName(method), method.getAnnotations());             fMethodDescriptions.put(method, description);          }          return description;
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
CxfEndpoint endpoint = (CxfEndpoint)camelContext.getEndpoint("cxf:bean:routerEndpoint");         assertTrue(endpoint.getBus().getInInterceptors().size() == 1);          assertEquals(LoggingInInterceptor.class, endpoint.getBus().getInInterceptors().get(0).getClass());      }
};       private final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(SolrServer.class)  @ConditionalOnEnablednHealthIndicator("solr")   public static class SolrHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {
};       private final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
static class ClientCredentialsCondition extends AnyNestedCondition {   public ClientCredentialsCondition() {     super(ConfigurationPhase.PARSE_CONFIGURATION);    }
*       * @return the message.       */     @Message(id = 15843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
}    }   public void unpinFile(int fileId) {      if (INACTIVE) {        return;      }
* @should delete global properties from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;   /**    * Save the given global property to the database. If the global property already exists,
public static interface AdvancedNatsEndpointBuilder              extends                  AdvancedNatsEndpointConsumerBuilder, AdvancedNatsEndpointProducerBuilder {          default NatsEndpointBuilder basic() {
* before growing the backing table. */    public IdentityMap (int initialCapacity, float loadFactor) {     if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);     capacity = MathUtils.nextPowerOfTwo(initialCapacity);     if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
private final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       private final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
}      public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,                    RuntimeOptions runtimeOptions, RuntimeGlue optionalGlue) {          this(resourceLoader, classLoader, backends, runtimeOptions, TimeService.SYSTEM, optionalGlue);      }      public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,                    RuntimeOptions runtimeOptions, TimeService stopWatch, RuntimeGlue optionalGlue) {          if (backends.isEmpty()) {              throw new CucumberException("No backends were found. Please make sure you have a backend module on your CLASSPATH.");          }
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
private static class MockPrincipalWrapper extends HttpServletRequestWrapper {   public MockPrincipalWrapper(HttpServletRequest request) {     super(request);    }
};       private final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15838, value = "Unexplained failure")      String unexplainedFailure();      /**
};       private final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}                   protected int readULong(final int position) throws NtlmEngineException {              return NtlmEngine.readULong(messageContents, position);          }                   protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {              return NtlmEngine.readSecurityBuffer(messageContents, position);          }
"1: " + getCheckMessage(MSG_KEY_MISMATCH),          };         verify(checkConfig, getPath("InputPackageDeclarationDiffDirectoryAtParent.java"), expected);      }      @Test
*       * @return the message.       */     @Message(id = 15854, value = "Null stream at index %d")      String nullStream(int index);      /**
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);   }
public void configure() {                  from("direct:start").beanRef("myBean", "route").to("mock:result");                 from("direct:a").delay(3000).setBody(constant("A"));                  from("direct:b").setBody(constant("B"));
*       * @return the message.       */     @Message(id = 15863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNano(System.nanoTime() - start);          }          return result;      }
private final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public static interface AdvancedSoroushBotEndpointBuilder              extends                  AdvancedSoroushBotEndpointConsumerBuilder, AdvancedSoroushBotEndpointProducerBuilder {          default SoroushBotEndpointBuilder basic() {
};       private final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    };   private final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}              public void unselect(Workspace workspace) {                 if (model.getSelectedLayout() != null) {                      model.saveProperties(model.getSelectedLayout());                  }              }
public void test_cn_1() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年5月6日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid pet value", response = Void.class) })     void deletePet(@PathParam("petId") @ApiParam("Pet id to delete") Long petId,@HeaderParam("api_key")   String apiKey);      @GET      @Path("/findByStatus")
*       * @return the message.       */     @Message(id = 15845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
}                          buf.append('"').append(text).append('"');                      } else {                         text = m_data.getFixString((int) m_length);                          buf.append('"').append(text).append('"');                      }
*/      public ResponseList<DirectMessage> getSentDirectMessages() throws              TwitterException {         return DirectMessage.constructDirectMessages(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0], true));      }
};       private final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertEquals(expectedPlan, actualPlan);   }  }
*       * @return the message.       */     @Message(id = 15850, value = "No handler for operation %s at address %s")      String noHandlerForOperation(String operationName, PathAddress address);      /**
rpcEndpoint.start();    CompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture();     rpcService.stopService();
public static interface BrowseEndpointBuilder              extends                  BrowseEndpointConsumerBuilder, BrowseEndpointProducerBuilder {          default AdvancedBrowseEndpointBuilder advanced() {
ground.createFixture( groundBox, 1 );     groundBox.dispose();    for( int i = 0; i < 20; i++ )     {         boxes.add(createBox( ));     }
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   private final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
, (args = args.rest()).first()        , args.rest());     case 8:     return invoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
return true;    }   private boolean isRegularExpressionFirstChar(char ch) {      return isRegularExpressionChar(ch) && ch != '*';    }   private boolean isRegularExpressionChar(char ch) {      switch (ch) {      case '/':        return false;
*       * @return the message.       */     @Message(id = 15862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
*       * @return the message.       */     @Message(id = 15845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
public static interface SjmsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSjmsEndpointProducerBuilder advanced() {
try {        jarFile = new JarInputStream(new FileInputStream(jarFileName));      } catch (IOException ioEx) {       LOG.error("Failed to look for classes in " + jarFileName + ": " + ioEx);        throw ioEx;      }
public static interface AdvancedEtcdEndpointBuilder              extends                  AdvancedEtcdEndpointConsumerBuilder, AdvancedEtcdEndpointProducerBuilder {          default EtcdEndpointBuilder basic() {
* @param servers the servers that need to restart.       */      @LogMessage(level = Level.INFO)     @Message(id = 15807, value = "Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s")      void domainModelChangedOnReConnect(Set<ServerIdentity> servers);      /**
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15853, value = "Unexpected initial path key %s")      IllegalStateException unexpectedInitialPathKey(String key);      /**
}       private final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
for (final Thread.State state : Thread.State.values()) {              gauges.put(name(state.toString().toLowerCase(), "count"),                        new Gauge<Object>() {                             @Override                            public Object getValue() {                                 return getThreadCount(state);                             }                         });
System.out.println("Error:" + errorType + ", message : " + message);                  }              });             InputStreamReader isReader = new InputStreamReader(fileObject.getInputStream());              Xml10FilterReader filterReader = new Xml10FilterReader(isReader);              XMLStreamReader reader = inputFactory.createXMLStreamReader(filterReader);
public SourceOperator createOperator(DriverContext driverContext)          {              checkState(!closed, "Factory is already closed");             OperatorContext operatorContext = driverContext.addOperatorContext(operatorId, FilterAndProjectOperator.class.getSimpleName());              return new ScanFilterAndProjectOperator(                      operatorContext,                      sourceId,
};       private final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {           mBuf.array()[0] = (byte) (k + mWorkerId);            os.write(mBuf.array());          }          os.close();
};       private final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(RabbitTemplate.class)  @ConditionalOnEnablednHealthIndicator("rabbit")   public static class RabbitHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {
private final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      public DateTime getLastSeen() {         return new DateTime(((Integer) fields.get("last_seen")) * 1000L, DateTimeZone.UTC);      }      @Override
}   @Test (timeout = 5000)    public void testFragmentSpecToTaskSpec() {      ByteBuffer procBb = ByteBuffer.allocate(4);
*       * @return the message.       */     @Message(id = 15843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
}    };   private final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
*/      @Override      public final AtmosphereResource create(AtmosphereConfig config,                                            DefaultAtmosphereRequest request,                                             AtmosphereResponse response,                                             AsyncSupport<?> a) {          AtmosphereResource r = null;
private final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test(expected = DuplicateConceptNameException.class)    @Verifies(value = "should fail if there is a duplicate unretired preferred name in the same locale", method = "validate(Object,Errors)")    public void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {    Context.setLocale(Context.getLocale());     Concept concept = Context.getConceptService().getConcept(5497);     ConceptName preferredName = new ConceptName("preferred name", Context.getLocale());     concept.setPreferredName(preferredName);
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;   /**    * @param aClass class of object getting length for
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameter(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameter(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
public static interface AdvancedXQueryEndpointBuilder              extends                  AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {          default XQueryEndpointBuilder basic() {
}       private final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
return CharStreams.toString(new InputStreamReader(connection.getInputStream()));          });         requestReceived.await();          Future<Void> serverStopped = executor.submit((Callable<Void>) () -> {              server.stop();
if (node.getNodeType() == Node.ELEMENT_NODE) {              Document doc = node.getOwnerDocument();              if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {                 doc.renameNode(node, SPRING_NS, node.getNodeName());              }          }          NodeList list = node.getChildNodes();
*       * @return the message.       */     @Message(id = 15841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
};       private final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
if (entries == null || entries.isEmpty()) {              return Collections.emptyList();          }         final List<Data> keyValueSequence = new ArrayList<Data>();          for (final Map.Entry<Object, Object> entry : entries.entrySet()) {              final Object key = entry.getKey();              final Object value = entry.getValue();
private final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private static Method updateByteBuffer(Checksum checksum) {          try {              Method method = checksum.getClass().getDeclaredMethod("update", ByteBuffer.class);             method.invoke(method, ByteBuffer.allocate(1));              return method;          } catch (Throwable ignore) {              return null;
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
public void testGetRequiredTokens() {          ThrowsCountCheck obj = new ThrowsCountCheck();          int[] expected = {TokenTypes.LITERAL_THROWS};         assertArrayEquals(expected, obj.getAcceptableTokens());      }  }
};       private final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 15837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
@Override            public AggregatorFactory apply(String input)            {             return new CardinalityAggregatorFactory(name, Arrays.asList(input), byRow);            }          }      );
* @see <a href="http:       */      public Trends getCurrentTrends() throws TwitterException {         return Trends.constructTrendsList(get(getSearchBaseURL() + "trends/current.json"                  , false)).get(0);      }
throw new IOException("Address is required!");          }         ClientConnection clientConnection = connections.get(address);          if (clientConnection == null) {             final Object lock = getLock(address);              synchronized (lock) {                 clientConnection = connections.get(address);                  if (clientConnection == null) {                      final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);                      final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);
public static interface AdvancedHazelcastInstanceEndpointBuilder              extends                  EndpointConsumerBuilder {          default HazelcastInstanceEndpointBuilder basic() {
*       * @return the error message       */     @Message(id = 15837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
if (setJoins.add(newMemberInfo)) {                       sendProcessableTo(new Master(node.getMasterAddress()), conn);                      timeToStartJoin = System.currentTimeMillis() + (WAIT_SECONDS_BEFORE_JOIN * 1000L);                   } else {                       if (System.currentTimeMillis() > timeToStartJoin) {                           startJoin();
@ApiOperation(value = "Creates list of users with given input array", notes = "", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUsersWithListInput(@Valid List<User> body);      @DELETE      @Path("/{username}")
if (isStatisticsEnabled()) {              if (result) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNano(System.nanoTime() - start);              }             statistics.addGetTimeNano(System.nanoTime() - start);              if (isHit) {                  statistics.increaseCacheHits(1);              } else {
*/      public ResponseList<Status> getHomeTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json", true));      }
public static interface JSR356WebSocketEndpointBuilder              extends                  JSR356WebSocketEndpointConsumerBuilder, JSR356WebSocketEndpointProducerBuilder {          default AdvancedJSR356WebSocketEndpointBuilder advanced() {
};       private final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(SolrServer.class)  @ConditionalOnEnablednHealthIndicator("solr")   public static class SolrHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {
* @param cause the cause of the error.       */      @LogMessage(level = Level.WARN)     @Message(id = 15806, value = "Caught exception closing input stream")      void caughtExceptionClosingInputStream(@Cause Throwable cause);      /**
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
}   @Test  void userConfigurationBeans() {    this.contextRunner      .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)      .run((context) -> {
private final LineageMaster mLineageMaster = AlluxioMaster.get().getLineageMaster(); private LineageMasterClientRestServiceHandler() {}    /**     * @summary get the service name
}    };   private final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   private final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final JsonFactory jsonFactory = new YAMLFactory();          final ObjectMapper mapper = factory.build(jsonFactory);         assertThat(mapper.getJsonFactory())                  .isSameAs(jsonFactory);      }
ControlFlowGraph<Node> computeCFG() {     logger.info("Computing Control Flow Graph");      Tracer tracer = newTracer("computeCFG");      ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);      process(cfa);
* @see <a href="http:       */      public ResponseList<Status> getMentions(Paging paging) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/mentions.json",                  null, paging.asPostParameterList(), true));      }
}    };   private final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}              }.start();          }         assertOpenEventually(countDownLatch, 50);          assertEquals(0, atomicLong.get());      }
};       private final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedAtomixSetEndpointBuilder              extends                  AdvancedAtomixSetEndpointConsumerBuilder, AdvancedAtomixSetEndpointProducerBuilder {          default AtomixSetEndpointBuilder basic() {
public void test_in() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06-05-2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
@Option(name = "--fix", usage = "Fix lint warnings automatically")    private boolean fix = false;   @Argument private final List<String> files = new ArrayList<>();    public static void main(String[] args) throws IOException, CmdLineException {      new Linter().run(args);
private static ConfigurationBuilder builder;      @BeforeClass     public static void setConfigurationBuilder() throws CheckstyleException {          builder = new IndentationConfigurationBuilder(new File("src/it/"));      }
*       * @return the message.       */     @Message(id = 15845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
}      protected String[] parseUri(DynamicAwareEntry entry) {         String u = entry.getOriginalUri();          boolean httpComponent = "http".equals(scheme) || "https".equals(scheme) || "http4".equals(scheme) || "https4".equals(scheme);
*       * @return the message.       */     @Message(id = 15857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);   }
};       private final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(239);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   private final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @return A {@link Broadcastable} used to broadcast events.       */      @POST     @Broadcast(value = {StringFilterAggregator.class})      @Path("aggregate")      public Broadcastable aggregate(@FormParam("message") String message) {          return broadcast(message);
public static interface OptaPlannerEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedOptaPlannerEndpointProducerBuilder advanced() {
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);   }
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertEquals(expectedPlan, actualPlan);   }   @Test
public void testSamplingFromExchangeStream() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMessageCount(2);          mock.setResultWaitTime(3000);          List<Exchange> sentExchanges = new ArrayList<Exchange>();
eq((byte) 0),                  eq(new GeneralDataCoding(                          false,                         false,                          MessageClass.CLASS1,                          Alphabet.ALPHA_DEFAULT)),                  eq((byte) 0),
};       private final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
public static interface MQEndpointBuilder extends EndpointProducerBuilder {          default AdvancedMQEndpointBuilder advanced() {              return (AdvancedMQEndpointBuilder) this;          }
}          });          MockEndpoint result = MockEndpoint.resolve(ctx, "mock:result");         registry.put("amazonSQSClient", clientMock);          clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, "ClientMock Scheduler", 1));          result.expectedMessageCount(1);
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
@Test      public void testGetStateToBindingValueConverter() {          NumberItem item = new NumberItem(NUMBER_ITEM_NAME);         converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);          StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);          assertEquals(IntegerDecimalConverter.class, converter.get("bla").getClass());      }
}      }     private final class GcMetrics {          final long minorCount;          final long minorTime;          final long majorCount;
};       private final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
clusterMap.delete(buildAttributeName(entry.getKey()));                              iterator.remove();                          } else {                             clusterMap.put(buildAttributeName(entry.getKey()), cacheEntry.value);                              cacheEntry.dirty = false;                          }                      }
};       private final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
int port = p;          if (port == -1) {              final String protocol = uri.getScheme().toLowerCase();             if ("http".equals(protocol)) {                  port = 80;             } else if ("https".equals(protocol)) {                  port = 443;              } else {                  throw new IllegalArgumentException("Unknown protocol: " + protocol);
}    };   private final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, paging.asPostParameterList(), true));      }
};       private final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (LOG.isDebugEnabled()) {          LOG.debug("Current assignment of " +           Bytes.toString(info.getRegionName()) +            " is not valid: serverInfo: " + storedInfo + ", passed startCode: " +            startCode + ", storedInfo.startCode: " +            ((storedInfo != null)? storedInfo.getStartCode(): -1) +
+ (StringUtils.isEmpty(modelPackage) ? "" : (modelPackage + "/")) + dataType;      }      private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {          return "{" + getJSDocType(cm, cp) + "}";      }      private String getJSDocType(CodegenModel cm, CodegenProperty cp) {          if (Boolean.TRUE.equals(cp.isContainer)) {
};       private final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException;   /**    * Gets the global property that has the given <code>propertyName</code>
};       private final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       private final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {         return Trends.constructTrendsList(get(getSearchBaseURL() + "trends/current.json"                  + (excludeHashTags ? "?exclude=hashtags" : ""), false)).get(0);      }
};       private final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test   public void startServletAndFilter() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();   this.container = factory.getEmbdeddedServletContainer(      exampleServletRegistration(), new FilterRegistrationBean(        new ExampleFilter())); assertThat(getResponse("http:
@Test      public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {         long callTimeoutMs = 5000;          Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeoutMs);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);          HazelcastInstance local = factory.newHazelcastInstance(config);
numKeys++;          } while (numKeys < batchSize); if (numKeys > 1) {            readKey(keysForThisReader);            numUniqueKeysVerified.getAndAdd(readingRandomKeyStartIndex == -1 ?
int i = start;      for (; i < end; i++)       if (glyphPositions[i] > x) break;     if (glyphPositions[i] - x <= x - glyphPositions[i - 1]) return i;      return Math.max(0, i - 1);     }    } else {
};       private final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
Set<E> edgesConnecting(N node);       N oppositeNode(Object edge);    /**     * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.
private final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}               if (bulb > 5) {                   sendOn(bulb, bridgeId);                  Thread.sleep(50);                   String messageBytes = "40:" + Integer.toHexString(milightColorNo) + ":55";                   sendMessage(messageBytes, bridgeId);               }
@Resource      private ConnectionFactory defaultConnectionFactory;     @Resource(name = "java:/ConnectionFactory")      private ConnectionFactory regularConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {
*       * @return the message.       */     @Message(id = 15842, value = "Invalid rollout plan. %s is not a valid child of node %s")      String invalidRolloutPlan(ModelNode modelNode, String nodeName);      /**
@Override       public byte[] decodeMessage() {          byte[] data = new byte[10];           data[0] = 0x0B;           data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();
log.debug("Current thread: " + Thread.currentThread());      log.debug("Creating the encounter object");     }    Context.getEncounterService().createEncounter(encounter);
}          if (timeoutCheckerExecutorService != null) {             camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService);          }          ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);
new ExponentialBackoffRetry(1000, 3));          client.start();         testConsumerConfig();
if (isStatisticsEnabled()) {              if (result) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNano(System.nanoTime() - start);              }             statistics.addGetTimeNano(System.nanoTime() - start);              if (isHit) {                  statistics.increaseCacheHits(1);              } else {
{      a[i] = s.first();      }    if(a.length >= count())      a[count()] = null;     return a;     }
long size = 0;        for (Cell c : results) {         size += CellUtil.estimatedHeapSizeOf(c);        }        return size;
if (!currentConfigHash.equals(cachedConfigHash)) {                      details.clear();                     details.put(CONFIG_HASH_KEY, currentConfigHash);                  }              }              finally {
private final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 15837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
* @param timestamp the timestamp of the file       */      void put(String fileName, long timestamp) {         details.put(fileName, Long.toString(timestamp));      }      /**
@Override      public String toString() {         return END + " End Message Interceptor";      }  }
}      private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getAttributeMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);      }      private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);      }  }
}    @Override   public List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {     return Collections.singletonList(saveRecordCnt);    }    @Override   public void restoreState(List<Integer> state) throws Exception {     for (Integer i : state) {      saveRecordCnt += i;     }
};       private final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return a message for the error.       */     @Message(id = 15832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
for (int i = 0; i < noOfTasks; i++) {     for (int j = 0; j < 2 + i; j++) {     final String part = new Path(bucketPath, "test-" + i + '-' + j).toString();      Assert.assertTrue(paths.contains(part));      paths.remove(part);     }
}       private final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
assertEquals(encoded, encoding.encode(bytes));    }   private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
}     }    if (!((min1 < min2 && max1 > min2) || (min2 < min1 && max2 > min1))) {      return false;     } else {      float o = Math.min(max1, max2) - Math.max(min1, min2);
public static interface ClientEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedClientEndpointProducerBuilder advanced() {
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, paging.asPostParameterList(), true));      }
@Override      protected void wakeup(boolean inEventLoop) {         if (wakenUp.compareAndSet(false, true)) {              selector.wakeup();          }      }
}       private final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));              final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();              if (setop != null) {                 logger.debug("    " + op.getJavaName() + "\n                " + op.getIDLName());                  final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);                 beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(realSetmethod));              }          }
}      @Override     public void resetSelection() {          resetNodesSelection();          resetEdgesSelection();
public static interface AdvancedKafkaEndpointBuilder              extends                  AdvancedKafkaEndpointConsumerBuilder, AdvancedKafkaEndpointProducerBuilder {          default KafkaEndpointBuilder basic() {
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, paging.asPostParameterList(), true));      }
if ( locals!=null ) {     r.locals = ScopeParser.parseTypedArgList(locals, locals.getText(), g.tool.errMgr);     r.locals.type = AttributeDict.DictType.LOCAL;    r.locals.ast = returns;    }    for (GrammarAST a : actions) {
this.functionManager = functionManager;          Optional<Duration> totalCpuTime = stats.map(s -> new Duration(s.values().stream()                 .mapToLong(planNode -> planNode.getPlanNodeScheduledTime().toMillis())                  .sum(), MILLISECONDS));          Optional<Duration> totalScheduledTime = stats.map(s -> new Duration(s.values().stream()                 .mapToLong(planNode -> planNode.getPlanNodeCpuTime().toMillis())                  .sum(), MILLISECONDS));          this.representation = new PlanRepresentation(planRoot, types, totalCpuTime, totalScheduledTime);
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
template.sendBodyAndHeader("file:          MockEndpoint mock = getMockEndpoint("mock:result4");         mock.expectedBodiesReceived("Hello World 3");          assertMockEndpointsSatisfied();          oneExchangeDone.matchesMockWaitTime();
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid user supplied", response = Void.class),          @ApiResponse(code = 404, message = "User not found", response = Void.class) })     void updateUser(@PathParam("username") @ApiParam("name that need to be deleted") String username,@Valid User body);  }
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {            mBuf.putInt(0, k + mWorkerId);
public static interface AdvancedEC2EndpointBuilder              extends                  EndpointProducerBuilder {          default EC2EndpointBuilder basic() {
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {    if (this instanceof SingleOutputStreamOperator) {     ((SingleOutputStreamOperator<?, ?>) this).setMutability(false);    }
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   private final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameter(target, pname, params);    }    public int glGetError () {
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glHint (int target, int mode) {
HostAndPort host = HostAndPort.fromString(server);          try {             return new URI("http", null, host.getHostText(), host.getPortOrDefault(80), null, null, null);          }          catch (URISyntaxException e) {              throw new IllegalArgumentException(e);
public static interface AdvancedBeanEndpointBuilder              extends                  EndpointProducerBuilder {          default BeanEndpointBuilder basic() {
};       private final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
obj.setBucketName(mBucketName);        obj.setDataInputFile(mFile);        obj.setContentLength(mFile.length());       obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);        if (mHash != null) {          obj.setMd5Hash(mHash.digest());        } else {
};       private final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {         return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +                  user + "/lists/subscriptions.json?cursor=" + cursor, true));      }
detach();              ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy();             Flux<Exchange> flux = Flux.create(camelSink::set);              if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {
};       private final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void pickAddress() throws Exception {          try {              bindAddress = memberAddressProvider.getBindAddress();             logger.info("Using bind address: " + publicAddress);              publicAddress = memberAddressProvider.getPublicAddress();              validatePublicAddress(publicAddress);
assertEquals("sample-tag-key", aws.getTagKey());          assertEquals("sample-tag-value", aws.getTagValue());         assertFalse("reuse-address", networkConfig.isReuseAddress());      }
};       private final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}));      }     protected <T> Function<String, Optional<T>> createRemoteInterfaceProvider(Class<T> interfaceClass) {          return (nodeId) -> {              try {                  final Node targetNode = nodeService.byNodeId(nodeId);
public static interface DisruptorVmEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedDisruptorVmEndpointProducerBuilder advanced() {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();          for (Expression expression : expressions) {             Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getType(expression));              projections.put(symbol, translations.rewrite(expression));              newTranslations.put(symbol, expression);
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    final String uri = req.getPathInfo();    if (uri == null || uri.equals("/")) {    handleHome(resp);    } else if (uri.startsWith(metricsUri)) {     handleMetrics(req.getParameter("class"), Boolean.parseBoolean(req.getParameter("full-samples")), resp);    } else if (uri.equals(pingUri)) {
HttpRequest req = (HttpRequest) ch.readInbound();          DecoderResult dr = req.getDecoderResult();          assertFalse(dr.isSuccess());         assertFalse(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
*/      public void setMemberModifiers(String modifiers)      {         final List<Integer> modifiersList = new ArrayList<>(modifiers.length());          for (String modifier : modifiers.split(", ")) {             modifiersList.add(TokenTypes.getTokenId(modifier));          }          this.memberModifiers = modifiersList;      }
fakePool.runAll();     assertThat(Thread.currentThread().isInterrupted()).isTrue();    }    public void testInterrupt_doesNotStopExecution() {
@Test      public void testOperationTimeoutForLongRunningRemoteOperation() throws Exception {         int callTimeoutMillis = 1000;          Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeoutMillis);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.constructStatuses(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
};       private final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort);    env.enableCheckpointing(500);    env.setParallelism(parallelism);   env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);
*     * @return True, if the comparator supports that specific form of serialization, false if not.    */  public boolean supportsSerializationWithKeyNormalization();   /**    * Gets the number of bytes that the normalized key would maximally take. A value of
private final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface GitEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedGitEndpointProducerBuilder advanced() {
public void testBasicExtractionWithCutStrategyCanOverwriteSameField() throws Exception {          Message msg = new Message("The short message", "TestUnit", Tools.getUTCTimestampWithMilliseconds());         SplitAndIndexExtractor x = new SplitAndIndexExtractor("foo", "foo", Extractor.CursorStrategy.CUT, "message", "message", config(" ", 0), "foo", noConverters(), Extractor.ConditionType.NONE, null);          x.runExtractor(new GraylogServerStub(), msg);         assertEquals("short message", msg.getField("message"));      }      @Test      public void testBasicExtractionWithCutStrategyAtEndOfString() throws Exception {
final PreparedErrorHandler key = new PreparedErrorHandler(routeContext, processor);              answer = errorHandlers.get(key);
};       private final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(200);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
private List<ScheduledJob> scheduledJobs = new LinkedList<ScheduledJob>();     public void scheduleAtFixedRate( Runnable job, String jobName, long period )      {         ScheduledJob scheduledJob = new ScheduledJob( job, jobName, period );          scheduledJobs.add( scheduledJob );      }
};       private final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
}    }   public void unpinFile(int fileId) {      if (INACTIVE) {        return;      }
static SecurityContext NONE = new SecurityContext() {    @Override    public Principal getPrincipal() {
};       private final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttrib(index, pname, params);    }    public void glHint (int target, int mode) {
private IntBuffer toIntBuffer (int v[], int offset, int count) {     ensureBufferCapacity(count << 2);    floatBuffer.clear();     com.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);     return intBuffer;    }
};       private final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),          @ApiResponse(code = 404, message = "User not found", response = Void.class) })     void deleteUser(@PathParam("username") @ApiParam("The name that needs to be deleted") String username);      @GET      @Path("/{username}")
ticker.advance(4000000);      stopwatch.stop();      ticker.advance(9000000);     assertEquals(4, stopwatch.elapsedMillis());    }    public void testElapsedMillis_multipleSegments() {
public void setUnitOfWork(UnitOfWork unitOfWork) {          this.unitOfWork = unitOfWork;         if (onCompletions != null) {              for (Synchronization onCompletion : onCompletions) {
};       private final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      @Override     protected Processor chooseProcessor(List<Processor> processors, Exchange exchange) {          if (isRuntimeRatiosZeroed())  {              resetRuntimeRatios();              counter = 0;
private final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
public static interface GrpcEndpointBuilder              extends                  GrpcEndpointConsumerBuilder, GrpcEndpointProducerBuilder {          default AdvancedGrpcEndpointBuilder advanced() {
checkConfig.addAttribute("allowThrowsTagsForSubclasses", "true");          checkConfig.addAttribute("allowUndeclaredRTE", "true");          final String[] expected = {};         verify(checkConfig, getSrcPath("checks/javadoc/Input_03.java"), expected);      }      @Test
checks.add(dartSuperAccessorsPass);      }     if (options.needsTranspilationFrom(ES7)) {        TranspilationPasses.addEs2017Passes(checks);        checks.add(setFeatureSet(ES7));      }     if (options.needsTranspilationFrom(ES6) && !options.skipTranspilationAndCrash) {        checks.add(es6ExternsCheck);        TranspilationPasses.addEs6EarlyPasses(checks);      }
System.setProperty("tachyon.worker.selector.threads", Integer.toString(1));      System.setProperty("tachyon.worker.server.threads", Integer.toString(2));      System.setProperty("tachyon.worker.network.netty.worker.threads", Integer.toString(2));     System.setProperty("tachyon.master.web.threads", Integer.toString(1));      CommonConf.clear();      MasterConf.clear();
*       * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
}                   protected int getMessageLength() {              return currentOutputPosition;          }
@Test   public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(741);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
};       private final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.constructDirectMessages(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
ColumnPaginationFilter other = (ColumnPaginationFilter)o;      if (this.columnOffset != null) {       return this.getLimit() == this.getLimit() &&            Bytes.equals(this.getColumnOffset(), other.getColumnOffset());      }      return this.getLimit() == other.getLimit() && this.getOffset() == other.getOffset();
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;   /**    * Completely remove the given global property from the database
LABEL_TOKEN( false ),      LABEL_TOKEN_NAME( false ),      NEOSTORE_BLOCK( false ),     SCHEMA( 35, true ),      NODE_LABELS( 35, true );      private final long max;
cacheEntry.value = value;                          cacheEntry.reload = false;                      }                     localCache.put(name, NULL_ENTRY);                  }                  return cacheEntry != NULL_ENTRY ? cacheEntry.value : null;              }
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   private final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedGitEndpointBuilder              extends                  AdvancedGitEndpointConsumerBuilder, AdvancedGitEndpointProducerBuilder {          default GitEndpointBuilder basic() {
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   private final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertEquals(encoded, encoding.encode(bytes));    }   private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
};       private final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (queueLength.isDefined() && queueLength.asInt() == 0) {                  if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {                     throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());                  }              }
};       private final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       private final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @return BlockFace attached to       */      public BlockFace getAttachedFace() {         byte data = (byte) (getData() ^ 0x8);          switch (data) {              case 0x1:
@RestController  public class StencilsetRestResource {   @RequestMapping(value="/editor/stencilset", method = RequestMethod.GET, produces = "application/json")    public @ResponseBody String getStencilset() {      InputStream stencilsetStream = this.getClass().getClassLoader().getResourceAsStream("stencilset.json");      try {       return IOUtils.toString(stencilsetStream);      } catch (Exception e) {        throw new ActivitiException("Error while loading stencil set", e);      }
public static interface AdvancedHdfsEndpointBuilder              extends                  AdvancedHdfsEndpointConsumerBuilder, AdvancedHdfsEndpointProducerBuilder {          default HdfsEndpointBuilder basic() {
*  Does class have non-private ctors.           *  @return true if class has non-private ctors           */         boolean isWithNonPrivateCtor() {              return withNonPrivateCtor;          }
};       private final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_cn() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016-05-06\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
}      else {      log.debug("PID contains identifier with no assigning authority");       continue;      }     }
* @see <a href="http:      */      public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {         return DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages.json", true));      }      /**
* @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the    *                     input view, which may have an underlying I/O channel from which it reads.    */  public void deserialize(T target, DataInputView source) throws IOException;   /**    * Copies exactly one record from the source input view to the target output view. Whether this operation
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.constructSavedSearches(get(getBaseURL() + "saved_searches.json", true));      }      /**
public class CompleteUfsFileOptionsTest {
}       private final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Look for function calls that are pure, and annotate them     * that way.     */   private final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);                  } else if ("javax.ws.rs.DefaultValue".equals(item.annotationType().getName())) {                      try {                         rsDefault = (String) item.getClass().getMethod("value").invoke(item);                      } catch (Exception ex) {                          LOGGER.error("Invocation of value method failed", ex);                      }
ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);
}   @Configuration  @ConditionalOnEnablednHealthIndicator("diskspace")   public static class DiskSpaceHealthIndicatorConfiguration {    @Bean
public static interface BoxEndpointBuilder              extends                  BoxEndpointConsumerBuilder, BoxEndpointProducerBuilder {          default AdvancedBoxEndpointBuilder advanced() {
Usage.Position | Usage.Normal);    models.add(sphereModel);   Bullet.init();    collisionConfiguration = new btDefaultCollisionConfiguration();    dispatcher = new btCollisionDispatcher(collisionConfiguration);
Map<String, Object> options = new HashMap<String, Object>();                  IntrospectionSupport.getProperties(msg, options, null);                 IntrospectionSupport.setProperties(jpa, options);                 IntrospectionSupport.setProperty(jpa, "timestamp", msg.getTimestamp());                  event.getIn().setBody(jpa);              } else {
static final DiagnosticType REPORT_PATH_IO_ERROR =        DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR",           "Error writing compiler report to {0}");    /**     * All the aliases in a program form a graph, where each global name is
};       private final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /**
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(639);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
*/      public ResponseList<Status> getHomeTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json", true));      }
public static interface AdvancedTwitterStreamingEndpointBuilder              extends                  EndpointConsumerBuilder {          default TwitterStreamingEndpointBuilder basic() {
};       private final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface GoraEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedGoraEndpointProducerBuilder advanced() {
if (isStatisticsEnabled()) {              if (result) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNano(System.nanoTime() - start);              }             statistics.addGetTimeNano(System.nanoTime() - start);              if (isHit) {                  statistics.increaseCacheHits(1);              } else {
}   public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {   GL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);   }   public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {   GL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);   }   public void glCullFace (int mode) {
return Subject.doAs(subject, action);      } catch (PrivilegedActionException pae) {        Throwable cause = pae.getCause();       LOG.error("PriviledgedActionException as:"+this+" cause:"+cause);        if (cause instanceof IOException) {          throw (IOException) cause;        } else if (cause instanceof Error) {
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameter(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
return entry;          default:           throw new IllegalStateException(                "Unexpected number of values for entry:" + entryValues);        }      }
*       * @return the error message       */     @Message(id = 15835, value = IN_SERIES + " is missing groups: %s")      String inSeriesIsMissingGroups(String rolloutPlan);      /**
.aggregator().header("id")                      .batchTimeout(2000L)                       .batchSize(100)
*       * @return the message.       */     @Message(id = 15858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
}          }          if (isStatisticsEnabled()) {             statistics.addGetTimeNano(System.nanoTime() - start);          }          CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);          final Object process = entryProcessor.process(entry, arguments);
private final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}                      }                     connectionManager.markOwnerAddressAsClosed();                      IOUtil.closeResource(conn);                      conn = null;                      fireConnectionEvent(true);
private int port = Integer.valueOf(System.getProperty("port"));   @Test  public void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
processEngineConfiguration.setClock(testClock);     testClock.setCurrentTime(new Date(0));      runtimeService.startProcessInstanceByKey("testTimerCancelledEvent");      listener.clearEventsReceived();
File out = new File("target/out/hello.txt").getAbsoluteFile();          assertTrue("file should exists", out.exists());         assertEquals("Hello World", IOConverter.toString(out));      }      protected RouteBuilder createRouteBuilder() throws Exception {
*       * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
HostAndPort host = HostAndPort.fromString(server);          try {             return new URI("http", null, host.getHostText(), host.getPortOrDefault(80), null, null, null);          }          catch (URISyntaxException e) {              throw new IllegalArgumentException(e);
}   }  public static NameSupport getInstance() {    if (singleton == null) {     throw new RuntimeException("Not Yet Instantiated");    } else {
*       * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**
};       private final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void process(Exchange exchange) throws Exception {                              Random ran = new Random();                             int delay = ran.nextInt(500) + 10;                              Thread.sleep(delay);                          }                      }).to("mock:result");
void delta() {}          void epsilon() {}      }     private static class Super {          void testOne() {}      }     private static class Sub extends Super {          void testTwo() {}      }
handshaking = false;              handshaken = false;             if (handshakeFuture != null) {                  handshakeFuture = newHandshakeFuture(channel);              }          }
public static void format(Configuration conf) throws IOException {     format(conf, false);    }    static NameNodeMetrics metrics;
}    };   private final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
ConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);     assumedDuplicateName.setName(duplicateName.getName());     newConcept.addName(assumedDuplicateName);    Errors errors = new BindException(concept, "concept");     new ConceptValidator().validate(newConcept, errors);     Assert.assertEquals(false, errors.hasErrors());    }
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().terminate();              }          };
attr.addOperationParameterDescription(resources, "infinispan.container", op);          }         ALIAS.addOperationParameterDescription(resources, "infinispan.container", op).                  get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);          return op;      }
public void configure() throws Exception {                  from("direct:start")                          .multicast(new MyAggregationStrategy())                         .parallelProcessing().timeout(2000).to("direct:a", "direct:b", "direct:c")                          .end()                          .to("mock:result");                 from("direct:a").delay(3000).setBody(constant("A"));                  from("direct:b").setBody(constant("B"));
}       public final Iterable<ObjectType> getOwnImplementedInterfaces() {      return implementedInterfaces;    }
String trace = traceInText.get(i);                  String[] tokens = trace.split(",");                 stackTrace[i] = new StackTraceElement(tokens[0], tokens[1], tokens[2], Integer.valueOf(tokens[3]));              }              return new ChildProcessException(exceptionClass + ": " + message, stackTrace);
};       private final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   public void glPolygonOffset (float factor, float units) {   GL.glPolygonOffsetEXT(factor, units);   }   public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
};       private final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
public static interface SpringLdapEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedSpringLdapEndpointBuilder advanced() {
public static final FunctionType TOP_FUNCTION = new FunctionType(        null, null, null, null, null, null, null, null, false);   public static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(        null, null, null, null, null, null, null, null, true);
*       * @return the message.       */     @Message(id = 15851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
}    };   private final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface GangliaEndpointBuilder             extends                 EndpointProducerBuilder {          default AdvancedGangliaEndpointBuilder advanced() {              return (AdvancedGangliaEndpointBuilder) this;          }
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), is("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
.addFlag(Flag.RESTART_ALL_SERVICES)              .setAllowExpression(true)              .setCorrector(MapAttributeDefinition.LIST_TO_MAP_CORRECTOR)             .setValidator(new StringLengthValidator(1))              .build();      public static AttributeDefinition[] ALL_ATTRIBUTES = new AttributeDefinition[]{CODE, VAULT_OPTIONS};
* {@inheritDoc}       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : "")));      }
public static SecurityContext NONE = new SecurityContext() {    @Override    public Principal getPrincipal() {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   private final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
grammarBuilder.append("\n");    grammarBuilder.append("func (*LeafListener) ExitA(ctx *AContext) {\n");    grammarBuilder.append(" if ctx.GetChildCount() == 2 {\n");   grammarBuilder.append("  fmt.Printf(\"%s %s %s\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), ctx.AllINT())\n");    grammarBuilder.append(" } else {\n");    grammarBuilder.append("  fmt.Println(ctx.ID().GetSymbol())\n");    grammarBuilder.append(" }\n");
};       private final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   private final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface IrcEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIrcEndpointProducerBuilder advanced() {
public static interface VertxEndpointBuilder              extends                  VertxEndpointConsumerBuilder, VertxEndpointProducerBuilder {          default AdvancedVertxEndpointBuilder advanced() {
}    @Test public void eolComment() throws IOException {     javaWriter.emitSingleLineCOmment("foo"); assertCode("    }
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), is("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is(nullValue()));          assertThat(args.isGenerateBuilders(), is(false));
GroovyShellFactory groovyShellFactory = mock(GroovyShellFactory.class);          given(groovyShellFactory.createGroovyShell(any(Exchange.class))).willReturn(new GroovyShell());          SimpleRegistry registry = new SimpleRegistry();         registry.put("groovyShellFactory", groovyShellFactory);          CamelContext camelContext = new DefaultCamelContext(registry);
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 15872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
boolean generic() default false;     boolean injvm() default false;      boolean check() default true;
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
MockEndpoint bar = getMockEndpoint("mock:bar");          bar.expectedMinimumMessageCount(1);         bar.setResultWaitTime(3000);          template.sendBody("seda:foo", "A");          template.sendBody("seda:foo", "B");
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   private final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface RestletEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedRestletEndpointProducerBuilder advanced() {
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);   }
