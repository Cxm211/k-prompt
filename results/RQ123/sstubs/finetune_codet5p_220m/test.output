};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface AdvancedIgniteEventsEndpointBuilder              extends                  EndpointConsumerBuilder {          default IgniteEventsEndpointBuilder basic() {
private boolean mKNXConnectionEstablished;   public void activate(ComponentContext componentContext) {   logger.debug("Calimero library version {}", Settings.getLibraryVersion());    logger.trace("KNXBinding: activating");    KNXConnection.addConnectionListener(this);    mKNXBusReaderScheduler.start();
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));          } catch (IOException ioe) {            LOG.warn("Failed to get TachyonStore stream, the block " + currentBlockId               + " will not be in TachyonStorage");            mShouldCacheCurrentBlock = false;          }        }
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
appendToBody.ret();      }     private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)      {          Parameter blockIndex = arg("blockIndex", int.class);          Parameter blockPosition = arg("blockPosition", int.class);
future.cancel(true);                          throw ExceptionUtil.rethrow(e, IOException.class);                      }                     ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);                      if (current != null) {                          clientConnection.close();                          clientConnection = current;
@Configuration   @ConditionalOnBean(JavaMailSenderImpl.class)  @ConditionalOnEnabledHealthIndicator("mail")   public static class MailHealthIndicatorConfiguration     extends     CompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {      Gdx.app.debug("IOSPreferences", "Failed to write NSDictionary to file " + file);     }    pool.drain();    }   }
assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(chosenNode), 0);      }     private static class TestSplitLocal              implements ConnectorSplit      {          @Override
* Created by russellb337 on 7/9/15.   */  public interface Response {     Response schema(Property property);     Response description(String description);     Response example(String type, Object example);     Response header(String name, Property property);     Response headers(Map<String, Property> headers);      String getDescription();
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, true));      }
traverseBranch(root, scopeRoot);        popScope();     } catch (Error | Exception unexpectedException) {        throwUnexpectedException(unexpectedException);      }    }
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
InterruptedException {    Invocation cli = this.cli.invoke("hint");    assertThat(cli.await(), equalTo(0));   assertThat(cli.getErrorOutput().length(), equalTo(1));    assertThat(cli.getStandardOutputLines().size(), equalTo(10));   }
public interface SqlEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSqlEndpointProducerBuilder advanced() {
@Override      public final AtmosphereResource create(AtmosphereConfig config,                                             Broadcaster broadcaster,                                            AtmosphereRequest request,                                             AtmosphereResponse response,                                             AsyncSupport<?> a,                                             AtmosphereHandler handler) {
if (!headerContainsToken(req, "sec-websocket-version", "13")) {                  logger.debug("WebSocket version not supported. Downgrading to Comet");                 res.sendError(403, "Websocket protocol not supported");                  return new AtmosphereFramework.Action(AtmosphereFramework.Action.TYPE.CANCELLED);              }
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /**
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
public interface XmppEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedXmppEndpointProducerBuilder advanced() {
DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, "org.jboss.as.host.controller");      @LogMessage(level = Level.WARN)     @Message(id = 10800, value = "Ignoring 'include' child of 'socket-binding-group' %s")      void warnIgnoringSocketBindingGroupInclude(Location location);      @LogMessage(level = Level.WARN)     @Message(id = 10801, value = "Ignoring 'include' child of 'profile' %s")      void warnIgnoringProfileInclude(
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
obj = null;                  replaced = false;                  if (isEventsEnabled()) {                     publishEvent(createCacheCompleteEvent(toEventData(key), completionId));                  }              } else {                  replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedDropboxEndpointBuilder              extends                  AdvancedDropboxEndpointConsumerBuilder, AdvancedDropboxEndpointProducerBuilder {          default DropboxEndpointBuilder basic() {
public interface QuickfixjEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedQuickfixjEndpointProducerBuilder advanced() {
public interface KubernetesServiceAccountsEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesServiceAccountsEndpointBuilder advanced() {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables();   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc
beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));              final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();              if (setop != null) {                 logger.debug("    " + setop.getJavaName() + "\n                " + setop.getIDLName());                  final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);                 beanMethodMap.put(setop.getIDLName(), new SkeletonStrategy(realSetmethod));              }          }
this.pool = pool;          this.ping = onDemand(Ping.class);          setSQLLog(new Log4JLog(LOGGER, Level.TRACE));         setTimingCollector(new InstrumentedTimingCollector(Metrics.defaultRegistry(), Database.class));          setStatementRewriter(new NamePrependingStatementRewriter());          setStatementLocator(new ScopedStatementLocator());          registerArgumentFactory(new OptionalArgumentFactory());
HazelcastInstance server1;      @Before     public void setUp() {          NearCacheConfig nearCacheConfig = newNearCacheConfig();          nearCacheConfig.setInvalidateOnChange(true);
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
}      );     log.debug("Performing lookup: %s --> %s", nodeIds, retVal);      return retVal;    }
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json", true));      }      /**
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple));    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().shutdown();              }          };
initialPermits += rand;              assertEquals(initialPermits, semaphore.availablePermits());             instances[i].shutdown();              semaphore.acquire(rand);              initialPermits -= rand;
}      public Map<String, String> getInputTypes() throws IOException, APIException {         return api.path(routes.InputTypesResource().types(), InputTypesResponse.class).node(this).execute().types;      }      public InputTypeSummaryResponse getInputTypeInformation(String type) throws IOException, APIException {         return api.path(routes.InputTypesResource().info(type), InputTypeSummaryResponse.class).node(this).execute();      }      public Map<String, InputTypeSummaryResponse> getAllInputTypeInformation() throws IOException, APIException {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
throws IOException, ServletException {          if (!req.isAsyncStarted()) {             AsyncContext asyncContext = req.startAsync(req, res);              asyncContext.addListener(new CometListener(this));              if (action.timeout() != -1) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10848, value = "Exception getting result from host %s: %s")      String exceptionAwaitingResultFromHost(String name, String message);      /**
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
public String KBP_DOCS_DIR = "/scr/nlp/data/kbp-benchmark    public String GOLD_RELATIONS_PATH = "/scr/nlp/data/kbp-benchmark/kbp-gold-relations.txt";   public double KBP_MINIMUM_SCORE = 45.30;    private String convertRelationName(String relationName) {      /*if (relationName.equals("org:top_members/employees")) {
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
public interface Sjms2EndpointBuilder              extends                  Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {          default AdvancedSjms2EndpointBuilder advanced() {
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedHazelcastSetEndpointBuilder              extends                  AdvancedHazelcastSetEndpointConsumerBuilder, AdvancedHazelcastSetEndpointProducerBuilder {          default HazelcastSetEndpointBuilder basic() {
* Tests getting and setting fields.     */    @Test   public void fields() throws Exception {      Random random = new Random();      boolean isPrimary = random.nextBoolean();      long sequenceNumber = random.nextLong();
};       final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@JsonProperty("maxPriority") Integer maxPriority    )    {     this.minPriority = minPriority == null ? 1 : minPriority;      this.maxPriority = maxPriority == null ? 1 : maxPriority;    }
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.trace("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);
this.base = base.getAbsoluteFile();      }     public static void recursiveDelete( File file )      {          File[] files = file.listFiles();          if ( files != null ) for ( File each : files )
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    final String uri = req.getPathInfo();   if (uri.equals("/") || uri.equals("/*")) {     handleHome(resp);    } else if (uri.startsWith(metricsUri)) {     handleMetrics(req.getParameter("class"), Boolean.parseBoolean(req.getParameter("full-samples")), resp);
DBObject modify = new BasicDBObject("$pull", new BasicDBObject(StreamImpl.FIELD_OUTPUTS, outputId));          collection(StreamImpl.class).update(                 match,                 modify          );      }  }
final PaginatedList<TestDTO> page1reverse = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.desc("title"), 1, 2);          assertThat(page1reverse.pagination().getCount()).isEqualTo(2);         assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(5);          assertThat(page1reverse.delegate())                  .extracting("title")                  .containsExactly("hello6", "hello5");
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
.addAsResource("META-INF/persistence.xml")              .addAsResource("META-INF/load.sql")              .addAsWebInfResource(                 new StringAsset(beansXml.getOrCreateAlternatives()                      .clazz(MovieBeanAlternative.class.getName()).up().exportAsString()),                  beansXml.getDescriptorName());          System.out.println(war.toString(true));
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
ExecDriverTaskHandle th = (ExecDriverTaskHandle)t;      RunningJob rj = th.getRunningJob();      this.mapProgress = Math.round(rj.mapProgress() * 100);     this.reduceProgress = Math.round(rj.reduceProgress() * 100);      taskCounters.put("CNTR_NAME_" + getId() + "_MAP_PROGRESS", Long.valueOf(this.mapProgress));      taskCounters.put("CNTR_NAME_" + getId() + "_REDUCE_PROGRESS", Long.valueOf(this.reduceProgress));
*/      public ResponseList<Status> getFriendsTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",null, paging.asPostParameterList(), true));      }      /**
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface CaffeineLoadCacheEndpointBuilder              extends                  CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {          default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {
public static void createFiles() throws IOException {      long startTimeMs = CommonUtils.getCurrentMs();     for (int k = 0; k < FILES; k++) {        int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));        CommonUtils.printTimeTakenMs(startTimeMs, LOG, "user_createFiles with fileId " + fileId);      }
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      @Override     public synchronized void updateLOD() {          Iterator<NodeModel> iterator = octree.getNodeIterator();          for (; iterator.hasNext();) {              NodeModel obj = iterator.next();
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (id != null) {              builder.getAdviceWithTasks().add(AdviceWithTasks.removeById(route, id, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          } else if (toString != null) {             builder.getAdviceWithTasks().add(AdviceWithTasks.removeByToString(route, toString, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          } else if (type != null) {              builder.getAdviceWithTasks().add(AdviceWithTasks.removeByType(route, type
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10871, value = "Unknown server %s")      IllegalStateException unknownServer(ServerIdentity server);      /**
public static final int MAXIMUM_BLOCK_COUNT = 1 << 20;
public static final Color DEFAULT_NODE_SELECTED_UNIQUE_COLOR = new Color(0.8f, 0.2f, 0.2f);      public static final Color DEFAULT_NODE_NEIGHBOR_SELECTED_UNIQUE_COLOR = new Color(0.2f, 1f, 0.3f);      public static final int DEFAULT_OCTREE_DEPTH = 5;     public static final int DEFAULT_OCTREE_WIDTH = 100;      public static final boolean DEFAULT_CLEAN_DELETED_MODELS = true;      public static final boolean DEFAULT_LABEL_
class ApacheHttpClientRequest implements Runnable {      private final HttpUrl url;     ApacheHttpClientRequest(HttpUrl url) {        this.url = url;      }
protected void handleMultiMapTryLock(String[] args) {          String key = args[1];         long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;          boolean locked;          if (time == 0) {              locked = getMultiMap().tryLock(key);
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
from("direct:a").setBody(constant("A"));                 from("direct:b").delay(2000).setBody(constant("B"));                  from("direct:c").delay(500).setBody(constant("C"));              }
}      private static String getNodeText(Node node, boolean fixLinks) {         final StringBuilder result = new StringBuilder(20);          for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {              if (child.getNodeType() == Node.TEXT_NODE) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
class SucceededFuture<T> implements Future<T> {    private final T result;   SucceededFuture(T result) {      this.result = result;    }
}      protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {         final List<ResultMessageSummary> result = Lists.newArrayList(resultMessages.size());          for (ResultMessage resultMessage : resultMessages) {              result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));
public interface DropboxEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedDropboxEndpointProducerBuilder advanced() {
public interface AdvancedTwitterTimelineEndpointBuilder              extends                  AdvancedTwitterTimelineEndpointConsumerBuilder, AdvancedTwitterTimelineEndpointProducerBuilder {          default TwitterTimelineEndpointBuilder basic() {
*/      public ResponseList<Status> getUserTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json"                  , null, paging.asPostParameterList(), true));      }
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   catch(LispReader.ReaderException e)    {   throw new CompilerException(sourcePath, e.line, e.getCause());    }   finally    {
public interface AdvancedMllpEndpointBuilder              extends                  AdvancedMllpEndpointConsumerBuilder, AdvancedMllpEndpointProducerBuilder {          default MllpEndpointBuilder basic() {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
this.destToSortby = new HashMap<String, ASTNode>();      this.destToLimit = new HashMap<String, Integer>();     this.destToAggregationExprs = new LinkedHashMap<String, LinkedHashMap<String, ASTNode> >();      this.destToDistinctFuncExpr = new HashMap<String, ASTNode>();      this.alias = alias;
"JSCompiler_StaticMethods_bar(o, 2);",              "JSCompiler_StaticMethods_baz(o)");     static final ImmutableList<String> EXPECTED_TYPE_CHECKING_OFF =         ImmutableList.of(          "FUNCTION a = null",          "NAME JSCompiler_StaticMethods_foo$self = null",          "FUNCTION JSCompiler_StaticMethods_foo = null",
public interface AdvancedHazelcastMapEndpointBuilder              extends                  AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {          default HazelcastMapEndpointBuilder basic() {
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
*       * @return a message for the error.       */     @Message(id = 10831, value = "The master host controller cannot register slave host controllers as it's current running mode is '%s'")      String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);      /**
public interface AdvancedRssEndpointBuilder              extends                  EndpointConsumerBuilder {          default RssEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = String.class),          @ApiResponse(code = 400, message = "Invalid username/password supplied", response = Void.class) })     String loginUser(@QueryParam("username") @NotNull   @ApiParam("The user name for login")  String username,@QueryParam("password") @NotNull   @ApiParam("The password for login in clear text")  String password) throws Exception;      @GET      @Path("/logout")
int index = (int) params.get(1).getDouble();      ImmutableList<JSType> templateTypes =          ((TemplatizedType) type).getTemplateTypes();     if (index >= templateTypes.size()) {        reportWarning(ttlAst, INDEX_OUTOFBOUNDS,            Integer.toString(index), Integer.toString(templateTypes.size()));        return getUnknownType();
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
nodeE.appendChild(positionXE);              Element positionYE = createNodePositionY(document, n);              nodeE.appendChild(positionYE);             if (minZ != 0f || maxZ != 0f) {                  Element positionZE = createNodePositionZ(document, n);                  nodeE.appendChild(positionZE);              }
public interface AdvancedXChangeEndpointBuilder              extends                  EndpointProducerBuilder {          default XChangeEndpointBuilder basic() {
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*     * @param toCompare The element to set as the comparison reference.    */  public abstract void setReference(T toCompare);   /**    * Checks, whether the given element is equal to the element that has been set as the comparison
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
WebsocketEndpoint websocketEndpoint = (WebsocketEndpoint)context.getEndpoint(uri);          WebsocketComponent component = websocketEndpoint.getComponent();          component.setMinThreads(1);         component.setMaxThreads(20);          Consumer consumer = websocketEndpoint.createConsumer(processor);          component.connect((WebsocketProducerConsumer) consumer);
String methodKey = method + "." + key;           Number n = getNumbers().get(methodKey);           if (n != null) {              return n.longValue();           }           String value = getMethodParameter(method, key);           if (StringUtils.isEmpty(value)) {
}       }      }     catch (Exception t) {       log.warn("Error while getting extensions from module: " + moduleId, t);      }     }
public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(253);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
boolean needPostProjectionCoercion = false;          for (FunctionCall aggregate : analysis.getAggregates(node)) {              Expression rewritten = subPlan.rewrite(aggregate);             Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, paging.asPostParameterList(), true));      }
* @should delete global property from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperty(GlobalProperty globalProperty);   /**    * Completely remove the given global properties from the database
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
public void draw (SpriteBatch batch, float x, float y, float width, float height) {     TextureRegion region = getRegion();    float regionWidth = region.getRegionWidth(), regionHeight = region.getRegionHeight();     float remainingX = width % regionWidth, remainingY = height % regionHeight;     float startX = x, startY = y;     float endX = x + width - remainingX, endY = y + height - remainingY;
private ByteBuf buffer;   BufferImpl() {      this(0);    }
*/      public ResponseList<Status> getPublicTimeline(long sinceID) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() +                  "statuses/public_timeline.json", null, new Paging((long) sinceID).asPostParameterList(Paging.S)                  , false));      }
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    }   public synchronized void delete(int fileId, boolean recursive) {      if (INACTIVE) {        return;      }
}   public void glGenTextures (int n, IntBuffer textures) {   GL.glGenTextures(n, textures, Memory.getPosition(textures));   }   public int glGetError () {
*       * @return a message for the error.       */     @Message(id = 10831, value = "The master host controller cannot register slave host controllers as it's current running mode is '%s'")      String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);      /**
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
}     private <K> List<Data> convertKeysToData(Set<K> keys) {          if (keys == null || keys.isEmpty()) {              return Collections.emptyList();          }
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
*     * @throws IOException Thrown if any of the two views raises an exception.    */  public abstract void copy(DataInputView source, DataOutputView target) throws IOException;  }
*/      public int getDeletedRelationships()      {         return inner.deletedRelationships();      }      /**
String annotation)      {          if (ast == null) {             throw new IllegalArgumentException("the ast is null");          }          if (annotation == null) {             throw new IllegalArgumentException("the annotation is null");          }          if (StringUtils.isBlank(annotation)) {
protected void handleMultiMapTryLock(String[] args) {          String key = args[1];         long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;          boolean locked;          if (time == 0) {              locked = getMultiMap().tryLock(key);
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
return;    }   time.put(delta);    final float currentLoad = delta == 0f ? 0f : current / delta;    load.put((delta > 1f) ? currentLoad : delta * currentLoad + (1f - delta) * load.latest);
}              }          }         return this;      }      private boolean isAtmosphereResourceValid(AtmosphereResource r) {
char[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);    ATN deserialized = new ATNDeserializer().deserialize(serializedAtn);   return new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);   }  }
} else {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            InputStream is = mHdfsFs.open(new Path(filePath));            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
l.onSuspend(request, response);                          break;                      case RESUME:                         l.onResume(request, response);                          break;                      case DESTROYED:                          l.onDestroyed(request, response);
out.writeInt(migrationData.size());          for (Map.Entry<String, Data> entry : migrationData.entrySet()) {              out.writeUTF(entry.getKey());             out.writeData(entry.getValue());          }      }
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
javaWriter.emitPackage("com.squareup");      javaWriter.beginType("com.squareup.Foo", "class", 0);      javaWriter.beginMethod("int", "foo", 0, "java.lang.String", "s");     javaWriter.emitSingleLineComment("foo");      javaWriter.emitStatement("int j = s.length() + %s", 13);      javaWriter.endMethod();      javaWriter.endType();
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
if (!config.isAutoRead() && !readPending) {                      clearEpollIn();                  }              }
template.sendBodyAndHeader("file:          MockEndpoint mock = getMockEndpoint("mock:result4");         mock.expectedBodiesReceivedInAnyOrder("Hello World 3");          assertMockEndpointsSatisfied();          oneExchangeDone.matchesMockWaitTime();
span.log(fields);                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }              return message;          }
public void shutdown() {          synchronized (lifecycleLock) {              fireLifecycleEvent(SHUTTING_DOWN);             instance.managementService.destroy();              instance.node.shutdown(false, true);              HazelcastInstanceFactory.remove(instance);              fireLifecycleEvent(SHUTDOWN);
public void setOriginBasedPosition (float x, float y) {    setPosition(x - this.originX, y - this.originY);    }    /** Sets the x position where the sprite will be drawn. If origin, rotation, or scale are changed, it is slightly more efficient
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Bye World", Exchange.FILE_NAME, "mysub/bye.txt");         Thread.sleep(200);          File file = new File(getScpPath() + "/mysub/bye.txt");          assertFileExists(file.getAbsolutePath());
* @see <a href="http:       */      public ResponseList<Status> getMentions() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, true));      }
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface CxfEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCxfEndpointProducerBuilder advanced() {
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
public interface AdvancedNsqEndpointBuilder              extends                  AdvancedNsqEndpointConsumerBuilder, AdvancedNsqEndpointProducerBuilder {          default NsqEndpointBuilder basic() {
RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);          RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();         assertTrue(runtimeOptions.isMonochrome());      }
}      static String[] aliases(final ModelNode node) {         if(node.hasDefined(Constants.ALIAS)) {              final ModelNode aliases = node.require(Constants.ALIAS);              final int size = aliases.asInt();              final String[] array = new String[size];
* before growing the backing table. */   public IntSet (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
if (getColumnClass(counter) == ParseTreeTableModel.class) {                          final MouseEvent mouseEvent = (MouseEvent) event;                          final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),                                 mouseEvent.getWhen(), mouseEvent.getModifiers(),                                  mouseEvent.getX() - getCellRect(0, counter, true).x,                                  mouseEvent.getY(), mouseEvent.getClickCount(),                                  mouseEvent.isPopupTrigger());
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
notifyLatch.countDown();        try {         waitYieldLatch.await(1000, TimeUnit.MILLISECONDS);        }        catch (Exception e) {          throw Throwables.propagate(e);
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      @Override     public ExtendedCell deepClone() {        throw new UnsupportedOperationException();      }
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
class UnionTypeBuilder implements Serializable {    private static final long serialVersionUID = 1L;   private static final int DEFAULT_MAX_UNION_SIZE = 100;    private final JSTypeRegistry registry;    private final List<JSType> alternates = Lists.newArrayList();
String messageSelector,               boolean topic,               String durableSubscriptionId) throws Exception {         return createMessageConsumer(session, destinationName, messageSelector, topic, durableSubscriptionId, false);      }      public static MessageConsumer createMessageConsumer(
String uri = getScpUri() + "?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hallo Welt", Exchange.FILE_NAME, "welt.txt");         Thread.sleep(500);          File file = new File(getScpPath() + "/welt.txt");          assertFileExists(file.getAbsolutePath());
else {                      callback.process(entry.getFileStatus(), entry.getBlockLocations());                  }                 if (future.isDone()) {                      return;                  }              }
if (channel == null) {              initializeChannel();              if (endpoint.isSynchronous()) {                 LOG.debug("Getting synchronous method stub from channel");                  grpcStub = GrpcUtils.constructGrpcBlockingStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());              } else {                 LOG.debug("Getting asynchronous method stub from channel");                  grpcStub = GrpcUtils.constructGrpcAsyncStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());              }          }
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface NetWeaverEndpointBuilder extends EndpointProducerBuilder {          default AdvancedNetWeaverEndpointBuilder advanced() {              return (AdvancedNetWeaverEndpointBuilder) this;          }
putEntry(70, "greek", "greek_bin", "ISO8859_7");           putEntry(71, "hebrew", "hebrew_bin", "ISO8859_8");           putEntry(72, "hp8", "hp8_bin", "US-ASCII");          putEntry(73, "keybcs2", "keybcs2_bin", "Cp895");           putEntry(74, "koi8r", "koi8r_bin", "KOI8_R");           putEntry(75
*/      public ResponseList<Status> getFriendsTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",null, paging.asPostParameterList(), true));      }      /**
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface ReactiveStreamsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedReactiveStreamsEndpointProducerBuilder advanced() {
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
MockEndpoint result = getMockEndpoint("mock:result");          result.expectedMinimumMessageCount(3);           result.expectedBodiesReceived("Message 1c", "Message 2b", "Message 3a");
}      @FixMethodOrder(MethodSorters.JVM)     static class DummySortJvm {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,    Buffer pixels) {   GL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));   }   public void glViewport (int x, int y, int width, int height) {
populateNearCache(clientMap, 1000);         HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());          final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();
public interface QueueServiceEndpointBuilder              extends                  QueueServiceEndpointConsumerBuilder, QueueServiceEndpointProducerBuilder {          default AdvancedQueueServiceEndpointBuilder advanced() {
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should fail if global property being updated does not already exist    * @should update a global property whose typed value is handled by a custom datatype    */  public void updateGlobalProperty(String propertyName, String propertyValue);   /**    * Save the given global property to the database
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
public Skin loadSync (AssetManager manager, String fileName, SkinParameter parameter) {     String texturePath;     if (parameter == null)     texturePath = Gdx.files.internal(fileName).pathWithoutExtension() + ".png";     else      texturePath = parameter.texturePath;     Texture texture = manager.get(texturePath, Texture.class);
lineNo = sourceMapping.getLineNumber();          charNo = sourceMapping.getColumnPosition();          String identifier = sourceMapping.getIdentifier();         if (identifier != null && !identifier.isEmpty()) {            originalName = identifier;          }        }
public interface Olingo2EndpointBuilder              extends                  Olingo2EndpointConsumerBuilder, Olingo2EndpointProducerBuilder {          default AdvancedOlingo2EndpointBuilder advanced() {
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
protected void handleMapTryLock(String[] args) {          String key = args[1];         long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;          boolean locked;          if (time == 0) {              locked = getMap().tryLock(key);
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
+ "    </test:setState>"                  + "  </soapenv:Body>"                  + "</soapenv:Envelope>"; String result = HttpRequest.post("http:          System.out.println(result);      }
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    factory.setInitializers(Arrays.asList(initializers[2], initializers[3]));    factory.addInitializers(initializers[4], initializers[5]);   this.container = factory.getEmbeddedServletContainer(initializers[0],      initializers[1]);    InOrder ordered = inOrder((Object[]) initializers);    for (ServletContextInitializer initializer : initializers) {
new FileWriter(this.temporaryFolder.newFile("test.txt")));    AbstractEmbeddedServletContainerFactory factory = getFactory();    factory.setDocumentRoot(this.temporaryFolder.getRoot());   this.container = factory.getEmbeddedServletContainer(); assertThat(getResponse("http:   }
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.createTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
public void test_kr_1() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
public interface AtomixMessagingEndpointBuilder              extends                  AtomixMessagingEndpointConsumerBuilder, AtomixMessagingEndpointProducerBuilder {          default AdvancedAtomixMessagingEndpointBuilder advanced() {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
public interface RefEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedRefEndpointProducerBuilder advanced() {
((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);         HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());          IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());          anotherClientMap.evictAll();
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      public static long combineToLong(int x, int y) {         return ((long) x << 32) | ((long) y & 0xFFFFFFFL);      }      public static int extractInt(long value, boolean lowerBits) {
*/      @Test      public void sync_whenManyGettersAndLotsOfWaiting() throws Exception {         int callTimeout = 10000;          Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeout);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json", true));      }      /**
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {            mBuf.putInt(0, k + mWorkerId);
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, paging.asPostParameterList(), true));      }
public interface SwiftEndpointBuilder extends EndpointProducerBuilder {          default AdvancedSwiftEndpointBuilder advanced() {              return (AdvancedSwiftEndpointBuilder) this;          }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);   }
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, paging.asPostParameterList(), true));      }
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.createTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMulticastParallelTimeoutAware() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.message(0).body().not(body().contains("A"));          template.sendBody("direct:start", "Hello");
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTextures(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
RSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,      RSocketMessageHandler messageHandler) {     return new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),      messageHandler.responder());    }   }
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
@Configuration   @ConditionalOnBean(ConnectionFactory.class)  @ConditionalOnEnabledHealthIndicator("jms")   public static class JmsHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {
this.bufferMemorySize = bufferMemorySize;      }     public Long getRequestRequiredAcks() {          return requestRequiredAcks;      }
return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());      }     private static void generateConstructor(ClassDefinition classDefinition,              List<Integer> joinChannels,              FieldDefinition sizeField,              List<FieldDefinition> channelFields,
Process process = startExternalNode(i);        externalNodes.add(process);      }     waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 60_000);      JsonArray message1 = new JsonArray();      IntStream.range(0, NODE_COUNT).forEach(message1::add);      vertx.eventBus().publish("ping", message1);     waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 60_000);      for (int i = 0; i < NODE_
* <p>In the undirected case, returns {@code null} if {@code isSelfLoop} is true.     */    @CanIgnoreReturnValue   N removeInEdge(E edge, boolean isSelfLoop);        @CanIgnoreReturnValue   N removeOutEdge(E edge);    /**     * Add {@code edge} to the set of incoming edges. Implicitly adds {@code node} as a predecessor.
private StringBuilder stringBuilder = new StringBuilder();     public DiagnosticsLogWriterImpl() {          this(false);      }     public DiagnosticsLogWriterImpl(boolean includeEpochTime) {          this.includeEpochTime = includeEpochTime;      }
String[] paramNames = null;                  if (kotlin && constructors.length > 0) {                      paramNames = TypeUtils.getKoltinConstructorParameters(clazz);                     creatorConstructor = TypeUtils.getKoltinConstructor(constructors);                      TypeUtils.setAccessible(creatorConstructor);                  } else {
@Configuration   @ConditionalOnBean(JavaMailSenderImpl.class)  @ConditionalOnEnabledHealthIndicator("mail")   public static class MailHealthIndicatorConfiguration     extends     CompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}               if (bulb > 5) {                   sendOn(bulb, bridgeId);                  Thread.sleep(100);                   String messageBytes = "40:" + Integer.toHexString(milightColorNo) + ":55";                   sendMessage(messageBytes, bridgeId);               }
IR.assign(                  IR.getprop(IR.thisNode(), IR.string("stack")),                  IR.getprop(IR.name(TMP_ERROR), IR.string("stack"))));      Node superErrorExpr =         IR.comma(IR.comma(IR.comma(getTmpError, copyMessage), setStack), IR.name(TMP_ERROR))              .useSourceInfoIfMissingFromForTree(superCall);      superCall.replaceWith(superErrorExpr);    }
* @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors);   /**    * Returns a list of locales used by the user when searching.
public interface BeanValidatorEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedBeanValidatorEndpointBuilder advanced() {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/  class HornetQEmbeddedConfigurationFactory {  private Log logger = LogFactory.getLog(HornetQEmbeddedConfigurationFactory.class);   private final Embedded properties;
bar.expectedMessageCount(0);          MockEndpoint start = getMockEndpoint("mock:start"); start.expectedMessageCount(7);          template.sendBody("activemq:queue:foo", "Hello World");
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test   public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
public interface SparkEndpointBuilder extends EndpointConsumerBuilder {          default AdvancedSparkEndpointBuilder advanced() {              return (AdvancedSparkEndpointBuilder) this;          }
public interface AdvancedMockEndpointBuilder              extends                  EndpointProducerBuilder {          default MockEndpointBuilder basic() {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);     anotherConceptName.setName(duplicateName);     newConcept.addName(anotherConceptName);    Errors errors = new BindException(newConcept, "concept");     new ConceptValidator().validate(newConcept, errors);    }
synchronized (lock) {        if (segmentsToDrop.contains(holder)) {          if (callback != null) {           holder.addCallback(callback);          }          return;        }
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
LOG.debug("Initializing sortmerger...");     Sorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,     this.parentTask, this.serializer, this.comparator, 10 * 1024 * 1024);     runPartialSorter(sorter, NUM_RECORDS, 2);    }
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private static abstract class AbstractRequestMatcher     extends ApplicationContextRequestMatcher<WebApplicationContext> {    private volatile RequestMatcher delegate;   AbstractRequestMatcher() {     super(WebApplicationContext.class);    }
@PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })  public class ConfigurationLoaderTest {     private static Configuration loadConfiguration(String name)          throws CheckstyleException {          return loadConfiguration(name, new Properties());      }     private static Configuration loadConfiguration(          String name, Properties props) throws CheckstyleException {          final String fName =              "src/test/resources/com/puppycrawl/tools/checkstyle/configs/" + name;
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
* @param isStatic           *        if import is static.           */         public final void setStaticImport(boolean isStatic) {              this.staticImport = isStatic;          }      }
* Advanced builder for endpoint for the Kubernetes Persistent Volume Claim       * component.       */     public interface AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder              extends                  EndpointProducerBuilder {          default KubernetesPersistentVolumesClaimsEndpointBuilder basic() {
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().shutdown();              }          };
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   }    public static class ShippingPriorityItem extends Tuple4<Long, Double, String, Long> {    public ShippingPriorityItem() {}
@Override      public String apiFileFolder() {         return (outputFolder + File.separator + apiFolder).replace("/", File.separator);      }      public String modelFileFolder() {         return (outputFolder + File.separator + modelFolder).replace("/", File.separator);      }      @Override
public static void createFiles() throws IOException {      long startTimeMs = CommonUtils.getCurrentMs();     for (int k = 0; k < FILES; k++) {        int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));        CommonUtils.printTimeTakenMs(startTimeMs, LOG, "user_createFiles with fileId " + fileId);      }
attr = bindingGroup.get(DEFAULT_INTERFACE);          writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());         if (fromServer && bindingGroup.hasDefined(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() >= 0) {              attr = bindingGroup.get(PORT_OFFSET);              writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());          }
final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;          verify(checkConfig,                 getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"),                 expected);      }      @Test
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of("runs")));          when(request.getParameterValues("runs")).thenReturn(new String[]{"1"});          when(response.getWriter()).thenReturn(output);
return -1;           }           int newId = nextId();          if (newId >= max) {              throw new IndexOutOfBoundsException("size=" + index.length + " id=" + id);           }
* Returns a {@link WildcardType} if the {@link TypeMirror} represents a wildcard type or throws     * an {@link IllegalArgumentException}.     */   public static WildcardType asWildcard(WildcardType maybeWildcardType) {      return maybeWildcardType.accept(WildcardTypeVisitor.INSTANCE, null);    }
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedSshEndpointBuilder              extends                  AdvancedSshEndpointConsumerBuilder, AdvancedSshEndpointProducerBuilder {          default SshEndpointBuilder basic() {
protected void handleQPoll(String[] args) {          long timeout = 0;          if (args.length > 1) {             timeout = Long.parseLong(args[1]);          }          try {              println(getQueue().poll(timeout, TimeUnit.SECONDS));
@Test   public void testMultipleAlternativesWithCommonLabel_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(638);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @should execute sql containing group by    */   @Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)  public List<List<Object>> executeSQL(String sql, boolean selectOnly);   /**    * Get the implementation id stored for this server Returns null if no implementation id has
prop.getField().getJavaDoc().setFullText(option.getDescription());              }              if (!Strings.isBlank(option.getDefaultValue())) {                 if ("java.lang.String".equals(option.getJavaType())) {                      prop.getField().setStringInitializer(option.getDefaultValue());                  } else if ("long".equals(option.getJavaType()) || "java.lang.Long".equals(option.getJavaType())) {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
private final String secret;    private final String percentEncodedKey;   public RequestToken(String key, String token) {      this.key = key;      this.secret = token;      this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);
if (isStatisticsEnabled()) {              if (result) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNanos(System.nanoTime() - start);              }             statistics.addGetTimeNanos(System.nanoTime() - start);              if (isHit) {                  statistics.increaseCacheHits(1);              } else {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (!drawing) throw new IllegalStateException("SpriteCache.begin must be called before draw.");     Cache cache = caches.get(cacheID);    offset = offset * 6 + cache.offset;     length *= 6;     Texture[] textures = cache.textures;     int[] counts = cache.counts;
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
break;            }            switch (schemeField.id) { case 1:                if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {                  struct.rqst = new WriteNotificationLogRequest();                  struct.rqst.read(iprot);
public void test_kr_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월06일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
}              }              if (requiredMessageListener == null) {                 throw MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(), resourceAdapterName);              }              final Activation activation = requiredMessageListener.getActivation();
public long read(ByteBuffer buffer) throws IOException {             chunk = new byte[buffer.remaining() - 10];              int read = -1;
* @see <a href="http:      */      public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json", true));      }      /**
notifyListeners(oldState, state);   }  private static void notifyListeners(State oldState, State newState) {    if(oldState.equals(newState)) return;
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
public interface WebsocketEndpointBuilder              extends                  WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {          default AdvancedWebsocketEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.createTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
* @should return default value if property name does not exist    * @should not fail with null default value    */  public String getGlobalProperty(String propertyName, String defaultValue);   /**    * Gets the global property that has the given <code>propertyName</code>
@Test      public void testFormAuthSingleSignOn(@ArquillianResource URL baseURLNoAuth) throws Exception {          log.info("+++ testFormAuthSingleSignOn");         SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth, baseURLNoAuth, log);      }      /**
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   public void glGenTextures (int n, IntBuffer textures) {   GL.glGenTextures(n, textures, Memory.getPosition(textures));   }   public int glGetError () {
pollResetFuture = pollService.schedule(new Runnable() {     public void run() {     logger.trace("rapidRefreshFutureEnd stopping");      schedulePoll(refreshInterval);     }    }, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(729);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {System.out.println($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
public final static int MajorVersion    = 1;      public final static int MinorVersion    = 1;     public final static int RevisionVersion = 1;      public static String getVersionNumber() {          return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion;
*       * @return the error message       */     @Message(id = 10835, value = IN_SERIES + " is missing groups: %s")      String inSeriesIsMissingGroups(String rolloutPlan);      /**
}     @Cucumber.Options(monochrome = true)      static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {      }     @Cucumber.Options(monochrome = false)      static class BaseClassWithMonoChromeFalse {      }
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertTrue("" + compressedProto.length, compressedProto.length < 395000);     assertTrue("" + uncompressedProto.length, uncompressedProto.length < 2560000);    }    @Test
if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {             LinkedList<Object> filteredMessage = new LinkedList<Object>();              for (Object o : ((List) e.getMessage())) {                 filteredMessage.addLast(perRequestFilter(r, new Entry(o, r, f, o), false));              }              e.setMessage(filteredMessage);
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
this.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConceptSet(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));
public void testSamplingUsingmessageFrequency() throws Exception {          long totalMessages = 100;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
ConfigurableEmbeddedServletContainerFactory factory = getFactory();    factory.setPort(8081);    this.container = factory     .getEmbeddedServletContainer(exampleServletRegistration()); assertThat(getResponse("http:   }
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
* @see <a href="http:       */      public Trends getCurrentTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL() + "trends/current.json"                  , false)).get(0);      }
}      @Override     public synchronized void mouseMove() {          if (vizConfig.isSelectionEnable() && rectangleSelection) {              Rectangle rectangle = (Rectangle) currentSelectionArea;
HIVE_SERDE_NOT_FOUND(18, EXTERNAL),      HIVE_UNSUPPORTED_FORMAT(19, EXTERNAL),     HIVE_PARTITION_READ_ONLY(20, EXTERNAL),     HIVE_TOO_MANY_OPEN_PARTITIONS(21, EXTERNAL),      HIVE_CONCURRENT_MODIFICATION_DETECTED(22, EXTERNAL),      HIVE_COLUMN_ORDER_MISMATCH(23, USER_ERROR),      HIVE_FILE_MISSING_COLUMN_NAMES(24, EXTERNAL),
cancelledKeys = 0;                 processSelectedKeys();                  selector = this.selector;                 runAllTasks();                  selector = this.selector;                  if (isShutdown()) {
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
return result;    }   private static String rule(String rule) {      return "com.google.javascript.jscomp.ConformanceRules$" + rule;    }   private static String value(String value) {      return "  value: '" + value + "'\n";    }
this.reservedBytes = reservedBytes;          this.reservedRevocableBytes = reservedRevocableBytes;          this.queryMemoryReservations = unmodifiableMap(new HashMap<>(queryMemoryReservations));         this.queryMemoryRevocableReservations = unmodifiableMap(new HashMap<>(queryMemoryReservations));      }      @JsonProperty
assertEquals(encoded, encoding.encode(bytes));    }   private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
});          context.start();         resultEndpoint.expectedBodiesReceivedInAnyOrder("one", "two", "three");          sendMessage("1", "one");          sendMessage("2", "two");
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   protected Pair<double[][][], double[][][]> getCondProbs(CRFCliqueTree<String> cTree, int[][][] docData) {      double[][][] prevGivenCurr = new double[docData.length][][];
this.fontSize = fontSize;    try {     Class c = Class.forName("org.antlr.v4.runtime.tree.gui." + fontName);    this.fontMetrics = (FontMetrics)c.newInstance(this.fontSize, true);    }    catch (Exception e) {     throw new UnsupportedOperationException("No font metrics for "+fontName);
@Override   public void setReleaseLabel(CharSequence label) {    for (LoadingLayout layout : mLoadingLayouts) {    layout.setReleaseLabel(label);    }   }
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@ModelAttribute("visitTypes")    public List<VisitType> getVisitTypes() throws Exception {    return Context.getVisitService().getAllVisitTypes(false);    }    @ModelAttribute("attributeTypes")
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    @Override   public List<Integer> snapshotState(long checkpointId, long timestamp) {     return Collections.singletonList(saveRecordCnt);    }    @Override   public void restoreState(List<Integer> state) {     for (Integer i : state) {      saveRecordCnt += i;     }
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final String server = SERVER.resolveModelAttribute(context, subModel).asString();              final ServiceController<?> controller = context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server, host, path)); if (controller != null && controller.getState() != ServiceController.State.UP){                  return;              }
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedNettyEndpointBuilder              extends                  AdvancedNettyEndpointConsumerBuilder, AdvancedNettyEndpointProducerBuilder {          default NettyEndpointBuilder basic() {
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(),
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Exposed Used for testing only! Default values used in the initial settings frame are overriden intentionally       * for testing but violate the RFC if used outside the scope of testing.       */     public HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity, int maxHeaderTableSize) {          this.maxHeaderListSize = checkPositive(maxHeaderListSize, "maxHeaderListSize");          this.maxHeaderListSizeGoAway = Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);
SNOW_BALL(332, 16),      BOAT(333, 1),      LEATHER(334),     MILK_BUCKET(335),      CLAY_BRICK(336),      CLAY_BALL(337),      SUGAR_CANE(338),
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override    public boolean preservesOrdering()    {     return true;    }    @Override
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
public void requestTest() {           RecordedStreamObserver<PCmdRequest> recordedStreamObserver = new RecordedStreamObserver<PCmdRequest>();          PinpointGrpcServer pinpointGrpcServer = new PinpointGrpcServer(Mockito.mock(InetSocketAddress.class), agentInfo, new RequestManager(testTimer, 3000), recordedStreamObserver);           pinpointGrpcServer.connected();           List<Integer> supportCommandList = Arrays.asList(Short.toUnsignedInt(TCommandType.ECHO.getCode()));
* @param cause the cause of the error.       */      @LogMessage(level = Level.WARN)     @Message(id = 10806, value = "Caught exception closing input stream")      void caughtExceptionClosingInputStream(@Cause Throwable cause);      /**
@Test(groups = {"standalone", "default_provider"}, enabled = true)      public void testPutZeroBytesFileTest() throws Throwable {          System.err.println("setting up client");          SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder()
private static final String ALLOW_ELEMENT_NAME = "allow";          private final Deque<ImportControl> stack = new ArrayDeque<>();      static {          DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
lockAndUnlock(factory.newReentrantLock("foo"), reps);    }   private static void lockAndUnlock(Lock lock, int reps) {      for (int i = 0; i < reps; i++) {        lock.lock();        lock.unlock();
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {              return;         } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '"') {              if (streamTokenizer.sval.equalsIgnoreCase("label")) {                  streamTokenizer.nextToken();
return methodDescriptors;    }   ImmutableSet<ImplementationMethodDescriptor> implementationMethodDescriptors() {      return implementationMethodDescriptors;    }
logger.debug("Active clients {}", activeClients());          }         long now = System.currentTimeMillis();          String messageId = UUID.randomUUID().toString();          CacheMessage cacheMessage = new CacheMessage(messageId, e);          synchronized (messages) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
final Map<String, String> m = new HashMap<String, String>();              for (Map.Entry<String, U> e : handlers.entrySet()) {                  UriTemplate t = new UriTemplate(e.getKey());                 logger.trace("Trying to map {} to {}", t, path);                  if (t.match(path, m)) {                      handler = e.getValue();                     logger.trace("Mapped {} to {}", t, e.getValue());                      break;                  }              }
*     * @return The closed DataStream.    */  public DataStreamSink<OUT> print() {    DataStream<OUT> inputStream = this.copy();    PrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();   DataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());
public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()      {         return checkNoPlanNodeMatches(exchange(), "Expected rules to be fired before 'AddExchanges' optimizer");      }     private static <T extends PlanNode> Rule<T> checkNoPlanNodeMatches(Pattern<T> pattern, String message)      {          return new CheckNoPlanNodeMatchesRule<>(pattern, message);      }
}      /**      * On Windows, there is scenario where the connection get broken and the only way we can find it is by inspecting       * the stack trace in order to catch the following exception:       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
ConfigurableEmbeddedServletContainerFactory factory = getFactory();    final Date[] date = new Date[1];    this.container = factory     .getEmbeddedServletContainer(new ServletContextInitializer() {       @Override       public void onStartup(ServletContext servletContext)         throws ServletException {
@Test      public void test_Decode_Return_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
public interface SmppEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSmppEndpointProducerBuilder advanced() {
MockEndpoint result = getMockEndpoint("mock:result");          result.expectedMinimumMessageCount(3);           result.expectedBodiesReceived("Message 1c", "Message 2b", "Message 3a");
final int row1 = Math.max(0, (int)(viewBounds.y / layerTileHeight));     final int row2 = Math.min(layerHeight, (int)((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));    float y = row2 * layerTileHeight;     float xStart = col1 * layerTileWidth;     final float[] vertices = this.vertices;    for (int row = row2; row >= row1; row--) {      float x = xStart;      for (int col = col1;
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Vector<RelationshipListItem> ret = new Vector<RelationshipListItem>();     List<Relationship> rels = Context.getPersonService()            .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));     for (Relationship rel : rels) {      if (!rel.isVoided()              && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors);   /**    * Returns a list of locales used by the user when searching.
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
log.trace("URL from classloader: " + url);                  }                 url = customerResourceLocator(url);                  String urlPath = url.getFile();                  urlPath = URLDecoder.decode(urlPath, "UTF-8");
invalidateHierarchy();    }   public CharSequence getText () {     return text;    }
Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());              Assert.assertEquals(2, Integer.parseInt(response.getFirstHeader("value").getValue()));             Assert.assertTrue(Boolean.valueOf(response.getFirstHeader("serialized").getValue()));              response.getEntity().getContent().close();          } finally {              client.getConnectionManager().shutdown();
*/  @GwtCompatible(emulated = true)  public class BaseEncodingTest extends TestCase {   public static void assertEquals(byte[] expected, byte[] actual) {      assertEquals(expected.length, actual.length);      for (int i = 0; i < expected.length; i++) {        assertEquals(expected[i], actual[i]);
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10853, value = "Unexpected initial path key %s")      IllegalStateException unexpectedInitialPathKey(String key);      /**
*/      public void destroy() {          isDestroyed.set(true);         cache.remove(this);      }      private boolean destroyed(){
public interface AdvancedSftpEndpointBuilder              extends                  AdvancedSftpEndpointConsumerBuilder, AdvancedSftpEndpointProducerBuilder {          default SftpEndpointBuilder basic() {
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
@ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = String.class),          @ApiResponse(code = 400, message = "Invalid username/password supplied", response = Void.class) })     String loginUser(@QueryParam("username") @NotNull   @ApiParam("The user name for login")  String username,@QueryParam("password") @NotNull   @ApiParam("The password for login in clear text")  String password) throws Exception;      @GET      @Path("/logout")
assertFalse(valueCollection.retainAll(new ArrayList()));      }     @Test(expected = UnsupportedOperationException.class)      public void testToArrayWithArgument() throws Exception {          EntryHolder entryHolder = mock(EntryHolder.class);          Set set = new HashSet();
*       * @return the error message       */     @Message(id = 10834, value = "%s recognizes only %s as children: %s")      String unrecognizedChildren(String parent, String children, String parentSpec);      /**
public interface GoogleSheetsEndpointBuilder              extends                  GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {          default AdvancedGoogleSheetsEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
assertEquals(CONTENT_LENGTH, c.content().readableBytes());          assertEquals(                  Unpooled.wrappedBuffer(content, content.length - CONTENT_LENGTH, CONTENT_LENGTH),                 c.content().readSlice(CONTENT_LENGTH));          c.release();          assertFalse(channel.finish());
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })     void addPet(@Valid Pet body) throws Exception;      @DELETE      @Path("/{petId}")
private LinkedHashMap<String,partitionDesc> pathToPartitionInfo;   private LinkedHashMap<String,Operator<? extends Serializable>> aliasToWork;
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_cn_4() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    @Test   public void reportLostFileTest() throws LineageDoesNotExistException {      long fileId = 1;      mThrown.expect(LineageDoesNotExistException.class);      mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));     mLineageStore.reportLostFile(fileId);    }    @Test
config.lock();          try {              AuditLogHandler existing = config.getConfiguredHandler(handler.getName());             if (!handler.isDifferent(existing)){                  if (handlerUpdateTask == null){                      handlerUpdateTask = new HandlerUpdateTask();                  }
final FilterSet fc =              SuppressionsLoader.loadSuppressions(getPath("suppressions_none.xml"));          final FilterSet fc2 = new FilterSet();         assertEquals(fc2, fc);      }      @Test
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* before growing the backing table. */   public IntSet (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
c.add(new Cookie("yo", "man"));          AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo("/a").build();         processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));          r.get().getBroadcaster().broadcast("yo").get();          assertNotNull(cValue.get());
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
sum += mBuf.get(pId % 16);            if (DEBUG_MODE) {             buf.DATA.order(ByteOrder.nativeOrder()).flip();              CommonUtils.printByteBuffer(LOG, buf.DATA);            }            buf.DATA.clear();
new Thread() {              public void run() {                  try {                     if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {                          tryLockSuccess.countDown();                      }                  } catch (InterruptedException e) {
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
*/  @GwtCompatible(emulated = true)  public class BaseEncodingTest extends TestCase {   public static void assertEquals(byte[] expected, byte[] actual) {      assertEquals(expected.length, actual.length);      for (int i = 0; i < expected.length; i++) {        assertEquals(expected[i], actual[i]);
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_kr_4() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년05월06일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists.json?cursor=" + cursor, true));      }
}                   } else if (command.compareTo(oldPercent) < 0) {                       for (int i = 0; i < repeatCount; i++) {                          Thread.sleep(100);                           if (BindingType.brightness.equals(type)) {                               sendDecrease(bulb, rgbwSteps, bridgeId);                           } else if (BindingType.colorTemperature.equals(type)) {
}      private void handleRenegotiation(HandshakeStatus handshakeStatus) {         if (handshakeStatus == HandshakeStatus.NOT_HANDSHAKING ||             handshakeStatus == HandshakeStatus.FINISHED) {              return;          }
*    * @return Future indicating when the rpc endpoint has been terminated    */  CompletableFuture<Void> getTerminationFuture();  }
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}     @Test(timeout = 120000)      public void testMutex() throws InterruptedException {          final int threadCount = 2;          final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
processEngineConfiguration.setClock(testClock);     testClock.setCurrentTime(new Date(1));      ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testRepetitionJobEvents");      Job theJob = managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();      assertNotNull(theJob);
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), true);    }    @Test
public interface XChangeEndpointBuilder extends EndpointProducerBuilder {          default AdvancedXChangeEndpointBuilder advanced() {              return (AdvancedXChangeEndpointBuilder) this;          }
public void startServlet() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();    this.container = factory     .getEmbeddedServletContainer(exampleServletRegistration()); assertThat(getResponse("http:   }
(!destToClusterby.isEmpty()))        return false;     Iterator<Map.Entry<String, LinkedHashMap<String, ASTNode>>> aggrIter = destToAggregationExprs.entrySet().iterator();      while (aggrIter.hasNext()) {        HashMap<String, ASTNode> h = aggrIter.next().getValue();        if ((h != null) && (!h.isEmpty()))
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
static public String getSimpleName (Class c) {    return c.getSimpleName();    }
socketSelector.close();        } catch (IOException ex) {         LOG.warn("Unable to close socket selector");        }        throw e;      }
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface IrcEndpointBuilder              extends                  IrcEndpointConsumerBuilder, IrcEndpointProducerBuilder {          default AdvancedIrcEndpointBuilder advanced() {
@Test      public void test_Decode_Return_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
rowsRet = work.getLimit() >= 0 ? Math.min(work.getLimit() - totalRows, maxRows) : maxRows;      }      try {       if (rowsRet <= 0 || work.getLimit() == totalRows) {          fetch.clearFetchContext();          return false;        }
BREWING_STAND(117),      CAULDRON(118),      ENDER_PORTAL(119),     ENTER_PORTAL_FRAME(120),      ENDER_STONE(121),      DRAGON_EGG(122),
public interface MiloServerEndpointBuilder              extends                  MiloServerEndpointConsumerBuilder, MiloServerEndpointProducerBuilder {          default AdvancedMiloServerEndpointBuilder advanced() {
appendToBody.ret();      }     private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)      {          Parameter blockIndex = arg("blockIndex", int.class);          Parameter blockPosition = arg("blockPosition", int.class);
public class TestConverters {   @Test(timeout = 10000)    public void testTaskSpecToFragmentSpec() {      ByteBuffer procBb = ByteBuffer.allocate(4);      procBb.putInt(0, 200);
String reset = res.getResponseHeader("X-Rate-Limit-Reset");          if (reset != null) {              long longReset = Long.parseLong(reset);             resetTimeInSeconds = (int) longReset;          } else {              return null;          }
*       * @return the message.       */     @Message(id = 10855, value = "Invalid byte stream.")      String invalidByteStream();      /**
public interface IronMQEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIronMQEndpointProducerBuilder advanced() {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<DirectMessage> getSentDirectMessages() throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0], true));      }
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
IMap<Object, Object> map2 = h2.getMap(mapName);          map1.put("key1", "value");         sleepAtLeastMillis(1000);          map2.put("key1", "LatestUpdatedValue");          map2.put("key2", "value2");         sleepAtLeastMillis(1000);          map1.put("key2", "LatestUpdatedValue2");
}    }   Assert.assertTrue("Resultset size was "+aggMap.size()+". Expected was "+keyCnt, aggMap.size() == keyCnt);    for (PactInteger integer : aggMap.values()) {     Assert.assertTrue("Incorrect result", integer.getValue() == expSum);
*  Is class declared as final.           *  @return true if class is declared as final           */         private boolean isDeclaredAsFinal() {              return declaredAsFinal;          }
mThriftServer = createThriftServer();      mWorkerNetAddress =          new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()             .getHostAddress(), thriftServerPort, mDataServer.getPort());      int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);
public void testMultipleAlternativesWithCommonLabel_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
&& !NettyUtils.isDomainSocketSupported(address)          && blockSource == BlockInStreamSource.LOCAL) {        try {         LOG.debug("Creating short circuit input stream for block {} @ {}", blockId, address);          return createLocalBlockInStream(context, address, blockId, blockSize, options);        } catch (NotFoundException e) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   @ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)  @UnrelatedTwo   static class ImportAutoConfigurationWithItemsTwo {   }
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
public interface StubEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedStubEndpointProducerBuilder advanced() {
setIdToUse = "*";        if (setIdToUse != null) {         helper(patientDrugOrderSets, setIdToUse, order);        if (order.isCurrent() || order.isFuture())          helper(currentDrugOrderSets, setIdToUse, order);         else          helper(completedDrugOrderSets, setIdToUse, order);
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMoveException() throws Exception    {      MockStorageService mockS3Client = new MockStorageService();     S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());      mover.move(          sourceSegment,
@Override      public PoolableProvider returnBroadcaster(Broadcaster b) {         logger.trace("Return Object {} now at size {}", b, count.getAndDecrement());          try {              genericObjectPool.returnObject(b);          } catch (IllegalStateException ex) {
public interface AdvancedSshEndpointBuilder              extends                  AdvancedSshEndpointConsumerBuilder, AdvancedSshEndpointProducerBuilder {          default SshEndpointBuilder basic() {
super.doStop();          if (configuration.isWebhookAutoRegister()) {             log.info("Unregistering webhook for endpoint {}", delegateEndpoint);              delegateEndpoint.unregisterWebhook();          }      }
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void shouldAllowExplainAsStartForACypherQuery() throws Exception      {         executeCommand( "EXPLAIN OPTIONAL MATCH (n) RETURN n;", "No data returned" );      }      @Test
this.context.refresh();    assertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));   assertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()      .size());   }
public interface AdvancedFacebookEndpointBuilder              extends                  AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {          default FacebookEndpointBuilder basic() {
Node caught = n.getFirstChild();      if (caught.isName()) {        validateName(caught);     } else if (caught.isArrayPattern()) {        validateArrayPattern(Token.CATCH, caught);      } else {        validateObjectPattern(Token.CATCH, caught);
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
priorRange = ranges[i];        cumNum = val;      }     long val = histogram.getCount();      if (val - cumNum > 0) {        metricsRecordBuilder.addCounter(            Interns.info(name + "_" + rangeType + "_" + ranges[ranges.length - 1] + "-inf", desc),
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
SetTransition set = (SetTransition)edge;       String label = set.label().toString();       if ( isLexer ) label = set.label().toString(true);      else if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());       if ( edge instanceof NotSetTransition ) label = "~"+label;       edgeST.add("label", getEdgeLabel(label));      }
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
for (String poolName : poolsToRedistribute) {        if (LOG.isDebugEnabled()) {         LOG.debug("Processing changes for pool " + poolName + ": " + pools.get(poolName));        }        processPoolChangesOnMasterThread(poolName, hasRequeues, syncWork);      }
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);          } else {             Map<Integer, GELFMessageChunk> c = Maps.newTreeMap();              c.put(chunk.getSequenceNumber(), chunk);              chunks.put(chunk.getId(), c);          }
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*      * @param schedulingInfo     */   @InterfaceAudience.Private   public void setSchedulingInfo(String schedulingInfo) {      super.setSchedulingInfo(schedulingInfo);    }
public interface CometdEndpointBuilder              extends                  CometdEndpointConsumerBuilder, CometdEndpointProducerBuilder {          default AdvancedCometdEndpointBuilder advanced() {
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getMentions(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, paging.asPostParameterList(), true));      }
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
, (args = args.rest()).first()        , args.rest());     case 20:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
}          public void shutdown() {             channel.disconnect();              bossGroup.shutdownGracefully();              workerGroup.shutdownGracefully();          }
return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {        @Override        public Set<byte[]> execute(Jedis connection) {         return connection.zrevrangeByLex(key, max, min);        }      }.runBinary(key);    }
public interface AMQPEndpointBuilder              extends                  AMQPEndpointConsumerBuilder, AMQPEndpointProducerBuilder {          default AdvancedAMQPEndpointBuilder advanced() {
this.config = config;    }   public Optional<ZkWorker> findWorkerForTask(        final ImmutableMap<String, ImmutableZkWorker> zkWorkers,        final Task task    )
public interface NettyHttpEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedNettyHttpEndpointProducerBuilder advanced() {
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(RabbitTemplate.class)  @ConditionalOnEnabledHealthIndicator("rabbit")   public static class RabbitHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {
* @see <a href="http:       */      public ResponseList<Status> getRetweetedToMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, true));      }
}      public void destroy() {         final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);          if (lockService != null) {              lockService.clearLockStore(partitionId, lockNamespace);          }
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final float b = y - this.y;     final float c = z - this.z;    return a * a + b * b + c * c;    }
.expect(200, 404)                  .execute();             if (response == null || response.value == null) {                  return -1L;              } else {                  return response.value;
"1: " + getCheckMessage(MSG_KEY_MISMATCH),          };         verify(checkConfig,                 getNonCompilablePath("InputPackageDeclarationDiffDirectory.java"), expected);      }      @Test
public interface StreamEndpointBuilder              extends                  StreamEndpointConsumerBuilder, StreamEndpointProducerBuilder {          default AdvancedStreamEndpointBuilder advanced() {
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple));    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
String messageSelector,               boolean topic,               String durableSubscriptionId) throws Exception {         return createMessageConsumer(session, destinationName, messageSelector, topic, durableSubscriptionId, false);      }      public static MessageConsumer createMessageConsumer(
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return a message for the error.       */     @Message(id = 10831, value = "The master host controller cannot register slave host controllers as it's current running mode is '%s'")      String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);      /**
final PlannerConfig plannerConfig = new PlannerConfig();      final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);     final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);      final DruidOperatorTable operatorTable = new DruidOperatorTable(          ImmutableSet.of(new ThetaSketchSqlAggregator()),          ImmutableSet.of()
*       * @return the message.       */     @Message(id = 10854, value = "Null stream at index %d")      String nullStream(int index);      /**
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
initialPermits += rand;              assertEquals(initialPermits, semaphore.availablePermits());             instances[i].shutdown();              semaphore.acquire(rand);              initialPermits -= rand;
* @should return default value if property name does not exist    * @should not fail with null default value    */  public String getGlobalProperty(String propertyName, String defaultValue);   /**    * Gets the global property that has the given <code>propertyName</code>
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
assertEquals(inDegree1, 0);           assertEquals(inDegree2, 1);           assertEquals(outDegree1, 1);          assertEquals(avDegree, 0.5);       }       @Test
}    public void testMetaDataGetTables() throws SQLException {     getTablesTest(TableType.MANAGED_TABLE.getName(), TableType.VIRTUAL_VIEW.getName());    }    public  void testMetaDataGetTablesHive() throws SQLException {
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override   public void openRegion(HRegionInfo region)   throws RegionServerStoppedException {      LOG.info("Received request to open region: " +        region.getRegionNameAsString());      if (this.stopped) throw new RegionServerStoppedException();
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
@Message(id = 14238, value = "More than one timer found in database with id %s")      RuntimeException moreThanOneTimerFoundWithId(String id);     @Message(id = 14238, value = "The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.")      String timerServiceIsNotActive();     @Message(id = 14239, value = "This EJB does not have any timeout methods")      String ejbHasNoTimerMethods();  }
* @param servers the servers that need to restart.       */      @LogMessage(level = Level.INFO)     @Message(id = 10807, value = "Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s")      void domainModelChangedOnReConnect(Set<ServerIdentity> servers);      /**
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", defaultImpl = BatchServerInventoryViewProvider.class)  @JsonSubTypes(value = {      @JsonSubTypes.Type(name = "legacy", value = SingleServerInventoryProvider.class),      @JsonSubTypes.Type(name = "batch", value = BatchServerInventoryViewProvider.class)
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public class TestConverters {   @Test(timeout = 10000)    public void testTaskSpecToFragmentSpec() {      ByteBuffer procBb = ByteBuffer.allocate(4);      procBb.putInt(0, 200);
}, key);    }    catch (EmptyResultDataAccessException e) {    if (LOG.isDebugEnabled()) {      LOG.debug("Failed to find access token for authentication " + authentication);     }    }
Calendar cal = DateTimeUtils.truncateToMidnight(calendar);    Sun sun = new Sun();    for (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {    setSunPosition(calendar, latitude, longitude, sun);     if (sun.getPosition().getElevation() < SUN_ANGLE) {      return false;     }
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
});          AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();         processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));          processor.invokeWebSocketProtocol(w, "yoWebSocket");          processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent("Disconnect", DISCONNECT, w));
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
class OkHttpRequest implements Runnable {      private final Call call;     OkHttpRequest(Call call) {        this.call = call;      }
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
if (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {        page = SIMPLE_SETUP;       } else if (InitializationWizardModel.INSTALL_METHOD_TESTING.equals(wizardModel.installMethod)) {       page = TESTING_AUTHENTICATION_SETUP;       } else {        page = IMPLEMENTATION_ID_SETUP;       }
public void testSendLotsOfMessagesButOnly3GetThrough() throws Exception {          MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class);          resultEndpoint.expectedMessageCount(3);         resultEndpoint.setResultWaitTime(900);          for (int i = 0; i < messageCount; i++) {              template.sendBody("seda:a", "<message>" + i + "</message>");
template.sendBody("direct:start.timeoutAndCompletionAware", "AGGREGATE1");         assertTrue(timeoutLatch.await(2500, TimeUnit.MILLISECONDS));          template.sendBody("direct:start.timeoutAndCompletionAware", "AGGREGATE2");          template.sendBody("direct:start.timeoutAndCompletionAware", "AGGREGATE3");         assertTrue(completionLatch.await(2500, TimeUnit.MILLISECONDS));          getMockEndpoint("mock:result.timeoutAndCompletionAware").getReceivedExchanges();          assertMockEndpointsSatisfied();
LOG.trace("OpenTracing: start server span=" + span);                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }          }
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
public interface SWFEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSWFEndpointProducerBuilder advanced() {
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
protected void loadMetaService() {          try {             final Map<String, MetaServiceAction> config = (Map<String, MetaServiceAction>) servletConfig.getServletContext().getAttribute(AtmosphereFramework.MetaServiceAction.class.getName());              if (config == null) {                 IOUtils.readServiceFile(AtmosphereFramework.class.getName());              }              for (final Map.Entry<String, MetaServiceAction> action : config.entrySet()) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);         assertFalse(model.getUniqueItems());      }      @Test
ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);      assertEquals(          hashFunction.newHasher().putBytes(littleEndian).hash(),         hashFunction.newHasher().putBytes(bigEndian).hash());      assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());     assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());    }    static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /**
public interface GeoCoderEndpointBuilder extends EndpointProducerBuilder {          default AdvancedGeoCoderEndpointBuilder advanced() {              return (AdvancedGeoCoderEndpointBuilder) this;          }
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
return updatedUnpartitionedSources;      }     private synchronized void schedulePartitionedSource(TaskSource source)      {
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(638);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
assertMockEndpointsSatisfied();         assertResultExchange(result.getExchanges().get(0), true);          PutObjectRequest putObjectRequest = client.putObjectRequests.get(0);          assertEquals(getCamelBucket(), putObjectRequest.getBucketName());
public interface SshEndpointBuilder              extends                  SshEndpointConsumerBuilder, SshEndpointProducerBuilder {          default AdvancedSshEndpointBuilder advanced() {
setPermission(loadPath, FsPermission.valueOf("-rwxrwxrwx"));        try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {         TEST_UTIL.waitUntilAllRegionsAssigned(tableName);          LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);          loader.doBulkLoad(loadPath, table);        }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);   }
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10835, value = IN_SERIES + " is missing groups: %s")      String inSeriesIsMissingGroups(String rolloutPlan);      /**
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/   public void connectTo(final AbstractJobVertex vertex, final ChannelType channelType,     final CompressionLevel compressionLevel) throws JobGraphDefinitionException {   this.connectTo(vertex, channelType, compressionLevel, -1, -1, DistributionPattern.BIPARTITE, true);   }   /**
getMockEndpoint("mock:error").expectedMessageCount(2);         resultEndpoint.expectedBodiesReceivedInAnyOrder("one", "three");          sendMessage("1", "one");          sendMessage("2", "two");
}      @Override     public synchronized void mouseMove() {          if (vizConfig.isSelectionEnable() && rectangleSelection) {              Rectangle rectangle = (Rectangle) currentSelectionArea;
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    /**    * Free the given file or folder from tachyon in-memory (recursively freeing all children     * if a folder)     *     * @param path The TachyonURI path as the input of the command     * @return 0 if command if successful, -1 if an error occurred.
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Validates Username and Password then saved sercurityToken to a variable    */   private void login() throws InvalidLoginException, IOException {   logger.trace("attempting to login");    String url = String      .format("%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s",        WEBSITE, enc(appId), enc(userName), enc(password));
public class FifoCache implements Cache {    private final Cache delegate;   private final LinkedList<Object> keyList;    private int size;    public FifoCache(Cache delegate) {
public interface CxfEndpointBuilder              extends                  CxfEndpointConsumerBuilder, CxfEndpointProducerBuilder {          default AdvancedCxfEndpointBuilder advanced() {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName);   /**    * Gets the global property that has the given <code>propertyName</code>
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10871, value = "Unknown server %s")      IllegalStateException unknownServer(ServerIdentity server);      /**
}   @Test  void testHealth() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
final int offset, final int count) {      checkIsInMultiOrPipeline();      client.zrangeByScoreWithScores(key, min, max, offset, count);     return getTupledSet();    }    @Override
public interface AdvancedPubNubEndpointBuilder              extends                  AdvancedPubNubEndpointConsumerBuilder, AdvancedPubNubEndpointProducerBuilder {          default PubNubEndpointBuilder basic() {
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override    public void create () {     ByteBuffer bytebuffer = BufferUtils.newUnsafeByteBuffer(1000 * 1000);    BufferUtils.disposeUnsafeByteBuffer(bytebuffer);     ByteBuffer bb = BufferUtils.newByteBuffer(8);     CharBuffer cb = BufferUtils.newCharBuffer(8);
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
assertEquals(inDegree1, 0.0);           assertEquals(inDegree2, 1.0);           assertEquals(outDegree1, 1.0);          assertEquals(avDegree, 0.5);       }       @Test
public interface ApnsEndpointBuilder              extends                  ApnsEndpointConsumerBuilder, ApnsEndpointProducerBuilder {          default AdvancedApnsEndpointBuilder advanced() {
@Configuration   @ConditionalOnBean(MongoTemplate.class)  @ConditionalOnEnabledHealthIndicator("mongo")   public static class MongoHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {
public interface RabbitMQEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedRabbitMQEndpointProducerBuilder advanced() {
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* less than zero, or larger than {@code capacity()}       */      public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {         if (index < 0 || index >= capacity()) {              throw new IndexOutOfBoundsException("Invalid index: " + index                      + " - Bytes needed: " + index + ", maximum is "                      + capacity());
*       * @param folder the location       */     public synchronized static void configureExternalStaticResources(String folder) {          Assert.notNull(folder, "'folder' must not be null");          if (!externalStaticResourcesSet) {
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
} else if ("directed".equalsIgnoreCase(key)) {                  if (value instanceof Double) {                      EdgeDirection type = ((Double) value) == 1 ? EdgeDirection.DIRECTED : EdgeDirection.UNDIRECTED;                     edge.setDirection(type);                  } else {                      report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class, "importerGML_error_directedparse", edge.toString()), Issue.Level.WARNING));                  }
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedVelocityEndpointBuilder              extends                  EndpointProducerBuilder {          default VelocityEndpointBuilder basic() {
if (handlers == null) {              throw new NullPointerException("handlers");          }         if (handlers.length == 0 || handlers[0] == null) {              return this;          }
}               final InetAddress inetAddress = InetAddress.getByName(currentAddress);               ServerSocket serverSocket = serverSocketChannel.socket();              serverSocket.setReuseAddress(true);               InetSocketAddress isa;               int port = config.getPort();
SetTransition set = (SetTransition)edge;       String label = set.label().toString();       if ( isLexer ) label = set.label().toString(true);      else if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());       if ( edge instanceof NotSetTransition ) label = "~"+label;       edgeST.add("label", getEdgeLabel(label));      }
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @throws Exception       */      public void process(Exchange exchange) throws Exception {         final SchematronProcessor schematronProcessor = SchematronProcessorFactory.newSchematronEngine(endpoint.getRules());          final Object payload = exchange.getIn().getBody();          final String report;
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
if (value instanceof AsciiString) {              return ((AsciiString) value).parseFloat();          }         return Float.parseFloat(value.toString());      }      @Override
assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();     assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();     assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit
tokenText = "TokenTypes.";          }          else {             final StringBuilder result = new StringBuilder(50);              boolean first = true;              for (int token : tokens) {
)      );     queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);      Assert.assertEquals(1, factory.getSegmentReferences().size());
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should delete global property from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperty(GlobalProperty globalProperty);   /**    * Completely remove the given global properties from the database
}          doRemoveRecord(key, source);          if (isEventsEnabled()) {             publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),                                                  CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                   origin, IGNORE_COMPLETION));          }          return true;
public interface AdvancedDdbEndpointBuilder              extends                  EndpointProducerBuilder {          default DdbEndpointBuilder basic() {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_in() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06-05-2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
private String getConstructorInfo(Constructor<?> constructor) {          Class<?>[] parameterTypes = constructor.getParameterTypes();         String[] parameterTypeNames = JavaAssistUtils.toPinpointParameterType(parameterTypes);          final String constructorSimpleName = MethodDescriptionUtils.getConstructorSimpleName(constructor);          return MethodDescriptionUtils.toJavaMethodDescriptor(constructor.getDeclaringClass().getName(), constructorSimpleName , parameterTypeNames);
public Container<T> maxSize (float width, float height) {   maxSize(new Fixed(width), new Fixed(height));    return this;   }
*       * @return the message.       */     @Message(id = 10843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
@Constraints.Required      public String type;      @Constraints.Required     public Map<String, Object> configuration;      @SerializedName("creator_user_id")      public String creatorUserId;
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);   /**    * Completely remove the given global property from the database
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
.addData("taskId", task.getId())               .addData("dataSource", task.getDataSource())               .emit();           log.debug(e, "Graceful shutdown of task[%s] aborted with exception.");            error = true;          }        } else {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Configuration      public static Option[] configure() {         return configure(COMPONENT);      }  } \ No newline at end of file
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
buf[count++] = ((byte)(0x80 | ((uc >> 6) & 0x3f)));                  buf[count++] = ((byte)(0x80 | (uc & 0x3f)));              } else {                 if(3 >= buf.length - count) {                      flushBuffer();                  }                  buf[count++] =((byte)(0xe0 | ((c >> 12))));
@Test   public void specificPort() throws Exception {    AbstractEmbeddedServletContainerFactory factory = getFactory();   int specificPort = SocketUtils.findAvailableTcpPort(40000);    factory.setPort(specificPort);    this.container = factory      .getEmbeddedServletContainer(exampleServletRegistration());
public int read(String table, String key, Set<String> fields,              HashMap<String, ByteIterator> result) {          if (fields == null) {             StringByteIteartor.putAllAsByteIterators(result, jedis.hgetAll(key));          }          else {              String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);
*/      @Override      public final AtmosphereResource create(AtmosphereConfig config,                                            AtmosphereRequest request,                                             AtmosphereResponse response,                                             AsyncSupport<?> a) {          AtmosphereResource r = null;
bar.expectedMessageCount(0);          MockEndpoint start = getMockEndpoint("mock:start"); start.expectedMessageCount(7);          template.sendBody("activemq:queue:foo", "Hello World");
private String username;    private String password;   private boolean autoCommit;    private Integer defaultTransactionIsolationLevel;    static {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface ActiveMQEndpointBuilder              extends                  ActiveMQEndpointConsumerBuilder, ActiveMQEndpointProducerBuilder {          default AdvancedActiveMQEndpointBuilder advanced() {
Map<String, Object> map = (Map<String, Object>) nestedProperties      .get("properties");    assertNotNull(map);   assertEquals(3, map.size());    assertEquals("foo", ((Map<String, Object>) map.get("map")).get("name"));   }
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedGooglePubsubEndpointBuilder              extends                  AdvancedGooglePubsubEndpointConsumerBuilder, AdvancedGooglePubsubEndpointProducerBuilder {          default GooglePubsubEndpointBuilder basic() {
Configuration t = (Configuration) serializeDeserialize(conf);         assertEquals(conf, (Configuration) serializeDeserialize(conf)); assertTrue(0 == conf.getRestBaseURL().indexOf("http: assertTrue(0 == conf.getSearchBaseURL().indexOf("http:
check = false, init = true, lazy = true, stubevent = true,                  reconnect = "reconnect", sticky = true, proxy = "javassist", stub = "stub",                  cluster = "failover", connections = 1, callbacks = 1, onconnect = "onconnect",                 ondisconnect = "ondisconnect", owner = "owner", layer = "layer", retries = 1,                  loadbalance = "random", async = true, actives = 1, sent = true,                  mock = "mock", validation = "validation", timeout = 2, cache = "cache",                  filter
try {              Object answer;             final XMLStreamReader xmlReader;              if (needFiltering(exchange)) {                 xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, createNonXmlFilterReader(exchange, stream));              } else {                 xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, stream);              }              String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);              if (partialClass != null || partClassFromHeader != null) {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
Compiler compiler = new Compiler();      CompilerOptions options = new CompilerOptions();      options.setLanguageIn(LanguageMode.ECMASCRIPT6_STRICT);     options.setLanguageOut(LanguageMode.ECMASCRIPT5);      options.setCodingConvention(new GoogleCodingConvention());      options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.WARNING);      options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.WARNING);
int length = in.readInt();      byte[] serCondition = new byte[length];     in.readFully(serCondition);      ByteArrayInputStream bais = new ByteArrayInputStream(serCondition);      ObjectInputStream ois = new ObjectInputStream(bais);
"RETURN file.name, dir.name, role.name, readUser.name";          gen.get().addSnippet( "query3", createCypherSnippet( query ) );          result = engine.execute( query )                 .dumpToString();          assertTrue( result.contains("File1") );          assertTrue( result.contains("File2") );          assertTrue( result.contains("Admin1") );
for (int i = 0; i < size; i++) {              map.put(i, i);          }         instance2.getLifecycleService().shutdown();          mapStore.awaitStores();      }
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (handler == null) {                     String p = path.lastIndexOf("/") <= 0 ? "/" : path.substring(0, path.lastIndexOf("/"));                      while (p.length() > 0) {                          handler = map(p, handlers);
}       public void setCategoryWithApiModel(CategoryWithApiModel category) {          this.categoryWithApiModel = category;       }       @XmlElement(name = "name")
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
private void clearLockStore(String name) {          final NodeEngine nodeEngine = mapService.getMapServiceContext().getNodeEngine();         final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);          if (lockService != null) {              final DefaultObjectNamespace namespace = new DefaultObjectNamespace(MapService.SERVICE_NAME, name);              lockService.clearLockStore(partitionId, namespace);
}      public ILock getLock(Object key) {         if (key == null) {              throw new NullPointerException("Retrieving a lock instance with a null key is not allowed!");          }          return getDistributedObject(LockService.SERVICE_NAME, node.getSerializationService().toData(key));
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
+ " with this method. Use ByteBuffer and one of GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT or GL_FLOAT for type. Blame LWJGL");     } else if (buffer instanceof FloatBuffer) {      if (type == GL_FLOAT)      GL20.glVertexAttribPointer(indx, size, type, normalized, stride, (FloatBuffer)buffer);      else       throw new GdxRuntimeException("Can't use " + buffer.getClass().getName() + " with type " + type        + " with this method
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
public interface CassandraEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCassandraEndpointProducerBuilder advanced() {
try {      bytes = input.read(buffer, index, 4096);     } catch (Exception e) {     throw new GdxRuntimeException("Failure reading Vorbis.", e);     }     syncState.wrote(bytes);
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(638);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
final DimensionSelector dimSelector = dims.get(0);          final IndexedInts row = dimSelector.getRow();         if (row == null || row.size() == 0) {            ByteBuffer newKey = key.duplicate();            newKey.putInt(dimSelector.getValueCardinality());            unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
rowChangeBuider.setEventType(eventType);              RowsLogBuffer buffer = event.getRowsBuf(charset.name());              BitSet columns = event.getColumns();             BitSet changeColumns = event.getChangeColumns();              boolean tableError = false;              TableMeta tableMeta = null; if (tableMetaCache != null) {
for (AtmosphereResource r : config.resourcesFactory().findAll()) {              try {                  r.resume().close();             } catch (Exception e) {                  logger.trace("", e);              }          }
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, paging.asPostParameterList(), true));      }
@Test   public void testMultipleAlternativesWithCommonLabel_4() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (i > 0) {                              buf.append(", ");                          }                         element(i, charsetName).toJsonString(buf, charsetName);                      }                      buf.append("]");                      break;
}    public boolean mouseMoved (int screenX, int screenY) {    Object[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (((InputProcessor)items[i]).mouseMoved(screenX, screenY)) return true;     } finally {      processors.end();     }
import java.util.List;  import java.util.regex.Pattern; public final class JavaStepDefinition implements StepDefinition {      private final Method method;      private final Pattern pattern;      private final int timeout;
@Override      public void accept(MethodVisitor visitor, MethodGenerationContext generationContext)      {         checkState(!condition.isEmpty(), "DoWhileLoop does not have a condition set");          Block block = new Block()                  .visitLabel(beginLabel)
setTransform(false);   }  public Container (T actor) {    this();    setActor(actor);   }
new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {        @Override        public Integer execute(Jedis connection) {         connection.psubscribe(jedisPubSub, patterns);          return 0;        }      }.runWithAnyNode();
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_cn_4() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
try {              Object answer;             final XMLStreamReader xmlReader;              if (needFiltering(exchange)) {                 xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, createNonXmlFilterReader(exchange, stream));              } else {                 xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, stream);              }              String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);              if (partialClass != null || partClassFromHeader != null) {
}      traverseAndRemoveUnusedReferences(root);     GatherGetterAndSetterProperties.update(compiler, externs, root);    }    /**
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
}    @Override   protected State getIntermediateState() {      return new State(          cssNames == null ? null : Maps.newHashMap(cssNames),          exportedNames == null ? null :
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
* before growing the backing table. */    public ObjectMap (int initialCapacity, float loadFactor) {     if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);     capacity = MathUtils.nextPowerOfTwo(initialCapacity);     if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
invalidateHierarchy();    }   public CharSequence getText () {     return text;    }
}          }          if (isStatisticsEnabled()) {             statistics.addGetTimeNanos(System.nanoTime() - start);          }          CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);          final Object process = entryProcessor.process(entry, arguments);
* @should delete global property from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperty(GlobalProperty globalProperty);   /**    * Completely remove the given global properties from the database
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}      public boolean returnsResponse() {         return true;      }      public Object getResponse() {
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
out.writeInt(migrationData.size());          for (Map.Entry<String, Data> entry : migrationData.entrySet()) {              out.writeUTF(entry.getKey());             out.writeData(entry.getValue());          }      }
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
*       * @return the error message       */     @Message(id = 10834, value = "%s recognizes only %s as children: %s")      String unrecognizedChildren(String parent, String children, String parentSpec);      /**
private final class ExchangeNotifier extends EventNotifierSupport {          public void notify(EventObject event) throws Exception {              if (event instanceof ExchangeCreatedEvent) {
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(246);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {System.out.println($ctx.toStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
}      }     private boolean isContentAlwaysEmpty(@SuppressWarnings("unused") H msg) {          return false;      }
*       * @return the message.       */     @Message(id = 10869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
*/      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() +                  "statuses/public_timeline.json", false));      }
@Override      protected void doStop() throws Exception {          if (channel != null) {             LOG.debug("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
@Test      public void testGrabbingListOfEntries() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(1);          mock.assertIsSatisfied();          Exchange exchange = mock.getExchanges().get(0);
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
*  Is class declared as abstract.           *  @return true if class is declared as final           */         private boolean isDeclaredAsAbstract() {              return declaredAsAbstract;          }      }
SimpleRegistry registry = new SimpleRegistry();         registry.bind("curator", client);          producerContext = new DefaultCamelContext(registry);
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class add_write_notification_log_args implements org.apache.thrift.TBase<add_write_notification_log_args, add_write_notification_log_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_write_notification_log_args>   {      private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol
SimpleRegistry registry = new SimpleRegistry();          CxfEndpointConfigurer configurer = mock(CxfEndpointConfigurer.class);          Processor processor = mock(Processor.class);         registry.bind("myConfigurer", configurer);          CamelContext camelContext = new DefaultCamelContext(registry);          CxfComponent cxfComponent = new CxfComponent(camelContext); CxfEndpoint endpoint = (CxfEndpoint)cxfComponent.createEndpoint(routerEndpointURI + "&cxfEndpointConfigurer=
GL10 gl = app.getGraphics().getGL10();     gl.glClear( GL10.GL_COLOR_BUFFER_BIT );    camera.setMatrices( app.getGraphics() );     renderBox( gl, groundBody, 50, 1 );
currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);              Pattern p = Pattern.compile(foundAuthor);             Matcher matcher = p.matcher(sectionStartTagToken.word());              if (matcher.find()) {                int authorMentionStart = matcher.start() + sectionStartTagCharBegin;                int authorMentionEnd = matcher.end() + sectionStartTagCharBegin;
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, int batchSize) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);   }
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedJmsEndpointBuilder              extends                  AdvancedJmsEndpointConsumerBuilder, AdvancedJmsEndpointProducerBuilder {          default JmsEndpointBuilder basic() {
* @return {@link   public boolean[] ensureCapacity (int additionalCapacity) {     int sizeNeeded = size + additionalCapacity;    if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));     return items;    }
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test   public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {console.log($ctx.toStringTree(null, this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
if (body.endsWith("3") || body.endsWith("10")) {                                              log.info("5th message received.  Rolling back.");                                              exchange.getOut().setFault(true);                                              exchange.getOut().setBody("5th message received.  Rolling back.");
*       * @return the message.       */     @Message(id = 10864, value = "Error obtaining input stream from URL %s -- %s")      String errorObtainingUrlStream(String url, String message);      /**
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public long renew(Token<?> token,                         Configuration conf) throws IOException {       UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();        InetSocketAddress serviceAddr = SecurityUtil.getTokenServiceAddr(token);        return
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(getNotAllowedExceptionMessage("helloForRole"), e.getCause().getMessage());          }      }
float newCameraLocation = Math.max(newCameraLocationX, newCameraLocationY);          graphDrawable.cameraLocation[0] = limits.getMinXoctree() + graphWidth / 2;         graphDrawable.cameraLocation[1] = limits.getMinYoctree() + graphHeight / 2;          graphDrawable.cameraLocation[2] = newCameraLocation;          graphDrawable.cameraTarget[0] = graphDrawable.cameraLocation[0];
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}      @FixMethodOrder(MethodSorters.NAME_ASCENDING)     static class DummySortWithNameAsc {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getWeeklyTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json", false));      }
public interface HazelcastListEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastListEndpointProducerBuilder advanced() {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Builder for endpoint producers for the Azure Storage Blob Service       * component.       */     public interface BlobServiceEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedBlobServiceEndpointProducerBuilder advanced() {
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();  private static volatile Set<String> actualStartupOrder;   /**    * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
if (node.getNodeType() == Node.ELEMENT_NODE) {              Document doc = node.getOwnerDocument();              if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {                 doc.renameNode(node, SPRING_NS, node.getLocalName());              }          }          NodeList list = node.getChildNodes();
* Removes try/catch/finally statements for easier debugging.     */    void removeTryCatchFinally() {     logger.fine("Remove try/catch/finally");      startPass("removeTryCatchFinally");      RemoveTryCatch r = new RemoveTryCatch(this);      process(r);
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedJt400EndpointBuilder              extends                  AdvancedJt400EndpointConsumerBuilder, AdvancedJt400EndpointProducerBuilder {          default Jt400EndpointBuilder basic() {
@Override      public ByteBuf buffer(int initialCapacity, int maxCapacity) {       if (initialCapacity <= capacity) {          return buffer();        } else {          throw new IllegalArgumentException();
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTextures(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
@Configuration   @ConditionalOnBean(SolrServer.class)  @ConditionalOnEnabledHealthIndicator("solr")   public static class SolrHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return new ErrorCommand(ERROR_CLIENT);          }          if (st.hasMoreTokens()) {             flag = Integer.parseInt(st.nextToken());          } else {              return new ErrorCommand(ERROR_CLIENT);          }
StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ProjectControllerUIImpl.class, "ProjectControllerUI.status.opened", fileName));              }          };         if (loadTask instanceof LongTask) {              longTaskExecutor.execute((LongTask) loadTask, loadRunnable);          } else {              longTaskExecutor.execute(null, loadRunnable);
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
getNewBlockId();        length -= blockSize;      }     setComplete(length);    }    @Override
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@Override      public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {          String clientId = r.uuid();         long now = System.currentTimeMillis();          List<Object> result = new ArrayList<Object>();
@Category(CommonCriteria.class)  public class AuthenticationTestCase {     private static final String SERVER_HOST_PORT = TestSuiteEnvironment.getHttpAddress() + ":" + TestSuiteEnvironment.getHttpPort(); private static final String WAR_URL = "http:      /*
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override    public boolean ignore(String targetName) {    return !Arrays.asList("Java", "CSharp", "Python2", "Python3", "Node", "Cpp").contains(targetName);    }   }
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
command.toString(), repeatCount);                   if (command.compareTo(oldPercent) > 0) {                       for (int i = 0; i < repeatCount; i++) {                          Thread.sleep(100);                           if (BindingType.brightness.equals(type)) {                               sendIncrease(bulb, rgbwSteps, bridgeId);                           } else if (BindingType.colorTemperature.equals(type)) {
}          doRemoveRecord(key, source);          if (isEventsEnabled()) {             publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),                                                  CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                   origin, IGNORE_COMPLETION));          }          return null;
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
Exclusion(String groupId, String artifactId) {     Assert.notNull(groupId, "GroupId must not be null");    Assert.notNull(artifactId, "ArtifactId must not be null");     this.groupId = groupId;     this.artifactId = artifactId;    }
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedReactiveStreamsEndpointBuilder              extends                  AdvancedReactiveStreamsEndpointConsumerBuilder, AdvancedReactiveStreamsEndpointProducerBuilder {          default ReactiveStreamsEndpointBuilder basic() {
long taken = watch.stop();          assertEquals(taken, watch.taken());         assertTrue("Should take approx 200 millis, was: " + taken, taken > 150);          watch.restart();          Thread.sleep(100);          taken = watch.stop();          assertEquals(taken, watch.taken());         assertTrue("Should take approx 100 millis, was: " + taken, taken > 50);      }      public void testStopWatchTaken() throws Exception {
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getUserTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json"                  , null, paging.asPostParameterList(), true));      }
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.join(FILE_PREFIX + (DIR_WIDTH)).getPath()));      mFileSystemMaster.delete(new AlluxioURI(MOUNT_URI).join(DIR_TOP_LEVEL),         DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(true).setUnchecked(false));      checkPersistedDirectoriesDeleted(3, ufsMount, Collections.EMPTY_LIST);    }
public interface LogEndpointBuilder extends EndpointProducerBuilder {          default AdvancedLogEndpointBuilder advanced() {              return (AdvancedLogEndpointBuilder) this;          }
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    @Override   public void close() {      synchronized (this) {        checkClosed();        closed = true;
* @throws CheckstyleException if an error occurs.       */      static ImportControl load(final URI uri) throws CheckstyleException {         InputStream inputStream;          try {              inputStream = uri.toURL().openStream();          }
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
public interface AdvancedSqlStoredEndpointBuilder              extends                  EndpointProducerBuilder {          default SqlStoredEndpointBuilder basic() {
*       * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }  }
.retLong();      }     private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)      {          Parameter blockIndex = arg("blockIndex", int.class);          Parameter blockPosition = arg("blockPosition", int.class);
*    * @param T The data type that the comparator works on.   */ public abstract class TypeComparator<T>  {    /**    * Computes a hash value for the given record. The hash value should include all fields in the record
String ufsUri = resolution.getUri().toString();                UnderFileSystem ufs = resolution.getUfs();                AlluxioURI parentUri = alluxioUriToDel.getParent();               if (!ufsSyncChecker.isDirectoryInSync(parentUri)) {                  if (delInode.isFile()) {                    if (!ufs.deleteFile(ufsUri)) {
private String findIndexFileInDirectory(File directory) {          for (String fileName : SimpleWebServer.INDEX_FILE_NAMES) {              File indexFile = new File(directory, fileName);             if (indexFile.isFile()) {                  return fileName;              }          }
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private static final String EMPTY_DIAGNOSTICS = "";    private static final String RM_WEBAPP_ADDR =       WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration());    private boolean isSecurityEnabled;    private RMContext rmContext;
}              if (resources.contains(r)) {                 return this;              }
}      @Override     public synchronized boolean updateWorld() {          boolean repositioned = octree.repositionNodes();          boolean updated = dataBridge.updateWorld();
@Override      public byte[] decodeMessage() {         byte[] data = new byte[14];          data[0] = 0x0D;          data[1] = RFXComBaseMessage.PacketType.CURRENT.toByte();
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
if (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {      Gdx.app.debug("IOSPreferences", "Failed to write NSDictionary to file " + file);     }    pool.drain();    }   }
* @should evict all entries of search locale cache    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public GlobalProperty saveGlobalProperty(GlobalProperty gp);   /**    * Allows code to be notified when a global property is created/edited/deleted.
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables();   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc
*/    @Nullable   public abstract byte[] getCacheKey();  }
public interface AdvancedIrcEndpointBuilder              extends                  AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {          default IrcEndpointBuilder basic() {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface JiraEndpointBuilder              extends                  JiraEndpointConsumerBuilder, JiraEndpointProducerBuilder {          default AdvancedJiraEndpointBuilder advanced() {
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
import org.jboss.logging.MessageLogger;  /**  * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain * controller logger messages. See http:   * JBAS message id blocks.   * <p/>
private static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);  private static final int DEFAULT_NUMBER_OF_READ_BUFFERS = 256;  private static final int DEFAULT_NUMBER_OF_WRITE_BUFFERS = 256; private static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 64 * 1024;   private static final boolean DEFAULT_ALLOW_SPILLING = true;
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private String validate(ModelNode param, ModelNode namespaces) {          String failure = typeValidator.validateParameter(NAMESPACE, param);          String name = param.asProperty().getName();         if (failure == null && namespaces.isDefined()) {              for (ModelNode node : namespaces.asList()) {                  if (name.equals(node.asProperty().getName())) {                      failure = "Namespace with prefix " + name + " already registered with schema URI " + node.asProperty().getValue().asString();
*       * @return the message.       */     @Message(id = 10855, value = "Invalid byte stream.")      String invalidByteStream();      /**
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (maskPayload) {              int random = (int) (Math.random() * Integer.MAX_VALUE);              mask = ByteBuffer.allocate(4).putInt(random).array();             out.writeBytes(mask);              int counter = 0;              for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
, (args = args.rest()).first()        , args.rest());     case 12:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
RangeTransition range = (RangeTransition)edge;       String label = range.label().toString();       if ( isLexer ) label = range.toString();      else if ( grammar!=null ) label = range.label().toString(grammar.getTokenDisplayNames());       edgeST.add("label", getEdgeLabel(label));      }      else {
} else if (e instanceof TimeoutException) {      logger.debug("[{}]: Websocket timeout error", connection.getHost());     } else {     logger.debug("[{}]: Websocket error: {}", connection.getHost(), e.getMessage());     }    }
final ClosingRetentionStrategyConfig closingRetentionStrategyConfig = clusterConfigService.get(ClosingRetentionStrategyConfig.class);         final DeletionRetentionStrategyConfig deletionRetentionStrategyConfig = clusterConfigService.get(DeletionRetentionStrategyConfig.class);          if (closingRetentionStrategyConfig == null) {              final ClosingRetentionStrategyConfig closingConfig = ClosingRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
* @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName);      /**
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
message.getHeader(ChronicleEngineConstants.DEFAULT_VALUE))              );          } else {             QueueView.Excerpt<Object, Object> excerpt = queueView.get().getExcerpt(index.longValue());              message.setHeader(ChronicleEngineConstants.PATH, excerpt.topic());              message.setBody(excerpt.message());
stats.order(TermsStatsFacet.ComparatorType.fromString(order.toString().toLowerCase()));          stats.size(size);         stats.facetFilter(standardFilters(range, filter));          srb.addFacet(stats);
public interface AdvancedAsteriskEndpointBuilder              extends                  AdvancedAsteriskEndpointConsumerBuilder, AdvancedAsteriskEndpointProducerBuilder {          default AsteriskEndpointBuilder basic() {
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNanos(System.nanoTime() - start);          }          return result;      }
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
}      }     Entry(Response response) {        this.url = response.request().url().toString();        this.varyHeaders = HttpHeaders.varyHeaders(response);        this.requestMethod = response.request().method();
}          if (model == null) {             model = new EdgeDataTableModel(graph.getEdgesAndMetaEdges().toArray(), columns.toArray(new EdgeDataColumn[0]));              table.setModel(model);          } else {             model.setEdges(graph.getEdgesAndMetaEdges().toArray());              model.setColumns(columns.toArray(new EdgeDataColumn[0]));          }
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
private String keySerializerClass;      @UriParam(label = "producer", defaultValue = "1")     private String requestRequiredAcks = "1";      @UriParam(label = "producer", defaultValue = "33554432")      private Integer bufferMemorySize = 33554432;
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void shouldFindTransitiveClosureInWholeMatrix() {    final TestTransitiveClosure transitiveClosure = new TestTransitiveClosure();    transitiveClosure.setPhase(3);   transitiveClosure.setNumberOfPartitions(7);    final SopremoTestPlan sopremoTestPlan = new SopremoTestPlan(transitiveClosure);    String nullInput = SopremoTest.getResourcePath("null.json");
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
MBeanServerPlugin delegate = null;          final boolean readOnly = false;          try {             delegate = findDelegateForNewObject(name);              if (delegate.shouldAuthorize()) {                  authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);              }
public interface AdvancedCometdEndpointBuilder              extends                  AdvancedCometdEndpointConsumerBuilder, AdvancedCometdEndpointProducerBuilder {          default CometdEndpointBuilder basic() {
}    }   public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {      if (INACTIVE) {        return;      }
* @return {@link   public boolean[] ensureCapacity (int additionalCapacity) {     int sizeNeeded = size + additionalCapacity;    if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));     return items;    }
}      private static ModelControllerClient createClient2() throws UnknownHostException {         return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddressNode1()),                  TestSuiteEnvironment.getServerPort() + 300,                  Authentication.getCallbackHandler());      }
public interface AdvancedVmEndpointBuilder              extends                  AdvancedVmEndpointConsumerBuilder, AdvancedVmEndpointProducerBuilder {          default VmEndpointBuilder basic() {
public class ASMSerializerFactory implements Opcodes {     protected final ASMClassLoader classLoader             = new ASMClassLoader();      private final AtomicLong       seed                    = new AtomicLong();
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
runDelegatedTasks(serverResult, serverEngine);              cTOs.compact();              sTOc.compact();         } while (isHandshaking(clientResult) || isHandshaking(serverResult));      }      private static boolean isHandshaking(SSLEngineResult result) {
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);          }          return result;      }
public interface AdvancedWordpressEndpointBuilder              extends                  AdvancedWordpressEndpointConsumerBuilder, AdvancedWordpressEndpointProducerBuilder {          default WordpressEndpointBuilder basic() {
MockEndpoint result = getMockEndpoint("mock:result");          result.expectedMinimumMessageCount(2);           result.expectedBodiesReceived("Message 1c", "Message 2b");
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers, "mBlockIdsOnTiers");      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      @Override     public synchronized List<Node> getSelectedUnderlyingNodes() {          List<Node> selected = new ArrayList<>();          for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {              NodeModel nodeModel = itr.next();
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
}   @Test  void testHealth() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassCastException.class))          );      }
public void process(Exchange exchange) throws Exception {                          String id = exchange.getIn().getHeader("messageId", String.class);                          if (id.equals("2")) {                             throw new IllegalArgumentException("Damn I cannot handle id 2");                          }                      }                  }).to("mock:result");
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
catch(Throwable e)    {    if(!(e instanceof CompilerException))    throw new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);    else     throw (CompilerException) e;    }
@Test(expected = DuplicateConceptNameException.class)    @Verifies(value = "should fail if there is a duplicate unretired preferred name in the same locale", method = "validate(Object,Errors)")    public void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {    Context.setLocale(new Locale("en"));     Concept concept = Context.getConceptService().getConcept(5497);     ConceptName preferredName = new ConceptName("preferred name", Context.getLocale());     concept.setPreferredName(preferredName);
public void setup() throws Http2Exception {          connection = new DefaultHttp2Connection(false);          for (int i = 0; i < numStreams; ++i) {             connection.local().createStream(toStreamId(i));          }      }
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
* @param task the task to add.       * @throws NullPointerException if task is null       */     public void addTaskAndWakeup(Runnable task) {          taskQueue.add(task);          if (!selectNow) {              selector.wakeup();
return style;    }   public void setText (CharSequence text) {     if (text == null) throw new IllegalArgumentException("text cannot be null.");     if (text.equals(this.text)) return;     this.text = text;
logger.debug("NODE {}: Retry timout: Can't advance", node.getNodeId());        break;       }      }
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
Data key = next.getKey();                  CacheRecord record = next.getValue();                  iter.remove();                 cache.putRecord(key, record);              }          }          data.clear();
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
postAppend(entry, EnvironmentEdgeManager.currentTime() - start);        } catch (Exception e) {         LOG.fatal("Could not append. Requesting close of wal", e);          requestLogRoll();          throw e;        }
protected void handleQPoll(String[] args) {          long timeout = 0;          if (args.length > 1) {             timeout = Long.parseLong(args[1]);          }          try {              println(getQueue().poll(timeout, TimeUnit.SECONDS));
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of("runs")));          when(request.getParameterValues("runs")).thenReturn(new String[]{"1"});          when(response.getWriter()).thenReturn(output);
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
public interface AdvancedJpaEndpointBuilder              extends                  AdvancedJpaEndpointConsumerBuilder, AdvancedJpaEndpointProducerBuilder {          default JpaEndpointBuilder basic() {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
pausingLoader.awaitPause();          hz3.getLifecycleService().terminate();         assertClusterSizeEventually(2, nodes[0]);          pausingLoader.resume();
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedHdfsEndpointBuilder              extends                  AdvancedHdfsEndpointConsumerBuilder, AdvancedHdfsEndpointProducerBuilder {          default HdfsEndpointBuilder basic() {
Assert.assertEquals(2, result.size());        hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()            .map(regionName -> regionName.split("\\.")[1]).collect(Collectors.toList()));       ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());        result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));        Assert.assertEquals(0, result.size());
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (value instanceof AsciiString) {              return ((AsciiString) value).parseDouble();          }         return Double.parseDouble(value.toString());      }  }
private Map<String, String> defaultComponentOptions;      private Map<String, String> defaultEndpointOptions;     ConnectorModel(String componentName, String className) {          this.componentName = componentName;          this.className = className;          this.lines = Suppliers.memorize(() -> findCamelConnectorJSonSchema());
final Sink result = new Sink("result.json").withInputs(join);    expectedPlan.setSinks(result);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.parseLong(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
*/      public ResponseList<Status> getUserTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json"                  , true));      }
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
AttributeType attributeType = AttributeType.STRING;             if (type.equalsIgnoreCase("boolean") || type.equalsIgnoreCase("bool")) {                  attributeType = dynamic ? AttributeType.DYNAMIC_BOOLEAN : AttributeType.BOOLEAN;             } else if (type.equalsIgnoreCase("integer") || type.equalsIgnoreCase("int")) {                  attributeType = dynamic ? AttributeType.DYNAMIC_INT : AttributeType.INT;              } else if (type.equalsIgnoreCase("long")) {                  attributeType = dynamic ? AttributeType.DYNAMIC_LONG : AttributeType.LONG;
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
*       * @return the message.       */     @Message(id = 10855, value = "Invalid byte stream.")      String invalidByteStream();      /**
protected void flushDirtyLogs() {          log.debug("Checking for dirty logs to flush...");         final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();          for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {              final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();              final Log kafkaLog = topicAndPartitionLogEntry.getValue();
final long callId;      final long callStartNanos;     PrintingEventListener(long callId, long callStartNanos) {        this.callId = callId;        this.callStartNanos = callStartNanos;      }
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final boolean registerRuntimeOnly = context.isRuntimeOnlyRegistrationValid();         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, 1, 1);          final ManagementResourceRegistration registration = subsystem.registerSubsystemModel(SecuritySubsystemRootResourceDefinition.INSTANCE);          registration.registerOperationHandler(DESCRIBE, GenericSubsystemDescribeHandler.INSTANCE, GenericSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);
if (length == 0) {              return ChannelBuffers.EMPTY_BUFFER;          }         ChannelBuffer buf = ChannelBuffers.buffer(length);          buf.writeBytes(this, readerIndex, length);          readerIndex += length;          return buf;
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedMina2EndpointBuilder              extends                  AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {          default Mina2EndpointBuilder basic() {
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.trace("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null ? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.trace("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().shutdown();              }          };
if (writeBatchSize > 1) {              failMap = doStoreUsingBatchSize(delayedEntries);          } else {             failMap = processInternal((List) delayedEntries);          }          return failMap;      }
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), endsWith("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
String methodKey = method + "." + key;           Number n = getNumbers().get(methodKey);           if (n != null) {              return n.longValue();           }           String value = getMethodParameter(method, key);           if (StringUtils.isEmpty(value)) {
assertSizeAndLoadCount(map);          hz3.getLifecycleService().terminate();         assertClusterSizeEventually(2, nodes[0]);          map.loadAll(true);          assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);
public interface RestEndpointBuilder              extends                  RestEndpointConsumerBuilder, RestEndpointProducerBuilder {          default AdvancedRestEndpointBuilder advanced() {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);                  } else if ("javax.ws.rs.DefaultValue".equals(item.annotationType().getName())) {                      try {                         rsDefault = (String) item.annotationType().getMethod("value").invoke(item);                      } catch (Exception ex) {                          LOGGER.error("Invocation of value method failed", ex);                      }
.setMeasurementUnit(MeasurementUnit.MILLISECONDS)              .setAllowExpression(true)              .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)             .setDefaultValue(new ModelNode().set(15000L))              .build();      static final SimpleAttributeDefinition CONCURRENCY_LEVEL = new SimpleAttributeDefinitionBuilder(ModelKeys.CONCURRENCY_LEVEL, ModelType.INT, true)
public interface DrillEndpointBuilder extends EndpointProducerBuilder {          default AdvancedDrillEndpointBuilder advanced() {              return (AdvancedDrillEndpointBuilder) this;          }
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
attr = bindingGroup.get(DEFAULT_INTERFACE);          writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());         if (fromServer && bindingGroup.hasDefined(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() >= 0) {              attr = bindingGroup.get(PORT_OFFSET);              writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());          }
public interface AtmosEndpointBuilder              extends                  AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {          default AdvancedAtmosEndpointBuilder advanced() {
final double min, final int offset, final int count) {      checkIsInMultiOrPipeline();      client.zrevrangeByScoreWithScores(key, max, min, offset, count);     return getTupledSet();    }    @Override
public void test_cn_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年5月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @should set uuid on implementation id global property    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public void setImplementationId(ImplementationId implementationId);   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is
}          if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {             LOG.debug("Building gRPC server on " + configuration.getHost() + ":" + configuration.getPort());              serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));          } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {             LOG.debug("Building gRPC server on <any address>" + ":"
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param moduleClassLoader class loader used to load Checkstyle       *          core and custom modules       */     public PackageObjectFactory(Set<String> packageNames,              ClassLoader moduleClassLoader) {          if (moduleClassLoader == null) {              throw new IllegalArgumentException(
writerIdleTimeout =                      timer.newTimeout(this, writerIdleTimeMillis, TimeUnit.MILLISECONDS);                  try {                     channelIdle(ctx, IdleState.WRITER_IDLE, lastWriteTime);                  } catch (Throwable t) {                      fireExceptionCaught(ctx, t);                  }
nodeE.appendChild(positionXE);              Element positionYE = createNodePositionY(document, n);              nodeE.appendChild(positionYE);             if (minZ != 0f || maxZ != 0f) {                  Element positionZE = createNodePositionZ(document, n);                  nodeE.appendChild(positionZE);              }
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
positionKey2E.setAttribute("attr.type", "float");              positionKey2E.setAttribute("for", "node");              root.appendChild(positionKey2E);             if (minZ != 0f || maxZ != 0f) {                  Element positionKey3E = document.createElement("key");                  positionKey3E.setAttribute("id", "z");                  positionKey3E.setAttribute("attr.name", "z");
public interface DirectEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedDirectEndpointProducerBuilder advanced() {
* TODO: pass this in rather than create it here if we wind up using     * this in more place.  Right now it's only used in testOnTreebank.     */   protected Function<List<? extends HasWord>, List<TaggedWord>> tagger;    public EvaluateTreebank(LexicalizedParser parser) {      this(parser.getOp(), parser.lex, parser);
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Class<?> c = makeClass(className, proceedOnExceptions);          if (c != null) {            if (!classes.add(c)) {             LOG.warn("Ignoring duplicate class " + className);            }          }        }
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   if (secConn != null && !secConn.isClosed()) {     Costs secCost = new Costs();
public final List<String> calls = new ArrayList<>();    @Override   public synchronized boolean verify(String hostname, SSLSession session) {      calls.add("verify " + hostname);      return true;    }
((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);         HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());          IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());          anotherClientMap.evictAll();
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
{                          throw new WebApplicationException( badRequest( e ) );                      }                     throw new WebApplicationException( e, serverError( e ) );                  }                  finally                  {
*/      public ResponseList<Status> getHomeTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", true));      }
public interface AdvancedJooqEndpointBuilder              extends                  AdvancedJooqEndpointConsumerBuilder, AdvancedJooqEndpointProducerBuilder {          default JooqEndpointBuilder basic() {
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = this.rest.getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
*       * @return the message.       */     @Message(id = 10838, value = "Unexplained failure")      String unexplainedFailure();      /**
public interface AdvancedFacebookEndpointBuilder              extends                  AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {          default FacebookEndpointBuilder basic() {
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getFriendsTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json", true));      }      /**
);         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypesWithoutHash(), buildPages.getTypesWithoutHash()))                  .row("20", 1020L, 2020L, "20", 30L, 40L)                  .row("21", 1021L, 2021L, "21", 31L, 41L)                  .row("22", 1022L, 2022L, "22", 32L, 42L)
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/    void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,        Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {     logger.fine("Strip code");      startPass("stripCode");      StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,          stripTypePrefixes, stripNamePrefixes);
@Configuration   @ConditionalOnClass(JdbcTemplate.class)   @ConditionalOnBean(DataSource.class)  @ConditionalOnEnabledHealthIndicator("db")   public static class DataSourcesHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>     implements InitializingBean {
return group.id();              }             String msg = group.id() + " already exists with a different size: " + group.memberCount();              logger.severe(msg);              throw new IllegalStateException(msg);          }
if (docData.charAt(0) == 65279)                  docData = docData.substring(1);              doc = parser.parseInput(docData, baseUri);
rect(i000, i100, i110, i010);      rect(i101, i001, i011, i111);      index(i000, i001, i010, i011, i110, i111, i100, i101);    } else if (primitiveType == GL10.GL_POINTS) {      ensureRectangleIndices(2);      rect(i000, i100, i110, i010);      rect(i101, i001, i011, i111);
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
assertThat(connector.getHost()).isEqualTo("127.0.0.1");          assertThat(connector.getAcceptQueueSize()).isEqualTo(1024);          assertThat(connector.getReuseAddress()).isTrue();         assertThat(connector.getSoLingerTime()).isEqualTo(30);          assertThat(connector.getIdleTimeout()).isEqualTo(30000);          assertThat(connector.getName()).isEqualTo("test-http-connector");
public interface OptaPlannerEndpointBuilder              extends                  OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {          default AdvancedOptaPlannerEndpointBuilder advanced() {
public void test_cn_3() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月6日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
TypeEnv env = pair.env;      FunctionType boundFunType = pair.type.getFunTypeIfSingletonObj();      if (!pair.type.isSubtypeOf(commonTypes.topFunction())) {       warnings.add(       JSError.make(boundFunNode, GOOG_BIND_EXPECTS_FUNCTION, boundFunType));      }      if (boundFunType == null
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
@Test   public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedHazelcastTopicEndpointBuilder              extends                  AdvancedHazelcastTopicEndpointConsumerBuilder, AdvancedHazelcastTopicEndpointProducerBuilder {          default HazelcastTopicEndpointBuilder basic() {
* @should delete global properties from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperties(List<GlobalProperty> globalProperties);   /**    * Save the given global property to the database. If the global property already exists,
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
cfg.setThreadModel(ThreadModel.MANUAL);              cfg.getSessionConfig().setTcpNoDelay(true);              cfg.getSessionConfig().setKeepAlive(true);             int timeout = getConnectTimeout();              cfg.setConnectTimeout(timeout < 1000 ? 1 : timeout / 1000);              connector.getFilterChain().addLast("codec", new ProtocolCodecFilter(new MinaCodecAdapter(getCodec(), getUrl(), this)));
}    }   public synchronized void delete(int fileId, boolean recursive) {      if (INACTIVE) {        return;      }
return style;    }   public void setText (CharSequence text) {     if (text == null) throw new IllegalArgumentException("text cannot be null.");     if (text.equals(this.text)) return;     this.text = text;
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
constructor.ret();      }     private static void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)      {          classDefinition.declareMethod(                  a(PUBLIC),
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
t = newT;                  }                 connectPromise.tryFailure(t);                  closeIfClosed();              } finally {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
doAnnotation(annotation, backend, serverURL, message, 0);        } catch (Throwable t) {         log.err("Could not annotate via server! Trying to annotate locally...", t);          StanfordCoreNLP corenlp = new StanfordCoreNLP(properties);          corenlp.annotate(annotation);        } finally {
});          AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();         processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));          processor.invokeWebSocketProtocol(w, "yoWebSocket");          processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent("Close", WebSocketEventListener.WebSocketEvent.TYPE.CLOSE, w));
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
) throws IOException {      try {       ugi.checkTGTAndReloginFromKeytab();        return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {          @Override          public Token<?> run() throws IOException {
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface IPFSEndpointBuilder extends EndpointProducerBuilder {          default AdvancedIPFSEndpointBuilder advanced() {              return (AdvancedIPFSEndpointBuilder) this;          }
@Override    public String getString (String key) {    Object value = nsDictionary.get(convertKey(key));     if (value == null) return "";     return value.toString();    }
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void test_Decode_Return_Request_Event_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(getNotAllowedExceptionMessage("helloForRoles"), e.getCause().getMessage());          }      }
public interface AdvancedJingEndpointBuilder              extends                  EndpointProducerBuilder {          default JingEndpointBuilder basic() {
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);      }      private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);      }  }
public interface PdfEndpointBuilder extends EndpointProducerBuilder {          default AdvancedPdfEndpointBuilder advanced() {              return (AdvancedPdfEndpointBuilder) this;          }
@Constraints.Required      public String type;      @Constraints.Required     public Map<String, Object> configuration;      @SerializedName("creator_user_id")      public String creatorUserId;
*/      private static final Set<String> ALLOWED_TAGS = ImmutableSortedSet.of(              "a", "abbr", "acronym", "address", "area", "b", "bdo", "big",             "blockquote", "br", "caption", "cite", "code", "colgroup", "del",             "div", "dfn", "dl", "em", "fieldset", "h1", "h2", "h3", "h4", "h5",             "h6", "hr", "i", "img", "ins",
private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {          public void timeout(Exchange oldExchange, int index, int total, long timeout) {             assertEquals(1000, timeout);              assertEquals(3, total);              assertEquals(0, index);              assertNotNull(oldExchange);
NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));          } catch (IOException ioe) {            LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId()               + " will not be in TachyonStorage.");            mShouldCacheCurrentBlock = false;          }        } else {
return delegate.getTopScope();      }     @Override protected State getIntermediateState() {        return delegate.getIntermediateState();      }     @Override protected void setIntermediateState(State state) {        delegate.setIntermediateState(state);      }    }
}      @FixMethodOrder(MethodSorters.JVM)     static class DummySortJvm {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
}         if (matcher.group(2).equalsIgnoreCase("hive.server2.authentication.kerberos.principal")              && !(connParams.getSessionVars().containsKey(JdbcConnectionParams.AUTH_TYPE) && connParams                  .getSessionVars().get(JdbcConnectionParams.AUTH_TYPE)                  .equalsIgnoreCase(JdbcConnectionParams.AUTH_TOKEN))
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
response.get(FAILURE_DESCRIPTION).set("Operation handler failed to complete");                              }                              response.get(OUTCOME).set(FAILED);                             response.get(ROLLED_BACK).set(true);                              return resultAction = ResultAction.ROLLBACK;
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
TachyonException {      String format = "%-10s%-25s%-15s%-15s%-5s\n";      return String.format(format, FormatUtils.getSizeFromBytes(size),         CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),         "In Memory", testUser, tUri.getPath());    }    @Test
public interface SchedulerEndpointBuilder extends EndpointConsumerBuilder {          default AdvancedSchedulerEndpointBuilder advanced() {              return (AdvancedSchedulerEndpointBuilder) this;          }
LOG.info("Verifying the reading data...");          for (int pId = mLeft; pId < mRight; pId ++) {           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            IntBuffer intBuf;            intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();
cancelledKeys = 0;                 processSelectedKeys();                  selector = this.selector;                 runAllTasks();                  selector = this.selector;                  if (isShutdown()) {
public interface IgniteMessagingEndpointBuilder              extends                  IgniteMessagingEndpointConsumerBuilder, IgniteMessagingEndpointProducerBuilder {          default AdvancedIgniteMessagingEndpointBuilder advanced() {
DefaultCamelContext defaultCamelContext = (DefaultCamelContext)getCamelContext();          defaultCamelContext.stopRoute(id);         defaultCamelContext.removeRoute(id);          defaultCamelContext.addRoutes(builder);
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
* Overridden to pass the new rowHeight to the tree.       */      @Override     public void setRowHeight(int newRowHeight) {          super.setRowHeight(newRowHeight);          if (tree != null && tree.getRowHeight() != newRowHeight) {              tree.setRowHeight(getRowHeight());
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
public interface RestEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedRestEndpointProducerBuilder advanced() {
public interface YammerEndpointBuilder              extends                  YammerEndpointConsumerBuilder, YammerEndpointProducerBuilder {          default AdvancedYammerEndpointBuilder advanced() {
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          when(response.getWriter()).thenReturn(output);
assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId("nonExistingProcessDefinitionId").list().size());      if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {       assertEquals(3, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());      } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {       assertEquals(3, historyService.createHistoricActivityInstanceQuery().processDefinitionId
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json", true));      }      /**
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
*/  public class RespawnTestCase {     private static final int TIMEOUT = 1000;      private static final String HOST_CONTROLLER = "host-controller";      private static final String PROCESS_CONTROLLER = "process";      private static final String SERVER_ONE = "respawn-one";
* @throws IOException if the specified SplitAlgorithm class couldn't be     * instantiated     */   public static SplitAlgorithm newSplitAlgoInstance(Configuration conf,            String splitClassName) throws IOException {      Class<?> splitClass;
final SingleInstanceProfilingEvent singleInstanceProfilingEvent = (SingleInstanceProfilingEvent) obj;   if (!this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())) {     return false;    }
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), endsWith("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
*    * @param T The data type that the comparator works on.   */ public abstract class TypeComparator<T>  {    /**    * Computes a hash value for the given record. The hash value should include all fields in the record
@Override      public void init(NodeEngine nodeEngine, Properties properties) {         final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);          if (lockService != null) {              lockService.registerLockStoreConstructor(MapService.SERVICE_NAME,                      new ObjectNamespaceLockStoreInfoConstructorFunction());
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
* @see * @see NormalizableKey    */  public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;   /**    * Reads the record back while de-normalizing the key fields. This must only be used when
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNanos(System.nanoTime() - start);          }          return result;      }
*       * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
public interface AdvancedOpenshiftBuildConfigsEndpointBuilder              extends                  EndpointProducerBuilder {          default OpenshiftBuildConfigsEndpointBuilder basic() {
cluster.shutdown();              System.exit(0);          } else {             StormSubmitter.submitTopology(args[5], config, getTopology());          }      }
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, paging.asPostParameterList(), true));      }
LOG.info("Verifying the reading data...");          for (int pId = mLeft; pId < mRight; pId ++) {           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            IntBuffer intBuf;           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();            int tmp;            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              for (int k
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
}   public void glGenTextures (int n, IntBuffer textures) {   GL.glGenTextures(n, textures, Memory.getPosition(textures));   }   public int glGetError () {
break;       }      }     touchEventPool.freeAll(touchEvents);      touchEvents.clear();     }    }
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.createTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
if (getDomain() == null && c.getDomain() != null) {              return -1;         } else if (c.getDomain() == null && getDomain() != null) {              return 1;          }          v = getDomain().compareToIgnoreCase(c.getDomain());
public interface AdvancedCometdEndpointBuilder              extends                  AdvancedCometdEndpointConsumerBuilder, AdvancedCometdEndpointProducerBuilder {          default CometdEndpointBuilder basic() {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedMina2EndpointBuilder              extends                  AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {          default Mina2EndpointBuilder basic() {
serializedValue = new SerializedValue<>(null);      } else {       byte[] serializedData = new byte[length];      dis.readFully(serializedData, 0, length);       serializedValue = SerializedValue.fromBytes(serializedData);      }
* @param arguments the command-line arguments       * @throws Exception if something goes wrong       */     public void run(String... arguments) throws Exception {          final Bootstrap<T> bootstrap = new Bootstrap<>(this);          bootstrap.addCommand(new ServerCommand<>(this));          bootstrap.addCommand(new CheckCommand<>(this));
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (name.startsWith(normalizedPrefix)) {                          String subName = name.substring(normalizedPrefix.length());                          String value = propertyResolver.getProperty(name);                         subProperties.putIfAbsent(subName, value);                      }                  }              }
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
try {          bytes = input.read(buffer, index, 4096);         } catch (Exception e) {         throw new GdxRuntimeException("Error during Vorbis decoding.", e);         }        } else {         bytes = 0;
assertEquals(encoded, encoding.encode(bytes));    }   private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should return null if no implementation id is defined yet    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public ImplementationId getImplementationId();   /**    * Set the given <code>implementationId</code> as this implementation's unique id
public interface AdvancedFhirEndpointBuilder              extends                  AdvancedFhirEndpointConsumerBuilder, AdvancedFhirEndpointProducerBuilder {          default FhirEndpointBuilder basic() {
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/        public static _Fields findByThriftId(int fieldId) {          switch(fieldId) { case 1:              return RQST;            default:              return null;
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
LOG.error("DataNode is out of memory. Will retry in 30 seconds.", ie);          try {            Thread.sleep(30 * 1000);          } catch (InterruptedException e) {
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
simpleDosingInstructions.setDurationUnits(order.getDurationUnits());     simpleDosingInstructions.setAsNeeded(order.getAsNeeded());     simpleDosingInstructions.setAsNeededCondition(order.getAsNeededCondition());    simpleDosingInstructions.setAdministrationInstructions(order.getDosingInstructions());     return simpleDosingInstructions;    }
future.get();              future.addListener(() -> counter.decrementAndGet(), Runnable::run);          }         assertEquals(counter.get(), 0);      }      @Test(groups = "standalone")
c.getParameterClass().isAssignableFrom(Optional.class)) {              return new MultivaluedParameterExtractorQueryParamInjectable(                      new OptionalExtractor(parameterName, c.getDefaultValue()),                     c.isEncoded()              );          }          return null;
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface FacebookEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedFacebookEndpointProducerBuilder advanced() {
return newResult(BUFFER_OVERFLOW, status, bytesConsumed, bytesProduced);                          } else {                             throw shutdownWithError("SSL_write", sslError);                          }                      }                  }
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
LOG.warn("OpenTracing: could not find managed span for exchange=" + exchange);                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }          }      }
List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);     assertEquals(9, tokens.size());    }    @Test
if (queueLength.isDefined() && queueLength.asInt() == 0) {                  if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {                     throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());                  }              }
@Test          public void duration() throws InterruptedException {              Thread.sleep(300L);             assertEquals(300d, fStopwatch.runtime(MILLISECONDS), 100d);              Thread.sleep(500L);             assertEquals(800d, fStopwatch.runtime(MILLISECONDS), 250d);          }      }
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final Condition delegate;      @SuppressWarnings("unused")     private final WeakSafeReadWriteLock strongReference;     WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {        this.delegate = delegate;        this.strongReference = strongReference;      }
log.debug("Current thread: " + Thread.currentThread());      log.debug("Creating the encounter object");     }    Context.getEncounterService().saveEncounter(encounter);
try {              final String echo = localEcho.echo(message);              Assert.fail("Remote invocation on a local view " + LocalEcho.class.getName() + " was expected to fail");         } catch (IllegalStateException nsee) {              logger.trace("Got the expected exception on invoking on a local view, remotely", nsee);          }
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.trace("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null ? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.trace("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface SparkEndpointBuilder extends EndpointConsumerBuilder {          default AdvancedSparkEndpointBuilder advanced() {              return (AdvancedSparkEndpointBuilder) this;          }
JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);      Node node1 = Node.newString(Token.NAME, "f");      Node node2 = Node.newString(Token.NAME, "f");     assertTrue(node1.isEquivalentToTyped(node2));    }    public void testCheckTreeTypeAwareEqualsDifferent() {
parent.getRegionName(), rowContent, COL_SPLITB);      if (!hasReferencesA && !hasReferencesB) {       LOG.info("Deleting region " + parent.getRegionNameAsString() +          " because daughter splits no longer hold references");        HRegion.deleteRegion(master.fs, master.rootdir, parent);
public interface AdvancedEKSEndpointBuilder              extends                  EndpointProducerBuilder {          default EKSEndpointBuilder basic() {
public interface AdvancedKinesisFirehoseEndpointBuilder              extends                  EndpointProducerBuilder {          default KinesisFirehoseEndpointBuilder basic() {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ImmutableList.Builder<String> expressions = ImmutableList.builder();          Set<List<String>> valueLists = Sets.cartesianProduct(unrolledValues);          for (List<String> valueList : valueLists) {             expressions.add(String.format(expressionPattern, valueList.toArray(new String[valueList.size()])));          }          return expressions.build();      }
}      private Channel lookupInCache(Url url) {         Channel channel = connectionsPool.get(url);          if (channel != null) {              /**               * The Channel will eventually be closed by Netty and will becomes invalid.
logger.error("Invalid WebSocket Specification {} with {} ",                                  r.getHeader("Connection"), r.getIntHeader("Sec-WebSocket-Version"));                          HttpServletResponse.class.cast(response).addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");                         HttpServletResponse.class.cast(response).sendError(403, "Websocket protocol not supported");                          return;                      }                  }
public interface TwilioEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedTwilioEndpointProducerBuilder advanced() {
public interface AdvancedKubernetesHPAEndpointBuilder              extends                  AdvancedKubernetesHPAEndpointConsumerBuilder, AdvancedKubernetesHPAEndpointProducerBuilder {          default KubernetesHPAEndpointBuilder basic() {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return -1;           }           int newId = nextId();          if (newId >= max) {              throw new IndexOutOfBoundsException("size=" + index.length + " id=" + id);           }
public class CassandraRecordSetProvider          implements ConnectorRecordSetProvider  {     private static final Logger log = Logger.get(CassandraRecordSetProvider.class);      private final String connectorId;      private final CassandraSession cassandraSession;
RSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,      RSocketMessageHandler messageHandler) {     return new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),      messageHandler.serverResponder());    }   }
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* before growing the backing table. */   public ObjectSet (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
@Test      public void test_Decode_Error_Length() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
public static StreamPingPacket readBuffer(short packetType, ChannelBuffer buffer) {           assert packetType == PACKET_TYPE;          if (buffer.readableBytes() < 8) {               buffer.resetReaderIndex();               return null;           }
* balancing purpose at a datanode     */    public static final int MAX_NUM_CONCURRENT_MOVES = 5;   private static final int MAX_NO_PENDING_BLOCK_ITERATIONS = 5;    private static final String USAGE = "Usage: java "        + Balancer.class.getSimpleName()
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final DummyOperation operation = new DummyOperation(Operation.GENERIC_PARTITION_ID);          Data data = serializationService.toData(operation);         final Packet packet = new Packet(data, operation.getPartitionId());          packet.setHeader(Packet.HEADER_OP);          executor.execute(packet);
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
if (mWrite) {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            OutputStream os = mHdfsFs.create(new Path(filePath));            for (int k = 0; k < BLOCKS_PER_FILE; k ++) {              mBuf.putInt(0, k + mWorkerId);
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param server server to open a region     * @param region region to open     */   public void sendRegionOpen(HServerInfo server, HRegionInfo region)    throws IOException {      HRegionInterface hri = getServerConnection(server);      if (hri == null) {        LOG.warn("Attempting to send OPEN RPC to server " + server.getServerName()
}        recvQueue.add(recvMessage);    logger.debug("Receive queue ADD: Length={}", recvQueue.size());          }    /**
public interface HipchatEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHipchatEndpointProducerBuilder advanced() {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   public void glPolygonOffset (float factor, float units) {   GL.glPolygonOffset(factor, units);   }   public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Path("timeout")          public String getTimeout() {              try {                 Thread.sleep(5000);              } catch (InterruptedException e) {                  e.printStackTrace();              }
* Set the format for the influence of this check.       * @param format a <code>String</code> value       */     public final void setInfluenceFormat(String format) {          influenceFormat = format;      }
* Validates Username and Password then saved sercurityToken to a variable    */   private void login() throws InvalidLoginException, IOException {   logger.trace("attempting to login");    String url = String      .format("%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s",        WEBSITE, enc(appId), enc(userName), enc(password));
super.compare(modelA, modelB);         assertRemoveSubsystemResources(servicesB);      }
* Validates Username and Password then saved sercurityToken to a variable    */   private void login() throws InvalidLoginException, IOException {   logger.trace("attempting to login");    String url = String      .format("%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s",        WEBSITE, enc(appId), enc(userName), enc(password));
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedMyBatisEndpointBuilder              extends                  AdvancedMyBatisEndpointConsumerBuilder, AdvancedMyBatisEndpointProducerBuilder {          default MyBatisEndpointBuilder basic() {
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* whether the supression turns checkstyle reporting on or off.       * @author Rick Giles       */     public static class Tag          implements Comparable<Tag>      {
result.setJob(fromThrift(lineageInfo.getJob()));      result.setCreationTimeMs(lineageInfo.getCreationTimeMs());      result.setParents(lineageInfo.getParents());     result.setChildren(lineageInfo.getChildren());      return result;    }
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
public interface CassandraEndpointBuilder              extends                  CassandraEndpointConsumerBuilder, CassandraEndpointProducerBuilder {          default AdvancedCassandraEndpointBuilder advanced() {
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final R record = createRecord(value, expirationTime);          updateHasExpiringEntry(record);          if (isEventsEnabled()) {             publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),                                                  expirationTime, origin, completionId));          }          return record;      }
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (bulb < 6) {       if (command.compareTo(oldPercent) > 0) {        int repeatCount = (command.intValue() - oldPercent.intValue()) / 10;       for(int i = 0; i < repeatCount; i++) {         Thread.sleep(100);         if(BindingType.brightness.equals(type) && bulb < 6) {          sendIncrease(bulb, rgbwSteps, bridgeId);
assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();     assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();     assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, ret
req.getParameter("items"), req.getParameter("groups"));     ImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());    } catch (ItemNotFoundException e) {    logger.info("Item not found error while generating chart: {}", e);    } catch (IllegalArgumentException e) {    logger.info("Illegal argument in chart: {}", e);    }   }
List<StoreFile> sorted_files = new ArrayList<>(files);      Collections.sort(sorted_files, StoreFile.Comparators.SEQ_ID);      for (int i = 0; i < sorted_files.size(); i++) {       StoreFileReader r = sorted_files.get(i).createReader(true);        r.setReplicaStoreFile(isPrimaryReplica);        StoreFileScanner scanner = r.getStoreFileScanner(cacheBlocks, usePread, isCompaction, readPt,          i, matcher != null ? !matcher.hasNullColumnInQuery() :
* @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10805, value = "Caught exception awaiting final response from host %s")      void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);      /**
public interface TwitterTimelineEndpointBuilder              extends                  TwitterTimelineEndpointConsumerBuilder, TwitterTimelineEndpointProducerBuilder {          default AdvancedTwitterTimelineEndpointBuilder advanced() {
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(246);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {System.out.println($ctx.toStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface Jt400EndpointBuilder              extends                  Jt400EndpointConsumerBuilder, Jt400EndpointProducerBuilder {          default AdvancedJt400EndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
boolean skip = false;                  for (ParamValueMetaData prop : md.getContextParams()) {                      if (prop.getParamName().equals(ENABLE_PROPERTY)) {                         boolean explicitEnable = Boolean.parseBoolean(prop.getParamValue());                          if(explicitEnable) {                              found = true;                          } else {
);         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypesWithoutHash(), buildPages.getTypesWithoutHash()))                  .row("20", 1020L, 2020L, "20", 30L, 40L)                  .row("21", 1021L, 2021L, "21", 31L, 41L)                  .row("22", 1022L, 2022L, "22", 32L, 42L)
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, paging.asPostParameterList(), true));      }
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Increments to counter by one for the supplied scope.           * @param scope the scope counter to increment.           */         private void increment(Scope scope) {              total++;              if (inInterface) {                  counts.put(Scope.PUBLIC, 1 + value(Scope.PUBLIC));
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(500);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
, (args = args.rest()).first()        , args.rest());     case 12:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getDailyTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL() + "trends/daily.json", false));      }      /**
*       * @return the message.       */     @Message(id = 10842, value = "Invalid rollout plan. %s is not a valid child of node %s")      String invalidRolloutPlan(ModelNode modelNode, String nodeName);      /**
public interface SdbEndpointBuilder extends EndpointProducerBuilder {          default AdvancedSdbEndpointBuilder advanced() {              return (AdvancedSdbEndpointBuilder) this;          }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);   }
long taken = watch.stop();          assertEquals(taken, watch.taken());         assertTrue("Should take approx 200 millis, was: " + taken, taken > 150);      }      public void testStopWatchNotStarted() throws Exception {
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public class SimpleInterceptor  {    @Resource (lookup = "java:jboss/datasources/ExampleDS")     private DataSource ds;
@Override      public void process(Node externs, Node root) {       logger.fine(name);        startPass(name);        processInternal(externs, root);        endPass(externs, root);
Optional.empty());         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))                  .row("a", "a")                  .row("a", "a")                  .row("b", null)
public interface CaffeineLoadCacheEndpointBuilder              extends                  CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {          default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {
public interface AdvancedSagaEndpointBuilder              extends                  EndpointProducerBuilder {          default SagaEndpointBuilder basic() {
@ApiResponse(code = 200, message = "successful operation", response = Pet.class),          @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),          @ApiResponse(code = 404, message = "Pet not found", response = Void.class) })     Pet getPetById(@PathParam("petId") @ApiParam("ID of pet to return") Long petId) throws Exception;      @PUT      @Consumes({ "application/json", "application/xml" })
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
long total = Runtime.getRuntime().totalMemory();                  long used = (total - Runtime.getRuntime().freeMemory());                  if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {                     return maxSize < (used / 1024 / 1024);                  } else {                     return maxSize < (used / total);                  }              }              return false;
}                   protected final int readULong(final int position) throws NtlmEngineException {              return NtlmEngine.readULong(messageContents, position);          }                   protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {              return NtlmEngine.readSecurityBuffer(messageContents, position);          }
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
}      @Override     public synchronized List<EdgeModel> getSelectedEdges() {          List<EdgeModel> selected = new ArrayList<>();          for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {              EdgeModel edgeModel = itr.next();
@Override      public AsyncSupport complete(AtmosphereResourceImpl r) {          try {             HttpEvent event = (HttpEvent) rImpl.getRequest().getAttribute(HTTP_EVENT);              if (event != null) {                  event.close();
}     private boolean commandReadyToExecute(String trimmedLine) {      return !fullLineDelimiter && trimmedLine.contains(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);     }     private void executeStatement(String command) throws SQLException, UnsupportedEncodingException {
* @see <a href="http:       */      public Trends getCurrentTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL() + "trends/current.json"                  , false)).get(0);      }
public interface EKSEndpointBuilder extends EndpointProducerBuilder {          default AdvancedEKSEndpointBuilder advanced() {              return (AdvancedEKSEndpointBuilder) this;          }
disposeColorTexture(colorTexture);    if (hasDepthStencilPackedBuffer) {    gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle);    } else {     if (hasDepth) gl.glDeleteRenderbuffer(depthbufferHandle);     if (hasStencil) gl.glDeleteRenderbuffer(stencilbufferHandle);
public interface SpringWebserviceEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSpringWebserviceEndpointProducerBuilder advanced() {
* @return    * @throws APIException       */  public List<Locale> getSearchLocales(Locale currentLocale, User user);   /**    * Returns a list of locales used by the user when searching.
void progress() {              progress ++;              if (promise instanceof ChannelProgressivePromise) {                 ((ChannelProgressivePromise) promise).tryProgress(progress, -1);              }          }      }
*       * @return the error message       */     @Message(id = 10834, value = "%s recognizes only %s as children: %s")      String unrecognizedChildren(String parent, String children, String parentSpec);      /**
}        try {         X509Certificate certificate = generator.generate(signedByKeyPair.getPrivate());          return new HeldCertificate(heldKeyPair, certificate);        } catch (GeneralSecurityException e) {          throw new AssertionError(e);
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
@Test   public void BaseCommandTest() {   S_Command scmd = new S_Command("00FE30", 1, 20.0);    String commandStr = scmd.getCommandString();
* @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public final class TreeTable extends JTable {      private static final long serialVersionUID = -8493693409423365387L;
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
static File getIncomingDirectory(File storageDir) {    final File incomingDir = new File(storageDir, "incoming");   if (!incomingDir.mkdirs() && !incomingDir.exists()) {     throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath());    }
try {         add(valueEntry.name(), object, addType);        } catch (Exception ex) {        throw new SerializationException("Error reading " + type.getName() + ": " + valueEntry.name(), ex);        }       }      }
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
*/      public ResponseList<Status> getHomeTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", true));      }
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
final boolean useCache = query.getContextUseCache(true)          && strategy != null         && cacheConfig.isUseCache();      final Cache.NamedKey key;      if(strategy != null && (useCache || populateCache)) {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(getNotAllowedExceptionMessage("helloForNone"), e.getCause().getMessage());          }      }
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc("title"), 3, 2);          assertThat(page3.pagination().getCount()).isEqualTo(1);         assertThat(page3.pagination().getGlobalTotal()).isEqualTo(5);          assertThat(page3.delegate())                  .extracting("title")                  .containsExactly("hello6");
.setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())              .setAllowExpression(true)              .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)             .setDefaultValue(new ModelNode().set(1L))              .build();      static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
* @return    * @throws APIException       */  public List<Locale> getSearchLocales(Locale currentLocale, User user);   /**    * Returns a list of locales used by the user when searching.
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
try {        mTestStream.seek(BLOCK_LENGTH);        Assert.fail("block store should throw exception");     } catch (Exception e) {        Assert.assertEquals("test IOException", e.getMessage());      }    }
}     @Cucumber.Options(monochrome = true)      static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {      }     @Cucumber.Options(monochrome = false)      static class BaseClassWithMonoChromeFalse {      }
* @see <a href="http:       */      public ResponseList<Status> getMentions() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, true));      }
assert amt > 0;              prioritizableForTree += amt;              if (parent != null && parent != oldParent) {                 parent.incrementPrioritizableForTree0(amt, oldParent);              }          }
if (TACHYON_STREAMING_READ) {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            InputStream is = file.getInStream(ReadType.CACHE);            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
Optional.empty());         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))                  .row("a", "a")                  .row("a", "a")                  .row("b", null)
final int id = injectView.value();                  if( id>=0 )                     view = fragUtils != null && fragUtils.fragmentType().isInstance(activityOrFragment) ? (fragUtils.getView(activityOrFragment)).findViewById(id) : ((Activity)activityOrFragment).findViewById(id);                  else                      view = fragUtils !=null && fragUtils.fragmentType().isInstance(activityOrFragment) ? (fragUtils.getView(activityOrFragment)).findViewWithTag(injectView.tag()) : ((Activity)activityOrFragment).get
return updatedUnpartitionedSources;      }     private synchronized void schedulePartitionedSource(TaskSource source)      {
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.parseLong(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}              }          }         if (keySet.isEmpty()) {              return result;          }          MapGetAllRequest request = new MapGetAllRequest(name, keySet);
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}        statsData.setDoubleStats(doubleStats);        statsObj.setStatsData(statsData);     } else if (columnType.toLowerCase().startsWith("string")) {        StringColumnStatsData stringStats = new StringColumnStatsData();        stringStats.setMaxColLenIsSet(false);        stringStats.setAvgColLenIsSet(false);
public interface AdvancedHazelcastQueueEndpointBuilder              extends                  AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {          default HazelcastQueueEndpointBuilder basic() {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {    if (this instanceof SingleOutputStreamOperator) {     ((SingleOutputStreamOperator<?, ?>) this).setMutability(false);    }
.retInt();      }     private static void generatePositionEqualsPositionMethod(              ClassDefinition classDefinition,              CallSiteBinder callSiteBinder,              List<Type> joinChannelTypes,
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
checkConfig.addAttribute("matchDirectoryStructure", "false");          final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;         verify(checkConfig, getNonCompilablePath("InputPackageDeclarationDiffDirectory.java"),                 expected);      }      @Test
try {      Daemon.executeScheduledTask(task);     }    catch (Exception t) {      log.error(
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTextures(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
return IsolationLevel.REPEATABLE_READ;              case READ_COMMITTED:                  return IsolationLevel.READ_COMMITTED;             case READ_UNCOMMITED:                  return IsolationLevel.READ_UNCOMMITED;              default:                  throw new AssertionError("Unhandled isolation level: " + level);
void delta() {}          void epsilon() {}      }     static class Super {          void testOne() {}      }     static class Sub extends Super {          void testTwo() {}      }
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test   public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
private EventLoopGroup bossGroup;          private EventLoopGroup workerGroup;         MyServer(int port) {              this.port = port;          }
assertEquals(encoded, encoding.encode(bytes));    }   private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
@Test      public void testGetStateToBindingValueConverter() {          NumberItem item = new NumberItem(NUMBER_ITEM_NAME);         converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);          StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);          assertEquals(IntegerDecimalConverter.class, converter.get("bla").getClass());      }
private static Function compile(String function) {      final ContextFactory contextFactory = ContextFactory.getGlobal();     final Context context = contextFactory.enterContext();      context.setOptimizationLevel(9);      final ScriptableObject scope = context.initStandardObjects();
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10864, value = "Error obtaining input stream from URL %s -- %s")      String errorObtainingUrlStream(String url, String message);      /**
* @param timer a timer to add to the scheduler     */    public static void addTimer(ScheduledTimer timer) {     Preconditions.checkNotNull(timer, "timer");      try (LockResource r = new LockResource(sLock)) {        Preconditions.checkState(!sTimers.containsKey(timer.getThreadName()),            "The timer for thread %s is already waiting to be scheduled", timer.getThreadName());
}                      } else { NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());                         if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {                              String url = nlDataOutNodes.item(0).getTextContent();
public static Set<String> getPackageNames(ClassLoader classLoader)              throws CheckstyleException {         Set<String> result;          try {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Test      public void testGenericEndsTheLine() throws Exception {          final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;         verify(checkConfig, getPath("InputGenericWhitespaceEndsTheLine.java"), expected);      }      @Test
}   public void glBindTexture (int target, int texture) {   GL.glBindTexture(target, texture);   }   public void glBlendFunc (int sfactor, int dfactor) {
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public void split(final String tableNameOrRegionName,      final String splitPoint) throws IOException, InterruptedException {     split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));    }    /**
public interface WordpressEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedWordpressEndpointProducerBuilder advanced() {
* @param testedPrototype  The tested prototype instance * @param expectedToString The expected {@link Prototype     */   public PrototypeTest(final P testedPrototype, final String expectedToString) {      this.expectedToString = expectedToString;      this.testedPrototype = testedPrototype;    }
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (s == null) {        return null;      }     t.set(s.toString().toLowerCase());      return t;    }
* @should find object given valid uuid    * @should return null if no object found with given uuid    */  public GlobalProperty getGlobalPropertyByUuid(String uuid);   /**    * Get a listing or important variables used in openmrs
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
log.trace("URL from classloader: " + url);                  }                 url = customerResourceLocator(url);                  String urlPath = url.getFile();                  urlPath = URLDecoder.decode(urlPath, "UTF-8");
template.sendBody("direct:addRoute", "Am I replicated?");         Thread.sleep(500);          template.sendBody("direct:getRoute1", "Will I get replicated cache");          template.sendBody("direct:getRoute2", "Will I get replicated cache");
context.addRoutes(new RouteBuilder() {              @Override              public void configure() throws Exception {                 from("direct:bar").transform(sendTo("bar"));              }          });          context.start();
*       * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
* @should execute sql containing group by    */   @Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)  public List<List<Object>> executeSQL(String sql, boolean selectOnly);   /**    * Get the implementation id stored for this server Returns null if no implementation id has
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, true));      }
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
newVal.count = val.count;                      }                      newVal.count = newVal.count + _counts.get(key);                     COUNT_DATABASE.put(key, newVal);                  } else {                      newVal = val;                  }
URL url3 = bundle.getEntry(META_INF_FALLBACK_TYPE_CONVERTER);              if (url1 != null || url2 != null || url3 != null) {                  LOG.debug("Found TypeConverter in bundle {}", bundle.getSymbolicName());                 resolvers.add(new BundleTypeConverterLoader(bundle, url3 != null));              }          }      }
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (length >= DIRECT_FLUSH_SIZE) {              flushBufferToOutputStream();             writeDirectlyToOutputStream((byte[]) source.getBase(), sourceIndex + (int) (source.getAddress() - ARRAY_BYTE_BASE_OFFSET), length);              bufferOffset += length;          }          else {
long key_length = m_data.getUint16();             return m_data.rewind().forward((int) key_offset).getFixString((int) key_length, charsetName);          }         public Json_Value element(int i, String charsetName) {              m_data.rewind();              int offset_size = m_large ? LARGE_OFFSET_SIZE : SMALL_OFFSET_SIZE;              int key_entry_size = m_large ? KEY_ENTRY_SIZE_LARGE : KEY_ENTRY_SIZE_SMALL;
*       * @return the message.       */     @Message(id = 10850, value = "No handler for operation %s at address %s")      String noHandlerForOperation(String operationName, PathAddress address);      /**
}    private void externExports() {     logger.fine("Creating extern file for exports");      startPass("externExports");      ExternExportsPass pass = new ExternExportsPass(this);
logger.debug("The WebSocket handshake succeeded but the dispatched URI failed {}:{}. " +                      "The WebSocket connection is still open and client can continue sending messages.", message, errorCode);          } else {             logger.debug("{} {}", errorCode, message);          }      }
UnderFileSystem ufs = UnderFileSystem.get(path);      DataInputStream is = new DataInputStream(ufs.open(path));     JsonParser parser = JsonObject.createObjectMapper().getFactory().createParser(is);      while (true) {        EditLogOperation op;
throw new IOException("Failed to list directory: " + dir);          }          for (File file : files) {             Files.deleteIfExists(file.toPath());          }         Files.deleteIfExists(dir.toPath());      }  }
@Test(expected = DuplicateConceptNameException.class)    @Verifies(value = "should fail if there is a duplicate unretired preferred name in the same locale", method = "validate(Object,Errors)")    public void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {    Context.setLocale(new Locale("en"));     Concept concept = Context.getConceptService().getConcept(5497);     ConceptName preferredName = new ConceptName("preferred name", Context.getLocale());     concept.setPreferredName(preferredName);
public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {          long totalMessages = 50;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface FtpEndpointBuilder              extends                  FtpEndpointConsumerBuilder, FtpEndpointProducerBuilder {          default AdvancedFtpEndpointBuilder advanced() {
private final OAuth2ResourceServerProperties properties;  public OAuth2ResourceServerJwkConfiguration(    OAuth2ResourceServerProperties properties) {    this.properties = properties;   }
public void addAll (short[] array, int offset, int length) {     short[] items = this.items;     int sizeNeeded = size + length;    if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;    }
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
public interface EventAdminEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedEventAdminEndpointProducerBuilder advanced() {
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface CassandraEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCassandraEndpointProducerBuilder advanced() {
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.createTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
public class S3DataSegmentMover implements DataSegmentMover  {   private static final Logger log = new Logger(S3DataSegmentMover.class);    private final RestS3Service s3Client;    private final S3DataSegmentMoverConfig config;
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);   /**    * Completely remove the given global property from the database
connection.setDoOutput(doingOutPut);      connection.setDoInput(true);      connection.setRequestMethod(method);     HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());      lock.lock();      connections.put(httpRequest, connection);
return false;      }      if (!info.isOffline()) {       LOG.warn("Region is split but not offline: " +         info.getRegionNameAsString());      }      return true;    }
public void test_de() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06.05.2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
}                      }                      nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));                     nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));                      if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {                          nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, "application/x-www-form-urlencoded");
}    @Override   public N adjacentNode(E edge) {      return checkNotNull(incidentEdgeMap.get(edge));    }    @Override   public N removeInEdge(E edge, boolean isSelfLoop) {      if (!isSelfLoop) {        return removeOutEdge(edge);      }
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10834, value = "%s recognizes only %s as children: %s")      String unrecognizedChildren(String parent, String children, String parentSpec);      /**
@Test   public void startServletAndFilter() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();   this.container = factory.getEmbeddedServletContainer(      exampleServletRegistration(), new FilterRegistrationBean(        new ExampleFilter())); assertThat(getResponse("http:
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
}          if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {           GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);          }          recentChange.reset();
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
try {     item = getItem(itemName);    } catch (ItemNotFoundException e) {    logger.debug("Cannot retrieve item {} for widget {}", itemName, w.eClass().getInstanceTypeName());    }    return formatLabel(item, itemName, label);   }
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleAlternativesWithCommonLabel_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
final class MuninnPagedFile implements PagedFile  {      private static int stripeFactor = Integer.getInteger(             "org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor", 4 );      static final int translationTableStripeLevel = 1 << stripeFactor;      static final int translationTableStripeMask = translationTableStripeLevel - 1;
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see org.openmrs.api.db.ConceptDAO    */    @Override   public Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)            throws DAOException {     Criteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);     criteria.setProjection(Projections.rowCount());    return (Long) criteria.uniqueResult();    }    /**
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
protected ClassInfo(final Token className)          {              if (className == null) {                 throw new IllegalArgumentException(                      "ClassInfo's name should be non-null");              }              name = className;
*       * @return the message.       */     @Message(id = 10855, value = "Invalid byte stream.")      String invalidByteStream();      /**
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
LOG.trace("OpenTracing: start server span=" + span);                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }          }
String response = "HTTP/1.1 200 OK\r\n" +                  "Content-Length: 0\r\n\r\n";         HttpClientCodec codec = new HttpClientCodec(4095, 8192, 8192, true);          EmbeddedChannel ch = new EmbeddedChannel(codec, new HttpObjectAggregator(1024)); HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "http:
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface AdvancedXmppEndpointBuilder              extends                  AdvancedXmppEndpointConsumerBuilder, AdvancedXmppEndpointProducerBuilder {          default XmppEndpointBuilder basic() {
static class DelegatingSSLSocketFactory extends SSLSocketFactory {      protected final SSLSocketFactory delegate;     DelegatingSSLSocketFactory(SSLSocketFactory delegate) {        this.delegate = delegate;      }
* @param workerClient the worker client to release, the client should not be accessed after this     *        method is called     */   public void releaseWorkerClient(WorkerClient workerClient) {      if (workerClient.isLocal()) {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface AdvancedFileEndpointBuilder              extends                  AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {          default FileEndpointBuilder basic() {
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface FreemarkerEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedFreemarkerEndpointBuilder advanced() {
return additionalReplacements;    }   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public boolean mouseMoved (int screenX, int screenY) {    Object[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (((InputProcessor)items[i]).mouseMoved(screenX, screenY)) return true;     } finally {      processors.end();     }
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }
.append(getPort(uri)).toString());              nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, uri.toString());          } else if (config.getProxyServer() != null || request.getProxyServer() != null) {             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.toString());          } else {              StringBuilder path = new StringBuilder(uri.getRawPath());              if (uri.getQuery() != null) {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
});          try {             resultEndpoint.assertIsSatisfied();              fail("Should fail");          } catch (AssertionError e) { assertEquals("mock:          }      }
"RETURN file.name, dir.name, role.name, readUser.name";          gen.get().addSnippet( "query3", createCypherSnippet( query ) );          result = engine.execute( query )                 .dumpToString();          assertTrue( result.contains("File1") );          assertTrue( result.contains("File2") );          assertTrue( result.contains("Admin1") );
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
private final Queue<MessageEvent> queue = QueueFactory.createQueue(MessageEvent.class);     private final ChannelHandlerContext ctx;      private MessageEvent currentEvent;      /**
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
load(CustomArgumentResolvers.class);    RequestMappingHandlerAdapter adapter = this.context      .getBean(RequestMappingHandlerAdapter.class);   assertThat(adapter.getCustomArgumentResolvers()).contains(      this.context.getBean("firstResolver",        HandlerMethodArgumentResolver.class),      this.context.getBean("secondResolver",
* @see <a href="http:       */      public ResponseList<Status> getRetweetedToMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, true));      }
.setXmlName(Attribute.SHUTDOWN_TIMEOUT.getLocalName())              .setAllowExpression(true)              .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)             .setDefaultValue(new ModelNode().set(25000L))              .build();      static final SimpleAttributeDefinition THREAD_POOL_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.THREAD_POOL_SIZE, ModelType.INT, true)
* @param entryValues The number of entries in the array.       * @return The entry object.       */     private Entry decodeEntry(int[] vals, int entryValues) throws SourceMapParseException {        Entry entry;        switch (entryValues) {
c.add(new Cookie("yo", "man"));          AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo("/a").build();         processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));          r.get().getBroadcaster().broadcast("yo").get();          assertNotNull(cValue.get());
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10835, value = IN_SERIES + " is missing groups: %s")      String inSeriesIsMissingGroups(String rolloutPlan);      /**
}     if (this.assignmentManager.isRegionInTransition(regionInfo) == null || this.assignmentManager.regionOnline(regionInfo, serverInfo) ) {        this.assignmentManager.regionOnline(regionInfo, serverInfo);      } else {        LOG.warn("Skipping the onlining of " + regionInfo.getRegionNameAsString() +
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}          private boolean hasRegistrations(String topic) {              Collection<Registration> topicRegistrations = registrations.get(topic);             return !(topicRegistrations == null || topicRegistrations.isEmpty());          }
TypeInfo commonTypeInfo = FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),              rInfo.getType());          if (commonTypeInfo == null) {           throw new OptiqSemanticException(generateErrorMessage(tabref,                "Schema of both sides of union should match: Column " + field + " is of type "                    + lInfo.getType().getTypeName() + " on first table and type "                    + rInfo.getType().getTypeName() + " on second table"));
* @param request   The request object providing information about the HTTP request       * @param response  The response object providing functionality for modifying the response       */     public abstract void handle(T exception, Request request, Response response);  }
}   }    public static class SpeedTestConsumer extends AbstractInvokable {    @Override    public void invoke() throws Exception {
"JSC_REFERENCE_BEFORE_DECLARE",        "Variable referenced before declaration: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.error(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    }   private static void removeModel(Map<Integer, Integer> model, Range<Integer> range) {      for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {        if (range.contains(i)) {          model.remove(i);
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
populateNearCache(clientMap, 1000);         HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());          final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");      node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));     assertTrue(node1.isEquivalentToTyped(node2));    }    public void testCheckTreeTypeAwareEqualsSameNull() {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
Attribute attribute;                          try {                              attribute = factory.createAttribute(request,                                     cleanString(values[0]), values[1]);                          } catch (NullPointerException e) {                              throw new ErrorDataDecoderException(e);                          } catch (IllegalArgumentException e) {
public void put(final Object key, final Object value) {          if (key != null) {             map.set(key, toStoreValue(value), 0, TimeUnit.SECONDS);          }      }
if (description == null) {              description = Description.createTestDescription(getTestClass().getJavaClass(),                      testName(method), method.getAnnotations());             fMethodDescriptions.putIfAbsent(method, description);          }          return description;
lastUpdate = DateTime.now();      }     private synchronized void sendGetResults()      {         URI uri = HttpUriBuilder.uriBuilderFrom(location).appendPath(String.valueOf(token)).build();          HttpResponseFuture<PagesResponse> resultFuture = httpClient.executeAsync(                  prepareGet()                          .setHeader(PRESTO_MAX_SIZE, maxResponseSize.toString())
placeholderToken.setBeginPosition(beginPosition);              placeholderToken.setEndPosition(beginPosition + placeholderToken.word().length());              placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class,                     containedToken.beginPosition());              placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class,                     containedToken.endPosition());              placeholderToken.setIsMWT(true);              return placeholderToken;          }
@Override    public Optional<ScalingStats> getScalingStats()    {     return Optional.fromNullable(resourceManagement.getStats());    }    public ZkWorker findWorkerRunningTask(String taskId)
} else if (url.startsWith("jdbc:sqlserver")) {        databaseFormatter = new DatabaseFormatterMsSqlServer();      } else if (url.startsWith("jdbc:db2")) {       databaseFormatter = new DatabaseFormatterDb2();      } else if (url.startsWith("jdbc:postgresql")) {       databaseFormatter = new DatabaseFormatterPostgres();      }     }
catch(Throwable e)    {    if(!(e instanceof CompilerException))    throw new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);    else     throw (CompilerException) e;    }
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
* @see <a href="http:       */      public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL()                  + "direct_messages.json", null, paging.asPostParameterList(), true));      }
mw.visitLabel(forItemNullElse_);              Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();             if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {                  mw.visitVarInsn(ALOAD, context.var("list_item"));                  mw.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;");                  mw.visitLdcInsn(com.alibaba.fastjson.asm.
public interface SpringLdapEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedSpringLdapEndpointBuilder advanced() {
MBeanServerPlugin delegate = null;          final boolean readOnly = false;          try {             delegate = findDelegateForNewObject(name);              if (delegate.shouldAuthorize()) {                  authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);              }
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
Assert.assertEquals(800, Utils.calculateHeapSize(1000) );   Assert.assertEquals(9500, Utils.calculateHeapSize(10000, true) );   }  }
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface AdvancedYammerEndpointBuilder              extends                  AdvancedYammerEndpointConsumerBuilder, AdvancedYammerEndpointProducerBuilder {          default YammerEndpointBuilder basic() {
public static final int SET_CONTAINER = 41;      public static final int LIST_CONTAINER = 42;      public static final int COLLECTION_TRANSACTION_LOG_RECORD = 43;     public static final int QUEUE_TRANSACTION_LOG_RECORD = 44;      @Override      public int getFactoryId() {
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
String command = shellMsg.getCommand();                          if (command == null) {                             throw new IllegalArgumentException("Command not found in bolt message: " + shellMsg);                          }                          if(command.equals("ack")) {                              handleAck(shellMsg.getId());
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA
/*  * Copyright 2012-2016 the original author or authors.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
this.functionManager = functionManager;          Optional<Duration> totalCpuTime = stats.map(s -> new Duration(s.values().stream()                 .mapToLong(planNode -> planNode.getPlanNodeCpuTime().toMillis())                  .sum(), MILLISECONDS));          Optional<Duration> totalScheduledTime = stats.map(s -> new Duration(s.values().stream()                 .mapToLong(planNode -> planNode.getPlanNodeScheduledTime().toMillis())                  .sum(), MILLISECONDS));          this.representation = new PlanRepresentation(planRoot, types, totalCpuTime, totalScheduled
public void startServlet() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();    this.container = factory     .getEmbeddedServletContainer(exampleServletRegistration()); assertThat(getResponse("http:   }
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
managedSpan.deactivate();                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }          }
*/  public class TFAgentStatBatchMapper {      private final Logger logger = LoggerFactory.getLogger(this.getClass());     public final TFAgentStatMapper tFAgentStatMapper = new TFAgentStatMapper();      public TFAgentStatBatch map(AgentStatBo agentStatBo) {          try {             List<TFAgentStat> tFAgentstatList = tFAgentStatMapper.map(agentStatBo);              long startTimestamp = getStartTimestamp(agentStatBo);              TFAgentStatBatch tFAgent
public interface KubernetesNodesEndpointBuilder              extends                  KubernetesNodesEndpointConsumerBuilder, KubernetesNodesEndpointProducerBuilder {          default AdvancedKubernetesNodesEndpointBuilder advanced() {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface JettyHttpEndpointBuilder9              extends                  EndpointConsumerBuilder {          default AdvancedJettyHttpEndpointBuilder9 advanced() {
*/      public ResponseList<Status> getUserTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json"                  , true));      }
public interface CwEndpointBuilder extends EndpointProducerBuilder {          default AdvancedCwEndpointBuilder advanced() {              return (AdvancedCwEndpointBuilder) this;          }
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      }     public synchronized void unblock(Address address) {          blockedAddresses.remove(address);          Connection connection = getConnection(address);          if (connection instanceof DroppingConnection) {
AlluxioURI alluxioPath = new AlluxioURI("/t");      AlluxioURI ufsPath = new AlluxioURI("/u");      MountOptions mountOptions = MountOptions.defaults();     Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient)         .mount(alluxioPath, ufsPath, mountOptions);      try {        mFileSystem.mount(alluxioPath, ufsPath, mountOptions);        Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);
}      public boolean shouldCloneOnEntryProcessing() {         return getIndexes().hasIndex() && OBJECT.equals(mapConfig.getInMemoryFormat());      }  }
@Override          public Number getMinimumValue() {              if (minimum == null) {                 DynamicAttributeRanking.refreshMinMax(this, graph);              }              return minimum;          }
public void configure() {                  WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent("websocket");                  websocketComponent.setMinThreads(1);                 websocketComponent.setMaxThreads(20); from("websocket:                          .log(">>> Message received from BAR WebSocket Client : ${body}")
}   @Configuration  @ConditionalOnEnabledHealthIndicator("diskspace")   public static class DiskSpaceHealthIndicatorConfiguration {    @Bean
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
public static final int M33 = 15;      @Deprecated  public static final float tmp[] = new float[16];   public final float val[] = new float[16];
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
public interface AdvancedMicrometerEndpointBuilder              extends                  EndpointProducerBuilder {          default MicrometerEndpointBuilder basic() {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
try {                  DoneFilters.execute(context);              } catch (Exception generalException) {                 GeneralError.modify(httpResponse, body, requestWrapper, responseWrapper, generalException);              }          }
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
serverInventoryView.start();          final List<Pair<? extends MasterRunnable, Duration>> masterRunnables = Lists.newArrayList();         segmentSettingsAtomicReference = configManager.watch(MasterSegmentSettings.CONFIG_KEY, MasterSegmentSettings.class,(new MasterSegmentSettings.Builder()).build());          masterRunnables.add(Pair.of(new MasterComputeManagerRunnable(), config.getMasterPeriod()));          if (indexingServiceClient != null) {
public interface AdvancedS3EndpointBuilder              extends                  AdvancedS3EndpointConsumerBuilder, AdvancedS3EndpointProducerBuilder {          default S3EndpointBuilder basic() {
public void testOneMemberWriteBehindFlush() {          TestMapStore testMapStore = new TestMapStore(1, 1, 1);          testMapStore.setLoadAllKeys(false);         int writeDelaySeconds = 5000;          Config config = newConfig(testMapStore, writeDelaySeconds);          TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(3);          HazelcastInstance instance = nodeFactory.newHazelcastInstance(config);
catch(Throwable e)    {    if(!(e instanceof CompilerException))    throw new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);    else     throw (CompilerException) e;    }
*     * @param toCompare The element to set as the comparison reference.    */  public abstract void setReference(T toCompare);   /**    * Checks, whether the given element is equal to the element that has been set as the comparison
protected void flushDirtyLogs() {          log.debug("Checking for dirty logs to flush...");         final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();          for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {              final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();              final Log kafkaLog = topicAndPartitionLogEntry.getValue();
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10853, value = "Unexpected initial path key %s")      IllegalStateException unexpectedInitialPathKey(String key);      /**
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   @Override  public CompletableFuture<Void> getTerminationFuture() {    return terminationFuture;   }  }
final Object[] params = new Object[] { item };               try {                   if (mMethod.getReturnType() == Boolean.TYPE) {                      return (Boolean)mMethod.invoke(mContext, params);                   }                   return false;               } catch (Exception e) {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
static final StackTraceElement[] EMPTY_STACK_TRACE = new StackTraceElement[0];     static final ImmutableSet<String> EXCLUDED_CLASS_NAMES =          ImmutableSet.of(              CycleDetectingLockFactory.class.getName(),              ExampleStackTrace.class.getName(),
@Override      public boolean isEmpty() {         return headRef() == tailRef();      }      @Override
Id idAnnotation = null;      for (Method method : methods) {        idAnnotation = method.getAnnotation(Id.class);       if (idAnnotation != null && !method.isBridge()) {          idMethod = method;          break;        }
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
public interface KinesisEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedKinesisEndpointProducerBuilder advanced() {
}    @Override   protected void setIntermediateState(State state) {      this.cssNames = state.cssNames == null ? null :          Maps.newHashMap(state.cssNames);      this.exportedNames = state.exportedNames == null ? null :
* @return true if all the nodes up to the last annotation node are end of scope nodes       *         false otherwise       */     private static boolean isEndOfScope(final DetailAST lastAnnotationNode, final DetailAST node) {          DetailAST checkNode = node;          boolean endOfScope = true;          while (endOfScope && !checkNode.equals(lastAnnotationNode)) {
+ " interface; try using @AutoAnnotation instead", type);      }     ImmutableSet<ExecutableElement> methods =         getLocalAndInheritedMethods(type, processingEnv.getElementUtils());     ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(type, methods);      String fqExtClass = TypeSimplifier.classNameOf(type);      List<AutoValueExtension> appliedExtensions = new ArrayList<AutoValueExtension>();
public interface BeanstalkEndpointBuilder              extends                  BeanstalkEndpointConsumerBuilder, BeanstalkEndpointProducerBuilder {          default AdvancedBeanstalkEndpointBuilder advanced() {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/            public boolean hasResponseStatus() {         return (status != null ? true : false);      }      /**
public class DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {      private static final String STR_LONG_MIN_VALUE = String.format(LOCALE_INTERNAL, "%,d", Long.MIN_VALUE);
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
}      @Test     @Ignore("AS7-2704 StackOverflowError on creating a web session in cluster") @OperateOnDeployment("deployment-1")      public void testSessionReplication(@ArquillianResource(SimpleServlet.class) URL baseURL) throws IllegalStateException, IOException, InterruptedException {          DefaultHttpClient client = new DefaultHttpClient();
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
if (getDomain() == null && that.getDomain() != null) {              return false;         } else if (that.getDomain() == null && getDomain() != null) {              return false;          }          return getDomain().equalsIgnoreCase(that.getDomain());
return worker;    }   @JsonProperty("runningTasks")    public Map<String, TaskStatus> getRunningTasks()    {      Map<String, TaskStatus> retVal = Maps.newHashMap();
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);     anotherConceptName.setName("preferred name");     newConcept.addName(anotherConceptName);    Errors errors = new BindException(newConcept, "concept");     new ConceptValidator().validate(newConcept, errors);    }
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return whether to close resources       */     protected boolean setResultSet(Exchange exchange, Connection conn, ResultSet rs) throws SQLException {          boolean answer = true;         ResultSetIterator iterator = new ResultSetIterator(conn, rs, getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics());          exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());
public interface GrpcEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedGrpcEndpointProducerBuilder advanced() {
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.trace("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null ? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.trace("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
"function f() {goog.asserts.assertInstanceof(this, Error);}");    }   private static String config(String rule, String message, String... fields) {      String result = "requirement: {\n"          + "  type: CUSTOM\n"          + "  java_class: '" + rule + "'\n";
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface ClientEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedClientEndpointProducerBuilder advanced() {
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      public String[] getRequires() {         return requires;      }      public EnumSet<AttributeAccess.Flag> getFlags() {
public boolean act (float delta) {    Actor actor = (targetActor != null ? targetActor : this.actor);    if (capture)    actor.addCaptureListener(listener);    else    actor.addListener(listener);    return true;   }
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}          public boolean hasCookie(String name) {             Validate.notEmpty(name, "Cookie name must not be empty");              return cookies.containsKey(name);          }          public T removeCookie(String name) {             Validate.notEmpty(name, "Cookie name must not be empty");              cookies.remove(name);              return (T) this;          }
MockEndpoint result = getMockEndpoint("mock:result");          result.expectedMinimumMessageCount(3);           result.expectedBodiesReceived("Message 1c", "Message 2b", "Message 3a");
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of("runs")));          when(request.getParameterValues("runs")).thenReturn(new String[]{"1"});          when(response.getWriter()).thenReturn(output);
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String query = "start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file";          gen.get().addSnippet( "query1", createCypherSnippet( query ) );          String result = engine.execute( query )                 .dumpToString();          assertTrue( result.contains("File1") );          gen.get()                  .addSnippet( "result1", createQueryResultSnippet( result ) );
};       final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
long start = System.currentTimeMillis();          MockEndpoint result = getMockEndpoint("mock:result");         result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I", "B+D+F+H+J");          assertMockEndpointsSatisfied();
*       * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
} else if (frame instanceof CloseFrame) {                  logger.trace("WebSocket.onReceivedFrame (CloseFrame)");                 webSocketProcessor.close(webSocket, 1000);              } else {                  logger.trace("WebSocket.onReceivedFrame skipping: " + frame);              }
if (timeout == null) {                  println(lock.tryLock());              } else {                 long time = Long.parseLong(timeout);                  try {                      println(lock.tryLock(time, TimeUnit.SECONDS));                  } catch (InterruptedException e) {
, (args = args.rest()).first()        , args.rest());     case 11:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.trace("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
} catch (NoSuchMethodException e) {          }         return theClass.getConstructor();      }      /**
protected void handleQPoll(String[] args) {          long timeout = 0;          if (args.length > 1) {             timeout = Long.parseLong(args[1]);          }          try {              println(getQueue().poll(timeout, TimeUnit.SECONDS));
try {     item = getItem(itemName);    } catch (ItemNotFoundException e) {    logger.debug("Cannot retrieve item {} for widget {}", itemName, w.eClass().getInstanceTypeName());    }    return formatLabel(item, itemName, label);   }
* @see <a href="http:       */      public Trends getCurrentTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL() + "trends/current.json"                  , false)).get(0);      }
public interface CoAPEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCoAPEndpointProducerBuilder advanced() {
if (mWrite) {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            OutputStream os = mHdfsFs.create(new Path(filePath));            for (int k = 0; k < BLOCKS_PER_FILE; k ++) {              mBuf.putInt(0, k + mWorkerId);
"1: " + getCheckMessage(MSG_KEY_MISMATCH),          };         verify(checkConfig,                 getNonCompilablePath("InputPackageDeclarationDiffDirectory.java"), expected);      }      @Test
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
* @see <a href="http:       */      public ResponseList<Status> getMentions(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, paging.asPostParameterList(), true));      }
@ApiOperation(value = "Create user", notes = "This can only be done by the logged in user.", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUser(@Valid User body) throws Exception;      @POST      @Path("/createWithArray")
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      public WebSocket write(String s) throws IOException {         if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);          return this;      }      @Override      public WebSocket write(byte[] b, int offset, int length) throws IOException {         if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));          return this;      }
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
rng.nextBytes(bytes);      ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);      ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);     assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));      assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());     assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());    }    static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction)
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
, (args = args.rest()).first()        , args.rest());     case 16:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.protocol(Protocol.HTTP_1_1)                  .code(200)                  .message("ok")                 .body(ResponseBody.create(new byte[0], MediaType.get("text/plain")))                  .build();          handler.onResponse(call, response);          assertNull(callback.getResponse());
MILLISECONDS.toSeconds(new DateTime(1970, 1, 1, 3, 4, 0, 0, DateTimeZone.UTC).getMillis()) + ",  " +                          MILLISECONDS.toSeconds(new DateTime(1960, 1, 22, 3, 4, 0, 0, DateTimeZone.UTC).getMillis()) + ",  " +                          MILLISECONDS.toSeconds(new DateTime(2013, 3, 22, 0, 0, 0, 0, 0, DateTimeZone.UTC).getMillis()) + ",  " +                         String.valueOf(TimeUnit.DAYS.toSeconds(123)));     
if (mod.getModuleActivator() != null)       mod.getModuleActivator().willStop();     }    catch (Exception t) {      log.warn("Unable to call module's Activator.willStop() method", t);     }
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface NettyEndpointBuilder              extends                  NettyEndpointConsumerBuilder, NettyEndpointProducerBuilder {          default AdvancedNettyEndpointBuilder advanced() {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      );     log.debug("Performing lookup: %s --> %s", ips, retVal);      return retVal;    }
}          }          if (isStatisticsEnabled()) {             statistics.addGetTimeNanos(System.nanoTime() - start);          }          CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);          final Object process = entryProcessor.process(entry, arguments);
reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());                      }                      if (restartRequired) {                         context.revertRestartRequired();                      } else if (reloadRequired) {                         context.revertReloadRequired();                      }                  }                  performRollback(context, configuration, name, originalModel);
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
}      @Override     public synchronized List<EdgeModel> getSelectedEdges() {          List<EdgeModel> selected = new ArrayList<>();          for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {              EdgeModel edgeModel = itr.next();
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {          long totalMessages = 50;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
jedis = jedisPool.getResource();                                       try {                                           if (service.endsWith(Constants.ANY_VALUE)) {                                              if (first) {                                                   first = false;                                                   Set<String> keys = jedis.keys(service);                                                   if (CollectionUtils.isNotEmpty(keys)) {
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, paging.asPostParameterList(), true));      }
public interface AdvancedWeatherEndpointBuilder              extends                  AdvancedWeatherEndpointConsumerBuilder, AdvancedWeatherEndpointProducerBuilder {          default WeatherEndpointBuilder basic() {
token = token.getParent())          {              final int type = token.getType();             if (type == TokenTypes.CLASS_DEF                 || type == TokenTypes.ENUM_DEF                 || type == TokenTypes.ANNOTATION_DEF)             { break;              }              else if (type == TokenTypes.LITERAL_NEW) { break;
logger.debug("Asynchronous invocation. asyncContext={}", asyncContext);          }         final Trace trace = asyncContext.currentAsyncTraceObject();          if (trace == null) {              return;          }
org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;      if (cpHost != null) {       snapshotPOJO = ProtobufUtil.createSnapshotDesc(snapshot);        cpHost.preRestoreSnapshot(snapshotPOJO, snapshotTableDesc);      }
assertEquals(encoded, encoding.encode(bytes));    }   private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
public interface JpaEndpointBuilder              extends                  JpaEndpointConsumerBuilder, JpaEndpointProducerBuilder {          default AdvancedJpaEndpointBuilder advanced() {
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {    if (this instanceof SingleOutputStreamOperator) {     ((SingleOutputStreamOperator<?, ?>) this).setMutability(false);    }
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
timestamps.add(System.nanoTime());                  if (empty) {                      try {                         Thread.sleep(401);                      } catch (InterruptedException e) {                      }
}    public boolean keyUp (int keycode) {    Object[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (((InputProcessor)items[i]).keyUp(keycode)) return true;     } finally {      processors.end();     }
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
public static DetailAST getAnnotationHolder(DetailAST ast)      {          if (ast == null) {             throw new IllegalArgumentException("the ast is null");          }          final DetailAST annotationHolder;
throws KeeperException {      try {        ZooKeeper zk = zkw.getZooKeeper();       if (zk.exists(znode, false) != null && zk.create(znode, new byte[0], Ids.OPEN_ACL_UNSAFE,              CreateMode.PERSISTENT);        }
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue);   /**    * @param aClass class of object getting length for
mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;");          } else if (propertyClass == long.class) {             mw.visitVarInsn(LLOAD, context.var("long", 2));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
this.baseTaskDir = new File(defaultDir(baseTaskDir, "persistent/task"));      this.hadoopWorkingPath = hadoopWorkingPath == null ? "/tmp/druid-indexing" : hadoopWorkingPath;     this.defaultRowFlushBoundary = defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary;      this.defaultHadoopCoordinates = defaultHadoopCoordinates == null                                      ? DEFAULT_DEFAULT_HADOOP_COORDINATES                                      : defaultHadoopCoordinates;
@Override   protected boolean isNestedArchive(Archive.Entry entry) {    if (entry.isDirectory()) {    return entry.getName().equals(BOOT_INF_CLASSES);    }    return entry.getName().startsWith(BOOT_INF_LIB);   }
{              int retVal = -Ints.compare(zkWorker.getCurrCapacityUsed(), zkWorker2.getCurrCapacityUsed());              if (retVal == 0) {               retVal = zkWorker2.getWorker().getHost().compareTo(zkWorker2.getWorker().getHost());              }              return retVal;
*/    public void majorCompact(final String tableNameOrRegionName)    throws IOException, InterruptedException {     majorCompact(Bytes.toBytes(tableNameOrRegionName));    }    /**
String ha2 = getMd5(method + ":" + uri.getPath());          String expectedResponse = getMd5(ha1 + ":" + nonce + ":" + nc + ":" + cnonce + ":" + qop + ":" + ha2);         assertEquals(orig.getResponse(), expectedResponse);      }      private String getMd5(String what) {
* @param k The key     * @param resultHandler - this will be called some time later to signify the value has been removed     */   public void remove(K k, Handler<AsyncResult<Boolean>> resultHandler);  }
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private IntBuffer toIntBuffer (int v[], int offset, int count) {     ensureBufferCapacity(count << 2);    intBuffer.clear();     com.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);     return intBuffer;    }
private static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();  private static volatile Set<String> actualStartupOrder;   /**    * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an
* {@inheritDoc}       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : "")));      }
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId("nonExistingProcessInstanceId").list().size());      if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {       assertEquals(3, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());      } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {       assertEquals(3, historyService.createHistoricActivityInstanceQuery().processInstanceId(process
private final String path;      private AssetTree client;     public ChronicleEngineConsumer(ChronicleEngineEndpoint endpoint, Processor processor) {          super(endpoint, processor);          this.path = endpoint.getPath();
public void testMultipleAlternativesWithCommonLabel_4() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(729);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {System.out.println($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
populateNearCache(clientMap, 1000);         HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());          final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();
private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {          public void timeout(Exchange oldExchange, int index, int total, long timeout) {             assertEquals(1000, timeout);              assertEquals(3, total);              assertEquals(0, index);              assertNotNull(oldExchange);
try {          ret = getMS().deleteTableColumnStatistics(dbName, tableName, colName);        } finally {         endFunction("delete_column_statistics_by_table: ", ret != false, null);        }        return ret;     }
return copy;      }     protected AsyncProcessor createErrorHandler(RouteContext routeContext, Exchange exchange, AsyncProcessor processor, Endpoint endpoint) {          AsyncProcessor answer = processor;          boolean tryBlock = exchange.getProperty(Exchange.TRY_ROUTE_BLOCK, false, boolean.class);
char[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);    ATN deserialized = new ATNDeserializer().deserialize(serializedAtn);   return new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);   }   public ParserInterpreter createParserInterpreter(TokenStream tokenStream) {
HttpRequest req = (HttpRequest) ch.readInbound();          DecoderResult dr = req.getDecoderResult();          assertFalse(dr.isSuccess());         assertTrue(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
public static DetailAST getAnnotationHolder(DetailAST ast)      {          if (ast == null) {             throw new IllegalArgumentException("the ast is null");          }          final DetailAST annotationHolder;
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
*  *  @see java.util.Comparator    */  public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;
*       * @return the message.       */     @Message(id = 10855, value = "Invalid byte stream.")      String invalidByteStream();      /**
public interface FacebookEndpointBuilder              extends                  FacebookEndpointConsumerBuilder, FacebookEndpointProducerBuilder {          default AdvancedFacebookEndpointBuilder advanced() {
public void testGraphTestSuite() throws Exception { this.stopWatch();         doTestSuite(new GraphTestSuite(this), ImmutableSet.of("testStringRepresentation","testDataTypeValidationOnProperties"));          printTestPerformance("GraphTestSuite", this.stopWatch());      }
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
String methodKey = method + "." + key;           Number n = getNumbers().get(methodKey);           if (n != null) {              return n.longValue();           }           String value = getMethodParameter(method, key);           if (StringUtils.isEmpty(value)) {
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
} else {                      statistics.increaseCacheHits(1);                  }                 statistics.addGetTimeNanos(System.nanoTime() - start);              }          }      }
String splitsSummary = String.format("Splits: %,4d total, %,4d pending, %,4d running, %,4d done",                      globalExecutionStats.getSplits(),                      max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),                     max(0, globalExecutionStats.getStartedSplits() - globalExecutionStats.getCompletedSplits()),                      globalExecutionStats.getCompletedSplits());              reprintLine(splitsSummary);
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}      @FixMethodOrder(MethodSorters.DEFAULT)     static class DummySortWithDefault {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
boolean needPostProjectionCoercion = false;          for (FunctionCall aggregate : analysis.getAggregates(node)) {              Expression rewritten = subPlan.rewrite(aggregate);             Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
scanInfo.setSmall(false);     counter = doScan(table, scanInfo, counter + 1);      table.close();      connection.close();
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
*       * @return the message.       */     @Message(id = 10848, value = "Exception getting result from host %s: %s")      String exceptionAwaitingResultFromHost(String name, String message);      /**
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
final R record = createRecord(value, expirationTime);          updateHasExpiringEntry(record);          if (isEventsEnabled()) {             publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),                                                  expirationTime, origin, completionId));          }          return record;      }
public interface KubernetesReplicationControllersEndpointBuilder              extends                  KubernetesReplicationControllersEndpointConsumerBuilder, KubernetesReplicationControllersEndpointProducerBuilder {          default AdvancedKubernetesReplicationControllersEndpointBuilder advanced() {
}      private static String getNodeText(Node node, boolean fixLinks) {         final StringBuilder result = new StringBuilder(20);          for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {              if (child.getNodeType() == Node.TEXT_NODE) {
public interface AtmosEndpointBuilder              extends                  AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {          default AdvancedAtmosEndpointBuilder advanced() {
public class CassandraSplitManager          implements ConnectorSplitManager  {     private static final Logger log = Logger.get(CassandraSplitManager.class);      private final String connectorId;      private final CassandraSession cassandraSession;
future.cancel(true);                          throw ExceptionUtil.rethrow(e, IOException.class);                      }                     ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);                      if (current != null) {                          clientConnection.close();                          clientConnection = current;
*       * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
CamelContext context = super.createCamelContext();          context.addComponent("properties", new PropertiesComponent("ref:prop"));         KafkaComponent kafka = new KafkaComponent(new PropertiesComponent("ref:prop"));          kafka.setBrokers("localhost:" + getKafkaPort());          context.addComponent("kafka", kafka);
assertEquals(1, serverStub.callsToProcessBufferInserter);          assertNull(lm.getField("id"));          assertEquals("foo", lm.getField("_something"));         assertEquals(5, lm.getFields().size());      }      @Test
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables();   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc
}    private void getTiles (int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {    TiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get("walls");     rectPool.freeAll(tiles);     tiles.clear();     for (int y = startY; y <= endY; y++) {
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.parseLong(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
@Test   public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_cn_4() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
* @param args message       */      public static void main(String[] args) {         if (args.length < 2) {              System.out.println("Usage: java twitter4j.examples.list.GetUserListStatuses [list owner screen name] [list id]");              System.exit(-1);          }
public interface JmsEndpointBuilder              extends                  JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {          default AdvancedJmsEndpointBuilder advanced() {
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param detailNode javadoc tag node       * @return java doc tag content appended in result       */     private static String getStringInsideTag(String result, DetailNode detailNode) {          final StringBuilder contents = new StringBuilder(result);          DetailNode tempNode = detailNode;          while (tempNode != null) {
loggerForCleaner.debug("Beginning log cleanup");                  int total = 0;                  final Timer.Context ctx = new Timer().time();                 for (final Log kafkaLog : JavaConversions.asJavaIterable(logManager.allLogs())) {                      if (kafkaLog.config().compact()) continue;                      loggerForCleaner.debug("Garbage collecting {}", kafkaLog.name());                      total += cleanupExpiredSegments(kafkaLog) +
}   public static long unixDateCeil(TimeUnitRange range, long date) {   return julianDateFloor(range, (int) date + EPOCH_JULIAN, false);   }   private static int julianDateFloor(TimeUnitRange range, int julian,
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
)      );     queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);      Assert.assertEquals(1, factory.getSegmentReferences().size());
if (timeout == null) {                  println(lock.tryLock());              } else {                 long time = Long.parseLong(timeout);                  try {                      println(lock.tryLock(time, TimeUnit.SECONDS));                  } catch (InterruptedException e) {
try {        mFileSystemMaster            .createDirectory(new AlluxioURI("alluxio:/a"), CreateDirectoryOptions.defaults());       Assert.fail("createDirectory was expected to fail with FileAlreadyExistsException");      } catch (FileAlreadyExistsException e) {      }
public interface GoogleDriveEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedGoogleDriveEndpointProducerBuilder advanced() {
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
import org.jboss.logging.MessageLogger;  /**  * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain * controller logger messages. See http:   * JBAS message id blocks.   * <p/>
}   public void glGenTextures (int n, int[] textures, int offset) {   GL.glGenTextures(n, toBuffer(textures, offset), 0);   }   public void glGetIntegerv (int pname, int[] params, int offset) {
public interface OptaPlannerEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedOptaPlannerEndpointProducerBuilder advanced() {
* @param request   The request object providing information about the HTTP request       * @param response  The response object providing functionality for modifying the response       */     void handle(T exception, Request request, Response response);  }
.outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);         assertThat(computeAntiJoin(inputStatistics, inputStatistics, unknown, u))                  .symbolStats(unknown, stats -> stats                          .nullsFraction(0)                          .distinctValuesCountUnknown()
ILogger logger;      String group;      int port;     private volatile boolean stop;      public MulticastDiscoverySender(DiscoveryNode discoveryNode, MulticastSocket multicastSocket,                                      ILogger logger, String group, int port)
import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;  import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute; public final class AnsjTokenizer extends Tokenizer {   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
* {@inheritDoc}       */      @Override     public Broadcaster addAtmosphereResource(AtmosphereResource r) {          try {              if (destroyed.get()) {                  logger.debug(DESTROYED, getID(), "addAtmosphereResource(AtmosphereResource<?, ?> r");                 return this;              }              start();
private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();      @Test     public void does_not_match_pickles_from_files_not_in_the_predicate_map() {          PickleEvent pickleEvent = createPickleEventWithLocations("path/file.feature", asList(pickleLocation(4)));         LinePredicate predicate = new LinePredicate(singletonMap("another_path/file.feature", asList(4L)));         assertFalse(predicate.apply(pickleEvent));      }      @Test
public interface PahoEndpointBuilder              extends                  PahoEndpointConsumerBuilder, PahoEndpointProducerBuilder {          default AdvancedPahoEndpointBuilder advanced() {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /**
@Configuration   @ConditionalOnBean(MongoTemplate.class)  @ConditionalOnEnabledHealthIndicator("mongo")   public static class MongoHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {
sClientMetrics = new ClientMetrics();      if (sExecutorService != null) {       sExecutorService.shutdownNow();      }      sExecutorService = Executors.newFixedThreadPool(          sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),
MaterializedResult expectedTables = MaterializedResult.resultBuilder(queryRunner.getDefaultSession(), VARCHAR)                  .row("orders")                  .build();         assertContains(actualTables, expectedTables);      }      @Test
* Allow this route to be run as an application       *       * @param args      * @throws Exception        */     public static void main(String[] args) throws Exception {          new Main().run(args);      }
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
void doWaiting() throws InterruptedException {        try {         while (new MetaTableLocator().waitMetaRegionLocation(watcher, 10) == null);        } catch (NotAllMetaRegionsOnlineException e) {        }
public Optional<Object> getInfo(ConnectorTableLayoutHandle layoutHandle)      {          HiveTableLayoutHandle tableLayoutHandle = checkType(layoutHandle, HiveTableLayoutHandle.class, "layoutHandle");         if (tableLayoutHandle.getPartitions().isPresent()) {              return Optional.of(new HiveInputInfo(tableLayoutHandle.getPartitions().get().stream()                      .map(HivePartition::getPartitionId)                      .collect(Collectors.toList())));
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);   }
public interface AdvancedFtpEndpointBuilder              extends                  AdvancedFtpEndpointConsumerBuilder, AdvancedFtpEndpointProducerBuilder {          default FtpEndpointBuilder basic() {
*/    @Nullable   public abstract byte[] getCacheKey();  }
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
float radius2 = radiusX * radiusX;       while (true) {        float px = MathUtils.random(width) - radiusX;       float py = MathUtils.random(height) - radiusY;        if (px * px + py * py <= radius2) {         x += px;         y += py / scaleY;
assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();     assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();     assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit
@Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/test");          servlet.service(request, response);
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);         assertTrue(model.getUniqueItems());      }  } \ No newline at end of file
}      for (String label : nodeLabels) {       if (q.accessibleNodeLabels.contains(label)) {          return true;        }      }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);   }
for (int i = 0; i < noOfTasks; i++) {     for (int j = 0; j < 2 + i; j++) {     final String part = new Path(bucketPath, "test-" + i + '-' + j).getPath();      Assert.assertTrue(paths.contains(part));      paths.remove(part);     }
*      javax.servlet.http.HttpServletResponse)     */    @Override   protected void doPost(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException,            ServletException {     String page = httpRequest.getParameter("page");
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}              }          }         if (securityDomain != null && ! securityDomain.isEmpty())              description.setSecurityDomain(securityDomain);         else if (globalSecurityDomain != null && !globalSecurityDomain.isEmpty())              description.setSecurityDomain(globalSecurityDomain);      }
public interface AdvancedLdifEndpointBuilder              extends                  EndpointProducerBuilder {          default LdifEndpointBuilder basic() {
publicType,                  ImmutableSet.copyOf(entry.getValue()),                 implementationMethodDescriptors.build()));        } catch (IOException e) {          messager.printMessage(Kind.ERROR, "failed");        }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);   }
private final Request request;      private final Response response;     CacheHttpURLConnection(Response response) {        super(response.request().url().url());        this.request = response.request();        this.response = response;
public interface AdvancedMQTTEndpointBuilder              extends                  AdvancedMQTTEndpointConsumerBuilder, AdvancedMQTTEndpointProducerBuilder {          default MQTTEndpointBuilder basic() {
*/    public void flush(final String tableNameOrRegionName)    throws IOException, InterruptedException {     flush(Bytes.toBytes(tableNameOrRegionName));    }    /**
* @return Imported canonical type's name.       */      private static String getImportedTypeCanonicalName(DetailAST importAst) {         final StringBuilder canonicalNameBuilder = new StringBuilder(256);          DetailAST toVisit = importAst;          while (toVisit != null) {              toVisit = getNextSubTreeNode(toVisit, importAst);
}      @Override     public synchronized List<Node> getSelectedUnderlyingNodes() {          List<Node> selected = new ArrayList<>();          for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {              NodeModel nodeModel = itr.next();
, (args = args.rest()).first()        , args.rest());     case 15:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = this.rest.getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Collection<InetSocketAddress> inetAddresses = new ArrayList<InetSocketAddress>();                  for (Address address : getKnownAddresses()) {                      Collection<InetSocketAddress> addresses = AddressHelper.getPossibleSocketAddresses(address.getPort(),                             address.getHost(), 4);                      inetAddresses.addAll(addresses);                  }                  return inetAddresses;
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(getNotAllowedExceptionMessage("helloForRoles"), e.getCause().getMessage());          }      }
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {         long callTimeoutMs = 10000;          Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeoutMs);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);          HazelcastInstance local = factory.newHazelcastInstance(config);
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}          for (Future<Pairs> future : lsFutures) {              Pairs pairs = future.get();             if (pairs != null && pairs.getKeyValues() != null) {                  for (KeyValue keyValue : pairs.getKeyValues()) {                      results.addKeyValue(keyValue);                  }
* the specified {@link Channel} once the io-thread runs again.       */      public static void fireExceptionCaughtLater(Channel channel, Throwable cause) {         channel.getPipeline().sendUpstreamLater(                  new DefaultExceptionEvent(channel, cause));      }
}      @Override     public synchronized void updateLOD() {          Iterator<NodeModel> iterator = octree.getNodeIterator();          for (; iterator.hasNext();) {              NodeModel obj = iterator.next();
@Test      public void testMaxBackoff() throws Exception {         final long initial = 100;          final double mult = 2d;         final long max = 2000;          ExponentialBackoffMsgRetryManager manager = new ExponentialBackoffMsgRetryManager(initial, mult, max);          long expectedWaitTime = initial;
if (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {         errors.rejectValue("states", "PatientState.error.endDateCannotBeBeforeStartDate");         return;       } else if (statesAndStartDates.contains(patientState.getState().getUuid() + ""                + patientState.getStartDate())) {         errors.rejectValue("states", "PatientState.error.duplicatePatientStates");
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
) throws IOException {      try {       ugi.checkTGTAndReloginFromKeytab();        return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {          @Override          public Token<?> run() throws IOException {
private final Block values;      private final int[] offsets;     private volatile long sizeInBytes;      private final long retainedSizeInBytes;      public ArrayBlock(int positionCount, boolean[] valueIsNull, int[] offsets, Block values)
public interface AdvancedCouchbaseEndpointBuilder              extends                  AdvancedCouchbaseEndpointConsumerBuilder, AdvancedCouchbaseEndpointProducerBuilder {          default CouchbaseEndpointBuilder basic() {
currentInodeDirectory.addChild(dir);        currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());        if (options.isPersisted()) {         String ufsPath = mMountTable.resolve(getPath(dir)).toString();          UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());          ufs.mkdirs(ufsPath, false);        }
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
private void add(final Class<?> primitiveType, final Class<?> wrapperType) {      primitiveToWrappers.put(primitiveType, wrapperType);     wrappersToPrimitives.put(wrapperType, primitiveType);    }    public Class<?> getWrapper(final Class<?> primitiveType) {
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
throw new MandatoryModuleException(ex.getModuleId(), "Got an error while starting a mandatory module: "                + e.getMessage() + ". Check the server logs for more information");       }      catch (Exception t2) {        log.warn("caught another error: ", t2);
ret = getMS().updateTableColumnStatistics(colStats);          return ret;        } finally {         endFunction("write_column_statistics: ", ret != false, null);        }      }
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
@Override              public void run()                      throws Exception {                 assertTrue(stats.getLastUpdateTime() >= lastUpdateTime);              }          });      }
};       final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getFriendsTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json", true));      }      /**
public List<User> getAllUser() {    if (applicationStatistics != null) {    applicationStatistics.incrListUserTimes();    }    return (List<User>) userJpaDao.findAll();   }
final String command,      final LinkedHashMap<String,ArrayList<String>> pathToAliases,      final LinkedHashMap<String,partitionDesc> pathToPartitionInfo,     final LinkedHashMap<String,Operator<? extends Serializable>> aliasToWork,      final tableDesc keyDesc,      List<tableDesc> tagToValueDesc,      final Operator<?> reducer,
public interface AtmosphereWebsocketEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedAtmosphereWebsocketEndpointProducerBuilder advanced() {
*     * @return The closed DataStream.    */  public DataStreamSink<OUT> print() {    DataStream<OUT> inputStream = this.copy();    PrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();   DataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (serviceType == ServiceType.MASTER_WEB) {        port = mLocalAlluxioClusterResource.get().getMaster().getWebLocalPort();      } else {       port = mLocalAlluxioClusterResource.get().getWorker().getWebLocalPort();      }      InetSocketAddress webAddr =          new InetSocketAddress(NetworkAddressUtils.getConnectHost(serviceType), port);
class DataRecordWithStats extends AbstractRecordWithStats<Data> {     protected Data value;      DataRecordWithStats() {          super();
public TaskServlet(Iterable<Task> tasks) {          final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();          for (Task task : tasks) {             builder.put("/" + task.getName(), task);          }          this.tasks = builder.build();      }
RSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,      RSocketMessageHandler messageHandler) {     return new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),      messageHandler.serverResponder());    }   }
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
@NotNull      @JsonProperty     private Size requestBufferSize = Size.kilobytes(16);      @NotNull      @JsonProperty     private Size requestHeaderBufferSize = Size.kilobytes(6);      @NotNull      @JsonProperty
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final JTextArea textArea;      private File lastDirectory;      private File currentFile;     private final ReloadAction reloadAction;      private final List<Integer>   linesToPosition  = new ArrayList<>();      /**
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.aggregator().header("id")                      .batchTimeout(500L)                       .batchSize(5)
ControlFlowGraph<Node> computeCFG() {     logger.fine("Computing Control Flow Graph");      Tracer tracer = newTracer("computeCFG");      ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);      process(cfa);
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
command.toString(), repeatCount);                   if (command.compareTo(oldPercent) > 0) {                       for (int i = 0; i < repeatCount; i++) {                          Thread.sleep(100);                           if (BindingType.brightness.equals(type)) {                               sendIncrease(bulb, rgbwSteps, bridgeId);                           } else if (BindingType.colorTemperature.equals(type)) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
}          }          if (isStatisticsEnabled()) {             statistics.addGetTimeNanos(System.nanoTime() - start);          }          CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);          final Object process = entryProcessor.process(entry, arguments);
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create("encoding", ModelType.STRING, true).build();     SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create("file", ModelType.OBJECT, false).              setCorrector(FileCorrector.INSTANCE).              setValidator(new FileValidator()).              build();
pipeline.addLast("encoder", new MessageEncoder());         pipeline.addLast("handler", new StormClientHandler(client, config));          return pipeline;      }
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          when(response.getWriter()).thenReturn(output);
public interface AdvancedAtomixQueueEndpointBuilder              extends                  AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {          default AtomixQueueEndpointBuilder basic() {
final StringBuilder listBuilder = new StringBuilder();         listBuilder.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"" + Latkes.getStaticServePath() + "/plugins/list/style.css\" />");          final Elements hs = doc.select("h1, h2, h3, h4, h5");
if (!phNames.contains(phName)) {          throw new MalformedException(              "Unrecognized message placeholder referenced: " + phName,             node);        }      }
private HashCollisionNode ensureEditable(AtomicReference<Thread> edit){    if(this.edit == edit)     return this;   return new HashCollisionNode(edit, hash, count, array);   }   private HashCollisionNode ensureEditable(AtomicReference<Thread> edit, int count, Object[] array){
switch (event.phase) {      case Began:       if (inputProcessor != null) inputProcessor.touchDragged(event.x, event.y, event.pointer);      if (numTouched == 1) justTouched = true;       break;      case Cancelled:      case Ended:
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid request", response = Void.class),          @ApiResponse(code = 404, message = "Not found", response = Void.class) })     void testEnumParameters(@FormParam(value = "enum_form_string_array")  List<String> enumFormStringArray,@FormParam(value = "enum_form_string")  String enumFormString,@HeaderParam("enum_header_string_array")   @ApiParam("Header parameter enum test (string array)") List
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);      Node node1 = Node.newString(Token.NAME, "f");      Node node2 = Node.newString(Token.NAME, "f");     assertTrue(node1.isEquivalentToTyped(node2));    }    public void testCheckTreeTypeAwareEqualsDifferent() {
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
, (args = args.rest()).first()        , args.rest());     case 16:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
Relationship ab = relationship( 17, a, "LOVES", b );          Relationship cb = relationship( 18, c, "HATES", b );         Relationship cd = relationship( 18, c, "KNOWS", d );          return new PathRepresentation<Path>(                  path( a, link( ab, b ), link( cb, c ), link( cd, d ) ));
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@ApiOperation(value = "Create user", notes = "This can only be done by the logged in user.", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUser(@Valid User body) throws Exception;      @POST      @Path("/createWithArray")
@Deprecated      public long getRedeliverDelay() {         return getRedeliveryDelay();      }      @Deprecated
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      protected void doStop() throws Exception {          if (channel != null) {             LOG.debug("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;
* @param dataSource the underlying data source    * @param entityManagerFactory the entity manager factory (or {@code null})    */  protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,     EntityManagerFactory entityManagerFactory) {    this.properties = properties;    this.entityManagerFactory = entityManagerFactory;
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* before growing the backing table. */   public IntIntMap (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface HazelcastInstanceEndpointBuilder              extends                  EndpointConsumerBuilder {          default AdvancedHazelcastInstanceEndpointBuilder advanced() {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.createTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
InodeDirectory inode2 = createInodeDirectory();      Assert.assertEquals(AbstractInodeTest.TEST_USER_NAME, inode2.getUserName());      Assert.assertEquals(AbstractInodeTest.TEST_GROUP_NAME, inode2.getGroupName());     Assert.assertEquals((short) 0777, inode2.getPermission());    }    /**
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
throw new NullPointerException("uncollectedPointCreator must not be null");          }          this.timeWindow = timeWindow;         this.uncollectedPointCreator = uncollectedPointCreator;      }      public Chart<P> build(List<P> sampledPoints) {
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_cn_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年5月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}          int readerIndex = undecodedChunk.readerIndex();          try {             ByteBuf line = buffer(64);              while (sao.pos < sao.limit) {                  byte nextByte = sao.bytes[sao.pos++];                  if (nextByte == HttpConstants.CR) {
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (handler == null) {                     String p = path.lastIndexOf("/") <= 0 ? "/" : path.substring(0, path.lastIndexOf("/"));                      while (p.length() > 0 && p.indexOf("/") != -1) {                          handler = match(p, handlers);
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);              if (hitCount == 1) {                  statistics.increaseCacheHits(hitCount);              } else {
*       * @return the message.       */     @Message(id = 10852, value = "Caught %s storing deployment content -- %s")      String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);      /**
public interface AdvancedMailEndpointBuilder              extends                  AdvancedMailEndpointConsumerBuilder, AdvancedMailEndpointProducerBuilder {          default MailEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables();   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc
return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());      }     private static void generateConstructor(ClassDefinition classDefinition,              List<Integer> joinChannels,              FieldDefinition sizeField,              List<FieldDefinition> channelFields,
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
final Class<?> type = field.getType();    final String name = tableInfo.getColumnName(field);   final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());    final Column column = field.getAnnotation(Column.class);    if (typeSerializer != null) {
public interface AdvancedGlanceEndpointBuilder              extends                  EndpointProducerBuilder {          default GlanceEndpointBuilder basic() {
bolt.execute(tickTuple);         verify(collector).ack(tickTuple);      }      @Test
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
SchedulerUtil.startup(getRuntimeProperties());     }    catch (Exception t) {      Context.shutdown();      WebModuleUtil.shutdownModules(servletContext);      throw new ServletException(t);
ios.cFlags += " -DFT2_BUILD_LIBRARY";     ios.cppFlags += " -DFT2_BUILD_LIBRARY";    new NativeCodeGenerator().generate();     new AntScriptGenerator()      .generate(new BuildConfig("gdx-freetype"), win32home, win32, win64, lin32, lin64, mac, mac64, android, ios);
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(246);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {System.out.println($ctx.toStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple));    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
throws BeansException {     if (bean.getClass().isAssignableFrom(JmsTemplate.class)) {      JmsTemplate jmsTemplate = (JmsTemplate) bean;     jmsTemplate.setPubSubDomain(true);     }     return bean;    }
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {      stateHolder.reloadVariables();     } else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {     stateHolder.reloadData();     } else {      logger.warn("Unknown action {}", bindingConfig.getAction());     }
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();          String label = sourceEdgeData.getLabel();         if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {              label = sourceEdgeTextData.getText();          } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {              label = null;
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
mapInitialLoadInfo.put(name, recordStore.isLoaded());              }             Set<RecordReplicationInfo> recordSet = new HashSet<RecordReplicationInfo>();              for (Entry<Data, Record> recordEntry : recordStore.getReadonlyRecordMap().entrySet()) {                  Data key = recordEntry.getKey();                  Record record = recordEntry.getValue();
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json", true));      }      /**
}      }     public synchronized AttributeModel getModel() {          Workspace workspace = projectController.getCurrentWorkspace();          if (workspace != null) {              AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(800);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
buf[count++] = ((byte)(0x80 | ((uc >> 6) & 0x3f)));                  buf[count++] = ((byte)(0x80 | (uc & 0x3f)));              } else {                 if(3 >= buf.length - count) {                      flushBuffer();                  }                  buf[count++] =((byte)(0xe0 | ((c >> 12))));
*       * @return the message.       */     @Message(id = 10864, value = "Error obtaining input stream from URL %s -- %s")      String errorObtainingUrlStream(String url, String message);      /**
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
ConfigurableEmbeddedServletContainerFactory factory = getFactory();    final Date[] date = new Date[1];    this.container = factory     .getEmbeddedServletContainer(new ServletContextInitializer() {       @Override       public void onStartup(ServletContext servletContext)         throws ServletException {
AuthorizationResult ar = context.authorize(rrOp, EnumSet.of(Action.ActionEffect.ADDRESS));                          if (ar.getDecision() == AuthorizationResult.Decision.DENY) {                             filteredData.addAccessRestrictedResource(absoluteChildAddr);                          } else {                              ModelNode childMap = directChildren.get(childType);                              if (childMap == null) {
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
@Override          protected void doStop() throws Exception {             COUNTER.incrementAndGet();          }      }
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
*  Is class declared as final.           *  @return true if class is declared as final           */         private boolean isDeclaredAsFinal() {              return declaredAsFinal;          }
.protocol(Protocol.HTTP_1_1)                  .code(200)                  .message("ok")                 .body(ResponseBody.create(new byte[0], MediaType.get("text/plain")))                  .build();          handler.onResponse(call, response);          assertNotNull(callback.getResponse());
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
command = new CreateCommand(keyName, options);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if (args[i].equals("delete")) {          String keyName = "--help";
cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);                  if (isStatisticsEnabled) {                      statistics.increaseCachePuts(1);                     statistics.addGetTimeNanos(System.nanoTime() - start);                  }                  break;              case REMOVE:
public interface JooqEndpointBuilder              extends                  JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {          default AdvancedJooqEndpointBuilder advanced() {
*/   private void poll() {    if (invalidCredentials || this.myqOnlineData == null) {    logger.trace("Invalid Account Credentials");     return;    }
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedOptaPlannerEndpointBuilder              extends                  AdvancedOptaPlannerEndpointConsumerBuilder, AdvancedOptaPlannerEndpointProducerBuilder {          default OptaPlannerEndpointBuilder basic() {
@Override      public StructField getStructFieldRef(String s) {        for(StructField field: fields) {         if (field.getFieldName().equalsIgnoreCase(s)) {            return field;          }        }
if (includeTokens != null) {              language.setIncludeTokens(includeTokens);          }         if (group != null && !group.isEmpty()) {              language.setGroup(group);          }          if (skipFirst != null) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
if (mWrite) {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            OutputStream os = mHdfsFs.create(new Path(filePath));            for (int k = 0; k < BLOCKS_PER_FILE; k ++) {             mBuf.putInt(0, k + mWorkerId);              os.write(mBuf.array());            }            os.close();
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
measurements.get((int)(totalOps*0.9999)).value());      }     exportStatusCounts(exporter);    }    @Override
}    }   public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {      if (INACTIVE) {        return;      }
* @param servers the servers that need to restart.       */      @LogMessage(level = Level.INFO)     @Message(id = 10807, value = "Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s")      void domainModelChangedOnReConnect(Set<ServerIdentity> servers);      /**
@Override      protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 1000);      }      @Override
"RETURN file.name, dir.name, role.name, readUser.name";          gen.get().addSnippet( "query3", createCypherSnippet( query ) );          result = engine.execute( query )                 .dumpToString();          assertTrue( result.contains("File1") );          assertTrue( result.contains("File2") );          assertTrue( result.contains("Admin1") );
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
public void test_cn_3() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月6日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
public GraphDatabaseService newHighlyAvailableDatabase( String path )      {         return newHighlyAvailableDatabaseBuilder( path ).newGraphDatabase();      }      public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )
Assert.assertEquals(1, result.size());        hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()            .map(regionName -> regionName.split("\\.")[1]).collect(Collectors.toList()));       ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());        result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));        Assert.assertEquals(0, result.size());
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      public void delete(Node node, Input input, String extractorId) throws IOException, APIException {         api.path(resource.removeExtractor(input.getId(), extractorId))                  .node(node)                  .expect(Http.Status.NO_CONTENT)                  .execute();
ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);      assertEquals(          hashFunction.newHasher().putBytes(littleEndian).hash(),         hashFunction.newHasher().putBytes(bigEndian).hash());      assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());     assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());    }    static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {
super.compare(modelA, modelB);         assertRemoveSubsystemResources(servicesB);      }
InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);      Assert.assertNotNull(workerAddress);     Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);      workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);      Assert.assertNotNull(workerAddress);     Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);    }  }
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
char[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);    ATN deserialized = new ATNDeserializer().deserialize(serializedAtn);   return new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);   }  }
* @param methodDef method definition token.       * @return true if a method can be overridden in a subclass.       */     private static boolean canBeOverridden(DetailAST methodDef) {          final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);          return ScopeUtils.getSurroundingScope(methodDef).isIn(Scope.PROTECTED)              && !ScopeUtils.isInInterfaceOrAnnotationBlock(methodDef)
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
attr.addResourceAttributeDescription(resources, keyPrefix, container);          }         ALIASES.addResourceAttributeDescription(resources, keyPrefix, container).                  get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);          container.get(CHILDREN, ModelKeys.SINGLETON, DESCRIPTION).set(resources.getString(keyPrefix + ".singleton"));
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          when(response.getWriter()).thenReturn(output);
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
boolean isExtern = false;        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();       if(functionJSDocInfo != null && functionJSDocInfo.getAssociatedNode() != null) {          isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();        }
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final int stringNumber =                  UniquePropertiesCheck.getLineNumber(testStrings,                          "some key");         Assert.assertEquals(0, stringNumber);      }      /**
.asc("producer")                  .asc("consumers"));         coll.setWriteConcern(WriteConcern.MAJORITY);          return coll;      }
MockEndpoint result = getMockEndpoint("mock:result");          result.expectedMinimumMessageCount(2);           result.expectedBodiesReceived("Message 1c", "Message 2b");
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedSparkEndpointBuilder              extends                  EndpointConsumerBuilder {          default SparkEndpointBuilder basic() {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public class Label extends Widget {    private LabelStyle style;    private final TextBounds bounds = new TextBounds();   private CharSequence text;    private BitmapFontCache cache;    private float prefWidth, prefHeight;    private int labelAlign = Align.LEFT;
public interface AS2EndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedAS2EndpointProducerBuilder advanced() {
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {            mBuf.putInt(0, k + mWorkerId);
if (getDomain() == null && c.getDomain() != null) {              return -1;         } else if (c.getDomain() == null && getDomain() != null) {              return 1;          }          v = getDomain().compareToIgnoreCase(c.getDomain());
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNanos(System.nanoTime() - start);          }          return result;      }
public void add (byte value1, byte value2, byte value3, byte value4) {    byte[] items = this.items;   if (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f)));    items[size] = value1;    items[size + 1] = value2;    items[size + 2] = value3;
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (mWrite) {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            OutputStream os = mHdfsFs.create(new Path(filePath));            for (int k = 0; k < BLOCKS_PER_FILE; k ++) {              mBuf.putInt(0, k + mWorkerId);
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, paging.asPostParameterList(), true));      }
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
public interface PubNubEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedPubNubEndpointProducerBuilder advanced() {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Farewell World", Exchange.FILE_NAME, "mysub/mysubsub/farewell.txt");         Thread.sleep(500);          File file = new File(getScpPath() + "/mysub/mysubsub/farewell.txt");          assertFileExists(file.getAbsolutePath());
assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();     assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();     assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10871, value = "Unknown server %s")      IllegalStateException unknownServer(ServerIdentity server);      /**
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue);   /**    * @param aClass class of object getting length for
@Override   public void internalReceiveCommand(String itemName, Command command) {    super.internalReceiveCommand(itemName, command);   logger.trace("MyQ binding received command '{}' for item '{}'",      command, itemName);    if (myqOnlineData != null) {     computeCommandForItem(command, itemName);
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      LOG.info("Loading image " + path);      DataInputStream imageIs = new DataInputStream(ufs.open(path));     JsonParser parser = JsonObject.createObjectMapper().getFactory().createParser(imageIs);      info.loadImage(parser, path);      imageIs.close();
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
return additionalReplacements;    }   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @return get cookies       */      public Map<String,Map<String, String>> getAllCookies() {         return cookies.rowMap();      }      /**
config.set(KeyProviderFactory.KEY_PROVIDER_PATH, "user:      ks.setConf(config);      rc = ks.run(args1);     assertEquals(1, rc);      assertTrue(outContent.toString().contains("There are no valid " +    "KeyProviders configured."));    }
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
int cleanedSize = cleaned.size();      waitCount = 0;      while (cleanedSize < allocatedSize && waitCount++ < 200) {       Thread.sleep(200);        resp = nm.nodeHeartbeat(true);        cleaned = resp.getContainersToCleanup();        cleanedSize += cleaned.size();
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
* @see <a href="http:       */      public ResponseList<Status> getMentions(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, paging.asPostParameterList(), true));      }
}    @GwtIncompatible("Reader/Writer")   private static void testStreamingEncodingWithSeparators(        BaseEncoding encoding, String decoded, String encoded) throws IOException {      testStreamingEncoding(encoding, decoded, encoded);
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),          @ApiResponse(code = 404, message = "User not found", response = Void.class) })     void deleteUser(@PathParam("username") @ApiParam("The name that needs to be deleted") String username) throws Exception;      @GET      @Path("/{username}")
private TransactionManager transactionManager;     @Resource(lookup = "java:jboss/mail")      private Context context;     @Resource(lookup = "java:/TransactionManager")      public void setTransactionManager(TransactionManager transactionManager) {          this.transactionManager = transactionManager;      }
Node node1 = Node.newString(Token.NAME, "f");      node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");     assertFalse(node1.isEquivalentToTyped(node2));    }    public void testVarArgs1() {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10802, value = "Interrupted awaiting final response from server %s on host %s")      void interruptedAwaitingFinalResponse(String serverName, String hostName);      /**
}, executor);      }     private synchronized void sendDelete()      {          HttpResponseFuture<StatusResponse> resultFuture = httpClient.executeAsync(prepareDelete().setUri(location).build(), createStatusResponseHandler());          future = resultFuture;
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param hostname the name of the host     */    public SpecificHostPolicy(String hostname) {     mHostname = Preconditions.checkNotNull(hostname, "hostname");    }    @Override
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
String sessionTTL = getParam("session-ttl-seconds");              if (sessionTTL != null) {                  MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);                 mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));                  hzConfig.addMapConfig(mapConfig);              }          } catch (UnsupportedOperationException ignored) {
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
*     * @return The id of the block's locker     */   public int getLockId() {      return mLockId;    }
rel.setPersonA(personA);     rel.setPersonB(personB);     rel.setRelationshipType(relType);    ps.saveRelationship(rel);    }    public void voidRelationship(Integer relationshipId, String voidReason) {
ClientConfig jerseyConfig = new ClientConfig();    Client client = ClientBuilder.newClient(jerseyConfig);   client = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS));    WebTarget resource = client.target(getBaseUri()).path("auth-digest");
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*  * @see    */  public abstract int compareToReference(TypeComparator<T> referencedComparator);   /**    * Compares two records in serialized from. The return value indicates the order of the two in the same way
@Test      public void test_Decode_Return_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    }   private static final ImmutableBiMap<Integer, String> INT_TO_STRING_MAP =        new ImmutableBiMap.Builder<Integer, String>()            .put(1, "one")            .put(2, "two")
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void test_Decode_Error_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
final CompressionLevel compressionLevel, int indexOfOutputGate, int indexOfInputGate,     final DistributionPattern distributionPattern) throws JobGraphDefinitionException {    this.connectTo(vertex, channelType, compressionLevel, indexOfOutputGate, indexOfInputGate, distributionPattern,    true);   }   /**
*   * @author Craig Walls   * @author Phillip Webb  * @since 1.1.0   */ public abstract class SocialAutoConfigurerAdapter extends SocialConfigurerAdapter {   @Override   public void addConnectionFactories(ConnectionFactoryConfigurer configurer,
}          if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {             LOG.debug("Building gRPC server on " + configuration.getHost() + ":" + configuration.getPort());              serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));          } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {             LOG.debug("Building gRPC server on <any address>" + ":"
ConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);     anotherConceptName.setName(duplicateName);     newConcept.addName(anotherConceptName);    Errors errors = new BindException(newConcept, "concept");     new ConceptValidator().validate(newConcept, errors);     Assert.assertEquals(false, errors.hasErrors());    }
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*/    public void compact(String tableOrRegionName, String columnFamily)      throws IOException,  InterruptedException {     compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));    }    /**
private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {              if (partitionLastOffset != -1) {                 if (offsetRepository != null && partition != null) {                      log.debug("Saving offset repository state {} from topic {} with offset: {}", threadId, topicName, partitionLastOffset);                      offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));                  } else if (forceCommit) {
public interface StreamEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedStreamEndpointProducerBuilder advanced() {
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
fakePool.runAll();     assertThat(Thread.currentThread().interrupted()).isTrue();    }    public void testInterrupt_doesNotStopExecution() {
Pattern argPattern = Pattern.compile("(--?[a-zA-Z_]+)=(.*)");      Pattern quotesPattern = Pattern.compile("^['\"](.*)['\"]$");      List<String> processedArgs = new ArrayList<>();
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
, (args = args.rest()).first()        , args.rest());     case 13:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
Thread.yield();     response = client.get(path, MIMETYPE_PROTOBUF);      assertEquals(response.getCode(), 404);
log.makeAlert(e, "Failed to persist merged index[%s]", schema.getDataSource())                   .addData("interval", interval)                   .emit();               if (!shuttingDown) {                  abandonSegment(truncatedTime, sink);
@Bean    @ConditionalOnMissingBean(name = "redisTemplate")   public RedisOperations<Object, Object> redisTemplate(      RedisConnectionFactory redisConnectionFactory)      throws UnknownHostException {     RedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();
@Test   public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {console.log($ctx.toStringTree(null, this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}     @Cucumber.Options(monochrome = true)      static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {      }     @Cucumber.Options(monochrome = false)      static class BaseClassWithMonoChromeFalse {      }
rs.close();    }    public void testMetaDataGetTableTypes() throws SQLException {     metaDataGetTableTypeTest(new HiveTableTypeMapping().getTableTypeNames());    }    public void testMetaDataGetHiveTableTypes() throws SQLException {      Statement stmt = con.createStatement();      stmt.execute("set " + HiveConf.ConfVars.HIVE_SERVER2_TABLE_TYPE_MAPPING.varname +
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of("runs")));          when(request.getParameterValues("runs")).thenReturn(new String[]{"1"});          when(response.getWriter()).thenReturn(output);
}   public void glBindTexture (int target, int texture) {   GL.glBindTexture(target, texture);   }   public void glBlendFunc (int sfactor, int dfactor) {
measurements.get((int)(totalOps*0.9999)).value());      }     exportStatusCounts(exporter);    }    @Override
final PathAddress address = PathAddress.pathAddress(PathAddress.pathAddress(parentAddress), PathElement.pathElement(CommonAttributes.REMOTE_OUTBOUND_CONNECTION, name));         operations.add(getConnectionAddOperation(name, outboundSocketBindingRef, username, securityRealm, address));          final EnumSet<Element> visited = EnumSet.noneOf(Element.class);          while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
FrameShower(Component parent, final String msg) {              this.parent = parent;              this.msg = msg;          }
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private static ServiceName installSessionManagerFactory(ServiceTarget target, ServiceName deploymentServiceName, String deploymentName, Module module, JBossWebMetaData metaData, ServletContainerService servletContainerService) {          Integer maxActiveSessions = metaData.getMaxActiveSessions();         if(maxActiveSessions == null && servletContainerService != null) {              maxActiveSessions = servletContainerService.getMaxSessions();          }          ServiceName name = deploymentServiceName.append("session");
}      public boolean isSingleton() {         return true;      }      public String getPath() {
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
for (int i = 0; i < sourcesAsStrings.length; i++) {        sourcesAsStrings[i] = Errors.convert(sourcesAsStrings[i]).toString();      }     return new Message(ImmutableList.copyOf(sourcesAsStrings), message, cause);    }    private static final long serialVersionUID = 0;
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /**
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
response.get(FAILURE_DESCRIPTION).set("Operation handler failed to complete");                              }                              response.get(OUTCOME).set(FAILED);                             response.get(ROLLED_BACK).set(true);                              return resultAction = ResultAction.ROLLBACK;
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:      */      public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json", true));      }      /**
}       public final ImmutableList<ObjectType> getExtendedInterfaces() {      return extendedInterfaces;    }
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
}              if (!replaced) {                  if (isEventsEnabled()) {                     publishEvent(createCacheCompleteEvent(toEventData(key), completionId));                  }              }              onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
command.toString(), repeatCount);                   if (command.compareTo(oldPercent) > 0) {                       for (int i = 0; i < repeatCount; i++) {                          Thread.sleep(100);                           if (BindingType.brightness.equals(type)) {                               sendIncrease(bulb, rgbwSteps, bridgeId);                           } else if (BindingType.colorTemperature.equals(type)) {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
public interface SftpEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSftpEndpointProducerBuilder advanced() {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedMicrometerEndpointBuilder              extends                  EndpointProducerBuilder {          default MicrometerEndpointBuilder basic() {
checkConfig.addAttribute("matchDirectoryStructure", "false");          final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;         verify(checkConfig, getNonCompilablePath("InputPackageDeclarationDiffDirectory.java"),                 expected);      }      @Test
if (record == null || isExpired) {                  replaced = false;                  if (isEventsEnabled()) {                     publishEvent(createCacheCompleteEvent(toEventData(key), completionId));                  }              } else {                  replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,
final Role roleToUpdate = roleService.load(name);          roleToUpdate.setName(role.name());         roleToUpdate.setDescription(role.description().orNull());          roleToUpdate.setPermissions(role.permissions());          try {              roleService.save(roleToUpdate);
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (globalLocaleList == null) {      globalLocaleList = new GlobalLocaleList();      addGlobalPropertyListener(globalLocaleList);     String currentPropertyValue = getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, "");      GlobalProperty allowedLocalesProperty = new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,              currentPropertyValue);      globalLocaleList.globalPropertyChanged(allowedLocalesProperty);
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
protected CamelContext createCamelContext() throws Exception {          NagiosEventNotifier notifier = new NagiosEventNotifier();          notifier.getConfiguration().setHost("localhost");         notifier.getConfiguration().setPort(25668);          notifier.getConfiguration().setPassword("password");          CamelContext context = super.createCamelContext();
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
public interface HazelcastQueueEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastQueueEndpointProducerBuilder advanced() {
*       * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create("value", ModelType.STRING).build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING, true).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();
@Test    public void createAtomic() throws IOException {      String testFile = PathUtils.concatPath(mUnderfsAddress, "createAtomic");     OutputStream stream = mUfs.create(testFile, CreateOptions.defaults().setEnsureAtomic(true));      stream.write(TEST_BYTES);      Assert.assertFalse(mUfs.isFile(testFile));      stream.close();
* @should return default value if property name does not exist    * @should not fail with null default value    */  public String getGlobalProperty(String propertyName, String defaultValue);   /**    * Gets the global property that has the given <code>propertyName</code>
if (value instanceof AsciiString) {              return ((AsciiString) value).parseShort();          }         return Short.parseShort(value.toString());      }      @Override
@Before      public void setup() throws Exception {          SimpleRegistry registry = new SimpleRegistry();         registry.bind("kinesisClient", amazonKinesisClient);          camelContext = new DefaultCamelContext(registry);      }
for(MessageAndOffset msg: msgs) {              _pending.add(_emittedToOffset);              _waitingToEmit.add(new MessageAndRealOffset(msg.message(), _emittedToOffset));             _emittedToOffset = msg.nextOffset();          }          if(numMessages>0) {            LOG.info("Added " + numMessages + " messages from Kafka: " + _consumer.host() + ":" + _partition.partition + " to internal buffers");
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test   public void startServletAndFilter() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();   this.container = factory.getEmbeddedServletContainer(      exampleServletRegistration(), new FilterRegistrationBean(        new ExampleFilter())); assertThat(getResponse("http:
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
String sessionTTL = getParam("session-ttl-seconds");              if (sessionTTL != null) {                  MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);                 mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));                  hzConfig.addMapConfig(mapConfig);              }          } catch (UnsupportedOperationException ignored) {
pressedButton = button;     touchDownX = x;     touchDownY = y;    visualPressedTime = TimeUtils.millis() + (long)(visualPressedDuration * 1000);     return true;    }
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
grammarBuilder.append("  | '(' e ')'   {$v = $e.v;} grammarBuilder.append("  | left=e INC  {$v = $left.v + 1;} grammarBuilder.append("  | left=e DEC  {$v = $left.v - 1;}   grammarBuilder.append("  | ID          {$v = 3;}    grammarBuilder.append("  ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'
*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
try {                      return unmarshaller.unmarshall(jsonContent.jsonNode);                  } catch (Exception e) {                     LOG.info("Unable to unmarshall exception content", e);                      return null;                  }              }
public final static String SUSPEND = NettyCometSupport.class.getName() + ".suspend";      public final static String RESUME = NettyCometSupport.class.getName() + ".resume";     private static final Logger logger = LoggerFactory.getLogger(NettyCometSupport.class);      public NettyCometSupport(AtmosphereConfig config) {          super(config);
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
});          MockEndpoint result = MockEndpoint.resolve(ctx, "mock:result");          clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, "ClientMock Scheduler", 1));         registry.bind("amazonSQSClient", clientMock);          result.expectedMessageCount(0);
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);   }
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
MutableLong previousPushedSeqId = pushed.getUnchecked(encodedNameAsString);      if (seqId == previousPushedSeqId.longValue() + 1) {       LOG.debug("The sequence id for {} is continuous, pass");        previousPushedSeqId.increment();        return true;      }
private Color color = new Color(0.6f, 0.6f, 0.6f);     private float size = 10.0f;      public ActionsToolbar() {          initDesign();
*/   public GarageDoorData getGarageData() throws InvalidLoginException,     IOException {   logger.trace("Retreiveing door data");    String url = String.format(      "%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s",      WEBSITE, enc(appId), enc(getSecurityToken()));
if (LOG.isDebugEnabled()) {          LOG.debug("Current assignment of " +           info.getRegionNameAsString() +            " is not valid: serverInfo: " + storedInfo + ", passed startCode: " +            startCode + ", storedInfo.startCode: " +            ((storedInfo != null)? storedInfo.getStartCode(): -1) +
.setXmlName(Attribute.MODE.getLocalName())                      .setAllowExpression(true)                      .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)                     .setValidator(new EnumValidator<TransactionMode>(TransactionMode.class, false, true))                      .setDefaultValue(new ModelNode().set(TransactionMode.NONE.name()))                      .build();      SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE =
public class JedisByteHashMap implements Map<byte[], byte[]>, Cloneable, Serializable {    private static final long serialVersionUID = -6971431362627219416L;   private final Map<ByteArrayWrapper, byte[]> internalMap = new HashMap<ByteArrayWrapper, byte[]>();    @Override    public void clear() {
public interface AdvancedCxfEndpointBuilder              extends                  AdvancedCxfEndpointConsumerBuilder, AdvancedCxfEndpointProducerBuilder {          default CxfEndpointBuilder basic() {
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
case MotionEvent.ACTION_DOWN:      case MotionEvent.ACTION_POINTER_DOWN:  realPointerIndex = input.getFreePointerIndex();     if (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;       input.realId[realPointerIndex] = pointerId;       x = (int)event.getX(pointerIndex);       y = (int)event.getY(pointerIndex);
processSelectedKeys(selector.selectedKeys());                      }                      long currentTimeNanos = System.nanoTime();                     if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 10 * 1000000L) {                          lastConnectTimeoutCheckTimeNanos = currentTimeNanos;                          processConnectTimeout(selector.keys(), currentTimeNanos);                      }
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
)      );     queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);      Assert.assertEquals(1, factory.getSegmentReferences().size());
public interface ApnsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedApnsEndpointProducerBuilder advanced() {
t = newT;                  }                 connectPromise.tryFailure(t);                  closeIfClosed();              } finally {
List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());                  for (ChannelSftp.LsEntry f : files) {                      if (f.getFilename().equals(file.getFileName())) {                         newLastModified = f.getAttrs().getMTime();                          newLength = f.getAttrs().getSize();                      }                  }
+ (StringUtils.isEmpty(modelPackage) ? "" : (modelPackage + "/")) + dataType;      }           private String getJSDocType(CodegenModel cm, CodegenProperty cp) {          if (Boolean.TRUE.equals(cp.isContainer)) {
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final Sink output = new Sink("allUsers.json").withInputs(union);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }  }
logger.debug("got a query");      if (!isProperlyConfigured) {       logger.warn("Configuration for influxdb not yet loaded or broken.");        return Collections.emptyList();      }      if (!isConnected()) {       logger.warn("InfluxDB is not yet connected");        return Collections.emptyList();      }
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (!phNames.contains(phName)) {          throw new MalformedException(              "Unrecognized message placeholder referenced: " + phName,             node);        }      }
URI firstNode = createNode();          addProperty(firstNode, "name", "Joe Strummer");          URI secondNode = createNode();         addProperty(secondNode, "band", "The Clash");
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);          public void processCall(Node node, Packet packet) {             final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getOrCreateProxyByName(packet.name);              final Integer value = (Integer) toObject(packet.getValueData());              final boolean flag = (Boolean) toObject(packet.getKeyData());              processCall(packet, semaphoreProxy, value, flag);
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the    *                     output view, which may have an underlying I/O channel to which it delegates.    */  public abstract void serialize(T record, DataOutputView target) throws IOException;   /**    * De-serializes a record from the given source input view into the given target record instance.
public void testMove() throws Exception    {      MockStorageService mockS3Client = new MockStorageService();     S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());      mockS3Client.putObject("main", new S3Object("baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip"));      mockS3Client.putObject("
protected R visitCreateTable(CreateTable node, C context)      {         return visitStatement(node, context);      }      protected R visitDropTable(DropTable node, C context)      {         return visitStatement(node, context);      }  }
log.debug("Optimistic locking exception : " + exception);              } else {               log.error("Error while closing command context", exception);              }              transactionContext.rollback();
* @see <a href="http:       */      public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, paging.asPostParameterList(), true));      }
ProvisionListener[] listeners) {      this.source = source;      this.keyMatcher = typeMatcher;     this.listeners = ImmutableList.copyOf(listeners);    }
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
.ifFalse(type.invoke("hash", int.class, blockRef, blockPosition));      }     private static void generateRowEqualsRowMethod(              ClassDefinition classDefinition,              CallSiteBinder callSiteBinder,              List<Type> joinChannelTypes)
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);          }          return result;      }
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
public static class MyBean {         @org.apache.camel.RecipientList(strategyRef = "myStrategy", parallelProcessing = true, timeout = 1000)          public String[] route(String body) {              return new String[] {"direct:a", "direct:b", "direct:c"};          }
d.setMinorVersion(Integer.parseInt(servletVersion.charAt(2) + ""));              } else {                  d.setMajorVersion(3);                 d.setMinorVersion(1);              }
if (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {      stateHolder.reloadVariables();     } else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {     stateHolder.reloadData();     } else {      logger.warn("Unknown action {}", bindingConfig.getAction());     }
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
fireChannelClosed(pairedChannel);          } finally {              future.setSuccess();             if (localAddress != null && localAddress.isEmpty()) {                  LocalChannelRegistry.unregister(localAddress);              }          }
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);   }
public interface PropertiesEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedPropertiesEndpointProducerBuilder advanced() {
super(name, service.getNodeEngine());          this.partitionId = partitionId;          this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);         final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);          this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);          this.creationTime = currentTimeMillis();      }
HIVE_SERDE_NOT_FOUND(18, EXTERNAL),      HIVE_UNSUPPORTED_FORMAT(19, EXTERNAL),     HIVE_PARTITION_READ_ONLY(20, EXTERNAL),     HIVE_TOO_MANY_OPEN_PARTITIONS(21, EXTERNAL),      HIVE_CONCURRENT_MODIFICATION_DETECTED(22, EXTERNAL),      HIVE_COLUMN_ORDER_MISMATCH(23, USER_ERROR),      HIVE_FILE_MISSING_COLUMN_NAMES(24, EXTERNAL),
}      else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {       TypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();      mTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);      }     }     catch (ClassNotFoundException e) {
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    void recordFunctionInformation() {     logger.fine("Recording function information");      startPass("recordFunctionInformation");      RecordFunctionInformation recordFunctionInfoPass =          new RecordFunctionInformation(
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (itemMap.getSoapValueParser() == null) {              NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());             if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {                  value = nlDataOutNodes.item(0).getTextContent();              } else {
}      @Override     public synchronized List<EdgeModel> getSelectedEdges() {          List<EdgeModel> selected = new ArrayList<>();          for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {              EdgeModel edgeModel = itr.next();
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.retLong();      }     private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)      {          Parameter blockIndex = arg("blockIndex", int.class);          Parameter blockPosition = arg("blockPosition", int.class);
checkToken(token);     Account currentUser = accountService.getLoginUser(token);     List<Book> books = adminService.listMyBook(currentUser.id, pageable);    return BeanMapper.mapList(books, BookDto.class);    }    @RequestMapping(value = "/api/myborrowedbook", produces = MediaTypes.JSON_UTF_8)
public interface NettyHttpEndpointBuilder              extends                  NettyHttpEndpointConsumerBuilder, NettyHttpEndpointProducerBuilder {          default AdvancedNettyHttpEndpointBuilder advanced() {
*/      public ResponseList<Status> getUserTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json"                  , null, paging.asPostParameterList(), true));      }
public int getDegree(Node node) {          view.checkUpdate();          AbstractNode absNode = checkNode(node);         int count = view.getClusteredLayerDegree(absNode);          return count;      }
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Object msg = e.getMessage();          if (msg instanceof HttpResponse && ((HttpResponse) msg).getStatus().getCode() == 100) {             ctx.sendUpstream(e);          } else if (msg instanceof HttpMessage) {              HttpMessage m = (HttpMessage) msg;
boolean isDoubleA = isDouble(clazzA);          boolean isDoubleB = isDouble(clazzB);         if ((isDoubleA && isDoubleB) || (isDoubleA && isIntB) || (isDoubleB && isIntA)) {              return a.doubleValue() == b.doubleValue();          }
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);   }
ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.trace("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);
Arrays.asList(                          "bool",                          "qint32",                         "qint64",                         "float",                         "double")          );          supportingFiles.add(new SupportingFile("helpers-header.mustache", sourceFolder, PREFIX + "Helpers.h"));
}      private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, false, writer);      }  }
binder.bind(new MutablePropertyValues(Collections.singletonMap("server.address",      "127.0.0.1")));    assertFalse(binder.getBindingResult().hasErrors());   assertEquals(InetAddress.getByName("127.0.0.1"), this.properties.getAddress());   }   @Test
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue);   /**    * @param aClass class of object getting length for
node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");      node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));     assertTrue(node1.isEquivalentToTyped(node2));    }    public void testCheckTreeTypeAwareEqualsSameNull() {
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
processEngineConfiguration.setClock(testClock);     testClock.setCurrentTime(new Date(1));      runtimeService.startProcessInstanceByKey("testTimerCancelledEvent");      listener.clearEventsReceived();
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
*/      public void destroy() {          isDestroyed.set(true);         cache.remove(this);      }      private boolean destroyed(){
* @param children An array of Object containing the inserted, removed, or changed objects.       * @see EventListenerList       */     private void fireTreeStructureChanged(Object source, Object[] path,                                    int[] childIndices,                                    Object... children) {
StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort);    env.enableCheckpointing(500);    env.setParallelism(parallelism);   env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);
protected void handleMultiMapTryLock(String[] args) {          String key = args[1];         long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;          boolean locked;          if (time == 0) {              locked = getMultiMap().tryLock(key);
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface KafkaEndpointBuilder              extends                  KafkaEndpointConsumerBuilder, KafkaEndpointProducerBuilder {          default AdvancedKafkaEndpointBuilder advanced() {
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
}                 if (selectedFile != null && fileFilter != null) {                      String filePath = selectedFile.getAbsolutePath();                      filePath = filePath.substring(0, filePath.lastIndexOf("."));                      filePath = filePath.concat(fileFilter.getExtensions().get(0));
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
if (quoteMatcher.matches()) {        String[] ret = new String[3];        ret[0] = "\"";       ret[1] = quoteMatcher.group(1);        ret[2] = "\"";        return ret;
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
public interface AdvancedHipchatEndpointBuilder              extends                  AdvancedHipchatEndpointConsumerBuilder, AdvancedHipchatEndpointProducerBuilder {          default HipchatEndpointBuilder basic() {
@Override      public PoolableProvider returnBroadcaster(Broadcaster b) {         logger.trace("Return Object {} now at size {}", b, count.getAndDecrement());          try {              genericObjectPool.returnObject(b);          } catch (IllegalStateException ex) {
}      @Deprecated @Override     public Class getClass()      {         return super.getClass();      }  }
}      public <T> Future<T> submit(Runnable task, T result) {         return submit(new RunnableAdapter<T>(task, result));      }      public Future<?> submit(Runnable task) {
context.start();          for (int i = 0; i < 10; i++) {             getMockEndpoint("mock:" + i).expectedMessageCount(200);          }          ExecutorService executors = Executors.newFixedThreadPool(20);         for (int i = 0; i < 200; i++) {              executors.execute(new Runnable() {                  public void run() {                      for (int i = 0; i < 10; i++) {
@Override          public void endElement(String namespaceURI,                                 String localName,                                String qName) {              if (qName.equals(MODULE)) {                  final Configuration recentModule =
public interface AdvancedKMSEndpointBuilder              extends                  EndpointProducerBuilder {          default KMSEndpointBuilder basic() {
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should delete global properties from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperties(List<GlobalProperty> globalProperties);   /**    * Save the given global property to the database. If the global property already exists,
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    public Texture (FileHandle file, Format format, boolean useMipMaps) {    if (file.name().contains(".etc1") || file.name().contains(".etc2")) {      create(new ETC1TextureData(file, useMipMaps));     } else {      create(new FileTextureData(file, null, format, useMipMaps));
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/test");          servlet.service(request, response);
*       * @return the message.       */     @Message(id = 10850, value = "No handler for operation %s at address %s")      String noHandlerForOperation(String operationName, PathAddress address);      /**
public void test_kr_1() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
@SuppressWarnings("unchecked")      public void returnsA500OnExceptions() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          final RuntimeException ex = new RuntimeException("whoops");
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);   }
}              } catch (SocketException e) {                 logger.warn("Failed to enumerate network interfaces", e);              }          }
if (mWrite) {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            OutputStream os = mHdfsFs.create(new Path(filePath));            for (int k = 0; k < BLOCKS_PER_FILE; k ++) {             mBuf.putInt(0, k + mWorkerId);              os.write(mBuf.array());            }            os.close();
if (!root.exists()) {            if (startOpt != StartupOption.FORMAT) {             LOG.warn("Storage directory " + rootPath + " does not exist");              return StorageState.NON_EXISTENT;            }            LOG.info(rootPath + " does not exist. Creating ...");
return HConstants.NORMAL_QOS;      } if (methodName.equals("scan") || methodName.equals("create") || methodName.equals("update")) {        ScanRequest request = (ScanRequest)param;        if (!request.hasScannerId()) {          return HConstants.NORMAL_QOS;
*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
this.limit = limit;          this.remaining = remaining;          this.resetTimeInSeconds = resetTimeInSeconds;         this.secondsUntilReset = (int) ((resetTimeInSeconds * 1000L - System.currentTimeMillis()) / 1000);      }      RateLimitStatusJSONImpl(JSONObject json) throws TwitterException {
String splitsSummary = String.format("Splits: %,4d total, %,4d pending, %,4d running, %,4d done",                      globalExecutionStats.getSplits(),                      max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),                     max(0, globalExecutionStats.getStartedSplits() - globalExecutionStats.getCompletedSplits()),                      globalExecutionStats.getCompletedSplits());              reprintLine(splitsSummary);
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
URL url = Thread.currentThread().getContextClassLoader().getResource(name);          Assert.assertNotNull(url);         XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader(new StreamSource(url.toString()));          mapper.parseDocument(operations, reader);          return operations;
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
return list;    }   @InterfaceAudience.Private   public void setProperties(Properties props) {      super.setProperties(props);    }
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      public final AtmosphereResource create(AtmosphereConfig config,                                             Broadcaster broadcaster,                                            AtmosphereRequest request,                                             AtmosphereResponse response,                                             AsyncSupport<?> a,                                             AtmosphereHandler handler,
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface HdfsEndpointBuilder              extends                  HdfsEndpointConsumerBuilder, HdfsEndpointProducerBuilder {          default AdvancedHdfsEndpointBuilder advanced() {
@ConditionalOnMissingBean    RSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,      RSocketMessageHandler rSocketMessageHandler) {    return new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());    }   }
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
Thread.sleep(2000);          transactionTemplate.execute(new TransactionCallback<Object>() {              public Object doInTransaction(TransactionStatus status) {
}    if (doScroll) {    smoothScrollTo(mode == MODE_PULL_DOWN_TO_REFRESH ? -headerHeight : headerHeight);    }   }
}      }     private static boolean shouldAppendSpace(StringBuilder text, char firstCharToAppend) {          final boolean result;          if (text.length() == 0) {
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
@ApiOperation(value = "Creates list of users with given input array", notes = "", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUsersWithArrayInput(@Valid List<User> body) throws Exception;      @POST      @Path("/createWithList")
ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.trace("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
+ (StringUtils.isEmpty(modelPackage) ? "" : (modelPackage + "/")) + dataType;      }           private String getJSDocType(CodegenModel cm, CodegenProperty cp) {          if (Boolean.TRUE.equals(cp.isContainer)) {
* Allow this route to be run as an application       *       * @param args      * @throws Exception        */     public static void main(String[] args) throws Exception {          new Main().run(args);      }
} else {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            InputStream is = mHdfsFs.open(new Path(filePath));            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final class ExchangeNotifier extends EventNotifierSupport {          public void notify(EventObject event) throws Exception {              if (event instanceof ExchangeCreatedEvent) {
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
*/      public static SortedMap<String, Properties> findComponents(CamelContext camelContext) throws LoadPropertiesException {          ClassResolver resolver = camelContext.getClassResolver();         LOG.debug("Finding all components using class resolver: {} -> {}", new Object[]{resolver});          Enumeration<URL> iter = resolver.loadAllResourcesAsURL(COMPONENT_DESCRIPTOR);          return findComponents(camelContext, iter);      }
String[] partKeyTypes = pcolTypes.trim().split(":");      if (partSpec.size() != partKeyTypes.length) {         throw new HiveException("Internal error : Partition Spec size, " + partSpec.size() +                  " doesn't match partition key definition size, " + partKeyTypes.length);      }      boolean hasVC = vcs != null && !vcs.isEmpty();
span.log(fields);                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }              return message;          }
public interface StatelessSessionLocal extends EJBLocalObject {           String echo(String arg) throws RemoteException;           void noop();  }
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final R record = createRecord(value, expirationTime);          updateHasExpiringEntry(record);          if (isEventsEnabled()) {             publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),                                                  expirationTime, origin, completionId));          }          return record;      }
*       * @return the message.       */     @Message(id = 10852, value = "Caught %s storing deployment content -- %s")      String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);      /**
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface GoogleDriveEndpointBuilder              extends                  GoogleDriveEndpointConsumerBuilder, GoogleDriveEndpointProducerBuilder {          default AdvancedGoogleDriveEndpointBuilder advanced() {
}                      } else { NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());                         if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {                              String url = nlDataOutNodes.item(0).getTextContent();
};          verify(checkConfig,                 getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"),                 expected);      }      @Test
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables();   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc
*     * @throws IOException Thrown if any of the two views raises an exception.    */  public abstract void copy(DataInputView source, DataOutputView target) throws IOException;  }
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@Override      public WebSocket write(String s) throws IOException {         if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);          return this;      }      @Override      public WebSocket write(byte[] b, int offset, int length) throws IOException {         if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));          return this;      }
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      @Override     public synchronized List<EdgeModel> getSelectedEdges() {          List<EdgeModel> selected = new ArrayList<>();          for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {              EdgeModel edgeModel = itr.next();
logger.debug("Active clients {}", activeClients());          }         long now = System.currentTimeMillis();          String messageId = UUID.randomUUID().toString();          CacheMessage cacheMessage = new CacheMessage(messageId, e);          synchronized (messages) {
public interface PropertiesEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedPropertiesEndpointProducerBuilder advanced() {
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override          public void onResponse(Object response) {              boolean executing = Boolean.TRUE.equals(response);             invocation.logger.finest("'is-executing': " + executing + " -> " + invocation);              if (!executing) {                  setOperationTimeout();              }
}          });          topic.publish(message);         assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));      }      @Test
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getFriendsTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",null, paging.asPostParameterList(), true));      }      /**
requestTimeout = p.getRequestTimeoutInMs();                  }                 markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));                  abort(this.nettyResponseFuture, new TimeoutException(String.format("No response received after %s", requestTimeout)));                  this.nettyResponseFuture = null;
}    @GwtIncompatible("Reader/Writer")   private static void testStreamingEncodingWithSeparators(        BaseEncoding encoding, String decoded, String encoded) throws IOException {      testStreamingEncoding(encoding, decoded, encoded);
try {           ModuleFactory.stopModule(mod, true, true);          }         catch (Exception t3) {           log.trace("Unable to shutdown module:" + mod, t3);
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(729);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {System.out.println($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
* @see <a href="http:       */      public ResponseList<Status> getRetweetedToMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, true));      }
"alluxio.worker.block.allocator.MaxFreeAllocator"),    WORKER_BIND_HOST(Name.WORKER_BIND_HOST, "0.0.0.0"),    WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),   WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 60000),    WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   @ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)  @UnrelatedTwo   static class ImportAutoConfigurationWithItemsTwo {   }
populateNearCache(clientMap, 1000);         HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());          final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Before      public void setUpAdminObjects() throws NamingException {          server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8280");         server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), "8380");          Assert.assertNotNull(server1Proxy);          Assert.assertNotNull(server2Proxy);      }
}      public void setDataCoding(byte dataCoding) {         this.alphabet = dataCoding;      }      public byte getAlphabet() {
* Set the ignore pattern.       * @param format a <code>String</code> value       */     public final void setIgnorePattern(String format) {          ignorePattern = Utils.createPattern(format);      }  }
public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,    Buffer pixels) {   GL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));   }   public void glViewport (int x, int y, int width, int height) {
public interface S3EndpointBuilder              extends                  S3EndpointConsumerBuilder, S3EndpointProducerBuilder {          default AdvancedS3EndpointBuilder advanced() {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
entry = journalReader.read();        } catch (IOException e) {          LOG.warn("{}: Failed to read from journal: {}", mMaster.getName(), e);         if (retry.attempt()) {            continue;          }          throw new RuntimeException(e);
AtmosphereRequest request = r.getRequest();          String cacheHeader = request.getHeader(X_CACHE_DATE);         r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.nanoTime()));          if (cacheHeader == null || cacheHeader.isEmpty()) {              return Collections.emptyList();          }
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of("runs")));          when(request.getParameterValues("runs")).thenReturn(new String[]{"1"});          when(response.getWriter()).thenReturn(output);
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
*/      public ResponseList<Status> getFriendsTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",null, paging.asPostParameterList(), true));      }      /**
Node node = nodes.get(i);      if (node.actor.getY() < low) break;      if (!node.isSelectable()) continue;     if (node.actor.getY() >= high) selectedNodes.add(node);      if (node.expanded) selectNodes(node.children, low, high);     }    }
public interface CordaEndpointBuilder              extends                  CordaEndpointConsumerBuilder, CordaEndpointProducerBuilder {          default AdvancedCordaEndpointBuilder advanced() {
final Map<String, String> result = ImmutableMap.of("alarmcallback_id", id);          final URI alarmCallbackUri = UriBuilder.fromResource(AlarmCallbackResource.class)                  .path("{alarmCallbackId}")                 .build(id);          return Response.created(alarmCallbackUri).entity(result).build();      }
private static String getIndentation(DetailNode node) {          final boolean isLastChild = JavadocUtils.getNextSibling(node) == null;          DetailNode currentNode = node;         final StringBuilder indentation = new StringBuilder(1024);          while (currentNode.getParent() != null) {              currentNode = currentNode.getParent();              if (currentNode.getParent() == null) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testGetRequiredTokens() {          InterfaceIsTypeCheck obj = new InterfaceIsTypeCheck();          int[] expected = {TokenTypes.INTERFACE_DEF};         assertArrayEquals(expected, obj.getRequiredTokens());      }  }
if (objects == null) throw new IllegalArgumentException("objects cannot be null.");     for (int i = 0, n = objects.size; i < n; i++) {      Object object = objects.get(i);     if (object == null) continue;      ReflectionPool pool = typePools.get(object.getClass());  if (pool == null) return;     pool.free(object);
* @should exclude not allowed locales    * @should cache results for a user    */  public List<Locale> getSearchLocales();   /**    * Used by Spring to set the http client for accessing the openmrs implementation service
*  * @see    */  public abstract boolean equalToReference(T candidate);   /**    * This method compares the element that has been set as reference in this type accessor, to the
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test   public void startServletAndFilter() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();   this.container = factory.getEmbeddedServletContainer(      exampleServletRegistration(), new FilterRegistrationBean(        new ExampleFilter())); assertThat(getResponse("http:
*     * @throws IOException Thrown if any of the two views raises an exception.    */  public abstract void copy(DataInputView source, DataOutputView target) throws IOException;  }
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
final PlannerConfig plannerConfig = new PlannerConfig();      final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);     final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);      final DruidOperatorTable operatorTable = new DruidOperatorTable(          ImmutableSet.of(new DoublesSketchSqlAggregator()),          ImmutableSet.of()
, (args = args.rest()).first()        , args.rest());     case 20:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
}          Map<String, Object> responseModels = IntrospectionSupport.extractProperties(parameters, "responseModel.");         for (Map.Entry<String, Object> entry : responseModels.entrySet()) {              configuration.addResponseModel(                  entry.getKey(),                  EndpointHelper.resolveParameter(context, (String)entry.getValue(), Class.class));
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
if (!queueLength.isDefined() || queueLength.asInt() == Integer.MAX_VALUE) {                  if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {                     throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());                  }              }
public interface HazelcastRingbufferEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastRingbufferEndpointBuilder advanced() {
public interface KafkaEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedKafkaEndpointProducerBuilder advanced() {
* @param column the column number.           * @param text the text of the suppression.           * @param on <code>true</code> if the tag turns checkstyle reporting.          * @param filter the {@code SuppressionCommentFilter} with the context           * @throws ConversionException if unable to parse expanded text.           * on.           */         public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter)              throws ConversionException          {              this.line = line;
public interface SjmsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSjmsEndpointProducerBuilder advanced() {
public interface AdvancedGoogleSheetsEndpointBuilder              extends                  AdvancedGoogleSheetsEndpointConsumerBuilder, AdvancedGoogleSheetsEndpointProducerBuilder {          default GoogleSheetsEndpointBuilder basic() {
tmpBuf.clear().position(index).limit(index + length);          } catch (IllegalArgumentException e) {              throw new IndexOutOfBoundsException("Too many bytes to read - Need "                     + (index + length) + ", maximum is " + buffer.limit());          }          tmpBuf.get(dst, dstIndex, length);      }
throw new IOException("Failed to list directory: " + dir);          }          for (File file : files) {             Files.deleteIfExists(file.toPath());          }         Files.deleteIfExists(dir.toPath());      }  }
}      public void destroy() {         final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);          if (lockService != null) {              lockService.clearLockStore(partitionId, lockNamespace);          }
if (!file.exists()) {                  return null;              }             return new VFSEntryResource(file, file.toURL());          } catch (MalformedURLException e) {              return null;
} else {                           sendColor(command, bridgeId, bulb);                       }                  } else if (command instanceof PercentType) {                       sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);                   }               }
}      }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",            availableBytes);        return null;      }
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void makeSureStoreCantBeUpgradedByBatchInserterEvenIfExplicitlyToldTo() throws Exception      {         String path = path( 14 );          new EmbeddedGraphDatabase( path ).shutdown();          setOlderNeoStoreVersion( path );
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists.json?cursor=" + cursor, true));      }
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
return false;          }         long newReservation = memoryReservation.addAndGet(bytes);          if (newReservation > maxMemoryReservation) {              memoryReservation.getAndAdd(-bytes);              return false;
private final MockEnvironment environment = new MockEnvironment();  private final JmxEndpointProperties properties = new JmxEndpointProperties(    this.environment);   private final MBeanServer mBeanServer = mock(MBeanServer.class);
assertEquals(10, removalListener.getCount());    }   private static void getAll(LoadingCache<Integer, Integer> cache, List<Integer> keys) {      for (int i : keys) {        cache.getUnchecked(i);      }
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
return configuration.getSslCipherSuites();      }     public void setRequestRequiredAcks(String requestRequiredAcks) {          configuration.setRequestRequiredAcks(requestRequiredAcks);      }
{    @JsonProperty    @Min(0)   private int numConnections = 20;    @JsonProperty    private Period readTimeout = new Period("PT15M");
};       final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
int port = Utils.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT));              List<String> servers = (List<String>) conf.get(Config.DRPC_SERVERS);             if(servers == null || servers.isEmpty()) {                  throw new RuntimeException("No DRPC servers configured for topology");                 }              if(numTasks < servers.size()) {
public void test_de() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06.05.2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedSedaEndpointBuilder              extends                  AdvancedSedaEndpointConsumerBuilder, AdvancedSedaEndpointProducerBuilder {          default SedaEndpointBuilder basic() {
* @see <a href="http:       */      public Trends getCurrentTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL() + "trends/current.json"                  , false)).get(0);      }
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final Sink normalizedPersons = new Sink("normalizedPersons.json").withInputs(replace);    expectedPlan.setSinks(normalizedPersons);   assertPlanEquals(expectedPlan, actualPlan);   }  }
public void testCheckTreeEqualsBooleanSame() {      Node node1 = new Node(1);     assertEquals(true, node1.isEquivalentTo(node1));    }    public void testCheckTreeEqualsBooleanDifferent() {      Node node1 = new Node(1);      Node node2 = new Node(2);     assertEquals(false, node1.isEquivalentTo(node2));    }    public void testCheckTreeEqualsImplDifferentIncProp() {
grammarBuilder.append("  | '(' e ')'   {$v = $e.v;} grammarBuilder.append("  | left=e INC  {$v = $left.v + 1;} grammarBuilder.append("  | left=e DEC  {$v = $left.v - 1;}   grammarBuilder.append("  | ID          {$v = 3;}    grammarBuilder.append("  ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'
public interface AdvancedFlatpackEndpointBuilder              extends                  AdvancedFlatpackEndpointConsumerBuilder, AdvancedFlatpackEndpointProducerBuilder {          default FlatpackEndpointBuilder basic() {
private static final int MAX_SECONDS = 60 * 10;      private static final int NUMBER_OF_CLIENTS = 8;     private static final int THREADS_PER_CLIENT = 4;      private static final String MAP_NAME = randomString();
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param timer a timer to add to the scheduler     */    public static void addTimer(ScheduledTimer timer) {     Preconditions.checkNotNull(timer, "timer");      try (LockResource r = new LockResource(sLock)) {        Preconditions.checkState(!sTimers.containsKey(timer.getThreadName()),            "The timer for thread %s is already waiting to be scheduled", timer.getThreadName());
@Test   public void testTokenAndRuleContextString() throws Exception {    mkdir(parserpkgdir);   StringBuilder grammarBuilder = new StringBuilder(167);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s\n");    grammarBuilder.append("@init {\n");
@Override      public ModelNode getModelDescription(Locale locale) {         return DeploymentDescription.getReplaceDeploymentOperation(locale);      }      public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);     GatherGetterAndSetterProperties.update(compiler, externs, root);    }    /**
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.retInt();      }     private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)      {          MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), "getSizeInBytes", type(long.class));
public void resume(Application app)     {     device = app.getAudio().newAudioDevice(true);    recorder = app.getAudio().newAudioRecoder( 22050, false );      }    }
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
public interface S3EndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedS3EndpointProducerBuilder advanced() {
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
token = token.getParent())          {              final int type = token.getType();             if (type == TokenTypes.CLASS_DEF                 || type == TokenTypes.ENUM_DEF                 || type == TokenTypes.ANNOTATION_DEF)             { break;              }              else if (type == TokenTypes.LITERAL_NEW) { break;
for(int i = 0; i < fields.size(); ++i) {            StructField left = other.get(i);            StructField right = fields.get(i);           if (!(left.getFieldName().equalsIgnoreCase(right.getFieldName()) &&                  left.getFieldObjectInspector().equals                      (right.getFieldObjectInspector()))) {              return false;
}      public boolean hasAttributes() {         return edgeData.getAttributes() != null;      }      public void setAttributes(Attributes attributes) {
new FileWriter(this.temporaryFolder.newFile("test.txt")));    AbstractEmbeddedServletContainerFactory factory = getFactory();    factory.setDocumentRoot(this.temporaryFolder.getRoot());   this.container = factory.getEmbeddedServletContainer(); assertThat(getResponse("http:   }
@Override   public void internalReceiveCommand(String itemName, Command command) {    super.internalReceiveCommand(itemName, command);   logger.trace("MyQ binding received command '{}' for item '{}'",      command, itemName);    if (myqOnlineData != null) {     computeCommandForItem(command, itemName);
*  * @see NormalizableKey    */  public abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.
}      }     private static void checkFile(String filename) throws Exception {          final FileText text = new FileText(new File(filename),                             System.getProperty("file.encoding", "UTF-8"));          final FileContents contents = new FileContents(text);
}          if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {           GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);          }          recentChange.reset();
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNanos(System.nanoTime() - start);          }          return result;      }
warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\n');                          break;                      case HINT:                         hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\n');                          break;                  }              }
try {              InetAddress address = resolver.resolve("10.0.0.1").syncUninterruptibly().getNow();             assertEquals("10.0.0.1", address.getHostAddress());          } finally {              resolver.close();          }
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null || dfa.states.isEmpty()) {         continue;        }
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
* @param r {@link AtmosphereResource}       */      public void unRegisterUuidForFindCandidate(AtmosphereResource r) {         logger.trace("Removing: {}", r);          resources.remove(r.uuid());      }
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
if (store != null) {              store.deleteAll(keysObject);             toBeRemovedKeys.removeAll(keysToDelete);          }          clearRecordsMap(lockedRecords);
for (int i = list.size() - 1; i >= 0; i--) {              final T bagEntry = (T) (weakThreadLocals ? ((WeakReference) list.remove(i)).get() : list.remove(i));             if (bagEntry != null && bagEntry.state().compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {                 return bagEntry;              }           }
} else {                      statistics.increaseCacheHits(1);                  }                 statistics.addGetTimeNanos(System.nanoTime() - start);              }          }      }
public interface AdvancedLinkedInEndpointBuilder              extends                  AdvancedLinkedInEndpointConsumerBuilder, AdvancedLinkedInEndpointProducerBuilder {          default LinkedInEndpointBuilder basic() {
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
return false;      }      if (!info.isOffline()) {       LOG.warn("Region is split but not offline: " +         info.getRegionNameAsString());      }      return true;    }
logger            .error(               "database error: {}",                e.getMessage());      }    }
public void test_kr_1() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
public void test_cn() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016-05-06\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
}   for (int i = 0; i <= maxIndex; i++) {     for (Map.Entry<String, Consumer<String>> subKey : subKeyValidation.entrySet()) {      final String fullKey = key + '.' + i + '.' + subKey.getKey();      if (properties.containsKey(fullKey)) {
public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
break;                      }                     tableError |= parseOneRow(rowDataBuilder, event, buffer, changeColumns, true, tableMeta);                  }                  rowChangeBuider.addRowDatas(rowDataBuilder.build());
this.bufferMemorySize = bufferMemorySize;      }     public Long getRequestRequiredAcks() {          return requestRequiredAcks;      }
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
ClientConfig jerseyConfig = new ClientConfig();    Client client = ClientBuilder.newClient(jerseyConfig);   client = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS));    WebTarget resource = client.target(getBaseUri()).path("auth-digest");
user.update(changeRequest);          flash("success", "User '" + user.getFullName() + "' was updated successfully");         return redirect(routes.UsersController.index("");      }      private boolean checkRequireOldPassword(String username) {
public String getFullName() {               if (fullName == null) {                  if (table == null) {                       fullName = name;                   } else {                       fullName = table + '.' + name;
TextManager.this.model = VizController.getInstance().getVizModel().getTextModel();                     if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {                          AttributeController attributeController = Lookup.getDefault().lookup(AttributeController.class);                          if (attributeController != null && attributeController.getModel() != null) {                              AttributeModel attributeModel = attributeController.getModel();
AuthorizationResult ar = context.authorize(rrOp, EnumSet.of(Action.ActionEffect.ADDRESS));                          if (ar.getDecision() == AuthorizationResult.Decision.DENY) {                             filteredData.addAccessRestrictedResource(absoluteChildAddr);                          } else {                              ModelNode childMap = directChildren.get(childType);                              if (childMap == null) {
cfg.setThreadModel(ThreadModel.MANUAL);              cfg.getSessionConfig().setTcpNoDelay(true);              cfg.getSessionConfig().setKeepAlive(true);             int timeout = getConnectTimeout();              cfg.setConnectTimeout(timeout < 1000 ? 1 : timeout / 1000);              connector.getFilterChain().addLast("codec", new ProtocolCodecFilter(new MinaCodecAdapter(getCodec(), getUrl(), this)));
}    @Override   public N removeInEdge(E edge, boolean isSelfLoop) {      if (!isSelfLoop) {        return removeOutEdge(edge);      }
@Override      protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {         codegenModel.additionalPropertiesType = getTypeDeclaration(swaggerModel.getAdditionalProperties());          addImport(codegenModel, codegenModel.additionalPropertiesType);      }
return this;      }     public List<String> getAddresses() {          if (addressList.size() == 0) {              addAddress("localhost");          }
return;                   }                  LOG.error("clear parameter error", ex);               }           }
pageBuilder.declarePosition();                  for (int i = 0; i < outputChannels.length; i++) {                      int channel = outputChannels[i];                     Type type = types.get(i);                      type.appendTo(next[channel], 0, pageBuilder.getBlockBuilder(i));                  }                  if (generateRowNumber) {
StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort);    env.enableCheckpointing(500);    env.setParallelism(parallelism);   env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);
@RestController  public class PetController {     private static final String[] PETS = new String[]{"Snoopy", "Fido", "Tony the Tiger"};      @RequestMapping(value = "/petById/{id}", produces = "application/json")      public String petById(@PathVariable("id") Integer id) {
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ConfigurableEmbeddedServletContainerFactory factory = getFactory();    factory.setPort(8081);    this.container = factory     .getEmbeddedServletContainer(exampleServletRegistration()); assertThat(getResponse("http:   }
if (maskPayload) {              int random = (int) (Math.random() * Integer.MAX_VALUE);              mask = ByteBuffer.allocate(4).putInt(random).array();             out.writeBytes(mask);              int counter = 0;              for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {
class DataRecord extends AbstractRecord<Data> {     protected Data value;      DataRecord(Data value) {          this.value = value;
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10871, value = "Unknown server %s")      IllegalStateException unknownServer(ServerIdentity server);      /**
empiricalCountsForADoc(eHat4Update, ind);       expectedCountsForADoc(weights, e4Update, ind);        /* the commented out code below is to iterate over the batch docs instead of iterating over all           parameters at the end, which is more efficient; but it would also require us to clearUpdateEs()
map.put("forms", Context.getFormService().getForms());      String reason = "";     for (Obs o : encounter.getObsAtTopLevel(true)) {       if (o.isVoided()){
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else {          Set<String> metricsSet = new HashSet<>();          for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {           metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics());          }          metricsList = Lists.newArrayList(metricsSet);        }
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
*       * @return the message.       */     @Message(id = 10850, value = "No handler for operation %s at address %s")      String noHandlerForOperation(String operationName, PathAddress address);      /**
* group.       * @author max       */     private static class ImportDetails      {                    private String importFullPath;
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.    */   public void testDuplicateVariableInsertOnTask() throws Exception {   String processDefinitionId = deployOneTaskTestProcess();    final ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);    final Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String uri = getScpUri() + "?username=admin&password=admin&chmod=640&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Bonjour Monde", Exchange.FILE_NAME, "monde.txt");         Thread.sleep(500);          File file = new File(getScpPath() + "/monde.txt");          assertFileExists(file.getAbsolutePath());
}      public Number integerValue() {           long result = 0;           boolean negative = false;           int i = np, max = np + sp;
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final Sink output = new Sink("allUsers.json").withInputs(union);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }  }
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(3);          mock.setResultWaitTime(4000);          final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());
break;            }            switch (schemeField.id) { case 1:                if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {                  struct.rqst = new WriteNotificationLogRequest();                  struct.rqst.read(iprot);
* @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10805, value = "Caught exception awaiting final response from host %s")      void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);      /**
public interface CwEndpointBuilder extends EndpointProducerBuilder {          default AdvancedCwEndpointBuilder advanced() {              return (AdvancedCwEndpointBuilder) this;          }
public void stopTest() throws Exception {      mMaster.stop();      Mockito.verify(mRMClient).unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, "", "");     Mockito.verify(mRMClient).stop();    }    /**
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, true));      }
private final Condition delegate;      @SuppressWarnings("unused")     private final WeakSafeReadWriteLock strongReference;     WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {        this.delegate = delegate;        this.strongReference = strongReference;      }
"order by min(length(p)), user.name";          gen.get().addSnippet( "query-get-members", createCypherSnippet( query ) );          result = engine.execute( query )                 .dumpToString();          assertTrue( result.contains("Engin") );          gen.get()                  .addSnippet( "o-query-get-members",
}      protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {         final List<ResultMessageSummary> result = Lists.newArrayList(resultMessages.size());          for (ResultMessage resultMessage : resultMessages) {              result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));
public interface ElsqlEndpointBuilder              extends                  ElsqlEndpointConsumerBuilder, ElsqlEndpointProducerBuilder {          default AdvancedElsqlEndpointBuilder advanced() {
private void registerEventJournalConfig(EventJournalConfig eventJournalConfig, ConfigCheckMode configCheckMode) {          String mapName = eventJournalConfig.getMapName();         String cacheName = eventJournalConfig.getCacheName();          synchronized (journalMutex) {              EventJournalConfig currentMapJournalConfig = null;              if (mapName != null) {
*       * @return the message.       */     @Message(id = 10843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public void testMultipleAlternativesWithCommonLabel_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(729);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {System.out.println($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;          verify(checkConfig,                 getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"),                 expected);      }      @Test
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          when(response.getWriter()).thenReturn(output);
setHost(value);          }         if (getProtocol() != null && !isIgnoreUriScheme()) {              String scheme = uri.getScheme();              if (scheme != null) {                  setProtocol(scheme);
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface TwitterDirectMessageEndpointBuilder              extends                  TwitterDirectMessageEndpointConsumerBuilder, TwitterDirectMessageEndpointProducerBuilder {          default AdvancedTwitterDirectMessageEndpointBuilder advanced() {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Properties producerProps = new Properties();   producerProps.setProperty("max.request.size", Integer.toString(1024 * 1024 * 14));    producerProps.setProperty("retries", "3");    producerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerConnectionStrings);
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, int batchSize) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);   }
checkConfig.addAttribute("matchDirectoryStructure", "false");          final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;         verify(checkConfig, getNonCompilablePath("InputPackageDeclarationDiffDirectory.java"),                 expected);      }      @Test
public interface IgniteCacheEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIgniteCacheEndpointProducerBuilder advanced() {
*       * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/    public void preCompute(Set<Integer> toPreCompute) {      long startTime = System.currentTimeMillis();     saved = new double[preMap.size()][config.hiddenSize];      for (int x : toPreCompute) {        int mapX = preMap.get(x);        int tok = x / config.numTokens;
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
URL publishUrl = URL.valueOf("dubbo:          metadataReportService1.publishConsumer(publishUrl);         Thread.sleep(300);          Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);
public interface AdvancedEventAdminEndpointBuilder              extends                  AdvancedEventAdminEndpointConsumerBuilder, AdvancedEventAdminEndpointProducerBuilder {          default EventAdminEndpointBuilder basic() {
}    private void configureConnection(Connection conn) throws SQLException {     if (autoCommit != conn.getAutoCommit()) {        conn.setAutoCommit(autoCommit);      }      if (defaultTransactionIsolationLevel != null) {
private TransactionalGraph getGremlinWrappedGraph() throws DatabaseBlockedException      {         return new Neo4jGraph( database.graph, null );      }  }
List<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();     if(configList == null || configList.size() == 0) {       break;      }
private Method mMethod;           public InflatedOnMenuItemClickListener(String methodName) {              final Class<?> localClass = mContext.getClass();               try {                   mMethod = localClass.getMethod(methodName, PARAM_TYPES);               } catch (Exception e) {
}    public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {     TwoDimensionalMap<String, String, SimpleMatrix> averages = TwoDimensionalMap.treeMap();      for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {        int count = 0;        SimpleMatrix matrix = null;
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private final WebSocketVersion version;     private volatile boolean handshakeComplete;      private final String expectedSubprotocol;     private volatile String actualSubprotocol;      protected final HttpHeaders customHeaders;
public interface AdvancedEC2EndpointBuilder              extends                  EndpointProducerBuilder {          default EC2EndpointBuilder basic() {
public interface AdvancedDataSetTestEndpointBuilder              extends                  EndpointProducerBuilder {          default DataSetTestEndpointBuilder basic() {
protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
Long id = (Long) tuple.getValue(0);              Long timeDeltaMs = (Long) tuple.getValue(1);              TupleInfo tupleInfo = (TupleInfo) pending.remove(id);             if (tupleInfo != null && tupleInfo.getMessageId() != null) {                  if (taskId != tupleInfo.getTaskId()) {                      throw new RuntimeException("Fatal error, mismatched task ids: " + taskId + " " + tupleInfo.getTaskId());                  }
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
protected void handleMultiMapTryLock(String[] args) {          String key = args[1];         long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;          boolean locked;          if (time == 0) {              locked = getMultiMap().tryLock(key);
private Object value;     ObjectRecord() {      }     ObjectRecord(Data key, Object value) {          super(key);          this.value = value;      }
assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();     assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();     assert
public interface SedaEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSedaEndpointProducerBuilder advanced() {
if (options.closurePass && options.removeAbstractMethods) {       passes.add(removeAbstractMethods);      }
final CompressionLevel compressionLevel, int indexOfOutputGate, int indexOfInputGate,     final DistributionPattern distributionPattern) throws JobGraphDefinitionException {    this.connectTo(vertex, channelType, compressionLevel, indexOfOutputGate, indexOfInputGate, distributionPattern,    true);   }   /**
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Override   public void internalReceiveCommand(String itemName, Command command) {    super.internalReceiveCommand(itemName, command);   logger.trace("MyQ binding received command '{}' for item '{}'",      command, itemName);    if (myqOnlineData != null) {     computeCommandForItem(command, itemName);
@Override      protected void doPost(HttpServletRequest req,                            HttpServletResponse resp) throws ServletException, IOException {         final Task task = tasks.get(req.getServletPath());          if (task != null) {              try {                  resp.setContentType(MediaType.TEXT_PLAIN);
public void setOutputFormatClass(Class<? extends HiveOutputFormat> outputFormatClass) {      this.outputFormatClass = outputFormatClass;      tPartition.getSd().setOutputFormat(HiveFileFormatUtils         .getOutputFormatSubstitute(outputFormatClass).getName());    }    final public Class<? extends InputFormat> getInputFormatClass()
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;");          } else if (propertyClass == double.class) {             mw.visitVarInsn(DLOAD, context.var("double", 2));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    }   public synchronized void unpinFile(int fileId) {      if (INACTIVE) {        return;      }
public void test_tw() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016/05/06\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
try {        jarFile = new JarInputStream(new FileInputStream(jarFileName));      } catch (IOException ioEx) {       LOG.warn("Failed to look for classes in " + jarFileName + ": " + ioEx);        throw ioEx;      }
private final static Log   LOG         = LogFactory.getLog(DruidPooledConnection.class);       protected Connection       conn;      protected DruidConnectionHolder holder;       protected TransactionInfo  transactionInfo;       private final boolean      dupCloseLogEnable;       private boolean            traceEnable = false;
if (handle.delete()) fail();     if (handle.list().length != 0) fail();     if (handle.child("meow").exists()) fail();    if (handle.parent().exists()) fail();     try {      handle.read().close();      fail();
metrics.addAll(getStatistics("integration.handler." + name + ".duration",       exporter.getHandlerDuration(name)));    }   metrics.add(new Metric<Integer>("integration.activeHandlerCount", exporter     .getActiveHandlerCount()));    metrics.add(new Metric<Integer>("integration.handlerCount", exporter      .getHandlerCount()));    metrics.add(new Metric<Integer>("integration.channelCount", exporter
mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;");          } else if (propertyClass == long.class) {             mw.visitVarInsn(LLOAD, context.var("long", 2));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/
throws IOException, AlluxioException, InterruptedException {      final long deadline = System.currentTimeMillis() + tunit.toMillis(timeout);     final long pollPeriod = Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS);      boolean completed = false;      long timeleft = deadline - System.currentTimeMillis();
"--attr", "foo=bar",              "--attr", "foo=glarch"};      rc = ks.run(args4);     assertEquals(1, rc);            deleteKey(ks, "keyattr1");
private static final String DELTA= "void delta()";      private static final String EPSILON= "void epsilon()";     static class Dummy {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
*/    public void flush(final String tableNameOrRegionName)    throws IOException, InterruptedException {     flush(Bytes.toBytes(tableNameOrRegionName));    }    /**
OperationService opService = getOperationService(local);          int partitionId = getPartitionId(remote);         opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));         Future f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));          try {              f.get(3 * callTimeoutMs, MILLISECONDS);
private static final String DELTA= "void delta()";      private static final String EPSILON= "void epsilon()";     static class Dummy {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {           mBuf.putInt(0, k + mWorkerId);            os.write(mBuf.
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void test_Decode_Error_Length() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
if (expMsg.contains("No FileSystem for scheme")) {          newMsg =              "Unsupported filesystem scheme found in the backup target url. Error Message: "                 + expMsg;          LOG.error(newMsg);          throw new IOException(newMsg);        } else {
final Object child = new ParseTreeTablePresentation(null).getChild(tree, 1);          Assert.assertTrue("Invalid child type", child instanceof DetailAST);          Assert.assertEquals("Invalid child token type",                 TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());      }      @Test
public interface MailEndpointBuilder              extends                  MailEndpointConsumerBuilder, MailEndpointProducerBuilder {          default AdvancedMailEndpointBuilder advanced() {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getMentions() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, true));      }
pollResetFuture = pollService.schedule(new Runnable() {     public void run() {     logger.trace("rapidRefreshFutureEnd stopping");      schedulePoll(refreshInterval);     }    }, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else if ("target".equals(key)) {                  NodeDraft target = container.getNode(value.toString());                  edgeDraft.setTarget(target);             } else if ("value".equals(key) || "weight".equals(key)) {                  if (value instanceof Double) {                      edgeDraft.setWeight(((Double) value).floatValue());                  }
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);   }
ConceptNumeric cn = new ConceptNumeric(c);     for (ConceptSet cSet : cn.getConceptSets()) {     Assert.assertEquals(cn, cSet.getConcept());     }    }
log(FORCE, t);        exitCode = 1;      } endTracksTo("main");      if (exit) {        System.exit(exitCode);      }
*       * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
public static class FlagUsageException extends Exception {      private static final long serialVersionUID = 1L;      FlagUsageException(String message) {
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
* @author Stephen Bloch       * June 19, 2003       */     private static class LexicalFrame      {                    private final Set<String> varNames;
String uri = getScpUri() + "?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hallo Welt", Exchange.FILE_NAME, "welt.txt");         Thread.sleep(500);          File file = new File(getScpPath() + "/welt.txt");          assertFileExists(file.getAbsolutePath());
HazelcastInstance server1;      @Before     public void setUp() {          NearCacheConfig nearCacheConfig = newNearCacheConfig();          nearCacheConfig.setInvalidateOnChange(true);
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}              for (; i < srcEndIdx; i ++) {                 T m = src[i];                  if (m == null) {                      throw new NullPointerException("src[" + srcIdx + ']');                  }
* Builder for endpoint producers for the Azure Storage Queue Service       * component.       */     public interface QueueServiceEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedQueueServiceEndpointProducerBuilder advanced() {
public interface Olingo4EndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedOlingo4EndpointProducerBuilder advanced() {
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
public void test_in() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06-05-2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
attr = bindingGroup.get(DEFAULT_INTERFACE);          writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());         if (fromServer && bindingGroup.hasDefined(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() > 0) {              attr = bindingGroup.get(PORT_OFFSET);              writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());          }
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })     void updatePetWithForm(@PathParam("petId") @ApiParam("ID of pet that needs to be updated") Long petId,@FormParam(value = "name")  String name,@FormParam(value = "status")  String status) throws Exception;      @POST      @Path("/{petId}/uploadImage")
public interface AtmosphereWebsocketEndpointBuilder              extends                  AtmosphereWebsocketEndpointConsumerBuilder, AtmosphereWebsocketEndpointProducerBuilder {          default AdvancedAtmosphereWebsocketEndpointBuilder advanced() {
public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNanos(System.nanoTime() - start);          }          return result;      }
if (s == null || regex == null) {        return null;      }     if (!regex.equals(lastRegex) || p == null) {        lastRegex.set(regex);        p = Pattern.compile(regex.toString());      }
if (LOG == null) {                      LOG = LogFactory.getLog(DruidDriver.class);                  }                 LOG.warn("register druid-driver mbean error", ex);              }              return true;
ret = getMS().deletePartitionColumnStatistics(dbName, tableName,                                                        convertedPartName, partVals, colName);        } finally {         endFunction("delete_column_statistics_by_partition: ", ret != false, null);        }        return ret;      }
}      @Override     public synchronized void mouseMove() {          if (vizConfig.isSelectionEnable() && rectangleSelection) {              Rectangle rectangle = (Rectangle) currentSelectionArea;
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public interface JGroupsEndpointBuilder              extends                  JGroupsEndpointConsumerBuilder, JGroupsEndpointProducerBuilder {          default AdvancedJGroupsEndpointBuilder advanced() {
if (mConnected) {        try {         if (mHeartbeat != null && mHeartbeatExecutor != null) {            mHeartbeatExecutor.heartbeat();          }          mProtocol.getTransport().close();
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override    public void process(Node externs, Node root) {     logger.fine("Aliasing common strings");      NodeTraversal.traverse(compiler, root, this);
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
moveByMinutes(9 * 60 * 24);     executeJobExecutorForTime(10000, 200);
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10848, value = "Exception getting result from host %s: %s")      String exceptionAwaitingResultFromHost(String name, String message);      /**
rng.nextBytes(bytes);      ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);      ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);     assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));      assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());     assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());    }    static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction)
public BoxConsumer(BoxEndpoint endpoint, Processor processor) {          super(endpoint, processor);         apiMethod = ApiConsumerHelper.findMethod(endpoint, this, log);          properties = new HashMap<String, Object>();          properties.putAll(endpoint.getEndpointProperties());
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL() + "trends/current.json"                  + (excludeHashTags ? "?exclude=hashtags" : ""), false)).get(0);      }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
* @see <a href="http:       */      public List<Trends> getDailyTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL() + "trends/daily.json", false));      }      /**
}   public void glDrawArrays (int mode, int first, int count) {   GL.glDrawArrays(mode, first, count);   }   public void glDrawElements (int mode, int count, int type, Buffer indices) {
*/      public ResponseList<Status> getHomeTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", true));      }
Map<HashComputation, Symbol> hashSymbols = new HashMap<>(source.getHashSymbols());             hashSymbols.keySet().retainAll(result.getOutputSymbols());              return new PlanWithProperties(result, hashSymbols);          }
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
public interface HazelcastMultimapEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
context.start();          for (int i = 0; i < 10; i++) {             getMockEndpoint("mock:" + i).expectedMessageCount(200);          }          ExecutorService executors = Executors.newFixedThreadPool(20);         for (int i = 0; i < 200; i++) {              executors.execute(new Runnable() {                  public void run() {                      for (int i = 0; i < 10; i++) {
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @param timestamp the timestamp of the file       */      void put(String fileName, long timestamp) {         details.setProperty(fileName, Long.toString(timestamp));      }      /**
form.add("code", context.getAuthorizationCode());    String redirectUri = resource.getPreEstablishedRedirectUri();   if (redirectUri == null || redirectUri.equals("")) {    redirectUri = String.valueOf(context==null ? null : context.getPreservedState());    } else {     form.add("state", String.valueOf(context.getPreservedState()));
final Hpack.Reader hpackReader;       Http2Reader(BufferedSource source, boolean client) {      this.source = source;      this.client = client;      this.continuation = new ContinuationSource(this.source);
private GetStatusOptions() {      mCommonOptions = CommonOptions.defaults()         .setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL))          .setTtlAction(Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION,              TtlAction.class));      mLoadMetadataType =
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void configure() {                  WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent("websocket");                  websocketComponent.setPort(port);                 websocketComponent.setMaxThreads(20);                  websocketComponent.setMinThreads(1); from("websocket:
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
this.start = start;      }     protected abstract Block getBlock();      private void checkReadablePosition(int position)      {
public interface JCacheEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedJCacheEndpointProducerBuilder advanced() {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
final float ty = target.y - y * dot;     final float tz = target.z - z * dot;     final float l2 = tx * tx + ty * ty + tz * tz;    final float dl = st * ((l2 == 0 || l2 == 1f) ? 1f : 1f / (float)Math.sqrt(l2));    return this.mul((float)Math.cos(theta)).add(tx * dl, ty * dl, tz * dl).nor();    }
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10871, value = "Unknown server %s")      IllegalStateException unknownServer(ServerIdentity server);      /**
}    if (doScroll) {    smoothScrollTo(mode == MODE_PULL_DOWN_TO_REFRESH ? -headerHeight : headerHeight);    }   }
SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create("value", ModelType.STRING).build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING, true).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @should delete global properties from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperties(List<GlobalProperty> globalProperties);   /**    * Save the given global property to the database. If the global property already exists,
public interface JooqEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedJooqEndpointProducerBuilder advanced() {
}    @Test public void eolComment() throws IOException {     javaWriter.emitSingleLineComment("foo"); assertCode("    }
* @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors);   /**    * Returns a list of locales used by the user when searching.
@RunWith(PowerMockRunner.class)  @PrepareForTest(Permission.class) public final class MkdirsOptionsTest {
final String newValue = "NEW_VALUE";          map.put(key, oldValue);         map.lock(key, 1, TimeUnit.SECONDS);          final CountDownLatch tryPutReturned = new CountDownLatch(1);          new Thread() {              public void run() {                 map.tryPut(key, newValue, 60, TimeUnit.SECONDS);                  tryPutReturned.countDown();              }          }.start();
* @return canonical type's name       */      private static String getCanonicalName(DetailAST type) {         final StringBuilder canonicalNameBuilder = new StringBuilder(256);          DetailAST toVisit = type.getFirstChild();          while (toVisit != null) {              toVisit = getNextSubTreeNode(toVisit, type);
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void test_Decode_Error_Response_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should return default value if property name does not exist    * @should not fail with null default value    */  public String getGlobalProperty(String propertyName, String defaultValue);   /**    * Gets the global property that has the given <code>propertyName</code>
*       * @return the message.       */     @Message(id = 10848, value = "Exception getting result from host %s: %s")      String exceptionAwaitingResultFromHost(String name, String message);      /**
}                 exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,                          "OAuth " + accessToken);              }          };
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
if (channel == null) {              initializeChannel();              if (endpoint.isSynchronous()) {                 LOG.debug("Getting synchronous method stub from channel");                  grpcStub = GrpcUtils.constructGrpcBlockingStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());              } else {                 LOG.debug("Getting asynchronous method stub from channel");                  grpcStub = GrpcUtils.constructGrpcAsyncStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());              }          }
public interface IgniteEventsEndpointBuilder              extends                  EndpointConsumerBuilder {          default AdvancedIgniteEventsEndpointBuilder advanced() {
final double delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) / 2.0D;              if (delta > 0.0D) {                 location.add(deltaX / delta, deltaY / delta, deltaZ / delta);              }             player.playSound(location, soundArg, (float) minimumVolume, (float) pitch);          } else {              player.playSound(soundLocation, soundArg, (float) volume, (float) pitch);          }
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
public interface AdvancedCinderEndpointBuilder              extends                  EndpointProducerBuilder {          default CinderEndpointBuilder basic() {
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface StreamEndpointBuilder              extends                  StreamEndpointConsumerBuilder, StreamEndpointProducerBuilder {          default AdvancedStreamEndpointBuilder advanced() {
"--attr", "foo=bar",              "--attr", "foo=glarch"};      rc = ks.run(args4);     assertEquals(1, rc);            deleteKey(ks, "keyattr1");
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
/*   * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.   *  * Copyright (c) 2012-2016 Oracle and/or its affiliates. All rights reserved.   *   * The contents of this file are subject to the terms of either the GNU   * General Public License Version 2 only ("GPL") or the Common Development
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      protected void configureClient(ClientConfig clientConfig) {         clientConfig.property(ClientProperties.READ_TIMEOUT, 2000);      }      @Test
configuration.getCreateDependencies().add(new DependencyConfigurator<StatefulSessionComponentCreateService>() {              @Override              public void configureDependency(ServiceBuilder<?> builder, StatefulSessionComponentCreateService service) {                 builder.addDependency(DependencyType.OPTIONAL, RegistryInstallerService.SERVICE_NAME);                  builder.addDependency(DependencyType.OPTIONAL, EJBRemoteConnectorService.SERVICE_NAME);              }          });
private static final long serialVersionUID = -8493693409423365387L;           protected TreeTableCellRenderer tree;      private JTextArea editor;      private List<Integer> lines2position;
Node node1 = Node.newString(Token.NAME, "f");      node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");     assertFalse(node1.isEquivalentToTyped(node2));    }    public void testVarArgs1() {
final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);          Data data = serializationService.toData(normalResponse);         final Packet packet = new Packet(data, 0);          packet.setHeader(Packet.HEADER_RESPONSE);          packet.setHeader(Packet.HEADER_OP);          executor.execute(packet);
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(getNotAllowedExceptionMessage("helloForNone"), e.getCause().getMessage());          }      }
TestElf.setSlf4jTargetStream(LeakTask.class, ps);           Connection connection = ds.getConnection();          PoolUtilities.quietlySleep(TimeUnit.SECONDS.toMillis(4));           ps.close();           connection.close();           String s = new String(baos.toByteArray());
public interface AdvancedTikaEndpointBuilder              extends                  EndpointProducerBuilder {          default TikaEndpointBuilder basic() {
public static DetailAST annotatingWhat(DetailAST ast)      {          if (ast == null) {             throw new IllegalArgumentException("the ast is null");          }          if (ast.getType() != TokenTypes.ANNOTATION) {
public interface WebsocketEndpointBuilder              extends                  WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {          default AdvancedWebsocketEndpointBuilder advanced() {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public class Label extends Widget {    private LabelStyle style;    private final TextBounds bounds = new TextBounds();   private CharSequence text;    private BitmapFontCache cache;    private float prefWidth, prefHeight;    private int labelAlign = Align.LEFT;
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
private static void testIsBufferCopyNeededForWrite(ByteBufAllocator alloc) {          ByteBuf byteBuf = alloc.directBuffer();          assertFalse(isBufferCopyNeededForWrite(byteBuf));         assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));          assertTrue(byteBuf.release());          byteBuf = alloc.heapBuffer();
final Sink result = new Sink("result.json").withInputs(join);    expectedPlan.setSinks(result);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
@Override    public synchronized void init(ProcessingEnvironment processingEnv) {      super.init(processingEnv);     DaggerAutoFactoryProcessorComponent.builder()          .processorModule(new ProcessorModule(processingEnv))          .build()          .injectProcessor(this);
public void restartWithKeepAlive() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();    this.container = factory     .getEmbeddedServletContainer(exampleServletRegistration());    MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();    HttpClient client = new HttpClient(connectionManager);
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);          }          return result;      }
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
public void test_kr_3() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년05월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
else {    Class c = coll.getClass();    Class sc = c.getSuperclass();   throw new IllegalArgumentException("Don't know how to create ISeq from: " + c.getName());   }  }
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =          ImmutableListMultimap.builder();     ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors =          ImmutableSet.builder();      for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {        Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
LOG.error("TachyonClient accessLocalFile(" + fileId + ") failed");    }   public synchronized void addCheckpoint(int fileId)         throws FileDoesNotExistException, SuspectedFileSizeException, FailedToCheckpointException {      connectAndGetLocalWorker();      if (!mConnected) {
* {@inheritDoc}       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : "")));      }
try {        jarFile = new JarInputStream(new FileInputStream(jarFileName));      } catch (IOException ioEx) {       LOG.warn("Failed to look for classes in " + jarFileName + ": " + ioEx);        throw ioEx;      }
}      public static String unescapeName(String name) {         if (name != null && name.length() > 2) {              char c0 = name.charAt(0);              char x0 = name.charAt(name.length() - 1);              if ((c0 == '"' && x0 == '"') || (c0 == '`' && x0 == '`')) {
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
*/      public ResponseList<Status> getHomeTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", true));      }
ControlFlowGraph<Node> computeCFG() {     logger.fine("Computing Control Flow Graph");      Tracer tracer = newTracer("computeCFG");      ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);      process(cfa);
* @should set uuid on implementation id global property    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public void setImplementationId(ImplementationId implementationId);   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is
"--attr", "foo=bar",              "--attr", "foo=glarch"};      rc = ks.run(args4);     assertEquals(1, rc);            deleteKey(ks, "keyattr1");
if (target == this) {              task.run();          } else {             target.addTaskAndWakeup(task);          }      }
executeDataSet(ADMIN_INITIAL_DATA_XML);    AdministrationService as = Context.getAdministrationService();   Assert.assertEquals(21, as.getAllGlobalProperties().size());    as.purgeGlobalProperty(as.getGlobalPropertyObject("a_valid_gp_key"));   Assert.assertEquals(20, as.getAllGlobalProperties().size());   }   /**
}   public void glPolygonOffset (float factor, float units) {   GL.glPolygonOffset(factor, units);   }   public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
, (args = args.rest()).first()        , args.rest());     case 11:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}          }          if (simple.getToReceivedDate() != null) {             String s = simple.getToReceivedDate();              if (s.startsWith("now")) {                  long offset = extractOffset(s, typeConverter);                  builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), false, offset));
try {                  rawJsonContent = IOUtils.toString(httpResponse.getContent());              } catch (Exception e) {                 LOG.info("Unable to read HTTP response content", e);              }              return new JsonContent(rawJsonContent);
log(FORCE, t);        exitCode = 1;      } endTracksTo("main");      if (exit) {        System.exit(exitCode);      }
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
template.sendBodyAndHeader("file:          MockEndpoint mock = getMockEndpoint("mock:result2");         mock.expectedBodiesReceivedInAnyOrder("Hello World 2");          assertMockEndpointsSatisfied();          oneExchangeDone.matchesMockWaitTime();
* before growing the backing table. */   public IntIntMap (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;");          } else if (propertyClass == double.class) {             mw.visitVarInsn(DLOAD, context.var("double", 2));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/
@Deprecated      @Override      public void put(final byte[] v) {         putBytes(v);      }      @Override
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue);   /**    * @param aClass class of object getting length for
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = this.rest.getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
}   catch(LispReader.ReaderException e)    {   throw new CompilerException(sourcePath, e.line, e.getCause());    }   finally    {
*/   public GarageDoorData getGarageData() throws InvalidLoginException,     IOException {   logger.trace("Retreiveing door data");    String url = String.format(      "%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s",      WEBSITE, enc(appId), enc(getSecurityToken()));
* @param candidate The candidate to check.    * @return True, if the candidate is equal to the reference, false otherwise.    */  public abstract boolean equalToReference(T2 candidate);  public abstract int compareToReference(T2 candidate);  }
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
FacebookEndpointConfiguration config = new FacebookEndpointConfiguration();         IntrospectionSupport.setProperties(config, componentProperties, null, false);          return config;      }
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
* before growing the backing table. */   public IntSet (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/test");          servlet.service(request, response);
return additionalReplacements;    }   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface AdvancedFtpsEndpointBuilder              extends                  AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {          default FtpsEndpointBuilder basic() {
Bytes.toStringBinary(data));                throw e;              }             LOG.warn("Node " + path + " already exists and this is not a " +                  "retry");              throw e;
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
}    synchronized void start(boolean checkExpired) {     this.timerID = checkExpired ? client.getVertx().setTimer(1000, id -> checkExpired()) : -1;    }    private synchronized void checkExpired() {      long timestamp = System.currentTimeMillis();      endpointMap.values().forEach(e -> e.pool.closeIdle(timestamp));     timerID = client.getVertx().setTimer(1000, id -> checkExpired());    }    private static final class EndpointKey {
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
Class<?> c = makeClass(className, proceedOnExceptions);          if (c != null) {            if (!classes.add(c)) {             LOG.warn("Ignoring duplicate class " + className);            }          }        }
public void run() {                  timestamps.add(System.nanoTime());                  try {                     Thread.sleep(51);                  } catch (InterruptedException e) {                  }
}              }          }         return this;      }      private boolean isAtmosphereResourceValid(AtmosphereResource r) {
public void test_in() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06-05-2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
private static class MockPrincipalWrapper extends HttpServletRequestWrapper {   MockPrincipalWrapper(HttpServletRequest request) {     super(request);    }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);   }
if (timeout == null) {                  println(lock.tryLock());              } else {                 long time = Long.parseLong(timeout);                  try {                      println(lock.tryLock(time, TimeUnit.SECONDS));                  } catch (InterruptedException e) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
xx *= lx;      xy *= lx;      xz *= lx;     yz *= ly;      yy *= ly;      yz *= ly;      zx *= lz;
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /**
jaxrsBinder(binder).bind(QueryExecutionResource.class);         jaxrsBinder(binder).bind(WebAppResource.class);          jaxrsBinder(binder).bind(QueryResource.class);
new Thread() {              public void run() {                  try {                     if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {                          tryLockSuccess.countDown();                      }                  } catch (InterruptedException e) {
public void testMultipleAlternativesWithCommonLabel_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface NeutronEndpointBuilder extends EndpointProducerBuilder {          default AdvancedNeutronEndpointBuilder advanced() {              return (AdvancedNeutronEndpointBuilder) this;          }
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      boolean foundOut = outgoingEdges.containsKey(source) && outgoingEdges.get(source).containsKey(dest) &&          outgoingEdges.get(source).get(dest).remove(data);     boolean foundIn = incomingEdges.containsKey(dest) && incomingEdges.get(dest).containsKey(source) &&          incomingEdges.get(dest).get(source).remove(data);      if (foundOut && !foundIn) {        throw new AssertionError("Edge found in outgoing but not incoming");
});          AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();         processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));          processor.invokeWebSocketProtocol(w, "yoWebSocket");          processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent("Disconnect", DISCONNECT, w));
*       * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
*/      private void addTag(String text, int line, int column, boolean on)      {         final Tag tag = new Tag(line, column, text, on, this);          tags.add(tag);      }  }
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getWeeklyTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json", false));      }
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface DropboxEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedDropboxEndpointProducerBuilder advanced() {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface CouchDbEndpointBuilder              extends                  CouchDbEndpointConsumerBuilder, CouchDbEndpointProducerBuilder {          default AdvancedCouchDbEndpointBuilder advanced() {
public interface GoogleCalendarEndpointBuilder              extends                  GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {          default AdvancedGoogleCalendarEndpointBuilder advanced() {
};       final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
}    throw new IOException("Opening request timed out.");    }    public FSDataInputStream getFSDataInputStream() {
}          Map<String, Object> responseModels = IntrospectionSupport.extractProperties(parameters, "responseModel.");         for (Map.Entry<String, Object> entry : responseModels.entrySet()) {              configuration.addResponseModel(                  entry.getKey(),                  EndpointHelper.resolveParameter(context, (String)entry.getValue(), Class.class));
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          when(response.getWriter()).thenReturn(output);
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return Type of exception       */     public Class<? extends T> exceptionClass() {          return this.exceptionClass;      }
}      public List<BacklogTracerEventMessage> dumpTracedMessages(String nodeId) {         List<BacklogTracerEventMessage> answer = new ArrayList<BacklogTracerEventMessage>();          if (nodeId != null) {              for (BacklogTracerEventMessage message : queue) {                  if (nodeId.equals(message.getToNode()) || nodeId.equals(message.getRouteId())) {
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers, "mBlockIdsOnTiers");      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
@SuppressWarnings("unchecked")      public void returnsA500OnExceptions() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          final RuntimeException ex = new RuntimeException("whoops");
if (name == null)     return null;    try {    return Class.forName(name, true, Thread.currentThread().getContextClassLoader());    } catch (ClassNotFoundException e) {     return null;    }
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private void setTrackingUrlToRMAppPage() {      originalTrackingUrl = pjoin(         WebAppUtils.getResolvedRMWebAppURLWithScheme(conf),          "cluster", "app", getAppAttemptId().getApplicationId());      proxiedTrackingUrl = originalTrackingUrl;    }
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertEquals(encoded, encoding.encode(bytes));    }   private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
}   @Test  void whenWhenValueNotMatchesShouldSupportChainedCalls() {    this.map.from("123").when("456"::equals).when("123"::equals).toCall(Assertions::fail);   }   @Test  void whenWhenValueMatchesShouldSupportChainedCalls() {    String result = this.map.from("123").when((s) -> s.contains("2")).when("123"::equals).toInstance(String::new);    assertThat(result).isEqualTo("123");   }
final class MuninnPagedFile implements PagedFile  {      private static int stripeFactor = Integer.getInteger(             "org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor", 4 );      static final int translationTableStripeLevel = 1 << stripeFactor;      static final int translationTableStripeMask = translationTableStripeLevel - 1;
@Test   public void startServletAndFilter() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();   this.container = factory.getEmbeddedServletContainer(      exampleServletRegistration(), new FilterRegistrationBean(        new ExampleFilter())); assertThat(getResponse("http:
*     * @return The closed DataStream.    */  public DataStreamSink<OUT> print() {    DataStream<OUT> inputStream = this.copy();    PrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();   DataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());
for (; ; ) {              String id = prefix + randomString();              Partition partition = partitionService.getPartition(id);             if (comparePartitionOwnership(false, localMember, partition)) {                  return id;              }          }
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);      Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);      Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);     Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);      qosFunction.setRegionServer(mockRS);      assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);     Mockito.when
public interface CxfRsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCxfRsEndpointProducerBuilder advanced() {
*/    private void faultTestDataCheck(List<Pair<Integer, String>> answer) throws IOException {      TachyonFS tfs = mLocalTachyonClusterMultiMaster.getClient();     List<String> files = tfs.ls(Constants.PATH_SEPARATOR, true);      Assert.assertEquals(answer.size(), files.size());      for (int k = 0; k < answer.size(); k ++) {        Assert.assertEquals(answer.get(k).getSecond(), tfs.getFile(answer.get(k).getFirst())
CLIENT.user_deleteById(fileId);    }   public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)        throws FileDoesNotExistException, InvalidPathException, TException {      return CLIENT.user_getClientFileInfoByPath(path);    }   public synchronized ClientFileInfo user_getClientFileInfoById(int id)        throws FileDoesNotExistException, TException {      return CLIENT.user_getClientFileInfoById(id);    }
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public boolean keyDown (int keycode) {    Object[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (((InputProcessor)items[i]).keyDown(keycode)) return true;     } finally {      processors.end();     }
public interface AdvancedAtomixSetEndpointBuilder              extends                  AdvancedAtomixSetEndpointConsumerBuilder, AdvancedAtomixSetEndpointProducerBuilder {          default AtomixSetEndpointBuilder basic() {
}    @GwtIncompatible("Reader/Writer")   private static void testStreamingEncodingWithCasing(        BaseEncoding encoding, String decoded, String encoded) throws IOException {      testStreamingEncodingWithSeparators(encoding, decoded, encoded);      testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));
ModelNode operation = createOpNode("subsystem=undertow/server=default-server/https-listener=https2",                      ModelDescriptionConstants.REMOVE);             operation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);              Utils.applyUpdate(operation, managementClient.getControllerClient());              operation = createOpNode("socket-binding-group=standard-sockets/socket-binding=https2",
filter.setItemName(item.getName());     filter.setOrdering(Ordering.DESCENDING);    filter.setPageSize(4);     int startPage = 0;     filter.setPageNumber(startPage);
public interface AdvancedGoogleCalendarStreamEndpointBuilder              extends                  EndpointConsumerBuilder {          default GoogleCalendarStreamEndpointBuilder basic() {
return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);      }           private String getJSDocType(CodegenOperation co) {          String returnType = trimBrackets(co.returnType);
public interface TikaEndpointBuilder extends EndpointProducerBuilder {          default AdvancedTikaEndpointBuilder advanced() {              return (AdvancedTikaEndpointBuilder) this;          }
protected FSNamesystem namesystem;     protected final Configuration conf;    protected NamenodeRole role;   private volatile HAState state;    private final boolean haEnabled;    private final HAContext haContext;    protected boolean allowStaleStandbyReads;
try {                  rawJsonContent = IOUtils.toString(httpResponse.getContent());              } catch (Exception e) {                 LOG.info("Unable to read HTTP response content", e);              }              return new JsonContent(rawJsonContent);
final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);          final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);          http2c.setMaxConcurrentStreams(maxConcurrentStreams);         http2c.setInitialStreamRecvWindow(initialStreamSendWindow);
}      private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);      }      private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);      }      private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
public interface AdvancedJBPMEndpointBuilder              extends                  AdvancedJBPMEndpointConsumerBuilder, AdvancedJBPMEndpointProducerBuilder {          default JBPMEndpointBuilder basic() {
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTextures(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
