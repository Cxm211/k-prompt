@Before      @Override      public void setUp() throws Exception {         nagios = new NagiosNscaStub(25669, "secret");          nagios.start();          super.setUp();
public interface BeanstalkEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedBeanstalkEndpointProducerBuilder advanced() {
}          public String cookie(String name) {             Validate.notEmpty(name, "Cookie name must not be empty");              return cookies.get(name);          }
public interface AS2EndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedAS2EndpointProducerBuilder advanced() {
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@RestController  public class StencilsetRestResource {   @RequestMapping(value="/editor/stencilset", method = RequestMethod.GET, produces = "application/json")    public @ResponseBody String getStencilset() {      InputStream stencilsetStream = this.getClass().getClassLoader().getResourceAsStream("stencilset.json");      try {       return IOUtils.toString(stencilsetStream);      } catch (Exception e) {        throw new ActivitiException("Error while loading stencil set", e);      }
Map<HashComputation, Symbol> hashSymbols = new HashMap<>(source.getHashSymbols());             hashSymbols.keySet().retainAll(result.getOutputSymbols());              return new PlanWithProperties(result, hashSymbols);          }
httpClientBinder(binder).bindHttpClient("memoryManager", ForMemoryManager.class)                  .withTracing()                  .withConfigDefaults(config -> {                     config.setIdleTimeout(new Duration(30, SECONDS));                      config.setRequestTimeout(new Duration(10, SECONDS));                  });
private void validateTx(Xid xid,Transaction.State state) throws XAException {          final Transaction tx = getTransaction(xid);         if(tx != null) {              switch (state){                  case ACTIVE:                      if(tx.getState() != Transaction.State.ACTIVE){
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, int batchSize) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);   }
, (args = args.rest()).first()        , args.rest());     case 12:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
status = ufs.getStatus(ufsUri);                } catch (Exception e) {                  throw new IOException(String.format("Cannot sync UFS directory %s: %s.", ufsUri,                     e.toString()), e);                }                if (status.isFile()) {                  throw new InvalidPathException(String.format(
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
}   @Configuration  @ConditionalOnEnabledHealthIndicator("diskspace")   public static class DiskSpaceHealthIndicatorConfiguration {    @Bean
DIAMOND(264),      IRON_INGOT(265),      GOLD_INGOT(266),     IRON_SWORD(267, 1, 250),      WOOD_SWORD(268, 1, 59),      WOOD_SPADE(269, 1, 59),      WOOD_PICKAXE(270, 1, 59),
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
processEngineConfiguration.setClock(testClock);     testClock.setCurrentTime(new Date(1));      runtimeService.startProcessInstanceByKey("testTimerCancelledEvent");      listener.clearEventsReceived();
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      @Override     public synchronized void mouseMove() {          if (vizConfig.isSelectionEnable() && rectangleSelection) {              Rectangle rectangle = (Rectangle) currentSelectionArea;
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
}    @Override   public List<Integer> snapshotState(long checkpointId, long timestamp) {     return Collections.singletonList(saveRecordCnt);    }    @Override   public void restoreState(List<Integer> state) {     for (Integer i : state) {      saveRecordCnt += i;     }
}      private static ModelControllerClient createClient2() throws UnknownHostException {         return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddressNode1()),                  TestSuiteEnvironment.getServerPort() + 300,                  Authentication.getCallbackHandler());      }
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public void testSamplingFromExchangeStream() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(2);          mock.setResultWaitTime(3000);          List<Exchange> sentExchanges = new ArrayList<Exchange>();
public interface AdvancedGitEndpointBuilder              extends                  AdvancedGitEndpointConsumerBuilder, AdvancedGitEndpointProducerBuilder {          default GitEndpointBuilder basic() {
public interface AdvancedKinesisEndpointBuilder              extends                  AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {          default KinesisEndpointBuilder basic() {
m_address, -dt); return (timeNow + 2000L);      } else {      logger.debug("gave up waiting for query reply from device {}", m_address);      }     } QEntry qe = m_requestQueue.poll();
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
new LinkedBlockingQueue<Runnable>(100),              new NamedThreadFactory("Close-ExecutorService-Timer", true));     public static boolean isTerminated(Executor executor) {          if (executor instanceof ExecutorService) {             if (((ExecutorService) executor).isTerminated()) {                  return true;              }          }
*       * @return the message.       */     @Message(id = 10838, value = "Unexplained failure")      String unexplainedFailure();      /**
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
* @see <a href="http:      */      public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json", true));      }      /**
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),          @ApiResponse(code = 404, message = "User not found", response = Void.class) })     void deleteUser(@PathParam("username") @ApiParam("The name that needs to be deleted") String username) throws Exception;      @GET      @Path("/{username}")
*/  public class ManagedProducerRouteAddRemoveRegisterAlwaysTest extends ManagementTestSupport {     private int services = 9;      @Override      protected CamelContext createCamelContext() throws Exception {
int receiverBufferSize = TestUtils.randomPortInt();      Random rand = new Random();      boolean reuseAddress = rand.nextBoolean();     int trafficClass = TestUtils.randomByte() + 128;      boolean tcpNoDelay = rand.nextBoolean();      boolean tcpKeepAlive = rand.nextBoolean();      int soLinger = TestUtils.randomPositiveInt();
}      if (isBlockLocked(blockId) || !mToRemoveBlockIdSet.contains(blockId)) {       return true;      }      try {        if (!mFs.delete(getBlockFilePath(blockId), false)) {
}              }          }         return this;      }      private boolean isAtmosphereResourceValid(AtmosphereResource r) {
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));          } catch (IOException ioe) {            LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId()               + " will not be in TachyonStorage.");            mShouldCacheCurrentBlock = false;          }        } else {
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.setMeasurementUnit(MeasurementUnit.MILLISECONDS)              .setAllowExpression(true)              .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)             .setDefaultValue(new ModelNode().set(-1L))              .build();      static final AttributeDefinition[] ATTRIBUTES = new AttributeDefinition[] { MAX_IDLE, LIFESPAN, INTERVAL };
return false;          }         if (!this.transactional && this.referenceId == referenceId) {              return true;          }
public void operationComplete(Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> future) {                  queriesInProgress.remove(future);                 if (promise.isDone() || promise.isDone()) {                      return;                  }
public Container<T> maxSize (float width, float height) {   maxSize(new Fixed(width), new Fixed(height));    return this;   }
public interface AdvancedBrowseEndpointBuilder              extends                  AdvancedBrowseEndpointConsumerBuilder, AdvancedBrowseEndpointProducerBuilder {          default BrowseEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 10852, value = "Caught %s storing deployment content -- %s")      String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);      /**
public interface BraintreeEndpointBuilder              extends                  BraintreeEndpointConsumerBuilder, BraintreeEndpointProducerBuilder {          default AdvancedBraintreeEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
long max = HiveConf.getLongVar(context.parseContext.getConf(),              HiveConf.ConfVars.HIVECONVERTJOINMAXSHUFFLESIZE);      if (max < 1) {       return false;      }      ReduceSinkOperator rsOp = (ReduceSinkOperator) joinOp.getParentOperators().get(position);
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}      }     public synchronized AttributeModel getModel() {          Workspace workspace = projectController.getCurrentWorkspace();          if (workspace != null) {              AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);
}      private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {         boolean hasResponse = basicInvocation.potentialResponse != null;          int backupsExpected = basicInvocation.backupsExpected;          int backupsCompleted = basicInvocation.backupsCompleted;
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface CouchbaseEndpointBuilder              extends                  CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {          default AdvancedCouchbaseEndpointBuilder advanced() {
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/test");          servlet.service(request, response);
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface IOTAEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIOTAEndpointProducerBuilder advanced() {
Thread.yield();     response = client.get(path, MIMETYPE_PROTOBUF);      assertEquals(response.getCode(), 404);
File out = new File("target/out/hello.txt").getAbsoluteFile();          assertTrue("file should exists", out.exists());         assertEquals("Hello World", IOConverter.toString(out, null));      }      protected RouteBuilder createRouteBuilder() throws Exception {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
Element position = item.getChildByName("Position");    rectangle.getRectangle().set(Float.parseFloat(position.getChildByName("X").getText()),              -Float.parseFloat(position.getChildByName("Y").getText()),               Float.parseFloat(item.getChildByName("Width").getText()),               Float.parseFloat(item.getChildByName("Height").getText()));
public interface AdvancedGoogleCalendarEndpointBuilder              extends                  AdvancedGoogleCalendarEndpointConsumerBuilder, AdvancedGoogleCalendarEndpointProducerBuilder {          default GoogleCalendarEndpointBuilder basic() {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final Sink normalizedPersons = new Sink("normalizedPersons.json").withInputs(replace);    expectedPlan.setSinks(normalizedPersons);   assertPlanEquals(expectedPlan, actualPlan);   }  }
public int read(String table, String key, Set<String> fields,              HashMap<String, ByteIterator> result) {          if (fields == null) {             StringByteIteartor.putAllAsByteIterators(result, jedis.hgetAll(key));          }          else {              String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);
HttpRequest req = (HttpRequest) ch.readInbound();          DecoderResult dr = req.getDecoderResult();          assertFalse(dr.isSuccess());         assertTrue(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
String location = response.getHeader(HttpHeaders.Names.LOCATION);                  URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);                  boolean stripQueryString = config.isRemoveQueryParamOnRedirect();                 if (!uri.toString().equals(future.getURI().toString())) {                      final RequestBuilder nBuilder = stripQueryString ?                              new RequestBuilder(future.getRequest()).setQueryParameters(null)                              : new RequestBuilder(future.getRequest());
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTextures(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
notifyHandlerException(t);          } finally {              ChannelBufferHolder<Object> inbound = ctx.inbound();             if (!inbound.isEmpty() && inbound.hasByteBuffer()) {                  inbound.byteBuffer().discardReadBytes();              }          }
String layer() default "";     int retries() default 100;      String loadbalance() default "";
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })     void addPet(@Valid Pet body) throws Exception;      @DELETE      @Path("/{petId}")
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid pet value", response = Void.class) })     void deletePet(@PathParam("petId") @ApiParam("Pet id to delete") Long petId,@HeaderParam("api_key")   String apiKey) throws Exception;      @GET      @Path("/findByStatus")
continue;          if (conceptToValidate.getUuid() != null                  && conceptToValidate.getUuid().equals(concept.getUuid()))            continue;
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();     assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();     assertThat(factory.get(fResultClass, NO_ANNOTATIONS, ret
*       * @return a message for the error.       */     @Message(id = 10831, value = "The master host controller cannot register slave host controllers as it's current running mode is '%s'")      String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);      /**
context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_0.getUriString(), SecuritySubsystemParser::new);          context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_1.getUriString(), SecuritySubsystemParser::new);          context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_2.getUriString(), SecuritySubsystemParser::new);         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_3_0.getUriString(), SecuritySubsystemParser_3_0::new
LABEL_TOKEN( false ),      LABEL_TOKEN_NAME( false ),      NEOSTORE_BLOCK( false ),     SCHEMA( 34, true ),      NODE_LABELS( 34, true );      private final long max;
@Test      public void test_Decode_Return_Request_Event_String() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          String event = Request.READONLY_EVENT;          byte[] request = getRequestBytes(event, header);
* {@link EnableAutoConfiguration Auto-configuration} for Spring REST Docs.   *   * @author Andy Wilkinson   */  @Configuration  @ConditionalOnWebApplication  @EnableConfigurationProperties public class RestDocsAutoConfiguration {   @Bean   @ConditionalOnMissingBean(MockMvcRestDocumentationConfigurer.class)
};       final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
when(mock.getColumn()).thenReturn(1);          when(mock.getMessage()).thenReturn("Mocked message.");          when(mock.getFileName()).thenReturn("InputMockFile.java");         final AuditEventFormatter formatter = new AuditEventDefaultFormatter();          final String expected = "[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]";
private Integer port = 5000;    @Override    protected void applyToCrshShellConfig(Properties config) {     if (this.enabled) {     config.put("crash.telnet.port", String.valueOf(this.port));     }    }
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
connector.setReuseAddress(reuseAddress);          if (soLingerTime != null) {             connector.setSoLingerTime((int) soLingerTime.toMilliseconds());          }          connector.setIdleTimeout(idleTimeout.toMilliseconds());          connector.setName(name);
@Override      public Map<AgentInfo, PinpointRouteResponse> invoke(List<AgentInfo> agentInfoList, byte[] payload)              throws TException {         return invoke(agentInfoList, payload, DEFAULT_FUTURE_TIMEOUT);      }      @Override
StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort);    env.enableCheckpointing(500);    env.setParallelism(parallelism);   env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private volatile ManagementOperationHandler operationHandler;          private void handleRequest(final ManagementRequestHeader header, final DataInput input) throws IOException {             log.debugf("%s handling request %d(%d)", ManagementChannel.this, header.getBatchId());              final FlushableDataOutputImpl output = FlushableDataOutputImpl.create(writeMessage());              Exception error = null;
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,    MessageSourceAware, InitializingBean {  private static final char[] EXACT_DELIMITERS = { '_', '.', '[' };  private static final char[] TARGET_NAME_DELIMITERS = { '_', '.' };   private final Log logger = LogFactory.getLog(getClass());
public interface SoroushBotEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSoroushBotEndpointProducerBuilder advanced() {
for (ComplexColumn complexColumn : complexColumnCache.values()) {                  Closeables.closeQuietly(complexColumn);                }               for (Object column : objectColumnCache.values()) {                  if (column instanceof Closeable) {                    Closeables.closeQuietly((Closeable) column);                  }
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
selectedKeysField.set(selector, set);              publicSelectedKeysField.set(selector, set);             logger.finest("Optimized Selector: " + selector.getClass().getName());              return set;          } catch (Throwable t) {
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
switch (p2) {                          case BEFORE_DEFAULT:                          case FIRST_BEFORE_DEFAULT:                             orderResult = 1;                              break;                      }                      break;
}      else {       logger.debug("NODE {}: Calling handleApplicationCommandRequest.", this.getNode().getNodeId());      zwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 0);      }     }
Set<E> edgesConnecting(N node);       N adjacentNode(E edge);    /**     * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
if (this.mrwork != null && this.mrwork.getHadoopSupportsSplittable()) {
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(getNotAllowedExceptionMessage("helloForNone"), e.getCause().getMessage());          }      }
private IntBuffer toIntBuffer (int v[], int offset, int count) {     ensureBufferCapacity(count << 2);    intBuffer.clear();     com.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);     return intBuffer;    }
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);   /**    * Completely remove the given global property from the database
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}   @Override  public CompletableFuture<Void> getTerminationFuture() {    return terminationFuture;   }  }
*       * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
*       * @return the message.       */     @Message(id = 10869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
public interface AdvancedAtomixQueueEndpointBuilder              extends                  AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {          default AtomixQueueEndpointBuilder basic() {
}                   protected final int readULong(final int position) throws NtlmEngineException {              return NtlmEngine.readULong(messageContents, position);          }                   protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {              return NtlmEngine.readSecurityBuffer(messageContents, position);          }
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
}    public Texture (FileHandle file, Format format, boolean useMipMaps) {    if (file.name().contains(".etc1") || file.name().contains(".etc2")) {      create(new ETC1TextureData(file, useMipMaps));     } else {      create(new FileTextureData(file, null, format, useMipMaps));
thread.shutdown();              }              synchronized (ticket) {                 ticket.notifyAll();              }          }      }
*       * @return the message.       */     @Message(id = 10843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
*       * @return the message.       */     @Message(id = 10848, value = "Exception getting result from host %s: %s")      String exceptionAwaitingResultFromHost(String name, String message);      /**
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
}      @SuppressWarnings("ResultOfMethodCallIgnored")     @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = ".*Failing getObject call with " + SC_NOT_FOUND + ".*")      public void testReadNotFound()              throws Exception      {
public void testMoveException() throws Exception    {      MockStorageService mockS3Client = new MockStorageService();     S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());      mover.move(          sourceSegment,
return this.set(min.set(0, 0, 0), max.set(0, 0, 0));    }       public boolean isValid () {    return min.x <= max.x && min.y <= max.y && min.z < max.z;    }    /** Extends this bounding box by the given bounding box.
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers, "mBlockIdsOnTiers");      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
Collection<StaticBuffer> actual = Sets.newHashSet(i);                         log.debug("Checking bounds [{}, {}) (expect {} keys)",                                  new Object[]{startCol, endCol, expected.size()});                          Assert.assertEquals(expected, actual);                          i.close();
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void disable() {                  GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();                 if (model.getCurrentResult() != null && graphModel != null) {                      graphModel.destroyView(model.getCurrentResult());                      model.setCurrentResult(null);                  }
}      @Override     public synchronized List<Edge> getSelectedUnderlyingEdges() {          List<Edge> selected = new ArrayList<>();          for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {              EdgeModel edgeModel = itr.next();
if (getPath() == null && that.getPath() != null) {              return false;         } else if (that.getPath() == null && getPath() != null) {              return false;          }          if (!getPath().equals(that.getPath())) {
@Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/test");          servlet.service(request, response);
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should return all global properties in the database    */   @Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)  public List<GlobalProperty> getAllGlobalProperties();   /**    * Save the given list of global properties to the database.
final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);          Data data = serializationService.toData(normalResponse);         final Packet packet = new Packet(data, 0, serializationService.getPortableContext(), false);          packet.setHeader(Packet.HEADER_RESPONSE);          packet.setHeader(Packet.HEADER_OP);          executor.execute(packet);
if (language != null && !"default".equals(language)) {        String languagePropertiesFile = LanguageInfo.getLanguagePropertiesFile(language);        if (languagePropertiesFile != null) {         try (InputStream is = IOUtils.getInputStreamFromURLOrClasspathOrFileSystem(languagePropertiesFile)){            Properties languageSpecificProperties = new Properties();            languageSpecificProperties.load(is);            PropertiesUtils.overWriteProperties(props,languageSpecificProperties);
HttpContent chunk = (HttpContent) ch.readInbound();          DecoderResult dr = chunk.getDecoderResult();          assertFalse(dr.isSuccess());         assertTrue(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.createTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
long sessionId = IdUtils.createSessionId();        long blockSize = openUfsBlockOptions.getBlockSize();        boolean isSourceLocal = mLocalWorkerAddress.getHost().equals(request.getSourceHost())           && mLocalWorkerAddress.getDataPort() == request.getSourcePort();        try {          if (isSourceLocal) {
* @return A mapping from storage tier alias to blocks     */    public Map<String, List<Long>> getBlockList() {     Preconditions.checkNotNull(mBlockIdsOnTiers, "mBlockIdsOnTiers");      return mBlockIdsOnTiers;    }
public interface CouchbaseEndpointBuilder              extends                  CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {          default AdvancedCouchbaseEndpointBuilder advanced() {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
+ ") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name";          gen.get().addSnippet( "query-get-admins", createCypherSnippet( query ) );          String result = engine.execute( query )                 .dumpToString();          assertTrue( result.contains("Engin") );          gen.get().addSnippet( "o-query-get-admins", createQueryResultSnippet( result ) );
InjectableMethod injectableMethod = new InjectableMethod(                  current, method, atInject);              if (checkForMisplacedBindingAnnotations(method, errors)                 | !isValidMethod(injectableMethod, errors)) {                if (overrideIndex != null) {                  boolean removed = overrideIndex.removeIfOverriddenBy(method, false, injectableMethod);                  if(removed) {
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
ResultScanner scan = table.getScanner(fam1);      scan.next();      scan.close();     counter = verifyCount(counter + 1);      Get g2 = new Get(row);      table.get(Lists.newArrayList(g, g2));
@Override      public Map<AgentInfo, PinpointRouteResponse> invoke(List<AgentInfo> agentInfoList, byte[] payload)              throws TException {         return invoke(agentInfoList, payload, DEFAULT_FUTURE_TIMEOUT);      }      @Override
*       * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private static final FsAction[] SVALS = values();   FsAction(String s) {      mSymbol = s;    }
}      @Override     public synchronized Connection getOrConnect(Address address, boolean silent) {          return getOrConnect(address);      }     public synchronized void block(Address address) {          blockedAddresses.add(address);          Connection connection = getConnection(address);          if (connection != null) {
* @author Stephane Nicoll   * @author Dominic Gunn   * @author András Deák  * @author Andrii Hrytsiuk   */  public class LiquibaseAutoConfigurationTests {
if (!currentConfigHash.equals(cachedConfigHash)) {                      details.clear();                     details.setProperty(CONFIG_HASH_KEY, currentConfigHash);                  }              }              finally {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public interface SftpEndpointBuilder              extends                  SftpEndpointConsumerBuilder, SftpEndpointProducerBuilder {          default AdvancedSftpEndpointBuilder advanced() {
assertTrue(repo.contains("e.txt"));          resetMocks();         notify = new NotifyBuilder(context).whenDone(5).create();          getMockEndpoint("mock:result").expectedMessageCount(2);
*/    public static long getUnsafeByteBufferAddress(ByteBuffer buffer) {     synchronized(unsafeBuffers) {     if (unsafeBuffers.contains(buffer, false))       return 0;     }     return getByteBufferAddress(buffer);
}      @SuppressWarnings("ResultOfMethodCallIgnored")     @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = ".*Failing getObject call with " + SC_NOT_FOUND + ".*")      public void testReadNotFound()              throws Exception      {
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), endsWith("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();     assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();     assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      protected void invalidateExpiredEntries() {         long now = System.currentTimeMillis();          synchronized (messages) {              Set<String> inactiveClients = new HashSet<String>();
}    public void normalize() {     logger.fine("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.retLong();      }     private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)      {          Parameter blockIndex = arg("blockIndex", int.class);          Parameter blockPosition = arg("blockPosition", int.class);
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
*       * @return the message.       */     @Message(id = 10838, value = "Unexplained failure")      String unexplainedFailure();      /**
if (field != null) {                     paramType = field.getType();                      for (final Annotation fieldAnnotation : field.annotations()) {                          if (!paramAnnotations.contains(fieldAnnotation)) {
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
public void testGrouped() throws Exception {          MockEndpoint result = getMockEndpoint("mock:result");         result.expectedMinimumMessageCount(1);          template.sendBody("direct:start", "100");
*  * @see    */  public abstract boolean equalToReference(T candidate);   /**    * This method compares the element that has been set as reference in this type accessor, to the
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }  }
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private Main() {      }     public static void main(String[] args) throws Exception {          org.apache.camel.spring.Main.main(args);      }  }
* @see <a href="http:       */      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface GitEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedGitEndpointProducerBuilder advanced() {
taskManagerQueryServiceGatewaysFuture.whenCompleteAsync(       (Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {        if (throwable != null) {        LOG.debug("Requesting TaskManager's path for query services failed.", throwable);        } else {         List<String> taskManagersToRetain = queryServiceGateways          .stream()
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, paging.asPostParameterList(), true));      }
private int maxNumberOfIndices = 20;      @Parameter(value = "output_batch_size", required = true, validator = PositiveIntegerValidator.class)     private int outputBatchSize = 25;      @Parameter(value = "outputbuffer_processors", required = true, validator = PositiveIntegerValidator.class)     private int outputBufferProcessors = 3;      @Parameter(value = "outputbuffer_processor_threads_max_pool_size", required = true, validator = PositiveIntegerValidator.class)      private int outputBufferProcessorThreadsMaxPoolSize = 30;
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final long committedOffset = KafkaJournal.this.committedOffset.get();              final HashSet<LogSegment> logSegments = Sets.newHashSet(                     JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))              );              loggerForCleaner.debug("[cleanup-committed] Keeping segments {}", logSegments);              return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else {                      statistics.increaseCacheHits(1);                  }                 statistics.addGetTimeNanos(System.nanoTime() - start);              }          }      }
log.info("onShutdown Stopping thread: " + thread.getName());        thread.stop();       }      catch (Exception ex) {        log.error(ex.getMessage(), ex);       }      }
warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\n');                          break;                      case HINT:                         hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\n');                          break;                  }              }
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @see <a href="http:      */      public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json", true));      }      /**
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/test");          servlet.service(request, response);
rel.setPersonA(personA);     rel.setPersonB(personB);     rel.setRelationshipType(relType);    ps.saveRelationship(rel);    }    public void voidRelationship(Integer relationshipId, String voidReason) {
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
"JSC_REFERENCE_BEFORE_DECLARE",        "Variable referenced before declaration: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");
return Subject.doAs(subject, action);      } catch (PrivilegedActionException pae) {        Throwable cause = pae.getCause();       LOG.warn("PriviledgedActionException as:"+this+" cause:"+cause);        if (cause instanceof IOException) {          throw (IOException) cause;        } else if (cause instanceof Error) {
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return getFile(path, false);    }   public synchronized TachyonFile getFile(String path, boolean useCachedMetadata)        throws IOException {      path = CommonUtils.cleanPath(path);      ClientFileInfo clientFileInfo = getClientFileInfo(path, useCachedMetadata);      if (clientFileInfo == null) {
* @should fail if global property being updated does not already exist    * @should update a global property whose typed value is handled by a custom datatype    */  public void updateGlobalProperty(String propertyName, String propertyValue);   /**    * Save the given global property to the database
*       * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
}      public boolean hasAttributes() {         return nodeData.getAttributes() != null;      }      public void setAttributes(Attributes attributes) {
public interface AdvancedTwitterStreamingEndpointBuilder              extends                  EndpointConsumerBuilder {          default TwitterStreamingEndpointBuilder basic() {
, (args = args.rest()).first()        , args.rest());     case 17:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
ActorRef rpcEndpoint,     Time timeout,     long maximumFramesize,    @Nullable CompletableFuture<Void> terminationFuture) {    this.address = Preconditions.checkNotNull(address);    this.hostname = Preconditions.checkNotNull(hostname);
* @param keyFile a PKCS       */      public static SslContextBuilder forServer(File keyCertChainFile, File keyFile) {         return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile);      }      /**
public interface DirectVmEndpointBuilder              extends                  DirectVmEndpointConsumerBuilder, DirectVmEndpointProducerBuilder {          default AdvancedDirectVmEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
@Override      public KeyColumnValueStore openDatabase(final String name) throws StorageException {         if (!stores.containsKey(name)) {              stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));          }          KeyColumnValueStore store = stores.get(name);
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void stopServlet() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();    this.container = factory     .getEmbeddedServletContainer(exampleServletRegistration());    this.container.stop();    this.thrown.expect(ConnectException.class); getResponse("http:
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10853, value = "Unexpected initial path key %s")      IllegalStateException unexpectedInitialPathKey(String key);      /**
* Removes try/catch/finally statements for easier debugging.     */    void removeTryCatchFinally() {     logger.fine("Remove try/catch/finally");      startPass("removeTryCatchFinally");      RemoveTryCatch r = new RemoveTryCatch(this);      process(r);
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
* @return nullToZero       */      private static Double nullToZero(Double value) {         return !Objects.isNull(value) ? value : 0;      }      /**
}    factory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));    factory.addContextLifecycleListeners(listeners[2], listeners[3]);   this.container = factory.getEmbeddedServletContainer();    InOrder ordered = inOrder((Object[]) listeners);    for (LifecycleListener listener : listeners) {     ordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
public void touchUp (InputEvent event, float x, float y, int pointer, int button) {       if (pointer == -1) return;       draggingPointer = -1;      if (!calculatePositionAndValue(x, y)) {        ChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);        fire(changeEvent);
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Node node1 = Node.newString(Token.NAME, "f");      node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");     assertFalse(node1.isEquivalentToTyped(node2));    }    public void testVarArgs1() {
import org.jboss.logging.MessageLogger;  /**  * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain * controller logger messages. See http:   * JBAS message id blocks.   * <p/>
*/   static public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {    DecimalType result = null;   HistoricItem itemThen = historicState(item, timestamp, serviceName);    if (itemThen != null) {     DecimalType valueThen = (DecimalType) itemThen.getState();     DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);
mThriftServer = createThriftServer();      mWorkerNetAddress =          new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()             .getHostAddress(), thriftServerPort, mDataServer.getPort());      int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);
public interface AdvancedJcloudsEndpointBuilder              extends                  AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {          default JcloudsEndpointBuilder basic() {
}      @FixMethodOrder(MethodSorters.JVM)     static class DummySortJvm {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
}   public void glGenTextures (int n, int[] textures, int offset) {   GL.glGenTextures(n, toBuffer(textures, offset), 0);   }   public void glGetIntegerv (int pname, int[] params, int offset) {
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface WeatherEndpointBuilder              extends                  WeatherEndpointConsumerBuilder, WeatherEndpointProducerBuilder {          default AdvancedWeatherEndpointBuilder advanced() {
+ (StringUtils.isEmpty(modelPackage) ? "" : (modelPackage + "/")) + dataType;      }           private String getJSDocType(CodegenModel cm, CodegenProperty cp) {          if (Boolean.TRUE.equals(cp.isContainer)) {
(file.isDirectory() && file.getName().startsWith( "branched-" ) ) )              {                  File dest = new File( oldDir, file.getName() );                  if ( !file.renameTo( dest ) )
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedVertxEndpointBuilder              extends                  AdvancedVertxEndpointConsumerBuilder, AdvancedVertxEndpointProducerBuilder {          default VertxEndpointBuilder basic() {
if (a.length != b.length) {     throw new AssertionError("Display modes " + Arrays.toString(a) + " aren't equal to display modes " + Arrays.toString(b));    }   boolean equal = false;    for (int i = 0; i < a.length; i++) {    equal = isDisplayModeEqual(a[i], b[i]);    }    if (!equal) {     throw new AssertionError("Display modes " + Arrays.toString(a) + " aren't equal to display modes " + Arrays.toString(b));
return HConstants.NORMAL_QOS;      } if (methodName.equals("scan") || methodName.equals("create") || methodName.equals("update")) {        ScanRequest request = (ScanRequest)param;        if (!request.hasScannerId()) {          return HConstants.NORMAL_QOS;
public interface AdvancedAtomixSetEndpointBuilder              extends                  AdvancedAtomixSetEndpointConsumerBuilder, AdvancedAtomixSetEndpointProducerBuilder {          default AtomixSetEndpointBuilder basic() {
return false;      }      if (!info.isOffline()) {       LOG.warn("Region is split but not offline: " +         info.getRegionNameAsString());      }      return true;    }
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
/*  * Copyright 2012-2018 the original author or authors.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.
public void testGetRequiredTokens() {          ThrowsCountCheck obj = new ThrowsCountCheck();          int[] expected = {TokenTypes.LITERAL_THROWS};         assertArrayEquals(expected, obj.getRequiredTokens());      }  }
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
static final class BasicTrustRootIndex extends TrustRootIndex {      private final Map<X500Principal, Set<X509Certificate>> subjectToCaCerts;     BasicTrustRootIndex(X509Certificate... caCerts) {        subjectToCaCerts = new LinkedHashMap<>();        for (X509Certificate caCert : caCerts) {          X500Principal subject = caCert.getSubjectX500Principal();
Assert.assertEquals(1, result.size());        hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()            .map(regionName -> regionName.split("\\.")[1]).collect(Collectors.toList()));       ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());        result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));        Assert.assertEquals(0, result.size());
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Pet.class, responseContainer = "List"),          @ApiResponse(code = 400, message = "Invalid status value", response = Void.class, responseContainer = "List") })     List<Pet> findPetsByStatus(@QueryParam("status") @NotNull   @ApiParam("Status values that need to be considered for filter")  List<String> status) throws Exception;      @GET      @Path("/findByTags")
public GraphDatabaseService newHighlyAvailableDatabase( String path )      {         return newHighlyAvailableDatabaseBuilder( path ).newGraphDatabase();      }      public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )
AbstractAioChannel ch = null;          try {              ch = findChannel(command);         } catch (Throwable e) {          }
public void configure() throws Exception {                  from("direct:start")                          .multicast(new MyAggregationStrategy())                             .parallelProcessing().timeout(1000).to("direct:a", "direct:b", "direct:c")                          .end()                          .to("mock:result");                 from("direct:a").delay(2000).setBody(constant("A"));                  from("direct:b").setBody(constant("B"));
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
command = new DeleteCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if (args[i].equals("roll")) {          String keyName = "--help";
this.array = array;     return this;    }   return new HashCollisionNode(edit, hash, count, array);   }   private HashCollisionNode editAndSet(AtomicReference<Thread> edit, int i, Object a) {
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
}    }   public synchronized void unpinFile(int fileId) {      if (INACTIVE) {        return;      }
public void testBurstySampling() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(2);          mock.setResultWaitTime(3000);          List<Exchange> sentExchanges = new ArrayList<Exchange>();
EnvironmentTestUtils.addEnvironment(this.context, "security.ignored:none");    this.context.refresh();   assertEquals(3,      this.context.getBean(FilterChainProxy.class).getFilterChains().size());   }
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    @Test   public void reportLostFileTest() throws LineageDoesNotExistException {      long fileId = 1;      mThrown.expect(LineageDoesNotExistException.class);      mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));     mLineageStore.reportLostFile(fileId);    }    @Test
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid pet value", response = Void.class) })     void deletePet(@PathParam("petId") @ApiParam("Pet id to delete") Long petId,@HeaderParam("api_key")   String apiKey) throws Exception;      @GET      @Path("/findByStatus")
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*      * @param queueName Name of the job queue.     */   @InterfaceAudience.Private   public void setQueueName(String queueName) {      super.setQueueName(queueName);    }
public interface CassandraEndpointBuilder              extends                  CassandraEndpointConsumerBuilder, CassandraEndpointProducerBuilder {          default AdvancedCassandraEndpointBuilder advanced() {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
state = MachineState.RUNNING;              }             this.startTime = Time.currentTimeMillis();              this.newAssignment = newAssignment;              this.pendingLocalization = null;              this.pendingDownload = null;
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}, tags={ "store",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Map.class, responseContainer = "Map") })     Map<String, Integer> getInventory() throws Exception;      @GET      @Path("/order/{order_id}")
System.setProperty("tachyon.worker.selector.threads", Integer.toString(1));      System.setProperty("tachyon.worker.server.threads", Integer.toString(2));      System.setProperty("tachyon.worker.network.netty.worker.threads", Integer.toString(2));     System.setProperty("tachyon.master.web.threads", Integer.toString(1));      CommonConf.clear();      MasterConf.clear();
*/   @Override   public Collection<Item> getItems() {   Set<Item> items = new HashSet<Item>(modelRepository.getAllModelNamesOfType("items"));    for (String name : modelRepository.getAllModelNamesOfType("items")) {     items.addAll(getItemsFromModel(name));    }
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();     assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();     assert
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override    protected void setUp() throws Exception {      super.setUp();     this.mode = TypeInferenceMode.BOTH;    }
*       * @return the message.       */     @Message(id = 10843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
if (s == null || regex == null) {        return null;      }     if (!regex.equals(lastRegex) || p == null) {        lastRegex = regex;        p = Pattern.compile(regex);      }
public void test_kr_3() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년05월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10853, value = "Unexpected initial path key %s")      IllegalStateException unexpectedInitialPathKey(String key);      /**
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
* before growing the backing table. */    public IdentityMap (int initialCapacity, float loadFactor) {     if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);     capacity = MathUtils.nextPowerOfTwo(initialCapacity);     if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private static final Log log = LogFactory.getLog(ServiceContext.class);  private static volatile ServiceContext instance;   private ApplicationContext applicationContext;
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
public interface AdvancedJiraEndpointBuilder              extends                  AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {          default JiraEndpointBuilder basic() {
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ModelNode oldResponse = response;                  try {                      flags = EnumSet.noneOf(Flag.class);                     response = this.response = step.response;                      ModelNode newOperation = operation = step.operation;                      modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));                      step.handler.execute(this, newOperation);
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
}    private String computeKey(String identifier, byte[] key) {     return identifier + Base64.encodeBytes(key);    }  }
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getMentions(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, paging.asPostParameterList(), true));      }
ModelNode oldResponse = response;                  try {                      flags = EnumSet.noneOf(Flag.class);                     response = this.response = step.response;                      ModelNode newOperation = operation = step.operation;                      modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));                      step.handler.execute(this, newOperation);
, (args = args.rest()).first()        , args.rest());     case 10:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
constructor.ret();      }     private static void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)      {          classDefinition.declareMethod(                  a(PUBLIC),
result.expectedMessageCount(2);          MockEndpoint error = getMockEndpoint("mock:error");         error.expectedMinimumMessageCount(2);          MockEndpoint kaboom = getMockEndpoint("mock:kaboom");
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {            mBuf.putInt(0, k + mWorkerId);
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
public interface AdvancedDirectVmEndpointBuilder              extends                  AdvancedDirectVmEndpointConsumerBuilder, AdvancedDirectVmEndpointProducerBuilder {          default DirectVmEndpointBuilder basic() {
StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort);    env.enableCheckpointing(500);    env.setParallelism(parallelism);   env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));    env.getConfig().disableSysoutLogging();    env.setBufferTimeout(0);
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
if (zProvider != null) {     ZWaveBindingConfig bindingConfig = zProvider.getZwaveBindingConfig(itemName);    if (bindingConfig != null && converterHandler != null) {       converterHandler.executeRefresh(zProvider, itemName, true);     }    }
Expression ruleName = itRuleNames.next();          filter.addSuffic(ruleName.getValue(execution).toString());        }       filter.setAccept(exclude);        ksession.fireAllRules(filter);      } else {
public interface AdvancedKinesisEndpointBuilder              extends                  AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {          default KinesisEndpointBuilder basic() {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      private boolean validate(Object[] args) {         if (args == null || args.length == 0) {              return false;          }
public interface CordaEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCordaEndpointProducerBuilder advanced() {
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
} catch (IOException e) {       logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);      } finally {      IOUtils.closeQuietly(is);      }     }    } catch (NotInitializedException e) {
@Test   public void testMultipleAlternativesWithCommonLabel_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
private List<ScheduledJob> scheduledJobs = new LinkedList<ScheduledJob>();     public void scheduleAtFixedRate( Runnable job, String jobName, long delay, long period )      {         ScheduledJob scheduledJob = new ScheduledJob( job, jobName, delay, period );          scheduledJobs.add( scheduledJob );      }
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
template.sendBodyAndHeader(serverUri, "Hello World", HttpProducer.QUERY, "one=uno&two=dos");         assertMockEndpointsSatisfied();      }      protected RouteBuilder createRouteBuilder() throws Exception {
public void restartWithKeepAlive() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();    this.container = factory     .getEmbeddedServletContainer(exampleServletRegistration());    MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();    HttpClient client = new HttpClient(connectionManager);
@ApiOperation(value = "Logs out current logged in user session", notes = "", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void logoutUser() throws Exception;      @PUT      @Path("/{username}")
this.bufferMemorySize = bufferMemorySize;      }     public Long getRequestRequiredAcks() {          return requestRequiredAcks;      }
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
);         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypesWithoutHash(), buildPages.getTypesWithoutHash()))                  .row("20", 1020L, 2020L, "20", 30L, 40L)                  .row("21", 1021L, 2021L, "21", 31L, 41L)                  .row("22", 1022L, 2022L, "22", 32L, 42L)
}      @DELETE     @Path(PATH_RELATIONSHIP_INDEX_ID)      public Response deleteFromRelationshipIndex( @PathParam("indexName") String indexName,                                                   @PathParam("key") String key, @PathParam("value") String value,                                                   @PathParam("id") long id )
System.out.println("-- host configuration");              final ModelNode hostResult = result.get(RESULT).clone();             System.out.println("-- host configuration");              System.out.println("--");          } finally {
if (persist && !next.isPersisted()) {            next.setPersisted(true);            persisted.add(next);           String ufsPath = mMountTable.resolve(getPath(next)).toString();            UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());            ufs.mkdirs(ufsPath, false);          }
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String methodKey = method + "." + key;           Number n = getNumbers().get(methodKey);           if (n != null) {              return n.doubleValue();           }           String value = getMethodParameter(method, key);           if (StringUtils.isEmpty(value)) {
}      @FixMethodOrder(MethodSorters.DEFAULT)     static class DummySortWithDefault {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
*       * @return the message.       */     @Message(id = 10854, value = "Null stream at index %d")      String nullStream(int index);      /**
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
getMockEndpoint("mock:error").expectedMessageCount(2);         resultEndpoint.expectedBodiesReceivedInAnyOrder("one", "three");          sendMessage("1", "one");          sendMessage("2", "two");
private static final Logger LOG = LoggerFactory.getLogger(Utils.class);  private static final int DEFAULT_HEAP_LIMIT_CAP = 100;   private static final float DEFAULT_YARN_HEAP_CUTOFF_RATIO = 0.8f;   /**
if (CommonUtils.isLocalHost(address) && Configuration            .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils            .isDomainSocketSupported(address)) {         LOG.debug("Creating short circuit output stream for block {} @ {}", blockId, address);          return LocalFilePacketWriter.create(context, address, blockId, options);        } else {         LOG.debug("Creating netty output stream for block {} @ {} from client {}", blockId, address,              NetworkAddressUtils.getClientHostName());          return NettyPacketWriter
LOG.debug("Uploading a dir...");             if (entry != null && !DropboxUploadMode.force.equals(mode)) {                  throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!");              }              if (!dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {
public interface ConsulEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedConsulEndpointProducerBuilder advanced() {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
* @param format a <code>String</code> value.       * @throws ConversionException if unable to create Pattern object.       */     public final void setCommentFormat(String format) {          commentRegexp = Utils.createPattern(format);      }
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTextures(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
public interface BeanValidatorEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedBeanValidatorEndpointBuilder advanced() {
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
URIStatus status = statuses.get(k);        ret[k] = new FileStatus(status.getLength(), status.isFolder(), 3, status.getBlockSizeBytes(),           status.getLastModificationTimeMs(), status.getCreationTimeMs(), null, null, null,            new Path(mAlluxioHeader + status.getPath()));      }      return ret;
consumer.parse(sourceMapContents);          parsedSourceMap = consumer;        } catch (IOException e) {         JSError error =             JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath, e.getMessage());          errorManager.report(error.getDefaultLevel(), error);        } catch (SourceMapParseException e) {         JSError error =             JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath, e.getMessage());          errorManager.report(error.getDefaultLevel(), error);        }      }
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(246);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {System.out.println($ctx.toStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
throw new IllegalArgumentException("Plugin is not associated with this PluginLoader");          }         if (plugin.isEnabled()) {              JavaPlugin jPlugin = (JavaPlugin)plugin;              server.getPluginManager().callEvent(new PluginEvent(Event.Type.PLUGIN_DISABLE, plugin));
for (int i = 0; i < 10; i++) {                   sendDecrease(bulb, 27, bridgeId);                   try {                      Thread.sleep(100);                   } catch (InterruptedException e) {                   }               }
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}     private final class Sl4jCommonLogger implements CommonLogger {          private final Logger logger;
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public Container<T> prefSize (float width, float height) {   prefSize(new Fixed(width), new Fixed(height));    return this;   }
assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();     assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();     assert
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
ZIP_SERVER(0x24,"ZIP_SERVER",null),    SWITCH_BINARY(0x25,"SWITCH_BINARY",ZWaveBinarySwitchCommandClass.class),    SWITCH_MULTILEVEL(0x26,"SWITCH_MULTILEVEL",ZWaveMultiLevelSwitchCommandClass.class),   SWITCH_ALL(0x27,"SWITCH_ALL",ZWaveSwithcAllCommandClass.class),    SWITCH_TOGGLE_BINARY(0x28,"SWITCH_TOGGLE_BINARY",null),    SWITCH_TOGGLE_
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
if (isStatisticsEnabled()) {              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNanos(System.nanoTime() - start);              }              if (getValue) {                  if (oldValueNull) {
@Override      protected void doStop() throws Exception {          if (channel != null) {             LOG.debug("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public void testCacheGet() throws Exception {          final Cache<Object, Object> cache = getTestCache();          final Integer key = 1;         final Integer val = 2;          MockEndpoint mock = getMockEndpoint("mock:result");          mock.expectedMinimumMessageCount(1);          mock.expectedBodiesReceived(val);         mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, true);          mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true); fluentTemplate().withHeader(CaffeineConstants.ACTION, C
try {          if(UserGroupInformation.isSecurityEnabled())           UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab();          long now = Time.now();
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
private void parameterBind(CodeBuilder builder, Class<?>[] interceptorParamTypes) {          int i = 0;          int argNum = targetMethod.getParameterTypes().length;         int interceptorArgNum = interceptorParamTypes.length - 1;          int matchNum = Math.min(argNum, interceptorArgNum);          for (; i < matchNum; i++) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
}      public synchronized ProcessorType getLastInterceptedNode() {         if (routeList == null || routeList.isEmpty()) {              return null;          }          return routeList.get(routeList.size() - 1);
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
DeleteBuffer deleteBuffer = new DeleteBuffer();      UnderFileStatus[] pathsToDelete = listInternal(path, ListOptions.defaults().setRecursive(true));      if (pathsToDelete == null) {       LOG.warn("Unable to delete {} because listInternal returns null", path);        return false;      }      for (UnderFileStatus pathToDelete : pathsToDelete) {
public interface GoogleMailStreamEndpointBuilder              extends                  EndpointConsumerBuilder {          default AdvancedGoogleMailStreamEndpointBuilder advanced() {
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AtomixQueueEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedAtomixQueueEndpointProducerBuilder advanced() {
fakePool.runAll();     assertThat(Thread.currentThread().interrupted()).isTrue();    }    public void testInterrupt_doesNotStopExecution() {
}   @Test  public void userConfigurationJdbcTemplateDependency() {    this.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class))      .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)      .run((context) -> {
public void test_cn_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年5月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
*       * @return the message.       */     @Message(id = 10848, value = "Exception getting result from host %s: %s")      String exceptionAwaitingResultFromHost(String name, String message);      /**
node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");      node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));     assertTrue(node1.isEquivalentToTyped(node2));    }    public void testCheckTreeTypeAwareEqualsSameNull() {
if (description == null) {              description = Description.createTestDescription(getTestClass().getJavaClass(),                      testName(method), method.getAnnotations());             fMethodDescriptions.putIfAbsent(method, description);          }          return description;
}       public final ImmutableList<ObjectType> getOwnImplementedInterfaces() {      return implementedInterfaces;    }
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
@Before      public void setUpAdminObjects() throws NamingException {          server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8280");         server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), "8380");          Assert.assertNotNull(server1Proxy);          Assert.assertNotNull(server2Proxy);      }
if (isStatisticsEnabled()) {              if (result) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNanos(System.nanoTime() - start);              }             statistics.addGetTimeNanos(System.nanoTime() - start);              if (isHit) {                  statistics.increaseCacheHits(1);              } else {
public interface AdvancedKinesisEndpointBuilder              extends                  AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {          default KinesisEndpointBuilder basic() {
future.get();              future.addListener(() -> counter.decrementAndGet(), Runnable::run);          }         assertEquals(counter.get(), 0);      }  }
*       * @return the error message       */     @Message(id = 10834, value = "%s recognizes only %s as children: %s")      String unrecognizedChildren(String parent, String children, String parentSpec);      /**
"order by min(length(p)), user.name";          gen.get().addSnippet( "query-get-members", createCypherSnippet( query ) );          result = engine.execute( query )                 .dumpToString();          assertTrue( result.contains("Engin") );          gen.get()                  .addSnippet( "o-query-get-members",
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
binder,          "druid.realtime.chathandler.type",          Key.get(ChatHandlerProvider.class),         Key.get(ServiceAnnouncingChatHandlerProvider.class)      );      final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(          binder, Key.get(ChatHandlerProvider.class)
final List<MessageListener> messageListeners = resourceAdapterRepository.getMessageListeners(raIdentifier);              if (messageListeners == null || messageListeners.isEmpty()) {                 throw MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(), resourceAdapterName);              }              MessageListener requiredMessageListener = null;
*/  @GwtCompatible(emulated = true)  public class BaseEncodingTest extends TestCase {   public static void assertEquals(byte[] expected, byte[] actual) {      assertEquals(expected.length, actual.length);      for (int i = 0; i < expected.length; i++) {        assertEquals(expected[i], actual[i]);
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
}   public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {   GL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);   }   public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {   GL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x
import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;  import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute; public final class AnsjTokenizer extends Tokenizer {   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);   }
static final DiagnosticType REPORT_PATH_IO_ERROR =        DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR",           "Error writing compiler report to {0}:\n{1}");    /**     * All the aliases in a program form a graph, where each global name is
* @return BlockFace attached to       */      public BlockFace getAttachedFace() {         byte data = (byte) (getData() ^ 0x7);          switch (data) {              case 0x1:
* Advanced builder for endpoint for the Azure Storage Queue Service       * component.       */     public interface AdvancedQueueServiceEndpointBuilder              extends                  AdvancedQueueServiceEndpointConsumerBuilder, AdvancedQueueServiceEndpointProducerBuilder {          default QueueServiceEndpointBuilder basic() {
@Test   public void startServletAndFilter() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();   this.container = factory.getEmbeddedServletContainer(      exampleServletRegistration(), new FilterRegistrationBean(        new ExampleFilter())); assertThat(getResponse("http:
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface DigitalOceanEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedDigitalOceanEndpointBuilder advanced() {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private StringBuilder stringBuilder = new StringBuilder();     public DiagnosticsLogWriterImpl() {          this(false);      }     public DiagnosticsLogWriterImpl(boolean includeEpochTime) {          this.includeEpochTime = includeEpochTime;      }
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
*/   public void sendPairPong(String dstAddr)   {   PairPongMsg pp = new PairPongMsg(getMessageCount(), (byte)0, MaxCulMsgType.PAIR_PONG, (byte) 0, this.srcAddr, dstAddr);    sendMessage(pp);   }
}       private Class<?> findSpi(Class clazz) {          if (clazz.getInterfaces().length <= 1) {               return null;           }
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists.json?cursor=" + cursor, true));      }
while (line != null && line.trim().length() > 0) {                          int p = line.indexOf(':');                          if (p >= 0)                             headers.put(line.substring(0, p).trim().toLowerCase(Locale.US), line.substring(p + 1).trim());                          line = in.readLine();                      }                  }
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
public interface CMISEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCMISEndpointProducerBuilder advanced() {
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create("encoding", ModelType.STRING, true).build();     SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create("file", ModelType.OBJECT, false).              setCorrector(FileCorrector.INSTANCE).              setValidator(new FileValidator()).              build();
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
filterRegistrations.addAll(       initializers.getOrDefault(Filter.class, Collections.emptyList()));     String filtersInfo = filterRegistrations.stream()      .map(FilterRegistrationBean.class::cast)      .map(FilterRegistrationBean::toString)       .collect(Collectors.joining(", "));     ServletContextInitializerBeans.logger       .debug("Mapping filters: " + filtersInfo);
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
}     public boolean hasChildRecursive (String name) {     if (children == null) return false;      return getChildByNameRecursive(name) != null;     }
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
MapDifference<String, PropertyAccessKind> sourceDifference =                Maps.difference(                    compiler.getSourceGetterAndSetterProperties(),                   GatherGetterAndSetterProperties.gather(compiler, mainRoot));            assertWithMessage("Pass did not update new source getters / setters")                .that(sourceDifference.entriesOnlyOnRight())                .isEmpty();
final Class<?> type = field.getType();    final String name = tableInfo.getColumnName(field);   final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());    final Column column = field.getAnnotation(Column.class);    if (typeSerializer != null) {
int port = p;          if (port == -1) {              final String protocol = uri.getScheme().toLowerCase();             if ("http".equals(protocol) || "ws".equals(protocol)) {                  port = 80;             } else if ("https".equals(protocol) || "wss".equals(protocol)) {                  port = 443;              } else {                  throw new IllegalArgumentException("Unknown protocol: " + protocol);
public interface AdvancedFlinkEndpointBuilder              extends                  EndpointProducerBuilder {          default FlinkEndpointBuilder basic() {
public interface AdvancedGoogleDriveEndpointBuilder              extends                  AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {          default GoogleDriveEndpointBuilder basic() {
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
this.targetBeanType = targetClass;      }     public void setApplicationContext(ApplicationContext context) {          this.context = context;      }
long size = 0;        for (Cell c : results) {         size += CellUtil.estimatedHeapSizeOfWithoutTags(c);        }        return size;
*       * @return the message.       */     @Message(id = 10838, value = "Unexplained failure")      String unexplainedFailure();      /**
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
}    @Test public void eolComment() throws IOException {     javaWriter.emitSingleLineComment("foo"); assertCode("    }
*      * @param queueName Name of the job queue.     */   @InterfaceAudience.Private   public void setQueueName(String queueName) {      super.setQueueName(queueName);    }
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Order.class),          @ApiResponse(code = 400, message = "Invalid Order", response = Void.class) })     Order placeOrder(@Valid Order body) throws Exception;  }
else    {    ISeq s = RT.seq(sizeOrSeq);   int size = RT.count(s);    int[] ret = new int[size];    for(int i = 0; i < size && s != null; i++, s = s.next())     ret[i] = ((Number) s.first()).intValue();
public interface AdvancedPgEventEndpointBuilder              extends                  AdvancedPgEventEndpointConsumerBuilder, AdvancedPgEventEndpointProducerBuilder {          default PgEventEndpointBuilder basic() {
}          }         }        catch (Exception t) {          if (log.isDebugEnabled()) {           log.debug("Could not set field " + field.getName() + " to null in class "                   + clazz.getName(), t);
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /**
try {          statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);        } finally {         endFunction("get_column_statistics_by_table: ", statsObj != null, null);        }        return statsObj;      }
*       * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (setter != null) {                      if (paramType == null) {                      paramType = setter.getParameterType(0);                       }                      for (final Annotation fieldAnnotation : setter.annotations()) {
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
public interface AdvancedXQueryEndpointBuilder              extends                  AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {          default XQueryEndpointBuilder basic() {
public interface GoraEndpointBuilder              extends                  GoraEndpointConsumerBuilder, GoraEndpointProducerBuilder {          default AdvancedGoraEndpointBuilder advanced() {
* @see <a href="http:      */      public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json", true));      }      /**
}      private static ModelControllerClient createClient2() throws UnknownHostException {         return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddressNode1()),                  TestSuiteEnvironment.getServerPort() + 300,                  Authentication.getCallbackHandler());      }
assertEquals(1, serverStub.callsToProcessBufferInserter);          assertNull(lm.getField("id"));          assertEquals("foo", lm.getField("_something"));         assertEquals(5, lm.getFields().size());      }      @Test
sum += mBuf.get(pId % 16);            if (DEBUG_MODE) {             buf.DATA.order(ByteOrder.nativeOrder()).flip();              CommonUtils.printByteBuffer(LOG, buf.DATA);            }            buf.DATA.clear();
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @throws IOException     */    public void put(Put put, Integer lockid) throws IOException {     this.put(put, lockid, put.getWriteToWAL());    }    /**
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* to <code>vcap.application.*</code> in a fairly obvious way, and the VCAP_SERVICES   * object is unwrapped so that it is a hash of objects with key equal to the service   * instance name (e.g. "mysql" in the example above), and value equal to that instances  * properties, and then flattened in the smae way. E.g.   *    * <pre>   * vcap.application.instance_id: 2ce0ac627a6c8e47e936d829a3
private final String secret;    private final String percentEncodedKey;   public ConsumerKey(String key, String secret) {      this.key = key;      this.secret = secret;      this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);
String uri = getScpUri() + "?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hallo Welt", Exchange.FILE_NAME, "welt.txt");         Thread.sleep(800);          File file = new File(getScpPath() + "/welt.txt");          assertFileExists(file.getAbsolutePath());
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(638);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
if (timeout == null) {                  println(lock.tryLock());              } else {                 long time = Long.parseLong(timeout);                  try {                      println(lock.tryLock(time, TimeUnit.SECONDS));                  } catch (InterruptedException e) {
public SourceOperator createOperator(DriverContext driverContext)          {              checkState(!closed, "Factory is already closed");             OperatorContext operatorContext = driverContext.addOperatorContext(operatorId, FilterAndProjectOperator.class.getSimpleName());              return new ScanFilterAndProjectOperator(                      operatorContext,                      sourceId,
private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();    private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();    private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();   private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 40000;    private static final boolean DEFAULT_USE_COMBINER = false;    private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;    private static final
asyncWriteFuture = new Future<?>[threads];              for (int i = 0; i < threads; i++) {                  notifierFuture[i] = bc.getExecutorService().submit(getBroadcastHandler());                 asyncWriteFuture[i] = bc.getAsyncWriteService().submit(getAsyncWriteHandler(uniqueWriteQueue));              }          } else {              notifierFuture[0] = bc.getExecutorService().submit(getBroadcastHandler());
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));              final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();              if (setop != null) {                 logger.debug("    " + setop.getJavaName() + "\n                " + setop.getIDLName());                  final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);                 beanMethodMap.put(setop.getIDLName(), new SkeletonStrategy(realSetmethod));              }          }
{11, 6.5f},                  {12, 5.5f},                  {13, 3.5f},                 {14, 2.0f},                  {15, 2.5f},                  {16, 2.0f},          });
public static void format(Configuration conf) throws IOException {     format(conf, true);    }    static NameNodeMetrics metrics;
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
taken = watch.stop();          assertEquals(taken, watch.taken());         assertTrue("Should take approx 200 millis, was: " + taken, taken > 150);      }      public void testStopWatchRestart() throws Exception {
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
RecipientListProcessor rlp = new RecipientListProcessor(exchange.getContext(), producerCache, iter, getAggregationStrategy(),                                                                  isParallelProcessing(), getExecutorService(), isStreaming(), isStopOnException(), getConnectTimeout()) {              @Override             protected ExecutorService createAggregateExecutorService(String name) {                  if (aggregateExecutorService == null) {                      aggregateExecutorService = super.createAggregateExecutorService("RecipientList-AggregateTask");
ConceptNumeric cn = new ConceptNumeric(c);     for (ConceptSet cSet : cn.getConceptSets()) {     Assert.assertEquals(cn, cSet.getConcept());     }    }
*       * @param folder the location       */     public synchronized static void configureExternalStaticResources(String folder) {          Assert.notNull(folder, "'folder' must not be null");          if (!externalStaticResourcesSet) {
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple));    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param task          the task.       */      @LogMessage(level = Level.ERROR)     @Message(id = 10808, value = "%s caught %s waiting for task %s")      void caughtExceptionWaitingForTask(String className, String exceptionName, String task);      /**
return new JedisClusterCommand<Long>(connectionHandler, maxAttempts) {        @Override        public Long execute(Jedis connection) {         return connection.pexpireAt(key, millisecondsTimestamp);        }      }.runBinary(key);    }
Set<E> edgesConnecting(N node);       N adjacentNode(E edge);    /**     * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.
command = new DeleteCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if (args[i].equals("roll")) {          String keyName = "--help";
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
@Category(QuickTest.class)  public class AdvancedSemaphoreTest extends HazelcastTestSupport {     @Test(timeout = 120000)      public void testSemaphoreWithFailures() throws InterruptedException {          final int k = 4;         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);          final HazelcastInstance[] instances = factory.newInstances();          final ISemaphore semaphore = instances[k].getSemaphore("test");
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);   }
/*  * Copyright 2012-2018 the original author or authors.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.
final String key, value;   Parameter(String key, String value) {      this.key = key;      this.value = value;    }
} catch (IOException e) {       logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);      } finally {      IOUtils.closeQuietly(is);      }     }    } catch (NotInitializedException e) {
for(int i = 0; i < fields.size(); ++i) {            StructField left = other.get(i);            StructField right = fields.get(i);           if (!(left.getFieldName().equalsIgnoreCase(right.getFieldName()) &&                  left.getFieldObjectInspector().equals                      (right.getFieldObjectInspector()))) {              return false;
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
static private final int BIG_ENOUGH_INT = 16 * 1024;    static private final double BIG_ENOUGH_FLOOR = BIG_ENOUGH_INT;   static private final double BIG_ENOUGH_CEIL = BIG_ENOUGH_INT + 0.5;    static public int floor (float x) {     return (int)(x + BIG_ENOUGH_FLOOR) - BIG_ENOUGH_INT;
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getMentions(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, paging.asPostParameterList(), true));      }
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);              if (hitCount == 1) {                  statistics.increaseCacheHits(hitCount);              } else {
assertEquals(usedTimestamp, (Double) lm.getField("timestamp"), 1e-8);          assertEquals("ü", lm.getField("_lol_utf8"));          assertEquals("bar", lm.getField("_foo"));         assertEquals(11, lm.getFields().size());      }      @Test
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));          assertTrue(byteBuf.release());         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
}    factory.setInitializers(Arrays.asList(initializers[2], initializers[3]));    factory.addInitializers(initializers[4], initializers[5]);   this.container = factory.getEmbeddedServletContainer(initializers[0],      initializers[1]);    InOrder ordered = inOrder((Object[]) initializers);    for (ServletContextInitializer initializer : initializers) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Object convertedValue;      if (value.scale() == 0) {        logger.trace("found no fractional part");       convertedValue = value.doubleValue();      } else {        logger.trace("found fractional part");        convertedValue = value.doubleValue();
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
}    public boolean touchDragged (int screenX, int screenY, int pointer) {    Object[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (((InputProcessor)items[i]).touchDragged(screenX, screenY, pointer)) return true;     } finally {      processors.end();     }
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private static class MockPrincipalWrapper extends HttpServletRequestWrapper {   MockPrincipalWrapper(HttpServletRequest request) {     super(request);    }
"CALL JSCompiler_StaticMethods_bar = null",          "CALL JSCompiler_StaticMethods_baz = null");     static final ImmutableList<String> EXPECTED_TYPE_CHECKING_ON =         ImmutableList.of(          "FUNCTION a = function (new:a): undefined",          "NAME JSCompiler_StaticMethods_foo$self = a",          "FUNCTION JSCompiler_StaticMethods_foo = function (a): number",
public interface GridFsEndpointBuilder              extends                  GridFsEndpointConsumerBuilder, GridFsEndpointProducerBuilder {          default AdvancedGridFsEndpointBuilder advanced() {
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
long taken = watch.stop();          assertEquals(taken, watch.taken());         assertTrue("Should take approx 200 millis, was: " + taken, taken > 150);      }      public void testStopWatchNotStarted() throws Exception {
*/  public class InvokerTreeCache<T> {     private TreeNode<T> tree;      public TreeNode buildTree() {          tree = new TreeNode<>();
public interface AdvancedCxfEndpointBuilder              extends                  AdvancedCxfEndpointConsumerBuilder, AdvancedCxfEndpointProducerBuilder {          default CxfEndpointBuilder basic() {
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface GangliaEndpointBuilder extends EndpointProducerBuilder {          default AdvancedGangliaEndpointBuilder advanced() {              return (AdvancedGangliaEndpointBuilder) this;          }
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), endsWith("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
*/    public void compact(final String tableNameOrRegionName)    throws IOException, InterruptedException {     compact(Bytes.toBytes(tableNameOrRegionName));    }    /**
public interface AdvancedCaffeineLoadCacheEndpointBuilder              extends                  AdvancedCaffeineLoadCacheEndpointConsumerBuilder, AdvancedCaffeineLoadCacheEndpointProducerBuilder {          default CaffeineLoadCacheEndpointBuilder basic() {
public static JavadocTagInfo fromName(final String name)      {          if (name == null) {             throw new IllegalArgumentException("the name is null");          }          final JavadocTagInfo tag = NAME_TO_TAG.get(name);
void delta() {}          void epsilon() {}      }     static class Super {          void testOne() {}      }     static class Sub extends Super {          void testTwo() {}      }
processor.registerWebSocketHandler("/*", new EchoHandler());          AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();         processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));          processor.invokeWebSocketProtocol(w, "yoWebSocket");          assertEquals(b.toString(), "yoWebSocket");
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
} else if (e instanceof TimeoutException) {      logger.debug("[{}]: Websocket timeout error", connection.getHost());     } else {     logger.debug("[{}]: Websocket error: {}", connection.getHost(), e.getMessage());     }    }
public interface TwilioEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedTwilioEndpointProducerBuilder advanced() {
*     * @param toCompare The element to set as the comparison reference.    */  public abstract void setReference(T toCompare);   /**    * Checks, whether the given element is equal to the element that has been set as the comparison
}      private static String dateAsString(long value) {         if (value == 0 || value == 0) {              return "";          }          return new SimpleDateFormat(TIMESTAMP_FORMAT).format(value);
int numTimeslots = (int) this.timeWindow.getWindowRangeCount();          List<P> points = new ArrayList<>(numTimeslots);          for (long timestamp : this.timeWindow) {             points.add(uncollectedPointCreator.createUnCollectedPoint(timestamp));          }          return points;      }
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
else      ret = RT.list(Compiler.QUOTE, form);    if(form instanceof IObj && ((IObj) form).meta() != null && !(form instanceof IObj))      {      IPersistentMap newMeta = ((IObj) form).meta().without(RT.LINE_KEY);
} else if (outputFS instanceof DistributedFileSystem) {          loadSpec = ImmutableMap.<String, Object>of(              "type", "hdfs",             "path", indexOutURI.toString()          );        } else {          throw new ISE("Unknown file system[%s]", outputFS.getClass());
static final SecurityContext NONE = new SecurityContext() {    @Override    public Principal getPrincipal() {
}    public boolean keyDown (int keycode) {    Object[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (((InputProcessor)items[i]).keyDown(keycode)) return true;     } finally {      processors.end();     }
private static final String ARCHIVE_NAME = "stateless-ejb2-failover-test";      private static final String ARCHIVE_NAME_DD = "stateless-ejb2-failover-dd-test";     private static final Integer PORT_2 = 11000;      private static final String HOST_2 = System.getProperty("node1");      private static final String REMOTE_PORT_PROPERTY_NAME = "remote.connection.default.port";      private static final String REMOTE_HOST_PROPERTY_NAME = "remote.connection.default.host";
}    @Override   public N removeOutEdge(E edge) {      N node = super.removeOutEdge(edge);      Multiset<N> successors = getReference(successorsReference);      if (successors != null) {
*/      public ResponseList<Status> getPublicTimeline(long sinceID) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() +                  "statuses/public_timeline.json", null, new Paging((long) sinceID).asPostParameterList(Paging.S)                  , false));      }
}    }   private LinkedHashMap<String, ASTNode> doPhase1GetAggregationsFromSelect(        ASTNode selExpr) {     LinkedHashMap<String, ASTNode> aggregationTrees = new LinkedHashMap<String, ASTNode>();      for (int i = 0; i < selExpr.getChildCount(); ++i) {        ASTNode sel = (ASTNode) selExpr.getChild(i).getChild(0);        doPhase1GetAllAggregations(sel, aggregationTrees);
@Category(QuickTest.class)  public class QueryEntryTest extends HazelcastTestSupport {     private static volatile SerializationService serializationService;      @Before      public void before() {
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/subscriptions.json?cursor=" + cursor, true));      }
*/  public class RoutePolicyProcessor extends DelegateAsyncProcessor {     private static final Log LOG = LogFactory.getLog(RoutePolicyProcessor.class);      private final List<RoutePolicy> routePolicies;      private Route route;
public void addAll (long[] array, int offset, int length) {     long[] items = this.items;     int sizeNeeded = size + length;    if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;    }
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should exclude not allowed locales    * @should cache results for a user    */  public List<Locale> getSearchLocales();   /**    * Used by Spring to set the http client for accessing the openmrs implementation service
.retInt();      }     private static void generatePositionEqualsRowMethod(              ClassDefinition classDefinition,              CallSiteBinder callSiteBinder,              List<Type> joinChannelTypes,
*  * @see java.lang.Object    */  public abstract int hash(T record);   /**    * Sets the given element as the comparison reference for future calls to
*  * @see    */  public abstract int compareToReference(TypeComparator<T> referencedComparator);   /**    * Compares two records in serialized from. The return value indicates the order of the two in the same way
}   public SortedMap<String, Timer> getTimers(MetricFilter filter) {   return adaptMetrics(Timer.class, reg.getTimers(transformFilter(filter)));   }   private io.dropwizard.metrics.MetricFilter transformFilter(final MetricFilter filter) {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
{      LogLevelAdjuster.register();     if (args.length != 4) {        log.info("Usage: ExecutorMain <task.json> <status.json>");        System.exit(2);      }
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();     assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();     assert
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
return additionalReplacements;    }   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
case CompactObjectOutputStream.TYPE_THIN_DESCRIPTOR:              String className = readUTF();              Class<?> clazz = classResolver.resolve(className);             return ObjectStreamClass.lookup(clazz);          default:              throw new StreamCorruptedException(                      "Unexpected class descriptor type: " + type);
public void addAll (char[] array, int offset, int length) {     char[] items = this.items;     int sizeNeeded = size + length ;    if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;    }
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      public void process(Node externs, Node root) {       logger.fine(name);        startPass(name);        processInternal(externs, root);        endPass(externs, root);
catch (final ClassNotFoundException ex) {             throw new RuntimeException("Error during multilang processing", ex);          }          return null;
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc("title"), 1, 2);          assertThat(page1.pagination().getCount()).isEqualTo(2);         assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5);          assertThat(page1.delegate())                  .extracting("title")                  .containsExactly("hello2", "hello3");
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface ServerEndpointBuilder              extends                  ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {          default AdvancedServerEndpointBuilder advanced() {
if (name == null)     return null;    try {    return Class.forName(name, true, Thread.currentThread().getContextClassLoader());    } catch (ClassNotFoundException e) {     return null;    }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, true));      }
private static TesterRequirements buildTesterRequirements(        Annotation testerAnnotation)        throws ConflictingRequirementsException {     Class<? extends Annotation> annotationClass = testerAnnotation.annotationType();      final Feature<?>[] presentFeatures;      final Feature<?>[] absentFeatures;      try {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertEquals(bytes, encoding.decode(encoded));    }   private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {      try {        encoding.decode(cannotDecode);        fail("Expected IllegalArgumentException");
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
*   * @author Jesse Wilson   */ final class JavaWriter implements Closeable {    private static final Pattern TYPE_PATTERN = Pattern.compile("(?:[\\w$]+\\.)*([\\w$]+)");    private static final String INDENT = "  ";
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {          long totalMessages = 50;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
float b = Float.parseFloat(reader.getAttributeValue(null, "b"));                      float alpha = Float.parseFloat(reader.getAttributeValue(null, "a"));                      if(r < 0 || g < 0 || b < 0){                          r = g = b = 0;                         alpha = 0;                      }                      edge.setR(r);
final CompletableFuture<KvStateLocation> cachedFuture = lookupCache.get(cacheKey);    if (!forceUpdate && cachedFuture != null && !cachedFuture.isCompletedExceptionally()) {    LOG.debug("Retrieving location for state={} of job={} from the cache.", jobId, queryableStateName);     return cachedFuture;    }    final KvStateLocationOracle kvStateLocationOracle = proxy.getKvStateLocationOracle(jobId);    if (kvStateLocationOracle != null) {    LOG.debug("Retrieving location for state={} of job={} from the key-
public interface IgniteMessagingEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIgniteMessagingEndpointProducerBuilder advanced() {
* @see <a href="http:       */      public ResponseList<Status> getMentions() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, true));      }
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json", true));      }      /**
}    private void getTiles (int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {    TiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get("walls");     rectPool.freeAll(tiles);     tiles.clear();     for (int y = startY; y <= endY; y++) {
@XmlEnum(String.class)  public enum WaitForTaskToComplete {     Newer, IfReplyExpected, Always  }
failureCause.compareAndSet(null, toFailure(throwable));          boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());          if (failed) {             log.debug(throwable, "Query %s failed", queryId);          }          else {              log.debug(throwable, "Failure after query %s finished", queryId);
private String charset;      private int bpos;     XMLStreamReaderInputStream(XMLStreamReader reader, String charset, XMLOutputFactory outfactory) {          this.reader = reader;          this.buffer = new byte[BUFFER_SIZE];          this.chunk = new TrimmableByteArrayOutputStream();
this.password = password;    }   public synchronized boolean isAutoCommit() {      return autoCommit;    }   public synchronized void setAutoCommit(boolean autoCommit) {      this.autoCommit = autoCommit;    }
public void test_cn() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016-05-06\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
public interface AdvancedFtpsEndpointBuilder              extends                  AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {          default FtpsEndpointBuilder basic() {
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (TACHYON_STREAMING_READ) {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            InputStream is = file.getInStream(ReadType.CACHE);            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
private void registerWebTestClient(ConfigurableApplicationContext context) {    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();    if (beanFactory instanceof BeanDefinitionRegistry) {    registerWebTestClient((BeanDefinitionRegistry) beanFactory);    }   }
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public Container<T> prefSize (float width, float height) {   prefSize(new Fixed(width), new Fixed(height));    return this;   }
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
* @see * @see NormalizableKey    */  public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;   /**    * Reads the record back while de-normalizing the key fields. This must only be used when
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface SjmsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSjmsEndpointProducerBuilder advanced() {
private final Endpoint endpoint;          private final ProducerTemplate producerTemplate;         CamelClient(CamelContext camelContext) { this.endpoint = camelContext.getEndpoint("netty:tcp:              this.producerTemplate = camelContext.createProducerTemplate();          }
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
status.setHealthReport("sick");      status.setIsNodeHealthy(false);      node.handle(new RMNodeStatusEvent(node.getNodeID(), status,         new ArrayList<ContainerStatus>(), null, null));      Assert.assertEquals(NodeState.UNHEALTHY, node.getState());      return node;    }
topic.publish(message);          topic.removeMessageListener(messageListener);          topic.publish(message);         assertFalse(latch.await(10000, TimeUnit.MILLISECONDS));      }      @AfterClass
final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc("title"), 2, 2);          assertThat(page2.pagination().getCount()).isEqualTo(2);         assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5);          assertThat(page2.delegate())                  .extracting("title")                  .containsExactly("hello4", "hello5");
List<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();     if(configList == null || configList.size() == 0) {       break;      }
}      @DELETE     @Path(PATH_RELATIONSHIP_INDEX_ID)      public Response deleteFromRelationshipIndex( @PathParam("indexName") String indexName,                                                   @PathParam("key") String key, @PathParam("value") String value,                                                   @PathParam("id") long id )
}   catch(LispReader.ReaderException e)    {   throw new CompilerException(sourcePath, e.line, e.getCause());    }   finally    {
@Override      public String toString() {         return end + " End Message Interceptor";      }  }
*/    public void closeRegion(final String regionname, final String serverName)    throws IOException {     closeRegion(Bytes.toBytes(regionname), serverName);    }    /**
boolean generic() default false;     boolean injvm() default true;      boolean check() default true;
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public KeyIterator call() throws StorageException {                      KeyIterator ki = backend.getKeys(query, txh);                      if (null != p) {                         return MetricInstrumentedIterator.of(ki, p + "." + M_GET_KEYS + "." + M_ITERATOR);                      } else {                          return ki;                      }
*       * @return the message.       */     @Message(id = 10852, value = "Caught %s storing deployment content -- %s")      String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);      /**
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().shutdown();              }          };
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
HttpServletResponse response) throws ServletException, IOException {     HttpSession httpSession = request.getSession();    String ipAddress = request.getRemoteAddr();     Integer loginAttempts = loginAttemptsByIP.get(ipAddress);     if (loginAttempts == null)      loginAttempts = 1;
}    public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {    return bulkInsertableMap != null && bulkInsertableMap.containsKey(persistentObjectClass);    }
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /**
@Override    public Annotation createFromFile(File file) throws IOException {     return createFromFile(file.getAbsolutePath());    }    @Override
*/   public Vector2 getLocalAnchorB () {   jniGetLocalAnchorB(addr, tmp);    localAnchorB.set(tmp[0], tmp[1]);    return localAnchorB;   }
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*/      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() +                  "statuses/public_timeline.json", false));      }
outResult.add(cell);              count++;              totalBytesRead += CellUtil.estimatedSerializedSizeOf(cell);             totalHeapSize += CellUtil.estimatedHeapSizeOfWithoutTags(cell);              if (totalBytesRead > maxRowSize) {                throw new RowTooBigException("Max row size allowed: " + maxRowSize                + ", but the row is bigger than that.");
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_kr_4() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년05월06일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
public interface IgniteCacheEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIgniteCacheEndpointProducerBuilder advanced() {
warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\n');                          break;                      case HINT:                         hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\n');                          break;                  }              }
SessionManager sessionManager = manager.getDeployment().getSessionManager();    int sessionTimeout = (getSessionTimeout() == null || getSessionTimeout().isZero()      || getSessionTimeout().isNegative() ? -1       : (int) getSessionTimeout().getSeconds());    sessionManager.setDefaultSessionTimeout(sessionTimeout);    return manager;   }
private static Method updateByteBuffer(Checksum checksum) {          try {              Method method = checksum.getClass().getDeclaredMethod("update", ByteBuffer.class);             method.invoke(method, ByteBuffer.allocate(4));              return method;          } catch (Throwable ignore) {              return null;
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
public static File getCsvLogDir(Map stormConf) {          String csvMetricsLogDirectory = Utils.getString(stormConf.get(Config.STORM_DAEMON_METRICS_REPORTER_CSV_LOG_DIR), null);          if (csvMetricsLogDirectory == null) {             csvMetricsLogDirectory = ConfigUtils.absoluteStormLocalDir(stormConf);              csvMetricsLogDirectory = csvMetricsLogDirectory + ConfigUtils.FILE_SEPARATOR + "csvmetrics";          }          File csvMetricsDir = new File(csvMetricsLogDirectory);
AlluxioURI src = new AlluxioURI("/file");      AlluxioURI dst = new AlluxioURI("/file2");      RenameOptions renameOptions = RenameOptions.defaults();     Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst, renameOptions);      mFileSystem.rename(src, dst, renameOptions);     Mockito.verify(mFileSystemMasterClient).rename(src, dst, renameOptions);    }    /**
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    private void getTestHelper(TachyonFS tfs) throws IOException {     int fileId = tfs.createFile(new TachyonURI("/root/testFile1"));      Assert.assertEquals(3, fileId);     Assert.assertNotNull(tfs.getFile(fileId));    }    @Test
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
"1: " + getCheckMessage(MSG_KEY_MISMATCH),          };         verify(checkConfig,                 getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java"),                 expected);      }      @Test
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface RestletEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedRestletEndpointProducerBuilder advanced() {
new JobTokenSecretManager();    public static final String SHUFFLE_PORT_CONFIG_KEY = "mapreduce.shuffle.port";   public static final int DEFAULT_SHUFFLE_PORT = 11000;    public static final String SUFFLE_SSL_FILE_BUFFER_SIZE_KEY =      "mapreduce.shuffle.ssl.file.buffer.size";
public interface AdvancedServiceNowEndpointBuilder              extends                  EndpointProducerBuilder {          default ServiceNowEndpointBuilder basic() {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.trace("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null ? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.trace("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
* A {@link TimeoutException} raised by {@link WriteTimeoutHandler} when no data   * was written within a certain period of time.   */ public final class WriteTimeoutException extends TimeoutException {      private static final long serialVersionUID = -144786655770296065L;
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
simpleRpcEndpoint.shutDown();   CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture();
import java.io.IOException;  public class JsonRecordHiveMapper implements HiveMapper {     private static final Logger LOG = LoggerFactory.getLogger(JsonRecordHiveMapper.class);      private Fields columnFields;      private Fields partitionFields;      private String timeFormat;
public void testBasicExtractionWithCutStrategyCanOverwriteSameField() throws Exception {          Message msg = new Message("The short message", "TestUnit", Tools.getUTCTimestampWithMilliseconds());         SplitAndIndexExtractor x = new SplitAndIndexExtractor("foo", "foo", Extractor.CursorStrategy.CUT, "message", "message", config(" ", 0), "foo", noConverters(), Extractor.ConditionType.NONE, null);          x.runExtractor(new GraylogServerStub(), msg);         assertEquals("short message", msg.getField("message"));      }     
try {       bytes = input.read(buffer, index, 4096);      } catch (Exception e) {      throw new GdxRuntimeException("Failed to read Vorbis.", e);      }      if (bytes == 0 && i < 2) {       throw new GdxRuntimeException("End of file before finding all Vorbis headers.");
, (args = args.rest()).first()        , args.rest());     case 13:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface IrcEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIrcEndpointProducerBuilder advanced() {
public interface AdvancedTwitterDirectMessageEndpointBuilder              extends                  AdvancedTwitterDirectMessageEndpointConsumerBuilder, AdvancedTwitterDirectMessageEndpointProducerBuilder {          default TwitterDirectMessageEndpointBuilder basic() {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
rel.setPersonA(personA);     rel.setPersonB(personB);     rel.setRelationshipType(relType);    ps.saveRelationship(rel);    }    public void voidRelationship(Integer relationshipId, String voidReason) {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();          String label = sourceEdgeData.getLabel();         if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {              label = sourceEdgeTextData.getText();          } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {              label = null;
}    private void renderCached () {    cache5.setColors(red);     cache5.draw(spriteBatch);     cache1.draw(spriteBatch);
}   @Test  void testHealth() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);          }          return result;      }
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      private void initDic() {         dic.buildRouterChain();      }      @Test()
MockEndpoint bar = getMockEndpoint("mock:bar");          bar.expectedMinimumMessageCount(1);         bar.setResultWaitTime(1000);          template.sendBody("seda:foo", "A");          template.sendBody("seda:foo", "B");
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
postAppend(entry, EnvironmentEdgeManager.currentTime() - start);        } catch (Exception e) {         LOG.fatal("Could not append. Requesting close of wal", e);          requestLogRoll();          throw e;        }
StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort);    env.enableCheckpointing(500);    env.setParallelism(parallelism);   env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));    env.getConfig().disableSysoutLogging();    env.setBufferTimeout(0);
config.processOpts();          config.preprocessSwagger(swagger);          config.additionalProperties().put("generatedDate", DateTime.now().toString());         config.additionalProperties().put("generatorClass", config.getClass().getName());          config.additionalProperties().put("inputSpec", config.getInputSpec());          if (swagger.getVendorExtensions() != null) {              config.vendorExtensions().putAll(swagger.getVendorExtensions());
* Advanced builder for endpoint for the Kubernetes Persistent Volume       * component.       */     public interface AdvancedKubernetesPersistentVolumesEndpointBuilder              extends                  EndpointProducerBuilder {          default KubernetesPersistentVolumesEndpointBuilder basic() {
String[] properties = bindingConfig.split(" ");          if (properties.length > 3 && properties[length - 1] instanceof BindingConfigParseException) {               logger.error("Wrong number of arguments (" + properties.length + ") in configuration string '"                       + bindingConfig + "'");               throw new BindingConfigParseException("Wrong number of agruments (" + properties.length
.retInt();      }     private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)      {          MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), "getSizeInBytes", type(long.class));
"function f() {goog.asserts.assertInstanceof(this, Error);}");    }   private static String config(String rule, String message, String... fields) {      String result = "requirement: {\n"          + "  type: CUSTOM\n"          + "  java_class: '" + rule + "'\n";
getMockEndpoint("mock:test.before.1").expectedMessageCount(10);          getMockEndpoint("mock:test.before.2").expectedMessageCount(10);         getMockEndpoint("mock:test.after.1").expectedMessageCount(10);          getMockEndpoint("mock:test.after.2").expectedMessageCount(10);
state = MachineState.RUNNING;              }             this.startTime = Time.currentTimeMillis();              this.newAssignment = newAssignment;              this.pendingLocalization = null;              this.pendingDownload = null;
public interface SqsEndpointBuilder              extends                  SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {          default AdvancedSqsEndpointBuilder advanced() {
return entry;          default:           throw new SourceMapParseException(                "Unexpected number of values for entry:" + entryValues);        }      }
}      public ILock getLock(Object key) {         if (key == null) {              throw new NullPointerException("Retrieving a lock instance with a null key is not allowed!");          }          return getDistributedObject(LockService.SERVICE_NAME, node.getSerializationService().toData(key));
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Before      public void setUpAdminObjects() throws NamingException {          server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8280");         server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), "8380");          Assert.assertNotNull(server1Proxy);          Assert.assertNotNull(server2Proxy);      }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);   }
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*/      public T build(ConfigurationSourceProvider provider, String path) throws IOException, ConfigurationException {          try (InputStream input = provider.open(checkNotNull(path))) {             final JsonNode node = mapper.readTree(yamlFactory.createParser(input));              return build(node, path);          }      }
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple));    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
t5.setTaskClass(SampleTask5.class.getName());     schedulerService.scheduleTask(t5);    Thread.sleep(2000);     assertEquals(Arrays.asList("INIT-START-5", "INIT-END-5", "IN EXECUTE"), outputForInitExecSync);    }
if (pollFuture != null && !pollFuture.isCancelled())     pollFuture.cancel(false);   logger.trace("rapidRefreshFuture scheduleing for {} millis", millis);    pollFuture = pollService.scheduleAtFixedRate(new Runnable() {     @Override
if (tiled != null) return tiled;     Drawable drawable = optional(name, Drawable.class);    if (drawable != null) {      if (!(drawable instanceof TiledDrawable)) {       throw new GdxRuntimeException("Drawable found but is not a TiledDrawable: " + name + ", "        + drawable.getClass().getName());      }     return (TiledDrawable)drawable;     }     tiled = new TiledDrawable(getRegion(name));
* @param cause the cause of the error.       */      @LogMessage(level = Level.WARN)     @Message(id = 10806, value = "Caught exception closing input stream")      void caughtExceptionClosingInputStream(@Cause Throwable cause);      /**
*  *  @see java.util.Comparator    */  public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;
public void read(final Kryo kryo, final Input input) {   this.jobID = kryo.readObject(input, JobID.class);    this.jobName = input.readString();
if (getColumnClass(counter) == ParseTreeTableModel.class) {                          final MouseEvent mouseEvent = (MouseEvent) event;                          final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),                                 mouseEvent.getWhen(), mouseEvent.getModifiers(),                                  mouseEvent.getX() - getCellRect(0, counter, true).x,                                  mouseEvent.getY(), mouseEvent.getClickCount(),                                  mouseEvent.isPopupTrigger());
@Test      public void async_whenOperationTimeout() {         int callTimeout = 5000;          Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeout);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);
org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;      if (cpHost != null) {       snapshotPOJO = ProtobufUtil.createSnapshotDesc(snapshot);        cpHost.preRestoreSnapshot(snapshotPOJO, snapshotTableDesc);      }
new ModelNode[] { removeDwm, removeContext });              mcc.execute(compositeOp);              ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,                     CONTAINER_0.equals(containerId) ? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),                     serverPort);          }          protected abstract Policy getPolicy();
checkConfig.addAttribute("allowThrowsTagsForSubclasses", "true");          checkConfig.addAttribute("allowUndeclaredRTE", "true");          final String[] expected = {};         verify(checkConfig, getPath("checks/javadoc/Input_03.java"), expected);      }      @Test
if (msgInfo == null) {              return new SctpMessage(protocolIdentifier, streamIdentifier, unordered, content().duplicate());          } else {             return new SctpMessage(msgInfo, content().duplicate());          }      }
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
new GenericFutureListener<Future<Channel>>() {              @Override              public void operationComplete(Future<Channel> future) throws Exception {                 ctx.writeAndFlush(                          "Welcome to " + InetAddress.getLocalHost().getHostName() +                          " secure chat service!\n");                 ctx.writeAndFlush(                          "Your session is protected by " +                          ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +                          " cipher suite.\n");
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
public interface AdvancedJSR356WebSocketEndpointBuilder              extends                  AdvancedJSR356WebSocketEndpointConsumerBuilder, AdvancedJSR356WebSocketEndpointProducerBuilder {          default JSR356WebSocketEndpointBuilder basic() {
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      public Predicate createPredicate(RouteContext routeContext) {         ExpressionType predicateType = getHandledPredicate();          if (predicateType != null && predicate == null) {              predicate = predicateType.createPredicate(routeContext);          }
Class<?> c = makeClass(className, proceedOnExceptions);          if (c != null) {            if (!classes.add(c)) {             LOG.warn("Ignoring duplicate class " + className);            }          }        }
@Test      public void test_Decode_Error_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());      }     private static void generateConstructor(ClassDefinition classDefinition,              List<Integer> joinChannels,              FieldDefinition sizeField,              List<FieldDefinition> channelFields,
*/      public static SslContextBuilder forServer(              File keyCertChainFile, File keyFile, String keyPassword) {         return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile, keyPassword);      }      private final boolean forServer;
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Files.copy(cnf2Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);     Admin admin = TEST_UTIL.getAdmin();      ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();      admin.updateConfiguration(server);      Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10853, value = "Unexpected initial path key %s")      IllegalStateException unexpectedInitialPathKey(String key);      /**
*/   private void poll() {    if (invalidCredentials || this.myqOnlineData == null) {    logger.trace("Invalid Account Credentials");     return;    }
@Path("timeout")          public String getTimeout() {              try {                 Thread.sleep(5000);              } catch (InterruptedException e) {                  e.printStackTrace();              }
handshaking = false;              handshaken = false;             if (handshakeFuture == null) {                  handshakeFuture = newHandshakeFuture(channel);              }          }
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {           mBuf.putInt(0, k + mWorkerId);            os.write(mBuf.
private static volatile List<String> updateWarnings = null;   /**    * Convenience method to run the changesets using Liquibase to bring the database up to a
* @return first sentence.       */      private static String getFirstSentence(DetailNode ast) {         final StringBuilder result = new StringBuilder(256);          final String periodSuffix = PERIOD + ' ';          for (DetailNode child : ast.getChildren()) {              final String text;
if (mFs.exists(new Path(path))) {            return true;          }         return mFs.mkdirs(new Path(path));        } catch (IOException e) {          cnt ++;          LOG.error(cnt + " : " + e.getMessage(), e);
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
}    @Override   public synchronized String toString() {      if (bpNSInfo == null) {
}   public void glBindTexture (int target, int texture) {   GL.glBindTexture(target, texture);   }   public void glBlendFunc (int sfactor, int dfactor) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedKubernetesPodsEndpointBuilder              extends                  AdvancedKubernetesPodsEndpointConsumerBuilder, AdvancedKubernetesPodsEndpointProducerBuilder {          default KubernetesPodsEndpointBuilder basic() {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertEquals(encoded, encoding.encode(bytes));    }   private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
HRegionInfo mockRegionInfo = Mockito.mock(HRegionInfo.class);      Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);      Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);     Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);      qosFunction.setRegionServer(mockRS);      assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);    }
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public @interface ApiOperation {      String value();      String responseClass() default "ok"; boolean mutiValueResponse() default true;      String notes() default "";      String tags() default "";  }
priorRange = ranges[i];        cumNum = val;      }     long val = histogram.getCount();      if (val - cumNum > 0) {        metricsRecordBuilder.addCounter(            Interns.info(name + "_" + rangeType + "_" + ranges[ranges.length - 1] + "-inf", desc),
result.setFileId(fileInfo.getFileId());      result.setName(fileInfo.getName());      result.setPath(fileInfo.getPath());     result.setUfsPath(fileInfo.getUfsPath());      result.setLength(fileInfo.getLength());      result.setBlockSizeBytes(fileInfo.getBlockSizeBytes());      result.setCreationTimeMs(fileInfo.getCreationTimeMs());
public interface AdvancedSlackEndpointBuilder              extends                  AdvancedSlackEndpointConsumerBuilder, AdvancedSlackEndpointProducerBuilder {          default SlackEndpointBuilder basic() {
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10803, value = "Caught exception awaiting final response from server %s on host %s")      void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);      /**
public interface AdvancedFileEndpointBuilder              extends                  AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {          default FileEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 10864, value = "Error obtaining input stream from URL %s -- %s")      String errorObtainingUrlStream(String url, String message);      /**
final PaginatedList<TestDTO> page1reverse = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.desc("title"), 1, 2);          assertThat(page1reverse.pagination().getCount()).isEqualTo(2);         assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(5);          assertThat(page1reverse.delegate())                  .extracting("title")                  .containsExactly("hello6", "hello5");
}      @SuppressWarnings("ResultOfMethodCallIgnored")     @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = ".*Failing getObject call with " + SC_NOT_FOUND + ".*")      public void testReadNotFound()              throws Exception      {
}   @Configuration  @ConditionalOnEnabledHealthIndicator("diskspace")   public static class DiskSpaceHealthIndicatorConfiguration {    @Bean
* @see <a href="http:       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
public static void format(Configuration conf) throws IOException {     format(conf, true);    }    static NameNodeMetrics metrics;
}      }     private static SSLEngineResult sslReadErrorResult(int err, int bytesConsumed, int bytesProduced) throws SSLException {
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/    public void compact(String tableOrRegionName, String columnFamily)      throws IOException,  InterruptedException {     compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));    }    /**
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassCastException.class))          );      }
*/      public ResponseList<Status> getUserTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json"                  , null, paging.asPostParameterList(), true));      }
if (mConnected) {        try {         if (mHeartbeat != null && mHeartbeatExecutor != null) {            mHeartbeatExecutor.heartbeat();          }          mProtocol.getTransport().close();
public interface AdvancedKubernetesNamespacesEndpointBuilder              extends                  AdvancedKubernetesNamespacesEndpointConsumerBuilder, AdvancedKubernetesNamespacesEndpointProducerBuilder {          default KubernetesNamespacesEndpointBuilder basic() {
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json", true));      }      /**
}          doRemoveRecord(key, source);          if (isEventsEnabled()) {             publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),                                                  CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                   origin, IGNORE_COMPLETION));          }          return null;
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);   /**    * Completely remove the given global property from the database
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (currentModuleName != null && n.matchesQualifiedName(currentModuleName)) {            t.report(n, REFERENCE_TO_MODULE_GLOBAL_NAME);          } else if (shortRequiredNamespaces.contains(n.getQualifiedName())) {           t.report(n, REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME);          }          break;        case Token.SCRIPT:
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
if (body.endsWith("3") || body.endsWith("10")) {                                              log.info("5th message received.  Rolling back.");                                              exchange.getOut().setFault(true);                                              exchange.getOut().setBody("5th message received.  Rolling back.");
private boolean isMissing(Map<String, Object> arguments,     OperationParameter parameter) {    if (!parameter.isMandatory()) {    return false;    }    return arguments.get(parameter.getName()) == null;   }
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
* @param request   The request object providing information about the HTTP request       * @param response  The response object providing functionality for modifying the response       */     public abstract void handle(T exception, Request request, Response response);  }
try {                      return unmarshaller.unmarshall(jsonContent.jsonNode);                  } catch (Exception e) {                     LOG.info("Unable to unmarshall exception content", e);                      return null;                  }              }
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {        @Override        public Integer execute(Jedis connection) {         connection.psubscribe(jedisPubSub, patterns);          return 0;        }      }.runWithAnyNode();
case MotionEvent.ACTION_CANCEL:       realPointerIndex = input.lookUpPointerIndex(pointerId);       if (realPointerIndex == -1) break;      if (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;       input.realId[realPointerIndex] = -1;       x = (int)event.getX(pointerIndex);       y = (int)event.getY(pointerIndex);
public interface RestletEndpointBuilder              extends                  RestletEndpointConsumerBuilder, RestletEndpointProducerBuilder {          default AdvancedRestletEndpointBuilder advanced() {
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
for (int i = 0; i < size; i++) {              map.put(i, i);          }         instance2.getLifecycleService().shutdown();          mapStore.awaitStores();      }
* Close the associated {@link PrintWriter} or {@link java.io.OutputStream}       */      public void closeStreamOrWriter() {         if (resource().transport() == AtmosphereResource.TRANSPORT.WEBSOCKET) {              try {                  boolean isUsingStream = (Boolean) request().getAttribute(PROPERTY_USE_STREAM);                  if (isUsingStream) {
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json", true));      }      /**
* @return True, if the given number of bytes for a normalized suffice to determine the order of elements,    *         false otherwise.    */  public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes);   /**    * Writes a normalized key for the given record into the target byte array, starting at the specified position
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
public interface InfinispanEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedInfinispanEndpointProducerBuilder advanced() {
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private int getStreamId(HttpHeaders httpHeaders) {          return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),                                   connection.remote().incrementAndGetNextStreamId());      }      @Override
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String trustStore = getProperty(properties, "trustStore", keyStore);          String trustStorePassword = getProperty(properties, "trustStorePassword", keyStorePassword);         String keyManagerAlgorithm = properties.getProperty("keyManagerAlgorithm", KeyManagerFactory.getDefaultAlgorithm());          String trustManagerAlgorithm = properties.getProperty("trustManagerAlgorithm", TrustManagerFactory.getDefaultAlgorithm());          String protocol = properties.getProperty("protocol", "TLS");
new HttpParameter[]{                          new HttpParameter("screen_name", screenName),                          new HttpParameter("device", enableDeviceNotification),                         new HttpParameter("retweets", retweets)                  }));      }
if (LOG.isDebugEnabled()) {                  LOG.debug("Deleting an element with key " + key + " into the Cache");              }             cache.remove(key);          } else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {              if (LOG.isDebugEnabled()) {                  LOG.debug("Quering an element with key " + key + " from the Cache");
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
rel.setPersonA(personA);     rel.setPersonB(personB);     rel.setRelationshipType(relType);    ps.saveRelationship(rel);    }    public void voidRelationship(Integer relationshipId, String voidReason) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists.json?cursor=" + cursor, true));      }
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
public interface WordpressEndpointBuilder              extends                  WordpressEndpointConsumerBuilder, WordpressEndpointProducerBuilder {          default AdvancedWordpressEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10834, value = "%s recognizes only %s as children: %s")      String unrecognizedChildren(String parent, String children, String parentSpec);      /**
}        } catch (IOException e) {          out.println("Cannot list keys for KeyProvider: " + provider             + ": " + e.toString());          throw e;        }      }
public interface BoxEndpointBuilder              extends                  BoxEndpointConsumerBuilder, BoxEndpointProducerBuilder {          default AdvancedBoxEndpointBuilder advanced() {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test          public void duration() throws InterruptedException {              Thread.sleep(300L);             assertEquals(300d, fStopwatch.runtime(MILLISECONDS), 100d);              Thread.sleep(500L);             assertEquals(800d, fStopwatch.runtime(MILLISECONDS), 250d);          }      }
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
return additionalReplacements;    }   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test   public void testMultipleAlternativesWithCommonLabel_4() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
public static String getProperty(String property) {      String ret = System.getProperty(property);     Preconditions.checkArgument(ret != null, property + " is not configured.");      LOG.debug(property + " : " + ret);      return ret;    }
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Bye World", Exchange.FILE_NAME, "mysub/bye.txt");         Thread.sleep(500);          File file = new File(getScpPath() + "/mysub/bye.txt");          assertFileExists(file.getAbsolutePath());
private Integer port = 5000;    @Override    protected void applyToCrshShellConfig(Properties config) {     if (this.enabled) {     config.put("crash.telnet.port", String.valueOf(this.port));     }    }
Assert.assertEquals(2, result.size());        hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()            .map(regionName -> regionName.split("\\.")[1]).collect(Collectors.toList()));       ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());        result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));        Assert.assertEquals(0, result.size());
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(200);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
@Configuration   @ConditionalOnBean(JavaMailSenderImpl.class)  @ConditionalOnEnabledHealthIndicator("mail")   public static class MailHealthIndicatorConfiguration     extends     CompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNanos(System.nanoTime() - start);          }          return result;      }
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Optional.empty());         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))                  .row("a", "a")                  .row("a", "a")                  .row("b", null)
public void testSamplingUsingmessageFrequency() throws Exception {          long totalMessages = 100;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
public JvmGcDetailedBo map(TJvmGcDetailed tJvmGcDetailed) {          JvmGcDetailedBo jvmGcDetailedBo = new JvmGcDetailedBo();          jvmGcDetailedBo.setGcNewCount(tJvmGcDetailed.getJvmGcNewCount());         jvmGcDetailedBo.setGcNewTime(tJvmGcDetailed.getJvmGcNewTime());          jvmGcDetailedBo.setCodeCacheUsed(tJvmGcDetailed.getJvmPoolCodeCache
log.debug("Optimistic locking exception : " + exception);              } else {               log.debug("Error while closing command context", exception);              }              transactionContext.rollback();
protected void flushDirtyLogs() {          log.debug("Checking for dirty logs to flush...");         final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();          for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {              final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();              final Log kafkaLog = topicAndPartitionLogEntry.getValue();
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
configuration = new Configuration();                  configuration.setHostLanguage(Configuration.XQUERY);                  configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE);                 LOG.debug("Created new Configuration {}", configuration);              } else {                  LOG.debug("Using existing Configuration {}", configuration);              }
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.parseLong(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
break;                              case DOUBLE:                                  if (value.isEmpty()) {                                     builder.put(columnHandle, 0.0);                                  }                                  else {                                      builder.put(columnHandle, parseDouble(value));
public static Date getDate(String name, String format) throws TwitterException {          SimpleDateFormat sdf = formatMap.get().get(format);          if (null == sdf) {             sdf = new SimpleDateFormat(format,JSON.defaultLocale);              sdf.setTimeZone(TimeZone.getTimeZone("GMT"));              formatMap.get().put(format, sdf);          }
SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create("encoding", ModelType.STRING, true).build();     SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create("file", ModelType.OBJECT, false).              setCorrector(FileCorrector.INSTANCE).              setValidator(new FileValidator()).              build();
@Override    public Object compute(Map<String, Object> combinedAggregators)    {     final Object[] args = new Object[fieldNames.size()];      int i = 0;      for(String field : fieldNames) {        args[i++] = combinedAggregators.get(field);
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
public void process(Exchange exchange) throws Exception {                              Random ran = new Random();                             int delay = ran.nextInt(250) + 10;                              Thread.sleep(delay);                          }                      }).to("mock:result");
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
command = new DeleteCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if (args[i].equals("roll")) {          String keyName = "--help";
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      protected void wakeup(boolean inEventLoop) {         if (!inEventLoop && wakenUp.compareAndSet(false, true)) {              selector.wakeup();          }      }
@Override     public void onException(Throwable cause) {     LOG.warn("Async Kafka commit failed.", cause);      failedCommits.inc();     }    };
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {            mBuf.putInt(0, k + mWorkerId);
* This call is only made by the IO thread.       */      private void unschedule() {         if (dirtyOutputBuffer() || currentPacket != null) {              registerOp(SelectionKey.OP_WRITE);
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static final ServiceName ENDPOINT_SERVICE = WS_SERVICE.append("endpoint");      public static final ServiceName ENDPOINT_PUBLISH_SERVICE = WS_SERVICE.append("endpoint-publish");     private static volatile ServiceRegistry registry;      public static void saveContainerRegistry(ServiceRegistry containerRegistry) {          registry = containerRegistry;
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
@Configuration   @ConditionalOnBean(RedisConnectionFactory.class)  @ConditionalOnEnabledHealthIndicator("redis")   public static class RedisHealthIndicatorConfiguration     extends     CompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {
@Override      public int hashCode()      {         return Objects.hash(expressions);      }      @Override
public void test_cn_4() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public void configure() {                  from("direct:start").beanRef("myBean", "route").to("mock:result");                 from("direct:a").delay(2000).setBody(constant("A"));                  from("direct:b").setBody(constant("B"));
public class MBeanInfoAssembler {    private static final Logger LOG = LoggerFactory.getLogger(MBeanInfoAssembler.class);     protected final WeakHashMap<Class< ? >, MBeanAttributesAndOperations> cache = new WeakHashMap<Class< ? >, MBeanAttributesAndOperations>(10);
private String config( TargetDirectory target, int id, int port )      {          File config = target.file( "zookeeper" + id + ".cfg" );         File dataDir = target.directory( "zk" + id + "data", true );          try          {              PrintWriter conf = new PrintWriter( config );
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().shutdown();              }          };
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);   }
LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),          files[0].isFolder());      expected +=         getLsResultStr("/testRoot/testDir", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,              testUser, testUser, files[1].getPermission(), files[1].isFolder());      expected += getLsResultStr("/testRoot/testFileC", files[3].getCreationTimeMs(), 30,          LsCommand.STATE_FILE_NOT_IN
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
public CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {     return (configurer) -> {      CodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();     defaults.jackson2JsonDecoder(        new Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));     defaults.jackson2JsonEncoder(        new Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));     };    }
}      );     log.debug("Performing lookup: %s --> %s", ips, retVal);      return retVal;    }
HttpResponse res = (HttpResponse) ch.readInbound();          DecoderResult dr = res.getDecoderResult();          assertFalse(dr.isSuccess());         assertTrue(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (getPath() == null && c.getPath() != null) {              return -1;         } else if (c.getPath() == null && getPath() != null) {              return 1;          }          v = getPath().compareTo(c.getPath());
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
+ (StringUtils.isEmpty(modelPackage) ? "" : (modelPackage + "/")) + dataType;      }           private String getJSDocType(CodegenModel cm, CodegenProperty cp) {          if (Boolean.TRUE.equals(cp.isContainer)) {
public interface KubernetesPodsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesPodsEndpointProducerBuilder advanced() {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
ticker.advance(4000000);      stopwatch.stop();      ticker.advance(9000000);     assertEquals(4, stopwatch.elapsed(MILLISECONDS));    }    public void testElapsedMillis_multipleSegments() {
return checker;      }     private static String[] removeSuppressed(String[] from, String[] remove) {          final Collection<String> coll =              Lists.newArrayList(Arrays.asList(from));          coll.removeAll(Arrays.asList(remove));
} else {                      statistics.increaseCacheHits(1);                  }                 statistics.addGetTimeNanos(System.nanoTime() - start);              }          }      }
}              }          }         return this;      }      private void notifyIdleListener() {
* @param importFullPath           *        import full path variable.           */         public final void setImportFullPath(String importFullPath) {              this.importFullPath = importFullPath;          }
public interface ApnsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedApnsEndpointProducerBuilder advanced() {
new StaticFieldGetterSetterInliner(root).run();     GatherGetterAndSetterProperties.update(compiler, externs, root);    }    class StaticFieldGetterSetterInliner {
Date completionDate = (Date) cde.getValue();     Patient patient = Context.getPatientService().getPatient(Integer.valueOf(patientIdStr));     Program program = pws.getProgram(Integer.valueOf(programIdStr));    if (!pws.getPatientPrograms(patient, program, null, completionDate, enrollmentDate, null, false).isEmpty())      request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR, "Program.error.already");     else {      PatientProgram pp = new
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
*       * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10854, value = "Null stream at index %d")      String nullStream(int index);      /**
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
try {       in = new DataInputStream(new BufferedInputStream(new GZIPInputStream(pkmFile.read())));       int fileSize = in.readInt();      compressedData = BufferUtils.newUnsafeByteBuffer(fileSize);       int readBytes = 0;       while ((readBytes = in.read(buffer)) != -1) {        compressedData.put(buffer, 0, readBytes);
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
executeDataSet(ADMIN_INITIAL_DATA_XML);    AdministrationService as = Context.getAdministrationService();   Assert.assertEquals(21, as.getAllGlobalProperties().size());    as.purgeGlobalProperty(as.getGlobalPropertyObject("a_valid_gp_key"));   Assert.assertEquals(20, as.getAllGlobalProperties().size());   }   /**
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedBeanEndpointBuilder              extends                  EndpointProducerBuilder {          default BeanEndpointBuilder basic() {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param task          the task.       */      @LogMessage(level = Level.ERROR)     @Message(id = 10809, value = "%s caught %s waiting for task %s; returning")      void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);  }
public final class CreateUfsFileOptionsTest {
.retLong();      }     private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)      {          Parameter blockIndex = arg("blockIndex", int.class);          Parameter blockPosition = arg("blockPosition", int.class);
private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, final Channel channel) throws MalformedURLException {          if (future.getKeepAlive() && maxConnectionsPerHost++ < config.getMaxConnectionPerHost()) {             connectionsPool.put(future.getUrl(), channel);          } else {              connectionsPool.remove(future.getUrl());          }
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
PlayerListener trueListener = (PlayerListener)listener;              switch (event.getType()) {                 case PLAYER_JOIN:                      trueListener.onPlayerJoin((PlayerEvent)event);                      break;                 case PLAYER_QUIT:                      trueListener.onPlayerQuit((PlayerEvent)event);                      break;              }
* @should exclude not allowed locales    * @should cache results for a user    */  public List<Locale> getSearchLocales();   /**    * Used by Spring to set the http client for accessing the openmrs implementation service
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Map<String, Object> options = new HashMap<String, Object>();                  IntrospectionSupport.getProperties(msg, options, null);                 IntrospectionSupport.setProperties(jpa, options);                 IntrospectionSupport.setProperty(jpa, "timestamp", msg.getTimestamp());                  event.getIn().setBody(jpa);              } else {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
obj = null;                  removed = false;                  if (isEventsEnabled()) {                     publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                            origin, completionId));                  }              } else {
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);          }          return result;      }
private void waitForTestVerificationAndCleanup(Future future)    {      try {       queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);        queryWaitYieldLatch.countDown();        queryWaitLatch.countDown();        future.get();
public interface CryptoCmsEndpointBuilder extends EndpointProducerBuilder {          default AdvancedCryptoCmsEndpointBuilder advanced() {              return (AdvancedCryptoCmsEndpointBuilder) this;          }
beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));              final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();              if (setop != null) {                 logger.debug("    " + setop.getJavaName() + "\n                " + setop.getIDLName());                  final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);                 beanMethodMap.put(setop.getIDLName(), new SkeletonStrategy(realSetmethod));              }          }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
*       * @return the message.       */     @Message(id = 10852, value = "Caught %s storing deployment content -- %s")      String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);      /**
}    }   public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {      if (INACTIVE) {        return;      }
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, paging.asPostParameterList(), true));      }
URIStatus uriStatus = fs.getStatus(uri);        Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),            (short) uriStatus.getMode());       OutputStream out = closer.register(ufs.create(dstPath.toString(),            new CreateOptions().setPermission(perm)));        ret = IOUtils.copyLarge(in, out);      } catch (Exception e) {
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
.aggregator().header("id")                      .batchTimeout(500L)                       .batchSize(100)
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface CoAPEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCoAPEndpointProducerBuilder advanced() {
case "contigo":    case "consigo":    default:    First = word.substring(0, 3);     second = word.substring(3, 5);    }
);         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))                  .row("a", "a")                  .row("a", "a")                  .row("b", "b")
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
* Allow this route to be run as an application       *       * @param args      * @throws Exception        */     public static void main(String[] args) throws Exception {          new Main().run(args);      }
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}             final String containerSource = "Stream " + importerName;              executor.execute(task, new Runnable() {                  public void run() {
final int offset, final int count) {      checkIsInMultiOrPipeline();      client.zrangeByScoreWithScores(key, min, max, offset, count);     return getTupledSet();    }    @Override
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
String other = null;      if (args.length > 1 && args[1] instanceof String)        other = (String) args[1];       recursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
return getNode(random.nextInt(cluster.size()));      }     public void shutdownRandomNode(){          HazelcastInstance node = getRandomNode();         node.getLifecycleService().shutdown();          cluster.remove(node);      }
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);              if (hitCount == 1) {                  statistics.increaseCacheHits(hitCount);              } else {
public interface ServerEndpointBuilder              extends                  ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {          default AdvancedServerEndpointBuilder advanced() {
command = new RollCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if ("list".equals(args[i])) {          command = new ListCommand();
ColumnPaginationFilter other = (ColumnPaginationFilter)o;      if (this.columnOffset != null) {       return this.getLimit() == this.getLimit() &&            Bytes.equals(this.getColumnOffset(), other.getColumnOffset());      }      return this.getLimit() == other.getLimit() && this.getOffset() == other.getOffset();
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
GroovyShellFactory groovyShellFactory = mock(GroovyShellFactory.class);          given(groovyShellFactory.createGroovyShell(any(Exchange.class))).willReturn(new GroovyShell());          SimpleRegistry registry = new SimpleRegistry();         registry.bind("groovyShellFactory", groovyShellFactory);          CamelContext camelContext = new DefaultCamelContext(registry);
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
assertMockEndpointsSatisfied();         Thread.sleep(2000);          File local = new File("target/lwd/hello.txt").getAbsoluteFile();
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @return A mapping from storage tier alias to blocks     */    public Map<String, List<Long>> getBlockList() {     Preconditions.checkNotNull(mBlockIdsOnTiers, "mBlockIdsOnTiers");      return mBlockIdsOnTiers;    }
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
}            HadoopJobExecHelper.runningJobKillURIs.remove(rj.getJobID());          }         RCFileMergeMapper.jobClose(outputPath, noName, job, console);        } catch (Exception e) {        }      }
String expected = "";      expected += getLsNoAclResultStr("/testRoot/testFileA", files[0].getCreationTimeMs(), 10,          LsCommand.STATE_FILE_IN_MEMORY);     expected += getLsNoAclResultStr("/testRoot/testDir", files[1].getCreationTimeMs(), 1,          LsCommand.STATE_FOLDER);      expected += getLsNoAclResultStr("/testRoot/testFileC", files[3].getCreationTimeMs(), 30,          LsCommand.STATE_FILE_NOT_IN_MEMORY);
setChildren(children);    }   @InterfaceAudience.Private   public void setJobStatuses(org.apache.hadoop.mapreduce.JobStatus[] stats) {      super.setJobStatuses(stats);    }
