};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10873, value = "Repository does contain any deployment with hash %s")      IllegalStateException deploymentHashNotFoundInRepository(String hash);      /**
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_cn_3() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月6日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();     assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();     assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();
timeout = localParameters.remove("dataTimeout");              if (timeout!= null) {                 dataTimeout = getCamelContext().getTypeConverter().convertTo(int.class, dataTimeout);              }              setProperties(client, localParameters);          }
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(639);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
public interface HazelcastQueueEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastQueueEndpointProducerBuilder advanced() {
public static DetailAST getAnnotationHolder(DetailAST ast)      {          if (ast == null) {             throw new NullPointerException("the ast is null");          }          final DetailAST annotationHolder;
JournalFactory factory =          new MutableJournal.Factory(new URI(mTestFolder.newFolder().getAbsolutePath()));      mFileSystemMaster = Mockito.mock(DefaultFileSystemMaster.class);     registry.add(DefaultFileSystemMaster.class, mFileSystemMaster);      ThreadFactory threadPool = ThreadFactoryUtils.build("LineageMasterTest-%d", true);      mExecutorService = Executors.newFixedThreadPool(2, threadPool);      mLineageMaster = new LineageMaster(registry, factory,
* @see <a href="http:       */      public ResponseList<Status> getRetweetedByMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",                  null, true));      }
, (args = args.rest()).first()       , args.rest());     case 20:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
if (serializerString == null) {     final DataOutputSerializer outputSerializer = new DataOutputSerializer(128);     try {     serializer.snapshotConfiguration().writeSnapshot(outputSerializer);      serializerString = EncodingUtils.encodeBytesToBase64(outputSerializer.getCopyOfBuffer());      return serializerString;     } catch (Exception e) {
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
, (args = args.rest()).first()       , args.rest());     case 13:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
public interface ServerEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedServerEndpointProducerBuilder advanced() {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
populateNearCache(clientMap, 1000);         HazelcastInstance member = hazelcastFactory.newHazelcastInstance();          final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();
Throwable error = null;              for (int i = 0; i < 100; i++) {                  /**                  * Instead of reusing the ServerSocket/ServerSocketChannel, we are going to close replace them on                   * every attempt to find a free port. The reason to do this is because in some cases, when concurrent                   * threads/processes try to acquire the same port, the ServerSocket gets corrupted and isn't able * any free port at all (no matter if there are more than enough free ports available). We have seen this
private int port = Integer.parseInt(System.getProperty("port"));   @Test  public void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
public interface KafkaEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedKafkaEndpointProducerBuilder advanced() {
public interface Sjms2EndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSjms2EndpointProducerBuilder advanced() {
if (pollFuture!= null &&!pollFuture.isCancelled())     pollFuture.cancel(false);   logger.debug("rapidRefreshFuture scheduleing for {} millis", millis);    pollFuture = pollService.scheduleAtFixedRate(new Runnable() {     @Override
final double priority = weight(timestamp - startTime) / random;    final long newCount = count.incrementAndGet();   if (newCount < reservoirSize) {     values.put(new Value(newCount, value, priority));    } else {     if (values.peek().priority < priority) {
requireNonNull(systemMemoryContext, "systemMemoryContext is null");          this.bufferMemoryUsage = systemMemoryContext.newLocalMemoryContext();          this.fixedMemoryUsage = systemMemoryContext.newLocalMemoryContext();         this.fixedMemoryUsage.setBytes(sliceInput.length());          if (!decompressor.isPresent()) {              this.current = sliceInput;
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
int length = lengthWrapper[0];                      nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));                      nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));                 } else if (request.getParams()!= null) {                      StringBuilder sb = new StringBuilder(256);                      for (final Entry<String, List<String>> paramEntry : request.getParams()) {                          final String key = paramEntry.getKey();
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.createTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
final Sink normalizedPersons = new Sink("normalizedPersons.json").withInputs(replace);    expectedPlan.setSinks(normalizedPersons);   assertEquals(expectedPlan, actualPlan);   }  }
public void pickAddress() throws Exception {          try {              bindAddress = memberAddressProvider.getBindAddress();             logger.info("Using bind address: " + publicAddress);              publicAddress = memberAddressProvider.getPublicAddress();              validatePublicAddress(publicAddress);
public ListToTreeSelectionModelWrapper(JTreeTable jTreeTable) {          treeTable = jTreeTable;          getListSelectionModel().addListSelectionListener(createListSelectionListener());      }
