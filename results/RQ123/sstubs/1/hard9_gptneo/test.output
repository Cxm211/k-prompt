*        * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
* @param arguments the command-line arguments       * @throws Exception if something goes wrong       */     public final void run(String... arguments) throws Exception {          final Bootstrap<T> bootstrap = new Bootstrap<>(this);          bootstrap.addCommand(new ServerCommand<>(this));          bootstrap.addCommand(new CheckCommand<>(this));
node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));       Node node2 = Node.newString(Token.NAME, "f");
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getWeeklyTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                 + "trends/weekly.json", false));      }
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);  StringBuilder grammarBuilder = new StringBuilder(638);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
{                         throw new WebApplicationException( badRequest( e ) );                     }                     throw new WebApplicationException( serverError( e ) );                  }                  finally                 {
public interface TwitterDirectMessageEndpointBuilder             extends                  TwitterDirectMessageEndpointConsumerBuilder, TwitterDirectMessageEndpointProducerBuilder {          default AdvancedTwitterDirectMessageEndpointBuilder advanced() {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStreamSink<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {  DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null;    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           if (!mMemoryOnly) {            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), "rw");             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);           }            dst.order(ByteOrder.nativeOrder());
*        * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
initialPermits += rand;              assertEquals(initialPermits, semaphore.availablePermits());             instances[i].getLifecycleService().shutdown();              semaphore.acquire(rand);              initialPermits -= rand;
final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc("title"), 3, 2);         assertThat(page3.pagination().getCount()).isEqualTo(1);         assertThat(page3.pagination().getGlobalTotal()).isEqualTo(7);          assertThat(page3.delegate())                .extracting("title")                .containsExactly("hello6");
public void addAll (short[] array, int offset, int length) {     short[] items = this.items;     int sizeNeeded = size + length;    if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;    }
public interface PropertiesEndpointProducerBuilder             extends                  EndpointProducerBuilder {          default AdvancedPropertiesEndpointProducerBuilder advanced() {
return group.id();             }            String msg = group.getId() + " already exists with a different size: " + group.memberCount();             logger.severe(msg);             throw new IllegalStateException(msg);          }
}      public String[] getRequires() {         return alternatives;      }      public EnumSet<AttributeAccess.Flag> getFlags() {
*        * @return the error message       */     @Message(id = 10835, value = IN_SERIES + " is missing groups: %s")      String inSeriesIsMissingGroups(String rolloutPlan);      /**
public interface AdvancedJooqEndpointBuilder             extends                  AdvancedJooqEndpointConsumerBuilder, AdvancedJooqEndpointProducerBuilder {          default JooqEndpointBuilder basic() {
}       protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {         final List<ResultMessageSummary> result = Lists.newArrayList();          for (ResultMessage resultMessage : resultMessages) {              result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));
*  Is class declared as abstract.           *  @return true if class is declared as final           */         boolean isDeclaredAsAbstract() {              return declaredAsAbstract;          }      }
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}     @Cucumber.Options(monochrome = false)      static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {      }     @Cucumber.Options(monochrome = true)      static class BaseClassWithMonoChromeFalse {      }
public interface StubEndpointProducerBuilder             extends                  EndpointProducerBuilder {          default AdvancedStubEndpointProducerBuilder advanced() {
public interface AdvancedKinesisFirehoseEndpointBuilder             extends                  EndpointProducerBuilder {          default KinesisFirehoseEndpointBuilder basic() {
