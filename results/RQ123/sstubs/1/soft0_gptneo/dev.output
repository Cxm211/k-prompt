public interface GoogleMailEndpointBuilder              extends                  GoogleMailEndpointConsumerBuilder, GoogleMailEndpointProducerBuilder {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogleMailEndpointBuilder advanced() {          default AdvancedGoogle
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected Compiler
}   @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration(); }   @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration); }   @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass()); }   @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }   @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }    @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }     @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }     @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }     @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }     @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }     @Test  void userConfigurationBeans() {    this.contextRunner     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }      @Test  void userConfigurationBeans() {    this.contextRunner      .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)      .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }      @Test  void userConfigurationBeans() {    this.contextRunner      .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)      .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }       @Test  void userConfigurationBeans() {    this.contextRunner       .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)       .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }       @Test  void userConfigurationBeans() {    this.contextRunner       .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)       .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }       @Test  void userConfigurationBeans() {    this.contextRunner       .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)       .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }       @Test  void userConfigurationBeans() {    this.contextRunner       .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)       .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }       @Test  void userConfigurationBeans() {    this.contextRunner       .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)       .run((context) -> {    Object userConfiguration = context.getUserConfiguration();    assertNotNull(userConfiguration);    assertEquals(LiquibaseUserConfiguration.class, userConfiguration.getClass());    }       @Test  void userConfigurationBeans() {
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override
if (body.endsWith("3") || body.endsWith("7")) {                                             log.info("5th message received.  Rolling back.");                                              exchange.getOut().setFault(true);                                             exchange.getOut().setBody("5th message received.  Rolling back.");
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(final Abstract
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override
final long committedOffset = KafkaJournal.this.committedOffset.get();              final HashSet<LogSegment> logSegments = Sets.newHashSet(                    JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))              );              loggerForCleaner.debug("[cleanup-committed] Keeping segments {}", logSegments);              return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {              final long committedOffset = KafkaJournal.this.committedOffset.get();              final HashSet<LogSegment> logSegments = Sets.newHashSet(                    JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))              );              loggerForCleaner.debug("[cleanup-committed] Keeping segments {}", logSegments);              return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {              final long committedOffset = KafkaJournal.this.committedOffset.get();               final HashSet<LogSegment> logSegments = Sets.newHashSet(                    JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))              );               loggerForCleaner.debug("[cleanup-committed] Keeping segments {}", logSegments);              return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {               final long committedOffset = KafkaJournal.this.committedOffset.get();                final HashSet<LogSegment> logSegments = Sets.newHashSet(                    JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))               );                loggerForCleaner.debug("[cleanup-committed] Keeping segments {}", logSegments);               return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {                 final long committedOffset = KafkaJournal.this.committedOffset.get();                  final HashSet<LogSegment> logSegments = Sets.newHashSet(                     JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))                    );                  loggerForCleaner.debug("[cleanup-committed] Keeping segments {}", logSegments);                return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {                   final long committedOffset = KafkaJournal.this.committedOffset.get();                    final HashSet<LogSegment> logSegments = Sets.newHashSet(                      JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))                     );                   loggerForCleaner.debug("[cleanup-committed] Keeping segments {}", logSegments);                 return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {                    final long committedOffset = KafkaJournal.this.committedOffset.get();                     final HashSet<LogSegment> logSegments = Sets.newHashSet(                       JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))                      );                    loggerForCleaner.debug("[cleanup-committed] Keeping segments {}", logSegments);                  return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {                     final long committedOffset = KafkaJournal.this.committedOffset.get();                      final HashSet<LogSegment> logSegments = Sets.newHashSet(                        JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))                       );                     loggerForCleaner.debug("[cleanup-committed] Keeping segments {}", logSegments);                   return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {                      final long committedOffset = KafkaJournal.this.committedOffset.get();                       final HashSet<LogSegment> logSegments = Sets.newHashSet(                         JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))                        );
int i = 0;          if (boi.getOutput()!= null) {              for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {                 if (elements.size() > i) {                      answer.put(partInfo, elements.get(i++));                  }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }              }
public interface FtpEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducerBuilder advanced() {          default AdvancedFtpEndpointProducer
}          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);            InputStream is = mHdfsFs.open(new Path(filePath));            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;            }         for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);            InputStream is = mHdfsFs.open(new Path(filePath));            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;            }         for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);            InputStream is = mHdfsFs.open(new Path(filePath));            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;            }         for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);            InputStream is = mHdfsFs.open(new Path(filePath));            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;            }         for (int times = mLeft; times < mRight; times ++) {             long startTimeMs = System.currentTimeMillis();            String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);             InputStream is = mHdfsFs.open(new Path(filePath));             long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;             }          for (int times = mLeft; times < mRight; times ++) {             long startTimeMs = System.currentTimeMillis();            String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);             InputStream is = mHdfsFs.open(new Path(filePath));             long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;             }          for (int times = mLeft; times < mRight; times ++) {              long startTimeMs = System.currentTimeMillis();             String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);              InputStream is = mHdfsFs.open(new Path(filePath));              long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;              }          for (int times = mLeft; times < mRight; times ++) {              long startTimeMs = System.currentTimeMillis();             String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);              InputStream is = mHdfsFs.open(new Path(filePath));              long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;              }          for (int times = mLeft; times < mRight; times ++) {              long startTimeMs = System.currentTimeMillis();             String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);              InputStream is = mHdfsFs.open(new Path(filePath));              long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;               }          for (int times = mLeft; times < mRight; times ++) {               long startTimeMs = System.currentTimeMillis();              String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);               InputStream is = mHdfsFs.open(new Path(filePath));               long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;               }          for (int times = mLeft; times < mRight; times ++) {               long startTimeMs = System.currentTimeMillis();              String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);               InputStream is = mHdfsFs.open(new Path(filePath));               long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;               }          for (int times = mLeft; times < mRight; times ++) {               long startTimeMs = System.currentTimeMillis();              String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);               InputStream is = mHdfsFs.open(new Path(filePath
generator.writeStartObject();             generator.writeStringField("type", value.getType().getCanonicalName());              generator.writeFieldName("value");              if (value.getValue()!= null) {                  generator.writeNull();              generator.writeStartObject();             generator.writeStringField("type", value.getType().getCanonicalName());               generator.writeFieldName("value");              if (value.getValue()!= null) {                  generator.writeNull();              generator.writeStartObject();             generator.writeStringField("type", value.getType().getCanonicalName());              generator.writeFieldName("value");              if (value.getValue()!= null) {                  generator.writeNull();              generator.writeStartObject();              generator.writeStringField("type", value.getType().getCanonicalName());               generator.writeFieldName("value");              if (value.getValue()!= null) {                  generator.writeNull();               generator.writeStartObject();              generator.writeStringField("type", value.getType().getCanonicalName());               generator.writeFieldName("value");              if (value.getValue()!= null) {                  generator.writeNull();               generator.writeStartObject();              generator.writeStringField("type", value.getType().getCanonicalName());               generator.writeFieldName("value");              if (value.getValue()!= null) {                  generator.writeNull();               generator.writeStartObject();              generator.writeStringField("type", value.getType().getCanonicalName());               generator.writeFieldName("value");              if (value.getValue()!= null) {                   generator.writeNull();                generator.writeStartObject();               generator.writeStringField("type", value.getType().getCanonicalName());                generator.writeFieldName("value");               if (value.getValue()!= null) {                    generator.writeNull();                 generator.writeStartObject();                generator.writeStringField("type", value.getType().getCanonicalName());                 generator.writeFieldName("value");                if (value.getValue()!= null) {                     generator.writeNull();                  generator.writeStartObject();                 generator.writeStringField("type", value.getType().getCanonicalName());                  generator.writeFieldName("value");                 if (value.getValue()!= null) {                      generator.writeNull();                   generator.writeStartObject();                  generator.writeStringField("type", value.getType().getCanonicalName());                   generator.writeFieldName("value");                  if (value.getValue()!= null) {                       generator.writeNull();                    generator.writeStartObject();                   generator.writeStringField("type", value.getType().getCanonicalName());                    generator.writeFieldName("value");                   if (value.getValue()!= null) {                        generator.writeNull();                     generator.writeStartObject();                     generator.writeStringField("type", value.getType().getCanonicalName());                     generator.writeFieldName("value");                    if (value.getValue()!= null) {                         generator.writeNull();                      generator.writeStartObject();                      generator.writeStringField("type", value.getType().getCanonicalName());                      generator.writeFieldName("value");                     if (value.getValue()!= null) {                          generator.writeNull();                       generator.writeStartObject();
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }    public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis
@Resource      private ConnectionFactory defaultConnectionFactory;     @Resource(lookup = "java:/ConnectionFactory")      private ConnectionFactory regularConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {     @Resource      private ConnectionFactory defaultConnectionFactory;     @Resource(lookup = "java:/ConnectionFactory")      private ConnectionFactory regularConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource      private ConnectionFactory defaultConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {      @Resource       private ConnectionFactory defaultConnectionFactory;       public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;       public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;       public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;       public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;        public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;        public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;        public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;        public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;        public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;        public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;        public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;        public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {       @Resource       private ConnectionFactory defaultConnectionFactory;        public void sendWithDefaultJMSConnectionFactory
failureCause.compareAndSet(null, toFailure(throwable));          boolean failed = queryState.setIf(FAILED, currentState ->!currentState.isDone());          if (failed) {             log.warn(throwable, "Query %s failed", queryId);          }          else {              log.debug(throwable, "Failure after query %s finished", queryId);          }          else {              log.warn(throwable, "Query %s failed", queryId);          }          else {              log.debug(throwable, "Failure after query %s finished", queryId);          }          else {              log.warn(throwable, "Query %s failed", queryId);          }          else {              log.debug(throwable, "Failure after query %s finished", queryId);          }          else {              log.warn(throwable, "Query %s failed", queryId);          }          else {              log.debug(throwable, "Failure after query %s finished", queryId);          }          else {              log.warn(throwable, "Query %s failed", queryId);          }          else {              log.debug(throwable, "Failure after query %s finished", queryId);          }          else {              log.warn(throwable, "Query %s failed", queryId);          }          else {              log.debug(throwable, "Failure after query %s finished", queryId);          }          else {              log.warn(throwable, "Query %s failed", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.warn(throwable, "Query %s failed", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.warn(throwable, "Query %s failed", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.warn(throwable, "Query %s failed", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.warn(throwable, "Query %s failed", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.warn(throwable, "Query %s failed", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.warn(throwable, "Query %s failed", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.warn(throwable, "Query %s failed", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.warn(throwable, "Query %s failed", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);          }          else {               log.debug(throwable, "Failure after query %s finished", queryId);
* @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName);      /**      * @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName);      /**      * @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName);      /**      *      * @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName);      /**      *      * @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName);      /**      *      * @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName
record.setExpirationTime(expiryTime);                   if (isEventsEnabled()) {                       CacheEventContext cacheEventContext =                             createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);                      cacheEventContext.setAccessHit(record.getAccessHit());                      publishEvent(cacheEventContext);
ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);     ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);      int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);      MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);      ObjectMapper mapper = new ObjectMapper();      JsonNode rootNode = mapper.readTree(dataString);      int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);      MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);      ObjectMapper mapper = new ObjectMapper();      JsonNode rootNode = mapper.readTree(dataString);      int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);      MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);      ObjectMapper mapper = new ObjectMapper();      JsonNode rootNode = mapper.readTree(dataString);      int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);      MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);      ObjectMapper mapper = new ObjectMapper();      JsonNode rootNode = mapper.readTree(dataString);      int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);      MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);      ObjectMapper mapper = new ObjectMapper();      JsonNode rootNode = mapper.readTree(dataString);      int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);      MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);      ObjectMapper mapper = new ObjectMapper();      JsonNode rootNode = mapper.readTree(dataString);      int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);
}              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }      private void notifyIdleListener() {              }          }         return r;      }       private void notifyIdleListener() {               }           }          return r;       }       private void notifyIdleListener() {               }           }          return r;       }       private void notifyIdleListener() {               }           }          return r;       }       private void notifyIdleListener() {               }           }          return r;       }       private void notifyIdleListener() {               }           }          return r;       }       private void notifyIdleListener() {               }           }          return r;       }       private void notifyIdleListener() {               }           }          return r;       }       private void notifyIdleListener() {               }           }          return r;       }       private void notifyIdleListener() {
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**       *        * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**       *        * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**       *        * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**       *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *        *
* @see <a href="http:       */      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                   + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                   + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                    + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                    + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                     + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                     + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                      + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                      + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                       + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {          return Status.createStatuseList(get(getBaseURL()                        + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {          return Status.createStatuseList(get(getBaseURL()                        + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {          return Status.createStatuseList(get(getBaseURL()                         + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {          return Status.createStatuseList(get(getBaseURL()                         + "statuses/retweets/" + statusId + ".json", true));      }      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {          return Status.createStatuseList(get(getBaseURL()                         + "statuses/retweets/" + statusId + ".json",
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler) {       @Override       protected CompilerPass createInternal(AbstractCompiler compiler
managedSpan.deactivate();                  }              }              }              }              }              }              }              }              }              }              }              }              }               }               }               }               }                }
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(
}    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();    }    public synchronized void normalize() {     logger.info("Normalizing");       startPass("normalize");       process(new Normalize(this, false));       endPass();     }     public synchronized void normalize() {      logger.info("Normalizing");       startPass("normalize");       process(new Normalize(this, false));       endPass();     }     public synchronized void normalize() {      logger.info("Normalizing");       startPass("normalize");       process(new Normalize(this, false));       endPass();     }     public synchronized void normalize() {      logger.info("Normalizing");       startPass("normalize");       process(new Normalize(this, false));       endPass();     }     public synchronized void normalize() {      logger.info("Normalizing");       startPass("normalize");       process(new Normalize(this, false));       endPass();     }     public synchronized void normalize() {      logger.info("Normalizing");       startPass("normalize");       process(new Normalize(this, false));       endPass();     }     public synchronized void normalize() {      logger.info("Normalizing");       startPass("normalize");       process(new Normalize(this, false));       endPass();     }     public synchronized void normalize() {      logger.info("Normalizing");       startPass("normalize");       process(new Normalize(this, false));       endPass();     }     public synchronized void normalize() {      logger.info("Normalizing");       startPass("normalize");       process(new Normalize(this, false));       endPass();     }
public interface HazelcastMultimapEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {
