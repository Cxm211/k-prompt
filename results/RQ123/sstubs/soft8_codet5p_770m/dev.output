RecipientListProcessor rlp = new RecipientListProcessor(exchange.getContext(), producerCache, iter, getAggregationStrategy(),                                                                  isParallelProcessing(), getExecutorService(), isStreaming(), isStopOnException(), getTimeout()) {              @Override             protected ExecutorService createAggregateExecutorService(String name) {                  if (aggregateExecutorService == null) {                      aggregateExecutorService = super.createAggregateExecutorService("RecipientList-AggregateTask");
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
try {        mFileSystemMaster.createFile(new AlluxioURI("alluxio:/a/f"), CreateFileOptions.defaults());       Assert.fail("createFile was expected to fail with FileAlreadyExistsException");      } catch (FileAlreadyExistsException e) {      }    }
LOG.warn("OpenTracing: could not find managed span for exchange=" + exchange);                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }          }      }
*       * @return the error message       */     @Message(id = 10835, value = IN_SERIES + " is missing groups: %s")      String inSeriesIsMissingGroups(String rolloutPlan);      /**
*/      public ResponseList<Status> getUserTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json"                 , true));      }
HttpResponse res = (HttpResponse) ch.readInbound();          DecoderResult dr = res.getDecoderResult();          assertFalse(dr.isSuccess());         assertTrue(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
public interface AdvancedHazelcastTopicEndpointBuilder              extends                  AdvancedHazelcastTopicEndpointConsumerBuilder, AdvancedHazelcastTopicEndpointProducerBuilder {          default HazelcastTopicEndpointBuilder basic() {
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}        int index = unpackIndex(i);        float score = unpackScore(i);       newPacked[j] = pack(index, score);        ++j;      }      packed = newPacked;
*       * @return the message.       */     @Message(id = 10850, value = "No handler for operation %s at address %s")      String noHandlerForOperation(String operationName, PathAddress address);      /**
managedSpan.deactivate();                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }          }
public interface AdvancedSlackEndpointBuilder              extends                  AdvancedSlackEndpointConsumerBuilder, AdvancedSlackEndpointProducerBuilder {          default SlackEndpointBuilder basic() {
@ApiOperation(value = "Creates list of users with given input array", notes = "", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUsersWithListInput(@Valid List<User> body) throws Exception;      @DELETE      @Path("/{username}")
}    }   private static class AliasedTypeNode extends AliasUsage {      AliasedTypeNode(Var aliasVar, Node aliasReference) {        super(aliasVar, aliasReference);      }
switch (len) {                           case 1:                              value = buffer.getUint8();                               break;                           case 2:                               value = buffer.getBeUint16();
*/          private static final long serialVersionUID = -1021880396046355863L;         ReloadAction() {              super("Reload Java File");              putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);          }
} else if (outputFS instanceof DistributedFileSystem) {          loadSpec = ImmutableMap.<String, Object>of(              "type", "hdfs",             "path", indexOutURI.toString()          );        } else {          throw new ISE("Unknown file system[%s]", outputFS.getClass());
* before growing the backing table. */    public ObjectMap (int initialCapacity, float loadFactor) {     if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);     capacity = MathUtils.nextPowerOfTwo(initialCapacity);     if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
(file.isDirectory() && file.getName().startsWith( "branched-" ) ) )              {                  File dest = new File( oldDir, file.getName() );                  if (!file.renameTo( dest ) )
topic.publish(message);          topic.removeMessageListener(messageListener);          topic.publish(message);         assertFalse(latch.await(10000, TimeUnit.MILLISECONDS));      }      @AfterClass
Class[] argsClass = { String.class };          Object[] arguments = { op.testOptions.taggerSerializedFile };          System.err.printf("Loading tagger from serialized file %s...\n",op.testOptions.taggerSerializedFile);         tagger = (Function<List<? extends HasWord>,List<TaggedWord>>) Class.forName("edu.stanford.nlp.tagger.maxent.MaxentTagger").getConstructor(argsClass).newInstance(arguments);        } catch (RuntimeException e) {          throw e;        } catch (Exception e) {
*  Does class have non-private ctors.           *  @return true if class has non-private ctors           */         private boolean isWithNonPrivateCtor() {              return withNonPrivateCtor;          }
return record;          }          if (isEventsEnabled()) {             publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                    origin, completionId));          }          return null;
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    }   private LinkedHashMap<String, ASTNode> doPhase1GetAggregationsFromSelect(        ASTNode selExpr) {     LinkedHashMap<String, ASTNode> aggregationTrees = new LinkedHashMap<String, ASTNode>();      for (int i = 0; i < selExpr.getChildCount(); ++i) {        ASTNode sel = (ASTNode) selExpr.getChild(i).getChild(0);        doPhase1GetAllAggregations(sel, aggregationTrees);
beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));              final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();              if (setop!= null) {                 logger.debug("    " + setop.getJavaName() + "\n                " + setop.getIDLName());                  final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);                 beanMethodMap.putIfAbsent(setop.getIDLName(), new SkeletonStrategy(realSetmethod));              }          }
if (getPath() == null && that.getPath()!= null) {              return false;         } else if (that.getPath() == null && getPath()!= null) {              return false;          }          if (!getPath().equals(that.getPath())) {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
synchronized (this.timers) {              for (final TimerImpl timer : this.timers.values()) {                 if (!timer.isActive()) {                      if (timer.getPrimaryKey() == null || timer.getPrimaryKey().equals(pk)) {                          activeTimers.add(timer);                      }
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test          public void duration() throws InterruptedException {              Thread.sleep(300L);             assertEquals(300d, fStopwatch.runtime(MILLISECONDS), 100d);              Thread.sleep(500L);             assertEquals(800d, fStopwatch.runtime(MILLISECONDS), 250d);          }      }
@ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Pet.class, responseContainer = "List"),          @ApiResponse(code = 400, message = "Invalid status value", response = Void.class, responseContainer = "List") })     List<Pet> findPetsByStatus(@QueryParam("status") @NotNull   @ApiParam("Status values that need to be considered for filter")  List<String> status) throws Exception;      @GET      @Path("/findByTags")
private Collection<InetSocketAddress> getConfigAddresses() {          final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();         for (String address : getClientConfig().getAddresses()) {              socketAddresses.addAll(AddressHelper.getSocketAddresses(address));          }          Collections.shuffle(socketAddresses);
* @see <a href="http:       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags? "&exclude=hashtags" : ""), false));      }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
* @should execute sql containing group by    */   @Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)  public List<List<Object>> executeSQL(String sql, boolean selectOnly);   /**    * Get the implementation id stored for this server Returns null if no implementation id has
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface GridFsEndpointBuilder              extends                  GridFsEndpointConsumerBuilder, GridFsEndpointProducerBuilder {          default AdvancedGridFsEndpointBuilder advanced() {
private volatile ManagementOperationHandler operationHandler;          private void handleRequest(final ManagementRequestHeader header, final DataInput input) throws IOException {             log.debugf("%s handling request %d(%d)", ManagementChannel.this, header.getBatchId());              final FlushableDataOutputImpl output = FlushableDataOutputImpl.create(writeMessage());              Exception error = null;
return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());      }     private static void generateConstructor(ClassDefinition classDefinition,              List<Integer> joinChannels,              FieldDefinition sizeField,              List<FieldDefinition> channelFields,
Object convertedValue;      if (value.scale() == 0) {        logger.trace("found no fractional part");       convertedValue = value.doubleValue();      } else {        logger.trace("found fractional part");        convertedValue = value.doubleValue();
}      }     private static boolean shouldAppendSpace(StringBuilder text, char firstCharToAppend) {          final boolean result;          if (text.length() == 0) {
try {          if(UserGroupInformation.isSecurityEnabled())           UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab();          long now = Time.now();
public interface TwitterSearchEndpointBuilder              extends                  TwitterSearchEndpointConsumerBuilder, TwitterSearchEndpointProducerBuilder {          default AdvancedTwitterSearchEndpointBuilder advanced() {
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedKubernetesNamespacesEndpointBuilder              extends                  AdvancedKubernetesNamespacesEndpointConsumerBuilder, AdvancedKubernetesNamespacesEndpointProducerBuilder {          default KubernetesNamespacesEndpointBuilder basic() {
@ModelAttribute("providerAttributeTypes")    public List<ProviderAttributeType> getProviderAttributeTypes() throws Exception {    return Context.getProviderService().getAllProviderAttributeTypes(true);    }    @RequestMapping(method = RequestMethod.GET)
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<DirectMessage> getSentDirectMessages() throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0], true));      }
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
}   public void glBindTexture (int target, int texture) {   GL.glBindTexture(target, texture);   }   public void glBlendFunc (int sfactor, int dfactor) {
*       * @return the message.       */     @Message(id = 10854, value = "Null stream at index %d")      String nullStream(int index);      /**
public interface LdapEndpointBuilder extends EndpointProducerBuilder {          default AdvancedLdapEndpointBuilder advanced() {              return (AdvancedLdapEndpointBuilder) this;          }
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}              }          }         if (keySet.isEmpty()) {              return result;          }          MapGetAllRequest request = new MapGetAllRequest(name, keySet);
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Node node1 = Node.newString(Token.NAME, "f");      node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");     assertFalse(node1.isEquivalentToTyped(node2));    }    public void testVarArgs1() {
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
@Override          public long increment(long timeMillis)          {           return timeMillis + MILLIS_IN;          }          @Override
"JSC_REFERENCE_BEFORE_DECLARE",        "Variable referenced before declaration: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
fc.setFilterName(filterName);              filterChain.addFilter(fc);             logger.trace("Installing Filter {}", servletClassName);          }      }
final int offset, final int count) {      checkIsInMultiOrPipeline();      client.zrangeByScoreWithScores(key, min, max, offset, count);     return getTupledSet();    }    @Override
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
protected void flushDirtyLogs() {          log.debug("Checking for dirty logs to flush...");         final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();          for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {              final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();              final Log kafkaLog = topicAndPartitionLogEntry.getValue();
*       * @return the message.       */     @Message(id = 10843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@ApiOperation(value = "Logs out current logged in user session", notes = "", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void logoutUser() throws Exception;      @PUT      @Path("/{username}")
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
if (language!= null &&!"default".equals(language)) {        String languagePropertiesFile = LanguageInfo.getLanguagePropertiesFile(language);        if (languagePropertiesFile!= null) {         try (InputStream is = IOUtils.getInputStreamFromURLOrClasspathOrFileSystem(languagePropertiesFile, null)){            Properties languageSpecificProperties = new Properties();            languageSpecificProperties.load(is);            PropertiesUtils.overWriteProperties(props,languageSpecificProperties);
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
setAll(lowResults,highResults,expectedResults,MENTION_TP,12370);      setAll(lowResults,highResults,expectedResults,MENTION_F1,55.6);     setAll(lowResults,highResults,expectedResults,MUC_TP,5969);      setAll(lowResults,highResults,expectedResults,MUC_F1,57.93);      setAll(lowResults,highResults,expectedResults,BCUBED_TP,6868.81);
@Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })    public void testQueryStartedAfter() throws Exception {      Calendar calendar = new GregorianCalendar();     calendar.set(Calendar.YEAR, 2030);      calendar.set(Calendar.MONTH, 8);      calendar.set(Calendar.DAY_OF_MONTH, 30);      calendar.set(Calendar.HOUR_OF_DAY, 12);
listApplications(appTypes, appStates);        }      } else if (cliParser.hasOption(KILL_CMD)) {       if (args.length!= 1) {          printUsage(opts);          return exitCode;        }
SchedulerUtil.startup(getRuntimeProperties());     }    catch (Exception t) {      Context.shutdown();      WebModuleUtil.shutdownModules(servletContext);      throw new ServletException(t);
break;                              case DOUBLE:                                  if (value.isEmpty()) {                                     builder.put(columnHandle, 0.0);                                  }                                  else {                                      builder.put(columnHandle, parseDouble(value));
@Override      public int hashCode() {         return Objects.hash(filePattern, checkPattern, moduleId, linesCsv, columnsCsv);      }      @Override
public interface RssEndpointBuilder extends EndpointConsumerBuilder {          default AdvancedRssEndpointBuilder advanced() {              return (AdvancedRssEndpointBuilder) this;          }
public interface AdvancedMvelEndpointBuilder              extends                  EndpointProducerBuilder {          default MvelEndpointBuilder basic() {
status = ufs.getStatus(ufsUri);                } catch (Exception e) {                  throw new IOException(String.format("Cannot sync UFS directory %s: %s.", ufsUri,                     e.toString()), e);                }                if (status.isFile()) {                  throw new InvalidPathException(String.format(
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
public interface AdvancedSdbEndpointBuilder              extends                  EndpointProducerBuilder {          default SdbEndpointBuilder basic() {
public interface AdvancedJSR356WebSocketEndpointBuilder              extends                  AdvancedJSR356WebSocketEndpointConsumerBuilder, AdvancedJSR356WebSocketEndpointProducerBuilder {          default JSR356WebSocketEndpointBuilder basic() {
public interface AdvancedFtpsEndpointBuilder              extends                  AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {          default FtpsEndpointBuilder basic() {
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      }     private static void checkTree(final DetailAST node,                             final DetailAST parent,                             final DetailAST prev,                             final String filename,
*/   public Vector2 getLocalAnchorB () {   jniGetLocalAnchorB(addr, tmp);    localAnchorB.set(tmp[0], tmp[1]);    return localAnchorB;   }
* @should exclude not allowed locales    * @should cache results for a user    */  public List<Locale> getSearchLocales();   /**    * Used by Spring to set the http client for accessing the openmrs implementation service
try {              final String echo = localEcho.echo(message);              Assert.fail("Remote invocation on a local view " + LocalEcho.class.getName() + " was expected to fail");         } catch (IllegalStateException nsee) {              logger.trace("Got the expected exception on invoking on a local view, remotely", nsee);          }
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
*/  @GwtCompatible(emulated = true)  public class BaseEncodingTest extends TestCase {   public static void assertEquals(byte[] expected, byte[] actual) {      assertEquals(expected.length, actual.length);      for (int i = 0; i < expected.length; i++) {        assertEquals(expected[i], actual[i]);
public interface TwilioEndpointBuilder              extends                  TwilioEndpointConsumerBuilder, TwilioEndpointProducerBuilder {          default AdvancedTwilioEndpointBuilder advanced() {
.map(PlanNode::getId)                     .collect(toList());             NodeRepresentation nodeOutput = addNode(node, operatorName, format(formatString, arguments.toArray(new Object[0])), allNodes, ImmutableList.copyOf(), ImmutableList.of());              if (projectNode.isPresent()) {                  printAssignments(nodeOutput, projectNode.get().getAssignments());
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void restartWithKeepAlive() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();    this.container = factory    .getEmbeddedServletContainer(exampleServletRegistration());    MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();    HttpClient client = new HttpClient(connectionManager);
* @param task          the task.       */      @LogMessage(level = Level.ERROR)     @Message(id = 10809, value = "%s caught %s waiting for task %s; returning")      void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);  }
handshaking = false;              handshaken = false;             if (handshakeFuture == null) {                  handshakeFuture = newHandshakeFuture(channel);              }          }
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTextures(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();    private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();    private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();   private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 40000;    private static final boolean DEFAULT_USE_COMBINER = false;    private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;    private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;
public interface ServerEndpointBuilder              extends                  ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {          default AdvancedServerEndpointBuilder advanced() {
try {                      return unmarshaller.unmarshall(jsonContent.jsonNode);                  } catch (Exception e) {                     LOG.info("Unable to unmarshall exception content", e);                      return null;                  }              }
public Container<T> prefSize (float width, float height) {   prefSize(new Fixed(width), new Fixed(height));    return this;   }
float b = Float.parseFloat(reader.getAttributeValue(null, "b"));                      float alpha = Float.parseFloat(reader.getAttributeValue(null, "a"));                      if(r < 0 || g < 0 || b < 0){                          r = g = b = 0;                         alpha = -1;                      }                      edge.setR(r);
public SourceOperator createOperator(DriverContext driverContext)          {              checkState(!closed, "Factory is already closed");             OperatorContext operatorContext = driverContext.addOperatorContext(operatorId, ScanFilterAndProjectOperator.class.getSimpleName());              return new ScanFilterAndProjectOperator(                      operatorContext,                      sourceId,
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
this.targetBeanType = targetClass;      }     public final void setApplicationContext(ApplicationContext context) throws BeansException {          this.context = context;      }
int size = s.count();     float[] ret = new float[size];     for(int i = 0; i < size && s!= null; i++, s = s.rest())     ret[i] = ((Number) s.first()).floatValue();     return ret;     }   }
private int getStreamId(HttpHeaders httpHeaders) {          return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),                                   connection.remote().incrementAndGetNextStreamId());      }      @Override
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface StAXEndpointBuilder extends EndpointProducerBuilder {          default AdvancedStAXEndpointBuilder advanced() {              return (AdvancedStAXEndpointBuilder) this;          }
.retInt();      }     private static void generatePositionEqualsPositionMethod(              ClassDefinition classDefinition,              CallSiteBinder callSiteBinder,              List<Type> joinChannelTypes,
@Test   public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
Collection<StaticBuffer> actual = Sets.newHashSet(i);                         log.debug("Checking bounds [{}, {}) (expect {} keys)",                                  new Object[]{startCol, endCol, expected.size()});                          Assert.assertEquals(expected, actual);                          i.close();
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (TACHYON_STREAMING_READ) {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            InputStream is = file.getInStream(ReadType.CACHE);            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
*/    public void closeRegion(final String regionname, final String serverName)    throws IOException {     closeRegion(Bytes.toBytes(regionname), serverName);    }    /**
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
if (isParallelProcessing()) {              executorService.submit(() -> ReactiveHelper.schedule(runnable));          } else {             ReactiveHelper.schedule(runnable, "Multicast next step");          }      }
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
class ObjectRecordWithStats extends AbstractRecordWithStats<Object> {     private volatile Object value;      public ObjectRecordWithStats() {          super();
public interface AdvancedSWFEndpointBuilder              extends                  AdvancedSWFEndpointConsumerBuilder, AdvancedSWFEndpointProducerBuilder {          default SWFEndpointBuilder basic() {
public interface ApnsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedApnsEndpointProducerBuilder advanced() {
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedBeanEndpointBuilder              extends                  EndpointProducerBuilder {          default BeanEndpointBuilder basic() {
@Override      public void process(Node externs, Node root) {       logger.fine(name);        startPass(name);        processInternal(externs, root);        endPass(externs, root);
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Pet.class, responseContainer = "List"),          @ApiResponse(code = 400, message = "Invalid tag value", response = Void.class, responseContainer = "List") })     List<Pet> findPetsByTags(@QueryParam("tags") @NotNull   @ApiParam("Tags to filter by")  List<String> tags) throws Exception;      @GET      @Path("/{petId}")
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String methodKey = method + "." + key;           Number n = getNumbers().get(methodKey);           if (n!= null) {              return n.doubleValue();           }           String value = getMethodParameter(method, key);           if (StringUtils.isEmpty(value)) {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
KeyIterator i = store.getKeys(krq, tx);                          Collection<StaticBuffer> actual = Lists.newArrayList(i);                         log.debug("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",                                  new Object[]{keyStart, keyEnd, startCol, endCol, expected.size()});                          Assert.assertEquals(expected, actual);                          i.close();
maker, computingFunction);    }   private static MapMaker createMapMaker() {      MapMaker maker = new MapMaker();      maker.useCustomMap = true;      return maker;
public void testGetRequiredTokens() {          ThrowsCountCheck obj = new ThrowsCountCheck();          int[] expected = {TokenTypes.LITERAL_THROWS};         assertArrayEquals(expected, obj.getRequiredTokens());      }  }
public void test_kr_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월06일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
public static SecurityContext NONE = new SecurityContext() {    @Override    public Principal getPrincipal() {
public interface MSKEndpointBuilder extends EndpointProducerBuilder {          default AdvancedMSKEndpointBuilder advanced() {              return (AdvancedMSKEndpointBuilder) this;          }
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
@Override   public Mono<Health> health() {   return Flux.fromIterable(this.registry.getAll().entrySet())    .flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),       entry.getValue().health().transformDeferred(this.timeoutCompose)))     .collectMap(Tuple2::getT1, Tuple2::getT2).map(this.healthAggregator::aggregate);   }
long start = System.currentTimeMillis();          MockEndpoint result = getMockEndpoint("mock:result");         result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I", "B+D+F+H+J");          assertMockEndpointsSatisfied();
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return false;      }      if (!info.isOffline()) {       LOG.warn("Region is split but not offline: " +         info.getRegionNameAsString());      }      return true;    }
public interface AdvancedKeystoneEndpointBuilder              extends                  EndpointProducerBuilder {          default KeystoneEndpointBuilder basic() {
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.parseLong(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
private void addName(String nameToAdd) {              varNames.add(nameToAdd);          }
@Override      protected CompilerPass createInternal(AbstractCompiler compiler) {        return new PeepholeOptimizationsPass(compiler,             new PeepholeSubstituteAlternateSyntax(false),              new PeepholeReplaceKnownMethods(),              new PeepholeRemoveDeadCode(),              new PeepholeFoldConstants(),
*  *  @see java.util.Comparator    */  public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
public void testGrouped() throws Exception {          MockEndpoint result = getMockEndpoint("mock:result");         result.expectedMinimumMessageCount(1);          template.sendBody("direct:start", "100");
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
*/      public void setMemberModifiers(String modifiers)      {         final List<Integer> modifiersList = new ArrayList<>(modifiers.length());          for (String modifier : modifiers.split(", ")) {             modifiersList.add(TokenTypes.getTokenId(modifier));          }          this.memberModifiers = modifiersList;      }
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface GitEndpointBuilder              extends                  GitEndpointConsumerBuilder, GitEndpointProducerBuilder {          default AdvancedGitEndpointBuilder advanced() {
public class MBeanInfoAssembler {    private static final Logger LOG = LoggerFactory.getLogger(MBeanInfoAssembler.class);     protected final WeakHashMap<Class<? >, MBeanAttributesAndOperations> cache = new WeakHashMap<Class<? >, MBeanAttributesAndOperations>(10);
LOG.debug("Uploading a dir...");             if (entry!= null &&!DropboxUploadMode.force.equals(mode)) {                  throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!");              }              if (!dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
javaWriter.emitPackage("com.squareup");      javaWriter.beginType("com.squareup.Foo", "class", 0);      javaWriter.beginMethod("int", "foo", 0, "java.lang.String", "s");     javaWriter.emitSingleLineComment("foo");      javaWriter.emitStatement("int j = s.length() + %s", 13);      javaWriter.endMethod();      javaWriter.endType();
, (args = args.rest()).first()       , args.rest());     case 12:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
return new JedisClusterCommand<Long>(connectionHandler, maxAttempts) {        @Override        public Long execute(Jedis connection) {         return connection.pexpireAt(key, millisecondsTimestamp);        }      }.runBinary(key);    }
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return this.set(min.set(0, 0, 0), max.set(0, 0, 0));    }       public boolean isValid () {    return min.x <= max.x && min.y <= max.y && min.z <= max.z;    }    /** Extends this bounding box by the given bounding box.
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
, (args = args.rest()).first()       , args.rest());     case 7:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
return false;    }   synchronized String getBlockPoolId() {      if (bpNSInfo!= null) {        return bpNSInfo.getBlockPoolID();      } else {
mTfs.setState(dir0, mUnsetPinned);      Assert.assertFalse(mTfs.getInfo(file).isPinned);     Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());      mTfs.setState(file, mSetPinned);
* @param cause the cause of the error.       */      @LogMessage(level = Level.WARN)     @Message(id = 10806, value = "Caught exception closing input stream")      void caughtExceptionClosingInputStream(@Cause Throwable cause);      /**
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
public interface OptaPlannerEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedOptaPlannerEndpointProducerBuilder advanced() {
if (!listeners.isEmpty()) {            MetaStoreListenerNotifier.notifyEvent(listeners,                                                  EventType.DROP_TABLE,                                                 new DropTableEvent(tbl, success, deleteData, this),                                                  envContext,                                                  transactionalListenerResponses, ms);          }
public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,    MessageSourceAware, InitializingBean {  private static final char[] EXACT_DELIMITERS = { '_', '.', '[' };  private static final char[] TARGET_NAME_DELIMITERS = { '_', '.' };   private final Log logger = LogFactory.getLog(getClass());
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(500);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
dispatcher.getTerminationFuture().whenCompleteAsync(     (Void success, Throwable throwable) -> {       if (throwable!= null) {        LOG.info("Could not properly terminate the Dispatcher.", throwable);       }
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = this.rest.getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
public interface GitHubEndpointBuilder              extends                  GitHubEndpointConsumerBuilder, GitHubEndpointProducerBuilder {          default AdvancedGitHubEndpointBuilder advanced() {
record.setExpirationTime(expiryTime);                  if (isEventsEnabled()) {                      CacheEventContext cacheEventContext =                             createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),                                                     toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);                      cacheEventContext.setAccessHit(record.getAccessHit());                      publishEvent(cacheEventContext);
public interface DirectVmEndpointBuilder              extends                  DirectVmEndpointConsumerBuilder, DirectVmEndpointProducerBuilder {          default AdvancedDirectVmEndpointBuilder advanced() {
assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();     assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();     assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();
public void testMultipleAlternativesWithCommonLabel_4() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
}     }    if (!((min1 <= min2 && max1 >= min2) || (min2 <= min1 && max2 >= min1))) {      return false;     } else {      float o = Math.min(max1, max2) - Math.max(min1, min2);
double xMean = 0, yMean = 0;          for (Node n : graph.getNodes()) {              xMean += n.getNodeData().x();             yMean += n.getNodeData().y();          }          xMean /= graph.getNodeCount();          yMean /= graph.getNodeCount();
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
grantGlobal(TEST_UTIL, toGroupEntry(GROUP_READ), Permission.Action.READ);      grantGlobal(TEST_UTIL, toGroupEntry(GROUP_WRITE), Permission.Action.WRITE);     assertEquals(6, AccessControlLists.getTablePermissions(conf, TEST_TABLE).size());      try {       assertEquals(6, AccessControlClient.getUserPermissions(systemUserConnection,            TEST_TABLE.toString()).size());      } catch (Throwable e) {        LOG.error("error during call of AccessControlClient.getUserPermissions. ", e);
case ORC:            if (literal instanceof Integer) {             return ((Number) literal).longValue();            }            return literal;          case PARQUET:
SessionManager sessionManager = manager.getDeployment().getSessionManager();    int sessionTimeout = (getSessionTimeout() == null || getSessionTimeout().isZero()      || getSessionTimeout().isNegative()? -1       : (int) getSessionTimeout().getSeconds());    sessionManager.setDefaultSessionTimeout(sessionTimeout);    return manager;   }
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public boolean keyDown (int keycode) {    Object[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (((InputProcessor)items[i]).keyDown(keycode)) return true;     } finally {      processors.end();     }
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTextures(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
}    }   public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {      if (INACTIVE) {        return;      }
String location = response.getHeader(HttpHeaders.Names.LOCATION);                  URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);                  boolean stripQueryString = config.isRemoveQueryParamOnRedirect();                 if (!uri.toString().equals(future.getURI().toString())) {                      final RequestBuilder nBuilder = stripQueryString?                              new RequestBuilder(future.getRequest()).setQueryParameters(null)                              : new RequestBuilder(future.getRequest());
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10854, value = "Null stream at index %d")      String nullStream(int index);      /**
public List<String> getActiveConnectionStackTraceByDataSourceId(Integer id) {          Object datasource = getDruidDataSourceById(id);         if (datasource == null || DruidDataSourceUtils.isRemoveAbandoned(datasource)) {              return null;          }
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
attr.addOperationParameterDescription(resources, "infinispan.container", op);          }         ALIASES.addOperationParameterDescription(resources, "infinispan.container", op).                  get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);          return op;      }
public interface GoogleCalendarEndpointBuilder              extends                  GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {          default AdvancedGoogleCalendarEndpointBuilder advanced() {
public static final FunctionType TOP_FUNCTION = new FunctionType(        null, null, null, null, null, null, null, null, null, null, null);   public static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(        null, null, null, null, null, null, null, null, null, null, null, null);
if (tiled!= null) return tiled;     Drawable drawable = optional(name, Drawable.class);    if (drawable!= null) {      if (!(drawable instanceof TiledDrawable)) {       throw new GdxRuntimeException("Drawable found but is not a TiledDrawable: " + name + ", "        + drawable.getClass().getName());      }     return (TiledDrawable)drawable;     }     tiled = new TiledDrawable(getRegion(name));
*  * @see java.lang.Object    */  public abstract int hash(T record);   /**    * Sets the given element as the comparison reference for future calls to
* @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName);   /**    * Gets the global property that has the given <code>propertyName</code>
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    private void getTestHelper(TachyonFS tfs) throws IOException {     int fileId = tfs.createFile(new TachyonURI("/root/testFile1"));      Assert.assertEquals(3, fileId);     Assert.assertNotNull(tfs.getFile(fileId));    }    @Test
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10848, value = "Exception getting result from host %s: %s")      String exceptionAwaitingResultFromHost(String name, String message);      /**
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    if (CopyableValue.class.isAssignableFrom(type)) {    return (TypeComparator<T>) new CopyableValueComparator(sortOrderAscending, type);    }    else {    return (TypeComparator<T>) new ValueComparator(sortOrderAscending, type);    }   }
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return additionalReplacements;    }   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
return parseTimeWithoutTimeZone(session.getTimeZoneKey(), value.toStringUtf8());          }          catch (IllegalArgumentException e) {             throw new PrestoException(INVALID_CAST_ARGUMENT, "Value cannot be cast to date: " + value.toStringUtf8(), e);          }      }
final Map<String, String> m = new HashMap<String, String>();              for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {                  UriTemplate t = new UriTemplate(e.getKey());                 logger.debug("Trying to map {} to {}", t, path);                  if (t.match(path, m)) {                      atmosphereHandlerWrapper = e.getValue();                      logger.trace("Mapped {} to {}", t, e.getValue());
, (args = args.rest()).first()       , args.rest());     case 13:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
public interface MiloClientEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedMiloClientEndpointProducerBuilder advanced() {
public interface EventEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedEventEndpointProducerBuilder advanced() {
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
.retLong();      }     private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)      {          Parameter blockIndex = arg("blockIndex", int.class);          Parameter blockPosition = arg("blockPosition", int.class);
@Override      public int hashCode()      {         return Objects.hashCode(expressions);      }      @Override
new SpdySessionStatus(1, "PROTOCOL_ERROR");            public static final SpdySessionStatus INTERNAL_ERROR =         new SpdySessionStatus(2, "INTERNAL_ERROR");      /**       * Returns the {@link SpdySessionStatus} represented by the specified code.
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
}    @Test public void eolComment() throws IOException {     javaWriter.emitSingleLineComment("foo"); assertCode("    }
assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();     assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();     assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();
*/    public void compact(String tableOrRegionName, String columnFamily)      throws IOException,  InterruptedException {     compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));    }    /**
thread.shutdown();              }              synchronized (ticket) {                 ticket.notifyAll();              }          }      }
}    factory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));    factory.addContextLifecycleListeners(listeners[2], listeners[3]);   this.container = factory.getEmbeddedServletContainer();    InOrder ordered = inOrder((Object[]) listeners);    for (LifecycleListener listener : listeners) {     ordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());
for (ComplexColumn complexColumn : complexColumnCache.values()) {                  Closeables.closeQuietly(complexColumn);                }               for (Object column : objectColumnCache.values()) {                  if (column instanceof Closeable) {                    Closeables.closeQuietly((Closeable) column);                  }
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
class WriteStoreHandler extends AbstactStoreHandler<WriteRecord> {      protected WriteStoreHandler(MapStoreWrapper storeWrapper) {          super(storeWrapper);
throw new NullPointerException("uncollectedPointCreator must not be null");          }          this.timeWindow = timeWindow;         this.uncollectedPointCreator = uncollectedPointCreator;      }      public Chart<P> build(List<P> sampledPoints) {
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().shutdown();              }          };
assertTrue(repo.contains("e.txt"));          resetMocks();         notify = new NotifyBuilder(context).whenDone(3).create();          getMockEndpoint("mock:result").expectedMessageCount(2);
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      public ILock getLock(Object key) {         if (key == null) {              throw new NullPointerException("Retrieving a lock instance with a null key is not allowed!");          }          return getDistributedObject(LockService.SERVICE_NAME, node.getSerializationService().toData(key));
* @see <a href="http:       */      public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, paging.asPostParameterList(), true));      }
rng.nextBytes(bytes);      ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);      ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);     assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));      assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());     assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());    }    static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {
catch(Throwable e)    {    if(!(e instanceof CompilerException))    throw new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);    else     throw (CompilerException) e;    }
public static void main(String... args) throws Exception {          Main.main(args);      }
private V value;            private transient SerializationGroup<K, V, G> group;
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
public interface SpringLdapEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedSpringLdapEndpointBuilder advanced() {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
* @should exclude not allowed locales    * @should cache results for a user    */  public List<Locale> getSearchLocales();   /**    * Used by Spring to set the http client for accessing the openmrs implementation service
return additionalReplacements;    }   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
* @return True, if the given number of bytes for a normalized suffice to determine the order of elements,    *         false otherwise.    */  public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes);   /**    * Writes a normalized key for the given record into the target byte array, starting at the specified position
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
}    /**    * Free the given file or folder from tachyon in-memory (recursively freeing all children     * if a folder)     *     * @param path The TachyonURI path as the input of the command     * @return 0 if command if successful, -1 if an error occurred.
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), endsWith("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
*       * @return the error message       */     @Message(id = 10835, value = IN_SERIES + " is missing groups: %s")      String inSeriesIsMissingGroups(String rolloutPlan);      /**
else    {    ISeq s = RT.seq(sizeOrSeq);   int size = RT.count(s);    int[] ret = new int[size];    for(int i = 0; i < size && s!= null; i++, s = s.next())     ret[i] = ((Number) s.first()).intValue();
if (value instanceof AsciiString) {              return ((AsciiString) value).byteAt(0);          }         return Byte.parseByte(value.toString());      }      @Override
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* {@link EnableAutoConfiguration Auto-configuration} for Spring REST Docs.   *   * @author Andy Wilkinson  * @since 1.4.0   */  @Configuration  @ConditionalOnWebApplication  @EnableConfigurationProperties public class RestDocsAutoConfiguration {   @Bean   @ConditionalOnMissingBean(MockMvcRestDocumentationConfigurer.class)
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
s = target;    }   return failOrAccept(prevAccept, input, reach, t);   }   protected int failOrAccept(ExecState prevAccept, CharStream input,
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassCastException.class))          );      }
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
);         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))                 .row("a", "a")                 .row("a", "a")                 .row("b", "b")
public interface AdvancedValidatorEndpointBuilder              extends                  EndpointProducerBuilder {          default ValidatorEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
public interface AdvancedCaffeineLoadCacheEndpointBuilder              extends                  AdvancedCaffeineLoadCacheEndpointConsumerBuilder, AdvancedCaffeineLoadCacheEndpointProducerBuilder {          default CaffeineLoadCacheEndpointBuilder basic() {
}      }     public synchronized AttributeModel getModel() {          Workspace workspace = projectController.getCurrentWorkspace();          if (workspace!= null) {              AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*/    public static long getUnsafeByteBufferAddress(ByteBuffer buffer) {     synchronized(unsafeBuffers) {     if (unsafeBuffers.contains(buffer, false))       return 0;     }     return getByteBufferAddress(buffer);
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
*     * @param uri the {@link AlluxioURI} for this UFS     * @param conf the configuration for Hadoop or GlusterFS     */    public static synchronized GlusterFSUnderFileSystem createInstance(AlluxioURI uri, Map<String, String> conf) {      Configuration hadoopConf = prepareConfiguration(uri.toString(), conf);
DeleteBuffer deleteBuffer = new DeleteBuffer();      UnderFileStatus[] pathsToDelete = listInternal(path, ListOptions.defaults().setRecursive(true));      if (pathsToDelete == null) {       LOG.warn("Unable to delete {} because listInternal returns null", path);        return false;      }      for (UnderFileStatus pathToDelete : pathsToDelete) {
rel.setPersonA(personA);     rel.setPersonB(personB);     rel.setRelationshipType(relType);    ps.saveRelationship(rel);    }    public void voidRelationship(Integer relationshipId, String voidReason) {
return false;          }         if (!expected.getType().equalsIgnoreCase(actual.getType().toString())) {              return false;          }
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.addFlag(Flag.RESTART_ALL_SERVICES)             .setAllowExpression(true)             .setCorrector(MapAttributeDefinition.LIST_TO_MAP_CORRECTOR)            .setValidator(new StringLengthValidator(1, true))             .build();      public static AttributeDefinition[] ALL_ATTRIBUTES = new AttributeDefinition[]{CODE, VAULT_OPTIONS};
KeyShell ks = new KeyShell();      ks.setConf(new Configuration());      rc = ks.run(args1);     assertEquals(1, rc);      assertTrue(outContent.toString().contains("There are no valid " +    "KeyProviders configured."));    }
private void parameterBind(CodeBuilder builder, Class<?>[] interceptorParamTypes) {          int i = 0;          int argNum = targetMethod.getParameterTypes().length;         int interceptorArgNum = interceptorParamTypes.length - 1;          int matchNum = Math.min(argNum, interceptorArgNum);          for (; i < matchNum; i++) {
@Test      public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          byte[] request = getRequestBytes(null, header);          Request obj = (Request) decode(request);          Assert.assertEquals(null, obj.getData());
@ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Order.class),          @ApiResponse(code = 400, message = "Invalid Order", response = Void.class) })     Order placeOrder(@Valid Order body) throws Exception;  }
public interface AdvancedSchematronEndpointBuilder              extends                  EndpointProducerBuilder {          default SchematronEndpointBuilder basic() {
* Builder for endpoint for the Kubernetes Persistent Volume Claim       * component.       */     public interface KubernetesPersistentVolumesClaimsEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder advanced() {
command = new DeleteCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if (args[i].equals("roll")) {          String keyName = "--help";
public void configure() throws Exception {                  from("direct:start")                         .multicast(new MyAggregationStrategy())                            .parallelProcessing().timeout(1000).to("direct:a", "direct:b", "direct:c")                         .end()                         .to("mock:result");                 from("direct:a").delay(5000).setBody(constant("A"));                  from("direct:b").setBody(constant("B"));
*     * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.    */  public abstract boolean supportsNormalizedKey();   /**    * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized
@Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/test");          servlet.service(request, response);
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
/**       * If {@code true} then disable META-INF/services lookup globally on client/server.       * <p>      * By default Jersey lookups SPI implementations described by META-INF/services/* files.       * Then you can register appropriate provider classes by {@link javax.ws.rs.core.Application}.       * </p>       * <p>
public interface GoraEndpointBuilder              extends                  GoraEndpointConsumerBuilder, GoraEndpointProducerBuilder {          default AdvancedGoraEndpointBuilder advanced() {
* @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName);      /**
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Test      public void testOperationTimeoutForLongRunningRemoteOperation() throws Exception {         int callTimeoutMillis = 5000;          Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeoutMillis);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);
"1: " + getCheckMessage(MSG_KEY_MISMATCH),          };         verify(checkConfig,                 getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java"),                 expected);      }      @Test
}    @Override   public List<Long> snapshotState(long checkpointId, long timestamp) {     return Collections.singletonList(ms);    }    @Override   public void restoreState(List<Long> state) {     for (Long l : state) {      ms += l;     }
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
command = new DeleteCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if (args[i].equals("roll")) {          String keyName = "--help";
public interface HazelcastMultimapEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {
public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(729);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {System.out.println($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
protected int boundingBoxWidth;   protected int boundingBoxHeight;  protected BasicFontMetrics fontMetrics;   protected String fontName;   protected int fontSize = 12;   protected double lineWidth = 0.3;
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
private TreeSet<ObjectResources> getSortedNodesFor(String rackId) {              return cachedNodes.computeIfAbsent(rackId,                 (rid) -> sortNodes(rackIdToNodes.getOrDefault(rid, Collections.emptyList()), exec, td, rid, perNodeScheduledCount));          }          @Override
* @should return null if no implementation id is defined yet    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public ImplementationId getImplementationId();   /**    * Set the given <code>implementationId</code> as this implementation's unique id
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
public interface ElasticsearchEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedElasticsearchEndpointBuilder advanced() {
@Override      public Map<AgentInfo, PinpointRouteResponse> invoke(List<AgentInfo> agentInfoList, byte[] payload)              throws TException {         return invoke(agentInfoList, payload, DEFAULT_FUTURE_TIMEOUT);      }      @Override
.retInt();      }     private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)      {          MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), "getSizeInBytes", type(long.class));
node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");      node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));     assertTrue(node1.isEquivalentToTyped(node2));    }    public void testCheckTreeTypeAwareEqualsSameNull() {
String text = simple.evaluate(exchange, String.class);                 Constructor<?> constructor = type.getConstructor(String.class);                  cause = (Exception) constructor.newInstance(text);                  exchange.setException(cause);              } else if (cause == null && type!= null) {
public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {          long totalMessages = 50;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),          @ApiResponse(code = 404, message = "User not found", response = Void.class) })     void testEndpointParameters(@FormParam(value = "number")  BigDecimal number,@FormParam(value = "double")  Double _double,@FormParam(value = "pattern_without_delimiter")  String patternWithoutDelimiter,@FormParam(value = "byte")  byte[] _byte,@FormParam(value = "integer")  Integer integer,@FormParam(value = "int32")  Integer int32,@FormParam(value = "int64")  Long int64,@FormParam(value = "float")  Float _float,@FormParam(value = "string")  String string,@FormParam(value = "binary")  byte[] binary,@FormParam(value = "date")  LocalDate date,@FormParam(value = "dateTime")  Date dateTime,@FormParam(value = "password")  String password,@FormParam(value = "callback")  String paramCallback) throws Exception;      @GET      @Consumes({ "*/*" })
WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory(                 getWebSocketLocation(req), null, true);          handshaker = wsFactory.newHandshaker(req);          if (handshaker == null) {              WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse(ctx.channel());
private String charset;      private int bpos;     XMLStreamReaderInputStream(XMLStreamReader reader, String charset, XMLOutputFactory outfactory) {          this.reader = reader;          this.buffer = new byte[BUFFER_SIZE];          this.chunk = new TrimmableByteArrayOutputStream();
public void test_in() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06-05-2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
} else {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            InputStream is = mHdfsFs.open(new Path(filePath));            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
@Override     public void onException(Throwable cause) {     LOG.warn("Async Kafka commit failed.", cause);      failedCommits.inc();     }    };
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
command = new RollCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if ("list".equals(args[i])) {          command = new ListCommand();
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}   @Test  public void userConfigurationJdbcTemplateDependency() {    this.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class))     .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)     .run((context) -> {
*/    public void compact(String tableOrRegionName, String columnFamily)      throws IOException,  InterruptedException {     compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));    }    /**
return additionalReplacements;    }   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
private void reusedConnectionFailsWithPost(TransferKind transferKind, int requestSize)        throws Exception {     server.enqueue(new MockResponse().setBody("A").setSocketPolicy(DISCONNECT_AT_END));      server.enqueue(new MockResponse().setBody("B"));      server.enqueue(new MockResponse().setBody("C"));      server.play();
log.info("onShutdown Stopping thread: " + thread.getName());        thread.stop();       }      catch (Exception ex) {        log.error(ex.getMessage(), ex);       }      }
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));          assertTrue(byteBuf.release());         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);      }      private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);      }  }
public interface AdvancedHazelcastMultimapEndpointBuilder              extends                  AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {          default HazelcastMultimapEndpointBuilder basic() {
public boolean isDuplicate(Request request, Task task) {          Jedis jedis = pool.getResource();          try {             return jedis.sadd(getSetKey(task), request.getUrl()) >= 0;          } finally {              pool.returnResource(jedis);          }
Vector<RelationshipListItem> ret = new Vector<RelationshipListItem>();     List<Relationship> rels = Context.getPersonService()           .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));     for (Relationship rel : rels) {      if (!rel.isVoided()              && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(
final JsonFactory jsonFactory = new YAMLFactory();          final ObjectMapper mapper = factory.build(jsonFactory);         assertThat(mapper.getFactory())                 .isSameAs(jsonFactory);      }
* you could append "?olderThan=2912″ to your request to get the 20           * messages prior to those you're seeing.           */         private Long olderThan = -1L;          /**           * Returns messages newer than the message ID specified as a numeric           * string. This should be used when polling for new messages. If you're
LibraryCacheManager.unregister(executionGraph.getJobID());    } catch (IOException ioe) {     if (LOG.isWarnEnabled()) {     LOG.warn(ioe);     }    }   }
}    factory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));    factory.addConfigurations(configurations[2], configurations[3]);   this.container = factory.getEmbeddedServletContainer();    InOrder ordered = inOrder((Object[]) configurations);    for (Configuration configuration : configurations) {     ordered.verify(configuration).configure((WebAppContext) anyObject());
}      else {      log.error("PID contains identifier with no assigning authority");       continue;      }     }
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(ClassNotFoundException.class))          );      }
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
* @see * @see NormalizableKey    */  public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;   /**    * Reads the record back while de-normalizing the key fields. This must only be used when
*/      public ResponseList<Status> getHomeTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", true));      }
if (ClassReflection.isAssignableFrom(Enum.class, actualType)) {     if (typeName!= null && (knownType == null || knownType!= actualType)) {       if (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();
public interface AdvancedAtomixQueueEndpointBuilder              extends                  AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {          default AtomixQueueEndpointBuilder basic() {
@Override      public String toString() {         return end + " End Message Interceptor";      }  }
public Container<T> prefSize (float width, float height) {   prefSize(new Fixed(width), new Fixed(height));    return this;   }
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10853, value = "Unexpected initial path key %s")      IllegalStateException unexpectedInitialPathKey(String key);      /**
new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {        @Override        public Integer execute(Jedis connection) {         connection.psubscribe(jedisPubSub, patterns);          return 0;        }      }.runWithAnyNode();
public void testBurstySampling() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(2);          mock.setResultWaitTime(3000);          List<Exchange> sentExchanges = new ArrayList<Exchange>();
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertEquals(bytes, encoding.decode(encoded));    }   private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {      try {        encoding.decode(cannotDecode);        fail("Expected IllegalArgumentException");
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
}      for (String child : children) {        String childSrcPath = PathUtils.concatPath(src, child);       String childDstPath = PathUtils.concatPath(src, child);        boolean success;        if (isDirectory(childSrcPath)) {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface SqsEndpointBuilder              extends                  SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {          default AdvancedSqsEndpointBuilder advanced() {
CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();    }   static final ImmutableList<PairedStats> ALL_PAIRED_STATS =        ImmutableList.of(            EMPTY_PAIRED_STATS,            ONE_VALUE_PAIRED_STATS,
*            The method definition ast.       * @return The start column position of the method.       */     private static int getMethodDefLineStart(DetailAST mainAst) {          int lineStart = mainAst.findFirstToken(TokenTypes.IDENT).getLineNo();
@Override   public PactRecord jsonToRecord(IJsonNode value, PactRecord target, EvaluationContext context) {    IObjectNode others;   if (target == null || target.getNumFields() < this.mappings.size() + 1) {     target = new PactRecord(this.mappings.size() + 1);     for (int i = 0; i < this.mappings.size(); i++)
* @should return all global properties in the database    */   @Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)  public List<GlobalProperty> getAllGlobalProperties();   /**    * Save the given list of global properties to the database.
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public void test_kr_3() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년05월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
this.functionManager = functionManager;          Optional<Duration> totalCpuTime = stats.map(s -> new Duration(s.values().stream()                .mapToLong(planNode -> planNode.getPlanNodeCpuTime().toMillis())                 .sum(), MILLISECONDS));          Optional<Duration> totalScheduledTime = stats.map(s -> new Duration(s.values().stream()                .mapToLong(planNode -> planNode.getPlanNodeScheduledTime().toMillis())                 .sum(), MILLISECONDS));          this.representation = new PlanRepresentation(planRoot, types, totalCpuTime, totalScheduledTime);
*       * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
retract(view, ((AbstractNode) node));          }         graphVersion.incNodeAndEdgeVersion();          dhns.getWriteLock().unlock();          dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);      }
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ticker.advance(16000000);      stopwatch.start();     assertEquals(9, stopwatch.elapsed(MILLISECONDS));      ticker.advance(25000000);     assertEquals(34, stopwatch.elapsed(MILLISECONDS));      stopwatch.stop();      ticker.advance(36000000);     assertEquals(34, stopwatch.elapsed(MILLISECONDS));    }    @GwtIncompatible("String.format()")
* @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors);   /**    * Returns a list of locales used by the user when searching.
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
ticker.advance(4000000);      stopwatch.stop();      ticker.advance(9000000);     assertEquals(4, stopwatch.elapsed(MILLISECONDS));    }    public void testElapsedMillis_multipleSegments() {
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
+ " interface; try using @AutoAnnotation instead", type);      }     ImmutableSet<ExecutableElement> methods =         getLocalAndInheritedMethods(type, processingEnv.getElementUtils());     ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(type, methods);      String fqExtClass = TypeSimplifier.classNameOf(type);      List<AutoValueExtension> appliedExtensions = new ArrayList<AutoValueExtension>();
@Configuration   @ConditionalOnBean(SolrServer.class)  @ConditionalOnEnabledHealthIndicator("solr")   public static class SolrHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {
public interface AdvancedJmsEndpointBuilder              extends                  AdvancedJmsEndpointConsumerBuilder, AdvancedJmsEndpointProducerBuilder {          default JmsEndpointBuilder basic() {
{      private final IdentityHashMap<JoinNode, SourceHashProvider> joinHashes = new IdentityHashMap<>();     public synchronized SourceHashProvider getSourceHashProvider(JoinNode node, ExecutionPlanner executionPlanner)      {          SourceHashProvider hashProvider = joinHashes.get(node);          if (hashProvider == null) {
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.trace("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.trace("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
}   Task task;    synchronized (this) {     final Task runningTask = this.runningTasks.get(id);
final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc("title"), 1, 2);          assertThat(page1.pagination().getCount()).isEqualTo(2);         assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5);          assertThat(page1.delegate())                 .extracting("title")                 .containsExactly("hello2", "hello3");
@SuppressWarnings("unchecked")    @Override   public V value(N node) {      Object value = adjacentNodeValues.get(node);      if (value == PRED) {        return null;
return swagger;      }     private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {          List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs());          Collections.sort(verbs, new VerbOrdering());
}      public class PutItemsThread extends Thread {         public static final int MAX_ITEMS = 100;          public final MyEntryListener listener = new MyEntryListener();          public HazelcastInstance client;
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
public interface GuavaEventBusEndpointBuilder              extends                  GuavaEventBusEndpointConsumerBuilder, GuavaEventBusEndpointProducerBuilder {          default AdvancedGuavaEventBusEndpointBuilder advanced() {
LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),          files[0].isFolder());      expected +=         getLsResultStr("/testRoot/testDir", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,              testUser, testUser, files[1].getPermission(), files[1].isFolder());      expected += getLsResultStr("/testRoot/testFileC", files[3].getCreationTimeMs(), 30,          LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),
@Configuration   @ConditionalOnBean(RabbitTemplate.class)  @ConditionalOnEnabledHealthIndicator("rabbit")   public static class RabbitHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
/*  * Copyright 2012-2018 the original author or authors.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.
final PreparedErrorHandler key = new PreparedErrorHandler(endpoint.getEndpointUri(), processor);              answer = errorHandlers.get(key);
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }  }
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
if (sizeModeClass.equals("FixedSizeMode")) {              sizeMode = VizController.getInstance().getTextManager().getSizeModes()[0];         } else if (sizeModeClass.equals("ProportionalSizeMode")) {              sizeMode = VizController.getInstance().getTextManager().getSizeModes()[2];         } else if (sizeModeClass.equals("ScaledSizeMode")) {              sizeMode = VizController.getInstance().getTextManager().getSizeModes()[1];          }
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_0.getUriString(), SecuritySubsystemParser::new);          context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_1.getUriString(), SecuritySubsystemParser::new);          context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_2.getUriString(), SecuritySubsystemParser::new);         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_3_0.getUriString(), SecuritySubsystemParser_3_0::new);      }  } \ No newline at end of file
EnvironmentTestUtils.addEnvironment(this.context, "security.ignored:none");    this.context.refresh();   assertEquals(3,      this.context.getBean(FilterChainProxy.class).getFilterChains().size());   }
public void testRouteStartupOrder() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMessageCount(1);          template.sendBody("direct:start", "Hello World");
.replaceAll("\\\\", "/");                      ObjectMetadata metadata = new ObjectMetadata();                     ObjectTagging objectTagging = new ObjectTagging();
}                   private void reportPrivateCtor() {              withPrivateCtor = true;          }                   private void reportNonPrivateCtor() {              withNonPrivateCtor = true;          }
}     public boolean hasChild (String name) {     if (children == null) return false;      return getChildByName(name)!= null;     }
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags? "&exclude=hashtags" : ""), false));      }
new StaticFieldGetterSetterInliner(root).run();     GatherGetterAndSetterProperties.update(compiler, externs, root);    }    class StaticFieldGetterSetterInliner {
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
System.out.println("-- host configuration");              final ModelNode hostResult = result.get(RESULT).clone();             System.out.println(hostResult);              System.out.println("--");          } finally {
if (index == 0x7f) {                          state = READ_LITERAL_HEADER_NAME_LENGTH;                      } else {                         if (index > maxHeadersLength - headersLength) {                              maxHeaderSizeExceeded();                          }                          nameLength = index;
/*  * Copyright 2012-2018 the original author or authors.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/   private void poll() {    if (invalidCredentials || this.myqOnlineData == null) {    logger.trace("Invalid Account Credentials");     return;    }
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().shutdown();              }          };
if (isStatisticsEnabled()) {              if (result) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNanos(System.nanoTime() - start);              }             statistics.addGetTimeNanos(System.nanoTime() - start);              if (isHit) {                  statistics.increaseCacheHits(1);              } else {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
, (args = args.rest()).first()       , args.rest());     case 10:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
public static String getProperty(String property) {      String ret = System.getProperty(property);     Preconditions.checkArgument(ret!= null, property + " is not configured.");      LOG.debug(property + " : " + ret);      return ret;    }
@AfterClass      public static void killAllHazelcastInstances() throws IOException {         factory.terminateAll();      }      @Test
}   public void glGenTextures (int n, int[] textures, int offset) {   GL.glGenTextures(n, toBuffer(textures, offset), 0);   }   public void glGetIntegerv (int pname, int[] params, int offset) {
}      @SuppressWarnings("ResultOfMethodCallIgnored")     @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = ".*Failing getObject call with " + SC_NOT_FOUND + ".*")      public void testReadNotFound()              throws Exception      {
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
*  *  @see java.util.Comparator    */  public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;
final DimensionSelector dimSelector = dims.get(0);          final IndexedInts row = dimSelector.getRow();         if (row == null || row.size() == 0) {            ByteBuffer newKey = key.duplicate();            newKey.putInt(dimSelector.getValueCardinality());            unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));
private static final FsAction[] SVALS = values();   FsAction(String s) {      mSymbol = s;    }
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
try {        info = ShellUtils.getUnixMountInfo();      } catch (IOException e) {       LOG.debug("Failed to get mount information: {}", e.getMessage());        return;      }      for (UnixMountInfo mountInfo : info) {
public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {       if (jdbcType == null) {          ps.setString(i, parameter.name());       } else {          ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);       }     }
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (record == null || isExpired) {                  removed = false;                  if (isEventsEnabled()) {                     publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                            origin, completionId));                  }              } else {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
assertInvalidFunction("ARRAY_SORT(ARRAY[color('red'), color('blue')])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid request", response = Void.class),          @ApiResponse(code = 404, message = "Not found", response = Void.class) })     void testEnumParameters(@FormParam(value = "enum_form_string_array")  List<String> enumFormStringArray,@FormParam(value = "enum_form_string")  String enumFormString,@HeaderParam("enum_header_string_array")   @ApiParam("Header parameter enum test (string array)") List<String> enumHeaderStringArray,@HeaderParam("enum_header_string")  @DefaultValue("-efg")  @ApiParam("Header parameter enum test (string)") String enumHeaderString,@QueryParam("enum_query_string_array")   @ApiParam("Query parameter enum test (string array)")  List<String> enumQueryStringArray,@QueryParam("enum_query_string")  @DefaultValue("-efg")  @ApiParam("Query parameter enum test (string)")  String enumQueryString,@QueryParam("enum_query_integer")   @ApiParam("Query parameter enum test (double)")  Integer enumQueryInteger,@FormParam(value = "enum_query_double")  Double enumQueryDouble) throws Exception;      @GET      @Path("/jsonFormData")
String other = null;      if (args.length > 1 && args[1] instanceof String)        other = (String) args[1];       recursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);
}   public SortedMap<String, Histogram> getHistograms(MetricFilter filter) {   return adaptMetrics(Histogram.class, reg.getHistograms(transformFilter(filter)));   }   public SortedMap<String, Meter> getMeters() {
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
AlluxioURI src = new AlluxioURI("/file");      AlluxioURI dst = new AlluxioURI("/file2");      RenameOptions renameOptions = RenameOptions.defaults();     Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst, renameOptions);      mFileSystem.rename(src, dst, renameOptions);     Mockito.verify(mFileSystemMasterClient).rename(src, dst, renameOptions);    }    /**
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private Integer port = 5000;    @Override    protected void applyToCrshShellConfig(Properties config) {     if (this.enabled) {     config.put("crash.telnet.port", String.valueOf(this.port));     }    }
public interface AdvancedCMISEndpointBuilder              extends                  AdvancedCMISEndpointConsumerBuilder, AdvancedCMISEndpointProducerBuilder {          default CMISEndpointBuilder basic() {
public void read(final Kryo kryo, final Input input) {   this.jobID = kryo.readObject(input, JobID.class);    this.jobName = input.readString();
state = MachineState.RUNNING;              }             this.startTime = Time.currentTimeMillis();              this.newAssignment = newAssignment;              this.pendingLocalization = null;              this.pendingDownload = null;
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
@Test      public void testGetStateToBindingValueConverter() {          NumberItem item = new NumberItem(NUMBER_ITEM_NAME);         converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);          StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);          assertEquals(IntegerDecimalConverter.class, converter.get("bla").getClass());      }
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);   /**    * Completely remove the given global property from the database
final R record = createRecord(value, expirationTime);          updateHasExpiringEntry(record);          if (isEventsEnabled()) {             publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),                                                  expirationTime, origin, completionId));          }          return record;      }
}   public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {   GL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);   }   public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {   GL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);   }   public void glCullFace (int mode) {
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
log.debug("Optimistic locking exception : " + exception);              } else {               log.debug("Error while closing command context", exception);              }              transactionContext.rollback();
@XmlEnum(String.class)  public enum WaitForTaskToComplete {     Newer, IfReplyExpected, Always  }
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid pet value", response = Void.class) })     void deletePet(@PathParam("petId") @ApiParam("Pet id to delete") Long petId,@HeaderParam("api_key")   String apiKey) throws Exception;      @GET      @Path("/findByStatus")
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.trace("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.trace("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
}     public boolean hasChildRecursive (String name) {     if (children == null) return false;      return getChildByNameRecursive(name)!= null;     }
if (ObjectProperty.isType(type) || node.get("properties")!= null) {              detailNode = node.get("additionalProperties");             if (detailNode!= null && detailNode.get("properties")!= null) {                  Property items = propertyFromNode(detailNode);                  if (items!= null) {                      MapProperty mapProperty = new MapProperty(items).description(description);
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
new ModelNode[] { removeDwm, removeContext });              mcc.execute(compositeOp);              ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,                     CONTAINER_0.equals(containerId)? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),                     serverPort);          }          protected abstract Policy getPolicy();
public void generate(Exchange exchange) {         StringBuilder messages = new StringBuilder();          for (int i = 1; i < 100; i++) {            messages.append("Test Message: " + i + ",");           }           template.sendBody(messages.toString());
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param cause the cause of the error.       */      @LogMessage(level = Level.WARN)     @Message(id = 10806, value = "Caught exception closing input stream")      void caughtExceptionClosingInputStream(@Cause Throwable cause);      /**
}      public class PutItemsThread extends Thread {         public static final int MAX_ITEMS = 100;          public final MyEntryListener listener = new MyEntryListener();          public HazelcastInstance client;
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(200);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {        @Override        public Set<byte[]> execute(Jedis connection) {         return connection.zrevrangeByLex(key, max, min);        }      }.runBinary(key);    }
DIAMOND(264),      IRON_INGOT(265),      GOLD_INGOT(266),     IRON_SWORD(267, 1, 250),      WOOD_SWORD(268, 1, 59),      WOOD_SPADE(269, 1, 59),      WOOD_PICKAXE(270, 1, 59),
template.sendBodyAndHeader("file:          MockEndpoint mock = getMockEndpoint("mock:result4");         mock.expectedBodiesReceivedInAnyOrder("Hello World 3");          assertMockEndpointsSatisfied();          oneExchangeDone.matchesMockWaitTime();
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
}          }          if (logger.isInfoEnabled()) {             logger.info("defineClass pluginClass:{} cl:{}", className, classLoader);          }          final byte[] bytes = ct.toBytecode();          return (Class<?>)DEFINE_CLASS.invoke(classLoader, ct.getName(), bytes, 0, bytes.length);
public interface AdvancedEtcdEndpointBuilder              extends                  AdvancedEtcdEndpointConsumerBuilder, AdvancedEtcdEndpointProducerBuilder {          default EtcdEndpointBuilder basic() {
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().shutdown();              }          };
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple));    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
protected void flushDirtyLogs() {          log.debug("Checking for dirty logs to flush...");         final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();          for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {              final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();              final Log kafkaLog = topicAndPartitionLogEntry.getValue();
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
URIStatus uriStatus = fs.getStatus(uri);        Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),            (short) uriStatus.getMode());       OutputStream out = closer.register(ufs.create(dstPath.toString(),            new CreateOptions().setPermission(perm)));        ret = IOUtils.copyLarge(in, out);      } catch (Exception e) {
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
private boolean isMissing(Map<String, Object> arguments,     OperationParameter parameter) {    if (!parameter.isMandatory()) {    return false;    }    return arguments.get(parameter.getName()) == null;   }
when(mock.getColumn()).thenReturn(1);          when(mock.getMessage()).thenReturn("Mocked message.");          when(mock.getFileName()).thenReturn("InputMockFile.java");         final AuditEventFormatter formatter = new AuditEventDefaultFormatter();          final String expected = "[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]";
}   @Test  void testHealth() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
if (CxfPayload.class.isAssignableFrom(value.getClass())) {              CxfPayload<?> payload = (CxfPayload<?>) value;             if (payload!= null && payload.getBodySources().size() == 1) {                  if (type.isAssignableFrom(Document.class)) {                      Source s = payload.getBodySources().get(0);                      Document d;
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.parseLong(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
configuration = new Configuration();                  configuration.setHostLanguage(Configuration.XQUERY);                  configuration.setStripsWhiteSpace(isStripsAllWhiteSpace()? Whitespace.ALL : Whitespace.IGNORABLE);                 LOG.debug("Created new Configuration {}", configuration);              } else {                  LOG.debug("Using existing Configuration {}", configuration);              }
public void addAll (char[] array, int offset, int length) {     char[] items = this.items;     int sizeNeeded = size + length ;    if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;    }
return (T) fastConstructor.newInstance(arguments);        }        public List<Parameter<?>> getParameters() {         return Parameter.forConstructor(fastConstructor, errorHandler);        }        public Member getMember() {         return fastConstructor.getJavaConstructor();        }      };    }
}   public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {   GL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);   }   public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {   GL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);   }   public void glCullFace (int mode) {
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers");      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
if (v.getLock() == LOCK_SUCCESS) {                      continue;                  }                 if (v.getCreationTime() + timeToLive < now) {                      iter.remove();                  } else if (maxSize > 0 && maxSize!= Integer.MAX_VALUE) {                      if (entries == null) {
empiricalCountsForADoc(eHat4Update, ind);       expectedCountsForADoc(weights, e4Update, ind);        /* the commented out code below is to iterate over the batch docs instead of iterating over all           parameters at the end, which is more efficient; but it would also require us to clearUpdateEs()
@SuppressWarnings("unchecked")    @Override   public void removePredecessor(N node) {      Object previousValue = adjacentNodeValues.get(node);      if (previousValue == PRED) {        adjacentNodeValues.remove(node);
metrics.addAll(getStatistics("integration.handler." + name + ".duration",       exporter.getHandlerDuration(name)));    }   metrics.add(new Metric<Integer>("integration.activeHandlerCount", exporter    .getActiveHandlerCount()));    metrics.add(new Metric<Integer>("integration.handlerCount", exporter     .getHandlerCount()));    metrics.add(new Metric<Integer>("integration.channelCount", exporter
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
, (args = args.rest()).first()       , args.rest());     case 8:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
@Override   public void internalReceiveCommand(String itemName, Command command) {    super.internalReceiveCommand(itemName, command);   logger.trace("MyQ binding received command '{}' for item '{}'",      command, itemName);    if (myqOnlineData!= null) {     computeCommandForItem(command, itemName);
*     * @return True, if the comparator supports that specific form of serialization, false if not.    */  public abstract boolean supportsSerializationWithKeyNormalization();   /**    * Gets the number of bytes that the normalized key would maximally take. A value of
static final HazelcastProperty MAX_TOLERATED_MISS_COUNT              = new HazelcastProperty("hazelcast.invalidation.max.tolerated.miss.count", 10);      static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS             = new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds", 60, SECONDS);      static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS             = new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds", 30, SECONDS);      static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;
}        } catch (IOException e) {          out.println("Cannot list keys for KeyProvider: " + provider             + ": " + e.toString());          throw e;        }      }
@Test   public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {console.log($ctx.toStringTree(null, this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
};       final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface RestletEndpointBuilder              extends                  RestletEndpointConsumerBuilder, RestletEndpointProducerBuilder {          default AdvancedRestletEndpointBuilder advanced() {
}      if (isBlockLocked(blockId) ||!mToRemoveBlockIdSet.contains(blockId)) {       return true;      }      try {        if (!mFs.delete(getBlockFilePath(blockId), false)) {
this.startTime = tick();              nextScaleTime.set(System.nanoTime() + RESCALE_THRESHOLD);          } finally {             unlockForRescale();          }      }
}    public static final long FIXED_OVERHEAD =       ClassSize.align((20 * ClassSize.REFERENCE) + (7 * Bytes.SIZEOF_LONG)                + (3 * Bytes.SIZEOF_INT) + Bytes.SIZEOF_BOOLEAN);    public static final long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD
throw new IOException("Address is required!");          }         ClientConnection clientConnection = connections.get(target);          if (clientConnection == null) {             final Object lock = getLock(target);              synchronized (lock) {                 clientConnection = connections.get(target);                  if (clientConnection == null) {                      final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);                      final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);
public static final SecurityContext NONE = new SecurityContext() {    @Override    public Principal getPrincipal() {
taskManagerQueryServiceGatewaysFuture.whenCompleteAsync(       (Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {        if (throwable!= null) {        LOG.debug("Requesting TaskManager's path for query services failed.", throwable);        } else {         List<String> taskManagersToRetain = queryServiceGateways         .stream()
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue);   /**    * @param aClass class of object getting length for
if (currentStage!= NodeStage.DONE && sendMessage() == false) {      currentStage = currentStage.getNextStage();      stageAdvanced = true;
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}              public void unselect(Workspace workspace) {                 if (model.getSelectedLayout()!= null && workspace!= null) {                      model.saveProperties(model.getSelectedLayout());                  }              }
grammarBuilder.append("  | '(' e ')'   {$v = $e.v;} grammarBuilder.append("  | left=e INC  {$v = $left.v + 1;} grammarBuilder.append("  | left=e DEC  {$v = $left.v - 1;}   grammarBuilder.append("  | ID          {$v = 3;}    grammarBuilder.append("  ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'..'9'+ ;\n");
}          }         }        catch (Exception t) {          if (log.isDebugEnabled()) {           log.debug("Could not set field " + field.getName() + " to null in class "                   + clazz.getName(), t);
this.bufferMemorySize = bufferMemorySize;      }     public String getRequestRequiredAcks() {          return requestRequiredAcks;      }
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
public interface CouchbaseEndpointBuilder              extends                  CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {          default AdvancedCouchbaseEndpointBuilder advanced() {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public void test_cn_1() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年5月6日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
if (getSslStoreProvider()!= null) {     try {      factory.setKeyStore(getSslStoreProvider().getKeyStore());     factory.setTrustStore(getSslStoreProvider().getTrustStore());     }     catch (Exception ex) {      throw new IllegalStateException("Unable to set SSL store", ex);
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:      */      public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json", true));      }      /**
NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));          } catch (IOException ioe) {            LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId()               + " will not be in TachyonStorage. Exception:" + ioe.getMessage());            mShouldCacheCurrentBlock = false;          }        } else {
for (int i = 0; i < noOfTasks; i++) {     for (int j = 0; j < 2 + i; j++) {     final String part = new Path(bucketPath, "test-" + i + '-' + j).getPath();      Assert.assertTrue(paths.contains(part));      paths.remove(part);     }
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public boolean hasDuplicateUsername(String username, String systemId, Integer userId) {     if (username == null || username.length() == 0)      username = "-";    if (systemId == null || systemId.length() == 0)      systemId = "-";     if (userId == null)
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNanos(System.nanoTime() - start);          }          return result;      }
@Test      public void test_Decode_Error_Length() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @return A {@link Broadcastable} used to broadcast events.       */      @POST     @Broadcast(value = {StringFilterAggregator.class}      @Path("aggregate")      public Broadcastable aggregate(@FormParam("message") String message) {          return broadcast(message);
@Test      public void test_Decode_Error_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
public interface AdvancedSjms2EndpointBuilder              extends                  AdvancedSjms2EndpointConsumerBuilder, AdvancedSjms2EndpointProducerBuilder {          default Sjms2EndpointBuilder basic() {
fail |= inconsistent( record,                      "next record set but length less than maximum" );          }         if ( record.getLength() > store.getRecordSize()                                    - store.getRecordHeaderSize() )          {              fail |= inconsistent( record,                      "length larger than maximum for store" );          }
* @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName);      /**
}                   protected final int getMessageLength() {              return currentOutputPosition;          }
}              }          }         if (securityDomain!= null &&! securityDomain.isEmpty())              description.setSecurityDomain(securityDomain);         else if (globalSecurityDomain!= null &&!globalSecurityDomain.isEmpty())              description.setSecurityDomain(globalSecurityDomain);      }
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_cn() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016-05-06\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
CxfEndpoint endpoint = (CxfEndpoint)camelContext.getEndpoint("cxf:bean:routerEndpoint");         assertTrue(endpoint.getBus().getInInterceptors().size() == 1);          assertEquals(LoggingInInterceptor.class, endpoint.getBus().getInInterceptors().get(0).getClass());      }
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
public interface DockerEndpointBuilder              extends                  DockerEndpointConsumerBuilder, DockerEndpointProducerBuilder {          default AdvancedDockerEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
public CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {     return (configurer) -> {      CodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();     defaults.jackson2JsonDecoder(        new Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));     defaults.jackson2JsonEncoder(        new Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));     };    }
} catch (ConcurrentModificationException ex) {          continue;        } catch (Exception ex) {         LOG.warn("Cache flusher failed for entry " + fqe);          if (!server.checkFileSystem()) {            break;          }
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final String name = def.getName();                      if (name!= null && name.equals(propertyName)) {                          final AnnotatedMember propMember = def.getPrimaryMember();                         final JavaType propType = propMember.getType();                          if (PrimitiveType.fromType(propType)!= null) {                              return PrimitiveType.createProperty(propType);                          } else {
String expected = "";      expected += getLsNoAclResultStr("/testRoot/testFileA", files[0].getCreationTimeMs(), 10,          LsCommand.STATE_FILE_IN_MEMORY);     expected += getLsNoAclResultStr("/testRoot/testDir", files[1].getCreationTimeMs(), 1,          LsCommand.STATE_FOLDER);      expected += getLsNoAclResultStr("/testRoot/testFileC", files[3].getCreationTimeMs(), 30,          LsCommand.STATE_FILE_NOT_IN_MEMORY);
return getClass().getSimpleName() + "[" + labelScanStore + ", prio:" + priority + "]";      }     private interface FullStoreChangeStream extends Iterable<NodeLabelUpdate>      {          PrimitiveLongIterator labelIds();
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
rel.setPersonA(personA);     rel.setPersonB(personB);     rel.setRelationshipType(relType);    ps.saveRelationship(rel);    }    public void voidRelationship(Integer relationshipId, String voidReason) {
simpleRpcEndpoint.shutDown();   CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture();
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
public interface WeatherEndpointBuilder              extends                  WeatherEndpointConsumerBuilder, WeatherEndpointProducerBuilder {          default AdvancedWeatherEndpointBuilder advanced() {
private static final String MOVE_COST_KEY = "hbase.master.balancer.stochastic.moveCost";      private static final String MAX_MOVES_PERCENT_KEY =          "hbase.master.balancer.stochastic.maxMovePercent";     private static final float DEFAULT_MOVE_COST = 50;      private static final int DEFAULT_MAX_MOVES = 600;      private static final float DEFAULT_MAX_MOVE_PERCENT = 0.25f;
ZIP_SERVER(0x24,"ZIP_SERVER",null),    SWITCH_BINARY(0x25,"SWITCH_BINARY",ZWaveBinarySwitchCommandClass.class),    SWITCH_MULTILEVEL(0x26,"SWITCH_MULTILEVEL",ZWaveMultiLevelSwitchCommandClass.class),   SWITCH_ALL(0x27,"SWITCH_ALL",ZWaveSwithcAllCommandClass.class),    SWITCH_TOGGLE_BINARY(0x28,"SWITCH_TOGGLE_BINARY",null),    SWITCH_TOGGLE_MULTILEVEL(0x29,"SWITCH_TOGGLE_MULTILEVEL",null),    CHIMNEY_FAN(0x2A,"CHIMNEY_FAN",null),
public interface AdvancedSftpEndpointBuilder              extends                  AdvancedSftpEndpointConsumerBuilder, AdvancedSftpEndpointProducerBuilder {          default SftpEndpointBuilder basic() {
if(LOG.isDebugEnabled()) {            LOG.debug("not assigning region (on kill list): " +             info.getRegionNameAsString());          }          return;        }
* @return nullToZero       */      private static Long nullToZero(Long value) {         return!Objects.isNull(value)? value : 0;      }      /**
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(InstantiationException.class))          );      }
private final CloseGuard closeGuard = CloseGuard.get();   AndroidPlatform(Class<?> sslParametersClass, OptionalMethod<Socket> setUseSessionTickets,        OptionalMethod<Socket> setHostname, OptionalMethod<Socket> getAlpnSelectedProtocol,        OptionalMethod<Socket> setAlpnProtocols) {      this.sslParametersClass = sslParametersClass;
if (NodeUtil.isFunctionBind(expr)) {        return true;      }     if (!expr.isGetProp() ||!expr.getLastChild().getString().equals("bind")) {        return false;      }      Node recv = expr.getFirstChild();
SortedMap<String, Properties> map = new TreeMap<String, Properties>();          while (componentDescriptionIter!= null && componentDescriptionIter.hasMoreElements()) {              URL url = componentDescriptionIter.nextElement();             LOG.trace("Finding components in url: {}", url);              try {                  Properties properties = new Properties();                  properties.load(url.openStream());
* {@inheritDoc}       */      public List<Trends> getWeeklyTrends() throws TwitterException {         return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()                  + "trends/weekly.json"));      }
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags? "&exclude=hashtags" : ""), false));      }
public int read(String table, String key, Set<String> fields,              HashMap<String, ByteIterator> result) {          if (fields == null) {             StringByteIteartor.putAllAsByteIterators(result, jedis.hgetAll(key));          }          else {              String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);
public interface AdvancedFlinkEndpointBuilder              extends                  EndpointProducerBuilder {          default FlinkEndpointBuilder basic() {
private interface ChannelCallback<T> {          T doWithChannel(Channel channel) throws Exception;      }
}    @Override   public void log (String tag, String message, Throwable exception) {     if (logLevel >= LOG_INFO) {      System.out.println(tag + ": " + message);      exception.printStackTrace(System.out);
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);                  } else if ("javax.ws.rs.DefaultValue".equals(item.annotationType().getName())) {                      try {                         rsDefault = (String) item.annotationType().getMethod("value").invoke(item);                      } catch (Exception ex) {                          LOGGER.error("Invocation of value method failed", ex);                      }
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getHomeTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", true));      }
ControlFlowGraph<Node> computeCFG() {     logger.fine("Computing Control Flow Graph");      Tracer tracer = newTracer("computeCFG");      ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);      process(cfa);
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface KubernetesSecretsEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesSecretsEndpointBuilder advanced() {
*     * @return The closed DataStream.    */  public DataStreamSink<OUT> print() {    DataStream<OUT> inputStream = this.copy();    PrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();   DataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
*      * @param queueName Name of the job queue.     */   @InterfaceAudience.Private   public void setQueueName(String queueName) {      super.setQueueName(queueName);    }
);         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))                 .row("a", "a")                 .row("a", "a")                 .row("b", "b")
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMoveNoop() throws Exception    {      MockStorageService mockS3Client = new MockStorageService();     S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());      mockS3Client.putObject("archive", new S3Object("targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip"));      mockS3Client.putObject("archive", new S3Object("targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json"));
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort);    env.enableCheckpointing(500);    env.setParallelism(parallelism);   env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);   }
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
+ (StringUtils.isEmpty(modelPackage)? "" : (modelPackage + "/")) + dataType;      }           private String getJSDocType(CodegenModel cm, CodegenProperty cp) {          if (Boolean.TRUE.equals(cp.isContainer)) {
long sessionId = IdUtils.createSessionId();        long blockSize = openUfsBlockOptions.getBlockSize();        boolean isSourceLocal = mLocalWorkerAddress.getHost().equals(request.getSourceHost())           && mLocalWorkerAddress.getDataPort() == request.getSourcePort();        try {          if (isSourceLocal) {
taken = watch.stop();          assertEquals(taken, watch.taken());         assertTrue("Should take approx 200 millis, was: " + taken, taken > 150);      }      public void testStopWatchRestart() throws Exception {
this.source = checkNotNull(source, "source");      this.classMatcher = checkNotNull(classMatcher, "classMatcher");      this.methodMatcher = checkNotNull(methodMatcher, "methodMatcher");     this.interceptors = ImmutableList.copyOf(interceptors);    }    public Object getSource() {
* @param ast DetailAST node.       * @return Column number if non-comment node exists, -1 otherwise.       */     private static int findColumnNo(DetailAST ast) {          int resultNo = -1;          DetailAST node = ast;          while (node!= null) {
@SuppressWarnings("unchecked")      public void returnsA500OnExceptions() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          final RuntimeException ex = new RuntimeException("whoops");
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedKMSEndpointBuilder              extends                  EndpointProducerBuilder {          default KMSEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 10843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
public interface SpringBatchEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedSpringBatchEndpointBuilder advanced() {
public interface AsteriskEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedAsteriskEndpointProducerBuilder advanced() {
boolean needPostProjectionCoercion = false;          for (FunctionCall aggregate : analysis.getAggregates(node)) {              Expression rewritten = subPlan.rewrite(aggregate);             Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Bye World", Exchange.FILE_NAME, "mysub/bye.txt");         Thread.sleep(800);          File file = new File(getScpPath() + "/mysub/bye.txt");          assertFileExists(file.getAbsolutePath());
protected void doInitParamsForWebSocket(ServletConfig sc) {          String s = sc.getInitParameter(WEBSOCKET_SUPPORT);         if (s!= null &&!s.equals("")) {              webSocketEnabled = true;              sessionSupport(false);          }
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (getPath() == null && c.getPath()!= null) {              return -1;         } else if (c.getPath() == null && getPath()!= null) {              return 1;          }          v = getPath().compareTo(c.getPath());
private String config( TargetDirectory target, int id, int port )      {          File config = target.file( "zookeeper" + id + ".cfg" );         File dataDir = target.directory( "zk" + id + "data", true );          try          {              PrintWriter conf = new PrintWriter( config );
SimpleMatrix fullVector = RNNUtils.concatenate(leftVector, rightVector);      for (int slice = 0; slice < size; ++slice) {        SimpleMatrix scaledFullVector = fullVector.scale(deltaFull.get(slice));       deltaTensor = deltaTensor.plus(Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose()).mult(scaledFullVector));      }      return deltaTensor.plus(WTDeltaNoBias);    }
public static class Parameters extends AssetLoaderParameters<TiledMap> {       boolean yUp = true;   }   protected static final int FLAG_FLIP_HORIZONTALLY = 0x80000000;
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, paging.asPostParameterList(), true));      }
{11, 6.5f},                  {12, 5.5f},                  {13, 3.5f},                 {14, 4.0f},                  {15, 2.5f},                  {16, 2.0f},          });
ConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);     assumedDuplicateName.setName(duplicateName.getName());     newConcept.addName(assumedDuplicateName);    Errors errors = new BindException(newConcept, "concept");     new ConceptValidator().validate(newConcept, errors);     Assert.assertEquals(false, errors.hasErrors());    }
public interface MQEndpointBuilder extends EndpointProducerBuilder {          default AdvancedMQEndpointBuilder advanced() {              return (AdvancedMQEndpointBuilder) this;          }
@WebServlet(urlPatterns = {"/TestJAXRS2Client"})  public class TestJAXRS2Client extends HttpServlet {     private static final long serialVersionUID = 2L;      /**       * Processes requests for both HTTP
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    final String uri = req.getPathInfo();    if (uri == null || uri.equals("/")) {    handleHome(resp);    } else if (uri.startsWith(metricsUri)) {     handleMetrics(req.getParameter("class"), req.getParameter("full-samples"), resp);    } else if (uri.equals(pingUri)) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {    if (this instanceof SingleOutputStreamOperator) {     ((SingleOutputStreamOperator<?,?>) this).setMutability(false);    }
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
}    @Test public void eolComment() throws IOException {     javaWriter.emitSingleLineComment("foo"); assertCode("    }
}      @Test     @Ignore("AS7-2704 StackOverflowError on creating a web session in cluster") @OperateOnDeployment("deployment-1")      public void testSessionReplication(@ArquillianResource(SimpleServlet.class) URL baseURL) throws IllegalStateException, IOException, InterruptedException {          DefaultHttpClient client = new DefaultHttpClient();
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(638);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @author Stephane Nicoll   * @author Dominic Gunn   * @author András Deák  * @author Andrii Hrytsiuk   */  public class LiquibaseAutoConfigurationTests {
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
Date completionDate = (Date) cde.getValue();     Patient patient = Context.getPatientService().getPatient(Integer.valueOf(patientIdStr));     Program program = pws.getProgram(Integer.valueOf(programIdStr));    if (!pws.getPatientPrograms(patient, program, null, completionDate, enrollmentDate, null, false).isEmpty())      request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR, "Program.error.already");     else {      PatientProgram pp = new PatientProgram();
public interface AdvancedKubernetesPodsEndpointBuilder              extends                  AdvancedKubernetesPodsEndpointConsumerBuilder, AdvancedKubernetesPodsEndpointProducerBuilder {          default KubernetesPodsEndpointBuilder basic() {
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Validates Username and Password then saved sercurityToken to a variable    */   private void login() throws InvalidLoginException, IOException {   logger.trace("attempting to login");    String url = String     .format("%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s",        WEBSITE, enc(appId), enc(userName), enc(password));
ground.createFixture( groundBox, 1 );     groundBox.dispose();    for( int i = 0; i < 10; i++ )     {         boxes.add(createBox( ));     }
if (TACHYON_STREAMING_READ) {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            InputStream is = file.getInStream(ReadType.CACHE);            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void test_Decode_Return_Request_Event_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
public interface JiraEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedJiraEndpointProducerBuilder advanced() {
public interface SqsEndpointBuilder              extends                  SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {          default AdvancedSqsEndpointBuilder advanced() {
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
@Override      protected void wakeup(boolean inEventLoop) {         if (!inEventLoop && wakenUp.compareAndSet(false, true)) {              selector.wakeup();          }      }
@Test   public void testMultipleAlternativesWithCommonLabel_4() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
public interface WeatherEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedWeatherEndpointProducerBuilder advanced() {
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(246);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {System.out.println($ctx.toStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
*       * @param folder the location       */     public synchronized static void configureStaticResources(String folder) {          Assert.notNull(folder, "'folder' must not be null");          if (!staticResourcesSet) {
char[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);    ATN deserialized = new ATNDeserializer().deserialize(serializedAtn);   return new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);   }   public ParserInterpreter createParserInterpreter(TokenStream tokenStream) {
import org.jboss.logging.MessageLogger;  /**  * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain * controller logger messages. See http:   * JBAS message id blocks.   * <p/>
* Set the format for a check.       * @param format a <code>String</code> value       */     public final void setCheckFormat(String format) {          checkFormat = format;      }
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
public interface CoAPEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCoAPEndpointProducerBuilder advanced() {
, (args = args.rest()).first()       , args.rest());     case 7:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
put(43239, new VariableInformation(1, "Total hot water operation time add", NibeDataType.S32, Type.Sensor)); put(43395, new VariableInformation(1, "HPAC relays",       NibeDataType.U8, Type.Sensor)); put(43416, new VariableInformation(1, "Compressor starts EB100-EP14",   NibeDataType.S32, Type.Sensor)); put(43420, new VariableInformation(1, "Total hot water operation time compr", NibeDataType.S32, Type.Sensor)); put(43424, new VariableInformation(1, "Total hot water operation time compr", NibeDataType.S32, Type.Sensor)); put(43427, new VariableInformation(1, "Compressor state EP14",    NibeDataType.U8, Type.Sensor)); put(43514, new VariableInformation(1, "PCA-Base relayes EP14",    NibeDataType.U8, Type.Sensor));
}       private Class<?> findSpi(Class clazz) {          if (clazz.getInterfaces().length == 0) {               return null;           }
int size = s.count();    long[] ret = new long[size];    for(int i = 0; i < size && s!= null; i++, s = s.rest())    ret[i] = ((Number) s.first()).longValue();    return ret;    }  }
final R record = createRecord(value, expirationTime);          updateHasExpiringEntry(record);          if (isEventsEnabled()) {             publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),                                                  expirationTime, origin, completionId));          }          return record;      }
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedJcloudsEndpointBuilder              extends                  AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {          default JcloudsEndpointBuilder basic() {
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
m_address, -dt); return (timeNow + 2000L);      } else {      logger.debug("gave up waiting for query reply from device {}", m_address);      }     } QEntry qe = m_requestQueue.poll();
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
@Message(id = 14238, value = "More than one timer found in database with id %s")      RuntimeException moreThanOneTimerFoundWithId(String id);     @Message(id = 14238, value = "The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.")      String timerServiceIsNotActive();     @Message(id = 14239, value = "This EJB does not have any timeout methods")      String ejbHasNoTimerMethods();  }
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
if (!currentConfigHash.equals(cachedConfigHash)) {                      details.clear();                     details.setProperty(CONFIG_HASH_KEY, currentConfigHash);                  }              }              finally {
public interface DisruptorVmEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedDisruptorVmEndpointProducerBuilder advanced() {
.retInt();      }     private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)      {          MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), "getSizeInBytes", type(long.class));
}       public final ImmutableList<ObjectType> getOwnImplementedInterfaces() {      return implementedInterfaces;    }
*/   @Override   public Collection<Item> getItems() {   Set<Item> items = new HashSet<Item>();    for (String name : modelRepository.getAllModelNamesOfType("items")) {     items.addAll(getItemsFromModel(name));    }
octree.initArchitecture();      }     public synchronized void updateSelection(GL2 gl, GLU glu) {          if (vizConfig.isSelectionEnable() && currentSelectionArea!= null && currentSelectionArea.isEnabled()) {              float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);              float[] cent = currentSelectionArea.getSelectionAreaCenter();
* Allow this route to be run as an application       *       * @param args      * @throws Exception        */     public static void main(String[] args) throws Exception {          new Main().run(args);      }
private static final Redwood.RedwoodChannels log = Redwood.channels(StanfordCoreNLPClient.class);     private static final Pattern URL_PATTERN = Pattern.compile("(?:(https?):    /**     * Information on how to connect to a backend.     * The semantics of one of these objects is as follows:    *     * <ul>     *   <li>It should define a hostname and port to connect to.</li>     *   <li>This represents ONE thread on the remote server. The client should
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return null;      }     private static void throwRoot() throws SocketTimeoutException {          throw new SocketTimeoutException("Timed-out reading from socket");      }
public void testMoveException() throws Exception    {      MockStorageService mockS3Client = new MockStorageService();     S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());      mover.move(          sourceSegment,
protected void handleMultiMapTryLock(String[] args) {          String key = args[1];         long time = (args.length > 2)? Long.parseLong(args[2]) : 0;          boolean locked;          if (time == 0) {              locked = getMultiMap().tryLock(key);
}                   protected final int getMessageLength() {              return currentOutputPosition;          }
*/   private void poll() {    if (invalidCredentials || this.myqOnlineData == null) {    logger.trace("Invalid Account Credentials");     return;    }
*     * @param toCompare The element to set as the comparison reference.    */  public abstract void setReference(T toCompare);   /**    * Checks, whether the given element is equal to the element that has been set as the comparison
command = new RollCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if ("list".equals(args[i])) {          command = new ListCommand();
public interface SesEndpointBuilder extends EndpointProducerBuilder {          default AdvancedSesEndpointBuilder advanced() {              return (AdvancedSesEndpointBuilder) this;          }
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Runnable shutdownHandler = loggingSystem.getShutdownHandler();     if (shutdownHandler!= null       && shutdownHookRegistered.compareAndSet(false, true)) {     Runtime.getRuntime().addShutdownHook(shutdownHandler);     }    }   }
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ColumnPaginationFilter other = (ColumnPaginationFilter)o;      if (this.columnOffset!= null) {       return this.getLimit() == this.getLimit() &&            Bytes.equals(this.getColumnOffset(), other.getColumnOffset());      }      return this.getLimit() == other.getLimit() && this.getOffset() == other.getOffset();
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}           public String getMessage()      {          final ResourceBundle bundle =
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      public WebSocket write(String s) throws IOException {         if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);          return this;      }      @Override      public WebSocket write(byte[] b, int offset, int length) throws IOException {         if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));          return this;      }
System.out.println("Error:" + errorType + ", message : " + message);                  }              });             InputStreamReader isReader = new InputStreamReader(fileObject.getInputStream(), "UTF-8");              Xml10FilterReader filterReader = new Xml10FilterReader(isReader);              XMLStreamReader reader = inputFactory.createXMLStreamReader(filterReader);
* @since 4.5   */  public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {     private final ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();      /**       * Creates a BlockJUnit4ClassRunner to run {@code klass}       *
* @see <a href="http:       */      public ResponseList<Status> getMentions() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, true));      }
}    public boolean touchDragged (int screenX, int screenY, int pointer) {    Object[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (((InputProcessor)items[i]).touchDragged(screenX, screenY, pointer)) return true;     } finally {      processors.end();     }
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface FtpEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedFtpEndpointProducerBuilder advanced() {
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Farewell World", Exchange.FILE_NAME, "mysub/mysubsub/farewell.txt");         Thread.sleep(800);          File file = new File(getScpPath() + "/mysub/mysubsub/farewell.txt");          assertFileExists(file.getAbsolutePath());
public void process(Exchange exchange) throws Exception {                              Random ran = new Random();                             int delay = ran.nextInt(250) + 10;                              Thread.sleep(delay);                          }                      }).to("mock:result");
ModelNode oldResponse = response;                  try {                      flags = EnumSet.noneOf(Flag.class);                     response = this.response = step.response;                      ModelNode newOperation = operation = step.operation;                      modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));                      step.handler.execute(this, newOperation);
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
SequenceFile.CompressionType compress) throws IOException {        super(conf, new Path(dirName),               comparator(comparator),              valueClass(NullWritable.class),               compressionType(compress));      }
*       * @param resource the resource       */     public ResourceInternal(R resource) {        mResource = resource;        mLastAccessTimeMs = mClock.millis();      }
public interface TwilioEndpointBuilder              extends                  TwilioEndpointConsumerBuilder, TwilioEndpointProducerBuilder {          default AdvancedTwilioEndpointBuilder advanced() {
@Resource      private ConnectionFactory defaultConnectionFactory;     @Resource(lookup = "java:/ConnectionFactory")      private ConnectionFactory regularConnectionFactory;      public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {
}      @DELETE     @Path(PATH_RELATIONSHIP_INDEX_ID)      public Response deleteFromRelationshipIndex( @PathParam("indexName") String indexName,                                                   @PathParam("key") String key, @PathParam("value") String value,                                                   @PathParam("id") long id )
}));      }     protected <T> Function<String, Optional<T>> createRemoteInterfaceProvider(Class<T> interfaceClass) {          return (nodeId) -> {              try {                  final Node targetNode = nodeService.byNodeId(nodeId);
flags.add(Flag.CANCELLED);                          response.get(OUTCOME).set(CANCELLED);                          response.get(FAILURE_DESCRIPTION).set("Operation cancelled");                         response.get(ROLLED_BACK).set(true);                          return ResultAction.ROLLBACK;                      }                  }
*/  @GwtCompatible(emulated = true)  public class BaseEncodingTest extends TestCase {   public static void assertEquals(byte[] expected, byte[] actual) {      assertEquals(expected.length, actual.length);      for (int i = 0; i < expected.length; i++) {        assertEquals(expected[i], actual[i]);
*/  public class ManagedProducerRouteAddRemoveRegisterAlwaysTest extends ManagementTestSupport {     private int services = 4;      @Override      protected CamelContext createCamelContext() throws Exception {
public interface AdvancedPgEventEndpointBuilder              extends                  AdvancedPgEventEndpointConsumerBuilder, AdvancedPgEventEndpointProducerBuilder {          default PgEventEndpointBuilder basic() {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Thread.sleep(2500);          assertMockEndpointsSatisfied();
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json", true));      }      /**
public static void waitUntilCondition(SupplierWithException<Boolean, Exception> condition, Deadline timeout, long retryIntervalMillis) throws Exception {    while (timeout.hasTimeLeft() &&!condition.get()) {    Thread.sleep(Math.max(RETRY_INTERVAL, timeout.timeLeft().toMillis()));    }    if (!timeout.hasTimeLeft()) {
public enum _Fields implements org.apache.thrift.TFieldIdEnum {       RQST((short)1, "rqst");        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      @FixMethodOrder(MethodSorters.DEFAULT)     static class DummySortWithDefault {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
if (getPath() == null && c.getPath()!= null) {              return -1;         } else if (c.getPath() == null && getPath()!= null) {              return 1;          }          v = getPath().compareTo(c.getPath());
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*     * @param toCompare The element to set as the comparison reference.    */  public abstract void setReference(T toCompare);   /**    * Checks, whether the given element is equal to the element that has been set as the comparison
@Override      public void set(K key, V value) {          begin();         transactionalMap.set(key, value);          commit();      }
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
public interface IrcEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIrcEndpointProducerBuilder advanced() {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags? "&exclude=hashtags" : ""), false));      }
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
HRegionInfo mockRegionInfo = Mockito.mock(HRegionInfo.class);      Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);      Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);     Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);      qosFunction.setRegionServer(mockRS);      assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);    }
return value;    }   private static boolean isIdentifierStart(char ch) {      switch (ch) {      case '$':      case '_':
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);   }
assertEquals("sample-tag-key", aws.getTagKey());          assertEquals("sample-tag-value", aws.getTagValue());         assertTrue("reuse-address", networkConfig.isReuseAddress());      }
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}          }          if (simple.getFromReceivedDate()!= null) {             String s = simple.getFromReceivedDate();              if (s.startsWith("now")) {                  long offset = extractOffset(s, typeConverter);                  builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));
public interface AdvancedTwitterDirectMessageEndpointBuilder              extends                  AdvancedTwitterDirectMessageEndpointConsumerBuilder, AdvancedTwitterDirectMessageEndpointProducerBuilder {          default TwitterDirectMessageEndpointBuilder basic() {
public interface AdvancedRabbitMQEndpointBuilder              extends                  AdvancedRabbitMQEndpointConsumerBuilder, AdvancedRabbitMQEndpointProducerBuilder {          default RabbitMQEndpointBuilder basic() {
@Override      public KeyColumnValueStore openDatabase(final String name) throws StorageException {         if (!stores.containsKey(name)) {              stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));          }          KeyColumnValueStore store = stores.get(name);
* Advanced builder for endpoint for the Azure Storage Queue Service       * component.       */     public interface AdvancedQueueServiceEndpointBuilder              extends                  AdvancedQueueServiceEndpointConsumerBuilder, AdvancedQueueServiceEndpointProducerBuilder {          default QueueServiceEndpointBuilder basic() {
public interface AdvancedZooKeeperMasterEndpointBuilder              extends                  EndpointConsumerBuilder {          default ZooKeeperMasterEndpointBuilder basic() {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
record.setExpirationTime(expiryTime);                  if (isEventsEnabled()) {                      CacheEventContext cacheEventContext =                             createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),                                                     toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);                      cacheEventContext.setAccessHit(record.getAccessHit());                      publishEvent(cacheEventContext);
*      * @param queueName Name of the job queue.     */   @InterfaceAudience.Private   public void setQueueName(String queueName) {      super.setQueueName(queueName);    }
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(ConnectionFactory.class)  @ConditionalOnEnabledHealthIndicator("jms")   public static class JmsHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(getNotAllowedExceptionMessage("hello"), e.getCause().getMessage());          }      }
return RESULT_OK;        } catch (AerospikeException e) {          if (e.getResultCode()!= ResultCode.DEVICE_OVERLOAD) {           System.err.println("Error while updating key " + key + ": " + e);            return RESULT_ERROR;          }
}      else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {       TypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();      mTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);      }     }     catch (ClassNotFoundException e) {
public interface KubernetesNamespacesEndpointBuilder              extends                  KubernetesNamespacesEndpointConsumerBuilder, KubernetesNamespacesEndpointProducerBuilder {          default AdvancedKubernetesNamespacesEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
startChildWorkflowExecutionParameters.setTaskPriority(taskPriority);              }             String lambdaRole = optionsOverride.getLambdaRole();              if (lambdaRole!= null) {                  startChildWorkflowExecutionParameters.setLambdaRole(lambdaRole);              }
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),          @ApiResponse(code = 404, message = "User not found", response = Void.class) })     void deleteUser(@PathParam("username") @ApiParam("The name that needs to be deleted") String username) throws Exception;      @GET      @Path("/{username}")
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final String key = "key";          final String value = "value";         map.lock(key, 1, TimeUnit.SECONDS);          final CountDownLatch tryPutReturned = new CountDownLatch(1);          new Thread() {              public void run() {                 map.tryPut(key, value, 60, TimeUnit.SECONDS);                  tryPutReturned.countDown();              }          }.start();
mbeanServer.registerMBean(instance, objectName);                   }               } catch (Exception ex) {                  getLog().warn("register druid-driver mbean error", ex);               }               return true;
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();     assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();     assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);    }
}      }     private static class TestSplitRemote              implements ConnectorSplit      {          @Override
MockEndpoint bar = getMockEndpoint("mock:bar");          bar.expectedMinimumMessageCount(1);         bar.setResultWaitTime(1000);          template.sendBody("seda:foo", "A");          template.sendBody("seda:foo", "B");
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10802, value = "Interrupted awaiting final response from server %s on host %s")      void interruptedAwaitingFinalResponse(String serverName, String hostName);      /**
*/   static public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {    DecimalType result = null;   HistoricItem itemThen = historicState(item, timestamp, serviceName);    if (itemThen!= null) {     DecimalType valueThen = (DecimalType) itemThen.getState();     DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);
@Override            public AggregatorFactory apply(String input)            {             return new CardinalityAggregatorFactory(input, Arrays.asList(input), byRow);            }          }      );
public interface SipEndpointBuilder              extends                  SipEndpointConsumerBuilder, SipEndpointProducerBuilder {          default AdvancedSipEndpointBuilder advanced() {
public interface GoogleSheetsEndpointBuilder              extends                  GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {          default AdvancedGoogleSheetsEndpointBuilder advanced() {
final Class<?> type = field.getType();    final String name = tableInfo.getColumnName(field);   final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());    final Column column = field.getAnnotation(Column.class);    if (typeSerializer!= null) {
CLIENT.user_deleteById(fileId);    }   public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)        throws FileDoesNotExistException, InvalidPathException, TException {      return CLIENT.user_getClientFileInfoByPath(path);    }   public synchronized ClientFileInfo user_getClientFileInfoById(int id)        throws FileDoesNotExistException, TException {      return CLIENT.user_getClientFileInfoById(id);    }
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {            mBuf.putInt(0, k + mWorkerId);
org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();          String label = sourceEdgeData.getLabel();         if (sourceEdgeTextData!= null && sourceEdgeTextData.getText()!= null &&!sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {              label = sourceEdgeTextData.getText();          } else if (sourceEdgeTextData!= null &&!sourceEdgeTextData.isVisible()) {              label = null;
}      }     public synchronized Set<PlanNodeId> getNoMoreSplits()      {          ImmutableSet.Builder<PlanNodeId> noMoreSplits = ImmutableSet.builder();          for (Entry<PlanNodeId, DriverSplitRunnerFactory> entry : partitionedDriverFactories.entrySet()) {
* @param properties the batch properties    * @param dataSource the underlying data source    */  protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {    this(properties, dataSource, null);   }
}      protected void invalidateExpiredEntries() {         long now = System.currentTimeMillis();          synchronized (messages) {              Set<String> inactiveClients = new HashSet<String>();
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);   }
testSame("Object.defineProperties(a, {anything:1})");    }   private static final ImmutableList<String> LITERAL_OPERANDS =        ImmutableList.of(            "null",            "undefined",
assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();     assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();     assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();
* @should return default value if property name does not exist    * @should not fail with null default value    */  public String getGlobalProperty(String propertyName, String defaultValue);   /**    * Gets the global property that has the given <code>propertyName</code>
Files.copy(cnf2Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);     Admin admin = TEST_UTIL.getAdmin();      ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();      admin.updateConfiguration(server);      Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
out.writeDouble((Double) obj);          } else if (obj instanceof Float) {              out.writeByte(5);             out.writeFloat((Float) obj);          } else if (obj instanceof Boolean) {              out.writeByte(6);              out.writeBoolean((Boolean) obj);
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
@Category(QuickTest.class)  public class AdvancedSemaphoreTest extends HazelcastTestSupport {     @Test(timeout = 120000)      public void testSemaphoreWithFailures() throws InterruptedException {          final int k = 4;         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);          final HazelcastInstance[] instances = factory.newInstances();          final ISemaphore semaphore = instances[k].getSemaphore("test");
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL()                  + "direct_messages.json", null, paging.asPostParameterList(), true));      }
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface TwilioEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedTwilioEndpointProducerBuilder advanced() {
return HConstants.NORMAL_QOS;      } if (methodName.equalsIgnoreCase("scan")) {        ScanRequest request = (ScanRequest)param;        if (!request.hasScannerId()) {          return HConstants.NORMAL_QOS;
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);   }
, (args = args.rest()).first()       , args.rest());     case 8:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
int size = s.count();    long[] ret = new long[size];    for(int i = 0; i < size && s!= null; i++, s = s.rest())    ret[i] = ((Number) s.first()).longValue();    return ret;    }  }
public interface JoltEndpointBuilder extends EndpointProducerBuilder {          default AdvancedJoltEndpointBuilder advanced() {              return (AdvancedJoltEndpointBuilder) this;          }
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
future.get();              future.addListener(() -> counter.decrementAndGet(), Runnable::run);          }         assertEquals(counter.get(), 0);      }  }
Object convertedValue;      if (value.scale() == 0) {        logger.trace("found no fractional part");       convertedValue = value.doubleValue();      } else {        logger.trace("found fractional part");        convertedValue = value.doubleValue();
if (queueLength.isDefined() && queueLength.asInt() == 0) {                  if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {                     throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());                  }              }
failureCause.compareAndSet(null, toFailure(throwable));          boolean failed = queryState.setIf(FAILED, currentState ->!currentState.isDone());          if (failed) {             log.debug(throwable, "Query %s failed", queryId);          }          else {              log.debug(throwable, "Failure after query %s finished", queryId);
}      int toRead = (int) Math.min(len, remaining()); if (mBufferIsValid && mBuffer.remaining() >= toRead) {        mBuffer.get(b, off, toRead);        mPos += toRead;        mBlockIsRead = true;
*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      public boolean hasAttributes() {         return nodeData.getAttributes()!= null;      }      public void setAttributes(Attributes attributes) {
public interface TwitterStreamingEndpointBuilder              extends                  EndpointConsumerBuilder {          default AdvancedTwitterStreamingEndpointBuilder advanced() {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param task          the task.       */      @LogMessage(level = Level.ERROR)     @Message(id = 10808, value = "%s caught %s waiting for task %s")      void caughtExceptionWaitingForTask(String className, String exceptionName, String task);      /**
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
public interface InfinispanEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedInfinispanEndpointProducerBuilder advanced() {
*       * @return the message.       */     @Message(id = 10838, value = "Unexplained failure")      String unexplainedFailure();      /**
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
@Test      public void async_whenOperationTimeout() {         int callTimeout = 5000;          Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeout);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);
assertEquals(encoded, encoding.encode(bytes));    }   private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.trace("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);              if (hitCount == 1) {                  statistics.increaseCacheHits(hitCount);              } else {
public interface AdvancedMiloServerEndpointBuilder              extends                  AdvancedMiloServerEndpointConsumerBuilder, AdvancedMiloServerEndpointProducerBuilder {          default MiloServerEndpointBuilder basic() {
* @throws IOException     */    public void put(Put put) throws IOException {     this.put(put, null, put.getWriteToWAL());    }    /**
String sslPortString = CorbaORBService.getORBProperty(Constants.ORB_SSL_PORT);          int sslPort = sslPortString == null? 0 : Integer.parseInt(sslPortString);          try {             SSL ssl = new SSL((short) MIN_SSL_OPTIONS,                     (short) 0,                       (short) sslPort);              ORB orb = ORB.init();              Any any = orb.create_any();
jsonArray = new JSONArray(responseAsString);                  }                  if (CONF.isPrettyDebugEnabled()) {                     logger.debug(jsonArray.toString(1));                  }              } catch (JSONException jsone) {                  if (logger.isDebugEnabled()) {
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
public void pickAddress() throws Exception {          try {              bindAddress = memberAddressProvider.getBindAddress();             logger.info("Using bind address: " + bindAddress);              publicAddress = memberAddressProvider.getPublicAddress();              validatePublicAddress(publicAddress);
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /**
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
LABEL_TOKEN( false ),      LABEL_TOKEN_NAME( false ),      NEOSTORE_BLOCK( false ),     SCHEMA( 34, true ),      NODE_LABELS( 34, true );      private final long max;
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);          Data data = serializationService.toData(normalResponse);         final Packet packet = new Packet(data, 0);          packet.setHeader(Packet.HEADER_RESPONSE);          packet.setHeader(Packet.HEADER_OP);          executor.execute(packet);
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), endsWith("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String authorizeURL = catchPattern(resStr, "<form action=\"", "\" id=\"oauth_form\"");          HttpParameter[] params = new HttpParameter[4];          params[0] = new HttpParameter("authenticity_token"                , catchPattern(resStr, "\"authenticity_token\" type=\"hidden\" value=\"", "\" />"));          params[1] = new HttpParameter("oauth_token",                 catchPattern(resStr, "name=\"oauth_token\" type=\"hidden\" value=\"", "\" />"));          params[2] = new HttpParameter("session[username_or_email]", screenName);          params[3] = new HttpParameter("session[password]", password);          response = http.request(new HttpRequest(RequestMethod.POST, authorizeURL, params, null, props));
String trace = traceInText.get(i);                  String[] tokens = trace.split(",");                 stackTrace[i] = new StackTraceElement(tokens[0], tokens[1], tokens[2], Integer.parseInt(tokens[3]));              }              return new ChildProcessException(exceptionClass + ": " + message, stackTrace);
@Configuration   @ConditionalOnBean(RabbitTemplate.class)  @ConditionalOnEnabledHealthIndicator("rabbit")   public static class RabbitHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {
throws IOException          {              generator.writeStartObject();             generator.writeStringField("type", value.getType().getName());              generator.writeFieldName("value");              if (value.getValue() == null) {                  generator.writeNull();
* @see <a href="http:       */      public List<Trends> getWeeklyTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json", false));      }
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags? "&exclude=hashtags" : ""), false));      }
Optional.empty());         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))                 .row("a", "a")                 .row("a", "a")                 .row("b", null)
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface KubernetesConfigMapsEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesConfigMapsEndpointBuilder advanced() {
if (this.mrwork!= null && this.mrwork.getHadoopSupportsSplittable()) {
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (target == this) {              task.run();          } else {             target.addTaskAndWakeup(task);          }      }
priorRange = ranges[i];        cumNum = val;      }     long val = histogram.getCount(true);      if (val - cumNum > 0) {        metricsRecordBuilder.addCounter(            Interns.info(name + "_" + rangeType + "_" + ranges[ranges.length - 1] + "-inf", desc),
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10803, value = "Caught exception awaiting final response from server %s on host %s")      void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);      /**
else if(container instanceof Relationship )              {                  statement.readOperations().acquireShared( ResourceTypes.RELATIONSHIP, ((Relationship) container).getId() );                 return new CoreAPILock(stmtProvider, ResourceTypes.RELATIONSHIP, ((Relationship) container).getId())                  {                      @Override                      void release( Statement statement, Locks.ResourceType type, long resourceId )
public interface SchematronEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedSchematronEndpointBuilder advanced() {
selectedKeysField.set(selector, set);              publicSelectedKeysField.set(selector, set);             logger.finest("Optimized Selector: " + selector.getClass().getName());              return set;          } catch (Throwable t) {
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
"1: " + getCheckMessage(MSG_KEY_MISMATCH),          };         verify(checkConfig,                 getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java"),                 expected);      }      @Test
return getOutputFactory().createXMLEventWriter(result);      }     @Deprecated      public XMLStreamWriter createXMLStreamWriter(OutputStream outputStream) throws XMLStreamException {          return getOutputFactory().createXMLStreamWriter(outputStream);      }
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public class AtmosphereResourceLifecycleInterceptor implements AtmosphereInterceptor {      private String method = "GET";     private static final Logger logger = LoggerFactory.getLogger(AtmosphereResourceLifecycleInterceptor.class);      @Override      public void configure(AtmosphereConfig config) {
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
}    @Override   public synchronized String toString() {      if (bpNSInfo == null) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {    if (this instanceof SingleOutputStreamOperator) {     ((SingleOutputStreamOperator<?,?>) this).setMutability(false);    }
public interface GoraEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedGoraEndpointProducerBuilder advanced() {
* Validates Username and Password then saved sercurityToken to a variable    */   private void login() throws InvalidLoginException, IOException {   logger.trace("attempting to login");    String url = String     .format("%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s",        WEBSITE, enc(appId), enc(userName), enc(password));
private TaskExecutor taskExecutor;      private boolean pubSubNoLocal;      private int concurrentConsumers = 1;     private int maxMessagesPerTask = 100;      private int cacheLevel = -1;      private String cacheLevelName;      private long recoveryInterval = -1;
}          JavaVersion version = JavaVersion.parse(javaVersion);         if (version.getMajor() == 8 && version.getUpdate().isPresent() && version.getUpdate().getAsInt() > 92) {              return;          }
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private static TesterRequirements buildTesterRequirements(        Annotation testerAnnotation)        throws ConflictingRequirementsException {     Class<? extends Annotation> annotationClass = testerAnnotation.annotationType();      final Feature<?>[] presentFeatures;      final Feature<?>[] absentFeatures;      try {
public GraphDatabaseService newHighlyAvailableDatabase( String path )      {         return newHighlyAvailableDatabaseBuilder( path ).newGraphDatabase();      }      public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface HazelcastReplicatedmapEndpointBuilder              extends                  HazelcastReplicatedmapEndpointConsumerBuilder, HazelcastReplicatedmapEndpointProducerBuilder {          default AdvancedHazelcastReplicatedmapEndpointBuilder advanced() {
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
LOG.warn("User has specified " + queueName + " queue; ignoring the setting");          queueName = null;          hasQueue = false;         conf.set("tez.queue.name", queueName);        } default:        }
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
break;              }         } else if (lexer.token() == (Token.SELECT)            || lexer.token() == (Token.SEL)) {              SQLSelect select = this.exprParser.createSelectParser().select();              select.setParent(insertStatement);              insertStatement.setQuery(select);
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* before growing the backing table. */    public IdentityMap (int initialCapacity, float loadFactor) {     if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);     capacity = MathUtils.nextPowerOfTwo(initialCapacity);     if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
public interface ClientEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedClientEndpointProducerBuilder advanced() {
@ApiOperation(value = "test json serialization of form data", notes = "", tags={ "fake" })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void testJsonFormData(@FormParam(value = "param")  String param,@FormParam(value = "param2")  String param2) throws Exception;  }
httpClientBinder(binder).bindHttpClient("execute", ForExecute.class)                 .withTracing()                 .withConfigDefaults(config -> {                     config.setIdleTimeout(new Duration(30, SECONDS));                      config.setRequestTimeout(new Duration(10, SECONDS));                  });
public interface GrpcEndpointBuilder              extends                  GrpcEndpointConsumerBuilder, GrpcEndpointProducerBuilder {          default AdvancedGrpcEndpointBuilder advanced() {
private static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);  private static final int DEFAULT_NUMBER_OF_READ_BUFFERS = 256;  private static final int DEFAULT_NUMBER_OF_WRITE_BUFFERS = 256; private static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 64 * 1024;   private static final boolean DEFAULT_ALLOW_SPILLING = true;
if (isStatisticsEnabled()) {              if (result) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNanos(System.nanoTime() - start);              }             statistics.addGetTimeNanos(System.nanoTime() - start);              if (isHit) {                  statistics.increaseCacheHits(1);              } else {
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
/*   * Licensed to the Apache Software Foundation (ASF) under one or more   * contributor license agreements.  See the NOTICE file distributed with   * this work for additional information regarding copyright ownership.
try {          statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);        } finally {         endFunction("get_column_statistics_by_table: ", statsObj!= null, null);        }        return statsObj;      }
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
executeSql(connection, config.getConnectionTestQuery(), false, isIsolateInternalQueries &&!isAutoCommit);              }              catch (Throwable e) {                LOGGER.error("{} - Failed to execute connection test query. ({})", poolName, e.getMessage());                 throw e;              }           }
invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,                      invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);             invocation.logger.finest("Asking if operation execution has been started: " + invocation);              inv.invoke();          }      }
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNanos(System.nanoTime() - start);          }          return result;      }
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
HttpRequest req = (HttpRequest) ch.readInbound();          DecoderResult dr = req.getDecoderResult();          assertFalse(dr.isSuccess());         assertTrue(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, paging.asPostParameterList(), true));      }
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void test_Decode_Error_Length() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
Bytes.toStringBinary(data));                throw e;              }             LOG.debug("Node " + path + " already exists and this is not a " +                  "retry");              throw e;
*       * @return the message.       */     @Message(id = 10864, value = "Error obtaining input stream from URL %s -- %s")      String errorObtainingUrlStream(String url, String message);      /**
classGetModuleMethod = Class.class.getMethod("getModule");        Class<?> moduleClass = classGetModuleMethod.getReturnType();        moduleIsExportedMethod = moduleClass.getMethod("isExported", String.class);     } catch (Exception e) {        classGetModuleMethod = null;        moduleIsExportedMethod = null;      }
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));          assertTrue(byteBuf.release());         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);
* @should delete global properties from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperties(List<GlobalProperty> globalProperties);   /**    * Save the given global property to the database. If the global property already exists,
}   @Override  public CompletableFuture<Void> getTerminationFuture() {    return terminationFuture;   }  }
new JobTokenSecretManager();    public static final String SHUFFLE_PORT_CONFIG_KEY = "mapreduce.shuffle.port";   public static final int DEFAULT_SHUFFLE_PORT = 11000;    public static final String SUFFLE_SSL_FILE_BUFFER_SIZE_KEY =      "mapreduce.shuffle.ssl.file.buffer.size";
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Assert.assertFalse("expectedIter not exhausted!?", expectedIter.hasNext());    }   @Test(timeout = 20_000L)    public void testDeadLock() throws Exception    {      final URL[] urls = ((URLClassLoader)QueryGranularity.class.getClassLoader()).getURLs();
transfertEncoding == null? DEFAULT_TRANSFER_ENCODING : transfertEncoding);      }     public final void setFileName(String fileName) {          this.fileName = fileName;      }
* @param column column index.       * @return value at specified column.       */     private static Object getValueAtDetailAST(DetailAST ast, int column) {          final Object value;          switch (column) {
