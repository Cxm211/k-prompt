*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final class NioSocketChannelUnsafe extends NioByteUnsafe {          @Override          protected Executor closeExecutor() {             if (config().getSoLinger() > 0) {                  return GlobalEventExecutor.INSTANCE;              }              return null;
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*      * @param queueName Name of the job queue.     */   protected static void setQueueName(String queueName) {      super.setQueueName(queueName);    }
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags? "&exclude=hashtags" : ""), false));      }
command = new RollCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return -1;          }        } else if ("list".equals(args[i])) {          command = new ListCommand();
}              }          }         if (keys.isEmpty()) {              return result;          }          MapGetAllRequest request = new MapGetAllRequest(name, keySet);
*     * @param toCompare The element to set as the comparison reference.    */  public abstract void setReference(T toCompare);   /**    * Checks, whether the given element is equal to the element that has been set as the comparison
public interface AdvancedGoogleDriveEndpointBuilder              extends                  AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {          default GoogleDriveEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 10854, value = "Null stream at index %d")      String nullStream(int index);      /**
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage("hello"));          }      }
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearches(get(getBaseURL() + "saved_searches.json", true));      }      /**
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
try {      JoglMusic music = new JoglMusic(((JoglFileHandle)file));      return music;    } catch (Exception e) {      throw new GdxRuntimeException("Couldn't create Music instance from file '" + file + "'", e);     }    }
Set<E> edgesConnecting(N node);       N oppositeNode(Object edge);    /**     * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
&& sUnderFSClass.equals("tachyon.underfs.hdfs.LocalMiniDFSCluster");    }   protected final String mBaseDir;    protected final TachyonConf mTachyonConf;
else    {    ISeq s = RT.seq(sizeOrSeq);   int size = s.count();    long[] ret = new long[size];    for(int i = 0; i < size && s!= null; i++, s = s.next())     ret[i] = ((Number) s.first()).longValue();
invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,                      invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);             invocation.logger.finest("Asking if operation execution has been started: " + invocation);              inv.invoke();          }      }
} catch (Exception e) {                  throwFormattedException(e);              } finally {                 log.tracef("%s finished request %d", ManagementChannel.this);                  IoUtils.safeClose(output);              }          }
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
