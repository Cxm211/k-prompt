* @param r {@link AtmosphereResource}       */      public void unRegisterUuidForFindCandidate(AtmosphereResource r) {         logger.trace("Removing: {}", r);          resources.remove(r.uuid());      }
* Exposed Used for testing only! Default values used in the initial settings frame are overriden intentionally       * for testing but violate the RFC if used outside the scope of testing.       */     HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity, int maxHeaderTableSize) {          this.maxHeaderListSize = checkPositive(maxHeaderListSize, "maxHeaderListSize");          this.maxHeaderListSizeGoAway = Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);
private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {          public void timeout(Exchange oldExchange, int index, int total, long timeout) {             assertEquals(500, timeout);              assertEquals(3, total);              assertEquals(0, index);              assertNotNull(oldExchange);
public interface AdvancedMyBatisEndpointBuilder              extends                  AdvancedMyBatisEndpointConsumerBuilder, AdvancedMyBatisEndpointProducerBuilder {          default MyBatisEndpointBuilder basic() {
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);          }          return result;      }
public interface CaffeineLoadCacheEndpointBuilder              extends                  CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {          default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {       TypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();      mTypeSerializers.put(typeSerializer.getClass(), typeSerializer);      }     }     catch (ClassNotFoundException e) {
public interface HazelcastInstanceEndpointBuilder              extends                   EndpointConsumerBuilder {          default AdvancedHazelcastInstanceEndpointBuilder advanced() {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
publicType,                   ImmutableSet.copyOf(entry.getValue()),                  implemetationMethodDescriptors.build()));        } catch (IOException e) {          messager.printMessage(Kind.ERROR, "failed");        }
class UnionTypeBuilder implements Serializable {    private static final long serialVersionUID = 1L;   private static final int DEFAULT_MAX_UNION_SIZE = 25;    private final JSTypeRegistry registry;    private final List<JSType> alternates = Lists.newArrayList();
GL10 gl = app.getGraphics().getGL10();     gl.glClear( GL10.GL_COLOR_BUFFER_BIT );    camera.setMatrices( app.getCamera() );     renderBox( gl, groundBody, 50, 1 );
* @see <a href="http:      */      public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json", true));      }      /**
}   @ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)  @UnrelatedOne   static class ImportAutoConfigurationWithItemsTwo {   }
IR.assign(                  IR.getProp(IR.thisNode(), IR.string("stack")),                  IR.getProp(IR.name(TMP_ERROR), IR.string("stack"))));      Node superErrorExpr =         IR.comma(IR.comma(IR.comma(getTmpError, copyMessage), setStack), IR.name(TMP_ERROR))             .useSourceInfoIfMissingFromForTree(true);     }
logger.error("Invalid WebSocket Specification {} with {} ",                                   r.getHeader("Connection"), r.getIntHeader("Sec-WebSocket-Version"));                            HttpServletResponse.class.cast(response).addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");                          HttpServletResponse.class.cast(response).sendError(202, "Websocket protocol not supported");                          return;                      }                }
String command = shellMsg.getCommand();                            if (command == null) {                              throw new IllegalArgumentException("Command not found in bolt message: " + shellMsg);                         }                         if(command.equals("ack")) {                             handleAck(shellMsg.getId());
getMockEndpoint("mock:error").expectedMinimumMessageCount(2);         resultEndpoint.expectedBodiesReceived("one", "three");          sendMessage("1", "one");          sendMessage("2", "two");
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public Trends getCurrentTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL() + "trends/current.json"                 , false)).get(0);      }
if (id!= null) {              builder.getAdviceWithTasks().add(AdviceWithTasks.removeById(route, id, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          } else if (toString!= null) {             builder.getAdviceWithTasks().add(AdviceWithTasks.removeByToString(route, toString, selectLast, selectFirst, selectFrom, selectTo, maxDeep));          } else if (type!= null) {              builder.getAdviceWithTasks().add(AdviceWithTasks.removeByType(route, type, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          }
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface SjmsEndpointProducerBuilder              extends                   EndpointProducerBuilder {          default AdvancedSjmsEndpointProducerBuilder advanced() {
