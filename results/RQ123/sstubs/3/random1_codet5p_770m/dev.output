public interface ServerEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedServerEndpointProducerBuilder advanced() {
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Expects the JS to generate one bad-read warning.     */    private void assertRedeclare(String js) {     testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);    }    /**
private int port = Integer.valueOf(System.getProperty("port"));   @Test  public void testHome() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
public interface AdvancedKubernetesServicesEndpointBuilder              extends                  AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {          default KubernetesServicesEndpointBuilder basic() {
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
*/      @Test      public void async_whenMultipleAndThenOnSameFuture() throws Exception {         int callTimeout = 1000;          Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeout);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {    if (this instanceof SingleOutputStreamOperator) {     ((SingleOutputStreamOperator<?,?>) this).setMutability(false);    }
assertThat(cookie.getCommentURL()).isNull();      assertThat(cookie.getDiscard()).isFalse();     assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(1.0));      assertThat(cookie.getPath()).isEqualTo("/path");      assertThat(cookie.getSecure()).isTrue();    }
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple));    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
obj = null;                  removed = false;                  if (isEventsEnabled()) {                     publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                            origin, completionId));                  }              } else {
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
if (timeout == null) {                  println(lock.tryLock());              } else {                 long time = Long.valueOf(timeout);                  try {                      println(lock.tryLock(time, TimeUnit.SECONDS));                  } catch (InterruptedException e) {
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
template.sendBodyAndHeader("file:          MockEndpoint mock = getMockEndpoint("mock:result3");         mock.expectedBodiesReceivedInAnyOrder("Hello World 2", "Hello World 4");          assertMockEndpointsSatisfied();          oneExchangeDone.matchesMockWaitTime();
final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;          verify(checkConfig,                 getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"), expected);      }      @Test
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
long taken = watch.stop();          assertEquals(taken, watch.taken());         assertTrue("Should take approx 200 millis, was: " + taken, taken > 190);      }      public void testStopWatchNotStarted() throws Exception {
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
@Deployment    public void testParallelSubProcessCompletionCondition() {      String procId = runtimeService.startProcessInstanceByKey("miParallelSubprocessCompletionCondition").getId();     List<Task> tasks = taskService.createTaskQuery().orderByTaskId().asc().list();      assertEquals(4, tasks.size());      for (int i=0; i<2; i++) {
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
public interface AdvancedSpringBatchEndpointBuilder              extends                  EndpointProducerBuilder {          default SpringBatchEndpointBuilder basic() {
@ApiOperation(value = "To test special tags", notes = "To test special tags", tags={ "$another-fake?" })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Client.class) })     Client testSpecialTags(@Valid Client body);  }
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
MBeanServerPlugin delegate = null;          final boolean readOnly = true;          try {             delegate = findDelegate(name);              if (delegate.shouldAuthorize()) {                  authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);              }
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (isStatisticsEnabled()) {              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNanos(System.nanoTime() - start);              }              if (getValue) {                  if (oldValueNull) {
}          doRemoveRecord(key, source);          if (isEventsEnabled()) {             publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                   origin, IGNORE_COMPLETION));          }          return true;
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
