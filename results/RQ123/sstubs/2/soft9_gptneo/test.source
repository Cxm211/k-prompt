};       private final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort);    env.enableCheckpointing(500);    env.setParallelism(parallelism);   env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);
}       private final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_kr_4() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년05월06일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
};       private final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public static interface JooqEndpointBuilder              extends                  JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {          default AdvancedJooqEndpointBuilder advanced() {
if (getDomain() == null && c.getDomain() != null) {              return -1;         } else if (c.getDomain() == null) {              return 1;          }          v = getDomain().compareToIgnoreCase(c.getDomain());
private final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShader(shader, pname, params);    }    public String glGetString (int name) {
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
form.add("code", context.getAuthorizationCode());    String redirectUri = resource.getPreEstablishedRedirectUri();   if (redirectUri == null) {    redirectUri = String.valueOf(context==null ? null : context.getPreservedState());    } else {     form.add("state", String.valueOf(context.getPreservedState()));
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgram(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   private final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      }      if (selectedDirView == null) {       LOG.error("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",            availableBytes);        return null;      }
this.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));
@Test      public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {         long callTimeoutMs = 5000;          Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeoutMs);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);          HazelcastInstance local = factory.newHazelcastInstance(config);
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.constructDirectMessages(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
*       * @return the message.       */     @Message(id = 15858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
nodeE.appendChild(positionXE);              Element positionYE = createNodePositionY(document, n);              nodeE.appendChild(positionYE);             if (minZ != 0f && maxZ != 0f) {                  Element positionZE = createNodePositionZ(document, n);                  nodeE.appendChild(positionZE);              }
*       * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
*       * @return the message.       */     @Message(id = 15857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
*/      public void destroy() {          isDestroyed.set(true);         cache.remove(this);      }      private boolean destroyed(){
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   private final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   private final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Override      protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 0);      }      @Override
