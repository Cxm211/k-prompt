};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected HotSw
StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort);    env.enableCheckpointing(500);    env.setParallelism(parallelism);   env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.getConfig().disableSysoutLogging();    FlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));    env.get
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(Abstract
public void test_kr_4() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년05월06일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));          Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));          Assert.assertEquals(0, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));          Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));          Assert.assertEquals(0, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));          Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));          Assert.assertEquals(0, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));          Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));          Assert.assertEquals(0, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));          Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));          Assert.assertEquals(0, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));          Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));          Assert.assertEquals(0, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));          Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));          Assert.assertEquals(0, calendar.get(Calendar.YEAR));           Assert.assertEquals(4, calendar.get(Calendar.MONTH));           Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));           Assert.assertEquals(0, calendar.get(Calendar.YEAR));           Assert.assertEquals(4, calendar.get(Calendar.MONTH));           Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));           Assert.assertEquals(0, calendar.get(Calendar.YEAR));           Assert.assertEquals(4, calendar.get(Calendar.MONTH));           Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));           Assert.assertEquals(0, calendar.get(Calendar.YEAR));           Assert.assertEquals(4, calendar.get(Calendar.MONTH));           Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));           Assert.assertEquals(0, calendar.get(Calendar.YEAR));            Assert.assertEquals(4, calendar.get(Calendar.MONTH));            Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));            Assert.assertEquals(0, calendar.get(Calendar.YEAR));            Assert.assertEquals(4, calendar.get(Calendar.MONTH));            Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));            Assert.assertEquals(0, calendar.get(Calendar.YEAR));            Assert.assertEquals(4, calendar.get(Calendar.MONTH));            Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));            Assert.assertEquals(0, calendar.get(Calendar.YEAR));            Assert.assertEquals(4, calendar.get(Calendar.MONTH));            Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));            Assert.assertEquals(0, calendar.get(Calendar.YEAR));             Assert.assertEquals(4, calendar.get(Calendar.MONTH));             Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));             Assert.assertEquals(0, calendar.get(Calendar.YEAR));             Assert.assertEquals(4, calendar.get(Calendar.MONTH));             Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));             Assert.assertEquals(0, calendar.get(Calendar.YEAR));             Assert.assertEquals(4, calendar.get(Calendar.MONTH));             Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));             Assert.assertEquals(0, calendar.get(Calendar.YEAR));             Assert.assertEquals(4, calendar.get(Calendar.MONTH));             Assert.assertEquals(0, calendar.get(Calendar.DAY_OF_MONTH));             Assert.assertEquals(0,
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface JooqEndpointBuilder             extends                JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {         default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default AdvancedJooqEndpointBuilder advanced() {          default Advanced
if (getDomain() == null && c.getDomain()!= null) {              return -1;         } else if (c.getDomain() == null) {              return 1;          }          v = getDomain().compareToIgnoreCase(c.getDomain());          if (getDomain() == null && c.getDomain()!= null) {              return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());          if (getDomain() == null && c.getDomain()!= null) {              return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());          if (getDomain() == null && c.getDomain()!= null) {              return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());          if (getDomain() == null && c.getDomain()!= null) {              return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());          if (getDomain() == null && c.getDomain()!= null) {               return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());          if (getDomain() == null && c.getDomain()!= null) {               return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());          if (getDomain() == null && c.getDomain()!= null) {               return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());          if (getDomain() == null && c.getDomain()!= null) {               return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                 return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                  return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                   return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                    return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                     return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                      return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                       return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                        return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                         return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                          return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {                           return -1;         }          v = getDomain().compareToIgnoreCase(c.getDomain());           if (getDomain() == null && c.getDomain()!= null) {
final PassFactory removeUnreachableCode =       new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {      @Override      protected CompilerPass create
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String glGetString (int name) {    GL20.glGetString(name);    }    public    void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public    String gl
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {    GL20.glUniform1i(location, x);    }    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void
} form.add("code", context.getAuthorizationCode());    String redirectUri = resource.getPreEstablishedRedirectUri();   if (redirectUri == null) {    redirectUri = String.valueOf(context==null? null : context.getPreservedState());    } else {     form.add("state", String.valueOf(context.getPreservedState()));    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }    }
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {    GL20.glGetShaderInfoLog(shader);    }    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =       new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass
}       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;      }       }      if (selectedDirView == null) {       LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",           availableBytes);        return null;
this.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConcept(this);
@Test      public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {         long callTimeoutMs = 5000;          Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeoutMs);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(4);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(5);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(6);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(7);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(8);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(9);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(10);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(11);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(12);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(13);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(14);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(15);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(16);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(17);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(18);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(19);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(20);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(21);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(22);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(23);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(24);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(25);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(26);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(27);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(28);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(29);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(30);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(31);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(32);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(33);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(34);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(35);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(36);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(37);          HazelcastInstance local = factory.newHazelcastInstance(config);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(38);          HazelcastInstance
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws             TwitterException {         return DirectMessage.createDirectMessages(get(getBaseURL() +                 "direct_messages/sent.json", new PostParameter[0],                 paging.asPostParameterList(), true));      }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }     }
*         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")       String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.        */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")       String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.         */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")       String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.         */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")       String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.         */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")       String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.         */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")       String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.         */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")       String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.         */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")       String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.         */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")       String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.         */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")       String noDeploymentContentWithHash(String hash);      /**        *         * @return the message.         */
nodeE.appendChild(positionXE);              Element positionYE = createNodePositionY(document, n);               nodeE.appendChild(positionYE);             if (minZ!= 0f && maxZ!= 0f) {                  Element positionZE = createNodePositionZ(document, n);                  nodeE.appendChild(positionZE);              }
*        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.        */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.        */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.        */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.        */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")       String slaveControllerCannotAcceptOtherSlaves();      /**       *        * @return a message for the error.        */     @Message(id = 10830, value =
*        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**       *        * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")       String as7431();       /**       *        * @return the message.        */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")       String as7431();       /**       *        * @return the message.        */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")       String as7431();       /**       *        * @return the message.        */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")       String as7431();       /**       *        * @return the message.        */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")       String as7431();       /**       *        * @return the message.        */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")       String as7431();       /**       *        * @return the message.        */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")       String as7431();       /**       *        * @return the message.        */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")       String as7431();       /**       *        * @return the message.        */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")       String as7431();       /**       *        * @return the message.        */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")       String as7431();       /**       *
*/         public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static boolean destroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){        public void destroy() {          isDestroyed.set(true);         cache.remove(this);     }      private static         isDestroyed(){
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =       new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      @Override      protected Comp
System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (int i = 0; i < modeToDFA.length; i++) {        DFA dfa = modeToDFA[i];       if (dfa == null) {         continue;        }       System.out.format("\tMode\tStates\tConfigs\tMode%n");       for (
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {      * replacement values for the classnames.  If null, the raw class names are     * inlined.     */
protected void onSocketClosed(WebSocket socket) throws IOException {         logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");         webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace("WebSocket.onSocketClosed.");          webSocketProcessor.close(webSocket, 0);     }      @Override       protected void onSocketClosed(WebSocket socket) throws IOException {          logger.trace
