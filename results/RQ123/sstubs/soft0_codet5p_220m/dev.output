@Override    public Annotation createFromFile(File file) throws IOException {     return createFromFile(file.getAbsolutePath());    }    @Override
public interface AtomixSetEndpointBuilder              extends                  AtomixSetEndpointConsumerBuilder, AtomixSetEndpointProducerBuilder {          default AdvancedAtomixSetEndpointBuilder advanced() {
public interface EjbEndpointBuilder extends EndpointProducerBuilder {          default AdvancedEjbEndpointBuilder advanced() {              return (AdvancedEjbEndpointBuilder) this;          }
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);              if (hitCount == 1) {                  statistics.increaseCacheHits(hitCount);              } else {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
/**   * The base class of all tuples. Tuples have a fix length and contain a set of fields,   * which may all be of different types. Because Tuples are strongly typed, each distinct  * tuple length is represented by its own class. Tuples exists with up to 25 fields and  * are described in the classes {@link Tuple1} to {@link Tuple22}.   * <p>   * The fields in the tuples may be accessed directly a public fields, or via position (zero indexed) * {@link
String uri = getScpUri() + "?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hallo Welt", Exchange.FILE_NAME, "welt.txt");         Thread.sleep(800);          File file = new File(getScpPath() + "/welt.txt");          assertFileExists(file.getAbsolutePath());
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* Validates Username and Password then saved sercurityToken to a variable    */   private void login() throws InvalidLoginException, IOException {   logger.trace("attempting to login");    String url = String     .format("%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s",        WEBSITE, enc(appId), enc(userName), enc(password));
catch (final ClassNotFoundException ex) {             throw new RuntimeException("Error during multilang processing", ex);          }          return null;
if (!currentConfigHash.equals(cachedConfigHash)) {                      details.clear();                     details.setProperty(CONFIG_HASH_KEY, currentConfigHash);                  }              }              finally {
public KeyIterator call() throws StorageException {                      KeyIterator ki = backend.getKeys(query, txh);                      if (null!= p) {                         return MetricInstrumentedIterator.of(ki, p + "." + M_GET_KEYS + "." + M_ITERATOR);                      } else {                          return ki;                      }
public interface AdvancedHazelcastMultimapEndpointBuilder              extends                  AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {          default HazelcastMultimapEndpointBuilder basic() {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
return style;    }   public void setText (CharSequence text) {     if (text == null) throw new IllegalArgumentException("text cannot be null.");     if (text.equals(this.text)) return;     this.text = text;
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
obj = null;                  removed = false;                  if (isEventsEnabled()) {                     publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                            origin, completionId));                  }              } else {
invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,                      invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);             invocation.logger.finest("Asking if operation execution has been started: " + invocation);              inv.invoke();          }      }
if (body.endsWith("3") || body.endsWith("10")) {                                              log.info("5th message received.  Rolling back.");                                              exchange.getOut().setFault(true);                                              exchange.getOut().setBody("5th message received.  Rolling back.");
asyncWriteFuture = new Future<?>[threads];              for (int i = 0; i < threads; i++) {                  notifierFuture[i] = bc.getExecutorService().submit(getBroadcastHandler());                 asyncWriteFuture[i] = bc.getAsyncWriteService().submit(getAsyncWriteHandler(uniqueWriteQueue));              }          } else {              notifierFuture[0] = bc.getExecutorService().submit(getBroadcastHandler());
}    }   public synchronized void unpinFile(int fileId) {      if (INACTIVE) {        return;      }
fail |= inconsistent( record,                      "next record set but length less than maximum" );          }         if ( record.getLength() > store.getRecordSize()                                    - store.getRecordHeaderSize() && record.getLength() > store.getRecordSize() )          {              fail |= inconsistent( record,                      "length larger than maximum for store" );          }
@Configuration   @ConditionalOnBean(MongoTemplate.class)  @ConditionalOnEnabledHealthIndicator("mongo")   public static class MongoHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedCxfEndpointBuilder              extends                  AdvancedCxfEndpointConsumerBuilder, AdvancedCxfEndpointProducerBuilder {          default CxfEndpointBuilder basic() {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Element position = item.getChildByName("Position");    rectangle.getRectangle().set(Float.parseFloat(position.getChildByName("X").getText()),              -Float.parseFloat(position.getChildByName("Y").getText()),               Float.parseFloat(item.getChildByName("Width").getText()),               Float.parseFloat(item.getChildByName("Height").getText()));
}                   protected final int readULong(final int position) throws NtlmEngineException {              return NtlmEngine.readULong(messageContents, position);          }                   protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {              return NtlmEngine.readSecurityBuffer(messageContents, position);          }
public interface GoogleSheetsEndpointBuilder              extends                  GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {          default AdvancedGoogleSheetsEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
javaWriter.emitPackage("com.squareup");      javaWriter.beginType("com.squareup.Foo", "class", 0);      javaWriter.beginMethod("int", "foo", 0, "java.lang.String", "s");     javaWriter.emitSingleLineComment("foo");      javaWriter.emitStatement("int j = s.length() + %s", 13);      javaWriter.endMethod();      javaWriter.endType();
public interface KubernetesSecretsEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesSecretsEndpointBuilder advanced() {
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface IrcEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIrcEndpointProducerBuilder advanced() {
sum += mBuf.get(pId % 16);            if (DEBUG_MODE) {             buf.DATA.order(ByteOrder.nativeOrder()).flip();              CommonUtils.printByteBuffer(LOG, buf.DATA);            }            buf.DATA.clear();
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void addAll (int[] array, int offset, int length) {     int[] items = this.items;     int sizeNeeded = size + length;    if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;    }
assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();     assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();     assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (pollFuture!= null &&!pollFuture.isCancelled())     pollFuture.cancel(false);   logger.trace("rapidRefreshFuture scheduleing for {} millis", millis);    pollFuture = pollService.scheduleAtFixedRate(new Runnable() {     @Override
public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags? "&exclude=hashtags" : ""), false));      }
}      @Override     public synchronized boolean updateWorld() {          boolean repositioned = octree.repositionNodes();          boolean updated = dataBridge.updateWorld();
if(LOG.isDebugEnabled()) {            LOG.debug("not assigning region (on kill list): " +             info.getRegionNameAsString());          }          return;        }
HttpServletResponse response) throws ServletException, IOException {     HttpSession httpSession = request.getSession();    String ipAddress = request.getRemoteAddr();     Integer loginAttempts = loginAttemptsByIP.get(ipAddress);     if (loginAttempts == null)      loginAttempts = 1;
*      * @param queueName Name of the job queue.     */   @InterfaceAudience.Private   public void setQueueName(String queueName) {      super.setQueueName(queueName);    }
SimpleMatrix fullVector = RNNUtils.concatenate(leftVector, rightVector);      for (int slice = 0; slice < size; ++slice) {        SimpleMatrix scaledFullVector = fullVector.scale(deltaFull.get(slice));       deltaTensor = deltaTensor.plus(Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose()).mult(scaledFullVector));      }      return deltaTensor.plus(WTDeltaNoBias);    }
*/    public void compact(String tableOrRegionName, String columnFamily)      throws IOException,  InterruptedException {     compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));    }    /**
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
return false;    }   synchronized String getBlockPoolId() {      if (bpNSInfo!= null) {        return bpNSInfo.getBlockPoolID();      } else {
*       * @return a message for the error.       */     @Message(id = 10831, value = "The master host controller cannot register slave host controllers as it's current running mode is '%s'")      String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);      /**
attr.addOperationParameterDescription(resources, "infinispan.container", op);          }         ALIASES.addOperationParameterDescription(resources, "infinispan.container", op).                  get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);          return op;      }
String sslPortString = CorbaORBService.getORBProperty(Constants.ORB_SSL_PORT);          int sslPort = sslPortString == null? 0 : Integer.parseInt(sslPortString);          try {             SSL ssl = new SSL((short) MIN_SSL_OPTIONS,                     (short) 0,                       (short) sslPort);              ORB orb = ORB.init();              Any any = orb.create_any();
public interface SjmsBatchEndpointBuilder extends EndpointConsumerBuilder {          default AdvancedSjmsBatchEndpointBuilder advanced() {              return (AdvancedSjmsBatchEndpointBuilder) this;          }
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
}   public void glDrawArrays (int mode, int first, int count) {   GL.glDrawArrays(mode, first, count);   }   public void glDrawElements (int mode, int count, int type, Buffer indices) {
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
);         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))                 .row("a", "a")                 .row("a", "a")                 .row("b", "b")
public interface Web3jEndpointBuilder              extends                  Web3jEndpointConsumerBuilder, Web3jEndpointProducerBuilder {          default AdvancedWeb3jEndpointBuilder advanced() {
break;                              case DOUBLE:                                  if (value.isEmpty()) {                                     builder.put(columnHandle, 1L);                                  }                                  else {                                      builder.put(columnHandle, parseDouble(value));
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public Mesh (VertexDataType type, boolean isStatic, int maxVertices, int maxIndices, VertexAttribute... attributes) {    if (type == VertexDataType.VertexBufferObject || Mesh.forceVBO) {      vertices = new VertexBufferObject(isStatic, maxVertices, attributes);      indices = new IndexBufferObject(isStatic, maxIndices);      isVertexArray = false;
* @param task          the task.       */      @LogMessage(level = Level.ERROR)     @Message(id = 10809, value = "%s caught %s waiting for task %s; returning")      void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);  }
@Test    @Verifies(value = "should pass if the duplicate ConceptName is neither preferred nor fully Specified", method = "validate(Object,Errors)")    public void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {    Context.setLocale(new Locale("en"));     Concept concept = Context.getConceptService().getConcept(5497);     ConceptName duplicateName = new ConceptName("duplicate name", Context.getLocale());
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/    public void compact(String tableOrRegionName, String columnFamily)      throws IOException,  InterruptedException {     compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));    }    /**
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
}          doRemoveRecord(key, source);          if (isEventsEnabled()) {             publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),                                                  CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                   origin, IGNORE_COMPLETION));          }          return null;
Assert.assertEquals(1, result.size());        hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()           .map(regionName -> regionName.split("\\.")[1]).collect(Collectors.toList()));       ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());        result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));        Assert.assertEquals(0, result.size());
SequenceFile.CompressionType compress) throws IOException {        super(conf, new Path(dirName),               comparator(comparator),              valueClass(NullWritable.class),               compressionType(compress));      }
edgeE.setAttribute("source", e.getSource().getNodeData().getId());          edgeE.setAttribute("target", e.getTarget().getNodeData().getId());         if( e.isDirected() && graphModel.isMixed() ) {              edgeE.setAttribute("type", "directed");          }         else if(!e.isDirected() && graphModel.isMixed() ) {              edgeE.setAttribute("type", "undirected");          }
.map(PlanNode::getId)                     .collect(toList());             NodeRepresentation nodeOutput = addNode(node, operatorName, format(formatString, arguments.toArray(new Object[0])), allNodes, ImmutableList.of(), ImmutableList.of());              if (projectNode.isPresent()) {                  printAssignments(nodeOutput, projectNode.get().getAssignments());
* @see <a href="http:       */      public ResponseList<Status> getMentions(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, paging.asPostParameterList(), true));      }
private static volatile List<String> updateWarnings = null;   /**    * Convenience method to run the changesets using Liquibase to bring the database up to a
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
* {@inheritDoc}       */      public List<Trends> getWeeklyTrends() throws TwitterException {         return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()                  + "trends/weekly.json"));      }
return additionalReplacements;    }   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
rel.setPersonA(personA);     rel.setPersonB(personB);     rel.setRelationshipType(relType);    ps.saveRelationship(rel);    }    public void voidRelationship(Integer relationshipId, String voidReason) {
private IntBuffer toIntBuffer (int v[], int offset, int count) {     ensureBufferCapacity(count << 2);    intBuffer.clear();     com.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);     return intBuffer;    }
assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();     assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();     assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();
if (pollFuture!= null &&!pollFuture.isCancelled())     pollFuture.cancel(false);   logger.trace("rapidRefreshFuture scheduleing for {} millis", millis);    pollFuture = pollService.scheduleAtFixedRate(new Runnable() {     @Override
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
}    public void glUniform2iv (int location, int count, IntBuffer v) {    GL20.glUniform2iv(location, v);    }    public void glUniform2iv (int location, int count, int[] v, int offset) {    GL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));    }    public void glUniform3f (int location, float x, float y, float z) {
}      @FixMethodOrder(MethodSorters.JVM)     static class DummySortJvm {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}        } catch (IOException e) {          out.println("Cannot list keys for KeyProvider: " + provider             + ": " + e.toString());          throw e;        }      }
int i = 0;          if (boi.getOutput()!= null) {              for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {                 if (elements.size() > i && elements.get(i)!= null) {                      answer.put(partInfo, elements.get(i++));                  }              }
@SuppressWarnings("unchecked")      public void returnsA500OnExceptions() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          final RuntimeException ex = new RuntimeException("whoops");
}   public SortedMap<String, Histogram> getHistograms(MetricFilter filter) {   return adaptMetrics(Histogram.class, reg.getHistograms(transformFilter(filter)));   }   public SortedMap<String, Meter> getMeters() {
* @return True, if the given number of bytes for a normalized suffice to determine the order of elements,    *         false otherwise.    */  public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes);   /**    * Writes a normalized key for the given record into the target byte array, starting at the specified position
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
}              public void unselect(Workspace workspace) {                 if (model.getSelectedLayout()!= null && model.getSelectedLayout()!= null) {                      model.saveProperties(model.getSelectedLayout());                  }              }
SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create("encoding", ModelType.STRING, true).build();     SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create("file", ModelType.OBJECT, false).              setCorrector(FileCorrector.INSTANCE).              setValidator(new FileValidator()).              build();
*/    public void majorCompact(final String tableNameOrRegionName)    throws IOException, InterruptedException {     majorCompact(Bytes.toBytes(tableNameOrRegionName));    }    /**
@Before      public void setUpAdminObjects() throws NamingException {          server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8280");         server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), "8380");          Assert.assertNotNull(server1Proxy);          Assert.assertNotNull(server2Proxy);      }
public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(3);          mock.setResultWaitTime(4000);          final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());
}      public class PutItemsThread extends Thread {         public static final int MAX_ITEMS = 100;          public final MyEntryListener listener = new MyEntryListener();          public HazelcastInstance client;
@Override   public void internalReceiveCommand(String itemName, Command command) {    super.internalReceiveCommand(itemName, command);   logger.trace("MyQ binding received command '{}' for item '{}'",      command, itemName);    if (myqOnlineData!= null) {     computeCommandForItem(command, itemName);
}                   protected final int getMessageLength() {              return currentOutputPosition;          }
public void testMoveException() throws Exception    {      MockStorageService mockS3Client = new MockStorageService();     S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());      mover.move(          sourceSegment,
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @param task          the task.       */      @LogMessage(level = Level.ERROR)     @Message(id = 10808, value = "%s caught %s waiting for task %s")      void caughtExceptionWaitingForTask(String className, String exceptionName, String task);      /**
if (timeout == null) {                  println(lock.tryLock());              } else {                 long time = Long.parseLong(timeout);                  try {                      println(lock.tryLock(time, TimeUnit.SECONDS));                  } catch (InterruptedException e) {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should delete global properties from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperties(List<GlobalProperty> globalProperties);   /**    * Save the given global property to the database. If the global property already exists,
SimpleRegistry registry = new SimpleRegistry();         registry.bind("curator", client);          producerContext = new DefaultCamelContext(registry);
assertThat(keySet).containsExactly(5, 6, 7, 8, 9, 10, 11, 12);    }   private static void getAll(LoadingCache<Integer, Integer> cache, List<Integer> keys) {      for (int i : keys) {        cache.getUnchecked(i);      }
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();     assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();     assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();
public interface AdvancedJmsEndpointBuilder              extends                  AdvancedJmsEndpointConsumerBuilder, AdvancedJmsEndpointProducerBuilder {          default JmsEndpointBuilder basic() {
Transition transition = parser.transitionIndex.get(predictedTransition.object());            State newState = transition.apply(state, predictedTransition.score());           if (bestState == null || bestState.score() < newState.score()) {              bestState = newState;            }            beam.add(newState);
warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\n');                          break;                      case HINT:                         hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\n');                          break;                  }              }
@ApiOperation(value = "Logs out current logged in user session", notes = "", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void logoutUser() throws Exception;      @PUT      @Path("/{username}")
*       * @return the message.       */     @Message(id = 10852, value = "Caught %s storing deployment content -- %s")      String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);      /**
try {                  commitStream();              } catch (IOException e) {                 LOGGER.log(Level.SEVERE, LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM(), e);              }          }      }
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
constructor.ret();      }     private static void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)      {          classDefinition.declareMethod(                  a(PUBLIC),
if (mod.getModuleActivator()!= null)       mod.getModuleActivator().willStop();     }    catch (Exception t) {      log.warn("Unable to call module's Activator.willStop() method", t);     }
try {              ((TextView) getView()).setText(s);          } catch (ClassCastException e) {             Log.e(IcsToast.TAG, "This Toast was not created with IcsToast.makeText", e);          }      }  }
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));          assertTrue(byteBuf.release());         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);          assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);
try {                      return unmarshaller.unmarshall(jsonContent.jsonNode);                  } catch (Exception e) {                     LOG.info("Unable to unmarshall exception content", e);                      return null;                  }              }
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    @Override   public N removeOutEdge(E edge) {      N node = super.removeOutEdge(edge);      Multiset<N> adjacentNodes = getReference(adjacentNodesReference);      if (adjacentNodes!= null) {
*       * @return the error message       */     @Message(id = 10835, value = IN_SERIES + " is missing groups: %s")      String inSeriesIsMissingGroups(String rolloutPlan);      /**
.retLong();      }     private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)      {          Parameter blockIndex = arg("blockIndex", int.class);          Parameter blockPosition = arg("blockPosition", int.class);
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Path("timeout")          public String getTimeout() {              try {                 Thread.sleep(5000);              } catch (InterruptedException e) {                  e.printStackTrace();              }
httpClientBinder(binder).bindHttpClient("execute", ForExecute.class)                 .withTracing()                 .withConfigDefaults(config -> {                     config.setIdleTimeout(new Duration(30, SECONDS));                      config.setRequestTimeout(new Duration(10, SECONDS));                  });
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
static final HazelcastProperty MAX_TOLERATED_MISS_COUNT              = new HazelcastProperty("hazelcast.invalidation.max.tolerated.miss.count", 10);      static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS             = new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds", 60, SECONDS);      static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS             = new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds", 30, SECONDS);      static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10802, value = "Interrupted awaiting final response from server %s on host %s")      void interruptedAwaitingFinalResponse(String serverName, String hostName);      /**
*       * @return the message.       */     @Message(id = 10854, value = "Null stream at index %d")      String nullStream(int index);      /**
public void setUnitOfWork(UnitOfWork unitOfWork) {          this.unitOfWork = unitOfWork;         if (onCompletions!= null &&!onCompletions.isEmpty()) {              for (Synchronization onCompletion : onCompletions) {
}              }.start();          }         assertOpenEventually(countDownLatch);          assertEquals(0, atomicLong.get());      }
*       * @return the message.       */     @Message(id = 10850, value = "No handler for operation %s at address %s")      String noHandlerForOperation(String operationName, PathAddress address);      /**
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid pet value", response = Void.class) })     void deletePet(@PathParam("petId") @ApiParam("Pet id to delete") Long petId,@HeaderParam("api_key")   String apiKey) throws Exception;      @GET      @Path("/findByStatus")
subgroup.setMaxQueuedQueries(4);          subgroup.setMaxRunningQueries(3);         MockQueryExecution query1 = new MockQueryExecution(2);          subgroup.run(query1);          root.processQueuedQueries();
mTfs.setState(dir0, mUnsetPinned);      Assert.assertFalse(mTfs.getInfo(file).isPinned);     Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());      mTfs.setState(file, mSetPinned);
public interface AdvancedJSR356WebSocketEndpointBuilder              extends                  AdvancedJSR356WebSocketEndpointConsumerBuilder, AdvancedJSR356WebSocketEndpointProducerBuilder {          default JSR356WebSocketEndpointBuilder basic() {
, (args = args.rest()).first()       , args.rest());     case 17:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
private long translateToDate( long timeWithDate, long time, TimeZone timeIsGivenInThisTimeZone )      {         Calendar calendar = Calendar.getInstance(timeWithDate);          calendar.setTimeInMillis( timeWithDate );          Calendar timeCalendar = Calendar.getInstance();
* @see <a href="http:       */      public List<Trends> getWeeklyTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json", false));      }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {    if (this instanceof SingleOutputStreamOperator) {     ((SingleOutputStreamOperator<?,?>) this).setMutability(false);    }
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables();   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc
public ClientResponse<InputStream> done(ClientResponse<InputStream> clientResponse)          {            long stopTimeNs = System.nanoTime();           long nodeTimeNs = stopTimeNs - requestStartTimeNs;            final long nodeTimeMs = TimeUnit.NANOSECONDS.toMillis(nodeTimeNs);            log.debug(                "Completed queryId[%s] request to url[%s] with %,d bytes returned in %,d millis [%,f b/s].",
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}              JavaClass enumClass = enumClasses.get(enumClassName);              if (enumClass == null) {                 enumClass = javaClass.addNestedType().setPackagePrivate().setStatic(true)                                 .setName(enumClassName).setEnum(true);                  enumClass.getJavaDoc().setText("Proxy enum for <code>" + type + "</code> enum.");                  enumClasses.put(enumClassName, enumClass);
LibraryCacheManager.unregister(executionGraph.getJobID());    } catch (IOException ioe) {     if (LOG.isWarnEnabled()) {     LOG.warn(ioe);     }    }   }
public void testGrouped() throws Exception {          MockEndpoint result = getMockEndpoint("mock:result");         result.expectedMinimumMessageCount(1);          template.sendBody("direct:start", "100");
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private class FileDropListener implements FileDrop.Listener {          private final JScrollPane scrollPane;         FileDropListener(JScrollPane scrollPane) {              this.scrollPane = scrollPane;          }
@Test      public void test_Decode_Return_Request_Event_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
);         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))                 .row("a", "a")                 .row("a", "a")                 .row("b", "b")
public interface AdvancedKinesisEndpointBuilder              extends                  AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {          default KinesisEndpointBuilder basic() {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue);   /**    * @param aClass class of object getting length for
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json", true));      }      /**
public void pickAddress() throws Exception {          try {              bindAddress = memberAddressProvider.getBindAddress();             logger.info("Using bind address: " + bindAddress);              publicAddress = memberAddressProvider.getPublicAddress();              validatePublicAddress(publicAddress);
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
File out = new File("target/out/hello.txt").getAbsoluteFile();          assertTrue("file should exists", out.exists());         assertEquals("Hello World", IOConverter.toString(out, null));      }      protected RouteBuilder createRouteBuilder() throws Exception {
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return false;      }     private static class RunnableExecuteHandler implements WorkHandler<RunnableEvent> {          @Override          public void onEvent(RunnableEvent runnableEvent) throws Exception {
byte[] buffer = new byte[Math.min((int) mSeekBufferSizeBytes, (int) len)];      do {       int bytesRead = read(buffer, 0);        Preconditions.checkState(bytesRead > 0, PreconditionMessage.ERR_UNEXPECTED_EOF);        len -= bytesRead;      } while (len > 0);
.retInt();      }     private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)      {          MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), "getSizeInBytes", type(long.class));
rpcEndpoint.start();    CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture();     rpcService.stopService();
@Before      public void setUpAdminObjects() throws NamingException {          server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), "8280");         server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), "8380");          Assert.assertNotNull(server1Proxy);          Assert.assertNotNull(server2Proxy);      }
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
public interface AtomixMultiMapEndpointBuilder              extends                  EndpointConsumerBuilder {          default AdvancedAtomixMultiMapEndpointBuilder advanced() {
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
*     * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.    */  public abstract boolean supportsNormalizedKey();   /**    * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized
*/   private void poll() {    if (invalidCredentials || this.myqOnlineData == null) {    logger.trace("Invalid Account Credentials");     return;    }
* Builder for endpoint for the Kubernetes Persistent Volume Claim       * component.       */     public interface KubernetesPersistentVolumesClaimsEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder advanced() {
@Override          public long increment(long timeMillis)          {           return timeMillis + MILLIS_IN;          }          @Override
}   @Configuration  public static class CustomEndpointConfiguration {    @Bean    public CustomEndpoint customEndpoint() {
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
if (!listeners.isEmpty()) {            MetaStoreListenerNotifier.notifyEvent(listeners,                                                  EventType.DROP_TABLE,                                                 new DropTableEvent(tbl, success, deleteData, this),                                                  envContext,                                                  transactionalListenerResponses, ms);          }
}        int index = unpackIndex(i);        float score = unpackScore(i);       newPacked[j] = pack(index, score);        ++j;      }      packed = newPacked;
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, paging.asPostParameterList(), true));      }
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
Class<?> c = makeClass(className, proceedOnExceptions);          if (c!= null) {            if (!classes.add(c)) {             LOG.warn("Ignoring duplicate class " + className);            }          }        }
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;");          } else if (propertyClass == double.class) {             mw.visitVarInsn(DLOAD, context.var("double", 2));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;");          } else if (propertyClass == boolean.class) {
mCurrentCacheStream.write(b, currentOffset, bytesRead);          } catch (IOException ioe) {            LOG.warn("Failed to write into TachyonStorage, the block " + getCurrentBlockId()               + " will not be in TachyonStorage");            mShouldCacheCurrentBlock = false;          }        }
public interface JSR356WebSocketEndpointBuilder              extends                  JSR356WebSocketEndpointConsumerBuilder, JSR356WebSocketEndpointProducerBuilder {          default AdvancedJSR356WebSocketEndpointBuilder advanced() {
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface AS2EndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedAS2EndpointProducerBuilder advanced() {
HostAndPort host = HostAndPort.fromString(server);          try {             return new URI("http", null, host.getHost(), host.getPortOrDefault(80), null, null, null);          }          catch (URISyntaxException e) {              throw new IllegalArgumentException(e);
SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create("target", ModelType.STRING, true).              setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).             setValidator(EnumValidator.create(Target.class, true, false)).              build();      SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create("use-parent-handlers", ModelType.BOOLEAN, true).
public interface AdvancedTwitterDirectMessageEndpointBuilder              extends                  AdvancedTwitterDirectMessageEndpointConsumerBuilder, AdvancedTwitterDirectMessageEndpointProducerBuilder {          default TwitterDirectMessageEndpointBuilder basic() {
@Override                   public String filter(AtmosphereResponse r, String message) {                      return message + end;                   }                   @Override
public interface JmsEndpointBuilder              extends                  JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {          default AdvancedJmsEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
public interface KubernetesConfigMapsEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedKubernetesConfigMapsEndpointBuilder advanced() {
@Override      public int hashCode() {         return Objects.hash(filePattern, checkPattern, moduleId, linesCsv, columnsCsv);      }      @Override
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
*/  @GwtCompatible(emulated = true)  public class BaseEncodingTest extends TestCase {   public static void assertEquals(byte[] expected, byte[] actual) {      assertEquals(expected.length, actual.length);      for (int i = 0; i < expected.length; i++) {        assertEquals(expected[i], actual[i]);
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
public void disable() {                  GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();                 if (model.getCurrentResult()!= null && graphModel!= null) {                      graphModel.destroyView(model.getCurrentResult());                      model.setCurrentResult(null);                  }
}   @Test  void testHealth() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
* @param cause the cause of the error.       */      @LogMessage(level = Level.WARN)     @Message(id = 10806, value = "Caught exception closing input stream")      void caughtExceptionClosingInputStream(@Cause Throwable cause);      /**
private static final String ARCHIVE_NAME = "stateless-ejb2-failover-test";      private static final String ARCHIVE_NAME_DD = "stateless-ejb2-failover-dd-test";     private static final Integer PORT_2 = 11000;      private static final String HOST_2 = System.getProperty("node1");      private static final String REMOTE_PORT_PROPERTY_NAME = "remote.connection.default.port";      private static final String REMOTE_HOST_PROPERTY_NAME = "remote.connection.default.host";
}      @Override     public void dispatchEvent(IdentifiedDataSerializable event, ReplicatedMessageListener listener) {          listener.onMessage(event);      }
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ticker.advance(16000000);      stopwatch.start();     assertEquals(9, stopwatch.elapsed(MILLISECONDS));      ticker.advance(25000000);     assertEquals(34, stopwatch.elapsed(MILLISECONDS));      stopwatch.stop();      ticker.advance(36000000);     assertEquals(34, stopwatch.elapsed(MILLISECONDS));    }    @GwtIncompatible("String.format()")
*       * @return the message.       */     @Message(id = 10852, value = "Caught %s storing deployment content -- %s")      String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);      /**
*       * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
}       class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
int msgType = buf.readInt();    KvStateRequestType[] values = KvStateRequestType.values();   if (msgType > 0 && msgType < values.length) {     return values[msgType];    } else {     throw new IllegalArgumentException("Illegal message type with index " + msgType);
taken = watch.stop();          assertEquals(taken, watch.taken());         assertTrue("Should take approx 200 millis, was: " + taken, taken > 150);      }      public void testStopWatchRestart() throws Exception {
try {        jarFile = new JarInputStream(new FileInputStream(jarFileName));      } catch (IOException ioEx) {       LOG.warn("Failed to look for classes in " + jarFileName + ": " + ioEx);        throw ioEx;      }
public interface CassandraEndpointBuilder              extends                  CassandraEndpointConsumerBuilder, CassandraEndpointProducerBuilder {          default AdvancedCassandraEndpointBuilder advanced() {
command = new RollCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if ("list".equals(args[i])) {          command = new ListCommand();
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
/**       * If {@code true} then disable META-INF/services lookup globally on client/server.       * <p>      * By default Jersey lookups SPI implementations described by META-INF/services/* files.       * Then you can register appropriate provider classes by {@link javax.ws.rs.core.Application}.       * </p>       * <p>
*  *  @see java.util.Comparator    */  public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
ar = new AtmosphereResourceImpl(config,                  broadcaster,                  mock(AtmosphereRequest.class),                 AtmosphereResponse.newInstance(),                  mock(BlockingIOCometSupport.class),                  atmosphereHandler);
for (final Thread.State state : Thread.State.values()) {              gauges.put(name(state.toString().toLowerCase(), "count"),                        new Gauge<Integer>() {                             @Override                            public Integer getValue() {                                 return getThreadCount(state);                             }                         });
}      public boolean hasAttributes() {         return nodeData.getAttributes()!= null;      }      public void setAttributes(Attributes attributes) {
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = this.rest.getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
maker, computingFunction);    }   private static MapMaker createMapMaker() {      MapMaker maker = new MapMaker();      maker.useCustomMap = true;      return maker;
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (name == null)     return null;    try {    return Class.forName(name, true, Thread.currentThread().getContextClassLoader());    } catch (ClassNotFoundException e) {     return null;    }
*/   @Override   public Collection<Item> getItems() {   Set<Item> items = new TreeSet<Item>();    for (String name : modelRepository.getAllModelNamesOfType("items")) {     items.addAll(getItemsFromModel(name));    }
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    private void getTiles (int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {    TiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get("walls");     rectPool.freeAll(tiles);     tiles.clear();     for (int y = startY; y <= endY; y++) {
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.parseLong(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (isStatisticsEnabled()) {              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNanos(System.nanoTime() - start);              }              if (getValue) {                  if (oldValueNull) {
if (!currentConfigHash.equals(cachedConfigHash)) {                      details.clear();                     details.setProperty(CONFIG_HASH_KEY, currentConfigHash);                  }              }              finally {
if (TACHYON_STREAMING_READ) {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            InputStream is = file.getInStream(ReadType.CACHE);            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
public interface CxfEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCxfEndpointProducerBuilder advanced() {
public interface AdvancedFlinkEndpointBuilder              extends                  EndpointProducerBuilder {          default FlinkEndpointBuilder basic() {
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedKafkaEndpointBuilder              extends                  AdvancedKafkaEndpointConsumerBuilder, AdvancedKafkaEndpointProducerBuilder {          default KafkaEndpointBuilder basic() {
.addFlag(Flag.RESTART_ALL_SERVICES)             .setAllowExpression(true)             .setCorrector(MapAttributeDefinition.LIST_TO_MAP_CORRECTOR)            .setValidator(new StringLengthValidator(1, true))             .build();      public static AttributeDefinition[] ALL_ATTRIBUTES = new AttributeDefinition[]{CODE, VAULT_OPTIONS};
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface AdvancedJcloudsEndpointBuilder              extends                  AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {          default JcloudsEndpointBuilder basic() {
public void configure() throws Exception {                  from("direct:start")                         .multicast(new MyAggregationStrategy())                            .parallelProcessing().timeout(1000).to("direct:a", "direct:b", "direct:c")                         .end()                         .to("mock:result");                 from("direct:a").delay(2000).setBody(constant("A"));                  from("direct:b").setBody(constant("B"));
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
final Class<?> type = field.getType();    final String name = tableInfo.getColumnName(field);   final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());    final Column column = field.getAnnotation(Column.class);    if (typeSerializer!= null) {
public void testMultipleAlternativesWithCommonLabel_4() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
empiricalCountsForADoc(eHat4Update, ind);       expectedCountsForADoc(weights, e4Update, ind);        /* the commented out code below is to iterate over the batch docs instead of iterating over all           parameters at the end, which is more efficient; but it would also require us to clearUpdateEs()
public interface AdvancedJcloudsEndpointBuilder              extends                  AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {          default JcloudsEndpointBuilder basic() {
@Override      public void addToCache(String broadcasterId, AtmosphereResource r, Message e) {         long now = System.nanoTime();          put(e, now);          if (r!= null) {
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    factory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));    factory.addContextLifecycleListeners(listeners[2], listeners[3]);   this.container = factory.getEmbeddedServletContainer();    InOrder ordered = inOrder((Object[]) listeners);    for (LifecycleListener listener : listeners) {     ordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());
public interface ServerEndpointBuilder              extends                  ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {          default AdvancedServerEndpointBuilder advanced() {
*/      public T build(ConfigurationSourceProvider provider, String path) throws IOException, ConfigurationException {          try (InputStream input = provider.open(checkNotNull(path))) {             final JsonNode node = mapper.readTree(yamlFactory.createParser(input));              return build(node, path);          }      }
public void addAll (char[] array, int offset, int length) {     char[] items = this.items;     int sizeNeeded = size + length ;    if (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;    }
}    @Override   public N removeOutEdge(E edge) {      N node = super.removeOutEdge(edge);      Multiset<N> successors = getReference(successorsReference);      if (successors!= null) {
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName);   /**    * Gets the global property that has the given <code>propertyName</code>
new Thread() {              public void run() {                  try {                     if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {                          tryLockSuccess.countDown();                      }                  } catch (InterruptedException e) {
* @should exclude not allowed locales    * @should cache results for a user    */  public List<Locale> getSearchLocales();   /**    * Used by Spring to set the http client for accessing the openmrs implementation service
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
*  * @see    */  public abstract boolean equalToReference(T candidate);   /**    * This method compares the element that has been set as reference in this type accessor, to the
private static final Logger logger = Logger.getLogger(TransactedTopicMessageSender.class);     @Resource(lookup = "java:/topic/myAwesomeTopic")      private Topic topic;     @Resource(lookup = "java:/ConnectionFactory")      private ConnectionFactory factory;      @Resource
return swagger;      }     private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {          List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs());          Collections.sort(verbs, new VerbOrdering());
Files.copy(cnf2Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);     Admin admin = TEST_UTIL.getAdmin();      ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();      admin.updateConfiguration(server);      Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTextures(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final long committedOffset = KafkaJournal.this.committedOffset.get();              final HashSet<LogSegment> logSegments = Sets.newHashSet(                     JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))              );              loggerForCleaner.debug("[cleanup-committed] Keeping segments {}", logSegments);              return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
CHECK_TEXT.get("Description")                                  + CHECK_TEXT.computeIfAbsent("Rule Description", unused -> "")                                  + CHECK_TEXT.computeIfAbsent("Notes", unused -> "")                                 + CHECK_TEXT.get("Properties")                                  + CHECK_TEXT.get("Examples") + " @since "                                  + CHECK_TEXT.get("since"), getJavaDocText(ast));              }
template.sendBodyAndHeader("file:          MockEndpoint mock = getMockEndpoint("mock:result2");         mock.expectedBodiesReceivedInAnyOrder("Hello World 2");          assertMockEndpointsSatisfied();          oneExchangeDone.matchesMockWaitTime();
public interface AdvancedValidatorEndpointBuilder              extends                  EndpointProducerBuilder {          default ValidatorEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
}      @FixMethodOrder(MethodSorters.NAME_ASCENDING)     static class DummySortWithNameAsc {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNanos(System.nanoTime() - start);          }          return result;      }
*/  public class ManagedRouteAddRemoveTest extends ManagementTestSupport {     private int services = 6;      @Override      protected RouteBuilder createRouteBuilder() throws Exception {
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
}      @Override     public synchronized Connection getOrConnect(Address address, boolean silent) {          return getOrConnect(address);      }     public synchronized void block(Address address) {          blockedAddresses.add(address);          Connection connection = getConnection(address);          if (connection!= null) {
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
assertThat(cookie.getCommentURL()).isNull();      assertThat(cookie.getDiscard()).isFalse();     assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(5.0));      assertThat(cookie.getPath()).isEqualTo("/path");      assertThat(cookie.getSecure()).isTrue();    }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return Type of exception       */     public Class<? extends T> exceptionClass() {          return this.exceptionClass;      }
PlayerListener trueListener = (PlayerListener)listener;              switch (event.getType()) {                 case PLAYER_JOIN:                      trueListener.onPlayerJoin((PlayerEvent)event);                      break;                 case PLAYER_QUIT:                      trueListener.onPlayerQuit((PlayerEvent)event);                      break;              }
*       * @return the error message       */     @Message(id = 10834, value = "%s recognizes only %s as children: %s")      String unrecognizedChildren(String parent, String children, String parentSpec);      /**
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
case CREATE:                  if (isStatisticsEnabled) {                      statistics.increaseCachePuts(1);                     statistics.addGetTimeNanos(System.nanoTime() - start);                  }                  cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);                  break;
final PaginatedList<TestDTO> page1reverse = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.desc("title"), 1, 2);          assertThat(page1reverse.pagination().getCount()).isEqualTo(2);         assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(5);          assertThat(page1reverse.delegate())                 .extracting("title")                 .containsExactly("hello6", "hello5");
new StaticFieldGetterSetterInliner(root).run();     GatherGetterAndSetterProperties.update(compiler, externs, root);    }    class StaticFieldGetterSetterInliner {
*       * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface CordaEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCordaEndpointProducerBuilder advanced() {
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
*  * @see NormalizableKey    */  public abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple));    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
@PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })  public class ConfigurationLoaderTest {     private static Configuration loadConfiguration(String name)          throws CheckstyleException {          return loadConfiguration(name, new Properties());      }     private static Configuration loadConfiguration(          String name, Properties props) throws CheckstyleException {          final String fName =              "src/test/resources/com/puppycrawl/tools/checkstyle/configs/" + name;
Assert.assertFalse("expectedIter not exhausted!?", expectedIter.hasNext());    }   @Test(timeout = 20_000L)    public void testDeadLock() throws Exception    {      final URL[] urls = ((URLClassLoader)QueryGranularity.class.getClassLoader()).getURLs();
.setXmlName(CommonAttributes.FACTOR)             .setAllowExpression(true)            .setValidator(new IntRangeValidator(0, true, true))             .build();
int completionId = nextCompletionId();                  ClientMessage request =                         CachePutAllCodec.encodeRequest(nameWithPrefix, entries, expiryPolicyData, partitionId);                  Future f = invoke(request, partitionId, completionId);                  futureEntriesTuples.add(new FutureEntriesTuple(f, entries));                  if (nearCache!= null) {
public interface JmsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedJmsEndpointProducerBuilder advanced() {
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
*    * @author warneke   */ public class Buffer implements ReadableByteChannel, WritableByteChannel {   /**    * The concrete buffer implementation to which all method calls on
if (mConnected) {        try {         if (mHeartbeat!= null && mHeartbeatExecutor!= null) {            mHeartbeatExecutor.heartbeat();          }          mProtocol.getTransport().close();
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private void configurationElement(XNode context) {      try {        String namespace = context.getStringAttribute("namespace");       if (namespace == null || namespace.equals("")) {          throw new BuilderException("Mapper's namespace cannot be empty");        }        builderAssistant.setCurrentNamespace(namespace);
HRegionInfo mockRegionInfo = Mockito.mock(HRegionInfo.class);      Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);      Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);     Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);      qosFunction.setRegionServer(mockRS);      assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);    }
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}              }          }         if (securityDomain!= null &&! securityDomain.isEmpty())              description.setSecurityDomain(securityDomain);         else if (globalSecurityDomain!= null &&!globalSecurityDomain.isEmpty())              description.setSecurityDomain(globalSecurityDomain);      }
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
public interface IgniteCacheEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIgniteCacheEndpointProducerBuilder advanced() {
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Farewell World", Exchange.FILE_NAME, "mysub/mysubsub/farewell.txt");         Thread.sleep(800);          File file = new File(getScpPath() + "/mysub/mysubsub/farewell.txt");          assertFileExists(file.getAbsolutePath());
ConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);     assumedDuplicateName.setName(duplicateName.getName());     newConcept.addName(assumedDuplicateName);    Errors errors = new BindException(newConcept, "concept");     new ConceptValidator().validate(newConcept, errors);     Assert.assertEquals(false, errors.hasErrors());    }
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {            mBuf.putInt(0, k + mWorkerId);
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
logger.debug("got a query");      if (!isProperlyConfigured) {       logger.warn("Configuration for influxdb not yet loaded or broken.");        return Collections.emptyList();      }      if (!isConnected()) {       logger.warn("InfluxDB is not yet connected");        return Collections.emptyList();      }
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
public void testSamplingUsingmessageFrequency() throws Exception {          long totalMessages = 100;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
state = MachineState.RUNNING;              }             this.startTime = Time.currentTimeMillis();              this.newAssignment = newAssignment;              this.pendingLocalization = null;              this.pendingDownload = null;
+ ") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name";          gen.get().addSnippet( "query-get-admins", createCypherSnippet( query ) );          String result = engine.execute( query )                .dumpToString();          assertTrue( result.contains("Engin") );          gen.get().addSnippet( "o-query-get-admins", createQueryResultSnippet( result ) );
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return (T) fastConstructor.newInstance(arguments);        }        public List<Parameter<?>> getParameters() {         return Parameter.forConstructor(errorHandler, fastConstructor);        }        public Member getMember() {         return fastConstructor.getMethodConstructor();        }      };    }
public interface AdvancedCaffeineLoadCacheEndpointBuilder              extends                  AdvancedCaffeineLoadCacheEndpointConsumerBuilder, AdvancedCaffeineLoadCacheEndpointProducerBuilder {          default CaffeineLoadCacheEndpointBuilder basic() {
}     }    if (!((min1 <= min2 && max1 >= min2) || (min2 <= min1 && max2 >= min1))) {      return false;     } else {      float o = Math.min(max1, max2) - Math.max(min1, min2);
@Configuration   @ConditionalOnBean(SolrServer.class)  @ConditionalOnEnabledHealthIndicator("solr")   public static class SolrHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10834, value = "%s recognizes only %s as children: %s")      String unrecognizedChildren(String parent, String children, String parentSpec);      /**
return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());      }     private static void generateConstructor(ClassDefinition classDefinition,              List<Integer> joinChannels,              FieldDefinition sizeField,              List<FieldDefinition> channelFields,
out.println(keyName + " has been successfully deleted.");            printProviderWritten();          } catch (IOException e) {           out.println(keyName + " has not been deleted. " + e.toString());            throw e;          }        }
if (processDefinition!= null && processDefinition.isGraphicalNotationDefined()) {        try {         BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getProcessDefinitionId());          InputStream definitionImageStream = ProcessDiagramGenerator.generateDiagram(bpmnModel, "png",                   runtimeService.getActiveActivityIds(processInstance.getId()));
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private SocketChannel channel;      public MysqlQueryExecutor(MysqlConnector connector) throws IOException{           if (!connector.isConnected()) {              throw new IOException("should execute connector.connect() first");           }           this.channel = connector.getChannel();
public interface AdvancedBrowseEndpointBuilder              extends                  AdvancedBrowseEndpointConsumerBuilder, AdvancedBrowseEndpointProducerBuilder {          default BrowseEndpointBuilder basic() {
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {    return bulkInsertableMap!= null && bulkInsertableMap.containsKey(persistentObjectClass);    }
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.retInt();      }     private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)      {          MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), "getSizeInBytes", type(long.class));
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      public int hashCode()      {         return Objects.hash(expressions);      }      @Override
Object convertedValue;      if (value.scale() == 0) {        logger.trace("found no fractional part");       convertedValue = value.doubleValue();      } else {        logger.trace("found fractional part");        convertedValue = value.doubleValue();
public interface AtomixQueueEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedAtomixQueueEndpointProducerBuilder advanced() {
+ (StringUtils.isEmpty(modelPackage)? "" : (modelPackage + "/")) + dataType;      }           private String getJSDocType(CodegenModel cm, CodegenProperty cp) {          if (Boolean.TRUE.equals(cp.isContainer)) {
@Override      protected void doStop() throws Exception {          if (channel!= null) {             LOG.debug("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void process(Exchange exchange) throws Exception {                              Random ran = new Random();                             int delay = ran.nextInt(250) + 10;                              Thread.sleep(delay);                          }                      }).to("mock:result");
public interface AdvancedAtomixValueEndpointBuilder              extends                  AdvancedAtomixValueEndpointConsumerBuilder, AdvancedAtomixValueEndpointProducerBuilder {          default AtomixValueEndpointBuilder basic() {
*/    public static long getUnsafeByteBufferAddress(ByteBuffer buffer) {     synchronized(unsafeBuffers) {     if (!unsafeBuffers.contains(buffer, true))       return 0;     }     return getByteBufferAddress(buffer);
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
}          catch (IllegalArgumentException e) {              final String msg = e.getMessage();             Assert.assertEquals(msg, "Unexpected token type: methodStub");          }      }  }
@AfterClass      public static void killAllHazelcastInstances() throws IOException {         factory.terminateAll();      }      @Test
ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();          for (Expression expression : expressions) {             Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getTypeWithCoercions(expression));              projections.put(symbol, translations.rewrite(expression));              newTranslations.put(symbol, expression);
* @should fail if global property being updated does not already exist    * @should update a global property whose typed value is handled by a custom datatype    */  public void updateGlobalProperty(String propertyName, String propertyValue);   /**    * Save the given global property to the database
}          if (timeoutCheckerExecutorService!= null) {             camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService);          }          ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables();   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc
if (setter!= null) {                      if (paramType == null) {                      paramType = setter.getParameterType(0);                       }                      for (final Annotation fieldAnnotation : setter.annotations()) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10803, value = "Caught exception awaiting final response from server %s on host %s")      void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);      /**
switch (len) {                           case 1:                              value = buffer.getUint8();                               break;                           case 2:                               value = buffer.getBeUint16();
public interface ServerEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedServerEndpointProducerBuilder advanced() {
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
newConfig.setEvictionPolicy(mapConfig.getEvictionPolicy());          newConfig.setEvictionPercentage(mapConfig.getEvictionPercentage());          newConfig.setReadBackupData(mapConfig.isReadBackupData());         newConfig.setBackupCount(mapConfig.getBackupCount());          newConfig.setAsyncBackupCount(mapConfig.getAsyncBackupCount());          newConfig.setMaxSizeConfig(mapConfig.getMaxSizeConfig());          service.getMapContainer(mapName).setMapConfig(newConfig.getAsReadOnly());
numKeys++;          } while (numKeys < batchSize); if (numKeys > 1 && numKeys!= 0) {            readKey(keysForThisReader);            numUniqueKeysVerified.getAndAdd(readingRandomKeyStartIndex == -1?
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/subscriptions.json?cursor=" + cursor, true));      }
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
* @see <a href="http:       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags? "&exclude=hashtags" : ""), false));      }
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
if (id!= null) {              builder.getAdviceWithTasks().add(AdviceWithTasks.afterById(route, id, answer, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          } else if (toString!= null) {             builder.getAdviceWithTasks().add(AdviceWithTasks.afterByToString(route, toString, answer, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          } else if (type!= null) {              builder.getAdviceWithTasks().add(AdviceWithTasks.afterByType(route, type, answer, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          }
*       * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
.retInt();      }     private static void generatePositionEqualsRowMethod(              ClassDefinition classDefinition,              CallSiteBinder callSiteBinder,              List<Type> joinChannelTypes,
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private static final String MOVE_COST_KEY = "hbase.master.balancer.stochastic.moveCost";      private static final String MAX_MOVES_PERCENT_KEY =          "hbase.master.balancer.stochastic.maxMovePercent";     private static final float DEFAULT_MOVE_COST = 50;      private static final int DEFAULT_MAX_MOVES = 600;      private static final float DEFAULT_MAX_MOVE_PERCENT = 0.25f;
private final Border dragBorder;          private final Listener listener;         FileDropTargetListener(Component component, Border dragBorder, Listener listener) {              this.component = component;              this.dragBorder = dragBorder;              this.listener = listener;
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
simpleRpcEndpoint.shutDown();   CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture();
if (v.getLock() == LOCK_SUCCESS) {                      continue;                  }                 if (v.getCreationTime() + timeToLive < now) {                      iter.remove();                  } else if (maxSize > 0 && maxSize!= Integer.MAX_VALUE) {                      if (entries == null) {
setAll(lowResults,highResults,expectedResults,MENTION_TP,12370);      setAll(lowResults,highResults,expectedResults,MENTION_F1,55.6);     setAll(lowResults,highResults,expectedResults,MUC_TP,5965);      setAll(lowResults,highResults,expectedResults,MUC_F1,57.93);      setAll(lowResults,highResults,expectedResults,BCUBED_TP,6868.81);
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
case CompactObjectOutputStream.TYPE_THIN_DESCRIPTOR:              String className = readUTF();              Class<?> clazz = classResolver.resolve(className);             return ObjectStreamClass.lookup(clazz);          default:              throw new StreamCorruptedException(                      "Unexpected class descriptor type: " + type);
@Test   public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {console.log($ctx.toStringTree(null, this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
public interface ClassEndpointBuilder extends EndpointProducerBuilder {          default AdvancedClassEndpointBuilder advanced() {              return (AdvancedClassEndpointBuilder) this;          }
public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(729);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {System.out.println($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public interface TelegramEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedTelegramEndpointProducerBuilder advanced() {
&&!NettyUtils.isDomainSocketSupported(address)          && blockSource == BlockInStreamSource.LOCAL) {        try {         LOG.debug("Creating short circuit input stream for block {} @ {}", blockId, address);          return createLocalBlockInStream(context, address, blockId, blockSize, options);        } catch (NotFoundException e) {
*       * @param resource the resource       */     public ResourceInternal(R resource) {        mResource = resource;        mLastAccessTimeMs = mClock.millis();      }
public interface DirectVmEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedDirectVmEndpointProducerBuilder advanced() {
}                      }                      nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));                     nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));                      if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {                          nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, "application/x-www-form-urlencoded");
}      else {      log.error("PID contains identifier with no assigning authority");       continue;      }     }
*       * @return the message.       */     @Message(id = 10869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
*/  public class RoutePolicyProcessor extends DelegateAsyncProcessor {     private static final Log LOG = LogFactory.getLog(RoutePolicyProcessor.class);      private final List<RoutePolicy> routePolicies;      private Route route;
new GenericFutureListener<Future<Channel>>() {              @Override              public void operationComplete(Future<Channel> future) throws Exception {                 ctx.writeAndFlush(                          "Welcome to " + InetAddress.getLocalHost().getHostName() +                          " secure chat service!\n");                 ctx.writeAndFlush(                          "Your session is protected by " +                          ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +                          " cipher suite.\n");
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
result.expectedMessageCount(2);          MockEndpoint error = getMockEndpoint("mock:error");         error.expectedMinimumMessageCount(2);          MockEndpoint kaboom = getMockEndpoint("mock:kaboom");
}              Object[] valuesArray = vals.toArray();              min = AttributeUtils.getDefault().getMin(column, valuesArray);             max = AttributeUtils.getDefault().getMax(column, valuesArray);          }          public String getName() {
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final R record = createRecord(value, expirationTime);          updateHasExpiringEntry(record);          if (isEventsEnabled()) {             publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),                                                  expirationTime, origin, completionId));          }          return record;      }
repo.setDeadLetterUri("direct:dead");         repo.setRecoveryInterval(1000, TimeUnit.MILLISECONDS);          super.setUp();      }
/*  * Copyright 2012-2018 the original author or authors.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.
{      a[i] = s.first();      }    if(a.length > count())      a[count()] = null;     return a;     }
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);         assertTrue(model.getUniqueItems());      }  } \ No newline at end of file
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* @should exclude not allowed locales    * @should cache results for a user    */  public List<Locale> getSearchLocales();   /**    * Used by Spring to set the http client for accessing the openmrs implementation service
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers, "mBlockIdsOnTiers");      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public void test_kr_1() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
}    public boolean touchDown (int screenX, int screenY, int pointer, int button) {    Object[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (((InputProcessor)items[i]).touchDown(screenX, screenY, pointer, button)) return true;     } finally {      processors.end();     }
long taken = watch.stop();          assertEquals(taken, watch.taken());         assertTrue("Should take approx 200 millis, was: " + taken, taken > 150);      }      public void testStopWatchNotStarted() throws Exception {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static final FunctionType TOP_FUNCTION = new FunctionType(        null, null, null, null, null, null, null, null, null);   public static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(        null, null, null, null, null, null, null, null, null, null);
}    if (CopyableValue.class.isAssignableFrom(type)) {    return (TypeComparator<T>) new CopyableValueComparator(sortOrderAscending, type);    }    else {    return (TypeComparator<T>) new ValueComparator(sortOrderAscending, type);    }   }
wakenUp.set(false);                  try {                     int selectedKeyCount = selector.select(10);
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
{        if (connectionTimeout!= Integer.MAX_VALUE) {           try {             dataSource.setLoginTimeout((int) TimeUnit.MILLISECONDS.toSeconds(Math.max(1000L, connectionTimeout)));           }           catch (SQLException e) {              logger.warn("Unable to set DataSource login timeout", e);
}       public final ImmutableList<ObjectType> getOwnImplementedInterfaces() {      return implementedInterfaces;    }
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   public void glPolygonOffset (float factor, float units) {   GL.glPolygonOffset(factor, units);   }   public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
}      private Channel lookupInCache(Url url) {         Channel channel = connectionsPool.get(url.getBaseUrl());          if (channel!= null) {              /**               * The Channel will eventually be closed by Netty and will becomes invalid.
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
HttpContent chunk = (HttpContent) ch.readInbound();          DecoderResult dr = chunk.getDecoderResult();          assertFalse(dr.isSuccess());         assertTrue(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @param context The start context       */     public synchronized void start(StartContext context) throws StartException {          classifyingModuleLoader = new ClassifyingModuleLoader(delegates, Module.getCurrentLoader());          Module.setModuleLoaderSelector(new SimpleModuleLoaderSelector(classifyingModuleLoader));      }
String uri = getScpUri() + "?username=admin&password=admin&chmod=640&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Bonjour Monde", Exchange.FILE_NAME, "monde.txt");         Thread.sleep(800);          File file = new File(getScpPath() + "/monde.txt");          assertFileExists(file.getAbsolutePath());
@Override      public ByteBuf buffer(int initialCapacity) {       if (initialCapacity <= capacity) {          return buffer();        } else {          throw new IllegalArgumentException();
, (args = args.rest()).first()       , args.rest());     case 12:     return doInvoke(args.first()       , (args = args.rest()).first()       , (args = args.rest()).first()       , (args = args.rest()).first()
.ifFalse(type.invoke("hash", int.class, blockRef, blockPosition));      }     private static void generateRowEqualsRowMethod(              ClassDefinition classDefinition,              CallSiteBinder callSiteBinder,              List<Type> joinChannelTypes)
}      public synchronized ProcessorType getLastInterceptedNode() {         if (routeList == null || routeList.isEmpty()) {              return null;          }          return routeList.get(routeList.size() - 1);
if (TACHYON_STREAMING_READ) {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            InputStream is = file.getInStream(ReadType.CACHE);            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
* to backtype.storm.scheduler.IsolationScheduler to make use of the isolation scheduler.       */      public static final String ISOLATION_SCHEDULER_MACHINES = "isolation.scheduler.machines";     public static final Object ISOLATION_SCHEDULER_MACHINES_SCHEMA = Map.class;      public static void setDebug(Map conf, boolean isOn) {          conf.put(Config.TOPOLOGY_DEBUG, isOn);
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Set the format for a check.       * @param format a <code>String</code> value       */     public final void setCheckFormat(String format) {          checkFormat = format;      }
public interface JcrEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedJcrEndpointProducerBuilder advanced() {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@ApiOperation(value = "Logs out current logged in user session", notes = "", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void logoutUser() throws Exception;      @PUT      @Path("/{username}")
private String charset;      private int bpos;     XMLStreamReaderInputStream(XMLStreamReader reader, String charset, XMLOutputFactory outfactory) {          this.reader = reader;          this.buffer = new byte[BUFFER_SIZE];          this.chunk = new TrimmableByteArrayOutputStream();
@Test   public void testMultipleAlternativesWithCommonLabel_4() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
public interface RestletEndpointBuilder              extends                  RestletEndpointConsumerBuilder, RestletEndpointProducerBuilder {          default AdvancedRestletEndpointBuilder advanced() {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
Node node1 = Node.newString(Token.NAME, "f");      node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");     assertFalse(node1.isEquivalentToTyped(node2));    }    public void testVarArgs1() {
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
command = new DeleteCommand(keyName);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return 1;          }        } else if (args[i].equals("roll")) {          String keyName = "--help";
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(740);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {Console.WriteLine($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
long start = System.currentTimeMillis();          MockEndpoint result = getMockEndpoint("mock:result");         result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I", "B+D+F+H+J");          assertMockEndpointsSatisfied();
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10852, value = "Caught %s storing deployment content -- %s")      String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);      /**
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
import org.jboss.logging.MessageLogger;  /**  * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain * controller logger messages. See http:   * JBAS message id blocks.   * <p/>
}               final InetAddress inetAddress = InetAddress.getByName(currentAddress);               ServerSocket serverSocket = serverSocketChannel.socket();              serverSocket.setReuseAddress(true);               InetSocketAddress isa;               int port = config.getPort();
private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, final Channel channel) throws MalformedURLException {          if (future.getKeepAlive() && maxConnectionsPerHost++ < config.getMaxConnectionPerHost()) {             connectionsPool.put(future.getUrl(), future);          } else {              connectionsPool.remove(future.getUrl());          }
return compiler;    }   private static final ImmutableList<SourceFile> EMPTY_EXTERNS =       ImmutableList.of(       SourceFile.fromCode("externs", ""));    /** * Ensure that the printInputDelimiter option adds a "
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public int read(String table, String key, Set<String> fields,              HashMap<String, ByteIterator> result) {          if (fields == null) {             StringByteIteartor.putAllAsByteIterators(result, jedis.hlen(key));          }          else {              String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);
* before growing the backing table. */   public IntFloatMap (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (initialCapacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
public void test_cn_4() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
* Removes try/catch/finally statements for easier debugging.     */    void removeTryCatchFinally() {     logger.fine("Remove try/catch/finally");      startPass("removeTryCatchFinally");      RemoveTryCatch r = new RemoveTryCatch(this);      process(r);
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
case LIST:                  return new ListJsonReader(streamDescriptor, writeStackType, checkForNulls, hiveStorageTimeZone, sessionTimeZone);              case MAP:                 return new MapJsonReader(streamDescriptor, writeStackType, checkForNulls, sessionTimeZone, sessionTimeZone);              case UNION:              case DECIMAL:              case VARCHAR:
private int maxNumberOfIndices = 20;      @Parameter(value = "output_batch_size", required = true, validator = PositiveIntegerValidator.class)     private int outputBatchSize = 25;      @Parameter(value = "outputbuffer_processors", required = true, validator = PositiveIntegerValidator.class)     private int outputBufferProcessors = 3;      @Parameter(value = "outputbuffer_processor_threads_max_pool_size", required = true, validator = PositiveIntegerValidator.class)      private int outputBufferProcessorThreadsMaxPoolSize = 30;
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
transfertEncoding == null? DEFAULT_TRANSFER_ENCODING : transfertEncoding);      }     public final void setFileName(String fileName) {          this.fileName = fileName;      }
status.setHealthReport("sick");      status.setIsNodeHealthy(false);      node.handle(new RMNodeStatusEvent(node.getNodeID(), status,         new ArrayList<ContainerStatus>(), null, null));      Assert.assertEquals(NodeState.UNHEALTHY, node.getState());      return node;    }
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists.json?cursor=" + cursor, true));      }
RecipientListProcessor rlp = new RecipientListProcessor(exchange.getContext(), producerCache, iter, getAggregationStrategy(),                                                                  isParallelProcessing(), getExecutorService(), isStreaming(), isStopOnException(), getTimeout()) {              @Override             protected ExecutorService createAggregateExecutorService(String name, String originalName) {                  if (aggregateExecutorService == null) {                      aggregateExecutorService = super.createAggregateExecutorService("RecipientList-AggregateTask");
if (TACHYON_STREAMING_READ) {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            InputStream is = file.getInStream(ReadType.CACHE);            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
final String key = "key";          final String value = "value";         map.lock(key, 1, TimeUnit.SECONDS);          final CountDownLatch tryPutReturned = new CountDownLatch(1);          new Thread() {              public void run() {                 map.tryPut(key, value, 60, TimeUnit.SECONDS);                  tryPutReturned.countDown();              }          }.start();
* @param format a <code>String</code> value.       * @throws ConversionException if unable to create Pattern object.       */     public final void setCommentFormat(String format) {          commentRegexp = Utils.createPattern(format);      }
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);   }
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups);      /**
}   public void glPolygonOffset (float factor, float units) {   GL.glPolygonOffset(factor, units);   }   public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));          } catch (IOException ioe) {            LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId()               + " will not be in TachyonStorage. Exception:" + ioe.getMessage());            mShouldCacheCurrentBlock = false;          }        } else {
*       * @return the message.       */     @Message(id = 10842, value = "Invalid rollout plan. %s is not a valid child of node %s")      String invalidRolloutPlan(ModelNode modelNode, String nodeName);      /**
assertEquals(encoded, encoding.encode(bytes));    }   private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
@Override      protected void wakeup(boolean inEventLoop) {         if (!inEventLoop && wakenUp.compareAndSet(false, true)) {              selector.wakeup();          }      }
public interface AdvancedJiraEndpointBuilder              extends                  AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {          default JiraEndpointBuilder basic() {
public void testMoveNoop() throws Exception    {      MockStorageService mockS3Client = new MockStorageService();     S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());      mockS3Client.putObject("archive", new S3Object("targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip"));      mockS3Client.putObject("archive", new S3Object("targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json"));
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
while (line!= null && line.trim().length() > 0) {                          int p = line.indexOf(':');                          if (p >= 0)                             headers.put(line.substring(0, p).trim().toLowerCase(Locale.US), line.substring(p + 1).trim());                          line = in.readLine();                      }                  }
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), endsWith("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is(nullValue()));          assertThat(args.isGenerateBuilders(), is(false));
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (bootstrap!= null) {      EventLoopGroup group = bootstrap.group();      if (group!= null) {      group.shutdownGracefully(0, 10, TimeUnit.SECONDS);      }     }    }
URIStatus uriStatus = fs.getStatus(uri);        Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),            (short) uriStatus.getMode());       OutputStream out = closer.register(ufs.create(dstPath.toString(),            new CreateOptions().setPermission(perm)));        ret = IOUtils.copyLarge(in, out);      } catch (Exception e) {
public interface AdvancedSoroushBotEndpointBuilder              extends                  AdvancedSoroushBotEndpointConsumerBuilder, AdvancedSoroushBotEndpointProducerBuilder {          default SoroushBotEndpointBuilder basic() {
org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();          String label = sourceEdgeData.getLabel();         if (sourceEdgeTextData!= null && sourceEdgeTextData.getText()!= null &&!sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {              label = sourceEdgeTextData.getText();          } else if (sourceEdgeTextData!= null &&!sourceEdgeTextData.isVisible()) {              label = null;
*  * @see    */  public abstract int compareToReference(TypeComparator<T> referencedComparator);   /**    * Compares two records in serialized from. The return value indicates the order of the two in the same way
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
public interface AdvancedHazelcastQueueEndpointBuilder              extends                  AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {          default HazelcastQueueEndpointBuilder basic() {
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);   /**    * Completely remove the given global property from the database
new Delete().from(type).where("Id=?", id).execute();   }  public static <T extends Model> T load(Class<T> type, long id) {    return new Select().from(type).where("Id=?", id).executeSingle();   }
* @return BlockFace attached to       */      public BlockFace getAttachedFace() {         byte data = (byte) (getData() ^ 0x7);          switch (data) {              case 0x1:
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
* @return {@link   public char[] ensureCapacity (int additionalCapacity) {     int sizeNeeded = size + additionalCapacity;    if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));     return items;    }
private List<ScheduledJob> scheduledJobs = new LinkedList<ScheduledJob>();     public void scheduleAtFixedRate( Runnable job, String jobName, long delay, long period )      {         ScheduledJob scheduledJob = new ScheduledJob( job, jobName, delay, period );          scheduledJobs.add( scheduledJob );      }
public interface GangliaEndpointBuilder extends EndpointProducerBuilder {          default AdvancedGangliaEndpointBuilder advanced() {              return (AdvancedGangliaEndpointBuilder) this;          }
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
private static final Thread CLOSE_THREAD = new Thread() {          @Override          public void run() {             REAL_DRIVER.quit();          }      };
if (koala.velocity.y > 0) {        koala.position.y = tile.y - Koala.HEIGHT;       TiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get("walls");        layer.setCell((int)tile.x, (int)tile.y, null);       } else {        koala.position.y = tile.y + tile.height;
* @see * @see NormalizableKey    */  public abstract void readWithKeyDenormalization(T record, DataInputView source) throws IOException;   /**    * Flag whether normalized key comparisons should be inverted key should be interpreted
private static ConfigurationBuilder builder;      @BeforeClass     public static synchronized void setConfigurationBuilder() throws CheckstyleException {          builder = new IndentationConfigurationBuilder(new File("src/it/"));      }
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface AdvancedHazelcastMultimapEndpointBuilder              extends                  AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {          default HazelcastMultimapEndpointBuilder basic() {
long now = System.currentTimeMillis();      StringBuilder acc = new StringBuilder(get());      while (!predicate.test(acc.toString())) {       Assert.assertTrue(System.currentTimeMillis() - now < 10000);        try {          Thread.sleep(1);        } catch (InterruptedException e) {
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}   @Configuration  @ConditionalOnEnabledHealthIndicator("diskspace")   public static class DiskSpaceHealthIndicatorConfiguration {    @Bean
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedSchematronEndpointBuilder              extends                  EndpointProducerBuilder {          default SchematronEndpointBuilder basic() {
} catch (ConcurrentModificationException ex) {          continue;        } catch (Exception ex) {         LOG.warn("Cache flusher failed for entry " + fqe);          if (!server.checkFileSystem()) {            break;          }
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
Set<E> edgesConnecting(N node);       N adjacentNode(E edge);    /**     * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.
* @param servers the servers that need to restart.       */      @LogMessage(level = Level.INFO)     @Message(id = 10807, value = "Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s")      void domainModelChangedOnReConnect(Set<ServerIdentity> servers);      /**
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedHazelcastTopicEndpointBuilder              extends                  AdvancedHazelcastTopicEndpointConsumerBuilder, AdvancedHazelcastTopicEndpointProducerBuilder {          default HazelcastTopicEndpointBuilder basic() {
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws              TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() +                  "direct_messages/sent.json", new PostParameter[0],                  paging.asPostParameterList(), true));      }
};          verify(checkConfig,                 getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"),                 expected);      }      @Test
String someName = "someName";          RuntimeOptions options = new RuntimeOptions(new Properties(), "-n", someName);          Pattern actualPattern = (Pattern) options.filters.iterator().next();         assertEquals(someName, actualPattern.pattern());      }      @Test
private void parameterBind(CodeBuilder builder, Class<?>[] interceptorParamTypes) {          int i = 0;          int argNum = targetMethod.getParameterTypes().length;         int interceptorArgNum = interceptorParamTypes.length - 1;          int matchNum = Math.min(argNum, interceptorArgNum);          for (; i < matchNum; i++) {
PropertyRecord prev = props.forceGetRecord( prevId );              if (!prev.inUse() )                  fail |= inconsistent( props, property, prev, "invalid prev reference, prev record not in use" );             if ( prev.getNextProp()!= property.getId() )                  fail |= inconsistent( props, property, prev, "invalid prev reference, prev record does not reference back" );          } else
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
log.debug("Current thread: " + Thread.currentThread());      log.debug("Creating the encounter object");     }    Context.getEncounterService().saveEncounter(encounter);
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private static Method updateByteBuffer(Checksum checksum) {          try {              Method method = checksum.getClass().getDeclaredMethod("update", ByteBuffer.class);             method.invoke(method, ByteBuffer.allocate(1, 2));              return method;          } catch (Throwable ignore) {              return null;
public Container<T> prefSize (float width, float height) {   prefSize(new Fixed(width), new Fixed(height));    return this;   }
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (queueLength.isDefined() && queueLength.asInt() == 0) {                  if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {                     throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());                  }              }
@Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/test");          servlet.service(request, response);
}    @Test   public void reportLostFileTest() throws LineageDoesNotExistException {      long fileId = 1;      mThrown.expect(LineageDoesNotExistException.class);      mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));     mLineageStore.reportLostFile(fileId);    }    @Test
this.m_large = large;          }         public String key(int i, String charsetName) {              m_data.rewind();              int offset_size = m_large? LARGE_OFFSET_SIZE : SMALL_OFFSET_SIZE;              int key_entry_size = m_large? KEY_ENTRY_SIZE_LARGE : KEY_ENTRY_SIZE_SMALL;
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
@Test      public void testOperationTimeoutForLongRunningRemoteOperation() throws Exception {         int callTimeoutMillis = 3000;          Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeoutMillis);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);
@Override    public void progressSection(String section, String message)    {     Stopwatch sectionWatch = sections.get(section);      if (sectionWatch == null) {        throw new ISE("[%s]: Cannot progress tracker for [%s]. Nothing started.", progressName, section);      }
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public static final SecurityContext NONE = new SecurityContext() {    @Override    public Principal getPrincipal() {
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
public class GitHubClient { private static final String API_URL = "https:   static class Contributor {      String login;      int contributions;    }
@Override      public DateTime getLastSeen() {         return new DateTime(((Integer) fields.get("last_seen")) * 1000L, DateTimeZone.UTC);      }      @Override
public interface GitHubEndpointBuilder              extends                  GitHubEndpointConsumerBuilder, GitHubEndpointProducerBuilder {          default AdvancedGitHubEndpointBuilder advanced() {
}    }   private static boolean isIdentifierPart(char ch) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*         thrown if the given vertex cannot be connected to <code>vertex</code> in the requested manner    */   public void connectTo(final AbstractJobVertex vertex) throws JobGraphDefinitionException {   this.connectTo(vertex, null, null, -1, -1, DistributionPattern.BIPARTITE, true);   }   /**
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
clusterMap.delete(buildAttributeName(entry.getKey()));                              iterator.remove();                          } else {                             clusterMap.set(buildAttributeName(entry.getKey()), cacheEntry.value);                              cacheEntry.dirty = false;                          }                      }
final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);          final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);          http2c.setMaxConcurrentStreams(maxConcurrentStreams);         http2c.setInitialStreamRecvWindow(initialStreamSendWindow);
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}      public boolean isEndOfInput() throws Exception {         return!hasNextChunk();      }      public void close() throws Exception {
try {        mFileSystemMaster.createFile(new AlluxioURI("alluxio:/a/f"), CreateFileOptions.defaults());       Assert.fail("createFile was expected to fail with FileAlreadyExistsException");      } catch (FileAlreadyExistsException e) {      }    }
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      public Object processInvocation(InterceptorContext interceptorContext) throws Exception {          SingletonComponent singletonComponent = getComponent(interceptorContext, SingletonComponent.class);          ComponentInstance singletonComponentInstance = singletonComponent.getComponentInstance();         if (singletonComponentInstance == null) {              throw MESSAGES.componentInstanceNotAvailable(interceptorContext);          }          interceptorContext.putPrivateData(ComponentInstance.class, singletonComponentInstance);
*       * @param folder the location       */     public synchronized static void configureExternalStaticResources(String folder) {          Assert.notNull(folder, "'folder' must not be null");          if (!externalStaticResourcesSet) {
}      }     private static final class GcMetrics {          final long minorCount;          final long minorTime;          final long majorCount;
"order by min(length(p)), user.name";          gen.get().addSnippet( "query-get-members", createCypherSnippet( query ) );          result = engine.execute( query )                .dumpToString();          assertTrue( result.contains("Engin") );          gen.get()                 .addSnippet( "o-query-get-members",
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);   /**    * Completely remove the given global property from the database
dataSizeSessionProperty(                          ORC_STREAM_BUFFER_SIZE,                          "ORC: Size of buffer for streaming reads",                         config.getOrcStreamBufferSize(),                          false),                  booleanSessionProperty(                          PARQUET_OPTIMIZED_READER_ENABLED,
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}          doRemoveRecord(key, source);          if (isEventsEnabled()) {             publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),                                                  CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                   origin, IGNORE_COMPLETION));          }          return true;
}    }   public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {      if (INACTIVE) {        return;      }
private void registerWebTestClient(ConfigurableApplicationContext context) {    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();    if (beanFactory instanceof BeanDefinitionRegistry) {    registerWebTestClient((BeanDefinitionRegistry) beanFactory);    }   }
public interface AdvancedTwilioEndpointBuilder              extends                  AdvancedTwilioEndpointConsumerBuilder, AdvancedTwilioEndpointProducerBuilder {          default TwilioEndpointBuilder basic() {
m_address, -dt); return (timeNow + 2000L);      } else {      logger.debug("gave up waiting for query reply from device {}", m_address);      }     } QEntry qe = m_requestQueue.poll();
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    final String uri = req.getPathInfo();    if (uri == null || uri.equals("/")) {    handleHome(resp);    } else if (uri.startsWith(metricsUri)) {     handleMetrics(req.getParameter("class"), Boolean.parseBoolean(req.getParameter("full-samples")), resp);    } else if (uri.equals(pingUri)) {
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
*/  @GwtCompatible(emulated = true)  public class BaseEncodingTest extends TestCase {   public static void assertEquals(byte[] expected, byte[] actual) {      assertEquals(expected.length, actual.length);      for (int i = 0; i < expected.length; i++) {        assertEquals(expected[i], actual[i]);
public interface GoogleSheetsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {
when(mock.getColumn()).thenReturn(1);          when(mock.getMessage()).thenReturn("Mocked message.");          when(mock.getFileName()).thenReturn("InputMockFile.java");         final AuditEventFormatter formatter = new AuditEventDefaultFormatter();          final String expected = "[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]";
char[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);    ATN deserialized = new ATNDeserializer().deserialize(serializedAtn);   return new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);   }   public ParserInterpreter createParserInterpreter(TokenStream tokenStream) {
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getMentions(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, paging.asPostParameterList(), true));      }
*/      public ResponseList<Status> getUserTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json"                 , true));      }
*/   protected int fill(int n) {    for (int i=0; i<n; i++) {    if (this.n > 0 && data[this.n - 1]!= IntStream.EOF) {      return i;     }
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
@ApiOperation(value = "Creates list of users with given input array", notes = "", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUsersWithListInput(@Valid List<User> body) throws Exception;      @DELETE      @Path("/{username}")
this.rawLength = rawEntry.size();          } else {              this.entry = entry;             this.rawLength = entry.getHeader().getEventLength() * 3;          }      }
@Override      public Map<AgentInfo, PinpointRouteResponse> invoke(List<AgentInfo> agentInfoList, byte[] payload)              throws TException {         return invoke(agentInfoList, payload, DEFAULT_FUTURE_TIMEOUT);      }      @Override
@Test   public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(638);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
case MotionEvent.ACTION_CANCEL:       realPointerIndex = input.lookUpPointerIndex(pointerId);       if (realPointerIndex == -1) break;      if (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;       input.realId[realPointerIndex] = -1;       x = (int)event.getX(pointerIndex);       y = (int)event.getY(pointerIndex);
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testBurstySampling() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(2);          mock.setResultWaitTime(3000);          List<Exchange> sentExchanges = new ArrayList<Exchange>();
public interface AdvancedEhcacheEndpointBuilder              extends                  AdvancedEhcacheEndpointConsumerBuilder, AdvancedEhcacheEndpointProducerBuilder {          default EhcacheEndpointBuilder basic() {
detach();              ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy();             Flux<Exchange> flux = Flux.create(camelSink::set, FluxSink.OverflowStrategy.IGNORE);              if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {
LABEL_TOKEN( false ),      LABEL_TOKEN_NAME( false ),      NEOSTORE_BLOCK( false ),     SCHEMA( 35, true ),      NODE_LABELS( 35, true );      private final long max;
if ( locals!=null ) {     r.locals = ScopeParser.parseTypedArgList(locals, locals.getText(), g.tool.errMgr);     r.locals.type = AttributeDict.DictType.LOCAL;    r.locals.ast = returns;    }    for (GrammarAST a : actions) {
* @should fail if global property being updated does not already exist    * @should update a global property whose typed value is handled by a custom datatype    */  public void updateGlobalProperty(String propertyName, String propertyValue);   /**    * Save the given global property to the database
void delta() {}          void epsilon() {}      }     static class Super {          void testOne() {}      }     static class Sub extends Super {          void testTwo() {}      }
public interface AdvancedDirectVmEndpointBuilder              extends                  AdvancedDirectVmEndpointConsumerBuilder, AdvancedDirectVmEndpointProducerBuilder {          default DirectVmEndpointBuilder basic() {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private Sink body;      boolean done;     CacheRequestImpl(final DiskLruCache.Editor editor) {        this.editor = editor;        this.cacheOut = editor.newSink(ENTRY_BODY);        this.body = new ForwardingSink(cacheOut) {
if (mod.getModuleActivator()!= null)       mod.getModuleActivator().willStop();     }    catch (Exception t) {      log.warn("Unable to call module's Activator.willStop() method", t);     }
public interface AdvancedNatsEndpointBuilder              extends                  AdvancedNatsEndpointConsumerBuilder, AdvancedNatsEndpointProducerBuilder {          default NatsEndpointBuilder basic() {
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
}    String exporterStr = props.getProperty("exporter");     try     {      exporter = (MeasurementsExporter) Class.forName(exporterStr).getConstructor(OutputStream.class).newInstance(out);
private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();    private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();    private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();   private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 80000;    private static final boolean DEFAULT_USE_COMBINER = false;    private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;    private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;
*       * @return the message.       */     @Message(id = 10854, value = "Null stream at index %d")      String nullStream(int index);      /**
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (this.mrwork!= null && this.mrwork.getHadoopSupportsSplittable()) {
*  * @see    */  public abstract int compareToReference(TypeComparator<T> referencedComparator);   /**    * Compares two records in serialized from. The return value indicates the order of the two in the same way
return Subject.doAs(subject, action);      } catch (PrivilegedActionException pae) {        Throwable cause = pae.getCause();       LOG.warn("PriviledgedActionException as:"+this+" cause:"+cause);        if (cause instanceof IOException) {          throw (IOException) cause;        } else if (cause instanceof Error) {
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().shutdown();              }          };
LOG.trace("OpenTracing: start server span=" + span);                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }          }
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Validates Username and Password then saved sercurityToken to a variable    */   private void login() throws InvalidLoginException, IOException {   logger.trace("attempting to login");    String url = String     .format("%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s",        WEBSITE, enc(appId), enc(userName), enc(password));
return swagger;      }     private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {          List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs());          Collections.sort(verbs, new VerbOrdering());
public void test_de() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06.05.2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedJcrEndpointBuilder              extends                  AdvancedJcrEndpointConsumerBuilder, AdvancedJcrEndpointProducerBuilder {          default JcrEndpointBuilder basic() {
Vector<RelationshipListItem> ret = new Vector<RelationshipListItem>();     List<Relationship> rels = Context.getPersonService()           .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));     for (Relationship rel : rels) {      if (!rel.isVoided()              && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(
direction.set(0, 0, 1);     } else {      up.set(0, 1, 0);     direction.set(0, 0, -1);     }     position.set(zoom * viewportWidth / 2.0f, zoom * viewportHeight / 2.0f, 0);     this.viewportWidth = viewportWidth;
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedServiceNowEndpointBuilder              extends                  EndpointProducerBuilder {          default ServiceNowEndpointBuilder basic() {
binder,          "druid.realtime.chathandler.type",          Key.get(ChatHandlerProvider.class),         Key.get(ServiceAnnouncingChatHandlerProvider.class)      );      final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(          binder, Key.get(ChatHandlerProvider.class)
public void stopServlet() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();    this.container = factory    .getEmbeddedServletContainer(exampleServletRegistration());    this.container.stop();    this.thrown.expect(ConnectException.class); getResponse("http:
*/      public ResponseList<Status> getHomeTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", true));      }
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10803, value = "Caught exception awaiting final response from server %s on host %s")      void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);      /**
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL()                  + "direct_messages.json", null, paging.asPostParameterList(), true));      }
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
static final DiagnosticType REPORT_PATH_IO_ERROR =        DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR",           "Error writing compiler report to {0}:\n{1}");    /**     * All the aliases in a program form a graph, where each global name is
mThriftServer = createThriftServer();      mWorkerNetAddress =          new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()            .getHostAddress(), thriftServerPort, mDataServer.getPort());      int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);
}      else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {       TypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();      mTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);      }     }     catch (ClassNotFoundException e) {
notifyHandlerException(t);          } finally {              ChannelBufferHolder<Object> inbound = ctx.inbound();             if (!inbound.isEmpty() && inbound.hasByteBuffer()) {                  inbound.byteBuffer().discardReadBytes();              }          }
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create("encoding", ModelType.STRING, true).build();     SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create("file", ModelType.OBJECT, false).              setCorrector(FileCorrector.INSTANCE).              setValidator(new FileValidator()).              build();
public void testCacheGet() throws Exception {          final Cache<Object, Object> cache = getTestCache();          final Integer key = 1;         final Integer val = 2;          MockEndpoint mock = getMockEndpoint("mock:result");          mock.expectedMinimumMessageCount(1);          mock.expectedBodiesReceived(val);         mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, true);          mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true); fluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_GET).withHeader(CaffeineConstants.KEY, key).withBody(val).to("direct:
*       * @param folder the location       */     public synchronized static void configureStaticResources(String folder) {          Assert.notNull(folder, "'folder' must not be null");          if (!staticResourcesSet) {
if (isStatisticsEnabled()) {              if (result) {                  statistics.increaseCachePuts(1);                 statistics.addPutTimeNanos(System.nanoTime() - start);              }             statistics.addGetTimeNanos(System.nanoTime() - start);              if (isHit) {                  statistics.increaseCacheHits(1);              } else {
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {            mBuf.putInt(0, k + mWorkerId);
public void read(final Kryo kryo, final Input input) {   this.jobID = kryo.readObject(input, JobID.class);    this.jobName = input.readString();
private String formatDataRate(long inputDataSize, Duration duration)      {          double rate = inputDataSize / duration.convertTo(TimeUnit.SECONDS);         if (Double.isNaN(rate)) {              return "0Bps";          }          DataSize dataSize = new DataSize(rate, Unit.BYTE).convertToMostSuccinctDataSize();
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
+ " \"deprecated\": \"false\", \"secret\": \"false\", \"defaultValue\": \"\\\\\", \"description\": \"The escape character.\""));          List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema("properties", json, true);         assertEquals(16, rows.size());          Map<String, String> found = null;          for (Map<String, String> row : rows) {
assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();     assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();     assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(String.class);      Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /**
ZIP_SERVER(0x24,"ZIP_SERVER",null),    SWITCH_BINARY(0x25,"SWITCH_BINARY",ZWaveBinarySwitchCommandClass.class),    SWITCH_MULTILEVEL(0x26,"SWITCH_MULTILEVEL",ZWaveMultiLevelSwitchCommandClass.class),   SWITCH_ALL(0x27,"SWITCH_ALL",ZWaveSwithcAllCommandClass.class),    SWITCH_TOGGLE_BINARY(0x28,"SWITCH_TOGGLE_BINARY",null),    SWITCH_TOGGLE_MULTILEVEL(0x29,"SWITCH_TOGGLE_MULTILEVEL",null),    CHIMNEY_FAN(0x2A,"CHIMNEY_FAN",null),
Form form = null;         if ((Method.PUT == method || Method.POST == method) && mediaType == MediaType.APPLICATION_WWW_FORM, true) {              form = new Form();              String body = exchange.getIn().getBody(String.class);
}   }    public static class SpeedTestForwarder extends AbstractInvokable {    @Override    public void invoke() throws Exception {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
processor.registerWebSocketHandler("/*", new EchoHandler());          AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();         processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));          processor.invokeWebSocketProtocol(w, "yoWebSocket");          assertEquals(b.toString(), "yoWebSocket");
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*      * @param queueName Name of the job queue.     */   @InterfaceAudience.Private   public void setQueueName(String queueName) {      super.setQueueName(queueName);    }
status = ufs.getStatus(ufsUri);                } catch (Exception e) {                  throw new IOException(String.format("Cannot sync UFS directory %s: %s.", ufsUri,                     e.toString()), e);                }                if (status.isFile()) {                  throw new InvalidPathException(String.format(
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
int size = s.count();    long[] ret = new long[size];    for(int i = 0; i < size && s!= null; i++, s = s.rest())    ret[i] = ((Number) s.first()).longValue();    return ret;    }  }
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
TableDescriptor htd = TableDescriptorBuilder.copy(tableName, snapshotTableDesc);      org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;      if (cpHost!= null) {       snapshotPOJO = ProtobufUtil.createSnapshotDesc(snapshot);        cpHost.preCloneSnapshot(snapshotPOJO, htd);      }      long procId;
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue);   /**    * @param aClass class of object getting length for
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));              final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();              if (setop!= null) {                 logger.debug("    " + setop.getJavaName() + "\n                " + setop.getIDLName());                  final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);                 beanMethodMap.put(setop.getIDLName(), new SkeletonStrategy(realSetmethod));              }          }
* @return nullToZero       */      private static Double nullToZero(Double value) {         return!Objects.isNull(value)? value : 0;      }      /**
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, paging.asPostParameterList(), true));      }
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.setMeasurementUnit(MeasurementUnit.MILLISECONDS)             .setAllowExpression(true)             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)            .setDefaultValue(new ModelNode().set(60000L))             .build();      static final AttributeDefinition[] ATTRIBUTES = new AttributeDefinition[] { ENABLED, TIMEOUT, CHUNK_SIZE };
public interface NettyEndpointBuilder              extends                  NettyEndpointConsumerBuilder, NettyEndpointProducerBuilder {          default AdvancedNettyEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
*  * @see java.lang.Object    */  public abstract int hash(T record);   /**    * Sets the given element as the comparison reference for future calls to
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().shutdown();              }          };
*/          private static final long serialVersionUID = -1021880396046355863L;         ReloadAction() {              super("Reload Java File");              putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);          }
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should exclude not allowed locales    * @should cache results for a user    */  public List<Locale> getSearchLocales();   /**    * Used by Spring to set the http client for accessing the openmrs implementation service
LOG.debug("Uploading a dir...");             if (entry!= null &&!DropboxUploadMode.force.equals(mode)) {                  throw new DropboxException(dropboxPath + " exists on dropbox and is not a folder!");              }              if (!dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {
public interface AdvancedFileEndpointBuilder              extends                  AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {          default FileEndpointBuilder basic() {
}    public void normalize() {     logger.fine("Normalizing");      startPass("normalize");      process(new Normalize(this, false));      endPass();
}    @Override   public List<Integer> snapshotState(long checkpointId, long timestamp) {     return Collections.singletonList(saveRecordCnt);    }    @Override   public void restoreState(List<Integer> state) {     for (Integer i : state) {      saveRecordCnt += i;     }
apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);                  } else if ("javax.ws.rs.DefaultValue".equals(item.annotationType().getName())) {                      try {                         rsDefault = (String) item.annotationType().getMethod("value").invoke(item);                      } catch (Exception ex) {                          LOGGER.error("Invocation of value method failed", ex);                      }
mbeanServer.registerMBean(instance, objectName);                   }               } catch (Exception ex) {                  getLog().warn("register druid-driver mbean error", ex);               }               return true;
}      private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {         boolean hasResponse = basicInvocation.potentialResponse!= null;          int backupsExpected = basicInvocation.backupsExpected;          int backupsCompleted = basicInvocation.backupsCompleted;
s = target;    }   return failOrAccept(prevAccept, input, reach, t);   }   protected int failOrAccept(ExecState prevAccept, CharStream input,
*/  public class Realm {     private static final String NC = "00000001";      private final String principal;      private final String password;
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
};       final PassFactory aliasExternals =        new PassFactory("aliasExternals", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (getPath() == null && that.getPath()!= null) {              return false;         } else if (that.getPath() == null && getPath()!= null) {              return false;          }          if (!getPath().equals(that.getPath())) {
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc("title"), 1, 2);          assertThat(page1.pagination().getCount()).isEqualTo(2);         assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5);          assertThat(page1.delegate())                 .extracting("title")                 .containsExactly("hello2", "hello3");
}    catch (IllegalArgumentException ex) {     Metric added = this.registry.getMetrics().get(name);    registrar.checkExisting(added);     return (T) added;    }   }
String layer() default "";     int retries() default 1;      String loadbalance() default "";
return entry;          default:           throw new SourceMapParseException(                "Unexpected number of values for entry:" + entryValues);        }      }
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {           mBuf.putInt(0, k + mWorkerId);            os.write(mBuf.array());          }          os.close();
}          Test test = null;          try { test = (Test) suiteMethod.invoke(null);              if (test == null) {                  return test;              }
assertEquals(1, taskService.createTaskQuery()                     .or()                     .taskInvolvedUser("involvedUser")                    .taskInvolvedGroupsIn(groups)                     .endOr()                     .count());
}    }   public synchronized void unpinFile(int fileId) {      if (INACTIVE) {        return;      }
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
case "contigo":    case "consigo":    default:    First = word.substring(0, 3, true);     second = word.substring(3, 5);    }
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers, "mBlockIdsOnTiers");      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
* @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the    *                     input view, which may have an underlying I/O channel from which it reads.    */  public abstract void deserialize(T target, DataInputView source) throws IOException;   /**    * Copies exactly one record from the source input view to the target output view. Whether this operation
public interface AdvancedApnsEndpointBuilder              extends                  AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {          default ApnsEndpointBuilder basic() {
private StringBuilder stringBuilder = new StringBuilder();     public DiagnosticsLogWriterImpl() {          this(false);      }     public DiagnosticsLogWriterImpl(boolean includeEpochTime) {          this.includeEpochTime = includeEpochTime;      }
public interface ServerEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedServerEndpointProducerBuilder advanced() {
public void testSamplingFromExchangeStream() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(2);          mock.setResultWaitTime(3000);          List<Exchange> sentExchanges = new ArrayList<Exchange>();
public interface CouchbaseEndpointBuilder              extends                  CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {          default AdvancedCouchbaseEndpointBuilder advanced() {
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(800);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);   }
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else if (outputFS instanceof DistributedFileSystem) {          loadSpec = ImmutableMap.<String, Object>of(              "type", "hdfs",             "path", indexOutURI.toString()          );        } else {          throw new ISE("Unknown file system[%s]", outputFS.getClass());
public interface JiraEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedJiraEndpointProducerBuilder advanced() {
postAppend(entry, EnvironmentEdgeManager.currentTime() - start);        } catch (Exception e) {         LOG.fatal("Could not append. Requesting close of wal", e);          requestLogRoll();          throw e;        }
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
record.setExpirationTime(expiryTime);                  if (isEventsEnabled()) {                      CacheEventContext cacheEventContext =                             createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),                                                     toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);                      cacheEventContext.setAccessHit(record.getAccessHit());                      publishEvent(cacheEventContext);
boolean needPostProjectionCoercion = false;          for (FunctionCall aggregate : analysis.getAggregates(node)) {              Expression rewritten = subPlan.rewrite(aggregate);             Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));
metrics.addAll(getStatistics("integration.handler." + name + ".duration",       exporter.getHandlerDuration(name)));    }   metrics.add(new Metric<Integer>("integration.activeHandlerCount", exporter    .getActiveHandlerCount()));    metrics.add(new Metric<Integer>("integration.handlerCount", exporter     .getHandlerCount()));    metrics.add(new Metric<Integer>("integration.channelCount", exporter
"alluxio.worker.block.allocator.MaxFreeAllocator"),    WORKER_BIND_HOST(Name.WORKER_BIND_HOST, "0.0.0.0"),    WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),   WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 60000),    WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK_THREADS_MAX, 2048),    WORKER_BLOCK_THREADS_MIN(Name.WORKER_BLOCK_THREADS_MIN, 256),    WORKER_DATA_BIND_HOST(Name.WORKER_DATA_BIND_HOST, "0.0.0.0"),
*       * @return the error message       */     @Message(id = 10837, value = "One of the groups does not define neither " + SERVER_GROUP + " nor " + CONCURRENT_GROUPS + ": %s")      String unexpectedInSeriesGroup(String rolloutPlan);      /**
public SourceOperator createOperator(DriverContext driverContext)          {              checkState(!closed, "Factory is already closed");             OperatorContext operatorContext = driverContext.addOperatorContext(operatorId, FilterAndProjectOperator.class.getName());              return new ScanFilterAndProjectOperator(                      operatorContext,                      sourceId,
* @return True, if all normalized key comparisons should invert the sign of the comparison result,    *         false if the normalized key should be used as is.    */  public abstract boolean invertNormalizedKey();
HttpRequest req = (HttpRequest) ch.readInbound();          DecoderResult dr = req.getDecoderResult();          assertFalse(dr.isSuccess());         assertTrue(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
@Test      public void test_Decode_Error_Length() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
return null;      }     private synchronized void throwRoot() throws SocketTimeoutException {          throw new SocketTimeoutException("Timed-out reading from socket");      }
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameteriv(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
public interface CryptoCmsEndpointBuilder extends EndpointProducerBuilder {          default AdvancedCryptoCmsEndpointBuilder advanced() {              return (AdvancedCryptoCmsEndpointBuilder) this;          }
private void validateTx(Xid xid,Transaction.State state) throws XAException {          final Transaction tx = getTransaction(xid);         if(tx!= null) {              switch (state){                  case ACTIVE:                      if(tx.getState()!= Transaction.State.ACTIVE){
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @should delete global property from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperty(GlobalProperty globalProperty);   /**    * Completely remove the given global properties from the database
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
import java.io.IOException;  public class JsonRecordHiveMapper implements HiveMapper {     private static final Logger LOG = LoggerFactory.getLogger(JsonRecordHiveMapper.class);      private Fields columnFields;      private Fields partitionFields;      private String timeFormat;
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      private static String dateAsString(long value) {         if (value == null || value.equals(0) {              return "";          }          return new SimpleDateFormat(TIMESTAMP_FORMAT).format(value);
public interface SjmsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSjmsEndpointProducerBuilder advanced() {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private int port = Integer.valueOf(System.getProperty("port"));   @Test  void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = this.rest.getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
}              }          }         return this;      }      private void notifyIdleListener() {
public interface GitEndpointBuilder              extends                  GitEndpointConsumerBuilder, GitEndpointProducerBuilder {          default AdvancedGitEndpointBuilder advanced() {
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }  }
private final CloseGuard closeGuard = CloseGuard.get();   AndroidPlatform(Class<?> sslParametersClass, OptionalMethod<Socket> setUseSessionTickets,        OptionalMethod<Socket> setHostname, OptionalMethod<Socket> getAlpnSelectedProtocol,        OptionalMethod<Socket> setAlpnProtocols) {      this.sslParametersClass = sslParametersClass;
priorRange = ranges[i];        cumNum = val;      }     long val = histogram.getCount();      if (val - cumNum > 0) {        metricsRecordBuilder.addCounter(            Interns.info(name + "_" + rangeType + "_" + ranges[ranges.length - 1] + "-inf", desc),
@Category(QuickTest.class)  public class AdvancedSemaphoreTest extends HazelcastTestSupport {     @Test(timeout = 120000)      public void testSemaphoreWithFailures() throws InterruptedException {          final int k = 4;         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);          final HazelcastInstance[] instances = factory.newInstances();          final ISemaphore semaphore = instances[k].getSemaphore("test");
context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_0.getUriString(), SecuritySubsystemParser::new);          context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_1.getUriString(), SecuritySubsystemParser::new);          context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_2.getUriString(), SecuritySubsystemParser::new);         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_3_0.getUriString(), SecuritySubsystemParser_3_0::new);      }  } \ No newline at end of file
public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {       if (jdbcType == null) {          ps.setString(i, parameter.name());       } else {          ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);       }     }
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
int receiverBufferSize = TestUtils.randomPortInt();      Random rand = new Random();      boolean reuseAddress = rand.nextBoolean();     int trafficClass = TestUtils.randomByte() + 128;      boolean tcpNoDelay = rand.nextBoolean();      boolean tcpKeepAlive = rand.nextBoolean();      int soLinger = TestUtils.randomPositiveInt();
}     public boolean hasChild (String name) {     if (children == null) return false;      return getChildByName(name)!= null;     }
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Test   public void startServletAndFilter() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();   this.container = factory.getEmbeddedServletContainer(      exampleServletRegistration(), new FilterRegistrationBean(        new ExampleFilter())); assertThat(getResponse("http:
final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc("title"), 3, 2);          assertThat(page3.pagination().getCount()).isEqualTo(1);         assertThat(page3.pagination().getGlobalTotal()).isEqualTo(5);          assertThat(page3.delegate())                 .extracting("title")                 .containsExactly("hello6");
* @param ast DetailAST node.       * @return Column number if non-comment node exists, -1 otherwise.       */     private static int findColumnNo(DetailAST ast) {          int resultNo = -1;          DetailAST node = ast;          while (node!= null) {
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    @GwtIncompatible("Reader/Writer")   private static void testStreamingEncodingWithCasing(        BaseEncoding encoding, String decoded, String encoded) throws IOException {      testStreamingEncodingWithSeparators(encoding, decoded, encoded);      testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));
* @should save properties with case difference only    */   @Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)  public List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);   /**    * Completely remove the given global property from the database
return getNode(random.nextInt(cluster.size()));      }     public void shutdownRandomNode(){          HazelcastInstance node = getRandomNode();         node.getLifecycleService().shutdown();          cluster.remove(node);      }
private void reusedConnectionFailsWithPost(TransferKind transferKind, int requestSize)        throws Exception {     server.enqueue(new MockResponse().setBody("A").setSocketPolicy(DISCONNECT_AT_END));      server.enqueue(new MockResponse().setBody("B"));      server.enqueue(new MockResponse().setBody("C"));      server.play();
*  *  @see java.util.Comparator    */  public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;
*       * @return the message.       */     @Message(id = 10864, value = "Error obtaining input stream from URL %s -- %s")      String errorObtainingUrlStream(String url, String message);      /**
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface GuavaEventBusEndpointBuilder              extends                  GuavaEventBusEndpointConsumerBuilder, GuavaEventBusEndpointProducerBuilder {          default AdvancedGuavaEventBusEndpointBuilder advanced() {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
float b = Float.parseFloat(reader.getAttributeValue(null, "b"));                      float alpha = Float.parseFloat(reader.getAttributeValue(null, "a"));                      if(r < 0 || g < 0 || b < 0){                          r = g = b = 0;                         alpha = -1;                      }                      edge.setR(r);
public interface AdvancedAtomixQueueEndpointBuilder              extends                  AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {          default AtomixQueueEndpointBuilder basic() {
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),          @ApiResponse(code = 404, message = "User not found", response = Void.class) })     void testEndpointParameters(@FormParam(value = "number")  BigDecimal number,@FormParam(value = "double")  Double _double,@FormParam(value = "pattern_without_delimiter")  String patternWithoutDelimiter,@FormParam(value = "byte")  byte[] _byte,@FormParam(value = "integer")  Integer integer,@FormParam(value = "int32")  Integer int32,@FormParam(value = "int64")  Long int64,@FormParam(value = "float")  Float _float,@FormParam(value = "string")  String string,@FormParam(value = "binary")  byte[] binary,@FormParam(value = "date")  LocalDate date,@FormParam(value = "dateTime")  Date dateTime,@FormParam(value = "password")  String password,@FormParam(value = "callback")  String paramCallback) throws Exception;      @GET      @Consumes({ "*/*" })
Date completionDate = (Date) cde.getValue();     Patient patient = Context.getPatientService().getPatient(Integer.valueOf(patientIdStr));     Program program = pws.getProgram(Integer.valueOf(programIdStr));    if (!pws.getPatientPrograms(patient, program, null, completionDate, enrollmentDate, null, false).isEmpty())      request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR, "Program.error.already");     else {      PatientProgram pp = new PatientProgram();
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
if (LOG.isDebugEnabled()) {                  LOG.debug("Deleting an element with key " + key + " into the Cache");              }             cache.remove(key);          } else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {              if (LOG.isDebugEnabled()) {                  LOG.debug("Quering an element with key " + key + " from the Cache");
protected void flushDirtyLogs() {          log.debug("Checking for dirty logs to flush...");         final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();          for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {              final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();              final Log kafkaLog = topicAndPartitionLogEntry.getValue();
public void restartWithKeepAlive() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();    this.container = factory    .getEmbeddedServletContainer(exampleServletRegistration());    MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();    HttpClient client = new HttpClient(connectionManager);
public interface AdvancedKMSEndpointBuilder              extends                  EndpointProducerBuilder {          default KMSEndpointBuilder basic() {
AbstractAioChannel ch = null;          try {              ch = findChannel(command);         } catch (Throwable e) {          }
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return false;          }         if (!expected.getType().equalsIgnoreCase(actual.getType().toString())) {              return false;          }
Whitebox.setInternalState(NetworkAddressUtils.class, "sLocalHost", "localhost");     RetryHandlingBlockMasterClient masterClientMock =         PowerMockito.mock(RetryHandlingBlockMasterClient.class);      List<WorkerInfo> list = new ArrayList<>();      list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost("localhost")));      PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();     PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())         .thenReturn(masterClientMock);
NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));          } catch (IOException ioe) {            LOG.warn("Failed to get TachyonStore stream, the block " + currentBlockId               + " will not be in TachyonStorage");            mShouldCacheCurrentBlock = false;          }        }
public interface GoogleCalendarEndpointBuilder              extends                  GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {          default AdvancedGoogleCalendarEndpointBuilder advanced() {
public void test_cn_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年5月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, int batchSize) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);   }
public static final String TEST_GROUP_NAME = "group1";    private static PermissionStatus sPermissionStatus =       new PermissionStatus(TEST_USER_NAME, TEST_GROUP_NAME, (short) 0777);    @Rule    public ExpectedException mThrown = ExpectedException.none();
public interface SqsEndpointBuilder              extends                  SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {          default AdvancedSqsEndpointBuilder advanced() {
* @return {@link   public long[] ensureCapacity (int additionalCapacity) {     int sizeNeeded = size + additionalCapacity;    if (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));     return items;    }
Map<String, Object> options = new HashMap<String, Object>();                  IntrospectionSupport.getProperties(msg, options, null);                 IntrospectionSupport.setProperties(jpa, options);                 IntrospectionSupport.setProperty(jpa, "timestamp", msg.getTimestamp());                  event.getIn().setBody(jpa);              } else {
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.trace("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.trace("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
final DimensionSelector dimSelector = dims.get(0);          final IndexedInts row = dimSelector.getRow();         if (row == null || row.size() == 0) {            ByteBuffer newKey = key.duplicate();            newKey.putInt(dimSelector.getValueCardinality());            unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final String key, value;   public Parameter(String key, String value) {      this.key = key;      this.value = value;    }
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}, tags={ "pet",  })      @ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid pet value", response = Void.class) })     void deletePet(@PathParam("petId") @ApiParam("Pet id to delete") Long petId,@HeaderParam("api_key")   String apiKey) throws Exception;      @GET      @Path("/findByStatus")
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniformfv(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniformiv(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
*      * @param queueName Name of the job queue.     */   @InterfaceAudience.Private   public void setQueueName(String queueName) {      super.setQueueName(queueName);    }
}    public void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {    GL20.glGetVertexAttribfv(index, pname, params);    }    public void glGetVertexAttribiv (int index, int pname, IntBuffer params) {    GL20.glGetVertexAttribiv(index, pname, params);    }    public void glHint (int target, int mode) {
* @see <a href="http:       */      public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, paging.asPostParameterList(), true));      }
public interface InfinispanEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedInfinispanEndpointProducerBuilder advanced() {
new SpdySessionStatus(1, "PROTOCOL_ERROR");            public static final SpdySessionStatus INTERNAL_ERROR =         new SpdySessionStatus(12, "INTERNAL_ERROR");      /**       * Returns the {@link SpdySessionStatus} represented by the specified code.
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
LOG.debug("Initializing sortmerger...");     Sorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,     this.parentTask, this.serializer, this.comparator, 10 * 1024 * 1024);     runPartialSorter(sorter, NUM_RECORDS, 2);    }
* @throws IOException     */    public void put(Put put, Integer lockid) throws IOException {     this.put(put, lockid, put.getWriteToWAL());    }    /**
* @param properties the batch properties    * @param dataSource the underlying data source    */  protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {    this(properties, dataSource, null);   }
if (CommonUtils.isLocalHost(address) && Configuration           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) &&!NettyUtils           .isDomainSocketSupported(address)) {         LOG.debug("Creating short circuit output stream for block {} @ {}", blockId, address);          return LocalFilePacketWriter.create(context, address, blockId, options);        } else {         LOG.debug("Creating netty output stream for block {} @ {} from client {}", blockId, address,              NetworkAddressUtils.getClientHostName());          return NettyPacketWriter             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.trace("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);
*/      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() +                  "statuses/public_timeline.json", false));      }
public void testSamplingFromExchangeStream() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(2);          mock.setResultWaitTime(3000);          List<Exchange> sentExchanges = new ArrayList<Exchange>();
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Override   public PactRecord jsonToRecord(IJsonNode value, PactRecord target, EvaluationContext context) {    IObjectNode others;   if (target == null || target.getNumFields() < this.mappings.size() + 1) {     target = new PactRecord(this.mappings.size() + 1);     for (int i = 0; i < this.mappings.size(); i++)
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
}      @Override     protected Processor chooseProcessor(List<Processor> processors, Exchange exchange, Endpoint endpoint) {          if (isRuntimeRatiosZeroed())  {              resetRuntimeRatios();              counter = 0;
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
try {       bytes = input.read(buffer, index, 4096);      } catch (Exception e) {      throw new GdxRuntimeException("Failed to read Vorbis.", e);      }      if (bytes == 0 && i < 2) {       throw new GdxRuntimeException("End of file before finding all Vorbis headers.");
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(RabbitTemplate.class)  @ConditionalOnEnabledHealthIndicator("rabbit")   public static class RabbitHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {
assertEquals(0, historyService.createHistoricActivityInstanceQuery().unfinished().list().size());      if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {       assertEquals(3, historyService.createHistoricActivityInstanceQuery().finished().list().size());      } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {       assertEquals(3, historyService.createHistoricActivityInstanceQuery().finished().list().size());      } else {        assertEquals(0, historyService.createHistoricActivityInstanceQuery().finished().list().size());      }
public class MBeanInfoAssembler {    private static final Logger LOG = LoggerFactory.getLogger(MBeanInfoAssembler.class);     protected final WeakHashMap<Class<? >, MBeanAttributesAndOperations> cache = new WeakHashMap<Class<? >, MBeanAttributesAndOperations>(10);
public interface MSKEndpointBuilder extends EndpointProducerBuilder {          default AdvancedMSKEndpointBuilder advanced() {              return (AdvancedMSKEndpointBuilder) this;          }
CxfEndpoint endpoint = (CxfEndpoint)camelContext.getEndpoint("cxf:bean:routerEndpoint");         assertFalse(endpoint.getBus().getInInterceptors().size() == 1);          assertEquals(LoggingInInterceptor.class, endpoint.getBus().getInInterceptors().get(0).getClass());      }
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
return this.set(min.set(0, 0, 0), max.set(0, 0, 0));    }       public boolean isValid () {    return min.x <= max.x && min.y < max.y && min.z < max.z;    }    /** Extends this bounding box by the given bounding box.
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      public WebSocket write(String s) throws IOException {         if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);          return this;      }      @Override      public WebSocket write(byte[] b, int offset, int length) throws IOException {         if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));          return this;      }
public interface GoraEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedGoraEndpointProducerBuilder advanced() {
}   public void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {   GL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);   }   public void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {   GL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);   }   public void glCullFace (int mode) {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
when(mock.getColumn()).thenReturn(1);          when(mock.getMessage()).thenReturn("Mocked message.");          when(mock.getFileName()).thenReturn("InputMockFile.java");         final AuditEventFormatter formatter = new AuditEventDefaultFormatter();          final String expected = "[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]";
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
}        else if(String.class.equals(cls)) {          if(json!= null && json.startsWith("\"") && json.endsWith("\"") && json.length() > 1)           return json.substring(1, json.length() - 1);          else            return json;        }
};       final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* whether the supression turns checkstyle reporting on or off.       * @author Rick Giles       */     public static class Tag          implements Comparable<Tag>      {
*       * @return the error message       */     @Message(id = 10835, value = IN_SERIES + " is missing groups: %s")      String inSeriesIsMissingGroups(String rolloutPlan);      /**
}    private void getTestHelper(TachyonFS tfs) throws IOException {     int fileId = tfs.createFile(new TachyonURI("/root/testFile1"));      Assert.assertEquals(3, fileId);     Assert.assertNotNull(tfs.getFile(fileId));    }    @Test
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
retract(view, ((AbstractNode) node));          }         graphVersion.incNodeAndEdgeVersion();          dhns.getWriteLock().unlock();          dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);      }
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should return all global properties in the database    */   @Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)  public List<GlobalProperty> getAllGlobalProperties();   /**    * Save the given list of global properties to the database.
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
class ObjectRecordWithStats extends AbstractRecordWithStats<Object> {     private volatile Object value;      public ObjectRecordWithStats() {          super();
record.setExpirationTime(expiryTime);                  if (isEventsEnabled()) {                      CacheEventContext cacheEventContext =                             createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),                                                     toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);                      cacheEventContext.setAccessHit(record.getAccessHit());                      publishEvent(cacheEventContext);
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /**
LOG.info("Verifying the reading data...");          for (int pId = mLeft; pId < mRight; pId ++) {           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            IntBuffer intBuf;           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();            int tmp;            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {
public class Label extends Widget {    private LabelStyle style;    private final TextBounds bounds = new TextBounds();   private CharSequence text;    private BitmapFontCache cache;    private float prefWidth, prefHeight;    private int labelAlign = Align.LEFT;
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
super.compare(modelA, modelB);         assertRemoveSubsystemResources(servicesB);     }  } \ No newline at end of file
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10802, value = "Interrupted awaiting final response from server %s on host %s")      void interruptedAwaitingFinalResponse(String serverName, String hostName);      /**
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
public void testSamplingUsingmessageFrequency() throws Exception {          long totalMessages = 100;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
state = MachineState.RUNNING;              }             this.startTime = Time.currentTimeMillis();              this.newAssignment = newAssignment;              this.pendingLocalization = null;              this.pendingDownload = null;
future.get();              future.addListener(() -> counter.decrementAndGet(), Runnable::run);          }         assertEquals(counter.get(), 0);      }  }
return secret;    }   public String getPercentEncodedKey() {      return percentEncodedKey;    }
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (getPath() == null && c.getPath()!= null) {              return -1;         } else if (c.getPath() == null && getPath()!= null) {              return 1;          }          v = getPath().compareTo(c.getPath());
public void pickAddress() throws Exception {          try {              bindAddress = memberAddressProvider.getBindAddress();             logger.info("Using bind address: " + bindAddress);              publicAddress = memberAddressProvider.getPublicAddress();              validatePublicAddress(publicAddress);
* A {@link TimeoutException} raised by {@link WriteTimeoutHandler} when no data   * was written within a certain period of time.   */ public final class WriteTimeoutException extends TimeoutException {      private static final long serialVersionUID = -144786655770296065L;
}    public Texture (FileHandle file, Format format, boolean useMipMaps) {    if (file.name().contains(".etc1") || file.name().contains(".etc2")) {      create(new ETC1TextureData(file, useMipMaps));     } else {      create(new FileTextureData(file, null, format, useMipMaps));
return cp.isEnum ||!languageSpecificPrimitives.contains(cp.baseType == null? cp.dataType : cp.baseType);      }           private String getJSDocType(CodegenOperation co) {          String returnType = trimBrackets(co.returnType);
ConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);     anotherConceptName.setName("preferred name");     newConcept.addName(anotherConceptName);    Errors errors = new BindException(newConcept, "concept");     new ConceptValidator().validate(newConcept, errors);    }
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface AdvancedTwitterStreamingEndpointBuilder              extends                  EndpointConsumerBuilder {          default TwitterStreamingEndpointBuilder basic() {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}   @ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)  @UnrelatedTwo   static class ImportAutoConfigurationWithItemsTwo {   }
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
private boolean isMissing(Map<String, Object> arguments,     OperationParameter parameter) {    if (!parameter.isMandatory()) {    return false;    }    return arguments.get(parameter.getName()) == null;   }
* @see <a href="http:       */      public ResponseList<Status> getUserTimeline(String id) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id + ".json", http.isAuthenticationEnabled()));      }      /**
}    private String computeKey(String identifier, byte[] key) {     return identifier + Base64.encodeBytes(key);    }  }
}    });   if (!argumentCount.isValidCount(actualCount)) {     throw new ValidationException(      String.format(       "Invalid number of arguments. %d arguments passed.",
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
* @throws NumberFormatException if a component substring does not       * contain a parsable integer.       */     public CSVFilter(String pattern) {          final StringTokenizer tokenizer = new StringTokenizer(pattern, ",");          while (tokenizer.hasMoreTokens()) {              final String token = tokenizer.nextToken().trim();
if (pollFuture!= null &&!pollFuture.isCancelled())     pollFuture.cancel(false);   logger.trace("rapidRefreshFuture scheduleing for {} millis", millis);    pollFuture = pollService.scheduleAtFixedRate(new Runnable() {     @Override
if (value instanceof AsciiString) {              return ((AsciiString) value).parseDouble();          }         return Double.parseDouble(value.toString());      }  }
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
{      private final IdentityHashMap<JoinNode, SourceHashProvider> joinHashes = new IdentityHashMap<>();     SourceHashProvider getSourceHashProvider(JoinNode node, ExecutionPlanner executionPlanner)      {          SourceHashProvider hashProvider = joinHashes.get(node);          if (hashProvider == null) {
for(int i = 0; i < fields.size(); ++i) {            StructField left = other.get(i);            StructField right = fields.get(i);           if (!(left.getFieldName().equalsIgnoreCase(right.getFieldName()) &&                  left.getFieldObjectInspector().equals                      (right.getFieldObjectInspector()))) {              return false;
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
public interface SesEndpointBuilder extends EndpointProducerBuilder {          default AdvancedSesEndpointBuilder advanced() {              return (AdvancedSesEndpointBuilder) this;          }
