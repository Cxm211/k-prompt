callback();       }.bind(this))       .catch(function (error) {
}   const delay = Array.isArray(this.options.delay) ? this.options.delay[0] : this.options.delay   if (delay) {
} else {             assetNode.func.call(this, traversalContext, data);         }
return create(EEProto, {    connect : sinon.spy(function () {     this.emit('connect');     setTimeout((function () {
return this.run().then(() => {           this.util.onClose.lastCall.args[0]()           expect(this.watchApi.close).not.to.be.called         })
if (rows.length > 1)      throw "more than one record per denomination?";     var denomInfo = rows[0];
}     }.bind(server));    } else {
}       return this._passwordCapability.promise;     }, this);
if (this.min != null && this.min <= 0) {                 throw('log axis minimum must be greater than 0');             }
var srcCSS = options.srcCSS             , sourceStats = fs.statSync( srcCSS )              , sourceType = sourceStats.isFile() ? 'file' : 'directory'             , files
}).call(this);
coreAddons: [],     util: this.dgutil };
i, current, len,   exclude = arguments[1] || [],   meta = {'\n': '\\n', '\r': '\\r', '"' : '\\"', '\\': '\\\\'},
_transitionDestroyElement: Ember.on('willDestroyElement', function () {     if (this.get('shouldTransition')) {       var _self = this;       if (this.timeout) {
}).call(this);
(function($, Mobify) { var Async = Mobify.data2 && Mobify.data2.Async   , Context = dust.makeBase({}).constructor   , Chunk = dust.stream('', {}).head.constructor
} else {             throw("Illegal Find Results tab preferredId: "+preferredId+"\n");         }
this.hasError=true;     cb(Array.prototype.join.call(arguments, ", "));     clean();
this.stylePara = function (rng, styleInfo) {     $.each(rng.nodes(dom.isPara, {
for (var i = 0; i < callbacks.length; ++i)                 callbacks[i](this._content, this._contentEncoded, this.canonicalMimeType());             this._pendingContentCallbacks.length = 0;
spyOn(this.executionsService, 'waitUntilNewTriggeredPipelineAppears').and.returnValue(this.$q.when(null));       spyOn(this.executionsService, 'forceRefresh');       this.controller.triggerPipeline();
for(let element of this) {       let funcCall = element[key].apply(element, arguments);       funcCall instanceof Node ? newNodes.add(funcCall) : funcCall !== undefined ? arr.push(funcCall) : null;
if(cdsStart > exonEnds)  {   return smallBox( (exonStarts - (Math.min.apply(Math, _.pluck(data, 'txStart')))), (exonEnds - exonStarts), multiplyingFactor, strand);  }
require('components/SongPlanet/SongPlanet.scss') var Vec2 = require('util/vec2') ,   SvgUtil = require('util/svgutil') function getPosition(rx, ry, t, speed) {
, test({code: "var bar = proxyquire('./bar');"})     , test({code: "var baz = require('./baz');"})     , test({code: "var bar = require('./ba' + 'r');"})     , test({code: "var zero = require(0);"})
function query() {   let firstLevelArgs = arguments;
actionQueue: new Array(),
, {                     xtype: 'tbspacer',
this._listenToRowsEvents(this.rows);             this.viewOptions.childViews.push.apply(this.viewOptions.childViews, this.rows);         },
this.current = installResources.call(router, PageApp, primaryRoute, isGlobal);
class UISettingsPage extends React.Component {   constructor() {     super(arguments);     this.state = {
return {         elementId: (ref.$text === undefined) ? ref : this.convertId(ref.$text),         sortOrder: (ref.$ === undefined) ? undefined : ref.$.sort_order
TableSelectDialog.prototype.bindAggregation = function () {   var args = Array.prototype.slice.call(arguments);
claimModuleAccess: function(moduleName, mode) {       logger.debug('claimModuleAccess', arguments);       if(! moduleName in modules) {
noticeWebview.addEventListener('contentload', function() {     noticeWebview['insertCSS']({ 'code': 'html {overflow-y: scroll;}'});   }.bind(this)); };
this.prepareBudget = 0;     this._prepareQueue = new Array();     this.autoPurgeResources = true;
, modified = require('./modified')   , dirscanproject = require('./dirscanproject')   , env = require('../env'); function toO(file){return toExt(file,'.o');}
Template.qqslider.onRendered(function() {     console.log("onRendered", this);     let updateValue = function(elem, value) {
debug('words: %s', words)   return co(function * () {     loadStart()
if(name in this._nodes){    return this._formElementValue.apply(this, arguments);    }
try {       this[kOnProxyRes].call(res[kSelf], this[kReq], res, proxyRes, onComplete)     } catch (err) {
var val;         for (prop in context) {             type = typeof context[prop];
that._select(current);             if (!this._options.html) {                 that.el.value = (current !== -1) ? that._suggestions[current] : that._currentQuery;
this.instance = instance;     this.sb = instance.sandbox;     this.removeMarkersReq = Oskari.requestBuilder('MapModulePlugin.RemoveMarkersRequest');
len = a.length;             arr = Array.apply(null,{length:len});             for(i=0;i<len;i+=1){
if(typeof obj == 'string') {       this.assert(obj.indexOf(String(other)) >= 0);     } else if(util.isIndexable(obj) && util.isIndexable(other)) {
} else {      v = arguments.callee(object[k]);      if ( v === '' ) {
var app = express()         , calls = 0;       app.use(function (req, res, next) {
} }(this, function($, undefined) {    'use strict';
this.dataModel.bind('reset', function() {         this.render();         onDone();
$merge () {     this._config = _.merge.apply(this, [...arguments].unshift(this._config))     return this
constructor(tree, scopeBuilder) {     this.scopeBuilder_ = scopeBuilder;
afterEach(stopTracking);   it('should send events on outbound form submits', function *() {     var hitData = (yield browser         .execute(utilities.stopFormSubmitEvents)
var T     = toObject(target)     , $$    = arguments     , $$len = $$.length     , index = 1
<label className="table-checkbox-label">        <input id={'checkbox-' + i} onChange={self.handleChange.bind(this, i)} checked={checked} type="checkbox" name="customers" className="table-checkbox" />       </label>
, path      = require( 'path' )   , fs        = require( 'fs' )   , _         = require( 'lodash' )   , utils     = require( path.join( __dirname, 'utils'    ) )
this.state.set(concatenated);          status.emit('complete', 'concat', 'concatenated ' + stateItemCount + 'file(s).');
if (!obj) {         throw 'include(obj) requires obj';       }
console.log(track.title);           if (SettingsStore.get('notify')) notify('New track playing', track.title);           CurrentActions.set(track);         }.bind(this);
var app, base, compression, express, logger, origins, raven, ref, responseTime, sentry, url,   indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
function createGame(opts) {     var opts = opts || {}       , game = new game_core()
if (getPrimitiveType(value) !== expectedType) {       throw `Value at key path '${formatKeyPath(keyPath)}' should be '${expectedType}'.`;     }
, outputDir = path.join(config.sitePath, config.buildDir)  , stylDir   = '_template/styl'
app.current("login-nc");     });     this.get("#:view/:id", function () {         app.params(this.params.id);
constructor(props) {         this.store = Flux.getStore('resource');         this.className = 'resourceDetail';         super(props);
methods: {     setRootAttribute: (attribute, value) => {       this.ariaExpanded = value     },
if ( env.moduleLoader.modulesLoaded ) {         var ormEnabled = packageJson.bundledDependencies.indexOf( 'clever-orm' ) !== -1           , odmEnabled = packageJson.bundledDependencies.indexOf( 'clever-odm' ) !== -1
this.pause();         } else if (typeof arguments[0] == 'string') {             var k = this.get(arguments[0]);
var attr = utils.findAttr(digestAlgoNode, "Algorithm")    if (!attr) throw "could not find Algorithm attribute in node " + digestAlgoNode.toString()    var digestAlgo = attr.value
var values, scheduler, start = 0;         if (arguments.length > 0 && arguments[0] != null && arguments[0].now !== undefined) {             scheduler = arguments[0];
var ap = h.substring(2).toLowerCase();             var aph = new Number(h.substring(0, 2));
resizeHandler: computed(function() {     return run.bind(this, 'didResize');   }) });
}             for (var g in that.groups) {                 that.groups[g].sort(sortFunction);
this.addErrorListener(port.sendPort);         }).bind(this), dart.void, []), onCancel: dart.fn((() => {           this.removeErrorListener(port.sendPort);
if (!args) {         throw 'Expected function keyword with formal parameter list.';     }
console.log('onPopState: ',target,title,href,  arguments);    if (evt._sim) {
return this.driver.fetchTree(ref)     .then(function(tree) {
var chiln = $(str).children();     var obj = new Object();     for(var ii=0; ii<chiln.length; ii++){
return matched.length == 0 && (!global.navigator || 'onerror' !== key);   }, this); }
function * run (context, heroku) {   const fetcher = require('../lib/fetcher')(heroku)
}             this.editor.setSelection(sel);             section = {
res.setEncoding('utf8');    res.on('data', function(chunk) {     this._onResponseData(chunk);    });
if(args[1] === 0 || args[1] && typeof args[1] === "number"){     log.debug("   y = " + args[1]); this.cmd_posy = params.Y = args[1];  }
,   radius         : 140            ,   onMove         : null           }
, isArray = Array.isArray, call = Function.prototype.call   , create = Object.create, defineProperties = Object.defineProperties   , hasOwnProperty = Object.prototype.hasOwnProperty
getDMChannel() {         return this._client.getDMChannel.apply(this._client, [this.id].concat(arguments));     }
, isUpdating: function () {       return _localUpdatePending.length > 0;     }
args.unshift(Log.color.cyan('mrdoc'));       console.log.apply(console, args.map(i => Log.color.red(i)));
var _ol_format_OWS_ = function() {   _ol_format_XML_.call(this); };
if (!(function f(){}).name) {  Object.defineProperty(Function.prototype, 'name', {   get: function() {
this.membrane.handlerStack.shift();       if (typeof this.logger == "object") {         this.logger.trace(
constructor(model) {   super(...arguments);   this.model = model;  }
after(function (done) {     this.timeout(3 * 1000)     parallel([
, createQueryBuilder: function() {             return new QueryBuilderGenerator({
describe("port backpressure", function() {   it("capacity of 1 (default)", function *() {     let _ = createOrderedExpectation(5);
);     return HeadGoverness.prototype.governed.apply(this, arguments);   }
extend: function (target, members) {         for (var member in members) {             target[member] = members[member];         }
if (annotationType === 'label') {             events.emit('ShowTextDialog', this, e.chartX - this.plotLeft, e.chartY - this.plotTop);           } else if (annotationType === 'delete'){
window.ga ||         function() {           (window.ga.q = window.ga.q || []).push(arguments);         };
}         return callback.apply(null, arguments);       }));
sEmitter.emit = function(event) {   var args = [].slice.call(arguments, 1)   var cmd = JSON.stringify({ event: event, args: args })
collection.use(fn, opts);   }.bind(this));
for (let name in IMAGE_SOURCES) {   const url = IMAGE_SOURCES[name].image;
var cfg = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];   var opt = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
}).call(this);
var jsonSafeStringify = require('json-stringify-safe')   , crypto = require('crypto')   , Buffer = require('safe-buffer').Buffer var defer = typeof setImmediate === 'undefined'
exports.requires = function() {   var props = [].slice.call(arguments);   var msg = 'Verifying option' + (props.length === 1 ? '' : 's') +
t.plan(1);     var n  = fresh('inOnce', this)       , ee = new EventEmitter()
,   realcallbackContext = realSelector === callbackContext ? global : callbackContext
this.searcher2 = new Searcher(null)     this.accessor3 = new PaginationAccessor("p3")
.children('span')           .filter(function() {             return $(this).text() === event.item;           });
addUserKey: function(acls, callback) {         var indexObj = this;         var aclsObject = new Object();         aclsObject.acl = acls;
});             core.setProperty(this, Symbol.iterator, function*() {                 let index = 0;
render: function() {       return renderAndSubscribe(this, function() {         let previewed = this.props.previewed;         let action = null;
);       });     }.bind(this));   },
yield post.save(data, {patch: true});         this.body = post;     });
minute = new String(minute)     if (minute.length == 1) {
getInvites() {         return this.shard.client.getGuildInvites.apply(this.shard.client, [this.id].concat(arguments));     }
$form.find("input[name='mobile']").val(user.mobile);             var roleArr = new Array();             for (var i = 0; i < user.roleIds.length; i++) {
if (isIE && IE_MODE <= 9) {       $(this).removeClass(classes);       fn.apply($target, toArray(arguments));
exists = _.union(exists, Array.prototype.slice.apply(arguments, [1]))      callback(null, true)     })    }
if (typeof name === "object") {     for (var k in name) {      this.data[k] = name[k];     }    } else {
$('#topicList').delegate('li.topic', 'vclick', function(e) {     Map.topic = $(this).data('topic');     Layers.loadLayers("src/layers/layers_" + $(this).data('topic') + ".json", Gui.loadLayers);   });
var io_id2input_index = {};  var chain_ios = new Array();  var utxo_spend_offset = 0;
Date.prototype.diff = function(dateObj) {     return this.getTime() - dateObj.getTime();
, op     , len     , x;
function debug() {     typeof console !== "undefined" && console.log.apply(console, arguments); }
forEach(callback) {     const thisArg = arguments[1];      let values = Array.from(this);
Number.prototype.limit = function(vmin, vmax) {
this.explicit = false;         this.ringbonds = new Array();         this.rings = new Array();         this.bondType = bondType;
);     }, this));   }, this);
var scheduleHandler = genScheduler(999, function (p1, p2) {         var x         , p2         , handler;
var configLocation = './generators/pattern-library/example/config.js'; var configFile = require( configLocation )     , util = require( 'util' )     , glob = require( 'glob' )
Timeago.prototype.cancel = function() {     for (var key in timers) {       clearTimeout(timers[key]);     }
if ( numStyles === undefined )     numStyles = jQuery("style, link[rel=stylesheet]").length;    if ( document.styleSheets.length != numStyles ) {     setTimeout( arguments.callee, 0 );     return;
Array.prototype.push.call(arguments, symbol);         var args = arguments;         this._eachPainter(function(painter) {
var $export     = require('./_export')   , $parseFloat = require('./_parse-float');
, MongoError = require('mongodb-core').MongoError   , Db = require('./db')   , f = require('util').format   , shallowClone = require('./utils').shallowClone;
} module.exports = co.wrap(function * (options) {   options = options || {}
_request.on('error', function(error) {                 this.client.emit('debug', `[MCLC]: Failed to download asset to ${path.join(directory, name)} due to\n${e}`);                 resolve({
try {       this._super.apply(this, arguments);     } catch(e) { }   },
const fields = [];         for (const name in this._presets.fields) {             const field = this._getLocalizedField(name);             if (field) {
var fn = targetCoordSpace._applyCurrentInverseTransform;       fn.call.apply(fn, arguments);     },
CommunicationMethodsFormatter                 .getCommunicationMethods(this.sessions.db.dump()[                   SESSION])),             ]);
var part = Base.capitalize(key);  this.attributes[entry[0]] = this.properties[key] = {   type: entry[1],
throw 'dep error';
req.params.path = this.decodeFileId(req.params.id);   this.log("FsBase.receiveId(): method:" + method + ", req.params:", req.params);   this[method](req, res, this.respond.bind(this, res));  }
var qtipContent;         var itemID = $(this).data('code');         if (this.collection.get(itemID)) {
if (this._lastStyles) {     for (let [, style] in Iterator(this._lastStyles))     {
cell   : {1:true},   cross  : (this.iscross===1 ? {2:true} : {0:true}),   border : {1:true, 2:true},
}   function $nest(value, style) {     var this$1 = this;     if (arguments.length === 1)
this._IsAttached = false;      this._Providers = new Array();      this._Providers[_PropertyPrecedence.LocalValue] = new _LocalValuePropertyValueProvider(this, _PropertyPrecedence.LocalValue);
Document.prototype.$__path = function (path) {   var base = this.$__     , adhocs = (base) ? base.adhocPaths : undefined     , adhocType = adhocs && adhocs[path];
console.log('Downloading all fish images: ', data);                     for (var fish in data) {                         ImgCache.cacheFile(image_endpoint + data[fish].img);                      }
event.preventDefault();   var mark = $(this).find("span");   $.ajax({
, minilog = require('minilog')   , _s = require('underscore.string')   , Walker = require('./walker'); var log = minilog('traverson');
this.__applyingFilters = false;     this.Filters = new Array();   },
} function atDynamicInputGroupController ($scope, $compile) {     let vm = this || {};     let state;     let scope;
if (this.status != "ready") {             throw 'Task can only be started in "ready" status.';         }
{         throw "Can't route the message:" + JSON.stringify(message);       }
, shortcut = require('mousetrap')   , template = require('./template.html')   , value = require('value');
var name = (             path instanceof Array ?                 this._name.apply(this, path) : path         );
this.set("datumStates", new DatumStates([            new DatumState()           ,new DatumState({             state : "To be checked",
$('#teleopButton').removeClass('active');  $('#tuningButton').removeClass('active');  $(this).addClass('active'); });
for (const slot in slotsObj) {     const ele = {       "name": `${slot}`,       "description": `${slotsObj[slot]["description"] || ''}`
goBackBtn.addListener("tap", function(){         var popup = this.__createAreYouSurePopup(this._getBackButton());          popup.show();
this.stats.push(new Number(pageData.yslow.g.redirects           .components[0]));
typeof define === 'function' && define.amd ? define(factory) :  (factory()); }(this, (function () { 'use strict';  const x = globalFunction;
{           qx.bom.Event.removeNativeListener(element, "losecapture", arguments.callee);           self.releaseCapture();
args.push(inputs.length ? inputs : observer);   return effect.apply(null, args); };
Array.prototype.sum = function() {   var n, s, _i, _len;   s = 0;   for (_i = 0, _len = this.length; _i < _len; _i++) {
var refresh_modules11 = $(this).attr('data-refresh');     if(refresh_modules11 == undefined){         var refresh_modules11 = $(this).attr('data-reload');     }
var express = require('express')  , app = express()  , join = require('path').join;
fogLayer: new cwt.ScreenLayer(this.ONE_FRAME_ANIM_STEP, this.ONE_FRAME_ANIM_TIME),
this.dataReference = (store_.implementation.dataReference != null) && store_.implementation.dataReference || (function() {           throw "Cannot resolve object store's root data reference.";         })();
if (!this.fields[name]) {                     throw 'Have no parent field';                 }
callback = arguments[1];     password = arguments[0];   }
function bindingContext(dataItem, parentBindingContext) {         this['$data'] = dataItem;         if (parentBindingContext) {
setConstructor(model, BasicModel)  initModel(model, arguments)  return model
function concat(arr) {   return arr.concat(slice.call(arguments, 1));  }
class DrawD3 extends DrawBasicChart {     constructor(Widget) {         this.library='d3';         super(Widget);
Surface.prototype = new Object;  Surface.prototype.constructor = Surface;
_("%s sequence [%s] was ignored."),           arguments.callee.name, Array.slice(arguments));     }
function _maybeEmitValue(next) {   const prev = this._currentEvent   if (!prev || !R.equals(prev.value, next))
it('#enable', function() {       this.plugin.$el = {show: function() {}, hide: function(){}};        this.plugin.disable();
}   Function.prototype.trampoline = function () {     return apply_thunk([this, arguments]);   };
var ret = new comb.Promise();                 it.run(this.__level).both(function (summary) {                     summaries[description] = summary;                     ret.callback();
function banana() {   this.render = (stylesheet) => {
}).call(this);
} catch (ex) {                         callback.call(this, "throw", ex);                     }
if (!inputName) {         throw 'show-errors element has no child input elements with a \'name\' attribute class';       }
var tmp = result[item];       result[item] = new Array();       result[item].push(tmp);
, TOKEN_SENTINEL = "T1=="   , STAGING_HOST = "staging.tokbox.com"   , PROD_HOST = "api.opentok.com"   , SESSION_API_ENDPOINT = "/hl/session/create"
Parser.apply(this, arguments);     this.path = project;
, BindingSupport = enyo.BindingSupport   , EventEmitter = enyo.EventEmitter   , ModelList = enyo.ModelList   , Source = enyo.Source;
expect(pageSize).to.be('' + expectedDefaultPageSize);       })       .catch(common.handleError(this));     });
message.Register("execute", this.Execute.bind(this));     message.Register("Debug", function(d){message.Debug(d);}.bind(this));     this.Reset();
this.gmfAuthentication_.changePassword(oldPwd, newPwd, confPwd).then(       goog.bind(function() {         this.changePasswordModalShown = true;         this.changePasswordReset();
emit: function () {     return this._inner.emit.apply(this._inner, arguments);   }
Ember.run.next(this, function() {       if(parent && parent.addSplit) {         parent.addSplit(this);       }
'use strict'; var join = require('path').join   , assert = require('yeoman-generator').assert   , helpers = require('yeoman-generator').test; describe('module generator', function () {
if(n === 0 && !UNIT_TEST_REGEX.test(result[1])) {         throw "Unit not recognized";       }
function makeLine(key, value) {    key = new String(key);    value = new String(value);    formatted.push('"');    formatted.push(key.replace(/"/g, '\\"'));
return this.modify(function(t) {         console.log(this);         this.rx = pt[0];
this.appName = this.appName || 'global';       this.availableQueryLanguages = queryLanguages;       this.showLanguageSwitcher = config.get('search:queryLanguage:switcher:enable');       this.getIndexPatterns = () => {
})   .init(function ({ driver = null }) {     this.driver = driver;
args.push(options);             result = instance[helper].apply(instance, args);             return result;
function e() {                  return null !== t && t.apply(this, arguments) || this              }
}         var batchedIndices = this._batchedIndices;         length = batchedIndices.length;
for (let types in tables) {       renderedTables.push(         <MenuItem           key={types}
case "ObjectPattern":         queue.push.apply(queue, pattern.properties)         break       case "ArrayPattern":
var $export  = require('./_export')   , $entries = require('./_object-to-array')(true);
slot.remove();     }.bind(this));   }, {category: ['removing']});
beforeEach(() => {             this.reporter = new global.SpecReporter({                 displayStacktrace: "none"             });         });
if(!this._collection){             throw 'Collection must be defined';         }
it('testSwitchWindow W3C WebDriver', function() {     return Globals.protocolTestWebdriver.call(this, {       assertion: function(opts) {
for (var type in this.eventTypesText) {                 list.push({                     '$key': type,                     '$descriptor': this.eventTypesText[type]
for (var i in this.d)                 this.d[i] *= v.d[i];
, editSessionName: function(session, newName) {     localStorage[Constants.LOCALSTORAGE_PREFIX + newName] =       localStorage[Constants.LOCALSTORAGE_PREFIX + session]     this.deleteSession(session)
this._reflectAttribute('from', this._from);        this.classList.remove.apply(this.classList, ALL_FROM_CLASSES);     this.classList.add(`${CLASSNAME}--from-${this._from}`);
}     return this._super(...arguments);   },
let ops = []       yield * this.os.iterate(this, null, null, function * (op) {         ops.push(Y.Struct[op.struct].encode(op))
if (pluginsman.docType !== 'pptx' && pluginsman.docType !== 'ppsx') {     throw "[pptx-widescreen] This plugin supporting only PowerPoint based documents."   }
,'issues/map'     ,'issues/map-bug'     ,'issues/map-combo-conflict'
if (typeof callback !== 'function') {     throw 'Callback is expected in deleteBlobFromIaasClient(). Found: ' + utils.inspect(callback);   }
tui.util.forEachArray(groupDots[index], function(item) {             this._showDot(item.dot);         }, this);     },
"use strict"; var should = require('should')   , _ = require('underscore')   , au = require('../../lib/xpath.js');
receiver[p] = [];                     arguments.callee(receiver[p], val);                 } else {
{         Firebug.Module.initialize.apply(this, arguments);         RemoteModule.addListener(this);     },
}   add() {     super.add(...arguments);     if (this.maxLength && this.list.length > this.maxLength) {
stopWatch();                 for (var u in unsubscribe) {                     unsubscribe[u]();                 }             });
.filter((col) => this.CompatProperty.isInstance(col));           return this.EQ(this.ARRAY_COUNT(this.SEQ.apply(this, cols),               this.TRUTHY()),
var portBindings = {};   for (name in image.services) {     var service = image.services[name];     command.push('-n');     command.push(name);
}.call(this, this, this.Math, this.VisSense, this.VisSenseUtils, this.Visibility));
expect( 5 );  var that = this,   optionIndex = 1,   button, menu, options;
, pricer = require(rootPrefix + '/lib/contract_interact/pricer')   , deployer = ""   , deployerPassphrase = ""   , ops = ""   , opsPassphrase = ""
global["Help"] = Help; })((this || 0).self || global);
var Scope = require('./scope')   , blocks = require('../nodes');
return $q(function (resolve) {                     var req = new (this.XMLHttpRequest || ActiveXObject)('MSXML2.XMLHTTP.3.0');                     req.open(method.toUpperCase(), url, !sync);
var propName = inputID.substring(inputID.lastIndexOf('-')+1);                  var propValue = $(this).attr('value');
this.Init$_PropertyValueProvider(obj, propPrecedence, 0);      this._ht = new Array();  };
} else {       throw is.invalidParameterError('width', `integer between 1 and ${this.constructor.maximum.width}`, width);     }
container: this.sandbox.match.defined     }, this.sandbox.match.func);   });
var indent = require('./../lib/indent.js'); var self = this;
this._itemsByIdentity = null;   this._itemMap = {};    this._storeRef = "_S";
} else {                 var expander = $(this).find(".expander");                 if (!expander.hasClass("empty")) {
if (!MONGODB_URL) {     throw "ENV MONGODB_URL not specified."; }
} else {           throw 'No way to attach an event to the document. What browser are you running?';         }
var UserTable = require('../../user/userTable')   , UserRelatedTable = require('./userRelatedTable')   , UserColumn = require('../../user/userColumn')
if (!((observerId_ != null) && observerId_)) {               throw "Missing observer ID parameter.";             }
if (!this.search){             throw 'Subclasses of Paginator must implement a \'search\' function';         }
History.onHashChange = function(event){     History.debug('History.onHashChange', arguments);
init() {     this._super(...arguments);     this.owner = getOwner(this);
this.addEventListener = function() {     throw "Not supported.";   };
this.panels = new Array();                 }
function e() {             return null !== t && t.apply(this, arguments) || this         }
let options;       [keyPath, options, callback] = Array.from(arguments)       scopeDescriptor = options.scope
console.trace();     var args = [].slice.call(arguments);     Editor.sendToWindows.apply( Editor, ['console:warn'].concat(args) ); };
var isNode = (typeof module !== 'undefined' && this.module !== module);  var waitCount = -1;
this.setup();     this.acroForm = this.xref.fetchIfRef(this.catalog.catDict.get('AcroForm'));   }
function start() {     d3_behavior_zoomXyz = xyz = origin.apply(this, arguments);     d3_behavior_zoomExtents = extents;
case 0:      return _context2.abrupt('return', _Credential2.default.create(this.conn, data));
}     tryStates.push.apply(tryStates, machine.exceptionBlocks);     return machine.startState;
it('emit a parsed object', function (done) {       var client = new Client(null, this.getFakeSocket())
if (Array.isArray(fields)) {     for (var x in fields) {       const field = fields[x]       const inline = field.inline === true
, version: '6.0'       , newCommandTimeout: 60     };
speed,                  callback($(this))             );
var required = ['tail', 'head'];     _.each(required, function(key) {       if (!this.get(key)) {         throw new Error(key + ' is required!');
if (entityName[entityName.length - 1] != ';' && this.from_attribute && (HTML5.ASCII_LETTERS_R.test(chars.substr(entityName.length, 1) || HTML5.DIGITS.test(chars.substr(entityName.length, 1))))) {      buffer.unget(chars);
try {           if (!this.resolvedPath) throw 'dne'           body = await archive.readFile(this.resolvedPath, 'utf8')
$('#popups').children().each(function () {             $(this).click(makeChoice);         });      }
module.exports = cacheConstructor = function(g,model) {   this.g = g;   this.model = model;
multipart.addText(key, self.params[key]);           arguments.callee();         }
, "package-server"                , "package-node-modules"                , "package-build"                ]
if ( this.get('application.currentRouteName') === 'splash')     {
.fail(function (error) {                 throw {                   xhr: {responseJSON: {errorSummary: error.message}}
this.template('grunt/config/optimize/uglify.js', 'grunt/config/optimize/uglify.js');     if (this.cssOption === 'css' && !this.singlePageApplication) {         this.template('grunt/config/optimize/cssmin.js', 'grunt/config/optimize/cssmin.js');
log(`${logPrefix}|reload__px__rem`)  if (_no__dom()) return this  const div = document.createElement('div')
describe('initialization', function () {         this.timeout(20000)         it('should initialize automatically', () => {
if (typeof column.sorter === 'function') {       sorter = function () {         let result = column.sorter.apply(this, arguments);         if (sortOrder === 'ascend') {
verify = function verify(hash, input, callback) {     var storedHash = parseHash(hash),       workKey = this.workKey;
{   for(var i in this.children)   {
}).call(this);
found = false;       for (var h in state.matches) {        var match = state.matches[h];
this.cm.on('scroll', function() {         console.log('event: scroll', arguments);     });
.call(utilNoAuto)             .on('input', function() {                 this.style.width = (this.value.length + 4.5) + 'ch';                })             .on('click', function () {
let React = require('react')   , { Paper } = require('material-ui')
if (!(this instanceof thingShadowsClient))    {
} else if (this.visible === 'legend') {       for (let name in this.categoryColors) {         let itemEl = document.createElement('div')
if (arguments.length) {         var args = [].concat.apply([], arguments)         console.log.apply(console, args)         console.log()
var wrapper = wire.Envelope.decode(data)       , type = wire.ReverseMessageType[wrapper.type]
} else {     if ( this.isBlock ) {
function register() {  expect(db.register.apply(db, arguments)).to.equal(db); }
console.dir(meta);     throw MESSAGE.META_INVALID + p;   }
export default function*(parser, columnsMetaData, options) {   const length = Math.ceil(columnsMetaData.length / 8);
for (var prop in schema.properties) {         propTypes[prop] = function (props, propName, componentName) {           var valid = validate(props);           if (valid) return null;
this.server = null;   this.worker = null;   this.router = null;   this.FunctionRouter = FunctionRouter;
var $export = require('./_export')   , $task = require('./_task'); $export($export.G + $export.B, {
for (var id in seriesToWrite) {                         for (var i = 0; i < seriesToWrite[id].length; i++) {
var _ref;         this.record.trigger('ajaxError', xhr, statusText, error);         return (_ref = options.error) != null ? _ref.apply(this.record) : void 0;       }, this);     };
var ctx = this.context.merge(locals);     var self = this;
, source = $('#fromHTMLtestdiv')[0]
var overrideAttrs = ( overrideEl.attributes = overrideEl.attributes || new Array() );      for ( var attName in attrs ) {
}(this, this.document));
exports.randomkey = function(){     var keys = Object.keys(this.db.data)     , len = keys.length;       if (len) {
, 'fetch-retry-mintimeout': 10     , 'fetch-retry-maxtimeout': 100     , registry: 'http:
var exercise = require('workshopper-exercise')()   , exec = require('child_process').exec exercise.requireSubmission = false
function fnThrow() {     throw 'error'   }
return this.toLowerCase().replace(/ /g,"+").replace(/[^0-9a-z\+]/gi,"").trim(); } String.prototype.to_path = function() {
debug( 'Current value: %d.', this._paddingTop );  oldVal = this._paddingTop;
oncreate: ({ dom }) => {       const docs = {}           , blockStart = /[\{\(\[]$/           , onlyBlocks = /[^\{\}\[\]\(\)]/g
json: true    }, arguments);   };
} else {     throw "Unsupported browser types ["+ navigator.appVersion +"]";    }
for (var id in this.children) {           var child = this.children[id];           svg[child._renderer.type].render.call(child, domElement);
RedisStore.prototype.destroy = function *(sid, sess) {   sid = this.prefix + sid;   debug('DEL %s', sid);
class SystemLoader extends Loader {     constructor() {       super(this);
if (unallowedKey) {     throw `Unallowed key '${unallowedKey}' at key path '${formatKeyPath(keyPath)}'.`;   }
performance.mark("dispatch-start");                         if (this.options && this.options.logDispatchedActions) {                             this.logger.info("Dispatching: " + reducer.name);                         }
function createClass(obj) {   function cl(props) {    extend(this, obj);    Component.call(this, props);
for (var i = 0, l = this.length; i < l; i++) {       if (__hasProp.call(this, i) && this[i] === item) return i;     }
if ($rootScope.groupPubid) {       if (!$rootScope.map) {         $rootScope.map = new Object();         $rootScope.map = all();
if (!sh) {     throw "You must pass an instance of shelljs when running init.";   }
return true;       return this.get('page') == 'query';     }.property('page'),
for (let prop in schema.properties) {       propTypes[prop] = function(props, propName, componentName) {         const valid = validate(props);         if (valid) return null;
function objectDict() {          this.__data = [];      }
{   Object.defineProperty(String.prototype, key, {    value: extension[key],
} App.prototype.model = function() {   _zoro.model.apply(_zoro, arguments)   return this
this.$get = ['$log', '$injector', function($log, $injector) {     var loadedPlugins = [];
var i = 0;                 while (i < node.children.length && !result.cycleExists) {                     result = arguments.callee(node.children[i], path + "." + node.children[i].name);                     i++;
if (tags === false && $root[rootConfigKey].initialized === null) {                   this.$nextTick(() => triggerUpdate($root, 'initializing'))                 }
} else if (!this.utils.isObject(options)) {     throw new this.errors.IllegalArgumentError(errorPrefix + 'options: Must be an object!', { options: { actual: typeof options, expected: 'object' } });   }
audioFormat = new String(audioFormat?audioFormat:"mp3");
var xT = ndPool.mallocDouble(nsize),         x = ndarray(xT, nshape, nstride, 0);     ops.assigns(x, 0);     ops.assign(x.hi.apply(x, as.shape), as);
} else if (!this.utils.isString(id) && !this.utils.isNumber(id)) {     deferred.reject(new this.errors.IllegalArgumentError(errorPrefix + 'id: Must be a string or a number!', { id: { actual: typeof id, expected: 'string|number' } }));   } else {
fnResult = fn.apply(null, arguments);     currentCache.set(arguments[argsLengthMinusOne], fnResult);    }
}     return baseDifference(arguments[index], baseFlatten(arguments, false, true, ++index));   }
try {     $.attr(this, 'autoplay', false);     this.pause();    } catch(er){}
if(this.isDebug){    console.log.apply(console, arguments);   }
},   treeForAddon: function() {     var tree = mergeTrees([this._super.treeForAddon.apply(this, arguments)], { overwrite: true });     var trees = [tree];
}       resolve.apply(null, args);     }
if (lastRunSucceeded)       throw("Expected Cucumber to fail but it succeeded.");   }
}     } else if (this._selectedObj === undefined) {       this._selectedObj = e.target;
break;     case 'RPL_WHOISCHANNELS':      this._addWhoisData(message.args[1], 'channels', message.args[2].trim().split(/\s+/));      break;
if (typeInfo[newTypeName]) {       throw "type " + newTypeName + " defined twice in index file";      }
function isOne() {     return this.LA(1) instanceof One && maxNumberAllowed >= 1; }
clear: function(){     for(var node in this.nodes){       this.nodes[node].clear();     }
Cache.prototype.resume = function () {   var self = this     , ttl = ms(this.ttl);
if (!first.type.equals(Shade.Types.bool_t))             throw ("operator " + operator_name +                     " requires booleans, got argument 1 as " +
}       throw 'Module ' + name + ' not declared as a dependency.';     }, exports, module);
this.on('change:active', function (model, active) {                 this.save({ active: active });                 if (active) {
effects: {         *logout({ payload }, { put, call }) {             yield call(fetchLogout);
this.onCloseButtonClick(button.page);        break;       }else if(domClass.contains(target, this.buttonWidgetClass)){        this.onButtonClick(button.page);
if(as_json !== true){         for(var i in records){           records[i] = this.new(records[i]);
manageConnection(this);   var async = new AsyncSpec(this);   var dataLoader, someThings, queryThings;
this._resetSubControllers();     this._super.apply(this, arguments);   }
var errors = []         , self = this         , message = 'Validation error';
renderElement = function(model,controller) {    !this.connectedCallback || (this.connected && this.connected()) || this.connectedCallback();    let local, foreach;
#!/usr/bin/env node var express = require('express')   , mdns    = require('../lib/mdns')   , app     = express.createServer()
if (data) {       this.state = stateFromLocal     }
dispatch(res);      }     });   }.bind(this);  },
var should = require('should')   , async = require('async')   , hapi = require('hapi')
var GnuTools = require("gnu-tools"); function jsDAV_Codesearch_Plugin(handler) {     this.handler = handler;     this.initialize();
this.dequeue = function () {       var queue = this._getQueue()         , element = queue.splice(0,1)[0];
, moduleDecl = m[3]           , moduleName = m[4]           , moduleDeps = m[5];
Context.helpers = {                 w: function() {                     this.write.apply(this, arguments);                     return this.w;                 },
"use strict"; var env = require('../../../../helpers/env')   , setup = require("../../../common/setup-base")   , desired = require("../desired")
case this.DEBUG:                     _logger.debug.apply(_logger, args);                     break;             }
}, 50);      },    undefined, this);      goog.events.listen(game, eightball.Game.EventType.BOMBEXPLODED, function (e) {
, MongoCR: require('./auth/mongocr')   , Cursor: require('./cursor')   , Logger: require('./connection/logger')   , ReadPreference: require('./topologies/read_preference')
if (canvasWidth <= 0 || canvasHeight <= 0)                 throw "Invalid dimensions for plot, width = " + canvasWidth + ", height = " + canvasHeight;         }
if (schema.hasOwnProperty("oneOf")) {                  for (var i in schema.oneOf) {                      visit(schemaId + "." + i, schema.oneOf[i], callback);
, sandboxleak: function sandboxleak(content, timeout, fn) {       var html = '<html><body></body></html>'         , DOM = this.jsdom.jsdom;
, perfRegex = /^\S+\s+\d+(\s+\[\d+\])?\s+\d+\.\d+:(\s+\d+)? \S+:\s*$/   , instrumentsRegex = /^Running Time, *Self,.*, *Symbol Name/ var go = module.exports = function getConverter(trace, traceStart, type) {
} var LazyKeyedSequence = function LazyKeyedSequence(seqable) {   return KeyedIterable.apply(this, arguments).toSeq(); };
} else if (giverHash === undefined || objects.type(objects.read(giverHash)) !== "commit") {       throw "error: " + ref + ": expected commit type";     } else {
return deferred;       }.bind(this));      }
$(document).mousemove(function(){                     e = Slider.eventHandlers.getEvent(e, this);
Team.delete = function*(id) {     try {
$.WSConfig.set("HomeScreenHUDHidden",true);     $(this).animateWithCSS({      top: 180,
if (!study || !study.seriesList) {         throw "Insufficient study data was provided to sortStudy";     }
$('.js-cancel-confirm').click(function(e) {   if ( !confirm( $(this).data('confirm') || 'Are you sure? You will lose any changes.') )    return e.preventDefault();
}         _super.apply(this,arguments);     };
this.end = params.duration;      this.duration = generateTimecode([Math.round(this.end-this.start)], (maxchapterlength >= 3600)&&(Math.round(this.end-this.start) < 3600));     }
}           }.bind(this));         }       },
e.preventDefault();                 var fieldNum = this.id.charAt(this.id.length-1);                 var fieldID = "#field" + fieldNum;
if ( !(args.app instanceof OSjs.Core.Process) ) {       throw 'upload() expects an Application reference';     }
if (adapter.drop) {    adapter.drop.apply(this,arguments);   }
} else {     throw "You must either set an 'is' value, a single minimum and maximum value, or both a minimum and maximum value.";   }
vg.merge = function () {     var args = Array.apply(null, arguments);     args = flatten(args);     var shapes = [];
constructor: function(application,options)     {         EntityHelper.apply(this,arguments);     },
if(message.data.payload.newName == null)   {     throw "suggestUserName Message has no newName!";   }
console.log("wrtc", wrtc);         throw "wrtc needs to be set in headless mode";       }
});             this.send(x, presence);         }, this);     }
} function startSubtitle( instanceHandle ) {     var scene = this.find( "/" )[ 0 ];     if ( this.hasSubtitle( instanceHandle ) ) {
const exports = function(config, $scope, $injector) {   gmfControllersAbstractAPIController.call(this, config, $scope, $injector);
} function getOrCreateOwnMap(key) {   let ret = this[key];   if (!ret) {
, base64ToString: string => CryptoJS.enc.Base64.parse (string).toString (CryptoJS.enc.Utf8)     , binaryToString: string => string     , binaryConcat: (...args) => args.reduce ((a, b) => a.concat (b))
Array.prototype.commas = function() {     return this.join(',');
map_camera.speed = RANDO.SETTINGS.CAM_SPEED_F ;         map_camera.attachControl(this._canvas);
default:             throw "TextStorage.displacePosition(): count must be 1 or -1";         }
}), errorCb);    this.emit('get_ice_candidate', this);   }
= function(options) {   this.options = utils.merge(defaults.options, options); };
entityCloneResolver (type) {         return co.wrap(function * (entity, args, ctx, info) {
sender.addEventListener('core-complete', function(event) {                  this.fire('submitted', event.detail.xhr);             }.bind(this));         },
GroupTemplate.prototype.prepare = Promise.coroutine(function* () {   this.id = this.taskID();
api.on("warning", function(error) {     this.log('WARN - Netatmo: ' + error);   }); }
for (var name in templateGeo.attributes) {                 var attr = templateGeo.attributes[name];
if (typeof startDate !== 'string' || typeof endDate !== 'string') {             throw 'invalid input: not a string';         }
var arr = fn ? defaultArr() : defaultArr || [];       return new MongooseArray(arr, _this.path, this);     });
.find("rdl\\:EmbeddedImage[Name='" + this.value() + "']");             return new RdlEmbeddedImage().init(this, dom);         }.delegateTo(this))();     },
}).call(this);
else {         throw("couldn't match PACK");       }     };
const optionLabelPath = this.get( 'optionLabelPath' );                     const select2 = this;
atMonth() {         if (arguments.length === 1 && arguments[0] instanceof Month) {             return this.atMonthMonth.apply(this, arguments);         } else {
} }(this, function (d3, require, CommonND) {
}                 throw 'no plane for alignment: ' + $scope.viewDirection[dir] + dir;             }
var type = 'results/';              var id = $(this).parent().find('#PollId').val();          } else {
!function(){   var Map = global.Map     , Set = global.Set     , sizeDesc = {         'get': function(){
var info = new Object();    info["workspaceId"] = $.workspaceGlobalInformation.id;    info["command"] = "ClearTripleStoreCommand";    info['tripleStoreUrl'] = $('#txtModel_URL').html();
const getCustomBuild = function*(siteConfig) {     if (siteConfig["custom-builds-dir"] && siteConfig["build-type"]) {
splice.apply(out, [out.length,1].concat(resolvePathObjects.call(this, path.call(this, root), root)));     continue;
if (arguments.length < 2 || not(L)) { return L; }     var args = [apply(R, [])];     args.push.apply(args, slice(arguments, 2));     return and.apply(null, args);
function _InheritedContext() {      RefObject.call(this);      if (arguments.length > 2) {
}     yield this.get('scrollTo').perform(start, end, options);   }),
connect(...args) {     return this.contractor.connect.apply(this.contractor, args)       .then(() => {
var sessionsList = _.filter(this.collection.models, function (model) {             return this.model.get('_id') !== model.get('_id');         }, this);
item.index = i++;       return array.every(this.groupFilters, (filter) => {         return filter(item);
}     this.keydown = function(ev) {       for (var k in this.keystates) {
}, {         key: 'setData',         value: function setData(width, height, data) {             var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
app.use(require('browserify')({             base : [path.join(app.rocket.app_dir, CLIENT_LIBS_DIR)]           , mount : '/browserify.js'           , filter:  (USE_UGLIFY_JS ? uglifyFilter : undefined)
var Provider = require('../provider')   , extend   = require('extend'); module.exports = Provider.extend({
];     me.callParent(arguments);   },
for (let field in $data.filter) {         switch (field.toLowerCase()) {           case DATE_FROM_FIELD:             let dateFrom = tryParseDate($data.filter[field], $data.dateField.format);
arguments[i].prototype.initialize = function() {};
process.stdout.write = function() {         logs.push(arguments.length === 1 ? arguments[0] : arguments);     };
end = chart.offsetToDate(get(chart, 'ganttWidth')*1.5);       set(this, 'viewEndDate', end);     }
var html = this.outerHTML, ownerDocument = this.ownerDocument;     if ( !html || jQuery.nodeName( this, "form" ) ) {      var div = ownerDocument.createElement("div");
log.silly("polling for cacheKey: " + cacheKey + " start: " + start + " to complete", "Polling");     var cc = new Object();     cc.cacheKey = cacheKey;
this.proxy = undefined;         this.end();         console.error('Proxy closed');     });     this.on('close', function(had_error) {
export function echo() {   console.log('echo ' + Array.prototype.slice.call(arguments, 0).join(' ')) }
if( !( this instanceof Rabbit ) ) {     return new Rabbit( arguments[0], arguments[1] );   }
exports.installWithBower = function ( location, packages ) {   var def     = Promise.defer( )     , oldCWD  = process.cwd( );   async.each( packages, function ( pkg, next ) {
}    }    return this;   }
this.textureIndex = 0;     for (var name in this.uniforms) {      this._bindUniform(name, shaderInfo);     }
if ($callableFromMasterProcess.is (def)) {                         return function () { var args = _.asArray (arguments)
var matcha = require('matcha')   , Seed = require('../lib/seed')   , ObjectId = new Seed.ObjectId();
function start(d){                  d3Select(this).style('fill', colorHighlight);       }
options.extensions.concat(excluded),             function*(filePath, ev, matches) {                 if (!excludedWatchPatterns.some(regex => regex.test(filePath))) {
else {     fragmentOptions.contextStack = this.contextStack.concat( this.keypath + '.' + i );     fragmentOptions.index = i;
cond.key,       transformer.transformOperatorMap[cond.operator] || cond.operator     ].concat(cond.values);     return docClient.Condition.apply(docClient, args);   });
var invocations = []     function async () { return createHandler.apply(null, arguments) }     function unfold (steps) {
if(!_.isObject(config))     throw 'TradeFetcher expects a config';
var utils = require('../utils')   , crypto = require('crypto');
case 'editRoleBtnAllLeft':                         let direction = this.includes('left') ? 'to-left' : 'to-right';                         btnChevronMoveExtension(clickedElement_, direction);                         break;
max_iob: 0      , type: 'current'     , max_daily_safety_multiplier: 3
init() {     this._super.apply(this, arguments);
delete allSockets[allSockets.indexOf(this)];     allSockets.splice(allSockets.indexOf(this), 1);
console.log('Error ' + errorStr);           $($(this).data('spinner')).hide();          });
, os         = require('os')     , bold    = require('../../bin/term-util').bold     , red     = require('../../bin/term-util').red
helpers = helpers || Handlebars.helpers;   var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression;   buffer += " \n    <div class=\"warningmessagesmall\"><strong>";
constructor(value) {     return isIterable(value) ? value :       Seq.apply(undefined, arguments);   }
exports.plugin = Hp(function hemeraMsgpack (options) {   const hemera = this   const topic = 'mail'
returnValue = $(this).prop("checked");     }
<span> {res.get("height")}</span>       <input type="number" value={settings.height} onChange={props.onChange.bind(this, "height")} style={{ width: 90 }} />       <label>{res.get("initialPosition")}</label>
method: "dispatchEvent",        params: [eventName].concat(Array.prototype.slice.call(arguments))       };
ctx.save();         ctx.transform.apply(ctx, this.canvas.viewportTransform);         this.transform(ctx);
},    error : function(xhr, status, error) {     LOGGER.API.error(MODULE,xhr.responseText + " " + status + " " + error.message);     throw "XSI Error status: " + status;    }
defer.promise = new Promise(function (resolveCallback, rejectCallback) {     defer.resolve = function resolve() {       defer.notify = function noop () {};       resolveCallback.apply(null, arguments);     };
if(!(bi instanceof CANNON.RigidBody) || !(bj instanceof CANNON.RigidBody))     throw "Arguments 1 and 2 must be instances of CANNON.RigidBody.";
'Last argument to `patchAsync()` must be a function');     const args = [arguments[0]].concat(wrapArgs(Array.prototype.slice.call(arguments, 1)));     return app.patch.apply(app, args);
(() => {   const _that = this   const _newId = ((id = 0) => () => id += 1)()
, ModelList = enyo.ModelList   , Source = enyo.Source   , oObject = enyo.Object;
'use strict'; var nprogress = require('nprogress')   , io = require('socket.io-client'); var services = require('./_services');
if (o.success) {                 Ext.apply(this, o.page);                 Ext.apply(this, o.meta);                 this.fireEvent("loaded", this);
t.ok(is.string('foo'), 'string literal is string');   t.ok(is.string(new String('foo')), 'string literal is string');   t.notOk(is.string(), 'undefined is not string');
};     $(this).html(nameButtonDecreaseFont).attr('title', nameTitleButtonDecreaseFont);
tagName = this.tagName,    type = jQuery(this).attr('type'),    nestingParts;
if (replyWzin) replyWzin.remove();    replyWzin = wzin($(this).closest('.message'), $target, { zIndex:60, fill:'rgba(139, 69, 19, .2)', scrollables:'#messagescroller' });   }
String.prototype.toLowerCamelCase = function() {     var first, rest, _ref;     _ref = this.toWords(), first = _ref[0], rest = 2 <= _ref.length ? __slice.call(_ref, 1) : [];     return first + (rest.map(function(p) {
var mousemoveDispatcher = _interopDefault(require('dom-mousemove-dispatcher')); function AutoScroller(elements) {     var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};     var self = this;
var req = socket.request     , token = req.session.jwt   if (token) {
function * startPlaybackService (args) {   while (true) {
, underscore: 'libs/underscore/wrapper'     , backbone: 'libs/backbone/wrapper'     , order: 'libs/require/order'     , text: 'libs/require/text'     , handlebars: 'libs/handlebars/wrapper'   }
self._collection[method].apply(               self._collection, _.toArray(arguments));           } else {
if (names[0].split(" ").length === 1) {           var size = fontSizes(names[0],style)[0]             , ratio = size.width/size.height         }
var frameTags = ["frame","iframe"];             for (var i in frameTags) {                 var frames = doc.getElementsByTagName(frameTags[i]);                 for (var i = 0, nframes = frames.length; i < nframes; ++i) {
, groupMemberContext = {}       , group
return this.choices.filter.apply(this.choices, arguments); }; Choices.prototype.find = function () {   return this.choices.find.apply(this.choices, arguments); }; Choices.prototype.push = function () {
, matches: function(selector){       return matches(this.node, selector)
exports.resolveRelativePath = co.wrap(function *(workdir, cwd, filename) {     assert.isString(workdir);
assertFunction(this);     var list     = Array.isArray(args) ? args : from(args)       , instance = create(this[PROTOTYPE])       , result   = this.apply(instance, list);     return isObject(result) ? result : instance;
patchViewChanges(view);       }, this));
function e() {             var e = t.call(this) || this;             e.setSkinID = function (t) {                 e._skinID = t, e._selector.x = 51, e._selector.y = e._getY(t)             }, e._onChangeSkin = function () {
};    gamejs.time.fpsCallback(tick, this, 100); }
class NotificationStore extends GetSetBaseStore {   constructor() {     super(...arguments);
if(b.subtree) {      arguments.callee(b.subtree);     }
let file;         before(function*() {           file = new hdf5Lib.hdf5.File('./filters.h5', globs.Access.ACC_TRUNC);
App.on('record', co.wrap(function *() {     yield App.activity.record.apply(App.activity, arguments)   }))
} else {                     return reject(new Error(this.getStatus()));                 }
if (adapter.describe) {    adapter.describe.apply(this,arguments);   }
function read() {   return this.fuse(fs.createReadStream.apply(fs, arguments)); }
reduceIfStatement(node) {     let s = super.reduceIfStatement(...arguments);     if (isLabelledFunction(node.consequent)) {
'use strict'; var value   = require('../Object/valid-value')   , memoize = require('./prototype/memoize'); module.exports = memoize.call(function (name) {  return function (obj) {
describe('___ (covered by ___)', function() {   this.timeout(6000);
it('should tap on arbitrary coordinates', async function () {           if (skipIOS11(this)) return;            let el1 = await driver.elementByAccessibilityId('Okay / Cancel');
pgEnumName: function (tableName, attr, options) {     options = options || {};     var tableDetails = this.extractTableDetails(tableName, options)       , enumName = '"enum_' + tableDetails.tableName + '_' + attr + '"';
describe('mediaQueryTracker', function() {   before(function *() {     browserCaps = (yield browser.session()).value;
, describeWd = driverBlock.describeForApp(appPath, "android", appPkg, appAct)   , it = driverBlock.it   , should = require('should');
} else if (!this.isConnect) {       throw 'User is\'t connections.'     }
event.preventDefault();                 var value = this.value;                 usermsg.val('').trigger('autosize.resize');
, Request = require("request")   , CliBox = require("cli-box")   , AnsiParser = require("ansi-parser")   ;
, util = require('../util')   , global = this
this.setData(data);             return this.data;         }));
res.render(template + ".tmpl", {         user      : user       , articles  : articles       , keyword   : keyword
else if (arguments.length === 3 && Array.isArray(arguments[0]) && typeof arguments[1] === "number" && typeof arguments[2] === "number") {         this._bytes     = arguments[0];
, rbox: function(el) {
$('#add-product-button-wrapper a').on('click', function () {             foodcoopshop.ModalProductAdd.getOpenHandler($(this), modalSelector);         });
calls.push(Array.prototype.slice.call(arguments));                  if (this instanceof arguments.callee) {
if (!latestVersion) {         throw "NO_LATEST";       }
const DOWNLOAD_PATH = 'http:     , JAR = 'DynamoDBLocal.jar'     , DB_PATH = './dynamodb/bin';
constructor(sekshi, options) {     this.name = 'Links'     this.author = 'ReAnna'
for(var index in args) {       scope = args[index];
},   resetRenderRange: function() {     this.trigger.apply(this, ['resetRenderRange'].concat(Array.prototype.slice.call(arguments)));   },
MonthBox.propTypes = {         value: PropTypes.string         , onClick: PropTypes.func     }
value: ctx.params.value     }, ctx.params.opts, this.options));     this._map[ctx.hash] = ctx.params.value;
$(".line_selected").removeClass("line_selected");       var index=parseInt($(this).data("index"),10);              $(this).addClass("line_selected");
if (typeof(handle) === 'function') {             return handle.apply(undefined, value);           }
, show: function () {             var pos = $.extend({}, this.$element.position(), {
vertices: json.meshes[mesh_i].vertices,         indices: [].concat.apply([], json.meshes[mesh_i].faces),         normals: json.meshes[mesh_i].normals
} else {     throw 'Unsupported input ' + typeof input;   }
setValue:function(list){   for(var i in this.rows){    try{
if (factory) { return factory; }     return Ember.Container.prototype.resolve.call(this, fullName);   };
var speed = 7;  var Bat = ns.Bat = function(){   MovieClip.apply(this, arguments);   this.alive = true;
} SubDown.prototype._close = function () {   this.leveldown.close.apply(this.leveldown, arguments) }
super(Message.Type.ACCOUNTS_TREE_CHUNK);         if (!(blockHash instanceof Hash)) throw 'Malformed blockHash';         if (accountsTreeChunk && !(accountsTreeChunk instanceof AccountsTreeChunk)) throw 'Malformed chunk';
} else {                 throw 'sx.keys function only supports objects, got ' + (typeof obj);             }
if (this.floatTextures === true && !utils.OES_texture_float) {    throw 'Float textures are not supported on this browser';   } else if (this.floatOutput === true && this.floatOutputForce !== true && !isReadPixel) {
source.datafn = function(query,params, cb, idx) {       console.log(777,arguments);       return alasql.engines[alasql.databases[source.databaseid].engineid].fromTable(
, reference: {            datapackage: 'http:            , fields: { name: 'id' }            , resource: 'resource'
this.pre('  atom .');       this.h2('Is it in your PATH?');       return this.pre(`PATH: ${_.escape(process.env.PATH)}`);     }),
if (process.env.TRAVIS) {                     page.set("onConsoleMessage", function () {                         console.log.apply(this, [                             "PhantomJS console message:"
, Collection = Backbone.Collection   , ed = require("../lib/end-dash")
var _ = require("lodash")   , pg = require("pg")   , parser = require("../lib/parser");
var PRIVACY_PUBLIC = 'PUBLIC';   var mapOwnerUser = this.mapOwnerUser;   return datasets && datasets.length ? _.filter(datasets, function (dataset) {
text = UserAccounts.t.apply(UserAccounts, options);
if (byteStream === undefined) {     throw 'dicomParser.readSequenceItemsExplicit: missing required parameter \'byteStream\'';   }
subChild = this._getSelectedChild(current, "center");
ve.Node.prototype.getOuterLength = function () {  throw 've.Node.getOuterLength must be overridden in subclass'; };
if (list.length > 0) {                     for (var r in list) {                         var repo = list[r];
try {       this.inAsyncFunction = true ;       var pp = this ;
w = svgWidth - margin.left - margin.right; console.log('svg width: ', svgWidth, w, this, this.offsetWidth, width);       x.range([0, w]);
}  setInterval(function(){this._reducePenalties()},this.options.ptimer.resolution); }
obj = utils.retrieveData( key, node );         }).bind( this ));         ret = obj;
if (!err) {      this.handle.new_offer(offer.currency.toUpperCase(), offer.amount.toFixed(8), offer.rate.toFixed(6),       offer.duration, 'lend', null, function(err, res) {   cb(err, res);
return Utils._.includes(definition, 'PRIMARY KEY');           }).length > 1)         , attrStr = []         , modifierLastIndex = -1;
export default function*() {   yield takeEvery(BACKEND_PLAY, play)
],                 function returnFoundModels( err, _models ) {                     var models = []                       , _models = _models instanceof Array ? _models : [ _models ];
if (!Ctor) {         throw 'ns.View "' + id + '" is not declared!';     }
var files = fs.readdirSync(dir);     for (var i in files){         var name = dir + '/' + files[i];
it('should successfuly send a payment', function * () {         this.plugin.sendTransfer = (transfer) => {
}(this, this.jQuery || this.Zepto, this.ch));
genElement.call(this)   l(this.base)   if (el) {
"Delete previous character for collapsed (single cursor) selection", function() {         this.document.select({           start: [0, 4],
function ($scope, $rootScope, $routeParams, $timeout, $location, authService, templateServices) {         var ctrl = this;         ctrl.request = {             pageSize: '10',
default:       throw 'invalid offset size: ' + offSize;   }
setImmediate(function () { callback(undefined, block); });   }.bind(this);
function gridsterController($scope, gridsterConfig) {     var vm = this;     vm.mobile = false;
host: options,       port: arguments[2],       localAddress: arguments[3]     };
return this.each(function() {   var self   = $(this),    cmItem = 'elfinder-contextmenu-item',    smItem = 'elfinder-contextsubmenu-item',
if (!apiToken) {         throw 'TRAVIS_API_TOKEN environment variable must be set';     }
if(typeof s != "number" || s <= 0) {    throw "bucket_precision must be a positive number";   }
return function( elem ) {       var node = typeof elem.getAttributeNode !== this.strundefined && elem.getAttributeNode("id");       return node && node.value === id;      };
class DCOSStore extends EventEmitter {   constructor() {     super(...arguments);
if (this.field != other.field)     {      throw "GF256Polys do not have same GF256 field";     }
};         this.updateMarkers = lodash_1.debounce(() => tslib_1.__awaiter(this, void 0, void 0, function* () {             if (!this.client)                 return;             if (!this.filePath)
}             let hasSecret = (this.secretKey && this.secretKey.length > 0);
},   onInit: function() {     this._super();     this.set('selectedTemplateModel', null);
let ob = this  let res = null
this.on('rset', function () {             logger.logdebug(`[smtp_client_pool] ${this.uuid} releasing, state=${this.state}`);             if (this.state === STATE.DESTROYED) {
function findFeedObject( data ) {         let feed = this._findFeed( {           url: data.feedUrl
this.currentForm.dialog('close');         this.currentForm = null;       };
var bids  = params.bids;       for (var key in bids) {         slots.push(_defineSlot(bids[key]));       }
passport.loadStrategies = function () {   var self       = this     , strategies = sails.config.passport;
, socket = require('../lib/io')   , uglyfyParser = require('../lib/vendor/uglifyjs/lib/parse-js')   , uglyfyAst = require('../lib/vendor/uglifyjs/lib/process');
this.action('login', 'httpPost', function(UserName, Password, Remember) {         console.log('Remember:' + Remember);         if (UserName === 'admin' && Password === 'admin') {
if (_.isUndefined(n_elements)) {             throw "could not figure out how many elements are in this model; "                 + "consider passing an 'elements' field";         } else {
});     }; }).call(this);
function log() {   return process.stderr.write(util.format.apply(util, arguments) + '\n'); }
var resolvedEntry = path.resolve(process.cwd(), opts.entry)     , css = rework(read(resolvedEntry))   css.use(npm({
_initTabPanels: Ember.on('init', function() {     this.set('tabPanels', Ember.A());   }) });
function ifOwnAttachHTML(buf) {     var me = this;     var elseIndex;
$("#nav_menu").css("display", "inline");             $("#nav_menu").css("top", $(this).offset().top + $(this).height());             $("#nav_menu").css("left", $(this).offset().left + $(this).width() - 5);         }
var canUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM   , cancel = 'clearTimeout'   , raf    = fallback
EventTarget.prototype.addEventListener = function addEventListener() {   return this._eventEmitter.addListener.apply(this._eventEmitter, arguments); };
let result, app, storage;   this.timeout(4000);   before(() => app = express());
else {                     throw "Promise is cancelled";                 }             });
const r = await _resolve(this.render)   console.log(this)   mount.call(
Route.prototype.nest = function(cb){   if ( typeof cb != 'function' ) throw 'route.nest() requires a callback function'   cb.call( this )
} else {   throw "Invalid options provided";  }
this.annotations;      this.is_poly_selected;      this.selected_poly;      this.selected_poly_parts;
this.on("input", function(msg) {             node = this;             var id;
if (obj) {                                      for (var attr in obj) {                                          vObj[attr] = obj[attr];                                      }                                  }
mousePosition: function(element) {   throw 'Not implemented';  },
var url;         EventPointing.prototype.handleClick.apply(this, arguments);
for (var j in commandsList) {             var result = commandsList[j].command.exec(commandText);
if (window.console && console.firebug) {           console[entry.level].apply(console, qx.log.appender.Util.toTextArray(entry));         }
SubDown.prototype.getProperty = function () {   return this.leveldown.getProperty.apply(this.leveldown, arguments) }
function update(diffTime) {         var currDist = TwoFingerInput.calculateDistance(this.posA, this.posB, this.options.direction);         var center = TwoFingerInput.calculateCenter(this.posA, this.posB);
elements = elements.filter(function(i) {         return this !== null && this.nodeName !== "TD";     });     elements = $(removeChild(elements));
$treeItems.each(function() {                     var labelId = $(this).children(treeItemLabelSelector).attr(ID_ATTR_NAME);                     if (labelId) {
if (!this.isOpen) {       this.open(VERSION, function() {         setupDefaults();       }.bind(this));     }
if (!y.type.equals(Shade.Types.float_t)) {             throw "expected float, got " + y.type.repr() + "instead";         }         return from_vec3(Shade.vec(x, y, 0));
target && target.controller() !== this &&                     ( target = virtualize.call( this, target ) );
, RE_GLOB = /[\*\[\{]/  , RE_UNIQUE = /{(?:hash|date)}/
, esClient  = new elastical.Client(host, options)     , useRiver = options && options.useRiver;
}),   _teardownScrollEvents: on('willDestroyElement', function () {     var scrollContainer = this.get('scrollContainer');     var touchMoveContainer = this.get('touchMoveContainer');
completeUncompletedBuilds(this.slot());  },
merge(this.state, data);   this.send('merge', data);  });
var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];         var StyleSheet = arguments[1];         var Dimensions = arguments[2];         _lodash2.default.defaultsDeep(options, {
if (maskdef && !escaped) {       maskdef.placeholder = $.isFunction(maskdef.placeholder) ? maskdef.placeholder.call(this, opts) : maskdef.placeholder;       var prevalidators = maskdef.prevalidator,
var connId = data.id;     this.once('connected connecterror autherror', function (data) {      if (!data || data.id == connId) {
, tab = {                 init: function () {
if (this.adb && !this.shuttingDown) {       this.adb.sendAutomatorCommand(action, params, _.bind(function(response) {         this.cbForCurrentCmd = null;
});   this.emit('data', f);   cb();
objectName: objectName,          params: arguments[arguments.length - 2]   });
} else {       formattedDecimalPart = new String(decimalPart).substr(2).substr(0, numberOfDecimals);     }
}   group.on('click', showNodeControls.bind(this)) }
}   else if (arguments.length < 3 && typeof arguments[1] === 'object') {     timeZone = stringifyObjects.timeZone || stringifyObjects.zone || null;
this.set( 'mouseLeaveListenerResize', Ember.run.bind( this, function() {             Ember.$( 'body' ).removeClass( 'resizing' )
for (var attr in attrs) {       if (model.attrs[attr]) {         this.attrs[attr] = attrs[attr];       }
previous: lastVersion.hash,         entries: this.event.body,     });
if (!this.__sortedCache__[channel]) {       for (i in this.__handlers__) {         handler = this.__handlers__[i];         if (handler.pattern.test(channel) && !skip_set[handler.name]) {
globalMap = map;     for (mw in globalMarkerWrappers)     {
var fs = require('fs')   , path = require('path')
describe('built-in apps', function () {   process.env.TRAVIS ? this.timeout(240000) : this.timeout(120000);   let driver;
this._basePath = ''; }
plainText = getPlainText(child, trailingSpace);                      chars.push.apply(chars, plainText[0]);                      trailingSpace = plainText[1];
function log() {   console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments)); }
$this = this;                      this.prefixes = new Array();                      this.dom.find(".bgplayControlPrefixValue input[type=text]").each(function(){
alert(message);    throw 'unsupported browser';   }
if (hash) {    for (var key in hash) {     count++;    }   }
main: typeScale.range(),   modifier: (color, root) => typeScale(extname(this.name)) };
else {         throw('[sprintf] huh?');        }       }
if (objJs.methodId[agent.objectPath]) {   for (var idx in objJs.methodId[agent.objectPath]) {    try {
socket.on('err', function(error) {         smalltalk.alert(this._TITLE, error);     });
var fieldInversion = fieldOperator.inversion   this.data = fieldInversion(this.data, fieldInversion.apply(null, arguments))      return this
Template.Admin_Datamodel_Pagination_Widget.onCreated(function admindatamodelpaginationwidgetOnCreated() {   console.log('onCreated data=%o', this.data);   if (this.data) {
var mouseUpConnector = this.connect(dojo.body(), "onmouseup", function(){       this._active = false;       this._mouseDown = false;       this._setStateClass();       this.disconnect(mouseUpConnector);
, submit: function() {     var value = this.refs.input.getDOMNode().value
, query = ctx.query || {}     , client = ctx.dpd     , errors = {};   if(!item) return done('You must include an object when saving or updating.');
name: {         singular: 'Volt-Ampere Reactive Hour'         , plural: 'Volt-Amperes Reactive Hour'       }       , to_anchor: 1     }
this.ops.length = 0;   this.emit('connect'); }); Proxy.prototype.setKeepAlive = function setKeepAlive(enable, delay) {
height: iDocumentHeight,                         top: $(this).scrollTop() * -1                     }
src: [                     'browser/src/dop.js'                     ,'browser/src/util
const session = this.get('session');     return session.authenticate.apply(session, arguments);   },
var dummy , async = require('async') , EventEmitterCollector = require("eventemittercollector") , DeepObject = require("deepobject") , tracer = require('tracer');
if (!getId(currentNode.id)) {           testEventNode.call(this, currentNode)         } else {
if (!this.accepted[obj._id_]) this.onRelation(obj);     else this.emit('relupdate', event, last, this);    }
isNode: {         writable: false,         value: function () { return isNode.apply(callsite, arguments) }       },
}   findOne() {     return this.where.apply(this, arguments).first();   }
if (!buddyData.archiveExhausted) {          $(this).addClass(classNameMamEnable);       }
if (fieldInstance.options.multiple)         $('[' + fieldInstance.options.namespace + 'multiple="' + fieldInstance.options.multiple + '"]').each(function () {           $(this).off('.Parsley');         });       else
$(myelements.selector).each(function() {     var _this = this,       $this = $(this);     myelements.initializeElement(this);
}              if (!arguments[1] && Object.preventExtensions)         Object.preventExtensions(this);       return self;
console.log("signature not valid: " + sig.validationErrors)        throw "signature not valid: " + sig.validationErrors      }
function iterator() {         return __asyncGenerator(this, arguments, function* iterator_27() {             const firstIterator = source[Symbol.asyncIterator]();
if (e.toString().includes('Error: Could not find module')) {           return requireNode.apply(null, arguments);         } else {
owner: component,       destroy: () => destroy.call(this, d, i, nodes),       selection,
}).then(function (result) {         if (result.stdout.trim() !== '') throw 'Tag \'' + version + '\' already exists';         grunt.config('buildtag', '');
args.unshift("config-hierarchy");         args.unshift(fixtureDir);         return path.join.apply(path, args);     }
, HTML: 'html' };
pulse.MetricQuery = function (cacheTime) {  this.metrics = new Array();  this.cache_time = 0;
{    self.show(_.unescape($(this).attr('data-passage')));   });
body.to = recipient;         return process.nextTick(callback.bind(this, null, body));     }
default:         throw 'invalid mask:' + maskPattern;     }
reject(Error("MP3 Worker cannot be started - correct path set in defaults?"));                 }.bind(this), false);                 this.mp3Worker.postMessage({ping:true});
function TypeMultipleEntities(selector, entityNames) {   if (!entityNames) entityNames = new Array()   else if (!Array.isArray(entityNames)) entityNames = [entityNames]
clickableClass: computed('notification.onClick', function() {     if (this.get('notification.onClick')) return this.get('styles.c-notification--clickable');     return false;
const showMenu         = require('./exerciseMenu')     , showLanguageMenu = require('./languageMenu')     , print            = require('./print-text')
function register() {   ValidatorBuilder.registerHelper.apply(ValidatorBuilder, arguments); }
let minSizes = new Object(); let data = new Object();
stop();    ua.importsrc('baidu.i18n.cultures,baidu.object.extend',function(){     s.apply(this, arguments);;     mySetup();
this.$().focus();     return this.disablePageScroll();   }),
"state": propertyName,                                     "data": arguments                                 });
function _computeSize() {         var tiles = this._tiles;         for (var it in tiles) {
mhlp.updateOptions(this.config.options, mOpt);     if (this.config(options.circleCheck))         mhlp.circle(this.name, []);
, EDGE_TABLE        = new Array(256)     , CUBE_EDGES        = new Array(12)      , MOORE_STENCIL     = [ [0,0,0] ]   , SURFACE_STENCIL   = [ ];
constructor(ui, x, y, key, frame){         Element.call(this, ui, x, y);         super(ui.scene, x, y, key);
},     updateNodeBounds: debounce(function(element, newBounds) {       const { x, y, width, height } = this.node.diagram.bounds;       if (
var labelAttr = $scope.labelAttr || 'label'         , labelFn = $scope.labelExpr ? $interpolate($scope.labelExpr) : null;       ms.getLabelFor = function(item) {
proc.on('exit', function(exitCode) {         var end = new Date()           , elapsed = end.getTime() - start.getTime()
var attributes = this._drawnNode.attributes;     var shape = this._drawnNode.shape;
this.renderWordCountComparison(that.collection);             } else {
if(sourceB){   for(var i in sourceB){    ref[i] = sourceB[i];
'use strict'; var f          = require('../../Function/functionalize')   , isFunction = require('../../Function/is-function')   , forEach    = require('./for-each').call module.exports = f(function (scope, source) {
_results = [];       for (cls in name.split(' ')) {         _results.push(el.classList.remove(cls));
, concatOutput: false
let type = null;   for (let n in newModel) {    if (n == 'type_') {
elem.css({ opacity: '', height: '' });      if($.browser.msie && this.style) { this.style.removeAttribute('filter'); }
if (_.isUndefined(opts.array)) {         throw "opts.array must be defined";     }
slaveWindow.renderForm($(this).closest('form').attr('id'));     }
this.emit('nodeStatus', ozwnode);       sendLog(this, 'node ready', nodeid, nodeinfo);     }
this.folderExists = false;     this.installables = new Object();     $scope.checkboxModel = new Object();     $scope.detectionStyle = false;
if(sheet.drawings){     if(this.debug){      console.log("\n\r########  Drawings found ########\n\r")
}(this, this.Zepto, this.ch));
if (currentRepresentationInfo === null || currentRepresentationInfo === undefined) {             throw 'Unexpected error! - currentRepresentationInfo is null or undefined';         }
if (this._inChangeGroup) {             throw "TextView._beginChangeGroup() called while already in a " +                 "change group";         }
, should = require('chai').should()   , speech = require('../index')   , util = require('util');
nock.emitter.on('no match', function(clientRequestObject, options, body) {       this._noMatches.push(body)       if (debug) {
{  this.world = world;  this.has_world = true; }
this.watch(["src/website/views
init: function() {     this._super.apply(this, arguments);
, Modal = require('../../src/Modal')   , { whitelist, ...config } = require('../../package.json').babel; function scopedEval(code, mountNode)  {
if(response.success){      for(var i in response.queues) {       var item = new dijit.MenuItem({        label: response.queues[i].name,
options.force = options.force === undefined ? false : Boolean(options.force)     var self  = this       , promise
ifNotFound: function(){     throw "unit not found?";    },
}  function uPlot(opts, data) {   var self = this;   var series  = setDefaults(opts.series, xSeriesOpts, ySeriesOpts);
this.getRecordsForDetector = function (     jobId,
{     throw "Chosen SHA variant is not supported";    }
result = result && recurseCompare(childA, childB);     }, this);
fire: function renderBoolean() {         Renderer.prototype.fire.apply(this, arguments);         const value = !!this.tokens.find(isTruthy);
if( _inHTMLTag )     _typingGo.call(this);    else {
if (props.length) {     var selector = new nodes.Selector([new nodes.Literal('&')])       , parentGroup = node.block.parent.node;     selector.lineno = node.lineno;
if (Search(xml)) {   var info = new Array();   GetAddonInfo2(xml, info, "General");
that.tests.firstrun = false;             that.widgets["statuspane.systeminfo"].setContent(this.tr("Enabled auto-reload"));           }
loaded: true,    parent: this.module,    require,
if (this.input) {   Template.prototype.compile.call(t);   if (next) { next.call(this); }   return this;
for(let element of (nodes || this)) {       let funcCall = element[key].apply(element, arguments);       funcCall instanceof Node ? newNodes.add(funcCall) : funcCall !== undefined ? arr.push(funcCall) : null;
warn: function() {       console.warn.apply(console,arguments);    },
this.rows = grid.collection;             CellIterator.__super__.constructor.apply(this, arguments);         },
{     throw "Abstract method!"; };
array.each( obj.classList, ( x ) => {       this.remove( x );      } );
export default function*() {   yield put(
} (Tweenable));   }(this, window));   return window.Tweenable;
Seeder.prototype.run = Bluebird.method(function(config) {   this.config = this.setConfig(config);   return this._seedData()
if ( args.sign != 'TJS' ) {   throw "Sign '" + args.sign + "' not supported! Use SEA3D Studio to publish or SEA3DLegacy.js";  }
window.location = window.location.href;             }         );         $(this).dialog("close");     };
} var actionTimers = function() {   this.pause = function() {     loopTimer.pause();
return superMethod.apply(this, toArr(arguments).slice(1));     },
this.set('axis', d3.svg.axis());     this._super.apply(this, arguments);   },
}).call(this);
const browserifyFiles = function*() {             const entry = path.join(options.destination, options.clientBuildDirectory, options.appEntryPoint);
if(items.length > 0) {    for(var i in items) {     var col = items[i]['name'];     if(col.indexOf('system.') == 0) {
portals.push(this._getSharedVerticesInOrder(p, n));     }, this);     p.centroid.x = this._roundNumber(p.centroid.x, 2);
if (data.length != ZipConstants.LOCHDR || data.readUInt32LE(0) != ZipConstants.LOCSIG) {                 throw "Invalid LOC header (bad signature)";             }
} else {                 throw "Expected id or forUsername";             }
if(string.includes("require") || string.includes(";") || string.includes("eval")){   throw "parseJsString might have gotten something that could be a xss attempt";  }
, should = chai.should()   , expect = chai.expect   , nmap = new lib(); describe('nmap', function() {
for (var i=0; i < indexes.length; i++) {       if (indexes[i]['type'] == element) {         return new Number(parts[i]).toString()       }
function dragEnd(event) {     this._$window.off('mousemove.tableheader');
return arguments[0] ? pos     : LinkedPoint.create(this, 'setPosition', pos.x, pos.y);
modalService.manageGrants(self.team);     };     this.openCheckParametersModal = function(check) {         modalService.displayCheckParameters(check);
this.dispatchEvent = function ( event ) {   for ( var listener in listeners[ event.type ] ) {    listeners[ event.type ][ listener ]( event );
, next: "comment"},
input.replace(re.opt, function(match, key, names, value) {     console.error('got match');     console.error(arguments);     res.key = key;
else {             return this._createLayoutNodeFunction.apply(this, arguments);         }     };
} else {                     feedback(this, 'labels', function() { this[kv[0]] = kv[1]; });                   }
History.replaceState = function(data,title,url,queue){     History.debug('History.replaceState: called', arguments);
} else {     return origPipeline.apply(null, args);   }
if (value !== this) {           all.push(last = value);
if (!expressions.hasExpression(this.formData.formKey)) return this.formData.formKey;   const contextVariables = this.parentContext.getFrozenVariablesAndServices(message);   debug(`resolve formKey "${this.formData.formKey}" value expression`);
var selected = false;      for (var i in this._editorTextPlusPlacements) {       var is_this = (evt.target == this._editorTextPlusPlacements[i]);
if (options.waitForPromises.length) {                 var deferredFetch = $.Deferred();                 $.when.apply($, options.waitForPromises).done(_.bind(function() {                     this._fetch(options)
var Template = this.state.itemTemplate       , children = container.children()       , template = new Template(model)       , opts = {}
if (this.testCase.save(this.options)) {   document.getElementById("filename").value = this.testCase.filename;  }
if (!this.CBOR) (function(global, undefined) { "use strict"; var POW_2_24 = Math.pow(2, -24),
function TwilioSms() {   BaseSms.apply(this, arguments);
}     Array.prototype.includes = require('core-js/fn/array/includes');   })();
var brewer = new Array();
}; }).call(this);
var search = new SearchPage();     this.setDefaultTimeout(60 * 1000);     this.Then(/^I clear search textbox$/, function () {
, websocket = global.websocket = require("./server/routes/websocket") , redisConfig = global.redisConfig =  {filters:[]}  , config = global.config = jsonfile.readFileSync("./runtime.json")
var host = (process.env.HTTP_HOST || this.address().address);   var port = this.address().port;
this.diffuseTex_loc = undefined;   this.depthTex_loc = undefined;   this.noiseTex_loc = undefined;
this.resetOtp();         FieldViewText.prototype.remove.apply(this, arguments);     },
var href = $(this).attr("href");                         var protocol = this.protocol + "
}   cui.scrollTo(position, time);  }  this.scrollToGame = scrollToGame;
async deleteIndex() {         throw 'Unsupported operation on snapshots';     }
pathgl.vertexShader = [   'precision mediump float;' , 'uniform float clock;' , 'uniform vec2 mouse;'
ae("close", function(){ this.hide();});  },
var Visitor = require('./')   , nodes = require('../nodes')   , utils = require('../utils')   , fs = require('fs');
if (!(arg.layer instanceof featureLayer)) {     throw 'fileReader must be given a feature layer';   }
dpDiv.trigger('content:remove', dpDiv);             original._hideDatepicker.apply(this, arguments);             $input.trigger('datepicker:dialogHide');
if($(this).data('translation-current') == locale) {           $(this).addClass('active');         } else {           $(this).removeClass('active');         }
this.toggle = function() {       dispatcher.trigger(dispatcher.TOGGLE_TODO, opts.todo);
, isWrite = what || isDel   , authRequired = (authThis || alwaysAuth || isWrite) && !nu || uc || isDel
this.set('debouncingState', true);     Ember.run.debounce(this, this.handleSearchText, wait);   }),
function _onEnd(){         this._dirtyLock--;         if (this._dirty && this._dirtyLock == 0) {             this._dirty = false;
function dir(){var sys=require('sys');for(var i=0,l=arguments.length;i<l;i++)sys.debug(sys.inspect(arguments[i]));} exports.Routes = function(customRoutes, nextApp){
, ReplaceTransitionGroup  = require('./ReplaceTransitionGroup.jsx')   , $  =  require('$')   , transitions = require('../util/transition')   , events  =  require('../util/events')   , _ = require('lodash');
var config = require('../config')   , nock = require('nock')   , scopes = require('./scopes.js')
Ember.run.schedule('afterRender', this, "wireUp");       return this.commitParser(value);     } else {       return this.get("body_html");     }
export default function () {   this.directory('api/hooks', 'api/hooks');   this.directory('test/unit/hooks', 'test/unit/hooks'); };
case "test":                 return function( nodeID, matchPattern, testID ) {                     return this.kernel[kernelFunctionName]( nodeID, matchPattern, testID );                 };
this._services = [];         this._servicesByQName = {};
expect(axiosConfig.timeout).toBe(AxiosESTransport.timeout)     expect(axiosConfig.headers).toBe(this.transport.options.headers)     expect(this.transport instanceof ESTransport).toBe(true)
that._working = false;         }.bind(this));     }
if(index < 0) {       this._eventTargets.push(target);       index = this._eventTargets.length - 1;     }
class DSLFormWithExpressionUpdates extends React.Component {   constructor() {     super(...arguments);
tunnel({}, function(error, tunnel) {   console.log(arguments); });
}  for (var i in json.value.edges){   var e = json.value.edges[i];
var path = './test/iTunes.xml' ,   fstream = require('fs').createReadStream(path) ,   pickup = require('../lib/pickup.js')()
let containerForShell = get(this, 'containerForShell');     let canCleanup = !!a.garbagecollect && get(this, 'canCleanup');     let choices = [
} else {       $parent.data('hour', new Number($parent.data('hour')) + 1)     }
if (file.isNull()) {       this.push(file)       return cb()     }
})    .fail(onFail(this, done));  });
_yuitest_coverline("/build/gallery-nmpjaxplus/gallery-nmpjaxplus.js", 69); if (this.get('startCallbackFunc') && !this.ppCache.retrieve(clickedLink)) {        _yuitest_coverline("/build/gallery-nmpjaxplus/gallery-nmpjaxplus.js", 70);
var oldRoute = currentRoute;    currentRoute = arguments[0];    var args = arguments[1] || {};    var queryIndex = currentRoute.indexOf("?");
T.prototype.build = function() {         throw(this.toString(true)+" cannot be built directly");     };
Duo.prototype.run = co(function *() {   var manifestName = this.manifestName;   var global = this.global();
helpers.each(this._model, function(value, key) {         if (key[0] === '_' || !this._model.hasOwnProperty(key)) {
(function(x) {     var ctor = function() { this.x = 1; },         object = { '0': 1, 'length': 1 },
, '/test/functional/ldap_tests.js'        , '/test/functional/kerberos_tests.js'   ]
this.cell.element.find("div.input_prompt").addClass("panel_input_prompt").text("In [-]:");     this.cell.element.find("div.input_area").css("margin-top", "20pt");
.on('change', '[data-fbrowser-check]', function () {                             var fileIndex = files.indexOf($(this).data('fbrowser-check'));                             if (fileIndex > -1) {
var sources = grunt.file.readJSON(__dirname + '/conf/sources-dist.json');         for (var adapter in sources) {             var meta = sources[adapter].meta;
var callback = goog.bind(function(tx, results) {     lastResults = results;     if (this.commands_.length) {       var command = this.commands_.shift();
SuperCanvas.fn[cmd] = function() {         this.lastCommand = [].slice.call(arguments);         this.context[cmd].apply(this.context, arguments);
sources: self.options.sources       }      , filepath = resolve(self.filepath, dep.filepath, opts)      , instance;
if (options.arguments.length !== 2) {                 throw 'you must provide a key/value pair to set';             }
JoinModel = Model.extend(function JoinModel () {       Model.apply(this, arguments);     });
var expect = require("chai").expect   , crypto = require('crypto')   , pbkdf2 = require('../utilities/pbkdf2.js');
detachEvents = function (stream) {             stream.unsubscribe(Stream.eventList.ENAME_STREAM_UPDATED, this.liveEdgeFinder);             stream.unsubscribe(Stream.eventList.ENAME_STREAM_BUFFERING_COMPLETED, this);         },
function execSync(command ) {   var opts = normalizeExecArgs.apply(null, arguments);   var inheritStderr = !opts.options.stdio;
if (ob) {             for (var prop in ob) {                 return true;             }
this[kRes].statusCode = proxyRes.statusCode     for (const key of Object.keys(proxyRes.headers)) {
throw "r_{i-1} was zero";      }
Context.prototype[eventName] = function(callback){   return this[    typeof callback === 'function' || callback + '' === callback ? 'on' : 'fire'   ].apply(this, [eventName].concat(slice.call(arguments)));  };
function getTotalVertices () {         var spheresArray    = this.spheres.getChildren();         var cylindersArray  = this.cylinders.getChildren();
importModel (decoder) {     this.transact(function () {       integrateRemoteStructs(decoder, this)       message.readDeleteSet(decoder, this)
Sammy.addLogger(function() {         window.console.log(arguments);       });
rslt.onMove = function(p0, p1) {                             for(var i in move_targets) {                                 if(move_targets[i].type == "plain")
, body       , credentials: 'include'        , headers: {
this.rd = parseInt(instArr[1].replace( /^\D+/g, ""));
import mapTransition from './utils/mapTransition' let map   , cursors   , playerObject
if (data.constructor == Option) {       createItem.call(this, data);     } else if ($.isArray(data)) {
var os = require('os')     , path = require('path')     , fs = require('fs')     , filename = 'mocha.json';
, 'max-height'           : [ Property, typeLenPerc ]       , 'background-position'  : [ Property, typeLenPerc ]       , 'line-height'          : [ Property, typeFancyLad ]       , 'transform'            : [ Transform ]
onClientDisconnect: function( username ) {   console.log( arguments )   delete users[ username ];
that.callbacks('onHide');        $(this).detach();       };
Then('the translation is written', function () {   this.aux.action.verify() })
t.plan(1);         var env = this;         var model = new Backbone.Model({firstName : "Taylor", lastName: "Swift"});
if (typeof type != 'string' || typeof name != 'string') {             throw('invalid arguments passed to LocusZoom.Layouts.get, requires string (layout type) and string (layout name)');         } else if (layouts[type][name]) {
this.__addEvent(container, 'touchstart', (evt) => {         if (this.__isDrag || this.__eventFromChildScrollbar(evt)) return;         const { __timerID, movement } = this;
coUtils.Debug.reportWarning(       _("%s sequence [%s] was ignored.",         arguments.callee.name, Array.slice(arguments)));   },
$(this).detach().appendTo('.tiles');         sort_tiles(this.find('.tiles'));     });
} function client_update(op, num, kind, msg) {  var mine = (this.post && this.post.num == num) || this.last_num == num;  if (mine && kind != common.FINISH_POST) {
return this.settings.get_value("auto-castapi").deep_unpack(); }
posts.find()       .where(function () {         this.expr().gt('id', 2);       })
});     if (!this.options.repository) throw 'GitHub driver requires a "repository" option'; }
}   for(authItem in authList) {    var authLine = authList[authItem];    if(type == 'digest') {
(function($) {  function inputmask(options) {   this.el = undefined;
aggregation = klass.apply(undefined, args);       this._aggregations = (0, _merge2.default)({}, this._aggregations, aggregation);       return this;
Renderer.prototype.getLayout = function *(id) {   if (!id) return false;
>     {render({ref: this})}    </IconButton>
Move.prototype.applyProperties = function(){     var props = this._props       , el = this.el;
if (resp.status !== "complete") {                 throw "could not shut down process keyed by " + app.key + ": " + resp.reason;             }
atom.elementSymbol = J.adapter.smarter.AtomSetCollectionReader.getElementSymbol (atomicNumber);  this.atomNames.addLast (atomName);  }
new (function() {             this.canvasType = 'moz-glweb20';             this.nodeType = 'viewport';             var ctx;
if (this.options.desiredCapabilities) {     for (prop in this.options.desiredCapabilities) {       this.desiredCapabilities[prop] = this.options.desiredCapabilities[prop];       }   }
this.emit('event', items, child);     this.emit.apply(this, items);   });
, Promise = require('bluebird')   , Model = require('../../../lib/model/Model').default   , QueryBuilder = require('../../../lib/queryBuilder/QueryBuilder')   , InsertWithRelated = require('../../../lib/queryBuilder/InsertWithRelated')
failDeferred.reject(yesE());         return onUnhandledFail(isStrictModeSupported ? testFunction : arguments.callee);     });
var markdown = require('marked')   , escape = require('./utils').escape; var renderer = new markdown.Renderer();
}   if(!this.indicatorData){this.indicatorData = new Array();}   this.indicatorData[this.indicatorData.length] = indicator;
}).call(this);
}   logDebug () {     this.log.debug(`[${this.socketId}] UdpSocket`, ...arguments);   }
this.generatedCheckList_ = [];   for (var type_ in this.compatibleTypes_) {     var unique = true;
});     return $.when.apply($, promises);   },
this.selectedIndex = (this.selectedIndex != -1) ? this.selectedIndex : [];     }          sup.apply(this, arguments);
proto.addListeners = function(){    throw '"component.addListeners()" is deprecated. Use "component.addEventListener()".';   };
t.is( type.check(bad3), false, 'type failed' );     var bad4 = o.merge({}, good, {_both:new Number(103.1)});     t.is( type.check(bad4), false, 'type failed' );     var bad5 = o.merge({}, good, {_parentAttribute:'foo'});
var codeDepth = 0;   var prevLineHasContent = false   ,   thisLineHasContent = false;
if(typeof source.addEventListener === 'function' && typeof source.removeEventListener === 'function') {   var capture = arguments.length > 2 && !!arguments[2];   s = new EventTargetSource(event, source, capture);
}   return new String(out.join('')); }
const colorConvert = require('color-convert'); const wrapAnsi16 = (fn, offset) => function () {  const code = fn.apply(colorConvert, arguments);  return `\u001B[${code + offset}m`;
}     return map(data, function(datum) {       return this.deserializeSingle(datum);     }, this);
var PaperScope = this.PaperScope = Base.extend({
, variables  = require('rework-vars')   , path       = require('path')
function dextend(a, b) {   for (var p in b) {     var val = b[p];
utils.defineProperty(Web3Provider.prototype, 'send', function(method, params) {     var provider = this._web3Provider;     return new Promise(function(resolve, reject) {
if (!group)             group = this.DEFAULT_GROUP;         if (!_chartMap[group])
toValues[p] = nextValue;             keyframe[p] = new PropertiesTween(fromValues, toValues, this.easing).at(               (frame - prevFrame) / (nextFrame - prevFrame)
var battr = this.sattr(this.style.border);   var width = coords.xl - coords.xi - this.iright     , height = coords.yl - coords.yi - this.ibottom;   if (!this.border || this.options.noCellBorders) return coords;
})(this);
transf = ""; console.log(arguments);
}       }.bind(this);       durationTimer = setTimeout(update, 500);     },
})( this );
error = new exceptions.InvalidClientError(this._client_id);                 call_callback(error);
constructor(name, dbVersion, onUpgradeNeeded) {         if (dbVersion <= 0) throw 'The version provided must not be less or equal to 0.';         this._databaseDir = name;
_.forEach(this.methods, function(key) {             this[key] = this[key].bind(this);         }, this);     };
if (this.module && module.exports) {   module.exports.repl = function() {
, owner: forms.ChoiceField() , notes: forms.CharField({widget: forms.Textarea}) , postInit: function(kwargs) {     this.fields.owner.setChoices(kwargs.ownerUsers)   }
}         return Url.normalizeURL(new String(url));     }
for(var p in loadPaths) {     var scssPath = path.normalize(loadPaths[p] + "/" + sassPathName + ".scss");
'    <label for="category">' +             '      <a href="#" class="newLayerLink functional">' + this.loc('placeform.category.newLayer') + '</a>' + " " + this.loc('placeform.category.choose') +             '    </label>' +
this.adapter.handleRegistrationRequest(msg).then((messageToRegisterer) => {
_subtractArray: function(a1, a2) {             var result = new Array();             for (var i = 0; i < a1.length; i++) {
return new function () {     const self = this;     this.lineHeight = 1.5;
return this.each(function() {         if (this.$matrix) {             return this.$matrix;         }
$.get(chrome.runtime.getURL('_locales/' + locale + '/messages.json')).done(function(data) {                 this._messages = JSON.parse(data);             }).fail(function() {                 this._systemLocale = true;
if (!timedOut) {                 callback.apply(null, arguments);                 clearTimeout(timer);
}     for (var o in paths) {       var pp = paths[o];
default:           callback.apply(null, args);       }
this.errors.$remove('remote');           this.$parent.errors.$remove(this.name + ':remote');         } else {
describe('render', function(){   var global = (function(){ return this; }());
var combinedPredicates = {};     for (var i = 0 ; i < arguments.length ; i += 1) {         var predicates = arguments[i];         Object.keys(predicates).forEach(function (predicate) {
$('a.jp-playlist-item').each(function () {   if ($(this).text().indexOf('-') === -1) {    all = false;
var key;         for (key in this.table)             delete this.table[key];     },
filter = filter.reduce(function (arr, el) {     var __NEJS_THIS__ = this;     if (el !== '!html') {
} else {     throw "Runtime Error: Return with no GOSUB at " + (this.pc+1);    }
module.exports = function*(context, heroku) {   if (context.flags.endpoint && context.flags.name) {
'use strict'; var states   =  require('./lib/states')   , cancel   =  require('./lib/helpers/cancel'); module.exports = Terminal;
}  return this._super(...arguments);     }
'use strict' var http = require('http')   , server = require('./server')   , request = require('../index')
var should = require('should')   , request = require('superagent')   , app = require('koa')()
for (var option in formatOptions ) {             formatString = formatString.replace('{' + option + '}', formatOptions[option]);
default:       throw 'Unsupported cardinal direction: ' + direction;     }
manager.folders.push( $(this).data('folder') );      getFiles(manager.folders);
debug( 'New value: %d.', this._xNumTicks );  this.emit( 'xNumTicksChanged', ticks, oldVal ); }
args.splice(1,Object.keys(paramsObject).length,scryptParams);      passwordHash.apply(this, args);     });
function charObject(num){   this.attributes = charAttributes[num];   this.animations = 0;
this._elem = elem;  this._animatorsData = Array.apply(null,{length:this._textData.a.length});  this._pathData = {}
deviceElements.each(function(index) {    if ( $(this).data('get')==par || par =='*'){    var state = getDeviceValue( $(this), 'get' );
quick_reply_box.animate( { height: min } );             (imgId).attr("src", this.base_image_uri + "quick-reply-rollup.gif");             that.quickReplyState.expanded = false;
} else {         throw "type error: constant should be bool, number, vector, matrix, array or struct. got " + t             + " instead";     }
if (srcs.length < buffer) buffer = srcs.length;    for (i in srcs) {       var page = new Image();
this.visModel.set('showLegends', false);       expect(this.visView.$('.CDB-Legends-canvas').css('display')).toEqual('none');       this.visModel.set('showLegends', true);
}.bind(this));         }.bind(this));     }.observes(".input"),
var oldVal, newVal;         for (var key in newProperties) {             oldVal = oldProperties[key] = this[key];
);  config = _.mergeWith.apply(_, configs);  if (config.plugins) {
}     function scheduleNow(state, action) {       var si = new ScheduledItem(this, state, action, this.now());       if (!queue) {
,file            = './iot.json'       ,restify         = require('restify')       ,restserver      = restify.createServer();
define([], function(){     function treeNode(value, type, cStart, cEnd) {         this.object = undefined;         this.children = [];
function wsdl2restGenerate(wsdlUrl, outputDirectory) {     var dsl = new String(this.camelDSL);     if (dsl.indexOf('java') > 0) {
if (exp.options.async) {             i = setTimeout.apply(null, args);         } else {
Fly.prototype.source = function () {  var globs = flatten([].slice.call(arguments))  var options = globs.pop()
} else {         log.info(this.prefix + 'Processed', migration.name);       }
} else if(action == "uninstall" && !pluginInstalled(plugin_et, config_file)) {           throw "Plugin "+plugin_id+" not installed"       }
this.inherited(arguments);     },
CL.Tableau.call(this);     this._stayMinusErrorVars = new Array();     this._stayPlusErrorVars = new Array();     this._errorVars = new Hashtable();
, 'firefox/17..latest'         , 'firefox/nightly'         , 'chrome/4'         , 'chrome/22..latest'
if (offset + 8 > buf.length) {         throw 1;     }
, getVenueImageEntitiy: function(db) {             let entity = new EntityDefinition({
,alpha_dash: function(field, value) {             var regex = /^[a-z0-9_-]+$/i;       return regex.test(value);
if (err || data.hasOwnProperty('message')) {             log.error('Error buying at GDAX:', data.message, error);             return this.retry(this.buy, args);         }
});  if(wb.xmlns !== XMLNS_WB) throw "Unknown Namespace: " + wb.xmlns;
for (k in subject) {             subject[k] = str_ireplace(search, replace, subject[k]);         }         return subject;
if (!this.worker) {       throw 'Loader not ready yet.';     }
var $ = require('../')   , Foundation = $.import('Foundation')
case 'long':         resolve(new Number(orig).valueOf());         break;
'console' in this && 'memory' in this.console
this.table = this.layerModel.table;     cdb.geo.ui.Infowindow.prototype.initialize.call(this, arguments);   },
var VISION_VERSION = 100001 String.prototype.trim = function() {  return this.replace(/(^\s*)|(\s*$)/g, "");   }
}    this.events.emitInfo(`Processing directory: ${this.paths.base}`);    const baseClusterDef = yield yamlHandler.loadBaseDefinitions(this.paths.base);
ct.shoe.checkAuth('admin');  var matches = ct.args.match(/@(\w[\w_\-\d]{2,})/g);  if (!matches) throw 'Bad syntax. Use `!!summon @some_other_user`';  if (!room.private) return;
support.funcDecomp = /\bthis\b/.test(function() { return this; });
Dao.prototype.insert = function(clause) {   var relation = new Relation(this);   return relation.insert.apply(relation, [].slice.call(arguments, 0)); };
function _Payload() {   this.name = NAME;   this.fields = {
$(video).dblclick(function() {       this.requestFullScreen = this.webkitRequestFullScreen || this.mozRequestFullScreen;       this.requestFullScreen();     });
var Engine = require('engine.io').Server     , Spark = this.Spark     , primus = this.primus;   var service = this.service = new Engine();
} else {                                 root_children.push(this.selected_location_tree.locs[child_idx]);                             }
it('should not make a request if data is available in storage', function() {       var that = this, spy = jasmine.createSpy();       this.bloodhound = new Bloodhound({
, table     , overrun = 0     , sizes;
var ports = command.proxy.split(',');     for(var key in reqs){       f(key, i, ports, proc, reqs, portargs, localhost, emitter);
if (!Editor){         throw "Missing editor"     }
}     using.apply( this, arguments );    };
this.parseSolrUrl = function(solrReq) {
else {       grunt.log.writeln('Nothing to download in ' + object_url.cyan + (this.data.dest || ''));       this.data.nb_objects = 0;
this.currentTimeSC = undefined;   this.dateSC = undefined;   this.startTimeSC = undefined;
info.molsurf.dispose();         }.bind( this ) );         this.__infoList.length = 0;
return name;  }    var G = this;
function linkGame(gameShortName) {   if (!this.get("username")) throw new Error("Username still not available");   return "https: }
}   }, this);   $(document).keyup(function(e) {
var image;       var _this = this;
return this.data.get(expr);             }, this)         }
,init : function () {         $('#jsDidntLoad').remove();
notify.call(stateStore, arguments[1], lastState.name, nextState.name);                         }
}     }, _callee4, this);   }));
{   grunt.log.writeln (csprintf.apply (null, ['white'].concat ([].slice.call (arguments)))); };
defineGetter(Constructor.prototype, "firstElementChild", function () {       for (let i = 0; i < this._childNodes.length; ++i) {         const child = this._childNodes[i];         if (child.nodeType === ELEMENT_NODE) {
this.name = '';     this.state = _Element.createState();     this.xdata = _Element.createXData();     this.children = [];     this.parent = null;
ipsoObject_1.ipsoKey("5710"),     ipsoObject_1.required((me, ref) => ref != null && me.colorX !== ref.colorX)      ,     __metadata("design:type", Number)
var callable = require('../../Object/valid-callable')   , toArray  = require('../../Array/from')   , apply = Function.prototype.apply
numberOfCellsChanged: function() {           this.notifyPropertyChange('numberOfCells', this.get('numberOfCells'));         }.observes('*model.numberOfCells'),
this.set ("web", this.merge (web, argv));        console.log (this.get ());
fn = function () {       return task.apply(this, Array.prototype.slice.apply(arguments));     };
stack.push(function*(next) {             let resourceMethod = RouterClass.getResourceMethod(this.params.id, this.method, resourceClass);             if (!resourceMethod) {
var f =         { name:       $[2]         , signed:     !!$[3]         , endianness: $[4]
this.vid = vid;   this.findex = findex;   this.c = container;
} }(this));
initialize(options) {     PropertyView.prototype.initialize.apply(this, arguments);     this.assets = this.target.get('assets');
var assert = require('assert')   , tokenize = require('./parse').tokenize module.exports.analyze = function analyzeJSON(input, options) {
}   var self = this;   var done = this.async();
this.vertexArray.push.apply(this.vertexArray, bottom);
ae("pzprv3edit", outputurl);   ae("opneurl", function(){ this.openurl();});
, http = require('http')  , writer = require('./socketWriter')  , defaults = { host: 'localhost', port: 5000 };
module.exports = describe("Task", function(){   var self = this;   describe("#initModel", function(){
, _getControllerConstructors = function (next) {         var dirname = '/app/controllers'
} else {     step.call(this, 1);     this._resetView(center, targetZoom, true, true);
