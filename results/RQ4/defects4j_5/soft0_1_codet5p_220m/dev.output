public int translate(CharSequence input, int index, Writer out) throws IOExcepti                  return 0;              }                  out.write(entityValue);              return 2 + (end - start) + (isHex? 1 : 0) + 1;          }          return 0;
protected final double doSolve() {                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x2) {                         x0 = 0.5 * (x0 + x2 - FastMath.max(rtol * FastMath.abs(x2), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x3) {                         x0 = 0.5 * (x0 + x3 - FastMath.max(rtol * FastMath.abs(x3), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x4) {                         x0 = 0.5 * (x0 + x4 - FastMath.max(rtol * FastMath.abs(x4), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x5) {                         x0 = 0.5 * (x0 + x5 - FastMath.max(rtol * FastMath.abs(x5), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x6) {                         x0 = 0.5 * (x0 + x6 - FastMath.max(rtol * FastMath.abs(x6), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x7) {                         x0 = 0.5 * (x0 + x7 - FastMath.max(rtol * FastMath.abs(x7), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x8) {                         x0 = 0.5 * (x0
public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);          primitiveValues.put(double.class, 0);       }   }
public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {          super(chromosomes, populationLimit);         this.elitismRate = elitismRate;
private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   }
public long addWrapField(long instant, int value) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.addWrapField(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false);              }          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);             long result = iZone.convertLocalToUTC(localInstant, false);              if (get(result)!= value) {                  throw new IllegalFieldValueException(iField.getType(), new Integer(value),                      "Illegal instant due to time zone offset transition: " + iField.getType();              }          }          public long addWrapField(long instant, int value) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.addWrapField(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false);              }          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);             long result = iZone.convertLocalToUTC(localInstant, false);              if (get(result)!= value) {                  throw new IllegalFieldValueException(iField.getType(), new Integer(value),                      "Illegal instant due to time zone offset transition: " + iField.getType();              }          }          public long addWrapField(long instant, int value) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.addWrapField(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false);              }          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);             long result = iZone.convertLocalToUTC(localInstant, false);              if (get(result)!= value) {                  throw new IllegalFieldValueException(iField.getType(), new Integer(value),
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {              if (iPrefix!= null) {                  iPrefix.printTo(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 2) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 3) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 4) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 5) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 6) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 7) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 8) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 9) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 10) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 11) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 12) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 13) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 14) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 15) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 16) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 17) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 18) {                  FormatUtils.appendUnpaddedInteger(buf, value);              }              if (minDigits <= 19) {
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset == 0 && minutesOffset == 0) {              return DateTimeZone.UTC;          }          if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);              if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);              }              offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);          } catch (ArithmeticException ex) {
public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str;
public Week(Date time) {       */ public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, Locale zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time, TimeZone zone) {          this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());       }       /** public Week(Date time,
private void unrollBinaryOperator(    static boolean isSimpleNumber(String s) {      int len = s.length();      for (int index = 0; index < len; index++) {        char c = s.charAt(index);        if (c < '0' || c > '9') {          return false;      }      }     return len > 0 && s.charAt(0)!= '0';    }
public static String formatPeriod(long startMillis, long endMillis, String forma              days -= 1;          }          while (days < 0) {             days += 31;              months -= 1;          }          while (months < 0) {              months += 12;              years -= 1;          }         milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);         seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);         hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);         days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);         months -= reduceAndCorrect(start, end, Calendar.MONTH, months);         years -= reduceAndCorrect(start, end, Calendar.YEAR, years);
public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++;
protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0;
public void setWeekOfWeekyear(final int weekOfWeekyear) {       * @throws IllegalArgumentException if the value is invalid       */ public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      }
protected VectorialPointValuePair doOptimize()                      if (s!= 0) {                          double sum = 0;                          for (int i = 0; i <= j; ++i) {                             sum += jacobian[i][pj] * residuals[i];                          }                          maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                      }
JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;      }
protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */         protected BasePeriod(long duration) {         this(duration, null, null);      }      /** protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */         protected BasePeriod(long duration) {         this(duration, null, null);      }      /** protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */         protected BasePeriod(long duration) {         this(duration, null, null);      }      /** protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */         protected BasePeriod(long duration) {         this(duration, null, null);      }      /** protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */         protected BasePeriod(long duration) {         this(duration, null, null);      }      /** protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */         protected BasePeriod(long duration) {         this(duration, null, null);      }      /** protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */         protected BasePeriod(long duration) {         this(duration, null, null);      }      /** protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */         protected BasePeriod(long duration) {         this(duration, null, null);      }      /** protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */         protected BasePeriod(long duration) {         this(duration, null, null);      }      /** protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */         protected BasePeriod(long duration) {         this(duration, null, null);      }      /** protected BasePeriod(ReadableDuration duration, ReadableInstant
private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()     */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()     */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()     */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()     */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()     */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()     */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>()
public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset!= null) {               return result;           }           int seriesCount = dataset.getRowCount();
public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      }
public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      }
public int indexOf(String str, int startIndex) {              return -1;          }          char[] thisBuf = buffer;         int len = thisBuf.length - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {
Node parseInputs() {        boolean staleInputs = false;       if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {
private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(returnTypeGenericMetadata),                   container           );       }
private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean no          int size = elementPairs.size();          if (size >= 2 && elementPairs.get(0) instanceof Separator) {              Separator sep = (Separator) elementPairs.get(0);                  PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);                  sep = sep.finish(f.getPrinter(), f.getParser());                  return new PeriodFormatter(sep, sep);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {
public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {          return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&                  cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&                  cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&                 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&                  cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&                  cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;         case Token.IN:          return true;         }         return false;     }      private static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;         case Token.IN:          return true;         }         return false;     }      private static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;         case Token.IN:          return true;         }         return false;     }      private static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;         case Token.IN:          return true;         }         return false;     }      private static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;         case Token.IN:          return true;         }         return false;     }      private static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;         case Token.IN:          return true;         }         return false;     }      private static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;         case Token.IN:          return true;         }         return false;     }      private static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;         case Token.IN:          return true;         }         return false;     }      private static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;         case Token.IN:          return true;         }         return false;     }      private static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:
private double localMax(boolean isMinim,          double w = x;          double d = 0;          double e = 0;         double fx = computeObjectiveValue(f, x);         if (goalType == GoalType.MAXIMIZE) {              fx = -fx;          }          double fv = fx;          double fw = fx;         int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = 2 * tol1;
public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC:                  isSet = true;                  type = Name.Type.FUNCTION;                  break;                 case Token.INC:                case Token.DEC
private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)            && n.getType() == Token.GETPROP           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP;
Node processArrayLiteral(ArrayLiteral literalNode) {      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }
private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right!= null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;      }      }
private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;        private final String aliasName;     AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;        this.aliasName = aliasName;      }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }    }
protected void dropPhase1Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          }
public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { } public class Timer { }
private boolean shouldReportThis(Node n, Node parent) {      }     return false;    /**
private Node parseFunctionType(JsDocToken token) {      if (token!= JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");      }
public Complex divide(Complex divisor)          throws NullArgumentException {          MathUtils.checkNotNull(divisor);          if (isNaN || divisor.isNaN) {              return NaN;          }         if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {             return NaN;          }          if (divisor.isInfinite() &&!isInfinite()) {              return ZERO;          }          final double c = divisor.getReal();          final double d = divisor.getImaginary();          if (FastMath.abs(c) < FastMath.abs(d)) {              double q = c / d;              double denominator = c * q + d;              return createComplex((real * q + imaginary) / denominator,                  (imaginary * q - real) / denominator);          } else {              double q = d / c;              double denominator = d * q + c;              return createComplex((imaginary * q + real) / denominator,                  (imaginary - real * q);          }      }            public Complex divide(double divisor) {          if (isNaN || Double.isNaN(divisor)) {              return NaN;          }          if (divisor == 0d) {             return NaN;          }          if (Double.isInfinite(divisor)) {              return!isInfinite()? ZERO : NaN;          }          return createComplex(real / divisor,                               imaginary  / divisor);      }      public Complex conjugate() {          public Complex divide(Complex divisor)          throws NullArgumentException {          MathUtils.checkNotNull(divisor);          if (isNaN || divisor.isNaN) {              return NaN;          }         if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {             return NaN;          }          if (divisor.isInfinite() &&!isInfinite()) {              return ZERO;          }          final double c = divisor.getReal();          final double d = divisor.getImaginary();          if (FastMath.abs(c) < FastMath.abs(d)) {              double q = c / d;              double denominator = c * q + d;              return createComplex((real * q + imaginary) / denominator,                  (imaginary * q - real) / denominator);          } else {
protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return;              }
public double getChiSquare(EstimationProblem problem)        throws EstimationException {          int m = problem.getMeasurements().length;         int p = problem.getAllParameters().length;          if (m <= p) {              throw new EstimationException("no degrees of freedom ({0} measurements, {1} parameters)",                                            new Object[] { new Integer(m), new Integer(p)});          }         double[] errors = new double[problem.getAllParameters().length];          final double c = Math.sqrt(getChiSquare(problem) / (m - p));          double[][] covar = getCovariances(problem);          for (int i = 0; i < errors.length; ++i) {
public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall()  + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           }
public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER; } else {              cutoverInstant = gregorianCutover.toInstant();          }
private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                   return mock;               }
public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          }
public boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb >= ga; private boolean evaluateStep(final StepInterpolator interpolator)                      increasing = gb
private void visitGetProp(NodeTraversal t, Node n, Node parent) {      if (childType.isDict()) {        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");     } else if (n.getJSType()!= null && parent.isAssign()) {       return;      } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE)); {        checkPropertyAccess(childType, property.getString(), t, n);
private static int greatestCommonDivisor(int u, int v) {         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {              return 1;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 2;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 3;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 4;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 5;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 6;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 7;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 8;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 9;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 10;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 11;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 12;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 13;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 14;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 15;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 16;          } else if (Math.abs(u) == 1 && Math.abs(v) == 1) {              return 17;          } else if (Math.abs(u) == 1 && Math.abs(v)
static void register(Object value) {       * @since 2.3       */ static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(new IDKey(value));      }      /** @since 2.3       */ static void register(Object value) {         getRegistry().remove(
private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x = OriginalMapping.newBuilder()         .setOriginalFile(sources[entry.getSourceFileId()])        .setLineNumber(entry.getSourceLine())        .setColumnPosition(entry.getSourceColumn());        if (entry.getNameId()!= UNMAPPED) {          x.setIdentifier(names[entry.getNameId()]);        }
private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0;      @Override      public void visit(NodeTraversal t, Node n, Node parent) {
private void inlineNonConstants(        if (!maybeModifiedArguments &&           !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&           referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references;          for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode();
void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when we're done.       */    }  }
public void captureArgumentsFrom(Invocation invocation) {                      ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                  }              }             for (int position = indexOfVararg; position < matchers.size(); position++) {                 Matcher m = matchers.get(position);                  if (m instanceof CapturesArguments) {                     ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                  }              }          } else {
public static double sinh(double x) {                 if (x > 20) {                return 0.5 * exp(-x);            }       if (x < -20) {                return -0.5 * exp(-x);        }        if (x == 0) {                     return 0.5 * sinh(x);                 } else {                     return -0.5 * sinh(x);                 }         }          public static double cosh(double x) {                 if (x > 20) {                return 0.5 * exp(x);            }       if (x < -20) {                return -0.5 * exp(-x);        }        if (x == 0) {                     return 0.5 * cosh(x);                 } else {                     return -0.5 * cosh(x);                 }         }          public static double sinh(double x) {                 if (x > 20) {                return 0.5 * exp(-x);            }       if (x < -20) {                return -0.5 * exp(-x);        }        if (x == 0) {                     return 0.5 * sinh(x);                 } else {                     return -0.5 * sinh(x);                 }         }          public static double cosh(double x) {                 if (x > 20) {                return 0.5 * exp(-x);            }       if (x < -20) {                return -0.5 * exp(-x);        }        if (x == 0) {                     return 0.5 * cosh(x);                 } else {                     return -0.5 * cosh(x);                 }         }          public static double sinh(double x) {                 if (x > 20) {                return 0.5 * exp(-x);            }       if (x < -20) {                return -0.5 * exp(-x);        }        if (x == 0) {                     return 0.5 * sinh(x);                 } else {                     return -0.5 * sinh(x);                 }         }          public static double cosh(double x) {
static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }    static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);     }     static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace
FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }
private Integer getPivotRow(final int col, final SimplexTableau tableau) {          for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio;
private void handleObjectLit(NodeTraversal t, Node n) {            child!= null;            child = child.getNext()) {          String name = child.getString();
private static void escapeJavaStyleString(Writer out, String str, boolean escape                          out.write('\\');                          out.write('/');                          break;                      case '\\' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write('/');                          break;                      case '/' :                              out.write('\\');                          out.write
static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3       */ static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** @since 2.3
protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);               }
boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,            "assignment to property " + propName + " of " +            getReadableJSTypeName(owner, true);       }        return false;
