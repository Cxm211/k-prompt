Namespace(log_name='./RQ5/bugsinpy_300_2/codet5p_770m.log', model_name='Salesforce/codet5p-770m', lang='python', output_dir='RQ5/bugsinpy_300_2/codet5p_770m', data_dir='./data/RQ5/bugsinpy_300_2', choice=0, no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=4, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=3)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'Wild         185.0          numeric_df = self._get_numeric_data()          cols = numeric_df.columns          idx = cols.copy()         mat = numeric_df.values          if notna(mat).all():              if min_periods is not None and min_periods > len(mat):                 baseCov = np.empty((mat.shape[1], mat.shape[1]))                 baseCov.fill(np.nan)              else:                 baseCov = np.cov(mat.T)             baseCov = baseCov.reshape((len(cols), len(cols)))          else:             baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=min_periods)         return self._constructor(baseCov, index=idx, columns=cols)      def corrwith(self, other, axis=0, drop=False, method="pearson") -> Series:', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': 'is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': 'Wild         185.0          numeric_df = self._get_numeric_data()          cols = numeric_df.columns          idx = cols.copy()         mat = numeric_df.astype(float, copy=False).to_numpy()          if notna(mat).all():              if min_periods is not None and min_periods > len(mat):                 base_cov = np.empty((mat.shape[1], mat.shape[1]))                 base_cov.fill(np.nan)              else:                 base_cov = np.cov(mat.T)             base_cov = base_cov.reshape((len(cols), len(cols)))          else:             base_cov = libalgos.nancorr(mat, cov=True, minp=min_periods)         return self._constructor(base_cov, index=idx, columns=cols)      def corrwith(self, other, axis=0, drop=False, method="pearson") -> Series:'}]
***** Running training *****
  Num examples = 300
  Batch size = 4
  Num epoch = 10

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 0
  eval_ppl = inf
  global_step = 76
  train_loss = 54.8423
  ********************
Previous best ppl:inf
Achieve Best ppl:inf
  ********************
BLEU file: ./data/RQ5/bugsinpy_300_2/validation.jsonl
  codebleu-4 = 75.07 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:75.07
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 1
  eval_ppl = inf
  global_step = 151
  train_loss = 28.8195
  ********************
Previous best ppl:inf
BLEU file: ./data/RQ5/bugsinpy_300_2/validation.jsonl
  codebleu-4 = 74.44 	 Previous best codebleu 75.07
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 2
  eval_ppl = inf
  global_step = 226
  train_loss = 15.2624
  ********************
Previous best ppl:inf
BLEU file: ./data/RQ5/bugsinpy_300_2/validation.jsonl
  codebleu-4 = 77.8 	 Previous best codebleu 75.07
  ********************
 Achieve Best bleu:77.8
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 3
  eval_ppl = inf
  global_step = 301
  train_loss = 8.9189
  ********************
Previous best ppl:inf
BLEU file: ./data/RQ5/bugsinpy_300_2/validation.jsonl
  codebleu-4 = 76.7 	 Previous best codebleu 77.8
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 4
  eval_ppl = inf
  global_step = 376
  train_loss = 5.323
  ********************
Previous best ppl:inf
BLEU file: ./data/RQ5/bugsinpy_300_2/validation.jsonl
  codebleu-4 = 77.32 	 Previous best codebleu 77.8
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 5
  eval_ppl = inf
  global_step = 451
  train_loss = 2.6538
  ********************
Previous best ppl:inf
BLEU file: ./data/RQ5/bugsinpy_300_2/validation.jsonl
  codebleu-4 = 76.18 	 Previous best codebleu 77.8
  ********************
early stopping!!!
reload model from RQ5/bugsinpy_300_2/codet5p_770m/checkpoint-best-bleu
BLEU file: ./data/RQ5/bugsinpy_300_2/test.jsonl
  codebleu = 75.88 
  Total = 117 
  Exact Fixed = 8 
[12, 13, 20, 58, 76, 82, 89, 110]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 117 
  Exact Fixed = 8 
[12, 13, 20, 58, 76, 82, 89, 110]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  codebleu = 75.88 
[0.6939112308588368, 0.676525822803221, 0.8096114788906146, 0.8962096929024133, 0.8782734899756608, 0.7420541780659815, 0.8611544762176193, 0.8754861943073293, 0.7549669674736412, 0.8736270526063763, 0.8773104352365284, 1.0, 1.0, 0.4740532618616287, 0.8923125000332248, 0.8631855387221548, 0.8573638305228279, 0.9474759345795825, 0.782053171927164, 1.0, 0.7545523782346959, 0.8884573785188872, 0.6883720951974961, 0.884250182279102, 0.7884485258508804, 0.5976301703621436, 0.6493367645086796, 0.7318286091585733, 0.7598461887588684, 0.9063467386633746, 0.8231560738418289, 0.8195330229945343, 0.8420603647239657, 0.8300638244826566, 0.8086254987195756, 0.7738279988463377, 0.610067068626702, 0.8965550427561362, 0.8703246706459902, 0.8434652034268404, 0.8358395384567638, 0.8834630241782442, 0.2813127919970617, 0.8789801838086921, 0.9178662308912058, 0.6441425627537012, 0.6728230800934798, 0.8871978499693505, 0.6936199831009335, 0.5218510181581382, 0.7803726620121474, 0.7042953619649426, 0.7953587603777192, 0.5750974938187585, 0.6508693332230462, 0.5968702149654105, 0.8475332565755729, 1.0, 0.47166395418323315, 0.1380865452966944, 0.8077895563342797, 0.6530224530296921, 0.26424709657432066, 0.9411542454583528, 0.6853803599169206, 0.9666856331752072, 0.6601281703247908, 0.9056583090096291, 0.8971695160234401, 0.8834124216164225, 0.8808919461147899, 0.6356257812621184, 0.8853004704636518, 0.8814955038434287, 0.3031200238102166, 0.8653356903807421, 0.8807926879441415, 0.6439391185600173, 0.49150427670545643, 0.8856389378075658, 0.7243849758480987, 1.0, 0.7714650156104186, 0.6296065997385977, 0.7332519354895861, 0.8052050509144788, 0.583933634540305, 0.7449734989717058, 0.9399649879642329, 0.860117164263619, 0.7531797171538064, 0.788050295413492, 0.39686614731832626, 0.7205089220380079, 0.8234479137638847, 0.9472873156881443, 0.8548397899287874, 0.6413921957402942, 0.8068413656728535, 0.9309470682699423, 0.8362747318435784, 0.4545507520171642, 0.8594942629236695, 0.9204219587780458, 0.7164493834577911, 0.5571314709024371, 0.13092302578213708, 0.7225931341121177, 0.5117566728908322, 1.0, 0.621240758456996, 0.7443181170763433, 0.9142445273649933, 0.7768711691119308, 0.7733604490538593, 0.7093853536262804, 0.7572098935987482]
Finish training and take 25m
