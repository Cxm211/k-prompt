mapInitialLoadInfo.put(name, recordStore.isLoaded());              }             Set<RecordReplicationInfo> recordSet = new HashSet<RecordReplicationInfo>();              for (Entry<Data, Record> recordEntry : recordStore.getReadonlyRecordMap().entrySet()) {                  Data key = recordEntry.getKey();                  Record record = recordEntry.getValue();
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler compiler) {
}      LOG.info("Loading image " + path);      DataInputStream imageIs = new DataInputStream(ufs.open(path));     JsonParser parser = JsonObject.createObjectMapper().getJsonFactory().createJsonParser(imageIs);      info.loadImage(parser, path);      imageIs.close();
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
return returnType == null ? null : "{" + returnType + "}";      }      private String getJSDocTypeWithBraces(CodegenOperation co) {          String jsDocType = getJSDocType(co);          return jsDocType == null ? null : "{" + jsDocType + "}";      }      private String getJSDocType(CodegenOperation co) {          String returnType = trimBrackets(co.returnType);
* @return true if all the nodes up to the last annotation node are end of scope nodes       *         false otherwise       */     private boolean isEndOfScope(final DetailAST lastAnnotationNode, final DetailAST node) {          DetailAST checkNode = node;          boolean endOfScope = true;          while (endOfScope && !checkNode.equals(lastAnnotationNode)) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedEKSEndpointBuilder              extends                  EndpointProducerBuilder {          default EKSEndpointBuilder basic() {
serializedValue = new SerializedValue<>(null) {      } else {       byte[] serializedData = new byte[length];      dis.read(serializedData, 0, length);       serializedValue = SerializedValue.fromBytes(serializedData);      }
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Configuration      public static Option[] configure() {         return configure(COMPONENT);      }  } \ No newline at end of file
"--attr", "foo=bar",              "--attr", "foo=glarch"      rc = ks.run(args4);     assertEquals(-1, rc);            deleteKey(ks, "keyattr1");
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
static File getIncomingDirectory(File storageDir) {    final File incomingDir = new File(storageDir, "incoming");   if (!incomingDir.exists() && !incomingDir.mkdirs()) {     throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath());    }
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.valueOf(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
public static interface AdvancedXmppEndpointBuilder              extends                  AdvancedXmppEndpointConsumerBuilder, AdvancedXmppEndpointProducerBuilder {          default XmppEndpointBuilder basic() {
* Validates Username and Password then saved sercurityToken to a variable    */   final void login() throws InvalidLoginException, IOException {   logger.debug("attempting to login");    String url = String      .format("%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s",        WEBSITE, enc(appId), enc(userName), enc(password));
initialPermits += rand;              assertEquals(initialPermits, semaphore.availablePermits());             instances[i].getGetService().shutdown();              semaphore.acquire(rand);              initialPermits -= rand;
*    * @param T The data type that the comparator works on.   */ public interface TypeComparator<T>  {    /**    * Computes a hash value for the given record. The hash value should include all fields in the record.
* @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {
*       * @return the message.       */     @Message(id = 15849, value = "Operation %s for address %s can only be handled by the master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
response.get(FAILURE_DESCRIPTION).set("Operation handler failed to complete");                              }                              response.get(OUTCOME).set(FAILED);                             response.set(ROLLED_BACK).set(true);                              return resultAction = ResultAction.ROLLBACK;
* before growing the backing table. */    public ObjectMap (int initialCapacity, float loadFactor) {     if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);     if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);     capacity = MathUtils.nextPowerOfTwo(initialCapacity);     if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
private final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should set uuid on implementation id global property    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public void setImplementationId(ImplementationId implementationId) throws APIException {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static StreamPingPacket readBuffer(short packetType, ChannelBuffer buffer) {           assert packetType == PACKET_TYPE;           if (buffer.readableBytes() < 4) {               buffer.resetReaderIndex();               return null;           }
check = false, init = true, lazy = true, stubevent = true,                  reconnect = "reconnect", sticky = true, proxy = "javassist", stub = "stub",                  cluster = "failover", connections = 1, callbacks = 1, onconnect = "onconnect",                 ondisconnect = "ondisconnect", owner = "owner", layer = "layer", retries = 2,                  loadbalance = "random", async = true, actives = 1, sent = true,                  mock = "mock", validation = "validation", timeout = 2, cache = "cache",                  filter = {"default", "default"}, listener = {"default", "default"}, parameters = {"key1", "value1"}, application = "application",
c.getParameterClass().isAssignableFrom(Optional.class) {              return new MultivaluedParameterExtractorQueryParamInjectable(                      new OptionalExtractor(parameterName, c.getDefaultValue()),                     c.isEncoded()              );          }          return null;
priorRange = ranges[i];        cumNum = val;      }     long val = histogram.getCount();      if (val - cumNum > 0) {        metricsRecordBuilder.addCounter(            Interns.info(name + "_" + rangeType + "_" + ranges[ranges.length - 1] + "-inf", desc),
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertEquals(expectedPlan, actualPlan);   }   @Test
@Override      protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {         codegenModel.additionalPropertiesType = getSwaggerType(swaggerModel.getAdditionalProperties());          addImport(codegenModel, codegenModel.additionalPropertiesType);      }
super(name, service.getNodeEngine());          this.partitionId = partitionId;          this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);         final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);          this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);          this.creationTime = currentTimeMillis();      }
*       * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler compiler) {
private final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      @Override     public void mouseMove() {          if (vizConfig.isSelectionEnable() && rectangleSelection) {              Rectangle rectangle = (Rectangle) currentSelectionArea;
*/    @Nullable   abstract byte[] getCacheKey();  }
mBuf.flip();        for (int pId = mLeft; pId < mRight; pId ++) {          long startTimeMs = System.currentTimeMillis();         TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));          OutStream os = file.getOutStream(WriteType.MUST_CACHE);          for (int k = 0; k < BLOCKS_PER_FILE; k ++) {            mBuf.putInt(0, k + mWorkerId);
disposeColorTexture(colorTexture);    if (hasDepthStencilPackedBuffer) {    gl.glDeleteBuffer(depthStencilPackedBufferHandle);     } else {     if (hasDepth) gl.glDeleteRenderbuffer(depthbufferHandle);     if (hasStencil) gl.glDeleteRenderbuffer(stencilbufferHandle);
private final String secret;    private final String percentEncodedKey;   RequestToken(String key, String token) {      this.key = key;      this.secret = token;      this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);
@Test      public void test_Decode_Error_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
future.cancel(true);                          throw ExceptionUtil.rethrow(e, IOException.class);                      }                     ClientConnection current = connections.putIfAbsent(address, clientConnection);                      if (current != null) {                          clientConnection.close();                          clientConnection = current;
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
socketSelector.close();        } catch (IOException ex) {         LOG.warn("Unable to close socket selector", ex);        }        throw e;      }
}                 if (selectedFile != null) {                      String filePath = selectedFile.getAbsolutePath();                      filePath = filePath.substring(0, filePath.lastIndexOf("."));                      filePath = filePath.concat(fileFilter.getExtensions().get(0));
public static interface ApnsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedApnsEndpointProducerBuilder advanced() {
public static Rule<AddExchangesNode> checkRulesAreFiredBeforeAddExchangesRule()      {         return checkPlanDoNotMatch(exchange(), "Expected rules to be fired before 'AddExchanges' optimizer");      }     public static <T extends PlanNode> Rule<T> checkPlanDoNotMatch(Pattern<T> pattern, String message)      {          return new CheckNoPlanNodeMatchesRule<>(pattern, message);      }
config.lock();          try {              AuditLogHandler existing = config.getConfiguredHandler(handler.getName());             if (!handler.isDifferent(existing)){                  if (handlerUpdateTask == null){                      handlerUpdateTask = new HandlerUpdateTask();                  }
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   }  private static class ShippingPriorityItem extends Tuple4<Long, Double, String, Long> {    public ShippingPriorityItem() {}
if (config.isAutoRead() && !readPending) {                      clearEpollIn();                  }              }
@Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/test");          servlet.service(request, response);
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@Override      protected void doStop() throws Exception {          if (channel != null) {             LOG.trace("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;
}      @Override     public List<EdgeModel> getSelectedEdges() {          List<EdgeModel> selected = new ArrayList<>();          for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {              EdgeModel edgeModel = itr.next();
*/            public boolean hasResponseStatus() {         return (bodyParts != null ? true : false);      }      /**
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();  private static Set<String> actualStartupOrder = new HashSet<String>();   /**    * Add a module (in the form of a jar file) to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of openopenrs modules Returns null if an openopenrs module is added to the list of
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
LOG.debug("Initializing sortmerger...");     Sorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,     this.parentTask, this.serializer, this.comparator, 32 * 1024 * 1024);     runPartialSorter(sorter, NUM_RECORDS, 2);    }
*       * @return the message.       */     @Message(id = 15841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message)
private static abstract class AbstractRequestMatcher     extends ApplicationContextRequestMatcher<WebApplicationContext> {    private volatile RequestMatcher delegate;   public AbstractRequestMatcher() {     super(WebApplicationContext.class);    }
protected FSNamesystem namesystem;     protected final Configuration conf;    protected NamenodeRole role;   private HAState state;    private final boolean haEnabled;    private final HAContext haContext;    protected boolean allowStaleStandbyReads;
@Override      public void process(Node externs, Node root) {       logger.info(name);        startPass(name);        processInternal(externs, root);        endPass(externs, root);
@ApiOperation(value = "Create user", notes = "This can only be done by the logged in user.", tags={ "user",  }      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) }     void createUser(@Valid User body);      @POST      @Path("/createWithArray")
private final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
super.compare(modelA, modelB);         assertRemoveSubsystemResources(servicesA);      }
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedS3EndpointBuilder              extends                  AdvancedS3EndpointConsumerBuilder, AdvancedS3EndpointProducerBuilder {          default S3EndpointBuilder basic() {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      public String[] getRequires() {         return alternatives;}      public EnumSet<AttributeAccess.Flag> getFlags() {
checkToken(token);     Account currentUser = accountService.getLoginUser(token);     List<Book> books = adminService.listMyBook(currentUser.id, pageable);    return BeanMapper.mapList(books, Book.class, BookDto.class);    }    @RequestMapping(value = "/api/myborrowedbook", produces = MediaTypes.JSON_UTF_8)
public static interface AdvancedMina2EndpointBuilder              extends                  AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {          default Mina2EndpointBuilder basic() {
assertEquals(1, serverStub.callsToProcessBufferInserter);          assertNull(lm.getField("id"));          assertEquals("foo", lm.getField("_something"));         assertEquals(8, lm.getFields().size());      }      @Test
public void test_kr_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
@Test      public void test_Decode_Error_Length() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
bar.expectedMessageCount(0);          MockEndpoint start = getMockEndpoint("mock:start"); start.expectedMessageCount(6);          template.sendBody("activemq:queue:foo", "Hello World");
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
public static interface DirectEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedDirectEndpointProducerBuilder advanced() {
*       * @return the message.       */     @Message(id = 15859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
if (timeout == null) {                  println(lock.tryLock());              } else {                 long time = Long.valueOf(timeout);                  try {                      println(lock.tryLock(time, TimeUnit.SECONDS));                  } catch (InterruptedException e) {
private final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15849, value = "Operation %s for address %s can only be handled by the master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
assertEquals(encoded, encoding.encode(bytes));    }   private void testDecodes(String encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private EventLoopGroup bossGroup;          private EventLoopGroup workerGroup;         public MyServer(int port) {              this.port = port;          }
public static interface AdvancedOptaPlannerEndpointBuilder              extends                  AdvancedOptaPlannerEndpointConsumerBuilder, AdvancedOptaPlannerEndpointProducerBuilder {          default OptaPlannerEndpointBuilder basic() {
if (body.endsWith("3") || body.endsWith("7")) {                                              log.info("5th message received.  Rolling back.");                                              exchange.getOut().setFault(true);                                              exchange.getOut().setBody("5th message received.  Rolling back.");
*       * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves()      /**
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.constructTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;"          } else if (propertyClass == double.class) {             mw.visitVarInsn(LLOAD, context.var("double"));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;"          } else if (propertyClass == boolean.class) {             mw.visitVarInsn(LLOAD, context.var("boolean"));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;B)Ljava/lang/String;"          }
@Test   public void BaseCommandTest() {   S_Command scmd = new S_Command("00FE30", 20.0);    String commandStr = scmd.getCommandString();
c.add(new Cookie("yo", "man"));          AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo("/a").build();         processor.open(w, request);          r.get().getBroadcaster().broadcast("yo").get();          assertNotNull(cValue.get());
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
throw new IOException("Failed to list directory: " + dir) {          }          for (File file : files) {             Files.delete(file.toPath());          }         Files.delete(dir.toPath());      }  }
return delegate.getTopScope();      }     @Override State getIntermediateState() {        return delegate.getIntermediateState();      }     @Override void setIntermediateState(State state) {        delegate.setIntermediateState(state);      }    }
from("direct:a").setBody(constant("A"));                 from("direct:b").delay(3000).setBody(constant("B"));                  from("direct:c").delay(500).setBody(constant("C"));              }
rel.setPersonA(personA);     rel.setPersonB(personB);     rel.setRelationshipType(relType);    ps.createRelationship(rel);    }    public void voidRelationship(Integer relationshipId, String voidReason) {
final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;          verify(checkConfig,                 getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"), expected);      }      @Test
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {        @Override        public Set<byte[]> execute(Jedis connection) {         return connection.zrangeByLex(key, max, min);        }      }.runBinary(key)
public static interface AdvancedCwEndpointBuilder advanced() {              return (AdvancedCwEndpointBuilder) this;          }
LOG.trace("OpenTracing: start server span=" + span);                  }              } catch (Throwable t) {                 LOG.error("OpenTracing: Failed to capture tracing data", t);              }          }
final long callId;      final long callStartNanos;     public PrintingEventListener(long callId, long callStartNanos) {        this.callId = callId;        this.callStartNanos = callStartNanos;      }
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /**
if (id != null) {              builder.getAdviceWithTasks().add(AdviceWithTasks.removeById(route, id, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          } else if (toString != null) {             builder.getAdviceWithTasks().add(AdviceWithTasks.removeByToString(route, toString, selectLast, selectFirst, selectFrom, selectTo, maxDeep));          } else if (type != null) {              builder.getAdviceWithTasks().add(AdviceWithTasks.removeByType(route, type, selectFirst, selectLast, selectFrom, selectTo, maxDeep));          }
*/      public void destroy() {          isDestroyed.set(true);         cache.remove(this);      }      private boolean destroyed(){
t = newT;}                 connectPromise.setFailure(t);                  closeIfClosed();              } finally {
* @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {   /**    * Gets the global property that has the given <code>propertyName</code>
*/      public int getDeletedRelationships()      {         return inner.deletedNodes();      }      /**
* @see <a href="http:       */      public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, paging.asPostParameterList(), true));      }
return group.id();              }             String msg = group.getId() + " already exists with a different size: " + group.memberCount();              logger.severe(msg);              throw new IllegalStateException(msg);          }
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
command.toString(), repeatCount);                   if (command.compareTo(oldPercent) > 0) {                       for (int i = 0; i < repeatCount; i++) {                          Thread.sleep(50);                           if (BindingType.brightness.equals(type)) {                               sendIncrease(bulb, rgbSteps, bridgeId);                           } else if (BindingType.colorTemperature.equals(type)) {                               sendIncrease(bulb, rgbSteps, bridgeId);                           }
.addAsResource("META-INF/persistence.xml")              .addAsResource("META-INF/load.sql")              .addAsWebInfResource(                 new StringAsset(beansXml.createAlternatives()                      .clazz(MovieBeanAlternative.class.getName()),                  beansXml.getDescriptorName());          System.out.println(war.toString(true));
*/      public ResponseList<Status> getFriendsTimeline(Paging paging) throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json",null, paging.asPostParameterList(), true));      }      /**
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          when(response.getWriter()).thenReturn(output);
if (getDomain() == null && that.getDomain() != null) {              return false;        } else if (that.getDomain() == null) {              return false;          }          return getDomain().equalsIgnoreCase(that.getDomain());
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(239);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNano(System.nanoTime() - start);              if (hitCount == 1) {                  statistics.increaseCacheHits(hitCount);              } else {
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getFriendsTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json", true));      }      /**
*       * @return the message.       */     @Message(id = 15852, value = "Caught %s storing deployment content -- %s")      String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception)      /**
"functions are set.";       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void test_Decode_Return_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*      javax.servlet.http.HttpServletResponse)     */    @Override   protected void doPost(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException,            ServletException {     String page = httpRequest.getParameter("page");
public static interface AdvancedSagaSagaBuilder              extends                  EndpointProducerBuilder {          default SagaBuilder basic() {
@Test      public void test_Decode_Return_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
*    * @param T The data type that the comparator works on.   */ public interface TypeComparator<T>  {    /**    * Computes a hash value for the given record. The hash value should include all fields in the record.
}   public void glGenTextures (int n, int[] textures, int offset) {   GL.glGenTexturesEXT(n, toBuffer(textures, offset), 0);   }   public void glGetIntegerv (int pname, int[] params, int offset) {
*       * @return the message.       */     @Message(id = 15844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group)
assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();
*       * @return the message.       */     @Message(id = 15849, value = "Operation %s for address %s can only be handled by the master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameter(target, pname, params);    }    public int glGetError () {
}      @Override     public Cell deepClone() {        throw new UnsupportedOperationException();      }
public void run() {                  timestamps.add(System.nanoTime());                  try {                     Thread.sleep(50);                  } catch (InterruptedException e) {                  }
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should set uuid on implementation id global property    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public void setImplementationId(ImplementationId implementationId) throws APIException {
bolt.execute( tickTuple) {         verify(collector).ack(tickTuple)      }      @Test
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int i) {
logger.debug("got a query");      if (!isProperlyConfigured) {       logger.error("Configuration for influxdb not yet loaded or broken.");        return Collections.emptyList();      }      if (!isConnected()) {       logger.error("InfluxDB is not yet connected");        return Collections.emptyList();      }
public static void createFiles() throws IOException {      long startTimeMs = CommonUtils.getCurrentMs();      for (int k = 0; k < THREADS; k ++) {        int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));        CommonUtils.printTimeTakenMs(startTimeMs, LOG, "user_createFiles with fileId " + fileId);      }
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String annotation)      {          if (ast == null) {             throw new NullPointerException("the ast is null");          }          if (annotation == null) {             throw new NullPointerException("the annotation is null");          }          if (StringUtils.isBlank(annotation)) {
* before growing the backing table. */   public IntIntMap (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
c.add(new Cookie("yo", "man"));          AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo("/a").build();         processor.open(w, request);          r.get().getBroadcaster().broadcast("yo").get();          assertNotNull(cValue.get());
AtmosphereRequest request = r.getRequest();          String cacheHeader = request.getHeader(X_CACHE_DATE);         r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.currentTimeMillis()));          if (cacheHeader == null || cacheHeader.isEmpty()) {              return Collections.emptyList();          }
@Override      protected void doStop() throws Exception {          if (channel != null) {             LOG.trace("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;
}   @Test  public void whenWhenValueNotMatchesShouldSupportChainedCalls() {    this.map.from("123").when("456"::equals).when("123"::equals).toCall(Assertions::fail);   }   @Test  public void whenWhenValueMatchesShouldSupportChainedCalls() {    String result = this.map.from("123").when((s) -> s.contains("2")).when("123"::equals).toInstance(String::new);    assertThat(result).isEqualTo("123");   }
private final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      public <T> Future<T> submit(Runnable task, T result) {         return submit(new RunnableAdapter<T>(task, result));      }      public Future<?> submit(Runnable task) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
try {        mFileSystemMaster            .createDirectory(new AlluxioURI("alluxio:/a"), CreateDirectoryOptions.defaults());       Assert.fail();      } catch (FileAlreadyExistsException e) {      }
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
runDelegatedTasks(clientResult, clientEngine);              cTOs.compact();              sTOc.compact();         } while (isHandshaking(clientResult) && isHandshaking(serverResult));      }      private static boolean isHandshaking(SSLEngineResult result) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShader(shader, pname, params);    }    public String glGetString (int name) {
}     @Test(timeout = 30000)      public void testMutex() throws InterruptedException {          final int threadCount = 2;          final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int i) {
private LinkedHashMap<String,partitionDesc> pathToPartitionInfo;   private HashMap<String,Operator<? extends Serializable>> aliasToWork;
final Object[] params = new Object[] { item };               try {                   if (mMethod.getReturnType() == Boolean.TYPE) {                      return (Boolean)mMethod.invoke(MenuInflater.this, params);                   }                   return false;               } catch (Exception e) {
, (args = args.rest()).first()        , args.rest());     case 11:     return invoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()       
}   public void glDrawArrays (int mode, int first, int count) {   GL.glDrawArraysEXT(mode, first, count);   }   public void glDrawElements (int mode, int count, int type, Buffer indices) {   GL.glDrawElementsEXT(mode, count, type, indices);   }
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public String KBP_DOCS_DIR = "/scr/nlp/data/kbp-benchmark    public String GOLD_RELATIONS_PATH = "/scr/nlp/data/kbp-benchmark/kbp-gold-relations.txt";   public double KBP_MINIMUM_SCORE = 45.30;   private String convertRelationName(String relationName) {      /*if (relationName.equals("org:top-members/employees")) {
@Override      public byte[] decodeMessage() {         byte[] data = new byte[13];          data[0] = 0x0D;          data[1] = RFXComBaseMessage.MessageType.CURRENT.toByte();
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnablednHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client {
SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create("value", ModelType.STRING).build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage("helloForRole"));          }      }
if (target == this) {              task.run();          } else {             target.addTask(task);          }      }
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    @Override   void setIntermediateState(State state) {      this.cssNames = state.cssNames == null ? null :          Maps.newHashMap(state.cssNames);      this.exportedNames = state.exportedNames == null ? null :          Maps.newHashMap(state.exportedNames);
*       * @return the message.       */     @Message(id = 15840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server)      /**
public static interface ClientEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedClientEndpointProducerBuilder advanced() {
public class SucceededFuture<T> implements Future<T> {    private final T result;   public SucceededFuture(T result) {      this.result = result;
appendToBody.ret();      }     private void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)      {          Parameter blockIndex = arg("blockIndex", int.class);          Parameter blockPosition = arg("blockPosition", int.class);
public void testOneMemberWriteBehindFlush() {          TestMapStore testMapStore = new TestMapStore(1, 1, 1);          testMapStore.setLoadAllKeys(false);         int writeDelaySeconds = 2;          Config config = newConfig(testMapStore, writeDelaySeconds);          TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(3);          HazelcastInstance instance = nodeFactory.newHazelcastInstance(config);
public static interface QueueServiceEndpointBuilder              extends                  QueueServiceEndpointConsumerBuilder, QueueServiceEndpointProducerBuilder {          default AdvancedQueueServiceEndpointBuilder advanced() {
}      else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {       TypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();      mTypeSerializers.put(typeSerializer.getClass(), typeSerializer);      }     }     catch (ClassNotFoundException e) {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final float b = y - this.y;     final float c = z - this.z;return a * a + b * b + c * b;
public void restartWithKeepAlive() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();    this.container = factory     .getEmbdeddedServletContainer(exampleServletRegistration());    MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();    HttpClient client = new HttpClient(connectionManager);
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
ClientConfig jerseyConfig = new ClientConfig();    Client client = ClientBuilder.newClient(jerseyConfig);   client = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS, 1));    WebTarget resource = client.target(getBaseUri()).path("auth-digest");
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface RabbitMQEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedRabbitMQEndpointProducerBuilder advanced() {
logger            .error(               "database connection error may be wrong password, username or dbname: {}",                e.getMessage());      }    }
Calendar cal = DateTimeUtils.truncateToMidnight(calendar);    Sun sun = new Sun();    for (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {    setSunPosition(calendar, latitude, longitude, sun);     if (sun.getPosition().getElevation() < SUN_ANGLE) {      return false;     }
* @param children An array of Object containing the inserted, removed, or changed objects.       * @see EventListenerList       */     void fireTreeStructureChanged(Object source, Object[] path,                                    int[] childIndices,                                    Object... children) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {         return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +                  user + "/lists.json?cursor=" + cursor, true));      }
private final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (bulb < 6) {       if (command.compareTo(oldPercent) > 0) {        int repeatCount = (command.intValue() - oldPercent.intValue()) / 10;       for(int i = 0; i <= repeatCount; i++) {         Thread.sleep(100);         if(BindingType.brightness.equals(type) && bulb < 6) {          sendIncrease(bulb, rgbSteps, bridgeId);
};       final PassFactory disambiguateProperties =        new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));              final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();              if (setop != null) {                 logger.debug("    " + op.getJavaName() + "\n                " + op.getIDLName());                  final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);                 beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(realSetmethod));              }          }
grammarBuilder.append("  | '(' e ')'   {$v = $e.v;} grammarBuilder.append("  | left=e INC  {$v = $left.v + 1;} grammarBuilder.append("  | left=e DEC  {$v = $left.v - 1;}   grammarBuilder.append("  | ID          {$v = 3}    grammarBuilder.append("  ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'..'9'+ ;\n");
* {@inheritDoc}       */      @Override     public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {          try {              if (destroyed.get()) {                  logger.debug(DESTROYED, getID(), "addAtmosphereResource(AtmosphereResource<?, ?> r");                 return r;              }              start();
String splitsSummary = String.format("Splits: %,4d total, %,4d pending, %,4d running, %,4d done",                      globalExecutionStats.getSplits(),                      max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getCompletedSplits()),                      globalExecutionStats.getCompletedSplits());              reprintLine(splitsSummary);
public void test_kr_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
public static interface AdvancedNsqEndpointBuilder              extends                  AdvancedNsqEndpointConsumerBuilder, AdvancedNsqEndpointProducerBuilder {          default NsqEndpointBuilder basic() {
throw new NullPointerException("uncollectedPointCreator must not be null");          }          this.timeWindow = timeWindow;         this.uncollectedPointCreater = uncollectedPointCreator;      }      public Chart<P> build(List<P> sampledPoints) {
processSelectedKeys(selector.selectedKeys());                      }                      long currentTimeNanos = System.nanoTime();                     if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) {                          lastConnectTimeoutCheckTimeNanos = currentTimeNanos;                          processConnectTimeout(selector.keys(), currentTimeNanos);                      }
new FileWriter(this.temporaryFolder.newFile("test.txt")));    AbstractEmbeddedServletContainerFactory factory = getFactory();    factory.setDocumentRoot(this.temporaryFolder.getRoot());   this.container = factory.getEmbdeddedServletContainer(); assertThat(getResponse("http:   }
*       * @return the error message       */     @Message(id = 15833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec)
}      /**      * On windows, there is scenario where the connection get broken and the only way we can find it is by inspecting       * the stack trace in order to catch the following exception:      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getUserTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline.json"                  , true));      }
}              }          }         if (securityDomain != null)              description.setSecurityDomain(securityDomain);         else if (globalSecurityDomain != null)              description.setSecurityDomain(globalSecurityDomain);      }
MockEndpoint result = getMockEndpoint("mock:result");          result.expectedMessageCount(2);           result.expectedBodiesReceived("Message 1c", "Message 2b");
public static interface AdvancedSedaEndpointBuilder              extends                  AdvancedSedaEndpointConsumerBuilder, AdvancedSedaEndpointProducerBuilder {          default SedaEndpointBuilder basic() {
public static interface IgniteMessagingEndpointBuilder              extends                  IgniteMessagingEndpointConsumerBuilder, IgniteMessagingEndpointProducerBuilder {          default AdvancedIgniteMessagingEndpointBuilder advanced() {
.outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                  .symbolStats(unknown, stats -> stats                          .nullsFraction(0)                          .distinctValuesCountUnknown()
if (handler == null) {                     String p = path.lastIndexOf("/") == 0 ? "/" : path.substring(0, path.lastIndexOf("/"));                      while (p.length() > 0) {                          handler = map(p, handlers);
* before growing the backing table. */   public ObjectSet (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
populateNearCache(clientMap, 1000);         HazelcastInstance member = hazelcastFactory.newHazelcastInstance();          final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(561);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v];\n");
}      @Override     public synchronized void updateLOD() {          Iterator<NodeModel> iterator = octree.getNodeIterator();          for (; iterator.hasNext();) {              NodeModel obj = iterator.next();
private class ExchangeNotifier extends EventNotifierSupport {          public void notify(EventObject event) throws Exception {              if (event instanceof ExchangeCreatedEvent) {
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStreamSink<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
});          MockEndpoint result = MockEndpoint.resolve(ctx, "mock:result");          clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, "ClientMock Scheduler", 1));         registry.put("amazonSQSClient", clientMock);          result.expectedMessageCount(0);
*/  @GwtCompatible(emulated = true)  public class BaseEncodingTest extends TestCase {   public void assertEquals(byte[] expected, byte[] actual) {      assertEquals(expected.length, actual.length);      for (int i = 0; i < expected.length; i++) {        assertEquals(expected[i], actual[i]);
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name)      /**
public static interface AdvancedSpringWebserviceEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSpringWebserviceEndpointProducerBuilder advanced() {
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public void test_cn_3() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月6日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
ConfigurableEmbeddedServletContainerFactory factory = getFactory();    final Date[] date = new Date[1];    this.container = factory     .getEmbdeddedServletContainer(new ServletContextInitializer() {       @Override       public void onStartup(ServletContext servletContext)         throws ServletException {
Long id = (Long) tuple.getValue(0);              Long timeDeltaMs = (Long) tuple.getValue(1);              TupleInfo tupleInfo = (TupleInfo) pending.remove(id);             if (tupleInfo.getMessageId() != null) {                  if (taskId != tupleInfo.getTaskId()) {                      throw new RuntimeException("Fatal error, mismatched task ids: " + taskId + " " + tupleInfo.getTaskId());                  }
buf[count++] = ((byte)(0x80 | ((uc >> 6) & 0x3f)));                  buf[count++] = ((byte)(0x80 | (uc & 0x3f)));              } else {                 if(3 < buf.length - count) {                      flushBuffer();                  }                  buf[count++] =((byte)(0xe0 | ((c >> 12))));
}    }   public void unpinFile(int fileId) {      if (INACTIVE) {        return;      }
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
}          }          if (isStatisticsEnabled()) {             statistics.addGetTimeNano(System.nanoTime() - start);          }          CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);          final Object process = entryProcessor.process(entry, arguments);
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      @Override     public synchronized void updateLOD() {          Iterator<NodeModel> iterator = octree.getNodeIterator();          for (; iterator.hasNext();) {              NodeModel obj = iterator.next();
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShader(shader, pname, params);    }    public String glGetString (int name) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
final int stringNumber =                  UniquePropertiesCheck.getLineNumber(testStrings,                          "some key");         Assert.assertEquals(stringNumber, 0);      }      /**
@Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay();        }      @Deprecated      public
}    }   private void removeModel(Map<Integer, Integer> model, Range<Integer> range) {      for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {        if (range.contains(i)) {          model.remove(i);
String query = "start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file";          gen.get().addSnippet( "query1", createCypherSnippet( query ) );          String result = engine.execute( query )                 .toString();          assertTrue( result.contains("File1"));          gen.get()                  .addSnippet( "result1", createQueryResultSnippet( result ) );
LOG.info("Verifying the reading data...");          for (int pId = mLeft; pId < mRight; pId ++) {           TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);            buf = file.readByteBuffer(0);            IntBuffer intBuf;           intBuf = buf.DATA.asIntBuffer();            int tmp;            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15849, value = "Operation %s for address %s can only be handled by the master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
pressedButton = button;     touchDownX = x;     touchDownY = y;     visualPressedTime = TimeUtils.nanoTime() + visualPressedDuration * 1000000000;     return true;    }
public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(239);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
private final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final boolean registerRuntimeOnly = context.isRuntimeOnlyRegistrationValid();         final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, 1, 0);          final ManagementResourceRegistration registration = subsystem.registerSubsystemModel(SecuritySubsystemRootResourceDefinition.INSTANCE);          registration.registerOperationHandler(DESCRIBE, GenericSubsystemDescribeHandler.INSTANCE, GenericSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);
Vector<RelationshipListItem> ret = new Vector<RelationshipListItem>();     List<Relationship> rels = Context.getPersonService()            .getRelationships(Context.getPersonService().getPerson(personId));     for (Relationship rel : rels) {      if (!rel.isVoided()              && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(relationshipTypeId))) {
* @author Lars Kühne   * @noinspection ThisEscapedInConstruction   */ public class TreeTable extends JTable {      private final long serialVersionUID = -8493693409423365387L;
public static interface TikaEndpointBuilder             extends                 EndpointProducerBuilder {          default AdvancedTikaEndpointBuilder advanced() {              return (AdvancedTikaEndpointBuilder) this;          }
}    private void configureConnection(Connection conn) throws SQLException {     if (autoCommit != conn.getAutoCommit()) {        conn.setAutoCommit(autoCommit);      }      if (defaultTransactionIsolationLevel != null) {        conn.setTransactionIsolation(defaultTransactionIsolationLevel);      }
private final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup)      /**
populateNearCache(clientMap, 1000);         HazelcastInstance member = hazelcastFactory.newHazelcastInstance();          final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();
if (description == null) {              description = Description.createTestDescription(getJavaClass().getJavaClass(),                      testName(method), method.getAnnotations());             fMethodDescriptions.put(method, description);          }          return description;
private final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @param workerClient the worker client to release, the client should not be accessed after this     *        method is called     */   public synchronized void releaseWorkerClient(WorkerClient workerClient) {      if (workerClient.isLocal()) {
*/   public GarageDoorData getGarageData() throws InvalidLoginException,     IOException {   logger.debug("Retreiveing door data"); String url = String.format(      "%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s",      WEBSITE, enc(appId), enc(getSecurityToken()));
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
notifyListeners(oldState, newState)   }  private void notifyListeners(State oldState, State newState) {    if(oldState.equals(newState)) return;
public List<User> getAllUser() {    if (applicationStatistics != null) {    applicationStatistics.incrUpdateUserTimes();      return (List<User>) userJpaDao.findAll();   }
*       * @return the error message       */     @Message(id = 15833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec)
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (!queueLength.isDefined() || queueLength.asInt() == Integer.MAX_VALUE) {                  if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {                     throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());                  }              }
token = token.getParent())          {              final int type = token.getType();             if (type == TokenTypes.CLASS_DEF) { break;              }              else if (type == TokenTypes.LITERAL_NEW) { break;
public static interface AdvancedLdifEndpointBuilder              extends                  EndpointProducerBuilder {          default LdifEndpointBuilder basic() {
@Override    public synchronized void init(ProcessingEnvironment processingEnv) {      super.init(processingEnv);     Dagger_AutoFactoryProcessorComponent.builder()          .processorModule(new ProcessorModule(processingEnv)          .build()          .injectProcessor(this);
try {              Object answer;             XMLStreamReader xmlReader;              if (needFiltering(exchange)) {                 xmlReader = typeConverter.convertTo(XMLStreamReader.class, createNonXmlFilterReader(exchange, stream));              } else {                 xmlReader = typeConverter.convertTo(XMLStreamReader.class, stream);              }              String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);              if (partialClass != null || partClassFromHeader != null) {
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnablednHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client {
public static interface AdvancedOlingo4EndpointProducerBuilder              extends                  EndpointProducerBuilder {          default Olingo4EndpointProducerBuilder Olingo4EndpointProducerBuilder              Olingo4EndpointProducerBuilder              Olingo4EndpointProducerBuilder              Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder          Olingo4EndpointProducerBuilder
super.compare(modelA, modelB);         assertRemoveSubsystemResources(servicesA);      }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);   }
public static interface AdvancedAtomixQueueEndpointBuilder              extends                  AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {          default AtomixQueueEndpointBuilder basic() {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
form.add("code", context.getAuthorizationCode());    String redirectUri = resource.getPreEstablishedRedirectUri();   if (redirectUri == null) {    redirectUri = String.valueOf(context==null ? null : context.getPreservedState());    } else {     form.add("state", String.valueOf(context.getPreservedState()));
private final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name)      /**
);         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypes(), buildPages.getTypes()))                  .row("20", 1020L, 2020L, "20", 30L, 40L)                  .row("21", 1021L, 2021L, "21", 31L, 41L)                  .row("22", 1022L, 2022L, "22", 32L, 42L)
}        statsData.setStringStats(stringStats);        statsObj.setStatsData(statsData);     } else if (columnType.equalsIgnoreCase("string")) {        StringColumnStatsData stringStats = new StringColumnStatsData();        stringStats.setMaxColLenIsSet(false);        stringStats.setAvgColLenIsSet(false);
@Test      public void testMaxBackoff() throws Exception {         final long initial = 10;          final double mult = 2d;          final long max = 20;          ExponentialBackoffMsgRetryManager manager = new ExponentialBackoffMsgRetryManager(initial, mult, max);          long expectedWaitTime = initial;
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final Request request;      private final Response response;     public CacheHttpURLConnection(Response response) {        super(response.request().url().url());        this.request = response.request();        this.response = response;
public void test_cn_4() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
RSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,      RSocketMessageHandler messageHandler) {     return new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),      messageHandler.serverResponder());    }   }
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface AdvancedHazelcastSetEndpointBuilder              extends                  AdvancedHazelcastSetEndpointConsumerBuilder, AdvancedHazelcastSetEndpointProducerBuilder {          default HazelcastSetEndpointBuilder basic() {
* @param r {@link AtmosphereResource}       */      public void unRegisterUuidForFindCandidate(AtmosphereResource r) {         logger.debug("Removing: {}", r);          resources.remove(r.uuid());      }
final PathAddress address = PathAddress.pathAddress(PathAddress.pathAddress(parentAddress), PathElement.pathElement(CommonAttributes.REMOTE_OUTBOUND_CONNECTION, name));         operations.add(getConnectionAddOperation(name, outboundSocketBindingRef, address));          final EnumSet<Element> visited = EnumSet.noneOf(Element.class);          while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
private final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
this.reservedBytes = reservedBytes;          this.reservedRevocableBytes = reservedRevocableBytes;          this.queryMemoryReservations = unmodifiableMap(new HashMap<>(queryMemoryReservations));         this.queryMemoryRevocableReservations = unmodifiableMap(new HashMap<>(queryMemoryReservations));      }      @JsonProperty(value = "reservedBytes", access = JsonProperty.Access.WRITE_ONLY)
public static interface OptaPlaEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedOptaPlaEndpointProducerBuilder advanced() {
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(730);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {System.out.println($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
public void testSendLotsOfMessagesButOnly3GetThrough() throws Exception {          MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class);          resultEndpoint.expectedMessageCount(3);         resultEndpoint.setResultWaitTime(1000);          for (int i = 0; i < messageCount; i++) {              template.sendBody("seda:a", "<message>" + i + "</message>");
private final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShader(shader, pname, params);    }    public String glGetString (int name) {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group)
public static interface AdvancedFacebookEndpointBuilder              extends                  AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {          default FacebookEndpointBuilder basic() {
private final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name)      /**
boolean isDoubleA = isDouble(clazzA);          boolean isDoubleB = isDouble(clazzB);         if ((isDoubleA && isDoubleB) || (isDoubleA && isIntA) || (isDoubleB && isIntA) {              return a.doubleValue() == b.doubleValue();          }
* @param task the task to add.       * @throws NullPointerException if task is null       */     public final void addTaskAndWakeup(Runnable task) {          taskQueue.add(task);          if (!selectNow) {              selector.wakeup();
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException {   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc.
}      public boolean returnsResponse() {         return false;}      public Object getResponse() {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
rowsRet = work.getLimit() >= 0 ? Math.min(work.getLimit() - totalRows, maxRows) : maxRows;      }      try {       if (rowsRet <= 0) {          fetch.clearFetchContext();          return false;        }
}              }          }         return r;      }      private boolean isAtmosphereResourceValid(AtmosphereResource r) {
@Override      protected void configureClient(ClientConfig clientConfig) {         clientConfig.property(ClientProperties.READ_TIMEOUT, 1000);      }      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @Test      @
public static interface AMQPEndpointBuilder              extends                  AMQPEndpointConsumerBuilder, AMQPEndpointProducerBuilder {          default AdvancedAMQPEndpointBuilder advanced() {
private TransactionalGraph getGremlinWrappedGraph() throws DatabaseBlockedException      {         return new NN4jGraph( database.graph );      }  }
public static interface AdvancedGooglePubsubEndpointBuilder              extends                  AdvancedGooglePubsubEndpointConsumerBuilder, AdvancedGooglePubsubEndpointProducerBuilder {          default GooglePubsubEndpointBuilder basic() {
if (value instanceof AsciiString) {              return ((AsciiString) value).parseFloat();          }         return Float.valueOf(value.toString());      }      @Override
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), is("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
public void addAll (short[] array, int offset, int length) {     short[] items = this.items;     int sizeNeeded = size + length;     if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;    }
.aggregator().header("id")                      .batchTimeout( 2000L)                       .batchSize(5)
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of("runs")));          when(request.getParameterValues("runs")).thenReturn(new String[]{"1"});          when(response.getWriter()).thenReturn(output);
private final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.protocol(Protocol.HTTP_1_1)                  .code(200)                  .message("ok")                 .body(ResponseBody.create(MediaType.get("text/plain"), new byte[0]))                  .build();          handler.onResponse(call, response);          assertNull(callback.getResponse());
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int i) {
if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {              return;} else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD) {              if (streamTokenizer.sval.equalsIgnoreCase("label")) {                  streamTokenizer.nextToken();
public static interface JooqEndpointBuilder              extends                  JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {          default AdvancedJooqEndpointBuilder advanced() {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (doStoreUsingBatchSize > 1) {              failMap = doStoreUsingBatchSize(delayedEntries);          } else {             failMap = processInternal((List) delayedEntries);          }          return failMap;      }
public static interface AdvancedReactiveStreamsEndpointBuilder              extends                  AdvancedReactiveStreamsEndpointBuilder, AdvancedReactiveStreamsEndpointConsumerBuilder, AdvancedReactiveStreamsEndpointProducerBuilder {          default ReactiveStreamsEndpointBuilder basic() {
final CompressionLevel compressionLevel, int indexOfOutputGate, int indexOfInputGate,     final DistributionPattern distributionPattern) throws JobGraphDefinitionException {    this.connectTo(vertex, channelType, compressionLevel, indexOfOutputGate, indexOfInputGate, distributionPattern,    false);   }   /**
}        try {         X509Certificate certificate = generator.generateX509Certificate(             signedByKeyPair.getPrivate());          return new HeldCertificate(heldKeyPair, certificate);        } catch (GeneralSecurityException e) {          throw new AssertionError(e);
setHost(value) {          }         if (getProtocol() != null && isIgnoreUriScheme()) {              String scheme = uri.getScheme();              if (scheme != null) {                  setProtocol(scheme);
public void test_in() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06-05-2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
private final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface CxfEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCxfEndpointProducerBuilder advanced() {
*/    void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,        Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {     logger.info("Strip code");      startPass("stripCode");      StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,          stripTypePrefixes, stripNamePrefixes);
final PlannerConfig plannerConfig = new PlannerConfig();      final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);     final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);      final DruidOperatorTable operatorTable = new DruidOperatorTable(          ImmutableSet.of(new DoublesSketchSqlAggregator()),          ImmutableSet.of()
private final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param servers the servers that need to restart.       */      @LogMessage(level = Level.INFO)     @Message(id = 15807, value = "Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s") void domainModelChangedOnReConnect(Set<Identity> servers);      /**
private final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 15840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server)      /**
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);     GatherGettersAndSetterProperties.update(compiler, externs, root)    }    /**
public final ASMClassLoader classLoader             = new ASMClassLoader();     private final AtomicLong       seed                    = new AtomicLong();
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
template.sendBodyAndHeader("file:          MockEndpoint mock = getMockEndpoint("mock:result2");         mock.expectedBodiesReceived("Hello World 2");          assertMockEndpointsSatisfied();          oneExchangeDone.matchesMockWaitTime();
int cleanedSize = cleaned.size();      waitCount = 0;      while (cleanedSize < allocatedSize && waitCount++ < 200) {       Thread.sleep(100);        resp = nm.nodeHeartbeat(true);        cleaned = resp.getContainersToCleanup();        cleanedSize += cleaned.size();
final class MuninnPagedFile implements PagedFile  {      private static int stripeFactor = Integer.getInteger(             "org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor", 8 );      static final int translationTableStripeLevel = 1 << stripeFactor;      static final int translationTableStripeMask = translationTableStripeLevel - 1;
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());                      }                      if (restartRequired) {                         context.restartRequired();                      } else if (reloadRequired) {                         context.reloadRequired();                      }                  }                  performRollback(context, configuration, name, originalModel) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
TachyonException {      String format = "%-10s%-25s%-15s%-15s%-5s\n";      return String.format(format, FormatUtils.getSizeFromBytes(size),         TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)), "In Memory",         testUser, tUri.getPath());    }    @Test
}      @Override     public void mouseMove() {          if (vizConfig.isSelectionEnable() && rectangleSelection) {              Rectangle rectangle = (Rectangle) currentSelectionArea;
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public static interface CaffeineLoadCacheEndpointBuilder              extends                  CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {          default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
, (args = args.rest()).first()        , args.rest());     case 20:     return invoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()       
} /**    * Free the file or Folder from tachyon in-memory specified by argv     *     * @param path The TachyonURI path as the input of the command     * @return 0 if command if successful, -1 if an error occurred.
final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;          verify(checkConfig,                 getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"), expected);      }      @Test
private int port = Integer.valueOf(System.getProperty("port"));   @Test  public void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = this.rest.getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStreamSink<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
loggerForCleaner.debug("Beginning log cleanup");                  int total = 0;                  final Timer.Context ctx = new Timer().time();                 for (final Log kafkaLog : JavaConversions.asIterable(logManager.allLogs())) {                      if (kafkaLog.config().compact()) continue;                      loggerForCleaner.debug("Garbage collecting {}", kafkaLog.name());                      total += cleanupExpiredSegments(kafkaLog) +
private int port = Integer.valueOf(System.getProperty("port"));   @Test  public void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = this.rest.getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
ControlFlowGraph<Node> computeCFG() {     logger.info("Computing Control Flow Graph");      Tracer tracer = newTracer("computeCFG");      ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);      process(cfa);
MockEndpoint result = getMockEndpoint("mock:result");          result.expectedMessageCount(3);           result.expectedBodiesReceived("Message 1c", "Message 2b", "Message 3a");
public static interface AdvancedYammerEndpointBuilder              extends                  AdvancedYammerEndpointConsumerBuilder, AdvancedYammerEndpointProducerBuilder {          default YammerEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 15861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups)
}      private static String getNodeText(Node node, boolean fixLinks) {         final StringBuffer result = new StringBuffer(20);          for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {              if (child.getNodeType() == Node.TEXT_NODE) {
return -1;           }           int newId = nextId();          if (newId > max) {               throw new IndexOutOfBoundsException("size=" + index.length + " id=" + id);           }
*     * @param toCompare The element to set as the comparison reference */  public void setReference(T toCompare);   /**    * Checks, whether the given element is equal to the element that has been set as the comparison */
private final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public static interface StreamEndpointBuilder              extends                  StreamEndpointConsumerBuilder, StreamEndpointProducerBuilder {          default AdvancedStreamEndpointBuilder advanced() {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}          doRemoveRecord(key, source);          if (isEventsEnabled()) {             publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                   origin, IGNORE_COMPLETION));          }          return null;
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public static interface AdvancedKubernetesHPAEndpointBuilder              extends                  AdvancedKubernetesHPAEndpointConsumerBuilder, AdvancedKubernetesHPAEndpointProducerBuilder {          default KubernetesHPAEndpointBuilder basic() {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
};          verify(checkConfig,                 getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"), expected);      }      @Test
* @see <a href="http:       */      public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, paging.asPostParameterList(), true));      }
public final static int MajorVersion    = 1;      public final static int MinorVersion    = 1;     public final static int RevisionVersion = 2;      public static String getVersionNumber() {          return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion;
* @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {
return false;      }      if (!info.isOffline()) {       LOG.warn("Region is split but not offline: " + info.getRegionName());      }      return true;    }
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
return additionalReplacements;}   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {              if (partitionLastOffset != -1) {                 if (offsetRepository != null) {                      log.debug("Saving offset repository state {} from topic {} with offset: {}", threadId, topicName, partitionLastOffset);                      offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));                  } else if (forceCommit) {
protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such    */ protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractSt
*       * @return a message for the error.       */     @Message(id = 15832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
private void registerEventJournalConfig(EventJournalConfig eventJournalConfig, ConfigCheckMode configCheckMode) {          String mapName = eventJournalConfig.getMapName();         String cacheName = eventJournalConfig.getMapName();          synchronized (journalMutex) {              EventJournalConfig currentMapJournalConfig = null;              if (mapName != null) {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @param request   The request object providing information about the HTTP request       * @param response  The response object providing functionality for modifying the response       */     public abstract void handle(Exception exception, Request request, Response response);  }
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /**
*  * @see NormalizableKey    */  public void putNormalizedKey(T record, byte[] target, int offset, int numBytes)   {    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.
public static interface HazelcastListEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastListEndpointProducerBuilder advanced() {
new Thread() {              public void run() {                  try {                     if (mm.tryLock(key, 4, TimeUnit.SECONDS)) {                          tryLockSuccess.countDown();                      }                  } catch (InterruptedException e) {
private static Function compile(String function) {      final ContextFactory contextFactory = ContextFactory.getGlobal();     Context context = contextFactory.enterContext();      context.setOptimizationLevel(9);      final ScriptableObject scope = context.initStandardObjects();
assertEquals(inDegree1, 0.0);           assertEquals(inDegree2, 1.0);           assertEquals(outDegree1, 1.0);          assertEquals(avDegree, 1.0);       }       @Test
@NotNull      @JsonProperty     private Size requestBufferSize = Size.kilobytes(32);      @NotNull      @JsonProperty     private Size requestHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size requestBufferSize = Size.kilobytes(32);      @NotNull      @JsonProperty     private Size requestHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size requestBufferSize = Size.kilobytes(32);      @NotNull      @JsonProperty     private Size requestHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size requestBufferSize = Size.kilobytes(32);      @NotNull      @JsonProperty     private Size requestHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size requestBufferSize = Size.kilobytes(32);      @NotNull      @JsonProperty     private Size requestHeaderBufferSize = Size.kilobytes(3);
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShader(shader, pname, params);    }    public String glGetString (int name) {
protected void handleQPoll(String[] args) {          long timeout = 0;          if (args.length > 1) {             timeout = Long.valueOf(args[1]);          }          try {              println(getQueue().poll(timeout, TimeUnit.SECONDS));
*       * @return the message.       */     @Message(id = 15851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name)      /**
if (serviceType == ServiceType.MASTER_WEB) {        port = mLocalAlluxioClusterResource.get().getMaster().getWebLocalPort();      } else {       port = mLocalAlluxioClusterResource.get().getWorkerAddress().getWebPort();      }      InetSocketAddress webAddr =          new InetSocketAddress(NetworkAddressUtils.getGetHost(serviceType), port);
*/      private static final Set<String> ALLOWED_TAGS = ImmutableSortedSet.of(              "a", "abbr", "acronym", "address", "area", "b", "bdo", "big",             "blockquote", "br", "caption", "cite", "code", "colgroup", "del",             "div", "dfn", "dl", "em", "fieldset", "h1", "h2", "h3", "h4", "h5",             "h6", "hr", "i", "img", "ins", "kbd", "li", "ol", "p", "pre", "q",             "samp", "small", "span", "strong", "style", "sub", "sup", "table",             "tbody", "td", "tfoot", "th", "thead", "tr", "tt", "ul");            private Scope mScope = Scope.PRIVATE;
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStreamSink<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
}    public void glGetUniformfv (int program, int location, FloatBuffer params) {    GL20.glGetUniform(program, location, params);    }    public void glGetUniformiv (int program, int location, IntBuffer params) {    GL20.glGetUniform(program, location, params);    }    public void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {
public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(239);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
private final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      private void addTag(String text, int line, int column, boolean on)      {         final Tag tag = new Tag(line, column, text, on);          tags.add(tag);      }  }
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
import org.apache.lucene.analysis.tokenattributes.OffsetAttribute; import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute; public class AnsjTokenizer extends Tokenizer {   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
private final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
for (int i = 0; i < sourcesAsStrings.length; i++) {        sourcesAsStrings[i] = Errors.convert(sourcesAsStrings[i]).toString();      }     return new Message(ImmutableList.of(sourcesAsStrings), message, cause);    }    private final long serialVersionUID = 0;
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShader(shader, pname, params);    }    public String glGetString (int name) {
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    if (doScroll) {    smoothScrollTo(mode == MODE_PULL_DOWN_TO_REFRESH ? -headerHeight : headerHeight); }   }
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @throws IOException Thrown if any of the two views raises an exception */  public void copy(DataInputView source, DataOutputView target) throws IOException;  }
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());      }     private void generateConstructor(ClassDefinition classDefinition,              List<Integer> joinChannels,              FieldDefinition sizeField,              List<FieldDefinition> channelFields) {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
class OkHttpRequest implements Runnable {      private final Call call;     public OkHttpRequest(Call call) {        this.call = call;      }
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {    if (this instanceof SingleOutputStreamOperator) {     ((SingleOutputStreamOperator<?, ?>) this) .setMutability(false);    }
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Test   public void testMultipleAlternativesWithCommonLabel_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(639);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
*       * @return the message.       */     @Message(id = 15843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")      String invalidRolloutPlan(Set<String> groups)      /**
*/      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() +                  "statuses/public_timeline.json", false));      }
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
void waiting() throws InterruptedException {        try {         while (new MetaTableLocator().metaRegionLocation(watcher, 100) == null) {        } catch (NotAllMetaRegionsOnlineException e) {        }
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(500);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public Label extends Widget {    private LabelStyle style;    private final TextBounds bounds = new TextBounds();   private String text;    private BitmapFontCache cache;    private float prefWidth, prefHeight;    private int labelAlign = Align.LEFT;
}              }              if (requiredMessageListener == null) {                 throw MESSAGES.unknownMessageListenerType(resourceAdapterName, messageListenerInterface.getName());              }              final Activation activation = requiredMessageListener.getActivation();
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNano(System.nanoTime() - start);          }          return result;      }
private final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    @GwtIncompatible("Reader/Writer")   private void testStreamingEncodingWithSeparators(        BaseEncoding encoding, String decoded, String encoded) throws IOException {      testStreamingEncoding(encoding, decoded, encoded);
ClientConfig jerseyConfig = new ClientConfig();    Client client = ClientBuilder.newClient(jerseyConfig);   client = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS, 1));    WebTarget resource = client.target(getBaseUri()).path("auth-digest");
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;"          } else if (propertyClass == double.class) {             mw.visitVarInsn(LLOAD, context.var("double"));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;"          } else if (propertyClass == boolean.class) {             mw.visitVarInsn(LLOAD, context.var("boolean"));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;B)Ljava/lang/String;"          }
Executable testMethod = injectorSourceFactory::create;          InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);          assertAll("Checking Exception including cause",             () -> assertThat("Unexpected exception message", actualThrown.getMessage(), is(equalTo("Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor."))),              () -> assertThat("Unexpected exception cause class", actualThrown.getCause(), isA(IllegalAccessException.class))          );      }
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(239);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgram(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
protected R visitCreateTable(CreateTable node, C context)      {         return visitNode(node, context);      }      protected R visitDropTable(DropTable node, C context)      {         return visitNode(node, context);      } 
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);   }
public static interface WordpressEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedWordpressEndpointProducerBuilder advanced() {
private final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (getDomain() == null && c.getDomain() != null) {              return -1;         } else if (c.getDomain() == null) {              return 1;          }          v = getDomain().compareToIgnoreCase(c.getDomain());
private Object value;     public ObjectRecord() {      }     public ObjectRecord(Data key, Object value) {          super(key);          this.value = value;      }
"JSC_REFERENCE_BEFORE_DECLARE",        "Variable referenced before declaration: {0}";   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
* balancing purpose at a datanode     */    public static final int MAX_NUM_CONCURRENT_MOVES = 5;   public static final int MAX_NO_PENDING_BLOCK_INTERATIONS = 5;   private static final String USAGE = "Usage: java "        + Balancer.class.getSimpleName()
public static interface SpringLdapEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedSpringLdapEndpointBuilder advanced() {
@Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {    }    @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false) {
}               if (bulb > 5) {                   sendOn(bulb, bridgeId);                  Thread.sleep(50);                   String messageBytes = "40:" + Integer.toHexString(milightColorNo) + ":55";                   sendMessage(messageBytes, bridgeId);               }
public static interface BeanstalkEndpointBuilder              extends                  BeanstalkEndpointConsumerBuilder, BeanstalkEndpointProducerBuilder {          default AdvancedBeanstalkEndpointBuilder advanced() {
