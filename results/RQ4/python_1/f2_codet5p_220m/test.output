using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.UI; using System.Web.UI.WebControls; using System.Web.UI.WebControls.WebParts; using System.Web.UI.HtmlControls; using System.Web.UI.HtmlControls.WebParts; using System.Web.UI.HtmlControls.WebPartsHeader; using System.Web.UI.HtmlControls.WebPartsFooter; using System.Web.UI.HtmlControls.WebPartsHeaderImage; using System.Web.UI.HtmlControls.WebPartsFooterImage; using System.Web.UI.HtmlControls.WebPartsHeaderText; using System.Web.UI.HtmlControls.WebPartsFooterText; using System.Web.UI.HtmlControls.WebPartsHeaderTextImage; using System.Web.UI.HtmlControls.WebPartsFooterTextImage; using System.Web.UI.HtmlControls.WebPartsHeaderTextImage; using System.Web.UI.HtmlControls.WebPartsFooterTextImage; using System.Web.UI.HtmlControls.WebPartsHeaderTextText; using System.Web.UI.HtmlControls.WebPartsFooterTextImage; using System.Web.UI.HtmlControls.WebPartsHeaderTextTextImage; using System.Web.UI.HtmlControls.WebPartsFooterTextTextImage; using System.Web.UI.HtmlControls.WebPartsHeaderTextTextImage; using System.Web.UI.HtmlControls.WebPartsFooterTextTextImage; using System.Web.UI.HtmlControls.WebPartsHeaderTextTextImage; using System.Web.UI.HtmlControls.WebPartsFooterTextTextImage; using System.Web.UI.HtmlControls.WebPartsHeaderTextTextImage; using System.Web.UI.HtmlControls.WebPartsFooterTextTextImage; using System.Web.UI.HtmlControls.WebPartsHeaderTextTextImage; using System.Web.UI.HtmlControls.WebPartsFooterTextTextImage; using System.Web.UI.HtmlControls.WebPartsHeaderTextTextImage; using System.Web.UI.HtmlControls.WebPartsFooterTextTextImage; using System.Web.UI.HtmlControls.Web
 class HiveCommandClient(HiveClient):     def __init__(self, hive_client, partition=None):         super(HiveCommandClient, self).__init__()         self.hive_client = hive_client         self.partition = partition      def run_hive_cmd(self, command):         return self.hive_client.run_hive_cmd(command)      def run_hive_cmd_with_partition(self, command):         return self.hive_client.run_hive_cmd_with_partition(command)      def run_hive_cmd_with_database(self, command):         return self.hive_client.run_hive_cmd_with_database(command)      def run_hive_cmd_with_table(self, command):         return self.hive_client.run_hive_cmd_with_table(command)      def run_hive_cmd_with_partition(self, command):         return self.hive_client.run_hive_cmd_with_partition(command)      def run_hive_cmd_with_database(self, command):         return self.hive_client.run_hive_cmd_with_database(command)      def run_hive_cmd_with_table(self, command):         return self.hive_client.run_hive_cmd_with_table(command)      def run_hive_cmd_with_partition(self, command):         return self.hive_client.run_hive_cmd_with_partition(command)      def run_hive_cmd_with_database(self, command):         return self.hive_client.run_hive_cmd_with_database(command)      def run_hive_cmd_with_table(self, command):         return self.hive_client.run_hive_cmd_with_table(command)      def run_hive_cmd_with_partition(self, command):         return self.hive_client.run_hive_cmd_with_
     def __init__(self, *args, **kwargs):         BaseGrouper.__init__(self, *args, **kwargs)         self.ngroups = len(self.binlabels)         self.binlabels = []         self.ngroups = len(self.binlabels[0])         self.ngroups = len(self.binlabels[1])         self.ngroups = len(self.binlabels[2])         self.ngroups = len(self.binlabels[3])         self.ngroups = len(self.binlabels[4])         self.ngroups = len(self.binlabels[5])         self.ngroups = len(self.binlabels[6])         self.ngroups = len(self.binlabels[7])         self.ngroups = len(self.binlabels[8])         self.ngroups = len(self.binlabels[9])         self.ngroups = len(self.binlabels[10])         self.ngroups = len(self.binlabels[11])         self.ngroups = len(self.binlabels[12])         self.ngroups = len(self.binlabels[13])         self.ngroups = len(self.binlabels[14])         self.ngroups = len(self.binlabels[15])         self.ngroups = len(self.binlabels[16])         self.ngroups = len(self.binlabels[17])         self.ngroups = len(self.binlabels[18])         self.ngroups = len(self.binlabels[19])         self.ngroups = len(self.binlabels[20])         self.ngroups = len(self.binlabels[21])         self.ngroups = len(self.binlabels[22])         self.ngroups = len(self.binlabels[23])         self.ngroups = len(self.binlabels[24])         self.ngroups = len(self.binlabels[25])         self.ngroups = len(self.binlabels[26])         self.ngroups = len(self.binlabels[27])         self.ngroups = len(
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertTrue; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.when;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.ImmutableSortedMap; import com.google.common.collect.ImmutableSortedSet; import com.google.common.collect.ImmutableSortedSet.Builder; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Ordering; import com.google.common.collect.SortedMap; import com.google.common.collect.SortedSet; import com.google.common.collect.TreeMap; import com.google.common.collect.TreeSet; import com.google.common.collect.TreeMultimap; import com.google.common.collect.TreeMultimap; import com.google
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.ImmutableSortedMap; import com.google.common.collect.ImmutableSortedSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Multimaps; import com.google.common.collect.Multimaps.Builder; import com.google.common.collect.Multimap; import com.google.common.collect.Multimaps; import com.google.common.collect.Multimaps.ImmutableMap; import com.google.common.collect.Multimaps.ImmutableSet; import com.google.common.collect.Multimaps; import com.google.common.collect.Multimaps.ImmutableSortedSet; import com.google.common.collect.SortedMap; import com.google.common.collect.SortedSet; import com.google.common.collect.TreeMap; import com.google.common.collect.TreeSet; import org
  def __init__(self):     self.named_response_middleware = {}     self.named_response_middleware[_rn] = deque()     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic())     self.named_response_middleware[_rn].append(Sanic()) 
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataAnnotations; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Effects; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D; using System.Windows.Media.TextFormatting; using System.Windows.Documents; using System.Windows.Shapes; using System.Windows.Navigation; using System.Windows.Shapes.Design; using System.Windows.Shapes.Designer; using System.Windows.Shapes.DesignerResources; using System.Windows.Shapes.DesignerControls; using System.Windows.Shapes.DesignerShapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataAnnotations; using System.Windows.Shapes; using System.Windows.Shapes.DataContext; using System.Windows.Shapes.Shapes; using System.Windows.Navigation; using System.Windows.Shapes.Design; using System.Windows.Shapes.DesignerResources; using System.Windows.Shapes.DesignerControls; using System.Windows.Shapes.DesignerShapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataContext; using System.Windows.Shapes.DesignerShapes; using System.Windows.Shapes; using System.Windows.Shapes.ShapesPrimitives; using System.Windows.Shapes.ShapesPrimitives; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.ShapesPrimitives; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.
 = tf.nn.conv2d_transpose(x, kernel, output_shape, strides, padding=padding, data_format=tf_data_format) def conv2d_transpose(x, kernel, output_shape, strides=(1, 1), padding=None, data_format=None):     x = tf.nn.conv2d_transpose(x, kernel, output_shape, strides=strides, padding=padding, data_format=data_format)     if data_format == 'channels_first' and tf_data_format == 'NHWC': x = tf.transpose(x, (0, 3, 1, 2))     return x def conv2d_transpose(x, kernel, output_shape, strides=(1, 1), padding=None, data_format=None):     x = tf.nn.conv2d_transpose(x, kernel, output_shape, strides=strides, padding=padding, data_format=data_format)     if data_format == 'channels_first' and tf_data_format == 'NHWC': x = tf.transpose(x, (0, 3, 1, 2))     return x def conv2d_transpose(x, kernel, output_shape, strides=(1, 1), padding=None, data_format=None):     x = tf.nn.conv2d_transpose(x, kernel, output_shape, strides=strides, padding=padding, data_format=data_format)     if data_format == 'channels_first' and tf_data_format == 'NHWC': x = tf.transpose(x, (0, 3, 1, 2))     return x def conv2d_transpose(x, kernel, output_shape, strides=(1, 1), padding=None, data_format=None):     x = tf.nn.conv2d_transpose(x, kernel, output_shape, strides=strides, padding=padding, data_format=data_format)     if data_format == 'channels_first' and tf_data_format == 'NHWC': x = tf.transpose(x, (0, 3, 1, 2
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertTrue; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.when;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.SettableFuture; import org.apache.beam.sdk.coders.Coder; import org.apache.beam.sdk.coders.CoderException; import org.apache.beam.sdk.coders.StringUtf8Coder; import org.apache.beam.sdk.options.PipelineOptions; import org.apache.beam.sdk.options.PipelineOptionsFactory; import org.apache.beam.sdk.testing.TestPipeline; import org.apache.beam.sdk.testing.TestPipelineFactory; import org.apache.beam.sdk.transforms.DoFn; import org.apache.beam.sdk
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.SettableFuture; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactoryProvider; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataAnnotations; using System.Windows.Shapes.DataMember; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Effects; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D; using System.Windows.Media.Media3D.Effects; using System.Windows.Media.Media3D.Media3DResources; using System.Windows.Media.Media3D.TextFormatting; using System.Windows.Navigation; using System.Windows.Shapes.Drawing; using System.Windows.Shapes.ShapesCommon; using System.Windows.Shapes.DataAnnotations; using System.Windows.Shapes.DataMember; using System.Windows.Documents; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D; using System.Windows.Media.Media3D.Effects; using System.Windows.Media.Media3D.Media3DResources; using System.Windows.Media.Media3D.TextFormatting; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Design; using System.Windows.Shapes.ShapesCommon; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataAnnotations; using System.Windows.Shapes.DataMember; using System.Windows.Documents; using System.Windows.Media; using System.Windows.Media.Media3D; using System.Windows.Media.Media3D.Effects; using System.Windows.Media.Media3D.Media3DResources
     if dim_size is None:         return None     if stride_size is None:         return None     if kernel_size is None:         return None     if padding is None:         return None     if output_padding is None:         return None      dim_size = int(dim_size)     stride_size = int(stride_size)     kernel_size = int(kernel_size)     padding = int(padding)     output_padding = int(output_padding)      dim_size = int(dim_size)     stride_size = int(stride_size)     kernel_size = int(kernel_size)     padding = int(padding)     output_padding = int(output_padding)      dim_size = int(dim_size)     stride_size = int(stride_size)     kernel_size = int(kernel_size)     padding = int(padding)     output_padding = int(output_padding)      dim_size = int(dim_size)     stride_size = int(stride_size)     kernel_size = int(kernel_size)     padding = int(padding)     output_padding = int(output_padding)      dim_size = int(dim_size)     stride_size = int(stride_size)     kernel_size = int(kernel_size)     padding = int(padding)     output_padding = int(output_padding)      dim_size = int(dim_size)     stride_size = int(stride_size)     kernel_size = int(kernel_size)     padding = int(padding)     output_padding = int(output_padding)      dim_size = int(dim_size)     stride_size = int(stride_size)     kernel_size = int(kernel_size)     padding = int(padding)     output_padding = int(output_padding)      dim_size = int(dim_size)     stride_size = int(stride_size)     kernel_size = int(kernel_size)     padding = int(padding)     output_
            val_enqueuer_gen = iter_sequence_infinite(generator)             if val_enqueuer_gen:                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer_gen = iter_sequence_infinite(val_enqueuer_gen)                 val_enqueuer
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.VmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ign
     def __init__(self, index_array, image_data_generator):         Iterator.__init__(self)         self.index_array = index_array         self.image_data_generator = image_data_generator      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __next__(self):         return self.image_data_generator.random_transform(self.x.astype(K.floatx()))      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)      def __iter__(self):         return NumpyArrayIterator(self.index_array, self.image_data_generator)     
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_EXTENSIONS_API_EXTENSION_API_HANDLER_H_ #define CHROME_BROWSER_EXTENSIONS_API_EXTENSION_API_HANDLER_H_  #include "base/basictypes.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "chrome/browser/extensions/api/extension_api_handler.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.Cache
[np.isinf(values)] = np.NaN          return values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(values)] = values[np.isinf(
 from __future__ import absolute_import from __future__ import division from __future__ import print_function from __future__ import unicode_literals  import numpy as np import pytest   class BaseComparisonOpsTests(BaseOpsUtil):     def test_eq(self):         self.assertTrue(np.equal(1, 2))         self.assertTrue(np.equal(1, 3))         self.assertTrue(np.equal(1, 4))         self.assertTrue(np.equal(1, 5))         self.assertTrue(np.equal(1, 6))         self.assertTrue(np.equal(1, 7))         self.assertTrue(np.equal(1, 8))         self.assertTrue(np.equal(1, 9))         self.assertTrue(np.equal(1, 10))         self.assertTrue(np.equal(1, 11))         self.assertTrue(np.equal(1, 12))         self.assertTrue(np.equal(1, 13))         self.assertTrue(np.equal(1, 14))         self.assertTrue(np.equal(1, 15))         self.assertTrue(np.equal(1, 16))         self.assertTrue(np.equal(1, 17))         self.assertTrue(np.equal(1, 18))         self.assertTrue(np.equal(1, 19))         self.assertTrue(np.equal(1, 20))         self.assertTrue(np.equal(1, 21))         self.assertTrue(np.equal(1, 22))         self.assertTrue(np.equal(1, 23))         self.assertTrue(np.equal(1, 24))         self.assertTrue(np.equal(1, 25))         self.assertTrue(np.equal(1, 26))         self.assertTrue(np.equal(1, 27))         self.assertTrue(np.equal(1, 28))         self.assertTrue(np.equal(1, 29))         self.assertTrue(np.equal(1, 30))         self.assertTrue(np.
     def __init__(self):         Scheduler.__init__(self)      def _rank(self):         return self._rank()      def _rank(self):         return self._rank() + 1      def _rank(self):         return self._rank() + 2      def _rank(self):         return self._rank() + 3      def _rank(self):         return self._rank() + 4      def _rank(self):         return self._rank() + 5      def _rank(self):         return self._rank() + 6      def _rank(self):         return self._rank() + 7      def _rank(self):         return self._rank() + 8      def _rank(self):         return self._rank() + 9      def _rank(self):         return self._rank() + 10      def _rank(self):         return self._rank() + 11      def _rank(self):         return self._rank() + 12      def _rank(self):         return self._rank() + 13      def _rank(self):         return self._rank() + 14      def _rank(self):         return self._rank() + 15      def _rank(self):         return self._rank() + 16      def _rank(self):         return self._rank() + 17      def _rank(self):         return self._rank() + 18      def _rank(self):         return self._rank() + 19      def _rank(self):         return self._rank() + 20      def _rank(self):         return self._rank() + 21      def _rank(self):         return self._rank() + 22      def _rank(self):         return self._rank() + 23      def _rank(self):         return self._rank() + 24      def _rank(self):         return self._rank() + 25      def _rank(self):         return self._rank() + 26      def _rank(self):
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryService; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryServiceFactory; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("CSharp.Core")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("CSharp.Core")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
(failure):              case = _create_testcase(method, 'errback')             exc_info = failure.value, failure.type, failure.getTracebackObject()              results.addError(case, exc_info)          request.error = cb_wrapper(failure)          request.abort = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb_wrapper(failure)          request.aborted = cb
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("CSharp")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("CSharp")] [assembly: AssemblyCopyright("Copyright ©  2014")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("e8e8e8e8e8")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: AssemblyInformationalVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: AssemblyFileDescription("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("CSharp")] [assembly: AssemblyCopyright("Copyright ©  2014")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting Com
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
#!/usr/bin/env python # -*- coding: utf-8 -*-  import os import sys import logging import logging.config import logging.handlers import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler import logging.handlers.RotatingFileHandler
_format = next(                                 fo for fo in formats                                 if fo['format_id'] == representation_id)                         except StopIteration:                             full_info = formats_dict.get(representation_id, {}).copy()                             full_info.update(f)                             formats.append(full_info)                         else:                             existing_format = next(                                 fo for fo in formats                                 if fo['format_id'] == representation_id)                         except StopIteration:                             full_info = formats_dict.get(representation_id, {}).copy()                             full_info.update(f)                             formats.append(full_info)                         else:                             existing_format = next(                                 fo for fo in formats                                 if fo['format_id'] == representation_id)                         except StopIteration:                             full_info = formats_dict.get(representation_id, {}).copy()                             full_info.update(f)                             formats.append(full_info)                         else:                             existing_format = next(                                 fo for fo in formats                                 if fo['format_id'] == representation_id)                         except StopIteration:                             full_info = formats_dict.get(representation_id, {}).copy()                             full_info.update(f)                             formats.append(full_info)                         else:                             existing_format = next(                                 fo for fo in formats                                 if fo['format_id'] == representation_id)                         except StopIteration:                             full_info = formats_dict.get(representation_id, {}).copy()                             full_info.update(f)                             formats.append(full_info)                         else:                             existing_format = next(                                 fo for fo in formats                                 if fo['format_id'] == representation_id)                         except StopIteration:                             full_info = formats_dict.get(representation_id, {}).copy()                             full_info.update(f)                             formats.append(full_info)                         else:                             existing_format = next(                                 fo for fo in formats                                 if fo['format_id'] == representation_id)                         except StopIteration:                             full_info = formats_dict.get(representation_id, {}).copy()                             full_info.update(f)                             formats.append(full_info)                         else:                             existing_format = next(                                 fo for fo in formats                                 if fo['format_id'] == representation
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.junit.Test;  import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronization
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_USER_MANAGER_H_ #define CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_USER_MANAGER_H_  #include <string> #include <vector>  #include "base/basictypes.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_ptr_factory.h" #include "base/memory/weak_ptr_set.h" #include "base/memory/weak_vector.h" #include "base/memory/weak_string.h" #include "base/time/time.h" #include "chrome/browser/chromeos/login/user_manager.h" #include "chrome/browser/chromeos/login/user_manager_factory.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_data_source_observer.h" #include "content/public/browser/web_ui_util.h" #include "
[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)      table = agged     if table.index.nlevels > 1:         for i in range(table.index.nlevels):             pivot_table(agged[i])  def maybe_downcast_to_dtype(agged[v], data[v].dtype):     if agged[v].dtype == data[v].dtype:         return agged[v]     else:         return data[v].dtype  def maybe_downcast_from_dtype(agged[v], data[v].dtype):     if agged[v].dtype == data[v].dtype:         return agged[v]     else:         return data[v].dtype  def maybe_downcast_to_index(agged[v], data[v].index):     if agged[v].dtype == data[v].dtype:         return agged[v]     else:         return data[v].index  def maybe_downcast_from_index(agged[v], data[v].index):     if agged[v].dtype == data[v].dtype:         return agged[v]     else:         return data[v].index  def maybe_downcast_to_array(agged[v], data[v].array):     if agged[v].dtype == data[v].dtype:         return agged[v]     else:         return data[v].array  def maybe_downcast_from_array(agged[v], data[v].array):     if agged[v].dtype == data[v].dtype:         return agged[v]     else:         return data[v].array  def maybe_downcast_to_dict(agged[v], data[v].dict):     if agged[v].dtype == data[v].dtype:         return agged[v]     else:         return data[v].dict  def maybe_downcast_from_dict(agged[v], data[v].dict):     if agged[v].dtype ==
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
                      tag = tag.replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("_", "_").replace("
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("CSharp.Tests")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("Microsoft")] [assembly: AssemblyProduct("CSharp.Tests")] [assembly: AssemblyCopyright("Copyright © Microsoft 2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("a9b9b9b9-1e6c-4f6f-b9e5-b6f4f4f4f4")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROME_BROWSER_UI_WEBUI_CHROME_BROWSER_UI_H_ #define CHROME_BROWSER_UI_WEBUI_CHROME_BROWSER_UI_H_  #include <string>  #include "base/macros.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "chrome/browser/chrome_notification_types.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_data_source_observer.h" #include "content/public/browser/web_ui_data_source_factory.h" #include "content/public/browser/web_ui_data_source_view.h" #include "content/public/browser/web_ui_data_source_view_observer.h" #
 from __future__ import absolute_import from __future__ import division from __future__ import print_function from __future__ import unicode_literals  import numpy as np from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert_array_almost_equal from numpy.testing import assert
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
 class BracketTracker:     def __init__(self, leaf):         self._lambda_arguments = False         self.depth = 0         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False         self._lambda_arguments = False 
_NAN  class DatetimeIndex(ExtensionIndex):     def __init__(self, *args, **kwargs):         super(DatetimeIndex, self).__init__(*args, **kwargs)         self.dtype = self.dtype if is_period_dtype(self) else None      def __getitem__(self, index):         if isinstance(index, slice):             return self[index]         else:             return self[index]      def __setitem__(self, index, value):         if isinstance(index, slice):             self[index] = value         else:             self[index] = value      def __delitem__(self, index):         if isinstance(index, slice):             del self[index]         else:             del self[index]      def __getitem__(self, index):         if isinstance(index, slice):             return self[index]         else:             return self[index]      def __setitem__(self, index, value):         if isinstance(index, slice):             self[index] = value         else:             self[index] = value      def __delitem__(self, index):         if isinstance(index, slice):             del self[index]         else:             del self[index]      def __getitem__(self, index):         if isinstance(index, slice):             return self[index]         else:             return self[index]      def __setitem__(self, index, value):         if isinstance(index, slice):             self[index] = value         else:             self[index] = value      def __delitem__(self, index):         if isinstance(index, slice):             del self[index]         else:             del self[index]      def __getitem__(self, index):         if isinstance(index, slice):             return self[index]         else:             return self[index]      def __setitem__(self, index, value):         if isinstance(index, slice):             self[index] = value         else:            
  def _isna_ndarraylike(obj):     if isinstance(obj, np.ndarray):       return _isna_new(obj)     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(obj))     elif isinstance(obj, np.ndarray.ndarray):       return _isna_ndarraylike(np.asarray(
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_H_ #define CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_H_  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertTrue; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.times; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.verifyNoMoreInteractions; import static org.mockito.Mockito.when;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.SettableFuture; import org.apache.beam.sdk.coders.Coder; import org.apache.beam.sdk.coders.CoderException; import org.apache.beam.sdk.coders.StringUtf8Coder; import org.apache.beam.sdk.options.PipelineOptions; import org.apache.beam.sdk.options.PipelineOptionsFactory; 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_EXTENSIONS_API_EXTENSION_API_H_ #define CHROME_BROWSER_EXTENSIONS_API_EXTENSION_API_H_  #include <string> #include <vector>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/ref_counted.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_ptr_factory.h" #include "base/memory/weak_ptr_set.h" #include "base/memory/weak_vector.h" #include "base/time/time.h" #include "chrome/browser/extensions/api/extension_api.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/notification_util.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_util.h" #include "content/public/browser/web
 = 5  class ReduceLROnPlateau(Callback):              self.mode = 'min'          if (self.mode == 'min' or             (self.mode == 'min' and 'acc' not in self.monitor)):             self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)              self.best = np.Inf          else:             self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)              self.best = -np.Inf          self.cooldown = 5  class ReduceLROnPlateau(Callback):              self.mode = 'min'          if (self.mode == 'min' or             (self.mode == 'min' and 'acc' not in self.monitor)):             self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)              self.best = np.Inf          else:             self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)              self.best = -np.Inf          self.cooldown = 5  class ReduceLROnPlateau(Callback):              self.mode = 'min'          if (self.mode == 'min' or             (self.mode == 'min' and 'acc' not in self.monitor)):             self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)              self.best = -np.Inf          else:             self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)              self.best = -np.Inf          self.cooldown = 5  class ReduceLROnPlateau(Callback):              self.mode = 'min'          if (self.mode == 'min' or             (self.mode == 'min' and 'acc' not in self.monitor)):             self.monitor_op = lambda a, b: np.less(a, b - self.epsilon)              self.best = -np.Inf          else:             self.monitor_op = lambda a, b: np.greater(a, b + self.epsilon)              self.best
     def _get_combined_index(obs_idxes: List[Index], intersect: bool, sort: bool) -> Index:         if intersect:             obs_idxes = [obj._get_axis(axis) for obj in obs_idxes]         else:             obs_idxes = [obj._get_axis(axis) for obj in obs_idxes]         return _get_distinct_objs(obs_idxes)      return _get_combined_index  def get_objs_combined_axis(objs: List[Index], intersect: bool, sort: bool) -> List[Index]:     return get_objs_combined_axis(objs, intersect=intersect, sort=sort)  def get_objs_combined_axis(objs: List[Index], intersect: bool, sort: bool) -> List[Index]:     return get_objs_combined_axis(objs, intersect=intersect, sort=sort)  def get_objs_combined_axis(objs: List[Index], intersect: bool, sort: bool) -> List[Index]:     return get_objs_combined_axis(objs, intersect=intersect, sort=sort)  def get_objs_combined_axis(objs: List[Index], intersect: bool, sort: bool) -> List[Index]:     return get_objs_combined_axis(objs, intersect=intersect, sort=sort)  def get_objs_combined_axis(objs: List[Index], intersect: bool, sort: bool) -> List[Index]:     return get_objs_combined_axis(objs, intersect=intersect, sort=sort)  def get_objs_combined_axis(objs: List[Index], intersect: bool, sort: bool) -> List[Index]:     return get_objs_combined_axis(objs, intersect=intersect, sort=sort)  def get_objs_combined_axis(objs: List[Index], intersect: bool, sort: bool) -> List[Index]:     return get_objs_combined_axis(objs, intersect=intersect, sort=sort)  def get_objs_combined_axis(objs: List[Index], intersect: bool, sort: bool) -> List[Index]:     return get_objs_combined_axis(objs
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
            x = self.samplewise_center(x)             if self.preprocessing_function:             x = self.preprocessing_function(x)             if self.rescale:              x = self.rescale(x)             if self.samplewise_center: x = self.samplewise_center(x)             return x  class ImageDataGenerator(object):              The outputs, normalized.         if self.preprocessing_function:             x = self.preprocessing_function(x)             if self.rescale:              x *= self.rescale(x)             if self.samplewise_center: x = self.samplewise_center(x)             return x  class ImageDataGenerator(object):              The outputs, normalized.         if self.preprocessing_function:             x = self.preprocessing_function(x)             if self.rescale:              x *= self.rescale(x)             if self.samplewise_center: x = self.samplewise_center(x)             return x  class ImageDataGenerator(object):              The outputs, normalized.         if self.preprocessing_function:             x = self.preprocessing_function(x)             if self.rescale:              x *= self.rescale(x)             if self.samplewise_center: x = self.samplewise_center(x)             return x  class ImageDataGenerator(object):              The outputs, normalized.         if self.preprocessing_function:             x = self.preprocessing_function(x)             if self.rescale:              x *= self.rescale(x)             if self.samplewise_center: x = self.samplewise_center(x)             return x  class ImageDataGenerator(object):              The outputs, normalized.         if self.preprocessing_function:             x = self.preprocessing_function(x)             if self.rescale:              x *= self.rescale(x)             if self.samplewise_center: x = self.samplewise_center(x)             return x  class ImageDataGenerator(object):              The outputs, normalized.         if self.preprocessing_function:             x = self.preprocessing_function(x)             if
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.List; import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.processors.cache.CacheAtomicityMode; import org.apache.ignite.internal.processors.cache.CacheMode; import org.apache.ignite.internal.processors.cache.CacheWriteSynchronizationMode; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks
 def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),          padding: string, "same" or "valid".          data_format: "channels_last" or "channels_first".              Whether to use Theano or TensorFlow data format         in inputs/kernels/outputs.          ValueError: if using an even kernel size with padding 'same'.  def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),          padding: string, "same" or "valid".          data_format: "channels_last" or "channels_first".              Whether to use Theano or TensorFlow data format         in inputs/kernels/outputs.          ValueError: if using an even kernel size with padding 'same'.  def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),          padding: string, "same" or "valid".          data_format: "channels_last" or "channels_first".              Whether to use Theano or TensorFlow data format         in inputs/kernels/outputs.          ValueError: if using an even kernel size with padding 'same'.  def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),          padding: string, "same" or "valid".          data_format: "channels_last" or "channels_first".              Whether to use Theano or TensorFlow data format         in inputs/kernels/outputs.          ValueError: if using an even kernel size with padding 'same'.  def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),          padding: string, "same" or "valid".          data_format: "channels_last" or "channels_first".              Whether to use Theano or TensorFlow data format         in inputs/kernels/outputs.          ValueError: if using an even kernel size with padding 'same'.  def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),          padding: string, "same" or "valid".          data_format: "channels_last" or "channels_first".              Whether to use Theano or TensorFlow data format         in inputs/kernels/outputs.          ValueError: if using an even kernel size with
_url(url)      def make_requests_from_url(self, url):         if self.make_requests_from_url is not Spider.make_requests_from_url:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override make_requests_from_url method instead."              )              for url in self.start_urls:                  yield self.make_requests_from_url(url)      def make_requests_from_url(self, url):         if self.make_requests_from_url is not Spider.make_requests_from_url:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override make_requests_from_url method instead."              )              for url in self.start_urls:                  yield self.make_requests_from_url(url)      def make_requests_from_url(self, url):         if self.make_requests_from_url is not Spider.make_requests_from_url:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override make_requests_from_url method instead."              )              for url in self.start_urls:                  yield self.make_requests_from_url(url)      def make_requests_from_url(self, url):         if self.make_requests_from_url is not Spider.make_requests_from_url:              warnings.warn(                 "Spider.make_requests_from_url method is deprecated; "                 "it won't be called in future Scrapy releases. "                 "Please override make_requests_from_url method instead."              )              for url in self.start_urls:                  yield self.make_requests_from_url(url)      def make_requests_from_url(self, url):         if self.make_requests_from_url is not Spider.make
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("CSharp")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("Microsoft")] [assembly: AssemblyProduct("CSharp")] [assembly: AssemblyCopyright("Copyright © Microsoft 2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("e8e8e8e8e8e8e8e8")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: ComVisible(false)]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.ImmutableSortedMap; import com.google.common.collect.ImmutableSortedSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Ordering; import com.google.common.collect.Sets; import com.google.common.util.concurrent.ThreadFactoryBuilder; import org.apache.beam.sdk.options.PipelineOptions; import org.apache.beam.sdk.options.PipelineOptionsFactory; import org.apache.beam.sdk.options.PipelineOptionsFactoryProvider; import org.apache.beam.sdk.options.PipelineOptionsFactoryProvider; import org.apache.beam.sdk.options.PipelineOptionsResolver; import org.apache.beam.sdk.options.PipelineOptionsSource; import org.apache.beam.sdk.options.PipelineOptionsSourceBuilder; import org.apache.beam.sdk.options.PipelineOptionsSourceType; import org.apache.beam.sdk.options.PipelineOptionsType; import
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
     def _getbool_axis(self, key, axis=None):         if isinstance(key, (ABCSeries, np.ndarray)) and key.ndim <= 1:             key = list(key)         elif isinstance(key, ABCDataFrame):             raise NotImplementedError(                 "Indexing a MultiIndex with a DataFrame key is not "                 "implemented"             )         elif hasattr(key, "ndim") and key.ndim > 1:             raise NotImplementedError(                 "Indexing a MultiIndex with a DataFrame key is not "                 "implemented"             )         else:             raise NotImplementedError(                 "Indexing a MultiIndex with a DataFrame key is not "                 "implemented"             )         return axis      def _getbool_axis(self, key, axis=None):         if isinstance(key, (ABCSeries, np.ndarray)) and key.ndim <= 1:             key = list(key)         elif isinstance(key, ABCDataFrame):             raise NotImplementedError(                 "Indexing a MultiIndex with a DataFrame key is not "                 "implemented"             )         elif hasattr(key, "ndim") and key.ndim > 1:             raise NotImplementedError(                 "Indexing a MultiIndex with a DataFrame key is not "                 "implemented"             )         else:             raise NotImplementedError(                 "Indexing a MultiIndex with a DataFrame key is not "                 "implemented"             )         return axis      def _getbool_axis(self, key, axis=None):         if isinstance(key, (ABCSeries, np.ndarray)) and key.ndim <= 1:             key = list(key)         elif isinstance(key, ABCDataFrame):             raise NotImplementedError(                 "Indexing a MultiIndex with a DataFrame key is not "                 "implemented"             )         elif hasattr(key, "ndim") and key.ndim > 1:             raise NotImplementedError(                 "Indexing a MultiIndex with a DataFrame key is not "                 "implemented"             )         else:             raise NotImplementedError(                 "Indexing a MultiIndex with a DataFrame key is not "                 "implemented"             )         return axis      def _getbool_axis(self
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util.common.guava.SequenceBuilder; import org.apache.druid.java.util.common.guava.Sequences; import org.apache.druid.java.util.common.guava.SequencesBuilder; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util
     def check_setitem_lengths(self, indexer, value, values):         if len(indexer) != len(value):             raise ValueError("indexer and value must be the same length")      def is_empty_indexer(self, indexer, arr_value):         return len(indexer) == 0 and len(arr_value) == 0      def is_empty_value(self, value):         return len(value) == 0      def is_empty_arr_value(self, arr_value):         return len(arr_value) == 0      def get_indexer(self):         return self.indexer      def get_value(self):         return self.value      def get_arr_value(self):         return self.arr_value      def set_indexer(self, indexer, value):         self.indexer = indexer         self.value = value      def set_value(self, value):         self.value = value      def set_arr_value(self, arr_value):         self.arr_value = arr_value      def get_indexer_value(self):         return self.indexer_value      def get_value_value(self):         return self.value_value      def get_arr_value_value(self):         return self.arr_value_value      def set_indexer_value(self, indexer_value):         self.indexer_value = indexer_value      def set_value_value(self, value_value):         self.value_value = value_value      def set_arr_value_value(self, arr_value_value):         self.arr_value_value = arr_value_value      def get_indexer_arr_value(self):         return self.indexer_arr_value      def get_value_arr_value(self):         return self.value_arr_value      def set_indexer_arr_value(self, indexer_arr_value):         self.indexer_arr_value = indexer_arr_value      def set_value_arr_value(self, value_arr
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.when;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.SettableFuture; import com.google.common.util.concurrent.ThreadFactoryBuilder; import org.apache.beam.sdk.coders.Coder; import org.apache.beam.sdk.coders.CoderException; import org.apache.beam.sdk.coders.StringUtf8Coder; import org.apache.beam.sdk.options.PipelineOptions; import org.apache.beam.sdk.options.PipelineOptionsFactory; import
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.FutureCallback; import org.apache.druid.java.util.common.util.concurrent.Futures; import org.apache.druid.java.util.common.util.con
(to_concat, keys))             codes_list.append(np.concatenate(codes_list, names))             return MultiInde(to_concat, codes_list)  def _make_concat_multiindex(zipped, keys, levels=None, names=None) -> MultiInde:     codes_list = []     for hlevel, level in zip(zipped, levels):         to_concat = []         for key, index in zip(hlevel, indexes):             try:                 i = level.get_loc(key)             except KeyError:                 raise ValueError(f"Key {key} not in level {level}") from err             to_concat.append(np.repeat(i, len(index)))             codes_list.append(np.concatenate(to_concat, keys))     return MultiInde(to_concat, codes_list)  def _make_concat_multiindex_multiindex(zipped, keys, levels=None, names=None) -> MultiInde:     codes_list = []     for hlevel, level in zip(zipped, levels):         to_concat = []         for key, index in zip(hlevel, indexes):             try:                 i = level.get_loc(key)             except KeyError:                 raise ValueError(f"Key {key} not in level {level}") from err             to_concat.append(np.repeat(i, len(index)))             codes_list.append(np.concatenate(to_concat, keys))     return MultiInde(to_concat, codes_list)  def _make_concat_multiindex_multiindex_multiindex(zipped, keys, levels=None, names=None) -> MultiInde:     codes_list = []     for hlevel, level in zip(zipped, levels):         to_concat = []         for key, index in zip(hlevel, indexes):             try:                 i = level.get_loc(key)             except KeyError:                 raise ValueError(f"Key {key} not in level {level}") from err             to_concat.append(np.repeat(i, len
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import
              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.add(self)              self.n = initial              return          if kwargs:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.remove(self)              self.n = initial              return          if kwargs:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.remove(self)              self.n = initial              return          if kwargs:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.remove(self)              self.n = initial              return          if kwargs:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.remove(self)              self.n = initial              return          if kwargs:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.remove(self)              self.n = initial              return          if kwargs:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.remove(self)              self.n = initial              return          if kwargs:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.remove(self)              self.n = initial              return          if kwargs:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.remove(self)              self.n = initial              return          if kwargs:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances.remove(self)              self.n = initial              return          if kwargs:              self.iterable = iterable              self.disable = disable              self.pos = self._get_free_pos(self)              self._instances
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.hyracks.algebricks.core.algebra.expressions.impl;  import org.apache.hyracks.algebricks.core.algebra.expressions.IExpressionEvaluator; import org.apache.hyracks.algebricks.core.algebra.expressions.IExpressionEvaluatorFactory; import org.apache.hyracks.algebricks.core.algebra.expressions.ILogicalExpressionEvaluator; import org.apache.hyracks.algebricks.core.algebra.expressions.ILogicalExpressionEvaluatorFactory; import org.apache.hyracks.algebricks.core.algebra.expressions.ILogicalExpressionEvaluatorFactoryFactory; import org.apache.hyracks.algebricks.core.algebra.expressions.IPropertyEvaluator; import org.apache.hyracks.algebricks.core.algebra.expressions.IPropertyEvaluatorFactory; import org.apache.hyracks.algebricks.core.algebra.expressions.IPropertyEvaluatorFactoryFactory; import org.apache.hyracks.algebricks.core.algebra.expressions.IVariableEvaluator; import org.apache.hyracks.algebricks.core.algebra.expressions.IVariableEvaluatorFactory; import org.apache.hyrack
[0]  class CategoricalBlock(ExtensionBlock):     def _holder(self):          return Categorical     def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values  class CategoricalBlock(ExtensionBlock):     def _holder(self):          return Categorical     def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values  class CategoricalBlock(ExtensionBlock):     def _holder(self):          return Categorical     def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values  class CategoricalBlock(ExtensionBlock):     def _holder(self):          return Categorical     def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values  class CategoricalBlock(ExtensionBlock):     def _holder(self):          return Categorical     def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values  class CategoricalBlock(ExtensionBlock):     def _holder(self):          return Categorical     def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values  class CategoricalBlock(ExtensionBlock):     def _holder(self):          return Categorical     def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values  class CategoricalBlock(ExtensionBlock):     def _holder(self):          return Categorical     def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values  class CategoricalBlock(ExtensionBlock):     def _holder(self):          return Categorical     def to_native_types(self, slicer=None, na_rep="", quoting=None, **kwargs):          values = self.values  class C
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_ #define CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_ptr_factory.h" #include "base/memory/weak_ptr_set.h" #include "base/memory/weak_ptr_util.h" #include "base/time/time.h" #include "base/values.h" #include "chrome/browser/chrome_notification_types.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_message_handler.h" #include "content/public/browser/web_ui_util.h" #include "content/public/browser/web_ui_view.h" #include "content/public/browser/web_ui_view_delegate.h" #include "content/public/browser/web_ui_view
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\Config\FileLocator; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\DependencyInjection\Loader;  /**  * This is the class that loads and manages your bundle configuration  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html}  */ class SymfonyFrameworkExtension extends Extension {     /**      * {@inheritdoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new Loader\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.yml');     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Controls.Primitives; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls; using System.Windows.Controls.Primitives; using System.Windows.Controls.Primitives; using System.Windows.Controls; using System.Windows.Controls.Primitives; using System.Windows.Controls; using System.Windows.Controls.Primitives; using System.Windows.Controls; using System.Windows
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_ #define CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_  #include <string>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_ptr_set.h" #include "base/memory/weak_vector.h" #include "base/time/time.h" #include "base/values.h" #include "chrome/browser/chrome_notification_types.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_util.h" #include "content/public/browser/web_ui_view.h" #include "content/public/browser/web_ui_view_delegate.h" #include "content/public/browser/web_ui_views.h" #include "content/public/browser/
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ConcurrentMap; import java.util.concurrent.atomic.AtomicBoolean; import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.GridCacheContext; import org.apache.ignite.internal.processors.cache.GridCacheSharedContext; import org.apache.ignite.internal.processors.cache.distributed.dht.distributed.dhtprocedure.GridDhtProcedure; import org.apache.ignite.internal.processors.cache.dis
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Animation; using System.Windows.Media.Effects; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D; using System.Windows.Media.TextFormatting; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell;  #if WINDOWS_PHONE_APP using Windows.ApplicationModel; using Windows.ApplicationModel.Activation; using Windows.UI.Xaml; using Windows.UI.Xaml.Controls; using Windows.UI.Xaml.Data; using Windows.UI.Xaml.Input; using Windows.UI.Xaml.Media; using Windows.UI.Xaml.Media.Imaging; using Windows.UI.Xaml.Navigation; #endif  // The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=234238  namespace WelcomePage {     /// <summary>     /// An empty page that can be used on its own or navigated to within a Frame.     /// </summary>     public sealed partial class MainPage : Page     {         /// <summary>         /// Initializes a new instance of the MainPage class.         /// </summary>         public MainPage()         {             this.InitializeComponent();             this.Suspending += OnSuspending;         }          /// <summary>         /// Invoked when the application is launched normally by the end user.  Other entry points         /// will be used such as when the application is launched to open a specific file.         /// </summary>         /// <param name="e">Details about the launch request and process.</param>         protected override void OnLaunched(LaunchActivatedEventArgs e)         {  #if DEBUG         if (
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReferenceFactory; import org.apache.hyracks.dataflow.common.data
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROME_BROWSER_UI_H_ #define CHROME_BROWSER_UI_WEBUI_CHROME_BROWSER_UI_H_  #include <string> #include <vector>  #include "base/macros.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_vector.h" #include "base/memory/weak_set.h" #include "base/memory/weak_vector.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_vector.h" #include "base/prefs/pref_service.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service_syncable_factory.h" #include "base/prefs/pref_service.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service_syncable_factory.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service_syncable.h" #include "base
 class EmptyLineTracker:     def __init__(self, current_line):         self.current_line = current_line         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.depth = 0         self.current_line.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReferenceFactory; import org.apache.hyracks
 + "\033[0m" def disp_len(data):     if len(data) == disp_len(data):         return len(data)     return len(data) - disp_len(data) 
.unstack(data, fill_value=fill_value)  def _stack_multiple(data, clocs, fill_value=None):              for i in range(len(clocs)):                  val = clocs[i]                  result = result.stack(val, fill_value=fill_value)                 clocs = [v if i > v else v - 1 for v in clocs]              return result.stack(data, fill_value=fill_value)  def _stack_multiple(data, clocs, fill_value=None):              for i in range(len(clocs)):                  val = clocs[i]                  result = result.stack(val, fill_value=fill_value)                 clocs = [v if i > v else v - 1 for v in clocs]              return result.stack(data, fill_value=fill_value)  def _stack_multiple(data, clocs, fill_value=None):              for i in range(len(clocs)):                  val = clocs[i]                  result = result.stack(val, fill_value=fill_value)                 clocs = [v if i > v else v - 1 for v in clocs]              return result.stack(data, fill_value=fill_value)  def _stack_multiple(data, clocs, fill_value=None):              for i in range(len(clocs)):                  val = clocs[i]                  result = result.stack(val, fill_value=fill_value)                 clocs = [v if i > v else v - 1 for v in clocs]              return result.stack(data, fill_value=fill_value)  def _stack_multiple(data, clocs, fill_value=None):              for i in range(len(clocs)):                  val = clocs[i]                  result = result.stack(val, fill_value=fill_value)                 clocs = [v if i > v else v - 1 for v in clocs]              return result.stack(data, fill_value=fill_value)  def _stack_multiple(data, clocs, fill_value=None):              for i in range(len(clocs)):                  val = clocs[
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryService; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryServiceFactory; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
     def __init__(self, min=None):         self.min = min         self.check_for_ordered("min")         self._codes = -1      def __getitem__(self, index):         return self._codes[index]      def __setitem__(self, index, value):         self._codes[index] = value      def __delitem__(self, index):         del self._codes[index]      def __len__(self):         return len(self._codes)      def __getitem__(self, index):         return self._codes[index]      def __setitem__(self, index, value):         self._codes[index] = value      def __delitem__(self, index):         del self._codes[index]      def __len__(self):         return len(self._codes)      def __getitem__(self, index):         return self._codes[index]      def __setitem__(self, index, value):         self._codes[index] = value      def __delitem__(self, index):         del self._codes[index]      def __len__(self):         return len(self._codes)      def __getitem__(self, index):         return self._codes[index]      def __setitem__(self, index, value):         self._codes[index] = value      def __delitem__(self, index):         del self._codes[index]      def __len__(self):         return len(self._codes)      def __getitem__(self, index):         return self._codes[index]      def __setitem__(self, index, value):         self._codes[index] = value      def __delitem__(self, index):         del self._codes[index]      def __len__(self):         return len(self._codes)      def __getitem__(self, index):         return self._codes[index]      def __setitem__(self, index, value):
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
 = re.compile(r"<[^>]+>")  ref_regex = re.compile(r"<[^>]+>")  ref_text_regex = re.compile(r"<[^>]+>")  ref_info_regex = re.compile(r"<[^>]+>")  ref_html_regex = re.compile(r"<[^>]+>")  ref_title_regex = re.compile(r"<[^>]+>")  ref_id_regex = re.compile(r"<[^>]+>")  ref_text_regex = re.compile(r"<[^>]+>")  ref_info_regex = re.compile(r"<[^>]+>")  ref_html_regex = re.compile(r"<[^>]+>")  ref_title_regex = re.compile(r"<[^>]+>")  ref_id_regex = re.compile(r"<[^>]+>")  ref_text_regex = re.compile(r"<[^>]+>")  ref_info_regex = re.compile(r"<[^>]+>")  ref_html_regex = re.compile(r"<[^>]+>")  ref_title_regex = re.compile(r"<[^>]+>")  ref_id_regex = re.compile(r"<[^>]+>")  ref_text_regex = re.compile(r"<[^>]+>")  ref_info_regex = re.compile(r"<[^>]+>")  ref_html_regex = re.compile(r"<[^>]+>")  ref_title_regex = re.compile(r"<[^>]+>")  ref_id_regex = re.compile(r"<[^>]+>")  ref_text_regex = re.compile(r"<[^>]+>")  ref_info_regex = re.compile(r"<[^>]+>")  ref_html_regex = re.compile(r"<[^>]+>")  ref_title_regex = re.compile(r"<[^>]+>")  ref_id_regex = re.compile(r"<[^>]+>")  ref_text_regex
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std
 self.ws_connection = None  class WebSocketHandler(tornado.web.RequestHandler):          .. versionadded:: 3.1         assert self.stream is not None         self.stream.set_nodelay(value)         def on_connection_open(self) -> None:          if self.ws_connection:             self.ws_connection.close()             self.ws_connection = None  class WebSocketHandler(tornado.web.RequestHandler):          .. versionadded:: 3.1         assert self.stream is not None         self.stream.set_nodelay(value)         def on_connection_error(self) -> None:          if self.ws_connection:             self.ws_connection.close()             self.ws_connection = None  class WebSocketHandler(tornado.web.RequestHandler):          .. versionadded:: 3.1         assert self.stream is not None         self.stream.set_nodelay(value)         def on_connection_close(self) -> None:          if self.ws_connection:             self.ws_connection.close()             self.ws_connection = None  class WebSocketHandler(tornado.web.RequestHandler):          .. versionadded:: 3.1         assert self.stream is not None         self.stream.set_nodelay(value)         def on_connection_open(self) -> None:          if self.ws_connection:             self.ws_connection.open()             self.ws_connection = None  class WebSocketHandler(tornado.web.RequestHandler):          .. versionadded:: 3.1         assert self.stream is not None         self.stream.set_nodelay(value)         def on_connection_error(self) -> None:          if self.ws_connection:             self.ws_connection.close()             self.ws_connection = None  class WebSocketHandler(tornado.web.RequestHandler):          .. versionadded:: 3.1         assert self.stream is not None         self.stream.set_nodelay(value)         def on_connection_close(self) -> None:          if self.ws_connection:             self.ws_connection.close()             self.ws_connection = None  class WebSocketHandler(tornado.web.RequestHandler):          .. versionadded:: 3
#!/usr/bin/env python # -*- coding: utf-8 -*-  import os import re import hashlib import hashlib.md5 import hashlib import hashlib.sha1 import hashlib.sha256 import hashlib.sha384 import hashlib.sha512 import hashlib.sha384 import hashlib.sha512 import hashlib.sha256 import hashlib.sha384 import hashlib.sha512 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 import hashlib.sha384 import hashlib.sha256 
     return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_field(field: Field) -> bool:      return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_field(field: Field) -> bool:      return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_field(field: Field) -> bool:      return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_field(field: Field) -> bool:      return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_field(field: Field) -> bool:      return (          field.shape == Shape.SINGLETON          and not lenient_issubclass(field.type_, BaseModel)          and not lenient_issubclass(field.type_, sequence_types + (dict,))          and not isinstance(field.schema, params.Body)     )  def is_scalar_sequence_field(field: Field) -> bool:     
["already_failed"] = {task for (task, status, ext) in task_history                                   if status == 'FAILED' and task not in set_tasks["already_done"] and task not in set_tasks["failed"]}     set_tasks["failed_already"] = {task for (task, status, ext) in task_history                                   if status == 'FAILED' and task not in set_tasks["already_done"] and task not in set_tasks["failed"]}     set_tasks["already_failed"] = {task for (task, status, ext) in task_history                                   if status == 'FAILED' and task not in set_tasks["already_done"] and task not in set_tasks["failed"]}     set_tasks["already_failed_already"] = {task for (task, status, ext) in task_history                                   if status == 'FAILED' and task not in set_tasks["already_done"] and task not in set_tasks["already_done"] and task not in set_tasks["failed"]}     set_tasks["already_failed_already"] = {task for (task, status, ext) in task_history                                   if status == 'FAILED' and task not in set_tasks["already_done"] and task not in set_tasks["already_done"] and task not in set_tasks["failed"]}     set_tasks["already_failed_already"] = {task for (task, status, ext) in task_history                                   if status == 'FAILED' and task not in set_tasks["already_done"] and task not in set_tasks["already_done"] and task not in set_tasks["failed"]}     set_tasks["already_failed_failed"] = {task for (task, status, ext) in task_history                                   if status == 'FAILED' and task not in set_tasks["already_done"] and task not in set_tasks["already_done"] and task not in set_tasks["failed"]}     set_tasks["already_failed_failed_already"] = {task for (task, status, ext) in task_history                                   if status == 'FAILED' and task not in set_tasks["already_done"] and task not in set_tasks["already_done"] and task not in set_tasks["failed"]}     set_
     def __init__(self):         self.has_value = False         self.value = None         self.is_bool = False         self.is_list = False      def __str__(self):         return self.value      def __repr__(self):         return self.value      def __eq__(self, other):         return self.value == other.value      def __ne__(self, other):         return not self.__eq__(other)      def __lt__(self, other):         return self.value < other.value      def __le__(self, other):         return self.value <= other.value      def __gt__(self, other):         return self.value > other.value      def __ge__(self, other):         return self.value >= other.value      def __le__(self, other):         return self.value <= other.value      def __ge__(self, other):         return self.value >= other.value      def __eq__(self, other):         return self.value == other      def __ne__(self, other):         return not self.__eq__(other)      def __lt__(self, other):         return self.value < other      def __le__(self, other):         return self.value <= other      def __gt__(self, other):         return self.value > other      def __ge__(self, other):         return self.value >= other      def __le__(self, other):         return self.value <= other      def __ge__(self, other):         return self.value >= other      def __eq__(self, other):         return self.value == other      def __ne__(self, other):         return not self.__eq__(other)      def __lt__(self, other):         return self.value < other      def __le__(self, other):         return self.value <= other      def __ge__(self, other): 
(FloatOrComplexBlock):          )          return formatter.get_result_as_array()     def should_store(self, value) -> bool:          return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype  class FloatOrComplexBlock(FloatOrComplexBlock):          )          return formatter.get_result_as_array()     def should_store(self, value) -> bool:          return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype  class FloatOrComplexBlock(FloatOrComplexBlock):          )          return formatter.get_result_as_array()     def should_store(self, value) -> bool:          return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype  class FloatOrComplexBlock(FloatOrComplexBlock):          )          return formatter.get_result_as_array()     def should_store(self, value) -> bool:          return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype  class FloatOrComplexBlock(FloatOrComplexBlock):          )          return formatter.get_result_as_array()     def should_store(self, value) -> bool:          return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype  class FloatOrComplexBlock(FloatOrComplexBlock):          )          return formatter.get_result_as_array()     def should_store(self, value) -> bool:          return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype  class FloatOrComplexBlock(FloatOrComplexBlock):          )          return formatter.get_result_as_array()     def should_store(self, value) -> bool:          return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype  class FloatOrComplexBlock(FloatOrComplexBlock):          )          return formatter.get_result_as_array()     def should_store(self, value) -> bool:          return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype  class FloatOrComplexBlock(FloatOrComplexBlock):         
(self._codes)  class Categorical(ExtensionArray, PandasObject):     def __init__(self, codes, skipna=False):         self._codes = codes         self._skipna = skipna      def __getitem__(self, index):         return self._codes[index]      def __len__(self):         return len(self._codes)      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __len__(self):         return len(self._codes)      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def __getitem__(self, index):         return self._codes[index]      def
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('price')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
)         else:                  steps_done = len(generator)         outs_per_batch.append(len(generator))         batch_sizes.append(len(generator))         for i in range(steps_done):             outs_per_batch[i] = len(generator[i])             batch_sizes[i] = len(generator[i])  def evaluate_generator_batch(model, generator, batch_sizes, steps_done = 0):     outs_per_batch.append(len(generator))     batch_sizes.append(len(generator))     for i in range(steps_done):         outs_per_batch[i] = len(generator[i])         batch_sizes[i] = len(generator[i])  def evaluate_generator_batch_batch(model, generator, batch_sizes, steps_done = 0):     outs_per_batch.append(len(generator))     batch_sizes.append(len(generator))     for i in range(steps_done):         outs_per_batch[i] = len(generator[i])         batch_sizes[i] = len(generator[i])  def evaluate_generator_batch_batch_batch(model, generator, batch_sizes, steps_done = 0):     outs_per_batch.append(len(generator))     batch_sizes.append(len(generator))     for i in range(steps_done):         outs_per_batch[i] = len(generator[i])         batch_sizes[i] = len(generator[i])  def evaluate_generator_batch_batch_batch(model, generator, batch_sizes, steps_done = 0):     outs_per_batch.append(len(generator))     batch_sizes.append(len(generator))     for i in range(steps_done):         outs_per_batch[i] = len(generator[i])         batch_sizes[i] = len(generator[i])  def evaluate_generator_batch_batch_batch(model, generator, batch_sizes, steps_done = 0):     outs_per_batch.append(len(generator))     batch_sizes.append(len
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryService; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryServiceFactory; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hy
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("CSharpSharp")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("CSharpSharp")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
     def __init__(self, *args, **kwargs):         super(Categorical, self).__init__(*args, **kwargs)      def __getitem__(self, index):         return self[index]      def __setitem__(self, index, value):         self[index] = value      def __len__(self):         return len(self)      def __getitem__(self, index):         return self[index]      def __setitem__(self, index, value):         self[index] = value      def __len__(self):         return len(self)      def __getitem__(self, index):         return self[index]      def __setitem__(self, index, value):         self[index] = value      def __len__(self):         return len(self)      def __getitem__(self, index):         return self[index]      def __setitem__(self, index, value):         self[index] = value      def __len__(self):         return len(self)      def __getitem__(self, index):         return self[index]      def __setitem__(self, index, value):         self[index] = value      def __len__(self):         return len(self)      def __getitem__(self, index):         return self[index]      def __setitem__(self, index, value):         self[index] = value      def __len__(self):         return len(self)      def __getitem__(self, index):         return self[index]      def __setitem__(self, index, value):         self[index] = value      def __len__(self):         return len(self)      def __getitem__(self, index):         return self[index]      def __setitem__(self, index, value):         self[index] = value      def __len__(self):         return len(self)      def __
[security_name] = security_definition[security_name] + flat_dependant  def get_openapi_security_definitions_by_name(flat_dependant: Dependant) -> Tuple[Dict, L]:     security_definitions = get_openapi_security_definitions(flat_dependant)     return security_definitions  def get_openapi_security_definitions_by_model(flat_dependant: Dependant) -> Tuple[Dict, L]:     security_definitions = get_openapi_security_definitions(flat_dependant)     return security_definitions[security_requirement.security_scheme.model]  def get_openapi_security_definitions_by_scheme_name(flat_dependant: Dependant) -> Tuple[Dict, L]:     security_definitions = get_openapi_security_definitions(flat_dependant)     return security_definitions[security_requirement.security_scheme.scheme_name]  def get_openapi_security_definitions_by_model_name(flat_dependant: Dependant) -> Tuple[Dict, L]:     security_definitions = get_openapi_security_definitions(flat_dependant)     return security_definitions[security_requirement.security_scheme.model_name]  def get_openapi_security_definitions_by_scheme_name(flat_dependant: Dependant) -> Tuple[Dict, L]:     security_definitions = get_openapi_security_definitions(flat_dependant)     return security_definitions[security_requirement.security_scheme.scheme_name]  def get_openapi_security_definitions_by_model_name(flat_dependant: Dependant) -> Tuple[Dict, L]:     security_definitions = get_openapi_security_definitions(flat_dependant)     return security_definitions[security_requirement.security_scheme.model_name]  def get_openapi_security_definitions_by_scheme_name(flat_dependant: Dependant) -> Tuple[Dict, L]:     security_definitions = get_openapi_security_definitions(flat_dependant)     return security_definitions[security_requirement.security_scheme.scheme_name]  def get_openapi
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data
 == len(digit_list) - 1:             digit_list[high_mid] = 0             digit_list[low_mid] = 0             high_mid += 1             low_mid += 1         else:             digit_list[high_mid] -= 1             if low_mid == len(digit_list) - 1:             digit_list[high_mid] = 0             digit_list[low_mid] = 0             high_mid -= 1             low_mid -= 1         else:             digit_list[high_mid] -= 1             if high_mid == len(digit_list) - 1:             digit_list[high_mid] = 0             digit_list[low_mid] = 0             high_mid -= 1             low_mid -= 1         else:             digit_list[high_mid] += 1             if low_mid == len(digit_list) - 1:             digit_list[high_mid] = 0             digit_list[low_mid] = 0             high_mid += 1             low_mid += 1         else:             digit_list[high_mid] -= 1             if high_mid == len(digit_list) - 1:             digit_list[high_mid] = 0             digit_list[low_mid] = 0             high_mid -= 1             low_mid -= 1         else:             digit_list[high_mid] -= 1             if low_mid == len(digit_list) - 1:             digit_list[high_mid] = 0             digit_list[low_mid] = 0             high_mid += 1             low_mid += 1         else:             digit_list[high_mid] -= 1             if high_mid == len(digit_list) - 1:             digit_list[high_mid] = 0             digit_list[low_mid] = 0             high_mid -= 1             low_mid -= 1         else:             digit_list[high_mid] -= 1             if low_mid == len(digit_list) - 1:             digit_list[high_mid] = 0             digit_list[low_mid] = 0             high_mid -= 1             low_mid -= 1         else:             digit_list[high_mid] += 1             if low_mid == len(digit_list)
[0] * counts[0] + counts[1] * counts[1] + counts[2] * counts[2] + counts[3] * counts[3] + counts[4] * counts[4] + counts[5] * counts[5] + counts[6] * counts[6] + counts[7] * counts[7] + counts[8] * counts[8] + counts[9] * counts[9] + counts[10] * counts[10] + counts[11] * counts[11] + counts[12] * counts[12] + counts[13] * counts[13] + counts[14] * counts[14] + counts[15] * counts[15] + counts[16] * counts[16] + counts[17] * counts[17] + counts[18] * counts[18] + counts[19] * counts[19] + counts[20] * counts[20] + counts[21] * counts[21] + counts[22] * counts[22] + counts[23] * counts[23] + counts[24] * counts[24] + counts[25] * counts[25] + counts[26] * counts[26] + counts[27] * counts[27] + counts[28] * counts[28] + counts[29] * counts[29] + counts[30] * counts[30] + counts[31] * counts[31] + counts[32] * counts[32] + counts[33] * counts[33] + counts[34] * counts[34] + counts[35] * counts[35] + counts[36] * counts[36] + counts[37] * counts[37] + counts[38] * counts[38] + counts[39] * counts[39] + counts[40] * counts[40] + counts[41] * counts[41] + counts[42] * counts[42] + counts[43] * counts[43] + counts[44] * counts[44] + counts[45] * counts[45] + counts[46] * counts[46] + counts[47] * counts[47] + counts[48] * counts[48] + counts[49] * counts[49] + counts[50] * counts[50] + counts[
  def to_num(num, b):     result = ''     alphabet = string.digits + string.ascii_uppercase     while num > 0:         i = num % b         num = num // b         result = result + alphabet[i]     result = result + str(num)     return result  def to_str(num, b):     result = ''     alphabet = string.digits + string.ascii_uppercase     while num > 0:         i = num % b         num = num // b         result = result + alphabet[i]     result = result + str(num)     return result  def to_int(num, b):     result = ''     alphabet = string.digits + string.ascii_uppercase     while num > 0:         i = num % b         num = num // b         result = result + alphabet[i]     result = result + str(num)     return result  def to_float(num, b):     result = ''     alphabet = string.digits + string.ascii_uppercase     while num > 0:         i = num % b         num = num // b         result = result + alphabet[i]     result = result + str(num)     return result  def to_bool(num, b):     result = ''     alphabet = string.digits + string.ascii_uppercase     while num > 0:         i = num % b         num = num // b         result = result + alphabet[i]     result = result + str(num)     return result  def to_date(num, b):     result = ''     alphabet = string.digits + string.ascii_uppercase     while num > 0:         i = num % b         num = num // b         result = result + alphabet[i]     result = result + str(num)     return result  def to_time(num, b):     result = ''     alphabet = string.digits + string.ascii_uppercase     while num > 0:         i = num % b         num = num // b         result = result + alphabet[i]     result = result + str(num)     return result  def to_datetime(num, b):     result
.pop(0)     return shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(shunting_yard(
