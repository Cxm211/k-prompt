Node node1 = Node.newString(Token.NAME, "f");      node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");     assertFalse(node1.isEquivalentToTyped(node2));    }    public void testVarArgs1() {
*/      public ResponseList<Status> getFriendsTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",null, paging.asPostParameterList(), true));      }      /**
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
cfg.setThreadModel(ThreadModel.MANUAL);              cfg.getSessionConfig().setTcpNoDelay(true);              cfg.getSessionConfig().setKeepAlive(true);             int timeout = getConnectTimeout();              cfg.setConnectTimeout(timeout < 1000 ? 1 : timeout / 1000);              connector.getFilterChain().addLast("codec", new ProtocolCodecFilter(new MinaCodecAdapter(getCodec(), getUrl(), this)));
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;   /**    * @param aClass class of object getting length for
}      );     queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);      Assert.assertEquals(1, factory.getSegmentReferences().size());
mThriftServer = createThriftServer();      mWorkerNetAddress =          new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()             .getCanonicalHostName(), thriftServerPort, mDataServer.getPort());      int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
+ (StringUtils.isEmpty(modelPackage) ? "" : (modelPackage + "/")) + dataType;      }      private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {          return "{" + getJSDocType(cm, cp) + "}";      }      private String getJSDocType(CodegenModel cm, CodegenProperty cp) {          if (Boolean.TRUE.equals(cp.isContainer)) {
@Test   public void startServletAndFilter() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();   this.container = factory.getEmbeddedServletContainer(      exampleServletRegistration(), new FilterRegistrationBean(        new ExampleFilter())); assertThat(getResponse("http:
* @should set uuid on implementation id global property    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public void setImplementationId(ImplementationId implementationId) throws APIException;   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is
public interface AdvancedAtomixQueueEndpointBuilder              extends                  AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {          default AtomixQueueEndpointBuilder basic() {
}   @Configuration  @ConditionalOnEnabledHealthIndicator("diskspace")   public static class DiskSpaceHealthIndicatorConfiguration {    }
connection.setDoOutput(doingOutPut);      connection.setDoInput(true);      connection.setRequestMethod(method);     connection.setFollowRedirects(httpRequest.getFollowRedirects());      lock.lock();      connections.put(httpRequest, connection);
if (includeTokens != null) {              language.setIncludeTokens(includeTokens);          }         if (group != null) {              language.setGroup(group);          }          if (skipFirst != null) {
template.sendBodyAndHeader("file:          MockEndpoint mock = getMockEndpoint("mock:result4");         mock.expectedBodiesReceived("Hello World 3");          assertMockEndpointsSatisfied();          oneExchangeDone.matchesMockWaitTime();
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface CwEndpointBuilder extends EndpointProducerBuilder {          default AdvancedCwEndpointBuilder advanced() {              return (AdvancedCwEndpointBuilder) this;          }
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
message.getHeader(ChronicleEngineConstants.DEFAULT_VALUE))              );          } else {             QueueView.Excerpt<Object, Object> excerpt = queueView.get().get(index.longValue());              message.setHeader(ChronicleEngineConstants.PATH, excerpt.topic());              message.setBody(excerpt.message());
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), is("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
*/      public void destroy() {          isDestroyed.set(true);         cache.remove(this);      }      private boolean destroyed(){
JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);      Node node1 = Node.newString(Token.NAME, "f");      Node node2 = Node.newString(Token.NAME, "f");     assertTrue(node1.isEquivalentToTyped(node2));    }    public void testCheckTreeTypeAwareEqualsDifferent() {
@Test   public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {console.log($ctx.toStringTree(null, this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private void registerEventJournalConfig(EventJournalConfig eventJournalConfig, ConfigCheckMode configCheckMode) {          String mapName = eventJournalConfig.getMapName();         String cacheName = eventJournalConfig.getMapName();          synchronized (journalMutex) {              EventJournalConfig currentMapJournalConfig = null;              if (mapName != null) {
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
xx *= lx;      xy *= lx;      xz *= lx;     yz *= ly;      yy *= ly;      yz *= ly;      zx *= lz;
}   public void glDrawArrays (int mode, int first, int count) {   GL.glDrawArrays(mode, first, count);   }   public void glDrawElements (int mode, int count, int type, Buffer indices) {
private static final String ALLOW_ELEMENT_NAME = "allow";          private final Deque<PkgControl> stack = new ArrayDeque<>();      static {          DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler)
final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;          verify(checkConfig,                 getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"), expected);      }      @Test
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
public interface AtmosEndpointBuilder              extends                  AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {          default AdvancedAtmosEndpointBuilder advanced() {
};       final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see * @see NormalizableKey    */  public void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;   /**    * Reads the record back while de-normalizing the key fields. This must only be used when
ios.cFlags += " -DFT2_BUILD_LIBRARY";     ios.cppFlags += " -DFT2_BUILD_LIBRARY";    new NativeCodeGenerator().generate();     new AntScriptGenerator()      .generate(new BuildConfig("gdx-freetype"), win32home, win32, win64, lin32, lin64, mac, mac64, android, ios);
, (args = args.rest()).first()        , args.rest());     case 20:     return invoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
nodeE.appendChild(positionXE);              Element positionYE = createNodePositionY(document, n);              nodeE.appendChild(positionYE);             if (minZ != 0f && maxZ != 0f) {                  Element positionZE = createNodePositionZ(document, n);                  nodeE.appendChild(positionZE);              }
ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);      assertEquals(          hashFunction.newHasher().putBytes(littleEndian).hash(),         hashFunction.newHasher().putBytes(littleEndian).hash());      assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());     assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());    }    static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {
public void requestTest() {           RecordedStreamObserver<PCmdRequest> recordedStreamObserver = new RecordedStreamObserver<PCmdRequest>();          PinpointGrpcServer pinpointGrpcServer = new PinpointGrpcServer(Mockito.mock(InetSocketAddress.class), agentInfo, new RequestManager(testTimer, 300), recordedStreamObserver);           pinpointGrpcServer.connected();           List<Integer> supportCommandList = Arrays.asList(Short.toUnsignedInt(TCommandType.ECHO.getCode())));
String command = shellMsg.getCommand();                          if (command == null) {                             throw new UnsupportedOperationException("Command not found in bolt message: " + shellMsg);                          }                          if(command.equals("ack")) {                              handleAck(shellMsg.getId());
char[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);    ATN deserialized = new ATNDeserializer().deserialize(serializedAtn);   return new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);   }  }
int port = Utils.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT));              List<String> servers = (List<String>) conf.get(Config.DRPC_SERVERS);             if(servers.isEmpty()) {                  throw new RuntimeException("No DRPC servers configured for topology");                 }              if(numTasks < servers.size()) {
}   public void glDeleteTextures (int n, IntBuffer textures) {   GL.glDeleteTextures(n, textures, Memory.getPosition(textures));   }   public void glDepthFunc (int func) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public Skin loadSync (AssetManager manager, String fileName, SkinParameter parameter) {     String texturePath;     if (parameter == null)     texturePath = Gdx.files.internal(fileName).nameWithoutExtension() + ".png";     else      texturePath = parameter.texturePath;     Texture texture = manager.get(texturePath, Texture.class);
char[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);    ATN deserialized = new ATNDeserializer().deserialize(serializedAtn);   return new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);   }   public ParserInterpreter createParserInterpreter(TokenStream tokenStream) {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
this.destToSortby = new HashMap<String, ASTNode>();      this.destToLimit = new HashMap<String, Integer>();     this.destToAggregationExprs = new HashMap<String, HashMap<String, ASTNode> >();      this.destToDistinctFuncExpr = new HashMap<String, ASTNode>();      this.alias = alias;
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
public interface WebsocketEndpointBuilder              extends                  WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {          default AdvancedWebsocketEndpointBuilder advanced() {
final double min, final int offset, final int count) {      checkIsInMultiOrPipeline();      client.zrevrangeByScoreWithScores(key, max, min, offset, count);     return getBinaryTupledSet();    }    @Override
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* before growing the backing table. */   public IntIntMap (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
if (node.getNodeType() == Node.ELEMENT_NODE) {              Document doc = node.getOwnerDocument();              if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {                 doc.renameNode(node, SPRING_NS, node.getNodeName());              }          }          NodeList list = node.getChildNodes();
ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();    logger.debug("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), is("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
@Override      public boolean isEmpty() {         return peekNode() == null;      }      @Override
* @return {@link   public boolean[] ensureCapacity (int additionalCapacity) {     int sizeNeeded = size + additionalCapacity;    if (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));     return items;    }
public void testGetRequiredTokens() {          InterfaceIsTypeCheck obj = new InterfaceIsTypeCheck();          int[] expected = {TokenTypes.INTERFACE_DEF};         assertArrayEquals(expected, obj.getAcceptableTokens());      }  }
}              }          }         return r;      }      private boolean isAtmosphereResourceValid(AtmosphereResource r) {
.append(getPort(uri)).toString());              nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, uri.getPath());          } else if (config.getProxyServer() != null || request.getProxyServer() != null) {             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.getPath());          } else {              StringBuilder path = new StringBuilder(uri.getRawPath());              if (uri.getQuery() != null) {
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
private LinkedHashMap<String,partitionDesc> pathToPartitionInfo;   private HashMap<String,Operator<? extends Serializable>> aliasToWork;
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>, batchSize, null);   }
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      }     boolean isContentAlwaysEmpty(@SuppressWarnings("unused") H msg) {          return false;      }
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return;    }   time.put(delta);    final float currentLoad = delta == 0f ? 0f : current / delta;    load.put((delta > 1f) ? currentLoad : delta * currentLoad + (1f - delta) * load.latest);
LOG.info("Verifying the reading data...");          for (int pId = mLeft; pId < mRight; pId ++) {           TachyonFile file = mTC.getFile(FILE_NAME + pId);            buf = file.readByteBuffer(0);            IntBuffer intBuf;            intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();
}              }          }         if (securityDomain != null)              description.setSecurityDomain(securityDomain);         else if (globalSecurityDomain != null)              description.setSecurityDomain(globalSecurityDomain);      }
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (queueLength.isDefined() && queueLength.asInt() == 0) {                  if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {                     throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());                  }              }
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
} else if (frame instanceof CloseFrame) {                  logger.trace("WebSocket.onReceivedFrame (CloseFrame)");                 webSocketProcessor.close(webSocket, 0);              } else {                  logger.trace("WebSocket.onReceivedFrame skipping: " + frame);              }
lastUpdate = DateTime.now();      }     private void sendGetResults()      {         final URI uri = HttpUriBuilder.uriBuilderFrom(location).appendPath(String.valueOf(token)).build();          HttpResponseFuture<PagesResponse> resultFuture = httpClient.executeAsync(                  prepareGet()                          .setHeader(PRESTO_MAX_SIZE, maxResponseSize.toString())
final CompressionLevel compressionLevel, int indexOfOutputGate, int indexOfInputGate,     final DistributionPattern distributionPattern) throws JobGraphDefinitionException {    this.connectTo(vertex, channelType, compressionLevel, indexOfOutputGate, indexOfInputGate, distributionPattern,    false);   }   /**
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Properties producerProps = new Properties();   producerProps.setProperty("max.request.size", Integer.toString(1024 * 1024 * 14));    producerProps.setProperty("retries", "3");    producerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerConnectionStrings);
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
* Try to infer the actual types, which may be narrower     * than the declared types.     */   final PassFactory tightenTypesBuilder =        new PassFactory("tightenTypes", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10855, value = "Invalid byte stream.")      String invalidByteStream();      /**
assertEquals(encoded, encoding.encode(bytes));    }   private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);      Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);      Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);     Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(true);      qosFunction.setRegionServer(mockRS);      assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);     Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(false);      assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);    }
ret = getMS().updateTableColumnStatistics(colStats);          return ret;        } finally {         endFunction("write_column_statistics: ", ret);        }      }
public interface AdvancedHazelcastQueueEndpointBuilder              extends                  AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {          default HazelcastQueueEndpointBuilder basic() {
*     * @throws IOException Thrown if any of the two views raises an exception.    */  public void copy(DataInputView source, DataOutputView target) throws IOException;  }
* before growing the backing table. */    public ObjectMap (int initialCapacity, float loadFactor) {     if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);     capacity = MathUtils.nextPowerOfTwo(initialCapacity);     if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);          RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();         assertFalse(runtimeOptions.isMonochrome());      }
@Test   public void startServletAndFilter() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();   this.container = factory.getEmbeddedServletContainer(      exampleServletRegistration(), new FilterRegistrationBean(        new ExampleFilter())); assertThat(getResponse("http:
chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);          } else {             Map<Integer, GELFMessageChunk> c = Maps.newHashMap();              c.put(chunk.getSequenceNumber(), chunk);              chunks.put(chunk.getId(), c);          }
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
public interface AdvancedDdbEndpointBuilder              extends                  EndpointProducerBuilder {          default DdbEndpointBuilder basic() {
publicType,                  ImmutableSet.copyOf(entry.getValue()),                 implemetationMethodDescriptors.build()));        } catch (IOException e) {          messager.printMessage(Kind.ERROR, "failed");        }
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
attr = bindingGroup.get(DEFAULT_INTERFACE);          writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());         if (fromServer && bindingGroup.has(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() != 0) {              attr = bindingGroup.get(PORT_OFFSET);              writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());          }
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10872, value = "Invalid code %d")      IllegalArgumentException invalidCode(int code);  }
*     * @return the data stream constructed    */  private DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {   DataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
doAnnotation(annotation, backend, serverURL, message, 0);        } catch (Throwable t) {         log.warn("Could not annotate via server! Trying to annotate locally...", t);          StanfordCoreNLP corenlp = new StanfordCoreNLP(properties);          corenlp.annotate(annotation);        } finally {
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
checkToken(token);     Account currentUser = accountService.getLoginUser(token);     List<Book> books = adminService.listMyBook(currentUser.id, pageable);    return BeanMapper.mapList(books, Book.class, BookDto.class);    }    @RequestMapping(value = "/api/myborrowedbook", produces = MediaTypes.JSON_UTF_8)
}       final class GlobalTypeResolver implements HotSwapCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public List<Trends> getWeeklyTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/weekly.json", false));      }
URL url3 = bundle.getEntry(META_INF_FALLBACK_TYPE_CONVERTER);              if (url1 != null || url2 != null || url3 != null) {                  LOG.debug("Found TypeConverter in bundle {}", bundle.getSymbolicName());                 resolvers.add(new BundleTypeConverterLoader(bundle, url2 != null));              }          }      }
* @param entryValues The number of entries in the array.       * @return The entry object.       */     private Entry decodeEntry(int[] vals, int entryValues) {        Entry entry;        switch (entryValues) {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;          verify(checkConfig,                 getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java"), expected);      }      @Test
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);          }          return result;      }
protected void handleQPoll(String[] args) {          long timeout = 0;          if (args.length > 1) {             timeout = Long.valueOf(args[1]);          }          try {              println(getQueue().poll(timeout, TimeUnit.SECONDS));
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc
if (!file.exists()) {                  return null;              }             return new VFSEntryResource(file, root.toURL());          } catch (MalformedURLException e) {              return null;
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final SingleInstanceProfilingEvent singleInstanceProfilingEvent = (SingleInstanceProfilingEvent) obj;   if (this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())) {     return false;    }
lineNo = sourceMapping.getLineNumber();          charNo = sourceMapping.getColumnPosition();          String identifier = sourceMapping.getIdentifier();         if (sourceMapping != null && !identifier.isEmpty()) {            originalName = identifier;          }        }
Assert.assertEquals(1, result.size());        hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()            .map(regionName -> regionName.split("\\.")[1]).collect(Collectors.toList()));       ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());        result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));        Assert.assertEquals(0, result.size());
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
ImmutableList.Builder<String> expressions = ImmutableList.builder();          Set<List<String>> valueLists = Sets.cartesianProduct(unrolledValues);          for (List<String> valueList : valueLists) {             expressions.add(String.format(expressionPattern, valueList.toArray(new String[valueList.size()])));          }          return expressions.build();      }
try {          ret = getMS().deleteTableColumnStatistics(dbName, tableName, colName);        } finally {         endFunction("delete_column_statistics_by_table: ", ret != null);        }        return ret;     }
static class FlagUsageException extends Exception {      private static final long serialVersionUID = 1L;      FlagUsageException(String message) {
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
disposeColorTexture(colorTexture);    if (hasDepthStencilPackedBuffer) {    gl.glDeleteBuffer(depthStencilPackedBufferHandle);    } else {     if (hasDepth) gl.glDeleteRenderbuffer(depthbufferHandle);     if (hasStencil) gl.glDeleteRenderbuffer(stencilbufferHandle);
runDelegatedTasks(clientResult, clientEngine);              cTOs.compact();              sTOc.compact();         } while (isHandshaking(clientResult) && isHandshaking(serverResult));      }      private static boolean isHandshaking(SSLEngineResult result) {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test   public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10871, value = "Unknown server %s")      IllegalStateException unknownServer(ServerIdentity server);      /**
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    @Test public void eolComment() throws IOException {     javaWriter.emitSingleLineCOmment("foo"); assertCode("    }
}    }   public void delete(int fileId, boolean recursive) {      if (INACTIVE) {        return;      }
public void testGraphTestSuite() throws Exception { this.stopWatch();         doTestSuite(new GraphTestSuite(this), ImmutableSet.of("testStringRepresentation")));          printTestPerformance("GraphTestSuite", this.stopWatch());      }
}      @FixMethodOrder(MethodSorters.NAME_ASCENDING)     private static class DummySortWithNameAsc {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
};       final PassFactory objectPropertyStringPostprocess =        new PassFactory("ObjectPropertyStringPostprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @should set uuid on implementation id global property    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public void setImplementationId(ImplementationId implementationId) throws APIException;   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is
private static Function compile(String function) {      final ContextFactory contextFactory = ContextFactory.getGlobal();     Context context = contextFactory.enterContext();      context.setOptimizationLevel(9);      final ScriptableObject scope = context.initStandardObjects();
}      public void setDataCoding(byte dataCoding) {         this.alphabet = dataCoding;      }      public byte getAlphabet() {
return style;    }   public void setText (String text) {     if (text == null) throw new IllegalArgumentException("text cannot be null.");     if (text.equals(this.text)) return;     this.text = text;
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10855, value = "Invalid byte stream.")      String invalidByteStream();      /**
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/  @GwtCompatible(emulated = true)  public class BaseEncodingTest extends TestCase {   public void assertEquals(byte[] expected, byte[] actual) {      assertEquals(expected.length, actual.length);      for (int i = 0; i < expected.length; i++) {        assertEquals(expected[i], actual[i]);
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final String command,      final LinkedHashMap<String,ArrayList<String>> pathToAliases,      final LinkedHashMap<String,partitionDesc> pathToPartitionInfo,     final HashMap<String,Operator<? extends Serializable>> aliasToWork,      final tableDesc keyDesc,      List<tableDesc> tagToValueDesc,      final Operator<?> reducer) {
public interface AdvancedHipchatEndpointBuilder              extends                  AdvancedHipchatEndpointConsumerBuilder, AdvancedHipchatEndpointProducerBuilder {          default HipchatEndpointBuilder basic() {
* Tests getting and setting fields.     */    @Test   public void fields() {      Random random = new Random();      boolean isPrimary = random.nextBoolean();      long sequenceNumber = random.nextLong();
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
checkConfig.addAttribute("matchDirectoryStructure", "false");          final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;         verify(checkConfig, getPath("InputPackageDeclarationDiffDirectory.java"), expected);      }      @Test
*       * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
switch (event.phase) {      case Began:       if (inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);      if (numTouched == 1) justTouched = true;       break;      case Cancelled:      case Ended:
RangeTransition range = (RangeTransition)edge;       String label = range.label().toString();       if ( isLexer ) label = range.toString();      else if ( grammar!=null ) label = range.label().toString(grammar.getTokenNames());       edgeST.add("label", getEdgeLabel(label));      }      else {
private EventLoopGroup bossGroup;          private EventLoopGroup workerGroup;         public MyServer(int port) {              this.port = port;          }
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;   /**    * @param aClass class of object getting length for
if (handle.delete()) fail();     if (handle.list().length != 0) fail();     if (handle.child("meow").exists()) fail();    if (handle.parent().exists()) fail();     try {      handle.read().close();      fail();
for (; ; ) {              String id = prefix + randomString();              Partition partition = partitionService.getPartition(id);             if (comparePartitionOwnership(true, localMember, partition)) {                  return id;              }          }
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*  Is class declared as abstract.           *  @return true if class is declared as final           */         boolean isDeclaredAsAbstract() {              return declaredAsAbstract;          }      }
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(639);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);         assertFalse(model.getUniqueItems());      }  } \ No newline at end of file
}      public String[] getRequires() {         return alternatives;      }      public EnumSet<AttributeAccess.Flag> getFlags() {
public interface HazelcastListEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastListEndpointProducerBuilder advanced() {
public interface AdvancedMina2EndpointBuilder              extends                  AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {          default Mina2EndpointBuilder basic() {
logger.error("Invalid WebSocket Specification {} with {} ",                                  r.getHeader("Connection"), r.getIntHeader("Sec-WebSocket-Version"));                          HttpServletResponse.class.cast(response).addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");                         HttpServletResponse.class.cast(response).sendError(202, "Websocket protocol not supported");                          return;                      }                  }
if (mWrite) {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            OutputStream os = mHdfsFs.create(new Path(filePath));            for (int k = 0; k < BLOCKS_PER_FILE; k ++) {             mBuf.array()[0] = (byte) (k + mWorkerId);              os.write(mBuf.array());            }            os.close();
if (mWrite) {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            OutputStream os = mHdfsFs.create(new Path(filePath));            for (int k = 0; k < BLOCKS_PER_FILE; k ++) {             mBuf.array()[0] = (byte) (k + mWorkerId);              os.write(mBuf.array());            }            os.close();
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
Id idAnnotation = null;      for (Method method : methods) {        idAnnotation = method.getAnnotation(Id.class);       if (idAnnotation != null) {          idMethod = method;          break;        }
setPermission(loadPath, FsPermission.valueOf("-rwxrwxrwx"));        try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {         TEST_UTIL.waitTableEnabled(tableName);          LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);          loader.doBulkLoad(loadPath, table);        }
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
for (int i = 0; i < size; i++) {              map.put(i, i);          }         instance2.getLifecycleService().terminate();          mapStore.awaitStores();      }
final Condition delegate;      @SuppressWarnings("unused")     private final Object strongReference;     WeakSafeCondition(Condition delegate, Object strongReference) {        this.delegate = delegate;        this.strongReference = strongReference;      }
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {
* @see org.openmrs.api.db.ConceptDAO    */    @Override   public Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)            throws DAOException {     Criteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);     criteria.setProjection(Projections.rowCount());    return (Integer) criteria.uniqueResult();    }    /**
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
try {              InetAddress address = resolver.resolve("10.0.0.1").syncUninterruptibly().getNow();             assertEquals("10.0.0.1", address.getHostName());          } finally {              resolver.close();          }
public interface IgniteCacheEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedIgniteCacheEndpointProducerBuilder advanced() {
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.debug("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null ? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.debug("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
configuration.getCreateDependencies().add(new DependencyConfigurator<StatefulSessionComponentCreateService>() {              @Override              public void configureDependency(ServiceBuilder<?> builder, StatefulSessionComponentCreateService service) {                 builder.addDependency(RegistryInstallerService.SERVICE_NAME);                  builder.addDependency(DependencyType.OPTIONAL, EJBRemoteConnectorService.SERVICE_NAME);              }          });
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
throw new NullPointerException("uncollectedPointCreator must not be null");          }          this.timeWindow = timeWindow;         this.uncollectedPointCreater = uncollectedPointCreator;      }      public Chart<P> build(List<P> sampledPoints) {
public interface AdvancedSftpEndpointBuilder              extends                  AdvancedSftpEndpointConsumerBuilder, AdvancedSftpEndpointProducerBuilder {          default SftpEndpointBuilder basic() {
command = new CreateCommand(keyName, options);          if ("--help".equals(keyName)) {            printKeyShellUsage();           return -1;          }        } else if (args[i].equals("delete")) {          String keyName = "--help";
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getRequestURI()).thenReturn("/tasks/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          when(response.getWriter()).thenReturn(output);
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void setOriginBasedPosition (float x, float y) {    setPosition(x - this.originX, y - this.originY);    }    /** Sets the x position where the sprite will be drawn. If origin, rotation, or scale are changed, it is slightly more efficient */
Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());              Assert.assertEquals(2, Integer.parseInt(response.getFirstHeader("value").getValue()));             Assert.assertFalse(Boolean.valueOf(response.getFirstHeader("serialized").getValue()));              response.getEntity().getContent().close();          } finally {              client.getConnectionManager().shutdown();
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*/  @GwtCompatible(emulated = true)  public class BaseEncodingTest extends TestCase {   public void assertEquals(byte[] expected, byte[] actual) {      assertEquals(expected.length, actual.length);      for (int i = 0; i < expected.length; i++) {        assertEquals(expected[i], actual[i]);
* Validates Username and Password then saved sercurityToken to a variable    */   private void login() throws InvalidLoginException, IOException {   logger.debug("attempting to login");    String url = String      .format("%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s",        WEBSITE, enc(appId), enc(userName), enc(password));
"--attr", "foo=bar",              "--attr", "foo=glarch"};      rc = ks.run(args4);     assertEquals(-1, rc);            deleteKey(ks, "keyattr1");
* before growing the backing table. */   public IntSet (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
boolean found = false;                  for (ParamValueMetaData prop : md.getContextParams()) {                      if (prop.getParamName().equals(ENABLE_PROPERTY)) {                         boolean explicitEnable = Boolean.parseBoolean(prop.getParamName());                          if(explicitEnable) {                              found = true;                          } else {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
setHost(value);          }         if (getProtocol() != null && isIgnoreUriScheme()) {              String scheme = uri.getScheme();              if (scheme != null) {                  setProtocol(scheme);
public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {          long totalMessages = 50;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
log(FORCE, t);        exitCode = 1;      } endTrack("main");      if (exit) {        System.exit(exitCode);      }
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
pausingLoader.awaitPause();          hz3.getLifecycleService().terminate();         assertClusterSize(2, nodes[0]);          pausingLoader.resume();
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@Test          public void duration() throws InterruptedException {              Thread.sleep(300L);             assertEquals(fStopwatch.runtime(MILLISECONDS), 300d, 100d);              Thread.sleep(500L);             assertEquals(fStopwatch.runtime(MILLISECONDS), 800d, 250d);          }      }
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
public static final int SET_CONTAINER = 41;      public static final int LIST_CONTAINER = 42;      public static final int COLLECTION_TRANSACTION_LOG_RECORD = 43;     public static final int QUEUE_TRANSACTION_LOG_RECORD = 43;      @Override      public int getFactoryId() {
*/      public ResponseList<Status> getUserTimeline(String id, Paging paging)              throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id + ".json",                  null, paging.asPostParameterList(), http.isAuthenticationEnabled()));      }
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* before growing the backing table. */   public IntSet (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
boolean isExtern = false;        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();       if(functionJSDocInfo != null) {          isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();        }
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsText(String path) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);   }
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
d.setMinorVersion(Integer.parseInt(servletVersion.charAt(2)));              } else {                  d.setMajorVersion(3);                 d.setMajorVersion(1);              }
for (String poolName : poolsToRedistribute) {        if (LOG.isDebugEnabled()) {         LOG.info("Processing changes for pool " + poolName + ": " + pools.get(poolName));        }        processPoolChangesOnMasterThread(poolName, hasRequeues, syncWork);      }
assertThat(connector.getHost()).isEqualTo("127.0.0.1");          assertThat(connector.getAcceptQueueSize()).isEqualTo(1024);          assertThat(connector.getReuseAddress()).isTrue();         assertThat(connector.getSoLingerTime()).isEqualTo(30);          assertThat(connector.getIdleTimeout()).isEqualTo(30000);          assertThat(connector.getName()).isEqualTo("test-http-connector");
/*  * Copyright 2012-2015 the original author or authors.   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (store != null) {              store.deleteAll(keysObject);             toBeRemovedKeys.removeAll(keysToDelete);          }          clearRecordsMap(lockedRecords);
"order by min(length(p)), user.name";          gen.get().addSnippet( "query-get-members", createCypherSnippet( query ) );          result = engine.execute( query )                 .dumpToString();          assertTrue( result.contains("Engin") );          gen.get()                  .addSnippet( "o-query-get-members", createCypherSnippet( query ) );
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
} catch (InterruptedException e) {                      e.printStackTrace();                  }                 hz1.getLifecycleService().terminate();              }          }
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
*/      final Set<String> ALLOWED_TAGS = ImmutableSortedSet.of(              "a", "abbr", "acronym", "address", "area", "b", "bdo", "big",             "blockquote", "br", "caption", "cite", "code", "colgroup", "del",             "div", "dfn", "dl", "em", "fieldset", "h1", "h2", "h3", "h4", "h5",             "h6", "hr", "i", "img", "ins", "kbd", "li", "ol", "p", "pre", "q",             "samp", "small", "span", "strong", "style", "sub", "sup", "table",             "tbody", "td", "tfoot", "th", "thead", "tr", "tt", "ul");            private Scope mScope = Scope.PRIVATE;
public interface RestEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedRestEndpointProducerBuilder advanced() {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.createStatuseList(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
public static DetailAST annotatingWhat(DetailAST ast)      {          if (ast == null) {             throw new NullPointerException("the ast is null");          }          if (ast.getType() != TokenTypes.ANNOTATION) {
assert amt > 0;              prioritizableForTree += amt;              if (parent != null && parent != oldParent) {                 parent.incrementPrioritizableForTree(amt, oldParent);              }          }
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
this.pool = pool;          this.ping = onDemand(Ping.class);          setSQLLog(new Log4JLog(LOGGER, Level.TRACE));         setTimingCollector(new InstrumentedTimingCollector(Metrics.defaultRegistry(), Database.class));          setStatementRewriter(new NamePrependingStatementRewriter());          setStatementLocator(new ScopedStatementLocator());          registerArgumentFactory(new OptionalArgumentFactory());
public interface AdvancedFtpEndpointBuilder              extends                  AdvancedFtpEndpointConsumerBuilder, AdvancedFtpEndpointProducerBuilder {          default FtpEndpointBuilder basic() {
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
} else {                      statistics.increaseCacheHits(1);                  }                 statistics.addGetTimeNanos(System.nanoTime() - start);              }          }      }
*       * @return the message.       */     @Message(id = 10845, value = "Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.")      String invalidRolloutPlanRange(String name, String propertyName, int value);      /**
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      @Override     public List<EdgeModel> getSelectedEdges() {          List<EdgeModel> selected = new ArrayList<>();          for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {              EdgeModel edgeModel = itr.next();
}          }          if (simple.getToReceivedDate() != null) {             String s = simple.getFromSentDate();              if (s.startsWith("now")) {                  long offset = extractOffset(s, typeConverter);                  builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), false, offset));
*/    public void preCompute(Set<Integer> toPreCompute) {      long startTime = System.currentTimeMillis();     saved = new double[toPreCompute.size()][config.hiddenSize];      for (int x : toPreCompute) {        int mapX = preMap.get(x);        int tok = x / config.numTokens;
setIdToUse = "*";        if (setIdToUse != null) {         helper(patientDrugOrderSets, setIdToUse, order);        if (order.isCurrent())          helper(currentDrugOrderSets, setIdToUse, order);         else          helper(completedDrugOrderSets, setIdToUse, order);
@ApiOperation(value = "Creates list of users with given input array", notes = "", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUsersWithArrayInput(@Valid List<User> body);      @POST      @Path("/createWithList")
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
mw.visitLabel(forItemNullElse_);              Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();             if (elementClass != null) {                  mw.visitVarInsn(ALOAD, context.var("list_item"));                  mw.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;");                  mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));
public void test_cn_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年5月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
@Override      public PoolableProvider returnBroadcaster(Broadcaster b) {         logger.info("Return Object {} now at size {}", b, count.getAndDecrement());          try {              genericObjectPool.returnObject(b);          } catch (IllegalStateException ex) {
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameterfv(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {
@Override      protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {         codegenModel.additionalPropertiesType = getSwaggerType(swaggerModel.getAdditionalProperties());          addImport(codegenModel, codegenModel.additionalPropertiesType);      }
public void test_kr_1() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
Optional.empty());         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))                  .row("a", "a")                  .row("a", "a")
public interface AdvancedEKSEndpointBuilder              extends                  EndpointProducerBuilder {          default EKSEndpointBuilder basic() {
return -1;           }           int newId = nextId();          if (newId > max) {               throw new IndexOutOfBoundsException("size=" + index.length + " id=" + id);           }
* @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10805, value = "Caught exception awaiting final response from host %s")      void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);      /**
}      boolean foundOut = outgoingEdges.containsKey(source) && outgoingEdges.get(source).containsKey(dest) &&          outgoingEdges.get(source).get(dest).remove(data);     boolean foundIn = incomingEdges.containsKey(source) && incomingEdges.get(source).containsKey(dest) &&          incomingEdges.get(dest).get(source).remove(data);      if (foundOut && !foundIn) {        throw new AssertionError("Edge found in outgoing but not incoming");
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass2 =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @param moduleClassLoader class loader used to load Checkstyle       *          core and custom modules       */     PackageObjectFactory(Set<String> packageNames,              ClassLoader moduleClassLoader) {          if (moduleClassLoader == null) {              throw new IllegalArgumentException(
}          if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {             LOG.info("Building gRPC server on " + configuration.getHost() + ":" + configuration.getPort());              serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));          } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {             LOG.info("Building gRPC server on <any address>" + ":" + configuration.getPort());              serverBuilder = NettyServerBuilder.forPort(configuration.getPort());          } else {              throw new IllegalArgumentException("No server start properties (host, port) specified");
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      for (String label : nodeLabels) {       if (q.acccessibleNodeLabels.contains(label)) {          return true;        }      }
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      public void delete(Node node, Input input, String extractorId) throws IOException, APIException {         api.path(resource.terminate(input.getId(), extractorId))                  .node(node)                  .expect(Http.Status.NO_CONTENT)                  .execute();
int index = (int) params.get(1).getDouble();      ImmutableList<JSType> templateTypes =          ((TemplatizedType) type).getTemplateTypes();     if (index > templateTypes.size()) {        reportWarning(ttlAst, INDEX_OUTOFBOUNDS,            Integer.toString(index), Integer.toString(templateTypes.size()));        return getUnknownType();
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}          }          if (isStatisticsEnabled()) {             statistics.addGetTimeNanos(System.nanoTime() - start);          }          CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);          final Object process = entryProcessor.process(entry, arguments);
assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(chosenNode), 0);      }     private static class TestSplitLocal              implements ConnectorSplit      {          @Override
* Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.createTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
Node node = nodes.get(i);      if (node.actor.getY() < low) break;      if (!node.isSelectable()) continue;     if (node.actor.getY() <= high) selectedNodes.add(node);      if (node.expanded) selectNodes(node.children, low, high);     }    }
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
@Test   public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
public interface PropertiesEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedPropertiesEndpointProducerBuilder advanced() {
* @param arguments the command-line arguments       * @throws Exception if something goes wrong       */     public final void run(String... arguments) throws Exception {          final Bootstrap<T> bootstrap = new Bootstrap<>(this);          bootstrap.addCommand(new ServerCommand<>(this));          bootstrap.addCommand(new CheckCommand<>(this));
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
@Override   public void internalReceiveCommand(String itemName, Command command) {    super.internalReceiveCommand(itemName, command);   logger.debug("MyQ binding received command '{}' for item '{}'",      command, itemName);    if (myqOnlineData != null) {     computeCommandForItem(command, itemName);
this.context.refresh();    assertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));   assertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()      .size());   }
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
context.start();          for (int i = 0; i < 10; i++) {             getMockEndpoint("mock:" + i).expectedMinimumMessageCount(200);          }          ExecutorService executors = Executors.newFixedThreadPool(20);         for (int i = 0; i < 200; i++) {              executors.execute(new Runnable() {                  public void run() {                      for (int i = 0; i < 10; i++) {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class add_write_notification_log_args implements org.apache.thrift.TBase<add_write_notification_log_args, add_write_notification_log_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_write_notification_log_args>   {      private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_write_notification_log_args");     private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField("rqst", org.apache.thrift.protocol.TType.STRUCT, (short)-1);      private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();      static {
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
"--attr", "foo=bar",              "--attr", "foo=glarch"};      rc = ks.run(args4);     assertEquals(-1, rc);            deleteKey(ks, "keyattr1");
*       * @return a message for the error.       */     @Message(id = 10830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves();      /**
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.valueOf(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
private Object value;     public ObjectRecord() {      }     public ObjectRecord(Data key, Object value) {          super(key);          this.value = value;      }
*/      public ResponseList<Status> getUserTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json"                  , null, paging.asPostParameterList(), true));      }
"RETURN file.name, dir.name, role.name, readUser.name";          gen.get().addSnippet( "query3", createCypherSnippet( query ) );          result = engine.execute( query )                 .dumpToString();          assertTrue( result.contains("File1") );          assertTrue( result.contains("File2") );          assertTrue( result.contains("Admin1") );
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
.retLong();      }     private void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)      {          Parameter blockIndex = arg("blockIndex", int.class);          Parameter blockPosition = arg("blockPosition", int.class);
super.doStop();          if (configuration.isWebhookAutoRegister()) {             log.info("Unregistering webhook for endpoint " + delegateEndpoint);              delegateEndpoint.unregisterWebhook();          }      }
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
private static String getIndentation(DetailNode node) {          final boolean isLastChild = JavadocUtils.getNextSibling(node) == null;          DetailNode currentNode = node;         final StringBuilder indentation = new StringBuilder();          while (currentNode.getParent() != null) {              currentNode = currentNode.getParent();              if (currentNode.getParent() == null) {
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void test_kr_1() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
long taken = watch.stop();          assertEquals(taken, watch.taken());         assertTrue("Should take approx 200 millis, was: " + taken, taken > 190);      }      public void testStopWatchNotStarted() throws Exception {
* @return get cookies       */      public Map<String,Map<String, String>> getAllCookies() {         return cookies.columnMap();      }      /**
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10870, value = "Unknown server group %s")      IllegalStateException unknownServerGroup(String serverGroup);      /**
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
rect(i000, i100, i110, i010);      rect(i101, i001, i011, i111);      index(i000, i001, i010, i011, i110, i111, i100, i101);    } else if (primitiveType != GL_POINTS) {      ensureRectangleIndices(3);      rect(i000, i100, i110, i010);      rect(i101, i001, i011, i111);      index(i000, i001, i010, i011, i110, i111, i100, i101);    } else if (primitiveType != GL_POINTS) {      ensureRectangleIndices(4);      rect(i000, i100, i110, i010);      rect(i101, i001, i011, i111);      index(i000, i001, i010, i011, i110, i111, i100, i101);    } else if (primitiveType != GL_POINTS) {      ensureRectangleIndices(5);      rect(i000, i100, i110, i010);      rect(i101, i001, i011, i111);      index(i000, i001, i010, i011, i110, i111, i100, i101);    } else if (primitiveType != GL_POINTS) {      ensureRectangleIndices(6);      rect(i000, i100, i110, i010);      rect(i101, i001, i011, i111);      index(i000, i001, i010, i011, i110, i111, i100, i101);    } else if (primitiveType != GL_POINTS) {      ensureRectangleIndices(7);      rect(i000, i100, i110, i010);      rect(i101, i001, i011, i111);      index(i000, i001, i010, i011, i110, i111, i100, i101);    } else if (primitiveType != GL_POINTS) {      ensureRectangleIndices(8);      rect(i000, i100, i110, i010);      rect(i101, i001, i
int length = in.readInt();      byte[] serCondition = new byte[length];     in.read(serCondition);      ByteArrayInputStream bais = new ByteArrayInputStream(serCondition);      ObjectInputStream ois = new ObjectInputStream(bais);
*/  public class TFAgentStatBatchMapper {      private final Logger logger = LoggerFactory.getLogger(this.getClass());     public final TFAgentStatMappter tFAgentStatMappter = new TFAgentStatMappter();      public TFAgentStatBatch map(AgentStatBo agentStatBo) {          try {             List<TFAgentStat> tFAgentstatList = tFAgentStatMappter.map(agentStatBo);              long startTimestamp = getStartTimestamp(agentStatBo);              TFAgentStatBatch tFAgentStatBatch = new TFAgentStatBatch(agentStatBo.getAgentId(), startTimestamp, tFAgentstatList);              return tFAgentStatBatch;
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private static final long serialVersionUID = -8493693409423365387L;           protected TreeTableCellRenderer tree;      private JTextArea editor;      private List<Integer> lines2position;
URI firstNode = createNode();          addProperty(firstNode, "name", "Joe Strummer");          URI secondNode = createNode();         addProperty(firstNode, "band", "The Clash");
}    }   private void removeModel(Map<Integer, Integer> model, Range<Integer> range) {      for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {        if (range.contains(i)) {          model.remove(i);
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    @Override   public List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {     return Collections.singletonList(saveRecordCnt);    }    @Override   public void restoreState(List<Integer> state) throws Exception {     for (Integer i : state) {      saveRecordCnt += i;     }
assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type mBodyWildcard = new TypeToken<Maybe<String>>() {}.getType();     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fBodyWildcard = new TypeToken<Flowable<String>>() {}.getType();     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
rng.nextBytes(bytes);      ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);      ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);     assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));      assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());     assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());    }    static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {
if (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {      Gdx.app.debug("IOSPreferences", "Failed to write NSDictionary to file " + file);     }    pool.dealloc();    }   }
public interface JooqEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedJooqEndpointProducerBuilder advanced() {
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface JGroupsEndpointBuilder              extends                  JGroupsEndpointConsumerBuilder, JGroupsEndpointProducerBuilder {          default AdvancedJGroupsEndpointBuilder advanced() {
private boolean mKNXConnectionEstablished;   public void activate(ComponentContext componentContext) {   logger.info("Calimero library version {}", Settings.getLibraryVersion());    logger.trace("KNXBinding: activating");    KNXConnection.addConnectionListener(this);    mKNXBusReaderScheduler.start();
public interface ApnsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedApnsEndpointProducerBuilder advanced() {
else {                      callback.process(entry.getFileStatus(), entry.getBlockLocations());                  }                 if (future.isCancelled()) {                      return;                  }              }
if (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {      stateHolder.reloadVariables();     } else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {     stateHolder.reloadVariables();     } else {      logger.warn("Unknown action {}", bindingConfig.getAction());     }
populateNearCache(clientMap, 1000);         HazelcastInstance member = hazelcastFactory.newHazelcastInstance();          final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);  private static final int DEFAULT_NUMBER_OF_READ_BUFFERS = 128;  private static final int DEFAULT_NUMBER_OF_WRITE_BUFFERS = 128; private static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 128 * 1024;   private static final boolean DEFAULT_ALLOW_SPILLING = true;
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {    if (this instanceof SingleOutputStreamOperator) {     ((SingleOutputStreamOperator<?, ?>) this).setMutability(false);    }
processEngineConfiguration.setClock(testClock);     testClock.setCurrentTime(new Date(0));      ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testRepetitionJobEvents");      Job theJob = managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();      assertNotNull(theJob);
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
public interface JettyHttpEndpointBuilder9              extends                  EndpointConsumerBuilder {          default AdvancedJettyHttpEndpointBuilder9 advanced() {
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(247);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {System.out.println($ctx.toStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void test_Decode_Return_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
}    public void glTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glTexParameterfv(target, pname, params);    }    public void glTexParameteri (int target, int pname, int param) {
public interface AdvancedFileEndpointBuilder              extends                  AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {          default FileEndpointBuilder basic() {
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(730);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {System.out.println($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());                  for (ChannelSftp.LsEntry f : files) {                      if (f.getFilename().equals(file.getFileName())) {                         newLastModified = f.getAttrs().getATime();                          newLength = f.getAttrs().getSize();                      }                  }
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface EventAdminEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedEventAdminEndpointProducerBuilder advanced() {
*       * @return the message.       */     @Message(id = 10864, value = "Error obtaining input stream from URL %s -- %s")      String errorObtainingUrlStream(String url, String message);      /**
public interface Sjms2EndpointBuilder              extends                  Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {          default AdvancedSjms2EndpointBuilder advanced() {
public void testMultipleAlternativesWithCommonLabel_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(561);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public static StreamPingPacket readBuffer(short packetType, ChannelBuffer buffer) {           assert packetType == PACKET_TYPE;          if (buffer.readableBytes() < 4) {               buffer.resetReaderIndex();               return null;           }
private int port = Integer.valueOf(System.getProperty("port"));   @Test  public void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
public interface BeanValidatorEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedBeanValidatorEndpointBuilder advanced() {
*       * @return the message.       */     @Message(id = 10851, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
log.debug("Current thread: " + Thread.currentThread());      log.debug("Creating the encounter object");     }    Context.getEncounterService().createEncounter(encounter);
public interface AdvancedYammerEndpointBuilder              extends                  AdvancedYammerEndpointConsumerBuilder, AdvancedYammerEndpointProducerBuilder {          default YammerEndpointBuilder basic() {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
public interface S3EndpointBuilder              extends                  S3EndpointConsumerBuilder, S3EndpointProducerBuilder {          default AdvancedS3EndpointBuilder advanced() {
protected void flushDirtyLogs() {          log.debug("Checking for dirty logs to flush...");         final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.asMap(logManager.logsByTopicPartition()).entrySet();          for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {              final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();              final Log kafkaLog = topicAndPartitionLogEntry.getValue();
List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);     assertEquals(12, tokens.size());    }    @Test
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
public interface CaffeineLoadCacheEndpointBuilder              extends                  CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {          default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
buf[count++] = ((byte)(0x80 | ((uc >> 6) & 0x3f)));                  buf[count++] = ((byte)(0x80 | (uc & 0x3f)));              } else {                 if(3 < buf.length - count) {                      flushBuffer();                  }                  buf[count++] =((byte)(0xe0 | ((c >> 12))));
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);   }
return additionalReplacements;    }   final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
sum += mBuf.get(pId % 16);            if (DEBUG_MODE) {             buf.DATA.flip();              CommonUtils.printByteBuffer(LOG, buf.DATA);            }            buf.DATA.clear();
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (channel == null) {              initializeChannel();              if (endpoint.isSynchronous()) {                 LOG.info("Getting synchronous method stub from channel");                  grpcStub = GrpcUtils.createGrpcBlockingStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());              } else {                 LOG.info("Getting asynchronous method stub from channel");
final Sink output = new Sink("allUsers.json").withInputs(union);    expectedPlan.setSinks(output);   assertEquals(expectedPlan, actualPlan);   }  }
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);          }          return result;      }
Map<String, Object> map = (Map<String, Object>) nestedProperties      .get("properties");    assertNotNull(map);   assertEquals(3, map.size());    assertEquals("foo", ((Map<String, Object>) map.get("map")).get("name"));   }
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    }   public void addBlock(int fileId, int blockIndex, long blockLength) {      if (INACTIVE) {        return;      }
*/    private void faultTestDataCheck(List<Pair<Integer, String>> answer) throws IOException {      TachyonFS tfs = mLocalTachyonClusterMultiMaster.getClient();     List<String> files = mTfs.ls(Constants.PATH_SEPARATOR, true);      Assert.assertEquals(answer.size(), files.size());      for (int k = 0; k < answer.size(); k ++) {        Assert.assertEquals(answer.get(k).getSecond(), tfs.getFile(answer.get(k).getFirst()));
});          AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();         processor.open(w, request);          processor.invokeWebSocketProtocol(w, "yoWebSocket");          processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent("Disconnect", DISCONNECT, w));
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10853, value = "Unexpected initial path key %s")      IllegalStateException unexpectedInitialPathKey(String key);      /**
serverInventoryView.start();          final List<Pair<? extends MasterRunnable, Duration>> masterRunnables = Lists.newArrayList();         segmentSettingsAtomicReference = configManager.watch(MasterSegmentSettings.CONFIG_KEY, MasterSegmentSettings.class,(new MasterSegmentSettings.Builder()).build());          masterRunnables.add(Pair.of(new MasterComputeManagerRunnable(), config.getMasterPeriod()));          if (indexingServiceClient != null) {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
cancelledKeys = 0;                 runAllTasks();                  selector = this.selector;                 processSelectedKeys();                  selector = this.selector;                  if (isShutdown()) {
public interface AdvancedGlanceEndpointBuilder              extends                  EndpointProducerBuilder {          default GlanceEndpointBuilder basic() {
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
final Object child = new ParseTreeTablePresentation(null).getChild(tree, 1);          Assert.assertTrue("Invalid child type", child instanceof DetailAST);          Assert.assertEquals("Invalid child token type",                 TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());      }      @Test
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
executeDataSet(ADMIN_INITIAL_DATA_XML);    AdministrationService as = Context.getAdministrationService();   Assert.assertEquals(20, as.getAllGlobalProperties().size());    as.purgeGlobalProperty(as.getGlobalPropertyObject("a_valid_gp_key"));   Assert.assertEquals(19, as.getAllGlobalProperties().size());   }   /**
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
*/      @Test      public void sync_whenManyGettersAndLotsOfWaiting() throws Exception {         int callTimeout = 5000;          Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeout);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);
RSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,      RSocketMessageHandler messageHandler) {     return new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),      messageHandler.serverAcceptor());    }   }
final float ty = target.y - y * dot;     final float tz = target.z - z * dot;     final float l2 = tx * tx + ty * ty + tz * tz;    final float dl = (l2 == 0 || l2 == 1f) ? 1f : 1f / (float)Math.sqrt(l2);    return this.mul((float)Math.cos(theta)).add(tx * dl * st, ty * dl * st, tz * dl * st).nor();    }
*/   public GarageDoorData getGarageData() throws InvalidLoginException,     IOException {   logger.debug("Retreiveing door data");    String url = String.format(      "%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s",      WEBSITE, enc(appId), enc(getSecurityToken()));
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
log.trace("URL from classloader: " + url);                  }                 url = customerResourceLocator(url);                  String urlPath = url.getFile();                  urlPath = URLDecoder.decode(urlPath, "UTF-8");
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
@Test      public void test_Decode_Return_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
}    if (doScroll) {    smoothScrollTo(mode == MODE_PULL_DOWN_TO_REFRESH ? -headerHeight : headerHeight);    }   }
protected boolean isRunning = true;   /**    * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such
public interface AdvancedHazelcastSetEndpointBuilder              extends                  AdvancedHazelcastSetEndpointConsumerBuilder, AdvancedHazelcastSetEndpointProducerBuilder {          default HazelcastSetEndpointBuilder basic() {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
LOG.warn("DataNode is out of memory. Will retry in 30 seconds.", ie);          try {            Thread.sleep(30 * 1000);          } catch (InterruptedException e) {
for (AtmosphereResource r : config.resourcesFactory().findAll()) {              try {                  r.resume().close();             } catch (IOException e) {                  logger.trace("", e);              }          }
*       * @return the message.       */     @Message(id = 10857, value = "Only 1 piece of content is currently supported (AS7-431)")      String as7431();      /**
log.trace("URL from classloader: " + url);                  }                 url = customerResourceLocator(url);                  String urlPath = url.getFile();                  urlPath = URLDecoder.decode(urlPath, "UTF-8");
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(561);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
public interface HazelcastRingbufferEndpointBuilder              extends                  EndpointProducerBuilder {          default AdvancedHazelcastRingbufferEndpointBuilder advanced() {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(561);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
if (expMsg.contains("No FileSystem for scheme")) {          newMsg =              "Unsupported filesystem scheme found in the backup target url. Error Message: "                 + newMsg;          LOG.error(newMsg);          throw new IOException(newMsg);        } else {
ConceptNumeric cn = new ConceptNumeric(c);     for (ConceptSet cSet : cn.getConceptSets()) {     Assert.assertSame(cn, cSet.getConcept());     }    }
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
ControlFlowGraph<Node> computeCFG() {     logger.info("Computing Control Flow Graph");      Tracer tracer = newTracer("computeCFG");      ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);      process(cfa);
UnderFileSystem ufs = UnderFileSystem.get(path);      DataInputStream is = new DataInputStream(ufs.open(path));     JsonParser parser = JsonObject.createObjectMapper().getJsonFactory().createJsonParser(is);      while (true) {        EditLogOperation op;
public void testMultipleAlternativesWithCommonLabel_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(561);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
command.toString(), repeatCount);                   if (command.compareTo(oldPercent) > 0) {                       for (int i = 0; i < repeatCount; i++) {                          Thread.sleep(50);                           if (BindingType.brightness.equals(type)) {                               sendIncrease(bulb, rgbwSteps, bridgeId);                           } else if (BindingType.colorTemperature.equals(type)) {
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(500);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface TwitterTimelineEndpointBuilder              extends                  TwitterTimelineEndpointConsumerBuilder, TwitterTimelineEndpointProducerBuilder {          default AdvancedTwitterTimelineEndpointBuilder advanced() {
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
LOG.debug("Initializing sortmerger...");     Sorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,     this.parentTask, this.serializer, this.comparator, 32 * 1024 * 1024);     runPartialSorter(sorter, NUM_RECORDS, 2);    }
AtmosphereRequest request = r.getRequest();          String cacheHeader = request.getHeader(X_CACHE_DATE);         r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.currentTimeMillis()));          if (cacheHeader == null || cacheHeader.isEmpty()) {              return Collections.emptyList();          }
* @see <a href="http:       */      public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL()                  + "trends/daily.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : ""), false));      }
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleAlternativesWithCommonLabel_4() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(730);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {System.out.println($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
}   public void glBindTexture (int target, int texture) {   GL.glBindTexture(target, texture);   }   public void glBlendFunc (int sfactor, int dfactor) {
@Override    public void create () {     ByteBuffer bytebuffer = BufferUtils.newUnsafeByteBuffer(1000 * 1000);    BufferUtils.freeMemory(bytebuffer);     ByteBuffer bb = BufferUtils.newByteBuffer(8);     CharBuffer cb = BufferUtils.newCharBuffer(8);
check = false, init = true, lazy = true, stubevent = true,                  reconnect = "reconnect", sticky = true, proxy = "javassist", stub = "stub",                  cluster = "failover", connections = 1, callbacks = 1, onconnect = "onconnect",                 ondisconnect = "ondisconnect", owner = "owner", layer = "layer", retries = 2,                  loadbalance = "random", async = true, actives = 1, sent = true,                  mock = "mock", validation = "validation", timeout = 2, cache = "cache",                  filter = {"default", "default"}, listener = {"default", "default"}, parameters = {"key1", "value1"}, application = "application",
}   public void glGenTextures (int n, IntBuffer textures) {   GL.glGenTextures(n, textures, Memory.getPosition(textures));   }   public int glGetError () {
@Override    public void process(Node externs, Node root) {     logger.info("Aliasing common strings");      NodeTraversal.traverse(compiler, root, this);
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, false, writer);      }  }
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler)
}      else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {       TypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();      mTypeSerializers.put(typeSerializer.getClass(), typeSerializer);      }     }     catch (ClassNotFoundException e) {
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String query = "start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file";          gen.get().addSnippet( "query1", createCypherSnippet( query ) );          String result = engine.execute( query )                 .dumpToString();          assertTrue( result.contains("File1") );          gen.get()                  .addSnippet( "result1", createQueryResultSnippet( result ) );
}      @Override     public boolean updateWorld() {          boolean repositioned = octree.repositionNodes();          boolean updated = dataBridge.updateWorld();
* @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the    *                     output view, which may have an underlying I/O channel to which it delegates.    */  public void serialize(T record, DataOutputView target) throws IOException;   /**    * De-serializes a record from the given source input view into the given target record instance.
this.bufferMemorySize = bufferMemorySize;      }     public Integer getRequestRequiredAcks() {          return requestRequiredAcks;      }
public void configure() {                  WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent("websocket");                  websocketComponent.setMinThreads(1);                 websocketComponent.setMaxThreads(11); from("websocket:                          .log(">>> Message received from BAR WebSocket Client : ${body}")
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
RSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,      RSocketMessageHandler messageHandler) {     return new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),      messageHandler.serverResponder());    }   }
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
public interface S3EndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedS3EndpointProducerBuilder advanced() {
protected void handleMultiMapTryLock(String[] args) {          String key = args[1];         long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;          boolean locked;          if (time == 0) {              locked = getMultiMap().tryLock(key);
public interface AdvancedJooqEndpointBuilder              extends                  AdvancedJooqEndpointConsumerBuilder, AdvancedJooqEndpointProducerBuilder {          default JooqEndpointBuilder basic() {
*       * @return Type of exception       */     public Class<? extends Exception> exceptionClass() {          return this.exceptionClass;      }
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* {@inheritDoc}       */      public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {         return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()                  + "trends/weekly.json?date=" + toDateStr(date)                  + (excludeHashTags ? "&exclude=hashtags" : "")));      }
, (args = args.rest()).first()        , args.rest());     case 10:     return invoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
public interface AdvancedFhirEndpointBuilder              extends                  AdvancedFhirEndpointConsumerBuilder, AdvancedFhirEndpointProducerBuilder {          default FhirEndpointBuilder basic() {
}     private boolean commandReadyToExecute(String trimmedLine) {      return !fullLineDelimiter && trimmedLine.endsWith(delimiter);     }     private void executeStatement(String command) throws SQLException, UnsupportedEncodingException {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*    * @param T The data type that the comparator works on.   */ public interface TypeComparator<T>  {    /**    * Computes a hash value for the given record. The hash value should include all fields in the record
break;            }            switch (schemeField.id) { case -1:                if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {                  struct.rqst = new WriteNotificationLogRequest();                  struct.rqst.read(iprot);
public interface AdvancedGooglePubsubEndpointBuilder              extends                  AdvancedGooglePubsubEndpointConsumerBuilder, AdvancedGooglePubsubEndpointProducerBuilder {          default GooglePubsubEndpointBuilder basic() {
ConfigurableEmbeddedServletContainerFactory factory = getFactory();    final Date[] date = new Date[1];    this.container = factory     .getEmbeddedServletContainer(new ServletContextInitializer() {       @Override       public void onStartup(ServletContext servletContext)         throws ServletException {
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(561);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(239);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage("helloForNone"));          }      }
*       * @return a message for the error.       */     @Message(id = 10831, value = "The master host controller cannot register slave host controllers as it's current running mode is '%s'")      String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);      /**
*/    public void compact(String tableOrRegionName, String columnFamily)      throws IOException,  InterruptedException {     compact(Bytes.toBytesBinary(tableOrRegionName), Bytes.toBytes(columnFamily));    }    /**
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {         return Status.createStatuseList(get(getApiBaseURL() + V1 + user +                  "/lists/" + id + "/statuses.json", new PostParameter[0],                  paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));      }
private final Request request;      private final Response response;     public CacheHttpURLConnection(Response response) {        super(response.request().url().url());        this.request = response.request();        this.response = response;
final Sink output = new Sink("allUsers.json").withInputs(union);    expectedPlan.setSinks(output);   assertEquals(expectedPlan, actualPlan);   }  }
import org.jboss.logging.MessageLogger;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller logger messages. See http:   * JBAS message id blocks.   * <p/>
