* * @return
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
*     * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return
* @see <a href:       */      public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {         return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +                  user + "/lists.json?cursor=" + cursor, true));      }
* * @return a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* * * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {Object}     * @return {
* @return nullToZero       */      private static Long nullToZero(Long value) {         return nullToZero(value);      }
*       * @return the message.       */     @Message(id = 15863, value = "%s is not a valid URL -- %s")    String invalidUrl(String url, String message);
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* *     * @return     *     *     *     *     *     *     *     *     *     *     *     */   private final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new DevirtualizePrototypeMethodsPass(compiler); } }
* * @return {              final Node targetNode = nodeService.byNodeId(nodeId);              return Optional.of(interfaceClass.cast(targetNode.getInterface(interfaceClass)));              }              catch (final NodeNotFoundException e) {                  return Optional.empty();              }          };      }     protected <T> Function<String, Optional<T>> createRemoteInterfaceProvider(Class<T> interfaceClass) {          return (nodeId) -> {              try {                  final Node targetNode = nodeService.byNodeId(nodeId);              return Optional.of(interfaceClass.cast(targetNode.getInterface(interfaceClass)));              }              catch (final NodeNotFoundException e) {                  return Optional.empty();              }          }
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
*     * @return this  *     */   private final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {is the fixed version  *     * @return this  *     */   }
* this.source = checkNotNull(source, "source");      this.classMatcher = checkNotNull(classMatcher, "classMatcher");      this.methodMatcher = checkNotNull(methodMatcher, "methodMatcher");     this.interceptors = ImmutableList.of(interceptors);    }    public ClassMatcher getClassMatcher() { is the fixed version * @return this.classMatcher;    }    public MethodMatcher getMethodMatcher() { is the fixed version * @return this.methodMatcher;    }
* * @param hashFunction the hash function  * @return the hash function  */ static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) { rng.nextBytes(bytes);      ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);      ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);     assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));      assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());     assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());
* @Test  public void testHealth() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871, value = "Unknown server %s")     IllegalStateException unknownServer(ServerIdentity server)      /**     * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15871,
* statistics.addHitTimeNano(System.nanoTime() - start);              if (hitCount == 1) {                  statistics.increaseCacheHits(hitCount);              } }          if (result && isStatisticsEnabled()) {              statistics.increaseCacheMisses(1);              statistics.addMissTimeNano(System.nanoTime() - start);              if (hitCount == 1) {                  statistics.increaseCacheHits(hitCount);              } }
* *     * @return     *     *     *     *     *     *     *     *     * @return     *     *     *     *     *     * @return     *     *     *     *     * @return     *     *     *     * @return     *     *     *     * @return     *     *     *     * @return     *     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *
* * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     *
* @return this  */     public final CompilerPassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ObjectPropertyStringPreprocess(compiler); } };
* @return *     Returns a reference to this object so that method calls can be chained together.  */      public DirectVmEndpointBuilder advanced() {         return this;     }

* @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)      private Duration dashboardWidgetDefaultCacheTime = Duration.minutes(1);     @Parameter(value = "dashboard_widget_default_cache_time", validator
* if (mod.getModuleActivator()!= null)       mod.getModuleActivator().willStart();     } catch (Throwable t) {      log.warn("Unable to call module's Activator.willStart() method", t);     }

* * @return The number of bytes written to the file system.  * @throws IOException If an I/O error occurs.  */    public long write(boolean write) throws IOException {      return write(write);    }
* @return this  */     public final CompilerPassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new CheckRegExp(compiler); } };
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
*     * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return *
* * * @return {

*       * @return the message.       */     @Message(id = 15851, value = "Operation targets host %s but that host is not registered")     String invalidOperationTargetHost(String name);
* * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     *
* @param timestamp the timestamp of the file       */      void put(String fileName, long timestamp) {         details.put(fileName, Long.toString(timestamp));      }
* * @return the predicate  */ public Predicate createPredicate(RouteContext routeContext) {         ExpressionType predicateType = getCompletePredicate();          if (predicateType!= null && predicate == null) {              predicate = predicateType.createPredicate(routeContext);          }
* @return *        import group.           */         public String getImportGroup() {              return this.importGroup;           }


* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* @author Stephane Nicoll   * @author Dominic Gunn   * @author András Deák   */  public class LiquibaseAutoConfigurationTests {
* * @expectedBodiesReceived("BC");          template.sendBody("direct:start", "Hello"); }
* @return this  */   public final CompilerPassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new NameMappedAnonymousFunctions(compiler); } };   private final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new NameMappedAnonymousFunctions(compiler); } };
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* "2: " + getCheckMessage(MSG_KEY_MISMATCH),          }          verify(checkConfig, getPath("InputPackageDeclarationDiffDirectoryAtParent.java"), expected);      }      @Test
* @return this  */ public final CompilerPassFactory removeUnreachableCode =        new CompilerPassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new RemoveUnreachableCode(compiler); } };
*     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return
* * @return {void}  */          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), is("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is(nullValue()));          assertThat(args.isGenerateBuilders(), is(false));
* @return this  */     public final PassFactoryDenormalizePassFactory denormalize =        new PassFactoryDenormalizePassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new DenormalizePass(compiler); } };
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* @return this  */    public final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ExtractPrototypeMemberDeclarations(compiler); } };
*     * @return     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public final CompilerPassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new AliasKeywords(compiler); } };
* * @return *     Returns a reference to this object so that method calls can be chained together.  */  public DeleteMapRequest withMapName(String mapName) {     setMapName(mapName);     return this; }
* @return this  */     public HotSwapPassFactory checkAccessControls() { return checkAccessControls; }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* String trustStorePassword = getProperty(properties, "trustStorePassword", keyStorePassword);         String keyManagerAlgorithm = properties.getProperty("keyManagerAlgorithm", TrustManagerFactory.getDefaultAlgorithm());          String trustManagerAlgorithm = properties.getProperty("trustManagerAlgorithm", TrustManagerFactory.getDefaultAlgorithm());
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 15802, value = "Interrupted awaiting final response from server %s on host %s") void interruptedAwaitingFinalResponse(String serverName, String hostName);
*     * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return
* @return *     Returns a reference to this object so that method calls can be chained together.  *  * @param parameter * @return *     Returns a reference to this object so that method calls can be chained together.  *  * @see OperationParameter#setName(String)  */ public Builder setName(String parameter) {    this.name = parameter;    return this;   }
* * @return a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    */
* grantGlobal(TEST_UTIL, toGroupEntry(GROUP_READ), Permission.Action.READ);     grantGlobal(TEST_UTIL, toGroupEntry(GROUP_WRITE), Permission.Action.WRITE);     assertEquals(5, AccessControlLists.getTablePermissions(conf, TEST_TABLE).size());      try {       assertEquals(5, AccessControlClient.getUserPermissions(systemUserConnection,            TEST_TABLE.toString()).size());      } catch (Throwable e) {        LOG.error("error during call of AccessControlClient.getUserPermissions. ", e);      }
*       * @return the message.       */     @Message(id = 15841, value = "Exception getting result from server %s: %s")     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return

*     * @return
* @Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })    public void testQueryStartedAfter() throws Exception {      Calendar calendar = new GregorianCalendar();     calendar.set(Calendar.YEAR, 2200);      calendar.set(Calendar.MONTH, 8);      calendar.set(Calendar.DAY_OF_MONTH, 30);      calendar.set(Calendar.HOUR_OF_DAY, 12);
* @return *     Returns a reference to this object so that method calls can be chained together.  */      public SoroushBotEndpointProducerBuilder advanced() { return new AdvancedSoroushBotEndpointProducerBuilder(this); }
* @return this  */     public final CompilerPassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ObjectPropertyStringPreprocess(compiler); } };
* @return this  */     public CompilerPassFactory checkStrictMode() { return new PassFactory("checkStrictMode", true); }
* context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_0.getUriString(), SecuritySubsystemParser::new);          context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_1.getUriString(), SecuritySubsystemParser::new);          context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_2.getUriString(), SecuritySubsystemParser::new);         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_3_0.getUriString(), SecuritySubsystemParser_3_0::new);      }  }
* @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @
* @return this  */     public final CompilerPassFactory closureCheckGetCssName() {      return new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ClosureCheckGetCssName(compiler); } };
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* @Test void testDistinct2()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct3()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct4()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct5()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct6()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct7()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct8()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct9()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct10()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct11()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct12()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct13()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct14()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct15()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(
* log.debug("Current thread: " + Thread.currentThread());      log.debug("Creating the encounter object");     }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
*       * @return the error message       */     @Message(id = 15836, value = SERVER_GROUP + " expects one and only one child: %s")     String serverGroupExpectsSingleChild(String rolloutPlan);      /**     * @return the error message       */     @Message(id = 15836, value = SERVER_GROUP + " expects one and only one child: %s")     String serverGroupExpectsSingleChild(String rolloutPlan);
* @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @

*         * @return The result of the query.  */          gen.get().addSnippet( "query-get-admins", createCypherSnippet( query ) );          String result = engine.execute( query )                .toString();          assertTrue( result.contains("Engin"));          gen.get().addSnippet( "o-query-get-admins", createQueryResultSnippet( result ) );
* @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.
*     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return
* @return this  */     public HotSwapPassFactory checkControlStructures() { return checkControlStructures; }
* @return this  */     public CompilerPassFactory ignoreCajaProperties() { return new PassFactory("ignoreCajaProperties", true); }
*     * @return *     The builder for this AdvancedLdapEndpointBuilder      */     default AdvancedLdapEndpointBuilder basic() {         return this;     }
* @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @
* Node node1 = Node.newString(Token.NAME, "f");      node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");     assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));    }
* @return this  */   public final CompilerPassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new NameMappedAnonymousFunctions(compiler); } };   private final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new NameMappedAnonymousFunctions(compiler); } };
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(), files[2].isFolder());      expected +=         getLsResultStr("/testRoot/testDir", files[3].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,              testUser, testUser, files[3].getPermission(), files[3].isFolder());      expected +=         getLsResultStr("/testRoot/testDir/testFileB", files[4].getCreationTimeMs(), 20,          LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[4].getPermission(), files[4].isFolder());      expected +=         getLsResultStr("/testRoot/testDir/testFileC", files[5].getCreationTimeMs(), 20,          LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[5].getPermission(), files[5].isFolder());      expected +=         getLsResultStr("/testRoot/testDir/testFileD", files[6].getCreationTimeMs(), 20,          LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[6].getPermission(), files[6].isFolder());      expected +=         getLsResultStr("/testRoot/testDir/testFileE", files[7].getCreationTimeMs(), 20,          LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[7].getPermission(), files[7].isFolder());      expected +=         getLsResultStr("/testRoot/testDir/testFileF", files[8].getCreationTimeMs(), 20,          LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[8].getPermission(), files[8].isFolder());      expected +=         getLsResultStr("/testRoot/testDir/testFileG", files[9].getCreationTimeMs(), 20,          LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[9].getPermission(), files[9].isFolder());      expected +=         getLsResultStr("/testRoot/testDir/testFileH", files[10].getCreationTimeMs(), 20,          LsCommand.STATE_FILE_IN_MEMORY, test
*       * @return the error message       */     @Message(id = 15836, value = SERVER_GROUP + " expects one and only one child: %s")     String serverGroupExpectsSingleChild(String rolloutPlan);      /**     * @return the error message       */     @Message(id = 15836, value = SERVER_GROUP + " expects one and only one child: %s")     String serverGroupExpectsSingleChild(String rolloutPlan);
* statistics.increaseCacheGets(1);                 statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }
* @return this  */     public final CompilerPassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new ClosureOptimizePrimitives(compiler); } };
